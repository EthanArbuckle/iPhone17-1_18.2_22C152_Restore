void sub_216A75DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,__int16 *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;

  __p = (__int16 *)(v30 - 112);
  sub_216889A04((void ***)&__p);
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754(&a12);
  __p = &a14;
  sub_216889A04((void ***)&__p);
  sub_21697B754(&a19);
  if ((a20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy>::RemoveChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  sub_216A73F8C((atomic_uint **)&v28);
  uint64_t v4 = sub_2169791E0(a1);
  memset(v24, 0, sizeof(v24));
  uint64_t v5 = sub_216A5B7B0((uint64_t *)(v4 + 112));
  (*(void (**)(unint64_t *__return_ptr))(*(void *)v5 + 136))(&v31);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v31))
  {
    if ((v32 & 4) != 0) {
      v6 = (uint64_t **)(*(uint64_t (**)(unint64_t *))((v32 & 0xFFFFFFFFFFFFFFF8) + 168))(&v31);
    }
    else {
      v6 = (uint64_t **)v31;
    }
  }
  else
  {
    v6 = (uint64_t **)v24;
  }
  uint64_t v25 = 0;
  v26 = 0;
  uint64_t v27 = 0;
  sub_21698FA28(&v25, *v6, v6[1], v6[1] - *v6);
  v7 = (void ***)sub_2168EE084((uint64_t)&v31);
  unint64_t v31 = (unint64_t)v24;
  sub_216889A04(v7);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v31);
  v8 = (uint64_t *)v25;
  unint64_t v9 = v31;
  if ((uint64_t *)v25 == v26)
  {
LABEL_9:
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v10 = -v25;
    while ((*v8 & 0xFFFFFFFFFFFFFFF8) != (v31 & 0xFFFFFFFFFFFFFFF8))
    {
      ++v8;
      v10 -= 8;
      if (v8 == v26) {
        goto LABEL_9;
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression(a2, &v29);
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v29);
    sub_216A8E2D8((void *)(8 - v10), v26, (void *)-v10);
    for (i = v26; i != v13; --i)
    {
      uint64_t v16 = *(i - 1);
      uint64_t v15 = v16;
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    v26 = v13;
    if ((uint64_t *)v25 == v13)
    {
      v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v18, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28);
    }
    else
    {
      v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      sub_216A6A718(v17, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28, (uint64_t **)&v25);
    }
    v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v19, a2, &v23);
    uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v23);
    if ((IsDormant & 1) == 0)
    {
      unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
      pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v23);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v23);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
    sub_21697C414(&v29);
    uint64_t v11 = 1;
    unint64_t v9 = v31;
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
  v24[0] = (void **)&v25;
  sub_216889A04(v24);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v11;
}

void sub_216A7629C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy>::MoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, char *a4, int a5)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  sub_216A73F8C(v55);
  sub_216A76AB0(a2, a4, &v54);
  uint64_t v10 = sub_21697F2E0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v10, &v51);
  uint64_t v11 = v54;
  v12 = v51;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v51 + 1);
  sub_21697C414(&v51);
  if (a5 == -2 && v11 == v12) {
    goto LABEL_59;
  }
  uint64_t v13 = sub_2169791E0(a1);
  __p = 0;
  v49 = 0;
  uint64_t v50 = 0;
  uint64_t v14 = sub_216A5B7B0((uint64_t *)(v13 + 112));
  (*(void (**)(void ***__return_ptr))(*(void *)v14 + 136))(&v56);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v56))
  {
    if ((v57 & 4) != 0) {
      p_p = (void **)(*(uint64_t (**)(void ***))((v57 & 0xFFFFFFFFFFFFFFF8) + 168))(&v56);
    }
    else {
      p_p = v56;
    }
  }
  else
  {
    p_p = &__p;
  }
  v51 = 0;
  v52 = 0;
  uint64_t v53 = 0;
  sub_21698FA28(&v51, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((unsigned char *)p_p[1] - (unsigned char *)*p_p) >> 3);
  sub_2168EE084((uint64_t)&v56);
  v56 = &__p;
  sub_216889A04(&v56);
  sub_216A65908(a3, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v47);
  if (SHIBYTE(v50) < 0) {
    operator delete(__p);
  }
  uint64_t v16 = sub_21697F2E0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v46);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (a5 == -2 && v46 == *(void *)a2)
  {
    if (v51 == v52)
    {
      v17 = v51;
    }
    else
    {
      v17 = v51;
      while ((*v17 & 0xFFFFFFFFFFFFFFF8) != (v47 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v17 == v52)
        {
          v17 = v52;
          break;
        }
      }
    }
    unint64_t v18 = (unint64_t)((char *)v17 - (char *)v51) >> 3;
  }
  else if (v52 - v51 >= (unint64_t)a5)
  {
    LODWORD(v18) = a5;
  }
  else
  {
    LODWORD(v18) = v52 - v51;
  }
  sub_216A73F8C((atomic_uint **)&v45);
  uint64_t v19 = sub_2169791E0(a1);
  v56 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v20 = sub_216A5B7B0((uint64_t *)(v19 + 112));
  (*(void (**)(void ****__return_ptr))(*(void *)v20 + 136))(&v59);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v59))
  {
    if ((v60 & 4) != 0) {
      v21 = (void ***)(*(uint64_t (**)(void ****))((v60 & 0xFFFFFFFFFFFFFFF8) + 168))(&v59);
    }
    else {
      v21 = v59;
    }
  }
  else
  {
    v21 = &v56;
  }
  __p = 0;
  v49 = 0;
  uint64_t v50 = 0;
  sub_21698FA28(&__p, (uint64_t *)*v21, (uint64_t *)v21[1], v21[1] - *v21);
  v22 = (void ***)sub_2168EE084((uint64_t)&v59);
  v59 = &v56;
  sub_216889A04(v22);
  v23 = (char *)__p;
  if (__p != v49)
  {
    while ((*(void *)v23 & 0xFFFFFFFFFFFFFFF8) != (v47 & 0xFFFFFFFFFFFFFFF8))
    {
      v23 += 8;
      if (v23 == v49)
      {
        v23 = v49;
        break;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v56);
  if (v46 == *(void *)a2)
  {
    uint64_t v24 = v23 - (unsigned char *)__p;
    if ((v47 & 0xFFFFFFFFFFFFFFF8) == (*(void *)a4 & 0xFFFFFFFFFFFFFFF8)
      && (v18 == ((unint64_t)v24 >> 3)
       || ((unint64_t)v24 >> 3) + 1 == v18))
    {
      goto LABEL_54;
    }
    BOOL v26 = (int)v18 > v24 >> 3;
    uint64_t v27 = v51;
    if (v51 != v52)
    {
      while ((*v27 & 0xFFFFFFFFFFFFFFF8) != (v47 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v27 == v52)
        {
          uint64_t v27 = v52;
          break;
        }
      }
    }
    sub_216A8E2D8(v27 + 1, v52, v27);
    LODWORD(v18) = v18 - v26;
    for (i = v52; i != v28; --i)
    {
      uint64_t v31 = *(i - 1);
      uint64_t v30 = v31;
      if ((v31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    v52 = v28;
  }
  else
  {
    sub_216A8E2D8((void *)v23 + 1, v49, v23);
    for (j = v49; j != v32; j -= 8)
    {
      uint64_t v35 = *((void *)j - 1);
      uint64_t v34 = v35;
      if ((v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    v49 = v32;
    if (__p == v32)
    {
      v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v45);
      v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v38, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, &v59);
      uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v59);
      if ((IsDormant & 1) == 0)
      {
        unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
        pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (atomic_uint **)&v59);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v59);
    }
    else
    {
      v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      sub_216A6A718(v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v45, (uint64_t **)&__p);
    }
  }
  v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  v42 = sub_21697F2E0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v42, &v59);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v59, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v54);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
  sub_21697C414(&v59);
  sub_216A6BFEC(&v51, (char *)&v51[(int)v18], a4);
  v43 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  sub_216A6A718(v43, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v55, &v51);
LABEL_54:
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v56);
  v56 = &__p;
  sub_216889A04(&v56);
  if ((v45 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_21697C414(&v46);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __p = &v51;
  sub_216889A04((void ***)&__p);
LABEL_59:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v54 + 1);
  sub_21697C414(&v54);
  if (((uint64_t)v55[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v55[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return 1;
}

void sub_216A76924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,void **p_p)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 88));
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&p_p);
  p_p = (void **)&__p;
  sub_216889A04(&p_p);
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754(&a10);
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __p = &a18;
  sub_216889A04((void ***)&__p);
  sub_21697B754(&a21);
  if ((a22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void ***sub_216A76AB0@<X0>(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, void *a2@<X1>, _DWORD *a3@<X8>)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName((uint64_t)EmptyString))
  {
    return pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression(a1, a3);
  }
  else
  {
    *(void *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    return (void ***)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy>::CanMoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, void *a4, int a5, uint64_t a6)
{
  sub_216A73F8C((atomic_uint **)&v42);
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v12) & 1) == 0)
  {
    if (a6)
    {
      uint64_t v13 = "Layer is not editable";
      goto LABEL_13;
    }
LABEL_14:
    BOOL v18 = 0;
    goto LABEL_15;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    if (a6)
    {
      uint64_t v13 = "Object does not exist";
LABEL_13:
      MEMORY[0x21D4477E0](a6, v13);
      goto LABEL_14;
    }
    goto LABEL_14;
  }
  uint64_t v14 = (uint64_t **)sub_21697F2E0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v14, &v38);
  uint64_t v15 = sub_216851B24((uint64_t)&v38);
  uint64_t v16 = sub_216851B24((uint64_t)a1);
  uint64_t v17 = v39;
  if (v39 && atomic_fetch_add_explicit((atomic_uint *volatile)(v39 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  if (v15 != v16)
  {
    if (a6)
    {
      uint64_t v13 = "Cannot reparent to another layer";
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  sub_216A76AB0(a2, a4, &v40);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v40))
  {
    if (!a6)
    {
LABEL_24:
      BOOL v18 = 0;
      goto LABEL_25;
    }
    v23 = "Invalid name";
LABEL_23:
    MEMORY[0x21D4477E0](a6, v23);
    goto LABEL_24;
  }
  uint64_t v20 = sub_21697F2E0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v20, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v38);
  uint64_t v21 = v38;
  uint64_t v22 = *(void *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v38 + 1);
  sub_21697C414(&v38);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (v21 != v22)
  {
    uint64_t v24 = sub_21697F2E0(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v24, &v38);
    BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v38 + 1);
    sub_21697C414(&v38);
    if (!HasPrefix)
    {
      uint64_t v26 = sub_2169791E0(a1);
      __p = 0;
      v36 = 0;
      uint64_t v37 = 0;
      sub_216A6A608(v26, (uint64_t **)&__p, &v38);
      v31[0] = &__p;
      sub_216889A04(v31);
      unint64_t v27 = (unint64_t)(v39 - v38) >> 3;
      if (a5 != -1) {
        LODWORD(v27) = a5;
      }
      if (v27 == -2 || (int)v27 <= (unint64_t)((v39 - v38) >> 3))
      {
        sub_216A65908(a3, (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v34);
        if (SHIBYTE(v37) < 0) {
          operator delete(__p);
        }
        unint64_t v28 = sub_21697F2E0(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v33);
        sub_21697B754(&__p);
        sub_216A73F8C((atomic_uint **)&v32);
        uint64_t v29 = sub_2169791E0(a1);
        memset(v31, 0, sizeof(v31));
        sub_216A6A608(v29, (uint64_t **)v31, &__p);
        v43 = v31;
        sub_216889A04((void ***)&v43);
        uint64_t v30 = __p;
        if (__p != v36)
        {
          while ((*v30 & 0xFFFFFFFFFFFFFFF8) != (v34 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v30 == v36)
            {
              uint64_t v30 = v36;
              break;
            }
          }
        }
        BOOL v18 = v30 != v36;
        if (a6 && v30 == v36) {
          MEMORY[0x21D4477E0](a6, "Coding error: Object is not in its parent's children");
        }
        v31[0] = &__p;
        sub_216889A04(v31);
        if ((v32 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        sub_21697B754(&v33);
        if ((v34 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if (a6) {
          MEMORY[0x21D4477E0](a6, "Invalid index");
        }
        BOOL v18 = 0;
      }
      __p = &v38;
      sub_216889A04((void ***)&__p);
      goto LABEL_25;
    }
    if (!a6) {
      goto LABEL_24;
    }
    v23 = "Cannot reparent object under itself";
    goto LABEL_23;
  }
  BOOL v18 = 1;
LABEL_25:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
  sub_21697C414(&v40);
LABEL_15:
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v18;
}

void sub_216A76F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23)
{
  __p = &a22;
  sub_216889A04((void ***)&__p);
  sub_21697B754((_DWORD *)(v23 - 88));
  uint64_t v25 = *(void *)(v23 - 80);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy>::CanRemoveChildForBatchNamespaceEdit(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  sub_216A73F8C((atomic_uint **)&v19);
  v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v7))
  {
    uint64_t v8 = sub_2169791E0(a1);
    memset(v15, 0, sizeof(v15));
    uint64_t v9 = sub_216A5B7B0((uint64_t *)(v8 + 112));
    (*(void (**)(void ****__return_ptr))(*(void *)v9 + 136))(&v20);
    if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
    {
      if ((v21 & 4) != 0) {
        uint64_t v10 = (uint64_t **)(*(uint64_t (**)(void ****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
      }
      else {
        uint64_t v10 = (uint64_t **)v20;
      }
    }
    else
    {
      uint64_t v10 = (uint64_t **)v15;
    }
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    sub_21698FA28(&v16, *v10, v10[1], v10[1] - *v10);
    v12 = (void ***)sub_2168EE084((uint64_t)&v20);
    uint64_t v20 = v15;
    sub_216889A04(v12);
    uint64_t v13 = v16;
    if (v16 != v17)
    {
      while ((*v13 & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v13 == v17)
        {
          uint64_t v13 = v17;
          break;
        }
      }
    }
    BOOL v11 = v13 != v17;
    if (a4 && v13 == v17) {
      MEMORY[0x21D4477E0](a4, "Object does not exist");
    }
    v15[0] = (void **)&v16;
    sub_216889A04(v15);
  }
  else
  {
    if (a4) {
      MEMORY[0x21D4477E0](a4, "Layer is not editable");
    }
    BOOL v11 = 0;
  }
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v11;
}

void sub_216A77280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  a10 = (void **)&a13;
  sub_216889A04(&a10);
  if ((a16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CreateSpec(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v1 = (uint64_t *)(a1 + 8);
  if (v2) {
    sub_216850B68(v1);
  }

  pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CreateSpec();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CreateSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
    uint64_t Spec = pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(a1, a2, a3, a4);
    if (Spec)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v18);
      sub_216A775C0((atomic_uint **)__p);
      uint64_t v9 = *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      if ((v9 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::TfToken>();
    }
    uint64_t v18 = "sdf/childrenUtils.cpp";
    unint64_t v19 = "CreateSpec";
    uint64_t v20 = 101;
    uint64_t v21 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChil"
          "dPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl__pxrRese"
          "rved__::Sdf_PrimChildPolicy]";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C755200, a3, (uint64_t)__p);
    int v10 = v16;
    BOOL v11 = (void **)__p[0];
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    uint64_t v13 = __p;
    if (v10 < 0) {
      uint64_t v13 = v11;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to create spec of type '%s' at <%s>", (const char *)v13, Text);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
  }
  else
  {
    uint64_t v18 = "sdf/childrenUtils.cpp";
    unint64_t v19 = "CreateSpec";
    uint64_t v20 = 90;
    uint64_t v21 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChil"
          "dPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl__pxrRese"
          "rved__::Sdf_PrimChildPolicy]";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid object type");
    return 0;
  }
  return Spec;
}

void sub_216A7753C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
}

pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *sub_216A775C0@<X0>(atomic_uint **a1@<X8>)
{
  result = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!result) {
    result = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  v3 = (atomic_uint *)*((void *)result + 4);
  *a1 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      *a1 = v4;
    }
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::IsValidName(pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  if ((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }

  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName((uint64_t)EmptyString);
}

double pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CanRename@<D0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, (uint64_t *)__p);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)__p);
  char v4 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v3);
  uint64_t v5 = __p[1];
  if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(void *))(*(void *)v5 + 8))(v5);
  }
  if (v4) {
    pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::IsValidName();
  }
  sub_216779094(__p, "Layer is not editable");
  double result = *(double *)__p;
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(void *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 24) = 1;
  return result;
}

void sub_216A778F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

_DWORD *sub_216A779A8@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, _DWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a1, &v6);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, a2, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_21697C414(&v6);
}

void sub_216A77A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::Rename(pxrInternal__aapl__pxrReserved__::SdfSpec *a1)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, v1);
  pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::IsValidName();
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::SetChildren(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, long long *a3)
{
  uint64_t v113 = *MEMORY[0x263EF8340];
  sub_216A775C0((atomic_uint **)&v106);
  long long v104 = 0uLL;
  unint64_t v105 = 0;
  __p[1] = 0;
  uint64_t v98 = 0;
  __p[0] = &__p[1];
  for (long long i = *a3; (void)i != *((void *)&i + 1); sub_216A8E8F0(&i))
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A8E870((uint64_t *)&i, v6, v7);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v8)) {
      goto LABEL_13;
    }
    BOOL v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A8E870((uint64_t *)&i, v9, v10);
    sub_216A664D8(v11, (uint64_t)&v107);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v101);
    if (SHIBYTE(v108) < 0) {
      operator delete((void *)v107);
    }
    sub_216A8E144((uint64_t **)__p, (uint64_t *)&v101, (uint64_t *)&v101);
    if (v9) {
      goto LABEL_9;
    }
    v12 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A8E870((uint64_t *)&i, v9, v10);
    uint64_t v13 = sub_216A663FC(v12);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v13, &j);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&j, &v107);
    uint64_t v14 = v107;
    uint64_t v15 = *(void *)a2;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v107 + 1);
    sub_21697C414(&v107);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
    sub_21697C414(&j);
    if (v14 != v15) {
LABEL_9:
    }
      char v16 = 1;
    else {
      char v16 = 0;
    }
    if ((v101 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v101 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v16)
    {
LABEL_13:
      uint64_t v17 = (atomic_uint **)sub_216A8E870((uint64_t *)&i, v9, v10);
      uint64_t v18 = *((void *)&v104 + 1);
      if (*((void *)&v104 + 1) >= v105)
      {
        uint64_t v20 = sub_216A8E01C((atomic_uint ***)&v104, v17);
      }
      else
      {
        unint64_t v19 = *v17;
        **((void **)&v104 + 1) = *v17;
        if (v19) {
          atomic_fetch_add(v19, 1u);
        }
        uint64_t v20 = (char *)(v18 + 8);
      }
      *((void *)&v104 + 1) = v20;
    }
  }
  sub_2168CB05C((uint64_t)__p, (void *)__p[1]);
  uint64_t v21 = sub_2169791E0(a1);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v98 = 0;
  uint64_t v22 = sub_216A5B7B0((uint64_t *)(v21 + 112));
  (*(void (**)(long long *__return_ptr))(*(void *)v22 + 136))(&i);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&i))
  {
    if ((BYTE8(i) & 4) != 0) {
      uint64_t v23 = (uint64_t **)(*(uint64_t (**)(long long *))((*((void *)&i + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&i);
    }
    else {
      uint64_t v23 = (uint64_t **)i;
    }
  }
  else
  {
    uint64_t v23 = (uint64_t **)__p;
  }
  long long v107 = 0uLL;
  uint64_t v108 = 0;
  sub_21698FA28(&v107, *v23, v23[1], v23[1] - *v23);
  uint64_t v24 = (void ***)sub_2168EE084((uint64_t)&i);
  *(void *)&long long i = __p;
  sub_216889A04(v24);
  *((void *)&i + 1) = 0;
  uint64_t v110 = 0;
  *(void *)&long long i = (char *)&i + 8;
  unint64_t v101 = 0;
  v102 = 0;
  unint64_t v103 = 0;
  sub_216973388((char **)&v101, (uint64_t)(*((void *)&v104 + 1) - v104) >> 3);
  for (long long j = v104; (void)j != *((void *)&j + 1); sub_216A78D94(&j))
  {
    unint64_t v27 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A78D14((uint64_t *)&j, v25, v26);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v27))
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      uint64_t v98 = 181;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimCh"
            "ildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy::Val"
            "ueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
      goto LABEL_92;
    }
    uint64_t v30 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A78D14((uint64_t *)&j, v28, v29);
    sub_216A664D8(v30, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v86);
    if (SHIBYTE(v98) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v31 = v102;
    if ((unint64_t)v102 >= v103)
    {
      int v33 = sub_216973984((char **)&v101, (uint64_t *)&v86);
    }
    else
    {
      unint64_t v32 = v86;
      uint64_t *v102 = v86;
      if ((v32 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v31 &= 0xFFFFFFFFFFFFFFF8;
      }
      int v33 = (char *)(v31 + 1);
    }
    v102 = (uint64_t *)v33;
    sub_216A8E144((uint64_t **)&i, (uint64_t *)&v86, (uint64_t *)&v86);
    if ((v34 & 1) == 0)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      uint64_t v98 = 188;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimCh"
            "ildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy::Val"
            "ueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate child");
LABEL_90:
      if ((v86 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
LABEL_92:
      BOOL v59 = 0;
      goto LABEL_97;
    }
    v36 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A78D14((uint64_t *)&j, v34, v35);
    uint64_t v37 = (uint64_t **)sub_216A663FC(v36);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v37, (uint64_t *)__p);
    uint64_t v38 = sub_216851B24((uint64_t)__p);
    uint64_t v41 = sub_216851B24((uint64_t)a1);
    unint64_t v42 = __p[1];
    if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(void *))(*(void *)v42 + 8))(v42);
    }
    if (v38 != v41)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      uint64_t v98 = 193;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimCh"
            "ildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy::Val"
            "ueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
      goto LABEL_90;
    }
    v43 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A78D14((uint64_t *)&j, v39, v40);
    v44 = sub_216A663FC(v43);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v44, &v111);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v111, __p);
    if (*(void **)a2 == __p[0])
    {
      BOOL HasPrefix = 0;
    }
    else
    {
      v48 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A78D14((uint64_t *)&j, v45, v46);
      v49 = sub_216A663FC(v48);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v49, &k);
      BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&k);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
      sub_21697C414(&k);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_21697C414(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v111 + 1);
    sub_21697C414(&v111);
    if (HasPrefix)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      uint64_t v98 = 203;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimCh"
            "ildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy::Val"
            "ueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      goto LABEL_90;
    }
    if ((v86 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v96);
  *(_OWORD *)__p = v107;
  while (__p[0] != __p[1])
  {
    v52 = (uint64_t *)sub_2169CEBC8((uint64_t *)__p, v50, v51);
    if ((void *)((char *)&i + 8) == sub_216A8E1C4((uint64_t)&i, v52))
    {
      v55 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_2169CEBC8((uint64_t *)__p, v53, v54);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a2, v55, &j);
      v56 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v56, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&j);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
      sub_21697C414(&j);
    }
    sub_2169CECC4(__p);
  }
  sub_216A8E254((uint64_t)&j, (uint64_t *)v107, *((uint64_t **)&v107 + 1));
  for (long long k = v104; ; sub_216A78D94(&k))
  {
    BOOL v59 = k == *((void *)&k + 1);
    if ((void)k == *((void *)&k + 1)) {
      break;
    }
    uint64_t v60 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A78D14((uint64_t *)&k, v57, v58);
    sub_216A664D8(v60, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v93);
    if (SHIBYTE(v98) < 0) {
      operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v93, &v91);
    v63 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A78D14((uint64_t *)&k, v61, v62);
    v64 = sub_216A663FC(v63);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v64, __p);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, &v90);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_21697C414(__p);
    if (v90 == *(void *)a2)
    {
      int v65 = 10;
    }
    else
    {
      if ((void *)((char *)&j + 8) != sub_216A8E1C4((uint64_t)&j, &v93))
      {
        v66 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v66, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v91);
      }
      sub_216A775C0((atomic_uint **)&v89);
      uint64_t v67 = sub_2169791E0(a1);
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v98 = 0;
      uint64_t v68 = sub_216A5B7B0((uint64_t *)(v67 + 112));
      (*(void (**)(void ***__return_ptr))(*(void *)v68 + 136))(&v111);
      if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v111))
      {
        if ((v112 & 4) != 0) {
          v69 = (uint64_t **)(*(uint64_t (**)(void ***))((v112 & 0xFFFFFFFFFFFFFFF8) + 168))(&v111);
        }
        else {
          v69 = (uint64_t **)v111;
        }
      }
      else
      {
        v69 = (uint64_t **)__p;
      }
      unint64_t v86 = 0;
      v87 = 0;
      uint64_t v88 = 0;
      sub_21698FA28(&v86, *v69, v69[1], v69[1] - *v69);
      v70 = (void ***)sub_2168EE084((uint64_t)&v111);
      v111 = __p;
      sub_216889A04(v70);
      v71 = (uint64_t *)v86;
      if ((uint64_t *)v86 != v87)
      {
        while ((*v71 & 0xFFFFFFFFFFFFFFF8) != (v93 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v71 == v87)
          {
            v71 = v87;
            break;
          }
        }
      }
      if (v71 == v87)
      {
        __p[0] = "sdf/childrenUtils.cpp";
        __p[1] = "SetChildren";
        uint64_t v98 = 254;
        v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Prim"
              "ChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy:"
              ":ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
        char v100 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        int v65 = 1;
      }
      else
      {
        sub_216A8E2D8(v71 + 1, v87, v71);
        for (m = v87; m != v72; --m)
        {
          uint64_t v75 = *(m - 1);
          uint64_t v74 = v75;
          if ((v75 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        v87 = v72;
        if ((uint64_t *)v86 == v72)
        {
          v77 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v77, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v90, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v89);
        }
        else
        {
          v76 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          sub_216A6A718(v76, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v90, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v89, (uint64_t **)&v86);
        }
        v78 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
        v81 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A78D14((uint64_t *)&k, v79, v80);
        v82 = sub_216A663FC(v81);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v82, __p);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v78, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v91);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_21697C414(__p);
        int v65 = 0;
      }
      __p[0] = &v86;
      sub_216889A04((void ***)__p);
      if ((v89 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v89 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v90 + 1);
    sub_21697C414(&v90);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v92);
    sub_21697C414(&v91);
    if ((v93 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v65 != 10 && v65) {
      goto LABEL_96;
    }
  }
  if ((uint64_t *)v101 == v102)
  {
    v84 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v84, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v106);
  }
  else
  {
    v83 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    sub_216A6A718(v83, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v106, (uint64_t **)&v101);
  }
LABEL_96:
  sub_2168CB05C((uint64_t)&j, *((void **)&j + 1));
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v96);
LABEL_97:
  __p[0] = &v101;
  sub_216889A04((void ***)__p);
  sub_2168CB05C((uint64_t)&i, *((void **)&i + 1));
  __p[0] = &v107;
  sub_216889A04((void ***)__p);
  __p[0] = &v104;
  sub_216991094((void ***)__p);
  if ((v106 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v59;
}

void sub_216A789E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __p = &a34;
  sub_216889A04((void ***)&__p);
  sub_2168CB05C(v37 - 144, *(void **)(v37 - 136));
  __p = (uint64_t *)(v37 - 176);
  sub_216889A04((void ***)&__p);
  __p = (uint64_t *)&a37;
  sub_216991094((void ***)&__p);
  uint64_t v39 = *(void *)(v37 - 184);
  if ((v39 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216A78D14(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfHand"
            "le<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>>::operator*() [T = std::vector<pxrInternal__aapl__pxrRese"
            "rved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216A78D8C()
{
}

void *sub_216A78D94(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>>::operator++() [T = std::vector<pxrInternal"
            "__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::InsertChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, int a4)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  sub_216A775C0(v58);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    __p = "sdf/childrenUtils.cpp";
    v54 = "InsertChild";
    uint64_t v55 = 290;
    v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChil"
          "dPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, int) ["
          "ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
    char v57 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
LABEL_8:
    BOOL v12 = 0;
    goto LABEL_9;
  }
  uint64_t v8 = (uint64_t **)sub_216A663FC(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v8, (uint64_t *)&__p);
  uint64_t v9 = sub_216851B24((uint64_t)&__p);
  uint64_t v10 = sub_216851B24((uint64_t)a1);
  BOOL v11 = v54;
  if (v54 && atomic_fetch_add_explicit((atomic_uint *volatile)v54 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(const char *))(*(void *)v11 + 8))(v11);
  }
  if (v9 != v10)
  {
    __p = "sdf/childrenUtils.cpp";
    v54 = "InsertChild";
    uint64_t v55 = 295;
    v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChil"
          "dPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, int) ["
          "ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
    char v57 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
    goto LABEL_8;
  }
  uint64_t v14 = sub_216A663FC(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v47);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v47, &__p);
  uint64_t v15 = __p;
  char v16 = *(void **)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47 + 1);
  sub_21697C414(&v47);
  if (v15 == v16)
  {
    BOOL v12 = 1;
  }
  else
  {
    sub_216A664D8(a3, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v52);
    if (SHIBYTE(v55) < 0) {
      operator delete(__p);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v52, &v50);
    uint64_t v17 = sub_216A663FC(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v17, &__p);
    BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_21697C414(&__p);
    if (HasPrefix)
    {
      __p = "sdf/childrenUtils.cpp";
      v54 = "InsertChild";
      uint64_t v55 = 312;
      v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimCh"
            "ildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, in"
            "t) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
      char v57 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      BOOL v12 = 0;
    }
    else
    {
      uint64_t v19 = sub_2169791E0(a1);
      __p = 0;
      v54 = 0;
      uint64_t v55 = 0;
      uint64_t v20 = sub_216A5B7B0((uint64_t *)(v19 + 112));
      (*(void (**)(void ***__return_ptr))(*(void *)v20 + 136))(&v59);
      if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v59))
      {
        if ((v60 & 4) != 0) {
          p_p = (void **)(*(uint64_t (**)(void ***))(((unint64_t)v60 & 0xFFFFFFFFFFFFFFF8) + 168))(&v59);
        }
        else {
          p_p = v59;
        }
      }
      else
      {
        p_p = &__p;
      }
      uint64_t v47 = 0;
      v48 = 0;
      uint64_t v49 = 0;
      sub_21698FA28(&v47, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((unsigned char *)p_p[1] - (unsigned char *)*p_p) >> 3);
      uint64_t v22 = (void ***)sub_2168EE084((uint64_t)&v59);
      BOOL v59 = &__p;
      sub_216889A04(v22);
      unint64_t v25 = (unint64_t)((char *)v48 - (char *)v47) >> 3;
      if (a4 != -1) {
        LODWORD(v25) = a4;
      }
      uint64_t v26 = (int)v25;
      if ((int)v25 <= (unint64_t)(((char *)v48 - (char *)v47) >> 3))
      {
        BOOL v59 = v47;
        uint64_t v60 = (void **)v48;
        while (v59 != v60)
        {
          uint64_t v28 = (void *)sub_2169CEBC8((uint64_t *)&v59, v23, v24);
          if ((*v28 & 0xFFFFFFFFFFFFFFF8) == (v52 & 0xFFFFFFFFFFFFFFF8))
          {
            __p = "sdf/childrenUtils.cpp";
            v54 = "InsertChild";
            uint64_t v55 = 334;
            v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "PrimChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::Val"
                  "ueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
            char v57 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert duplicate spec %s", Text);
            goto LABEL_34;
          }
          sub_2169CECC4(&v59);
        }
        uint64_t v29 = sub_216A663FC(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v29, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v45);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_21697C414(&__p);
        sub_216A775C0((atomic_uint **)&v44);
        uint64_t v30 = sub_2169791E0(a1);
        __p = 0;
        v54 = 0;
        uint64_t v55 = 0;
        uint64_t v31 = sub_216A5B7B0((uint64_t *)(v30 + 112));
        (*(void (**)(atomic_uint **__return_ptr))(*(void *)v31 + 136))(&v62);
        if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v62))
        {
          if ((v63 & 4) != 0) {
            unint64_t v32 = (uint64_t **)(*(uint64_t (**)(atomic_uint **))((v63 & 0xFFFFFFFFFFFFFFF8) + 168))(&v62);
          }
          else {
            unint64_t v32 = (uint64_t **)v62;
          }
        }
        else
        {
          unint64_t v32 = (uint64_t **)&__p;
        }
        BOOL v59 = 0;
        uint64_t v60 = 0;
        uint64_t v61 = 0;
        sub_21698FA28(&v59, *v32, v32[1], v32[1] - *v32);
        uint64_t v34 = (void ***)sub_2168EE084((uint64_t)&v62);
        v62 = (atomic_uint *)&__p;
        sub_216889A04(v34);
        uint64_t v35 = v59;
        if (v59 != v60)
        {
          while (((unint64_t)*v35 & 0xFFFFFFFFFFFFFFF8) != (v52 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v35 == v60)
            {
              uint64_t v35 = v60;
              break;
            }
          }
        }
        BOOL v12 = v35 != v60;
        if (v35 == v60)
        {
          __p = "sdf/childrenUtils.cpp";
          v54 = "InsertChild";
          uint64_t v55 = 352;
          v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Pr"
                "imChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueTy"
                "pe &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
          char v57 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
          sub_216A6B648((uint64_t)&v59, v35);
          if (v59 == v60)
          {
            uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
            pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v44);
          }
          else
          {
            v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
            sub_216A6A718(v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v44, (uint64_t **)&v59);
          }
          uint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          uint64_t v39 = sub_216A663FC(a3);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v39, &v62);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v38, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v62, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
          sub_21697B754(&v62);
          sub_216A6BFEC(&v47, (char *)&v47[v26], (char *)&v52);
          int v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          sub_216A6A718(v40, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v58, (uint64_t **)&v47);
          uint64_t v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, &v62);
          uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v62);
          if ((IsDormant & 1) == 0)
          {
            unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
            pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v62);
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v62);
          sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
        }
        __p = &v59;
        sub_216889A04((void ***)&__p);
        if ((v44 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
        sub_21697C414(&v45);
      }
      else
      {
        __p = "sdf/childrenUtils.cpp";
        v54 = "InsertChild";
        uint64_t v55 = 326;
        v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Prim"
              "ChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &"
              ", int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
        char v57 = 0;
        unint64_t v27 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert spec %s at an invalid index %d", v27, v26);
LABEL_34:
        BOOL v12 = 0;
      }
      __p = &v47;
      sub_216889A04((void ***)&__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v51);
    sub_21697C414(&v50);
    if ((v52 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
LABEL_9:
  if (((uint64_t)v58[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v58[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v12;
}

void sub_216A79534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,__int16 *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  __p = (__int16 *)(v30 - 112);
  sub_216889A04((void ***)&__p);
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754(&a12);
  __p = &a14;
  sub_216889A04((void ***)&__p);
  sub_21697B754(&a19);
  if ((a20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::RemoveChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  sub_216A775C0((atomic_uint **)&v28);
  uint64_t v4 = sub_2169791E0(a1);
  memset(v24, 0, sizeof(v24));
  uint64_t v5 = sub_216A5B7B0((uint64_t *)(v4 + 112));
  (*(void (**)(unint64_t *__return_ptr))(*(void *)v5 + 136))(&v31);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v31))
  {
    if ((v32 & 4) != 0) {
      char v6 = (uint64_t **)(*(uint64_t (**)(unint64_t *))((v32 & 0xFFFFFFFFFFFFFFF8) + 168))(&v31);
    }
    else {
      char v6 = (uint64_t **)v31;
    }
  }
  else
  {
    char v6 = (uint64_t **)v24;
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  sub_21698FA28(&v25, *v6, v6[1], v6[1] - *v6);
  int v7 = (void ***)sub_2168EE084((uint64_t)&v31);
  unint64_t v31 = (unint64_t)v24;
  sub_216889A04(v7);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v31);
  uint64_t v8 = (uint64_t *)v25;
  unint64_t v9 = v31;
  if ((uint64_t *)v25 == v26)
  {
LABEL_9:
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v10 = -v25;
    while ((*v8 & 0xFFFFFFFFFFFFFFF8) != (v31 & 0xFFFFFFFFFFFFFFF8))
    {
      ++v8;
      v10 -= 8;
      if (v8 == v26) {
        goto LABEL_9;
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v31, &v29);
    BOOL v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v29);
    sub_216A8E2D8((void *)(8 - v10), v26, (void *)-v10);
    for (long long i = v26; i != v13; --i)
    {
      uint64_t v16 = *(i - 1);
      uint64_t v15 = v16;
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v26 = v13;
    if ((uint64_t *)v25 == v13)
    {
      uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v18, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28);
    }
    else
    {
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      sub_216A6A718(v17, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28, (uint64_t **)&v25);
    }
    uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v19, a2, &v23);
    uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v23);
    if ((IsDormant & 1) == 0)
    {
      unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
      pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v23);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v23);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
    sub_21697C414(&v29);
    uint64_t v11 = 1;
    unint64_t v9 = v31;
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
  v24[0] = (void **)&v25;
  sub_216889A04(v24);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v11;
}

void sub_216A799F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::MoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, int a5)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  sub_216A775C0(v55);
  sub_216A7A20C(a2, a4, &v54);
  uint64_t v10 = sub_216A663FC(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v10, &v51);
  uint64_t v11 = v54;
  BOOL v12 = v51;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v51 + 1);
  sub_21697C414(&v51);
  if (a5 == -2 && v11 == v12) {
    goto LABEL_59;
  }
  uint64_t v13 = sub_2169791E0(a1);
  __p = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v14 = sub_216A5B7B0((uint64_t *)(v13 + 112));
  (*(void (**)(void ***__return_ptr))(*(void *)v14 + 136))(&v56);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v56))
  {
    if ((v57 & 4) != 0) {
      p_p = (void **)(*(uint64_t (**)(void ***))((v57 & 0xFFFFFFFFFFFFFFF8) + 168))(&v56);
    }
    else {
      p_p = v56;
    }
  }
  else
  {
    p_p = &__p;
  }
  int v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  sub_21698FA28(&v51, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((unsigned char *)p_p[1] - (unsigned char *)*p_p) >> 3);
  sub_2168EE084((uint64_t)&v56);
  v56 = &__p;
  sub_216889A04(&v56);
  sub_216A664D8(a3, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v47);
  if (SHIBYTE(v50) < 0) {
    operator delete(__p);
  }
  uint64_t v16 = sub_216A663FC(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v46);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (a5 == -2 && v46 == *(void *)a2)
  {
    if (v51 == v52)
    {
      uint64_t v17 = v51;
    }
    else
    {
      uint64_t v17 = v51;
      while ((*v17 & 0xFFFFFFFFFFFFFFF8) != (v47 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v17 == v52)
        {
          uint64_t v17 = v52;
          break;
        }
      }
    }
    unint64_t v18 = (unint64_t)((char *)v17 - (char *)v51) >> 3;
  }
  else if (v52 - v51 >= (unint64_t)a5)
  {
    LODWORD(v18) = a5;
  }
  else
  {
    LODWORD(v18) = v52 - v51;
  }
  sub_216A775C0((atomic_uint **)&v45);
  uint64_t v19 = sub_2169791E0(a1);
  v56 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v20 = sub_216A5B7B0((uint64_t *)(v19 + 112));
  (*(void (**)(void ****__return_ptr))(*(void *)v20 + 136))(&v59);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v59))
  {
    if ((v60 & 4) != 0) {
      uint64_t v21 = (void ***)(*(uint64_t (**)(void ****))((v60 & 0xFFFFFFFFFFFFFFF8) + 168))(&v59);
    }
    else {
      uint64_t v21 = v59;
    }
  }
  else
  {
    uint64_t v21 = &v56;
  }
  __p = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  sub_21698FA28(&__p, (uint64_t *)*v21, (uint64_t *)v21[1], v21[1] - *v21);
  uint64_t v22 = (void ***)sub_2168EE084((uint64_t)&v59);
  BOOL v59 = &v56;
  sub_216889A04(v22);
  uint64_t v23 = (char *)__p;
  if (__p != v49)
  {
    while ((*(void *)v23 & 0xFFFFFFFFFFFFFFF8) != (v47 & 0xFFFFFFFFFFFFFFF8))
    {
      v23 += 8;
      if (v23 == v49)
      {
        uint64_t v23 = v49;
        break;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v56);
  if (v46 == *(void *)a2)
  {
    uint64_t v24 = v23 - (unsigned char *)__p;
    if ((v47 & 0xFFFFFFFFFFFFFFF8) == (*(void *)a4 & 0xFFFFFFFFFFFFFFF8)
      && (v18 == ((unint64_t)v24 >> 3)
       || ((unint64_t)v24 >> 3) + 1 == v18))
    {
      goto LABEL_54;
    }
    BOOL v26 = (int)v18 > v24 >> 3;
    uint64_t v27 = v51;
    if (v51 != v52)
    {
      while ((*v27 & 0xFFFFFFFFFFFFFFF8) != (v47 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v27 == v52)
        {
          uint64_t v27 = v52;
          break;
        }
      }
    }
    sub_216A8E2D8(v27 + 1, v52, v27);
    LODWORD(v18) = v18 - v26;
    for (long long i = v52; i != v28; --i)
    {
      uint64_t v31 = *(i - 1);
      uint64_t v30 = v31;
      if ((v31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v52 = v28;
  }
  else
  {
    sub_216A8E2D8((void *)v23 + 1, v49, v23);
    for (long long j = v49; j != v32; j -= 8)
    {
      uint64_t v35 = *((void *)j - 1);
      uint64_t v34 = v35;
      if ((v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v49 = v32;
    if (__p == v32)
    {
      uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v45);
      uint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v38, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, &v59);
      uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v59);
      if ((IsDormant & 1) == 0)
      {
        unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
        pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (atomic_uint **)&v59);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v59);
    }
    else
    {
      v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      sub_216A6A718(v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v45, (uint64_t **)&__p);
    }
  }
  uint64_t v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  unint64_t v42 = sub_216A663FC(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v42, &v59);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v59, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v54);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
  sub_21697C414(&v59);
  sub_216A6BFEC(&v51, (char *)&v51[(int)v18], (char *)a4);
  v43 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  sub_216A6A718(v43, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v55, &v51);
LABEL_54:
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v56);
  v56 = &__p;
  sub_216889A04(&v56);
  if ((v45 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_21697C414(&v46);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __p = &v51;
  sub_216889A04((void ***)&__p);
LABEL_59:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v54 + 1);
  sub_21697C414(&v54);
  if (((uint64_t)v55[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v55[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return 1;
}

void sub_216A7A080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,void **p_p)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 88));
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&p_p);
  p_p = (void **)&__p;
  sub_216889A04(&p_p);
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754(&a10);
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __p = &a18;
  sub_216889A04((void ***)&__p);
  sub_21697B754(&a21);
  if ((a22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_216A7A20C@<X0>(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, _DWORD *a3@<X8>)
{
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName((uint64_t)EmptyString))
  {
    return pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a1, a2, a3);
  }
  else
  {
    *(void *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CanMoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, int a5, uint64_t a6)
{
  sub_216A775C0((atomic_uint **)&v42);
  BOOL v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v12) & 1) == 0)
  {
    if (a6)
    {
      uint64_t v13 = "Layer is not editable";
      goto LABEL_13;
    }
LABEL_14:
    BOOL v18 = 0;
    goto LABEL_15;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    if (a6)
    {
      uint64_t v13 = "Object does not exist";
LABEL_13:
      MEMORY[0x21D4477E0](a6, v13);
      goto LABEL_14;
    }
    goto LABEL_14;
  }
  uint64_t v14 = (uint64_t **)sub_216A663FC(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v14, &v38);
  uint64_t v15 = sub_216851B24((uint64_t)&v38);
  uint64_t v16 = sub_216851B24((uint64_t)a1);
  uint64_t v17 = v39;
  if (v39 && atomic_fetch_add_explicit((atomic_uint *volatile)(v39 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  if (v15 != v16)
  {
    if (a6)
    {
      uint64_t v13 = "Cannot reparent to another layer";
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  sub_216A7A20C(a2, a4, &v40);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v40))
  {
    if (!a6)
    {
LABEL_24:
      BOOL v18 = 0;
      goto LABEL_25;
    }
    uint64_t v23 = "Invalid name";
LABEL_23:
    MEMORY[0x21D4477E0](a6, v23);
    goto LABEL_24;
  }
  uint64_t v20 = sub_216A663FC(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v20, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v38);
  uint64_t v21 = v38;
  uint64_t v22 = *(void *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v38 + 1);
  sub_21697C414(&v38);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (v21 != v22)
  {
    uint64_t v24 = sub_216A663FC(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v24, &v38);
    BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v38 + 1);
    sub_21697C414(&v38);
    if (!HasPrefix)
    {
      uint64_t v26 = sub_2169791E0(a1);
      __p = 0;
      v36 = 0;
      uint64_t v37 = 0;
      sub_216A6A608(v26, (uint64_t **)&__p, &v38);
      v31[0] = &__p;
      sub_216889A04(v31);
      unint64_t v27 = (unint64_t)(v39 - v38) >> 3;
      if (a5 != -1) {
        LODWORD(v27) = a5;
      }
      if (v27 == -2 || (int)v27 <= (unint64_t)((v39 - v38) >> 3))
      {
        sub_216A664D8(a3, (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v34);
        if (SHIBYTE(v37) < 0) {
          operator delete(__p);
        }
        unint64_t v28 = sub_216A663FC(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v33);
        sub_21697B754(&__p);
        sub_216A775C0((atomic_uint **)&v32);
        uint64_t v29 = sub_2169791E0(a1);
        memset(v31, 0, sizeof(v31));
        sub_216A6A608(v29, (uint64_t **)v31, &__p);
        v43 = v31;
        sub_216889A04((void ***)&v43);
        uint64_t v30 = __p;
        if (__p != v36)
        {
          while ((*v30 & 0xFFFFFFFFFFFFFFF8) != (v34 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v30 == v36)
            {
              uint64_t v30 = v36;
              break;
            }
          }
        }
        BOOL v18 = v30 != v36;
        if (a6 && v30 == v36) {
          MEMORY[0x21D4477E0](a6, "Coding error: Object is not in its parent's children");
        }
        v31[0] = &__p;
        sub_216889A04(v31);
        if ((v32 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        sub_21697B754(&v33);
        if ((v34 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if (a6) {
          MEMORY[0x21D4477E0](a6, "Invalid index");
        }
        BOOL v18 = 0;
      }
      __p = &v38;
      sub_216889A04((void ***)&__p);
      goto LABEL_25;
    }
    if (!a6) {
      goto LABEL_24;
    }
    uint64_t v23 = "Cannot reparent object under itself";
    goto LABEL_23;
  }
  BOOL v18 = 1;
LABEL_25:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
  sub_21697C414(&v40);
LABEL_15:
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v18;
}

void sub_216A7A69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23)
{
  __p = &a22;
  sub_216889A04((void ***)&__p);
  sub_21697B754((_DWORD *)(v23 - 88));
  uint64_t v25 = *(void *)(v23 - 80);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CanRemoveChildForBatchNamespaceEdit(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  sub_216A775C0((atomic_uint **)&v19);
  int v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v7))
  {
    uint64_t v8 = sub_2169791E0(a1);
    memset(v15, 0, sizeof(v15));
    uint64_t v9 = sub_216A5B7B0((uint64_t *)(v8 + 112));
    (*(void (**)(void ****__return_ptr))(*(void *)v9 + 136))(&v20);
    if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
    {
      if ((v21 & 4) != 0) {
        uint64_t v10 = (uint64_t **)(*(uint64_t (**)(void ****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
      }
      else {
        uint64_t v10 = (uint64_t **)v20;
      }
    }
    else
    {
      uint64_t v10 = (uint64_t **)v15;
    }
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    sub_21698FA28(&v16, *v10, v10[1], v10[1] - *v10);
    BOOL v12 = (void ***)sub_2168EE084((uint64_t)&v20);
    uint64_t v20 = v15;
    sub_216889A04(v12);
    uint64_t v13 = v16;
    if (v16 != v17)
    {
      while ((*v13 & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v13 == v17)
        {
          uint64_t v13 = v17;
          break;
        }
      }
    }
    BOOL v11 = v13 != v17;
    if (a4 && v13 == v17) {
      MEMORY[0x21D4477E0](a4, "Object does not exist");
    }
    v15[0] = (void **)&v16;
    sub_216889A04(v15);
  }
  else
  {
    if (a4) {
      MEMORY[0x21D4477E0](a4, "Layer is not editable");
    }
    BOOL v11 = 0;
  }
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v11;
}

void sub_216A7A9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  a10 = (void **)&a13;
  sub_216889A04(&a10);
  if ((a16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::CreateSpec(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v1 = (uint64_t *)(a1 + 8);
  if (v2) {
    sub_216850B68(v1);
  }

  pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::CreateSpec();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::CreateSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
    uint64_t Spec = pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(a1, a2, a3, a4);
    if (Spec)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v18);
      sub_216A69BE4((atomic_uint **)__p);
      uint64_t v9 = *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      if ((v9 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::TfToken>();
    }
    uint64_t v18 = "sdf/childrenUtils.cpp";
    unint64_t v19 = "CreateSpec";
    uint64_t v20 = 101;
    uint64_t v21 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Property"
          "ChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl__pxr"
          "Reserved__::Sdf_PropertyChildPolicy]";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C755200, a3, (uint64_t)__p);
    int v10 = v16;
    BOOL v11 = (void **)__p[0];
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    uint64_t v13 = __p;
    if (v10 < 0) {
      uint64_t v13 = v11;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to create spec of type '%s' at <%s>", (const char *)v13, Text);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
  }
  else
  {
    uint64_t v18 = "sdf/childrenUtils.cpp";
    unint64_t v19 = "CreateSpec";
    uint64_t v20 = 90;
    uint64_t v21 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Property"
          "ChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl__pxr"
          "Reserved__::Sdf_PropertyChildPolicy]";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid object type");
    return 0;
  }
  return Spec;
}

void sub_216A7ACAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::IsValidName(pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  if ((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }

  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::IsValidName((size_t *)EmptyString);
}

double pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::CanRename@<D0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, (uint64_t *)__p);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)__p);
  char v4 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v3);
  uint64_t v5 = __p[1];
  if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(void *))(*(void *)v5 + 8))(v5);
  }
  if (v4) {
    pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::IsValidName();
  }
  sub_216779094(__p, "Layer is not editable");
  double result = *(double *)__p;
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(void *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 24) = 1;
  return result;
}

void sub_216A7B000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

_DWORD *sub_216A7B0B4@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a1, &v6);
  sub_216A63E40((pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, a2, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_21697C414(&v6);
}

void sub_216A7B118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::Rename(pxrInternal__aapl__pxrReserved__::SdfSpec *a1)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, v1);
  pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::IsValidName();
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::SetChildren(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, long long *a3)
{
  uint64_t v113 = *MEMORY[0x263EF8340];
  sub_216A69BE4((atomic_uint **)&v106);
  long long v104 = 0uLL;
  unint64_t v105 = 0;
  __p[1] = 0;
  uint64_t v98 = 0;
  __p[0] = &__p[1];
  for (long long i = *a3; (void)i != *((void *)&i + 1); sub_216A8E9F0(&i))
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A8E970((uint64_t *)&i, v6, v7);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v8)) {
      goto LABEL_13;
    }
    BOOL v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A8E970((uint64_t *)&i, v9, v10);
    sub_216A66FCC(v11, (uint64_t)&v107);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v101);
    if (SHIBYTE(v108) < 0) {
      operator delete((void *)v107);
    }
    sub_216A8E144((uint64_t **)__p, (uint64_t *)&v101, (uint64_t *)&v101);
    if (v9) {
      goto LABEL_9;
    }
    BOOL v12 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A8E970((uint64_t *)&i, v9, v10);
    uint64_t v13 = sub_216990F1C(v12);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v13, &j);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&j, &v107);
    uint64_t v14 = v107;
    uint64_t v15 = *(void *)a2;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v107 + 1);
    sub_21697C414(&v107);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
    sub_21697C414(&j);
    if (v14 != v15) {
LABEL_9:
    }
      char v16 = 1;
    else {
      char v16 = 0;
    }
    if ((v101 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v101 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v16)
    {
LABEL_13:
      uint64_t v17 = (atomic_uint **)sub_216A8E970((uint64_t *)&i, v9, v10);
      uint64_t v18 = *((void *)&v104 + 1);
      if (*((void *)&v104 + 1) >= v105)
      {
        uint64_t v20 = sub_216A8E01C((atomic_uint ***)&v104, v17);
      }
      else
      {
        unint64_t v19 = *v17;
        **((void **)&v104 + 1) = *v17;
        if (v19) {
          atomic_fetch_add(v19, 1u);
        }
        uint64_t v20 = (char *)(v18 + 8);
      }
      *((void *)&v104 + 1) = v20;
    }
  }
  sub_2168CB05C((uint64_t)__p, (void *)__p[1]);
  uint64_t v21 = sub_2169791E0(a1);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v98 = 0;
  uint64_t v22 = sub_216A5B7B0((uint64_t *)(v21 + 112));
  (*(void (**)(long long *__return_ptr))(*(void *)v22 + 136))(&i);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&i))
  {
    if ((BYTE8(i) & 4) != 0) {
      uint64_t v23 = (uint64_t **)(*(uint64_t (**)(long long *))((*((void *)&i + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&i);
    }
    else {
      uint64_t v23 = (uint64_t **)i;
    }
  }
  else
  {
    uint64_t v23 = (uint64_t **)__p;
  }
  long long v107 = 0uLL;
  uint64_t v108 = 0;
  sub_21698FA28(&v107, *v23, v23[1], v23[1] - *v23);
  uint64_t v24 = (void ***)sub_2168EE084((uint64_t)&i);
  *(void *)&long long i = __p;
  sub_216889A04(v24);
  *((void *)&i + 1) = 0;
  uint64_t v110 = 0;
  *(void *)&long long i = (char *)&i + 8;
  unint64_t v101 = 0;
  v102 = 0;
  unint64_t v103 = 0;
  sub_216973388((char **)&v101, (uint64_t)(*((void *)&v104 + 1) - v104) >> 3);
  for (long long j = v104; (void)j != *((void *)&j + 1); sub_216A7C4A0(&j))
  {
    unint64_t v27 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A7C420((uint64_t *)&j, v25, v26);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v27))
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      uint64_t v98 = 181;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Proper"
            "tyChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy:"
            ":ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
      goto LABEL_92;
    }
    uint64_t v30 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A7C420((uint64_t *)&j, v28, v29);
    sub_216A66FCC(v30, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v86);
    if (SHIBYTE(v98) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v31 = v102;
    if ((unint64_t)v102 >= v103)
    {
      int v33 = sub_216973984((char **)&v101, (uint64_t *)&v86);
    }
    else
    {
      unint64_t v32 = v86;
      uint64_t *v102 = v86;
      if ((v32 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v31 &= 0xFFFFFFFFFFFFFFF8;
      }
      int v33 = (char *)(v31 + 1);
    }
    v102 = (uint64_t *)v33;
    sub_216A8E144((uint64_t **)&i, (uint64_t *)&v86, (uint64_t *)&v86);
    if ((v34 & 1) == 0)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      uint64_t v98 = 188;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Proper"
            "tyChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy:"
            ":ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate child");
LABEL_90:
      if ((v86 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
LABEL_92:
      BOOL v59 = 0;
      goto LABEL_97;
    }
    v36 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A7C420((uint64_t *)&j, v34, v35);
    uint64_t v37 = (uint64_t **)sub_216990F1C(v36);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v37, (uint64_t *)__p);
    uint64_t v38 = sub_216851B24((uint64_t)__p);
    uint64_t v41 = sub_216851B24((uint64_t)a1);
    unint64_t v42 = __p[1];
    if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(void *))(*(void *)v42 + 8))(v42);
    }
    if (v38 != v41)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      uint64_t v98 = 193;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Proper"
            "tyChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy:"
            ":ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
      goto LABEL_90;
    }
    v43 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A7C420((uint64_t *)&j, v39, v40);
    unint64_t v44 = sub_216990F1C(v43);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v44, &v111);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v111, __p);
    if (*(void **)a2 == __p[0])
    {
      BOOL HasPrefix = 0;
    }
    else
    {
      v48 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A7C420((uint64_t *)&j, v45, v46);
      uint64_t v49 = sub_216990F1C(v48);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v49, &k);
      BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&k);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
      sub_21697C414(&k);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_21697C414(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v111 + 1);
    sub_21697C414(&v111);
    if (HasPrefix)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      uint64_t v98 = 203;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Proper"
            "tyChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy:"
            ":ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      goto LABEL_90;
    }
    if ((v86 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v96);
  *(_OWORD *)__p = v107;
  while (__p[0] != __p[1])
  {
    uint64_t v52 = (uint64_t *)sub_2169CEBC8((uint64_t *)__p, v50, v51);
    if ((void *)((char *)&i + 8) == sub_216A8E1C4((uint64_t)&i, v52))
    {
      uint64_t v55 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_2169CEBC8((uint64_t *)__p, v53, v54);
      sub_216A63E40(a2, v55, (int *)&j);
      v56 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v56, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&j);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
      sub_21697C414(&j);
    }
    sub_2169CECC4(__p);
  }
  sub_216A8E254((uint64_t)&j, (uint64_t *)v107, *((uint64_t **)&v107 + 1));
  for (long long k = v104; ; sub_216A7C4A0(&k))
  {
    BOOL v59 = k == *((void *)&k + 1);
    if ((void)k == *((void *)&k + 1)) {
      break;
    }
    uint64_t v60 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A7C420((uint64_t *)&k, v57, v58);
    sub_216A66FCC(v60, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v93);
    if (SHIBYTE(v98) < 0) {
      operator delete(__p[0]);
    }
    sub_216A63E40(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v93, &v91);
    uint64_t v63 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A7C420((uint64_t *)&k, v61, v62);
    uint64_t v64 = sub_216990F1C(v63);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v64, __p);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, &v90);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_21697C414(__p);
    if (v90 == *(void *)a2)
    {
      int v65 = 10;
    }
    else
    {
      if ((void *)((char *)&j + 8) != sub_216A8E1C4((uint64_t)&j, &v93))
      {
        v66 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v66, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v91);
      }
      sub_216A69BE4((atomic_uint **)&v89);
      uint64_t v67 = sub_2169791E0(a1);
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v98 = 0;
      uint64_t v68 = sub_216A5B7B0((uint64_t *)(v67 + 112));
      (*(void (**)(void ***__return_ptr))(*(void *)v68 + 136))(&v111);
      if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v111))
      {
        if ((v112 & 4) != 0) {
          v69 = (uint64_t **)(*(uint64_t (**)(void ***))((v112 & 0xFFFFFFFFFFFFFFF8) + 168))(&v111);
        }
        else {
          v69 = (uint64_t **)v111;
        }
      }
      else
      {
        v69 = (uint64_t **)__p;
      }
      unint64_t v86 = 0;
      v87 = 0;
      uint64_t v88 = 0;
      sub_21698FA28(&v86, *v69, v69[1], v69[1] - *v69);
      v70 = (void ***)sub_2168EE084((uint64_t)&v111);
      v111 = __p;
      sub_216889A04(v70);
      v71 = (uint64_t *)v86;
      if ((uint64_t *)v86 != v87)
      {
        while ((*v71 & 0xFFFFFFFFFFFFFFF8) != (v93 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v71 == v87)
          {
            v71 = v87;
            break;
          }
        }
      }
      if (v71 == v87)
      {
        __p[0] = "sdf/childrenUtils.cpp";
        __p[1] = "SetChildren";
        uint64_t v98 = 254;
        v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Prop"
              "ertyChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPol"
              "icy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]";
        char v100 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        int v65 = 1;
      }
      else
      {
        sub_216A8E2D8(v71 + 1, v87, v71);
        for (m = v87; m != v72; --m)
        {
          uint64_t v75 = *(m - 1);
          uint64_t v74 = v75;
          if ((v75 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        v87 = v72;
        if ((uint64_t *)v86 == v72)
        {
          v77 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v77, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v90, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v89);
        }
        else
        {
          v76 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          sub_216A6A718(v76, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v90, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v89, (uint64_t **)&v86);
        }
        v78 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
        v81 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A7C420((uint64_t *)&k, v79, v80);
        v82 = sub_216990F1C(v81);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v82, __p);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v78, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v91);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_21697C414(__p);
        int v65 = 0;
      }
      __p[0] = &v86;
      sub_216889A04((void ***)__p);
      if ((v89 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v89 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v90 + 1);
    sub_21697C414(&v90);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v92);
    sub_21697C414(&v91);
    if ((v93 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v65 != 10 && v65) {
      goto LABEL_96;
    }
  }
  if ((uint64_t *)v101 == v102)
  {
    v84 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v84, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v106);
  }
  else
  {
    v83 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    sub_216A6A718(v83, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v106, (uint64_t **)&v101);
  }
LABEL_96:
  sub_2168CB05C((uint64_t)&j, *((void **)&j + 1));
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v96);
LABEL_97:
  __p[0] = &v101;
  sub_216889A04((void ***)__p);
  sub_2168CB05C((uint64_t)&i, *((void **)&i + 1));
  __p[0] = &v107;
  sub_216889A04((void ***)__p);
  __p[0] = &v104;
  sub_216991094((void ***)__p);
  if ((v106 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v59;
}

void sub_216A7C0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __p = &a34;
  sub_216889A04((void ***)&__p);
  sub_2168CB05C(v37 - 144, *(void **)(v37 - 136));
  __p = (uint64_t *)(v37 - 176);
  sub_216889A04((void ***)&__p);
  __p = (uint64_t *)&a37;
  sub_216991094((void ***)&__p);
  uint64_t v39 = *(void *)(v37 - 184);
  if ((v39 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216A7C420(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfHand"
            "le<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>>>::operator*() [T = std::vector<pxrInternal__aapl__pxr"
            "Reserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216A7C498()
{
}

void *sub_216A7C4A0(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>>>::operator++() [T = std::vector<pxrInte"
            "rnal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::InsertChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, int a4)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  sub_216A69BE4(v58);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    __p = "sdf/childrenUtils.cpp";
    v54 = "InsertChild";
    uint64_t v55 = 290;
    v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Property"
          "ChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, in"
          "t) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]";
    char v57 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
LABEL_8:
    BOOL v12 = 0;
    goto LABEL_9;
  }
  uint64_t v8 = (uint64_t **)sub_216990F1C(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v8, (uint64_t *)&__p);
  uint64_t v9 = sub_216851B24((uint64_t)&__p);
  uint64_t v10 = sub_216851B24((uint64_t)a1);
  BOOL v11 = v54;
  if (v54 && atomic_fetch_add_explicit((atomic_uint *volatile)v54 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(const char *))(*(void *)v11 + 8))(v11);
  }
  if (v9 != v10)
  {
    __p = "sdf/childrenUtils.cpp";
    v54 = "InsertChild";
    uint64_t v55 = 295;
    v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Property"
          "ChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, in"
          "t) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]";
    char v57 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
    goto LABEL_8;
  }
  uint64_t v14 = sub_216990F1C(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v47);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v47, &__p);
  uint64_t v15 = __p;
  char v16 = *(void **)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47 + 1);
  sub_21697C414(&v47);
  if (v15 == v16)
  {
    BOOL v12 = 1;
  }
  else
  {
    sub_216A66FCC(a3, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v52);
    if (SHIBYTE(v55) < 0) {
      operator delete(__p);
    }
    sub_216A63E40(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v52, &v50);
    uint64_t v17 = sub_216990F1C(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v17, &__p);
    BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_21697C414(&__p);
    if (HasPrefix)
    {
      __p = "sdf/childrenUtils.cpp";
      v54 = "InsertChild";
      uint64_t v55 = 312;
      v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Proper"
            "tyChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &"
            ", int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]";
      char v57 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      BOOL v12 = 0;
    }
    else
    {
      uint64_t v19 = sub_2169791E0(a1);
      __p = 0;
      v54 = 0;
      uint64_t v55 = 0;
      uint64_t v20 = sub_216A5B7B0((uint64_t *)(v19 + 112));
      (*(void (**)(void ***__return_ptr))(*(void *)v20 + 136))(&v59);
      if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v59))
      {
        if ((v60 & 4) != 0) {
          p_p = (void **)(*(uint64_t (**)(void ***))(((unint64_t)v60 & 0xFFFFFFFFFFFFFFF8) + 168))(&v59);
        }
        else {
          p_p = v59;
        }
      }
      else
      {
        p_p = &__p;
      }
      uint64_t v47 = 0;
      v48 = 0;
      uint64_t v49 = 0;
      sub_21698FA28(&v47, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((unsigned char *)p_p[1] - (unsigned char *)*p_p) >> 3);
      uint64_t v22 = (void ***)sub_2168EE084((uint64_t)&v59);
      BOOL v59 = &__p;
      sub_216889A04(v22);
      unint64_t v25 = (unint64_t)((char *)v48 - (char *)v47) >> 3;
      if (a4 != -1) {
        LODWORD(v25) = a4;
      }
      uint64_t v26 = (int)v25;
      if ((int)v25 <= (unint64_t)(((char *)v48 - (char *)v47) >> 3))
      {
        BOOL v59 = v47;
        uint64_t v60 = (void **)v48;
        while (v59 != v60)
        {
          uint64_t v28 = (void *)sub_2169CEBC8((uint64_t *)&v59, v23, v24);
          if ((*v28 & 0xFFFFFFFFFFFFFFF8) == (v52 & 0xFFFFFFFFFFFFFFF8))
          {
            __p = "sdf/childrenUtils.cpp";
            v54 = "InsertChild";
            uint64_t v55 = 334;
            v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "PropertyChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy:"
                  ":ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]";
            char v57 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert duplicate spec %s", Text);
            goto LABEL_34;
          }
          sub_2169CECC4(&v59);
        }
        uint64_t v29 = sub_216990F1C(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v29, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v45);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_21697C414(&__p);
        sub_216A69BE4((atomic_uint **)&v44);
        uint64_t v30 = sub_2169791E0(a1);
        __p = 0;
        v54 = 0;
        uint64_t v55 = 0;
        uint64_t v31 = sub_216A5B7B0((uint64_t *)(v30 + 112));
        (*(void (**)(atomic_uint **__return_ptr))(*(void *)v31 + 136))(&v62);
        if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v62))
        {
          if ((v63 & 4) != 0) {
            unint64_t v32 = (uint64_t **)(*(uint64_t (**)(atomic_uint **))((v63 & 0xFFFFFFFFFFFFFFF8) + 168))(&v62);
          }
          else {
            unint64_t v32 = (uint64_t **)v62;
          }
        }
        else
        {
          unint64_t v32 = (uint64_t **)&__p;
        }
        BOOL v59 = 0;
        uint64_t v60 = 0;
        uint64_t v61 = 0;
        sub_21698FA28(&v59, *v32, v32[1], v32[1] - *v32);
        uint64_t v34 = (void ***)sub_2168EE084((uint64_t)&v62);
        v62 = (atomic_uint *)&__p;
        sub_216889A04(v34);
        uint64_t v35 = v59;
        if (v59 != v60)
        {
          while (((unint64_t)*v35 & 0xFFFFFFFFFFFFFFF8) != (v52 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v35 == v60)
            {
              uint64_t v35 = v60;
              break;
            }
          }
        }
        BOOL v12 = v35 != v60;
        if (v35 == v60)
        {
          __p = "sdf/childrenUtils.cpp";
          v54 = "InsertChild";
          uint64_t v55 = 352;
          v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Pr"
                "opertyChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::Val"
                "ueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]";
          char v57 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
          sub_216A6B648((uint64_t)&v59, v35);
          if (v59 == v60)
          {
            uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
            pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v44);
          }
          else
          {
            v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
            sub_216A6A718(v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v44, (uint64_t **)&v59);
          }
          uint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          uint64_t v39 = sub_216990F1C(a3);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v39, &v62);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v38, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v62, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
          sub_21697B754(&v62);
          sub_216A6BFEC(&v47, (char *)&v47[v26], (char *)&v52);
          int v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          sub_216A6A718(v40, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v58, (uint64_t **)&v47);
          uint64_t v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, &v62);
          uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v62);
          if ((IsDormant & 1) == 0)
          {
            unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
            pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v62);
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v62);
          sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
        }
        __p = &v59;
        sub_216889A04((void ***)&__p);
        if ((v44 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
        sub_21697C414(&v45);
      }
      else
      {
        __p = "sdf/childrenUtils.cpp";
        v54 = "InsertChild";
        uint64_t v55 = 326;
        v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Prop"
              "ertyChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueTy"
              "pe &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]";
        char v57 = 0;
        unint64_t v27 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert spec %s at an invalid index %d", v27, v26);
LABEL_34:
        BOOL v12 = 0;
      }
      __p = &v47;
      sub_216889A04((void ***)&__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v51);
    sub_21697C414(&v50);
    if ((v52 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
LABEL_9:
  if (((uint64_t)v58[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v58[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v12;
}

void sub_216A7CC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,__int16 *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  __p = (__int16 *)(v30 - 112);
  sub_216889A04((void ***)&__p);
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754(&a12);
  __p = &a14;
  sub_216889A04((void ***)&__p);
  sub_21697B754(&a19);
  if ((a20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::RemoveChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  sub_216A69BE4((atomic_uint **)&v28);
  uint64_t v4 = sub_2169791E0(a1);
  memset(v24, 0, sizeof(v24));
  uint64_t v5 = sub_216A5B7B0((uint64_t *)(v4 + 112));
  (*(void (**)(unint64_t *__return_ptr))(*(void *)v5 + 136))(&v31);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v31))
  {
    if ((v32 & 4) != 0) {
      char v6 = (uint64_t **)(*(uint64_t (**)(unint64_t *))((v32 & 0xFFFFFFFFFFFFFFF8) + 168))(&v31);
    }
    else {
      char v6 = (uint64_t **)v31;
    }
  }
  else
  {
    char v6 = (uint64_t **)v24;
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  sub_21698FA28(&v25, *v6, v6[1], v6[1] - *v6);
  int v7 = (void ***)sub_2168EE084((uint64_t)&v31);
  unint64_t v31 = (unint64_t)v24;
  sub_216889A04(v7);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v31);
  uint64_t v8 = (uint64_t *)v25;
  unint64_t v9 = v31;
  if ((uint64_t *)v25 == v26)
  {
LABEL_9:
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v10 = -v25;
    while ((*v8 & 0xFFFFFFFFFFFFFFF8) != (v31 & 0xFFFFFFFFFFFFFFF8))
    {
      ++v8;
      v10 -= 8;
      if (v8 == v26) {
        goto LABEL_9;
      }
    }
    sub_216A63E40(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v31, &v29);
    BOOL v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v29);
    sub_216A8E2D8((void *)(8 - v10), v26, (void *)-v10);
    for (long long i = v26; i != v13; --i)
    {
      uint64_t v16 = *(i - 1);
      uint64_t v15 = v16;
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v26 = v13;
    if ((uint64_t *)v25 == v13)
    {
      uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v18, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28);
    }
    else
    {
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      sub_216A6A718(v17, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28, (uint64_t **)&v25);
    }
    uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v19, a2, &v23);
    uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v23);
    if ((IsDormant & 1) == 0)
    {
      unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
      pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v23);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v23);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
    sub_21697C414(&v29);
    uint64_t v11 = 1;
    unint64_t v9 = v31;
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
  v24[0] = (void **)&v25;
  sub_216889A04(v24);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v11;
}

void sub_216A7D104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::MoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, int a5)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  sub_216A69BE4(v55);
  sub_216A6CD34(a2, a4, (int *)&v54);
  uint64_t v10 = sub_216990F1C(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v10, &v51);
  uint64_t v11 = v54;
  BOOL v12 = v51;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v51 + 1);
  sub_21697C414(&v51);
  if (a5 == -2 && v11 == v12) {
    goto LABEL_59;
  }
  uint64_t v13 = sub_2169791E0(a1);
  __p = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v14 = sub_216A5B7B0((uint64_t *)(v13 + 112));
  (*(void (**)(void ***__return_ptr))(*(void *)v14 + 136))(&v56);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v56))
  {
    if ((v57 & 4) != 0) {
      p_p = (void **)(*(uint64_t (**)(void ***))((v57 & 0xFFFFFFFFFFFFFFF8) + 168))(&v56);
    }
    else {
      p_p = v56;
    }
  }
  else
  {
    p_p = &__p;
  }
  int v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  sub_21698FA28(&v51, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((unsigned char *)p_p[1] - (unsigned char *)*p_p) >> 3);
  sub_2168EE084((uint64_t)&v56);
  v56 = &__p;
  sub_216889A04(&v56);
  sub_216A66FCC(a3, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v47);
  if (SHIBYTE(v50) < 0) {
    operator delete(__p);
  }
  uint64_t v16 = sub_216990F1C(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v46);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (a5 == -2 && v46 == *(void *)a2)
  {
    if (v51 == v52)
    {
      uint64_t v17 = v51;
    }
    else
    {
      uint64_t v17 = v51;
      while ((*v17 & 0xFFFFFFFFFFFFFFF8) != (v47 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v17 == v52)
        {
          uint64_t v17 = v52;
          break;
        }
      }
    }
    unint64_t v18 = (unint64_t)((char *)v17 - (char *)v51) >> 3;
  }
  else if (v52 - v51 >= (unint64_t)a5)
  {
    LODWORD(v18) = a5;
  }
  else
  {
    LODWORD(v18) = v52 - v51;
  }
  sub_216A69BE4((atomic_uint **)&v45);
  uint64_t v19 = sub_2169791E0(a1);
  v56 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v20 = sub_216A5B7B0((uint64_t *)(v19 + 112));
  (*(void (**)(void ****__return_ptr))(*(void *)v20 + 136))(&v59);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v59))
  {
    if ((v60 & 4) != 0) {
      uint64_t v21 = (void ***)(*(uint64_t (**)(void ****))((v60 & 0xFFFFFFFFFFFFFFF8) + 168))(&v59);
    }
    else {
      uint64_t v21 = v59;
    }
  }
  else
  {
    uint64_t v21 = &v56;
  }
  __p = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  sub_21698FA28(&__p, (uint64_t *)*v21, (uint64_t *)v21[1], v21[1] - *v21);
  uint64_t v22 = (void ***)sub_2168EE084((uint64_t)&v59);
  BOOL v59 = &v56;
  sub_216889A04(v22);
  uint64_t v23 = (char *)__p;
  if (__p != v49)
  {
    while ((*(void *)v23 & 0xFFFFFFFFFFFFFFF8) != (v47 & 0xFFFFFFFFFFFFFFF8))
    {
      v23 += 8;
      if (v23 == v49)
      {
        uint64_t v23 = v49;
        break;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v56);
  if (v46 == *(void *)a2)
  {
    uint64_t v24 = v23 - (unsigned char *)__p;
    if ((v47 & 0xFFFFFFFFFFFFFFF8) == (*(void *)a4 & 0xFFFFFFFFFFFFFFF8)
      && (v18 == ((unint64_t)v24 >> 3)
       || ((unint64_t)v24 >> 3) + 1 == v18))
    {
      goto LABEL_54;
    }
    BOOL v26 = (int)v18 > v24 >> 3;
    uint64_t v27 = v51;
    if (v51 != v52)
    {
      while ((*v27 & 0xFFFFFFFFFFFFFFF8) != (v47 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v27 == v52)
        {
          uint64_t v27 = v52;
          break;
        }
      }
    }
    sub_216A8E2D8(v27 + 1, v52, v27);
    LODWORD(v18) = v18 - v26;
    for (long long i = v52; i != v28; --i)
    {
      uint64_t v31 = *(i - 1);
      uint64_t v30 = v31;
      if ((v31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v52 = v28;
  }
  else
  {
    sub_216A8E2D8((void *)v23 + 1, v49, v23);
    for (long long j = v49; j != v32; j -= 8)
    {
      uint64_t v35 = *((void *)j - 1);
      uint64_t v34 = v35;
      if ((v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v49 = v32;
    if (__p == v32)
    {
      uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v45);
      uint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v38, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, &v59);
      uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v59);
      if ((IsDormant & 1) == 0)
      {
        unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
        pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (atomic_uint **)&v59);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v59);
    }
    else
    {
      v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      sub_216A6A718(v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v45, (uint64_t **)&__p);
    }
  }
  uint64_t v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  unint64_t v42 = sub_216990F1C(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v42, &v59);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v59, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v54);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
  sub_21697C414(&v59);
  sub_216A6BFEC(&v51, (char *)&v51[(int)v18], (char *)a4);
  v43 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  sub_216A6A718(v43, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v55, &v51);
LABEL_54:
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v56);
  v56 = &__p;
  sub_216889A04(&v56);
  if ((v45 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_21697C414(&v46);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __p = &v51;
  sub_216889A04((void ***)&__p);
LABEL_59:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v54 + 1);
  sub_21697C414(&v54);
  if (((uint64_t)v55[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v55[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return 1;
}

void sub_216A7D78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,void **p_p)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 88));
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&p_p);
  p_p = (void **)&__p;
  sub_216889A04(&p_p);
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754(&a10);
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __p = &a18;
  sub_216889A04((void ***)&__p);
  sub_21697B754(&a21);
  if ((a22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::CanMoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, int a5, uint64_t a6)
{
  sub_216A69BE4((atomic_uint **)&v42);
  BOOL v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v12) & 1) == 0)
  {
    if (a6)
    {
      uint64_t v13 = "Layer is not editable";
      goto LABEL_13;
    }
LABEL_14:
    BOOL v18 = 0;
    goto LABEL_15;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    if (a6)
    {
      uint64_t v13 = "Object does not exist";
LABEL_13:
      MEMORY[0x21D4477E0](a6, v13);
      goto LABEL_14;
    }
    goto LABEL_14;
  }
  uint64_t v14 = (uint64_t **)sub_216990F1C(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v14, &v38);
  uint64_t v15 = sub_216851B24((uint64_t)&v38);
  uint64_t v16 = sub_216851B24((uint64_t)a1);
  uint64_t v17 = v39;
  if (v39 && atomic_fetch_add_explicit((atomic_uint *volatile)(v39 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  if (v15 != v16)
  {
    if (a6)
    {
      uint64_t v13 = "Cannot reparent to another layer";
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  sub_216A6CD34(a2, a4, &v40);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v40))
  {
    if (!a6)
    {
LABEL_24:
      BOOL v18 = 0;
      goto LABEL_25;
    }
    uint64_t v23 = "Invalid name";
LABEL_23:
    MEMORY[0x21D4477E0](a6, v23);
    goto LABEL_24;
  }
  uint64_t v20 = sub_216990F1C(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v20, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v38);
  uint64_t v21 = v38;
  uint64_t v22 = *(void *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v38 + 1);
  sub_21697C414(&v38);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (v21 != v22)
  {
    uint64_t v24 = sub_216990F1C(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v24, &v38);
    BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v38 + 1);
    sub_21697C414(&v38);
    if (!HasPrefix)
    {
      uint64_t v26 = sub_2169791E0(a1);
      __p = 0;
      v36 = 0;
      uint64_t v37 = 0;
      sub_216A6A608(v26, (uint64_t **)&__p, &v38);
      v31[0] = &__p;
      sub_216889A04(v31);
      unint64_t v27 = (unint64_t)(v39 - v38) >> 3;
      if (a5 != -1) {
        LODWORD(v27) = a5;
      }
      if (v27 == -2 || (int)v27 <= (unint64_t)((v39 - v38) >> 3))
      {
        sub_216A66FCC(a3, (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v34);
        if (SHIBYTE(v37) < 0) {
          operator delete(__p);
        }
        unint64_t v28 = sub_216990F1C(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v33);
        sub_21697B754(&__p);
        sub_216A69BE4((atomic_uint **)&v32);
        uint64_t v29 = sub_2169791E0(a1);
        memset(v31, 0, sizeof(v31));
        sub_216A6A608(v29, (uint64_t **)v31, &__p);
        v43 = v31;
        sub_216889A04((void ***)&v43);
        uint64_t v30 = __p;
        if (__p != v36)
        {
          while ((*v30 & 0xFFFFFFFFFFFFFFF8) != (v34 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v30 == v36)
            {
              uint64_t v30 = v36;
              break;
            }
          }
        }
        BOOL v18 = v30 != v36;
        if (a6 && v30 == v36) {
          MEMORY[0x21D4477E0](a6, "Coding error: Object is not in its parent's children");
        }
        v31[0] = &__p;
        sub_216889A04(v31);
        if ((v32 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        sub_21697B754(&v33);
        if ((v34 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if (a6) {
          MEMORY[0x21D4477E0](a6, "Invalid index");
        }
        BOOL v18 = 0;
      }
      __p = &v38;
      sub_216889A04((void ***)&__p);
      goto LABEL_25;
    }
    if (!a6) {
      goto LABEL_24;
    }
    uint64_t v23 = "Cannot reparent object under itself";
    goto LABEL_23;
  }
  BOOL v18 = 1;
LABEL_25:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
  sub_21697C414(&v40);
LABEL_15:
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v18;
}

void sub_216A7DD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23)
{
  __p = &a22;
  sub_216889A04((void ***)&__p);
  sub_21697B754((_DWORD *)(v23 - 88));
  uint64_t v25 = *(void *)(v23 - 80);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::CanRemoveChildForBatchNamespaceEdit(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  sub_216A69BE4((atomic_uint **)&v19);
  int v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v7))
  {
    uint64_t v8 = sub_2169791E0(a1);
    memset(v15, 0, sizeof(v15));
    uint64_t v9 = sub_216A5B7B0((uint64_t *)(v8 + 112));
    (*(void (**)(void ****__return_ptr))(*(void *)v9 + 136))(&v20);
    if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
    {
      if ((v21 & 4) != 0) {
        uint64_t v10 = (uint64_t **)(*(uint64_t (**)(void ****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
      }
      else {
        uint64_t v10 = (uint64_t **)v20;
      }
    }
    else
    {
      uint64_t v10 = (uint64_t **)v15;
    }
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    sub_21698FA28(&v16, *v10, v10[1], v10[1] - *v10);
    BOOL v12 = (void ***)sub_2168EE084((uint64_t)&v20);
    uint64_t v20 = v15;
    sub_216889A04(v12);
    uint64_t v13 = v16;
    if (v16 != v17)
    {
      while ((*v13 & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v13 == v17)
        {
          uint64_t v13 = v17;
          break;
        }
      }
    }
    BOOL v11 = v13 != v17;
    if (a4 && v13 == v17) {
      MEMORY[0x21D4477E0](a4, "Object does not exist");
    }
    v15[0] = (void **)&v16;
    sub_216889A04(v15);
  }
  else
  {
    if (a4) {
      MEMORY[0x21D4477E0](a4, "Layer is not editable");
    }
    BOOL v11 = 0;
  }
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v11;
}

void sub_216A7E054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  a10 = (void **)&a13;
  sub_216889A04(&a10);
  if ((a16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::CreateSpec(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v1 = (uint64_t *)(a1 + 8);
  if (v2) {
    sub_216850B68(v1);
  }

  pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::CreateSpec();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::CreateSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
    uint64_t Spec = pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(a1, a2, a3, a4);
    if (Spec)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v18);
      sub_216A69BE4((atomic_uint **)__p);
      uint64_t v9 = *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      if ((v9 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::TfToken>();
    }
    uint64_t v18 = "sdf/childrenUtils.cpp";
    unint64_t v19 = "CreateSpec";
    uint64_t v20 = 101;
    uint64_t v21 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relation"
          "shipChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl_"
          "_pxrReserved__::Sdf_RelationshipChildPolicy]";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C755200, a3, (uint64_t)__p);
    int v10 = v16;
    BOOL v11 = (void **)__p[0];
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    uint64_t v13 = __p;
    if (v10 < 0) {
      uint64_t v13 = v11;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to create spec of type '%s' at <%s>", (const char *)v13, Text);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
  }
  else
  {
    uint64_t v18 = "sdf/childrenUtils.cpp";
    unint64_t v19 = "CreateSpec";
    uint64_t v20 = 90;
    uint64_t v21 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relation"
          "shipChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl_"
          "_pxrReserved__::Sdf_RelationshipChildPolicy]";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid object type");
    return 0;
  }
  return Spec;
}

void sub_216A7E310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::IsValidName(pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  if ((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }

  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::IsValidName((size_t *)EmptyString);
}

double pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::CanRename@<D0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, (uint64_t *)__p);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)__p);
  char v4 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v3);
  uint64_t v5 = __p[1];
  if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(void *))(*(void *)v5 + 8))(v5);
  }
  if (v4) {
    pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::IsValidName();
  }
  sub_216779094(__p, "Layer is not editable");
  double result = *(double *)__p;
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(void *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 24) = 1;
  return result;
}

void sub_216A7E664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

_DWORD *sub_216A7E718@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a1, &v6);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, a2, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_21697C414(&v6);
}

void sub_216A7E77C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::Rename(pxrInternal__aapl__pxrReserved__::SdfSpec *a1)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, v1);
  pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::IsValidName();
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::SetChildren(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, long long *a3)
{
  uint64_t v113 = *MEMORY[0x263EF8340];
  sub_216A69BE4((atomic_uint **)&v106);
  long long v104 = 0uLL;
  unint64_t v105 = 0;
  __p[1] = 0;
  uint64_t v98 = 0;
  __p[0] = &__p[1];
  for (long long i = *a3; (void)i != *((void *)&i + 1); sub_216A8EAF0(&i))
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A8EA70((uint64_t *)&i, v6, v7);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v8)) {
      goto LABEL_13;
    }
    BOOL v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A8EA70((uint64_t *)&i, v9, v10);
    sub_216A67B9C(v11, (uint64_t)&v107);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v101);
    if (SHIBYTE(v108) < 0) {
      operator delete((void *)v107);
    }
    sub_216A8E144((uint64_t **)__p, (uint64_t *)&v101, (uint64_t *)&v101);
    if (v9) {
      goto LABEL_9;
    }
    BOOL v12 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A8EA70((uint64_t *)&i, v9, v10);
    uint64_t v13 = sub_216A67AC0(v12);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v13, &j);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&j, &v107);
    uint64_t v14 = v107;
    uint64_t v15 = *(void *)a2;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v107 + 1);
    sub_21697C414(&v107);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
    sub_21697C414(&j);
    if (v14 != v15) {
LABEL_9:
    }
      char v16 = 1;
    else {
      char v16 = 0;
    }
    if ((v101 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v101 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v16)
    {
LABEL_13:
      uint64_t v17 = (atomic_uint **)sub_216A8EA70((uint64_t *)&i, v9, v10);
      uint64_t v18 = *((void *)&v104 + 1);
      if (*((void *)&v104 + 1) >= v105)
      {
        uint64_t v20 = sub_216A8E01C((atomic_uint ***)&v104, v17);
      }
      else
      {
        unint64_t v19 = *v17;
        **((void **)&v104 + 1) = *v17;
        if (v19) {
          atomic_fetch_add(v19, 1u);
        }
        uint64_t v20 = (char *)(v18 + 8);
      }
      *((void *)&v104 + 1) = v20;
    }
  }
  sub_2168CB05C((uint64_t)__p, (void *)__p[1]);
  uint64_t v21 = sub_2169791E0(a1);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v98 = 0;
  uint64_t v22 = sub_216A5B7B0((uint64_t *)(v21 + 112));
  (*(void (**)(long long *__return_ptr))(*(void *)v22 + 136))(&i);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&i))
  {
    if ((BYTE8(i) & 4) != 0) {
      uint64_t v23 = (uint64_t **)(*(uint64_t (**)(long long *))((*((void *)&i + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&i);
    }
    else {
      uint64_t v23 = (uint64_t **)i;
    }
  }
  else
  {
    uint64_t v23 = (uint64_t **)__p;
  }
  long long v107 = 0uLL;
  uint64_t v108 = 0;
  sub_21698FA28(&v107, *v23, v23[1], v23[1] - *v23);
  uint64_t v24 = (void ***)sub_2168EE084((uint64_t)&i);
  *(void *)&long long i = __p;
  sub_216889A04(v24);
  *((void *)&i + 1) = 0;
  uint64_t v110 = 0;
  *(void *)&long long i = (char *)&i + 8;
  unint64_t v101 = 0;
  v102 = 0;
  unint64_t v103 = 0;
  sub_216973388((char **)&v101, (uint64_t)(*((void *)&v104 + 1) - v104) >> 3);
  for (long long j = v104; (void)j != *((void *)&j + 1); sub_216A7FB04(&j))
  {
    unint64_t v27 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A7FA84((uint64_t *)&j, v25, v26);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v27))
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      uint64_t v98 = 181;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relati"
            "onshipChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPol"
            "icy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
      goto LABEL_92;
    }
    uint64_t v30 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A7FA84((uint64_t *)&j, v28, v29);
    sub_216A67B9C(v30, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v86);
    if (SHIBYTE(v98) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v31 = v102;
    if ((unint64_t)v102 >= v103)
    {
      int v33 = sub_216973984((char **)&v101, (uint64_t *)&v86);
    }
    else
    {
      unint64_t v32 = v86;
      uint64_t *v102 = v86;
      if ((v32 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v31 &= 0xFFFFFFFFFFFFFFF8;
      }
      int v33 = (char *)(v31 + 1);
    }
    v102 = (uint64_t *)v33;
    sub_216A8E144((uint64_t **)&i, (uint64_t *)&v86, (uint64_t *)&v86);
    if ((v34 & 1) == 0)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      uint64_t v98 = 188;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relati"
            "onshipChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPol"
            "icy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate child");
LABEL_90:
      if ((v86 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
LABEL_92:
      BOOL v59 = 0;
      goto LABEL_97;
    }
    v36 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A7FA84((uint64_t *)&j, v34, v35);
    uint64_t v37 = (uint64_t **)sub_216A67AC0(v36);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v37, (uint64_t *)__p);
    uint64_t v38 = sub_216851B24((uint64_t)__p);
    uint64_t v41 = sub_216851B24((uint64_t)a1);
    unint64_t v42 = __p[1];
    if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(void *))(*(void *)v42 + 8))(v42);
    }
    if (v38 != v41)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      uint64_t v98 = 193;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relati"
            "onshipChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPol"
            "icy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
      goto LABEL_90;
    }
    v43 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A7FA84((uint64_t *)&j, v39, v40);
    unint64_t v44 = sub_216A67AC0(v43);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v44, &v111);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v111, __p);
    if (*(void **)a2 == __p[0])
    {
      BOOL HasPrefix = 0;
    }
    else
    {
      v48 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A7FA84((uint64_t *)&j, v45, v46);
      uint64_t v49 = sub_216A67AC0(v48);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v49, &k);
      BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&k);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
      sub_21697C414(&k);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_21697C414(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v111 + 1);
    sub_21697C414(&v111);
    if (HasPrefix)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      uint64_t v98 = 203;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relati"
            "onshipChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPol"
            "icy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      goto LABEL_90;
    }
    if ((v86 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v96);
  *(_OWORD *)__p = v107;
  while (__p[0] != __p[1])
  {
    uint64_t v52 = (uint64_t *)sub_2169CEBC8((uint64_t *)__p, v50, v51);
    if ((void *)((char *)&i + 8) == sub_216A8E1C4((uint64_t)&i, v52))
    {
      uint64_t v55 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_2169CEBC8((uint64_t *)__p, v53, v54);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a2, v55, (int *)&j);
      v56 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v56, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&j);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
      sub_21697C414(&j);
    }
    sub_2169CECC4(__p);
  }
  sub_216A8E254((uint64_t)&j, (uint64_t *)v107, *((uint64_t **)&v107 + 1));
  for (long long k = v104; ; sub_216A7FB04(&k))
  {
    BOOL v59 = k == *((void *)&k + 1);
    if ((void)k == *((void *)&k + 1)) {
      break;
    }
    uint64_t v60 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A7FA84((uint64_t *)&k, v57, v58);
    sub_216A67B9C(v60, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v93);
    if (SHIBYTE(v98) < 0) {
      operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v93, &v91);
    uint64_t v63 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A7FA84((uint64_t *)&k, v61, v62);
    uint64_t v64 = sub_216A67AC0(v63);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v64, __p);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, &v90);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_21697C414(__p);
    if (v90 == *(void *)a2)
    {
      int v65 = 10;
    }
    else
    {
      if ((void *)((char *)&j + 8) != sub_216A8E1C4((uint64_t)&j, &v93))
      {
        v66 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v66, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v91);
      }
      sub_216A69BE4((atomic_uint **)&v89);
      uint64_t v67 = sub_2169791E0(a1);
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v98 = 0;
      uint64_t v68 = sub_216A5B7B0((uint64_t *)(v67 + 112));
      (*(void (**)(void ***__return_ptr))(*(void *)v68 + 136))(&v111);
      if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v111))
      {
        if ((v112 & 4) != 0) {
          v69 = (uint64_t **)(*(uint64_t (**)(void ***))((v112 & 0xFFFFFFFFFFFFFFF8) + 168))(&v111);
        }
        else {
          v69 = (uint64_t **)v111;
        }
      }
      else
      {
        v69 = (uint64_t **)__p;
      }
      unint64_t v86 = 0;
      v87 = 0;
      uint64_t v88 = 0;
      sub_21698FA28(&v86, *v69, v69[1], v69[1] - *v69);
      v70 = (void ***)sub_2168EE084((uint64_t)&v111);
      v111 = __p;
      sub_216889A04(v70);
      v71 = (uint64_t *)v86;
      if ((uint64_t *)v86 != v87)
      {
        while ((*v71 & 0xFFFFFFFFFFFFFFF8) != (v93 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v71 == v87)
          {
            v71 = v87;
            break;
          }
        }
      }
      if (v71 == v87)
      {
        __p[0] = "sdf/childrenUtils.cpp";
        __p[1] = "SetChildren";
        uint64_t v98 = 254;
        v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Rela"
              "tionshipChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename Chil"
              "dPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
        char v100 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        int v65 = 1;
      }
      else
      {
        sub_216A8E2D8(v71 + 1, v87, v71);
        for (m = v87; m != v72; --m)
        {
          uint64_t v75 = *(m - 1);
          uint64_t v74 = v75;
          if ((v75 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        v87 = v72;
        if ((uint64_t *)v86 == v72)
        {
          v77 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v77, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v90, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v89);
        }
        else
        {
          v76 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          sub_216A6A718(v76, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v90, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v89, (uint64_t **)&v86);
        }
        v78 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
        v81 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A7FA84((uint64_t *)&k, v79, v80);
        v82 = sub_216A67AC0(v81);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v82, __p);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v78, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v91);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_21697C414(__p);
        int v65 = 0;
      }
      __p[0] = &v86;
      sub_216889A04((void ***)__p);
      if ((v89 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v89 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v90 + 1);
    sub_21697C414(&v90);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v92);
    sub_21697C414(&v91);
    if ((v93 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v65 != 10 && v65) {
      goto LABEL_96;
    }
  }
  if ((uint64_t *)v101 == v102)
  {
    v84 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v84, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v106);
  }
  else
  {
    v83 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    sub_216A6A718(v83, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v106, (uint64_t **)&v101);
  }
LABEL_96:
  sub_2168CB05C((uint64_t)&j, *((void **)&j + 1));
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v96);
LABEL_97:
  __p[0] = &v101;
  sub_216889A04((void ***)__p);
  sub_2168CB05C((uint64_t)&i, *((void **)&i + 1));
  __p[0] = &v107;
  sub_216889A04((void ***)__p);
  __p[0] = &v104;
  sub_216991094((void ***)__p);
  if ((v106 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v59;
}

void sub_216A7F758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __p = &a34;
  sub_216889A04((void ***)&__p);
  sub_2168CB05C(v37 - 144, *(void **)(v37 - 136));
  __p = (uint64_t *)(v37 - 176);
  sub_216889A04((void ***)&__p);
  __p = (uint64_t *)&a37;
  sub_216991094((void ***)&__p);
  uint64_t v39 = *(void *)(v37 - 184);
  if ((v39 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216A7FA84(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfHand"
            "le<pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec>>>::operator*() [T = std::vector<pxrInternal__aapl_"
            "_pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec>>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216A7FAFC()
{
}

void *sub_216A7FB04(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec>>>::operator++() [T = std::vector<pxr"
            "Internal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::InsertChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, int a4)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  sub_216A69BE4(v58);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    __p = "sdf/childrenUtils.cpp";
    v54 = "InsertChild";
    uint64_t v55 = 290;
    v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relation"
          "shipChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &"
          ", int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
    char v57 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
LABEL_8:
    BOOL v12 = 0;
    goto LABEL_9;
  }
  uint64_t v8 = (uint64_t **)sub_216A67AC0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v8, (uint64_t *)&__p);
  uint64_t v9 = sub_216851B24((uint64_t)&__p);
  uint64_t v10 = sub_216851B24((uint64_t)a1);
  BOOL v11 = v54;
  if (v54 && atomic_fetch_add_explicit((atomic_uint *volatile)v54 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(const char *))(*(void *)v11 + 8))(v11);
  }
  if (v9 != v10)
  {
    __p = "sdf/childrenUtils.cpp";
    v54 = "InsertChild";
    uint64_t v55 = 295;
    v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relation"
          "shipChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &"
          ", int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
    char v57 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
    goto LABEL_8;
  }
  uint64_t v14 = sub_216A67AC0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v47);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v47, &__p);
  uint64_t v15 = __p;
  char v16 = *(void **)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47 + 1);
  sub_21697C414(&v47);
  if (v15 == v16)
  {
    BOOL v12 = 1;
  }
  else
  {
    sub_216A67B9C(a3, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v52);
    if (SHIBYTE(v55) < 0) {
      operator delete(__p);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v52, &v50);
    uint64_t v17 = sub_216A67AC0(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v17, &__p);
    BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_21697C414(&__p);
    if (HasPrefix)
    {
      __p = "sdf/childrenUtils.cpp";
      v54 = "InsertChild";
      uint64_t v55 = 312;
      v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relati"
            "onshipChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueTy"
            "pe &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
      char v57 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      BOOL v12 = 0;
    }
    else
    {
      uint64_t v19 = sub_2169791E0(a1);
      __p = 0;
      v54 = 0;
      uint64_t v55 = 0;
      uint64_t v20 = sub_216A5B7B0((uint64_t *)(v19 + 112));
      (*(void (**)(void ***__return_ptr))(*(void *)v20 + 136))(&v59);
      if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v59))
      {
        if ((v60 & 4) != 0) {
          p_p = (void **)(*(uint64_t (**)(void ***))(((unint64_t)v60 & 0xFFFFFFFFFFFFFFF8) + 168))(&v59);
        }
        else {
          p_p = v59;
        }
      }
      else
      {
        p_p = &__p;
      }
      uint64_t v47 = 0;
      v48 = 0;
      uint64_t v49 = 0;
      sub_21698FA28(&v47, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((unsigned char *)p_p[1] - (unsigned char *)*p_p) >> 3);
      uint64_t v22 = (void ***)sub_2168EE084((uint64_t)&v59);
      BOOL v59 = &__p;
      sub_216889A04(v22);
      unint64_t v25 = (unint64_t)((char *)v48 - (char *)v47) >> 3;
      if (a4 != -1) {
        LODWORD(v25) = a4;
      }
      uint64_t v26 = (int)v25;
      if ((int)v25 <= (unint64_t)(((char *)v48 - (char *)v47) >> 3))
      {
        BOOL v59 = v47;
        uint64_t v60 = (void **)v48;
        while (v59 != v60)
        {
          uint64_t v28 = (void *)sub_2169CEBC8((uint64_t *)&v59, v23, v24);
          if ((*v28 & 0xFFFFFFFFFFFFFFF8) == (v52 & 0xFFFFFFFFFFFFFFF8))
          {
            __p = "sdf/childrenUtils.cpp";
            v54 = "InsertChild";
            uint64_t v55 = 334;
            v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "RelationshipChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPol"
                  "icy::ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
            char v57 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert duplicate spec %s", Text);
            goto LABEL_34;
          }
          sub_2169CECC4(&v59);
        }
        uint64_t v29 = sub_216A67AC0(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v29, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v45);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_21697C414(&__p);
        sub_216A69BE4((atomic_uint **)&v44);
        uint64_t v30 = sub_2169791E0(a1);
        __p = 0;
        v54 = 0;
        uint64_t v55 = 0;
        uint64_t v31 = sub_216A5B7B0((uint64_t *)(v30 + 112));
        (*(void (**)(atomic_uint **__return_ptr))(*(void *)v31 + 136))(&v62);
        if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v62))
        {
          if ((v63 & 4) != 0) {
            unint64_t v32 = (uint64_t **)(*(uint64_t (**)(atomic_uint **))((v63 & 0xFFFFFFFFFFFFFFF8) + 168))(&v62);
          }
          else {
            unint64_t v32 = (uint64_t **)v62;
          }
        }
        else
        {
          unint64_t v32 = (uint64_t **)&__p;
        }
        BOOL v59 = 0;
        uint64_t v60 = 0;
        uint64_t v61 = 0;
        sub_21698FA28(&v59, *v32, v32[1], v32[1] - *v32);
        uint64_t v34 = (void ***)sub_2168EE084((uint64_t)&v62);
        v62 = (atomic_uint *)&__p;
        sub_216889A04(v34);
        uint64_t v35 = v59;
        if (v59 != v60)
        {
          while (((unint64_t)*v35 & 0xFFFFFFFFFFFFFFF8) != (v52 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v35 == v60)
            {
              uint64_t v35 = v60;
              break;
            }
          }
        }
        BOOL v12 = v35 != v60;
        if (v35 == v60)
        {
          __p = "sdf/childrenUtils.cpp";
          v54 = "InsertChild";
          uint64_t v55 = 352;
          v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Re"
                "lationshipChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy:"
                ":ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
          char v57 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
          sub_216A6B648((uint64_t)&v59, v35);
          if (v59 == v60)
          {
            uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
            pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v44);
          }
          else
          {
            v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
            sub_216A6A718(v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v44, (uint64_t **)&v59);
          }
          uint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          uint64_t v39 = sub_216A67AC0(a3);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v39, &v62);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v38, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v62, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
          sub_21697B754(&v62);
          sub_216A6BFEC(&v47, (char *)&v47[v26], (char *)&v52);
          int v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          sub_216A6A718(v40, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v58, (uint64_t **)&v47);
          uint64_t v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, &v62);
          uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v62);
          if ((IsDormant & 1) == 0)
          {
            unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
            pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v62);
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v62);
          sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
        }
        __p = &v59;
        sub_216889A04((void ***)&__p);
        if ((v44 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
        sub_21697C414(&v45);
      }
      else
      {
        __p = "sdf/childrenUtils.cpp";
        v54 = "InsertChild";
        uint64_t v55 = 326;
        v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Rela"
              "tionshipChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::Val"
              "ueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
        char v57 = 0;
        unint64_t v27 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert spec %s at an invalid index %d", v27, v26);
LABEL_34:
        BOOL v12 = 0;
      }
      __p = &v47;
      sub_216889A04((void ***)&__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v51);
    sub_21697C414(&v50);
    if ((v52 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
LABEL_9:
  if (((uint64_t)v58[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v58[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v12;
}

void sub_216A802A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,__int16 *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  __p = (__int16 *)(v30 - 112);
  sub_216889A04((void ***)&__p);
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754(&a12);
  __p = &a14;
  sub_216889A04((void ***)&__p);
  sub_21697B754(&a19);
  if ((a20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::RemoveChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  sub_216A69BE4((atomic_uint **)&v28);
  uint64_t v4 = sub_2169791E0(a1);
  memset(v24, 0, sizeof(v24));
  uint64_t v5 = sub_216A5B7B0((uint64_t *)(v4 + 112));
  (*(void (**)(unint64_t *__return_ptr))(*(void *)v5 + 136))(&v31);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v31))
  {
    if ((v32 & 4) != 0) {
      char v6 = (uint64_t **)(*(uint64_t (**)(unint64_t *))((v32 & 0xFFFFFFFFFFFFFFF8) + 168))(&v31);
    }
    else {
      char v6 = (uint64_t **)v31;
    }
  }
  else
  {
    char v6 = (uint64_t **)v24;
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  sub_21698FA28(&v25, *v6, v6[1], v6[1] - *v6);
  int v7 = (void ***)sub_2168EE084((uint64_t)&v31);
  unint64_t v31 = (unint64_t)v24;
  sub_216889A04(v7);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v31);
  uint64_t v8 = (uint64_t *)v25;
  unint64_t v9 = v31;
  if ((uint64_t *)v25 == v26)
  {
LABEL_9:
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v10 = -v25;
    while ((*v8 & 0xFFFFFFFFFFFFFFF8) != (v31 & 0xFFFFFFFFFFFFFFF8))
    {
      ++v8;
      v10 -= 8;
      if (v8 == v26) {
        goto LABEL_9;
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v31, &v29);
    BOOL v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v29);
    sub_216A8E2D8((void *)(8 - v10), v26, (void *)-v10);
    for (long long i = v26; i != v13; --i)
    {
      uint64_t v16 = *(i - 1);
      uint64_t v15 = v16;
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v26 = v13;
    if ((uint64_t *)v25 == v13)
    {
      uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v18, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28);
    }
    else
    {
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      sub_216A6A718(v17, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28, (uint64_t **)&v25);
    }
    uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v19, a2, &v23);
    uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v23);
    if ((IsDormant & 1) == 0)
    {
      unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
      pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v23);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v23);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
    sub_21697C414(&v29);
    uint64_t v11 = 1;
    unint64_t v9 = v31;
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
  v24[0] = (void **)&v25;
  sub_216889A04(v24);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v11;
}

void sub_216A80768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::MoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, int a5)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  sub_216A69BE4(v55);
  sub_216A80F7C(a2, a4, (int *)&v54);
  uint64_t v10 = sub_216A67AC0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v10, &v51);
  uint64_t v11 = v54;
  BOOL v12 = v51;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v51 + 1);
  sub_21697C414(&v51);
  if (a5 == -2 && v11 == v12) {
    goto LABEL_59;
  }
  uint64_t v13 = sub_2169791E0(a1);
  __p = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v14 = sub_216A5B7B0((uint64_t *)(v13 + 112));
  (*(void (**)(void ***__return_ptr))(*(void *)v14 + 136))(&v56);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v56))
  {
    if ((v57 & 4) != 0) {
      p_p = (void **)(*(uint64_t (**)(void ***))((v57 & 0xFFFFFFFFFFFFFFF8) + 168))(&v56);
    }
    else {
      p_p = v56;
    }
  }
  else
  {
    p_p = &__p;
  }
  int v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  sub_21698FA28(&v51, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((unsigned char *)p_p[1] - (unsigned char *)*p_p) >> 3);
  sub_2168EE084((uint64_t)&v56);
  v56 = &__p;
  sub_216889A04(&v56);
  sub_216A67B9C(a3, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v47);
  if (SHIBYTE(v50) < 0) {
    operator delete(__p);
  }
  uint64_t v16 = sub_216A67AC0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v46);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (a5 == -2 && v46 == *(void *)a2)
  {
    if (v51 == v52)
    {
      uint64_t v17 = v51;
    }
    else
    {
      uint64_t v17 = v51;
      while ((*v17 & 0xFFFFFFFFFFFFFFF8) != (v47 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v17 == v52)
        {
          uint64_t v17 = v52;
          break;
        }
      }
    }
    unint64_t v18 = (unint64_t)((char *)v17 - (char *)v51) >> 3;
  }
  else if (v52 - v51 >= (unint64_t)a5)
  {
    LODWORD(v18) = a5;
  }
  else
  {
    LODWORD(v18) = v52 - v51;
  }
  sub_216A69BE4((atomic_uint **)&v45);
  uint64_t v19 = sub_2169791E0(a1);
  v56 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v20 = sub_216A5B7B0((uint64_t *)(v19 + 112));
  (*(void (**)(void ****__return_ptr))(*(void *)v20 + 136))(&v59);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v59))
  {
    if ((v60 & 4) != 0) {
      uint64_t v21 = (void ***)(*(uint64_t (**)(void ****))((v60 & 0xFFFFFFFFFFFFFFF8) + 168))(&v59);
    }
    else {
      uint64_t v21 = v59;
    }
  }
  else
  {
    uint64_t v21 = &v56;
  }
  __p = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  sub_21698FA28(&__p, (uint64_t *)*v21, (uint64_t *)v21[1], v21[1] - *v21);
  uint64_t v22 = (void ***)sub_2168EE084((uint64_t)&v59);
  BOOL v59 = &v56;
  sub_216889A04(v22);
  uint64_t v23 = (char *)__p;
  if (__p != v49)
  {
    while ((*(void *)v23 & 0xFFFFFFFFFFFFFFF8) != (v47 & 0xFFFFFFFFFFFFFFF8))
    {
      v23 += 8;
      if (v23 == v49)
      {
        uint64_t v23 = v49;
        break;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v56);
  if (v46 == *(void *)a2)
  {
    uint64_t v24 = v23 - (unsigned char *)__p;
    if ((v47 & 0xFFFFFFFFFFFFFFF8) == (*(void *)a4 & 0xFFFFFFFFFFFFFFF8)
      && (v18 == ((unint64_t)v24 >> 3)
       || ((unint64_t)v24 >> 3) + 1 == v18))
    {
      goto LABEL_54;
    }
    BOOL v26 = (int)v18 > v24 >> 3;
    uint64_t v27 = v51;
    if (v51 != v52)
    {
      while ((*v27 & 0xFFFFFFFFFFFFFFF8) != (v47 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v27 == v52)
        {
          uint64_t v27 = v52;
          break;
        }
      }
    }
    sub_216A8E2D8(v27 + 1, v52, v27);
    LODWORD(v18) = v18 - v26;
    for (long long i = v52; i != v28; --i)
    {
      uint64_t v31 = *(i - 1);
      uint64_t v30 = v31;
      if ((v31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v52 = v28;
  }
  else
  {
    sub_216A8E2D8((void *)v23 + 1, v49, v23);
    for (long long j = v49; j != v32; j -= 8)
    {
      uint64_t v35 = *((void *)j - 1);
      uint64_t v34 = v35;
      if ((v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v49 = v32;
    if (__p == v32)
    {
      uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v45);
      uint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v38, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, &v59);
      uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v59);
      if ((IsDormant & 1) == 0)
      {
        unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
        pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (atomic_uint **)&v59);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v59);
    }
    else
    {
      v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      sub_216A6A718(v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v45, (uint64_t **)&__p);
    }
  }
  uint64_t v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  unint64_t v42 = sub_216A67AC0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v42, &v59);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v59, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v54);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
  sub_21697C414(&v59);
  sub_216A6BFEC(&v51, (char *)&v51[(int)v18], (char *)a4);
  v43 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  sub_216A6A718(v43, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v55, &v51);
LABEL_54:
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v56);
  v56 = &__p;
  sub_216889A04(&v56);
  if ((v45 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_21697C414(&v46);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __p = &v51;
  sub_216889A04((void ***)&__p);
LABEL_59:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v54 + 1);
  sub_21697C414(&v54);
  if (((uint64_t)v55[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v55[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return 1;
}

void sub_216A80DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,void **p_p)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 88));
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&p_p);
  p_p = (void **)&__p;
  sub_216889A04(&p_p);
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754(&a10);
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __p = &a18;
  sub_216889A04((void ***)&__p);
  sub_21697B754(&a21);
  if ((a22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_216A80F7C(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int *a3@<X8>)
{
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::IsValidName((size_t *)EmptyString))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a1, a2, a3);
  }
  else
  {
    *(void *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::CanMoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, int a5, uint64_t a6)
{
  sub_216A69BE4((atomic_uint **)&v42);
  BOOL v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v12) & 1) == 0)
  {
    if (a6)
    {
      uint64_t v13 = "Layer is not editable";
      goto LABEL_13;
    }
LABEL_14:
    BOOL v18 = 0;
    goto LABEL_15;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    if (a6)
    {
      uint64_t v13 = "Object does not exist";
LABEL_13:
      MEMORY[0x21D4477E0](a6, v13);
      goto LABEL_14;
    }
    goto LABEL_14;
  }
  uint64_t v14 = (uint64_t **)sub_216A67AC0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v14, &v38);
  uint64_t v15 = sub_216851B24((uint64_t)&v38);
  uint64_t v16 = sub_216851B24((uint64_t)a1);
  uint64_t v17 = v39;
  if (v39 && atomic_fetch_add_explicit((atomic_uint *volatile)(v39 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  if (v15 != v16)
  {
    if (a6)
    {
      uint64_t v13 = "Cannot reparent to another layer";
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  sub_216A80F7C(a2, a4, &v40);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v40))
  {
    if (!a6)
    {
LABEL_24:
      BOOL v18 = 0;
      goto LABEL_25;
    }
    uint64_t v23 = "Invalid name";
LABEL_23:
    MEMORY[0x21D4477E0](a6, v23);
    goto LABEL_24;
  }
  uint64_t v20 = sub_216A67AC0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v20, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v38);
  uint64_t v21 = v38;
  uint64_t v22 = *(void *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v38 + 1);
  sub_21697C414(&v38);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (v21 != v22)
  {
    uint64_t v24 = sub_216A67AC0(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v24, &v38);
    BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v38 + 1);
    sub_21697C414(&v38);
    if (!HasPrefix)
    {
      uint64_t v26 = sub_2169791E0(a1);
      __p = 0;
      v36 = 0;
      uint64_t v37 = 0;
      sub_216A6A608(v26, (uint64_t **)&__p, &v38);
      v31[0] = &__p;
      sub_216889A04(v31);
      unint64_t v27 = (unint64_t)(v39 - v38) >> 3;
      if (a5 != -1) {
        LODWORD(v27) = a5;
      }
      if (v27 == -2 || (int)v27 <= (unint64_t)((v39 - v38) >> 3))
      {
        sub_216A67B9C(a3, (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v34);
        if (SHIBYTE(v37) < 0) {
          operator delete(__p);
        }
        unint64_t v28 = sub_216A67AC0(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v33);
        sub_21697B754(&__p);
        sub_216A69BE4((atomic_uint **)&v32);
        uint64_t v29 = sub_2169791E0(a1);
        memset(v31, 0, sizeof(v31));
        sub_216A6A608(v29, (uint64_t **)v31, &__p);
        v43 = v31;
        sub_216889A04((void ***)&v43);
        uint64_t v30 = __p;
        if (__p != v36)
        {
          while ((*v30 & 0xFFFFFFFFFFFFFFF8) != (v34 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v30 == v36)
            {
              uint64_t v30 = v36;
              break;
            }
          }
        }
        BOOL v18 = v30 != v36;
        if (a6 && v30 == v36) {
          MEMORY[0x21D4477E0](a6, "Coding error: Object is not in its parent's children");
        }
        v31[0] = &__p;
        sub_216889A04(v31);
        if ((v32 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        sub_21697B754(&v33);
        if ((v34 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if (a6) {
          MEMORY[0x21D4477E0](a6, "Invalid index");
        }
        BOOL v18 = 0;
      }
      __p = &v38;
      sub_216889A04((void ***)&__p);
      goto LABEL_25;
    }
    if (!a6) {
      goto LABEL_24;
    }
    uint64_t v23 = "Cannot reparent object under itself";
    goto LABEL_23;
  }
  BOOL v18 = 1;
LABEL_25:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
  sub_21697C414(&v40);
LABEL_15:
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v18;
}

void sub_216A8140C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23)
{
  __p = &a22;
  sub_216889A04((void ***)&__p);
  sub_21697B754((_DWORD *)(v23 - 88));
  uint64_t v25 = *(void *)(v23 - 80);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::CanRemoveChildForBatchNamespaceEdit(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  sub_216A69BE4((atomic_uint **)&v19);
  int v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v7))
  {
    uint64_t v8 = sub_2169791E0(a1);
    memset(v15, 0, sizeof(v15));
    uint64_t v9 = sub_216A5B7B0((uint64_t *)(v8 + 112));
    (*(void (**)(void ****__return_ptr))(*(void *)v9 + 136))(&v20);
    if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
    {
      if ((v21 & 4) != 0) {
        uint64_t v10 = (uint64_t **)(*(uint64_t (**)(void ****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
      }
      else {
        uint64_t v10 = (uint64_t **)v20;
      }
    }
    else
    {
      uint64_t v10 = (uint64_t **)v15;
    }
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    sub_21698FA28(&v16, *v10, v10[1], v10[1] - *v10);
    BOOL v12 = (void ***)sub_2168EE084((uint64_t)&v20);
    uint64_t v20 = v15;
    sub_216889A04(v12);
    uint64_t v13 = v16;
    if (v16 != v17)
    {
      while ((*v13 & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v13 == v17)
        {
          uint64_t v13 = v17;
          break;
        }
      }
    }
    BOOL v11 = v13 != v17;
    if (a4 && v13 == v17) {
      MEMORY[0x21D4477E0](a4, "Object does not exist");
    }
    v15[0] = (void **)&v16;
    sub_216889A04(v15);
  }
  else
  {
    if (a4) {
      MEMORY[0x21D4477E0](a4, "Layer is not editable");
    }
    BOOL v11 = 0;
  }
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v11;
}

void sub_216A81760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  a10 = (void **)&a13;
  sub_216889A04(&a10);
  if ((a16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::CreateSpec(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v1 = (uint64_t *)(a1 + 8);
  if (v2) {
    sub_216850B68(v1);
  }

  pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::CreateSpec();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::CreateSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
    uint64_t Spec = pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(a1, a2, a3, a4);
    if (Spec)
    {
      sub_216A687F4(a2, &v18);
      sub_216A81AA0((atomic_uint **)__p);
      uint64_t v9 = *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      if ((v9 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::TfToken>();
    }
    uint64_t v18 = "sdf/childrenUtils.cpp";
    unint64_t v19 = "CreateSpec";
    uint64_t v20 = 101;
    uint64_t v21 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantC"
          "hildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl__pxrR"
          "eserved__::Sdf_VariantChildPolicy]";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C755200, a3, (uint64_t)__p);
    int v10 = v16;
    BOOL v11 = (void **)__p[0];
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    uint64_t v13 = __p;
    if (v10 < 0) {
      uint64_t v13 = v11;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to create spec of type '%s' at <%s>", (const char *)v13, Text);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
  }
  else
  {
    uint64_t v18 = "sdf/childrenUtils.cpp";
    unint64_t v19 = "CreateSpec";
    uint64_t v20 = 90;
    uint64_t v21 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantC"
          "hildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl__pxrR"
          "eserved__::Sdf_VariantChildPolicy]";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid object type");
    return 0;
  }
  return Spec;
}

void sub_216A81A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
}

pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *sub_216A81AA0@<X0>(atomic_uint **a1@<X8>)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!result) {
    uint64_t result = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  v3 = (atomic_uint *)*((void *)result + 7);
  *a1 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      *a1 = v4;
    }
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::IsValidName(pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  if ((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }

  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName((uint64_t)EmptyString);
}

double pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::CanRename@<D0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, (uint64_t *)__p);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)__p);
  char v4 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v3);
  uint64_t v5 = __p[1];
  if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(void *))(*(void *)v5 + 8))(v5);
  }
  if (v4) {
    pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::IsValidName();
  }
  sub_216779094(__p, "Layer is not editable");
  double result = *(double *)__p;
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(void *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 24) = 1;
  return result;
}

void sub_216A81DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

_DWORD *sub_216A81E88@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, void *a2@<X1>, _DWORD *a3@<X8>)
{
  sub_216A687F4(a1, &v6);
  sub_216A68404((pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, a2, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_21697C414(&v6);
}

void sub_216A81EEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::Rename(pxrInternal__aapl__pxrReserved__::SdfSpec *a1)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, v1);
  pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::IsValidName();
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::SetChildren(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, long long *a3)
{
  uint64_t v113 = *MEMORY[0x263EF8340];
  sub_216A81AA0((atomic_uint **)&v106);
  long long v104 = 0uLL;
  unint64_t v105 = 0;
  __p[1] = 0;
  uint64_t v98 = 0;
  __p[0] = &__p[1];
  for (long long i = *a3; (void)i != *((void *)&i + 1); sub_216A8EBF0(&i))
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A8EB70((uint64_t *)&i, v6, v7);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v8)) {
      goto LABEL_13;
    }
    BOOL v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A8EB70((uint64_t *)&i, v9, v10);
    sub_216A6890C(v11, (uint64_t)&v107);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v101);
    if (SHIBYTE(v108) < 0) {
      operator delete((void *)v107);
    }
    sub_216A8E144((uint64_t **)__p, (uint64_t *)&v101, (uint64_t *)&v101);
    if (v9) {
      goto LABEL_9;
    }
    BOOL v12 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A8EB70((uint64_t *)&i, v9, v10);
    uint64_t v13 = sub_216992ED0(v12);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v13, &j);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&j, &v107);
    uint64_t v14 = v107;
    uint64_t v15 = *(void *)a2;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v107 + 1);
    sub_21697C414(&v107);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
    sub_21697C414(&j);
    if (v14 != v15) {
LABEL_9:
    }
      char v16 = 1;
    else {
      char v16 = 0;
    }
    if ((v101 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v101 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v16)
    {
LABEL_13:
      uint64_t v17 = (atomic_uint **)sub_216A8EB70((uint64_t *)&i, v9, v10);
      uint64_t v18 = *((void *)&v104 + 1);
      if (*((void *)&v104 + 1) >= v105)
      {
        uint64_t v20 = sub_216A8E01C((atomic_uint ***)&v104, v17);
      }
      else
      {
        unint64_t v19 = *v17;
        **((void **)&v104 + 1) = *v17;
        if (v19) {
          atomic_fetch_add(v19, 1u);
        }
        uint64_t v20 = (char *)(v18 + 8);
      }
      *((void *)&v104 + 1) = v20;
    }
  }
  sub_2168CB05C((uint64_t)__p, (void *)__p[1]);
  uint64_t v21 = sub_2169791E0(a1);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v98 = 0;
  uint64_t v22 = sub_216A5B7B0((uint64_t *)(v21 + 112));
  (*(void (**)(long long *__return_ptr))(*(void *)v22 + 136))(&i);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&i))
  {
    if ((BYTE8(i) & 4) != 0) {
      uint64_t v23 = (uint64_t **)(*(uint64_t (**)(long long *))((*((void *)&i + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&i);
    }
    else {
      uint64_t v23 = (uint64_t **)i;
    }
  }
  else
  {
    uint64_t v23 = (uint64_t **)__p;
  }
  long long v107 = 0uLL;
  uint64_t v108 = 0;
  sub_21698FA28(&v107, *v23, v23[1], v23[1] - *v23);
  uint64_t v24 = (void ***)sub_2168EE084((uint64_t)&i);
  *(void *)&long long i = __p;
  sub_216889A04(v24);
  *((void *)&i + 1) = 0;
  uint64_t v110 = 0;
  *(void *)&long long i = (char *)&i + 8;
  unint64_t v101 = 0;
  v102 = 0;
  unint64_t v103 = 0;
  sub_216973388((char **)&v101, (uint64_t)(*((void *)&v104 + 1) - v104) >> 3);
  for (long long j = v104; (void)j != *((void *)&j + 1); sub_216A83274(&j))
  {
    unint64_t v27 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A831F4((uint64_t *)&j, v25, v26);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v27))
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      uint64_t v98 = 181;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Varian"
            "tChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy::"
            "ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
      goto LABEL_92;
    }
    uint64_t v30 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A831F4((uint64_t *)&j, v28, v29);
    sub_216A6890C(v30, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v86);
    if (SHIBYTE(v98) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v31 = v102;
    if ((unint64_t)v102 >= v103)
    {
      int v33 = sub_216973984((char **)&v101, (uint64_t *)&v86);
    }
    else
    {
      unint64_t v32 = v86;
      uint64_t *v102 = v86;
      if ((v32 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v31 &= 0xFFFFFFFFFFFFFFF8;
      }
      int v33 = (char *)(v31 + 1);
    }
    v102 = (uint64_t *)v33;
    sub_216A8E144((uint64_t **)&i, (uint64_t *)&v86, (uint64_t *)&v86);
    if ((v34 & 1) == 0)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      uint64_t v98 = 188;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Varian"
            "tChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy::"
            "ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate child");
LABEL_90:
      if ((v86 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
LABEL_92:
      BOOL v59 = 0;
      goto LABEL_97;
    }
    v36 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A831F4((uint64_t *)&j, v34, v35);
    uint64_t v37 = (uint64_t **)sub_216992ED0(v36);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v37, (uint64_t *)__p);
    uint64_t v38 = sub_216851B24((uint64_t)__p);
    uint64_t v41 = sub_216851B24((uint64_t)a1);
    unint64_t v42 = __p[1];
    if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(void *))(*(void *)v42 + 8))(v42);
    }
    if (v38 != v41)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      uint64_t v98 = 193;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Varian"
            "tChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy::"
            "ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
      goto LABEL_90;
    }
    v43 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A831F4((uint64_t *)&j, v39, v40);
    unint64_t v44 = sub_216992ED0(v43);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v44, &v111);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v111, __p);
    if (*(void **)a2 == __p[0])
    {
      BOOL HasPrefix = 0;
    }
    else
    {
      v48 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A831F4((uint64_t *)&j, v45, v46);
      uint64_t v49 = sub_216992ED0(v48);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v49, &k);
      BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&k);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
      sub_21697C414(&k);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_21697C414(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v111 + 1);
    sub_21697C414(&v111);
    if (HasPrefix)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      uint64_t v98 = 203;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Varian"
            "tChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy::"
            "ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      goto LABEL_90;
    }
    if ((v86 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v96);
  *(_OWORD *)__p = v107;
  while (__p[0] != __p[1])
  {
    uint64_t v52 = (uint64_t *)sub_2169CEBC8((uint64_t *)__p, v50, v51);
    if ((void *)((char *)&i + 8) == sub_216A8E1C4((uint64_t)&i, v52))
    {
      uint64_t v55 = (void *)sub_2169CEBC8((uint64_t *)__p, v53, v54);
      sub_216A68404(a2, v55, &j);
      v56 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v56, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&j);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
      sub_21697C414(&j);
    }
    sub_2169CECC4(__p);
  }
  sub_216A8E254((uint64_t)&j, (uint64_t *)v107, *((uint64_t **)&v107 + 1));
  for (long long k = v104; ; sub_216A83274(&k))
  {
    BOOL v59 = k == *((void *)&k + 1);
    if ((void)k == *((void *)&k + 1)) {
      break;
    }
    uint64_t v60 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A831F4((uint64_t *)&k, v57, v58);
    sub_216A6890C(v60, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v93);
    if (SHIBYTE(v98) < 0) {
      operator delete(__p[0]);
    }
    sub_216A68404(a2, &v93, &v91);
    uint64_t v63 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A831F4((uint64_t *)&k, v61, v62);
    uint64_t v64 = sub_216992ED0(v63);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v64, __p);
    sub_216A687F4((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, &v90);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_21697C414(__p);
    if (v90 == *(void *)a2)
    {
      int v65 = 10;
    }
    else
    {
      if ((void *)((char *)&j + 8) != sub_216A8E1C4((uint64_t)&j, &v93))
      {
        v66 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v66, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v91);
      }
      sub_216A81AA0((atomic_uint **)&v89);
      uint64_t v67 = sub_2169791E0(a1);
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v98 = 0;
      uint64_t v68 = sub_216A5B7B0((uint64_t *)(v67 + 112));
      (*(void (**)(void ***__return_ptr))(*(void *)v68 + 136))(&v111);
      if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v111))
      {
        if ((v112 & 4) != 0) {
          v69 = (uint64_t **)(*(uint64_t (**)(void ***))((v112 & 0xFFFFFFFFFFFFFFF8) + 168))(&v111);
        }
        else {
          v69 = (uint64_t **)v111;
        }
      }
      else
      {
        v69 = (uint64_t **)__p;
      }
      unint64_t v86 = 0;
      v87 = 0;
      uint64_t v88 = 0;
      sub_21698FA28(&v86, *v69, v69[1], v69[1] - *v69);
      v70 = (void ***)sub_2168EE084((uint64_t)&v111);
      v111 = __p;
      sub_216889A04(v70);
      v71 = (uint64_t *)v86;
      if ((uint64_t *)v86 != v87)
      {
        while ((*v71 & 0xFFFFFFFFFFFFFFF8) != (v93 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v71 == v87)
          {
            v71 = v87;
            break;
          }
        }
      }
      if (v71 == v87)
      {
        __p[0] = "sdf/childrenUtils.cpp";
        __p[1] = "SetChildren";
        uint64_t v98 = 254;
        v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Vari"
              "antChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPoli"
              "cy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]";
        char v100 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        int v65 = 1;
      }
      else
      {
        sub_216A8E2D8(v71 + 1, v87, v71);
        for (m = v87; m != v72; --m)
        {
          uint64_t v75 = *(m - 1);
          uint64_t v74 = v75;
          if ((v75 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        v87 = v72;
        if ((uint64_t *)v86 == v72)
        {
          v77 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v77, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v90, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v89);
        }
        else
        {
          v76 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          sub_216A6A718(v76, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v90, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v89, (uint64_t **)&v86);
        }
        v78 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
        v81 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A831F4((uint64_t *)&k, v79, v80);
        v82 = sub_216992ED0(v81);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v82, __p);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v78, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v91);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_21697C414(__p);
        int v65 = 0;
      }
      __p[0] = &v86;
      sub_216889A04((void ***)__p);
      if ((v89 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v89 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v90 + 1);
    sub_21697C414(&v90);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v92);
    sub_21697C414(&v91);
    if ((v93 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v65 != 10 && v65) {
      goto LABEL_96;
    }
  }
  if ((uint64_t *)v101 == v102)
  {
    v84 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v84, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v106);
  }
  else
  {
    v83 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    sub_216A6A718(v83, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v106, (uint64_t **)&v101);
  }
LABEL_96:
  sub_2168CB05C((uint64_t)&j, *((void **)&j + 1));
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v96);
LABEL_97:
  __p[0] = &v101;
  sub_216889A04((void ***)__p);
  sub_2168CB05C((uint64_t)&i, *((void **)&i + 1));
  __p[0] = &v107;
  sub_216889A04((void ***)__p);
  __p[0] = &v104;
  sub_216991094((void ***)__p);
  if ((v106 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v59;
}

void sub_216A82EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __p = &a34;
  sub_216889A04((void ***)&__p);
  sub_2168CB05C(v37 - 144, *(void **)(v37 - 136));
  __p = (uint64_t *)(v37 - 176);
  sub_216889A04((void ***)&__p);
  __p = (uint64_t *)&a37;
  sub_216991094((void ***)&__p);
  uint64_t v39 = *(void *)(v37 - 184);
  if ((v39 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216A831F4(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfHand"
            "le<pxrInternal__aapl__pxrReserved__::SdfVariantSpec>>>::operator*() [T = std::vector<pxrInternal__aapl__pxrR"
            "eserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSpec>>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216A8326C()
{
}

void *sub_216A83274(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSpec>>>::operator++() [T = std::vector<pxrInter"
            "nal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSpec>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::InsertChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, int a4)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  sub_216A81AA0(v58);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    __p = "sdf/childrenUtils.cpp";
    v54 = "InsertChild";
    uint64_t v55 = 290;
    v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantC"
          "hildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, int"
          ") [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]";
    char v57 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
LABEL_8:
    BOOL v12 = 0;
    goto LABEL_9;
  }
  uint64_t v8 = (uint64_t **)sub_216992ED0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v8, (uint64_t *)&__p);
  uint64_t v9 = sub_216851B24((uint64_t)&__p);
  uint64_t v10 = sub_216851B24((uint64_t)a1);
  BOOL v11 = v54;
  if (v54 && atomic_fetch_add_explicit((atomic_uint *volatile)v54 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(const char *))(*(void *)v11 + 8))(v11);
  }
  if (v9 != v10)
  {
    __p = "sdf/childrenUtils.cpp";
    v54 = "InsertChild";
    uint64_t v55 = 295;
    v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantC"
          "hildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, int"
          ") [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]";
    char v57 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
    goto LABEL_8;
  }
  uint64_t v14 = sub_216992ED0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v47);
  sub_216A687F4((pxrInternal__aapl__pxrReserved__::SdfPath *)&v47, &__p);
  uint64_t v15 = __p;
  char v16 = *(void **)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47 + 1);
  sub_21697C414(&v47);
  if (v15 == v16)
  {
    BOOL v12 = 1;
  }
  else
  {
    sub_216A6890C(a3, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v52);
    if (SHIBYTE(v55) < 0) {
      operator delete(__p);
    }
    sub_216A68404(a2, &v52, &v50);
    uint64_t v17 = sub_216992ED0(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v17, &__p);
    BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_21697C414(&__p);
    if (HasPrefix)
    {
      __p = "sdf/childrenUtils.cpp";
      v54 = "InsertChild";
      uint64_t v55 = 312;
      v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Varian"
            "tChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &,"
            " int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]";
      char v57 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      BOOL v12 = 0;
    }
    else
    {
      uint64_t v19 = sub_2169791E0(a1);
      __p = 0;
      v54 = 0;
      uint64_t v55 = 0;
      uint64_t v20 = sub_216A5B7B0((uint64_t *)(v19 + 112));
      (*(void (**)(void ***__return_ptr))(*(void *)v20 + 136))(&v59);
      if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v59))
      {
        if ((v60 & 4) != 0) {
          p_p = (void **)(*(uint64_t (**)(void ***))(((unint64_t)v60 & 0xFFFFFFFFFFFFFFF8) + 168))(&v59);
        }
        else {
          p_p = v59;
        }
      }
      else
      {
        p_p = &__p;
      }
      uint64_t v47 = 0;
      v48 = 0;
      uint64_t v49 = 0;
      sub_21698FA28(&v47, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((unsigned char *)p_p[1] - (unsigned char *)*p_p) >> 3);
      uint64_t v22 = (void ***)sub_2168EE084((uint64_t)&v59);
      BOOL v59 = &__p;
      sub_216889A04(v22);
      unint64_t v25 = (unint64_t)((char *)v48 - (char *)v47) >> 3;
      if (a4 != -1) {
        LODWORD(v25) = a4;
      }
      uint64_t v26 = (int)v25;
      if ((int)v25 <= (unint64_t)(((char *)v48 - (char *)v47) >> 3))
      {
        BOOL v59 = v47;
        uint64_t v60 = (void **)v48;
        while (v59 != v60)
        {
          uint64_t v28 = (void *)sub_2169CEBC8((uint64_t *)&v59, v23, v24);
          if ((*v28 & 0xFFFFFFFFFFFFFFF8) == (v52 & 0xFFFFFFFFFFFFFFF8))
          {
            __p = "sdf/childrenUtils.cpp";
            v54 = "InsertChild";
            uint64_t v55 = 334;
            v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "VariantChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::"
                  "ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]";
            char v57 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert duplicate spec %s", Text);
            goto LABEL_34;
          }
          sub_2169CECC4(&v59);
        }
        uint64_t v29 = sub_216992ED0(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v29, &__p);
        sub_216A687F4((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v45);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_21697C414(&__p);
        sub_216A81AA0((atomic_uint **)&v44);
        uint64_t v30 = sub_2169791E0(a1);
        __p = 0;
        v54 = 0;
        uint64_t v55 = 0;
        uint64_t v31 = sub_216A5B7B0((uint64_t *)(v30 + 112));
        (*(void (**)(atomic_uint **__return_ptr))(*(void *)v31 + 136))(&v62);
        if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v62))
        {
          if ((v63 & 4) != 0) {
            unint64_t v32 = (uint64_t **)(*(uint64_t (**)(atomic_uint **))((v63 & 0xFFFFFFFFFFFFFFF8) + 168))(&v62);
          }
          else {
            unint64_t v32 = (uint64_t **)v62;
          }
        }
        else
        {
          unint64_t v32 = (uint64_t **)&__p;
        }
        BOOL v59 = 0;
        uint64_t v60 = 0;
        uint64_t v61 = 0;
        sub_21698FA28(&v59, *v32, v32[1], v32[1] - *v32);
        uint64_t v34 = (void ***)sub_2168EE084((uint64_t)&v62);
        v62 = (atomic_uint *)&__p;
        sub_216889A04(v34);
        uint64_t v35 = v59;
        if (v59 != v60)
        {
          while (((unint64_t)*v35 & 0xFFFFFFFFFFFFFFF8) != (v52 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v35 == v60)
            {
              uint64_t v35 = v60;
              break;
            }
          }
        }
        BOOL v12 = v35 != v60;
        if (v35 == v60)
        {
          __p = "sdf/childrenUtils.cpp";
          v54 = "InsertChild";
          uint64_t v55 = 352;
          v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Va"
                "riantChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::Valu"
                "eType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]";
          char v57 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
          sub_216A6B648((uint64_t)&v59, v35);
          if (v59 == v60)
          {
            uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
            pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v44);
          }
          else
          {
            v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
            sub_216A6A718(v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v44, (uint64_t **)&v59);
          }
          uint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          uint64_t v39 = sub_216992ED0(a3);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v39, &v62);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v38, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v62, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
          sub_21697B754(&v62);
          sub_216A6BFEC(&v47, (char *)&v47[v26], (char *)&v52);
          int v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          sub_216A6A718(v40, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v58, (uint64_t **)&v47);
          uint64_t v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, &v62);
          uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v62);
          if ((IsDormant & 1) == 0)
          {
            unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
            pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v62);
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v62);
          sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
        }
        __p = &v59;
        sub_216889A04((void ***)&__p);
        if ((v44 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
        sub_21697C414(&v45);
      }
      else
      {
        __p = "sdf/childrenUtils.cpp";
        v54 = "InsertChild";
        uint64_t v55 = 326;
        v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Vari"
              "antChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueTyp"
              "e &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]";
        char v57 = 0;
        unint64_t v27 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert spec %s at an invalid index %d", v27, v26);
LABEL_34:
        BOOL v12 = 0;
      }
      __p = &v47;
      sub_216889A04((void ***)&__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v51);
    sub_21697C414(&v50);
    if ((v52 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
LABEL_9:
  if (((uint64_t)v58[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v58[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v12;
}

void sub_216A83A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,__int16 *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  __p = (__int16 *)(v30 - 112);
  sub_216889A04((void ***)&__p);
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754(&a12);
  __p = &a14;
  sub_216889A04((void ***)&__p);
  sub_21697B754(&a19);
  if ((a20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::RemoveChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  sub_216A81AA0((atomic_uint **)&v28);
  uint64_t v4 = sub_2169791E0(a1);
  memset(v24, 0, sizeof(v24));
  uint64_t v5 = sub_216A5B7B0((uint64_t *)(v4 + 112));
  (*(void (**)(unint64_t *__return_ptr))(*(void *)v5 + 136))(&v31);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v31))
  {
    if ((v32 & 4) != 0) {
      char v6 = (uint64_t **)(*(uint64_t (**)(unint64_t *))((v32 & 0xFFFFFFFFFFFFFFF8) + 168))(&v31);
    }
    else {
      char v6 = (uint64_t **)v31;
    }
  }
  else
  {
    char v6 = (uint64_t **)v24;
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  sub_21698FA28(&v25, *v6, v6[1], v6[1] - *v6);
  int v7 = (void ***)sub_2168EE084((uint64_t)&v31);
  unint64_t v31 = (unint64_t)v24;
  sub_216889A04(v7);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v31);
  uint64_t v8 = (uint64_t *)v25;
  unint64_t v9 = v31;
  if ((uint64_t *)v25 == v26)
  {
LABEL_9:
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v10 = -v25;
    while ((*v8 & 0xFFFFFFFFFFFFFFF8) != (v31 & 0xFFFFFFFFFFFFFFF8))
    {
      ++v8;
      v10 -= 8;
      if (v8 == v26) {
        goto LABEL_9;
      }
    }
    sub_216A68404(a2, &v31, &v29);
    BOOL v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v29);
    sub_216A8E2D8((void *)(8 - v10), v26, (void *)-v10);
    for (long long i = v26; i != v13; --i)
    {
      uint64_t v16 = *(i - 1);
      uint64_t v15 = v16;
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v26 = v13;
    if ((uint64_t *)v25 == v13)
    {
      uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v18, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28);
    }
    else
    {
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      sub_216A6A718(v17, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28, (uint64_t **)&v25);
    }
    uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v19, a2, &v23);
    uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v23);
    if ((IsDormant & 1) == 0)
    {
      unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
      pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v23);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v23);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
    sub_21697C414(&v29);
    uint64_t v11 = 1;
    unint64_t v9 = v31;
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
  v24[0] = (void **)&v25;
  sub_216889A04(v24);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v11;
}

void sub_216A83ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::MoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, char *a4, int a5)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  sub_216A81AA0(v55);
  sub_216A846EC(a2, a4, &v54);
  uint64_t v10 = sub_216992ED0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v10, &v51);
  uint64_t v11 = v54;
  BOOL v12 = v51;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v51 + 1);
  sub_21697C414(&v51);
  if (a5 == -2 && v11 == v12) {
    goto LABEL_59;
  }
  uint64_t v13 = sub_2169791E0(a1);
  __p = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v14 = sub_216A5B7B0((uint64_t *)(v13 + 112));
  (*(void (**)(void ***__return_ptr))(*(void *)v14 + 136))(&v56);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v56))
  {
    if ((v57 & 4) != 0) {
      p_p = (void **)(*(uint64_t (**)(void ***))((v57 & 0xFFFFFFFFFFFFFFF8) + 168))(&v56);
    }
    else {
      p_p = v56;
    }
  }
  else
  {
    p_p = &__p;
  }
  int v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  sub_21698FA28(&v51, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((unsigned char *)p_p[1] - (unsigned char *)*p_p) >> 3);
  sub_2168EE084((uint64_t)&v56);
  v56 = &__p;
  sub_216889A04(&v56);
  sub_216A6890C(a3, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v47);
  if (SHIBYTE(v50) < 0) {
    operator delete(__p);
  }
  uint64_t v16 = sub_216992ED0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16, &__p);
  sub_216A687F4((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v46);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (a5 == -2 && v46 == *(void *)a2)
  {
    if (v51 == v52)
    {
      uint64_t v17 = v51;
    }
    else
    {
      uint64_t v17 = v51;
      while ((*v17 & 0xFFFFFFFFFFFFFFF8) != (v47 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v17 == v52)
        {
          uint64_t v17 = v52;
          break;
        }
      }
    }
    unint64_t v18 = (unint64_t)((char *)v17 - (char *)v51) >> 3;
  }
  else if (v52 - v51 >= (unint64_t)a5)
  {
    LODWORD(v18) = a5;
  }
  else
  {
    LODWORD(v18) = v52 - v51;
  }
  sub_216A81AA0((atomic_uint **)&v45);
  uint64_t v19 = sub_2169791E0(a1);
  v56 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v20 = sub_216A5B7B0((uint64_t *)(v19 + 112));
  (*(void (**)(void ****__return_ptr))(*(void *)v20 + 136))(&v59);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v59))
  {
    if ((v60 & 4) != 0) {
      uint64_t v21 = (void ***)(*(uint64_t (**)(void ****))((v60 & 0xFFFFFFFFFFFFFFF8) + 168))(&v59);
    }
    else {
      uint64_t v21 = v59;
    }
  }
  else
  {
    uint64_t v21 = &v56;
  }
  __p = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  sub_21698FA28(&__p, (uint64_t *)*v21, (uint64_t *)v21[1], v21[1] - *v21);
  uint64_t v22 = (void ***)sub_2168EE084((uint64_t)&v59);
  BOOL v59 = &v56;
  sub_216889A04(v22);
  uint64_t v23 = (char *)__p;
  if (__p != v49)
  {
    while ((*(void *)v23 & 0xFFFFFFFFFFFFFFF8) != (v47 & 0xFFFFFFFFFFFFFFF8))
    {
      v23 += 8;
      if (v23 == v49)
      {
        uint64_t v23 = v49;
        break;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v56);
  if (v46 == *(void *)a2)
  {
    uint64_t v24 = v23 - (unsigned char *)__p;
    if ((v47 & 0xFFFFFFFFFFFFFFF8) == (*(void *)a4 & 0xFFFFFFFFFFFFFFF8)
      && (v18 == ((unint64_t)v24 >> 3)
       || ((unint64_t)v24 >> 3) + 1 == v18))
    {
      goto LABEL_54;
    }
    BOOL v26 = (int)v18 > v24 >> 3;
    uint64_t v27 = v51;
    if (v51 != v52)
    {
      while ((*v27 & 0xFFFFFFFFFFFFFFF8) != (v47 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v27 == v52)
        {
          uint64_t v27 = v52;
          break;
        }
      }
    }
    sub_216A8E2D8(v27 + 1, v52, v27);
    LODWORD(v18) = v18 - v26;
    for (long long i = v52; i != v28; --i)
    {
      uint64_t v31 = *(i - 1);
      uint64_t v30 = v31;
      if ((v31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v52 = v28;
  }
  else
  {
    sub_216A8E2D8((void *)v23 + 1, v49, v23);
    for (long long j = v49; j != v32; j -= 8)
    {
      uint64_t v35 = *((void *)j - 1);
      uint64_t v34 = v35;
      if ((v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v49 = v32;
    if (__p == v32)
    {
      uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v45);
      uint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v38, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, &v59);
      uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v59);
      if ((IsDormant & 1) == 0)
      {
        unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
        pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (atomic_uint **)&v59);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v59);
    }
    else
    {
      v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      sub_216A6A718(v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v45, (uint64_t **)&__p);
    }
  }
  uint64_t v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  unint64_t v42 = sub_216992ED0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v42, &v59);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v59, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v54);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
  sub_21697C414(&v59);
  sub_216A6BFEC(&v51, (char *)&v51[(int)v18], a4);
  v43 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  sub_216A6A718(v43, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v55, &v51);
LABEL_54:
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v56);
  v56 = &__p;
  sub_216889A04(&v56);
  if ((v45 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_21697C414(&v46);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __p = &v51;
  sub_216889A04((void ***)&__p);
LABEL_59:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v54 + 1);
  sub_21697C414(&v54);
  if (((uint64_t)v55[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v55[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return 1;
}

void sub_216A84560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,void **p_p)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 88));
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&p_p);
  p_p = (void **)&__p;
  sub_216889A04(&p_p);
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754(&a10);
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __p = &a18;
  sub_216889A04((void ***)&__p);
  sub_21697B754(&a21);
  if ((a22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_216A846EC(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, void *a2@<X1>, _DWORD *a3@<X8>)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName((uint64_t)EmptyString))
  {
    sub_216A68404(a1, a2, a3);
  }
  else
  {
    *(void *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::CanMoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, void *a4, int a5, uint64_t a6)
{
  sub_216A81AA0((atomic_uint **)&v42);
  BOOL v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v12) & 1) == 0)
  {
    if (a6)
    {
      uint64_t v13 = "Layer is not editable";
      goto LABEL_13;
    }
LABEL_14:
    BOOL v18 = 0;
    goto LABEL_15;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    if (a6)
    {
      uint64_t v13 = "Object does not exist";
LABEL_13:
      MEMORY[0x21D4477E0](a6, v13);
      goto LABEL_14;
    }
    goto LABEL_14;
  }
  uint64_t v14 = (uint64_t **)sub_216992ED0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v14, &v38);
  uint64_t v15 = sub_216851B24((uint64_t)&v38);
  uint64_t v16 = sub_216851B24((uint64_t)a1);
  uint64_t v17 = v39;
  if (v39 && atomic_fetch_add_explicit((atomic_uint *volatile)(v39 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  if (v15 != v16)
  {
    if (a6)
    {
      uint64_t v13 = "Cannot reparent to another layer";
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  sub_216A846EC(a2, a4, &v40);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v40))
  {
    if (!a6)
    {
LABEL_24:
      BOOL v18 = 0;
      goto LABEL_25;
    }
    uint64_t v23 = "Invalid name";
LABEL_23:
    MEMORY[0x21D4477E0](a6, v23);
    goto LABEL_24;
  }
  uint64_t v20 = sub_216992ED0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v20, &__p);
  sub_216A687F4((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v38);
  uint64_t v21 = v38;
  uint64_t v22 = *(void *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v38 + 1);
  sub_21697C414(&v38);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (v21 != v22)
  {
    uint64_t v24 = sub_216992ED0(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v24, &v38);
    BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v38 + 1);
    sub_21697C414(&v38);
    if (!HasPrefix)
    {
      uint64_t v26 = sub_2169791E0(a1);
      __p = 0;
      v36 = 0;
      uint64_t v37 = 0;
      sub_216A6A608(v26, (uint64_t **)&__p, &v38);
      v31[0] = &__p;
      sub_216889A04(v31);
      unint64_t v27 = (unint64_t)(v39 - v38) >> 3;
      if (a5 != -1) {
        LODWORD(v27) = a5;
      }
      if (v27 == -2 || (int)v27 <= (unint64_t)((v39 - v38) >> 3))
      {
        sub_216A6890C(a3, (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v34);
        if (SHIBYTE(v37) < 0) {
          operator delete(__p);
        }
        unint64_t v28 = sub_216992ED0(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, &__p);
        sub_216A687F4((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v33);
        sub_21697B754(&__p);
        sub_216A81AA0((atomic_uint **)&v32);
        uint64_t v29 = sub_2169791E0(a1);
        memset(v31, 0, sizeof(v31));
        sub_216A6A608(v29, (uint64_t **)v31, &__p);
        v43 = v31;
        sub_216889A04((void ***)&v43);
        uint64_t v30 = __p;
        if (__p != v36)
        {
          while ((*v30 & 0xFFFFFFFFFFFFFFF8) != (v34 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v30 == v36)
            {
              uint64_t v30 = v36;
              break;
            }
          }
        }
        BOOL v18 = v30 != v36;
        if (a6 && v30 == v36) {
          MEMORY[0x21D4477E0](a6, "Coding error: Object is not in its parent's children");
        }
        v31[0] = &__p;
        sub_216889A04(v31);
        if ((v32 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        sub_21697B754(&v33);
        if ((v34 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if (a6) {
          MEMORY[0x21D4477E0](a6, "Invalid index");
        }
        BOOL v18 = 0;
      }
      __p = &v38;
      sub_216889A04((void ***)&__p);
      goto LABEL_25;
    }
    if (!a6) {
      goto LABEL_24;
    }
    uint64_t v23 = "Cannot reparent object under itself";
    goto LABEL_23;
  }
  BOOL v18 = 1;
LABEL_25:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
  sub_21697C414(&v40);
LABEL_15:
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v18;
}

void sub_216A84B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23)
{
  __p = &a22;
  sub_216889A04((void ***)&__p);
  sub_21697B754((_DWORD *)(v23 - 88));
  uint64_t v25 = *(void *)(v23 - 80);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::CanRemoveChildForBatchNamespaceEdit(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  sub_216A81AA0((atomic_uint **)&v19);
  int v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v7))
  {
    uint64_t v8 = sub_2169791E0(a1);
    memset(v15, 0, sizeof(v15));
    uint64_t v9 = sub_216A5B7B0((uint64_t *)(v8 + 112));
    (*(void (**)(void ****__return_ptr))(*(void *)v9 + 136))(&v20);
    if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
    {
      if ((v21 & 4) != 0) {
        uint64_t v10 = (uint64_t **)(*(uint64_t (**)(void ****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
      }
      else {
        uint64_t v10 = (uint64_t **)v20;
      }
    }
    else
    {
      uint64_t v10 = (uint64_t **)v15;
    }
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    sub_21698FA28(&v16, *v10, v10[1], v10[1] - *v10);
    BOOL v12 = (void ***)sub_2168EE084((uint64_t)&v20);
    uint64_t v20 = v15;
    sub_216889A04(v12);
    uint64_t v13 = v16;
    if (v16 != v17)
    {
      while ((*v13 & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v13 == v17)
        {
          uint64_t v13 = v17;
          break;
        }
      }
    }
    BOOL v11 = v13 != v17;
    if (a4 && v13 == v17) {
      MEMORY[0x21D4477E0](a4, "Object does not exist");
    }
    v15[0] = (void **)&v16;
    sub_216889A04(v15);
  }
  else
  {
    if (a4) {
      MEMORY[0x21D4477E0](a4, "Layer is not editable");
    }
    BOOL v11 = 0;
  }
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v11;
}

void sub_216A84ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  a10 = (void **)&a13;
  sub_216889A04(&a10);
  if ((a16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::CreateSpec(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v1 = (uint64_t *)(a1 + 8);
  if (v2) {
    sub_216850B68(v1);
  }

  pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::CreateSpec();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::CreateSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
    uint64_t Spec = pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(a1, a2, a3, a4);
    if (Spec)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v18);
      sub_216A85210((atomic_uint **)__p);
      uint64_t v9 = *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      if ((v9 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::TfToken>();
    }
    uint64_t v18 = "sdf/childrenUtils.cpp";
    unint64_t v19 = "CreateSpec";
    uint64_t v20 = 101;
    uint64_t v21 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantS"
          "etChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl__p"
          "xrReserved__::Sdf_VariantSetChildPolicy]";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C755200, a3, (uint64_t)__p);
    int v10 = v16;
    BOOL v11 = (void **)__p[0];
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    uint64_t v13 = __p;
    if (v10 < 0) {
      uint64_t v13 = v11;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to create spec of type '%s' at <%s>", (const char *)v13, Text);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
  }
  else
  {
    uint64_t v18 = "sdf/childrenUtils.cpp";
    unint64_t v19 = "CreateSpec";
    uint64_t v20 = 90;
    uint64_t v21 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantS"
          "etChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl__p"
          "xrReserved__::Sdf_VariantSetChildPolicy]";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid object type");
    return 0;
  }
  return Spec;
}

void sub_216A8518C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
}

pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *sub_216A85210@<X0>(atomic_uint **a1@<X8>)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!result) {
    uint64_t result = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  v3 = (atomic_uint *)*((void *)result + 8);
  *a1 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      *a1 = v4;
    }
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::IsValidName(pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  if ((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }

  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName((uint64_t)EmptyString);
}

double pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::CanRename@<D0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, (uint64_t *)__p);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)__p);
  char v4 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v3);
  uint64_t v5 = __p[1];
  if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(void *))(*(void *)v5 + 8))(v5);
  }
  if (v4) {
    pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::IsValidName();
  }
  sub_216779094(__p, "Layer is not editable");
  double result = *(double *)__p;
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(void *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 24) = 1;
  return result;
}

void sub_216A85544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

_DWORD *sub_216A855F8@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, void *a2@<X1>, _DWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a1, &v6);
  sub_216A69174((pxrInternal__aapl__pxrReserved__::TfToken *)&v6, a2, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_21697C414(&v6);
}

void sub_216A8565C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::Rename(pxrInternal__aapl__pxrReserved__::SdfSpec *a1)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, v1);
  pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::IsValidName();
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::SetChildren(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, long long *a3)
{
  uint64_t v113 = *MEMORY[0x263EF8340];
  sub_216A85210((atomic_uint **)&v106);
  long long v104 = 0uLL;
  unint64_t v105 = 0;
  __p[1] = 0;
  uint64_t v98 = 0;
  __p[0] = &__p[1];
  for (long long i = *a3; (void)i != *((void *)&i + 1); sub_216A8ECF0(&i))
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A8EC70((uint64_t *)&i, v6, v7);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v8)) {
      goto LABEL_13;
    }
    BOOL v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A8EC70((uint64_t *)&i, v9, v10);
    sub_216A6957C(v11, (uint64_t)&v107);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v101);
    if (SHIBYTE(v108) < 0) {
      operator delete((void *)v107);
    }
    sub_216A8E144((uint64_t **)__p, (uint64_t *)&v101, (uint64_t *)&v101);
    if (v9) {
      goto LABEL_9;
    }
    BOOL v12 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A8EC70((uint64_t *)&i, v9, v10);
    uint64_t v13 = sub_216A694A0(v12);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v13, &j);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&j, &v107);
    uint64_t v14 = v107;
    uint64_t v15 = *(void *)a2;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v107 + 1);
    sub_21697C414(&v107);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
    sub_21697C414(&j);
    if (v14 != v15) {
LABEL_9:
    }
      char v16 = 1;
    else {
      char v16 = 0;
    }
    if ((v101 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v101 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v16)
    {
LABEL_13:
      uint64_t v17 = (atomic_uint **)sub_216A8EC70((uint64_t *)&i, v9, v10);
      uint64_t v18 = *((void *)&v104 + 1);
      if (*((void *)&v104 + 1) >= v105)
      {
        uint64_t v20 = sub_216A8E01C((atomic_uint ***)&v104, v17);
      }
      else
      {
        unint64_t v19 = *v17;
        **((void **)&v104 + 1) = *v17;
        if (v19) {
          atomic_fetch_add(v19, 1u);
        }
        uint64_t v20 = (char *)(v18 + 8);
      }
      *((void *)&v104 + 1) = v20;
    }
  }
  sub_2168CB05C((uint64_t)__p, (void *)__p[1]);
  uint64_t v21 = sub_2169791E0(a1);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v98 = 0;
  uint64_t v22 = sub_216A5B7B0((uint64_t *)(v21 + 112));
  (*(void (**)(long long *__return_ptr))(*(void *)v22 + 136))(&i);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&i))
  {
    if ((BYTE8(i) & 4) != 0) {
      uint64_t v23 = (uint64_t **)(*(uint64_t (**)(long long *))((*((void *)&i + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&i);
    }
    else {
      uint64_t v23 = (uint64_t **)i;
    }
  }
  else
  {
    uint64_t v23 = (uint64_t **)__p;
  }
  long long v107 = 0uLL;
  uint64_t v108 = 0;
  sub_21698FA28(&v107, *v23, v23[1], v23[1] - *v23);
  uint64_t v24 = (void ***)sub_2168EE084((uint64_t)&i);
  *(void *)&long long i = __p;
  sub_216889A04(v24);
  *((void *)&i + 1) = 0;
  uint64_t v110 = 0;
  *(void *)&long long i = (char *)&i + 8;
  unint64_t v101 = 0;
  v102 = 0;
  unint64_t v103 = 0;
  sub_216973388((char **)&v101, (uint64_t)(*((void *)&v104 + 1) - v104) >> 3);
  for (long long j = v104; (void)j != *((void *)&j + 1); sub_216A869E4(&j))
  {
    unint64_t v27 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A86964((uint64_t *)&j, v25, v26);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v27))
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      uint64_t v98 = 181;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Varian"
            "tSetChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolic"
            "y::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
      goto LABEL_92;
    }
    uint64_t v30 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A86964((uint64_t *)&j, v28, v29);
    sub_216A6957C(v30, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v86);
    if (SHIBYTE(v98) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v31 = v102;
    if ((unint64_t)v102 >= v103)
    {
      int v33 = sub_216973984((char **)&v101, (uint64_t *)&v86);
    }
    else
    {
      unint64_t v32 = v86;
      uint64_t *v102 = v86;
      if ((v32 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v31 &= 0xFFFFFFFFFFFFFFF8;
      }
      int v33 = (char *)(v31 + 1);
    }
    v102 = (uint64_t *)v33;
    sub_216A8E144((uint64_t **)&i, (uint64_t *)&v86, (uint64_t *)&v86);
    if ((v34 & 1) == 0)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      uint64_t v98 = 188;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Varian"
            "tSetChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolic"
            "y::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate child");
LABEL_90:
      if ((v86 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
LABEL_92:
      BOOL v59 = 0;
      goto LABEL_97;
    }
    v36 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A86964((uint64_t *)&j, v34, v35);
    uint64_t v37 = (uint64_t **)sub_216A694A0(v36);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v37, (uint64_t *)__p);
    uint64_t v38 = sub_216851B24((uint64_t)__p);
    uint64_t v41 = sub_216851B24((uint64_t)a1);
    unint64_t v42 = __p[1];
    if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(void *))(*(void *)v42 + 8))(v42);
    }
    if (v38 != v41)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      uint64_t v98 = 193;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Varian"
            "tSetChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolic"
            "y::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
      goto LABEL_90;
    }
    v43 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A86964((uint64_t *)&j, v39, v40);
    unint64_t v44 = sub_216A694A0(v43);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v44, &v111);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v111, __p);
    if (*(void **)a2 == __p[0])
    {
      BOOL HasPrefix = 0;
    }
    else
    {
      v48 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A86964((uint64_t *)&j, v45, v46);
      uint64_t v49 = sub_216A694A0(v48);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v49, &k);
      BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&k);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
      sub_21697C414(&k);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_21697C414(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v111 + 1);
    sub_21697C414(&v111);
    if (HasPrefix)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      uint64_t v98 = 203;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Varian"
            "tSetChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolic"
            "y::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      goto LABEL_90;
    }
    if ((v86 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v96);
  *(_OWORD *)__p = v107;
  while (__p[0] != __p[1])
  {
    uint64_t v52 = (uint64_t *)sub_2169CEBC8((uint64_t *)__p, v50, v51);
    if ((void *)((char *)&i + 8) == sub_216A8E1C4((uint64_t)&i, v52))
    {
      uint64_t v55 = (void *)sub_2169CEBC8((uint64_t *)__p, v53, v54);
      sub_216A69174(a2, v55, &j);
      v56 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v56, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&j);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
      sub_21697C414(&j);
    }
    sub_2169CECC4(__p);
  }
  sub_216A8E254((uint64_t)&j, (uint64_t *)v107, *((uint64_t **)&v107 + 1));
  for (long long k = v104; ; sub_216A869E4(&k))
  {
    BOOL v59 = k == *((void *)&k + 1);
    if ((void)k == *((void *)&k + 1)) {
      break;
    }
    uint64_t v60 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A86964((uint64_t *)&k, v57, v58);
    sub_216A6957C(v60, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v93);
    if (SHIBYTE(v98) < 0) {
      operator delete(__p[0]);
    }
    sub_216A69174(a2, &v93, &v91);
    uint64_t v63 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A86964((uint64_t *)&k, v61, v62);
    uint64_t v64 = sub_216A694A0(v63);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v64, __p);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, &v90);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_21697C414(__p);
    if (v90 == *(void *)a2)
    {
      int v65 = 10;
    }
    else
    {
      if ((void *)((char *)&j + 8) != sub_216A8E1C4((uint64_t)&j, &v93))
      {
        v66 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v66, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v91);
      }
      sub_216A85210((atomic_uint **)&v89);
      uint64_t v67 = sub_2169791E0(a1);
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v98 = 0;
      uint64_t v68 = sub_216A5B7B0((uint64_t *)(v67 + 112));
      (*(void (**)(void ***__return_ptr))(*(void *)v68 + 136))(&v111);
      if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v111))
      {
        if ((v112 & 4) != 0) {
          v69 = (uint64_t **)(*(uint64_t (**)(void ***))((v112 & 0xFFFFFFFFFFFFFFF8) + 168))(&v111);
        }
        else {
          v69 = (uint64_t **)v111;
        }
      }
      else
      {
        v69 = (uint64_t **)__p;
      }
      unint64_t v86 = 0;
      v87 = 0;
      uint64_t v88 = 0;
      sub_21698FA28(&v86, *v69, v69[1], v69[1] - *v69);
      v70 = (void ***)sub_2168EE084((uint64_t)&v111);
      v111 = __p;
      sub_216889A04(v70);
      v71 = (uint64_t *)v86;
      if ((uint64_t *)v86 != v87)
      {
        while ((*v71 & 0xFFFFFFFFFFFFFFF8) != (v93 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v71 == v87)
          {
            v71 = v87;
            break;
          }
        }
      }
      if (v71 == v87)
      {
        __p[0] = "sdf/childrenUtils.cpp";
        __p[1] = "SetChildren";
        uint64_t v98 = 254;
        v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Vari"
              "antSetChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildP"
              "olicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]";
        char v100 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        int v65 = 1;
      }
      else
      {
        sub_216A8E2D8(v71 + 1, v87, v71);
        for (m = v87; m != v72; --m)
        {
          uint64_t v75 = *(m - 1);
          uint64_t v74 = v75;
          if ((v75 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        v87 = v72;
        if ((uint64_t *)v86 == v72)
        {
          v77 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v77, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v90, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v89);
        }
        else
        {
          v76 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          sub_216A6A718(v76, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v90, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v89, (uint64_t **)&v86);
        }
        v78 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
        v81 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A86964((uint64_t *)&k, v79, v80);
        v82 = sub_216A694A0(v81);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v82, __p);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v78, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v91);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_21697C414(__p);
        int v65 = 0;
      }
      __p[0] = &v86;
      sub_216889A04((void ***)__p);
      if ((v89 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v89 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v90 + 1);
    sub_21697C414(&v90);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v92);
    sub_21697C414(&v91);
    if ((v93 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v65 != 10 && v65) {
      goto LABEL_96;
    }
  }
  if ((uint64_t *)v101 == v102)
  {
    v84 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v84, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v106);
  }
  else
  {
    v83 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    sub_216A6A718(v83, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v106, (uint64_t **)&v101);
  }
LABEL_96:
  sub_2168CB05C((uint64_t)&j, *((void **)&j + 1));
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v96);
LABEL_97:
  __p[0] = &v101;
  sub_216889A04((void ***)__p);
  sub_2168CB05C((uint64_t)&i, *((void **)&i + 1));
  __p[0] = &v107;
  sub_216889A04((void ***)__p);
  __p[0] = &v104;
  sub_216991094((void ***)__p);
  if ((v106 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v59;
}

void sub_216A86638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __p = &a34;
  sub_216889A04((void ***)&__p);
  sub_2168CB05C(v37 - 144, *(void **)(v37 - 136));
  __p = (uint64_t *)(v37 - 176);
  sub_216889A04((void ***)&__p);
  __p = (uint64_t *)&a37;
  sub_216991094((void ***)&__p);
  uint64_t v39 = *(void *)(v37 - 184);
  if ((v39 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216A86964(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfHand"
            "le<pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec>>>::operator*() [T = std::vector<pxrInternal__aapl__p"
            "xrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec>>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216A869DC()
{
}

void *sub_216A869E4(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec>>>::operator++() [T = std::vector<pxrIn"
            "ternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::InsertChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, int a4)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  sub_216A85210(v58);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    __p = "sdf/childrenUtils.cpp";
    v54 = "InsertChild";
    uint64_t v55 = 290;
    v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantS"
          "etChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, "
          "int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]";
    char v57 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
LABEL_8:
    BOOL v12 = 0;
    goto LABEL_9;
  }
  uint64_t v8 = (uint64_t **)sub_216A694A0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v8, (uint64_t *)&__p);
  uint64_t v9 = sub_216851B24((uint64_t)&__p);
  uint64_t v10 = sub_216851B24((uint64_t)a1);
  BOOL v11 = v54;
  if (v54 && atomic_fetch_add_explicit((atomic_uint *volatile)v54 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(const char *))(*(void *)v11 + 8))(v11);
  }
  if (v9 != v10)
  {
    __p = "sdf/childrenUtils.cpp";
    v54 = "InsertChild";
    uint64_t v55 = 295;
    v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantS"
          "etChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, "
          "int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]";
    char v57 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
    goto LABEL_8;
  }
  uint64_t v14 = sub_216A694A0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v47);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v47, &__p);
  uint64_t v15 = __p;
  char v16 = *(void **)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47 + 1);
  sub_21697C414(&v47);
  if (v15 == v16)
  {
    BOOL v12 = 1;
  }
  else
  {
    sub_216A6957C(a3, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v52);
    if (SHIBYTE(v55) < 0) {
      operator delete(__p);
    }
    sub_216A69174(a2, &v52, &v50);
    uint64_t v17 = sub_216A694A0(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v17, &__p);
    BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_21697C414(&__p);
    if (HasPrefix)
    {
      __p = "sdf/childrenUtils.cpp";
      v54 = "InsertChild";
      uint64_t v55 = 312;
      v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Varian"
            "tSetChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType"
            " &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]";
      char v57 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      BOOL v12 = 0;
    }
    else
    {
      uint64_t v19 = sub_2169791E0(a1);
      __p = 0;
      v54 = 0;
      uint64_t v55 = 0;
      uint64_t v20 = sub_216A5B7B0((uint64_t *)(v19 + 112));
      (*(void (**)(void ***__return_ptr))(*(void *)v20 + 136))(&v59);
      if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v59))
      {
        if ((v60 & 4) != 0) {
          p_p = (void **)(*(uint64_t (**)(void ***))(((unint64_t)v60 & 0xFFFFFFFFFFFFFFF8) + 168))(&v59);
        }
        else {
          p_p = v59;
        }
      }
      else
      {
        p_p = &__p;
      }
      uint64_t v47 = 0;
      v48 = 0;
      uint64_t v49 = 0;
      sub_21698FA28(&v47, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((unsigned char *)p_p[1] - (unsigned char *)*p_p) >> 3);
      uint64_t v22 = (void ***)sub_2168EE084((uint64_t)&v59);
      BOOL v59 = &__p;
      sub_216889A04(v22);
      unint64_t v25 = (unint64_t)((char *)v48 - (char *)v47) >> 3;
      if (a4 != -1) {
        LODWORD(v25) = a4;
      }
      uint64_t v26 = (int)v25;
      if ((int)v25 <= (unint64_t)(((char *)v48 - (char *)v47) >> 3))
      {
        BOOL v59 = v47;
        uint64_t v60 = (void **)v48;
        while (v59 != v60)
        {
          uint64_t v28 = (void *)sub_2169CEBC8((uint64_t *)&v59, v23, v24);
          if ((*v28 & 0xFFFFFFFFFFFFFFF8) == (v52 & 0xFFFFFFFFFFFFFFF8))
          {
            __p = "sdf/childrenUtils.cpp";
            v54 = "InsertChild";
            uint64_t v55 = 334;
            v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "VariantSetChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolic"
                  "y::ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]";
            char v57 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert duplicate spec %s", Text);
            goto LABEL_34;
          }
          sub_2169CECC4(&v59);
        }
        uint64_t v29 = sub_216A694A0(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v29, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v45);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_21697C414(&__p);
        sub_216A85210((atomic_uint **)&v44);
        uint64_t v30 = sub_2169791E0(a1);
        __p = 0;
        v54 = 0;
        uint64_t v55 = 0;
        uint64_t v31 = sub_216A5B7B0((uint64_t *)(v30 + 112));
        (*(void (**)(atomic_uint **__return_ptr))(*(void *)v31 + 136))(&v62);
        if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v62))
        {
          if ((v63 & 4) != 0) {
            unint64_t v32 = (uint64_t **)(*(uint64_t (**)(atomic_uint **))((v63 & 0xFFFFFFFFFFFFFFF8) + 168))(&v62);
          }
          else {
            unint64_t v32 = (uint64_t **)v62;
          }
        }
        else
        {
          unint64_t v32 = (uint64_t **)&__p;
        }
        BOOL v59 = 0;
        uint64_t v60 = 0;
        uint64_t v61 = 0;
        sub_21698FA28(&v59, *v32, v32[1], v32[1] - *v32);
        uint64_t v34 = (void ***)sub_2168EE084((uint64_t)&v62);
        v62 = (atomic_uint *)&__p;
        sub_216889A04(v34);
        uint64_t v35 = v59;
        if (v59 != v60)
        {
          while (((unint64_t)*v35 & 0xFFFFFFFFFFFFFFF8) != (v52 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v35 == v60)
            {
              uint64_t v35 = v60;
              break;
            }
          }
        }
        BOOL v12 = v35 != v60;
        if (v35 == v60)
        {
          __p = "sdf/childrenUtils.cpp";
          v54 = "InsertChild";
          uint64_t v55 = 352;
          v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Va"
                "riantSetChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::V"
                "alueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]";
          char v57 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
          sub_216A6B648((uint64_t)&v59, v35);
          if (v59 == v60)
          {
            uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
            pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v44);
          }
          else
          {
            v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
            sub_216A6A718(v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v44, (uint64_t **)&v59);
          }
          uint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          uint64_t v39 = sub_216A694A0(a3);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v39, &v62);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v38, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v62, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
          sub_21697B754(&v62);
          sub_216A6BFEC(&v47, (char *)&v47[v26], (char *)&v52);
          int v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          sub_216A6A718(v40, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v58, (uint64_t **)&v47);
          uint64_t v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, &v62);
          uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v62);
          if ((IsDormant & 1) == 0)
          {
            unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
            pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v62);
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v62);
          sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
        }
        __p = &v59;
        sub_216889A04((void ***)&__p);
        if ((v44 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
        sub_21697C414(&v45);
      }
      else
      {
        __p = "sdf/childrenUtils.cpp";
        v54 = "InsertChild";
        uint64_t v55 = 326;
        v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Vari"
              "antSetChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::Value"
              "Type &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]";
        char v57 = 0;
        unint64_t v27 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert spec %s at an invalid index %d", v27, v26);
LABEL_34:
        BOOL v12 = 0;
      }
      __p = &v47;
      sub_216889A04((void ***)&__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v51);
    sub_21697C414(&v50);
    if ((v52 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
LABEL_9:
  if (((uint64_t)v58[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v58[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v12;
}

void sub_216A87184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,__int16 *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  __p = (__int16 *)(v30 - 112);
  sub_216889A04((void ***)&__p);
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754(&a12);
  __p = &a14;
  sub_216889A04((void ***)&__p);
  sub_21697B754(&a19);
  if ((a20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::RemoveChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  sub_216A85210((atomic_uint **)&v28);
  uint64_t v4 = sub_2169791E0(a1);
  memset(v24, 0, sizeof(v24));
  uint64_t v5 = sub_216A5B7B0((uint64_t *)(v4 + 112));
  (*(void (**)(unint64_t *__return_ptr))(*(void *)v5 + 136))(&v31);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v31))
  {
    if ((v32 & 4) != 0) {
      char v6 = (uint64_t **)(*(uint64_t (**)(unint64_t *))((v32 & 0xFFFFFFFFFFFFFFF8) + 168))(&v31);
    }
    else {
      char v6 = (uint64_t **)v31;
    }
  }
  else
  {
    char v6 = (uint64_t **)v24;
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  sub_21698FA28(&v25, *v6, v6[1], v6[1] - *v6);
  int v7 = (void ***)sub_2168EE084((uint64_t)&v31);
  unint64_t v31 = (unint64_t)v24;
  sub_216889A04(v7);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v31);
  uint64_t v8 = (uint64_t *)v25;
  unint64_t v9 = v31;
  if ((uint64_t *)v25 == v26)
  {
LABEL_9:
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v10 = -v25;
    while ((*v8 & 0xFFFFFFFFFFFFFFF8) != (v31 & 0xFFFFFFFFFFFFFFF8))
    {
      ++v8;
      v10 -= 8;
      if (v8 == v26) {
        goto LABEL_9;
      }
    }
    sub_216A69174(a2, &v31, &v29);
    BOOL v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v29);
    sub_216A8E2D8((void *)(8 - v10), v26, (void *)-v10);
    for (long long i = v26; i != v13; --i)
    {
      uint64_t v16 = *(i - 1);
      uint64_t v15 = v16;
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v26 = v13;
    if ((uint64_t *)v25 == v13)
    {
      uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v18, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28);
    }
    else
    {
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      sub_216A6A718(v17, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28, (uint64_t **)&v25);
    }
    uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v19, a2, &v23);
    uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v23);
    if ((IsDormant & 1) == 0)
    {
      unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
      pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v23);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v23);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
    sub_21697C414(&v29);
    uint64_t v11 = 1;
    unint64_t v9 = v31;
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
  v24[0] = (void **)&v25;
  sub_216889A04(v24);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v11;
}

void sub_216A87648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::MoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, char *a4, int a5)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  sub_216A85210(v55);
  sub_216A87E5C(a2, a4, &v54);
  uint64_t v10 = sub_216A694A0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v10, &v51);
  uint64_t v11 = v54;
  BOOL v12 = v51;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v51 + 1);
  sub_21697C414(&v51);
  if (a5 == -2 && v11 == v12) {
    goto LABEL_59;
  }
  uint64_t v13 = sub_2169791E0(a1);
  __p = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v14 = sub_216A5B7B0((uint64_t *)(v13 + 112));
  (*(void (**)(void ***__return_ptr))(*(void *)v14 + 136))(&v56);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v56))
  {
    if ((v57 & 4) != 0) {
      p_p = (void **)(*(uint64_t (**)(void ***))((v57 & 0xFFFFFFFFFFFFFFF8) + 168))(&v56);
    }
    else {
      p_p = v56;
    }
  }
  else
  {
    p_p = &__p;
  }
  int v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  sub_21698FA28(&v51, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((unsigned char *)p_p[1] - (unsigned char *)*p_p) >> 3);
  sub_2168EE084((uint64_t)&v56);
  v56 = &__p;
  sub_216889A04(&v56);
  sub_216A6957C(a3, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v47);
  if (SHIBYTE(v50) < 0) {
    operator delete(__p);
  }
  uint64_t v16 = sub_216A694A0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v46);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (a5 == -2 && v46 == *(void *)a2)
  {
    if (v51 == v52)
    {
      uint64_t v17 = v51;
    }
    else
    {
      uint64_t v17 = v51;
      while ((*v17 & 0xFFFFFFFFFFFFFFF8) != (v47 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v17 == v52)
        {
          uint64_t v17 = v52;
          break;
        }
      }
    }
    unint64_t v18 = (unint64_t)((char *)v17 - (char *)v51) >> 3;
  }
  else if (v52 - v51 >= (unint64_t)a5)
  {
    LODWORD(v18) = a5;
  }
  else
  {
    LODWORD(v18) = v52 - v51;
  }
  sub_216A85210((atomic_uint **)&v45);
  uint64_t v19 = sub_2169791E0(a1);
  v56 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v20 = sub_216A5B7B0((uint64_t *)(v19 + 112));
  (*(void (**)(void ****__return_ptr))(*(void *)v20 + 136))(&v59);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v59))
  {
    if ((v60 & 4) != 0) {
      uint64_t v21 = (void ***)(*(uint64_t (**)(void ****))((v60 & 0xFFFFFFFFFFFFFFF8) + 168))(&v59);
    }
    else {
      uint64_t v21 = v59;
    }
  }
  else
  {
    uint64_t v21 = &v56;
  }
  __p = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  sub_21698FA28(&__p, (uint64_t *)*v21, (uint64_t *)v21[1], v21[1] - *v21);
  uint64_t v22 = (void ***)sub_2168EE084((uint64_t)&v59);
  BOOL v59 = &v56;
  sub_216889A04(v22);
  uint64_t v23 = (char *)__p;
  if (__p != v49)
  {
    while ((*(void *)v23 & 0xFFFFFFFFFFFFFFF8) != (v47 & 0xFFFFFFFFFFFFFFF8))
    {
      v23 += 8;
      if (v23 == v49)
      {
        uint64_t v23 = v49;
        break;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v56);
  if (v46 == *(void *)a2)
  {
    uint64_t v24 = v23 - (unsigned char *)__p;
    if ((v47 & 0xFFFFFFFFFFFFFFF8) == (*(void *)a4 & 0xFFFFFFFFFFFFFFF8)
      && (v18 == ((unint64_t)v24 >> 3)
       || ((unint64_t)v24 >> 3) + 1 == v18))
    {
      goto LABEL_54;
    }
    BOOL v26 = (int)v18 > v24 >> 3;
    uint64_t v27 = v51;
    if (v51 != v52)
    {
      while ((*v27 & 0xFFFFFFFFFFFFFFF8) != (v47 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v27 == v52)
        {
          uint64_t v27 = v52;
          break;
        }
      }
    }
    sub_216A8E2D8(v27 + 1, v52, v27);
    LODWORD(v18) = v18 - v26;
    for (long long i = v52; i != v28; --i)
    {
      uint64_t v31 = *(i - 1);
      uint64_t v30 = v31;
      if ((v31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v52 = v28;
  }
  else
  {
    sub_216A8E2D8((void *)v23 + 1, v49, v23);
    for (long long j = v49; j != v32; j -= 8)
    {
      uint64_t v35 = *((void *)j - 1);
      uint64_t v34 = v35;
      if ((v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v49 = v32;
    if (__p == v32)
    {
      uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v45);
      uint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v38, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, &v59);
      uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v59);
      if ((IsDormant & 1) == 0)
      {
        unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
        pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (atomic_uint **)&v59);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v59);
    }
    else
    {
      v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      sub_216A6A718(v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v45, (uint64_t **)&__p);
    }
  }
  uint64_t v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  unint64_t v42 = sub_216A694A0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v42, &v59);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v59, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v54);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
  sub_21697C414(&v59);
  sub_216A6BFEC(&v51, (char *)&v51[(int)v18], a4);
  v43 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  sub_216A6A718(v43, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v55, &v51);
LABEL_54:
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v56);
  v56 = &__p;
  sub_216889A04(&v56);
  if ((v45 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_21697C414(&v46);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __p = &v51;
  sub_216889A04((void ***)&__p);
LABEL_59:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v54 + 1);
  sub_21697C414(&v54);
  if (((uint64_t)v55[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v55[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return 1;
}

void sub_216A87CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,void **p_p)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 88));
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&p_p);
  p_p = (void **)&__p;
  sub_216889A04(&p_p);
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754(&a10);
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __p = &a18;
  sub_216889A04((void ***)&__p);
  sub_21697B754(&a21);
  if ((a22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_216A87E5C(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, void *a2@<X1>, _DWORD *a3@<X8>)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName((uint64_t)EmptyString))
  {
    sub_216A69174(a1, a2, a3);
  }
  else
  {
    *(void *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::CanMoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, void *a4, int a5, uint64_t a6)
{
  sub_216A85210((atomic_uint **)&v42);
  BOOL v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v12) & 1) == 0)
  {
    if (a6)
    {
      uint64_t v13 = "Layer is not editable";
      goto LABEL_13;
    }
LABEL_14:
    BOOL v18 = 0;
    goto LABEL_15;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    if (a6)
    {
      uint64_t v13 = "Object does not exist";
LABEL_13:
      MEMORY[0x21D4477E0](a6, v13);
      goto LABEL_14;
    }
    goto LABEL_14;
  }
  uint64_t v14 = (uint64_t **)sub_216A694A0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v14, &v38);
  uint64_t v15 = sub_216851B24((uint64_t)&v38);
  uint64_t v16 = sub_216851B24((uint64_t)a1);
  uint64_t v17 = v39;
  if (v39 && atomic_fetch_add_explicit((atomic_uint *volatile)(v39 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  if (v15 != v16)
  {
    if (a6)
    {
      uint64_t v13 = "Cannot reparent to another layer";
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  sub_216A87E5C(a2, a4, &v40);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v40))
  {
    if (!a6)
    {
LABEL_24:
      BOOL v18 = 0;
      goto LABEL_25;
    }
    uint64_t v23 = "Invalid name";
LABEL_23:
    MEMORY[0x21D4477E0](a6, v23);
    goto LABEL_24;
  }
  uint64_t v20 = sub_216A694A0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v20, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v38);
  uint64_t v21 = v38;
  uint64_t v22 = *(void *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v38 + 1);
  sub_21697C414(&v38);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (v21 != v22)
  {
    uint64_t v24 = sub_216A694A0(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v24, &v38);
    BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v38 + 1);
    sub_21697C414(&v38);
    if (!HasPrefix)
    {
      uint64_t v26 = sub_2169791E0(a1);
      __p = 0;
      v36 = 0;
      uint64_t v37 = 0;
      sub_216A6A608(v26, (uint64_t **)&__p, &v38);
      v31[0] = &__p;
      sub_216889A04(v31);
      unint64_t v27 = (unint64_t)(v39 - v38) >> 3;
      if (a5 != -1) {
        LODWORD(v27) = a5;
      }
      if (v27 == -2 || (int)v27 <= (unint64_t)((v39 - v38) >> 3))
      {
        sub_216A6957C(a3, (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v34);
        if (SHIBYTE(v37) < 0) {
          operator delete(__p);
        }
        unint64_t v28 = sub_216A694A0(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v33);
        sub_21697B754(&__p);
        sub_216A85210((atomic_uint **)&v32);
        uint64_t v29 = sub_2169791E0(a1);
        memset(v31, 0, sizeof(v31));
        sub_216A6A608(v29, (uint64_t **)v31, &__p);
        v43 = v31;
        sub_216889A04((void ***)&v43);
        uint64_t v30 = __p;
        if (__p != v36)
        {
          while ((*v30 & 0xFFFFFFFFFFFFFFF8) != (v34 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v30 == v36)
            {
              uint64_t v30 = v36;
              break;
            }
          }
        }
        BOOL v18 = v30 != v36;
        if (a6 && v30 == v36) {
          MEMORY[0x21D4477E0](a6, "Coding error: Object is not in its parent's children");
        }
        v31[0] = &__p;
        sub_216889A04(v31);
        if ((v32 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        sub_21697B754(&v33);
        if ((v34 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if (a6) {
          MEMORY[0x21D4477E0](a6, "Invalid index");
        }
        BOOL v18 = 0;
      }
      __p = &v38;
      sub_216889A04((void ***)&__p);
      goto LABEL_25;
    }
    if (!a6) {
      goto LABEL_24;
    }
    uint64_t v23 = "Cannot reparent object under itself";
    goto LABEL_23;
  }
  BOOL v18 = 1;
LABEL_25:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
  sub_21697C414(&v40);
LABEL_15:
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v18;
}

void sub_216A882EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23)
{
  __p = &a22;
  sub_216889A04((void ***)&__p);
  sub_21697B754((_DWORD *)(v23 - 88));
  uint64_t v25 = *(void *)(v23 - 80);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::CanRemoveChildForBatchNamespaceEdit(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  sub_216A85210((atomic_uint **)&v19);
  int v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v7))
  {
    uint64_t v8 = sub_2169791E0(a1);
    memset(v15, 0, sizeof(v15));
    uint64_t v9 = sub_216A5B7B0((uint64_t *)(v8 + 112));
    (*(void (**)(void ****__return_ptr))(*(void *)v9 + 136))(&v20);
    if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
    {
      if ((v21 & 4) != 0) {
        uint64_t v10 = (uint64_t **)(*(uint64_t (**)(void ****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
      }
      else {
        uint64_t v10 = (uint64_t **)v20;
      }
    }
    else
    {
      uint64_t v10 = (uint64_t **)v15;
    }
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    sub_21698FA28(&v16, *v10, v10[1], v10[1] - *v10);
    BOOL v12 = (void ***)sub_2168EE084((uint64_t)&v20);
    uint64_t v20 = v15;
    sub_216889A04(v12);
    uint64_t v13 = v16;
    if (v16 != v17)
    {
      while ((*v13 & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v13 == v17)
        {
          uint64_t v13 = v17;
          break;
        }
      }
    }
    BOOL v11 = v13 != v17;
    if (a4 && v13 == v17) {
      MEMORY[0x21D4477E0](a4, "Object does not exist");
    }
    v15[0] = (void **)&v16;
    sub_216889A04(v15);
  }
  else
  {
    if (a4) {
      MEMORY[0x21D4477E0](a4, "Layer is not editable");
    }
    BOOL v11 = 0;
  }
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v11;
}

void sub_216A88640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  a10 = (void **)&a13;
  sub_216889A04(&a10);
  if ((a16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::CreateSpec(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v1 = (uint64_t *)(a1 + 8);
  if (v2) {
    sub_216850B68(v1);
  }

  pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::CreateSpec();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::CreateSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
    uint64_t Spec = pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(a1, a2, a3, a4);
    if (Spec)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v18);
      sub_216A88950((atomic_uint **)__p);
      sub_216A889B4(a2, &v14);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::SdfPath>();
    }
    uint64_t v18 = "sdf/childrenUtils.cpp";
    unint64_t v19 = "CreateSpec";
    uint64_t v20 = 101;
    uint64_t v21 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relation"
          "shipTargetChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal_"
          "_aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C755200, a3, (uint64_t)__p);
    int v9 = v16;
    uint64_t v10 = (void **)__p[0];
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    BOOL v12 = __p;
    if (v9 < 0) {
      BOOL v12 = v10;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to create spec of type '%s' at <%s>", (const char *)v12, Text);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
  }
  else
  {
    uint64_t v18 = "sdf/childrenUtils.cpp";
    unint64_t v19 = "CreateSpec";
    uint64_t v20 = 90;
    uint64_t v21 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relation"
          "shipTargetChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal_"
          "_aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid object type");
    return 0;
  }
  return Spec;
}

void sub_216A888D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
}

pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *sub_216A88950@<X0>(atomic_uint **a1@<X8>)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!result) {
    uint64_t result = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  v3 = (atomic_uint *)*((void *)result + 6);
  *a1 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      *a1 = v4;
    }
  }
  return result;
}

_DWORD *sub_216A889B4@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, _DWORD *a2@<X8>)
{
  TargetPath = pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(a1);
  sub_216981010(a2, TargetPath);

  return sub_21698105C(a2 + 1, (_DWORD *)TargetPath + 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::IsValidName()
{
  return 1;
}

int *pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::IsValidName(long long *a1)
{
  return pxrInternal__aapl__pxrReserved__::SdfPath::IsValidPathString(a1, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::SetChildren(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, long long *a3)
{
  uint64_t v113 = *MEMORY[0x263EF8340];
  sub_216A88950(v108);
  long long v106 = 0uLL;
  unint64_t v107 = 0;
  *((void *)&k + 1) = 0;
  uint64_t v98 = 0;
  *(void *)&long long k = (char *)&k + 8;
  for (long long i = *a3; (void)i != *((void *)&i + 1); sub_216A8E4E0(&i))
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A8E460((uint64_t *)&i, v6, v7);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v8)) {
      goto LABEL_9;
    }
    BOOL v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A8E460((uint64_t *)&i, v9, v10);
    sub_216A64E28(v11, &v109);
    sub_216A5CF30((uint64_t **)&k, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v109, &v109);
    if (v12) {
      goto LABEL_7;
    }
    int v14 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A8E460((uint64_t *)&i, v12, v13);
    uint64_t v15 = sub_21697F2E0(v14);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v15, &j);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&j, &v101);
    char v16 = v101;
    uint64_t v17 = *(_DWORD **)a2;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v101 + 1);
    sub_21697C414(&v101);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
    sub_21697C414(&j);
    if (v16 != v17) {
LABEL_7:
    }
      char v18 = 1;
    else {
      char v18 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v109 + 1);
    sub_21697C414(&v109);
    if (v18)
    {
LABEL_9:
      unint64_t v19 = (atomic_uint **)sub_216A8E460((uint64_t *)&i, v9, v10);
      uint64_t v20 = *((void *)&v106 + 1);
      if (*((void *)&v106 + 1) >= v107)
      {
        char v22 = sub_21697CF74((atomic_uint ***)&v106, v19);
      }
      else
      {
        uint64_t v21 = *v19;
        **((void **)&v106 + 1) = *v19;
        if (v21) {
          atomic_fetch_add(v21, 1u);
        }
        char v22 = (char *)(v20 + 8);
      }
      *((void *)&v106 + 1) = v22;
    }
  }
  sub_216981EE8((uint64_t)&k, *((void **)&k + 1));
  uint64_t v23 = sub_2169791E0(a1);
  long long k = 0uLL;
  uint64_t v98 = 0;
  uint64_t v24 = sub_216A5B7B0((uint64_t *)(v23 + 112));
  (*(void (**)(uint64_t **__return_ptr))(*(void *)v24 + 136))(&v109);
  if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v109))
  {
    if (((uint64_t)v110[0] & 4) != 0) {
      uint64_t v25 = (uint64_t *)(*(uint64_t (**)(uint64_t **))(((unint64_t)v110[0] & 0xFFFFFFFFFFFFFFF8) + 168))(&v109);
    }
    else {
      uint64_t v25 = v109;
    }
  }
  else
  {
    uint64_t v25 = (uint64_t *)&k;
  }
  long long i = 0uLL;
  uint64_t v105 = 0;
  sub_216980EEC(&i, (_DWORD *)*v25, (_DWORD *)v25[1], (v25[1] - *v25) >> 3);
  uint64_t v26 = (void ***)sub_2168EE084((uint64_t)&v109);
  v109 = (uint64_t *)&k;
  sub_216981168(v26);
  v110[0] = 0;
  v110[1] = 0;
  v109 = (uint64_t *)v110;
  unint64_t v101 = 0;
  v102 = 0;
  unint64_t v103 = 0;
  sub_216A6E72C((uint64_t *)&v101, (uint64_t)(*((void *)&v106 + 1) - v106) >> 3);
  for (long long j = v106; (void)j != *((void *)&j + 1); sub_216A6E840(&j))
  {
    uint64_t v29 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A6E7C0((uint64_t *)&j, v27, v28);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v29))
    {
      *(void *)&long long k = "sdf/childrenUtils.cpp";
      *((void *)&k + 1) = "SetChildren";
      uint64_t v98 = 181;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relati"
            "onshipTargetChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename Ch"
            "ildPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
      goto LABEL_75;
    }
    unint64_t v32 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A6E7C0((uint64_t *)&j, v30, v31);
    sub_216A64E28(v32, &v86);
    int v33 = v102;
    if ((unint64_t)v102 >= v103)
    {
      uint64_t v34 = (_DWORD *)sub_216981B30((uint64_t *)&v101, &v86);
    }
    else
    {
      sub_216981010(v102, &v86);
      sub_21698105C(v33 + 1, (_DWORD *)&v86 + 1);
      uint64_t v34 = v33 + 2;
    }
    v102 = v34;
    sub_216A5CF30(&v109, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v86, &v86);
    if ((v35 & 1) == 0)
    {
      *(void *)&long long k = "sdf/childrenUtils.cpp";
      *((void *)&k + 1) = "SetChildren";
      uint64_t v98 = 188;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relati"
            "onshipTargetChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename Ch"
            "ildPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate child");
      goto LABEL_74;
    }
    uint64_t v37 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A6E7C0((uint64_t *)&j, v35, v36);
    uint64_t v38 = (uint64_t **)sub_21697F2E0(v37);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v38, (uint64_t *)&k);
    uint64_t v39 = sub_216851B24((uint64_t)&k);
    uint64_t v42 = sub_216851B24((uint64_t)a1);
    uint64_t v43 = *((void *)&k + 1);
    if (*((void *)&k + 1)
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&k + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
    }
    if (v39 != v42)
    {
      *(void *)&long long k = "sdf/childrenUtils.cpp";
      *((void *)&k + 1) = "SetChildren";
      uint64_t v98 = 193;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relati"
            "onshipTargetChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename Ch"
            "ildPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
      goto LABEL_74;
    }
    unint64_t v44 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A6E7C0((uint64_t *)&j, v40, v41);
    unint64_t v45 = sub_21697F2E0(v44);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v45, &v111);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v111, &k);
    if (*(void *)a2 == (void)k)
    {
      BOOL HasPrefix = 0;
    }
    else
    {
      uint64_t v49 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A6E7C0((uint64_t *)&j, v46, v47);
      uint64_t v50 = sub_21697F2E0(v49);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v50, &m);
      BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&m);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&m + 1);
      sub_21697C414(&m);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
    sub_21697C414(&k);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v111 + 1);
    sub_21697C414(&v111);
    if (HasPrefix)
    {
      *(void *)&long long k = "sdf/childrenUtils.cpp";
      *((void *)&k + 1) = "SetChildren";
      uint64_t v98 = 203;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relati"
            "onshipTargetChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename Ch"
            "ildPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
LABEL_74:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v86 + 1);
      sub_21697C414(&v86);
LABEL_75:
      BOOL v60 = 0;
      goto LABEL_80;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v86 + 1);
    sub_21697C414(&v86);
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v96);
  for (long long k = i; (void)k != *((void *)&k + 1); sub_21698147C(&k))
  {
    uint64_t v53 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169813FC((uint64_t *)&k, v51, v52);
    if (v110 == sub_21698EFF0((uint64_t)&v109, v53))
    {
      v56 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169813FC((uint64_t *)&k, v54, v55);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, v56, &j);
      uint64_t v57 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v57, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&j);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
      sub_21697C414(&j);
    }
  }
  sub_216A8E560((uint64_t)&j, (const pxrInternal__aapl__pxrReserved__::SdfPath *)i, *((const pxrInternal__aapl__pxrReserved__::SdfPath **)&i + 1));
  for (long long m = v106; ; sub_216A6E840(&m))
  {
    BOOL v60 = m == *((void *)&m + 1);
    if ((void)m == *((void *)&m + 1)) {
      break;
    }
    uint64_t v61 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A6E7C0((uint64_t *)&m, v58, v59);
    sub_216A64E28(v61, &v93);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v93, &v91);
    uint64_t v64 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A6E7C0((uint64_t *)&m, v62, v63);
    int v65 = sub_21697F2E0(v64);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v65, &k);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&k, &v90);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
    sub_21697C414(&k);
    if (v90 == *(void *)a2)
    {
      int v66 = 10;
    }
    else
    {
      if ((void *)((char *)&j + 8) != sub_21698EFF0((uint64_t)&j, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v93))
      {
        uint64_t v67 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v67, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v91);
      }
      sub_216A88950((atomic_uint **)&v89);
      uint64_t v68 = sub_2169791E0(a1);
      long long k = 0uLL;
      uint64_t v98 = 0;
      uint64_t v69 = sub_216A5B7B0((uint64_t *)(v68 + 112));
      (*(void (**)(long long **__return_ptr))(*(void *)v69 + 136))(&v111);
      if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v111))
      {
        if ((v112 & 4) != 0) {
          p_long long k = (long long *)(*(uint64_t (**)(long long **))((v112 & 0xFFFFFFFFFFFFFFF8) + 168))(&v111);
        }
        else {
          p_long long k = v111;
        }
      }
      else
      {
        p_long long k = &k;
      }
      unint64_t v86 = 0;
      v87 = 0;
      uint64_t v88 = 0;
      sub_216980EEC(&v86, *(_DWORD **)p_k, *((_DWORD **)p_k + 1), (uint64_t)(*((void *)p_k + 1) - *(void *)p_k) >> 3);
      v71 = (void ***)sub_2168EE084((uint64_t)&v111);
      v111 = &k;
      sub_216981168(v71);
      v72 = v86;
      if (v86 != v87)
      {
        while (*(void *)v72 != v93)
        {
          v72 += 2;
          if (v72 == v87)
          {
            v72 = v87;
            break;
          }
        }
      }
      if (v72 == v87)
      {
        *(void *)&long long k = "sdf/childrenUtils.cpp";
        *((void *)&k + 1) = "SetChildren";
        uint64_t v98 = 254;
        v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Rela"
              "tionshipTargetChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typenam"
              "e ChildPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
        char v100 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        int v66 = 1;
      }
      else
      {
        sub_216A8E5E4((uint64_t)&v111, v72 + 2, v87, v72);
        uint64_t v74 = v73;
        for (n = v87; n != v74; sub_216981128((uint64_t)&v88, n))
          n -= 2;
        v87 = v74;
        if (v86 == v74)
        {
          v77 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v77, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v90, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v89);
        }
        else
        {
          v76 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          sub_216A6E944(v76, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v90, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v89, &v86);
        }
        v78 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
        v81 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A6E7C0((uint64_t *)&m, v79, v80);
        v82 = sub_21697F2E0(v81);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v82, &k);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v78, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&k, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v91);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
        sub_21697C414(&k);
        int v66 = 0;
      }
      *(void *)&long long k = &v86;
      sub_216981168((void ***)&k);
      if ((v89 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v89 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v90 + 1);
    sub_21697C414(&v90);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v92);
    sub_21697C414(&v91);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v93 + 1);
    sub_21697C414(&v93);
    if (v66 != 10 && v66) {
      goto LABEL_79;
    }
  }
  if (v101 == v102)
  {
    v84 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v84, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v108);
  }
  else
  {
    v83 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    sub_216A6E944(v83, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v108, &v101);
  }
LABEL_79:
  sub_216981EE8((uint64_t)&j, *((void **)&j + 1));
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v96);
LABEL_80:
  *(void *)&long long k = &v101;
  sub_216981168((void ***)&k);
  sub_216981EE8((uint64_t)&v109, v110[0]);
  *(void *)&long long k = &i;
  sub_216981168((void ***)&k);
  *(void *)&long long k = &v106;
  sub_21697CA24((void ***)&k);
  if (((uint64_t)v108[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v108[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v60;
}

void sub_216A89404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_21697B754(&a10);
  a23 = (void **)&a28;
  sub_216981168(&a23);
  sub_216981EE8(v31 - 144, *(void **)(v31 - 136));
  a23 = (void **)&a31;
  sub_216981168(&a23);
  a23 = (void **)(v31 - 192);
  sub_21697CA24(&a23);
  uint64_t v33 = *(void *)(v31 - 160);
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::InsertChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, int a4)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  sub_216A88950(v58);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    uint64_t v53 = (void **)"sdf/childrenUtils.cpp";
    uint64_t v54 = "InsertChild";
    uint64_t v55 = 290;
    v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relation"
          "shipTargetChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::Value"
          "Type &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
    char v57 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v53, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
LABEL_8:
    BOOL v12 = 0;
    goto LABEL_9;
  }
  uint64_t v8 = (uint64_t **)sub_21697F2E0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v8, (uint64_t *)&v53);
  uint64_t v9 = sub_216851B24((uint64_t)&v53);
  uint64_t v10 = sub_216851B24((uint64_t)a1);
  BOOL v11 = v54;
  if (v54 && atomic_fetch_add_explicit((atomic_uint *volatile)v54 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(const char *))(*(void *)v11 + 8))(v11);
  }
  if (v9 != v10)
  {
    uint64_t v53 = (void **)"sdf/childrenUtils.cpp";
    uint64_t v54 = "InsertChild";
    uint64_t v55 = 295;
    v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relation"
          "shipTargetChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::Value"
          "Type &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
    char v57 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v53, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
    goto LABEL_8;
  }
  int v14 = sub_21697F2E0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v47);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v47, &v53);
  uint64_t v15 = v53;
  char v16 = *(void ***)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
  sub_21697C414(&v53);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47 + 1);
  sub_21697C414(&v47);
  if (v15 == v16)
  {
    BOOL v12 = 1;
  }
  else
  {
    sub_216A64E28(a3, &v52);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v52, &v50);
    uint64_t v17 = sub_21697F2E0(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v17, &v53);
    BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
    sub_21697C414(&v53);
    if (HasPrefix)
    {
      uint64_t v53 = (void **)"sdf/childrenUtils.cpp";
      uint64_t v54 = "InsertChild";
      uint64_t v55 = 312;
      v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relati"
            "onshipTargetChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::V"
            "alueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
      char v57 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v53, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      BOOL v12 = 0;
    }
    else
    {
      uint64_t v19 = sub_2169791E0(a1);
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      uint64_t v20 = sub_216A5B7B0((uint64_t *)(v19 + 112));
      (*(void (**)(void ****__return_ptr))(*(void *)v20 + 136))(&v59);
      if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v59))
      {
        if ((v60 & 4) != 0) {
          uint64_t v21 = (void ***)(*(uint64_t (**)(void ****))(((unint64_t)v60 & 0xFFFFFFFFFFFFFFF8) + 168))(&v59);
        }
        else {
          uint64_t v21 = v59;
        }
      }
      else
      {
        uint64_t v21 = &v53;
      }
      uint64_t v47 = 0;
      v48 = 0;
      uint64_t v49 = 0;
      sub_216980EEC(&v47, *v21, v21[1], v21[1] - *v21);
      char v22 = (void ***)sub_2168EE084((uint64_t)&v59);
      BOOL v59 = &v53;
      sub_216981168(v22);
      unint64_t v25 = (unint64_t)(v48 - (char *)v47) >> 3;
      if (a4 != -1) {
        LODWORD(v25) = a4;
      }
      uint64_t v26 = (int)v25;
      if ((int)v25 <= (unint64_t)((v48 - (char *)v47) >> 3))
      {
        BOOL v59 = v47;
        BOOL v60 = (int *)v48;
        while (v59 != (void ***)v60)
        {
          unint64_t v28 = (void *)sub_2169813FC((uint64_t *)&v59, v23, v24);
          if (*v28 == v52)
          {
            uint64_t v53 = (void **)"sdf/childrenUtils.cpp";
            uint64_t v54 = "InsertChild";
            uint64_t v55 = 334;
            v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "RelationshipTargetChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename Ch"
                  "ildPolicy::ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
            char v57 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v53, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert duplicate spec %s", Text);
            goto LABEL_32;
          }
          sub_21698147C(&v59);
        }
        uint64_t v29 = sub_21697F2E0(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v29, &v53);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, &v45);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
        sub_21697C414(&v53);
        sub_216A88950((atomic_uint **)&v44);
        uint64_t v30 = sub_2169791E0(a1);
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        uint64_t v55 = 0;
        uint64_t v31 = sub_216A5B7B0((uint64_t *)(v30 + 112));
        (*(void (**)(void ****__return_ptr))(*(void *)v31 + 136))(&v62);
        if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v62))
        {
          if ((v63 & 4) != 0) {
            unint64_t v32 = (void ***)(*(uint64_t (**)(void ****))((v63 & 0xFFFFFFFFFFFFFFF8) + 168))(&v62);
          }
          else {
            unint64_t v32 = v62;
          }
        }
        else
        {
          unint64_t v32 = &v53;
        }
        BOOL v59 = 0;
        BOOL v60 = 0;
        uint64_t v61 = 0;
        sub_216980EEC(&v59, *v32, v32[1], v32[1] - *v32);
        uint64_t v34 = (void ***)sub_2168EE084((uint64_t)&v62);
        uint64_t v62 = &v53;
        sub_216981168(v34);
        uint64_t v35 = (int *)v59;
        if (v59 != (void ***)v60)
        {
          while (*(void *)v35 != v52)
          {
            v35 += 2;
            if (v35 == v60)
            {
              uint64_t v35 = v60;
              break;
            }
          }
        }
        BOOL v12 = v35 != v60;
        if (v35 == v60)
        {
          uint64_t v53 = (void **)"sdf/childrenUtils.cpp";
          uint64_t v54 = "InsertChild";
          uint64_t v55 = 352;
          v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Re"
                "lationshipTargetChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildP"
                "olicy::ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
          char v57 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v53, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v53);
          sub_216A6E8C0((uint64_t)&v59, v35);
          if (v59 == (void ***)v60)
          {
            uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
            pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v44);
          }
          else
          {
            v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
            sub_216A6E944(v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v44, (_DWORD **)&v59);
          }
          uint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          uint64_t v39 = sub_21697F2E0(a3);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v39, &v62);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v38, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v62, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
          sub_21697B754(&v62);
          sub_216A6F2DC((uint64_t *)&v47, (int *)&v47[v26], (int *)&v52);
          uint64_t v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          sub_216A6E944(v40, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v58, (_DWORD **)&v47);
          int v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, &v62);
          uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v62);
          if ((IsDormant & 1) == 0)
          {
            unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
            pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (atomic_uint **)&v62);
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v62);
          sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v53);
        }
        uint64_t v53 = (void **)&v59;
        sub_216981168(&v53);
        if ((v44 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
        sub_21697C414(&v45);
      }
      else
      {
        uint64_t v53 = (void **)"sdf/childrenUtils.cpp";
        uint64_t v54 = "InsertChild";
        uint64_t v55 = 326;
        v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Rela"
              "tionshipTargetChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolic"
              "y::ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
        char v57 = 0;
        uint64_t v27 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v53, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert spec %s at an invalid index %d", v27, v26);
LABEL_32:
        BOOL v12 = 0;
      }
      uint64_t v53 = (void **)&v47;
      sub_216981168(&v53);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v51);
    sub_21697C414(&v50);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v52 + 1);
    sub_21697C414(&v52);
  }
LABEL_9:
  if (((uint64_t)v58[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v58[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v12;
}

void sub_216A89DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, int a17, int a18, int a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  a20 = (void **)(v25 - 112);
  sub_216981168(&a20);
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754(&a12);
  a20 = (void **)&a14;
  sub_216981168(&a20);
  sub_21697B754(&a17);
  sub_21697B754(&a19);
  if ((a25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::RemoveChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _DWORD *a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  sub_216A88950((atomic_uint **)&v27);
  uint64_t v6 = sub_2169791E0(a1);
  memset(v23, 0, sizeof(v23));
  uint64_t v7 = sub_216A5B7B0((uint64_t *)(v6 + 112));
  (*(void (**)(void ****__return_ptr))(*(void *)v7 + 136))(&v30);
  if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v30))
  {
    if ((v31 & 4) != 0) {
      uint64_t v8 = (void ***)(*(uint64_t (**)(void ****))((v31 & 0xFFFFFFFFFFFFFFF8) + 168))(&v30);
    }
    else {
      uint64_t v8 = v30;
    }
  }
  else
  {
    uint64_t v8 = v23;
  }
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  sub_216980EEC(&v24, *v8, v8[1], v8[1] - *v8);
  sub_2168EE084((uint64_t)&v30);
  uint64_t v30 = v23;
  sub_216981168((void ***)&v30);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v23);
  sub_216981010(&v30, a3);
  sub_21698105C((_DWORD *)&v30 + 1, a3 + 1);
  uint64_t v9 = (int *)v24;
  if ((int *)v24 == v25)
  {
LABEL_9:
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v10 = -v24;
    while (*(void ****)v9 != v30)
    {
      v9 += 2;
      v10 -= 8;
      if (v9 == v25) {
        goto LABEL_9;
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v30, &v28);
    BOOL v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v28);
    sub_216A8E5E4((uint64_t)&v22, (int *)(8 - v10), v25, (int *)-v10);
    int v14 = v13;
    for (long long i = v25; i != v14; sub_216981128((uint64_t)&v26, i))
      i -= 2;
    uint64_t v25 = v14;
    if ((int *)v24 == v14)
    {
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v17, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v27);
    }
    else
    {
      char v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      sub_216A6E944(v16, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v27, (_DWORD **)&v24);
    }
    char v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v18, a2, &v22);
    uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v22);
    if ((IsDormant & 1) == 0)
    {
      unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
      pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v22);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v22);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
    sub_21697C414(&v28);
    uint64_t v11 = 1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
  sub_21697C414(&v30);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v23);
  v23[0] = (void **)&v24;
  sub_216981168(v23);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v11;
}

void sub_216A8A26C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::MoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4, int a5)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  sub_216A88950(v53);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, a4, &v52);
  uint64_t v10 = sub_21697F2E0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v10, &v49);
  uint64_t v11 = v52;
  BOOL v12 = v49;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v49 + 1);
  sub_21697C414(&v49);
  if (a5 == -2 && v11 == v12) {
    goto LABEL_51;
  }
  uint64_t v13 = sub_2169791E0(a1);
  int v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v14 = sub_216A5B7B0((uint64_t *)(v13 + 112));
  (*(void (**)(char ****__return_ptr))(*(void *)v14 + 136))(&v54);
  if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v54))
  {
    if ((v55 & 4) != 0) {
      uint64_t v15 = (char ***)(*(uint64_t (**)(char ****))((v55 & 0xFFFFFFFFFFFFFFF8) + 168))(&v54);
    }
    else {
      uint64_t v15 = v54;
    }
  }
  else
  {
    uint64_t v15 = &v46;
  }
  uint64_t v49 = 0;
  int v50 = 0;
  uint64_t v51 = 0;
  sub_216980EEC(&v49, *v15, v15[1], v15[1] - *v15);
  sub_2168EE084((uint64_t)&v54);
  uint64_t v54 = &v46;
  sub_216981168((void ***)&v54);
  sub_216A64E28(a3, &v45);
  char v16 = sub_21697F2E0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16, &v46);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, &v44);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_21697C414(&v46);
  if (a5 == -2 && v44 == *(void *)a2)
  {
    if (v49 == (char *)v50)
    {
      uint64_t v17 = (int *)v49;
    }
    else
    {
      uint64_t v17 = (int *)v49;
      while (*(void *)v17 != v45)
      {
        v17 += 2;
        if (v17 == v50)
        {
          uint64_t v17 = v50;
          break;
        }
      }
    }
    unint64_t v18 = (unint64_t)((char *)v17 - v49) >> 3;
  }
  else if (((char *)v50 - v49) >> 3 >= (unint64_t)a5)
  {
    LODWORD(v18) = a5;
  }
  else
  {
    LODWORD(v18) = ((char *)v50 - v49) >> 3;
  }
  sub_216A88950((atomic_uint **)&v43);
  uint64_t v19 = sub_2169791E0(a1);
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v20 = sub_216A5B7B0((uint64_t *)(v19 + 112));
  (*(void (**)(char *****__return_ptr))(*(void *)v20 + 136))(&v57);
  if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v57))
  {
    if ((v58 & 4) != 0) {
      uint64_t v21 = (char ****)(*(uint64_t (**)(char *****))((v58 & 0xFFFFFFFFFFFFFFF8) + 168))(&v57);
    }
    else {
      uint64_t v21 = v57;
    }
  }
  else
  {
    uint64_t v21 = &v54;
  }
  int v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  sub_216980EEC(&v46, *v21, v21[1], v21[1] - *v21);
  char v22 = (void ***)sub_2168EE084((uint64_t)&v57);
  char v57 = &v54;
  sub_216981168(v22);
  uint64_t v23 = (int *)v46;
  if (v46 != (char **)v47)
  {
    while (*(void *)v23 != v45)
    {
      v23 += 2;
      if (v23 == v47)
      {
        uint64_t v23 = v47;
        break;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v54);
  if (v44 == *(void *)a2)
  {
    uint64_t v24 = (char *)v23 - (char *)v46;
    if (v45 == *(void *)a4
      && (v18 == ((unint64_t)v24 >> 3)
       || ((unint64_t)v24 >> 3) + 1 == v18))
    {
      goto LABEL_48;
    }
    BOOL v26 = (int)v18 > v24 >> 3;
    unint64_t v27 = (int *)v49;
    if (v49 != (char *)v50)
    {
      while (*(void *)v27 != v45)
      {
        v27 += 2;
        if (v27 == v50)
        {
          unint64_t v27 = v50;
          break;
        }
      }
    }
    sub_216A8E5E4((uint64_t)&v57, v27 + 2, v50, v27);
    int v29 = v28;
    LODWORD(v18) = v18 - v26;
    for (long long i = v50; i != v29; sub_216981128((uint64_t)&v51, i))
      i -= 2;
    int v50 = v29;
  }
  else
  {
    sub_216A8E5E4((uint64_t)&v57, v23 + 2, v47, v23);
    uint64_t v32 = v31;
    for (long long j = v47; j != v32; sub_216981128((uint64_t)&v48, j))
      j -= 2;
    uint64_t v47 = v32;
    if (v46 == (char **)v32)
    {
      uint64_t v35 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v35, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v44, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v43);
      v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v44, &v57);
      uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v57);
      if ((IsDormant & 1) == 0)
      {
        unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
        pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (atomic_uint **)&v57);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v57);
    }
    else
    {
      uint64_t v34 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      sub_216A6E944(v34, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v44, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v43, (_DWORD **)&v46);
    }
  }
  uint64_t v39 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  uint64_t v40 = sub_21697F2E0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v40, &v57);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v39, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v57, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v52);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v57 + 1);
  sub_21697C414(&v57);
  sub_216A6F2DC((uint64_t *)&v49, (int *)&v49[8 * (int)v18], (int *)a4);
  int v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  sub_216A6E944(v41, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v53, (_DWORD **)&v49);
LABEL_48:
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v54);
  uint64_t v54 = &v46;
  sub_216981168((void ***)&v54);
  if ((v43 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
  sub_21697C414(&v44);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
  sub_21697C414(&v45);
  int v46 = &v49;
  sub_216981168((void ***)&v46);
LABEL_51:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v52 + 1);
  sub_21697C414(&v52);
  if (((uint64_t)v53[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v53[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return 1;
}

void sub_216A8A8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, int a12, void **a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,void ***a22)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v22 - 88));
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a22);
  a22 = &a13;
  sub_216981168((void ***)&a22);
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754(&a10);
  sub_21697B754(&a12);
  a13 = (void **)&a16;
  sub_216981168(&a13);
  sub_21697B754(&a19);
  if ((a20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::CanMoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4, int a5, uint64_t a6)
{
  sub_216A88950((atomic_uint **)&v42);
  BOOL v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v12) & 1) == 0)
  {
    if (a6)
    {
      uint64_t v13 = "Layer is not editable";
      goto LABEL_13;
    }
LABEL_14:
    BOOL v18 = 0;
    goto LABEL_15;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    if (a6)
    {
      uint64_t v13 = "Object does not exist";
LABEL_13:
      MEMORY[0x21D4477E0](a6, v13);
      goto LABEL_14;
    }
    goto LABEL_14;
  }
  uint64_t v14 = (uint64_t **)sub_21697F2E0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v14, &v38);
  uint64_t v15 = sub_216851B24((uint64_t)&v38);
  uint64_t v16 = sub_216851B24((uint64_t)a1);
  uint64_t v17 = v39;
  if (v39 && atomic_fetch_add_explicit((atomic_uint *volatile)(v39 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  if (v15 != v16)
  {
    if (a6)
    {
      uint64_t v13 = "Cannot reparent to another layer";
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, a4, &v40);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v40))
  {
    if (!a6)
    {
LABEL_24:
      BOOL v18 = 0;
      goto LABEL_25;
    }
    uint64_t v23 = "Invalid name";
LABEL_23:
    MEMORY[0x21D4477E0](a6, v23);
    goto LABEL_24;
  }
  uint64_t v20 = sub_21697F2E0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v20, &v35);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, &v38);
  uint64_t v21 = v38;
  uint64_t v22 = *(void *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v38 + 1);
  sub_21697C414(&v38);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
  sub_21697C414(&v35);
  if (v21 != v22)
  {
    uint64_t v24 = sub_21697F2E0(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v24, &v38);
    BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v38 + 1);
    sub_21697C414(&v38);
    if (!HasPrefix)
    {
      uint64_t v26 = sub_2169791E0(a1);
      uint64_t v35 = 0;
      v36 = 0;
      uint64_t v37 = 0;
      sub_216A6E61C(v26, (_DWORD **)&v35, &v38);
      v31[0] = (void **)&v35;
      sub_216981168(v31);
      unint64_t v27 = (unint64_t)(v39 - v38) >> 3;
      if (a5 != -1) {
        LODWORD(v27) = a5;
      }
      if (v27 == -2 || (int)v27 <= (unint64_t)((v39 - v38) >> 3))
      {
        sub_216A64E28(a3, &v34);
        int v28 = sub_21697F2E0(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, &v35);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, &v33);
        sub_21697B754(&v35);
        sub_216A88950((atomic_uint **)&v32);
        uint64_t v29 = sub_2169791E0(a1);
        memset(v31, 0, sizeof(v31));
        sub_216A6E61C(v29, (_DWORD **)v31, &v35);
        unint64_t v43 = v31;
        sub_216981168((void ***)&v43);
        uint64_t v30 = v35;
        if (v35 != v36)
        {
          while (*v30 != v34)
          {
            if (++v30 == v36)
            {
              uint64_t v30 = v36;
              break;
            }
          }
        }
        BOOL v18 = v30 != v36;
        if (a6 && v30 == v36) {
          MEMORY[0x21D4477E0](a6, "Coding error: Object is not in its parent's children");
        }
        v31[0] = (void **)&v35;
        sub_216981168(v31);
        if ((v32 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        sub_21697B754(&v33);
        sub_21697B754(&v34);
      }
      else
      {
        if (a6) {
          MEMORY[0x21D4477E0](a6, "Invalid index");
        }
        BOOL v18 = 0;
      }
      uint64_t v35 = &v38;
      sub_216981168((void ***)&v35);
      goto LABEL_25;
    }
    if (!a6) {
      goto LABEL_24;
    }
    uint64_t v23 = "Cannot reparent object under itself";
    goto LABEL_23;
  }
  BOOL v18 = 1;
LABEL_25:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
  sub_21697C414(&v40);
LABEL_15:
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v18;
}

void sub_216A8ADCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, char a19)
{
  a16 = (void **)&a19;
  sub_216981168(&a16);
  sub_21697B754((_DWORD *)(v19 - 88));
  uint64_t v21 = *(void *)(v19 - 80);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::CanRemoveChildForBatchNamespaceEdit(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  sub_216A88950((atomic_uint **)&v19);
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v7))
  {
    uint64_t v8 = sub_2169791E0(a1);
    memset(v15, 0, sizeof(v15));
    uint64_t v9 = sub_216A5B7B0((uint64_t *)(v8 + 112));
    (*(void (**)(void ****__return_ptr))(*(void *)v9 + 136))(&v20);
    if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
    {
      if ((v21 & 4) != 0) {
        uint64_t v10 = (void ***)(*(uint64_t (**)(void ****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
      }
      else {
        uint64_t v10 = v20;
      }
    }
    else
    {
      uint64_t v10 = v15;
    }
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    sub_216980EEC(&v16, *v10, v10[1], v10[1] - *v10);
    BOOL v12 = (void ***)sub_2168EE084((uint64_t)&v20);
    uint64_t v20 = v15;
    sub_216981168(v12);
    uint64_t v13 = v16;
    if (v16 != v17)
    {
      while (*v13 != *a3)
      {
        if (++v13 == v17)
        {
          uint64_t v13 = v17;
          break;
        }
      }
    }
    BOOL v11 = v13 != v17;
    if (a4 && v13 == v17) {
      MEMORY[0x21D4477E0](a4, "Object does not exist");
    }
    v15[0] = (void **)&v16;
    sub_216981168(v15);
  }
  else
  {
    if (a4) {
      MEMORY[0x21D4477E0](a4, "Layer is not editable");
    }
    BOOL v11 = 0;
  }
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v11;
}

void sub_216A8B0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  a10 = (void **)&a13;
  sub_216981168(&a10);
  if ((a16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::CreateSpec(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v1 = (uint64_t *)(a1 + 8);
  if (v2) {
    sub_216850B68(v1);
  }

  pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::CreateSpec();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::CreateSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
    uint64_t Spec = pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(a1, a2, a3, a4);
    if (Spec)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v18);
      sub_216A8B400((atomic_uint **)__p);
      sub_216A889B4(a2, &v14);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::SdfPath>();
    }
    uint64_t v18 = "sdf/childrenUtils.cpp";
    unint64_t v19 = "CreateSpec";
    uint64_t v20 = 101;
    uint64_t v21 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attribut"
          "eConnectionChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal"
          "__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C755200, a3, (uint64_t)__p);
    int v9 = v16;
    uint64_t v10 = (void **)__p[0];
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    BOOL v12 = __p;
    if (v9 < 0) {
      BOOL v12 = v10;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to create spec of type '%s' at <%s>", (const char *)v12, Text);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
  }
  else
  {
    uint64_t v18 = "sdf/childrenUtils.cpp";
    unint64_t v19 = "CreateSpec";
    uint64_t v20 = 90;
    uint64_t v21 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attribut"
          "eConnectionChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal"
          "__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid object type");
    return 0;
  }
  return Spec;
}

void sub_216A8B384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
}

pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *sub_216A8B400@<X0>(atomic_uint **a1@<X8>)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!result) {
    uint64_t result = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  v3 = *(atomic_uint **)result;
  *a1 = *(atomic_uint **)result;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      *a1 = v4;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::IsValidName()
{
  return 1;
}

int *pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::IsValidName(long long *a1)
{
  return pxrInternal__aapl__pxrReserved__::SdfPath::IsValidPathString(a1, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::SetChildren(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, long long *a3)
{
  uint64_t v113 = *MEMORY[0x263EF8340];
  sub_216A8B400(v108);
  long long v106 = 0uLL;
  unint64_t v107 = 0;
  *((void *)&k + 1) = 0;
  uint64_t v98 = 0;
  *(void *)&long long k = (char *)&k + 8;
  for (long long i = *a3; (void)i != *((void *)&i + 1); sub_216A8E4E0(&i))
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A8E460((uint64_t *)&i, v6, v7);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v8)) {
      goto LABEL_9;
    }
    BOOL v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A8E460((uint64_t *)&i, v9, v10);
    sub_216A64E28(v11, &v109);
    sub_216A5CF30((uint64_t **)&k, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v109, &v109);
    if (v12) {
      goto LABEL_7;
    }
    int v14 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A8E460((uint64_t *)&i, v12, v13);
    uint64_t v15 = sub_21697F2E0(v14);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v15, &j);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&j, &v101);
    char v16 = v101;
    uint64_t v17 = *(_DWORD **)a2;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v101 + 1);
    sub_21697C414(&v101);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
    sub_21697C414(&j);
    if (v16 != v17) {
LABEL_7:
    }
      char v18 = 1;
    else {
      char v18 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v109 + 1);
    sub_21697C414(&v109);
    if (v18)
    {
LABEL_9:
      unint64_t v19 = (atomic_uint **)sub_216A8E460((uint64_t *)&i, v9, v10);
      uint64_t v20 = *((void *)&v106 + 1);
      if (*((void *)&v106 + 1) >= v107)
      {
        char v22 = sub_21697CF74((atomic_uint ***)&v106, v19);
      }
      else
      {
        uint64_t v21 = *v19;
        **((void **)&v106 + 1) = *v19;
        if (v21) {
          atomic_fetch_add(v21, 1u);
        }
        char v22 = (char *)(v20 + 8);
      }
      *((void *)&v106 + 1) = v22;
    }
  }
  sub_216981EE8((uint64_t)&k, *((void **)&k + 1));
  uint64_t v23 = sub_2169791E0(a1);
  long long k = 0uLL;
  uint64_t v98 = 0;
  uint64_t v24 = sub_216A5B7B0((uint64_t *)(v23 + 112));
  (*(void (**)(uint64_t **__return_ptr))(*(void *)v24 + 136))(&v109);
  if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v109))
  {
    if (((uint64_t)v110[0] & 4) != 0) {
      uint64_t v25 = (uint64_t *)(*(uint64_t (**)(uint64_t **))(((unint64_t)v110[0] & 0xFFFFFFFFFFFFFFF8) + 168))(&v109);
    }
    else {
      uint64_t v25 = v109;
    }
  }
  else
  {
    uint64_t v25 = (uint64_t *)&k;
  }
  long long i = 0uLL;
  uint64_t v105 = 0;
  sub_216980EEC(&i, (_DWORD *)*v25, (_DWORD *)v25[1], (v25[1] - *v25) >> 3);
  uint64_t v26 = (void ***)sub_2168EE084((uint64_t)&v109);
  v109 = (uint64_t *)&k;
  sub_216981168(v26);
  v110[0] = 0;
  v110[1] = 0;
  v109 = (uint64_t *)v110;
  unint64_t v101 = 0;
  v102 = 0;
  unint64_t v103 = 0;
  sub_216A6E72C((uint64_t *)&v101, (uint64_t)(*((void *)&v106 + 1) - v106) >> 3);
  for (long long j = v106; (void)j != *((void *)&j + 1); sub_216A6E840(&j))
  {
    uint64_t v29 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A6E7C0((uint64_t *)&j, v27, v28);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v29))
    {
      *(void *)&long long k = "sdf/childrenUtils.cpp";
      *((void *)&k + 1) = "SetChildren";
      uint64_t v98 = 181;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attrib"
            "uteConnectionChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename C"
            "hildPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
      goto LABEL_75;
    }
    unint64_t v32 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A6E7C0((uint64_t *)&j, v30, v31);
    sub_216A64E28(v32, &v86);
    int v33 = v102;
    if ((unint64_t)v102 >= v103)
    {
      uint64_t v34 = (_DWORD *)sub_216981B30((uint64_t *)&v101, &v86);
    }
    else
    {
      sub_216981010(v102, &v86);
      sub_21698105C(v33 + 1, (_DWORD *)&v86 + 1);
      uint64_t v34 = v33 + 2;
    }
    v102 = v34;
    sub_216A5CF30(&v109, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v86, &v86);
    if ((v35 & 1) == 0)
    {
      *(void *)&long long k = "sdf/childrenUtils.cpp";
      *((void *)&k + 1) = "SetChildren";
      uint64_t v98 = 188;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attrib"
            "uteConnectionChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename C"
            "hildPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate child");
      goto LABEL_74;
    }
    uint64_t v37 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A6E7C0((uint64_t *)&j, v35, v36);
    uint64_t v38 = (uint64_t **)sub_21697F2E0(v37);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v38, (uint64_t *)&k);
    uint64_t v39 = sub_216851B24((uint64_t)&k);
    uint64_t v42 = sub_216851B24((uint64_t)a1);
    uint64_t v43 = *((void *)&k + 1);
    if (*((void *)&k + 1)
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&k + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
    }
    if (v39 != v42)
    {
      *(void *)&long long k = "sdf/childrenUtils.cpp";
      *((void *)&k + 1) = "SetChildren";
      uint64_t v98 = 193;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attrib"
            "uteConnectionChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename C"
            "hildPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
      goto LABEL_74;
    }
    uint64_t v44 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A6E7C0((uint64_t *)&j, v40, v41);
    uint64_t v45 = sub_21697F2E0(v44);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v45, &v111);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v111, &k);
    if (*(void *)a2 == (void)k)
    {
      BOOL HasPrefix = 0;
    }
    else
    {
      uint64_t v49 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A6E7C0((uint64_t *)&j, v46, v47);
      int v50 = sub_21697F2E0(v49);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v50, &m);
      BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&m);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&m + 1);
      sub_21697C414(&m);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
    sub_21697C414(&k);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v111 + 1);
    sub_21697C414(&v111);
    if (HasPrefix)
    {
      *(void *)&long long k = "sdf/childrenUtils.cpp";
      *((void *)&k + 1) = "SetChildren";
      uint64_t v98 = 203;
      v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attrib"
            "uteConnectionChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename C"
            "hildPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
      char v100 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
LABEL_74:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v86 + 1);
      sub_21697C414(&v86);
LABEL_75:
      BOOL v60 = 0;
      goto LABEL_80;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v86 + 1);
    sub_21697C414(&v86);
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v96);
  for (long long k = i; (void)k != *((void *)&k + 1); sub_21698147C(&k))
  {
    uint64_t v53 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169813FC((uint64_t *)&k, v51, v52);
    if (v110 == sub_21698EFF0((uint64_t)&v109, v53))
    {
      uint64_t v56 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169813FC((uint64_t *)&k, v54, v55);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, v56, &j);
      char v57 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v57, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&j);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
      sub_21697C414(&j);
    }
  }
  sub_216A8E560((uint64_t)&j, (const pxrInternal__aapl__pxrReserved__::SdfPath *)i, *((const pxrInternal__aapl__pxrReserved__::SdfPath **)&i + 1));
  for (long long m = v106; ; sub_216A6E840(&m))
  {
    BOOL v60 = m == *((void *)&m + 1);
    if ((void)m == *((void *)&m + 1)) {
      break;
    }
    uint64_t v61 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A6E7C0((uint64_t *)&m, v58, v59);
    sub_216A64E28(v61, &v93);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v93, &v91);
    uint64_t v64 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A6E7C0((uint64_t *)&m, v62, v63);
    int v65 = sub_21697F2E0(v64);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v65, &k);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&k, &v90);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
    sub_21697C414(&k);
    if (v90 == *(void *)a2)
    {
      int v66 = 10;
    }
    else
    {
      if ((void *)((char *)&j + 8) != sub_21698EFF0((uint64_t)&j, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v93))
      {
        uint64_t v67 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v67, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v91);
      }
      sub_216A8B400((atomic_uint **)&v89);
      uint64_t v68 = sub_2169791E0(a1);
      long long k = 0uLL;
      uint64_t v98 = 0;
      uint64_t v69 = sub_216A5B7B0((uint64_t *)(v68 + 112));
      (*(void (**)(long long **__return_ptr))(*(void *)v69 + 136))(&v111);
      if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v111))
      {
        if ((v112 & 4) != 0) {
          p_long long k = (long long *)(*(uint64_t (**)(long long **))((v112 & 0xFFFFFFFFFFFFFFF8) + 168))(&v111);
        }
        else {
          p_long long k = v111;
        }
      }
      else
      {
        p_long long k = &k;
      }
      unint64_t v86 = 0;
      v87 = 0;
      uint64_t v88 = 0;
      sub_216980EEC(&v86, *(_DWORD **)p_k, *((_DWORD **)p_k + 1), (uint64_t)(*((void *)p_k + 1) - *(void *)p_k) >> 3);
      v71 = (void ***)sub_2168EE084((uint64_t)&v111);
      v111 = &k;
      sub_216981168(v71);
      v72 = v86;
      if (v86 != v87)
      {
        while (*(void *)v72 != v93)
        {
          v72 += 2;
          if (v72 == v87)
          {
            v72 = v87;
            break;
          }
        }
      }
      if (v72 == v87)
      {
        *(void *)&long long k = "sdf/childrenUtils.cpp";
        *((void *)&k + 1) = "SetChildren";
        uint64_t v98 = 254;
        v99 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attr"
              "ibuteConnectionChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typena"
              "me ChildPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
        char v100 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        int v66 = 1;
      }
      else
      {
        sub_216A8E5E4((uint64_t)&v111, v72 + 2, v87, v72);
        uint64_t v74 = v73;
        for (n = v87; n != v74; sub_216981128((uint64_t)&v88, n))
          n -= 2;
        v87 = v74;
        if (v86 == v74)
        {
          v77 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v77, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v90, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v89);
        }
        else
        {
          v76 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          sub_216A6E944(v76, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v90, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v89, &v86);
        }
        v78 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
        v81 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A6E7C0((uint64_t *)&m, v79, v80);
        v82 = sub_21697F2E0(v81);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v82, &k);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v78, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&k, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v91);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
        sub_21697C414(&k);
        int v66 = 0;
      }
      *(void *)&long long k = &v86;
      sub_216981168((void ***)&k);
      if ((v89 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v89 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v90 + 1);
    sub_21697C414(&v90);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v92);
    sub_21697C414(&v91);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v93 + 1);
    sub_21697C414(&v93);
    if (v66 != 10 && v66) {
      goto LABEL_79;
    }
  }
  if (v101 == v102)
  {
    v84 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v84, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v108);
  }
  else
  {
    v83 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    sub_216A6E944(v83, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v108, &v101);
  }
LABEL_79:
  sub_216981EE8((uint64_t)&j, *((void **)&j + 1));
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v96);
LABEL_80:
  *(void *)&long long k = &v101;
  sub_216981168((void ***)&k);
  sub_216981EE8((uint64_t)&v109, v110[0]);
  *(void *)&long long k = &i;
  sub_216981168((void ***)&k);
  *(void *)&long long k = &v106;
  sub_21697CA24((void ***)&k);
  if (((uint64_t)v108[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v108[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v60;
}

void sub_216A8BE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_21697B754(&a10);
  a23 = (void **)&a28;
  sub_216981168(&a23);
  sub_216981EE8(v31 - 144, *(void **)(v31 - 136));
  a23 = (void **)&a31;
  sub_216981168(&a23);
  a23 = (void **)(v31 - 192);
  sub_21697CA24(&a23);
  uint64_t v33 = *(void *)(v31 - 160);
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::InsertChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, int a4)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  sub_216A8B400(v58);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    uint64_t v53 = (void **)"sdf/childrenUtils.cpp";
    uint64_t v54 = "InsertChild";
    uint64_t v55 = 290;
    uint64_t v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attribut"
          "eConnectionChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::Valu"
          "eType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
    char v57 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v53, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
LABEL_8:
    BOOL v12 = 0;
    goto LABEL_9;
  }
  uint64_t v8 = (uint64_t **)sub_21697F2E0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v8, (uint64_t *)&v53);
  uint64_t v9 = sub_216851B24((uint64_t)&v53);
  uint64_t v10 = sub_216851B24((uint64_t)a1);
  BOOL v11 = v54;
  if (v54 && atomic_fetch_add_explicit((atomic_uint *volatile)v54 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(const char *))(*(void *)v11 + 8))(v11);
  }
  if (v9 != v10)
  {
    uint64_t v53 = (void **)"sdf/childrenUtils.cpp";
    uint64_t v54 = "InsertChild";
    uint64_t v55 = 295;
    uint64_t v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attribut"
          "eConnectionChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::Valu"
          "eType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
    char v57 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v53, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
    goto LABEL_8;
  }
  int v14 = sub_21697F2E0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v47);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v47, &v53);
  uint64_t v15 = v53;
  char v16 = *(void ***)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
  sub_21697C414(&v53);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47 + 1);
  sub_21697C414(&v47);
  if (v15 == v16)
  {
    BOOL v12 = 1;
  }
  else
  {
    sub_216A64E28(a3, &v52);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v52, &v50);
    uint64_t v17 = sub_21697F2E0(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v17, &v53);
    BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
    sub_21697C414(&v53);
    if (HasPrefix)
    {
      uint64_t v53 = (void **)"sdf/childrenUtils.cpp";
      uint64_t v54 = "InsertChild";
      uint64_t v55 = 312;
      uint64_t v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attrib"
            "uteConnectionChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::"
            "ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
      char v57 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v53, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      BOOL v12 = 0;
    }
    else
    {
      uint64_t v19 = sub_2169791E0(a1);
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      uint64_t v20 = sub_216A5B7B0((uint64_t *)(v19 + 112));
      (*(void (**)(void ****__return_ptr))(*(void *)v20 + 136))(&v59);
      if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v59))
      {
        if ((v60 & 4) != 0) {
          uint64_t v21 = (void ***)(*(uint64_t (**)(void ****))(((unint64_t)v60 & 0xFFFFFFFFFFFFFFF8) + 168))(&v59);
        }
        else {
          uint64_t v21 = v59;
        }
      }
      else
      {
        uint64_t v21 = &v53;
      }
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      sub_216980EEC(&v47, *v21, v21[1], v21[1] - *v21);
      char v22 = (void ***)sub_2168EE084((uint64_t)&v59);
      uint64_t v59 = &v53;
      sub_216981168(v22);
      unint64_t v25 = (unint64_t)(v48 - (char *)v47) >> 3;
      if (a4 != -1) {
        LODWORD(v25) = a4;
      }
      uint64_t v26 = (int)v25;
      if ((int)v25 <= (unint64_t)((v48 - (char *)v47) >> 3))
      {
        uint64_t v59 = v47;
        BOOL v60 = (int *)v48;
        while (v59 != (void ***)v60)
        {
          int v28 = (void *)sub_2169813FC((uint64_t *)&v59, v23, v24);
          if (*v28 == v52)
          {
            uint64_t v53 = (void **)"sdf/childrenUtils.cpp";
            uint64_t v54 = "InsertChild";
            uint64_t v55 = 334;
            uint64_t v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "AttributeConnectionChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename C"
                  "hildPolicy::ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
            char v57 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v53, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert duplicate spec %s", Text);
            goto LABEL_32;
          }
          sub_21698147C(&v59);
        }
        uint64_t v29 = sub_21697F2E0(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v29, &v53);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, &v45);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
        sub_21697C414(&v53);
        sub_216A8B400((atomic_uint **)&v44);
        uint64_t v30 = sub_2169791E0(a1);
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        uint64_t v55 = 0;
        uint64_t v31 = sub_216A5B7B0((uint64_t *)(v30 + 112));
        (*(void (**)(void ****__return_ptr))(*(void *)v31 + 136))(&v62);
        if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v62))
        {
          if ((v63 & 4) != 0) {
            unint64_t v32 = (void ***)(*(uint64_t (**)(void ****))((v63 & 0xFFFFFFFFFFFFFFF8) + 168))(&v62);
          }
          else {
            unint64_t v32 = v62;
          }
        }
        else
        {
          unint64_t v32 = &v53;
        }
        uint64_t v59 = 0;
        BOOL v60 = 0;
        uint64_t v61 = 0;
        sub_216980EEC(&v59, *v32, v32[1], v32[1] - *v32);
        uint64_t v34 = (void ***)sub_2168EE084((uint64_t)&v62);
        uint64_t v62 = &v53;
        sub_216981168(v34);
        uint64_t v35 = (int *)v59;
        if (v59 != (void ***)v60)
        {
          while (*(void *)v35 != v52)
          {
            v35 += 2;
            if (v35 == v60)
            {
              uint64_t v35 = v60;
              break;
            }
          }
        }
        BOOL v12 = v35 != v60;
        if (v35 == v60)
        {
          uint64_t v53 = (void **)"sdf/childrenUtils.cpp";
          uint64_t v54 = "InsertChild";
          uint64_t v55 = 352;
          uint64_t v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_At"
                "tributeConnectionChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename Child"
                "Policy::ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
          char v57 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v53, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v53);
          sub_216A6E8C0((uint64_t)&v59, v35);
          if (v59 == (void ***)v60)
          {
            uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
            pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v44);
          }
          else
          {
            v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
            sub_216A6E944(v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v44, (_DWORD **)&v59);
          }
          uint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          uint64_t v39 = sub_21697F2E0(a3);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v39, &v62);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v38, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v62, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
          sub_21697B754(&v62);
          sub_216A6F2DC((uint64_t *)&v47, (int *)&v47[v26], (int *)&v52);
          uint64_t v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          sub_216A6E944(v40, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v58, (_DWORD **)&v47);
          int v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, &v62);
          uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v62);
          if ((IsDormant & 1) == 0)
          {
            unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
            pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (atomic_uint **)&v62);
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v62);
          sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v53);
        }
        uint64_t v53 = (void **)&v59;
        sub_216981168(&v53);
        if ((v44 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
        sub_21697C414(&v45);
      }
      else
      {
        uint64_t v53 = (void **)"sdf/childrenUtils.cpp";
        uint64_t v54 = "InsertChild";
        uint64_t v55 = 326;
        uint64_t v56 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attr"
              "ibuteConnectionChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPoli"
              "cy::ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
        char v57 = 0;
        uint64_t v27 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v53, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert spec %s at an invalid index %d", v27, v26);
LABEL_32:
        BOOL v12 = 0;
      }
      uint64_t v53 = (void **)&v47;
      sub_216981168(&v53);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v51);
    sub_21697C414(&v50);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v52 + 1);
    sub_21697C414(&v52);
  }
LABEL_9:
  if (((uint64_t)v58[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v58[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v12;
}

void sub_216A8C81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, int a17, int a18, int a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  a20 = (void **)(v25 - 112);
  sub_216981168(&a20);
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754(&a12);
  a20 = (void **)&a14;
  sub_216981168(&a20);
  sub_21697B754(&a17);
  sub_21697B754(&a19);
  if ((a25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::RemoveChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _DWORD *a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  sub_216A8B400((atomic_uint **)&v27);
  uint64_t v6 = sub_2169791E0(a1);
  memset(v23, 0, sizeof(v23));
  uint64_t v7 = sub_216A5B7B0((uint64_t *)(v6 + 112));
  (*(void (**)(void ****__return_ptr))(*(void *)v7 + 136))(&v30);
  if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v30))
  {
    if ((v31 & 4) != 0) {
      uint64_t v8 = (void ***)(*(uint64_t (**)(void ****))((v31 & 0xFFFFFFFFFFFFFFF8) + 168))(&v30);
    }
    else {
      uint64_t v8 = v30;
    }
  }
  else
  {
    uint64_t v8 = v23;
  }
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  sub_216980EEC(&v24, *v8, v8[1], v8[1] - *v8);
  sub_2168EE084((uint64_t)&v30);
  uint64_t v30 = v23;
  sub_216981168((void ***)&v30);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v23);
  sub_216981010(&v30, a3);
  sub_21698105C((_DWORD *)&v30 + 1, a3 + 1);
  uint64_t v9 = (int *)v24;
  if ((int *)v24 == v25)
  {
LABEL_9:
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v10 = -v24;
    while (*(void ****)v9 != v30)
    {
      v9 += 2;
      v10 -= 8;
      if (v9 == v25) {
        goto LABEL_9;
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v30, &v28);
    BOOL v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v28);
    sub_216A8E5E4((uint64_t)&v22, (int *)(8 - v10), v25, (int *)-v10);
    int v14 = v13;
    for (long long i = v25; i != v14; sub_216981128((uint64_t)&v26, i))
      i -= 2;
    uint64_t v25 = v14;
    if ((int *)v24 == v14)
    {
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v17, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v27);
    }
    else
    {
      char v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      sub_216A6E944(v16, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v27, (_DWORD **)&v24);
    }
    char v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v18, a2, &v22);
    uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v22);
    if ((IsDormant & 1) == 0)
    {
      unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
      pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v22);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v22);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
    sub_21697C414(&v28);
    uint64_t v11 = 1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
  sub_21697C414(&v30);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v23);
  v23[0] = (void **)&v24;
  sub_216981168(v23);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v11;
}

void sub_216A8CCD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::MoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4, int a5)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  sub_216A8B400(v53);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, a4, &v52);
  uint64_t v10 = sub_21697F2E0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v10, &v49);
  uint64_t v11 = v52;
  BOOL v12 = v49;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v49 + 1);
  sub_21697C414(&v49);
  if (a5 == -2 && v11 == v12) {
    goto LABEL_51;
  }
  uint64_t v13 = sub_2169791E0(a1);
  int v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v14 = sub_216A5B7B0((uint64_t *)(v13 + 112));
  (*(void (**)(char ****__return_ptr))(*(void *)v14 + 136))(&v54);
  if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v54))
  {
    if ((v55 & 4) != 0) {
      uint64_t v15 = (char ***)(*(uint64_t (**)(char ****))((v55 & 0xFFFFFFFFFFFFFFF8) + 168))(&v54);
    }
    else {
      uint64_t v15 = v54;
    }
  }
  else
  {
    uint64_t v15 = &v46;
  }
  uint64_t v49 = 0;
  int v50 = 0;
  uint64_t v51 = 0;
  sub_216980EEC(&v49, *v15, v15[1], v15[1] - *v15);
  sub_2168EE084((uint64_t)&v54);
  uint64_t v54 = &v46;
  sub_216981168((void ***)&v54);
  sub_216A64E28(a3, &v45);
  char v16 = sub_21697F2E0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16, &v46);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, &v44);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_21697C414(&v46);
  if (a5 == -2 && v44 == *(void *)a2)
  {
    if (v49 == (char *)v50)
    {
      uint64_t v17 = (int *)v49;
    }
    else
    {
      uint64_t v17 = (int *)v49;
      while (*(void *)v17 != v45)
      {
        v17 += 2;
        if (v17 == v50)
        {
          uint64_t v17 = v50;
          break;
        }
      }
    }
    unint64_t v18 = (unint64_t)((char *)v17 - v49) >> 3;
  }
  else if (((char *)v50 - v49) >> 3 >= (unint64_t)a5)
  {
    LODWORD(v18) = a5;
  }
  else
  {
    LODWORD(v18) = ((char *)v50 - v49) >> 3;
  }
  sub_216A8B400((atomic_uint **)&v43);
  uint64_t v19 = sub_2169791E0(a1);
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v20 = sub_216A5B7B0((uint64_t *)(v19 + 112));
  (*(void (**)(char *****__return_ptr))(*(void *)v20 + 136))(&v57);
  if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v57))
  {
    if ((v58 & 4) != 0) {
      uint64_t v21 = (char ****)(*(uint64_t (**)(char *****))((v58 & 0xFFFFFFFFFFFFFFF8) + 168))(&v57);
    }
    else {
      uint64_t v21 = v57;
    }
  }
  else
  {
    uint64_t v21 = &v54;
  }
  int v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  sub_216980EEC(&v46, *v21, v21[1], v21[1] - *v21);
  char v22 = (void ***)sub_2168EE084((uint64_t)&v57);
  char v57 = &v54;
  sub_216981168(v22);
  uint64_t v23 = (int *)v46;
  if (v46 != (char **)v47)
  {
    while (*(void *)v23 != v45)
    {
      v23 += 2;
      if (v23 == v47)
      {
        uint64_t v23 = v47;
        break;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v54);
  if (v44 == *(void *)a2)
  {
    uint64_t v24 = (char *)v23 - (char *)v46;
    if (v45 == *(void *)a4
      && (v18 == ((unint64_t)v24 >> 3)
       || ((unint64_t)v24 >> 3) + 1 == v18))
    {
      goto LABEL_48;
    }
    BOOL v26 = (int)v18 > v24 >> 3;
    unint64_t v27 = (int *)v49;
    if (v49 != (char *)v50)
    {
      while (*(void *)v27 != v45)
      {
        v27 += 2;
        if (v27 == v50)
        {
          unint64_t v27 = v50;
          break;
        }
      }
    }
    sub_216A8E5E4((uint64_t)&v57, v27 + 2, v50, v27);
    int v29 = v28;
    LODWORD(v18) = v18 - v26;
    for (long long i = v50; i != v29; sub_216981128((uint64_t)&v51, i))
      i -= 2;
    int v50 = v29;
  }
  else
  {
    sub_216A8E5E4((uint64_t)&v57, v23 + 2, v47, v23);
    uint64_t v32 = v31;
    for (long long j = v47; j != v32; sub_216981128((uint64_t)&v48, j))
      j -= 2;
    uint64_t v47 = v32;
    if (v46 == (char **)v32)
    {
      uint64_t v35 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v35, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v44, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v43);
      v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v44, &v57);
      uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v57);
      if ((IsDormant & 1) == 0)
      {
        unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
        pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (atomic_uint **)&v57);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v57);
    }
    else
    {
      uint64_t v34 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      sub_216A6E944(v34, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v44, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v43, (_DWORD **)&v46);
    }
  }
  uint64_t v39 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  uint64_t v40 = sub_21697F2E0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v40, &v57);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v39, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v57, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v52);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v57 + 1);
  sub_21697C414(&v57);
  sub_216A6F2DC((uint64_t *)&v49, (int *)&v49[8 * (int)v18], (int *)a4);
  int v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  sub_216A6E944(v41, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v53, (_DWORD **)&v49);
LABEL_48:
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v54);
  uint64_t v54 = &v46;
  sub_216981168((void ***)&v54);
  if ((v43 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
  sub_21697C414(&v44);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
  sub_21697C414(&v45);
  int v46 = &v49;
  sub_216981168((void ***)&v46);
LABEL_51:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v52 + 1);
  sub_21697C414(&v52);
  if (((uint64_t)v53[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v53[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return 1;
}

void sub_216A8D314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, int a12, void **a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,void ***a22)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v22 - 88));
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a22);
  a22 = &a13;
  sub_216981168((void ***)&a22);
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754(&a10);
  sub_21697B754(&a12);
  a13 = (void **)&a16;
  sub_216981168(&a13);
  sub_21697B754(&a19);
  if ((a20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::CanMoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4, int a5, uint64_t a6)
{
  sub_216A8B400((atomic_uint **)&v42);
  BOOL v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v12) & 1) == 0)
  {
    if (a6)
    {
      uint64_t v13 = "Layer is not editable";
      goto LABEL_13;
    }
LABEL_14:
    BOOL v18 = 0;
    goto LABEL_15;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    if (a6)
    {
      uint64_t v13 = "Object does not exist";
LABEL_13:
      MEMORY[0x21D4477E0](a6, v13);
      goto LABEL_14;
    }
    goto LABEL_14;
  }
  uint64_t v14 = (uint64_t **)sub_21697F2E0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v14, &v38);
  uint64_t v15 = sub_216851B24((uint64_t)&v38);
  uint64_t v16 = sub_216851B24((uint64_t)a1);
  uint64_t v17 = v39;
  if (v39 && atomic_fetch_add_explicit((atomic_uint *volatile)(v39 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  if (v15 != v16)
  {
    if (a6)
    {
      uint64_t v13 = "Cannot reparent to another layer";
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, a4, &v40);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v40))
  {
    if (!a6)
    {
LABEL_24:
      BOOL v18 = 0;
      goto LABEL_25;
    }
    uint64_t v23 = "Invalid name";
LABEL_23:
    MEMORY[0x21D4477E0](a6, v23);
    goto LABEL_24;
  }
  uint64_t v20 = sub_21697F2E0(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v20, &v35);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, &v38);
  uint64_t v21 = v38;
  uint64_t v22 = *(void *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v38 + 1);
  sub_21697C414(&v38);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
  sub_21697C414(&v35);
  if (v21 != v22)
  {
    uint64_t v24 = sub_21697F2E0(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v24, &v38);
    BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v38 + 1);
    sub_21697C414(&v38);
    if (!HasPrefix)
    {
      uint64_t v26 = sub_2169791E0(a1);
      uint64_t v35 = 0;
      v36 = 0;
      uint64_t v37 = 0;
      sub_216A6E61C(v26, (_DWORD **)&v35, &v38);
      v31[0] = (void **)&v35;
      sub_216981168(v31);
      unint64_t v27 = (unint64_t)(v39 - v38) >> 3;
      if (a5 != -1) {
        LODWORD(v27) = a5;
      }
      if (v27 == -2 || (int)v27 <= (unint64_t)((v39 - v38) >> 3))
      {
        sub_216A64E28(a3, &v34);
        int v28 = sub_21697F2E0(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, &v35);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, &v33);
        sub_21697B754(&v35);
        sub_216A8B400((atomic_uint **)&v32);
        uint64_t v29 = sub_2169791E0(a1);
        memset(v31, 0, sizeof(v31));
        sub_216A6E61C(v29, (_DWORD **)v31, &v35);
        unint64_t v43 = v31;
        sub_216981168((void ***)&v43);
        uint64_t v30 = v35;
        if (v35 != v36)
        {
          while (*v30 != v34)
          {
            if (++v30 == v36)
            {
              uint64_t v30 = v36;
              break;
            }
          }
        }
        BOOL v18 = v30 != v36;
        if (a6 && v30 == v36) {
          MEMORY[0x21D4477E0](a6, "Coding error: Object is not in its parent's children");
        }
        v31[0] = (void **)&v35;
        sub_216981168(v31);
        if ((v32 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        sub_21697B754(&v33);
        sub_21697B754(&v34);
      }
      else
      {
        if (a6) {
          MEMORY[0x21D4477E0](a6, "Invalid index");
        }
        BOOL v18 = 0;
      }
      uint64_t v35 = &v38;
      sub_216981168((void ***)&v35);
      goto LABEL_25;
    }
    if (!a6) {
      goto LABEL_24;
    }
    uint64_t v23 = "Cannot reparent object under itself";
    goto LABEL_23;
  }
  BOOL v18 = 1;
LABEL_25:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
  sub_21697C414(&v40);
LABEL_15:
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v18;
}

void sub_216A8D830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, char a19)
{
  a16 = (void **)&a19;
  sub_216981168(&a16);
  sub_21697B754((_DWORD *)(v19 - 88));
  uint64_t v21 = *(void *)(v19 - 80);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::CanRemoveChildForBatchNamespaceEdit(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  sub_216A8B400((atomic_uint **)&v19);
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v7))
  {
    uint64_t v8 = sub_2169791E0(a1);
    memset(v15, 0, sizeof(v15));
    uint64_t v9 = sub_216A5B7B0((uint64_t *)(v8 + 112));
    (*(void (**)(void ****__return_ptr))(*(void *)v9 + 136))(&v20);
    if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
    {
      if ((v21 & 4) != 0) {
        uint64_t v10 = (void ***)(*(uint64_t (**)(void ****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
      }
      else {
        uint64_t v10 = v20;
      }
    }
    else
    {
      uint64_t v10 = v15;
    }
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    sub_216980EEC(&v16, *v10, v10[1], v10[1] - *v10);
    BOOL v12 = (void ***)sub_2168EE084((uint64_t)&v20);
    uint64_t v20 = v15;
    sub_216981168(v12);
    uint64_t v13 = v16;
    if (v16 != v17)
    {
      while (*v13 != *a3)
      {
        if (++v13 == v17)
        {
          uint64_t v13 = v17;
          break;
        }
      }
    }
    BOOL v11 = v13 != v17;
    if (a4 && v13 == v17) {
      MEMORY[0x21D4477E0](a4, "Object does not exist");
    }
    v15[0] = (void **)&v16;
    sub_216981168(v15);
  }
  else
  {
    if (a4) {
      MEMORY[0x21D4477E0](a4, "Layer is not editable");
    }
    BOOL v11 = 0;
  }
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v11;
}

void sub_216A8DB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  a10 = (void **)&a13;
  sub_216981168(&a10);
  if ((a16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::CanRename@<D0>(uint64_t a1@<X8>)
{
  *(void *)&long long v3 = "sdf/childrenUtils.cpp";
  *((void *)&v3 + 1) = "CanRename";
  uint64_t v4 = 762;
  uint64_t v5 = "static SdfAllowed pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Mappe"
       "rChildPolicy>::CanRename(const SdfSpec &, const SdfPath &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_M"
       "apperChildPolicy]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename mappers");
  sub_216779094(&v3, "Cannot rename mappers");
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::Rename()
{
  v1[0] = "sdf/childrenUtils.cpp";
  v1[1] = "Rename";
  v1[2] = 771;
  v1[3] = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperCh"
          "ildPolicy>::Rename(const SdfSpec &, const SdfPath &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy]";
  char v2 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v1, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename mappers");
  return 0;
}

double pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::CanRename@<D0>(uint64_t a1@<X8>)
{
  *(void *)&long long v3 = "sdf/childrenUtils.cpp";
  *((void *)&v3 + 1) = "CanRename";
  uint64_t v4 = 780;
  uint64_t v5 = "static SdfAllowed pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attri"
       "buteConnectionChildPolicy>::CanRename(const SdfSpec &, const SdfPath &) [ChildPolicy = pxrInternal__aapl__pxrRese"
       "rved__::Sdf_AttributeConnectionChildPolicy]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename attribute connections");
  sub_216779094(&v3, "Cannot rename attribute connections");
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::Rename()
{
  v1[0] = "sdf/childrenUtils.cpp";
  v1[1] = "Rename";
  v1[2] = 789;
  v1[3] = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attribut"
          "eConnectionChildPolicy>::Rename(const SdfSpec &, const SdfPath &) [ChildPolicy = pxrInternal__aapl__pxrReserve"
          "d__::Sdf_AttributeConnectionChildPolicy]";
  char v2 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v1, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename attribute connections");
  return 0;
}

double pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::CanRename@<D0>(uint64_t a1@<X8>)
{
  *(void *)&long long v3 = "sdf/childrenUtils.cpp";
  *((void *)&v3 + 1) = "CanRename";
  uint64_t v4 = 798;
  uint64_t v5 = "static SdfAllowed pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relat"
       "ionshipTargetChildPolicy>::CanRename(const SdfSpec &, const SdfPath &) [ChildPolicy = pxrInternal__aapl__pxrReser"
       "ved__::Sdf_RelationshipTargetChildPolicy]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename relationship targets");
  sub_216779094(&v3, "Cannot rename relationship targets");
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::Rename()
{
  v1[0] = "sdf/childrenUtils.cpp";
  v1[1] = "Rename";
  v1[2] = 807;
  v1[3] = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relation"
          "shipTargetChildPolicy>::Rename(const SdfSpec &, const SdfPath &) [ChildPolicy = pxrInternal__aapl__pxrReserved"
          "__::Sdf_RelationshipTargetChildPolicy]";
  char v2 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v1, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename relationship targets");
  return 0;
}

void *sub_216A8DE90(void *a1, uint64_t a2)
{
  sub_216779180(a1, (uint64_t)"[ ", 2);
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  if (*(void **)a2 != v5)
  {
    do
    {
      char v6 = pxrInternal__aapl__pxrReserved__::operator<<(a1, v4);
      sub_216779180(v6, (uint64_t)" ", 1);
      ++v4;
    }
    while (v4 != v5);
  }
  sub_216779180(a1, (uint64_t)"]", 1);
  return a1;
}

uint64_t sub_216A8DF1C(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfHandle<pxrInternal__aapl__pxrReserved__::SdfAttributeSpec>>>::operator*() [T = const std::vector<pxrIntern"
            "al__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfAttributeSpec>>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216A8DF94()
{
}

void *sub_216A8DF9C(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfAttributeSpec>>>::operator++() [T = const std::v"
            "ector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfAttributeSpec>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

char *sub_216A8E01C(atomic_uint ***a1, atomic_uint **a2)
{
  long long v3 = *a1;
  uint64_t v4 = a1[1] - *a1;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = (char *)a1[2] - (char *)v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v25 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_21677CB28(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  BOOL v11 = (atomic_uint **)&v10[8 * v4];
  uint64_t v22 = v10;
  v23.i64[0] = (uint64_t)v11;
  v23.i64[1] = (uint64_t)v11;
  uint64_t v24 = &v10[8 * v9];
  BOOL v12 = *a2;
  *BOOL v11 = *a2;
  if (v12)
  {
    atomic_fetch_add(v12, 1u);
    uint64_t v13 = (char *)v23.i64[1];
    BOOL v11 = (atomic_uint **)v23.i64[0];
  }
  else
  {
    uint64_t v13 = &v10[8 * v4];
  }
  uint64_t v14 = v13 + 8;
  v23.i64[1] = (uint64_t)(v13 + 8);
  uint64_t v16 = *a1;
  unint64_t v15 = (unint64_t)a1[1];
  if ((atomic_uint **)v15 == *a1)
  {
    int64x2_t v19 = vdupq_n_s64(v15);
  }
  else
  {
    do
    {
      uint64_t v18 = *(atomic_uint **)(v15 - 8);
      v15 -= 8;
      uint64_t v17 = v18;
      *--BOOL v11 = v18;
      if (v18) {
        atomic_fetch_add(v17, 1u);
      }
    }
    while ((atomic_uint **)v15 != v16);
    int64x2_t v19 = *(int64x2_t *)a1;
    uint64_t v14 = (char *)v23.i64[1];
  }
  *a1 = v11;
  a1[1] = (atomic_uint **)v14;
  int64x2_t v23 = v19;
  uint64_t v20 = (char *)a1[2];
  a1[2] = (atomic_uint **)v24;
  uint64_t v24 = v20;
  uint64_t v22 = (char *)v19.i64[0];
  sub_216990084((uint64_t)&v22);
  return v14;
}

uint64_t *sub_216A8E144(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v5 = (uint64_t **)sub_2168BE158((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    sub_21697C3A4((uint64_t)a1, a3, (uint64_t)&v7);
    sub_21677B358(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void *sub_216A8E1C4(uint64_t a1, uint64_t *a2)
{
  char v2 = (void *)(a1 + 8);
  long long v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  char v6 = (void *)(a1 + 8);
  do
  {
    int v7 = sub_2168BE1F8(v5, v3 + 4, a2);
    uint64_t v8 = v3 + 1;
    if (!v7)
    {
      uint64_t v8 = v3;
      char v6 = v3;
    }
    long long v3 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v2 || sub_2168BE1F8(v5, a2, v6 + 4)) {
    return v2;
  }
  return v6;
}

uint64_t sub_216A8E254(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    char v6 = a2;
    do
    {
      sub_216A5D070((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_216A8E2C0(_Unwind_Exception *a1)
{
  sub_2168CB05C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *sub_216A8E2D8(void *result, void *a2, void *a3)
{
  if (result != a2)
  {
    do
    {
      if (result != a3)
      {
        if ((*a3 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *a3 = *result;
        uint64_t *result = 0;
      }
      ++result;
      ++a3;
    }
    while (result != a2);
    return a2;
  }
  return result;
}

uint64_t sub_216A8E328(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = (void *)v6;
  if (v7 < a3)
  {
    unint64_t v9 = (void *)v7;
    uint64_t v8 = *(void **)(a1 + 8);
    do
    {
      *v8++ = *v9;
      *v9++ = 0;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_216A8E40C(a2, v7, v6);
}

uint64_t sub_216A8E370(void *a1, void *a2, void *a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = (void *)*a1;
  uint64_t v6 = result;
  if ((void *)*a1 != a3)
  {
    unint64_t v7 = a3;
    uint64_t v6 = a2[1];
    do
    {
      uint64_t v8 = *--v7;
      *(void *)(v6 - 8) = v8;
      v6 -= 8;
      void *v7 = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  unint64_t v9 = (void *)a1[1];
  uint64_t v10 = (void *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *v10++ = *a3;
      *a3++ = 0;
    }
    while (a3 != v9);
    uint64_t v6 = a2[1];
  }
  a2[2] = v10;
  BOOL v11 = (void *)*a1;
  *a1 = v6;
  a2[1] = v11;
  uint64_t v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216A8E40C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v3 = a2;
    do
    {
      if (v3 != a3)
      {
        uint64_t v4 = *(void *)(a3 - 8);
        if ((v4 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *(void *)(a3 - 8) = *(void *)(v3 - 8);
        *(void *)(v3 - 8) = 0;
      }
      v3 -= 8;
      a3 -= 8;
    }
    while (v3 != a1);
  }
  return a2;
}

uint64_t sub_216A8E460(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfHandle<pxrInternal__aapl__pxrReserved__::SdfSpec>>>::operator*() [T = const std::vector<pxrInternal__aapl_"
            "_pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfSpec>>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216A8E4D8()
{
}

void *sub_216A8E4E0(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfSpec>>>::operator++() [T = const std::vector<pxr"
            "Internal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfSpec>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t sub_216A8E560(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  *(void *)(a1 + 8) = 0;
  char v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    char v6 = a2;
    do
    {
      sub_2169814FC((uint64_t **)a1, v4, v6, v6);
      char v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8);
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_216A8E5CC(_Unwind_Exception *a1)
{
  sub_216981EE8(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

int *sub_216A8E5E4(uint64_t a1, int *a2, int *a3, int *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  char v6 = a3;
  do
  {
    sub_21697DE94(a4, v5);
    sub_21697DEEC(a4 + 1, v5 + 1);
    a4 += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

void *sub_216A8E654(void *a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  sub_216779180(a1, (uint64_t)"[ ", 2);
  char v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      char v6 = pxrInternal__aapl__pxrReserved__::operator<<(a1, v4);
      sub_216779180(v6, (uint64_t)" ", 1);
      char v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 8);
    }
    while (v4 != v5);
  }
  sub_216779180(a1, (uint64_t)"]", 1);
  return a1;
}

_DWORD *sub_216A8E6E0(void *a1, _DWORD *a2)
{
  char v4 = (int *)a1[2];
  if (v4 == (int *)a1[3])
  {
    uint64_t v5 = (int *)a1[1];
    uint64_t v6 = (uint64_t)v5 - *a1;
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (int *)*a1) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = ((uint64_t)v4 - *a1) >> 2;
      }
      uint64_t v14 = a1[4];
      uint64_t v22 = a1[4];
      *(void *)&long long v20 = sub_21677CB28(v14, v13);
      *((void *)&v20 + 1) = v20 + 8 * (v13 >> 2);
      *(void *)&long long v21 = *((void *)&v20 + 1);
      *((void *)&v21 + 1) = v20 + 8 * v15;
      sub_216A8E7FC(&v20, (_DWORD *)a1[1], (uint64_t)(a1[2] - a1[1]) >> 3);
      long long v16 = v21;
      long long v17 = *(_OWORD *)a1;
      long long v18 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v20;
      *((_OWORD *)a1 + 1) = v16;
      long long v20 = v17;
      long long v21 = v18;
      sub_216981DDC((void **)&v20);
      char v4 = (int *)a1[2];
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v7 + 1;
      }
      unint64_t v11 = v10 >> 1;
      sub_216A8E5E4((uint64_t)&v20, v5, v4, &v5[-2 * (v10 >> 1)]);
      char v4 = v12;
      a1[1] -= 8 * v11;
      a1[2] = v12;
    }
  }
  sub_216981010(v4, a2);
  uint64_t result = sub_21698105C(v4 + 1, a2 + 1);
  a1[2] += 8;
  return result;
}

void sub_216A8E7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

_DWORD *sub_216A8E7FC(_DWORD *result, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = result;
  char v4 = (_DWORD *)*((void *)result + 2);
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    uint64_t v7 = &v4[2 * a3];
    do
    {
      sub_21697D878(v4, a2);
      uint64_t result = sub_21697D8B4(v4 + 1, a2 + 1);
      v4 += 2;
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
    char v4 = v7;
  }
  *((void *)v3 + 2) = v4;
  return result;
}

uint64_t sub_216A8E870(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>>::operator*() [T = const std::vector<pxrInternal__a"
            "apl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216A8E8E8()
{
}

void *sub_216A8E8F0(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>>::operator++() [T = const std::vector"
            "<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t sub_216A8E970(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>>>::operator*() [T = const std::vector<pxrInterna"
            "l__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216A8E9E8()
{
}

void *sub_216A8E9F0(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>>>::operator++() [T = const std::ve"
            "ctor<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t sub_216A8EA70(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfHandle<pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec>>>::operator*() [T = const std::vector<pxrInt"
            "ernal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec>>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216A8EAE8()
{
}

void *sub_216A8EAF0(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec>>>::operator++() [T = const std"
            "::vector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec>>"
            ", Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t sub_216A8EB70(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSpec>>>::operator*() [T = const std::vector<pxrInternal"
            "__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSpec>>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216A8EBE8()
{
}

void *sub_216A8EBF0(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSpec>>>::operator++() [T = const std::vec"
            "tor<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSpec>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t sub_216A8EC70(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec>>>::operator*() [T = const std::vector<pxrInter"
            "nal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec>>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216A8ECE8()
{
}

void *sub_216A8ECF0(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec>>>::operator++() [T = const std::"
            "vector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler *pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler::SdfCleanupEnabler(pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler *this)
{
  return this;
}

{
  sub_216A8EE38((uint64_t)this);
  return this;
}

void pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler::~SdfCleanupEnabler(pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler *this)
{
  char v2 = (pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)sub_216A8EF14();
  if (*((void *)v2 + 1) - *(void *)v2 == 8)
  {
    unint64_t Instance = (pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance(v2);
    pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::CleanupSpecs(Instance);
  }
  sub_216A8EF9C((uint64_t)this);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler::IsCleanupEnabled(pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler *this)
{
  uint64_t v1 = (void *)sub_216A8EF14();
  return *v1 != v1[1];
}

void sub_216A8EE38(uint64_t a1)
{
  char v2 = (void **)sub_216A8EF14();
  uint64_t v3 = v2[1];
  unint64_t v4 = (unint64_t)v2[2];
  if ((unint64_t)v3 >= v4)
  {
    uint64_t v6 = ((char *)v3 - (unsigned char *)*v2) >> 3;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v7 = v4 - (void)*v2;
    uint64_t v8 = v7 >> 2;
    if (v7 >> 2 <= (unint64_t)(v6 + 1)) {
      uint64_t v8 = v6 + 1;
    }
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    if (v9) {
      unint64_t v10 = (char *)sub_21677CB28((uint64_t)(v2 + 2), v9);
    }
    else {
      unint64_t v10 = 0;
    }
    unint64_t v11 = &v10[8 * v6];
    uint64_t v12 = &v10[8 * v9];
    *(void *)unint64_t v11 = a1;
    uint64_t v5 = v11 + 8;
    uint64_t v14 = (char *)*v2;
    unint64_t v13 = (char *)v2[1];
    if (v13 != *v2)
    {
      do
      {
        uint64_t v15 = *((void *)v13 - 1);
        v13 -= 8;
        *((void *)v11 - 1) = v15;
        v11 -= 8;
      }
      while (v13 != v14);
      unint64_t v13 = (char *)*v2;
    }
    *char v2 = v11;
    v2[1] = v5;
    v2[2] = v12;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    void *v3 = a1;
    uint64_t v5 = v3 + 1;
  }
  v2[1] = v5;
}

uint64_t sub_216A8EF14()
{
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::Tf_ExportedStackedStorage<pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler,false>::value))
  {
    char v2 = operator new(0x20uLL);
    uint64_t v3 = 0;
    v2[1] = 0;
    v2[2] = 0;
    *char v2 = 0;
    *((unsigned char *)v2 + 24) = 0;
    atomic_compare_exchange_strong(&pxrInternal__aapl__pxrReserved__::Tf_ExportedStackedStorage<pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler,false>::value, (unint64_t *)&v3, (unint64_t)v2);
    if (v3)
    {
      unint64_t v4 = v2;
      uint64_t v5 = (void *)*v2;
      if (v5)
      {
        v4[1] = v5;
        operator delete(v5);
      }
      operator delete(v4);
    }
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_ExportedStackedStorage<pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler,false>::value;
  if (!*(unsigned char *)(pxrInternal__aapl__pxrReserved__::Tf_ExportedStackedStorage<pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler,false>::value
                 + 24))
    *(unsigned char *)(pxrInternal__aapl__pxrReserved__::Tf_ExportedStackedStorage<pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler,false>::value
             + 24) = 1;
  return result;
}

uint64_t sub_216A8EF9C(uint64_t a1)
{
  char v2 = (void *)sub_216A8EF14();
  uint64_t v3 = v2[1];
  if (*v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(v3 - 8);
  }
  if (v4 != a1)
  {
    v10[0] = "tf/stacked.h";
    v10[1] = "_Pop";
    v10[2] = 206;
    v10[3] = "static void pxrInternal__aapl__pxrReserved__::TfStacked<pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler"
             ", false, pxrInternal__aapl__pxrReserved__::Tf_ExportedStackedStorage<SdfCleanupEnabler, false>>::_Pop(const"
             " Derived *) [Derived = pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler, PerThread = false, Holder = pxr"
             "Internal__aapl__pxrReserved__::Tf_ExportedStackedStorage<SdfCleanupEnabler, false>]";
    char v11 = 0;
    int v12 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000021746C109 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v8);
    if (v9 >= 0) {
      uint64_t v7 = v8;
    }
    else {
      uint64_t v7 = (void *)v8[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v10, (pxrInternal__aapl__pxrReserved__ *)"Destroyed %s out of stack order.", v6, v7);
  }
  uint64_t result = sub_216A8EF14();
  *(void *)(result + 8) -= 8;
  return result;
}

void sub_216A8F06C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x216A8EFE8);
}

void sub_216A8F080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfCopySpec(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, int *a5, const char *a6)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  int v12 = sub_21697CF14(a1);
  if (!(v13 & 1 | (unint64_t)v12) || (uint64_t v14 = sub_21697CF14(a3), !(v15 & 1 | (unint64_t)v14)))
  {
    unint64_t v69 = (unint64_t)"sdf/copyUtils.cpp";
    unint64_t v70 = (unint64_t)"SdfCopySpec";
    uint64_t v71 = 629;
    v72 = "BOOL pxrInternal__aapl__pxrReserved__::SdfCopySpec(const SdfLayerHandle &, const SdfPath &, const SdfLayerHand"
          "le &, const SdfPath &, const SdfShouldCopyValueFn &, const SdfShouldCopyChildrenFn &)";
    LOBYTE(v73) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v69, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid layer handle");
    return 0;
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2)
    || !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4))
  {
    unint64_t v69 = (unint64_t)"sdf/copyUtils.cpp";
    unint64_t v70 = (unint64_t)"SdfCopySpec";
    uint64_t v71 = 634;
    v72 = "BOOL pxrInternal__aapl__pxrReserved__::SdfCopySpec(const SdfLayerHandle &, const SdfPath &, const SdfLayerHand"
          "le &, const SdfPath &, const SdfShouldCopyValueFn &, const SdfShouldCopyChildrenFn &)";
    LOBYTE(v73) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v69, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid empty path");
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a2))
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a4)
      && (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(a4) & 1) == 0)
    {
      goto LABEL_20;
    }
    goto LABEL_15;
  }
  int IsPrimVariantSelectionPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(a2);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a4))
  {
    if ((IsPrimVariantSelectionPath & 1) == 0) {
      goto LABEL_20;
    }
  }
  else if (IsPrimVariantSelectionPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(a4))
  {
LABEL_20:
    unint64_t v69 = (unint64_t)"sdf/copyUtils.cpp";
    unint64_t v70 = (unint64_t)"SdfCopySpec";
    uint64_t v71 = 648;
    v72 = "BOOL pxrInternal__aapl__pxrReserved__::SdfCopySpec(const SdfLayerHandle &, const SdfPath &, const SdfLayerHand"
          "le &, const SdfPath &, const SdfShouldCopyValueFn &, const SdfShouldCopyChildrenFn &)";
    LOBYTE(v73) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v69, 1, (pxrInternal__aapl__pxrReserved__ *)"Incompatible source and destination paths");
    return 0;
  }
LABEL_15:
  int IsPropertyPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a2);
  if (IsPropertyPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a4)) {
    goto LABEL_20;
  }
  int IsTargetPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a2);
  if (IsTargetPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a4)) {
    goto LABEL_20;
  }
  int IsMapperPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(a2);
  if (IsMapperPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(a4)) {
    goto LABEL_20;
  }
  int IsMapperArgPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperArgPath(a2);
  if (IsMapperArgPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperArgPath(a4)) {
    goto LABEL_20;
  }
  int IsExpressionPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsExpressionPath(a2);
  if (IsExpressionPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsExpressionPath(a4)) {
    goto LABEL_20;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a4))
  {
    uint64_t v24 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a3);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v24, a4) & 1) == 0)
    {
      unint64_t v69 = (unint64_t)"sdf/copyUtils.cpp";
      unint64_t v70 = (unint64_t)"SdfCopySpec";
      uint64_t v71 = 655;
      v72 = "BOOL pxrInternal__aapl__pxrReserved__::SdfCopySpec(const SdfLayerHandle &, const SdfPath &, const SdfLayerHa"
            "ndle &, const SdfPath &, const SdfShouldCopyValueFn &, const SdfShouldCopyChildrenFn &)";
      LOBYTE(v73) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v69, 1, (pxrInternal__aapl__pxrReserved__ *)"Spec does not exist at destination target path");
      return 0;
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v68);
  sub_2169D36F0(&v69, a2, a4);
  sub_216A8FAA8((uint64_t)v65, &v69);
  sub_216A8FCE4(&v69);
  uint64_t v22 = 1;
  if (!v67) {
    goto LABEL_83;
  }
  while (1)
  {
    sub_216A8FD38(&v63, (_DWORD *)(*(void *)(v65[1] + ((v66 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v66));
    sub_216A8FD88((uint64_t)v65);
    if (!sub_216A8FA88(&v63)) {
      break;
    }
    sub_216A8FE08(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
LABEL_76:
    sub_216A8FCE4(&v63);
    if (!v67)
    {
      uint64_t v22 = 1;
      goto LABEL_83;
    }
  }
  int v62 = 0;
  uint64_t v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  int SpecType = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v25, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v63);
  int v62 = SpecType;
  if (SpecType)
  {
    sub_216A90384((uint64_t)v58, &v64, SpecType);
    memset(v57, 0, sizeof(v57));
    memset(v56, 0, sizeof(v56));
    sub_216A903D4(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v64, (uint64_t)v57, (uint64_t)v56);
    memset(v55, 0, sizeof(v55));
    memset(v54, 0, sizeof(v54));
    sub_216A903D4(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v63, (uint64_t)v55, (uint64_t)v54);
    unint64_t v69 = (unint64_t)&v62;
    unint64_t v70 = (unint64_t)a1;
    uint64_t v71 = (uint64_t)&v63;
    v72 = (const char *)a3;
    v73 = a5;
    uint64_t v74 = v58;
    sub_216A90588((uint64_t)v55, v57, (uint64_t)&v69);
    int v27 = v62;
    if (v62 == 6)
    {
      int v28 = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
      int v27 = v62;
    }
    else
    {
      int v28 = 0;
    }
    BOOL v29 = v27 == 10
       && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
    if ((v28 | v29) == 1)
    {
      uint64_t v30 = sub_216A90798(v60, v61);
      sub_216A9074C((uint64_t)&v60, v30, v61);
      if (v28)
      {
        uint64_t v31 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v31) {
          uint64_t v31 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        v77 = (char *)&off_26C758118 + 3;
        LODWORD(v76) = 1;
        sub_216A94360((uint64_t *)&v69, (uint64_t *)v31 + 39, &v76);
        sub_216A908C8((uint64_t *)&v60, &v69);
        sub_2168EE084((uint64_t)&v70);
        if ((v69 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        sub_2168EE084((uint64_t)&v76);
        int v59 = 10;
      }
      else if (v29)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v63, &v53);
        uint64_t v76 = 0;
        v77 = 0;
        uint64_t v78 = 0;
        memset(v52, 0, sizeof(v52));
        unint64_t v32 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v32) {
          unint64_t v32 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        unint64_t v33 = *((void *)v32 + 39);
        unint64_t v69 = v33;
        if ((v33 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v69 &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v34 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v34) {
          uint64_t v34 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        unint64_t v35 = *((void *)v34 + 56);
        unint64_t v70 = v35;
        if ((v35 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v70 &= 0xFFFFFFFFFFFFFFF8;
        }
        for (uint64_t i = 0; i != 16; i += 8)
        {
          uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)&v69 + i), 0))sub_216A90920((uint64_t)&v76, (uint64_t *)((char *)&v69 + i)); {
          uint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a3);
          }
          if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v38, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v64, (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)&v69 + i), 0))sub_216A90920((uint64_t)v52, (uint64_t *)((char *)&v69 + i)); {
        }
          }
        for (uint64_t j = 8; j != -8; j -= 8)
        {
          unint64_t v40 = *(unint64_t *)((char *)&v69 + j);
          if ((v40 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        unint64_t v69 = (unint64_t)&v62;
        unint64_t v70 = (unint64_t)a1;
        uint64_t v71 = (uint64_t)&v53;
        v72 = (const char *)a3;
        v73 = &v63;
        uint64_t v74 = (char *)a5;
        uint64_t v75 = v58;
        sub_216A9098C((uint64_t)&v76, v52, (uint64_t)&v69);
        int v59 = 6;
        unint64_t v69 = (unint64_t)v52;
        sub_216889A04((void ***)&v69);
        unint64_t v69 = (unint64_t)&v76;
        sub_216889A04((void ***)&v69);
        sub_21697B754(&v53);
      }
    }
    sub_216A90B60(a3, (uint64_t)v58);
    int v41 = v61;
    if (v60 != v61)
    {
      unint64_t v42 = v60 + 1;
      do
      {
        if (sub_216A9101C((pxrInternal__aapl__pxrReserved__::VtValue *)v42))
        {
          uint64_t v43 = v42[1];
          if ((v43 & 4) != 0) {
            uint64_t v44 = (*(uint64_t (**)(uint64_t *))((v43 & 0xFFFFFFFFFFFFFFF8) + 168))(v42);
          }
          else {
            uint64_t v44 = *v42;
          }
          uint64_t v45 = *(void *)(v44 + 24);
          if (!v45) {
            sub_21683A7CC();
          }
          (*(void (**)(uint64_t, uint64_t *, char *))(*(void *)v45 + 48))(v45, a3, v58);
        }
        else
        {
          int v46 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a3);
          pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v46, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v58, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v42 - 1), (const pxrInternal__aapl__pxrReserved__::VtValue *)v42);
        }
        uint64_t v47 = v42 + 2;
        v42 += 3;
      }
      while (v47 != v41);
    }
    unint64_t v69 = (unint64_t)a1;
    unint64_t v70 = (unint64_t)&v63;
    uint64_t v71 = (uint64_t)a3;
    v72 = a6;
    v73 = (int *)v65;
    sub_216A910A8(v54, v56, (uint64_t)&v69);
    unint64_t v69 = (unint64_t)v54;
    sub_216889A04((void ***)&v69);
    unint64_t v69 = (unint64_t)v55;
    sub_216889A04((void ***)&v69);
    unint64_t v69 = (unint64_t)v56;
    sub_216889A04((void ***)&v69);
    unint64_t v69 = (unint64_t)v57;
    sub_216889A04((void ***)&v69);
    sub_216A91204((uint64_t)v58);
    goto LABEL_76;
  }
  unint64_t v69 = (unint64_t)"sdf/copyUtils.cpp";
  unint64_t v70 = (unint64_t)"SdfCopySpec";
  uint64_t v71 = 681;
  v72 = "BOOL pxrInternal__aapl__pxrReserved__::SdfCopySpec(const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle"
        " &, const SdfPath &, const SdfShouldCopyValueFn &, const SdfShouldCopyChildrenFn &)";
  LOBYTE(v73) = 0;
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v63);
  uint64_t v49 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v49);
  if (*(char *)(Identifier + 23) >= 0) {
    uint64_t v51 = (const char *)Identifier;
  }
  else {
    uint64_t v51 = *(const char **)Identifier;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v69, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot copy unknown spec at <%s> from layer <%s>", Text, v51);
  sub_216A8FCE4(&v63);
  uint64_t v22 = 0;
LABEL_83:
  sub_216A91250(v65);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v68);
  return v22;
}

{
  uint64_t (*v12)(uint64_t *);
  char v13;
  uint64_t (*v14)(uint64_t *);
  char v15;
  int IsPrimVariantSelectionPath;
  int IsPropertyPath;
  int IsTargetPath;
  int IsMapperPath;
  int IsMapperArgPath;
  int IsExpressionPath;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v24;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v25;
  int SpecType;
  int v27;
  int v28;
  BOOL v29;
  void *v30;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v31;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v32;
  unint64_t v33;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v34;
  unint64_t v35;
  uint64_t i;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v37;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v38;
  uint64_t j;
  unint64_t v40;
  void *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v46;
  void *v47;
  const char *Text;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v49;
  uint64_t Identifier;
  const char *v51;
  uint64_t *v52[3];
  int v53;
  const pxrInternal__aapl__pxrReserved__::TfToken *v54[3];
  void v55[3];
  const pxrInternal__aapl__pxrReserved__::TfToken *v56[3];
  uint64_t *v57[3];
  char v58[8];
  int v59;
  void *v60;
  void *v61;
  int v62;
  int v63;
  int v64;
  void v65[4];
  unint64_t v66;
  uint64_t v67;
  unsigned char v68[16];
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  const char *v72;
  int *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x263EF8340];
  int v12 = sub_21697CF14(a1);
  if (!(v13 & 1 | (unint64_t)v12) || (uint64_t v14 = sub_21697CF14(a3), !(v15 & 1 | (unint64_t)v14)))
  {
    unint64_t v69 = (unint64_t)"sdf/copyUtils.cpp";
    unint64_t v70 = (unint64_t)"SdfCopySpec";
    uint64_t v71 = 812;
    v72 = "BOOL pxrInternal__aapl__pxrReserved__::SdfCopySpec(const SdfLayerHandle &, const SdfPath &, const SdfLayerHand"
          "le &, const SdfPath &, const SdfShouldCopyValueFnStandard &, const SdfShouldCopyChildrenFnStandard &)";
    LOBYTE(v73) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v69, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid layer handle");
    return 0;
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2)
    || !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4))
  {
    unint64_t v69 = (unint64_t)"sdf/copyUtils.cpp";
    unint64_t v70 = (unint64_t)"SdfCopySpec";
    uint64_t v71 = 817;
    v72 = "BOOL pxrInternal__aapl__pxrReserved__::SdfCopySpec(const SdfLayerHandle &, const SdfPath &, const SdfLayerHand"
          "le &, const SdfPath &, const SdfShouldCopyValueFnStandard &, const SdfShouldCopyChildrenFnStandard &)";
    LOBYTE(v73) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v69, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid empty path");
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a2))
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a4)
      && (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(a4) & 1) == 0)
    {
      goto LABEL_20;
    }
    goto LABEL_15;
  }
  int IsPrimVariantSelectionPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(a2);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a4))
  {
    if ((IsPrimVariantSelectionPath & 1) == 0) {
      goto LABEL_20;
    }
  }
  else if (IsPrimVariantSelectionPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(a4))
  {
LABEL_20:
    unint64_t v69 = (unint64_t)"sdf/copyUtils.cpp";
    unint64_t v70 = (unint64_t)"SdfCopySpec";
    uint64_t v71 = 831;
    v72 = "BOOL pxrInternal__aapl__pxrReserved__::SdfCopySpec(const SdfLayerHandle &, const SdfPath &, const SdfLayerHand"
          "le &, const SdfPath &, const SdfShouldCopyValueFnStandard &, const SdfShouldCopyChildrenFnStandard &)";
    LOBYTE(v73) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v69, 1, (pxrInternal__aapl__pxrReserved__ *)"Incompatible source and destination paths");
    return 0;
  }
LABEL_15:
  int IsPropertyPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a2);
  if (IsPropertyPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a4)) {
    goto LABEL_20;
  }
  int IsTargetPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a2);
  if (IsTargetPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a4)) {
    goto LABEL_20;
  }
  int IsMapperPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(a2);
  if (IsMapperPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(a4)) {
    goto LABEL_20;
  }
  int IsMapperArgPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperArgPath(a2);
  if (IsMapperArgPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperArgPath(a4)) {
    goto LABEL_20;
  }
  int IsExpressionPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsExpressionPath(a2);
  if (IsExpressionPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsExpressionPath(a4)) {
    goto LABEL_20;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a4))
  {
    uint64_t v24 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a3);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v24, a4) & 1) == 0)
    {
      unint64_t v69 = (unint64_t)"sdf/copyUtils.cpp";
      unint64_t v70 = (unint64_t)"SdfCopySpec";
      uint64_t v71 = 838;
      v72 = "BOOL pxrInternal__aapl__pxrReserved__::SdfCopySpec(const SdfLayerHandle &, const SdfPath &, const SdfLayerHa"
            "ndle &, const SdfPath &, const SdfShouldCopyValueFnStandard &, const SdfShouldCopyChildrenFnStandard &)";
      LOBYTE(v73) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v69, 1, (pxrInternal__aapl__pxrReserved__ *)"Spec does not exist at destination target path");
      return 0;
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v68);
  sub_2169D36F0(&v69, a2, a4);
  sub_216A8FAA8((uint64_t)v65, &v69);
  sub_216A8FCE4(&v69);
  uint64_t v22 = 1;
  if (!v67) {
    goto LABEL_83;
  }
  while (1)
  {
    sub_216A8FD38(&v63, (_DWORD *)(*(void *)(v65[1] + ((v66 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v66));
    sub_216A8FD88((uint64_t)v65);
    if (!sub_216A8FA88(&v63)) {
      break;
    }
    sub_216A8FE08(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
LABEL_76:
    sub_216A8FCE4(&v63);
    if (!v67)
    {
      uint64_t v22 = 1;
      goto LABEL_83;
    }
  }
  int v62 = 0;
  uint64_t v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  int SpecType = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v25, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v63);
  int v62 = SpecType;
  if (SpecType)
  {
    sub_216A90384((uint64_t)v58, &v64, SpecType);
    memset(v57, 0, sizeof(v57));
    memset(v56, 0, sizeof(v56));
    sub_216A903D4(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v64, (uint64_t)v57, (uint64_t)v56);
    memset(v55, 0, sizeof(v55));
    memset(v54, 0, sizeof(v54));
    sub_216A903D4(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v63, (uint64_t)v55, (uint64_t)v54);
    unint64_t v69 = (unint64_t)&v62;
    unint64_t v70 = (unint64_t)a1;
    uint64_t v71 = (uint64_t)&v63;
    v72 = (const char *)a3;
    v73 = a5;
    uint64_t v74 = v58;
    sub_216A91D58((uint64_t)v55, v57, (uint64_t)&v69);
    int v27 = v62;
    if (v62 == 6)
    {
      int v28 = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
      int v27 = v62;
    }
    else
    {
      int v28 = 0;
    }
    BOOL v29 = v27 == 10
       && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
    if ((v28 | v29) == 1)
    {
      uint64_t v30 = sub_216A90798(v60, v61);
      sub_216A9074C((uint64_t)&v60, v30, v61);
      if (v28)
      {
        uint64_t v31 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v31) {
          uint64_t v31 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        v77 = (char *)&off_26C758118 + 3;
        LODWORD(v76) = 1;
        sub_216A94360((uint64_t *)&v69, (uint64_t *)v31 + 39, &v76);
        sub_216A908C8((uint64_t *)&v60, &v69);
        sub_2168EE084((uint64_t)&v70);
        if ((v69 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        sub_2168EE084((uint64_t)&v76);
        int v59 = 10;
      }
      else if (v29)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v63, &v53);
        uint64_t v76 = 0;
        v77 = 0;
        uint64_t v78 = 0;
        memset(v52, 0, sizeof(v52));
        unint64_t v32 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v32) {
          unint64_t v32 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        unint64_t v33 = *((void *)v32 + 39);
        unint64_t v69 = v33;
        if ((v33 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v69 &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v34 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v34) {
          uint64_t v34 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        unint64_t v35 = *((void *)v34 + 56);
        unint64_t v70 = v35;
        if ((v35 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v70 &= 0xFFFFFFFFFFFFFFF8;
        }
        for (uint64_t i = 0; i != 16; i += 8)
        {
          uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)&v69 + i), 0))sub_216A90920((uint64_t)&v76, (uint64_t *)((char *)&v69 + i)); {
          uint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a3);
          }
          if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v38, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v64, (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)&v69 + i), 0))sub_216A90920((uint64_t)v52, (uint64_t *)((char *)&v69 + i)); {
        }
          }
        for (uint64_t j = 8; j != -8; j -= 8)
        {
          unint64_t v40 = *(unint64_t *)((char *)&v69 + j);
          if ((v40 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        unint64_t v69 = (unint64_t)&v62;
        unint64_t v70 = (unint64_t)a1;
        uint64_t v71 = (uint64_t)&v53;
        v72 = (const char *)a3;
        v73 = &v63;
        uint64_t v74 = (char *)a5;
        uint64_t v75 = v58;
        sub_216A91F1C((uint64_t)&v76, v52, (uint64_t)&v69);
        int v59 = 6;
        unint64_t v69 = (unint64_t)v52;
        sub_216889A04((void ***)&v69);
        unint64_t v69 = (unint64_t)&v76;
        sub_216889A04((void ***)&v69);
        sub_21697B754(&v53);
      }
    }
    sub_216A90B60(a3, (uint64_t)v58);
    int v41 = v61;
    if (v60 != v61)
    {
      unint64_t v42 = v60 + 1;
      do
      {
        if (sub_216A9101C((pxrInternal__aapl__pxrReserved__::VtValue *)v42))
        {
          uint64_t v43 = v42[1];
          if ((v43 & 4) != 0) {
            uint64_t v44 = (*(uint64_t (**)(uint64_t *))((v43 & 0xFFFFFFFFFFFFFFF8) + 168))(v42);
          }
          else {
            uint64_t v44 = *v42;
          }
          uint64_t v45 = *(void *)(v44 + 24);
          if (!v45) {
            sub_21683A7CC();
          }
          (*(void (**)(uint64_t, uint64_t *, char *))(*(void *)v45 + 48))(v45, a3, v58);
        }
        else
        {
          int v46 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a3);
          pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v46, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v58, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v42 - 1), (const pxrInternal__aapl__pxrReserved__::VtValue *)v42);
        }
        uint64_t v47 = v42 + 2;
        v42 += 3;
      }
      while (v47 != v41);
    }
    unint64_t v69 = (unint64_t)a1;
    unint64_t v70 = (unint64_t)&v63;
    uint64_t v71 = (uint64_t)a3;
    v72 = a6;
    v73 = (int *)v65;
    sub_216A920F0(v54, v56, (uint64_t)&v69);
    unint64_t v69 = (unint64_t)v54;
    sub_216889A04((void ***)&v69);
    unint64_t v69 = (unint64_t)v55;
    sub_216889A04((void ***)&v69);
    unint64_t v69 = (unint64_t)v56;
    sub_216889A04((void ***)&v69);
    unint64_t v69 = (unint64_t)v57;
    sub_216889A04((void ***)&v69);
    sub_216A91204((uint64_t)v58);
    goto LABEL_76;
  }
  unint64_t v69 = (unint64_t)"sdf/copyUtils.cpp";
  unint64_t v70 = (unint64_t)"SdfCopySpec";
  uint64_t v71 = 864;
  v72 = "BOOL pxrInternal__aapl__pxrReserved__::SdfCopySpec(const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle"
        " &, const SdfPath &, const SdfShouldCopyValueFnStandard &, const SdfShouldCopyChildrenFnStandard &)";
  LOBYTE(v73) = 0;
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v63);
  uint64_t v49 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v49);
  if (*(char *)(Identifier + 23) >= 0) {
    uint64_t v51 = (const char *)Identifier;
  }
  else {
    uint64_t v51 = *(const char **)Identifier;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v69, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot copy unknown spec at <%s> from layer <%s>", Text, v51);
  sub_216A8FCE4(&v63);
  uint64_t v22 = 0;
LABEL_83:
  sub_216A91250(v65);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v68);
  return v22;
}

void sub_216A8F8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, int a18, void ****a19, uint64_t a20,uint64_t a21,void ***a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,uint64_t a38,uint64_t a39)
{
  uint64_t v41 = *(void *)(v39 - 176);
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)(v39 - 184) = &a15;
  sub_216889A04((void ***)(v39 - 184));
  a15 = (void **)(v39 - 120);
  sub_216889A04(&a15);
  sub_21697B754(&a18);
  *(void *)(v39 - 120) = &a19;
  sub_216889A04((void ***)(v39 - 120));
  a19 = &a22;
  sub_216889A04((void ***)&a19);
  a22 = &a25;
  sub_216889A04((void ***)&a22);
  a25 = (void **)&a28;
  sub_216889A04(&a25);
  sub_216A91204((uint64_t)&a31);
  sub_216A8FCE4(&a37);
  sub_216A91250(&a39);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)(v39 - 192));
  _Unwind_Resume(a1);
}

BOOL sub_216A8FA88(_DWORD *a1)
{
  return !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a1);
}

uint64_t sub_216A8FAA8(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = a1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v30 = a1 + 24;
  int v27 = (char *)operator new(8uLL);
  int v28 = v27;
  *(void *)&long long v29 = v27;
  *((void *)&v29 + 1) = v27 + 8;
  uint64_t v26 = operator new(0x1000uLL);
  sub_216A94638((uint64_t)&v27, &v26);
  for (uint64_t i = *(void **)(v3 + 16); i != *(void **)(v3 + 8); sub_216A9475C((void **)&v27, i))
    --i;
  uint64_t v5 = *(void **)v3;
  uint64_t v6 = v28;
  *(void *)uint64_t v3 = v27;
  *(void *)(v3 + 8) = v6;
  uint64_t v7 = (char *)v29;
  *(_OWORD *)(v3 + 16) = v29;
  if (v5)
  {
    operator delete(v5);
    uint64_t v6 = *(char **)(v3 + 8);
    uint64_t v8 = *(char **)(v3 + 16);
  }
  else
  {
    uint64_t v8 = v7;
  }
  uint64_t v9 = *(void *)(v3 + 40);
  unint64_t v10 = *(void *)(v3 + 32) + v9;
  char v11 = &v6[8 * (v10 >> 8)];
  int v12 = *(char **)v11;
  uint64_t v13 = *(void *)v11 + 16 * v10;
  if (v8 == v6) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = (char *)v13;
  }
  uint64_t v15 = (v14 - v12) >> 4;
  if (v14 - v12 < -15)
  {
    unint64_t v19 = 254 - v15;
    long long v17 = &v11[-8 * (v19 >> 8)];
    uint64_t v18 = *(void *)v17 + 16 * ~(_BYTE)v19;
  }
  else
  {
    unint64_t v16 = v15 + 1;
    long long v17 = &v11[8 * (v16 >> 8)];
    uint64_t v18 = *(void *)v17 + 16 * v16;
  }
  if (v14 != (char *)v18)
  {
    do
    {
      long long v20 = v12 + 4096;
      if (v11 == v17) {
        long long v21 = (char *)v18;
      }
      else {
        long long v21 = v20;
      }
      if (v14 == v21)
      {
        long long v21 = v14;
      }
      else
      {
        uint64_t v22 = v14;
        do
        {
          sub_216981010(v22, a2);
          sub_21698105C((_DWORD *)v22 + 1, a2 + 1);
          sub_216981010((_DWORD *)v22 + 2, a2 + 2);
          sub_21698105C((_DWORD *)v22 + 3, a2 + 3);
          v22 += 16;
        }
        while (v22 != v21);
        uint64_t v3 = a1;
        uint64_t v9 = *(void *)(a1 + 40);
      }
      v9 += (v21 - v14) >> 4;
      *(void *)(v3 + 40) = v9;
      if (v11 == v17) {
        break;
      }
      int64x2_t v23 = (char *)*((void *)v11 + 1);
      v11 += 8;
      int v12 = v23;
      uint64_t v14 = v23;
    }
    while (v23 != (char *)v18);
  }
  return v3;
}

void sub_216A8FC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14)
{
}

_DWORD *sub_216A8FCE4(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 3);
  sub_21697C414(a1 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

_DWORD *sub_216A8FD38(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = sub_216981010(a1, a2);
  sub_21698105C(v4 + 1, a2 + 1);
  sub_216981010(a1 + 2, a2 + 2);
  sub_21698105C(a1 + 3, a2 + 3);
  return a1;
}

void sub_216A8FD88(uint64_t a1)
{
  sub_216A9488C((_DWORD *)(*(void *)(*(void *)(a1 + 8) + ((*(void *)(a1 + 32) >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * *(void *)(a1 + 32)));
  int64x2_t v2 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_21746C150);
  *(int64x2_t *)(a1 + 32) = v2;
  if (v2.i64[0] >= 0x200uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 256;
  }
}

uint64_t sub_216A8FE08(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v3, a2);
  switch((int)result)
  {
    case 1:
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v20);
      NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      uint64_t v6 = *(void *)NameToken;
      if ((*(void *)NameToken & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v6 &= 0xFFFFFFFFFFFFFFF8;
      }
      if ((v6 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NameToken);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::RemoveChild();
    case 2:
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v20);
      sub_216A889B4(a2, &v19);
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::RemoveChild();
    case 3:
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v20);
      uint64_t v7 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      uint64_t v8 = *(void *)v7;
      if ((*(void *)v7 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v8 &= 0xFFFFFFFFFFFFFFF8;
      }
      if ((v8 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy>::RemoveChild();
    case 4:
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v20);
      sub_216A6D88C(a2, &v19);
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::RemoveChild();
    case 5:
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v20);
      uint64_t v13 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      uint64_t v14 = *(void *)v13;
      if ((*(void *)v13 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v14 &= 0xFFFFFFFFFFFFFFF8;
      }
      if ((v14 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::RemoveChild();
    case 6:
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v20);
      uint64_t v9 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      uint64_t v10 = *(void *)v9;
      if ((*(void *)v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v10 &= 0xFFFFFFFFFFFFFFF8;
      }
      if ((v10 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::RemoveChild();
    case 8:
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v20);
      char v11 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      uint64_t v12 = *(void *)v11;
      if ((*(void *)v11 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v12 &= 0xFFFFFFFFFFFFFFF8;
      }
      if ((v12 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::RemoveChild();
    case 9:
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v20);
      sub_216A889B4(a2, &v19);
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::RemoveChild();
    case 10:
      sub_216A687F4(a2, &v20);
      uint64_t v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      uint64_t v16 = *(void *)v15;
      if ((*(void *)v15 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v16 &= 0xFFFFFFFFFFFFFFF8;
      }
      if ((v16 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::RemoveChild();
    case 11:
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v20);
      long long v17 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      uint64_t v18 = *(void *)v17;
      if ((*(void *)v17 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v18 &= 0xFFFFFFFFFFFFFFF8;
      }
      if ((v18 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::RemoveChild();
    default:
      return result;
  }
}

void sub_216A902C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216A90384(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v6 = sub_216981010((_DWORD *)a1, a2);
  sub_21698105C(v6 + 1, a2 + 1);
  *(_DWORD *)(a1 + 8) = a3;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_216A903D4(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetSchema(v8);
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)sub_2169791E0(a1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::ListFields(v10, a2, (uint64_t)&v25);
  char v11 = v25;
  for (uint64_t i = v26; v11 != i; ++v11)
  {
    if (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::HoldsChildren(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)v11))
    {
      uint64_t v13 = *(uint64_t **)(a4 + 8);
      if ((unint64_t)v13 >= *(void *)(a4 + 16))
      {
        uint64_t v15 = sub_216973984((char **)a4, v11);
      }
      else
      {
        uint64_t v14 = *v11;
        uint64_t *v13 = *v11;
        if ((v14 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *v13 &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v15 = (char *)(v13 + 1);
      }
      *(void *)(a4 + 8) = v15;
    }
    else
    {
      uint64_t v16 = *(uint64_t **)(a3 + 8);
      if ((unint64_t)v16 >= *(void *)(a3 + 16))
      {
        uint64_t v18 = sub_216973984((char **)a3, v11);
      }
      else
      {
        uint64_t v17 = *v11;
        *uint64_t v16 = *v11;
        if ((v17 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *v16 &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v18 = (char *)(v16 + 1);
      }
      *(void *)(a3 + 8) = v18;
    }
  }
  int v19 = *(uint64_t **)(a3 + 8);
  unint64_t v20 = 126 - 2 * __clz(((uint64_t)v19 - *(void *)a3) >> 3);
  if (v19 == *(uint64_t **)a3) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v20;
  }
  sub_216A934A0(*(void *)a3, v19, (uint64_t)&v27, v21, 1);
  uint64_t v22 = *(uint64_t **)(a4 + 8);
  unint64_t v23 = 126 - 2 * __clz(((uint64_t)v22 - *(void *)a4) >> 3);
  if (v22 == *(uint64_t **)a4) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = v23;
  }
  sub_216A934A0(*(void *)a4, v22, (uint64_t)&v27, v24, 1);
  int v28 = (void **)&v25;
  sub_216889A04(&v28);
}

void sub_216A90568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  sub_216889A04(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_216A90588(uint64_t result, uint64_t **a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t **)result;
  uint64_t v5 = *(uint64_t **)(result + 8);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  BOOL v8 = *(void *)result != (void)v5;
  if (*(uint64_t **)result != v5 && v6 != v7)
  {
    while (1)
    {
      unint64_t v10 = *v4 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v11 = *v6 & 0xFFFFFFFFFFFFFFF8;
      if (v10 != v11) {
        break;
      }
      uint64_t result = sub_216A948E0(**(_DWORD **)a3, v4++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 1, *(void *)(a3 + 24), *(void *)(a3 + 16) + 8, 1, *(void *)(a3 + 32), (uint64_t *)(*(void *)(a3 + 40) + 16));
      ++v6;
LABEL_14:
      BOOL v8 = v4 != v5;
      if (v4 == v5 || v6 == v7) {
        goto LABEL_20;
      }
    }
    if (v10 >= v11)
    {
      while (v6 != v7)
      {
        if ((*v6 & 0xFFFFFFFFFFFFFFF8) >= (*v4 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_14;
        }
        uint64_t result = sub_216A948E0(**(_DWORD **)a3, v6++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 0, *(void *)(a3 + 24), *(void *)(a3 + 16) + 8, 1, *(void *)(a3 + 32), (uint64_t *)(*(void *)(a3 + 40) + 16));
      }
      uint64_t v6 = v7;
    }
    else
    {
      while (v4 != v5)
      {
        if ((*v4 & 0xFFFFFFFFFFFFFFF8) >= (*v6 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_14;
        }
        uint64_t result = sub_216A948E0(**(_DWORD **)a3, v4++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 1, *(void *)(a3 + 24), *(void *)(a3 + 16) + 8, 0, *(void *)(a3 + 32), (uint64_t *)(*(void *)(a3 + 40) + 16));
      }
      uint64_t v4 = v5;
    }
    BOOL v8 = v4 != v5;
  }
LABEL_20:
  if (v4 == v5)
  {
    uint64_t v4 = v6;
    uint64_t v5 = v7;
  }
  for (; v4 != v5; ++v4)
    uint64_t result = sub_216A948E0(**(_DWORD **)a3, v4, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), v8, *(void *)(a3 + 24), *(void *)(a3 + 16) + 8, !v8, *(void *)(a3 + 32), (uint64_t *)(*(void *)(a3 + 40) + 16));
  return result;
}

void *sub_216A9074C(uint64_t a1, void *a2, void *a3)
{
  if (a2 != a3)
  {
    sub_216A94EA0(a3, *(void **)(a1 + 8), a2);
    sub_216A94584(a1, v5);
  }
  return a2;
}

void *sub_216A90798(void *a1, void *a2)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v3 = a1;
  while (1)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v4) {
      uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v4 + 39) & 0xFFFFFFFFFFFFFFF8)) {
      break;
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v5 + 56) & 0xFFFFFFFFFFFFFFF8)) {
      break;
    }
    v3 += 3;
    if (v3 == a2) {
      return a2;
    }
  }
  if (v3 != a2)
  {
    for (uint64_t i = v3 + 3; i != a2; i += 3)
    {
      BOOL v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v8) {
        BOOL v8 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*i & 0xFFFFFFFFFFFFFFF8) != (*((void *)v8 + 39) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v9) {
          uint64_t v9 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if ((*i & 0xFFFFFFFFFFFFFFF8) != (*((void *)v9 + 56) & 0xFFFFFFFFFFFFFFF8))
        {
          sub_216A94E44(v3, i);
          v3 += 3;
        }
      }
    }
  }
  return v3;
}

uint64_t sub_216A908C8(uint64_t *a1, void *a2)
{
  uint64_t v3 = (void *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    uint64_t result = sub_216A950D0(a1, a2);
    uint64_t v4 = (void *)result;
  }
  else
  {
    void *v3 = *a2;
    uint64_t v4 = v3 + 3;
    *a2 = 0;
    uint64_t result = (uint64_t)sub_2168EDFA8(v3 + 1, a2 + 1);
  }
  a1[1] = (uint64_t)v4;
  return result;
}

char *sub_216A90920(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v3 >= *(void *)(a1 + 16))
  {
    uint64_t result = sub_216973984((char **)a1, a2);
  }
  else
  {
    uint64_t v4 = *a2;
    uint64_t *v3 = *a2;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v3 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t result = (char *)(v3 + 1);
  }
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_216A9098C(uint64_t result, uint64_t **a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t **)result;
  uint64_t v5 = *(uint64_t **)(result + 8);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  BOOL v8 = *(void *)result != (void)v5;
  if (*(uint64_t **)result != v5 && v6 != v7)
  {
    while (1)
    {
      unint64_t v10 = *v4 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v11 = *v6 & 0xFFFFFFFFFFFFFFF8;
      if (v10 != v11) {
        break;
      }
      uint64_t result = sub_216A948E0(**(_DWORD **)a3, v4++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 1, *(void *)(a3 + 24), *(void *)(a3 + 32) + 8, 1, *(void *)(a3 + 40), (uint64_t *)(*(void *)(a3 + 48) + 16));
      ++v6;
LABEL_14:
      BOOL v8 = v4 != v5;
      if (v4 == v5 || v6 == v7) {
        goto LABEL_20;
      }
    }
    if (v10 >= v11)
    {
      while (v6 != v7)
      {
        if ((*v6 & 0xFFFFFFFFFFFFFFF8) >= (*v4 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_14;
        }
        uint64_t result = sub_216A948E0(**(_DWORD **)a3, v6++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 0, *(void *)(a3 + 24), *(void *)(a3 + 32) + 8, 1, *(void *)(a3 + 40), (uint64_t *)(*(void *)(a3 + 48) + 16));
      }
      uint64_t v6 = v7;
    }
    else
    {
      while (v4 != v5)
      {
        if ((*v4 & 0xFFFFFFFFFFFFFFF8) >= (*v6 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_14;
        }
        uint64_t result = sub_216A948E0(**(_DWORD **)a3, v4++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 1, *(void *)(a3 + 24), *(void *)(a3 + 32) + 8, 0, *(void *)(a3 + 40), (uint64_t *)(*(void *)(a3 + 48) + 16));
      }
      uint64_t v4 = v5;
    }
    BOOL v8 = v4 != v5;
  }
LABEL_20:
  if (v4 == v5)
  {
    uint64_t v4 = v6;
    uint64_t v5 = v7;
  }
  for (; v4 != v5; ++v4)
    uint64_t result = sub_216A948E0(**(_DWORD **)a3, v4, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), v8, *(void *)(a3 + 24), *(void *)(a3 + 32) + 8, !v8, *(void *)(a3 + 40), (uint64_t *)(*(void *)(a3 + 48) + 16));
  return result;
}

uint64_t sub_216A90B60(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
  if ((result & 1) == 0)
  {
    switch(*(_DWORD *)(a2 + 8))
    {
      case 1:
        uint64_t v5 = *(void **)(a2 + 16);
        uint64_t v6 = *(void **)(a2 + 24);
        if (v5 == v6) {
          goto LABEL_52;
        }
        while (1)
        {
          uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v7) {
            uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          if ((*v5 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 8) & 0xFFFFFFFFFFFFFFF8)) {
            break;
          }
          v5 += 3;
          if (v5 == v6) {
            goto LABEL_52;
          }
        }
        sub_216958184((pxrInternal__aapl__pxrReserved__::VtValue *)(v5 + 1));
LABEL_52:
        pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::CreateSpec();
      case 2:
        pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::CreateSpec();
      case 3:
        pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy>::CreateSpec();
      case 4:
        pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::CreateSpec();
      case 5:
        pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::CreateSpec();
      case 6:
        uint64_t v16 = 0;
        BOOL v8 = *(void **)(a2 + 16);
        for (uint64_t i = *(void **)(a2 + 24); v8 != i; v8 += 3)
        {
          if (v8[2])
          {
            unint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v10) {
              unint64_t v10 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            if ((*v8 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v10 + 56) & 0xFFFFFFFFFFFFFFF8))
            {
              uint64_t v12 = (void *)sub_21695C470((pxrInternal__aapl__pxrReserved__::VtValue *)(v8 + 1));
              sub_2168D2318(&v16, v12);
            }
            else
            {
              unint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v11) {
                unint64_t v11 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              }
              if ((*v8 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v11 + 39) & 0xFFFFFFFFFFFFFFF8)) {
                sub_216A943BC((pxrInternal__aapl__pxrReserved__::VtValue *)(v8 + 1));
              }
            }
          }
        }
        pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CreateSpec();
      case 8:
        uint64_t v13 = *(void **)(a2 + 16);
        uint64_t v14 = *(void **)(a2 + 24);
        if (v13 == v14) {
          goto LABEL_56;
        }
        break;
      case 9:
        pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::CreateSpec();
      case 0xA:
        pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::CreateSpec();
      case 0xB:
        pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::CreateSpec();
      default:
        return result;
    }
    while (1)
    {
      uint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v15) {
        uint64_t v15 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*v13 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v15 + 8) & 0xFFFFFFFFFFFFFFF8)) {
        break;
      }
      v13 += 3;
      if (v13 == v14) {
        goto LABEL_56;
      }
    }
    sub_216958184((pxrInternal__aapl__pxrReserved__::VtValue *)(v13 + 1));
LABEL_56:
    pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::CreateSpec();
  }
  return result;
}

void sub_216A90FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216A9101C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000021746C193 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C7581D0);
}

void sub_216A910A8(const pxrInternal__aapl__pxrReserved__::TfToken **a1, const pxrInternal__aapl__pxrReserved__::TfToken **a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *a1 != v5;
  if (*a1 != v5 && v6 != v7)
  {
    while (1)
    {
      unint64_t v10 = *(void *)v4 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v11 = *(void *)v6 & 0xFFFFFFFFFFFFFFF8;
      if (v10 != v11) {
        break;
      }
      sub_216A951DC(a3, v4, 1, 1);
      uint64_t v4 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v4 + 8);
      uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v6 + 8);
LABEL_14:
      char v8 = v4 != v5;
      if (v4 == v5 || v6 == v7) {
        goto LABEL_20;
      }
    }
    if (v10 >= v11)
    {
      while (v6 != v7)
      {
        if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) >= (*(void *)v4 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_14;
        }
        sub_216A951DC(a3, v6, 0, 1);
        uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v6 + 8);
      }
      uint64_t v6 = v7;
    }
    else
    {
      while (v4 != v5)
      {
        if ((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) >= (*(void *)v6 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_14;
        }
        sub_216A951DC(a3, v4, 1, 0);
        uint64_t v4 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v4 + 8);
      }
      uint64_t v4 = v5;
    }
    char v8 = v4 != v5;
  }
LABEL_20:
  if (v4 == v5)
  {
    uint64_t v4 = v6;
    uint64_t v5 = v7;
  }
  for (; v4 != v5; uint64_t v4 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v4 + 8))
    sub_216A951DC(a3, v4, v8, v8 ^ 1);
}

_DWORD *sub_216A91204(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 16);
  sub_216A94530(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_21697C414((_DWORD *)a1);
}

uint64_t sub_216A91250(void *a1)
{
  int64x2_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    unint64_t v4 = a1[4];
    uint64_t v5 = &v2[v4 >> 8];
    uint64_t v6 = (char *)*v5 + 16 * v4;
    uint64_t v7 = *(uint64_t *)((char *)v2 + (((a1[5] + v4) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((unsigned char *)a1 + 40) + v4);
    if (v6 != (char *)v7)
    {
      do
      {
        sub_216A9488C(v6);
        v6 += 16;
        if (v6 - (unsigned char *)*v5 == 4096)
        {
          char v8 = (char *)v5[1];
          ++v5;
          uint64_t v6 = v8;
        }
      }
      while (v6 != (char *)v7);
      int64x2_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  a1[5] = 0;
  unint64_t v9 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      int64x2_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v9 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v10 = v9 >> 3;
  if (v10 == 1)
  {
    uint64_t v11 = 128;
  }
  else
  {
    if (v10 != 2) {
      goto LABEL_16;
    }
    uint64_t v11 = 256;
  }
  a1[4] = v11;
LABEL_16:
  while (v2 != v3)
  {
    uint64_t v12 = *v2++;
    operator delete(v12);
  }

  return sub_21683347C((uint64_t)a1);
}

void sub_216A91BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, int a18, void ****a19, uint64_t a20,uint64_t a21,void ***a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,uint64_t a38,uint64_t a39)
{
  uint64_t v41 = *(void *)(v39 - 176);
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)(v39 - 184) = &a15;
  sub_216889A04((void ***)(v39 - 184));
  a15 = (void **)(v39 - 120);
  sub_216889A04(&a15);
  sub_21697B754(&a18);
  *(void *)(v39 - 120) = &a19;
  sub_216889A04((void ***)(v39 - 120));
  a19 = &a22;
  sub_216889A04((void ***)&a19);
  a22 = &a25;
  sub_216889A04((void ***)&a22);
  a25 = (void **)&a28;
  sub_216889A04(&a25);
  sub_216A91204((uint64_t)&a31);
  sub_216A8FCE4(&a37);
  sub_216A91250(&a39);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)(v39 - 192));
  _Unwind_Resume(a1);
}

uint64_t sub_216A91D58(uint64_t result, uint64_t **a2, uint64_t a3)
{
  unint64_t v4 = *(uint64_t **)result;
  uint64_t v5 = *(uint64_t **)(result + 8);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  BOOL v8 = *(void *)result != (void)v5;
  if (*(uint64_t **)result != v5 && v6 != v7)
  {
    while (1)
    {
      unint64_t v10 = *v4 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v11 = *v6 & 0xFFFFFFFFFFFFFFF8;
      if (v10 != v11) {
        break;
      }
      uint64_t result = sub_216A982F4(**(_DWORD **)a3, v4++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 1, *(void *)(a3 + 24), *(void *)(a3 + 16) + 8, 1, *(void *)(a3 + 32), (uint64_t *)(*(void *)(a3 + 40) + 16));
      ++v6;
LABEL_14:
      BOOL v8 = v4 != v5;
      if (v4 == v5 || v6 == v7) {
        goto LABEL_20;
      }
    }
    if (v10 >= v11)
    {
      while (v6 != v7)
      {
        if ((*v6 & 0xFFFFFFFFFFFFFFF8) >= (*v4 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_14;
        }
        uint64_t result = sub_216A982F4(**(_DWORD **)a3, v6++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 0, *(void *)(a3 + 24), *(void *)(a3 + 16) + 8, 1, *(void *)(a3 + 32), (uint64_t *)(*(void *)(a3 + 40) + 16));
      }
      uint64_t v6 = v7;
    }
    else
    {
      while (v4 != v5)
      {
        if ((*v4 & 0xFFFFFFFFFFFFFFF8) >= (*v6 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_14;
        }
        uint64_t result = sub_216A982F4(**(_DWORD **)a3, v4++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 1, *(void *)(a3 + 24), *(void *)(a3 + 16) + 8, 0, *(void *)(a3 + 32), (uint64_t *)(*(void *)(a3 + 40) + 16));
      }
      unint64_t v4 = v5;
    }
    BOOL v8 = v4 != v5;
  }
LABEL_20:
  if (v4 == v5)
  {
    unint64_t v4 = v6;
    uint64_t v5 = v7;
  }
  for (; v4 != v5; ++v4)
    uint64_t result = sub_216A982F4(**(_DWORD **)a3, v4, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), v8, *(void *)(a3 + 24), *(void *)(a3 + 16) + 8, !v8, *(void *)(a3 + 32), (uint64_t *)(*(void *)(a3 + 40) + 16));
  return result;
}

uint64_t sub_216A91F1C(uint64_t result, uint64_t **a2, uint64_t a3)
{
  unint64_t v4 = *(uint64_t **)result;
  uint64_t v5 = *(uint64_t **)(result + 8);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  BOOL v8 = *(void *)result != (void)v5;
  if (*(uint64_t **)result != v5 && v6 != v7)
  {
    while (1)
    {
      unint64_t v10 = *v4 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v11 = *v6 & 0xFFFFFFFFFFFFFFF8;
      if (v10 != v11) {
        break;
      }
      uint64_t result = sub_216A982F4(**(_DWORD **)a3, v4++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 1, *(void *)(a3 + 24), *(void *)(a3 + 32) + 8, 1, *(void *)(a3 + 40), (uint64_t *)(*(void *)(a3 + 48) + 16));
      ++v6;
LABEL_14:
      BOOL v8 = v4 != v5;
      if (v4 == v5 || v6 == v7) {
        goto LABEL_20;
      }
    }
    if (v10 >= v11)
    {
      while (v6 != v7)
      {
        if ((*v6 & 0xFFFFFFFFFFFFFFF8) >= (*v4 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_14;
        }
        uint64_t result = sub_216A982F4(**(_DWORD **)a3, v6++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 0, *(void *)(a3 + 24), *(void *)(a3 + 32) + 8, 1, *(void *)(a3 + 40), (uint64_t *)(*(void *)(a3 + 48) + 16));
      }
      uint64_t v6 = v7;
    }
    else
    {
      while (v4 != v5)
      {
        if ((*v4 & 0xFFFFFFFFFFFFFFF8) >= (*v6 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_14;
        }
        uint64_t result = sub_216A982F4(**(_DWORD **)a3, v4++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 1, *(void *)(a3 + 24), *(void *)(a3 + 32) + 8, 0, *(void *)(a3 + 40), (uint64_t *)(*(void *)(a3 + 48) + 16));
      }
      unint64_t v4 = v5;
    }
    BOOL v8 = v4 != v5;
  }
LABEL_20:
  if (v4 == v5)
  {
    unint64_t v4 = v6;
    uint64_t v5 = v7;
  }
  for (; v4 != v5; ++v4)
    uint64_t result = sub_216A982F4(**(_DWORD **)a3, v4, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), v8, *(void *)(a3 + 24), *(void *)(a3 + 32) + 8, !v8, *(void *)(a3 + 40), (uint64_t *)(*(void *)(a3 + 48) + 16));
  return result;
}

void sub_216A920F0(const pxrInternal__aapl__pxrReserved__::TfToken **a1, const pxrInternal__aapl__pxrReserved__::TfToken **a2, uint64_t a3)
{
  unint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *a1 != v5;
  if (*a1 != v5 && v6 != v7)
  {
    while (1)
    {
      unint64_t v10 = *(void *)v4 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v11 = *(void *)v6 & 0xFFFFFFFFFFFFFFF8;
      if (v10 != v11) {
        break;
      }
      sub_216A984B4(a3, v4, 1, 1);
      unint64_t v4 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v4 + 8);
      uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v6 + 8);
LABEL_14:
      char v8 = v4 != v5;
      if (v4 == v5 || v6 == v7) {
        goto LABEL_20;
      }
    }
    if (v10 >= v11)
    {
      while (v6 != v7)
      {
        if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) >= (*(void *)v4 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_14;
        }
        sub_216A984B4(a3, v6, 0, 1);
        uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v6 + 8);
      }
      uint64_t v6 = v7;
    }
    else
    {
      while (v4 != v5)
      {
        if ((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) >= (*(void *)v6 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_14;
        }
        sub_216A984B4(a3, v4, 1, 0);
        unint64_t v4 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v4 + 8);
      }
      unint64_t v4 = v5;
    }
    char v8 = v4 != v5;
  }
LABEL_20:
  if (v4 == v5)
  {
    unint64_t v4 = v6;
    uint64_t v5 = v7;
  }
  for (; v4 != v5; unint64_t v4 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v4 + 8))
    sub_216A984B4(a3, v4, v8, v8 ^ 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfShouldCopyValue(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11)
{
  v38[3] = *(void **)MEMORY[0x263EF8340];
  if (a7)
  {
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v16) {
      uint64_t v16 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v16 + 7) & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_33;
    }
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v17) {
      uint64_t v17 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v17 + 53) & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_33;
    }
    uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v18) {
      uint64_t v18 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v18 + 24) & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_33;
    }
    int v19 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v19) {
      int v19 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v19 + 38) & 0xFFFFFFFFFFFFFFF8)) {
LABEL_33:
    }
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp();
    unint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v20) {
      unint64_t v20 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v20 + 35) & 0xFFFFFFFFFFFFFFF8)) {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp();
    }
    uint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v21) {
      uint64_t v21 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v21 + 30) & 0xFFFFFFFFFFFFFFF8)) {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp();
    }
    uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v22) {
      uint64_t v22 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v22 + 36) & 0xFFFFFFFFFFFFFFF8))
    {
      v35[0] = 0;
      v35[1] = 0;
      uint64_t v34 = (uint64_t (*)(void, uint64_t))v35;
      unint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a5);
      if (sub_216A92F10(v23, a6, a4, &v34))
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a1, &v37);
        pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37, &v33);
        sub_21697B754(&v37);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v37);
        pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37, &v32);
        sub_21697B754(&v37);
        v38[0] = 0;
        v38[1] = 0;
        uint64_t v37 = (uint64_t *)v38;
        uint64_t v24 = v34;
        if ((char *)v34 != (char *)v35)
        {
          do
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v31, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v24 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v32, 1);
            pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v30, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v24 + 36), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v32, 1);
            v36[0] = &v31;
            uint64_t v25 = sub_216A9AA80(&v37, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, (uint64_t)&unk_2174BFD90, v36);
            sub_2169C487C((int *)v25 + 9, &v30);
            sub_2169C48D4((int *)v25 + 10, (_DWORD *)&v30 + 1);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
            sub_21697C414(&v30);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
            sub_21697C414(&v31);
            uint64_t v26 = (void *)v24[1];
            if (v26)
            {
              do
              {
                char v27 = (void **)v26;
                uint64_t v26 = (void *)*v26;
              }
              while (v26);
            }
            else
            {
              do
              {
                char v27 = (void **)v24[2];
                BOOL v28 = *v27 == v24;
                uint64_t v24 = v27;
              }
              while (!v28);
            }
            uint64_t v24 = v27;
          }
          while (v27 != v35);
        }
        sub_216A92F84((uint64_t)&v37, (pxrInternal__aapl__pxrReserved__::VtValue *)v36);
        sub_216A945E8(a11, v36);
        sub_2168EE084((uint64_t)v36);
        sub_21698F21C((uint64_t)&v37, v38[0]);
        sub_21697B754(&v32);
        sub_21697B754(&v33);
      }
      sub_21698F21C((uint64_t)&v34, v35[0]);
    }
  }
  return 1;
}

void sub_216A92984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, int a14, int a15, char a16, void *a17)
{
  sub_2168EE084(v17 - 136);
  sub_21698F21C(v17 - 120, *(void **)(v17 - 112));
  sub_21697B754(&a12);
  sub_21697B754(&a14);
  sub_21698F21C((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

uint64_t sub_216A92B90(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C755170;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C7582A8;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

char *sub_216A92C04@<X0>(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  if (v6
    || (unint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 24),
        !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 24)))
    || pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 24)))
  {
    return sub_2169D5338((char *)a4, (long long *)a1);
  }
  else
  {
    sub_2169D5338((char *)a4, (long long *)a1);
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v11, v9, a2, a3, 1);
    sub_2169C487C((int *)(a4 + 24), &v11);
    sub_2169C48D4((int *)(a4 + 28), (_DWORD *)&v11 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
    return (char *)sub_21697C414(&v11);
  }
}

void sub_216A92D04(_Unwind_Exception *a1)
{
  sub_2169D5474(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216A92D1C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C755160;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C758388;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

_DWORD *sub_216A92D90@<X0>(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a4;
  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  LOBYTE(a4) = v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  if (!v6)
  {
    unint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 24)))
    {
      int IsRootPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 24));
      LODWORD(a4) = *(char *)(a1 + 23);
      if (!IsRootPrimPath)
      {
        if ((a4 & 0x80000000) != 0)
        {
          sub_216778F24((unsigned char *)v5, *(void **)a1, *(void *)(a1 + 8));
        }
        else
        {
          *(_OWORD *)uint64_t v5 = *(_OWORD *)a1;
          *(void *)(v5 + 16) = *(void *)(a1 + 16);
        }
        sub_216981010((_DWORD *)(v5 + 24), (_DWORD *)(a1 + 24));
        sub_21698105C((_DWORD *)(v5 + 28), (_DWORD *)(a1 + 28));
        *(_OWORD *)(v5 + 32) = *(_OWORD *)(a1 + 32);
        pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v12, v9, a2, a3, 1);
        sub_2169C487C((int *)(v5 + 24), &v12);
        sub_2169C48D4((int *)(v5 + 28), (_DWORD *)&v12 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
        return sub_21697C414(&v12);
      }
    }
    else
    {
      LOBYTE(a4) = *(unsigned char *)(a1 + 23);
    }
  }
  if ((a4 & 0x80) != 0)
  {
    sub_216778F24((unsigned char *)v5, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)a1;
    *(void *)(v5 + 16) = *(void *)(a1 + 16);
  }
  sub_216981010((_DWORD *)(v5 + 24), (_DWORD *)(a1 + 24));
  uint64_t result = sub_21698105C((_DWORD *)(v5 + 28), (_DWORD *)(a1 + 28));
  *(_OWORD *)(v5 + 32) = *(_OWORD *)(a1 + 32);
  return result;
}

void sub_216A92EF8(_Unwind_Exception *a1)
{
  sub_2169D8488(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216A92F10(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C758458;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C758478;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t *sub_216A92F84@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  return sub_216A9AB84(a2, a1);
}

void sub_216A92FB4(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfShouldCopyChildren(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, pxrInternal__aapl__pxrReserved__::SdfPath *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned char *a10, unsigned char *a11)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (a6)
  {
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v16) {
      uint64_t v16 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v16 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_11;
    }
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v17) {
      uint64_t v17 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v17 + 6) & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_11;
    }
    uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v18) {
      uint64_t v18 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v18 + 3) & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_11:
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      int v19 = (void *)sub_2169791E0(a4);
      uint64_t v34 = &v30;
      unint64_t v35 = &stru_26C756E40;
      __int16 v36 = 0;
      int v33 = (pxrInternal__aapl__pxrReserved__::SdfPath **)&unk_26C758568;
      int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v19, a5, a3, (uint64_t (***)(void, uint64_t))&v33);
      if ((_BYTE)v36) {
        int v21 = 0;
      }
      else {
        int v21 = HasField;
      }
      if (v21 == 1)
      {
        uint64_t v34 = (pxrInternal__aapl__pxrReserved__::SdfPath **)&off_26C756D88;
        sub_2169DC54C((unsigned int **)&v33, (_DWORD **)&v30);
        sub_216A945E8(a10, &v33);
        sub_2168EE084((uint64_t)&v33);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a1, &v33);
        pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, &v28);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
        sub_21697C414(&v33);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v33);
        pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, &v26);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
        sub_21697C414(&v33);
        uint64_t v22 = v30;
        for (i = v31; v22 != i; uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v24 + 1))
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v33, v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v28, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v26, 1);
          sub_21697DE94((int *)v22, (int *)&v33);
          uint64_t v24 = (int *)((char *)v22 + 4);
          sub_21697DEEC(v24, (int *)&v33 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
          sub_21697C414(&v33);
        }
        sub_216A93324((uint64_t *)&v30, (pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
        sub_216A945E8(a11, &v33);
        sub_2168EE084((uint64_t)&v33);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
        sub_21697C414(&v26);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
        sub_21697C414(&v28);
      }
      int v33 = &v30;
      sub_216981168((void ***)&v33);
    }
  }
  return 1;
}

void sub_216A93284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216A93324@<X0>(uint64_t *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  return sub_216A9B274(a2, a1);
}

void sub_216A93354(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfCopySpec(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  v13[4] = *MEMORY[0x263EF8340];
  char v8 = operator new(0x20uLL);
  void *v8 = &unk_26C7585A0;
  v8[1] = pxrInternal__aapl__pxrReserved__::SdfShouldCopyValue;
  void v8[2] = a2;
  v8[3] = a4;
  v13[3] = v8;
  unint64_t v9 = operator new(0x20uLL);
  *unint64_t v9 = &unk_26C758648;
  v9[1] = pxrInternal__aapl__pxrReserved__::SdfShouldCopyChildren;
  v9[2] = a2;
  v9[3] = a4;
  v12[3] = v9;
  uint64_t v10 = pxrInternal__aapl__pxrReserved__::SdfCopySpec(a1, a2, a3, a4, (int *)v13, (const char *)v12);
  sub_216A9B704(v12);
  sub_216A9B53C(v13);
  return v10;
}

void sub_216A9347C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_216A9B704((uint64_t *)va);
  sub_216A9B53C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216A934A0(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v22 = *(a2 - 1);
          uint64_t v23 = *v11;
          if ((v22 & 0xFFFFFFFFFFFFFFF8) < (*v11 & 0xFFFFFFFFFFFFFFF8))
          {
            *uint64_t v11 = v22;
            *(a2 - 1) = v23;
          }
          break;
        case 3uLL:
          uint64_t result = sub_216A9397C(v11, v11 + 1, a2 - 1);
          break;
        case 4uLL:
          uint64_t result = sub_216A93E08(v11, v11 + 1, v11 + 2, a2 - 1);
          break;
        case 5uLL:
          uint64_t result = sub_216A93EA4(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)sub_216A93F6C(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      sub_216A9397C(v11, &v11[v15 >> 1], a2 - 1);
      sub_216A9397C(v11 + 1, v17 - 1, a2 - 2);
      sub_216A9397C(v11 + 2, &v11[v16 + 1], a2 - 3);
      sub_216A9397C(v17 - 1, v17, &v11[v16 + 1]);
      uint64_t v18 = *v11;
      *uint64_t v11 = *v17;
      uint64_t *v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_216A9397C(&v11[v15 >> 1], v11, a2 - 1);
      if (a5) {
        goto LABEL_14;
      }
    }
    if ((*(v11 - 1) & 0xFFFFFFFFFFFFFFF8) >= (*v11 & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t result = (uint64_t)sub_216A93A1C(v11, a2);
      uint64_t v11 = (uint64_t *)result;
      goto LABEL_19;
    }
LABEL_14:
    int v19 = sub_216A93B18(v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = sub_216A93C14(v11, v19);
    uint64_t v11 = v19 + 1;
    uint64_t result = sub_216A93C14(v19 + 1, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = sub_216A934A0(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)sub_216A93864(v11, a2);
  }
  else
  {
    return (uint64_t)sub_216A93900(v11, a2);
  }
}

uint64_t *sub_216A93864(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    int64x2_t v2 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        uint64_t v6 = *v4;
        uint64_t v5 = v4[1];
        uint64_t v4 = v2;
        if ((v5 & 0xFFFFFFFFFFFFFFF8) < (v6 & 0xFFFFFFFFFFFFFFF8))
        {
          *int64x2_t v2 = 0;
          uint64_t v7 = v3;
          while (1)
          {
            char v8 = (uint64_t *)((char *)result + v7);
            void *v8 = 0;
            v8[1] = v6;
            if (!v7) {
              break;
            }
            uint64_t v6 = *(v8 - 1);
            v7 -= 8;
            if ((v5 & 0xFFFFFFFFFFFFFFF8) >= (v6 & 0xFFFFFFFFFFFFFFF8))
            {
              unint64_t v9 = (uint64_t *)((char *)result + v7 + 8);
              goto LABEL_10;
            }
          }
          unint64_t v9 = result;
LABEL_10:
          if ((*v9 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          *unint64_t v9 = v5;
        }
        int64x2_t v2 = v4 + 1;
        v3 += 8;
      }
      while (v4 + 1 != a2);
    }
  }
  return result;
}

uint64_t *sub_216A93900(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    for (uint64_t i = result + 1; result + 1 != a2; ++i)
    {
      uint64_t v4 = *result;
      uint64_t v3 = result[1];
      uint64_t result = i;
      if ((v3 & 0xFFFFFFFFFFFFFFF8) < (v4 & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t *i = 0;
        uint64_t v5 = i;
        do
        {
          uint64_t v6 = v5;
          *uint64_t v5 = v4;
          *--uint64_t v5 = 0;
          uint64_t v4 = *(v6 - 2);
        }
        while ((v3 & 0xFFFFFFFFFFFFFFF8) < (v4 & 0xFFFFFFFFFFFFFFF8));
        if ((*v5 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *uint64_t v5 = v3;
      }
    }
  }
  return result;
}

uint64_t sub_216A9397C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *a1;
  unint64_t v6 = *a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *a3;
  unint64_t v8 = *a3 & 0xFFFFFFFFFFFFFFF8;
  if (v4 < v6)
  {
    if (v8 < v4)
    {
      *a1 = v7;
      *a3 = v5;
      return 1;
    }
    *a1 = v3;
    *a2 = v5;
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) >= v6) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v5;
    return 2;
  }
  if (v8 < v4)
  {
    *a2 = v7;
    *a3 = v3;
    uint64_t v9 = *a1;
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) >= (*a1 & 0xFFFFFFFFFFFFFFF8)) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v9;
    return 2;
  }
  return 0;
}

uint64_t *sub_216A93A1C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 0xFFFFFFFFFFFFFFF8) >= (*(a2 - 1) & 0xFFFFFFFFFFFFFFF8))
  {
    unint64_t v6 = a1 + 1;
    do
    {
      unint64_t v4 = v6;
      if (v6 >= a2) {
        break;
      }
      ++v6;
    }
    while (v3 >= (*v4 & 0xFFFFFFFFFFFFFFF8));
  }
  else
  {
    unint64_t v4 = a1;
    do
    {
      uint64_t v5 = v4[1];
      ++v4;
    }
    while (v3 >= (v5 & 0xFFFFFFFFFFFFFFF8));
  }
  if (v4 < a2)
  {
    do
      uint64_t v7 = *--a2;
    while (v3 < (v7 & 0xFFFFFFFFFFFFFFF8));
  }
  if (v4 < a2)
  {
    uint64_t v8 = *v4;
    uint64_t v9 = *a2;
    do
    {
      *unint64_t v4 = v9;
      *a2 = v8;
      do
      {
        uint64_t v10 = v4[1];
        ++v4;
        uint64_t v8 = v10;
      }
      while (v3 >= (v10 & 0xFFFFFFFFFFFFFFF8));
      do
      {
        uint64_t v11 = *--a2;
        uint64_t v9 = v11;
      }
      while (v3 < (v11 & 0xFFFFFFFFFFFFFFF8));
    }
    while (v4 < a2);
  }
  uint64_t v12 = *a1;
  uint64_t v13 = *a1 & 7;
  if (v4 - 1 == a1)
  {
    if (v13) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if (v13) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *a1 = *(v4 - 1);
  }
  *(v4 - 1) = v2;
  return v4;
}

uint64_t *sub_216A93B18(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  *a1 = 0;
  unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  do
    uint64_t v5 = a1[++v2];
  while ((v5 & 0xFFFFFFFFFFFFFFF8) < v4);
  unint64_t v6 = &a1[v2];
  uint64_t v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v6 >= a2) {
        break;
      }
      uint64_t v9 = *--a2;
    }
    while ((v9 & 0xFFFFFFFFFFFFFFF8) >= v4);
  }
  else
  {
    do
      uint64_t v8 = *--a2;
    while ((v8 & 0xFFFFFFFFFFFFFFF8) >= v4);
  }
  if (v6 < a2)
  {
    uint64_t v10 = *a2;
    uint64_t v11 = &a1[v2];
    uint64_t v12 = a2;
    do
    {
      *uint64_t v11 = v10;
      uint64_t *v12 = v5;
      do
      {
        uint64_t v13 = v11[1];
        ++v11;
        uint64_t v5 = v13;
      }
      while ((v13 & 0xFFFFFFFFFFFFFFF8) < v4);
      do
      {
        uint64_t v14 = *--v12;
        uint64_t v10 = v14;
      }
      while ((v14 & 0xFFFFFFFFFFFFFFF8) >= v4);
    }
    while (v11 < v12);
    uint64_t v7 = v11 - 1;
  }
  uint64_t v15 = *a1;
  uint64_t v16 = *a1 & 7;
  if (v7 == a1)
  {
    if (v16) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if (v16) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *a1 = *v7;
  }
  uint64_t *v7 = v3;
  return v7;
}

BOOL sub_216A93C14(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if ((v6 & 0xFFFFFFFFFFFFFFF8) < (*a1 & 0xFFFFFFFFFFFFFFF8))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_216A9397C(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_216A93E08(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_216A93EA4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      sub_216A9397C(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    unint64_t v13 = *v9 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v14 = *v8;
    if (v13 < (*v8 & 0xFFFFFFFFFFFFFFF8))
    {
      *uint64_t v9 = 0;
      uint64_t v15 = v10;
      while (1)
      {
        uint64_t v16 = (uint64_t *)((char *)a1 + v15 + 16);
        uint64_t v17 = (uint64_t *)((char *)a1 + v15 + 24);
        if (v16 != v17)
        {
          if ((*v17 & 7) != 0)
          {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            uint64_t v14 = *v16;
          }
          uint64_t *v17 = v14;
          *uint64_t v16 = 0;
        }
        if (v15 == -16) {
          break;
        }
        uint64_t v14 = *(uint64_t *)((char *)a1 + v15 + 8);
        v15 -= 8;
        if (v13 >= (v14 & 0xFFFFFFFFFFFFFFF8))
        {
          uint64_t v18 = (uint64_t *)((char *)a1 + v15 + 24);
          goto LABEL_16;
        }
      }
      uint64_t v18 = a1;
LABEL_16:
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t *v18 = v12;
      if (++v11 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t sub_216A93E08(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = sub_216A9397C(a1, a2, a3);
  uint64_t v9 = *a3;
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) < (*a3 & 0xFFFFFFFFFFFFFFF8))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) < (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if ((*a2 & 0xFFFFFFFFFFFFFFF8) < (*a1 & 0xFFFFFFFFFFFFFFF8))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_216A93EA4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = sub_216A93E08(a1, a2, a3, a4);
  uint64_t v11 = *a4;
  if ((*a5 & 0xFFFFFFFFFFFFFFF8) < (*a4 & 0xFFFFFFFFFFFFFFF8))
  {
    *a4 = *a5;
    *a5 = v11;
    uint64_t v12 = *a3;
    if ((*a4 & 0xFFFFFFFFFFFFFFF8) < (*a3 & 0xFFFFFFFFFFFFFFF8))
    {
      *a3 = *a4;
      *a4 = v12;
      uint64_t v13 = *a2;
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) < (*a2 & 0xFFFFFFFFFFFFFFF8))
      {
        *a2 = *a3;
        *a3 = v13;
        uint64_t v14 = *a1;
        if ((*a2 & 0xFFFFFFFFFFFFFFF8) < (*a1 & 0xFFFFFFFFFFFFFFF8))
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_216A93F6C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        sub_216A94100((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        uint64_t v15 = *v14;
        if ((*v14 & 0xFFFFFFFFFFFFFFF8) < (*a1 & 0xFFFFFFFFFFFFFFF8))
        {
          *uint64_t v14 = *a1;
          *a1 = v15;
          sub_216A94100((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      uint64_t v17 = a2 - 1;
      do
      {
        uint64_t v18 = *a1;
        *a1 = 0;
        int v19 = sub_216A94228(a1, a4, v16);
        uint64_t v20 = *v19;
        uint64_t v21 = *v19 & 7;
        if (v17 == v19)
        {
          if (v21) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t *v19 = v18;
        }
        else
        {
          if (v21) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t *v19 = *v17;
          uint64_t *v17 = v18;
          sub_216A942C0((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_216A94100(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (uint64_t *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v6 + 2 >= a3)
      {
        uint64_t v10 = *v8;
      }
      else
      {
        uint64_t v10 = *v8;
        if ((*v8 & 0xFFFFFFFFFFFFFFF8) < (v8[1] & 0xFFFFFFFFFFFFFFF8))
        {
          uint64_t v10 = v8[1];
          ++v8;
          uint64_t v7 = v9;
        }
      }
      unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v12 = *a4;
      unint64_t v13 = *a4 & 0xFFFFFFFFFFFFFFF8;
      if (v11 >= v13)
      {
        *a4 = 0;
        do
        {
          uint64_t v14 = v8;
          if (v8 != a4)
          {
            if ((*a4 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*a4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            *a4 = *v8;
            uint64_t *v8 = 0;
          }
          if (v5 < v7) {
            break;
          }
          uint64_t v15 = (2 * v7) | 1;
          uint64_t v8 = (uint64_t *)(result + 8 * v15);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            uint64_t v16 = *v8;
            uint64_t v7 = v15;
          }
          else
          {
            uint64_t v16 = *v8;
            if ((*v8 & 0xFFFFFFFFFFFFFFF8) >= (v8[1] & 0xFFFFFFFFFFFFFFF8))
            {
              uint64_t v7 = v15;
            }
            else
            {
              uint64_t v16 = v8[1];
              ++v8;
            }
          }
          a4 = v14;
        }
        while ((v16 & 0xFFFFFFFFFFFFFFF8) >= v13);
        if ((*v14 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *uint64_t v14 = v12;
      }
    }
  }
  return result;
}

void *sub_216A94228(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = &a1[v3 + 1];
    uint64_t v7 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    if (v7 + 2 < a3 && (*v6 & 0xFFFFFFFFFFFFFFF8) < (v6[1] & 0xFFFFFFFFFFFFFFF8))
    {
      ++v6;
      uint64_t v3 = v7 + 2;
    }
    if (v6 != a1)
    {
      if ((*a1 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *a1 = *v6;
      *uint64_t v6 = 0;
    }
    a1 = v6;
  }
  while (v3 <= v5);
  return v6;
}

uint64_t sub_216A942C0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (void *)(result + 8 * (v4 >> 1));
    uint64_t v9 = *(void *)(a2 - 8);
    uint64_t v7 = (void *)(a2 - 8);
    uint64_t v8 = v9;
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((*v6 & 0xFFFFFFFFFFFFFFF8) < (v9 & 0xFFFFFFFFFFFFFFF8))
    {
      void *v7 = 0;
      do
      {
        unint64_t v11 = v6;
        if (v6 != v7)
        {
          if ((*v7 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          void *v7 = *v6;
          *uint64_t v6 = 0;
        }
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (void *)(result + 8 * v5);
        uint64_t v7 = v11;
      }
      while ((*v6 & 0xFFFFFFFFFFFFFFF8) < v10);
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *unint64_t v11 = v8;
    }
  }
  return result;
}

uint64_t *sub_216A94360(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2168EDFA8(a1 + 1, a3);
  return a1;
}

uint64_t sub_216A943BC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_216A94450(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_216A944DC, (uint64_t)&stru_26C758108);
  }
}

uint64_t sub_216A94450(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000021746C160 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C758108);
}

_DWORD *sub_216A944DC@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(4uLL);
  _DWORD *result = 0;
  *a1 = result;
  a1[1] = sub_216A94524;
  a1[2] = &stru_26C758108;
  return result;
}

void sub_216A94524(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_216A94530(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_216A94584((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_216A94584(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 24)
  {
    uint64_t result = sub_2168EE084(i - 16);
    uint64_t v6 = *(void *)(i - 24);
    uint64_t v5 = v6;
    if ((v6 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void *sub_216A945E8(unsigned char *a1, void *a2)
{
  int v4 = *a1;
  uint64_t v3 = a1 + 8;
  if (v4)
  {
    return sub_2168ED33C(v3, a2);
  }
  else
  {
    uint64_t result = sub_2168EDFA8(v3, a2);
    *a1 = 1;
  }
  return result;
}

void sub_216A94638(uint64_t a1, void *a2)
{
  int v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    uint64_t v6 = *(char **)a1;
    uint64_t v5 = *(char **)(a1 + 8);
    if ((unint64_t)v5 <= *(void *)a1)
    {
      if (v4 == v6) {
        unint64_t v14 = 1;
      }
      else {
        unint64_t v14 = (v4 - v6) >> 2;
      }
      if (v14 >> 61) {
        sub_21677CA1C();
      }
      uint64_t v15 = (char *)operator new(8 * v14);
      uint64_t v16 = &v15[8 * (v14 >> 2)];
      uint64_t v18 = v4 - v5;
      BOOL v17 = v4 == v5;
      int v4 = v16;
      if (!v17)
      {
        int v4 = &v16[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = &v15[8 * (v14 >> 2)];
        do
        {
          uint64_t v21 = *(void *)v5;
          v5 += 8;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v15[8 * v14];
      if (v6)
      {
        operator delete(v6);
        int v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      uint64_t v7 = (uint64_t)&v5[-*(void *)a1] >> 3;
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = -(v8 >> 1);
      uint64_t v10 = v8 >> 1;
      unint64_t v11 = &v5[-8 * v10];
      int64_t v12 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v10], *(const void **)(a1 + 8), v4 - v5);
        int v4 = *(char **)(a1 + 8);
      }
      unint64_t v13 = &v4[8 * v9];
      int v4 = &v11[v12];
      *(void *)(a1 + 8) = v13;
      *(void *)(a1 + 16) = &v11[v12];
    }
  }
  *(void *)int v4 = *a2;
  *(void *)(a1 + 16) += 8;
}

void sub_216A9475C(void **a1, void *a2)
{
  int v4 = a1[1];
  if (v4 == *a1)
  {
    uint64_t v7 = a1[2];
    uint64_t v6 = a1[3];
    if (v7 >= v6)
    {
      uint64_t v13 = v6 - (unsigned char *)v4;
      BOOL v12 = v13 == 0;
      uint64_t v14 = v13 >> 2;
      if (v12) {
        unint64_t v15 = 1;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15 >> 61) {
        sub_21677CA1C();
      }
      uint64_t v16 = (char *)operator new(8 * v15);
      uint64_t v5 = &v16[(2 * v15 + 6) & 0xFFFFFFFFFFFFFFF8];
      BOOL v17 = v5;
      uint64_t v18 = v7 - (unsigned char *)v4;
      if (v7 != (unsigned char *)v4)
      {
        BOOL v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = &v16[(2 * v15 + 6) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v21 = v4;
        do
        {
          uint64_t v22 = *v21++;
          *(void *)uint64_t v20 = v22;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      *a1 = v16;
      a1[1] = v5;
      a1[2] = v17;
      a1[3] = &v16[8 * v15];
      if (v4)
      {
        operator delete(v4);
        uint64_t v5 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v8 = (v6 - v7) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      unint64_t v11 = &v7[8 * (v9 >> 1)];
      uint64_t v5 = &v11[-(v7 - (unsigned char *)v4)];
      if (v7 != (unsigned char *)v4)
      {
        memmove(&v11[-(v7 - (unsigned char *)v4)], v4, v7 - (unsigned char *)v4);
        int v4 = a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[v10];
    }
  }
  else
  {
    uint64_t v5 = (char *)a1[1];
  }
  *((void *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

_DWORD *sub_216A9488C(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 3);
  sub_21697C414(a1 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

uint64_t sub_216A948E0(int a1, uint64_t *a2, uint64_t *a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  v17[2] = *MEMORY[0x263EF8340];
  char v16 = 0;
  uint64_t result = sub_216A94A38(a9, a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5);
  if (result)
  {
    v15[1] = 0;
    sub_216A94AA8(a10, a2, v15);
    sub_2168EE084((uint64_t)v15);
    if (v16)
    {
      uint64_t result = (uint64_t)sub_21697DC0C(v17, (void *)(a10[1] - 16));
    }
    else
    {
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a3);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v14, a4, (const pxrInternal__aapl__pxrReserved__::TfToken *)a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v15);
      sub_21697DC0C(v15, (void *)(a10[1] - 16));
      uint64_t result = sub_2168EE084((uint64_t)v15);
    }
  }
  if (v16) {
    return sub_2168EE084((uint64_t)v17);
  }
  return result;
}

void sub_216A94A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14)
{
  if (a13) {
    sub_2168EE084((uint64_t)&a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216A94A38(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  int v9 = a2;
  char v8 = a6;
  uint64_t v6 = *(void *)(a1 + 24);
  if (!v6) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t, uint64_t, char *))(*(void *)v6 + 48))(v6, &v9, a3, a4, a5, &v8);
}

uint64_t sub_216A94AA8(uint64_t *a1, uint64_t *a2, void *a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void *)(v6 - 8);
  if (v9 >= v8)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a1) >> 3);
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= v11 + 1) {
      uint64_t v13 = v11 + 1;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v14 = v13;
    }
    uint64_t v21 = v6;
    if (v14) {
      unint64_t v15 = (char *)sub_216782ED8(v6, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    BOOL v17 = v15;
    uint64_t v18 = (uint64_t *)&v15[24 * v11];
    uint64_t v20 = &v15[24 * v14];
    sub_216A94360(v18, a2, a3);
    uint64_t v19 = v18 + 3;
    sub_216A94BDC(a1, &v17);
    uint64_t v10 = a1[1];
    sub_216A94DA0((uint64_t)&v17);
  }
  else
  {
    sub_216A94360(*(uint64_t **)(v6 - 8), a2, a3);
    uint64_t v10 = v9 + 24;
    a1[1] = v9 + 24;
  }
  a1[1] = v10;
  return v10 - 24;
}

void sub_216A94BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216A94DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216A94BDC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216A94C54((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216A94C54(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      uint64_t v10 = *(v9 - 3);
      v9 -= 3;
      *(void *)(v7 - 24) = v10;
      *unint64_t v9 = 0;
      sub_2168EDFA8((void *)(v7 - 16), v9 + 1);
      uint64_t v7 = *((void *)&v16 + 1) - 24;
      *((void *)&v16 + 1) -= 24;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216A94D04((uint64_t)v13);
  return v11;
}

uint64_t sub_216A94D04(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216A94D3C(a1);
  }
  return a1;
}

uint64_t sub_216A94D3C(uint64_t result)
{
  uint64_t v1 = *(void **)(*(void *)(result + 16) + 8);
  for (uint64_t i = *(void **)(*(void *)(result + 8) + 8); v1 != i; v1 += 3)
  {
    uint64_t result = sub_2168EE084((uint64_t)(v1 + 1));
    if ((*v1 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

uint64_t sub_216A94DA0(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_216A94DD8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 24;
      uint64_t result = sub_2168EE084(v2 - 16);
      uint64_t v5 = *(void *)(v2 - 24);
      if ((v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v2 = *(void *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void *sub_216A94E44(void *a1, void *a2)
{
  if (a2 != a1)
  {
    if ((*a1 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *a1 = *a2;
    *a2 = 0;
  }
  sub_2168ED33C(a1 + 1, a2 + 1);
  return a1;
}

void *sub_216A94EA0(void *a1, void *a2, void *a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_216A94E44(a3, v4);
      v4 += 3;
      a3 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

_DWORD *sub_216A94F00(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_216A94F10(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_216A94F1C()
{
  return 1;
}

unint64_t sub_216A94F24(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_216A94F44(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_216A94F58(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_216A94F70()
{
  return 0;
}

void *sub_216A94F80()
{
  return &unk_26C758108;
}

uint64_t sub_216A94F8C()
{
  return 0;
}

uint64_t sub_216A94F94()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216A94FA0()
{
  return 0;
}

uint64_t sub_216A94FA8()
{
  return 0;
}

BOOL sub_216A94FB0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000021746C160 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216A94FEC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C758108, a2, a3);
}

void *sub_216A95010()
{
  return &unk_26C758108;
}

_DWORD *sub_216A95020@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26C758118 + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

void *sub_216A9503C(unsigned int *a1, void *a2)
{
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C758108, *a1, (uint64_t)__p);
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  uint64_t v5 = sub_216779180(a2, (uint64_t)v3, v4);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_216A950B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216A950D0(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v14[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216782ED8(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[24 * v9];
  *(void *)uint64_t v11 = *a2;
  *a2 = 0;
  sub_2168EDFA8((void *)v11 + 1, a2 + 1);
  v14[2] = v11 + 24;
  sub_216A94BDC(a1, v14);
  uint64_t v12 = a1[1];
  sub_216A94DA0((uint64_t)v14);
  return v12;
}

void sub_216A951C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216A94DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216A951DC(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, char a3, char a4)
{
  v28[2] = *(char ***)MEMORY[0x263EF8340];
  uint64_t v7 = *(uint64_t **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v9 = *(uint64_t **)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v10 = *(void **)(a1 + 32);
  v27[0] = 0;
  LOBYTE(v25) = 0;
  if (sub_216A956EC(v8, (uint64_t)a2, (uint64_t)v7, v6, a3, (uint64_t)v9, v6 + 8, a4, (uint64_t)v27, (uint64_t)&v25))
  {
    if (!v27[0] || !(_BYTE)v25)
    {
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v7);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v6, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v23);
      sub_216A945E8(v27, v23);
      sub_2168EE084((uint64_t)v23);
      sub_216A97E88(&v25, (uint64_t)v27);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v12) {
      uint64_t v12 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    }
    if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v12 & 0xFFFFFFFFFFFFFFF8))
    {
      sub_216A95754(a2, v28, (pxrInternal__aapl__pxrReserved__::VtValue *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
    }
    else
    {
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      if (!v13) {
        uint64_t v13 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      }
      if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v13 + 3) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216A95BC4(a2, v28, (pxrInternal__aapl__pxrReserved__::VtValue *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
      }
      else
      {
        char v14 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        if (!v14) {
          char v14 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        }
        if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v14 + 2) & 0xFFFFFFFFFFFFFFF8))
        {
          sub_216A96034(a2, v28, (pxrInternal__aapl__pxrReserved__::VtValue *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
        }
        else
        {
          long long v15 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v15) {
            long long v15 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          }
          if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v15 + 1) & 0xFFFFFFFFFFFFFFF8))
          {
            sub_216A96488(a2, v28, (pxrInternal__aapl__pxrReserved__::VtValue *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
          }
          else
          {
            long long v16 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
            if (!v16) {
              long long v16 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
            }
            if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v16 + 6) & 0xFFFFFFFFFFFFFFF8))
            {
              sub_216A968C8(a2, v28, (pxrInternal__aapl__pxrReserved__::VtValue *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
            }
            else
            {
              BOOL v17 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
              if (!v17) {
                BOOL v17 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
              }
              if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v17 + 7) & 0xFFFFFFFFFFFFFFF8))
              {
                sub_216A96D38(a2, v28, (pxrInternal__aapl__pxrReserved__::VtValue *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
              }
              else
              {
                uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                if (!v18) {
                  uint64_t v18 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                }
                if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v18 + 8) & 0xFFFFFFFFFFFFFFF8))
                {
                  sub_216A9718C(a2, v28, (pxrInternal__aapl__pxrReserved__::VtValue *)v26, (pxrInternal__aapl__pxrReserved__::TfToken *)v6, v9, (pxrInternal__aapl__pxrReserved__::TfToken *)(v6 + 8), a4, v10);
                }
                else
                {
                  uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                  if (!v19) {
                    uint64_t v19 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                  }
                  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v19 + 5) & 0xFFFFFFFFFFFFFFF8))
                  {
                    sub_216A975E0(a2, v28, (pxrInternal__aapl__pxrReserved__::VtValue *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
                  }
                  else
                  {
                    uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                    if (!v20) {
                      uint64_t v20 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                    }
                    unint64_t v21 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
                    if (v21 == (*((void *)v20 + 4) & 0xFFFFFFFFFFFFFFF8))
                    {
                      sub_216A97A34(a2, v28, (pxrInternal__aapl__pxrReserved__::VtValue *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
                    }
                    else
                    {
                      v23[0] = "sdf/copyUtils.cpp";
                      v23[1] = "_ProcessChildField";
                      v23[2] = 261;
                      v23[3] = "void pxrInternal__aapl__pxrReserved__::_ProcessChildField(const TfToken &, const SdfLayer"
                               "Handle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, const Sdf"
                               "ShouldCopyChildrenFn &, _CopyStack *)";
                      char v24 = 0;
                      if (v21)
                      {
                        uint64_t v22 = (const char *)(v21 + 16);
                        if (*(char *)(v21 + 39) < 0) {
                          uint64_t v22 = *(const char **)v22;
                        }
                      }
                      else
                      {
                        uint64_t v22 = "";
                      }
                      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Unknown child field '%s'", v22);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if ((_BYTE)v25) {
    sub_2168EE084((uint64_t)v26);
  }
  if (v27[0]) {
    sub_2168EE084((uint64_t)v28);
  }
}

void sub_216A9569C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  if (a16) {
    sub_2168EE084((uint64_t)&a17);
  }
  if (a19) {
    sub_2168EE084((uint64_t)&a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216A956EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  char v13 = a5;
  char v12 = a8;
  uint64_t v10 = *(void *)(a1 + 24);
  if (!v10) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, char *, uint64_t *, uint64_t *))(*(void *)v10 + 48))(v10, a2, a3, a4, &v13, a6, a7, &v12, &a9, &a10);
}

void sub_216A95754(const pxrInternal__aapl__pxrReserved__::TfToken *a1, char ***a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, char a7, void *a8)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if ((sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)a2) & 1) != 0
    || !a2[1]
    || (uint64_t v39 = (char **)"sdf/copyUtils.cpp",
        unint64_t v40 = "_ProcessChildren",
        uint64_t v41 = 122,
        unint64_t v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue &,"
              " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopyStack "
              "*) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]",
        char v43 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "srcChildrenValue.IsHolding<ChildrenVector>() || srcChildrenValue.IsEmpty()", 0)))
  {
    char v16 = sub_2169DC8C8(a3);
    char v17 = *((void *)a3 + 1) ? v16 : 1;
    if ((v17 & 1) != 0
      || (uint64_t v34 = "sdf/copyUtils.cpp",
          unint64_t v35 = "_ProcessChildren",
          uint64_t v36 = 124,
          uint64_t v37 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue "
                "&, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopySt"
                "ack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]",
          char v38 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v34, "dstChildrenValue.IsHolding<ChildrenVector>() || dstChildrenValue.IsEmpty()", 0) & 1) != 0))
    {
      uint64_t v34 = 0;
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v18 = a2[1];
      if (v18)
      {
        if ((v18 & 4) != 0) {
          uint64_t v19 = (char **)(*(uint64_t (**)(char ***))(((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
        }
        else {
          uint64_t v19 = *a2;
        }
      }
      else
      {
        uint64_t v19 = &v34;
      }
      uint64_t v20 = *((void *)a3 + 1);
      uint64_t v31 = a5;
      char v32 = a7;
      if (v20)
      {
        if ((v20 & 4) != 0) {
          unint64_t v21 = (char **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
        }
                                                                                                + 168))(a3);
        else {
          unint64_t v21 = *(char ***)a3;
        }
      }
      else
      {
        unint64_t v21 = &v34;
      }
      uint64_t v22 = *v19;
      if (v19[1] != *v19)
      {
        uint64_t v23 = 0;
        unint64_t v24 = 0;
        do
        {
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v22[v23])
            && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&(*v21)[v23]))
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&(*v19)[v23], &v39);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&(*v21)[v23], &v44);
            sub_216A97F04(a8, &v39, &v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
            sub_21697C414(&v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
            sub_21697C414(&v39);
          }
          ++v24;
          uint64_t v22 = *v19;
          v23 += 8;
        }
        while (v24 < (v19[1] - *v19) >> 3);
      }
      if (v32)
      {
        uint64_t v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v31);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v25, a6, a1, (pxrInternal__aapl__pxrReserved__::VtValue *)&v44);
        if ((sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v44) & 1) != 0
          || (uint64_t v39 = (char **)"sdf/copyUtils.cpp",
              unint64_t v40 = "_ProcessChildren",
              uint64_t v41 = 153,
              unint64_t v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtVa"
                    "lue &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL,"
                    " _CopyStack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]",
              char v43 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "oldDstChildrenValue.IsHolding<ChildrenVector>()", 0) & 1) != 0))
        {
          uint64_t v26 = (v45 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(&v44) : v44;
          int v27 = *(const pxrInternal__aapl__pxrReserved__::SdfPath **)v26;
          int v28 = *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(v26 + 8);
          if (*(const pxrInternal__aapl__pxrReserved__::SdfPath **)v26 != v28)
          {
            do
            {
              uint64_t v30 = *v21;
              int v29 = v21[1];
              if (*v21 != v29)
              {
                while (*(void *)v30 != *(void *)v27)
                {
                  v30 += 8;
                  if (v30 == v29)
                  {
                    uint64_t v30 = v21[1];
                    break;
                  }
                }
              }
              if (v30 == v29)
              {
                pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a6, v27, &v39);
                uint64_t v33 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v33 + 1);
                sub_216A97F04(a8, &v33, &v39);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
                sub_21697C414(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
                sub_21697C414(&v39);
              }
              int v27 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v27 + 8);
            }
            while (v27 != v28);
          }
        }
        sub_2168EE084((uint64_t)&v44);
      }
      uint64_t v39 = &v34;
      sub_216981168((void ***)&v39);
    }
  }
}

void sub_216A95B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  a22 = (void **)&a12;
  sub_216981168(&a22);
  _Unwind_Resume(a1);
}

void sub_216A95BC4(const pxrInternal__aapl__pxrReserved__::TfToken *a1, char ***a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, char a7, void *a8)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if ((sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)a2) & 1) != 0
    || !a2[1]
    || (uint64_t v39 = (char **)"sdf/copyUtils.cpp",
        unint64_t v40 = "_ProcessChildren",
        uint64_t v41 = 122,
        unint64_t v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue &,"
              " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopyStack "
              "*) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy]",
        char v43 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "srcChildrenValue.IsHolding<ChildrenVector>() || srcChildrenValue.IsEmpty()", 0)))
  {
    char v16 = sub_2169DC8C8(a3);
    char v17 = *((void *)a3 + 1) ? v16 : 1;
    if ((v17 & 1) != 0
      || (uint64_t v34 = "sdf/copyUtils.cpp",
          unint64_t v35 = "_ProcessChildren",
          uint64_t v36 = 124,
          uint64_t v37 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue "
                "&, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopySt"
                "ack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy]",
          char v38 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v34, "dstChildrenValue.IsHolding<ChildrenVector>() || dstChildrenValue.IsEmpty()", 0) & 1) != 0))
    {
      uint64_t v34 = 0;
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v18 = a2[1];
      if (v18)
      {
        if ((v18 & 4) != 0) {
          uint64_t v19 = (char **)(*(uint64_t (**)(char ***))(((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
        }
        else {
          uint64_t v19 = *a2;
        }
      }
      else
      {
        uint64_t v19 = &v34;
      }
      uint64_t v20 = *((void *)a3 + 1);
      uint64_t v31 = a5;
      char v32 = a7;
      if (v20)
      {
        if ((v20 & 4) != 0) {
          unint64_t v21 = (char **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
        }
                                                                                                + 168))(a3);
        else {
          unint64_t v21 = *(char ***)a3;
        }
      }
      else
      {
        unint64_t v21 = &v34;
      }
      uint64_t v22 = *v19;
      if (v19[1] != *v19)
      {
        uint64_t v23 = 0;
        unint64_t v24 = 0;
        do
        {
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v22[v23])
            && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&(*v21)[v23]))
          {
            sub_216A64ABC(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)&(*v19)[v23], &v39);
            sub_216A64ABC(a6, (pxrInternal__aapl__pxrReserved__::SdfPath *)&(*v21)[v23], &v44);
            sub_216A97F04(a8, &v39, &v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
            sub_21697C414(&v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
            sub_21697C414(&v39);
          }
          ++v24;
          uint64_t v22 = *v19;
          v23 += 8;
        }
        while (v24 < (v19[1] - *v19) >> 3);
      }
      if (v32)
      {
        uint64_t v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v31);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v25, a6, a1, (pxrInternal__aapl__pxrReserved__::VtValue *)&v44);
        if ((sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v44) & 1) != 0
          || (uint64_t v39 = (char **)"sdf/copyUtils.cpp",
              unint64_t v40 = "_ProcessChildren",
              uint64_t v41 = 153,
              unint64_t v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtVa"
                    "lue &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL,"
                    " _CopyStack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy]",
              char v43 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "oldDstChildrenValue.IsHolding<ChildrenVector>()", 0) & 1) != 0))
        {
          uint64_t v26 = (v45 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(&v44) : v44;
          int v27 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)v26;
          int v28 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(v26 + 8);
          if (*(pxrInternal__aapl__pxrReserved__::SdfPath **)v26 != v28)
          {
            do
            {
              uint64_t v30 = *v21;
              int v29 = v21[1];
              if (*v21 != v29)
              {
                while (*(void *)v30 != *(void *)v27)
                {
                  v30 += 8;
                  if (v30 == v29)
                  {
                    uint64_t v30 = v21[1];
                    break;
                  }
                }
              }
              if (v30 == v29)
              {
                sub_216A64ABC(a6, v27, &v39);
                uint64_t v33 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v33 + 1);
                sub_216A97F04(a8, &v33, &v39);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
                sub_21697C414(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
                sub_21697C414(&v39);
              }
              int v27 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v27 + 8);
            }
            while (v27 != v28);
          }
        }
        sub_2168EE084((uint64_t)&v44);
      }
      uint64_t v39 = &v34;
      sub_216981168((void ***)&v39);
    }
  }
}

void sub_216A95F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  a22 = (void **)&a12;
  sub_216981168(&a22);
  _Unwind_Resume(a1);
}

void sub_216A96034(const pxrInternal__aapl__pxrReserved__::TfToken *a1, char ***a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, char a7, void *a8)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if ((sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)a2) & 1) != 0
    || !a2[1]
    || (uint64_t v39 = (char **)"sdf/copyUtils.cpp",
        unint64_t v40 = "_ProcessChildren",
        uint64_t v41 = 122,
        unint64_t v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue &,"
              " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopyStack "
              "*) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy]",
        char v43 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "srcChildrenValue.IsHolding<ChildrenVector>() || srcChildrenValue.IsEmpty()", 0)))
  {
    char v16 = sub_21697BFBC(a3);
    char v17 = *((void *)a3 + 1) ? v16 : 1;
    if ((v17 & 1) != 0
      || (uint64_t v34 = "sdf/copyUtils.cpp",
          unint64_t v35 = "_ProcessChildren",
          uint64_t v36 = 124,
          uint64_t v37 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue "
                "&, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopySt"
                "ack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy]",
          char v38 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v34, "dstChildrenValue.IsHolding<ChildrenVector>() || dstChildrenValue.IsEmpty()", 0) & 1) != 0))
    {
      uint64_t v34 = 0;
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v18 = a2[1];
      if (v18)
      {
        if ((v18 & 4) != 0) {
          uint64_t v19 = (char **)(*(uint64_t (**)(char ***))(((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
        }
        else {
          uint64_t v19 = *a2;
        }
      }
      else
      {
        uint64_t v19 = &v34;
      }
      uint64_t v20 = *((void *)a3 + 1);
      char v32 = a7;
      if (v20)
      {
        if ((v20 & 4) != 0) {
          unint64_t v21 = (char **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
        }
                                                                                                + 168))(a3);
        else {
          unint64_t v21 = *(char ***)a3;
        }
      }
      else
      {
        unint64_t v21 = &v34;
      }
      uint64_t v23 = *v19;
      uint64_t v22 = v19[1];
      if (v22 != *v19)
      {
        unint64_t v24 = 0;
        do
        {
          uint64_t v25 = (const pxrInternal__aapl__pxrReserved__::TfToken *)&v23[8 * v24];
          if (*(void *)v25 && *(void *)&(*v21)[8 * v24])
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg(a4, v25, &v39);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg(a6, (const pxrInternal__aapl__pxrReserved__::TfToken *)&(*v21)[8 * v24], &v44);
            sub_216A97F04(a8, &v39, &v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
            sub_21697C414(&v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
            sub_21697C414(&v39);
            uint64_t v23 = *v19;
            uint64_t v22 = v19[1];
          }
          ++v24;
        }
        while (v24 < (v22 - v23) >> 3);
      }
      if (v32)
      {
        uint64_t v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a5);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v26, a6, a1, (pxrInternal__aapl__pxrReserved__::VtValue *)&v44);
        if ((sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v44) & 1) != 0
          || (uint64_t v39 = (char **)"sdf/copyUtils.cpp",
              unint64_t v40 = "_ProcessChildren",
              uint64_t v41 = 153,
              unint64_t v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtVa"
                    "lue &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL,"
                    " _CopyStack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy]",
              char v43 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "oldDstChildrenValue.IsHolding<ChildrenVector>()", 0) & 1) != 0))
        {
          uint64_t v27 = (v45 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(&v44) : v44;
          int v28 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)v27;
          int v29 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(v27 + 8);
          if (*(const pxrInternal__aapl__pxrReserved__::TfToken **)v27 != v29)
          {
            do
            {
              uint64_t v31 = *v21;
              uint64_t v30 = v21[1];
              if (*v21 != v30)
              {
                while ((*(void *)v31 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v28 & 0xFFFFFFFFFFFFFFF8))
                {
                  v31 += 8;
                  if (v31 == v30)
                  {
                    uint64_t v31 = v21[1];
                    break;
                  }
                }
              }
              if (v31 == v30)
              {
                pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg(a6, v28, &v39);
                uint64_t v33 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v33 + 1);
                sub_216A97F04(a8, &v33, &v39);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
                sub_21697C414(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
                sub_21697C414(&v39);
              }
              int v28 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v28 + 8);
            }
            while (v28 != v29);
          }
        }
        sub_2168EE084((uint64_t)&v44);
      }
      uint64_t v39 = &v34;
      sub_216889A04((void ***)&v39);
    }
  }
}

void sub_216A963E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  a22 = (void **)&a12;
  sub_216889A04(&a22);
  _Unwind_Resume(a1);
}

void sub_216A96488(const pxrInternal__aapl__pxrReserved__::TfToken *a1, char ***a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, char a7, void *a8)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if ((sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)a2) & 1) != 0
    || !a2[1]
    || (uint64_t v37 = (char **)"sdf/copyUtils.cpp",
        char v38 = "_ProcessChildren",
        uint64_t v39 = 122,
        unint64_t v40 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue &,"
              " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopyStack "
              "*) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy]",
        char v41 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v37, "srcChildrenValue.IsHolding<ChildrenVector>() || srcChildrenValue.IsEmpty()", 0)))
  {
    char v16 = sub_21697BFBC(a3);
    char v17 = *((void *)a3 + 1) ? v16 : 1;
    if ((v17 & 1) != 0
      || (char v32 = "sdf/copyUtils.cpp",
          uint64_t v33 = "_ProcessChildren",
          uint64_t v34 = 124,
          unint64_t v35 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue "
                "&, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopySt"
                "ack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy]",
          char v36 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v32, "dstChildrenValue.IsHolding<ChildrenVector>() || dstChildrenValue.IsEmpty()", 0) & 1) != 0))
    {
      char v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v18 = a2[1];
      if (v18)
      {
        if ((v18 & 4) != 0) {
          uint64_t v19 = (char **)(*(uint64_t (**)(char ***))(((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
        }
        else {
          uint64_t v19 = *a2;
        }
      }
      else
      {
        uint64_t v19 = &v32;
      }
      uint64_t v20 = *((void *)a3 + 1);
      if (v20)
      {
        if ((v20 & 4) != 0) {
          unint64_t v21 = (char **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
        }
                                                                                                + 168))(a3);
        else {
          unint64_t v21 = *(char ***)a3;
        }
      }
      else
      {
        unint64_t v21 = &v32;
      }
      uint64_t v23 = *v19;
      uint64_t v22 = v19[1];
      if (v22 != *v19)
      {
        unint64_t v24 = 0;
        do
        {
          if (*(void *)&v23[8 * v24] && *(void *)&(*v21)[8 * v24])
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression(a4, &v37);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression(a6, &v42);
            sub_216A97F04(a8, &v37, &v42);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v42 + 1);
            sub_21697C414(&v42);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
            sub_21697C414(&v37);
            uint64_t v23 = *v19;
            uint64_t v22 = v19[1];
          }
          ++v24;
        }
        while (v24 < (v22 - v23) >> 3);
      }
      if (a7)
      {
        uint64_t v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a5);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v25, a6, a1, (pxrInternal__aapl__pxrReserved__::VtValue *)&v42);
        if ((sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v42) & 1) != 0
          || (uint64_t v37 = (char **)"sdf/copyUtils.cpp",
              char v38 = "_ProcessChildren",
              uint64_t v39 = 153,
              unint64_t v40 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtVa"
                    "lue &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL,"
                    " _CopyStack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy]",
              char v41 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v37, "oldDstChildrenValue.IsHolding<ChildrenVector>()", 0) & 1) != 0))
        {
          uint64_t v26 = (v43 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v43 & 0xFFFFFFFFFFFFFFF8) + 168))(&v42) : v42;
          uint64_t v27 = *(void **)v26;
          int v28 = *(void **)(v26 + 8);
          if (*(void **)v26 != v28)
          {
            do
            {
              uint64_t v30 = *v21;
              int v29 = v21[1];
              if (*v21 != v29)
              {
                while ((*(void *)v30 & 0xFFFFFFFFFFFFFFF8) != (*v27 & 0xFFFFFFFFFFFFFFF8))
                {
                  v30 += 8;
                  if (v30 == v29)
                  {
                    uint64_t v30 = v21[1];
                    break;
                  }
                }
              }
              if (v30 == v29)
              {
                pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression(a6, &v37);
                uint64_t v31 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v31);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v31 + 1);
                sub_216A97F04(a8, &v31, &v37);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
                sub_21697C414(&v31);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
                sub_21697C414(&v37);
              }
              ++v27;
            }
            while (v27 != v28);
          }
        }
        sub_2168EE084((uint64_t)&v42);
      }
      uint64_t v37 = &v32;
      sub_216889A04((void ***)&v37);
    }
  }
}

void sub_216A96828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  a22 = (void **)&a12;
  sub_216889A04(&a22);
  _Unwind_Resume(a1);
}

void sub_216A968C8(const pxrInternal__aapl__pxrReserved__::TfToken *a1, char ***a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, char a7, void *a8)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if ((sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)a2) & 1) != 0
    || !a2[1]
    || (uint64_t v39 = (char **)"sdf/copyUtils.cpp",
        unint64_t v40 = "_ProcessChildren",
        uint64_t v41 = 122,
        uint64_t v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue &,"
              " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopyStack "
              "*) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]",
        char v43 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "srcChildrenValue.IsHolding<ChildrenVector>() || srcChildrenValue.IsEmpty()", 0)))
  {
    char v16 = sub_2169DC8C8(a3);
    char v17 = *((void *)a3 + 1) ? v16 : 1;
    if ((v17 & 1) != 0
      || (uint64_t v34 = "sdf/copyUtils.cpp",
          unint64_t v35 = "_ProcessChildren",
          uint64_t v36 = 124,
          uint64_t v37 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue "
                "&, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopySt"
                "ack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]",
          char v38 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v34, "dstChildrenValue.IsHolding<ChildrenVector>() || dstChildrenValue.IsEmpty()", 0) & 1) != 0))
    {
      uint64_t v34 = 0;
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v18 = a2[1];
      if (v18)
      {
        if ((v18 & 4) != 0) {
          uint64_t v19 = (char **)(*(uint64_t (**)(char ***))(((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
        }
        else {
          uint64_t v19 = *a2;
        }
      }
      else
      {
        uint64_t v19 = &v34;
      }
      uint64_t v20 = *((void *)a3 + 1);
      uint64_t v31 = a5;
      char v32 = a7;
      if (v20)
      {
        if ((v20 & 4) != 0) {
          unint64_t v21 = (char **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
        }
                                                                                                + 168))(a3);
        else {
          unint64_t v21 = *(char ***)a3;
        }
      }
      else
      {
        unint64_t v21 = &v34;
      }
      uint64_t v22 = *v19;
      if (v19[1] != *v19)
      {
        uint64_t v23 = 0;
        unint64_t v24 = 0;
        do
        {
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v22[v23])
            && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&(*v21)[v23]))
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&(*v19)[v23], &v39);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&(*v21)[v23], &v44);
            sub_216A97F04(a8, &v39, &v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
            sub_21697C414(&v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
            sub_21697C414(&v39);
          }
          ++v24;
          uint64_t v22 = *v19;
          v23 += 8;
        }
        while (v24 < (v19[1] - *v19) >> 3);
      }
      if (v32)
      {
        uint64_t v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v31);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v25, a6, a1, (pxrInternal__aapl__pxrReserved__::VtValue *)&v44);
        if ((sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v44) & 1) != 0
          || (uint64_t v39 = (char **)"sdf/copyUtils.cpp",
              unint64_t v40 = "_ProcessChildren",
              uint64_t v41 = 153,
              uint64_t v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtVa"
                    "lue &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL,"
                    " _CopyStack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]",
              char v43 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "oldDstChildrenValue.IsHolding<ChildrenVector>()", 0) & 1) != 0))
        {
          uint64_t v26 = (v45 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(&v44) : v44;
          uint64_t v27 = *(const pxrInternal__aapl__pxrReserved__::SdfPath **)v26;
          int v28 = *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(v26 + 8);
          if (*(const pxrInternal__aapl__pxrReserved__::SdfPath **)v26 != v28)
          {
            do
            {
              uint64_t v30 = *v21;
              int v29 = v21[1];
              if (*v21 != v29)
              {
                while (*(void *)v30 != *(void *)v27)
                {
                  v30 += 8;
                  if (v30 == v29)
                  {
                    uint64_t v30 = v21[1];
                    break;
                  }
                }
              }
              if (v30 == v29)
              {
                pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a6, v27, &v39);
                uint64_t v33 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v33 + 1);
                sub_216A97F04(a8, &v33, &v39);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
                sub_21697C414(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
                sub_21697C414(&v39);
              }
              uint64_t v27 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v27 + 8);
            }
            while (v27 != v28);
          }
        }
        sub_2168EE084((uint64_t)&v44);
      }
      uint64_t v39 = &v34;
      sub_216981168((void ***)&v39);
    }
  }
}

void sub_216A96C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  a22 = (void **)&a12;
  sub_216981168(&a22);
  _Unwind_Resume(a1);
}

void sub_216A96D38(const pxrInternal__aapl__pxrReserved__::TfToken *a1, char ***a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, char a7, void *a8)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if ((sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)a2) & 1) != 0
    || !a2[1]
    || (uint64_t v39 = (char **)"sdf/copyUtils.cpp",
        unint64_t v40 = "_ProcessChildren",
        uint64_t v41 = 122,
        uint64_t v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue &,"
              " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopyStack "
              "*) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]",
        char v43 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "srcChildrenValue.IsHolding<ChildrenVector>() || srcChildrenValue.IsEmpty()", 0)))
  {
    char v16 = sub_21697BFBC(a3);
    char v17 = *((void *)a3 + 1) ? v16 : 1;
    if ((v17 & 1) != 0
      || (uint64_t v34 = "sdf/copyUtils.cpp",
          unint64_t v35 = "_ProcessChildren",
          uint64_t v36 = 124,
          uint64_t v37 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue "
                "&, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopySt"
                "ack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]",
          char v38 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v34, "dstChildrenValue.IsHolding<ChildrenVector>() || dstChildrenValue.IsEmpty()", 0) & 1) != 0))
    {
      uint64_t v34 = 0;
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v18 = a2[1];
      if (v18)
      {
        if ((v18 & 4) != 0) {
          uint64_t v19 = (char **)(*(uint64_t (**)(char ***))(((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
        }
        else {
          uint64_t v19 = *a2;
        }
      }
      else
      {
        uint64_t v19 = &v34;
      }
      uint64_t v20 = *((void *)a3 + 1);
      char v32 = a7;
      if (v20)
      {
        if ((v20 & 4) != 0) {
          unint64_t v21 = (char **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
        }
                                                                                                + 168))(a3);
        else {
          unint64_t v21 = *(char ***)a3;
        }
      }
      else
      {
        unint64_t v21 = &v34;
      }
      uint64_t v23 = *v19;
      uint64_t v22 = v19[1];
      if (v22 != *v19)
      {
        unint64_t v24 = 0;
        do
        {
          uint64_t v25 = &v23[8 * v24];
          if (*(void *)v25 && *(void *)&(*v21)[8 * v24])
          {
            sub_216A68404(a4, v25, &v39);
            sub_216A68404(a6, &(*v21)[8 * v24], &v44);
            sub_216A97F04(a8, &v39, &v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
            sub_21697C414(&v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
            sub_21697C414(&v39);
            uint64_t v23 = *v19;
            uint64_t v22 = v19[1];
          }
          ++v24;
        }
        while (v24 < (v22 - v23) >> 3);
      }
      if (v32)
      {
        uint64_t v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a5);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v26, a6, a1, (pxrInternal__aapl__pxrReserved__::VtValue *)&v44);
        if ((sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v44) & 1) != 0
          || (uint64_t v39 = (char **)"sdf/copyUtils.cpp",
              unint64_t v40 = "_ProcessChildren",
              uint64_t v41 = 153,
              uint64_t v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtVa"
                    "lue &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL,"
                    " _CopyStack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]",
              char v43 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "oldDstChildrenValue.IsHolding<ChildrenVector>()", 0) & 1) != 0))
        {
          uint64_t v27 = (v45 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(&v44) : v44;
          int v28 = *(void **)v27;
          int v29 = *(void **)(v27 + 8);
          if (*(void **)v27 != v29)
          {
            do
            {
              uint64_t v31 = *v21;
              uint64_t v30 = v21[1];
              if (*v21 != v30)
              {
                while ((*(void *)v31 & 0xFFFFFFFFFFFFFFF8) != (*v28 & 0xFFFFFFFFFFFFFFF8))
                {
                  v31 += 8;
                  if (v31 == v30)
                  {
                    uint64_t v31 = v21[1];
                    break;
                  }
                }
              }
              if (v31 == v30)
              {
                sub_216A68404(a6, v28, &v39);
                uint64_t v33 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v33 + 1);
                sub_216A97F04(a8, &v33, &v39);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
                sub_21697C414(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
                sub_21697C414(&v39);
              }
              ++v28;
            }
            while (v28 != v29);
          }
        }
        sub_2168EE084((uint64_t)&v44);
      }
      uint64_t v39 = &v34;
      sub_216889A04((void ***)&v39);
    }
  }
}

void sub_216A970EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  a22 = (void **)&a12;
  sub_216889A04(&a22);
  _Unwind_Resume(a1);
}

void sub_216A9718C(const pxrInternal__aapl__pxrReserved__::TfToken *a1, char ***a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::TfToken *a6, char a7, void *a8)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if ((sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)a2) & 1) != 0
    || !a2[1]
    || (uint64_t v39 = (char **)"sdf/copyUtils.cpp",
        unint64_t v40 = "_ProcessChildren",
        uint64_t v41 = 122,
        uint64_t v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue &,"
              " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopyStack "
              "*) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]",
        char v43 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "srcChildrenValue.IsHolding<ChildrenVector>() || srcChildrenValue.IsEmpty()", 0)))
  {
    char v16 = sub_21697BFBC(a3);
    char v17 = *((void *)a3 + 1) ? v16 : 1;
    if ((v17 & 1) != 0
      || (uint64_t v34 = "sdf/copyUtils.cpp",
          unint64_t v35 = "_ProcessChildren",
          uint64_t v36 = 124,
          uint64_t v37 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue "
                "&, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopySt"
                "ack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]",
          char v38 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v34, "dstChildrenValue.IsHolding<ChildrenVector>() || dstChildrenValue.IsEmpty()", 0) & 1) != 0))
    {
      uint64_t v34 = 0;
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v18 = a2[1];
      if (v18)
      {
        if ((v18 & 4) != 0) {
          uint64_t v19 = (char **)(*(uint64_t (**)(char ***))(((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
        }
        else {
          uint64_t v19 = *a2;
        }
      }
      else
      {
        uint64_t v19 = &v34;
      }
      uint64_t v20 = *((void *)a3 + 1);
      char v32 = a7;
      if (v20)
      {
        if ((v20 & 4) != 0) {
          unint64_t v21 = (char **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
        }
                                                                                                + 168))(a3);
        else {
          unint64_t v21 = *(char ***)a3;
        }
      }
      else
      {
        unint64_t v21 = &v34;
      }
      uint64_t v23 = *v19;
      uint64_t v22 = v19[1];
      if (v22 != *v19)
      {
        unint64_t v24 = 0;
        do
        {
          uint64_t v25 = &v23[8 * v24];
          if (*(void *)v25 && *(void *)&(*v21)[8 * v24])
          {
            sub_216A69174(a4, v25, &v39);
            sub_216A69174(a6, &(*v21)[8 * v24], &v44);
            sub_216A97F04(a8, &v39, &v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
            sub_21697C414(&v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
            sub_21697C414(&v39);
            uint64_t v23 = *v19;
            uint64_t v22 = v19[1];
          }
          ++v24;
        }
        while (v24 < (v22 - v23) >> 3);
      }
      if (v32)
      {
        uint64_t v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a5);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v26, a6, a1, (pxrInternal__aapl__pxrReserved__::VtValue *)&v44);
        if ((sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v44) & 1) != 0
          || (uint64_t v39 = (char **)"sdf/copyUtils.cpp",
              unint64_t v40 = "_ProcessChildren",
              uint64_t v41 = 153,
              uint64_t v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtVa"
                    "lue &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL,"
                    " _CopyStack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]",
              char v43 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "oldDstChildrenValue.IsHolding<ChildrenVector>()", 0) & 1) != 0))
        {
          uint64_t v27 = (v45 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(&v44) : v44;
          int v28 = *(void **)v27;
          int v29 = *(void **)(v27 + 8);
          if (*(void **)v27 != v29)
          {
            do
            {
              uint64_t v31 = *v21;
              uint64_t v30 = v21[1];
              if (*v21 != v30)
              {
                while ((*(void *)v31 & 0xFFFFFFFFFFFFFFF8) != (*v28 & 0xFFFFFFFFFFFFFFF8))
                {
                  v31 += 8;
                  if (v31 == v30)
                  {
                    uint64_t v31 = v21[1];
                    break;
                  }
                }
              }
              if (v31 == v30)
              {
                sub_216A69174(a6, v28, &v39);
                uint64_t v33 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v33 + 1);
                sub_216A97F04(a8, &v33, &v39);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
                sub_21697C414(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
                sub_21697C414(&v39);
              }
              ++v28;
            }
            while (v28 != v29);
          }
        }
        sub_2168EE084((uint64_t)&v44);
      }
      uint64_t v39 = &v34;
      sub_216889A04((void ***)&v39);
    }
  }
}

void sub_216A97540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  a22 = (void **)&a12;
  sub_216889A04(&a22);
  _Unwind_Resume(a1);
}

void sub_216A975E0(const pxrInternal__aapl__pxrReserved__::TfToken *a1, char ***a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, char a7, void *a8)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if ((sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)a2) & 1) != 0
    || !a2[1]
    || (uint64_t v39 = (char **)"sdf/copyUtils.cpp",
        unint64_t v40 = "_ProcessChildren",
        uint64_t v41 = 122,
        uint64_t v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue &,"
              " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopyStack "
              "*) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]",
        char v43 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "srcChildrenValue.IsHolding<ChildrenVector>() || srcChildrenValue.IsEmpty()", 0)))
  {
    char v16 = sub_21697BFBC(a3);
    char v17 = *((void *)a3 + 1) ? v16 : 1;
    if ((v17 & 1) != 0
      || (uint64_t v34 = "sdf/copyUtils.cpp",
          unint64_t v35 = "_ProcessChildren",
          uint64_t v36 = 124,
          uint64_t v37 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue "
                "&, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopySt"
                "ack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]",
          char v38 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v34, "dstChildrenValue.IsHolding<ChildrenVector>() || dstChildrenValue.IsEmpty()", 0) & 1) != 0))
    {
      uint64_t v34 = 0;
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v18 = a2[1];
      if (v18)
      {
        if ((v18 & 4) != 0) {
          uint64_t v19 = (char **)(*(uint64_t (**)(char ***))(((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
        }
        else {
          uint64_t v19 = *a2;
        }
      }
      else
      {
        uint64_t v19 = &v34;
      }
      uint64_t v20 = *((void *)a3 + 1);
      char v32 = a7;
      if (v20)
      {
        if ((v20 & 4) != 0) {
          unint64_t v21 = (char **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
        }
                                                                                                + 168))(a3);
        else {
          unint64_t v21 = *(char ***)a3;
        }
      }
      else
      {
        unint64_t v21 = &v34;
      }
      uint64_t v23 = *v19;
      uint64_t v22 = v19[1];
      if (v22 != *v19)
      {
        unint64_t v24 = 0;
        do
        {
          uint64_t v25 = (const pxrInternal__aapl__pxrReserved__::TfToken *)&v23[8 * v24];
          if (*(void *)v25 && *(void *)&(*v21)[8 * v24])
          {
            sub_216A63E40(a4, v25, (int *)&v39);
            sub_216A63E40(a6, (const pxrInternal__aapl__pxrReserved__::TfToken *)&(*v21)[8 * v24], (int *)&v44);
            sub_216A97F04(a8, &v39, &v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
            sub_21697C414(&v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
            sub_21697C414(&v39);
            uint64_t v23 = *v19;
            uint64_t v22 = v19[1];
          }
          ++v24;
        }
        while (v24 < (v22 - v23) >> 3);
      }
      if (v32)
      {
        uint64_t v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a5);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v26, a6, a1, (pxrInternal__aapl__pxrReserved__::VtValue *)&v44);
        if ((sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v44) & 1) != 0
          || (uint64_t v39 = (char **)"sdf/copyUtils.cpp",
              unint64_t v40 = "_ProcessChildren",
              uint64_t v41 = 153,
              uint64_t v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtVa"
                    "lue &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL,"
                    " _CopyStack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]",
              char v43 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "oldDstChildrenValue.IsHolding<ChildrenVector>()", 0) & 1) != 0))
        {
          uint64_t v27 = (v45 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(&v44) : v44;
          int v28 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)v27;
          int v29 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(v27 + 8);
          if (*(const pxrInternal__aapl__pxrReserved__::TfToken **)v27 != v29)
          {
            do
            {
              uint64_t v31 = *v21;
              uint64_t v30 = v21[1];
              if (*v21 != v30)
              {
                while ((*(void *)v31 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v28 & 0xFFFFFFFFFFFFFFF8))
                {
                  v31 += 8;
                  if (v31 == v30)
                  {
                    uint64_t v31 = v21[1];
                    break;
                  }
                }
              }
              if (v31 == v30)
              {
                sub_216A63E40(a6, v28, (int *)&v39);
                uint64_t v33 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v33 + 1);
                sub_216A97F04(a8, &v33, &v39);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
                sub_21697C414(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
                sub_21697C414(&v39);
              }
              int v28 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v28 + 8);
            }
            while (v28 != v29);
          }
        }
        sub_2168EE084((uint64_t)&v44);
      }
      uint64_t v39 = &v34;
      sub_216889A04((void ***)&v39);
    }
  }
}

void sub_216A97994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  a22 = (void **)&a12;
  sub_216889A04(&a22);
  _Unwind_Resume(a1);
}

void sub_216A97A34(const pxrInternal__aapl__pxrReserved__::TfToken *a1, char ***a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, char a7, void *a8)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if ((sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)a2) & 1) != 0
    || !a2[1]
    || (uint64_t v39 = (char **)"sdf/copyUtils.cpp",
        unint64_t v40 = "_ProcessChildren",
        uint64_t v41 = 122,
        uint64_t v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue &,"
              " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopyStack "
              "*) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]",
        char v43 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "srcChildrenValue.IsHolding<ChildrenVector>() || srcChildrenValue.IsEmpty()", 0)))
  {
    char v16 = sub_21697BFBC(a3);
    char v17 = *((void *)a3 + 1) ? v16 : 1;
    if ((v17 & 1) != 0
      || (uint64_t v34 = "sdf/copyUtils.cpp",
          unint64_t v35 = "_ProcessChildren",
          uint64_t v36 = 124,
          uint64_t v37 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue "
                "&, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopySt"
                "ack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]",
          char v38 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v34, "dstChildrenValue.IsHolding<ChildrenVector>() || dstChildrenValue.IsEmpty()", 0) & 1) != 0))
    {
      uint64_t v34 = 0;
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v18 = a2[1];
      if (v18)
      {
        if ((v18 & 4) != 0) {
          uint64_t v19 = (char **)(*(uint64_t (**)(char ***))(((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
        }
        else {
          uint64_t v19 = *a2;
        }
      }
      else
      {
        uint64_t v19 = &v34;
      }
      uint64_t v20 = *((void *)a3 + 1);
      char v32 = a7;
      if (v20)
      {
        if ((v20 & 4) != 0) {
          unint64_t v21 = (char **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
        }
                                                                                                + 168))(a3);
        else {
          unint64_t v21 = *(char ***)a3;
        }
      }
      else
      {
        unint64_t v21 = &v34;
      }
      uint64_t v23 = *v19;
      uint64_t v22 = v19[1];
      if (v22 != *v19)
      {
        unint64_t v24 = 0;
        do
        {
          uint64_t v25 = (const pxrInternal__aapl__pxrReserved__::TfToken *)&v23[8 * v24];
          if (*(void *)v25 && *(void *)&(*v21)[8 * v24])
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a4, v25, &v39);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a6, (const pxrInternal__aapl__pxrReserved__::TfToken *)&(*v21)[8 * v24], &v44);
            sub_216A97F04(a8, &v39, &v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
            sub_21697C414(&v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
            sub_21697C414(&v39);
            uint64_t v23 = *v19;
            uint64_t v22 = v19[1];
          }
          ++v24;
        }
        while (v24 < (v22 - v23) >> 3);
      }
      if (v32)
      {
        uint64_t v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a5);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v26, a6, a1, (pxrInternal__aapl__pxrReserved__::VtValue *)&v44);
        if ((sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v44) & 1) != 0
          || (uint64_t v39 = (char **)"sdf/copyUtils.cpp",
              unint64_t v40 = "_ProcessChildren",
              uint64_t v41 = 153,
              uint64_t v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtVa"
                    "lue &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL,"
                    " _CopyStack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]",
              char v43 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "oldDstChildrenValue.IsHolding<ChildrenVector>()", 0) & 1) != 0))
        {
          uint64_t v27 = (v45 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(&v44) : v44;
          int v28 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)v27;
          int v29 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(v27 + 8);
          if (*(const pxrInternal__aapl__pxrReserved__::TfToken **)v27 != v29)
          {
            do
            {
              uint64_t v31 = *v21;
              uint64_t v30 = v21[1];
              if (*v21 != v30)
              {
                while ((*(void *)v31 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v28 & 0xFFFFFFFFFFFFFFF8))
                {
                  v31 += 8;
                  if (v31 == v30)
                  {
                    uint64_t v31 = v21[1];
                    break;
                  }
                }
              }
              if (v31 == v30)
              {
                pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a6, v28, &v39);
                uint64_t v33 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v33 + 1);
                sub_216A97F04(a8, &v33, &v39);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
                sub_21697C414(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
                sub_21697C414(&v39);
              }
              int v28 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v28 + 8);
            }
            while (v28 != v29);
          }
        }
        sub_2168EE084((uint64_t)&v44);
      }
      uint64_t v39 = &v34;
      sub_216889A04((void ***)&v39);
    }
  }
}

void sub_216A97DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  a22 = (void **)&a12;
  sub_216889A04(&a22);
  _Unwind_Resume(a1);
}

void *sub_216A97E88(void *result, uint64_t a2)
{
  uint64_t v2 = result;
  if (*(unsigned char *)result)
  {
    if (*(unsigned char *)a2)
    {
      uint64_t v3 = (void *)(a2 + 8);
      unint64_t v4 = result + 1;
      return sub_2168EC6DC(v4, v3);
    }
    else
    {
      uint64_t result = (void *)sub_2168EE084((uint64_t)(result + 1));
      *uint64_t v2 = 0;
    }
  }
  else if (*(unsigned char *)a2)
  {
    uint64_t result = sub_2168EE4C4(result + 1, (void *)(a2 + 8));
    *uint64_t v2 = 1;
  }
  return result;
}

_DWORD *sub_216A97F04(void *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = 32 * (v7 - v6) - 1;
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  if (v8 == a1[5] + a1[4])
  {
    sub_216A97FA8((uint64_t)a1);
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
  }
  if (v7 == v6)
  {
    uint64_t v10 = 0;
  }
  else
  {
    unint64_t v9 = a1[5] + a1[4];
    uint64_t v10 = (_DWORD *)(*(void *)(v6 + ((v9 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v9);
  }
  uint64_t result = sub_2169D36F0(v10, a2, a3);
  ++a1[5];
  return result;
}

void sub_216A97FA8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    unint64_t v5 = *(void **)(a1 + 8);
    uint64_t v6 = *(char **)(a1 + 16);
    uint64_t v9 = *v5;
    uint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    *(void *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
    {
LABEL_44:
      *(void *)uint64_t v6 = v8;
      goto LABEL_45;
    }
    uint64_t v10 = *(char **)a1;
    uint64_t v11 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      if (v6 == v10) {
        unint64_t v31 = 1;
      }
      else {
        unint64_t v31 = (v6 - v10) >> 2;
      }
      if (!(v31 >> 61))
      {
        char v32 = (char *)operator new(8 * v31);
        uint64_t v33 = &v32[8 * (v31 >> 2)];
        uint64_t v34 = &v32[8 * v31];
        uint64_t v36 = v6 - v7;
        BOOL v35 = v6 == v7;
        uint64_t v6 = v33;
        if (!v35)
        {
          uint64_t v6 = &v33[v36 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v37 = 8 * (v36 >> 3);
          char v38 = &v32[8 * (v31 >> 2)];
          do
          {
            uint64_t v39 = *(void *)v7;
            v7 += 8;
            *(void *)char v38 = v39;
            v38 += 8;
            v37 -= 8;
          }
          while (v37);
        }
        goto LABEL_30;
      }
LABEL_56:
      sub_21677CA1C();
    }
LABEL_5:
    uint64_t v12 = v11 >> 3;
    if (v12 >= -1) {
      uint64_t v13 = v12 + 1;
    }
    else {
      uint64_t v13 = v12 + 2;
    }
    uint64_t v14 = -(v13 >> 1);
    uint64_t v15 = v13 >> 1;
    char v16 = &v7[-8 * v15];
    size_t v17 = v6 - v7;
    if (v17)
    {
      memmove(&v7[-8 * v15], v7, v17);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v6 = &v16[v17];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = v6;
    goto LABEL_44;
  }
  uint64_t v18 = *(char **)(a1 + 8);
  uint64_t v19 = *(char **)(a1 + 16);
  uint64_t v20 = *(char **)a1;
  unint64_t v21 = (v19 - v18) >> 3;
  uint64_t v22 = *(char **)(a1 + 24);
  uint64_t v23 = (uint64_t)&v22[-*(void *)a1];
  if (v21 < v23 >> 3)
  {
    unint64_t v24 = operator new(0x1000uLL);
    uint64_t v25 = v24;
    if (v22 != v19)
    {
      *(void *)uint64_t v19 = v24;
LABEL_45:
      *(void *)(a1 + 16) += 8;
      return;
    }
    if (v18 == v20)
    {
      if (v19 == v18) {
        unint64_t v41 = 1;
      }
      else {
        unint64_t v41 = (v22 - v18) >> 2;
      }
      if (v41 >> 61) {
        goto LABEL_56;
      }
      uint64_t v42 = (char *)operator new(8 * v41);
      unint64_t v40 = &v42[(2 * v41 + 6) & 0xFFFFFFFFFFFFFFF8];
      char v43 = v40;
      if (v19 != v18)
      {
        uint64_t v44 = 8 * v21;
        uint64_t v45 = &v42[(2 * v41 + 6) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v46 = v18;
        char v43 = &v40[8 * v21];
        do
        {
          uint64_t v47 = *(void *)v46;
          v46 += 8;
          *(void *)uint64_t v45 = v47;
          v45 += 8;
          v44 -= 8;
        }
        while (v44);
      }
      *(void *)a1 = v42;
      *(void *)(a1 + 8) = v40;
      *(void *)(a1 + 16) = v43;
      *(void *)(a1 + 24) = &v42[8 * v41];
      if (v18)
      {
        operator delete(v18);
        unint64_t v40 = *(char **)(a1 + 8);
      }
    }
    else
    {
      unint64_t v40 = v18;
    }
    *((void *)v40 - 1) = v25;
    uint64_t v7 = *(char **)(a1 + 8);
    uint64_t v6 = *(char **)(a1 + 16);
    *(void *)(a1 + 8) = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    *(void *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24)) {
      goto LABEL_44;
    }
    uint64_t v10 = *(char **)a1;
    uint64_t v11 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      if (v6 == v10) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = (v6 - v10) >> 2;
      }
      if (!(v48 >> 61))
      {
        char v32 = (char *)operator new(8 * v48);
        uint64_t v33 = &v32[8 * (v48 >> 2)];
        uint64_t v34 = &v32[8 * v48];
        uint64_t v49 = v6 - v7;
        BOOL v35 = v6 == v7;
        uint64_t v6 = v33;
        if (!v35)
        {
          uint64_t v6 = &v33[v49 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v50 = 8 * (v49 >> 3);
          uint64_t v51 = &v32[8 * (v48 >> 2)];
          do
          {
            uint64_t v52 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v51 = v52;
            v51 += 8;
            v50 -= 8;
          }
          while (v50);
        }
LABEL_30:
        *(void *)a1 = v32;
        *(void *)(a1 + 8) = v33;
        *(void *)(a1 + 16) = v6;
        *(void *)(a1 + 24) = v34;
        if (v10)
        {
          operator delete(v10);
          uint64_t v6 = *(char **)(a1 + 16);
        }
        goto LABEL_44;
      }
      goto LABEL_56;
    }
    goto LABEL_5;
  }
  uint64_t v26 = v23 >> 2;
  if (v22 == v20) {
    unint64_t v27 = 1;
  }
  else {
    unint64_t v27 = v26;
  }
  uint64_t v56 = a1 + 24;
  if (v27 >> 61) {
    goto LABEL_56;
  }
  *(void *)&long long v54 = operator new(8 * v27);
  *((void *)&v54 + 1) = v54 + 8 * v21;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v27;
  int v53 = operator new(0x1000uLL);
  sub_216A94638((uint64_t)&v54, &v53);
  for (uint64_t i = *(void **)(a1 + 16); i != *(void **)(a1 + 8); sub_216A9475C((void **)&v54, i))
    --i;
  int v29 = *(char **)a1;
  long long v30 = v55;
  *(_OWORD *)a1 = v54;
  *(_OWORD *)(a1 + 16) = v30;
  if (v29) {
    operator delete(v29);
  }
}

void sub_216A982C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216A982F4(int a1, uint64_t *a2, uint64_t *a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  LOBYTE(v16[0]) = 0;
  char v17 = 0;
  uint64_t result = sub_216A98444(a9, a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5);
  if (result)
  {
    v15[1] = 0;
    sub_216A94AA8(a10, a2, v15);
    sub_2168EE084((uint64_t)v15);
    if (v17)
    {
      uint64_t result = (uint64_t)sub_21697DC0C(v16, (void *)(a10[1] - 16));
    }
    else
    {
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a3);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v14, a4, (const pxrInternal__aapl__pxrReserved__::TfToken *)a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v15);
      sub_21697DC0C(v15, (void *)(a10[1] - 16));
      uint64_t result = sub_2168EE084((uint64_t)v15);
    }
  }
  if (v17) {
    return sub_2168EE084((uint64_t)v16);
  }
  return result;
}

void sub_216A98414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  if (a15) {
    sub_2168EE084((uint64_t)&a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216A98444(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  int v9 = a2;
  char v8 = a6;
  uint64_t v6 = *(void *)(a1 + 24);
  if (!v6) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t, uint64_t, char *))(*(void *)v6 + 48))(v6, &v9, a3, a4, a5, &v8);
}

void sub_216A984B4(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, char a3, char a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(uint64_t **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  int v9 = *(uint64_t **)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v10 = *(void **)(a1 + 32);
  LOBYTE(v27[0]) = 0;
  char v28 = 0;
  LOBYTE(v25[0]) = 0;
  char v26 = 0;
  if (sub_216A989A4(v8, (uint64_t)a2, (uint64_t)v7, v6, a3, (uint64_t)v9, v6 + 8, a4, (uint64_t)v27, (uint64_t)v25))
  {
    if (!v28 || !v26)
    {
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v7);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v6, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v23);
      sub_216A98A0C((uint64_t)v27, v23);
      sub_2168EE084((uint64_t)v23);
      sub_216A98A54(v25, (uint64_t)v27);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v12) {
      uint64_t v12 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    }
    if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v12 & 0xFFFFFFFFFFFFFFF8))
    {
      sub_216A95754(a2, v27, (pxrInternal__aapl__pxrReserved__::VtValue *)v25, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
    }
    else
    {
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      if (!v13) {
        uint64_t v13 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      }
      if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v13 + 3) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216A95BC4(a2, v27, (pxrInternal__aapl__pxrReserved__::VtValue *)v25, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
      }
      else
      {
        uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        if (!v14) {
          uint64_t v14 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        }
        if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v14 + 2) & 0xFFFFFFFFFFFFFFF8))
        {
          sub_216A96034(a2, v27, (pxrInternal__aapl__pxrReserved__::VtValue *)v25, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
        }
        else
        {
          uint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v15) {
            uint64_t v15 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          }
          if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v15 + 1) & 0xFFFFFFFFFFFFFFF8))
          {
            sub_216A96488(a2, v27, (pxrInternal__aapl__pxrReserved__::VtValue *)v25, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
          }
          else
          {
            char v16 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
            if (!v16) {
              char v16 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
            }
            if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v16 + 6) & 0xFFFFFFFFFFFFFFF8))
            {
              sub_216A968C8(a2, v27, (pxrInternal__aapl__pxrReserved__::VtValue *)v25, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
            }
            else
            {
              char v17 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
              if (!v17) {
                char v17 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
              }
              if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v17 + 7) & 0xFFFFFFFFFFFFFFF8))
              {
                sub_216A96D38(a2, v27, (pxrInternal__aapl__pxrReserved__::VtValue *)v25, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
              }
              else
              {
                uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                if (!v18) {
                  uint64_t v18 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                }
                if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v18 + 8) & 0xFFFFFFFFFFFFFFF8))
                {
                  sub_216A9718C(a2, v27, (pxrInternal__aapl__pxrReserved__::VtValue *)v25, (pxrInternal__aapl__pxrReserved__::TfToken *)v6, v9, (pxrInternal__aapl__pxrReserved__::TfToken *)(v6 + 8), a4, v10);
                }
                else
                {
                  uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                  if (!v19) {
                    uint64_t v19 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                  }
                  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v19 + 5) & 0xFFFFFFFFFFFFFFF8))
                  {
                    sub_216A975E0(a2, v27, (pxrInternal__aapl__pxrReserved__::VtValue *)v25, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
                  }
                  else
                  {
                    uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                    if (!v20) {
                      uint64_t v20 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                    }
                    unint64_t v21 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
                    if (v21 == (*((void *)v20 + 4) & 0xFFFFFFFFFFFFFFF8))
                    {
                      sub_216A97A34(a2, v27, (pxrInternal__aapl__pxrReserved__::VtValue *)v25, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
                    }
                    else
                    {
                      v23[0] = "sdf/copyUtils.cpp";
                      v23[1] = "_ProcessChildField";
                      v23[2] = 352;
                      v23[3] = "void pxrInternal__aapl__pxrReserved__::_ProcessChildField(const TfToken &, const SdfLayer"
                               "Handle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, const Sdf"
                               "ShouldCopyChildrenFnStandard &, _CopyStack *)";
                      char v24 = 0;
                      if (v21)
                      {
                        uint64_t v22 = (const char *)(v21 + 16);
                        if (*(char *)(v21 + 39) < 0) {
                          uint64_t v22 = *(const char **)v22;
                        }
                      }
                      else
                      {
                        uint64_t v22 = "";
                      }
                      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Unknown child field '%s'", v22);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v26) {
    sub_2168EE084((uint64_t)v25);
  }
  if (v28) {
    sub_2168EE084((uint64_t)v27);
  }
}

void sub_216A9895C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  if (a18) {
    sub_2168EE084((uint64_t)&a16);
  }
  if (a24) {
    sub_2168EE084((uint64_t)&a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216A989A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  char v13 = a5;
  char v12 = a8;
  uint64_t v10 = *(void *)(a1 + 24);
  if (!v10) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, char *, uint64_t *, uint64_t *))(*(void *)v10 + 48))(v10, a2, a3, a4, &v13, a6, a7, &v12, &a9, &a10);
}

uint64_t sub_216A98A0C(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    sub_2168ED33C((void *)a1, a2);
  }
  else
  {
    sub_2168EDFA8((void *)a1, a2);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void *sub_216A98A54(void *result, uint64_t a2)
{
  if (*((unsigned __int8 *)result + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*((unsigned char *)result + 16))
    {
      return sub_2168EC6DC(result, (void *)a2);
    }
  }
  else if (*((unsigned char *)result + 16))
  {
    uint64_t result = (void *)sub_2168EE084((uint64_t)result);
    *((unsigned char *)result + 16) = 0;
  }
  else
  {
    uint64_t result = sub_2168EE4C4(result, (void *)a2);
    *((unsigned char *)result + 16) = 1;
  }
  return result;
}

uint64_t sub_216A98AB0(uint64_t a1, uint64_t *a2)
{
  if (sub_216980CE8((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216A98CE8(*(unsigned char **)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216A98B34(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216980CE8(a2)) {
    sub_216A98EF0();
  }
  uint64_t result = sub_216A5F85C(a2);
  if (result)
  {
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 25) = 1;
  }
  return result;
}

unsigned char *sub_216A98CE8(unsigned char *a1, uint64_t a2)
{
  *a1 = *(unsigned char *)a2;
  if (a1 != (unsigned char *)a2)
  {
    sub_216A98D9C((uint64_t)(a1 + 8), *(_DWORD **)(a2 + 8), *(_DWORD **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_216A98D9C((uint64_t)(a1 + 32), *(_DWORD **)(a2 + 32), *(_DWORD **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
    sub_216A98D9C((uint64_t)(a1 + 56), *(_DWORD **)(a2 + 56), *(_DWORD **)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
    sub_216A98D9C((uint64_t)(a1 + 80), *(_DWORD **)(a2 + 80), *(_DWORD **)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
    sub_216A98D9C((uint64_t)(a1 + 104), *(_DWORD **)(a2 + 104), *(_DWORD **)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
    sub_216A98D9C((uint64_t)(a1 + 128), *(_DWORD **)(a2 + 128), *(_DWORD **)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3);
  }
  return a1;
}

_DWORD *sub_216A98D9C(uint64_t a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(int **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)
  {
    sub_216981200((void *)a1);
    if (a4 >> 61) {
      sub_21677CB10();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_21677CACC((void *)a1, v12);
    uint64_t result = sub_216980F74(v8, a2, a3, *(_DWORD **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3;
  if (v14 < a4)
  {
    uint64_t v15 = &a2[2 * v14];
    sub_2169DCD2C((uint64_t)&v19, a2, v15, v9);
    uint64_t result = sub_216980F74(v8, v15, a3, *(_DWORD **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = sub_2169DCD2C((uint64_t)&v20, a2, a3, v9);
  char v17 = v16;
  uint64_t v18 = *(_DWORD **)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v18 -= 2;
      uint64_t result = sub_216981128(v8, v18);
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
  return result;
}

void sub_216A98EE0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216A98EE8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216A98EF0()
{
}

void sub_216A98F54(_Unwind_Exception *a1)
{
  sub_216980BCC(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216A98F70(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C758228;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216A98FBC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C758228;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_DWORD *sub_216A98FEC@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v5, a2, *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 16), 1);
  sub_21697D878((_DWORD *)a3, &v5);
  sub_21697D8B4((_DWORD *)(a3 + 4), (_DWORD *)&v5 + 1);
  *(unsigned char *)(a3 + 8) = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v5 + 1);
  return sub_21697C414(&v5);
}

uint64_t sub_216A99070(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C758288)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216A990B0()
{
  return &unk_26C758288;
}

uint64_t sub_216A990BC(uint64_t a1, uint64_t *a2)
{
  if (sub_21698E9D8((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216A992F4(*(unsigned char **)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216A99140(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21698E9D8(a2)) {
    sub_216A9967C();
  }
  uint64_t result = sub_216A5F85C(a2);
  if (result)
  {
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 25) = 1;
  }
  return result;
}

unsigned char *sub_216A992F4(unsigned char *a1, uint64_t a2)
{
  *a1 = *(unsigned char *)a2;
  if (a1 != (unsigned char *)a2)
  {
    sub_216A993D8((uint64_t)(a1 + 8), *(long long **)(a2 + 8), *(long long **)(a2 + 16), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
    sub_216A993D8((uint64_t)(a1 + 32), *(long long **)(a2 + 32), *(long long **)(a2 + 40), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
    sub_216A993D8((uint64_t)(a1 + 56), *(long long **)(a2 + 56), *(long long **)(a2 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
    sub_216A993D8((uint64_t)(a1 + 80), *(long long **)(a2 + 80), *(long long **)(a2 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3));
    sub_216A993D8((uint64_t)(a1 + 104), *(long long **)(a2 + 104), *(long long **)(a2 + 112), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3));
    sub_216A993D8((uint64_t)(a1 + 128), *(long long **)(a2 + 128), *(long long **)(a2 + 136), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3));
  }
  return a1;
}

void sub_216A993D8(uint64_t a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(std::string **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_216A9957C((void **)a1);
    if (a4 > 0x492492492492492) {
      sub_21677CB10();
    }
    unint64_t v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_2167B8760((void *)a1, v11);
    unint64_t v12 = sub_2169D5294(v8, a2, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    char v13 = (std::string *)((char *)a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    sub_216A995EC((int)&v17, (std::string *)a2, v13, v9);
    unint64_t v12 = sub_2169D5294(v8, (long long *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_216A995EC((int)&v18, (std::string *)a2, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 56;
      sub_2169CC724(v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_216A9956C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216A99574(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216A9957C(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        sub_2169CC724((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *sub_216A995EC(int a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v5 = __str;
  if (__str == a3) {
    return __str;
  }
  uint64_t v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    sub_2169C487C((int *)&this[1], &v5[1]);
    sub_2169C48D4((int *)this[1].__r_.__value_.__r.__words + 1, (_DWORD *)v5[1].__r_.__value_.__r.__words + 1);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = *(_OWORD *)&v5[1].__r_.__value_.__r.__words[1];
    pxrInternal__aapl__pxrReserved__::VtDictionary::operator=((const void ****)&this[2], (const void ****)&v5[2]);
    this = (std::string *)((char *)this + 56);
    uint64_t v5 = (std::string *)((char *)v5 + 56);
  }
  while (v5 != v6);
  return v6;
}

void sub_216A9967C()
{
}

void sub_216A996E0(_Unwind_Exception *a1)
{
  sub_2169D5040(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216A996FC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C7582E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216A99750(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7582E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216A99788(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t sub_216A99790(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C758360)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216A997D0()
{
  return &unk_26C758360;
}

void sub_216A997DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(void **__return_ptr, uint64_t, void, void))a1)(__p, a2, *(void *)(a1 + 8), *(void *)(a1 + 16));
  sub_216A9985C(a3, (long long *)__p);
  sub_2168EBBB8(&v8, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v7);
  sub_21697C414(&v6);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

uint64_t sub_216A9985C(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  sub_21697D878((_DWORD *)(a1 + 24), (_DWORD *)a2 + 6);
  sub_21697D8B4((_DWORD *)(a1 + 28), (_DWORD *)a2 + 7);
  *(_OWORD *)(a1 + 32) = a2[2];
  uint64_t v5 = *((void *)a2 + 6);
  *((void *)a2 + 6) = 0;
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 56) = 1;
  return a1;
}

void *sub_216A998C8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_216A9994C(uint64_t a1, uint64_t *a2)
{
  if (sub_21698E94C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216A99B84(*(unsigned char **)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216A999D0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21698E94C(a2)) {
    sub_216A99ED8();
  }
  uint64_t result = sub_216A5F85C(a2);
  if (result)
  {
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 25) = 1;
  }
  return result;
}

unsigned char *sub_216A99B84(unsigned char *a1, uint64_t a2)
{
  *a1 = *(unsigned char *)a2;
  if (a1 != (unsigned char *)a2)
  {
    sub_216A99C60((uint64_t)(a1 + 8), *(std::string **)(a2 + 8), *(std::string **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4));
    sub_216A99C60((uint64_t)(a1 + 32), *(std::string **)(a2 + 32), *(std::string **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4));
    sub_216A99C60((uint64_t)(a1 + 56), *(std::string **)(a2 + 56), *(std::string **)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 4));
    sub_216A99C60((uint64_t)(a1 + 80), *(std::string **)(a2 + 80), *(std::string **)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 4));
    sub_216A99C60((uint64_t)(a1 + 104), *(std::string **)(a2 + 104), *(std::string **)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 4));
    sub_216A99C60((uint64_t)(a1 + 128), *(std::string **)(a2 + 128), *(std::string **)(a2 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 4));
  }
  return a1;
}

void sub_216A99C60(uint64_t a1, std::string *a2, std::string *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    sub_216A99DE4((void **)a1);
    if (a4 > 0x555555555555555) {
      sub_21677CB10();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_2169D8290((void *)a1, v11);
    unint64_t v12 = sub_2169D82E4(v8, (uint64_t)a2, (uint64_t)a3, *(__n128 **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    char v13 = (std::string *)((char *)a2 + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4));
    sub_216A99E54((int)&v17, a2, v13, v9);
    unint64_t v12 = sub_2169D82E4(v8, (uint64_t)v13, (uint64_t)a3, *(__n128 **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_216A99E54((int)&v18, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 48;
      sub_2169CC824(v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_216A99DD4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216A99DDC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216A99DE4(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 48;
        sub_2169CC824((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *sub_216A99E54(int a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v5 = __str;
  if (__str == a3) {
    return __str;
  }
  int v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    sub_2169C487C((int *)&this[1], &v5[1]);
    sub_2169C48D4((int *)this[1].__r_.__value_.__r.__words + 1, (_DWORD *)v5[1].__r_.__value_.__r.__words + 1);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = *(_OWORD *)&v5[1].__r_.__value_.__r.__words[1];
    this += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

void sub_216A99ED8()
{
}

void sub_216A99F3C(_Unwind_Exception *a1)
{
  sub_2169D8044(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216A99F58(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C7583C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216A99FAC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7583C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216A99FE4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t sub_216A99FEC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C758440)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216A9A02C()
{
  return &unk_26C758440;
}

void sub_216A9A038(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(void **__return_ptr, uint64_t, void, void))a1)(__p, a2, *(void *)(a1 + 8), *(void *)(a1 + 16));
  *(_OWORD *)a3 = *(_OWORD *)__p;
  *(void *)(a3 + 16) = v5;
  __p[1] = 0;
  uint64_t v5 = 0;
  __p[0] = 0;
  sub_21697D878((_DWORD *)(a3 + 24), &v6);
  sub_21697D8B4((_DWORD *)(a3 + 28), &v7);
  *(_OWORD *)(a3 + 32) = v8;
  *(unsigned char *)(a3 + 48) = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void *sub_216A9A0F0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_216A9A174(uint64_t a1, uint64_t *a2)
{
  if (sub_216A9A2D4((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    int v6 = *(uint64_t ***)(a1 + 8);
    if (v6 != (uint64_t **)v5) {
      sub_216A9A360(v6, *(void **)v5, (void *)(v5 + 8));
    }
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216A9A204(uint64_t a1, uint64_t *a2)
{
  if (sub_216A9A2D4((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    sub_216A9A6F4(a2, &v10);
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = v4 + 8;
    sub_21698F21C(v4, *(void **)(v4 + 8));
    *(void *)uint64_t v4 = v10;
    int v6 = v11;
    *(void *)(v4 + 8) = v11;
    uint64_t v7 = v12;
    *(void *)(v4 + 16) = v12;
    if (v7)
    {
      long long v8 = 0;
      v6[2] = v5;
      unint64_t v10 = &v11;
      unint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    else
    {
      *(void *)uint64_t v4 = v5;
      long long v8 = v11;
    }
    sub_21698F21C((uint64_t)&v10, v8);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216A9A2D4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217479028 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C758458);
}

uint64_t **sub_216A9A360(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    int v6 = *result;
    uint64_t v7 = result[1];
    _DWORD *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      long long v8 = (uint64_t *)v6[1];
    }
    else {
      long long v8 = v6;
    }
    uint64_t v14 = result;
    uint64_t v15 = v8;
    uint64_t v16 = v8;
    if (v8)
    {
      uint64_t v15 = sub_216799E28((uint64_t)v8);
      if (a2 != a3)
      {
        int v9 = a2;
        do
        {
          v17[0] = (int *)v8 + 7;
          v17[1] = (int *)v8 + 9;
          sub_216A9A55C(v17, (_DWORD *)v9 + 7);
          sub_216A9A4D4(v5, v16);
          uint64_t v16 = v15;
          if (v15) {
            uint64_t v15 = sub_216799E28((uint64_t)v15);
          }
          unint64_t v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              unint64_t v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              int v9 = a2;
            }
            while (!v11);
          }
          long long v8 = v16;
          if (v16) {
            BOOL v11 = a2 == a3;
          }
          else {
            BOOL v11 = 1;
          }
          int v9 = a2;
        }
        while (!v11);
      }
    }
    uint64_t result = (uint64_t **)sub_216A9A5C0((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_216A9A618((uint64_t)v5, (_DWORD *)a2 + 7);
      uint64_t v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          char v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          char v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_216A9A4C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216A9A5C0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216A9A4D4(uint64_t **a1, uint64_t *a2)
{
  uint64_t v5 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = (uint64_t **)v4;
        if (!sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28)))break; {
        uint64_t v4 = *v5;
        }
        int v6 = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    int v6 = v5 + 1;
  }
  else
  {
    int v6 = a1 + 1;
  }
LABEL_8:
  sub_21677B358(a1, (uint64_t)v5, v6, a2);
  return a2;
}

int **sub_216A9A55C(int **a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  sub_2169C487C(*a1, a2);
  sub_2169C48D4(v4 + 1, a2 + 1);
  uint64_t v5 = a1[1];
  sub_2169C487C(v5, a2 + 2);
  sub_2169C48D4(v5 + 1, a2 + 3);
  return a1;
}

uint64_t sub_216A9A5C0(uint64_t a1)
{
  sub_21698F21C(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_21698F21C(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *sub_216A9A618(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  v9[0] = (uint64_t *)operator new(0x30uLL);
  v9[1] = v4;
  sub_216A8FD38((_DWORD *)v9[0] + 7, a2);
  char v10 = 1;
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    do
    {
      while (1)
      {
        uint64_t v4 = (uint64_t *)v5;
        if (!sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9[0] + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 28)))break; {
        uint64_t v5 = *v4;
        }
        int v6 = (uint64_t **)v4;
        if (!*v4) {
          goto LABEL_8;
        }
      }
      uint64_t v5 = v4[1];
    }
    while (v5);
    int v6 = (uint64_t **)(v4 + 1);
  }
  else
  {
    int v6 = (uint64_t **)v4;
  }
LABEL_8:
  uint64_t v7 = v9[0];
  sub_21677B358((uint64_t **)a1, (uint64_t)v4, v6, v9[0]);
  v9[0] = 0;
  sub_21698F170((uint64_t)v9, 0);
  return v7;
}

void sub_216A9A6DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21698F170((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_216A9A6F4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  uint64_t v4 = (uint64_t *)sub_216A9A770(a1);
  uint64_t result = sub_2168A6B2C(v4, (uint64_t)a2);
  uint64_t v6 = a1[1];
  if (v6) {
    BOOL v7 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216A9A758(_Unwind_Exception *a1)
{
  sub_21698F21C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_216A9A770(uint64_t *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_216A9A804(a1);
}

uint64_t sub_216A9A804(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(*a1 + 24));
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x20uLL);
    sub_216A9A8E8((uint64_t *)v3, *a1);
    atomic_store(0, (unsigned int *)v3 + 6);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 6, 1u, memory_order_relaxed);
    uint64_t v5 = *a1;
    *a1 = (uint64_t)v3;
    sub_216A9A890(&v5);
  }
  return *a1;
}

void sub_216A9A87C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216A9A890(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_21698F21C(v2, *(void **)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *sub_216A9A8E8(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_216A9A940(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_216A9A928(_Unwind_Exception *a1)
{
  sub_21698F21C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_216A9A940(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_216A9A9CC(v5, v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28), (_DWORD *)v4 + 7);
      BOOL v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          long long v8 = v7;
          BOOL v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_216A9A9CC(uint64_t **a1, void *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, _DWORD *a4)
{
  uint64_t v6 = sub_2169815BC(a1, a2, &v13, &v12, a3);
  BOOL v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    BOOL v7 = (uint64_t *)operator new(0x30uLL);
    v10[1] = a1 + 1;
    sub_216A8FD38((_DWORD *)v7 + 7, a4);
    char v11 = 1;
    sub_21677B358(a1, v13, v8, v7);
    v10[0] = 0;
    sub_21698F170((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *sub_216A9AA80(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v6 = (void **)sub_216981754((uint64_t)a1, &v12, a2);
  BOOL v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    BOOL v7 = (uint64_t *)operator new(0x30uLL);
    v10[1] = a1 + 1;
    sub_216A9AB30((_DWORD *)v7 + 7, *a4);
    char v11 = 1;
    sub_21677B358(a1, v12, v8, v7);
    v10[0] = 0;
    sub_21698F170((uint64_t)v10, 0);
  }
  return v7;
}

_DWORD *sub_216A9AB30(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = sub_216981010(a1, a2);
  sub_21698105C(v4 + 1, a2 + 1);
  *((void *)a1 + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a1 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a1 + 3);
  return a1;
}

uint64_t *sub_216A9AB84(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  if ((sub_216A9A2D4(a1) & 1) == 0)
  {
    v7[0] = 0;
    v7[1] = 0;
    uint64_t v6 = v7;
    sub_216A9AC08(a1, (uint64_t)&v6);
    sub_21698F21C((uint64_t)&v6, v7[0]);
  }
  uint64_t v4 = (uint64_t *)sub_216A9A770((uint64_t *)a1);
  return sub_2168A6B2C(v4, a2);
}

void sub_216A9ABF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void *sub_216A9AC08(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_26C7584A0;
  sub_216A9AFA0(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216A9AC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216A9ACD8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_216A9ACF8(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_216A9A890(a1);
}

uint64_t sub_216A9AD08()
{
  return 1;
}

unint64_t sub_216A9AD10(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = 0;
  char v4 = 0;
  sub_216A9AE50((uint64_t)&v3, *(void **)v1, (void *)(v1 + 8));
  return bswap64(0x9E3779B97F4A7C55 * v3);
}

uint64_t sub_216A9AD60(void **a1, void **a2)
{
  return sub_216A9AEE0(*a1, *a2);
}

uint64_t sub_216A9AD6C(void **a1, void *a2)
{
  return sub_216A9AEE0(*a1, a2);
}

uint64_t sub_216A9AD78()
{
  return 0;
}

void *sub_216A9AD84(uint64_t **a1, void *a2, char *a3)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1, a3);
}

void *sub_216A9AD94()
{
  return &unk_26C758458;
}

uint64_t sub_216A9ADA0()
{
  return 0;
}

uint64_t sub_216A9ADA8()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216A9ADB4()
{
  return 0;
}

uint64_t sub_216A9ADBC()
{
  return 0;
}

BOOL sub_216A9ADC4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217479028 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216A9AE00(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C758458, a2, a3);
}

void *sub_216A9AE24()
{
  return &unk_26C758458;
}

uint64_t sub_216A9AE30(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t *sub_216A9AE38@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = &off_26C7584A0;
  return sub_216A9AFA0(a2, v2);
}

uint64_t sub_216A9AE50(uint64_t result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    char v4 = a2;
    uint64_t v5 = result;
    do
    {
      uint64_t v6 = (void *)v4[1];
      uint64_t v7 = v4;
      if (v6)
      {
        do
        {
          long long v8 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v8 = (void *)v7[2];
          BOOL v9 = *v8 == (void)v7;
          uint64_t v7 = v8;
        }
        while (!v9);
      }
      sub_2169827F8(v5, (unsigned int *)v4 + 7);
      uint64_t result = sub_2169827F8(v5, (unsigned int *)v4 + 9);
      char v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t sub_216A9AEE0(void *a1, void *a2)
{
  if (a1[2] != a2[2]) {
    return 0;
  }
  char v4 = (void *)*a1;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = v4;
  if (v4 == v2) {
    return 1;
  }
  uint64_t v5 = (void *)*a2;
  do
  {
    BOOL v6 = *(void *)((char *)v3 + 28) == *(void *)((char *)v5 + 28)
      && *(void *)((char *)v3 + 36) == *(void *)((char *)v5 + 36);
    uint64_t v7 = v6;
    if (!v6) {
      break;
    }
    long long v8 = (void *)v3[1];
    BOOL v9 = v3;
    if (v8)
    {
      do
      {
        uint64_t v3 = v8;
        long long v8 = (void *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        uint64_t v3 = (void *)v9[2];
        BOOL v6 = *v3 == (void)v9;
        BOOL v9 = v3;
      }
      while (!v6);
    }
    char v10 = (void *)v5[1];
    if (v10)
    {
      do
      {
        char v11 = v10;
        char v10 = (void *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        char v11 = (void *)v5[2];
        BOOL v6 = *v11 == (void)v5;
        uint64_t v5 = v11;
      }
      while (!v6);
    }
    uint64_t v5 = v11;
  }
  while (v3 != v2);
  return v7;
}

uint64_t *sub_216A9AFA0(void *a1, uint64_t a2)
{
  char v4 = operator new(0x20uLL);
  uint64_t result = sub_216A9A8E8((uint64_t *)v4, a2);
  atomic_store(0, (unsigned int *)v4 + 6);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 6, 1u, memory_order_relaxed);
  return result;
}

void sub_216A9AFF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216A9B008(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2169DC8C8(a2))
  {
    uint64_t v4 = *((void *)a2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v5 = (_DWORD **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a2);
    else {
      uint64_t v5 = *(_DWORD ***)a2;
    }
    if (*(_DWORD ***)(a1 + 8) != v5) {
      sub_216A98D9C(*(void *)(a1 + 8), *v5, v5[1], ((char *)v5[1] - (char *)*v5) >> 3);
    }
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216A9B0A0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2169DC8C8(a2))
  {
    sub_216A9B144(a2, &v6);
    uint64_t v4 = *(void **)(a1 + 8);
    sub_216981200(v4);
    *(_OWORD *)uint64_t v4 = v6;
    v4[2] = v7;
    long long v6 = 0uLL;
    uint64_t v7 = 0;
    long long v8 = (void **)&v6;
    sub_216981168(&v8);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t *sub_216A9B144@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = (uint64_t *)sub_216A9B1E0(a1);
  uint64_t v5 = *result;
  uint64_t *result = 0;
  *a2 = v5;
  uint64_t v6 = result[1];
  result[1] = 0;
  a2[1] = v6;
  uint64_t v7 = result[2];
  result[2] = 0;
  a2[2] = v7;
  uint64_t v8 = a1[1];
  if (v8 && (a1[1] & 3) != 3) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216A9B1C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216981168((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216A9B1E0(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169DC4AC((uint64_t)a1);
}

uint64_t *sub_216A9B274(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2)
{
  if ((sub_2169DC8C8(a1) & 1) == 0)
  {
    memset(v8, 0, sizeof(v8));
    sub_216A9B324((uint64_t)a1, v8);
    BOOL v9 = (void **)v8;
    sub_216981168(&v9);
  }
  uint64_t result = (uint64_t *)sub_216A9B1E0(a1);
  uint64_t v5 = *result;
  uint64_t *result = *a2;
  *a2 = v5;
  uint64_t v6 = result[1];
  result[1] = a2[1];
  a2[1] = v6;
  uint64_t v7 = result[2];
  result[2] = a2[2];
  a2[2] = v7;
  return result;
}

void sub_216A9B30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216981168((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216A9B324(uint64_t a1, _DWORD **a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, a1);
  *(void *)(a1 + 8) = &off_26C756D88;
  sub_2169DC54C((unsigned int **)a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216A9B3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216A9B3FC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C7585A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216A9B450(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7585A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216A9B488(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8, char *a9, void *a10)
{
  char v11 = *a9;
  return (*(uint64_t (**)(void, void, void, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, char, void))(a1 + 8))(*(void *)(a1 + 16), *(void *)(a1 + 24), *a2, a3, a4, a5, *a6, a7, a8, v11, *a10);
}

uint64_t sub_216A9B4F0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C758620)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216A9B530()
{
  return &unk_26C758620;
}

void *sub_216A9B53C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

__n128 sub_216A9B5C8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C758648;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216A9B61C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C758648;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216A9B654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, char *a8, void *a9, void *a10)
{
  char v11 = *a8;
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, char, void, void))(a1 + 8))(*(void *)(a1 + 16), *(void *)(a1 + 24), a2, a3, a4, *a5, a6, a7, v11, *a9, *a10);
}

uint64_t sub_216A9B6B8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7586C8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216A9B6F8()
{
  return &unk_26C7586C8;
}

void *sub_216A9B704(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::SdfData::~SdfData(pxrInternal__aapl__pxrReserved__::SdfData *this)
{
  *(void *)this = &unk_26C7586F0;
  uint64_t v2 = (char *)this + 24;
  sub_216A9B7F0((uint64_t)this + 24);
  sub_216A9D400((uint64_t)v2);

  pxrInternal__aapl__pxrReserved__::SdfAbstractData::~SdfAbstractData(this, v3);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::SdfData::~SdfData(this);

  operator delete(v1);
}

uint64_t sub_216A9B7F0(uint64_t a1)
{
  memset(v3, 0, sizeof(v3));
  int v4 = 1065353216;
  sub_21698718C((uint64_t)v3, a1);
  if ((pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls(v1) & 1) == 0) {
    sub_216A9D7F0((uint64_t)v3);
  }
  return sub_216A9D400((uint64_t)v3);
}

void sub_216A9B848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::StreamsData(pxrInternal__aapl__pxrReserved__::SdfData *this)
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::IsDetached(pxrInternal__aapl__pxrReserved__::SdfData *this)
{
  return 1;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfData::HasSpec(uint64_t a1, unsigned int *a2)
{
  return sub_216A9DB14((void *)(a1 + 24), a2) != 0;
}

void pxrInternal__aapl__pxrReserved__::SdfData::EraseSpec(pxrInternal__aapl__pxrReserved__::SdfData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v3 = (void *)((char *)this + 24);
  int v4 = sub_216A62F60((void *)this + 3, (unsigned int *)a2);
  if (v4
    || (LOBYTE(v10) = 0,
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2),
        uint64_t v8 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No spec to erase at <%s>", v6, v7, Text, "sdf/data.cpp", "EraseSpec", 63, "virtual void pxrInternal__aapl__pxrReserved__::SdfData::EraseSpec(const SdfPath &)", v10), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v9, "i != _data.end()", v8) & 1) != 0))
  {
    sub_216851DB0(v3, v4, (uint64_t)&v9);
    sub_216A9DBF0((uint64_t)&v9, 0);
  }
}

void pxrInternal__aapl__pxrReserved__::SdfData::MoveSpec(pxrInternal__aapl__pxrReserved__::SdfData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v5 = (void *)((char *)this + 24);
  uint64_t v6 = (uint64_t **)sub_216A62F60((void *)this + 3, (unsigned int *)a2);
  if (v6) {
    goto LABEL_2;
  }
  char v17 = "sdf/data.cpp";
  char v18 = "MoveSpec";
  uint64_t v19 = 75;
  char v20 = "virtual void pxrInternal__aapl__pxrReserved__::SdfData::MoveSpec(const SdfPath &, const SdfPath &)";
  char v21 = 0;
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a2);
  uint64_t v12 = *((char *)String + 23) >= 0 ? String : (uint64_t *)*String;
  uint64_t v13 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No spec to move at <%s>", v10, v11, v12);
  if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "old != _data.end()", v13))
  {
LABEL_2:
    sub_216A9D4CC((uint64_t)&v14, a3, v6 + 3);
    sub_216A9D790((uint64_t)&v17, (uint64_t)&v14);
    sub_216A9DC48((uint64_t)v5, (unsigned int *)&v17, (uint64_t)&v17);
    char v8 = v7;
    uint64_t v22 = (void **)&v19;
    sub_216A94530(&v22);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
    sub_21697C414(&v17);
    uint64_t v22 = (void **)&v16;
    sub_216A94530(&v22);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v15);
    sub_21697C414(&v14);
    if ((v8 & 1) != 0
      || (char v17 = "sdf/data.cpp",
          char v18 = "MoveSpec",
          uint64_t v19 = 79,
          char v20 = "virtual void pxrInternal__aapl__pxrReserved__::SdfData::MoveSpec(const SdfPath &, const SdfPath &)",
          char v21 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "inserted", 0) & 1) != 0))
    {
      sub_216851DB0(v5, v6, (uint64_t)&v17);
      sub_216A9DBF0((uint64_t)&v17, 0);
    }
  }
}

void sub_216A9BB10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_216A9BB2C((uint64_t)va1);
  sub_216A9BB78((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216A9BB2C(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 16);
  sub_216A94530(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_21697C414((_DWORD *)a1);
}

_DWORD *sub_216A9BB78(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 16);
  sub_216A94530(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_21697C414((_DWORD *)a1);
}

void *pxrInternal__aapl__pxrReserved__::SdfData::GetSpecType(uint64_t a1, unsigned int *a2)
{
  __n128 result = sub_216A9DB14((void *)(a1 + 24), a2);
  if (result) {
    return (void *)*((unsigned int *)result + 6);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::CreateSpec(uint64_t a1, _DWORD *a2, int a3)
{
  if (a3
    || (v7[0] = "sdf/data.cpp",
        v7[1] = "CreateSpec",
        v7[2] = (_DWORD *)98,
        v7[3] = "virtual void pxrInternal__aapl__pxrReserved__::SdfData::CreateSpec(const SdfPath &, SdfSpecType)",
        char v8 = 0,
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "specType != SdfSpecTypeUnknown", 0), (result & 1) != 0))
  {
    v7[0] = a2;
    uint64_t result = (uint64_t)sub_216A9DFAC(a1 + 24, a2, (uint64_t)&unk_2174BFD90, v7);
    *(_DWORD *)(result + 24) = a3;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::_VisitSpecs(uint64_t this, pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *a2, char *a3)
{
  uint64_t v6 = *(void *)(this + 40);
  uint64_t v7 = 0;
  if (v6)
  {
    uint64_t v4 = this;
    do
    {
      uint64_t v5 = sub_216A9BD18(&v6, (uint64_t)a2, a3);
      this = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v4, *v5 + 16);
      if (!this) {
        break;
      }
      this = sub_216A9BD94((uint64_t)&v6);
    }
    while (v6 != v7);
  }
  return this;
}

void *sub_216A9BD18(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    _OWORD v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::TfHashMap<pxr"
            "Internal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfData::_SpecData, pxrInternal__a"
            "apl__pxrReserved__::SdfPath::Hash>>::operator->() [T = const pxrInternal__aapl__pxrReserved__::TfHashMap<pxr"
            "Internal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfData::_SpecData, pxrInternal__a"
            "apl__pxrReserved__::SdfPath::Hash>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_216A9BD94(uint64_t a1)
{
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    _OWORD v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":TfHashMap<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfData::_SpecData, "
            "pxrInternal__aapl__pxrReserved__::SdfPath::Hash>>::operator++() [T = const pxrInternal__aapl__pxrReserved__:"
            ":TfHashMap<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfData::_SpecData, "
            "pxrInternal__aapl__pxrReserved__::SdfPath::Hash>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(void *)a1 = **(void **)a1;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::Has(uint64_t a1, unsigned int *a2, void *a3, uint64_t (***a4)(void, uint64_t))
{
  uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfData::_GetFieldValue(a1, a2, a3);
  if (result)
  {
    if (a4)
    {
      uint64_t v6 = **a4;
      return v6(a4, result);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::SdfData::_GetFieldValue(uint64_t a1, unsigned int *a2, void *a3)
{
  uint64_t result = sub_216A9DB14((void *)(a1 + 24), a2);
  if (result)
  {
    int v5 = (void *)result[4];
    uint64_t v6 = (void *)result[5];
    if (v5 == v6)
    {
      return 0;
    }
    else
    {
      while ((*v5 & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        v5 += 3;
        if (v5 == v6) {
          return 0;
        }
      }
      return v5 + 1;
    }
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfData::Has(uint64_t a1, unsigned int *a2, void *a3, void *a4)
{
  FieldValue = pxrInternal__aapl__pxrReserved__::SdfData::_GetFieldValue(a1, a2, a3);
  uint64_t v6 = FieldValue;
  if (a4 && FieldValue) {
    sub_2168EC6DC(a4, FieldValue);
  }
  return v6 != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::HasSpecAndField(uint64_t a1, unsigned int *a2, void *a3, uint64_t (***a4)(void, uint64_t), _DWORD *a5)
{
  uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfData::_GetSpecTypeAndFieldValue(a1, a2, a3, a5);
  if (result)
  {
    if (a4)
    {
      uint64_t v7 = **a4;
      return v7(a4, result);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::SdfData::_GetSpecTypeAndFieldValue(uint64_t a1, unsigned int *a2, void *a3, _DWORD *a4)
{
  uint64_t result = sub_216A9DB14((void *)(a1 + 24), a2);
  if (result)
  {
    *a4 = *((_DWORD *)result + 6);
    uint64_t v7 = (void *)result[4];
    char v8 = (void *)result[5];
    if (v7 == v8)
    {
      return 0;
    }
    else
    {
      while ((*v7 & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        v7 += 3;
        if (v7 == v8) {
          return 0;
        }
      }
      return v7 + 1;
    }
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfData::HasSpecAndField(uint64_t a1, unsigned int *a2, void *a3, void *a4, _DWORD *a5)
{
  SpecTypeAndFieldValue = pxrInternal__aapl__pxrReserved__::SdfData::_GetSpecTypeAndFieldValue(a1, a2, a3, a5);
  uint64_t v7 = SpecTypeAndFieldValue;
  if (a4 && SpecTypeAndFieldValue) {
    sub_2168EC6DC(a4, SpecTypeAndFieldValue);
  }
  return v7 != 0;
}

void *pxrInternal__aapl__pxrReserved__::SdfData::_GetMutableFieldValue(uint64_t a1, unsigned int *a2, void *a3)
{
  uint64_t result = sub_216A62F60((void *)(a1 + 24), a2);
  if (result)
  {
    uint64_t v5 = result[4];
    uint64_t v6 = result[5] - v5;
    if (v6)
    {
      uint64_t v7 = v6 / 24;
      for (uint64_t result = (void *)(v5 + 8); (*(result - 1) & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8); result += 3)
      {
        if (!--v7) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::SdfData::Get@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfData::_GetFieldValue(a1, a2, a3);
  if (result)
  {
    return sub_2168EE4C4(a4, result);
  }
  else
  {
    a4[1] = 0;
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::SdfData::Set(pxrInternal__aapl__pxrReserved__::SdfData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  sub_216851EE4((uint64_t)&v10, "Sdf", "SdfData::Set");
  if (*((void *)a4 + 1))
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfData::_GetOrCreateFieldValue(this, a2, a3);
    if (result) {
      uint64_t result = sub_2168EC6DC(result, a4);
    }
  }
  else
  {
    uint64_t result = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfData *, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *))(*(void *)this + 168))(this, a2, a3);
  }
  while (v11--)
    uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v10);
  return result;
}

void sub_216A9C204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *pxrInternal__aapl__pxrReserved__::SdfData::_GetOrCreateFieldValue(pxrInternal__aapl__pxrReserved__::SdfData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v5 = sub_216A62F60((void *)this + 3, (unsigned int *)a2);
  if (!v5)
  {
    v17[0] = (uint64_t *)"sdf/data.cpp";
    v17[1] = (uint64_t *)"_GetOrCreateFieldValue";
    v17[2] = (uint64_t *)265;
    void v17[3] = (uint64_t *)"VtValue *pxrInternal__aapl__pxrReserved__::SdfData::_GetOrCreateFieldValue(const SdfPath &, const TfToken &)";
    char v18 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    unint64_t v14 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
    if (v14)
    {
      uint64_t v15 = (const char *)(v14 + 16);
      if (*(char *)(v14 + 39) < 0) {
        uint64_t v15 = *(const char **)v15;
      }
    }
    else
    {
      uint64_t v15 = "";
    }
    uint64_t v16 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No spec at <%s> when trying to set field '%s'", v12, v13, Text, v15);
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v17, "i != _data.end()", v16) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v7 = (void *)v5[4];
  uint64_t v6 = (void *)v5[5];
  if (v7 == v6)
  {
LABEL_5:
    v17[0] = (uint64_t *)a3;
    if ((unint64_t)v6 >= v5[6])
    {
      uint64_t v9 = sub_216A9E298(v5 + 4, (uint64_t)&unk_2174BFD90, v17);
    }
    else
    {
      uint64_t v8 = *(void *)a3;
      *uint64_t v6 = *(void *)a3;
      if ((v8 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v6 &= 0xFFFFFFFFFFFFFFF8;
      }
      v6[2] = 0;
      uint64_t v9 = (uint64_t)(v6 + 3);
    }
    v5[5] = v9;
    return (void *)(v9 - 16);
  }
  else
  {
    while ((*v7 & 0xFFFFFFFFFFFFFFF8) != (*(void *)a3 & 0xFFFFFFFFFFFFFFF8))
    {
      v7 += 3;
      if (v7 == v6) {
        goto LABEL_5;
      }
    }
    return v7 + 1;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::Set(pxrInternal__aapl__pxrReserved__::SdfData *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (***a4)(void))
{
  sub_216851EE4((uint64_t)&v10, "Sdf", "SdfData::Set");
  uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfData::_GetOrCreateFieldValue(a1, a2, a3);
  if (result) {
    uint64_t result = (**a4)(a4);
  }
  while (v11--)
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v10);
  return result;
}

void sub_216A9C43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *pxrInternal__aapl__pxrReserved__::SdfData::Erase(uint64_t a1, unsigned int *a2, void *a3)
{
  uint64_t result = sub_216A62F60((void *)(a1 + 24), a2);
  if (result)
  {
    uint64_t v6 = (char *)result[4];
    uint64_t v5 = (char *)result[5];
    uint64_t v7 = (uint64_t)(result + 4);
    if (v5 != v6)
    {
      uint64_t v8 = (v5 - v6) / 24;
      while ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        v6 += 24;
        if (!--v8) {
          return result;
        }
      }
      sub_216A94EA0((void *)v6 + 3, v5, v6);
      return (void *)sub_216A94584(v7, v9);
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfData::List(pxrInternal__aapl__pxrReserved__::SdfData *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  char v4 = sub_216A9DB14((void *)this + 3, (unsigned int *)a2);
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v7 = v4[4];
    uint64_t v6 = v4[5];
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3);
    sub_216A9C5B8((uint64_t)a3, v8);
    if (v6 != v7)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      do
      {
        sub_2168D2318((void *)(*a3 + v9), (void *)(v5[4] + v10));
        v10 += 24;
        v9 += 8;
        --v8;
      }
      while (v8);
    }
  }
}

void sub_216A9C59C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216A9C5B8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (v2 - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
    {
      uint64_t v4 = *(void *)a1 + 8 * a2;
      while (v2 != v4)
      {
        uint64_t v6 = *(void *)(v2 - 8);
        v2 -= 8;
        uint64_t v5 = v6;
        if ((v6 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      *(void *)(a1 + 8) = v4;
    }
  }
  else
  {
    sub_216A9E3CC((char **)a1, a2 - v3);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::ListAllTimeSamples@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = this;
  a4[2] = 0;
  a4[1] = 0;
  *a4 = (uint64_t)(a4 + 1);
  uint64_t v9 = *(void *)(this + 40);
  uint64_t v10 = 0;
  while (v9 != v10)
  {
    uint64_t v6 = sub_216A9BD18(&v9, a2, a3);
    (*(void (**)(double **__return_ptr, uint64_t, uint64_t))(*(void *)v4 + 248))(&v7, v4, *v6 + 16);
    sub_216A9C700(a4, v7, v8);
    sub_2167FB780((uint64_t)&v7, *(void **)&v8[0]);
    this = sub_216A9BD94((uint64_t)&v9);
  }
  return this;
}

void sub_216A9C6D0(_Unwind_Exception *a1)
{
  sub_2167FB780(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_216A9C700(uint64_t *result, double *a2, double *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = (double *)(result + 1);
    do
    {
      uint64_t result = sub_216A9E4F4(v5, v6, v4 + 4, (uint64_t *)v4 + 4);
      uint64_t v7 = (double *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = *(double **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (double *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::ListTimeSamplesForPath@<X0>(pxrInternal__aapl__pxrReserved__::SdfData *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = a3 + 8;
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfDataTokens)) {
    sub_216A9E57C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  }
  (*(void (**)(void **__return_ptr, pxrInternal__aapl__pxrReserved__::SdfData *, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)this + 136))(&v14, this, a2);
  if (sub_216995B54((pxrInternal__aapl__pxrReserved__::VtValue *)&v14))
  {
    if ((v15 & 4) != 0) {
      BOOL v9 = (void *)(*(uint64_t (**)(void **))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(&v14);
    }
    else {
      BOOL v9 = v14;
    }
    uint64_t v12 = (void *)*v9;
    uint64_t v13 = v9 + 1;
    while (v12 != v13)
    {
      uint64_t v10 = sub_216A9C8F4(&v12, v7, v8);
      sub_21708827C((uint64_t **)a3, (double *)(*v10 + 32), (uint64_t *)(*v10 + 32));
      sub_216A9C970(&v12);
    }
  }
  return sub_2168EE084((uint64_t)&v14);
}

void sub_216A9C8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2168EE084((uint64_t)va);
  sub_2167FB780(v4, *(void **)(v4 + 8));
  _Unwind_Resume(a1);
}

void *sub_216A9C8F4(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    _OWORD v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<double, pxrInternal__aapl__pxrReserved"
            "__::VtValue>>::operator->() [T = const std::map<double, pxrInternal__aapl__pxrReserved__::VtValue>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216A9C970(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<double, pxrInternal__aap"
            "l__pxrReserved__::VtValue>>::operator++() [T = const std::map<double, pxrInternal__aapl__pxrReserved__::VtVa"
            "lue>, Reverse = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    unint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        char v4 = v3;
        unint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        char v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfData::GetBracketingTimeSamples(pxrInternal__aapl__pxrReserved__::SdfData *this, double a2, double *a3, double *a4)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 240))(&v21);
  uint64_t v7 = v23;
  if (v23)
  {
    double v8 = *(double *)(v21 + 32);
    if (v8 < a2)
    {
      BOOL v9 = (double *)&v22;
      uint64_t v10 = v22;
      if (v22)
      {
        int v11 = v22;
        do
        {
          uint64_t v12 = v11;
          int v11 = (void *)v11[1];
        }
        while (v11);
      }
      else
      {
        uint64_t v13 = &v22;
        do
        {
          uint64_t v12 = v13[2];
          BOOL v14 = *v12 == (void)v13;
          uint64_t v13 = (void **)v12;
        }
        while (v14);
      }
      if (*((double *)v12 + 4) > a2)
      {
        if (v22)
        {
          do
          {
            uint64_t v15 = v10 + 1;
            if (*((double *)v10 + 4) >= a2)
            {
              uint64_t v15 = v10;
              BOOL v9 = (double *)v10;
            }
            uint64_t v10 = (void *)*v15;
          }
          while (*v15);
        }
        double v8 = v9[4];
        *a4 = v8;
        if (v8 != a2)
        {
          double v16 = *v9;
          if (*(void *)v9)
          {
            do
            {
              char v17 = *(double **)&v16;
              double v16 = *(double *)(*(void *)&v16 + 8);
            }
            while (v16 != 0.0);
          }
          else
          {
            do
            {
              char v17 = (double *)*((void *)v9 + 2);
              BOOL v14 = *(void *)v17 == (void)v9;
              BOOL v9 = v17;
            }
            while (v14);
          }
          double v8 = v17[4];
        }
        goto LABEL_26;
      }
      if (v22)
      {
        do
        {
          char v18 = (double *)v10;
          uint64_t v10 = (void *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          char v18 = (double *)*((void *)v9 + 2);
          BOOL v14 = *(void *)v18 == (void)v9;
          BOOL v9 = v18;
        }
        while (v14);
      }
      double v8 = v18[4];
    }
    *a4 = v8;
LABEL_26:
    *a3 = v8;
  }
  BOOL v19 = v7 != 0;
  sub_2167FB780((uint64_t)&v21, v22);
  return v19;
}

pxrInternal__aapl__pxrReserved__::VtValue *pxrInternal__aapl__pxrReserved__::SdfData::GetNumTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::SdfData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  char v4 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  if (!v4) {
    char v4 = sub_216A9E57C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  }
  uint64_t result = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfData::_GetFieldValue((uint64_t)this, (unsigned int *)a2, v4);
  if (result)
  {
    uint64_t v6 = result;
    if (sub_216995B54(result))
    {
      uint64_t v7 = *((void *)v6 + 1);
      if ((v7 & 4) != 0) {
        uint64_t v8 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
      }
      else {
        uint64_t v8 = *(void *)v6;
      }
      return *(pxrInternal__aapl__pxrReserved__::VtValue **)(v8 + 16);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::GetBracketingTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::SdfData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, double *a4, double *a5)
{
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  if (!v10) {
    uint64_t v10 = sub_216A9E57C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  }
  uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfData::_GetFieldValue((uint64_t)this, (unsigned int *)a2, v10);
  if (result)
  {
    uint64_t v12 = result;
    uint64_t result = sub_216995B54((pxrInternal__aapl__pxrReserved__::VtValue *)result);
    if (result)
    {
      uint64_t v13 = *(void *)(v12 + 8);
      if ((v13 & 4) != 0) {
        BOOL v14 = (double *)(*(uint64_t (**)(uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(v12);
      }
      else {
        BOOL v14 = *(double **)v12;
      }
      if (!*((void *)v14 + 2)) {
        return 0;
      }
      double v15 = *(double *)(*(void *)v14 + 32);
      if (v15 < a3)
      {
        char v18 = (double *)*((void *)v14 + 1);
        double v16 = v14 + 1;
        char v17 = v18;
        if (v18)
        {
          BOOL v19 = v17;
          do
          {
            char v20 = v19;
            BOOL v19 = (double *)*((void *)v19 + 1);
          }
          while (v19);
        }
        else
        {
          uint64_t v21 = v16;
          do
          {
            char v20 = (double *)*((void *)v21 + 2);
            BOOL v22 = *(void *)v20 == (void)v21;
            uint64_t v21 = v20;
          }
          while (v22);
        }
        if (v20[4] > a3)
        {
          if (v17)
          {
            do
            {
              uint64_t v23 = (double **)(v17 + 1);
              if (v17[4] >= a3)
              {
                uint64_t v23 = (double **)v17;
                double v16 = v17;
              }
              char v17 = *v23;
            }
            while (*v23);
          }
          double v15 = v16[4];
          *a5 = v15;
          if (v15 != a3)
          {
            double v24 = *v16;
            if (*(void *)v16)
            {
              do
              {
                uint64_t v25 = *(double **)&v24;
                double v24 = *(double *)(*(void *)&v24 + 8);
              }
              while (v24 != 0.0);
            }
            else
            {
              do
              {
                uint64_t v25 = (double *)*((void *)v16 + 2);
                BOOL v22 = *(void *)v25 == (void)v16;
                double v16 = v25;
              }
              while (v22);
            }
            double v15 = v25[4];
          }
          goto LABEL_33;
        }
        if (v17)
        {
          do
          {
            char v26 = v17;
            char v17 = (double *)*((void *)v17 + 1);
          }
          while (v17);
        }
        else
        {
          do
          {
            char v26 = (double *)*((void *)v16 + 2);
            BOOL v22 = *(void *)v26 == (void)v16;
            double v16 = v26;
          }
          while (v22);
        }
        double v15 = v26[4];
      }
      *a5 = v15;
LABEL_33:
      *a4 = v15;
      return 1;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::QueryTimeSample(pxrInternal__aapl__pxrReserved__::SdfData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  if (!v8) {
    uint64_t v8 = sub_216A9E57C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  }
  uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfData::_GetFieldValue((uint64_t)this, (unsigned int *)a2, v8);
  if (result)
  {
    uint64_t v10 = (uint64_t *)result;
    uint64_t result = sub_216995B54((pxrInternal__aapl__pxrReserved__::VtValue *)result);
    if (result)
    {
      uint64_t v11 = v10[1];
      if ((v11 & 4) != 0) {
        uint64_t v12 = (*(uint64_t (**)(uint64_t *))((v11 & 0xFFFFFFFFFFFFFFF8) + 168))(v10);
      }
      else {
        uint64_t v12 = *v10;
      }
      uint64_t v15 = *(void *)(v12 + 8);
      uint64_t v13 = v12 + 8;
      uint64_t v14 = v15;
      if (!v15) {
        return 0;
      }
      uint64_t v16 = v13;
      do
      {
        char v17 = (uint64_t *)(v14 + 8);
        if (*(double *)(v14 + 32) >= a3)
        {
          char v17 = (uint64_t *)v14;
          uint64_t v16 = v14;
        }
        uint64_t v14 = *v17;
      }
      while (*v17);
      if (v16 == v13 || *(double *)(v16 + 32) > a3)
      {
        return 0;
      }
      else
      {
        if (a4) {
          sub_2168EC6DC(a4, (void *)(v16 + 40));
        }
        return 1;
      }
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::QueryTimeSample(uint64_t a1, unsigned int *a2, uint64_t (***a3)(void, uint64_t), double a4)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  if (!v8) {
    uint64_t v8 = sub_216A9E57C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  }
  uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfData::_GetFieldValue(a1, a2, v8);
  if (result)
  {
    uint64_t v10 = (uint64_t *)result;
    uint64_t result = sub_216995B54((pxrInternal__aapl__pxrReserved__::VtValue *)result);
    if (result)
    {
      uint64_t v11 = v10[1];
      if ((v11 & 4) != 0) {
        uint64_t v12 = (*(uint64_t (**)(uint64_t *))((v11 & 0xFFFFFFFFFFFFFFF8) + 168))(v10);
      }
      else {
        uint64_t v12 = *v10;
      }
      uint64_t v15 = *(void *)(v12 + 8);
      uint64_t v13 = v12 + 8;
      uint64_t v14 = v15;
      if (!v15) {
        return 0;
      }
      uint64_t v16 = v13;
      do
      {
        char v17 = (uint64_t *)(v14 + 8);
        if (*(double *)(v14 + 32) >= a4)
        {
          char v17 = (uint64_t *)v14;
          uint64_t v16 = v14;
        }
        uint64_t v14 = *v17;
      }
      while (*v17);
      if (v16 == v13 || *(double *)(v16 + 32) > a4)
      {
        return 0;
      }
      else if (a3)
      {
        char v18 = **a3;
        return v18(a3, v16 + 40);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfData::SetTimeSample(pxrInternal__aapl__pxrReserved__::SdfData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  v17[2] = *(uint64_t **)MEMORY[0x263EF8340];
  double v16 = a3;
  if (*((void *)a4 + 1))
  {
    v15[0] = 0;
    v15[1] = 0;
    uint64_t v14 = (uint64_t *)v15;
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
    if (!v7) {
      uint64_t v7 = sub_216A9E57C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
    }
    MutableFieldValue = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfData::_GetMutableFieldValue((uint64_t)this, (unsigned int *)a2, v7);
    BOOL v9 = (uint64_t *)MutableFieldValue;
    if (MutableFieldValue && sub_216995B54(MutableFieldValue))
    {
      uint64_t v10 = (uint64_t *)sub_216A9E608(v9);
      sub_2168A6B2C(v10, (uint64_t)&v14);
    }
    v17[0] = (uint64_t *)&v16;
    uint64_t v11 = sub_216A9E780(&v14, &v16, (uint64_t)&unk_2174BFD90, v17);
    sub_2168EC6DC(v11 + 5, a4);
    if (v9)
    {
      sub_216A9D208((pxrInternal__aapl__pxrReserved__::VtValue *)v9, (uint64_t)&v14);
    }
    else
    {
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
      if (!v13) {
        uint64_t v13 = sub_216A9E57C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
      }
      sub_216A9D28C((uint64_t)&v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v17);
      (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfData *, const pxrInternal__aapl__pxrReserved__::SdfPath *, pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *, uint64_t **))(*(void *)this + 152))(this, a2, v13, v17);
      sub_2168EE084((uint64_t)v17);
    }
    sub_216997EC4((uint64_t)&v14, v15[0]);
  }
  else
  {
    uint64_t v12 = *(void (**)(void))(*(void *)this + 304);
    v12();
  }
}

void sub_216A9D1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t *sub_216A9D208(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  if ((sub_216995B54(a1) & 1) == 0)
  {
    v7[0] = 0;
    v7[1] = 0;
    uint64_t v6 = v7;
    sub_216A9E868(a1, (uint64_t)&v6);
    sub_216997EC4((uint64_t)&v6, v7[0]);
  }
  char v4 = (uint64_t *)sub_216A9E608((uint64_t *)a1);
  return sub_2168A6B2C(v4, a2);
}

void sub_216A9D274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t *sub_216A9D28C@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  return sub_216A9D208(a2, a1);
}

void sub_216A9D2BC(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfData::EraseTimeSample(pxrInternal__aapl__pxrReserved__::SdfData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3)
{
  double v14 = a3;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = &v12;
  BOOL v5 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  if (!v5) {
    BOOL v5 = sub_216A9E57C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  }
  MutableFieldValue = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfData::_GetMutableFieldValue((uint64_t)this, (unsigned int *)a2, v5);
  uint64_t v7 = (uint64_t *)MutableFieldValue;
  if (MutableFieldValue && sub_216995B54(MutableFieldValue))
  {
    uint64_t v8 = (uint64_t *)sub_216A9E608(v7);
    sub_2168A6B2C(v8, (uint64_t)&v11);
    sub_216A9ECB8((uint64_t)&v11, &v14);
    if (v13)
    {
      BOOL v9 = (uint64_t *)sub_216A9E608(v7);
      sub_2168A6B2C(v9, (uint64_t)&v11);
    }
    else
    {
      if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfDataTokens)) {
        sub_216A9E57C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
      }
      (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfData *, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)this + 168))(this, a2);
    }
  }
  sub_216997EC4((uint64_t)&v11, v12);
}

void sub_216A9D3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t sub_216A9D400(uint64_t a1)
{
  sub_216A9D43C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216A9D43C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_216A9D480((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_216A9D480(uint64_t a1)
{
  unint64_t v3 = (void **)(a1 + 16);
  sub_216A94530(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_21697C414((_DWORD *)a1);
}

uint64_t sub_216A9D4CC(uint64_t a1, _DWORD *a2, uint64_t **a3)
{
  uint64_t v6 = sub_216981010((_DWORD *)a1, a2);
  sub_21698105C(v6 + 1, a2 + 1);
  int v7 = *(_DWORD *)a3;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = v7;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_216A9D554((uint64_t *)(a1 + 16), a3[1], a3[2], 0xAAAAAAAAAAAAAAABLL * (a3[2] - a3[1]));
  return a1;
}

void sub_216A9D540(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216A9D554(uint64_t *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_216782E84(result, a4);
    uint64_t result = sub_216A9D5DC((uint64_t)(v6 + 2), a2, a3, (uint64_t *)v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_216A9D5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216A94530(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_216A9D5DC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  char v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  double v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216A9D680(v4, v6);
      v6 += 3;
      char v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_216A9D6F8((uint64_t)v8);
  return v4;
}

void sub_216A9D66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_216A9D680(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2168EE4C4(a1 + 1, a2 + 1);
  return a1;
}

uint64_t sub_216A9D6F8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216A9D730(a1);
  }
  return a1;
}

uint64_t sub_216A9D730(uint64_t result)
{
  uint64_t v2 = *(uint64_t **)(result + 8);
  uint64_t v1 = *(uint64_t **)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  while (v3 != v4)
  {
    uint64_t result = sub_2168EE084(v3 - 16);
    uint64_t v6 = *(void *)(v3 - 24);
    v3 -= 24;
    uint64_t v5 = v6;
    if ((v6 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

uint64_t sub_216A9D790(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21697D878((_DWORD *)a1, (_DWORD *)a2);
  sub_21697D8B4(v4 + 1, (_DWORD *)(a2 + 4));
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  return a1;
}

uint64_t sub_216A9D7F0(uint64_t a1)
{
  memset(v7, 0, sizeof(v7));
  int v8 = 1065353216;
  sub_21698718C((uint64_t)v7, a1);
  BOOL HasConcurrency = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v1);
  if (HasConcurrency)
  {
    uint64_t DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    uint64_t v4 = sub_216A9D940(DetachedDispatcher, (uint64_t)v7);
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__ *)(***(uint64_t (****)(void, uint64_t, uint64_t))(v4 - 40))(*(void *)(v4 - 40), v4, v4 - 8);
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v5);
  }
  else
  {
    sub_216A9D8A0();
  }
  return sub_216A9D400((uint64_t)v7);
}

void sub_216A9D88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216A9D8A0()
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  v0 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v0) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  uint64_t v1 = sub_216862604(&v3, 0);
  char v4 = 0;
  uint64_t v2 = (void *)sub_2168520EC(v0 + 19, &v4);
  if (v2 != v1) {
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v0, v1, v2);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_216A9D92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216A9D940(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 256);
  v7[0] = 0;
  v7[1] = v4;
  uint64_t v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0x38uLL);
  *(unsigned char *)(v5 - 11) = 1;
  *(void *)uint64_t v5 = &unk_26C758858;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 8) = 0u;
  *(_DWORD *)(v5 + 40) = 1065353216;
  sub_21698718C(v5 + 8, a2);
  *(void *)(v5 + 48) = a1 + 264;
  return v5;
}

void *sub_216A9D9D8(void *a1)
{
  *a1 = &unk_26C758858;
  sub_216A9D400((uint64_t)(a1 + 1));
  return a1;
}

void sub_216A9DA1C(void *a1)
{
  *a1 = &unk_26C758858;
  sub_216A9D400((uint64_t)(a1 + 1));

  operator delete(a1);
}

uint64_t sub_216A9DA70(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216A9D8A0();
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 48));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216A9DB00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void *sub_216A9DB14(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = v3;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = v3 & (*(void *)&v2 - 1);
  }
  unint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == *(void *)a2) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void sub_216A9DBF0(uint64_t a1, uint64_t a2)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216A9D480((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *sub_216A9DC48(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = v5;
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = v5 & (v6 - 1);
    }
    unint64_t v8 = *(void **)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      char v9 = (void *)*v8;
      if (*v8)
      {
        do
        {
          unint64_t v10 = v9[1];
          if (v10 == v5)
          {
            if (v9[2] == *(void *)a2) {
              return v9;
            }
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6) {
                v10 %= v6;
              }
            }
            else
            {
              v10 &= v6 - 1;
            }
            if (v10 != v3) {
              break;
            }
          }
          char v9 = (void *)*v9;
        }
        while (v9);
      }
    }
  }
  sub_216A9DEB8(a1, v5, a3, (uint64_t)v20);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    sub_21678A04C(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
  }
  char v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *(void *)v20[0] = *v17;
    void *v17 = v20[0];
  }
  else
  {
    *(void *)v20[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v20[0])
    {
      unint64_t v18 = *(void *)(*(void *)v20[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v18) = v20[0];
    }
  }
  char v9 = (void *)v20[0];
  v20[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216A9DBF0((uint64_t)v20, 0);
  return v9;
}

void sub_216A9DEA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216A9DBF0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216A9DEB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_216A9DF30((uint64_t)(v8 + 2), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216A9DF18(_Unwind_Exception *a1)
{
  sub_216A9DBF0(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216A9DF30(uint64_t a1, uint64_t a2)
{
  uint8x8_t v4 = sub_216981010((_DWORD *)a1, (_DWORD *)a2);
  sub_21698105C(v4 + 1, (_DWORD *)(a2 + 4));
  int v5 = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = v5;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_216A9D554((uint64_t *)(a1 + 16), *(uint64_t **)(a2 + 16), *(uint64_t **)(a2 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3));
  return a1;
}

void sub_216A9DF98(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

void *sub_216A9DFAC(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = v6;
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = v6 & (v7 - 1);
    }
    char v9 = *(void **)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      unint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(void *)a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_216A9E21C(a1, v6, a4, (uint64_t)v21);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }
  unint64_t v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *(void *)v21[0] = *v18;
    void *v18 = v21[0];
  }
  else
  {
    *(void *)v21[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v21[0])
    {
      unint64_t v19 = *(void *)(*(void *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v21[0];
    }
  }
  unint64_t v10 = (void *)v21[0];
  v21[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216A9DBF0((uint64_t)v21, 0);
  return v10;
}

void sub_216A9E204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216A9DBF0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_216A9E21C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  void *v8 = 0;
  v8[1] = a2;
  char v9 = *a3;
  sub_216981010((_DWORD *)v8 + 4, v9);
  uint64_t result = sub_21698105C((_DWORD *)v8 + 5, v9 + 1);
  *((_DWORD *)v8 + 6) = 0;
  v8[5] = 0;
  v8[6] = 0;
  v8[4] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

uint64_t sub_216A9E298(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v9 > v6) {
    unint64_t v6 = 2 * v9;
  }
  if (v9 >= 0x555555555555555) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v6;
  }
  v16[4] = a1 + 2;
  if (v10) {
    unint64_t v11 = sub_216782ED8(v8, v10);
  }
  else {
    unint64_t v11 = 0;
  }
  float v12 = &v11[3 * v5];
  v16[0] = v11;
  v16[1] = v12;
  v16[3] = &v11[3 * v10];
  uint64_t v13 = **a3;
  void *v12 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *v12 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11[3 * v5 + 2] = 0;
  void v16[2] = v12 + 3;
  sub_216A94BDC(a1, v16);
  uint64_t v14 = a1[1];
  sub_216A94DA0((uint64_t)v16);
  return v14;
}

void sub_216A9E3B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216A94DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216A9E3CC(char **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      sub_21677CB10();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    uint64_t v24 = v4;
    if (v13)
    {
      uint64_t v14 = (char *)sub_21677CB28(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    unint64_t v15 = &v14[8 * v11];
    unint64_t v16 = &v14[8 * v13];
    uint64_t v23 = v16;
    bzero(v15, 8 * a2);
    size_t v17 = &v15[8 * a2];
    *((void *)&v22 + 1) = v17;
    if (v7 != v8)
    {
      do
      {
        uint64_t v18 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v15 - 1) = v18;
        v15 -= 8;
        *(void *)uint64_t v7 = 0;
      }
      while (v7 != v8);
      size_t v17 = (char *)*((void *)&v22 + 1);
      unint64_t v16 = v23;
    }
    long long v19 = *(_OWORD *)a1;
    *a1 = v15;
    a1[1] = v17;
    long long v22 = v19;
    char v20 = a1[2];
    a1[2] = v16;
    uint64_t v23 = v20;
    uint64_t v21 = v19;
    sub_2168BE9D8((uint64_t)&v21);
  }
}

uint64_t *sub_216A9E4F4(uint64_t **a1, double *a2, double *a3, uint64_t *a4)
{
  unint64_t v6 = sub_216997C5C(a1, a2, &v11, &v10, a3);
  uint64_t v7 = *(uint64_t **)v6;
  if (!*(void *)v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x28uLL);
    void v7[4] = *a4;
    sub_21677B358(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *sub_216A9E57C(atomic_ullong *a1)
{
  uint64_t result = sub_216A9E5C4();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType::~SdfDataTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *sub_216A9E5C4()
{
  v0 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType::SdfDataTokens_StaticTokenType(v0);
  return v0;
}

void sub_216A9E5F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216A9E608(uint64_t *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_216A9E69C(a1);
}

uint64_t sub_216A9E69C(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(*a1 + 24));
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x20uLL);
    sub_216997AE0((uint64_t *)v3, *a1);
    atomic_store(0, (unsigned int *)v3 + 6);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 6, 1u, memory_order_relaxed);
    uint64_t v5 = *a1;
    *a1 = (uint64_t)v3;
    sub_216A9E728(&v5);
  }
  return *a1;
}

void sub_216A9E714(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216A9E728(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_216997EC4(v2, *(void **)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *sub_216A9E780(uint64_t **a1, double *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (v6)
  {
    double v10 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        double v11 = *((double *)v6 + 4);
        if (v10 >= v11) {
          break;
        }
        unint64_t v6 = (uint64_t *)*v6;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      unint64_t v6 = (uint64_t *)v6[1];
      if (!v6)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v12 = (uint64_t *)operator new(0x38uLL);
    v14[1] = v7;
    void v12[4] = **a4;
    v12[6] = 0;
    char v15 = 1;
    sub_21677B358(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    sub_216997E6C((uint64_t)v14, 0);
    return v12;
  }
  return (uint64_t *)v9;
}

void *sub_216A9E868(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_26C758890;
  sub_216A9EC50(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216A9E8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216A9E938(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_216A9E958(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_216A9E728(a1);
}

uint64_t sub_216A9E968()
{
  return 1;
}

unint64_t sub_216A9E970(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = 0;
  char v4 = 0;
  sub_216A9EAB0((uint64_t)&v3, *(void **)v1, (void *)(v1 + 8));
  return bswap64(0x9E3779B97F4A7C55 * v3);
}

uint64_t sub_216A9E9C0(void **a1, void **a2, char *a3)
{
  return sub_216A9EB74(*a1, *a2, a3);
}

uint64_t sub_216A9E9CC(void **a1, void *a2, char *a3)
{
  return sub_216A9EB74(*a1, a2, a3);
}

uint64_t sub_216A9E9D8()
{
  return 0;
}

uint64_t sub_216A9E9E4(uint64_t **a1, uint64_t a2, char *a3)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1, a3);
}

void *sub_216A9E9F4()
{
  return &unk_26C755220;
}

uint64_t sub_216A9EA00()
{
  return 0;
}

uint64_t sub_216A9EA08()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216A9EA14()
{
  return 0;
}

uint64_t sub_216A9EA1C()
{
  return 0;
}

BOOL sub_216A9EA24(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217479096 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216A9EA60(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755220, a2, a3);
}

void *sub_216A9EA84()
{
  return &unk_26C755220;
}

uint64_t sub_216A9EA90(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t *sub_216A9EA98@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = &off_26C758890;
  return sub_216A9EC50(a2, v2);
}

uint64_t sub_216A9EAB0(uint64_t result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t v5 = (void *)a2[1];
      uint64_t v6 = a2;
      if (v5)
      {
        do
        {
          uint64_t v7 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v6[2];
          BOOL v8 = *v7 == (void)v6;
          uint64_t v6 = v7;
        }
        while (!v8);
      }
      uint64_t result = sub_216A9EB30(v4, (double *)a2 + 4);
      a2 = v7;
    }
    while (v7 != a3);
  }
  return result;
}

uint64_t sub_216A9EB30(uint64_t a1, double *a2)
{
  double v2 = *a2;
  if (*a2 == 0.0) {
    double v2 = 0.0;
  }
  double v3 = v2;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v3 = *(void *)&v2
  }
                   + ((*(void *)a1
                     + *(void *)&v2
                     + (*(void *)a1 + *(void *)&v2) * (*(void *)a1 + *(void *)&v2)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v3;
  return sub_2168EEDCC(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 1));
}

uint64_t sub_216A9EB74(void *a1, void *a2, char *a3)
{
  if (a1[2] == a2[2])
  {
    double v3 = (double *)(a1 + 1);
    uint64_t v4 = (double *)*a1;
    if ((void *)*a1 == a1 + 1) {
      return 1;
    }
    uint64_t v5 = (void *)*a2;
    while (v4[4] == *((double *)v5 + 4))
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(v4 + 5), (std::type_info *)(v5 + 5), a3);
      if (!result) {
        return result;
      }
      uint64_t v7 = (double *)*((void *)v4 + 1);
      BOOL v8 = v4;
      if (v7)
      {
        do
        {
          uint64_t v4 = v7;
          uint64_t v7 = *(double **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v4 = (double *)*((void *)v8 + 2);
          BOOL v9 = *(void *)v4 == (void)v8;
          BOOL v8 = v4;
        }
        while (!v9);
      }
      double v10 = (void *)v5[1];
      if (v10)
      {
        do
        {
          double v11 = v10;
          double v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          double v11 = (void *)v5[2];
          BOOL v9 = *v11 == (void)v5;
          uint64_t v5 = v11;
        }
        while (!v9);
      }
      uint64_t v5 = v11;
      if (v4 == v3) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t *sub_216A9EC50(void *a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x20uLL);
  uint64_t result = sub_216997AE0((uint64_t *)v4, a2);
  atomic_store(0, (unsigned int *)v4 + 6);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 6, 1u, memory_order_relaxed);
  return result;
}

void sub_216A9ECA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216A9ECB8(uint64_t a1, double *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  double v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    uint64_t v5 = (uint64_t *)(v2 + 8);
    if (*(double *)(v2 + 32) >= v3)
    {
      uint64_t v5 = (uint64_t *)v2;
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v5;
  }
  while (*v5);
  if (v4 == a1 + 8 || v3 < *(double *)(v4 + 32)) {
    return 0;
  }
  sub_2167AE00C((uint64_t **)a1, (uint64_t *)v4);
  sub_2168EE084(v4 + 40);
  operator delete((void *)v4);
  return 1;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::SdfSpec *a2, const std::type_info *a3)
{
  char SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);

  return pxrInternal__aapl__pxrReserved__::Sdf_SpecType::CanCast(SpecType, a2);
}

void *pxrInternal__aapl__pxrReserved__::SdfCreateHandle<pxrInternal__aapl__pxrReserved__::SdfLayer>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_216A9ED88(a2, a1);
}

void *sub_216A9ED88(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_21685203C((unint64_t *)(a2 + 16), &v6);
    double v3 = (atomic_uint *)a1[1];
    a1[1] = v6;
    uint64_t v6 = 0;
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
      }
      uint64_t v4 = v6;
      if (v6 && atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
  }
  return a1;
}

void sub_216A9EE54(_Unwind_Exception *exception_object)
{
  double v3 = *(atomic_uint **)(v1 + 8);
  if (v3) {
    sub_217323F90(v3);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens_StaticTokenType::~SdfFileFormatTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens_StaticTokenType *this)
{
  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

{
  void **v2;

  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens_StaticTokenType::SdfFileFormatTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens_StaticTokenType *this)
{
  uint64_t v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "target", 0);
  uint64_t v3 = *v2;
  if ((*v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = operator new(8uLL);
  *((void *)this + 1) = v4;
  *((void *)this + 2) = v4;
  *uint64_t v4 = v3;
  uint64_t v5 = v4 + 1;
  *((void *)this + 3) = v4 + 1;
  if ((v3 & 7) != 0)
  {
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      *v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 2) = v5;
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  else
  {
    *((void *)this + 2) = v5;
  }
  return this;
}

void sub_216A9EFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v11 = v10;
  sub_216889A04(&a9);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2173242CC(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  *(void *)&long long v19 = *MEMORY[0x263EF8340];
  if (*(char *)(a5 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a5;
    uint64_t v18 = *(void *)(a5 + 16);
  }
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  char v15 = &v12;
  char v16 = 0;
  uint64_t v12 = (char *)operator new(0x18uLL);
  unint64_t v13 = v12;
  uint64_t v14 = v12 + 24;
  unint64_t v13 = sub_21695F6C0((uint64_t)&v14, (long long *)__p, &v19, v12);
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat(a1, a2, a3, a4, (long long **)&v12, a6);
  char v15 = &v12;
  sub_216782F20((void ***)&v15);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_216A9F144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, long long **a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C758958;
  *(void *)(a1 + 24) = a6;
  uint64_t v10 = *a2;
  *(void *)(a1 + 32) = *a2;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *a4;
  *(void *)(a1 + 40) = *a4;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 40) &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
  }
  std::operator+<char>();
  uint64_t v12 = *a3;
  *(void *)(a1 + 72) = *a3;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 72) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216812BD8((char *)(a1 + 80), *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  unint64_t v13 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load((unint64_t *)&qword_267B8ED90);
  if (!v13) {
    unint64_t v13 = sub_216AA0FD0(&qword_267B8ED90);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::GetPrimaryFormatForExtension((uint64_t)v13, (unsigned __int8 *)*a5, (atomic_uint **)&v17);
  uint64_t v14 = (atomic_uint *)(v17 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = *a2;
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit(v14, 0xFFFFFFFE, memory_order_release);
  }
  *(unsigned char *)(a1 + 104) = v14 == (atomic_uint *)(v15 & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void sub_216A9F338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216782F20((void ***)va);
  uint64_t v7 = *(void *)(v2 + 72);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(char *)(v2 + 71) < 0) {
    operator delete(*v4);
  }
  uint64_t v8 = *(void *)(v2 + 40);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *(void *)(v2 + 32);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216859A88(v3, v6);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)v2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  *(void *)&long long v18 = *MEMORY[0x263EF8340];
  if (*(char *)(a5 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a5;
    uint64_t v17 = *(void *)(a5 + 16);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  uint64_t v14 = &v11;
  char v15 = 0;
  uint64_t v11 = (char *)operator new(0x18uLL);
  uint64_t v12 = v11;
  unint64_t v13 = v11 + 24;
  uint64_t v12 = sub_21695F6C0((uint64_t)&v13, (long long *)__p, &v18, v11);
  uint64_t v9 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat(a1, a2, a3, a4, (long long **)&v11, v9);
  uint64_t v14 = &v11;
  sub_216782F20((void ***)&v14);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_216A9F500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, long long **a5)
{
  uint64_t v5 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }

  return pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat(a1, a2, a3, a4, a5, v5);
}

void pxrInternal__aapl__pxrReserved__::SdfFileFormat::~SdfFileFormat(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  *(void *)this = &unk_26C758958;
  uint64_t v6 = (void **)((char *)this + 80);
  sub_216782F20(&v6);
  uint64_t v3 = *((void *)this + 9);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  uint64_t v4 = *((void *)this + 5);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 4);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216859A88((uint64_t *)this + 2, v2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(this);
}

void pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetDefaultFileFormatArguments(void *a1@<X8>)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::SdfFileFormat::_InitDetachedData@<X0>(char **a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((_DWORD *)v2 + 2) = 1;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26C7586F0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v2);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)v2 + 64))(v2, v3, 7);
  *a1 = v2;
  uint64_t v5 = 0;
  return sub_2169CC880(&v5);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::SdfFileFormat::InitDetachedData@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **__return_ptr))(*(void *)a1 + 128))(&v8);
  uint64_t v3 = v8;
  if (v8)
  {
    uint64_t v4 = sub_216A5B7B0((uint64_t *)&v8);
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4))
    {
      v6[0] = "sdf/fileFormat.cpp";
      v6[1] = "InitDetachedData";
      v6[2] = 148;
      v6[3] = "SdfAbstractDataRefPtr pxrInternal__aapl__pxrReserved__::SdfFileFormat::InitDetachedData(const FileFormatAr"
              "guments &) const";
      char v7 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"File format did not return detached data object.");
      pxrInternal__aapl__pxrReserved__::SdfFileFormat::_InitDetachedData(a2);
      return sub_216AA10A8(&v8);
    }
    uint64_t v3 = v8;
  }
  *a2 = (char *)v3;
  uint64_t v8 = 0;
  return sub_216AA10A8(&v8);
}

void sub_216A9F840(_Unwind_Exception *a1)
{
  sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v1 - 24));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::NewLayer@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  *a2 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::ShouldSkipAnonymousReload(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 112))();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::ShouldReadAnonymousLayers(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 120))();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetSchema(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return *((void *)this + 3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return (uint64_t)this + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetTarget(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return (uint64_t)this + 40;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileCookie(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return (uint64_t)this + 48;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetVersionString(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return (uint64_t)this + 72;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::IsPrimaryFormatForExtensions(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return *((unsigned __int8 *)this + 104);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileExtensions(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return (uint64_t)this + 80;
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetPrimaryFileExtension(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EDB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8EDB0))
  {
    qword_267B8ED98 = 0;
    unk_267B8EDA0 = 0;
    qword_267B8EDA8 = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267B8ED98, &dword_216758000);
    __cxa_guard_release(&qword_267B8EDB0);
  }
  uint64_t result = (uint64_t *)*((void *)this + 10);
  if (result == *((uint64_t **)this + 11))
  {
    v3[0] = "sdf/fileFormat.cpp";
    v3[1] = "GetPrimaryFileExtension";
    _OWORD v3[2] = 223;
    v3[3] = "const std::string &pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetPrimaryFileExtension() const";
    char v4 = 0;
    if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v3, "!_extensions.empty()", 0)) {
      return (uint64_t *)*((void *)this + 10);
    }
    else {
      return &qword_267B8ED98;
    }
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfFileFormat::IsSupportedExtension(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileExtension(a2, (uint64_t)__p);
  unint64_t v3 = v7;
  if ((v7 & 0x80u) != 0) {
    unint64_t v3 = (unint64_t)__p[1];
  }
  if (!v3)
  {
    uint64_t v4 = 0;
    if ((v7 & 0x80) == 0) {
      return v4 != 0;
    }
    goto LABEL_5;
  }
  uint64_t v4 = sub_216AA10D8(*(void *)(a1 + 80), *(void *)(a1 + 88), (unsigned __int8 **)__p);
  if ((v7 & 0x80) != 0) {
LABEL_5:
  }
    operator delete(__p[0]);
  return v4 != 0;
}

void pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileExtension(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    if (!*(void *)(a1 + 8))
    {
      uint64_t v9 = *(void **)a1;
      sub_216778F24((unsigned char *)a2, v9, 0);
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 23))
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(void *)(a2 + 16) = *(void *)(a1 + 16);
    return;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_GetExtension((const std::string *)a1);
  unsigned __int8 v4 = v12;
  unsigned __int8 v5 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v6 = v12;
  }
  else {
    unint64_t v6 = v11;
  }
  if (v6) {
    p_p = &__p;
  }
  else {
    p_p = (void **)a1;
  }
  if (!v6) {
    unsigned __int8 v4 = *(unsigned char *)(a1 + 23);
  }
  if ((v4 & 0x80) == 0)
  {
    *(_OWORD *)a2 = *(_OWORD *)p_p;
    *(void *)(a2 + 16) = p_p[2];
    if ((v5 & 0x80) == 0) {
      return;
    }
    goto LABEL_15;
  }
  if (v6) {
    unint64_t v8 = v11;
  }
  else {
    unint64_t v8 = *(void *)(a1 + 8);
  }
  sub_216778F24((unsigned char *)a2, *p_p, v8);
  if ((v12 & 0x80) != 0) {
LABEL_15:
  }
    operator delete(__p);
}

void sub_216A9FB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::IsPackage(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return 0;
}

void pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetPackageRootLayerPath(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::WriteToFile()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::ReadDetached(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, unsigned __int8 *a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  if (!result) {
    return result;
  }
  pxrInternal__aapl__pxrReserved__::SdfLayer::_GetData(a2, (uint64_t *)&v32);
  uint64_t v6 = sub_216A5B4F4((uint64_t *)&v32);
  char v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
  unint64_t v8 = v33;
  if (v33 && atomic_fetch_add_explicit((atomic_uint *volatile)v33 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(const char *))(*(void *)v8 + 8))(v8);
  }
  if (v7) {
    return 1;
  }
  char v32 = "sdf/fileFormat.cpp";
  uint64_t v33 = "ReadDetached";
  uint64_t v34 = 272;
  BOOL v35 = "BOOL pxrInternal__aapl__pxrReserved__::SdfFileFormat::ReadDetached(SdfLayer *, const std::string &, BOOL) const";
  char v36 = 0;
  uint64_t Identifier = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(a2);
  uint64_t v10 = Identifier[23];
  size_t v11 = *((void *)Identifier + 1);
  if ((v10 & 0x80u) == 0) {
    uint64_t v12 = Identifier[23];
  }
  else {
    uint64_t v12 = *((void *)Identifier + 1);
  }
  uint64_t v13 = a3[23];
  int v14 = (char)v13;
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *((void *)a3 + 1);
  }
  if (v12 != v13)
  {
LABEL_21:
    if (!v13) {
      goto LABEL_22;
    }
LABEL_31:
    uint64_t v23 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(a2);
    if (*(char *)(v23 + 23) >= 0) {
      uint64_t v26 = v23;
    }
    else {
      uint64_t v26 = *(void *)v23;
    }
    if ((a3[23] & 0x80u) == 0) {
      unint64_t v27 = a3;
    }
    else {
      unint64_t v27 = *(unsigned __int8 **)a3;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"@%s@ (%s)", v24, v25, v26, v27);
    int v22 = 0;
    if (v29 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    int v20 = 1;
    goto LABEL_41;
  }
  if (v14 >= 0) {
    char v15 = a3;
  }
  else {
    char v15 = *(unsigned __int8 **)a3;
  }
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*(const void **)Identifier, v15, v11) && v11) {
      goto LABEL_31;
    }
  }
  else if (Identifier[23])
  {
    while (*Identifier == *v15)
    {
      ++Identifier;
      ++v15;
      if (!--v10) {
        goto LABEL_22;
      }
    }
    goto LABEL_21;
  }
LABEL_22:
  uint64_t v16 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(a2);
  if (*(char *)(v16 + 23) >= 0) {
    uint64_t v19 = v16;
  }
  else {
    uint64_t v19 = *(void *)v16;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"@%s@", v17, v18, v19);
  int v20 = 0;
  if (v31 >= 0) {
    p_p = (const char *)&v30;
  }
  else {
    p_p = (const char *)v30;
  }
  int v22 = 1;
LABEL_41:
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"File format did not return detached layer when reading layer %s.", p_p);
  if (v20 && v29 < 0) {
    operator delete(__p);
  }
  if (v22)
  {
    if (v31 < 0) {
      operator delete(v30);
    }
  }
  return 0;
}

void sub_216A9FE40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::_ReadDetached(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, uint64_t a3, uint64_t a4)
{
  char v43 = 0;
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::SdfFileFormat::_ReadAndCopyLayerDataToMemory(a1, a2, a3, a4, &v43);
  if (v7 && v43)
  {
    unint64_t v8 = (char *)atomic_load((unint64_t *)&qword_267B8EDB8);
    if (!v8)
    {
      unint64_t v8 = (char *)operator new(0x58uLL);
      uint64_t v36 = 0;
      *((void *)v8 + 1) = 0;
      *(void *)unint64_t v8 = v8 + 8;
      *((void *)v8 + 3) = 850045863;
      *((void *)v8 + 2) = 0;
      *((_OWORD *)v8 + 2) = 0u;
      *((_OWORD *)v8 + 3) = 0u;
      *((_OWORD *)v8 + 4) = 0u;
      *((void *)v8 + 10) = 0;
      atomic_compare_exchange_strong(&qword_267B8EDB8, (unint64_t *)&v36, (unint64_t)v8);
      if (v36)
      {
        std::mutex::~mutex((std::mutex *)(v8 + 24));
        sub_2168CB05C((uint64_t)v8, *((void **)v8 + 1));
        operator delete(v8);
        unint64_t v8 = (char *)atomic_load((unint64_t *)&qword_267B8EDB8);
      }
    }
    uint64_t v9 = (std::mutex *)(v8 + 24);
    std::mutex::lock((std::mutex *)(v8 + 24));
    uint64_t v10 = (uint64_t *)(a1 + 32);
    sub_216A8E144((uint64_t **)v8, v10, v10);
    char v12 = v11;
    std::mutex::unlock(v9);
    if (v12)
    {
      v41[0] = "sdf/fileFormat.cpp";
      v41[1] = "_ReadDetached";
      v41[2] = 329;
      v41[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::SdfFileFormat::_ReadDetached(SdfLayer *, const std::string &, BOOL) const";
      char v42 = 0;
      unint64_t v13 = *v10 & 0xFFFFFFFFFFFFFFF8;
      if (v13)
      {
        int v14 = (const char *)(v13 + 16);
        if (*(char *)(v13 + 39) < 0) {
          int v14 = *(const char **)v14;
        }
      }
      else
      {
        int v14 = "";
      }
      uint64_t Identifier = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(a2);
      uint64_t v16 = Identifier[23];
      size_t v17 = *((void *)Identifier + 1);
      if ((v16 & 0x80u) == 0) {
        uint64_t v18 = Identifier[23];
      }
      else {
        uint64_t v18 = *((void *)Identifier + 1);
      }
      uint64_t v19 = *(unsigned __int8 *)(a3 + 23);
      int v20 = (char)v19;
      if ((v19 & 0x80u) != 0) {
        uint64_t v19 = *(void *)(a3 + 8);
      }
      if (v18 != v19) {
        goto LABEL_23;
      }
      if (v20 >= 0) {
        uint64_t v21 = (unsigned __int8 *)a3;
      }
      else {
        uint64_t v21 = *(unsigned __int8 **)a3;
      }
      if ((v16 & 0x80) != 0)
      {
        if (memcmp(*(const void **)Identifier, v21, v17) && v17) {
          goto LABEL_33;
        }
      }
      else if (Identifier[23])
      {
        while (*Identifier == *v21)
        {
          ++Identifier;
          ++v21;
          if (!--v16) {
            goto LABEL_24;
          }
        }
LABEL_23:
        if (!v19) {
          goto LABEL_24;
        }
LABEL_33:
        uint64_t v30 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(a2);
        if (*(char *)(v30 + 23) >= 0) {
          uint64_t v33 = v30;
        }
        else {
          uint64_t v33 = *(void *)v30;
        }
        if (*(char *)(a3 + 23) >= 0) {
          uint64_t v34 = a3;
        }
        else {
          uint64_t v34 = *(void *)a3;
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"@%s@ (%s)", v31, v32, v33, v34);
        int v29 = 0;
        if (v38 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        int v27 = 1;
        goto LABEL_43;
      }
LABEL_24:
      uint64_t v22 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(a2);
      if (*(char *)(v22 + 23) >= 0) {
        uint64_t v25 = v22;
      }
      else {
        uint64_t v25 = *(void *)v22;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"@%s@", v23, v24, v25);
      int v27 = 0;
      if (v40 >= 0) {
        p_p = &v39;
      }
      else {
        p_p = v39;
      }
      int v29 = 1;
LABEL_43:
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v41, (pxrInternal__aapl__pxrReserved__ *)"File format plugin '%s' did not produce a detached layer when requested. Layer data has been copied to produce a detached layer, which may impact performance. The file format should be updated to avoid this issue. This was first encountered whenreading %s", v26, v14, p_p);
      if (v27 && v38 < 0) {
        operator delete(__p);
      }
      if (v29 && v40 < 0) {
        operator delete(v39);
      }
    }
  }
  return v7;
}

void sub_216AA0158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::_ReadAndCopyLayerDataToMemory(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if (v7)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::_GetData(a2, &v17);
    unint64_t v8 = sub_216AA03A8(&v17);
    if (v9 & 1 | (unint64_t)v8
      && (uint64_t v10 = sub_216A5B4F4(&v17), ((*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10) & 1) == 0))
    {
      char v11 = (char *)operator new(0x40uLL);
      *((_DWORD *)v11 + 2) = 1;
      *((void *)v11 + 2) = 0;
      *(void *)char v11 = &unk_26C7586F0;
      *(_OWORD *)(v11 + 24) = 0u;
      *(_OWORD *)(v11 + 40) = 0u;
      *((_DWORD *)v11 + 14) = 1065353216;
      char v15 = 0;
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v11;
      sub_2169CC880(&v15);
      uint64_t v12 = sub_216A5B7B0((uint64_t *)&v16);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v12 + 16))(v12, &v17);
      pxrInternal__aapl__pxrReserved__::SdfFileFormat::_SetLayerData(a2, (uint64_t *)&v16, 1);
      if (a5) {
        *a5 = 1;
      }
      sub_216AA10A8(&v16);
    }
    else if (a5)
    {
      *a5 = 0;
    }
    uint64_t v13 = v18;
    if (v18 && atomic_fetch_add_explicit((atomic_uint *volatile)(v18 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  return v7;
}

void sub_216AA0348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, atomic_uint *a12)
{
  if (a12)
  {
    if (atomic_fetch_add_explicit(a12 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a12 + 8))(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t (*sub_216AA03A8(void *a1))(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14);
  if (*a1) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  else {
    return sub_216AA11A4;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::_SetLayerData(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfFileFormat::_SetLayerData(a1, a2, 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::ReadFromString()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::WriteToStream()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::WriteToString()
{
  return 0;
}

void pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetExternalAssetDependencies(void *a1@<X8>)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfFileFormat::SupportsReading(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load((unint64_t *)&qword_267B8ED90);
  if (!v2) {
    uint64_t v2 = sub_216AA0FD0(&qword_267B8ED90);
  }
  PrimaryFileExtension = pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetPrimaryFileExtension(this);
  uint64_t v4 = (uint64_t)PrimaryFileExtension;
  if ((*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)PrimaryFileExtension);
  }

  return pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FormatSupportsReading((uint64_t)v2, v4, (uint64_t)EmptyString);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfFileFormat::SupportsWriting(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load((unint64_t *)&qword_267B8ED90);
  if (!v2) {
    uint64_t v2 = sub_216AA0FD0(&qword_267B8ED90);
  }
  PrimaryFileExtension = pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetPrimaryFileExtension(this);
  uint64_t v4 = (uint64_t)PrimaryFileExtension;
  if ((*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)PrimaryFileExtension);
  }

  return pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FormatSupportsWriting((uint64_t)v2, v4, (uint64_t)EmptyString);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfFileFormat::SupportsEditing(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load((unint64_t *)&qword_267B8ED90);
  if (!v2) {
    uint64_t v2 = sub_216AA0FD0(&qword_267B8ED90);
  }
  PrimaryFileExtension = pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetPrimaryFileExtension(this);
  uint64_t v4 = (uint64_t)PrimaryFileExtension;
  if ((*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)PrimaryFileExtension);
  }

  return pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FormatSupportsEditing((uint64_t)v2, v4, (uint64_t)EmptyString);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindAllFileFormatExtensions@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load((unint64_t *)&qword_267B8ED90);
  if (!v3) {
    uint64_t v3 = sub_216AA0FD0(&qword_267B8ED90);
  }

  return pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FindAllFileFormatExtensions(v3, a1);
}

void pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindAllDerivedFileFormatExtensions(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this@<X0>, uint64_t a2@<X8>)
{
  BOOL v5 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load((unint64_t *)&qword_267B8ED90);
  if (!v5) {
    BOOL v5 = sub_216AA0FD0(&qword_267B8ED90);
  }

  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FindAllDerivedFileFormatExtensions(v5, this, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfFileFormat::FormatSupportsReading(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load((unint64_t *)&qword_267B8ED90);
  if (!v4) {
    uint64_t v4 = sub_216AA0FD0(&qword_267B8ED90);
  }

  return pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FormatSupportsReading((uint64_t)v4, a1, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfFileFormat::FormatSupportsWriting(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load((unint64_t *)&qword_267B8ED90);
  if (!v4) {
    uint64_t v4 = sub_216AA0FD0(&qword_267B8ED90);
  }

  return pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FormatSupportsWriting((uint64_t)v4, a1, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfFileFormat::FormatSupportsEditing(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load((unint64_t *)&qword_267B8ED90);
  if (!v4) {
    uint64_t v4 = sub_216AA0FD0(&qword_267B8ED90);
  }

  return pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FormatSupportsEditing((uint64_t)v4, a1, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindById(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this@<X0>, uint64_t *a2@<X8>)
{
  BOOL v5 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load((unint64_t *)&qword_267B8ED90);
  if (!v5) {
    BOOL v5 = sub_216AA0FD0(&qword_267B8ED90);
  }

  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FindById(v5, this, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load((unint64_t *)&qword_267B8ED90);
  if (!v6) {
    uint64_t v6 = sub_216AA0FD0(&qword_267B8ED90);
  }

  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FindByExtension((uint64_t)v6, a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (void *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
  if (!v6) {
    uint64_t v6 = (void *)sub_216AA11E8(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
  }
  uint64_t v7 = (unsigned __int8 *)sub_216AA0A98(a2, v6);
  if (v7)
  {
    pxrInternal__aapl__pxrReserved__::TfStringTokenize(v7, ",", &__p);
    unint64_t v8 = (std::string *)__p;
    char v9 = v16;
    if (__p == v16)
    {
LABEL_16:
      v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      sub_216782F20((void ***)&v14);
      *a3 = 0;
      a3[1] = 0;
      return;
    }
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::TfStringTrim(" \n\t\r", v8, &v14);
      if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v8->__r_.__value_.__l.__data_);
      }
      long long v10 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
      v8->__r_.__value_.__r.__words[2] = v14.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
      if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
      {
        if (!v8->__r_.__value_.__l.__size_) {
          goto LABEL_15;
        }
      }
      else if (!*((unsigned char *)&v8->__r_.__value_.__s + 23))
      {
        goto LABEL_15;
      }
      pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension(a1, (uint64_t)v8, a3);
      char v11 = sub_216AA0AEC(a3);
      if (v12 & 1 | (unint64_t)v11)
      {
        v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        sub_216782F20((void ***)&v14);
        return;
      }
      uint64_t v13 = (atomic_uint *)a3[1];
      if (v13)
      {
        if (atomic_fetch_add_explicit(v13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v13 + 8))(v13);
        }
      }
LABEL_15:
      if (++v8 == v9) {
        goto LABEL_16;
      }
    }
  }
  __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension(a1, (uint64_t)&__p, a3);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p);
  }
}

void sub_216AA0A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216AA0A98(pxrInternal__aapl__pxrReserved__::TfToken *a1, void *a2)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  uint64_t v4 = sub_21678C2D8((uint64_t)a1, (const void **)EmptyString);
  if ((pxrInternal__aapl__pxrReserved__::TfToken *)((char *)a1 + 8) == (pxrInternal__aapl__pxrReserved__::TfToken *)v4) {
    return 0;
  }
  else {
    return v4 + 56;
  }
}

uint64_t (*sub_216AA0AEC(void *a1))(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14);
  if (*a1) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  else {
    return sub_216AA12AC;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::_ShouldSkipAnonymousReload(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::_ShouldReadAnonymousLayers(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::_SetLayerData(pxrInternal__aapl__pxrReserved__::SdfLayer *this, uint64_t *a2, char a3)
{
  if (*((unsigned char *)this + 466))
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::_GetData(this, (uint64_t *)&v17);
    uint64_t v6 = sub_216A5B7B0(a2);
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
    uint64_t v8 = sub_216A5B4F4((uint64_t *)&v17);
    if (v7 != (*(unsigned int (**)(uint64_t))(*(void *)v8 + 24))(v8)) {
      goto LABEL_9;
    }
    uint64_t v9 = sub_216A5B7B0(a2);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 32))(v9);
    uint64_t v11 = sub_216A5B4F4((uint64_t *)&v17);
    if (v10 != (*(unsigned int (**)(uint64_t))(*(void *)v11 + 32))(v11)) {
      goto LABEL_9;
    }
    if (!*a2 || (uint64_t v12 = *(void *)(*(void *)*a2 - 8), !v18) || !*(unsigned char *)(sub_216850B68(&v18) + 14) || !v17) {
      __cxa_bad_typeid();
    }
    if (!strcmp((const char *)(*(void *)(v12 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(*v17 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL)))
    {
      sub_216AA12F0(&v15, a2);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_SetData((uint64_t)this, &v15, 0);
      uint64_t v14 = v16;
      if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
    }
    else
    {
LABEL_9:
      pxrInternal__aapl__pxrReserved__::SdfLayer::_AdoptData((uint64_t)this, a2);
    }
    uint64_t result = v18;
    if (v18 && atomic_fetch_add_explicit((atomic_uint *volatile)(v18 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfLayer::_SwapData((uint64_t)this, a2);
  }
  *((unsigned char *)this + 516) = a3;
  return result;
}

void sub_216AA0DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10, uint64_t a11, atomic_uint *a12)
{
  if (a10 && atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
  }
  if (a12)
  {
    if (atomic_fetch_add_explicit(a12 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a12 + 8))(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::SdfFileFormat::_InstantiateNewLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = operator new(0x208uLL);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SdfLayer(v11, a2, a3, a4, a5, a6, 0);
  return v11;
}

void sub_216AA0EAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216AA0ECC()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  BOOL v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216AA0F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *sub_216AA0FD0(atomic_ullong *a1)
{
  uint64_t result = sub_216AA1018();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      char v4 = (void *)sub_216AA105C((std::mutex *)result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *sub_216AA1018()
{
  v0 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)operator new(0xC0uLL);
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::Sdf_FileFormatRegistry(v0);
  return v0;
}

void sub_216AA1048(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216AA105C(std::mutex *a1)
{
  std::mutex::~mutex(a1 + 2);
  sub_2169861C0((uint64_t)&a1[1].__m_.__opaque[8]);
  sub_216966C20((uint64_t)&a1->__m_.__opaque[32]);

  return sub_21698611C((uint64_t)a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216AA10A8(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

uint64_t sub_216AA10D8(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    uint64_t v5 = 0;
    char v6 = *((unsigned char *)a3 + 23);
    if (v6 >= 0) {
      uint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      uint64_t v7 = a3[1];
    }
    if (v6 >= 0) {
      uint64_t v8 = (unsigned __int8 *)a3;
    }
    else {
      uint64_t v8 = *a3;
    }
    while (1)
    {
      uint64_t v9 = *(unsigned __int8 *)(v4 + 23);
      if ((v9 & 0x80u) == 0) {
        int v10 = (unsigned __int8 *)*(unsigned __int8 *)(v4 + 23);
      }
      else {
        int v10 = *(unsigned __int8 **)(v4 + 8);
      }
      if (v10 != v7) {
        goto LABEL_20;
      }
      if ((v9 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*(const void **)v4, v8, *(void *)(v4 + 8))) {
        goto LABEL_19;
      }
LABEL_20:
      v4 += 24;
      if (v4 == a2) {
        return v5;
      }
    }
    if (*(unsigned char *)(v4 + 23))
    {
      uint64_t v11 = 0;
      while (*(unsigned __int8 *)(v4 + v11) == v8[v11])
      {
        if (v9 == ++v11) {
          goto LABEL_19;
        }
      }
      goto LABEL_20;
    }
LABEL_19:
    ++v5;
    goto LABEL_20;
  }
  return 0;
}

uint64_t sub_216AA11A4(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  if (*(unsigned char *)(sub_216850B68(v2) + 14)) {
    return *a1;
  }
  return 0;
}

unint64_t sub_216AA11E8(atomic_ullong *a1)
{
  uint64_t v2 = sub_216AA1268();
  uint64_t v3 = v2;
  uint64_t v4 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v4, (unint64_t)v2);
  if (v4)
  {
    if (v2)
    {
      char v6 = (void **)((char *)v2 + 8);
      sub_216889A04(&v6);
      if ((*(void *)v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v3);
    }
    return atomic_load((unint64_t *)a1);
  }
  return (unint64_t)v3;
}

pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens_StaticTokenType *sub_216AA1268()
{
  v0 = (pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens_StaticTokenType::SdfFileFormatTokens_StaticTokenType(v0);
  return v0;
}

void sub_216AA1298(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216AA12AC(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  if (*(unsigned char *)(sub_216850B68(v2) + 14)) {
    return *a1;
  }
  return 0;
}

uint64_t *sub_216AA12F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_21685203C((unint64_t *)(v3 + 16), &v7);
    uint64_t v4 = (atomic_uint *)a1[1];
    a1[1] = v7;
    uint64_t v7 = 0;
    if (v4)
    {
      if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
      }
      uint64_t v5 = v7;
      if (v7 && atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
    }
  }
  return a1;
}

void sub_216AA13C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_217324208(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(pxrInternal__aapl__pxrReserved__::Sdf_Identity *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1) {
    return (uint64_t *)(v1 + 80);
  }
  if (atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EDD0, memory_order_acquire)) {
    return &qword_267B8EDC0;
  }
  if (__cxa_guard_acquire(&qword_267B8EDD0))
  {
    qword_267B8EDC0 = 0;
    *(void *)algn_267B8EDC8 = 0;
    __cxa_atexit((void (*)(void *))sub_216AA146C, &qword_267B8EDC0, &dword_216758000);
    __cxa_guard_release(&qword_267B8EDD0);
  }
  return &qword_267B8EDC0;
}

uint64_t sub_216AA146C(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_Identity::_Forget(pxrInternal__aapl__pxrReserved__::Sdf_Identity *this)
{
  uint64_t v3 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v3 + 1);
  sub_21697DE94((int *)this + 1, (int *)&v3);
  sub_21697DEEC((int *)this + 2, (int *)&v3 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v3 + 1);
  uint64_t result = sub_21697C414(&v3);
  *((void *)this + 2) = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Sdf_Identity::_UnregisterOrDelete(uint64_t a1, _DWORD *a2)
{
  if (a1)
  {
    sub_216AA15C4(a1);
  }
  else if (a2)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 2);
    sub_21697C414(a2 + 1);
    operator delete(a2);
  }
}

uint64_t sub_216AA15C4(uint64_t result)
{
  if (atomic_fetch_add((atomic_ullong *volatile)(result + 96), 1uLL) + 1 >= *(void *)(result + 104))
  {
    uint64_t v1 = result;
    atomic_store(0, (unint64_t *)(result + 96));
    uint64_t result = sub_21685036C((uint64_t)&v12, result + 112);
    uint64_t v2 = *(void *)(v1 + 32);
    uint64_t v3 = *(void *)(v1 + 40);
    uint64_t v4 = 0;
    if (v3)
    {
      uint64_t v5 = (__int16 *)(v2 + 4);
      while (1)
      {
        int v6 = *v5;
        v5 += 12;
        if (v6 != -1) {
          break;
        }
        if (v3 == ++v4) {
          goto LABEL_18;
        }
      }
    }
    if (v4 != v3)
    {
      uint64_t v7 = v2 + 24 * v4;
      do
      {
        if (atomic_load(*(unsigned int **)(v7 + 16)))
        {
          uint64_t v9 = v7 + 24;
          do
          {
            uint64_t v7 = v9;
            if (*(unsigned char *)(v9 - 18)) {
              break;
            }
            v9 += 24;
          }
          while (*(__int16 *)(v7 + 4) == -1);
        }
        else
        {
          int v10 = *(_DWORD **)(v7 + 16);
          if (v10)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v10 + 2);
            sub_21697C414(v10 + 1);
            operator delete(v10);
          }
          uint64_t result = sub_216AA1BB4(v1, v7);
          uint64_t v7 = result;
        }
      }
      while (v7 != *(void *)(v1 + 32) + 24 * *(void *)(v1 + 40));
    }
LABEL_18:
    uint64_t v11 = v12;
    if (v12)
    {
      __dmb(0xBu);
      *uint64_t v11 = 0;
    }
  }
  return result;
}

void sub_216AA16E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Sdf_IdentityRegistry(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v5 = operator new(0x78uLL);
  sub_216AA1DC4((uint64_t)v5, a2);
  a1[2] = v5;
  return a1;
}

void sub_216AA1754(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = *(atomic_uint **)(v1 + 8);
  if (v4)
  {
    if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
    }
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::~Sdf_IdentityRegistry(pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry *this)
{
  sub_216AA2A6C((uint64_t *)this + 2, 0);
  uint64_t v2 = (atomic_uint *)*((void *)this + 1);
  if (v2)
  {
    if (atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify@<X0>(uint64_t **this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, atomic_uint **a3@<X8>)
{
  return sub_216AA1830(this[2], (unsigned int *)a2, a3);
}

uint64_t sub_216AA1830@<X0>(uint64_t *a1@<X0>, unsigned int *a2@<X1>, atomic_uint **a3@<X8>)
{
  sub_21685036C((uint64_t)&v14, (uint64_t)(a1 + 14));
  uint64_t result = sub_216AA2168(a1, a2, bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))));
  if (a1[4] + 24 * a1[5] == result)
  {
    sub_216851EE4((uint64_t)&v12, "Sdf", "Sdf_IdentityRegistry::Identify");
    uint64_t v9 = operator new(0x18uLL);
    *uint64_t v9 = 0;
    sub_216981010(v9 + 1, a2);
    sub_21698105C(v9 + 2, a2 + 1);
    *((void *)v9 + 2) = a1;
    uint64_t v15 = a2;
    uint64_t result = sub_216AA21D0(a1, a2, (uint64_t)&unk_2174BFD90, &v15);
    *(void *)(result + 16) = v9;
    unint64_t v10 = (unint64_t)a1[6] >> 3;
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    a1[13] = v10;
    *a3 = v9;
    atomic_fetch_add(v9, 1u);
    while (v13--)
      uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v12);
  }
  else
  {
    uint64_t v7 = *(atomic_uint **)(result + 16);
    atomic_fetch_add(v7, 1u);
    *a3 = v7;
  }
  uint64_t v8 = v14;
  if (v14)
  {
    __dmb(0xBu);
    unsigned char *v8 = 0;
  }
  return result;
}

void sub_216AA198C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned char *a11)
{
  if (a11)
  {
    __dmb(0xBu);
    *a11 = 0;
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::MoveIdentity(uint64_t **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  return sub_216AA19C8(this[2], (unsigned int *)a2, a3);
}

uint64_t sub_216AA19C8(uint64_t *a1, unsigned int *a2, _DWORD *a3)
{
  sub_21685036C((uint64_t)&v19, (uint64_t)(a1 + 14));
  uint64_t result = sub_216AA2168(a1, a2, bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))));
  if (a1[4] + 24 * a1[5] == result) {
    goto LABEL_6;
  }
  sub_216981010(&v14, a3);
  sub_21698105C((_DWORD *)&v14 + 1, a3 + 1);
  uint64_t v15 = 0;
  uint64_t v7 = sub_216AA28BC(a1, (unsigned int *)&v14, (uint64_t)&v14);
  char v9 = v8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
  sub_21697C414(&v14);
  if (!v9)
  {
    unint64_t v10 = *(pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v7 + 16);
    if (!v10)
    {
      uint64_t v14 = "sdf/identity.cpp";
      uint64_t v15 = "MoveIdentity";
      uint64_t v16 = 127;
      uint64_t v17 = "void pxrInternal__aapl__pxrReserved__::Sdf_IdRegistryImpl::MoveIdentity(const SdfPath &, const SdfPath &)";
      char v18 = 0;
      if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v14, "newIdStatus.first->second", 0))goto LABEL_5; {
      unint64_t v10 = *(pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v7 + 16);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Identity::_Forget(v10);
  }
LABEL_5:
  uint64_t v11 = sub_216AA2168(a1, a2, bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))));
  uint64_t v12 = *(void *)(v11 + 16);
  *(void *)(v7 + 16) = v12;
  sub_2169C487C((int *)(v12 + 4), a3);
  sub_2169C48D4((int *)(v12 + 8), a3 + 1);
  uint64_t result = sub_216AA1BB4((uint64_t)a1, v11);
LABEL_6:
  int v13 = v19;
  if (v19)
  {
    __dmb(0xBu);
    unsigned char *v13 = 0;
  }
  return result;
}

void sub_216AA1B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned char *a15)
{
  if (a15)
  {
    __dmb(0xBu);
    *a15 = 0;
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::_UnregisterOrDelete(pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry *this)
{
  return sub_216AA15C4(*((void *)this + 2));
}

uint64_t sub_216AA1BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  sub_216AA1C18((_DWORD *)a1, a2);
  if (*(__int16 *)(v2 + 4) == -1)
  {
    uint64_t v4 = (__int16 *)(v2 + 28);
    uint64_t v5 = v2 + 24;
    do
    {
      uint64_t v2 = v5;
      if (*((unsigned char *)v4 - 22)) {
        break;
      }
      int v6 = *v4;
      v4 += 12;
      v5 += 24;
    }
    while (v6 == -1);
  }
  *(unsigned char *)(a1 + 73) = 1;
  return v2;
}

_DWORD *sub_216AA1C18(_DWORD *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(__int16 *)(a2 + 4) != -1)
  {
    uint64_t result = sub_216AA1D44(a2);
    *(_WORD *)(a2 + 4) = -1;
  }
  --v3[6];
  uint64_t v4 = v3[4];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v4) >> 3);
  uint64_t v6 = (v5 + 1) & *v3;
  int v7 = *(__int16 *)(v4 + 24 * v6 + 4);
  if (v7 >= 1)
  {
    do
    {
      char v8 = (int *)(v4 + 24 * v6);
      __int16 v9 = v7 - 1;
      uint64_t v10 = v4 + 24 * v5;
      int v11 = *v8;
      sub_21697D878((_DWORD *)(v10 + 8), v8 + 2);
      uint64_t result = sub_21697D8B4((_DWORD *)(v10 + 12), v8 + 3);
      *(void *)(v10 + 16) = *((void *)v8 + 2);
      *(_DWORD *)uint64_t v10 = v11;
      *(_WORD *)(v10 + 4) = v9;
      uint64_t v4 = v3[4];
      uint64_t v12 = v4 + 24 * v6;
      int v14 = *(__int16 *)(v12 + 4);
      int v13 = (_WORD *)(v12 + 4);
      if (v14 != -1)
      {
        uint64_t result = sub_216AA1D44(v4 + 24 * v6);
        _WORD *v13 = -1;
        uint64_t v4 = v3[4];
      }
      unint64_t v5 = v6;
      uint64_t v6 = *v3 & (v6 + 1);
      int v7 = *(__int16 *)(v4 + 24 * v6 + 4);
    }
    while (v7 > 0);
  }
  return result;
}

_DWORD *sub_216AA1D44(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));

  return sub_21697C414((_DWORD *)(a1 + 8));
}

_DWORD *sub_216AA1D84(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

double sub_216AA1DC4(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_216AA1E30(a1, 0, 0.0, 0.5);
  uint64_t v4 = a2[1];
  *(void *)(v3 + 80) = *a2;
  *(void *)(v3 + 88) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
  }
  double result = 0.0;
  *(_OWORD *)(v3 + 96) = xmmword_217411D30;
  *(unsigned char *)(v3 + 112) = 0;
  return result;
}

uint64_t sub_216AA1E30(uint64_t a1, unint64_t a2, float a3, float a4)
{
  unint64_t v12 = a2;
  sub_21686EB98((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >= 0xAAAAAAAAAAAAAABLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_216767B04(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_264293928, MEMORY[0x263F8C060]);
  }
  sub_216AA1FE0((void *)(a1 + 8), v12);
  int v7 = *(int **)(a1 + 8);
  if (v7 == *(int **)(a1 + 16)) {
    int v7 = sub_216AA1F5C();
  }
  unint64_t v8 = v12;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8) {
    *(unsigned char *)(*(void *)(a1 + 16) - 18) = 1;
  }
  float v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(void *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_216AA1F48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *sub_216AA1F5C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798B308, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798B308))
  {
    dword_26798B2F0 = 0;
    word_26798B2F4 = -1;
    byte_26798B2F6 = 1;
    __cxa_atexit((void (*)(void *))sub_216AA2128, &dword_26798B2F0, &dword_216758000);
    __cxa_guard_release(&qword_26798B308);
  }
  return &dword_26798B2F0;
}

void *sub_216AA1FE0(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216782E84(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 24 * a2;
    do
    {
      *(_DWORD *)uint64_t v4 = 0;
      *(_WORD *)(v4 + 4) = -1;
      *(unsigned char *)(v4 + 6) = 0;
      v4 += 24;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_216AA2058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_216AA206C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_216AA20C0(v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_216AA20C0(void *result)
{
  uint64_t v1 = result;
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  if (v2 != *result)
  {
    uint64_t v4 = v2 - 24;
    do
    {
      if (*(__int16 *)(v4 + 4) != -1)
      {
        double result = sub_216AA1D44(v4);
        *(_WORD *)(v4 + 4) = -1;
      }
      BOOL v5 = v4 == v3;
      v4 -= 24;
    }
    while (!v5);
  }
  v1[1] = v3;
  return result;
}

uint64_t sub_216AA2128(uint64_t a1)
{
  if (*(__int16 *)(a1 + 4) != -1)
  {
    sub_216AA1D44(a1);
    *(_WORD *)(a1 + 4) = -1;
  }
  return a1;
}

uint64_t sub_216AA2168(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = *a1 & a3;
  if (*(__int16 *)(v3 + 24 * v4 + 4) < 0)
  {
LABEL_5:
    uint64_t v4 = a1[5];
  }
  else
  {
    LOWORD(v5) = 0;
    while (*(void *)(v3 + 24 * v4 + 8) != *a2)
    {
      int v5 = (__int16)(v5 + 1);
      uint64_t v4 = (v4 + 1) & *a1;
      if (v5 > *(__int16 *)(v3 + 24 * v4 + 4)) {
        goto LABEL_5;
      }
    }
  }
  return v3 + 24 * v4;
}

uint64_t sub_216AA21D0(uint64_t *a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  uint64_t v8 = a1[4];
  uint64_t v9 = v7 & *a1;
  if (*(__int16 *)(v8 + 24 * v9 + 4) < 0)
  {
    LOWORD(v10) = 0;
LABEL_7:
    char v11 = sub_216AA2398((uint64_t)a1);
    uint64_t v12 = a1[4];
    if (v11)
    {
      uint64_t v9 = v7 & *a1;
      if (*(__int16 *)(v12 + 24 * v9 + 4) < 0)
      {
        LOWORD(v10) = 0;
        int v13 = *(unsigned __int16 *)(v12 + 24 * v9 + 4);
      }
      else
      {
        LOWORD(v10) = 0;
        do
        {
          int v10 = (__int16)(v10 + 1);
          uint64_t v9 = (v9 + 1) & *a1;
        }
        while (v10 <= *(__int16 *)(v12 + 24 * v9 + 4));
        int v13 = *(unsigned __int16 *)(v12 + 24 * v9 + 4);
      }
    }
    else
    {
      int v13 = *(unsigned __int16 *)(v12 + 24 * v9 + 4);
    }
    if (v13 == 0xFFFF)
    {
      uint64_t v15 = v12 + 24 * v9;
      uint64_t v16 = *a4;
      sub_216981010((_DWORD *)(v15 + 8), v16);
      sub_21698105C((_DWORD *)(v15 + 12), v16 + 1);
      *(void *)(v15 + 16) = 0;
      *(_DWORD *)uint64_t v15 = v7;
      *(_WORD *)(v15 + 4) = v10;
    }
    else
    {
      sub_216AA2460(a1, v9, v10, v7, a3, a4);
    }
    ++a1[6];
    return a1[4] + 24 * v9;
  }
  else
  {
    LOWORD(v10) = 0;
    while (*(void *)(v8 + 24 * v9 + 8) != *(void *)a2)
    {
      int v10 = (__int16)(v10 + 1);
      uint64_t v9 = (v9 + 1) & *a1;
      if (v10 > *(__int16 *)(v8 + 24 * v9 + 4)) {
        goto LABEL_7;
      }
    }
    return v8 + 24 * v9;
  }
}

uint64_t sub_216AA2398(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72) || (unint64_t v2 = *(void *)(a1 + 48), v2 >= *(void *)(a1 + 56)))
  {
    unint64_t v6 = sub_21686E8DC((void *)a1);
    sub_216AA250C(a1, v6);
    *(unsigned char *)(a1 + 72) = 0;
    return 1;
  }
  if (*(unsigned char *)(a1 + 73))
  {
    *(unsigned char *)(a1 + 73) = 0;
    float v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      unint64_t v4 = *(void *)(a1 + 40);
      float v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        float v8 = *(float *)(a1 + 68);
        unint64_t v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        unint64_t v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9) {
          unint64_t v11 = v9;
        }
        else {
          unint64_t v11 = v10;
        }
        sub_216AA250C(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

_DWORD *sub_216AA2460(uint64_t *a1, uint64_t a2, __int16 a3, int a4, uint64_t a5, _DWORD **a6)
{
  uint64_t v10 = (uint64_t)*a6;
  sub_216981010(&v12, *a6);
  sub_21698105C(&v13, (_DWORD *)(v10 + 4));
  uint64_t v14 = 0;
  sub_216AA2734(a1, a2, a3, a4, (uint64_t)&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  return sub_21697C414(&v12);
}

void sub_216AA24F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

void sub_216AA250C(uint64_t a1, unint64_t a2)
{
  sub_216AA1E30((uint64_t)&v9, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  float v3 = *(unsigned int **)(a1 + 8);
  unint64_t v4 = *(unsigned int **)(a1 + 16);
  if (v3 != v4)
  {
    float v5 = v3 + 2;
    unint64_t v6 = (unint64_t)(v10[4] - 1) >> 32;
    do
    {
      if (*((__int16 *)v5 - 2) != -1)
      {
        if (v6) {
          unint64_t v7 = bswap64(0x9E3779B97F4A7C55* (v5[1]+ ((v5[1] + (unint64_t)*v5 + (v5[1] + (unint64_t)*v5) * (v5[1] + (unint64_t)*v5)) >> 1)));
        }
        else {
          unint64_t v7 = *(v5 - 2);
        }
        sub_216AA2628(&v9, v9 & v7, 0, v7, (uint64_t)v5);
      }
      float v8 = v5 + 4;
      v5 += 6;
    }
    while (v8 != v4);
  }
  v10[5] = *(void *)(a1 + 48);
  sub_21686E9D4(&v9, (uint64_t *)a1);
  unint64_t v11 = (void **)v10;
  sub_216AA206C(&v11);
}

void sub_216AA2608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 - 56) = &a11;
  sub_216AA206C((void ***)(v11 - 56));
  _Unwind_Resume(a1);
}

_DWORD *sub_216AA2628(void *a1, uint64_t a2, __int16 a3, int a4, uint64_t a5)
{
  int v20 = (int *)(a5 + 4);
  while (1)
  {
    uint64_t v10 = a1[4];
    uint64_t v11 = (int *)(v10 + 24 * a2);
    int v13 = v11 + 1;
    int v12 = *((__int16 *)v11 + 2);
    if (v12 >= a3) {
      goto LABEL_5;
    }
    uint64_t v14 = v10 + 24 * a2;
    uint64_t v15 = (int *)(v14 + 12);
    uint64_t v16 = (void *)(v14 + 16);
    if (v12 == -1) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a5, (int *)(v14 + 8));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v20, v15);
    uint64_t v17 = *(void *)(a5 + 8);
    *(void *)(a5 + 8) = *v16;
    *uint64_t v16 = v17;
    LOWORD(v17) = *v13;
    _WORD *v13 = a3;
    int v18 = *v11;
    *uint64_t v11 = a4;
    a3 = v17;
    a4 = v18;
LABEL_5:
    ++a3;
    a2 = *a1 & (a2 + 1);
  }
  sub_21697D878((_DWORD *)(v14 + 8), (_DWORD *)a5);
  double result = sub_21697D8B4(v15, v20);
  *uint64_t v16 = *(void *)(a5 + 8);
  *uint64_t v11 = a4;
  _WORD *v13 = a3;
  return result;
}

_DWORD *sub_216AA2734(uint64_t *a1, uint64_t a2, __int16 a3, int a4, uint64_t a5)
{
  uint64_t v10 = a1[4] + 24 * a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a5, (int *)(v10 + 8));
  uint64_t v26 = (int *)(a5 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a5 + 4), (int *)(v10 + 12));
  uint64_t v11 = *(void *)(a5 + 8);
  *(void *)(a5 + 8) = *(void *)(v10 + 16);
  *(void *)(v10 + 16) = v11;
  LOWORD(v11) = *(_WORD *)(v10 + 4);
  *(_WORD *)(v10 + 4) = a3;
  int v12 = *(_DWORD *)v10;
  *(_DWORD *)uint64_t v10 = a4;
  uint64_t v13 = *a1;
  uint64_t v14 = *a1 & (a2 + 1);
  __int16 v15 = v11 + 1;
  uint64_t v16 = a1[4];
  uint64_t v17 = (int *)(v16 + 24 * v14);
  uint64_t v19 = (__int16 *)(v17 + 1);
  int v18 = *((unsigned __int16 *)v17 + 2);
  if (v18 != 0xFFFF)
  {
    do
    {
      if (v15 > (__int16)v18)
      {
        if (v15 >= 4096) {
          *((unsigned char *)a1 + 72) = 1;
        }
        uint64_t v20 = v16 + 24 * v14;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a5, (int *)(v20 + 8));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v26, (int *)(v20 + 12));
        uint64_t v21 = *(void *)(a5 + 8);
        *(void *)(a5 + 8) = *(void *)(v20 + 16);
        *(void *)(v20 + 16) = v21;
        __int16 v22 = *v19;
        __int16 *v19 = v15;
        int v23 = *v17;
        int *v17 = v12;
        uint64_t v13 = *a1;
        uint64_t v16 = a1[4];
        __int16 v15 = v22;
        int v12 = v23;
      }
      uint64_t v14 = v13 & (v14 + 1);
      ++v15;
      uint64_t v17 = (int *)(v16 + 24 * v14);
      uint64_t v19 = (__int16 *)(v17 + 1);
      LOWORD(v18) = *((_WORD *)v17 + 2);
    }
    while ((unsigned __int16)v18 != 0xFFFF);
  }
  uint64_t v24 = v16 + 24 * v14;
  sub_21697D878((_DWORD *)(v24 + 8), (_DWORD *)a5);
  double result = sub_21697D8B4((_DWORD *)(v24 + 12), v26);
  *(void *)(v24 + 16) = *(void *)(a5 + 8);
  int *v17 = v12;
  __int16 *v19 = v15;
  return result;
}

uint64_t sub_216AA28BC(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  uint64_t v6 = a1[4];
  uint64_t v7 = v5 & *a1;
  if (*(__int16 *)(v6 + 24 * v7 + 4) < 0)
  {
    LOWORD(v8) = 0;
LABEL_7:
    char v9 = sub_216AA2398((uint64_t)a1);
    uint64_t v10 = a1[4];
    if (v9)
    {
      uint64_t v7 = v5 & *a1;
      if (*(__int16 *)(v10 + 24 * v7 + 4) < 0)
      {
        LOWORD(v8) = 0;
        int v11 = *(unsigned __int16 *)(v10 + 24 * v7 + 4);
      }
      else
      {
        LOWORD(v8) = 0;
        do
        {
          int v8 = (__int16)(v8 + 1);
          uint64_t v7 = (v7 + 1) & *a1;
        }
        while (v8 <= *(__int16 *)(v10 + 24 * v7 + 4));
        int v11 = *(unsigned __int16 *)(v10 + 24 * v7 + 4);
      }
    }
    else
    {
      int v11 = *(unsigned __int16 *)(v10 + 24 * v7 + 4);
    }
    if (v11 == 0xFFFF)
    {
      uint64_t v13 = v10 + 24 * v7;
      sub_21697D878((_DWORD *)(v13 + 8), (_DWORD *)a3);
      sub_21697D8B4((_DWORD *)(v13 + 12), (_DWORD *)(a3 + 4));
      *(void *)(v13 + 16) = *(void *)(a3 + 8);
      *(_DWORD *)uint64_t v13 = v5;
      *(_WORD *)(v13 + 4) = v8;
    }
    else
    {
      sub_216AA2734(a1, v7, v8, v5, a3);
    }
    ++a1[6];
    return a1[4] + 24 * v7;
  }
  else
  {
    LOWORD(v8) = 0;
    while (*(void *)(v6 + 24 * v7 + 8) != *(void *)a2)
    {
      int v8 = (__int16)(v8 + 1);
      uint64_t v7 = (v7 + 1) & *a1;
      if (v8 > *(__int16 *)(v6 + 24 * v7 + 4)) {
        goto LABEL_7;
      }
    }
    return v6 + 24 * v7;
  }
}

void sub_216AA2A6C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    unint64_t v4 = (void *)sub_216AA2AAC(v3);
    operator delete(v4);
  }
}

uint64_t sub_216AA2AAC(uint64_t a1)
{
  sub_21685036C((uint64_t)v13, a1 + 112);
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = 0;
  if (v3)
  {
    unint64_t v5 = (__int16 *)(v2 + 4);
    while (1)
    {
      int v6 = *v5;
      v5 += 12;
      if (v6 != -1) {
        break;
      }
      if (v3 == ++v4) {
        goto LABEL_12;
      }
    }
  }
  if (v4 != v3)
  {
    uint64_t v7 = v2 + 24 * v3;
    uint64_t v8 = v2 + 24 * v4;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Identity::_Forget(*(pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v8 + 16));
      uint64_t v9 = v8 + 24;
      do
      {
        uint64_t v8 = v9;
        if (*(unsigned char *)(v9 - 18)) {
          break;
        }
        v9 += 24;
      }
      while (*(__int16 *)(v8 + 4) == -1);
    }
    while (v8 != v7);
  }
LABEL_12:
  uint64_t v10 = v13[0];
  if (v13[0])
  {
    __dmb(0xBu);
    *(unsigned char *)uint64_t v10 = 0;
  }
  int v11 = *(atomic_uint **)(a1 + 88);
  if (v11 && atomic_fetch_add_explicit(v11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v11 + 8))(v11);
  }
  v13[0] = (void **)(a1 + 8);
  sub_216AA206C(v13);
  return a1;
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample<pxrInternal__aapl__pxrReserved__::VtValue>(void *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3, int a4, double a5)
{
  if (a4)
  {
    if (a1[15]
      || (v13[0] = "sdf/layer.cpp",
          v13[1] = "_PrimSetTimeSample",
          v13[2] = 1424,
          void v13[3] = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample(const SdfPath &, double, const T "
                   "&, BOOL) [T = pxrInternal__aapl__pxrReserved__::VtValue]",
          char v14 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v13, "_stateDelegate", 0) & 1) != 0))
    {
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *)sub_216AA2D04(a1 + 15);
      pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetTimeSample(v9, a2, a5, a3);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v13);
  uint64_t v10 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeAttributeTimeSamples(v10, a1 + 3, a2);
  uint64_t v11 = sub_216A5B7B0(a1 + 14);
  (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::VtValue *, double))(*(void *)v11 + 296))(v11, a2, a3, a5);
  return sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v13);
}

void sub_216AA2CEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216AA2D04(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    _OWORD v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase>::"
            "operator->() const [U = pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000021746D787 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(void *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (***a3)(void, uint64_t), int a4, double a5)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a4)
  {
    if (a1[15]
      || (v14[0] = "sdf/layer.cpp",
          v14[1] = "_PrimSetTimeSample",
          void v14[2] = 1424,
          v14[3] = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample(const SdfPath &, double, const T "
                   "&, BOOL) [T = pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue]",
          char v15 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v14, "_stateDelegate", 0) & 1) != 0))
    {
      uint64_t v9 = (uint64_t *)sub_216AA2D04(a1 + 15);
      pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetTimeSample(v9);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v13);
  uint64_t v10 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeAttributeTimeSamples(v10, a1 + 3, a2);
  sub_216AA2F28(a3, (uint64_t)v14);
  uint64_t v11 = sub_216A5B7B0(a1 + 14);
  (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, void *, double))(*(void *)v11 + 296))(v11, a2, v14, a5);
  sub_2168EE084((uint64_t)v14);
  return sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v13);
}

void sub_216AA2EF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216AA2F28@<X0>(uint64_t (***a1)(void, uint64_t)@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  uint64_t result = (**a1)(a1, a2);
  if ((result & 1) == 0)
  {
    v3[0] = "sdf/layer.cpp";
    v3[1] = "_GetVtValue";
    _OWORD v3[2] = 1414;
    v3[3] = "VtValue pxrInternal__aapl__pxrReserved__::_GetVtValue(const SdfAbstractDataConstValue &)";
    char v4 = 0;
    return pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v3, "v.GetValue(&value)", 0);
  }
  return result;
}

void sub_216AA2FC0(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::VtValue>(pxrInternal__aapl__pxrReserved__::SdfLayer *this, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4, pxrInternal__aapl__pxrReserved__::VtValue *a5, int a6)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a6)
  {
    if (*((void *)this + 15)
      || (v16[0] = "sdf/layer.cpp",
          v16[1] = "_PrimSetField",
          void v16[2] = 4178,
          v16[3] = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField(const SdfPath &, const TfToken &, cons"
                   "t T &, VtValue *, BOOL) [T = pxrInternal__aapl__pxrReserved__::VtValue]",
          char v17 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v16, "_stateDelegate", 0) & 1) != 0))
    {
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *)sub_216AA2D04((uint64_t *)this + 15);
      pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetField(v11, a2, a3, a4, a5);
    }
  }
  if (a5) {
    sub_2168EDFA8(v16, a5);
  }
  else {
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(this, a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v15);
  int v12 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  if (!v12) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeField(v12, (uint64_t *)this + 3, a2, (uint64_t *)a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v16, a4);
  uint64_t v13 = sub_216A5B7B0((uint64_t *)this + 14);
  (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, pxrInternal__aapl__pxrReserved__::TfToken *, const pxrInternal__aapl__pxrReserved__::VtValue *))(*(void *)v13 + 152))(v13, a2, a3, a4);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v15);
  return sub_2168EE084((uint64_t)v16);
}

void sub_216AA3168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetField@<X0>(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  *((void *)a4 + 1) = 0;
  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, a2, a3, a4);
}

void sub_216AA31C0(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(pxrInternal__aapl__pxrReserved__::SdfLayer *this, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (***a4)(void, uint64_t), void *a5, int a6)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a6)
  {
    if (*((void *)this + 15)
      || (v17[0] = "sdf/layer.cpp",
          v17[1] = "_PrimSetField",
          v17[2] = 4178,
          void v17[3] = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField(const SdfPath &, const TfToken &, cons"
                   "t T &, VtValue *, BOOL) [T = pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue]",
          char v18 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v17, "_stateDelegate", 0) & 1) != 0))
    {
      uint64_t v11 = (uint64_t *)sub_216AA2D04((uint64_t *)this + 15);
      pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetField(v11);
    }
  }
  if (a5) {
    sub_2168EDFA8(v17, a5);
  }
  else {
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(this, a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v17);
  }
  sub_216AA2F28(a4, (uint64_t)v16);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v15);
  int v12 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  if (!v12) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeField(v12, (uint64_t *)this + 3, a2, (uint64_t *)a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v17, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
  uint64_t v13 = sub_216A5B7B0((uint64_t *)this + 14);
  (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, pxrInternal__aapl__pxrReserved__::TfToken *, uint64_t (***)(void, uint64_t)))(*(void *)v13 + 160))(v13, a2, a3, a4);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v15);
  sub_2168EE084((uint64_t)v16);
  return sub_2168EE084((uint64_t)v17);
}

void sub_216AA3378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_2168EE084((uint64_t)va);
  sub_2168EE084((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5)
{
  v27[2] = *(unsigned int **)MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, a2, a3, 0) & 1) == 0)
  {
    sub_216ABE690(&v21, 1uLL, a4);
    v27[1] = (unsigned int *)&off_26C756C08;
    sub_2169DBAB4(v27, (uint64_t **)&v21);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::VtValue>();
  }
  if (a5)
  {
    uint64_t v10 = a1 + 15;
    if (a1[15]
      || (uint64_t v21 = "sdf/layer.cpp",
          __int16 v22 = "_PrimPushChild",
          unint64_t v23 = 4216,
          uint64_t v24 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild(const SdfPath &, const TfToken &, const "
                "T &, BOOL) [T = pxrInternal__aapl__pxrReserved__::TfToken]",
          char v25 = 0,
          char v12 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v21, "_stateDelegate", 0),
          uint64_t v10 = a1 + 15,
          (v12 & 1) != 0))
    {
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *)sub_216AA2D04(v10);
      pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::PushChild(v11, a2, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)a4);
    }
  }
  uint64_t v13 = a1 + 14;
  uint64_t v14 = sub_216A5B7B0(v13);
  (*(void (**)(unsigned int **__return_ptr))(*(void *)v14 + 136))(v27);
  uint64_t v15 = sub_216A5B7B0(v13);
  (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *))(*(void *)v15 + 168))(v15, a2, a3);
  uint64_t v21 = 0;
  __int16 v22 = 0;
  unint64_t v23 = 0;
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)v27)) {
    sub_216AA37C4((pxrInternal__aapl__pxrReserved__::VtValue *)v27, (uint64_t **)&v21);
  }
  uint64_t v16 = v22;
  if ((unint64_t)v22 >= v23)
  {
    char v18 = sub_216973984(&v21, a4);
  }
  else
  {
    uint64_t v17 = *a4;
    *(void *)__int16 v22 = *a4;
    if ((v17 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)v16 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v18 = v16 + 8;
  }
  __int16 v22 = v18;
  sub_216AA37C4((pxrInternal__aapl__pxrReserved__::VtValue *)v27, (uint64_t **)&v21);
  uint64_t v19 = sub_216A5B7B0(v13);
  (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, unsigned int **))(*(void *)v19 + 152))(v19, a2, a3, v27);
  uint64_t v26 = &v21;
  sub_216889A04((void ***)&v26);
  return sub_2168EE084((uint64_t)v27);
}

void sub_216AA3644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  unsigned int v15 = 0;
  uint64_t v8 = sub_216A5B7B0((uint64_t *)this + 14);
  if ((*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, pxrInternal__aapl__pxrReserved__::VtValue *, unsigned int *))(*(void *)v8 + 128))(v8, a2, a3, a4, &v15))return 1; {
  if (v15)
  }
  {
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)*((void *)this + 10);
    uint64_t v11 = (void *)*((void *)v10 + 116);
    char v12 = (void *)*((void *)v10 + 117);
    if (v11 != v12)
    {
      while ((*v11 & 0xFFFFFFFFFFFFFFF8) != (*(void *)a3 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v11 == v12) {
          return 0;
        }
      }
      if (*((unsigned char *)v10 + 72 * v15 + 120)
        && pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsRequiredField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)((char *)v10 + 72 * v15 + 56), a3))
      {
        FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(v10, a3);
        if (a4 && FieldDefinition)
        {
          FallbackValue = (void *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(FieldDefinition);
          sub_2168EC6DC(a4, FallbackValue);
          return 1;
        }
        if (FieldDefinition) {
          return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t **sub_216AA37C4(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t **a2)
{
  if ((sub_21697BFBC(a1) & 1) == 0)
  {
    memset(v8, 0, sizeof(v8));
    sub_216ABE744((uint64_t)a1, v8);
    uint64_t v9 = (void **)v8;
    sub_216889A04(&v9);
  }
  uint64_t result = sub_216ABE814((uint64_t ***)a1);
  unint64_t v5 = *result;
  _DWORD *result = *a2;
  *a2 = v5;
  uint64_t v6 = result[1];
  result[1] = a2[1];
  a2[1] = v6;
  uint64_t v7 = result[2];
  result[2] = a2[2];
  a2[2] = v7;
  return result;
}

void sub_216AA385C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4, int a5)
{
  v26[2] = *(unsigned int **)MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, a2, a3, 0) & 1) == 0)
  {
    sub_216ABE8A8(&v20, 1uLL, a4);
    v26[1] = (unsigned int *)&off_26C756D88;
    sub_2169DC54C(v26, (_DWORD **)&v20);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::VtValue>();
  }
  if (a5)
  {
    uint64_t v10 = a1 + 15;
    if (a1[15]
      || (uint64_t v20 = "sdf/layer.cpp",
          uint64_t v21 = "_PrimPushChild",
          unint64_t v22 = 4216,
          unint64_t v23 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild(const SdfPath &, const TfToken &, const "
                "T &, BOOL) [T = pxrInternal__aapl__pxrReserved__::SdfPath]",
          char v24 = 0,
          char v12 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v20, "_stateDelegate", 0),
          uint64_t v10 = a1 + 15,
          (v12 & 1) != 0))
    {
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *)sub_216AA2D04(v10);
      pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::PushChild(v11, a2, a3, a4);
    }
  }
  uint64_t v13 = a1 + 14;
  uint64_t v14 = sub_216A5B7B0(v13);
  (*(void (**)(unsigned int **__return_ptr))(*(void *)v14 + 136))(v26);
  uint64_t v15 = sub_216A5B7B0(v13);
  (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *))(*(void *)v15 + 168))(v15, a2, a3);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  unint64_t v22 = 0;
  if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)v26)) {
    sub_216A9B274((pxrInternal__aapl__pxrReserved__::VtValue *)v26, (uint64_t *)&v20);
  }
  uint64_t v16 = v21;
  if ((unint64_t)v21 >= v22)
  {
    uint64_t v17 = (char *)sub_216981B30((uint64_t *)&v20, a4);
  }
  else
  {
    sub_216981010(v21, a4);
    sub_21698105C((_DWORD *)v16 + 1, (_DWORD *)a4 + 1);
    uint64_t v17 = v16 + 8;
  }
  uint64_t v21 = v17;
  sub_216A9B274((pxrInternal__aapl__pxrReserved__::VtValue *)v26, (uint64_t *)&v20);
  uint64_t v18 = sub_216A5B7B0(v13);
  (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, unsigned int **))(*(void *)v18 + 152))(v18, a2, a3, v26);
  char v25 = &v20;
  sub_216981168((void ***)&v25);
  return sub_2168EE084((uint64_t)v26);
}

void sub_216AA3AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, int a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (a4
    && (*(void *)(a1 + 120)
     || (int v27 = (void **)"sdf/layer.cpp",
         char v28 = "_PrimPopChild",
         uint64_t v29 = 4262,
         uint64_t v30 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild(const SdfPath &, const TfToken &, BOOL) [T"
               " = pxrInternal__aapl__pxrReserved__::TfToken]",
         char v31 = 0,
         (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v27, "_stateDelegate", 0) & 1) != 0)))
  {
    int v27 = 0;
    char v28 = 0;
    uint64_t v29 = 0;
    uint64_t v7 = sub_216A5B7B0((uint64_t *)(a1 + 112));
    (*(void (**)(void ****__return_ptr))(*(void *)v7 + 136))(&v32);
    if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v32))
    {
      if ((v33 & 4) != 0) {
        uint64_t v8 = (uint64_t **)(*(uint64_t (**)(void ****))((v33 & 0xFFFFFFFFFFFFFFF8) + 168))(&v32);
      }
      else {
        uint64_t v8 = (uint64_t **)v32;
      }
    }
    else
    {
      uint64_t v8 = (uint64_t **)&v27;
    }
    char v24 = 0;
    char v25 = 0;
    uint64_t v26 = 0;
    sub_21698FA28(&v24, *v8, v8[1], v8[1] - *v8);
    uint64_t v9 = (void ***)sub_2168EE084((uint64_t)&v32);
    char v32 = &v27;
    sub_216889A04(v9);
    if (v24 != v25)
    {
      uint64_t v10 = (void **)*(v25 - 1);
      int v27 = v10;
      if ((v10 & 7) != 0)
      {
        uint64_t v11 = (void **)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit((atomic_uint *volatile)v11, 2u, memory_order_relaxed) & 1) == 0) {
          int v27 = v11;
        }
      }
      char v12 = (pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *)sub_216AA2D04((uint64_t *)(a1 + 120));
      pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::PopChild(v12, a2, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v27);
    }
    int v27 = (void **)"sdf/layer.cpp";
    char v28 = "_PrimPopChild";
    uint64_t v29 = 4269;
    uint64_t v30 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild(const SdfPath &, const TfToken &, BOOL) [T = px"
          "rInternal__aapl__pxrReserved__::TfToken]";
    char v31 = 0;
    unint64_t v13 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
    if (v13)
    {
      uint64_t v14 = (const char *)(v13 + 16);
      if (*(char *)(v13 + 39) < 0) {
        uint64_t v14 = *(const char **)v14;
      }
    }
    else
    {
      uint64_t v14 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"SdfLayer::_PrimPopChild failed: field %s is empty vector", v14);
    int v27 = (void **)&v24;
    sub_216889A04(&v27);
  }
  else
  {
    uint64_t v15 = sub_216A5B7B0((uint64_t *)(a1 + 112));
    (*(void (**)(void ****__return_ptr))(*(void *)v15 + 136))(&v32);
    uint64_t v16 = sub_216A5B7B0((uint64_t *)(a1 + 112));
    (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *))(*(void *)v16 + 168))(v16, a2, a3);
    if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v32))
    {
      char v24 = 0;
      char v25 = 0;
      uint64_t v26 = 0;
      sub_216AA37C4((pxrInternal__aapl__pxrReserved__::VtValue *)&v32, &v24);
      if (v24 == v25)
      {
        int v27 = (void **)"sdf/layer.cpp";
        char v28 = "_PrimPopChild";
        uint64_t v29 = 4286;
        uint64_t v30 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild(const SdfPath &, const TfToken &, BOOL) [T "
              "= pxrInternal__aapl__pxrReserved__::TfToken]";
        char v31 = 0;
        unint64_t v22 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
        if (v22)
        {
          unint64_t v23 = (const char *)(v22 + 16);
          if (*(char *)(v22 + 39) < 0) {
            unint64_t v23 = *(const char **)v23;
          }
        }
        else
        {
          unint64_t v23 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"SdfLayer::_PrimPopChild failed: %s is empty", v23);
      }
      else
      {
        uint64_t v17 = v25 - 1;
        uint64_t v18 = *(v25 - 1);
        if ((v18 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        char v25 = v17;
        sub_216AA37C4((pxrInternal__aapl__pxrReserved__::VtValue *)&v32, &v24);
        uint64_t v19 = sub_216A5B7B0((uint64_t *)(a1 + 112));
        (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, void ****))(*(void *)v19 + 152))(v19, a2, a3, &v32);
      }
      int v27 = (void **)&v24;
      sub_216889A04(&v27);
    }
    else
    {
      int v27 = (void **)"sdf/layer.cpp";
      char v28 = "_PrimPopChild";
      uint64_t v29 = 4279;
      uint64_t v30 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild(const SdfPath &, const TfToken &, BOOL) [T = "
            "pxrInternal__aapl__pxrReserved__::TfToken]";
      char v31 = 0;
      unint64_t v20 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
      if (v20)
      {
        uint64_t v21 = (const char *)(v20 + 16);
        if (*(char *)(v20 + 39) < 0) {
          uint64_t v21 = *(const char **)v21;
        }
      }
      else
      {
        uint64_t v21 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"SdfLayer::_PrimPopChild failed: field %s is non-vector", v21);
    }
    sub_2168EE084((uint64_t)&v32);
  }
}

void sub_216AA3F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  sub_216889A04(&a14);
  sub_2168EE084(v14 - 56);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, int a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (a4
    && ((uint64_t v7 = (uint64_t *)(a1 + 120), *(void *)(a1 + 120))
     || (int v27 = (void **)"sdf/layer.cpp",
         char v28 = "_PrimPopChild",
         uint64_t v29 = 4262,
         uint64_t v30 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild(const SdfPath &, const TfToken &, BOOL) [T"
               " = pxrInternal__aapl__pxrReserved__::SdfPath]",
         char v31 = 0,
         (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v27, "_stateDelegate", 0) & 1) != 0)))
  {
    int v27 = 0;
    char v28 = 0;
    uint64_t v29 = 0;
    uint64_t v8 = sub_216A5B7B0((uint64_t *)(a1 + 112));
    (*(void (**)(void ****__return_ptr))(*(void *)v8 + 136))(&v32);
    if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v32))
    {
      if ((v33 & 4) != 0) {
        uint64_t v9 = (void ***)(*(uint64_t (**)(void ****))((v33 & 0xFFFFFFFFFFFFFFF8) + 168))(&v32);
      }
      else {
        uint64_t v9 = v32;
      }
    }
    else
    {
      uint64_t v9 = &v27;
    }
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    sub_216980EEC(&v24, *v9, v9[1], v9[1] - *v9);
    uint64_t v10 = (void ***)sub_2168EE084((uint64_t)&v32);
    char v32 = &v27;
    sub_216981168(v10);
    uint64_t v11 = v25;
    if (v24 != v25)
    {
      sub_216981010(&v27, (_DWORD *)(v25 - 8));
      sub_21698105C((_DWORD *)&v27 + 1, (_DWORD *)(v11 - 4));
      char v12 = (pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *)sub_216AA2D04(v7);
      pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::PopChild(v12, a2, a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
    }
    int v27 = (void **)"sdf/layer.cpp";
    char v28 = "_PrimPopChild";
    uint64_t v29 = 4269;
    uint64_t v30 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild(const SdfPath &, const TfToken &, BOOL) [T = px"
          "rInternal__aapl__pxrReserved__::SdfPath]";
    char v31 = 0;
    unint64_t v13 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
    if (v13)
    {
      uint64_t v14 = (const char *)(v13 + 16);
      if (*(char *)(v13 + 39) < 0) {
        uint64_t v14 = *(const char **)v14;
      }
    }
    else
    {
      uint64_t v14 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"SdfLayer::_PrimPopChild failed: field %s is empty vector", v14);
    int v27 = (void **)&v24;
    sub_216981168(&v27);
  }
  else
  {
    uint64_t v15 = (uint64_t *)(a1 + 112);
    uint64_t v16 = sub_216A5B7B0((uint64_t *)(a1 + 112));
    (*(void (**)(void ****__return_ptr))(*(void *)v16 + 136))(&v32);
    uint64_t v17 = sub_216A5B7B0((uint64_t *)(a1 + 112));
    (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *))(*(void *)v17 + 168))(v17, a2, a3);
    if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v32))
    {
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      sub_216A9B274((pxrInternal__aapl__pxrReserved__::VtValue *)&v32, &v24);
      if (v24 == v25)
      {
        int v27 = (void **)"sdf/layer.cpp";
        char v28 = "_PrimPopChild";
        uint64_t v29 = 4286;
        uint64_t v30 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild(const SdfPath &, const TfToken &, BOOL) [T "
              "= pxrInternal__aapl__pxrReserved__::SdfPath]";
        char v31 = 0;
        unint64_t v22 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
        if (v22)
        {
          unint64_t v23 = (const char *)(v22 + 16);
          if (*(char *)(v22 + 39) < 0) {
            unint64_t v23 = *(const char **)v23;
          }
        }
        else
        {
          unint64_t v23 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"SdfLayer::_PrimPopChild failed: %s is empty", v23);
      }
      else
      {
        uint64_t v18 = v25 - 8;
        sub_216981128((uint64_t)&v26, (_DWORD *)(v25 - 8));
        uint64_t v25 = v18;
        sub_216A9B274((pxrInternal__aapl__pxrReserved__::VtValue *)&v32, &v24);
        uint64_t v19 = sub_216A5B7B0(v15);
        (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, void ****))(*(void *)v19 + 152))(v19, a2, a3, &v32);
      }
      int v27 = (void **)&v24;
      sub_216981168(&v27);
    }
    else
    {
      int v27 = (void **)"sdf/layer.cpp";
      char v28 = "_PrimPopChild";
      uint64_t v29 = 4279;
      uint64_t v30 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild(const SdfPath &, const TfToken &, BOOL) [T = "
            "pxrInternal__aapl__pxrReserved__::SdfPath]";
      char v31 = 0;
      unint64_t v20 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
      if (v20)
      {
        uint64_t v21 = (const char *)(v20 + 16);
        if (*(char *)(v20 + 39) < 0) {
          uint64_t v21 = *(const char **)v21;
        }
      }
      else
      {
        uint64_t v21 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"SdfLayer::_PrimPopChild failed: field %s is non-vector", v21);
    }
    sub_2168EE084((uint64_t)&v32);
  }
}

void sub_216AA4420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  sub_216981168(&a14);
  sub_2168EE084(v14 - 72);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetFieldDictValueByKey<pxrInternal__aapl__pxrReserved__::VtValue>(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::VtValue *a5, pxrInternal__aapl__pxrReserved__::VtValue *a6, int a7)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (a7)
  {
    if (a1[15]
      || (v19[0] = "sdf/layer.cpp",
          v19[1] = "_PrimSetFieldDictValueByKey",
          v19[2] = 4308,
          v19[3] = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetFieldDictValueByKey(const SdfPath &, const T"
                   "fToken &, const TfToken &, const T &, VtValue *, BOOL) [T = pxrInternal__aapl__pxrReserved__::VtValue]",
          char v20 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v19, "_stateDelegate", 0) & 1) != 0))
    {
      unint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *)sub_216AA2D04(a1 + 15);
      pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetFieldDictValueByKey(v13, a2, a3, a4, a5, a6);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetField((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v19);
  uint64_t v14 = sub_216A5B7B0(a1 + 14);
  (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, const pxrInternal__aapl__pxrReserved__::TfToken *, const pxrInternal__aapl__pxrReserved__::VtValue *))(*(void *)v14 + 208))(v14, a2, a3, a4, a5);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetField((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v18);
  uint64_t v15 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  if (!v15) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeField(v15, a1 + 3, a2, (uint64_t *)a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v19, (pxrInternal__aapl__pxrReserved__::VtValue *)v18);
  sub_2168EE084((uint64_t)v18);
  sub_2168EE084((uint64_t)v19);
  return sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
}

void sub_216AA4664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_2168EE084((uint64_t)va1);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetFieldDictValueByKey<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a7)
  {
    if (a1[15]
      || (v18[0] = "sdf/layer.cpp",
          v18[1] = "_PrimSetFieldDictValueByKey",
          v18[2] = 4308,
          v18[3] = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetFieldDictValueByKey(const SdfPath &, const T"
                   "fToken &, const TfToken &, const T &, VtValue *, BOOL) [T = pxrInternal__aapl__pxrReserved__::SdfAbst"
                   "ractDataConstValue]",
          char v19 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v18, "_stateDelegate", 0) & 1) != 0))
    {
      char v12 = (uint64_t *)sub_216AA2D04(a1 + 15);
      pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetFieldDictValueByKey(v12);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v16);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetField((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v18);
  uint64_t v13 = sub_216A5B7B0(a1 + 14);
  (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, uint64_t, uint64_t))(*(void *)v13 + 216))(v13, a2, a3, a4, a5);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetField((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v17);
  uint64_t v14 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  if (!v14) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeField(v14, a1 + 3, a2, (uint64_t *)a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v18, (pxrInternal__aapl__pxrReserved__::VtValue *)v17);
  sub_2168EE084((uint64_t)v17);
  sub_2168EE084((uint64_t)v18);
  return sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v16);
}

void sub_216AA4850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_2168EE084((uint64_t)va1);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va);
  _Unwind_Resume(a1);
}

void sub_216AA4890()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_LAYER_VALIDATE_AUTHORING)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

void sub_216AA48D8()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_LAYER_INCLUDE_DETACHED)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>();
  }
}

void sub_216AA4920()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_LAYER_EXCLUDE_DETACHED)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SdfLayer(uint64_t a1, uint64_t *a2, uint64_t a3, char *a4, long long *a5, const void ***a6, char a7)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C758A70;
  sub_216A9ED88((void *)(a1 + 24), a1);
  *(void *)(a1 + 40) = *a2;
  uint64_t v14 = a2[1];
  *(void *)(a1 + 48) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 1u, memory_order_relaxed);
  }
  sub_2167898D0((uint64_t *)(a1 + 56), a6);
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_216979288(a2);
  *(void *)(a1 + 80) = pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetSchema(v15);
  sub_216A9ED88(__dst, a1);
  pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Sdf_IdentityRegistry(a1 + 88, __dst);
  uint64_t v16 = __dst[1];
  if (__dst[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__dst[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(void *))(*(void *)v16 + 8))(v16);
  }
  sub_216AA4E08(a2, (const std::string *)a3, (char **)(a1 + 112));
  pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::New(__dst);
  *(void **)(a1 + 120) = __dst[0];
  __dst[0] = 0;
  sub_216ABB4B0((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__dst);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(a1 + 128));
  *(_WORD *)(a1 + 465) = 0;
  *(unsigned char *)(a1 + 467) = 0;
  uint64_t v17 = operator new(0xA0uLL);
  v17[19] = 0;
  *(_OWORD *)uint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *(void *)(a1 + 472) = v17;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 488) = 0;
  *(unsigned char *)(a1 + 512) = 0;
  *(_WORD *)(a1 + 513) = 257;
  if (a7)
  {
    BOOL v18 = 1;
  }
  else
  {
    char v19 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_LAYER_VALIDATE_AUTHORING);
    if (!v19) {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
    }
    BOOL v18 = *v19 != 0;
  }
  *(unsigned char *)(a1 + 515) = v18;
  *(unsigned char *)(a1 + 516) = 0;
  if (sub_216977CF0(3))
  {
    if (*(char *)(a3 + 23) >= 0) {
      unint64_t v22 = (void *)a3;
    }
    else {
      unint64_t v22 = *(void **)a3;
    }
    if (a4[23] >= 0) {
      unint64_t v23 = a4;
    }
    else {
      unint64_t v23 = *(char **)a4;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"SdfLayer::SdfLayer('%s', '%s')\n", v20, v21, v22, v23, a1 + 56);
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(a3))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_ComputeAnonLayerIdentifier(a3, a1, (uint64_t)__dst);
  }
  else if (*(char *)(a3 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a3;
    uint64_t v28 = *(void *)(a3 + 16);
  }
  atomic_store(0, (unsigned __int8 *)(a1 + 464));
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v26 = 0;
  pxrInternal__aapl__pxrReserved__::SdfLayer::_InitializeFromIdentifier(a1, (uint64_t)__dst, (void **)a4, (uint64_t *)__p, a5);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::SdfLayer::_MarkCurrentStateAsClean((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1);
  if (SHIBYTE(v28) < 0) {
    operator delete(__dst[0]);
  }
  return a1;
}

void sub_216AA4C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_2168EBBB8((void ***)(v23 + 496), 0);
  sub_2168EE084(v23 + 480);
  uint64_t v29 = *(void *)(v23 + 472);
  *(void *)(v23 + 472) = 0;
  if (v29) {
    sub_216ABB510(v23 + 472, v29);
  }
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher(v27);
  sub_216ABB4E0((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v23 + 120));
  sub_216AA10A8(v26);
  pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::~Sdf_IdentityRegistry(v25);
  sub_2167877AC(a11, *(void **)(v23 + 64));
  char v31 = *(atomic_uint **)(v23 + 48);
  if (v31 && atomic_fetch_add_explicit(v31 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v31 + 8))(v31);
  }
  char v32 = *(atomic_uint **)(v23 + 32);
  if (v32)
  {
    if (atomic_fetch_add_explicit(v32 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v32 + 8))(v32);
    }
  }
  sub_216859A88(v24, v30);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)v23);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216AA4E08@<X0>(uint64_t *a1@<X0>, const std::string *a2@<X1>, char **a3@<X8>)
{
  BOOL IsIncludedByDetachedLayerRules = pxrInternal__aapl__pxrReserved__::SdfLayer::IsIncludedByDetachedLayerRules(a2);
  uint64_t v6 = sub_216979288(a1);
  if (IsIncludedByDetachedLayerRules)
  {
    return pxrInternal__aapl__pxrReserved__::SdfFileFormat::InitDetachedData(v6, a3);
  }
  else
  {
    uint64_t v8 = *(uint64_t (**)(void))(*(void *)v6 + 40);
    return (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v8();
  }
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::_InitializeFromIdentifier(uint64_t a1, uint64_t a2, void **a3, uint64_t *a4, long long *a5)
{
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::Sdf_ComputeAssetInfoFromIdentifier(a2, a3, a5, a4);
  uint64_t v27 = (uint64_t)v6;
  if (v6)
  {
    if (pxrInternal__aapl__pxrReserved__::operator==((unsigned __int8 *)v6, *(unsigned __int8 **)(a1 + 472)))
    {
LABEL_47:
      uint64_t v21 = v27;
      uint64_t v27 = 0;
      if (v21) {
        sub_216ABB510((uint64_t)&v27, v21);
      }
      return;
    }
    uint64_t v7 = *(void *)(a1 + 472);
    if (*(char *)(v7 + 23) < 0)
    {
      sub_216778F24(&__dst, *(void **)v7, *(void *)(v7 + 8));
      uint64_t v7 = *(void *)(a1 + 472);
    }
    else
    {
      long long v8 = *(_OWORD *)v7;
      __dst.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v8;
    }
    if (*(char *)(v7 + 47) < 0)
    {
      sub_216778F24(__p, *(void **)(v7 + 24), *(void *)(v7 + 32));
      uint64_t v7 = *(void *)(a1 + 472);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v7 + 24);
      uint64_t v25 = *(void *)(v7 + 40);
    }
    *(void *)(a1 + 472) = v27;
    uint64_t v27 = v7;
    if (*(void *)(a1 + 120)
      || (v22[0] = "sdf/layer.cpp",
          v22[1] = "_InitializeFromIdentifier",
          v22[2] = 1480,
          v22[3] = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_InitializeFromIdentifier(const string &, const stri"
                   "ng &, const string &, const ArAssetInfo &)",
          char v23 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v22, "_stateDelegate", 0) & 1) != 0))
    {
      uint64_t v9 = sub_216AA2D04((uint64_t *)(a1 + 120));
      pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::_SetLayer(v9, a1 + 24);
    }
    std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *)atomic_load((unint64_t *)&qword_267B8EDE8);
    if (!size)
    {
      if (!v11) {
        uint64_t v11 = sub_216ABB6C8(&qword_267B8EDE8);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Insert(v11, (uint64_t *)(a1 + 24), *(void *)(a1 + 472));
      goto LABEL_43;
    }
    if (!v11) {
      uint64_t v11 = sub_216ABB6C8(&qword_267B8EDE8);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Update(v11, (uint64_t *)(a1 + 24), v27, *(void *)(a1 + 472));
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v22);
    char v12 = *(unsigned __int8 **)(a1 + 472);
    uint64_t v13 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v14 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v14 = __dst.__r_.__value_.__l.__size_;
    }
    uint64_t v15 = (unsigned __int8 *)v12[23];
    int v16 = (char)v15;
    if ((char)v15 < 0) {
      uint64_t v15 = (unsigned __int8 *)*((void *)v12 + 1);
    }
    if ((unsigned __int8 *)v14 != v15) {
      goto LABEL_35;
    }
    if (v16 >= 0) {
      uint64_t v17 = *(unsigned __int8 **)(a1 + 472);
    }
    else {
      uint64_t v17 = *(unsigned __int8 **)v12;
    }
    if ((*((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(__dst.__r_.__value_.__l.__data_, v17, __dst.__r_.__value_.__l.__size_))
      {
LABEL_35:
        char v19 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
        if (!v19) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance();
        }
        pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeLayerIdentifier(v19, (uint64_t *)(a1 + 24), &__dst);
        char v12 = *(unsigned __int8 **)(a1 + 472);
      }
    }
    else if (*((unsigned char *)&__dst.__r_.__value_.__s + 23))
    {
      p_dst = &__dst;
      while (p_dst->__r_.__value_.__s.__data_[0] == *v17)
      {
        p_dst = (std::string *)((char *)p_dst + 1);
        ++v17;
        if (!--v13) {
          goto LABEL_38;
        }
      }
      goto LABEL_35;
    }
LABEL_38:
    if (sub_216AAA048((unsigned __int8 *)__p, v12 + 24))
    {
      uint64_t v20 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
      if (!v20) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance();
      }
      pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeLayerResolvedPath(v20, (uint64_t *)(a1 + 24));
    }
    sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v22);
LABEL_43:
    if (SHIBYTE(v25) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    goto LABEL_47;
  }
}

void sub_216AA5158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 - 41) < 0) {
    operator delete(*(void **)(v20 - 64));
  }
  uint64_t v22 = *(void *)(v20 - 40);
  *(void *)(v20 - 40) = 0;
  if (v22) {
    sub_216ABB510(v20 - 40, v22);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::_MarkCurrentStateAsClean(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 120);
  if (*((void *)this + 15)
    || (v4[0] = "sdf/layer.cpp",
        v4[1] = "_MarkCurrentStateAsClean",
        v4[2] = 3028,
        void v4[3] = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_MarkCurrentStateAsClean() const",
        char v5 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v4, "_stateDelegate", 0) & 1) != 0))
  {
    uint64_t v3 = sub_216AA2D04(v2);
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::_UpdateLastDirtinessState(this))
  {
    v4[0] = &unk_26C759A58;
    sub_216979C44((pxrInternal__aapl__pxrReserved__::TfNotice *)v4, (uint64_t *)this + 3);
    pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDirtinessChanged::~LayerDirtinessChanged((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDirtinessChanged *)v4);
  }
}

void sub_216AA52A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDirtinessChanged::~LayerDirtinessChanged((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDirtinessChanged *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::~SdfLayer(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  *(void *)this = &unk_26C758A70;
  if (sub_216977CF0(3))
  {
    uint64_t v4 = (uint64_t *)*((void *)this + 59);
    if (*((char *)v4 + 23) < 0) {
      uint64_t v4 = (uint64_t *)*v4;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"SdfLayer::~SdfLayer('%s')\n", v2, v3, v4);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::_GetMutedPath(this, (uint64_t)__p);
    uint64_t v20 = 0;
    char v5 = (char *)atomic_load((unint64_t *)&qword_267B8EDD8);
    if (!v5) {
      char v5 = sub_2168E8DD8(&qword_267B8EDD8);
    }
    std::mutex::lock((std::mutex *)v5);
    unint64_t v6 = atomic_load((unint64_t *)&qword_267B8EDE0);
    if (!v6) {
      unint64_t v6 = sub_216ABB5B0(&qword_267B8EDE0);
    }
    uint64_t v7 = (uint64_t *)sub_21678C2D8(v6, (const void **)__p);
    unint64_t v8 = atomic_load((unint64_t *)&qword_267B8EDE0);
    if (!v8) {
      unint64_t v8 = sub_216ABB5B0(&qword_267B8EDE0);
    }
    if ((uint64_t *)(v8 + 8) != v7)
    {
      uint64_t v9 = v20;
      uint64_t v20 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v7[7];
      uint64_t v21 = 0;
      v7[7] = (uint64_t)v9;
      sub_2168BD378(v7 + 56, 0);
      sub_216AA10A8(&v21);
      uint64_t v10 = (uint64_t **)atomic_load((unint64_t *)&qword_267B8EDE0);
      if (!v10) {
        uint64_t v10 = (uint64_t **)sub_216ABB5B0(&qword_267B8EDE0);
      }
      sub_2167AE00C(v10, v7);
      sub_216ABB678((uint64_t)(v7 + 4));
      operator delete(v7);
    }
    std::mutex::unlock((std::mutex *)v5);
    sub_216AA10A8(&v20);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_216AA5724();
  __p[0] = 0;
  __int16 v19 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)__p, &qword_267B8EE00, 1);
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *)atomic_load((unint64_t *)&qword_267B8EDE8);
  if (!v11) {
    uint64_t v11 = sub_216ABB6C8(&qword_267B8EDE8);
  }
  uint64_t v12 = sub_2169791E0((uint64_t *)this + 3);
  pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Erase(v11, (uint64_t *)this + 3, *(void *)(v12 + 472));
  sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)__p);
  sub_2168EBBB8((void ***)this + 62, 0);
  sub_2168EE084((uint64_t)this + 480);
  uint64_t v13 = *((void *)this + 59);
  *((void *)this + 59) = 0;
  if (v13) {
    sub_216ABB510((uint64_t)this + 472, v13);
  }
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)this + 128));
  sub_216ABB4E0((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)this + 15);
  sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)this + 14);
  pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::~Sdf_IdentityRegistry((pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)this + 88));
  sub_2167877AC((uint64_t)this + 56, *((void **)this + 8));
  uint64_t v15 = (atomic_uint *)*((void *)this + 6);
  if (v15 && atomic_fetch_add_explicit(v15 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v15 + 8))(v15);
  }
  int v16 = (atomic_uint *)*((void *)this + 4);
  if (v16 && atomic_fetch_add_explicit(v16 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v16 + 8))(v16);
  }
  sub_216859A88((uint64_t *)this + 2, v14);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::SdfLayer::~SdfLayer(this);

  operator delete(v1);
}

void sub_216AA55A0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  sub_21675DB74(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return *((void *)this + 59);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  unint64_t v2 = atomic_load(&qword_26798B370);
  if (*((void *)this + 63) != v2)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::_GetMutedPath(this, (uint64_t)__p);
    uint64_t v4 = (char *)atomic_load((unint64_t *)&qword_267B8EDD8);
    if (!v4) {
      uint64_t v4 = sub_2168E8DD8(&qword_267B8EDD8);
    }
    std::mutex::lock((std::mutex *)v4);
    unint64_t v5 = atomic_load(&qword_26798B370);
    *((void *)this + 63) = v5;
    unint64_t v6 = atomic_load((unint64_t *)&qword_267B8EDF8);
    if (!v6) {
      unint64_t v6 = sub_216ABD1D4(&qword_267B8EDF8);
    }
    *((unsigned char *)this + 512) = sub_21677B088(v6, (const void **)__p) != 0;
    std::mutex::unlock((std::mutex *)v4);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  return *((unsigned __int8 *)this + 512);
}

void sub_216AA56A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex::unlock(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::SdfLayer::_GetMutedPath@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = this[59];
  uint64_t v3 = (long long *)(v2 + 120);
  if (*(char *)(v2 + 143) < 0) {
    uint64_t v4 = *(void *)(v2 + 128);
  }
  else {
    uint64_t v4 = *(unsigned __int8 *)(v2 + 143);
  }
  BOOL v5 = v4 == 0;
  uint64_t v6 = 120;
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v3 = (long long *)this[59];
  }
  if (*((char *)v3 + 23) < 0) {
    return sub_216778F24((unsigned char *)a2, *(void **)(v2 + v6), *((void *)v3 + 1));
  }
  long long v7 = *v3;
  *(void *)(a2 + 16) = *((void *)v3 + 2);
  *(_OWORD *)a2 = v7;
  return this;
}

void sub_216AA5724()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EE08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8EE08))
  {
    __dmb(0xBu);
    qword_267B8EE00 = 0;
    __cxa_atexit((void (*)(void *))nullsub_242, &qword_267B8EE00, &dword_216758000);
    __cxa_guard_release(&qword_267B8EE08);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return (uint64_t)this + 40;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormatArguments(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return (uint64_t)this + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateNewWithFormat@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_216979288(a1);

  return pxrInternal__aapl__pxrReserved__::SdfFileFormat::NewLayer(v3, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::_FinishInitialization(pxrInternal__aapl__pxrReserved__::SdfLayer *this, __int16 a2)
{
  *(_WORD *)((char *)this + 465) = a2 | 0x100;
  atomic_store(1u, (unsigned __int8 *)this + 464);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_WaitForInitializationAndCheckIfSuccessful(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  while (1)
  {
    unsigned __int8 v2 = atomic_load((unsigned __int8 *)this + 464);
    if (v2) {
      break;
    }
    sched_yield();
  }
  if (!*((unsigned char *)this + 466)) {
    sub_216AB9BD8();
  }
  return *((unsigned __int8 *)this + 465);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous@<X0>(const std::string *a1@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  long long v22 = 0uLL;
  pxrInternal__aapl__pxrReserved__::TfStringGetSuffix(a1, 46, &__p);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension((uint64_t)&__p, a2, (uint64_t *)&v17);
    long long v7 = (atomic_uint *)*((void *)&v22 + 1);
    long long v22 = v17;
    *((void *)&v17 + 1) = 0;
    if (v7)
    {
      if (atomic_fetch_add_explicit(v7 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v7 + 8))(v7);
      }
      uint64_t v8 = *((void *)&v17 + 1);
      *(void *)&long long v17 = 0;
      if (*((void *)&v17 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
    }
  }
  uint64_t v9 = sub_216AA0AEC(&v22);
  if (!(v10 & 1 | (unint64_t)v9))
  {
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
    if (!v11) {
      uint64_t v11 = sub_216ABB7C8(&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
    }
    pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindById(v11, (uint64_t *)&v17);
    uint64_t v12 = (atomic_uint *)*((void *)&v22 + 1);
    long long v22 = v17;
    *((void *)&v17 + 1) = 0;
    if (v12)
    {
      if (atomic_fetch_add_explicit(v12 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v12 + 8))(v12);
      }
      uint64_t v13 = *((void *)&v17 + 1);
      *(void *)&long long v17 = 0;
      if (*((void *)&v17 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
    }
  }
  std::string::size_type v14 = sub_216AA0AEC(&v22);
  if (v15 & 1 | (unint64_t)v14)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateAnonymousWithFormat((uint64_t *)&v22, (uint64_t)a1, a3);
  }
  else
  {
    *(void *)&long long v17 = "sdf/layer.cpp";
    *((void *)&v17 + 1) = "CreateAnonymous";
    uint64_t v18 = 359;
    __int16 v19 = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(const string &, const FileFo"
          "rmatArguments &)";
    char v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot determine file format for anonymous SdfLayer");
    *a3 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t result = *((void *)&v22 + 1);
  if (*((void *)&v22 + 1))
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v22 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result); {
  }
    }
  return result;
}

void sub_216AA5B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  uint64_t v21 = *(atomic_uint **)(v19 - 40);
  if (v21)
  {
    if (atomic_fetch_add_explicit(v21 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v21 + 8))(v21);
    }
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateAnonymousWithFormat(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_216979288(a1);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 16))(v6))
  {
    v15[0] = "sdf/layer.cpp";
    v15[1] = "_CreateAnonymousWithFormat";
    v16[0] = (void *)387;
    v16[1] = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateAnonymousWithFormat(const SdfFileF"
             "ormatConstPtr &, const std::string &, const FileFormatArguments &)";
    LOBYTE(v17) = 0;
    long long v7 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_216979288(a1);
    unint64_t v8 = *(void *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v7) & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      uint64_t v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0) {
        uint64_t v9 = *(const char **)v9;
      }
    }
    else
    {
      uint64_t v9 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create anonymous layer: creating package %s layer is not allowed through this API.", v9);
    *a3 = 0;
  }
  else
  {
    sub_216AA5724();
    v13[0] = 0;
    __int16 v14 = 0;
    tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v13, &qword_267B8EE00, 1);
    pxrInternal__aapl__pxrReserved__::Sdf_GetAnonLayerIdentifierTemplate(a2, &v12);
    uint64_t v20 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v19 = 0u;
    *(_OWORD *)int v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)char v15 = 0u;
    uint64_t v10 = sub_216979288(a1);
    pxrInternal__aapl__pxrReserved__::SdfFileFormat::NewLayer(v10, a3);
    sub_2168EE084((uint64_t)&v19 + 8);
    if (SBYTE7(v19) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v17) < 0) {
      operator delete(v16[1]);
    }
    if (SHIBYTE(v16[0]) < 0) {
      operator delete(v15[0]);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    uint64_t v11 = sub_216AA5ECC(a3);
    *(_WORD *)(v11 + 465) = 257;
    atomic_store(1u, (unsigned __int8 *)(v11 + 464));
    sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)v13);
  }
}

void sub_216AA5DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_216ABB798(v27);
  sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)&a23);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_216AA0AEC(a2);
  if (v7 & 1 | (unint64_t)v6)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateAnonymousWithFormat(a2, a1, a3);
  }
  else
  {
    v8[0] = "sdf/layer.cpp";
    v8[1] = "CreateAnonymous";
    double v8[2] = 372;
    void v8[3] = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(const string &, const SdfF"
            "ileFormatConstPtr &, const FileFormatArguments &)";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid file format for anonymous SdfLayer");
    *a3 = 0;
  }
}

uint64_t sub_216AA5ECC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    unsigned __int8 v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    _OWORD v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->() cons"
            "t [T = pxrInternal__aapl__pxrReserved__::SdfLayer]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000021746D74ALL & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::IsAnonymous(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(*((void *)this + 59));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::CreateNew@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, void *a3@<X8>)
{
  if (sub_216977CF0(3))
  {
    uint64_t v6 = *(char *)(a1 + 23) >= 0 ? a1 : *(void *)a1;
    sub_216AA60C4(a2);
    char v9 = v14 >= 0 ? &__p : (void **)__p;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"SdfLayer::CreateNew('%s', '%s')\n", v7, v8, v6, v9);
    if (v14 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateNew(&v11, a1, a2, 1, a3);
  uint64_t result = v12;
  if (v12)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216AA6060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216AA60C4(void *a1)
{
  sub_21677B834((uint64_t)v3);
  sub_216ABB854(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216AA61F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateNew(uint64_t *a1@<X0>, uint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  v75[2] = *MEMORY[0x263EF8340];
  memset(&v64, 0, sizeof(v64));
  NewLayerWithuint64_t Identifier = pxrInternal__aapl__pxrReserved__::Sdf_CanCreateNewLayerWithIdentifier(a2, (uint64_t)&v64);
  if (NewLayerWithIdentifier)
  {
    Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)NewLayerWithIdentifier);
    long long v70 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    v75[1] = 0;
    uint64_t v74 = 0;
    memset(&__p, 0, sizeof(__p));
    memset(&v62, 0, sizeof(v62));
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v60);
    memset(&v55, 0, sizeof(v55));
    pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifierForNewAsset((uint64_t)Resolver);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = *(std::string *)__str;
    __str[23] = 0;
    __str[0] = 0;
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    pxrInternal__aapl__pxrReserved__::ArResolver::ResolveForNewAsset((uint64_t)Resolver);
    std::string::operator=(&v62, (const std::string *)__str);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    unint64_t v12 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v12) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    unint64_t v13 = v60;
    unint64_t v14 = atomic_load((unint64_t *)(v12 + 144));
    if (v13 < v14
      && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v60, (atomic_ullong *)v12))
    {
      memset(__str, 0, 24);
      char v15 = sub_216862604(&v60, 0);
      uint64_t v16 = sub_216878D10();
      if (v15 != (void *)v16)
      {
        unint64_t v17 = *(void *)&__str[8];
        do
        {
          uint64_t v18 = (long long *)(v15 + 7);
          if (v17 >= *(void *)&__str[16])
          {
            unint64_t v17 = sub_2167E9A44((uint64_t *)__str, v18);
          }
          else
          {
            if (*((char *)v15 + 79) < 0)
            {
              sub_216778F24((unsigned char *)v17, (void *)v15[7], v15[8]);
            }
            else
            {
              long long v19 = *v18;
              *(void *)(v17 + 16) = v15[9];
              *(_OWORD *)unint64_t v17 = v19;
            }
            v17 += 24;
          }
          *(void *)&__str[8] = v17;
          char v15 = (void *)v15[1];
        }
        while (v15 != (void *)v16);
      }
      pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", (std::string **)__str, &v55);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      std::string v64 = v55;
      uint64_t v20 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v20) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      uint64_t v21 = sub_216862604(&v60, 0);
      LOBYTE(v58) = 0;
      long long v22 = (void *)sub_2168520EC(v20 + 19, &v58);
      if (v22 != v21) {
        pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v20, v21, v22);
      }
      v55.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
      sub_216782F20((void ***)&v55);
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v60);
    std::string::size_type size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v62.__r_.__value_.__l.__size_;
    }
    if (!size)
    {
      *(void *)__str = "sdf/layer.cpp";
      *(void *)&__str[8] = "_CreateNew";
      *(void *)&__str[16] = 566;
      *(void *)&__str[24] = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateNew(SdfFileFormat"
                              "ConstPtr, const string &, const FileFormatArguments &, BOOL)";
      LOBYTE(v66) = 0;
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v64.__r_.__value_.__l.__size_) {
          uint64_t v39 = (std::string *)v64.__r_.__value_.__r.__words[0];
        }
        else {
          uint64_t v39 = (std::string *)"failed to compute path for new layer";
        }
      }
      else
      {
        uint64_t v39 = &v64;
        if (!*((unsigned char *)&v64.__r_.__value_.__s + 23)) {
          uint64_t v39 = (std::string *)"failed to compute path for new layer";
        }
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__str, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create new layer '%s': %s", (const char *)p_p, (const char *)v39);
      goto LABEL_90;
    }
    uint64_t v24 = sub_216AA0AEC(a1);
    if (!(v25 & 1 | (unint64_t)v24))
    {
      pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension((uint64_t)&v62, a3, (uint64_t *)__str);
      uint64_t v26 = (atomic_uint *)a1[1];
      *(_OWORD *)a1 = *(_OWORD *)__str;
      *(void *)&__str[8] = 0;
      if (v26)
      {
        if (atomic_fetch_add_explicit(v26 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v26 + 8))(v26);
        }
        uint64_t v27 = *(void *)&__str[8];
        *(void *)__str = 0;
        if (*(void *)&__str[8]
          && atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&__str[8] + 8), 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
        }
      }
      uint64_t v28 = sub_216AA0AEC(a1);
      if (!(v29 & 1 | (unint64_t)v28))
      {
        *(void *)__str = "sdf/layer.cpp";
        *(void *)&__str[8] = "_CreateNew";
        *(void *)&__str[16] = 575;
        *(void *)&__str[24] = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateNew(SdfFileForm"
                                "atConstPtr, const string &, const FileFormatArguments &, BOOL)";
        LOBYTE(v66) = 0;
        if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__str, "fileFormat", 0) & 1) == 0)
        {
LABEL_90:
          *a5 = 0;
LABEL_104:
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v62.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          sub_2168EE084((uint64_t)v75);
          if (SHIBYTE(v74) < 0) {
            operator delete((void *)v73);
          }
          if (SHIBYTE(v72) < 0) {
            operator delete(*((void **)&v71 + 1));
          }
          if (SBYTE7(v71) < 0) {
            operator delete((void *)v70);
          }
          goto LABEL_114;
        }
      }
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_IsPackageOrPackagedLayer(a1, a2))
    {
      *(void *)__str = "sdf/layer.cpp";
      *(void *)&__str[8] = "_CreateNew";
      *(void *)&__str[16] = 586;
      *(void *)&__str[24] = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateNew(SdfFileFormat"
                              "ConstPtr, const string &, const FileFormatArguments &, BOOL)";
      LOBYTE(v66) = 0;
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v30 = (const char *)a2;
      }
      else {
        uint64_t v30 = *(const char **)a2;
      }
      uint64_t v31 = sub_216979288(a1);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v31 + 16))(v31)) {
        char v32 = "package";
      }
      else {
        char v32 = "packaged";
      }
      uint64_t v33 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_216979288(a1);
      unint64_t v34 = *(void *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v33) & 0xFFFFFFFFFFFFFFF8;
      if (v34)
      {
        BOOL v35 = (const char *)(v34 + 16);
        if (*(char *)(v34 + 39) < 0) {
          BOOL v35 = *(const char **)v35;
        }
      }
      else
      {
        BOOL v35 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__str, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create new layer '%s': creating %s %s layer is not allowed through this API.", v30, v32, v35);
      goto LABEL_90;
    }
    sub_2167898D0((uint64_t *)&v60, (const void ***)a3);
    sub_216AA6F24(&__p, a1, (uint64_t)&v60);
    char v40 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
    if (!v40) {
      char v40 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216AA11E8(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
    }
    if ((*(void *)v40 & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)v40 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v40);
    }
    uint64_t v42 = sub_21678C2D8((uint64_t)&v60, (const void **)EmptyString);
    if (&v61 != (void **)v42)
    {
      sub_216789C64(__str, (long long *)(v42 + 32));
      sub_216ABB984((uint64_t)&v58, (const void **)__str, 1);
      pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((uint64_t)&__p, &v58, &v55);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v55;
      *((unsigned char *)&v55.__r_.__value_.__s + 23) = 0;
      v55.__r_.__value_.__s.__data_[0] = 0;
      sub_2167877AC((uint64_t)&v58, v59);
      if (SHIBYTE(v66) < 0) {
        operator delete(*(void **)&__str[24]);
      }
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
    }
    char v57 = 0;
    sub_216AA5724();
    v55.__r_.__value_.__r.__words[0] = 0;
    __int16 v56 = 0;
    tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)&v55, &qword_267B8EE00, 1);
    char v43 = (pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *)atomic_load((unint64_t *)&qword_267B8EDE8);
    if (!v43) {
      char v43 = sub_216ABB6C8(&qword_267B8EDE8);
    }
    memset(__str, 0, 24);
    pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Find(v43, (uint64_t)&__p, (void **)__str, (uint64_t *)&v58);
    uint64_t v44 = sub_21697CF14(&v58);
    uint64_t v46 = v45 & 1;
    uint64_t v47 = v59;
    if (v59 && atomic_fetch_add_explicit(v59 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v47 + 8))(v47);
    }
    unint64_t v48 = v46 | (unint64_t)v44;
    if ((__str[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__str);
      if (v48) {
        goto LABEL_84;
      }
    }
    else if (v48)
    {
LABEL_84:
      *(void *)__str = "sdf/layer.cpp";
      *(void *)&__str[8] = "_CreateNew";
      *(void *)&__str[16] = 617;
      *(void *)&__str[24] = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateNew(SdfFileFormat"
                              "ConstPtr, const string &, const FileFormatArguments &, BOOL)";
      LOBYTE(v66) = 0;
      uint64_t v49 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__str, 1, (pxrInternal__aapl__pxrReserved__ *)"A layer already exists with identifier '%s'", (const char *)v49);
      goto LABEL_87;
    }
    uint64_t v69 = 0;
    *(_OWORD *)uint64_t v67 = 0u;
    long long v68 = 0u;
    long long v66 = 0u;
    memset(__str, 0, sizeof(__str));
    uint64_t v50 = sub_216979288(a1);
    pxrInternal__aapl__pxrReserved__::SdfFileFormat::NewLayer(v50, (uint64_t *)&v58);
    uint64_t v51 = v57;
    char v57 = v58;
    uint64_t v58 = 0;
    sub_2168BD378((int)&v57, v51);
    sub_216ABB798(&v58);
    sub_2168EE084((uint64_t)&v68 + 8);
    if (SBYTE7(v68) < 0) {
      operator delete(v67[0]);
    }
    if (SHIBYTE(v66) < 0) {
      operator delete(*(void **)&__str[24]);
    }
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    if (!v57)
    {
      *(void *)__str = "sdf/layer.cpp";
      *(void *)&__str[8] = "_CreateNew";
      *(void *)&__str[16] = 624;
      *(void *)&__str[24] = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateNew(SdfFileFormat"
                              "ConstPtr, const string &, const FileFormatArguments &, BOOL)";
      LOBYTE(v66) = 0;
      if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__str, "layer", 0) & 1) == 0) {
        goto LABEL_87;
      }
    }
    if (a4)
    {
      char v52 = *(unsigned char *)(sub_216AA5ECC((uint64_t *)&v57) + 516);
      int v53 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v57);
      if ((pxrInternal__aapl__pxrReserved__::SdfLayer::_Save(v53, 1) & 1) == 0)
      {
LABEL_87:
        *a5 = 0;
        sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)&v55);
LABEL_103:
        sub_216ABB798(&v57);
        sub_2167877AC((uint64_t)&v60, v61);
        goto LABEL_104;
      }
      *(unsigned char *)(sub_216AA5ECC((uint64_t *)&v57) + 516) = v52;
    }
    uint64_t v54 = sub_216AA5ECC((uint64_t *)&v57);
    *(_WORD *)(v54 + 465) = 257;
    atomic_store(1u, (unsigned __int8 *)(v54 + 464));
    sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)&v55);
    *a5 = v57;
    char v57 = 0;
    goto LABEL_103;
  }
  *(void *)&long long v70 = "sdf/layer.cpp";
  *((void *)&v70 + 1) = "_CreateNew";
  *(void *)&long long v71 = 536;
  *((void *)&v71 + 1) = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateNew(SdfFileFormatCons"
                          "tPtr, const string &, const FileFormatArguments &, BOOL)";
  LOBYTE(v72) = 0;
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v36 = (const char *)a2;
  }
  else {
    uint64_t v36 = *(const char **)a2;
  }
  uint64_t v37 = &v64;
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v37 = (std::string *)v64.__r_.__value_.__r.__words[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v70, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create new layer '%s': %s", v36, (const char *)v37);
  *a5 = 0;
LABEL_114:
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
}

void sub_216AA6BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,void *a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)&a13);
  sub_216ABB798(&a20);
  sub_2167877AC((uint64_t)&a26, a27);
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  sub_21696C898(v54 - 176);
  if (a47 < 0) {
    operator delete(a42);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::CreateNew@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, void *a4@<X8>)
{
  if (sub_216977CF0(3))
  {
    unint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_216979288(a1);
    unint64_t v9 = *(void *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v8) & 0xFFFFFFFFFFFFFFF8;
    if (v9)
    {
      uint64_t v10 = (const char *)(v9 + 16);
      if (*(char *)(v9 + 39) < 0) {
        uint64_t v10 = *(const char **)v10;
      }
    }
    else
    {
      uint64_t v10 = "";
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *(void *)a2;
    }
    sub_216AA60C4(a3);
    if (v20 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"SdfLayer::CreateNew('%s', '%s', '%s')\n", v12, v13, v10, v11, p_p);
    if (v20 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v15 = a1[1];
  uint64_t v17 = *a1;
  uint64_t v18 = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 + 8), 1u, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateNew(&v17, a2, a3, 1, a4);
  uint64_t result = v18;
  if (v18)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216AA6EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216AA6F24(const std::string *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = sub_216AA0AEC(a2);
  if (v7 & 1 | (unint64_t)v6)
  {
    unint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
    if (!v8) {
      unint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216AA11E8(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
    }
    if ((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
    }
    uint64_t v10 = sub_21678C2D8(a3, (const void **)EmptyString);
    if (a3 + 8 != v10)
    {
      uint64_t v11 = v10;
      unint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_216979288(a2);
      if (pxrInternal__aapl__pxrReserved__::SdfFileFormat::IsPrimaryFormatForExtensions(v12))
      {
        sub_2167AE00C((uint64_t **)a3, (uint64_t *)v11);
        sub_21677B5A0(v11 + 32);
        operator delete((void *)v11);
      }
      else
      {
        unint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_216979288(a2);
        Target = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetTarget(v13);
        if ((*(void *)Target & 0xFFFFFFFFFFFFFFF8) != 0) {
          uint64_t v15 = (const std::string *)((*(void *)Target & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          uint64_t v15 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Target);
        }
        std::string::operator=((std::string *)(v11 + 56), v15);
      }
    }
    if (*(void *)(a3 + 16))
    {
      uint64_t v18 = sub_216979288(a2);
      (*(void (**)(void ***__return_ptr))(*(void *)v18 + 32))(&v38);
      uint64_t v36 = v38;
      uint64_t v37 = &v39;
      while (1)
      {
        if (v36 == v37)
        {
          sub_2167877AC((uint64_t)&v38, v39);
          return a3;
        }
        uint64_t v21 = sub_216AA7AC0(&v36, v19, v20);
        uint64_t v24 = sub_21678C2D8(a3, (const void **)(*v21 + 32));
        if (a3 + 8 != v24)
        {
          uint64_t v25 = *sub_216AA7AC0(&v36, v22, v23);
          uint64_t v26 = *(unsigned __int8 *)(v24 + 79);
          if ((v26 & 0x80u) == 0) {
            uint64_t v27 = *(unsigned __int8 *)(v24 + 79);
          }
          else {
            uint64_t v27 = *(void *)(v24 + 64);
          }
          uint64_t v28 = *(unsigned __int8 *)(v25 + 79);
          int v29 = (char)v28;
          if ((v28 & 0x80u) != 0) {
            uint64_t v28 = *(void *)(v25 + 64);
          }
          if (v27 == v28)
          {
            uint64_t v30 = (const void **)(v24 + 56);
            uint64_t v33 = *(unsigned __int8 **)(v25 + 56);
            uint64_t v31 = (unsigned __int8 *)(v25 + 56);
            char v32 = v33;
            if (v29 >= 0) {
              unint64_t v34 = v31;
            }
            else {
              unint64_t v34 = v32;
            }
            if ((v26 & 0x80) != 0)
            {
              if (memcmp(*v30, v34, *(void *)(v24 + 64))) {
                goto LABEL_42;
              }
LABEL_41:
              sub_2167AE00C((uint64_t **)a3, (uint64_t *)v24);
              sub_21677B5A0(v24 + 32);
              operator delete((void *)v24);
              goto LABEL_42;
            }
            if (!*(unsigned char *)(v24 + 79)) {
              goto LABEL_41;
            }
            while (*(unsigned __int8 *)v30 == *v34)
            {
              uint64_t v30 = (const void **)((char *)v30 + 1);
              ++v34;
              if (!--v26) {
                goto LABEL_41;
              }
            }
          }
        }
LABEL_42:
        sub_216AA7B3C(&v36);
      }
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_GetExtension(a1);
    if (v40 < 0)
    {
      operator delete(v38);
      if (v39) {
        return a3;
      }
    }
    else if (v40)
    {
      return a3;
    }
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
    if (!v16) {
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216AA11E8(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
    }
    if ((*(void *)v16 & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v17 = (uint64_t *)((*(void *)v16 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      uint64_t v17 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
    }
    sub_216839AC4((uint64_t **)a3, (const void **)v17);
  }
  return a3;
}

void sub_216AA71CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_Save(pxrInternal__aapl__pxrReserved__::SdfLayer *this, char a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
  {
    __p[0] = "sdf/layer.cpp";
    __p[1] = "_Save";
    uint64_t v17 = 4842;
    uint64_t v18 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_Save(BOOL) const";
    char v19 = 0;
    char v4 = (const char *)*((void *)this + 59);
    if (v4[23] < 0) {
      char v4 = *(const char **)v4;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot save muted layer @%s@", v4);
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(*((void *)this + 59)))
  {
    __p[0] = "sdf/layer.cpp";
    __p[1] = "_Save";
    uint64_t v17 = 4848;
    uint64_t v18 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_Save(BOOL) const";
    char v19 = 0;
    uint64_t v5 = (const char *)*((void *)this + 59);
    if (v5[23] < 0) {
      uint64_t v5 = *(const char **)v5;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot save anonymous layer @%s@", v5);
    return 0;
  }
  uint64_t v8 = *((void *)this + 59);
  if (*(char *)(v8 + 47) < 0)
  {
    sub_216778F24(__p, *(void **)(v8 + 24), *(void *)(v8 + 32));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(v8 + 24);
    uint64_t v17 = *(void *)(v8 + 40);
  }
  unint64_t v9 = (void *)HIBYTE(v17);
  if (v17 < 0) {
    unint64_t v9 = __p[1];
  }
  if (v9)
  {
    if ((a2 & 1) == 0
      && (pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(this) & 1) == 0
      && pxrInternal__aapl__pxrReserved__::TfPathExists((const char *)__p, 0))
    {
      goto LABEL_28;
    }
    v20[0] = 0;
    v20[1] = 0;
    uint64_t v21 = 0;
    uint64_t v10 = *((void *)this + 6);
    uint64_t v14 = *((void *)this + 5);
    uint64_t v15 = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 1u, memory_order_relaxed);
    }
    char v11 = pxrInternal__aapl__pxrReserved__::SdfLayer::_WriteToFile((uint64_t)this, (const char *)__p, (char *)v20, (uint64_t)&v14, (uint64_t)this + 56);
    uint64_t v12 = v15;
    if (v15 && atomic_fetch_add_explicit((atomic_uint *volatile)(v15 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    if (SHIBYTE(v21) < 0)
    {
      operator delete(v20[0]);
      if (v11) {
        goto LABEL_27;
      }
    }
    else if (v11)
    {
LABEL_27:
      *((unsigned char *)this + 516) = 1;
      pxrInternal__aapl__pxrReserved__::Sdf_ComputeLayerModificationTimestamp(this, v20);
      sub_2168ED33C((void *)this + 60, v20);
      unint64_t v13 = (pxrInternal__aapl__pxrReserved__::TfNotice *)sub_2168EE084((uint64_t)v20);
      v20[0] = &unk_26C759A20;
      sub_216979C44(v13, (uint64_t *)this + 3);
      pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidSaveLayerToFile::~LayerDidSaveLayerToFile((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidSaveLayerToFile *)v20);
LABEL_28:
      uint64_t v6 = 1;
      goto LABEL_31;
    }
  }
  uint64_t v6 = 0;
LABEL_31:
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

void sub_216AA7474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidSaveLayerToFile::~LayerDidSaveLayerToFile((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidSaveLayerToFile *)(v18 - 48));
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::New@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = a1[1];
  uint64_t v6 = *a1;
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateNew(&v6, a2, a3, 0, a4);
  uint64_t result = v7;
  if (v7)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216AA7550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_ComputeInfoToFindOrOpenLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v47[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (!v3) {
    return 0;
  }
  memset(&__p, 0, sizeof(__p));
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  char v38 = (uint64_t *)&v39;
  if (pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier((const std::string *)a1, (long long *)&__p, (uint64_t)&v38))
  {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      long long v43 = 0u;
      memset(v44, 0, sizeof(v44));
      long long v45 = 0u;
      v47[1] = 0;
      std::string::size_type v46 = 0;
      memset(v37, 0, 7);
      IsAnonLayeruint64_t Identifier = pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier((uint64_t)&__p);
      BOOL v10 = IsAnonLayerIdentifier;
      if (IsAnonLayerIdentifier)
      {
        std::string::size_type v11 = 0;
        std::string::size_type v12 = 0;
        int v13 = 0;
      }
      else
      {
        Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)IsAnonLayerIdentifier);
        v35[0] = 0;
        v35[1] = 0;
        uint64_t v36 = 0;
        pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier((uint64_t)Resolver);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string __p = __dst;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
        __dst.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v36) < 0) {
          operator delete(v35[0]);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_ResolvePath((pxrInternal__aapl__pxrReserved__ *)&__p);
        std::string::size_type v12 = __dst.__r_.__value_.__l.__size_;
        std::string::size_type v11 = __dst.__r_.__value_.__r.__words[0];
        v37[0] = __dst.__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v37 + 3) = *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3);
        int v13 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      }
      if (v40)
      {
        __dst.__r_.__value_.__r.__words[0] = *(void *)a2;
        __dst.__r_.__value_.__l.__size_ = a2 + 8;
        while (__dst.__r_.__value_.__r.__words[0] != __dst.__r_.__value_.__l.__size_)
        {
          uint64_t v16 = *sub_216AA7AC0(&__dst, v8, v9);
          v35[0] = (void *)(*sub_216AA7AC0(&__dst, v17, v18) + 32);
          char v19 = sub_21677B174(&v38, (const void **)v35[0], (uint64_t)&unk_2174BFD90, (long long **)v35);
          std::string::operator=((std::string *)(v19 + 7), (const std::string *)(v16 + 56));
          sub_216AA7B3C(&__dst);
        }
      }
      else if (&v38 != (uint64_t **)a2)
      {
        sub_216799C1C(&v38, *(long long **)a2, (long long *)(a2 + 8));
      }
      if ((v13 & 0x80) != 0)
      {
        char v20 = (void *)v11;
        std::string::size_type v21 = v12;
        if (v12) {
          goto LABEL_30;
        }
      }
      else if (v13)
      {
        __dst.__r_.__value_.__r.__words[0] = v11;
        __dst.__r_.__value_.__l.__size_ = v12;
        LODWORD(__dst.__r_.__value_.__r.__words[2]) = v37[0];
        *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v37 + 3);
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13;
LABEL_31:
        pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension((uint64_t)&__dst, (pxrInternal__aapl__pxrReserved__::TfToken *)&v38, (uint64_t *)v35);
        uint64_t v22 = *(atomic_uint **)(a3 + 8);
        *(_OWORD *)a3 = *(_OWORD *)v35;
        v35[1] = 0;
        if (v22)
        {
          if (atomic_fetch_add_explicit(v22 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v22 + 8))(v22);
          }
          char v23 = v35[1];
          v35[0] = 0;
          if (v35[1]
            && atomic_fetch_add_explicit((atomic_uint *volatile)v35[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(void *))(*(void *)v23 + 8))(v23);
          }
        }
        else
        {
          v35[0] = 0;
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        sub_216AA6F24(&__p, (uint64_t *)a3, (uint64_t)&v38);
        sub_2168A6B2C((uint64_t *)(a3 + 16), (uint64_t)&v38);
        *(unsigned char *)(a3 + 40) = v10;
        std::string::size_type v24 = *(void *)(a3 + 64);
        long long v25 = *(_OWORD *)(a3 + 48);
        *(std::string *)(a3 + 48) = __p;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v25;
        __p.__r_.__value_.__r.__words[2] = v24;
        if (*(char *)(a3 + 95) < 0) {
          operator delete(*(void **)(a3 + 72));
        }
        *(void *)(a3 + 72) = v11;
        *(void *)(a3 + 80) = v12;
        *(_DWORD *)(a3 + 88) = v37[0];
        *(_DWORD *)(a3 + 91) = *(_DWORD *)((char *)v37 + 3);
        *(unsigned char *)(a3 + 95) = v13;
        pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(a3 + 48, (void *)(a3 + 16), &__dst);
        uint64_t v26 = (void **)(a3 + 96);
        if (*(char *)(a3 + 119) < 0) {
          operator delete(*v26);
        }
        *(_OWORD *)uint64_t v26 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        *(void *)(a3 + 112) = *((void *)&__dst.__r_.__value_.__l + 2);
        uint64_t v27 = *(void *)(a3 + 136);
        uint64_t v28 = *((void *)&v44[1] + 1);
        *(void *)(a3 + 136) = *(void *)&v44[0];
        std::string::size_type v29 = *(void *)(a3 + 160);
        *(void *)(a3 + 160) = v28;
        long long v30 = *(_OWORD *)(a3 + 120);
        *(_OWORD *)(a3 + 120) = v43;
        long long v43 = v30;
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 144);
        long long v31 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v29;
        *(_OWORD *)(a3 + 144) = *(_OWORD *)((char *)v44 + 8);
        *(void *)&v44[0] = v27;
        *((void *)&v44[1] + 1) = v29;
        *(_OWORD *)((char *)v44 + 8) = v31;
        std::string __dst = *(std::string *)(a3 + 168);
        long long v32 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        std::string::size_type v33 = __dst.__r_.__value_.__r.__words[2];
        *(_OWORD *)(a3 + 168) = v45;
        *(void *)(a3 + 184) = v46;
        std::string::size_type v46 = v33;
        long long v45 = v32;
        sub_21697DC0C((void *)(a3 + 192), v47);
        sub_2168EE084((uint64_t)v47);
        if (SHIBYTE(v46) < 0) {
          operator delete((void *)v45);
        }
        if (SHIBYTE(v44[1]) < 0) {
          operator delete(*((void **)&v44[0] + 1));
        }
        if (SBYTE7(v44[0]) < 0) {
          operator delete((void *)v43);
        }
        uint64_t v14 = 1;
        goto LABEL_50;
      }
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        std::string __dst = __p;
        goto LABEL_31;
      }
      std::string::size_type v21 = __p.__r_.__value_.__l.__size_;
      char v20 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_30:
      sub_216778F24(&__dst, v20, v21);
      goto LABEL_31;
    }
  }
  uint64_t v14 = 0;
LABEL_50:
  sub_2167877AC((uint64_t)&v38, v39);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v14;
}

void sub_216AA7A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, void *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (v41 < 0) {
    operator delete(v40);
  }
  sub_21696C898(v42 - 176);
  sub_2167877AC((uint64_t)&a17, a18);
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_216AA7AC0(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    _OWORD v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<std::string, std::string>>::operator->"
            "() [T = const std::map<std::string, std::string>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216AA7B3C(void *a1)
{
  unsigned __int8 v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    void v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<std::string, std::string"
            ">>::operator++() [T = const std::map<std::string, std::string>, Reverse = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        char v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        char v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        unsigned __int8 v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (sub_216977CF0(3))
  {
    uint64_t v6 = *(char *)(a1 + 23) >= 0 ? a1 : *(void *)a1;
    sub_216AA60C4(a2);
    unint64_t v9 = SHIBYTE(v24) >= 0 ? __p : (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"SdfLayer::FindOrOpen('%s', '%s')\n", v7, v8, v6, v9);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p[0]);
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  v25[0] = 0;
  v25[1] = 0;
  std::string::size_type v24 = v25;
  char v26 = 0;
  uint64_t v31 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  memset(v30, 0, 96);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::_ComputeInfoToFindOrOpenLayer(a1, (uint64_t)a2, (uint64_t)__p))
  {
    sub_216AA5724();
    v19[0] = 0;
    __int16 v20 = 0;
    tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v19, &qword_267B8EE00, 0);
    sub_216AA7E98((uint64_t)v30, (void **)&v28 + 1, (tbb::queuing_rw_mutex::scoped_lock *)v19, 1, (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v21);
    if (v21[0])
    {
      BOOL v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)v21);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::_WaitForInitializationAndCheckIfSuccessful(v10))
      {
        std::string::size_type v11 = v21[0];
        v21[0] = 0;
      }
      else
      {
        std::string::size_type v11 = 0;
      }
      *a3 = v11;
      uint64_t v15 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v21;
      goto LABEL_25;
    }
    sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v21);
    if (v26)
    {
      std::string::size_type v12 = sub_216AA0AEC(__p);
      if (!(v13 & 1 | (unint64_t)v12)
        || (uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_216979288((uint64_t *)__p),
            (pxrInternal__aapl__pxrReserved__::SdfFileFormat::ShouldReadAnonymousLayers(v14) & 1) == 0))
      {
LABEL_18:
        *a3 = 0;
LABEL_26:
        sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)v19);
        return sub_216ABA410((uint64_t)__p);
      }
    }
    else
    {
      uint64_t v16 = HIBYTE(v29);
      if (v29 < 0) {
        uint64_t v16 = v29;
      }
      if (!v16) {
        goto LABEL_18;
      }
    }
    v18[0] = v19;
    v18[1] = __p;
    v21[0] = (uint64_t (**)(void))&unk_26C758AC8;
    v21[1] = (uint64_t (**)(void))v18;
    tbb::interface7::internal::isolate_within_arena(v21, 0);
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v22;
    *a3 = v22;
    uint64_t v22 = 0;
    v21[0] = (uint64_t (**)(void))&unk_26C758AC8;
LABEL_25:
    sub_216ABB798(v15);
    goto LABEL_26;
  }
  *a3 = 0;
  return sub_216ABA410((uint64_t)__p);
}

void sub_216AA7E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v25 + 16));
  sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)&a13);
  sub_216ABA410((uint64_t)&__p);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216AA7E98@<X0>(uint64_t a1@<X0>, void **a2@<X1>, tbb::queuing_rw_mutex::scoped_lock *a3@<X2>, int a4@<W3>, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a5@<X8>)
{
  int v9 = 0;
  char v10 = 0;
  *a5 = 0;
  char v22 = a4;
  int v11 = a4 ^ 1;
  do
  {
    std::string::size_type v12 = (pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *)atomic_load((unint64_t *)&qword_267B8EDE8);
    if (!v12) {
      std::string::size_type v12 = sub_216ABB6C8(&qword_267B8EDE8);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Find(v12, a1, a2, &v24);
    char v13 = sub_21697CF14(&v24);
    if (!(v14 & 1 | (unint64_t)v13))
    {
      if (((v9 | v11) & 1) == 0 && !tbb::queuing_rw_mutex::scoped_lock::upgrade_to_writer(a3))
      {
LABEL_17:
        int v9 = 1;
        int v16 = 2;
        goto LABEL_18;
      }
      goto LABEL_16;
    }
    sub_216ABBA08((uint64_t)&v24, &v23);
    uint64_t v15 = *a5;
    *a5 = v23;
    char v23 = 0;
    sub_2168BD378((int)a5, v15);
    sub_216ABB798(&v23);
    if (!*a5)
    {
      if ((v9 & 1) == 0 && !tbb::queuing_rw_mutex::scoped_lock::upgrade_to_writer(a3)) {
        goto LABEL_17;
      }
      uint64_t v17 = sub_21697CF14(&v24);
      if (v18 & 1 | (unint64_t)v17)
      {
        char v19 = (pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *)atomic_load((unint64_t *)&qword_267B8EDE8);
        if (!v19) {
          char v19 = sub_216ABB6C8(&qword_267B8EDE8);
        }
        uint64_t v20 = sub_2169791E0(&v24);
        pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Erase(v19, &v24, *(void *)(v20 + 472));
      }
LABEL_16:
      int v16 = 0;
      goto LABEL_18;
    }
    tbb::queuing_rw_mutex::scoped_lock::release((uint64_t)a3);
    int v16 = 1;
    char v10 = 1;
LABEL_18:
    uint64_t result = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v25;
    if (v25 && atomic_fetch_add_explicit((atomic_uint *volatile)(v25 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      uint64_t result = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(*((uint64_t (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **))*result
    }
                                                                                     + 1))(result);
  }
  while (v16 == 2);
  if (v16)
  {
    if ((v10 & 1) == 0) {
      return sub_216ABB798(a5);
    }
  }
  else if ((v22 & 1) == 0)
  {
    return (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)tbb::queuing_rw_mutex::scoped_lock::release((uint64_t)a3);
  }
  return result;
}

void sub_216AA8074(_Unwind_Exception *a1)
{
  sub_216ABB798(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpenRelativeToLayer(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  char v8 = sub_21697CF14(a1);
  if (!(v9 & 1 | (unint64_t)v8))
  {
    __p[0] = "sdf/layer.cpp";
    __p[1] = "FindOrOpenRelativeToLayer";
    uint64_t v12 = 868;
    char v13 = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpenRelativeToLayer(const SdfLayerHand"
          "le &, const string &, const FileFormatArguments &)";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Anchor layer is invalid");
LABEL_8:
    *a4 = 0;
    return;
  }
  uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  if (!v10) {
    goto LABEL_8;
  }
  pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer(a1, a2, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen((uint64_t)__p, a3, a4);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216AA81C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::OpenAsAnonymous@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__ *a2@<X1>, uint64_t a3@<X2>, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a4@<X8>)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  v34[0] = 0;
  v34[1] = 0;
  v35[0] = 0;
  v35[1] = 0;
  v34[2] = (uint64_t)v35;
  char v36 = 0;
  uint64_t v45 = 0;
  long long v37 = 0u;
  memset(v38, 0, sizeof(v38));
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  v28[1] = 0;
  *(void *)&long long v29 = 0;
  v28[0] = &v28[1];
  char v7 = pxrInternal__aapl__pxrReserved__::SdfLayer::_ComputeInfoToFindOrOpenLayer(a1, (uint64_t)v28, (uint64_t)v34);
  sub_2167877AC((uint64_t)v28, (void *)v28[1]);
  if ((v7 & 1) == 0)
  {
LABEL_18:
    *a4 = 0;
    return sub_216ABA410((uint64_t)v34);
  }
  char v8 = sub_216AA0AEC(v34);
  if (!(v9 & 1 | (unint64_t)v8))
  {
    v28[0] = "sdf/layer.cpp";
    v28[1] = "OpenAsAnonymous";
    *(void *)&long long v29 = 903;
    *((void *)&v29 + 1) = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::OpenAsAnonymous(const std:"
                            ":string &, BOOL, const std::string &)";
    LOBYTE(v30) = 0;
    uint64_t v15 = (const char *)&v39;
    if (SBYTE7(v40) < 0) {
      uint64_t v15 = (const char *)v39;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot determine file format for @%s@", v15);
    goto LABEL_18;
  }
  long long v27 = 0;
  sub_216AA5724();
  v25[0] = 0;
  __int16 v26 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v25, &qword_267B8EE00, 1);
  pxrInternal__aapl__pxrReserved__::Sdf_GetAnonLayerIdentifierTemplate(a3, &v23);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v33 = 0;
  long long __p = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  *(_OWORD *)long long v28 = 0u;
  v19[0] = 0;
  v19[1] = 0;
  char v18 = v19;
  uint64_t v10 = sub_216979288(v34);
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::NewLayer(v10, (uint64_t *)&v24);
  int v11 = v27;
  long long v27 = v24;
  uint64_t v24 = 0;
  sub_2168BD378((int)&v27, v11);
  sub_216ABB798(&v24);
  sub_2167877AC((uint64_t)&v18, v19[0]);
  sub_2168EE084((uint64_t)&v32 + 8);
  if (SBYTE7(v32) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(*((void **)&v29 + 1));
  }
  if (SBYTE7(v29) < 0) {
    operator delete(v28[0]);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(v20);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)v25);
  uint64_t v12 = sub_216AA5ECC((uint64_t *)&v27);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::_Read(v12, (uint64_t)&v39, (std::string *)&v38[1], a2))
  {
    char v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v27);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_MarkCurrentStateAsClean(v13);
    uint64_t v14 = sub_216AA5ECC((uint64_t *)&v27);
    *(_WORD *)(v14 + 465) = 257;
    atomic_store(1u, (unsigned __int8 *)(v14 + 464));
    *a4 = v27;
    long long v27 = 0;
  }
  else
  {
    uint64_t v16 = sub_216AA5ECC((uint64_t *)&v27);
    *(_WORD *)(v16 + 465) = 256;
    atomic_store(1u, (unsigned __int8 *)(v16 + 464));
    *a4 = 0;
  }
  sub_216ABB798(&v27);
  return sub_216ABA410((uint64_t)v34);
}

void sub_216AA84F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_Read(uint64_t a1, uint64_t a2, std::string *a3, pxrInternal__aapl__pxrReserved__ *a4)
{
  unsigned __int8 v8 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v8)
  {
    char v9 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("SdfLayer::_Read", 0, (char *)a3);
    BOOL v10 = v9 != 0;
  }
  else
  {
    char v9 = 0;
    BOOL v10 = 0;
  }
  uint64_t v51 = v9;
  int v52 = v10;
  memset(&v50, 0, sizeof(v50));
  if (pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(a2))
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v49 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier((const std::string *)a2, (uint64_t)&v50, (uint64_t)__p);
    if (SHIBYTE(v49) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    std::string::operator=(&v50, a3);
  }
  char v13 = &v50;
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    char v13 = (std::string *)v50.__r_.__value_.__r.__words[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Loading layer '%s'", v11, v12, v13);
  long long v40 = "sdf/layer.cpp";
  long long v41 = "_Read";
  uint64_t v42 = 1119;
  long long v43 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_Read(const string &, const ArResolvedPath &, BOOL)";
  char v44 = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(__p, &v45, &v40);
  if (v47 < 0) {
    operator delete(v45);
  }
  if (sub_216977CF0(3))
  {
    int v14 = *(char *)(a2 + 23);
    uint64_t v15 = *(const char **)a2;
    uint64_t v16 = a4;
    int v17 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
    char v18 = (std::string *)a3->__r_.__value_.__r.__words[0];
    char v19 = v16;
    pxrInternal__aapl__pxrReserved__::TfStringify(v16, &v40);
    uint64_t v22 = (uint64_t)(v17 >= 0 ? a3 : v18);
    uint64_t v23 = v14 >= 0 ? a2 : (uint64_t)v15;
    uint64_t v24 = v42 >= 0 ? &v40 : (void **)v40;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"SdfLayer::_Read('%s', '%s', metadataOnly=%s)\n", v20, v21, v23, v22, v24);
    a4 = v19;
    if (SHIBYTE(v42) < 0) {
      operator delete(v40);
    }
  }
  uint64_t v25 = *(void *)(a1 + 48);
  uint64_t v45 = *(void **)(a1 + 40);
  uint64_t v46 = v25;
  if (v25) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 + 8), 1u, memory_order_relaxed);
  }
  __int16 v26 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_216979288((uint64_t *)&v45);
  if (pxrInternal__aapl__pxrReserved__::SdfFileFormat::SupportsReading(v26))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsIncludedByDetachedLayerRules((const std::string *)a2))
    {
      uint64_t v27 = sub_216979288((uint64_t *)&v45);
      uint64_t Detached = pxrInternal__aapl__pxrReserved__::SdfFileFormat::ReadDetached(v27, (pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, (unsigned __int8 *)&v50);
    }
    else
    {
      uint64_t v33 = sub_216979288((uint64_t *)&v45);
      uint64_t Detached = (*(uint64_t (**)(uint64_t, uint64_t, std::string *, pxrInternal__aapl__pxrReserved__ *))(*(void *)v33 + 56))(v33, a1, &v50, a4);
    }
    uint64_t v34 = Detached;
  }
  else
  {
    long long v40 = "sdf/layer.cpp";
    long long v41 = "_Read";
    uint64_t v42 = 1130;
    long long v43 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_Read(const string &, const ArResolvedPath &, BOOL)";
    char v44 = 0;
    if (*(char *)(a2 + 23) >= 0) {
      long long v29 = (const char *)a2;
    }
    else {
      long long v29 = *(const char **)a2;
    }
    long long v30 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_216979288((uint64_t *)&v45);
    unint64_t v31 = *(void *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v30) & 0xFFFFFFFFFFFFFFF8;
    if (v31)
    {
      long long v32 = (const char *)(v31 + 16);
      if (*(char *)(v31 + 39) < 0) {
        long long v32 = *(const char **)v32;
      }
    }
    else
    {
      long long v32 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot read layer @%s@: %s file format does notsupport reading", v29, v32);
    uint64_t v34 = 0;
  }
  uint64_t v35 = v46;
  if (v46 && atomic_fetch_add_explicit((atomic_uint *volatile)(v46 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)__p);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  int v36 = v52--;
  if (v36)
  {
    uint64_t v37 = (uint64_t)v51;
    int v38 = v36 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v37);
      int v52 = v38--;
    }
    while (v38 != -2);
  }
  return v34;
}

void sub_216AA88F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)&a27);
  if (*(char *)(v32 - 105) < 0) {
    operator delete(*(void **)(v32 - 128));
  }
  sub_21684E6B8(v32 - 104);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetSchema(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return *((void *)this + 10);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_Reload(pxrInternal__aapl__pxrReserved__::SdfLayer *this, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  char v4 = (long long *)*((void *)this + 59);
  if (*((char *)v4 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    uint64_t v30 = *((void *)v4 + 2);
    *(_OWORD *)std::string __dst = v5;
  }
  uint64_t v6 = (void *)HIBYTE(v30);
  if (v30 < 0) {
    uint64_t v6 = __dst[1];
  }
  if (!v6)
  {
    v31.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/layer.cpp";
    v31.__r_.__value_.__l.__size_ = (std::string::size_type)"_Reload";
    v31.__r_.__value_.__r.__words[2] = 944;
    uint64_t v32 = "SdfLayer::_ReloadResult pxrInternal__aapl__pxrReserved__::SdfLayer::_Reload(BOOL)";
    char v33 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't reload a layer with no identifier");
    a2 = 0;
    goto LABEL_67;
  }
  IsAnonLayeruint64_t Identifier = pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(*((void *)this + 59));
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v28);
  if (IsAnonLayerIdentifier)
  {
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_216979288((uint64_t *)this + 5);
    if (pxrInternal__aapl__pxrReserved__::SdfFileFormat::ShouldSkipAnonymousReload(v8)) {
      goto LABEL_12;
    }
  }
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this) & 1) == 0)
  {
    if (!IsAnonLayerIdentifier)
    {
      uint64_t v13 = *((void *)this + 59);
      if (*(char *)(v13 + 47) < 0)
      {
        sub_216778F24(v26, *(void **)(v13 + 24), *(void *)(v13 + 32));
      }
      else
      {
        *(_OWORD *)__int16 v26 = *(_OWORD *)(v13 + 24);
        uint64_t v27 = *(void *)(v13 + 40);
      }
      pxrInternal__aapl__pxrReserved__::SdfLayer::UpdateAssetInfo(this);
      uint64_t v16 = *((void *)this + 59);
      if (*(char *)(v16 + 47) < 0) {
        sub_216778F24(&__p, *(void **)(v16 + 24), *(void *)(v16 + 32));
      }
      else {
        std::string __p = *(std::string *)(v16 + 24);
      }
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        if (*((void *)this + 61))
        {
          pxrInternal__aapl__pxrReserved__::Sdf_ComputeLayerModificationTimestamp(this, &v31);
          pxrInternal__aapl__pxrReserved__::Sdf_ComputeExternalAssetModificationTimestamps(this, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v24);
          if ((a2 & 1) == 0
            && (pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(this) & 1) == 0
            && sub_21691B1C8((unsigned __int8 *)&__p, (unsigned __int8 *)v26)
            && sub_216AA9EA8((pxrInternal__aapl__pxrReserved__::VtValue *)&v31, (pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)this + 480))&& (sub_216AA9F48((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v24, (uint64_t *)this + 62) & 1) != 0)
          {
            int v18 = 1;
            a2 = 2;
          }
          else if (pxrInternal__aapl__pxrReserved__::SdfLayer::_Read((uint64_t)this, *((void *)this + 59), &__p, 0))
          {
            sub_21697DC0C((void *)this + 60, &v31);
            char v19 = v24;
            uint64_t v24 = 0;
            sub_2168EBBB8((void ***)this + 62, v19);
            if (sub_216AAA048((unsigned __int8 *)&__p, (unsigned __int8 *)v26))
            {
              uint64_t v20 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
              if (!v20) {
                pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance();
              }
              pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeLayerResolvedPath(v20, (uint64_t *)this + 3);
            }
            int v18 = 0;
          }
          else
          {
            a2 = 0;
            int v18 = 1;
          }
          sub_2168EBBB8(&v24, 0);
          sub_2168EE084((uint64_t)&v31);
        }
        else
        {
          int v18 = 1;
          a2 = 2;
        }
      }
      else
      {
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/layer.cpp";
        v31.__r_.__value_.__l.__size_ = (std::string::size_type)"_Reload";
        v31.__r_.__value_.__r.__words[2] = 998;
        uint64_t v32 = "SdfLayer::_ReloadResult pxrInternal__aapl__pxrReserved__::SdfLayer::_Reload(BOOL)";
        char v33 = 0;
        uint64_t v21 = __dst;
        if (v30 < 0) {
          uint64_t v21 = (void **)__dst[0];
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 3, (pxrInternal__aapl__pxrReserved__ *)"Cannot determine resolved path for '%s', skipping reload.", (const char *)v21);
        a2 = 0;
        int v18 = 1;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v27) < 0) {
        operator delete(v26[0]);
      }
      if (v18) {
        goto LABEL_66;
      }
      goto LABEL_63;
    }
    BOOL v10 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_216979288((uint64_t *)this + 5);
    if (pxrInternal__aapl__pxrReserved__::SdfFileFormat::ShouldReadAnonymousLayers(v10))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_ComputeExternalAssetModificationTimestamps(this, (pxrInternal__aapl__pxrReserved__::VtDictionary *)v26);
      if ((a2 & 1) == 0
        && (pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(this) & 1) == 0
        && (pxrInternal__aapl__pxrReserved__::operator==((void **)v26, (uint64_t *)this + 62, v11) & 1) != 0)
      {
        a2 = 2;
LABEL_55:
        sub_2168EBBB8((void ***)v26, 0);
        goto LABEL_66;
      }
      memset(&v31, 0, sizeof(v31));
      char v14 = pxrInternal__aapl__pxrReserved__::SdfLayer::_Read((uint64_t)this, (uint64_t)__dst, &v31, 0);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if ((v14 & 1) == 0)
      {
        a2 = 0;
        goto LABEL_55;
      }
      uint64_t v15 = (void **)v26[0];
      v26[0] = 0;
      sub_2168EBBB8((void ***)this + 62, v15);
      sub_2168EBBB8((void ***)v26, 0);
LABEL_63:
      pxrInternal__aapl__pxrReserved__::SdfLayer::_MarkCurrentStateAsClean(this);
      uint64_t v22 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
      if (!v22) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance();
      }
      pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidReloadLayerContent(v22, (uint64_t *)this + 3);
      a2 = 1;
      goto LABEL_66;
    }
  }
  sub_216AA4E08((uint64_t *)this + 5, *((const std::string **)this + 59), (char **)v26);
  uint64_t v9 = sub_216A5B7B0((uint64_t *)this + 14);
  if (((*(uint64_t (**)(uint64_t, void **))(*(void *)v9 + 48))(v9, v26) & 1) == 0)
  {
    sub_216AA12F0((uint64_t *)&v31, (uint64_t *)v26);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_SetData((uint64_t)this, (uint64_t *)&v31, 0);
    std::string::size_type v12 = v31.__r_.__value_.__l.__size_;
    if (v31.__r_.__value_.__l.__size_
      && atomic_fetch_add_explicit((atomic_uint *volatile)(v31.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(std::string::size_type))(*(void *)v12 + 8))(v12);
    }
    sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v26);
    goto LABEL_63;
  }
  sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v26);
LABEL_12:
  a2 = 2;
LABEL_66:
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v28);
LABEL_67:
  if (SHIBYTE(v30) < 0) {
    operator delete(__dst[0]);
  }
  return a2;
}

void sub_216AA8EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a24);
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateData@<X0>(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, char **a2@<X8>)
{
  return sub_216AA4E08((uint64_t *)this + 5, *((const std::string **)this + 59), a2);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::_SetData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v94[2] = *MEMORY[0x263EF8340];
  v87 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)"sdf/layer.cpp";
  uint64_t v88 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)"_SetData";
  uint64_t v89 = 3900;
  uint64_t v90 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_SetData(const SdfAbstractDataPtr &, const SdfSchemaBase *)";
  LOBYTE(v91) = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v77, "Setting layer data", &v87);
  uint64_t v6 = sub_216AB5E00(a2);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 40))(v6))
  {
    v87 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)"sdf/layer.cpp";
    uint64_t v88 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)"_SetData";
    uint64_t v89 = 3903;
    uint64_t v90 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_SetData(const SdfAbstractDataPtr &, const SdfSchemaBase *)";
    LOBYTE(v91) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v87, "!newData->IsEmpty()", 0);
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v76);
  if (a3 && *(void *)(a1 + 80) != a3)
  {
    uint64_t v74 = a3;
    int v7 = 1;
LABEL_13:
    v87 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&unk_26C758B40;
    BOOL v10 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)a2[1];
    if (v10)
    {
      if (*(unsigned char *)(sub_216850B68(a2 + 1) + 14)) {
        BOOL v10 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a2;
      }
      else {
        BOOL v10 = 0;
      }
    }
    uint64_t v88 = v10;
    sub_2168BD80C((uint64_t *)&v88);
    uint64_t v90 = 0;
    int v91 = 0;
    uint64_t v89 = (uint64_t)&v90;
    int v11 = (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)sub_216A5B7B0((uint64_t *)(a1 + 112));
    pxrInternal__aapl__pxrReserved__::SdfAbstractData::VisitSpecs(v11, (pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)&v87);
    uint64_t v78 = (void **)&v90;
    uint64_t v79 = (const char *)&v90;
    std::string::size_type v80 = v89;
    v81 = (char *)v89;
    while (v79 != v81)
    {
      char v14 = sub_216AB5EA8((uint64_t)&v78, v12, v13);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_ListFields(*(pxrInternal__aapl__pxrReserved__::SdfLayer **)(a1 + 80), *(const pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)(a1 + 112), (const pxrInternal__aapl__pxrReserved__::SdfAbstractData *)v14, (uint64_t)&v93);
      uint64_t v15 = sub_216A5B7B0((uint64_t *)(a1 + 112));
      uint64_t v18 = *(void *)(a1 + 80)
          + 72 * (*(unsigned int (**)(uint64_t, char *))(*(void *)v15 + 96))(v15, v14);
      if (*(unsigned char *)(v18 + 120)) {
        char v19 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)(v18 + 56);
      }
      else {
        char v19 = 0;
      }
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v93;
      while (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
      {
        uint64_t v20 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_2169CEBC8((uint64_t *)&__p, v16, v17);
        if ((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsRequiredField(v19, v20) & 1) == 0)
        {
          sub_2169CEBC8((uint64_t *)&__p, v21, v22);
          uint64_t v84 = 0;
          pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::VtValue>();
        }
        sub_2169CECC4(&__p);
      }
      uint64_t v23 = sub_216AB5EA8((uint64_t)&v78, v16, v17);
      __int16 v26 = sub_216AB5EA8((uint64_t)&v78, v24, v25);
      BOOL IsInertSubtree = pxrInternal__aapl__pxrReserved__::SdfLayer::_IsInertSubtree((pxrInternal__aapl__pxrReserved__::SdfLayer **)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v26);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimDeleteSpec((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v23, IsInertSubtree, 1);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
      sub_216889A04((void ***)&__p);
      sub_216AB6724((uint64_t)&v78);
    }
    v87 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&unk_26C758B40;
    sub_216981EE8((uint64_t)&v89, v90);
    sub_216AA10A8(&v88);
    pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor((pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)&v87);
    long long v28 = *(const char **)(a1 + 112);
    uint64_t v78 = (void **)&unk_26C758B88;
    uint64_t v79 = v28;
    v81 = 0;
    v82 = 0;
    std::string::size_type v80 = (std::string::size_type)&v81;
    long long v29 = (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)sub_216AB5E00(a2);
    pxrInternal__aapl__pxrReserved__::SdfAbstractData::VisitSpecs(v29, (pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)&v78);
    for (uint64_t i = 0; i != 96; i += 8)
    {
      std::string v31 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)&v87 + i));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v31 + 1);
    }
    __p.__r_.__value_.__r.__words[0] = v80;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v81;
    while (1)
    {
      if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
      {
        if (v7)
        {
          long long v93 = 0uLL;
          v94[0] = 0;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
          sub_216782F20((void ***)&__p);
        }
        uint64_t v51 = 96;
        uint64_t v52 = v74;
        do
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v85[v51]);
          v51 -= 8;
          sub_21697C414((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)&v87 + v51));
        }
        while (v51);
        uint64_t v78 = (void **)&unk_26C758B88;
        sub_216981EE8((uint64_t)&v80, v81);
        pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor((pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)&v78);
        if (!v74) {
          uint64_t v52 = *(void *)(a1 + 80);
        }
        v87 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&unk_26C758BD0;
        uint64_t v88 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)a1;
        int v91 = 0;
        unint64_t v92 = 0;
        uint64_t v89 = v52;
        uint64_t v90 = (char *)&v91;
        int v53 = (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)sub_216AB5E00(a2);
        pxrInternal__aapl__pxrReserved__::SdfAbstractData::VisitSpecs(v53, (pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)&v87);
        if (v92)
        {
          long long v93 = 0uLL;
          v94[0] = 0;
          sub_21680BC90((uint64_t *)&v93, v92);
          uint64_t v54 = v90;
          if (v90 != (char *)&v91)
          {
            do
            {
              unint64_t v55 = *((void *)v54 + 4) & 0xFFFFFFFFFFFFFFF8;
              if (v55)
              {
                __int16 v56 = (const char *)(v55 + 16);
                if (*(char *)(v55 + 39) < 0) {
                  __int16 v56 = *(const char **)v56;
                }
              }
              else
              {
                __int16 v56 = "";
              }
              pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v54 + 40), (uint64_t)&v83);
              if (v86 >= 0) {
                int v59 = &v83;
              }
              else {
                int v59 = v83;
              }
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' first seen at <%s>", v57, v58, v56, v59);
              unint64_t v60 = (_OWORD *)*((void *)&v93 + 1);
              if (*((void *)&v93 + 1) >= v94[0])
              {
                unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v93 + 1) - v93) >> 3);
                unint64_t v63 = v62 + 1;
                if (v62 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  sub_21677CB10();
                }
                if (0x5555555555555556 * ((uint64_t)(v94[0] - v93) >> 3) > v63) {
                  unint64_t v63 = 0x5555555555555556 * ((uint64_t)(v94[0] - v93) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94[0] - v93) >> 3) >= 0x555555555555555) {
                  unint64_t v64 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v64 = v63;
                }
                v82 = v94;
                if (v64) {
                  int v65 = (void **)sub_216782ED8((uint64_t)v94, v64);
                }
                else {
                  int v65 = 0;
                }
                long long v66 = &v65[3 * v62];
                uint64_t v78 = v65;
                uint64_t v79 = (const char *)v66;
                v81 = (char *)&v65[3 * v64];
                long long v67 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                v66[2] = (void *)__p.__r_.__value_.__r.__words[2];
                *(_OWORD *)long long v66 = v67;
                memset(&__p, 0, sizeof(__p));
                std::string::size_type v80 = (std::string::size_type)(v66 + 3);
                sub_216790CCC((uint64_t *)&v93, &v78);
                uint64_t v68 = *((void *)&v93 + 1);
                sub_216790E64((uint64_t)&v78);
                *((void *)&v93 + 1) = v68;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                long long v61 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                *(void *)(*((void *)&v93 + 1) + 16) = *((void *)&__p.__r_.__value_.__l + 2);
                *unint64_t v60 = v61;
                memset(&__p, 0, sizeof(__p));
                *((void *)&v93 + 1) = (char *)v60 + 24;
              }
              if (v86 < 0) {
                operator delete(v83);
              }
              uint64_t v69 = (char *)*((void *)v54 + 1);
              if (v69)
              {
                do
                {
                  long long v70 = v69;
                  uint64_t v69 = *(char **)v69;
                }
                while (v69);
              }
              else
              {
                do
                {
                  long long v70 = (char *)*((void *)v54 + 2);
                  BOOL v71 = *(void *)v70 == (void)v54;
                  uint64_t v54 = v70;
                }
                while (!v71);
              }
              uint64_t v54 = v70;
            }
            while (v70 != (char *)&v91);
          }
          uint64_t v78 = (void **)"sdf/layer.cpp";
          uint64_t v79 = "_SetData";
          std::string::size_type v80 = 4158;
          v81 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_SetData(const SdfAbstractDataPtr &, const SdfSchemaBase *)";
          LOBYTE(v82) = 0;
          v83 = &unk_26C759010;
          LODWORD(v84) = 0;
          long long v72 = *(const char **)(a1 + 472);
          if (v72[23] < 0) {
            long long v72 = *(const char **)v72;
          }
          pxrInternal__aapl__pxrReserved__::TfStringJoin("; ", (std::string **)&v93, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v78, (uint64_t *)&v83, (pxrInternal__aapl__pxrReserved__ *)"Omitted unrecognized fields setting data on @%s@: %s", v72, (const char *)p_p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t v78 = (void **)&v93;
          sub_216782F20(&v78);
        }
        v87 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&unk_26C758BD0;
        sub_216ABB40C((uint64_t)&v90, v91);
        pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor((pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)&v87);
        goto LABEL_115;
      }
      uint64_t v34 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216AB6830(&__p, v32, v33);
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v34))
      {
        uint64_t v35 = sub_216AB5E00(a2);
        int v36 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v36) {
          int v36 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        LODWORD(v83) = 1;
        (*(void (**)(long long *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(void *)v35 + 136))(&v93, v35, v34, (uint64_t)v36 + 312);
        if (sub_216A94450((pxrInternal__aapl__pxrReserved__::VtValue *)&v93))
        {
          if ((BYTE8(v93) & 4) != 0) {
            uint64_t v37 = (void **)(*(uint64_t (**)(long long *))((*((void *)&v93 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v93);
          }
          else {
            uint64_t v37 = (void **)&v93;
          }
        }
        else
        {
          uint64_t v37 = &v83;
        }
        int v41 = *(_DWORD *)v37;
        sub_2168EE084((uint64_t)&v93);
        if (v41 != 1)
        {
LABEL_55:
          BOOL v46 = 0;
          goto LABEL_61;
        }
        uint64_t v42 = sub_216AB5E00(a2);
        long long v43 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v43) {
          long long v43 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        (*(void (**)(long long *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(void *)v42 + 136))(&v93, v42, v34, (uint64_t)v43 + 448);
        if (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)&v93))
        {
          if ((BYTE8(v93) & 4) != 0) {
            char v44 = (uint64_t *)(*(uint64_t (**)(long long *))((*((void *)&v93 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v93);
          }
          else {
            char v44 = (uint64_t *)&v93;
          }
          uint64_t v45 = *v44;
          if ((*v44 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v45 &= 0xFFFFFFFFFFFFFFF8;
          }
        }
        else
        {
          uint64_t v45 = 0;
        }
        sub_2168EE084((uint64_t)&v93);
        BOOL v46 = v45 == 0;
        if ((v45 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(v34)) {
          goto LABEL_55;
        }
        uint64_t v38 = sub_216AB5E00(a2);
        long long v39 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v39) {
          long long v39 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        LOBYTE(v83) = 0;
        (*(void (**)(long long *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(void *)v38 + 136))(&v93, v38, v34, (uint64_t)v39 + 64);
        if (sub_216959490((pxrInternal__aapl__pxrReserved__::VtValue *)&v93))
        {
          if ((BYTE8(v93) & 4) != 0) {
            long long v40 = (void **)(*(uint64_t (**)(long long *))((*((void *)&v93 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v93);
          }
          else {
            long long v40 = (void **)&v93;
          }
        }
        else
        {
          long long v40 = &v83;
        }
        BOOL v46 = *(unsigned char *)v40 == 0;
        sub_2168EE084((uint64_t)&v93);
      }
LABEL_61:
      uint64_t v47 = sub_216AB5E00(a2);
      uint64_t v48 = (*(uint64_t (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)v47 + 96))(v47, v34);
      if (v7 && !*(unsigned char *)(*(void *)(a1 + 80) + 72 * v48 + 120))
      {
        uint64_t v49 = v48;
        std::string v50 = (int *)(&v87 + v48);
        if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v50))
        {
          sub_2169C487C(v50, v34);
          sub_2169C48D4((int *)&v87 + 2 * v49 + 1, (_DWORD *)v34 + 1);
        }
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimCreateSpec((uint64_t *)a1, v34, v48, v46, 1);
      }
      sub_216AB69E4(&__p);
    }
  }
  uint64_t v8 = sub_216A5B7B0((uint64_t *)(a1 + 112));
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v8 + 24))(v8))
  {
    uint64_t v74 = a3;
    int v7 = 0;
    goto LABEL_13;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)a2[1];
  if (v9)
  {
    if (*(unsigned char *)(sub_216850B68(a2 + 1) + 14)) {
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a2;
    }
    else {
      uint64_t v9 = 0;
    }
  }
  v87 = v9;
  sub_2168BD80C((uint64_t *)&v87);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_AdoptData(a1, (uint64_t *)&v87);
  sub_216AA10A8(&v87);
LABEL_115:
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v76);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v77);
}

void sub_216AA9A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v1 = (uint64_t *)((char *)this + 120);
  if (*((void *)this + 15)
    || (v5[0] = "sdf/layer.cpp",
        v5[1] = "IsDirty",
        v5[2] = 2981,
        v5[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty() const",
        char v6 = 0,
        int v4 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "_stateDelegate", 0),
        uint64_t result = 0,
        v4))
  {
    unsigned __int8 v2 = (pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *)sub_216AA2D04(v1);
    return pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::IsDirty(v2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetResolvedPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return *((void *)this + 59) + 24;
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfLayer::UpdateAssetInfo(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (sub_216977CF0(3))
  {
    int v4 = (uint64_t *)*((void *)this + 59);
    if (*((char *)v4 + 23) < 0) {
      int v4 = (uint64_t *)*v4;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"SdfLayer::UpdateAssetInfo('%s')\n", v2, v3, v4);
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v16);
  uint64_t v5 = *((void *)this + 59);
  if (*(char *)(v5 + 119) < 0)
  {
    if (*(void *)(v5 + 104)) {
      goto LABEL_7;
    }
  }
  else if (*(unsigned char *)(v5 + 119))
  {
LABEL_7:
    char v6 = (pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)operator new(0x30uLL);
    pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder(v6, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(v5 + 48));
    goto LABEL_10;
  }
  char v6 = 0;
LABEL_10:
  sub_216AA5724();
  v14[0] = 0;
  __int16 v15 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v14, &qword_267B8EE00, 1);
  uint64_t v7 = *((void *)this + 59);
  v12[0] = 0;
  v12[1] = 0;
  uint64_t v13 = 0;
  v10[0] = 0;
  v10[1] = 0;
  uint64_t v11 = 0;
  uint64_t v22 = 0;
  long long __p = 0u;
  long long v21 = 0u;
  *(_OWORD *)uint64_t v18 = 0u;
  long long v19 = 0u;
  *(_OWORD *)int v17 = 0u;
  pxrInternal__aapl__pxrReserved__::SdfLayer::_InitializeFromIdentifier((uint64_t)this, v7, v12, (uint64_t *)v10, (long long *)v17);
  sub_2168EE084((uint64_t)&v21 + 8);
  if (SBYTE7(v21) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[1]);
  }
  if (SHIBYTE(v18[0]) < 0) {
    operator delete(v17[0]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[0]);
  }
  sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)v14);
  if (v6)
  {
    pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder(v6);
    operator delete(v8);
  }
  return sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v16);
}

void sub_216AA9E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  operator delete(v30);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_216AA9EA8(pxrInternal__aapl__pxrReserved__::VtValue *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = (uint64_t)a1;
  uint64_t result = sub_216ABA4E8(a1);
  if (result)
  {
    uint64_t result = sub_216ABA4E8(a2);
    if (result)
    {
      uint64_t v5 = *(void *)(v3 + 8);
      if ((v5 & 4) != 0) {
        uint64_t v3 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v3);
      }
      uint64_t v6 = *((void *)a2 + 1);
      if ((v6 & 4) != 0) {
        a2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
      }
      return *(double *)v3 == *(double *)a2;
    }
  }
  return result;
}

uint64_t sub_216AA9F48(pxrInternal__aapl__pxrReserved__::VtDictionary *a1, uint64_t *a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::VtDictionary::size(a1);
  if (v4 == pxrInternal__aapl__pxrReserved__::VtDictionary::size((pxrInternal__aapl__pxrReserved__::VtDictionary *)a2))
  {
    uint64_t v5 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(a1);
    uint64_t v7 = v6;
    uint64_t v25 = v5;
    uint64_t v26 = v6;
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(a1);
    if (v9) {
      BOOL v10 = v5 == v8;
    }
    else {
      BOOL v10 = 1;
    }
    BOOL v11 = v10 && v7 == v9;
    char v12 = v11;
    if (!v11)
    {
      uint64_t v13 = v8;
      uint64_t v14 = v9;
      do
      {
        uint64_t v15 = pxrInternal__aapl__pxrReserved__::VtDictionary::find(a2, (const void **)(v5 + 32));
        uint64_t v17 = v16;
        uint64_t v18 = pxrInternal__aapl__pxrReserved__::VtDictionary::end((pxrInternal__aapl__pxrReserved__::VtDictionary *)a2);
        if (v17 == v19 && (!v17 || v15 == v18)) {
          break;
        }
        if (!sub_216AA9EA8((pxrInternal__aapl__pxrReserved__::VtValue *)(v5 + 56), (pxrInternal__aapl__pxrReserved__::VtValue *)(v15 + 56)))break; {
        sub_2168EF104(&v25, v20, v21);
        }
        uint64_t v5 = v25;
        BOOL v22 = !v14 || v25 == v13;
        BOOL v23 = v22 && v26 == v14;
        char v12 = v23;
      }
      while (!v23);
    }
  }
  else
  {
    char v12 = 0;
  }
  return v12 & 1;
}

BOOL sub_216AAA048(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 1;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) != 0;
  }
  if (a1[23])
  {
    uint64_t v6 = v2 - 1;
    do
    {
      int v8 = *a1++;
      int v7 = v8;
      int v9 = *a2++;
      BOOL v10 = v7 == v9;
      uint64_t v2 = v7 != v9;
      BOOL v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::Reload(pxrInternal__aapl__pxrReserved__::SdfLayer *this, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfLayer::_Reload(this, a2) == 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ReloadLayers(uint64_t a1, const char *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Reloading %zu layer(s)", a2, a3, *(void *)(a1 + 16));
  long long v21 = "sdf/layer.cpp";
  BOOL v22 = "ReloadLayers";
  uint64_t v23 = 1062;
  uint64_t v24 = "static BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::ReloadLayers(const set<SdfLayerHandle> &, BOOL)";
  char v25 = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v29, &__p, &v21);
  if (v28 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
  long long __p = *(void **)a1;
  uint64_t v27 = (void *)(a1 + 8);
  char v7 = 1;
  while (__p != v27)
  {
    int v8 = (void *)sub_216AAA29C(&__p, v5, v6);
    int v9 = sub_21697CF14(v8);
    if (v10 & 1 | (unint64_t)v9)
    {
      char v12 = (uint64_t *)sub_216AAA29C(&__p, v10, v11);
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v12);
      if (!pxrInternal__aapl__pxrReserved__::SdfLayer::_Reload(v13, (uint64_t)a2))
      {
        long long v21 = "sdf/layer.cpp";
        BOOL v22 = "ReloadLayers";
        uint64_t v23 = 1072;
        uint64_t v24 = "static BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::ReloadLayers(const set<SdfLayerHandle> &, BOOL)";
        char v25 = 0;
        uint64_t v16 = (uint64_t *)sub_216AAA29C(&__p, v14, v15);
        uint64_t v18 = *(uint64_t **)(sub_2169791E0(v16) + 472);
        if (*((char *)v18 + 23) < 0) {
          uint64_t v18 = (uint64_t *)*v18;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v21, (pxrInternal__aapl__pxrReserved__ *)"Unable to re-read @%s@", v17, v18);
        char v7 = 0;
      }
    }
    sub_216AAA31C(&__p);
  }
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v29);
  return v7 & 1;
}

void sub_216AAA25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
}

uint64_t sub_216AAA29C(void *a1, uint64_t a2, char *a3)
{
  if (*a1 == a1[1])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator*";
    v4[2] = 271;
    void v4[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::set<pxrInternal__aapl__pxrReserved__::TfWe"
            "akPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::operator*() [T = const std::set<pxrInternal__aapl__pxrR"
            "eserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse = false]";
    char v5 = 0;
    int v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return *a1 + 32;
}

void sub_216AAA314()
{
}

void *sub_216AAA31C(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    void v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::set<pxrInternal__aapl__pxrRe"
            "served__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::operator++() [T = const std::set<pxrInter"
            "nal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        uint64_t v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        uint64_t v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::Import(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_ResolvePath(a2);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    uint64_t v5 = 0;
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
      return v5;
    }
    goto LABEL_5;
  }
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::SdfLayer::_Read(a1, (uint64_t)a2, &__p, 0);
  if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_5:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

void sub_216AAA450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ImportFromString(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)sub_216979288((uint64_t *)(a1 + 40)) + 72);

  return v1();
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::IsIncludedByDetachedLayerRules(const std::string *a1)
{
  uint64_t v2 = (uint64_t *)atomic_load((unint64_t *)&qword_267B8EDF0);
  if (!v2) {
    uint64_t v2 = (uint64_t *)sub_216ABCF04();
  }

  return pxrInternal__aapl__pxrReserved__::SdfLayer::DetachedLayerRules::IsIncluded(v2, a1);
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::SdfLayer::Find@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v6[0] = 0;
  __int16 v7 = 0;
  sub_216AAA5A0(a1, a2, (tbb::queuing_rw_mutex::scoped_lock *)v6, 0, (uint64_t *)&v5);
  sub_216ABBA60(a3, (uint64_t *)&v5);
  sub_216ABB798(&v5);
  return sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)v6);
}

void sub_216AAA57C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216AAA5A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, tbb::queuing_rw_mutex::scoped_lock *a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  v11[0] = 0;
  v11[1] = 0;
  v12[0] = 0;
  v12[1] = 0;
  v11[2] = v12;
  char v13 = 0;
  uint64_t v17 = 0;
  long long v14 = 0u;
  memset(v15, 0, sizeof(v15));
  memset(v16, 0, sizeof(v16));
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::_ComputeInfoToFindOrOpenLayer(a1, a2, (uint64_t)v11) & 1) == 0) {
    goto LABEL_6;
  }
  sub_216AA5724();
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)a3, &qword_267B8EE00, 0);
  sub_216AA7E98((uint64_t)v16, (void **)v15 + 1, a3, a4, &v10);
  if (!v10)
  {
    sub_216ABB798(&v10);
LABEL_6:
    *a5 = 0;
    return sub_216ABA410((uint64_t)v11);
  }
  char v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v10);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::_WaitForInitializationAndCheckIfSuccessful(v8))
  {
    *a5 = (uint64_t)v10;
    sub_2168BD80C(a5);
  }
  else
  {
    *a5 = 0;
  }
  sub_216ABB798(&v10);
  return sub_216ABA410((uint64_t)v11);
}

void sub_216AAA6D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216ABA410((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::FindRelativeToLayer(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  char v8 = sub_21697CF14(a1);
  if (!(v9 & 1 | (unint64_t)v8))
  {
    __p[0] = "sdf/layer.cpp";
    __p[1] = "FindRelativeToLayer";
    uint64_t v12 = 1186;
    char v13 = "static SdfLayerHandle pxrInternal__aapl__pxrReserved__::SdfLayer::FindRelativeToLayer(const SdfLayerHandle &, "
          "const string &, const FileFormatArguments &)";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Anchor layer is invalid");
LABEL_8:
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  if (!v10) {
    goto LABEL_8;
  }
  pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer(a1, a2, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::SdfLayer::Find((uint64_t)__p, a3, a4);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216AAA7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ListAllTimeSamples(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)sub_216A5B7B0((uint64_t *)this + 14) + 240);

  return v1();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ListTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)sub_216A5B7B0((uint64_t *)this + 14) + 248);

  return v2();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamples(pxrInternal__aapl__pxrReserved__::SdfLayer *this, double a2, double *a3, double *a4)
{
  uint64_t v5 = *(uint64_t (**)(__n128))(*(void *)sub_216A5B7B0((uint64_t *)this + 14) + 256);
  v6.n128_f64[0] = a2;

  return v5(v6);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetNumTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)sub_216A5B7B0((uint64_t *)this + 14) + 264);

  return v2();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, double *a4, double *a5)
{
  __n128 v6 = *(uint64_t (**)(__n128))(*(void *)sub_216A5B7B0((uint64_t *)this + 14) + 272);
  v7.n128_f64[0] = a3;

  return v6(v7);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v5 = *(uint64_t (**)(__n128))(*(void *)sub_216A5B7B0((uint64_t *)this + 14) + 280);
  v6.n128_f64[0] = a3;

  return v5(v6);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(uint64_t a1, double a2)
{
  uint64_t v3 = *(uint64_t (**)(__n128))(*(void *)sub_216A5B7B0((uint64_t *)(a1 + 112)) + 288);
  v4.n128_f64[0] = a2;

  return v3(v4);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  void v25[2] = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 513) && !pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
  {
    if (sub_216A5F85C(a4))
    {
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample<pxrInternal__aapl__pxrReserved__::VtValue>();
    }
    char v9 = sub_216AAADEC((uint64_t)this, a2);
    uint64_t v19 = v9;
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v20);
    if (v20 != v9)
    {
      if (v9 == (char *)pxrInternal__aapl__pxrReserved__::VtValue::GetType(a4, v10, v11)) {
        pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample<pxrInternal__aapl__pxrReserved__::VtValue>();
      }
      Typeid = (const pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::TfType::GetTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&v19);
      pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeid(a4, Typeid, v25);
      if (v25[1]) {
        pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample<pxrInternal__aapl__pxrReserved__::VtValue>();
      }
      uint64_t v20 = "sdf/layer.cpp";
      long long v21 = "SetTimeSample";
      uint64_t v22 = 1318;
      uint64_t v23 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(const SdfPath &, double, const VtValue &)";
      char v24 = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      sub_216928738((uint64_t)a4);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v19);
      p_p = (const char *)&__p;
      if (v18 < 0) {
        p_p = (const char *)__p;
      }
      if (*(char *)(TypeName + 23) >= 0) {
        uint64_t v16 = (const char *)TypeName;
      }
      else {
        uint64_t v16 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't set time sample on <%s> to %s: expected a value of type \"%s\"", Text, p_p, v16);
      if (v18 < 0) {
        operator delete(__p);
      }
      sub_2168EE084((uint64_t)v25);
    }
  }
  else
  {
    uint64_t v20 = "sdf/layer.cpp";
    long long v21 = "SetTimeSample";
    uint64_t v22 = 1291;
    uint64_t v23 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(const SdfPath &, double, const VtValue &)";
    char v24 = 0;
    __n128 v7 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    char v8 = (const char *)*((void *)this + 59);
    if (v8[23] < 0) {
      char v8 = *(const char **)v8;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set time sample on <%s>.  Layer @%s@ is not editable.", v7, v8);
  }
}

void sub_216AAAD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2168EE084(v18 - 72);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  if (*((unsigned char *)this + 513)) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this) ^ 1;
  }
  else {
    return 0;
  }
}

char *sub_216AAADEC(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4 = sub_216A5B7B0((uint64_t *)(a1 + 112));
  int v5 = (*(uint64_t (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)v4 + 96))(v4, a2);
  int v6 = v5;
  if (v5 != 8 && v5 != 1)
  {
    Type = "sdf/layer.cpp";
    uint64_t v18 = "_GetExpectedTimeSampleValueType";
    if (v5)
    {
      uint64_t v19 = 1261;
      uint64_t v20 = "TfType pxrInternal__aapl__pxrReserved__::_GetExpectedTimeSampleValueType(const SdfLayer &, const SdfPath &)";
      char v21 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Type, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set time sample at <%s> because spec is not an attribute or relationship");
    }
    else
    {
      uint64_t v19 = 1254;
      uint64_t v20 = "TfType pxrInternal__aapl__pxrReserved__::_GetExpectedTimeSampleValueType(const SdfLayer &, const SdfPath &)";
      char v21 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Type, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set time sample at <%s> since spec does not exist");
    }
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v22);
    return v22;
  }
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v22);
  uint64_t v16 = 0;
  if (v6 == 8)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EE18, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B8EE18))
    {
      qword_267B8EE10 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755058, v14, v15);
      __cxa_guard_release(&qword_267B8EE18);
    }
    uint64_t v8 = qword_267B8EE10;
  }
  else
  {
    char v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v9) {
      char v9 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v18 = (const char *)&v16;
    uint64_t v19 = (uint64_t)&stru_26C74C2C0;
    LOWORD(v20) = 0;
    Type = (char *)&unk_26C758B08;
    int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((void *)a1, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v9 + 448), (uint64_t (***)(void, uint64_t))&Type);
    if ((_BYTE)v20) {
      int v11 = 0;
    }
    else {
      int v11 = HasField;
    }
    if (v11 != 1) {
      goto LABEL_19;
    }
    Type = (char *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(*(atomic_ullong ****)(a1 + 80), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16);
    uint64_t v8 = *(void *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  }
  uint64_t v22 = (char *)v8;
LABEL_19:
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&Type);
  if (v22 == Type)
  {
    Type = "sdf/layer.cpp";
    uint64_t v18 = "_GetExpectedTimeSampleValueType";
    uint64_t v19 = 1277;
    uint64_t v20 = "TfType pxrInternal__aapl__pxrReserved__::_GetExpectedTimeSampleValueType(const SdfLayer &, const SdfPath &)";
    char v21 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Type, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot determine value type for <%s>", Text);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v22;
}

void sub_216AAB064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(pxrInternal__aapl__pxrReserved__::SdfLayer *this, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 513) && !pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
  {
    uint64_t v8 = *(void *)(a3 + 16);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EE28, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B8EE28))
    {
      qword_267B8EE20 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C757FD0, v17, v18);
      __cxa_guard_release(&qword_267B8EE28);
    }
    unint64_t Typeid = pxrInternal__aapl__pxrReserved__::TfType::GetTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&qword_267B8EE20);
    if (sub_21677EC50(v8, Typeid))
    {
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
    }
    char v21 = sub_216AAADEC((uint64_t)this, a2);
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v22);
    if (v21 != v22)
    {
      uint64_t v10 = *(void *)(a3 + 16);
      unint64_t v11 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&v21);
      if (!strcmp((const char *)(*(void *)(v10 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(v11 + 8) & 0x7FFFFFFFFFFFFFFFLL)))pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(); {
      uint64_t v29 = 0;
      }
      (**(void (***)(uint64_t, unsigned char *))a3)(a3, v28);
      uint64_t v12 = (const pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::TfType::GetTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&v21);
      pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v28, v12, v27);
      if (v27[1]) {
        pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample<pxrInternal__aapl__pxrReserved__::VtValue>();
      }
      uint64_t v22 = "sdf/layer.cpp";
      uint64_t v23 = "SetTimeSample";
      uint64_t v24 = 1374;
      char v25 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(const SdfPath &, double, const SdfAbstractDataConstValue &)";
      char v26 = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      sub_216928738((uint64_t)v28);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v21);
      p_p = (const char *)&__p;
      if (v20 < 0) {
        p_p = (const char *)__p;
      }
      if (*(char *)(TypeName + 23) >= 0) {
        uint64_t v16 = (const char *)TypeName;
      }
      else {
        uint64_t v16 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't set time sample on <%s> to %s: expected a value of type \"%s\"", Text, p_p, v16);
      if (v20 < 0) {
        operator delete(__p);
      }
      sub_2168EE084((uint64_t)v27);
      sub_2168EE084((uint64_t)v28);
    }
  }
  else
  {
    uint64_t v22 = "sdf/layer.cpp";
    uint64_t v23 = "SetTimeSample";
    uint64_t v24 = 1345;
    char v25 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(const SdfPath &, double, const SdfAbstractDataConstValue &)";
    char v26 = 0;
    int v6 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    __n128 v7 = (const char *)*((void *)this + 59);
    if (v7[23] < 0) {
      __n128 v7 = *(const char **)v7;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set time sample on <%s>.  Layer @%s@ is not editable.", v6, v7);
  }
}

void sub_216AAB3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::EraseTimeSample(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 513) && !pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
  {
    uint64_t v8 = sub_216A5B7B0((uint64_t *)this + 14);
    if ((*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)v8 + 72))(v8, a2))
    {
      uint64_t v9 = sub_216A5B7B0((uint64_t *)this + 14);
      if ((*(unsigned int (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, void, double))(*(void *)v9 + 280))(v9, a2, 0, a3))
      {
        uint64_t v12 = 0;
        pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample<pxrInternal__aapl__pxrReserved__::VtValue>();
      }
    }
    else
    {
      unint64_t v11 = "sdf/layer.cpp";
      uint64_t v12 = "EraseTimeSample";
      uint64_t v13 = 1394;
      char v14 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::EraseTimeSample(const SdfPath &, double)";
      char v15 = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot SetTimeSample at <%s> since spec does not exist", Text);
    }
  }
  else
  {
    unint64_t v11 = "sdf/layer.cpp";
    uint64_t v12 = "EraseTimeSample";
    uint64_t v13 = 1389;
    char v14 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::EraseTimeSample(const SdfPath &, double)";
    char v15 = 0;
    int v6 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    __n128 v7 = (const char *)*((void *)this + 59);
    if (v7[23] < 0) {
      __n128 v7 = *(const char **)v7;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set time sample on <%s>.  Layer @%s@ is not editable.", v6, v7);
  }
}

void sub_216AAB5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)sub_216A5B7B0((uint64_t *)this + 14) + 72);

  return v2();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetColorConfiguration@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return sub_216AAB6C0(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 24), a2);
}

uint64_t sub_216AAB6C0@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v17 = 0;
  int v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, v6, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v16))
  {
    uint64_t v7 = sub_216ABBB48((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
    uint64_t v8 = v7;
    if (*(char *)(v7 + 23) < 0)
    {
      sub_216778F24((unsigned char *)a3, *(void **)v7, *(void *)(v7 + 8));
    }
    else
    {
      long long v9 = *(_OWORD *)v7;
      *(void *)(a3 + 16) = *(void *)(v7 + 16);
      *(_OWORD *)a3 = v9;
    }
    uint64_t v13 = a3 + 24;
    if (*(char *)(v8 + 47) < 0)
    {
LABEL_12:
      sub_216778F24((unsigned char *)v13, *(void **)(v8 + 24), *(void *)(v8 + 32));
      return sub_2168EE084((uint64_t)v16);
    }
  }
  else
  {
    Fallbaclong long k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(a1[10], a2);
    uint64_t v11 = sub_216ABBB48(Fallback);
    uint64_t v8 = v11;
    if (*(char *)(v11 + 23) < 0)
    {
      sub_216778F24((unsigned char *)a3, *(void **)v11, *(void *)(v11 + 8));
    }
    else
    {
      long long v12 = *(_OWORD *)v11;
      *(void *)(a3 + 16) = *(void *)(v11 + 16);
      *(_OWORD *)a3 = v12;
    }
    uint64_t v13 = a3 + 24;
    if (*(char *)(v8 + 47) < 0) {
      goto LABEL_12;
    }
  }
  long long v14 = *(_OWORD *)(v8 + 24);
  *(void *)(v13 + 16) = *(void *)(v8 + 40);
  *(_OWORD *)uint64_t v13 = v14;
  return sub_2168EE084((uint64_t)v16);
}

void sub_216AAB800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetColorConfiguration(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2)
{
  v11[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(v7, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    uint64_t v8 = *((void *)a2 + 2);
  }
  p_p = (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p;
  if (*((char *)a2 + 47) < 0)
  {
    p_p = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216778F24(&__p, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long __p = *(_OWORD *)((char *)a2 + 24);
    uint64_t v10 = *((void *)a2 + 5);
  }
  int v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(p_p);
  v11[1] = &off_26C755A30;
  sub_2169B3DA8(v11, (long long *)v7);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(this, v6, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 24), (const pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  sub_2168EE084((uint64_t)v11);
  if (SHIBYTE(v10) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
}

void sub_216AAB968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasColorConfiguration(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 24), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearColorConfiguration(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 24));
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 513) || pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
  {
    char v20 = "sdf/layer.cpp";
    char v21 = "EraseField";
    uint64_t v22 = 3814;
    uint64_t v23 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(const SdfPath &, const TfToken &)";
    char v24 = 0;
    unint64_t v16 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
    if (v16)
    {
      uint64_t v17 = (const char *)(v16 + 16);
      if (*(char *)(v16 + 39) < 0) {
        uint64_t v17 = *(const char **)v17;
      }
    }
    else
    {
      uint64_t v17 = "";
    }
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    uint64_t v19 = (const char *)*((void *)this + 59);
    if (v19[23] < 0) {
      uint64_t v19 = *(const char **)v19;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot erase %s on <%s>. Layer @%s@ is not editable.", v17, Text, v19);
  }
  else
  {
    uint64_t v6 = sub_216A5B7B0((uint64_t *)this + 14);
    if ((*(unsigned int (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, void))(*(void *)v6 + 112))(v6, a2, a3, 0))
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)*((void *)this + 10);
      uint64_t v8 = (void *)*((void *)v7 + 116);
      long long v9 = (void *)*((void *)v7 + 117);
      if (v8 == v9) {
        goto LABEL_7;
      }
      while ((*v8 & 0xFFFFFFFFFFFFFFF8) != (*(void *)a3 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v8 == v9) {
          goto LABEL_7;
        }
      }
      uint64_t v10 = sub_216A5B7B0((uint64_t *)this + 14);
      unsigned int v11 = (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)v10 + 96))(v10, a2);
      if (!*((unsigned char *)v7 + 72 * v11 + 120)
        || !pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsRequiredField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)((char *)v7 + 72 * v11 + 56), a3)|| (FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(v7, a3)) == 0|| (uint64_t v13 = FieldDefinition, pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(this, a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)&v20), FallbackValue = (std::type_info *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(v13), LOBYTE(v13) = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v20, FallbackValue, v15), sub_2168EE084((uint64_t)&v20), (v13 & 1) == 0))
      {
LABEL_7:
        char v21 = 0;
        pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::VtValue>();
      }
    }
  }
}

void sub_216AABCCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetColorManagementSystem@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return sub_216AABD4C(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 32), a2);
}

uint64_t sub_216AABD4C@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, atomic_uint **a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v13 = 0;
  uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, v6, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v12))
  {
    uint64_t v7 = (atomic_uint **)sub_21695C470((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  }
  else
  {
    Fallbaclong long k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(a1[10], a2);
    uint64_t v7 = (atomic_uint **)sub_21695C470(Fallback);
  }
  long long v9 = *v7;
  *a3 = *v7;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      *a3 = v10;
    }
  }
  return sub_2168EE084((uint64_t)v12);
}

void sub_216AABE18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetColorManagementSystem(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3 = this;
  double v8[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
  {
    this = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    uint64_t v4 = this;
  }
  uint64_t v5 = *(void *)a2;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v5 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v8[0] = v5;
  v8[1] = (char *)&off_26C750C70 + 1;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v8[0] = v5 & 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v3, v6, (pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)v4 + 32), (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  uint64_t result = sub_2168EE084((uint64_t)v8);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216AABF2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasColorManagementSystem(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 32), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearColorManagementSystem(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 32));
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetComment(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  double v8[2] = *(unsigned int **)MEMORY[0x263EF8340];
  unint64_t v4 = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
  {
    a1 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    unint64_t v4 = (unint64_t)a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    a1 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216778F24(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  v8[1] = (unsigned int *)&off_26C750BB8;
  sub_21691B31C(v8, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v3, v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 48), (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_2168EE084((uint64_t)v8);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216AAC120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetComment@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    unint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return sub_216AAC1B4(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 48), a2);
}

uint64_t sub_216AAC1B4@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v12 = 0;
  uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, v6, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v11))
  {
    uint64_t v7 = sub_21695A928((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  }
  else
  {
    Fallbaclong long k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(a1[10], a2);
    uint64_t v7 = sub_21695A928(Fallback);
  }
  if (*(char *)(v7 + 23) < 0)
  {
    sub_216778F24((unsigned char *)a3, *(void **)v7, *(void *)(v7 + 8));
  }
  else
  {
    long long v9 = *(_OWORD *)v7;
    *(void *)(a3 + 16) = *(void *)(v7 + 16);
    *(_OWORD *)a3 = v9;
  }
  return sub_2168EE084((uint64_t)v11);
}

void sub_216AAC284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetDefaultPrim(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3 = this;
  double v8[2] = *MEMORY[0x263EF8340];
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
  {
    this = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    unint64_t v4 = this;
  }
  uint64_t v5 = *(void *)a2;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v5 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v8[0] = v5;
  v8[1] = (char *)&off_26C750C70 + 1;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v8[0] = v5 & 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v3, v6, (pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)v4 + 96), (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  uint64_t result = sub_2168EE084((uint64_t)v8);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216AAC398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetDefaultPrim@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this@<X0>, atomic_uint **a2@<X8>)
{
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    unint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return sub_216AABD4C(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 96), a2);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearDefaultPrim(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 96));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasDefaultPrim(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 96), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetDocumentation(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  double v8[2] = *(unsigned int **)MEMORY[0x263EF8340];
  unint64_t v4 = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
  {
    a1 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    unint64_t v4 = (unint64_t)a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    a1 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216778F24(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  v8[1] = (unsigned int *)&off_26C750BB8;
  sub_21691B31C(v8, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v3, v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 136), (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_2168EE084((uint64_t)v8);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216AAC5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetDocumentation@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    unint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return sub_216AAC1B4(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 136), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetStartTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this, double a2)
{
  double v8[2] = *MEMORY[0x263EF8340];
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    unint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 320);
  uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v8[1] = &unk_26C750B03;
  *(double *)uint64_t v8 = a2;
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(this, v6, v5, (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  return sub_2168EE084((uint64_t)v8);
}

void sub_216AAC738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfLayer::GetStartTimeCode(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this)
{
  uint64_t v1 = this;
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
  {
    this = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)this;
  }
  uint64_t v9 = 0;
  uint64_t v3 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)this);
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)v2 + 320);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)v1, v3, v4, (pxrInternal__aapl__pxrReserved__::VtValue *)v8))Fallbaclong long k = (pxrInternal__aapl__pxrReserved__::VtValue *)v8; {
  else
  }
    Fallbaclong long k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v1[10], v4);
  double v6 = *(double *)sub_21691CEA0(Fallback);
  sub_2168EE084((uint64_t)v8);
  return v6;
}

void sub_216AAC818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasStartTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 320), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearStartTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 320));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetEndTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this, double a2)
{
  double v8[2] = *MEMORY[0x263EF8340];
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    unint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 144);
  double v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v8[1] = &unk_26C750B03;
  *(double *)uint64_t v8 = a2;
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(this, v6, v5, (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  return sub_2168EE084((uint64_t)v8);
}

void sub_216AAC9B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfLayer::GetEndTimeCode(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this)
{
  uint64_t v1 = this;
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
  {
    this = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)this;
  }
  uint64_t v9 = 0;
  uint64_t v3 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)this);
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)v2 + 144);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)v1, v3, v4, (pxrInternal__aapl__pxrReserved__::VtValue *)v8))Fallbaclong long k = (pxrInternal__aapl__pxrReserved__::VtValue *)v8; {
  else
  }
    Fallbaclong long k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v1[10], v4);
  double v6 = *(double *)sub_21691CEA0(Fallback);
  sub_2168EE084((uint64_t)v8);
  return v6;
}

void sub_216AACA90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasEndTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 144), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearEndTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 144));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeCodesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this, double a2)
{
  double v8[2] = *MEMORY[0x263EF8340];
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    unint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 440);
  double v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v8[1] = &unk_26C750B03;
  *(double *)uint64_t v8 = a2;
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(this, v6, v5, (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  return sub_2168EE084((uint64_t)v8);
}

void sub_216AACC28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfLayer::GetTimeCodesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v7 = 0;
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 440), (pxrInternal__aapl__pxrReserved__::VtValue *)v6))double FramesPerSecond = *(double *)sub_21691CEA0((pxrInternal__aapl__pxrReserved__::VtValue *)v6); {
  else
  }
    double FramesPerSecond = pxrInternal__aapl__pxrReserved__::SdfLayer::GetFramesPerSecond((pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)this);
  sub_2168EE084((uint64_t)v6);
  return FramesPerSecond;
}

void sub_216AACD04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfLayer::GetFramesPerSecond(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this)
{
  uint64_t v1 = this;
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
  {
    this = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)this;
  }
  uint64_t v9 = 0;
  uint64_t v3 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)this);
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)v2 + 168);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)v1, v3, v4, (pxrInternal__aapl__pxrReserved__::VtValue *)v8))Fallbaclong long k = (pxrInternal__aapl__pxrReserved__::VtValue *)v8; {
  else
  }
    Fallbaclong long k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v1[10], v4);
  double v6 = *(double *)sub_21691CEA0(Fallback);
  sub_2168EE084((uint64_t)v8);
  return v6;
}

void sub_216AACDE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasTimeCodesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 440), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearTimeCodesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 440));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetFramesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this, double a2)
{
  double v8[2] = *MEMORY[0x263EF8340];
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    unint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 168);
  double v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v8[1] = &unk_26C750B03;
  *(double *)uint64_t v8 = a2;
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(this, v6, v5, (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  return sub_2168EE084((uint64_t)v8);
}

void sub_216AACF7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasFramesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 168), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearFramesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 168));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetFramePrecision(pxrInternal__aapl__pxrReserved__::SdfLayer *this, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    unint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 160);
  double v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  uint64_t v9 = &unk_26C750543;
  int v8 = a2;
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(this, v6, v5, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v8);
  return sub_2168EE084((uint64_t)&v8);
}

void sub_216AAD114(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetFramePrecision(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this)
{
  uint64_t v1 = this;
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
  {
    this = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)this;
  }
  uint64_t v9 = 0;
  uint64_t v3 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)this);
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)v2 + 160);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)v1, v3, v4, (pxrInternal__aapl__pxrReserved__::VtValue *)v8))Fallbaclong long k = (pxrInternal__aapl__pxrReserved__::VtValue *)v8; {
  else
  }
    Fallbaclong long k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v1[10], v4);
  uint64_t v6 = *(unsigned int *)sub_216959558(Fallback);
  sub_2168EE084((uint64_t)v8);
  return v6;
}

void sub_216AAD1EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasFramePrecision(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 160), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearFramePrecision(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 160));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetOwner@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    unint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return sub_216AAC1B4(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 232), a2);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetOwner(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  double v8[2] = *(unsigned int **)MEMORY[0x263EF8340];
  unint64_t v4 = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
  {
    a1 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    unint64_t v4 = (unint64_t)a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    a1 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216778F24(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  v8[1] = (unsigned int *)&off_26C750BB8;
  sub_21691B31C(v8, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v3, v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 232), (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_2168EE084((uint64_t)v8);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216AAD424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasOwner(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 232), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearOwner(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 232));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetSessionOwner@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    unint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return sub_216AAC1B4(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 296), a2);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetSessionOwner(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  double v8[2] = *(unsigned int **)MEMORY[0x263EF8340];
  unint64_t v4 = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
  {
    a1 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    unint64_t v4 = (unint64_t)a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    a1 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216778F24(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  v8[1] = (unsigned int *)&off_26C750BB8;
  sub_21691B31C(v8, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v3, v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 296), (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_2168EE084((uint64_t)v8);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216AAD67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasSessionOwner(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 296), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearSessionOwner(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 296));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetHasOwnedSubLayers(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this)
{
  uint64_t v1 = this;
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
  {
    this = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)this;
  }
  uint64_t v9 = 0;
  uint64_t v3 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)this);
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)v2 + 184);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)v1, v3, v4, (pxrInternal__aapl__pxrReserved__::VtValue *)v8))Fallbaclong long k = (pxrInternal__aapl__pxrReserved__::VtValue *)v8; {
  else
  }
    Fallbaclong long k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v1[10], v4);
  uint64_t v6 = *(unsigned __int8 *)sub_216958184(Fallback);
  sub_2168EE084((uint64_t)v8);
  return v6;
}

void sub_216AAD840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetHasOwnedSubLayers(pxrInternal__aapl__pxrReserved__::SdfLayer *this, char a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    unint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 184);
  uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  uint64_t v9 = &unk_26C7501AB;
  v8[0] = a2;
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(this, v6, v5, (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  return sub_2168EE084((uint64_t)v8);
}

void sub_216AAD90C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this@<X0>, pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X8>)
{
  uint64_t v2 = this;
  uint64_t v12 = *MEMORY[0x263EF8340];
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
  {
    this = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)this;
  }
  uint64_t v11 = 0;
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)this);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)v4 + 80);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)v2, v5, v6, (pxrInternal__aapl__pxrReserved__::VtValue *)v10))Fallbaclong long k = (pxrInternal__aapl__pxrReserved__::VtValue *)v10; {
  else
  }
    Fallbaclong long k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v2[10], v6);
  int v8 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_2168EF25C(Fallback);
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary(a2, v8);
  return sub_2168EE084((uint64_t)v10);
}

void sub_216AAD9F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetCustomLayerData(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  double v8[2] = *(unsigned int **)MEMORY[0x263EF8340];
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    unint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v7, a2);
  uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  v8[1] = (unsigned int *)&off_26C74DD80;
  sub_2168EEEA8(v8, (const void ****)&v7);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(this, v6, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 80), (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_2168EE084((uint64_t)v8);
  sub_2168EBBB8(&v7, 0);
}

void sub_216AADAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, char a10)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasCustomLayerData(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 80), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearCustomLayerData(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 80));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetExpressionVariables@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this@<X0>, pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X8>)
{
  uint64_t v2 = this;
  uint64_t v12 = *MEMORY[0x263EF8340];
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
  {
    this = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)this;
  }
  uint64_t v11 = 0;
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)this);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)v4 + 152);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)v2, v5, v6, (pxrInternal__aapl__pxrReserved__::VtValue *)v10))Fallbaclong long k = (pxrInternal__aapl__pxrReserved__::VtValue *)v10; {
  else
  }
    Fallbaclong long k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v2[10], v6);
  int v8 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_2168EF25C(Fallback);
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary(a2, v8);
  return sub_2168EE084((uint64_t)v10);
}

void sub_216AADCB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetExpressionVariables(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  double v8[2] = *(unsigned int **)MEMORY[0x263EF8340];
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    unint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v7, a2);
  uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  v8[1] = (unsigned int *)&off_26C74DD80;
  sub_2168EEEA8(v8, (const void ****)&v7);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(this, v6, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 152), (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_2168EE084((uint64_t)v8);
  sub_2168EBBB8(&v7, 0);
}

void sub_216AADD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, char a10)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasExpressionVariables(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 152), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearExpressionVariables(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 152));
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t **)((char *)this + 88);
  unint64_t v4 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify(v3, v4, &v6);
  uint64_t v5 = v6;
  *a2 = v6;
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::GetRootPrims(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(this, &v2);
  uint64_t v1 = (uint64_t **)sub_216A663FC(&v2);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildren(v1);
}

void sub_216AADF3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetRootPrims(pxrInternal__aapl__pxrReserved__::SdfLayer *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(a1, &v2);
  uint64_t v1 = (uint64_t **)sub_216A663FC(&v2);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetNameChildren(v1);
}

void sub_216AADF98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::InsertRootPrim(pxrInternal__aapl__pxrReserved__::SdfLayer *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(a1, &v2);
  uint64_t v1 = (uint64_t **)sub_216A663FC(&v2);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::InsertNameChild(v1);
}

void sub_216AAE004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::RemoveRootPrim(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(a1, &v4);
  uint64_t v3 = (uint64_t **)sub_216A663FC(&v4);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveNameChild(v3, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_216AAE060(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::GetRootPrimOrder(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(this, &v4);
  uint64_t v3 = (atomic_uint **)sub_216A663FC(&v4);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildrenOrder(v3, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_216AAE0BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetRootPrimOrder(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, void *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(a1, &v4);
  uint64_t v3 = (atomic_uint **)sub_216A663FC(&v4);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetNameChildrenOrder(v3, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_216AAE118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::InsertInRootPrimOrder(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(this, &v6);
  uint64_t v5 = (atomic_uint **)sub_216A663FC(&v6);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::InsertInNameChildrenOrder(v5, a2, a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
}

void sub_216AAE17C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::RemoveFromRootPrimOrder(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(this, &v4);
  uint64_t v3 = (atomic_uint **)sub_216A663FC(&v4);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveFromNameChildrenOrder(v3, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_216AAE1D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::RemoveFromRootPrimOrderByIndex(pxrInternal__aapl__pxrReserved__::SdfLayer *this, int a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(this, &v4);
  uint64_t v3 = (atomic_uint **)sub_216A663FC(&v4);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveFromNameChildrenOrderByIndex(v3, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_216AAE234(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ApplyRootPrimOrder(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(a1, &v4);
  uint64_t v3 = (atomic_uint **)sub_216A663FC(&v4);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::ApplyNameChildrenOrder(v3, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_216AAE290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (char *)this + 24;
  unint64_t v4 = (std::__shared_weak_count_vtbl *)operator new(0x48uLL);
  pxrInternal__aapl__pxrReserved__::Sdf_SubLayerListEditor::Sdf_SubLayerListEditor(v4, v3);
  uint64_t v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__shared_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C758C18;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = v4;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  *(_DWORD *)(a2 + 16) = 3;

  sub_216784EC4(v5);
}

void sub_216AAE338(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetSubLayerPaths(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, void *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(a1, (uint64_t)&v3);
  sub_216AAE3DC(&v3, a2);
  if (v4) {
    sub_216784EC4(v4);
  }
}

void sub_216AAE3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *sub_216AAE3DC(unsigned int *a1, void *a2)
{
  uint64_t v4 = *(void *)a1;
  if (v4)
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)v4 + 112))(v4, a1[4]);
    uint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[1] - *v5) >> 3);
  }
  else
  {
    uint64_t v6 = 0;
  }
  sub_216ABBD84(a1, 0, v6, a2);
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetNumSubLayerPaths(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(this, (uint64_t)v3);
  unint64_t v1 = sub_21697B6DC((uint64_t)v3);
  if (v4) {
    sub_216784EC4(v4);
  }
  return v1;
}

void sub_216AAE4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::InsertSubLayerPath(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, long long *a2, int a3)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(a1, (uint64_t)&v5);
  if (a3 == -1) {
    a3 = sub_21697B6DC((uint64_t)&v5);
  }
  sub_216AAE540(&v5, a3, a2);
  if (v6) {
    sub_216784EC4(v6);
  }
}

void sub_216AAE528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216AAE540(unsigned int *a1, int a2, long long *a3)
{
  if (a2 == -1)
  {
    uint64_t v5 = *(void *)a1;
    if (*(void *)a1)
    {
      uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)v5 + 112))(v5, a1[4]);
      a2 = -1431655765 * ((v6[1] - *v6) >> 3);
    }
    else
    {
      a2 = 0;
    }
  }
  uint64_t v7 = a2;
  sub_2168758C4(v8, 1uLL, a3);
  sub_216ABBD84(a1, v7, 0, v8);
  uint64_t v9 = (void **)v8;
  sub_216782F20(&v9);
}

void sub_216AAE604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::RemoveSubLayerPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this, int a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(this, (uint64_t)&v3);
  sub_216AAE67C(&v3, a2);
  if (v4) {
    sub_216784EC4(v4);
  }
}

void sub_216AAE664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216AAE67C(unsigned int *a1, uint64_t a2)
{
  memset(v2, 0, sizeof(v2));
  sub_216ABBD84(a1, a2, 1, v2);
  unsigned int v3 = (void **)v2;
  sub_216782F20(&v3);
}

void sub_216AAE6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216782F20(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerOffsets(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, void *a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
    sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  memset(__p, 0, sizeof(__p));
  uint64_t v5 = sub_216A5B7B0((uint64_t *)this + 14);
  (*(void (**)(void ***__return_ptr))(*(void *)v5 + 136))(&v8);
  if (sub_21697E5A0((pxrInternal__aapl__pxrReserved__::VtValue *)&v8))
  {
    if ((v9 & 4) != 0) {
      uint64_t v6 = (void **)(*(uint64_t (**)(void ***))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(&v8);
    }
    else {
      uint64_t v6 = v8;
    }
  }
  else
  {
    uint64_t v6 = __p;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_21697E62C(a2, *v6, (uint64_t)v6[1], ((unsigned char *)v6[1] - (unsigned char *)*v6) >> 4);
  sub_2168EE084((uint64_t)&v8);
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_216AAE810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerOffset(pxrInternal__aapl__pxrReserved__::SdfLayer *this, unsigned int a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerOffsets(this, &__p);
  if ((a2 & 0x80000000) == 0)
  {
    unsigned int v3 = __p;
    if (a2 < (unint64_t)((v8 - (unsigned char *)__p) >> 4))
    {
      long long v9 = *((_OWORD *)__p + a2);
LABEL_5:
      int v8 = v3;
      operator delete(v3);
      return *(double *)&v9;
    }
  }
  v5[0] = "sdf/layer.cpp";
  v5[1] = "GetSubLayerOffset";
  v5[2] = 1993;
  v5[3] = "SdfLayerOffset pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerOffset(int) const";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid sublayer index");
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v9, 0.0, 1.0);
  unsigned int v3 = __p;
  if (__p) {
    goto LABEL_5;
  }
  return *(double *)&v9;
}

void sub_216AAE8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetSubLayerOffset(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfLayerOffset *a2, unsigned int a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
    sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  long long __p = 0;
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v7 = sub_216A5B7B0((uint64_t *)this + 14);
  (*(void (**)(void ***__return_ptr))(*(void *)v7 + 136))(&v20);
  if (sub_21697E5A0((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
  {
    if ((v21 & 4) != 0) {
      p_p = (void **)(*(uint64_t (**)(void ***))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
    }
    else {
      p_p = v20;
    }
  }
  else
  {
    p_p = &__p;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  sub_21697E62C(&v12, *p_p, (uint64_t)p_p[1], ((unsigned char *)p_p[1] - (unsigned char *)*p_p) >> 4);
  sub_2168EE084((uint64_t)&v20);
  long long v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)__p;
  if (__p) {
    operator delete(__p);
  }
  if ((a3 & 0x80000000) != 0 || a3 >= (unint64_t)((v13 - (unsigned char *)v12) >> 4))
  {
    long long __p = "sdf/layer.cpp";
    unint64_t v16 = "SetSubLayerOffset";
    uint64_t v17 = 2005;
    uint64_t v18 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetSubLayerOffset(const SdfLayerOffset &, int)";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid sublayer index");
  }
  else
  {
    *((_OWORD *)v12 + a3) = *(_OWORD *)a2;
    uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v9);
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v11) {
      uint64_t v11 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    unint64_t v16 = (const char *)&off_26C7567E0;
    sub_2169CB460((unsigned int **)&__p, (uint64_t)&v12);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(this, v10, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v11 + 368), (const pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
    sub_2168EE084((uint64_t)&__p);
  }
  if (v12)
  {
    uint64_t v13 = v12;
    operator delete(v12);
  }
}

void sub_216AAEB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (*((void *)a4 + 1))
  {
    if (!*((unsigned char *)this + 513) || pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
    {
      v19.__vftable = (std::type_info_vtbl *)"sdf/layer.cpp";
      v19.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)"SetField";
      uint64_t v20 = 3702;
      uint64_t v21 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(const SdfPath &, const TfToken &, const VtValue &)";
      char v22 = 0;
      unint64_t v9 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
      if (v9)
      {
        uint64_t v10 = (const char *)(v9 + 16);
        if (*(char *)(v9 + 39) < 0) {
          uint64_t v10 = *(const char **)v10;
        }
      }
      else
      {
        uint64_t v10 = "";
      }
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      uint64_t v14 = (const char *)*((void *)this + 59);
      if (v14[23] < 0) {
        uint64_t v14 = *(const char **)v14;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set %s on <%s>. Layer @%s@ is not editable.", v10, Text, v14);
    }
    else if (!*((unsigned char *)this + 515) || (sub_216AB5360((uint64_t)this, (uint64_t)a2, a3) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(this, a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)&v19);
      if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(a4, &v19, v8) & 1) == 0) {
        pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::VtValue>();
      }
      sub_2168EE084((uint64_t)&v19);
    }
    else
    {
      v19.__vftable = (std::type_info_vtbl *)"sdf/layer.cpp";
      v19.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)"SetField";
      uint64_t v20 = 3711;
      uint64_t v21 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(const SdfPath &, const TfToken &, const VtValue &)";
      char v22 = 0;
      uint64_t v17 = &unk_26C759010;
      int v18 = 0;
      unint64_t v11 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
      if (v11)
      {
        uint64_t v12 = (const char *)(v11 + 16);
        if (*(char *)(v11 + 39) < 0) {
          uint64_t v12 = *(const char **)v12;
        }
      }
      else
      {
        uint64_t v12 = "";
      }
      char v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      unint64_t v16 = (const char *)*((void *)this + 59);
      if (v16[23] < 0) {
        unint64_t v16 = *(const char **)v16;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, (uint64_t *)&v17, (pxrInternal__aapl__pxrReserved__ *)"Cannot set %s on <%s>. Field is not valid for layer @%s@.", v12, v15, v16);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, a2, a3);
  }
}

void sub_216AAEDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_CanGetSpecAtPath(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, int *a3, _DWORD *a4)
{
  BOOL result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2);
  if (result)
  {
    IsAbsolutePath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a2);
    if (!IsAbsolutePath
      || (IsAbsolutePath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::ContainsTargetPath(a2),
          IsAbsolutePath))
    {
      uint64_t v12 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(IsAbsolutePath);
      pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, v12, &v13);
      sub_21697DE94(a3, &v13);
      sub_21697DEEC(a3 + 1, &v14);
      sub_21697B754(&v13);
    }
    else
    {
      a3 = (int *)a2;
    }
    uint64_t v10 = sub_216A5B7B0((uint64_t *)(a1 + 112));
    int v11 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v10 + 96))(v10, a3);
    *a4 = v11;
    return v11 != 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)sub_216A5B7B0((uint64_t *)this + 14) + 96);

  return v2();
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath@<X0>(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v13);
  int v11 = 0;
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::_CanGetSpecAtPath((uint64_t)this, a2, &v12, &v11))
  {
    BOOL v6 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
    uint64_t v7 = (uint64_t **)((char *)this + 88);
    if (v6) {
      pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, &v10);
    }
    else {
      pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify(v7, a2, &v10);
    }
    int v8 = v10;
    *a3 = v10;
    if (v8) {
      atomic_fetch_add(v8, 1u);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v10);
  }
  else
  {
    *a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  return sub_21697C414(&v12);
}

void sub_216AAEFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  if (*(void *)a2 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this))
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(this, a3);
  }
  else
  {
    sub_216AAF098((uint64_t)this, a2, a3);
  }
}

_DWORD *sub_216AAF098@<X0>(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v13);
  int v11 = 0;
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::_CanGetSpecAtPath(a1, a2, &v12, &v11)
    && pxrInternal__aapl__pxrReserved__::Sdf_SpecType::CanCast(v11, (pxrInternal__aapl__pxrReserved__::TfType *)&unk_26C7580A8))
  {
    BOOL v6 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
    uint64_t v7 = (uint64_t **)(a1 + 88);
    if (v6) {
      pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, &v10);
    }
    else {
      pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify(v7, a2, &v10);
    }
    int v8 = v10;
    *a3 = v10;
    if (v8) {
      atomic_fetch_add(v8, 1u);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v10);
  }
  else
  {
    *a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  return sub_21697C414(&v12);
}

void sub_216AAF184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216AAF1AC@<X0>(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v13);
  int v11 = 0;
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::_CanGetSpecAtPath(a1, a2, &v12, &v11)
    && pxrInternal__aapl__pxrReserved__::Sdf_SpecType::CanCast(v11, (pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C757F58))
  {
    BOOL v6 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
    uint64_t v7 = (uint64_t **)(a1 + 88);
    if (v6) {
      pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, &v10);
    }
    else {
      pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify(v7, a2, &v10);
    }
    int v8 = v10;
    *a3 = v10;
    if (v8) {
      atomic_fetch_add(v8, 1u);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v10);
  }
  else
  {
    *a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  return sub_21697C414(&v12);
}

void sub_216AAF298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216AAF2C0@<X0>(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v13);
  int v11 = 0;
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::_CanGetSpecAtPath(a1, a2, &v12, &v11)
    && pxrInternal__aapl__pxrReserved__::Sdf_SpecType::CanCast(v11, (pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C757F70))
  {
    BOOL v6 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
    uint64_t v7 = (uint64_t **)(a1 + 88);
    if (v6) {
      pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, &v10);
    }
    else {
      pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify(v7, a2, &v10);
    }
    int v8 = v10;
    *a3 = v10;
    if (v8) {
      atomic_fetch_add(v8, 1u);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v10);
  }
  else
  {
    *a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  return sub_21697C414(&v12);
}

void sub_216AAF3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216AAF3D4@<X0>(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v13);
  int v11 = 0;
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::_CanGetSpecAtPath(a1, a2, &v12, &v11)
    && pxrInternal__aapl__pxrReserved__::Sdf_SpecType::CanCast(v11, (pxrInternal__aapl__pxrReserved__::TfType *)&unk_26C7580C0))
  {
    BOOL v6 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
    uint64_t v7 = (uint64_t **)(a1 + 88);
    if (v6) {
      pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, &v10);
    }
    else {
      pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify(v7, a2, &v10);
    }
    int v8 = v10;
    *a3 = v10;
    if (v8) {
      atomic_fetch_add(v8, 1u);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v10);
  }
  else
  {
    *a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  return sub_21697C414(&v12);
}

void sub_216AAF4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToSave(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  if (!*((unsigned char *)this + 514)
    || pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(*((void *)this + 59))
    || (pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this) & 1) != 0)
  {
    return 0;
  }
  unsigned int v3 = (pxrInternal__aapl__pxrReserved__ *)(*((void *)this + 59) + 24);

  return pxrInternal__aapl__pxrReserved__::Sdf_CanWriteLayerToPath(v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetPermissionToEdit(uint64_t this, char a2)
{
  *(unsigned char *)(this + 513) = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetPermissionToSave(uint64_t this, char a2)
{
  *(unsigned char *)(this + 514) = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::CanApply(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v15[4] = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
  }
  int v8 = operator new(0x20uLL);
  void *v8 = &unk_26C758C78;
  v8[1] = sub_216AAF758;
  double v8[2] = v7;
  void v8[3] = v6;
  _DWORD v15[3] = v8;
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
  }
  int v11 = operator new(0x20uLL);
  *int v11 = &unk_26C758D38;
  v11[1] = sub_216AAF7BC;
  v11[2] = v10;
  void v11[3] = v9;
  void v14[3] = v11;
  BOOL v12 = pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::Process(a2, 0, (uint64_t)v15, (uint64_t)v14, a3, 0);
  sub_216ABC5B0(v14);
  sub_216ABC260(v15);
  if (v12) {
    return 2;
  }
  else {
    return 0;
  }
}

void sub_216AAF6AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_216ABC5B0((uint64_t *)va);
  sub_216ABC260((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216AAF758(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v3, a2, &v6);
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v6) ^ 1;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
  return v4;
}

void sub_216AAF7A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216AAF7BC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t a3)
{
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(this))
  {
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 2))
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)this + 8), &v11);
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v6, this, &v10);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)this + 8));
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CanMoveChildForBatchNamespaceEdit();
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, &v11);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(this);
    pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CanRemoveChildForBatchNamespaceEdit();
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 2))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsRelationalAttributePath(this))
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, &v11);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(this);
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::CanRemoveChildForBatchNamespaceEdit();
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, &v11);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(this);
    pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::CanRemoveChildForBatchNamespaceEdit();
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsRelationalAttributePath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)this + 8)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)this + 8), &v11);
    uint64_t v8 = sub_2169791E0(a1);
    sub_216AAF1AC(v8, this, &v10);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)this + 8));
    pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::CanMoveChildForBatchNamespaceEdit();
  }
  uint64_t v7 = sub_2169791E0(a1);
  sub_216AAF2C0(v7, this, &v11);
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v11) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)this + 8), &v10);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)this + 8));
    pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::CanMoveChildForBatchNamespaceEdit();
  }
  if (a3)
  {
    MEMORY[0x21D4477E0](a3, "Object is not an attribute");
    a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v11);
  return a3;
}

void sub_216AAFA3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::Apply(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *a2)
{
  v25[4] = *(void ***)MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 513) || (pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this) & 1) != 0) {
    return 0;
  }
  uint64_t v21 = 0;
  char v22 = 0;
  uint64_t v23 = 0;
  uint64_t v7 = (void *)*((void *)this + 3);
  uint64_t v6 = (atomic_uint *)*((void *)this + 4);
  uint64_t v5 = (uint64_t *)((char *)this + 24);
  if (v6) {
    atomic_fetch_add_explicit(v6 + 2, 1u, memory_order_relaxed);
  }
  uint64_t v8 = (void **)operator new(0x20uLL);
  void *v8 = &unk_26C758DE0;
  v8[1] = sub_216AAF758;
  double v8[2] = v7;
  void v8[3] = v6;
  void v25[3] = v8;
  uint64_t v10 = *((void *)this + 3);
  uint64_t v9 = *((void *)this + 4);
  if (v9) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
  }
  int v11 = operator new(0x20uLL);
  *int v11 = &unk_26C758E68;
  v11[1] = sub_216AAF7BC;
  v11[2] = v10;
  void v11[3] = v9;
  v24[3] = v11;
  BOOL v4 = pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::Process((uint64_t)a2, (uint64_t *)&v21, (uint64_t)v25, (uint64_t)v24, 0, 0);
  sub_216ABC5B0(v24);
  sub_216ABC260(v25);
  if (v4)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
    if (v21 != v22)
    {
      BOOL v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v21 + 8);
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v21))
      {
        if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v12))
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v12, v24);
          int v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v5);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v13, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 - 8), v25);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v12);
          pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::MoveChildForBatchNamespaceEdit();
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 - 8), v24);
        NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 - 8));
        if ((*(void *)NameToken & 0xFFFFFFFFFFFFFFF8) == 0) {
          pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NameToken);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::RemoveChild();
      }
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v12))
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPath::IsRelationalAttributePath(v12))
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v12, v24);
          uint64_t v14 = sub_2169791E0(v5);
          sub_216AAF2C0(v14, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 - 8), v25);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v12);
          pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::MoveChildForBatchNamespaceEdit();
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v12, v24);
        uint64_t v17 = sub_2169791E0(v5);
        sub_216AAF1AC(v17, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 - 8), v25);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v12);
        pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::MoveChildForBatchNamespaceEdit();
      }
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsRelationalAttributePath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 - 8)))
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 - 8), v24);
        unint64_t v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 - 8));
        if ((*(void *)v16 & 0xFFFFFFFFFFFFFFF8) == 0) {
          pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::RemoveChild();
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 - 8), v24);
      int v18 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 - 8));
      if ((*(void *)v18 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::RemoveChild();
    }
    sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
  }
  v25[0] = (void **)&v21;
  sub_216ABC634(v25);
  return v4;
}

void sub_216AAFE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a11;
  sub_216ABC634(&a18);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfLayer::ScheduleRemoveIfInert(pxrInternal__aapl__pxrReserved__::SdfLayer *this, atomic_uint **a2)
{
  uint64_t v2 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance();
  }

  return pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::RemoveSpecIfInert(v2, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::_RemoveIfInert(pxrInternal__aapl__pxrReserved__::SdfLayer *this, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a2) & 1) == 0)
  {
    uint64_t v5 = *a2;
    int v13 = (atomic_uint *)v5;
    if (v5) {
      atomic_fetch_add((atomic_uint *volatile)v5, 1u);
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v13, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&unk_26C7580A8, v4))
    {
      uint64_t v14 = v13;
      if (v13)
      {
        atomic_fetch_add(v13, 1u);
        BOOL v12 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)v14;
        if (v14) {
          atomic_fetch_add(v14, 1u);
        }
      }
      else
      {
        BOOL v12 = 0;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v14);
    }
    else
    {
      BOOL v12 = 0;
    }
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v12))
    {
      if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v13, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&unk_26C757F58, v6))
      {
        uint64_t v14 = v13;
        if (v13)
        {
          atomic_fetch_add(v13, 1u);
          uint64_t v10 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)v14;
          if (v14) {
            atomic_fetch_add(v14, 1u);
          }
        }
        else
        {
          uint64_t v10 = 0;
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v14);
      }
      else
      {
        uint64_t v10 = 0;
      }
      if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v10) & 1) == 0)
      {
        uint64_t v9 = v10;
        if (v10) {
          atomic_fetch_add((atomic_uint *volatile)v10, 1u);
        }
        pxrInternal__aapl__pxrReserved__::SdfLayer::RemovePropertyIfHasOnlyRequiredFields((int)this, &v9);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v9);
      }
      uint64_t v8 = &v10;
    }
    else
    {
      uint64_t v7 = sub_216A663FC(&v12);
      if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsInert(v7, 0))
      {
LABEL_29:
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v12);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v13);
        return;
      }
      int v11 = v12;
      if (v12) {
        atomic_fetch_add((atomic_uint *volatile)v12, 1u);
      }
      pxrInternal__aapl__pxrReserved__::SdfLayer::RemovePrimIfInert((uint64_t)this, &v11);
      uint64_t v8 = &v11;
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v8);
    goto LABEL_29;
  }
}

void sub_216AB018C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, char a14)
{
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::RemovePrimIfInert(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(this) & 1) == 0)
  {
    BOOL v4 = *this;
    uint64_t v9 = v4;
    if (v4) {
      atomic_fetch_add((atomic_uint *volatile)v4, 1u);
    }
    int v5 = pxrInternal__aapl__pxrReserved__::SdfLayer::_RemoveInertDFS(a1, &v9);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v9);
    if (v5)
    {
      uint64_t v7 = *this;
      uint64_t v8 = v7;
      if (v7) {
        atomic_fetch_add((atomic_uint *volatile)v7, 1u);
      }
      pxrInternal__aapl__pxrReserved__::SdfLayer::_RemoveInertToRootmost(v6, &v8);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v8);
    }
  }
}

void sub_216AB026C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::RemovePropertyIfHasOnlyRequiredFields(int a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(this) & 1) == 0)
  {
    uint64_t v3 = (uint64_t **)sub_216990F1C(this);
    if (pxrInternal__aapl__pxrReserved__::SdfPropertySpec::HasOnlyRequiredFields(v3))
    {
      BOOL v4 = sub_216990F1C(this);
      pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetOwner((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v4, &v21);
      if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v21, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&unk_26C7580A8, v5))
      {
        uint64_t v23 = v21;
        if (v21)
        {
          atomic_fetch_add(v21, 1u);
          char v22 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)v23;
          if (v23) {
            atomic_fetch_add(v23, 1u);
          }
        }
        else
        {
          char v22 = 0;
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v23);
      }
      else
      {
        char v22 = 0;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v21);
      if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v22))
      {
        if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(this, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&unk_26C757F70, v6))
        {
          uint64_t v23 = (atomic_uint *)*this;
          if (v23)
          {
            atomic_fetch_add(v23, 1u);
            uint64_t v21 = v23;
            if (v23) {
              atomic_fetch_add(v23, 1u);
            }
          }
          else
          {
            uint64_t v21 = 0;
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v23);
        }
        else
        {
          uint64_t v21 = 0;
        }
        if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v21) & 1) == 0)
        {
          int v11 = sub_216A64148((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v21);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v11, &v19);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, &v23);
          BOOL v12 = sub_216A64148((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v21);
          NameToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v12, (atomic_uint **)&v18);
          if ((v18 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NameToken);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::RemoveChild();
        }
        if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(this, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&unk_26C7580C0, v10))
        {
          uint64_t v23 = (atomic_uint *)*this;
          if (v23)
          {
            atomic_fetch_add(v23, 1u);
            std::type_info v19 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)v23;
            if (v23) {
              atomic_fetch_add(v23, 1u);
            }
          }
          else
          {
            std::type_info v19 = 0;
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v23);
        }
        else
        {
          std::type_info v19 = 0;
        }
        if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v19) & 1) == 0)
        {
          uint64_t v14 = sub_216A67AC0(&v19);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v18);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, &v23);
          char v15 = sub_216A67AC0(&v19);
          unint64_t v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v15, (atomic_uint **)&v17);
          if ((v17 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::RemoveChild();
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v19);
        uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v21;
      }
      else
      {
        uint64_t v7 = sub_216A663FC(&v22);
        int v8 = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveProperty(v7, this);
        uint64_t v20 = v22;
        if (v22) {
          atomic_fetch_add((atomic_uint *volatile)v22, 1u);
        }
        pxrInternal__aapl__pxrReserved__::SdfLayer::_RemoveInertToRootmost(v8, &v20);
        uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v20;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v9);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v22);
    }
  }
}

void sub_216AB0580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  sub_21697B754((uint64_t *)va);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v3 - 32));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_RemoveInertDFS(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  uint64_t v3 = sub_216A663FC(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsInert(v3, 0))
  {
    long long v6 = 0uLL;
    uint64_t v7 = 0;
    uint64_t v5 = (uint64_t **)sub_216A663FC(a2);
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildren(v5);
  }
  return 1;
}

void sub_216AB0914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24)
{
  sub_2169912B4(v24 - 200);
  a24 = v24 - 80;
  sub_216991094((void ***)&a24);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_RemoveInertToRootmost(int a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(this);
  if ((result & 1) == 0)
  {
    do
    {
      BOOL v4 = sub_216A663FC(this);
      uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecifier(v4);
      if (result != 1) {
        break;
      }
      uint64_t v5 = sub_216A663FC(this);
      uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSpec::IsInert(v5, 0);
      if (!result) {
        break;
      }
      long long v6 = (uint64_t **)sub_216A663FC(this);
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetRealNameParent(v6, &v8);
      if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v8) & 1) == 0)
      {
        uint64_t v7 = (uint64_t **)sub_216A663FC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v8);
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveNameChild(v7, this);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((atomic_uint **)this, &v8);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v8);
      uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(this);
    }
    while (!result);
  }
  return result;
}

void sub_216AB0A98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfLayer::RemoveInertSceneDescription(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v4);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(this, &v3);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_RemoveInertDFS((uint64_t)this, &v3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v3);
  return sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v4);
}

void sub_216AB0B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
}

void sub_216AB0B28(uint64_t a1, uint64_t a2, char *a3)
{
  if (*(void *)(a1 + 8) != *(void *)(a1 + 24)) {
    sub_216991268();
  }
  v3[0] = "tf/iterator.h";
  v3[1] = "operator*";
  _OWORD v3[2] = 271;
  v3[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::SdfChildrenView<pxrIn"
          "ternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>>::operator*() [T = pxrInternal__aapl__pxrReserved__::SdfChil"
          "drenView<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>, Reverse = false]";
  char v4 = 0;
  int v5 = 4;
  pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
}

void sub_216AB0BB0()
{
}

uint64_t sub_216AB0BB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)(a1 + 24))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    void v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::SdfCh"
            "ildrenView<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>>::operator++() [T = pxrInternal__aapl__pxr"
            "Reserved__::SdfChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>, Reverse = false]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(void *)(a1 + 8) = v2 + 1;
  }
  return a1;
}

uint64_t sub_216AB0C3C(uint64_t result, uint64_t a2, char *a3)
{
  if (*(void *)(result + 16) == *(void *)(result + 40))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    _OWORD v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::SdfChildrenProxy<px"
            "rInternal__aapl__pxrReserved__::SdfChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>"
            ">>::operator->() [T = pxrInternal__aapl__pxrReserved__::SdfChildrenProxy<pxrInternal__aapl__pxrReserved__::S"
            "dfChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216AB0CBC(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 8);
  sub_216991380();
}

void sub_216AB0D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216AB0D90(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a1 + 40))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    void v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::SdfCh"
            "ildrenProxy<pxrInternal__aapl__pxrReserved__::SdfChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_VariantS"
            "etChildPolicy>>>::operator++() [T = pxrInternal__aapl__pxrReserved__::SdfChildrenProxy<pxrInternal__aapl__px"
            "rReserved__::SdfChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>>, Reverse = false]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(void *)(a1 + 16) = v2 + 1;
  }
  return a1;
}

uint64_t sub_216AB0E14(uint64_t a1)
{
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  sub_216991430(a1 + 48);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetIdentifier(uint64_t a1, const std::string *a2)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  if (sub_216977CF0(3))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v6 = (uint64_t *)a2;
    }
    else {
      long long v6 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"SdfLayer::SetIdentifier('%s')\n", v4, v5, v6);
  }
  long long v49 = 0uLL;
  uint64_t v50 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  BOOL v46 = (unsigned __int8 *)&v47;
  if ((pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier(*(const std::string **)(a1 + 472), &v49, (uint64_t)&v46) & 1) != 0
    || (*(void *)&long long v51 = "sdf/layer.cpp",
        *((void *)&v51 + 1) = "SetIdentifier",
        *(void *)&long long v52 = 2482,
        *((void *)&v52 + 1) = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetIdentifier(const string &)",
        LOBYTE(v53) = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v51, "Sdf_SplitIdentifier( GetIdentifier(), &oldLayerPath, &oldArguments)", 0) & 1) != 0))
  {
    long long __p = 0uLL;
    uint64_t v45 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    int v41 = (unsigned __int8 *)&v42;
    if (pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier(a2, &__p, (uint64_t)&v41))
    {
      if (v48 != v43)
      {
LABEL_34:
        *(void *)&long long v51 = "sdf/layer.cpp";
        *((void *)&v51 + 1) = "SetIdentifier";
        *(void *)&long long v52 = 2497;
        *((void *)&v52 + 1) = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetIdentifier(const string &)";
        LOBYTE(v53) = 0;
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v18 = (const char *)a2;
        }
        else {
          unint64_t v18 = (const char *)a2->__r_.__value_.__r.__words[0];
        }
        std::type_info v19 = *(const char **)(a1 + 472);
        if (v19[23] < 0) {
          std::type_info v19 = *(const char **)v19;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 1, (pxrInternal__aapl__pxrReserved__ *)"Identifier '%s' contains arguments that differ from the layer's current arguments ('%s').", v18, v19);
        goto LABEL_77;
      }
      uint64_t v7 = v46;
      if (v46 != (unsigned __int8 *)&v47)
      {
        int v8 = v41;
        while ((sub_21691BE28((uint64_t)&v51, v7 + 32, v8 + 32) & 1) != 0)
        {
          uint64_t v9 = (unsigned __int8 *)*((void *)v7 + 1);
          uint64_t v10 = v7;
          if (v9)
          {
            do
            {
              uint64_t v7 = v9;
              uint64_t v9 = *(unsigned __int8 **)v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              uint64_t v7 = (unsigned __int8 *)*((void *)v10 + 2);
              BOOL v11 = *(void *)v7 == (void)v10;
              uint64_t v10 = v7;
            }
            while (!v11);
          }
          BOOL v12 = (unsigned __int8 *)*((void *)v8 + 1);
          if (v12)
          {
            do
            {
              int v13 = v12;
              BOOL v12 = *(unsigned __int8 **)v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              int v13 = (unsigned __int8 *)*((void *)v8 + 2);
              BOOL v11 = *(void *)v13 == (void)v8;
              int v8 = v13;
            }
            while (!v11);
          }
          int v8 = v13;
          if (v7 == (unsigned __int8 *)&v47) {
            goto LABEL_23;
          }
        }
        goto LABEL_34;
      }
LABEL_23:
      v39[0] = 0;
      v39[1] = 0;
      uint64_t v40 = 0;
      NewLayerWithuint64_t Identifier = pxrInternal__aapl__pxrReserved__::Sdf_CanCreateNewLayerWithIdentifier((uint64_t)&__p, (uint64_t)v39);
      if (NewLayerWithIdentifier)
      {
        Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)NewLayerWithIdentifier);
        v32[0] = 0;
        v32[1] = 0;
        uint64_t v33 = 0;
        pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifierForNewAsset((uint64_t)Resolver);
        if (SHIBYTE(v45) < 0) {
          operator delete((void *)__p);
        }
        long long __p = v51;
        uint64_t v45 = v52;
        BYTE7(v52) = 0;
        LOBYTE(v51) = 0;
        if (SHIBYTE(v33) < 0) {
          operator delete(v32[0]);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((uint64_t)&__p, &v41, &v38);
        uint64_t v16 = *(void *)(a1 + 472);
        if (*(char *)(v16 + 47) < 0)
        {
          sub_216778F24(__dst, *(void **)(v16 + 24), *(void *)(v16 + 32));
        }
        else
        {
          *(_OWORD *)std::string __dst = *(_OWORD *)(v16 + 24);
          uint64_t v37 = *(void *)(v16 + 40);
        }
        pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v35);
        v32[0] = 0;
        __int16 v34 = 0;
        *((void *)&v51 + 1) = 0;
        *(void *)&long long v52 = 0;
        *(void *)&long long v51 = (char *)&v51 + 8;
        sub_216AAA5A0((uint64_t)&v38, (uint64_t)&v51, (tbb::queuing_rw_mutex::scoped_lock *)v32, 1, (uint64_t *)&v31);
        sub_2167877AC((uint64_t)&v51, *((void **)&v51 + 1));
        if (!v31 || v31 == (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)a1)
        {
          char v57 = 0;
          uint64_t v58 = 0;
          uint64_t v59 = 0;
          v29[0] = 0;
          v29[1] = 0;
          uint64_t v30 = 0;
          uint64_t v56 = 0;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v51 = 0u;
          pxrInternal__aapl__pxrReserved__::SdfLayer::_InitializeFromIdentifier(a1, (uint64_t)&v38, &v57, (uint64_t *)v29, &v51);
          sub_2168EE084((uint64_t)&v55 + 8);
          if (SBYTE7(v55) < 0) {
            operator delete((void *)v54);
          }
          if (SHIBYTE(v53) < 0) {
            operator delete(*((void **)&v52 + 1));
          }
          if (SBYTE7(v52) < 0) {
            operator delete((void *)v51);
          }
          if (SHIBYTE(v30) < 0) {
            operator delete(v29[0]);
          }
          if (SHIBYTE(v59) < 0) {
            operator delete(v57);
          }
          sub_216ABB798(&v31);
          sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)v32);
          uint64_t v25 = *(void *)(a1 + 472);
          if (*(char *)(v25 + 47) < 0)
          {
            sub_216778F24(&v51, *(void **)(v25 + 24), *(void *)(v25 + 32));
          }
          else
          {
            long long v51 = *(_OWORD *)(v25 + 24);
            *(void *)&long long v52 = *(void *)(v25 + 40);
          }
          BOOL v26 = sub_216AAA048((unsigned __int8 *)__dst, (unsigned __int8 *)&v51);
          if (v26)
          {
            uint64_t v27 = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)v26);
            pxrInternal__aapl__pxrReserved__::ArResolver::GetModificationTimestamp((uint64_t)v27);
            uint64_t v58 = (char *)&off_26C7549D0 + 1;
            char v57 = v28;
            sub_2168ED33C((void *)(a1 + 480), &v57);
            sub_2168EE084((uint64_t)&v57);
          }
          if (SBYTE7(v52) < 0) {
            operator delete((void *)v51);
          }
        }
        else
        {
          *(void *)&long long v51 = "sdf/layer.cpp";
          *((void *)&v51 + 1) = "SetIdentifier";
          *(void *)&long long v52 = 2540;
          *((void *)&v52 + 1) = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetIdentifier(const string &)";
          LOBYTE(v53) = 0;
          char v22 = *(const char **)(sub_216AA5ECC((uint64_t *)&v31) + 472);
          if (v22[23] < 0) {
            char v22 = *(const char **)v22;
          }
          uint64_t v23 = *(void *)(sub_216AA5ECC((uint64_t *)&v31) + 472);
          uint64_t v24 = (const char *)(v23 + 24);
          if (*(char *)(v23 + 47) < 0) {
            uint64_t v24 = *(const char **)v24;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 1, (pxrInternal__aapl__pxrReserved__ *)"Layer with identifier '%s' and resolved path '%s' exists.", v22, v24);
          sub_216ABB798(&v31);
          sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)v32);
        }
        sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v35);
        if (SHIBYTE(v37) < 0) {
          operator delete(__dst[0]);
        }
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v38.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        *(void *)&long long v51 = "sdf/layer.cpp";
        *((void *)&v51 + 1) = "SetIdentifier";
        *(void *)&long long v52 = 2504;
        *((void *)&v52 + 1) = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetIdentifier(const string &)";
        LOBYTE(v53) = 0;
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v20 = (const char *)a2;
        }
        else {
          uint64_t v20 = (const char *)a2->__r_.__value_.__r.__words[0];
        }
        uint64_t v21 = v39;
        if (v40 < 0) {
          uint64_t v21 = (void **)v39[0];
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot change identifier to '%s': %s", v20, (const char *)v21);
      }
      if (SHIBYTE(v40) < 0) {
        operator delete(v39[0]);
      }
    }
    else
    {
      *(void *)&long long v51 = "sdf/layer.cpp";
      *((void *)&v51 + 1) = "SetIdentifier";
      *(void *)&long long v52 = 2489;
      *((void *)&v52 + 1) = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetIdentifier(const string &)";
      LOBYTE(v53) = 0;
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v17 = (const char *)a2;
      }
      else {
        unint64_t v17 = (const char *)a2->__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid identifier '%s'", v17);
    }
LABEL_77:
    sub_2167877AC((uint64_t)&v41, v42);
    if (SHIBYTE(v45) < 0) {
      operator delete((void *)__p);
    }
  }
  sub_2167877AC((uint64_t)&v46, v47);
  if (SHIBYTE(v50) < 0) {
    operator delete((void *)v49);
  }
}

void sub_216AB14E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,void *a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,char a55,void *a56)
{
  if (*(char *)(v56 - 169) < 0) {
    operator delete(*(void **)(v56 - 192));
  }
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a26);
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  sub_2167877AC((uint64_t)&a45, a46);
  if (a53 < 0) {
    operator delete(a48);
  }
  sub_2167877AC((uint64_t)&a55, a56);
  if (*(char *)(v56 - 193) < 0) {
    operator delete(*(void **)(v56 - 216));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetAssetName(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return *((void *)this + 59) + 96;
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::GetDisplayName(const std::string **this@<X0>, std::string *a2@<X8>)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return *((void *)this + 59) + 24;
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileExtension(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_GetExtension((const std::string *)(*((void *)this + 59) + 24));
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (!v4)
  {
    char v5 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_216979288((uint64_t *)this + 5);
    PrimaryFileExtension = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetPrimaryFileExtension(v5);
    std::string::operator=((std::string *)a2, PrimaryFileExtension);
  }
}

void sub_216AB16B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetRepositoryPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return *((void *)this + 59) + 120;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetVersion(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return *((void *)this + 59) + 72;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetAssetInfo(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return *((void *)this + 59) + 144;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetHints(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(this)) {
    return 1;
  }
  else {
    return *((unsigned __int8 *)this + 516);
  }
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::GetMetadata(pxrInternal__aapl__pxrReserved__::SdfLayer **this@<X0>, uint64_t *a2@<X8>)
{
  v11[2] = *(void ***)MEMORY[0x263EF8340];
  uint64_t v4 = (char *)operator new(0x40uLL);
  *((_DWORD *)v4 + 2) = 1;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_26C7586F0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *((_DWORD *)v4 + 14) = 1065353216;
  *a2 = (uint64_t)v4;
  char v5 = (const pxrInternal__aapl__pxrReserved__::SdfAbstractData *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v4);
  uint64_t v6 = sub_2169D1B08(a2);
  (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfAbstractData *, uint64_t))(*(void *)v6 + 64))(v6, v5, 7);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_ListFields(this[10], this[14], v5, (uint64_t)v10);
  uint64_t v7 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v10[0];
  int v8 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v10[1];
  while (v7 != v8)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetField((pxrInternal__aapl__pxrReserved__::SdfLayer *)this, v5, v7, (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    uint64_t v9 = sub_2169D1B08(a2);
    (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfAbstractData *, const pxrInternal__aapl__pxrReserved__::TfToken *, void ***))(*(void *)v9 + 152))(v9, v5, v7, v11);
    sub_2168EE084((uint64_t)v11);
    uint64_t v7 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v7 + 8);
  }
  v11[0] = (void **)v10;
  sub_216889A04(v11);
}

void sub_216AB18A4(_Unwind_Exception *a1)
{
  sub_2169CC880(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ListFields(pxrInternal__aapl__pxrReserved__::SdfLayer **this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ComputeAbsolutePath@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  char v6 = v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (!v5) {
    goto LABEL_6;
  }
  uint64_t v7 = result;
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(a2);
  if (result)
  {
    char v6 = *(unsigned char *)(a2 + 23);
LABEL_6:
    if (v6 < 0)
    {
      int v8 = *(void **)a2;
      unint64_t v9 = *(void *)(a2 + 8);
      return (uint64_t)sub_216778F24((unsigned char *)a3, v8, v9);
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
    }
    return result;
  }
  pxrInternal__aapl__pxrReserved__::SdfCreateHandle<pxrInternal__aapl__pxrReserved__::SdfLayer>(v7, &v10);
  pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer(&v10, a2, a3);
  uint64_t result = v11;
  if (v11 && atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_216AB19F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::DetachedLayerRules::Include(uint64_t a1, uint64_t a2)
{
  sub_21695F4FC((uint64_t *)a1, *(std::string **)(a1 + 8), *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  uint64_t v3 = *(long long **)(a1 + 8);
  unint64_t v4 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(void *)a1) >> 3));
  if (v3 == *(long long **)a1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  sub_216878D58(*(void *)a1, v3, (uint64_t)&v8, v5, 1);
  char v6 = sub_216ABCE20(*(unsigned __int8 **)a1, *(unsigned __int8 **)(a1 + 8), (uint64_t)&v9);
  sub_216AB1AAC(a1, (uint64_t)v6, *(long long **)(a1 + 8));
  return a1;
}

uint64_t sub_216AB1AAC(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    sub_216A3104C((uint64_t)&v9, a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::DetachedLayerRules::Exclude(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 24;
  sub_21695F4FC((uint64_t *)(a1 + 24), *(std::string **)(a1 + 32), *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(long long **)(a1 + 32);
  unint64_t v6 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - v4) >> 3));
  if (v5 == (long long *)v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  sub_216878D58(v4, v5, (uint64_t)&v10, v7, 1);
  char v8 = sub_216ABCE20(*(unsigned __int8 **)(a1 + 24), *(unsigned __int8 **)(a1 + 32), (uint64_t)&v11);
  sub_216AB1AAC(v3, (uint64_t)v8, *(long long **)(a1 + 32));
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::DetachedLayerRules::IsIncluded(uint64_t *a1, const std::string *a2)
{
  if (!*((unsigned char *)a1 + 48) && *a1 == a1[1] || pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier((uint64_t)a2)) {
    return 0;
  }
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v16 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v14 = 0;
  if ((pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier(a2, (uint64_t)v15, (uint64_t)__p) & 1) == 0) {
    goto LABEL_23;
  }
  if (*((unsigned char *)a1 + 48)) {
    goto LABEL_7;
  }
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  if (*a1 == v10) {
    goto LABEL_23;
  }
  while (1)
  {
    char v11 = *(char *)(v9 + 23) >= 0 ? (char *)v9 : *(char **)v9;
    if (pxrInternal__aapl__pxrReserved__::TfStringContains((char **)v15, v11)) {
      break;
    }
    v9 += 24;
    if (v9 == v10)
    {
      uint64_t v9 = v10;
      break;
    }
  }
  if (v9 != a1[1])
  {
LABEL_7:
    uint64_t v5 = a1[3];
    uint64_t v6 = a1[4];
    if (v5 == v6)
    {
      uint64_t v8 = a1[3];
    }
    else
    {
      while (1)
      {
        uint64_t v7 = *(char *)(v5 + 23) >= 0 ? (char *)v5 : *(char **)v5;
        if (pxrInternal__aapl__pxrReserved__::TfStringContains((char **)v15, v7)) {
          break;
        }
        v5 += 24;
        if (v5 == v6)
        {
          uint64_t v5 = v6;
          break;
        }
      }
      uint64_t v8 = v5;
      uint64_t v5 = a1[4];
    }
    BOOL v4 = v8 == v5;
  }
  else
  {
LABEL_23:
    BOOL v4 = 0;
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
  return v4;
}

void sub_216AB1D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetDetachedLayerRules(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  unint64_t v2 = atomic_load((unint64_t *)&qword_267B8EDF0);
  if (!v2) {
    unint64_t v2 = sub_216ABCF04();
  }
  memset(v19, 0, sizeof(v19));
  sub_216812BD8((char *)v19, *(long long **)v2, *(long long **)(v2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v2 + 8) - *(void *)v2) >> 3));
  memset(v20, 0, sizeof(v20));
  sub_216812BD8((char *)v20, *(long long **)(v2 + 24), *(long long **)(v2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v2 + 32) - *(void *)(v2 + 24)) >> 3));
  char v21 = *(unsigned char *)(v2 + 48);
  unint64_t v3 = atomic_load((unint64_t *)&qword_267B8EDF0);
  if (!v3) {
    unint64_t v3 = sub_216ABCF04();
  }
  if (v3 != a1)
  {
    sub_21680F694(v3, *(std::string **)a1, *(long long **)(a1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3));
    sub_21680F694(v3 + 24, *(std::string **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  }
  *(unsigned char *)(v3 + 48) = *(unsigned char *)(a1 + 48);
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v22);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v18);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetLoadedLayers((uint64_t)&v16);
  BOOL v4 = v16;
  if (v16 != (void **)v17)
  {
    do
    {
      uint64_t v5 = sub_2169791E0((uint64_t *)v4 + 4);
      BOOL IsIncluded = pxrInternal__aapl__pxrReserved__::SdfLayer::DetachedLayerRules::IsIncluded(v19, *(const std::string **)(v5 + 472));
      uint64_t v7 = sub_2169791E0((uint64_t *)v4 + 4);
      BOOL v8 = pxrInternal__aapl__pxrReserved__::SdfLayer::DetachedLayerRules::IsIncluded((uint64_t *)a1, *(const std::string **)(v7 + 472));
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v4 + 4);
      Isuint64_t Detached = pxrInternal__aapl__pxrReserved__::SdfLayer::IsDetached(v9);
      if (((IsIncluded | IsDetached | !v8) & 1) == 0)
      {
        char v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v4 + 4);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_Reload(v11, 1);
      }
      if (IsIncluded && !v8 && ((IsDetached ^ 1) & 1) == 0)
      {
        BOOL v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v4 + 4);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_Reload(v12, 1);
      }
      int v13 = (void **)v4[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          int v13 = (void **)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void **)v4[2];
          BOOL v15 = *v14 == v4;
          BOOL v4 = v14;
        }
        while (!v15);
      }
      BOOL v4 = v14;
    }
    while (v14 != (void **)v17);
  }
  sub_21699DA30((uint64_t)&v16, v17[0]);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v18);
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v22);
  uint64_t v16 = (void **)v20;
  sub_216782F20(&v16);
  uint64_t v16 = (void **)v19;
  sub_216782F20(&v16);
}

void sub_216AB1FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void *);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va);
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)va2);
  sub_216AB217C((void **)va1);
  _Unwind_Resume(a1);
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::SdfLayer::GetLoadedLayers@<X0>(uint64_t a1@<X8>)
{
  sub_216AA5724();
  v5[0] = 0;
  __int16 v6 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v5, &qword_267B8EE00, 0);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *)atomic_load((unint64_t *)&qword_267B8EDE8);
  if (!v3) {
    unint64_t v3 = sub_216ABB6C8(&qword_267B8EDE8);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::GetLayers(v3, a1);
  return sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)v5);
}

void sub_216AB20A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::IsDetached(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  sub_216ABD4BC(&v5, (uint64_t *)this + 14);
  uint64_t v1 = sub_216A5B4F4(&v5);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  uint64_t v3 = v6;
  if (v6 && atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return v2;
}

void sub_216AB2164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

void **sub_216AB217C(void **a1)
{
  uint64_t v3 = a1 + 3;
  sub_216782F20(&v3);
  uint64_t v3 = a1;
  sub_216782F20(&v3);
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetDetachedLayerRules(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  unint64_t result = atomic_load((unint64_t *)&qword_267B8EDF0);
  if (!result) {
    return sub_216ABCF04();
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::GetMutedLayers(uint64_t *a1@<X8>)
{
  uint64_t v3 = (char *)atomic_load((unint64_t *)&qword_267B8EDD8);
  if (!v3) {
    uint64_t v3 = sub_2168E8DD8(&qword_267B8EDD8);
  }
  std::mutex::lock((std::mutex *)v3);
  BOOL v4 = (const void ***)atomic_load((unint64_t *)&qword_267B8EDF8);
  if (!v4) {
    BOOL v4 = (const void ***)sub_216ABD1D4(&qword_267B8EDF8);
  }
  sub_216ABD240(a1, v4);

  std::mutex::unlock((std::mutex *)v3);
}

void sub_216AB2268(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetMuted(pxrInternal__aapl__pxrReserved__::SdfLayer *this, int a2)
{
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this) != a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::_GetMutedPath(this, (uint64_t)__p);
    if (a2) {
      pxrInternal__aapl__pxrReserved__::SdfLayer::AddToMutedLayers((const void **)__p);
    }
    else {
      pxrInternal__aapl__pxrReserved__::SdfLayer::RemoveFromMutedLayers((const void **)__p);
    }
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_216AB22EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::AddToMutedLayers(const void **a1)
{
  uint64_t v2 = (char *)atomic_load((unint64_t *)&qword_267B8EDD8);
  if (!v2) {
    uint64_t v2 = sub_2168E8DD8(&qword_267B8EDD8);
  }
  std::mutex::lock((std::mutex *)v2);
  atomic_fetch_add((atomic_ullong *volatile)&qword_26798B370, 1uLL);
  uint64_t v3 = (uint64_t **)atomic_load((unint64_t *)&qword_267B8EDF8);
  if (!v3) {
    uint64_t v3 = (uint64_t **)sub_216ABD1D4(&qword_267B8EDF8);
  }
  sub_21680EE0C(v3, a1, (uint64_t)a1);
  char v5 = v4;
  std::mutex::unlock((std::mutex *)v2);
  if (v5)
  {
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    long long v39 = (char *)&v40;
    pxrInternal__aapl__pxrReserved__::SdfLayer::Find((uint64_t)a1, (uint64_t)&v39, &v45);
    sub_2167877AC((uint64_t)&v39, v40);
    uint64_t v6 = sub_21697CF14(&v45);
    if (v7 & 1 | (unint64_t)v6)
    {
      BOOL v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v45);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(v8))
      {
        uint64_t v9 = sub_2169791E0(&v45);
        sub_216AA4E08((uint64_t *)(v9 + 40), *(const std::string **)(v9 + 472), &v44);
        uint64_t v10 = sub_2169791E0(&v45);
        uint64_t v11 = sub_216A5B7B0((uint64_t *)(v10 + 112));
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 24))(v11))
        {
          uint64_t v12 = (char *)atomic_load((unint64_t *)&qword_267B8EDD8);
          if (!v12) {
            uint64_t v12 = sub_2168E8DD8(&qword_267B8EDD8);
          }
          std::mutex::lock((std::mutex *)v12);
          unint64_t v13 = atomic_load((unint64_t *)&qword_267B8EDE0);
          if (!v13) {
            unint64_t v13 = sub_216ABB5B0(&qword_267B8EDE0);
          }
          uint64_t v14 = sub_21678C2D8(v13, a1);
          unint64_t v15 = atomic_load((unint64_t *)&qword_267B8EDE0);
          if (!v15) {
            unint64_t v15 = sub_216ABB5B0(&qword_267B8EDE0);
          }
          if (v15 + 8 != v14)
          {
            long long v39 = "sdf/layer.cpp";
            uint64_t v40 = (atomic_uint *)"AddToMutedLayers";
            uint64_t v41 = 2881;
            uint64_t v42 = "static void pxrInternal__aapl__pxrReserved__::SdfLayer::AddToMutedLayers(const string &)";
            char v43 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "(*_mutedLayerData).find(path) == (*_mutedLayerData).end()", 0);
          }
          uint64_t v16 = sub_2169791E0(&v45);
          unint64_t v17 = (uint64_t **)atomic_load((unint64_t *)&qword_267B8EDE0);
          if (!v17) {
            unint64_t v17 = (uint64_t **)sub_216ABB5B0(&qword_267B8EDE0);
          }
          long long v39 = (char *)a1;
          unint64_t v18 = sub_216ABD324(v17, a1, (uint64_t)&unk_2174BFD90, (long long **)&v39);
          std::type_info v19 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v18[7];
          v18 += 7;
          uint64_t *v18 = *(void *)(v16 + 112);
          sub_2168BD80C((uint64_t *)(v16 + 112));
          sub_2168BD378((int)v18, v19);
          std::mutex::unlock((std::mutex *)v12);
          uint64_t v20 = sub_2169791E0(&v45);
          sub_216AA12F0((uint64_t *)&v39, (uint64_t *)&v44);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_SetData(v20, (uint64_t *)&v39, 0);
          char v21 = v40;
          if (v40 && atomic_fetch_add_explicit(v40 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v21 + 8))(v21);
          }
        }
        else
        {
          uint64_t v23 = sub_2169791E0(&v45);
          sub_216AA4E08((uint64_t *)(v23 + 40), *(const std::string **)(v23 + 472), &v38);
          uint64_t v24 = sub_216A5B7B0((uint64_t *)&v38);
          uint64_t v25 = sub_2169791E0(&v45);
          sub_216ABD4BC((uint64_t *)&v39, (uint64_t *)(v25 + 112));
          (*(void (**)(uint64_t, char **))(*(void *)v24 + 16))(v24, &v39);
          BOOL v26 = v40;
          if (v40 && atomic_fetch_add_explicit(v40 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v26 + 8))(v26);
          }
          uint64_t v27 = (char *)atomic_load((unint64_t *)&qword_267B8EDD8);
          if (!v27) {
            uint64_t v27 = sub_2168E8DD8(&qword_267B8EDD8);
          }
          std::mutex::lock((std::mutex *)v27);
          unint64_t v28 = atomic_load((unint64_t *)&qword_267B8EDE0);
          if (!v28) {
            unint64_t v28 = sub_216ABB5B0(&qword_267B8EDE0);
          }
          uint64_t v29 = sub_21678C2D8(v28, a1);
          unint64_t v30 = atomic_load((unint64_t *)&qword_267B8EDE0);
          if (!v30) {
            unint64_t v30 = sub_216ABB5B0(&qword_267B8EDE0);
          }
          if (v30 + 8 != v29)
          {
            long long v39 = "sdf/layer.cpp";
            uint64_t v40 = (atomic_uint *)"AddToMutedLayers";
            uint64_t v41 = 2895;
            uint64_t v42 = "static void pxrInternal__aapl__pxrReserved__::SdfLayer::AddToMutedLayers(const string &)";
            char v43 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "(*_mutedLayerData).find(path) == (*_mutedLayerData).end()", 0);
          }
          std::string v31 = (uint64_t **)atomic_load((unint64_t *)&qword_267B8EDE0);
          if (!v31) {
            std::string v31 = (uint64_t **)sub_216ABB5B0(&qword_267B8EDE0);
          }
          long long v39 = (char *)a1;
          uint64_t v32 = sub_216ABD324(v31, a1, (uint64_t)&unk_2174BFD90, (long long **)&v39);
          uint64_t v33 = (char *)v32[7];
          v32[7] = (uint64_t)v38;
          std::string v38 = v33;
          long long v39 = 0;
          sub_2168BD378((int)&v38, 0);
          sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v39);
          std::mutex::unlock((std::mutex *)v27);
          uint64_t v34 = sub_2169791E0(&v45);
          sub_216AA12F0((uint64_t *)&v39, (uint64_t *)&v44);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_SetData(v34, (uint64_t *)&v39, 0);
          uint64_t v35 = v40;
          if (v40 && atomic_fetch_add_explicit(v40 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v35 + 8))(v35);
          }
          sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v38);
        }
        int v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v45);
        if ((pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(v36) & 1) == 0)
        {
          long long v39 = "sdf/layer.cpp";
          uint64_t v40 = (atomic_uint *)"AddToMutedLayers";
          uint64_t v41 = 2902;
          uint64_t v42 = "static void pxrInternal__aapl__pxrReserved__::SdfLayer::AddToMutedLayers(const string &)";
          char v43 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "layer->IsDirty()", 0);
        }
        sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v44);
      }
      else
      {
        char v22 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v45);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_Reload(v22, 1);
      }
    }
    uint64_t v37 = v46;
    if (v46)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v46 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
      }
    }
    sub_216ABA7CC((uint64_t)&v39, (long long *)a1, 1);
    pxrInternal__aapl__pxrReserved__::TfNotice::Send((pxrInternal__aapl__pxrReserved__::TfNotice *)&v39);
    pxrInternal__aapl__pxrReserved__::SdfNotice::LayerMutenessChanged::~LayerMutenessChanged((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerMutenessChanged *)&v39);
  }
}

void sub_216AB28F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a15, uint64_t a16, uint64_t a17)
{
  std::mutex::unlock(v17);
  sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&a9);
  sub_216AA10A8(&a15);
  uint64_t v19 = a17;
  if (a17)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a17 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::RemoveFromMutedLayers(const void **a1)
{
  uint64_t v2 = (char *)atomic_load((unint64_t *)&qword_267B8EDD8);
  if (!v2) {
    uint64_t v2 = sub_2168E8DD8(&qword_267B8EDD8);
  }
  std::mutex::lock((std::mutex *)v2);
  atomic_fetch_add((atomic_ullong *volatile)&qword_26798B370, 1uLL);
  uint64_t v3 = (uint64_t **)atomic_load((unint64_t *)&qword_267B8EDF8);
  if (!v3) {
    uint64_t v3 = (uint64_t **)sub_216ABD1D4(&qword_267B8EDF8);
  }
  uint64_t v4 = sub_216839B20(v3, a1);
  std::mutex::unlock((std::mutex *)v2);
  if (v4)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v19 = &v20;
    pxrInternal__aapl__pxrReserved__::SdfLayer::Find((uint64_t)a1, (uint64_t)&v19, &v25);
    sub_2167877AC((uint64_t)&v19, v20);
    char v5 = sub_21697CF14(&v25);
    if (v6 & 1 | (unint64_t)v5)
    {
      char v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v25);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(v7))
      {
        uint64_t v24 = 0;
        BOOL v8 = (char *)atomic_load((unint64_t *)&qword_267B8EDD8);
        if (!v8) {
          BOOL v8 = sub_2168E8DD8(&qword_267B8EDD8);
        }
        std::mutex::lock((std::mutex *)v8);
        unint64_t v9 = atomic_load((unint64_t *)&qword_267B8EDE0);
        if (!v9) {
          unint64_t v9 = sub_216ABB5B0(&qword_267B8EDE0);
        }
        uint64_t v10 = (uint64_t *)sub_21678C2D8(v9, a1);
        unint64_t v11 = atomic_load((unint64_t *)&qword_267B8EDE0);
        if (!v11) {
          unint64_t v11 = sub_216ABB5B0(&qword_267B8EDE0);
        }
        if ((uint64_t *)(v11 + 8) != v10
          || (uint64_t v19 = (atomic_uint **)"sdf/layer.cpp",
              uint64_t v20 = (atomic_uint *)"RemoveFromMutedLayers",
              uint64_t v21 = 2931,
              char v22 = "static void pxrInternal__aapl__pxrReserved__::SdfLayer::RemoveFromMutedLayers(const string &)",
              char v23 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v19, "i != _mutedLayerData->end()", 0) & 1) != 0))
        {
          uint64_t v12 = v24;
          uint64_t v24 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v10[7];
          v10[7] = (uint64_t)v12;
          uint64_t v19 = 0;
          sub_2168BD378(v10 + 56, 0);
          sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v19);
          unint64_t v13 = (uint64_t **)atomic_load((unint64_t *)&qword_267B8EDE0);
          if (!v13) {
            unint64_t v13 = (uint64_t **)sub_216ABB5B0(&qword_267B8EDE0);
          }
          sub_2167AE00C(v13, v10);
          sub_216ABB678((uint64_t)(v10 + 4));
          operator delete(v10);
        }
        std::mutex::unlock((std::mutex *)v8);
        if (v24
          || (uint64_t v19 = (atomic_uint **)"sdf/layer.cpp",
              uint64_t v20 = (atomic_uint *)"RemoveFromMutedLayers",
              uint64_t v21 = 2936,
              char v22 = "static void pxrInternal__aapl__pxrReserved__::SdfLayer::RemoveFromMutedLayers(const string &)",
              char v23 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v19, "mutedData", 0) & 1) != 0))
        {
          uint64_t v14 = sub_2169791E0(&v25);
          sub_216AA12F0((uint64_t *)&v19, (uint64_t *)&v24);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_SetData(v14, (uint64_t *)&v19, 0);
          unint64_t v15 = v20;
          if (v20)
          {
            if (atomic_fetch_add_explicit(v20 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v15 + 8))(v15);
            }
          }
        }
        uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v25);
        if ((pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(v16) & 1) == 0)
        {
          uint64_t v19 = (atomic_uint **)"sdf/layer.cpp";
          uint64_t v20 = (atomic_uint *)"RemoveFromMutedLayers";
          uint64_t v21 = 2943;
          char v22 = "static void pxrInternal__aapl__pxrReserved__::SdfLayer::RemoveFromMutedLayers(const string &)";
          char v23 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v19, "layer->IsDirty()", 0);
        }
        sub_216AA10A8(&v24);
      }
      else
      {
        unint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v25);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_Reload(v17, 1);
      }
    }
    uint64_t v18 = v26;
    if (v26)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      }
    }
    sub_216ABA7CC((uint64_t)&v19, (long long *)a1, 0);
    pxrInternal__aapl__pxrReserved__::TfNotice::Send((pxrInternal__aapl__pxrReserved__::TfNotice *)&v19);
    pxrInternal__aapl__pxrReserved__::SdfNotice::LayerMutenessChanged::~LayerMutenessChanged((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerMutenessChanged *)&v19);
  }
}

void sub_216AB2E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a14, uint64_t a15, uint64_t a16)
{
  sub_216AA10A8(&a14);
  uint64_t v17 = a16;
  if (a16)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(const void **a1)
{
  uint64_t v2 = (char *)atomic_load((unint64_t *)&qword_267B8EDD8);
  if (!v2) {
    uint64_t v2 = sub_2168E8DD8(&qword_267B8EDD8);
  }
  std::mutex::lock((std::mutex *)v2);
  unint64_t v3 = atomic_load((unint64_t *)&qword_267B8EDF8);
  if (!v3) {
    unint64_t v3 = sub_216ABD1D4(&qword_267B8EDF8);
  }
  BOOL v4 = sub_21677B088(v3, a1) != 0;
  std::mutex::unlock((std::mutex *)v2);
  return v4;
}

void sub_216AB2FC8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_ShouldNotify(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return *((unsigned char *)this + 466) && *((unsigned char *)this + 465) != 0;
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::Clear(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  if (*((unsigned char *)this + 513) && !pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
  {
    uint64_t v2 = sub_216A5B7B0((uint64_t *)this + 14);
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
    sub_216AA4E08((uint64_t *)this + 5, *((const std::string **)this + 59), &v6);
    sub_216AA12F0((uint64_t *)&v7, (uint64_t *)&v6);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_SetData((uint64_t)this, (uint64_t *)&v7, 0);
    BOOL v4 = v8;
    if (v8 && atomic_fetch_add_explicit((atomic_uint *volatile)v8 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(const char *))(*(void *)v4 + 8))(v4);
    }
    sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v6);
    if (v3)
    {
      uint64_t v5 = sub_216AA2D04((uint64_t *)this + 15);
      (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
    }
  }
  else
  {
    char v7 = "sdf/layer.cpp";
    BOOL v8 = "Clear";
    uint64_t v9 = 2965;
    uint64_t v10 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::Clear()";
    char v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v7, 1, (pxrInternal__aapl__pxrReserved__ *)"Clear: Permission denied.");
  }
}

void sub_216AB3150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = a11;
  if (a11)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  sub_216AA10A8(&a9);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_UpdateLastDirtinessState(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  int IsDirty = pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(this);
  int v3 = *((unsigned __int8 *)this + 467);
  if (v3 != IsDirty) {
    *((unsigned char *)this + 467) = pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(this);
  }
  return v3 != IsDirty;
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfLayer::GetStateDelegate@<X0>(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, uint64_t *a2@<X8>)
{
  return sub_216ABD5A4(a2, (uint64_t *)this + 15);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetStateDelegate(uint64_t a1, uint64_t *a2)
{
  if (*a2)
  {
    BOOL v4 = (uint64_t *)(a1 + 120);
    uint64_t v5 = sub_216AA2D04((uint64_t *)(a1 + 120));
    char v11 = 0;
    uint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::_SetLayer(v5, (uint64_t)&v11);
    char v6 = v12;
    if (v12 && atomic_fetch_add_explicit((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(const char *))(*(void *)v6 + 8))(v6);
    }
    char v7 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 120);
    *(void *)(a1 + 12sub_2168EBBB8(&a9, 0) = *a2;
    sub_2168BD80C(a2);
    sub_2168BD378((int)v4, v7);
    uint64_t v8 = sub_216AA2D04(v4);
    pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::_SetLayer(v8, a1 + 24);
    int v9 = *(unsigned __int8 *)(a1 + 467);
    uint64_t v10 = *(void *)sub_216AA2D04(v4);
    if (v9) {
      (*(void (**)(void))(v10 + 32))();
    }
    else {
      (*(void (**)(void))(v10 + 24))();
    }
  }
  else
  {
    char v11 = "sdf/layer.cpp";
    uint64_t v12 = "SetStateDelegate";
    uint64_t v13 = 3009;
    uint64_t v14 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetStateDelegate(const SdfLayerStateDelegateBaseRefPtr &)";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid layer state delegate");
  }
}

void sub_216AB336C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    sub_217324208(a11);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::IsEmpty(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
}

void sub_216AB3428(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, std::__shared_weak_count *a6, uint64_t a7, ...)
{
  va_start(va, a7);
  if (a3) {
    sub_216784EC4(a3);
  }
  if (a6) {
    sub_216784EC4(a6);
  }
  sub_216991118((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::StreamsData(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  sub_216ABD4BC(&v5, (uint64_t *)this + 14);
  uint64_t v1 = sub_216A5B4F4(&v5);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 24))(v1);
  uint64_t v3 = v6;
  if (v6 && atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return v2;
}

void sub_216AB3514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfLayer::_GetData@<X0>(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, uint64_t *a2@<X8>)
{
  return sub_216ABD4BC(a2, (uint64_t *)this + 14);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent(pxrInternal__aapl__pxrReserved__::SdfLayer *this, uint64_t *a2)
{
  if (*((unsigned char *)this + 513) && !pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
  {
    if (*((unsigned char *)this + 466)) {
      BOOL v5 = *((unsigned char *)this + 465) != 0;
    }
    else {
      BOOL v5 = 0;
    }
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)this + 112);
    uint64_t v7 = sub_216A5B7B0((uint64_t *)this + 14);
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
    int v9 = v8;
    __p.__r_.__value_.__r.__words[0] = 0;
    if (!v5 || v8)
    {
      sub_216AA4E08((uint64_t *)this + 5, *((const std::string **)this + 59), &v21);
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)__p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      uint64_t v21 = 0;
      sub_2168BD378((int)&__p, v12);
      sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v21);
      uint64_t v13 = sub_216A5B7B0((uint64_t *)&__p);
      uint64_t v14 = sub_2169791E0(a2);
      sub_216ABD4BC((uint64_t *)&v21, (uint64_t *)(v14 + 112));
      (*(void (**)(uint64_t, char **))(*(void *)v13 + 16))(v13, &v21);
      char v15 = v22;
      if (v22 && atomic_fetch_add_explicit((atomic_uint *volatile)v22 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(const char *))(*(void *)v15 + 8))(v15);
      }
    }
    else
    {
      uint64_t v10 = sub_2169791E0(a2);
      char v11 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)__p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = *(void *)(v10 + 112);
      sub_2168BD80C((uint64_t *)(v10 + 112));
      sub_2168BD378((int)&__p, v11);
    }
    if (v5)
    {
      sub_216AA12F0((uint64_t *)&v21, (uint64_t *)&__p);
      uint64_t v16 = sub_2169791E0(a2);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_SetData((uint64_t)this, (uint64_t *)&v21, *(void *)(v16 + 80));
      uint64_t v17 = v22;
      if (v22 && atomic_fetch_add_explicit((atomic_uint *volatile)v22 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(const char *))(*(void *)v17 + 8))(v17);
      }
    }
    else
    {
      uint64_t v18 = *v6;
      *uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)__p.__r_.__value_.__r.__words[0];
      sub_2168BD80C((uint64_t *)&__p);
      sub_2168BD378(this + 112, v18);
    }
    *((unsigned char *)this + 516) = *(unsigned char *)(sub_2169791E0(a2) + 516);
    if (v9)
    {
      uint64_t v19 = sub_216AA2D04((uint64_t *)this + 15);
      (*(void (**)(uint64_t))(*(void *)v19 + 32))(v19);
    }
    sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&__p);
  }
  else
  {
    uint64_t v21 = "sdf/layer.cpp";
    char v22 = "TransferContent";
    uint64_t v23 = 3065;
    uint64_t v24 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent(const SdfLayerHandle &)";
    char v25 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_GetLayerDisplayName(*((const std::string **)this + 59), &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"TransferContent of '%s': Permission denied.", (const char *)p_p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_216AB3820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18)
{
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::GetCompositionAssetDependencies(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(this, (uint64_t)v9);
  if (sub_216ABBF20((uint64_t)v9)) {
    BOOL v4 = v9;
  }
  else {
    BOOL v4 = 0;
  }
  *((void *)&v7 + 1) = v4;
  uint64_t v8 = 0;
  sub_216AB3AB4((uint64_t)v9, (uint64_t)&v6);
  sub_216ABD770(a2, &v7, &v6);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(this, &v5);
  sub_216AB3B44(&v5);
}

void sub_216AB3958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a9);
  sub_21678A498(v17, *(char **)(v17 + 8));
  if (a17) {
    sub_216784EC4(a17);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::UpdateCompositionAssetDependency(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(a1, (uint64_t)v12);
    unint64_t v7 = sub_216AB3F70((uint64_t)v12, (unsigned __int8 **)a2);
    int v8 = v7;
    if (v7 == -1)
    {
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(a1, &v11);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_UpdatePrimCompositionDependencyPaths((uint64_t)a1, &v11, a2);
    }
    pxrInternal__aapl__pxrReserved__::SdfLayer::RemoveSubLayerPath(a1, v7);
    uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a3 + 8);
    }
    if (v9) {
      pxrInternal__aapl__pxrReserved__::SdfLayer::InsertSubLayerPath(a1, (long long *)a3, v8);
    }
    if (v13) {
      sub_216784EC4(v13);
    }
  }
  return v3 != 0;
}

void sub_216AB3A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(a1);
}

void *sub_216AB3AB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = sub_216ABBF20(a1);
  unint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    unint64_t result = (void *)(*(uint64_t (**)(void *, void))(*result + 112))(result, *(unsigned int *)(a1 + 16));
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[1] - *result) >> 3);
  }
  else
  {
    unint64_t v6 = 0;
  }
  if (v4) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = 0;
  }
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = v6;
  return result;
}

void sub_216AB3B44(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1)
{
  uint64_t v2 = (uint64_t **)sub_216A663FC(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v2, &v9);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v9);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v3, &__p);
  BOOL v4 = pxrInternal__aapl__pxrReserved__::SdfSpec::operator==(a1, &__p);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
  uint64_t v5 = v10;
  if (v10 && atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  if (!v4)
  {
    unint64_t v6 = (atomic_uint **)sub_216A663FC(a1);
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetReferenceList(v6);
  }
  uint64_t v7 = (uint64_t **)sub_216A663FC(a1);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildren(v7);
}

void sub_216AB3E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, void *__p, std::__shared_weak_count *a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24)
{
  if (a15) {
    sub_216784EC4(a15);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_216AB3F70(uint64_t a1, unsigned __int8 **a2)
{
  if (!sub_21697E6A8(a1)) {
    return -1;
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(unsigned int *)(a1 + 16);

  return sub_216ABDA28(v4, v5, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::_UpdatePrimCompositionDependencyPaths(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a3 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a3 + 8);
  }
  if (v3)
  {
    uint64_t v4 = (atomic_uint **)sub_216A663FC(a2);
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetReferenceList(v4);
  }
  v5[0] = "sdf/layer.cpp";
  v5[1] = "_UpdatePrimCompositionDependencyPaths";
  v5[2] = 3233;
  void v5[3] = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_UpdatePrimCompositionDependencyPaths(const SdfPrimSpecHandle"
          " &, const string &, const string &)";
  char v6 = 0;
  int v7 = 4;
  pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", (char *)a3, "!oldLayerPath.empty()");
}

void sub_216AB42F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,int a28,__int16 a29,char a30,char a31,uint64_t a32)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetExternalAssetDependencies(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)sub_216979288((uint64_t *)this + 5) + 96);

  return v1();
}

void sub_216AB442C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (sub_216ABDD60((uint64_t)a1))
  {
    uint64_t v4 = *a1;
    uint64_t v6 = *a2;
    sub_216ABDDD8((char *)&v7, (long long *)(a2 + 1));
    uint64_t v12 = 0;
    uint64_t v5 = (char *)operator new(0x40uLL);
    *(void *)uint64_t v5 = &unk_26C758EF0;
    *((void *)v5 + 1) = v6;
    *((void *)v5 + 4) = v8;
    *((_OWORD *)v5 + 1) = v7;
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    *((void *)v5 + 7) = v10;
    *(_OWORD *)(v5 + 4sub_2168EBBB8(&a9, 0) = *(_OWORD *)__p;
    __p[1] = 0;
    uint64_t v10 = 0;
    __p[0] = 0;
    uint64_t v12 = v5;
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 64))(v4, v11);
    sub_216A998C8(v11);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete((void *)v7);
    }
  }
}

void sub_216AB4568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

uint64_t sub_216AB4594(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_216AB45D8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (sub_216ABE404((uint64_t)a1))
  {
    uint64_t v4 = *a1;
    uint64_t v6 = *a2;
    sub_216ABDDD8((char *)&v7, (long long *)(a2 + 1));
    uint64_t v12 = 0;
    uint64_t v5 = (char *)operator new(0x40uLL);
    *(void *)uint64_t v5 = &unk_26C758F88;
    *((void *)v5 + 1) = v6;
    *((void *)v5 + 4) = v8;
    *((_OWORD *)v5 + 1) = v7;
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    *((void *)v5 + 7) = v10;
    *(_OWORD *)(v5 + 4sub_2168EBBB8(&a9, 0) = *(_OWORD *)__p;
    __p[1] = 0;
    uint64_t v10 = 0;
    __p[0] = 0;
    uint64_t v12 = v5;
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 64))(v4, v11);
    sub_216A9A0F0(v11);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete((void *)v7);
    }
  }
}

void sub_216AB4714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::SdfLayer::DumpLayerInfo(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  sub_216AA5724();
  v7[0] = 0;
  __int16 v8 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v7, &qword_267B8EE00, 0);
  uint64_t v1 = sub_216779180(MEMORY[0x263F8C0F8], (uint64_t)"Layer Registry Dump:", 20);
  std::ios_base::getloc((const std::ios_base *)((char *)v1 + *(void *)(*v1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v9, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v9);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *)atomic_load((unint64_t *)&qword_267B8EDE8);
  if (!v3) {
    uint64_t v3 = sub_216ABB6C8(&qword_267B8EDE8);
  }
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::operator<<(v1, v3);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v9, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v9);
  std::ostream::put();
  std::ostream::flush();
  return sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)v7);
}

void sub_216AB48C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::locale::~locale((std::locale *)(v2 - 24));
  sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::WriteDataFile(uint64_t a1)
{
  v7[19] = *MEMORY[0x263EF8340];
  sub_21681B4C8(&v5);
  uint64_t v2 = sub_216A5B7B0((uint64_t *)(a1 + 112));
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 56))(v2, &v5);
  BOOL v3 = *(_DWORD *)&v6[*(void *)(v5 - 24) + 24] == 0;
  uint64_t v5 = *MEMORY[0x263F8C2B0];
  *(void *)&v6[*(void *)(v5 - 24) - 8] = *(void *)(MEMORY[0x263F8C2B0] + 24);
  MEMORY[0x21D447910](v6);
  std::ostream::~ostream();
  MEMORY[0x21D447E60](v7);
  return v3;
}

void sub_216AB4A6C(_Unwind_Exception *exception_object)
{
}

void *sub_216AB4A88(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B0];
  uint64_t v3 = *MEMORY[0x263F8C2B0];
  *a1 = *MEMORY[0x263F8C2B0];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x21D447910](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x21D447E60](a1 + 52);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::_ListFields(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfAbstractData *a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(const pxrInternal__aapl__pxrReserved__::SdfSchemaBase *, const pxrInternal__aapl__pxrReserved__::SdfAbstractData *))(*(void *)a2 + 176))(a2, a3);
  unsigned int v9 = (*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::SdfSchemaBase *, const pxrInternal__aapl__pxrReserved__::SdfAbstractData *))(*(void *)a2 + 96))(a2, a3);
  unsigned int v10 = v9;
  if (v9 >= 0xC)
  {
    v26[0] = "sdf/layer.cpp";
    v26[1] = "_ListFields";
    v26[2] = 3446;
    v26[3] = "static vector<TfToken> pxrInternal__aapl__pxrReserved__::SdfLayer::_ListFields(const SdfSchemaBase &, const"
             " SdfAbstractData &, const SdfPath &)";
    char v27 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Illegal SpecType int(specType)==<%i> on path <%s>. ", v10, Text);
  }
  else if (v9)
  {
    RequiredFields = (void *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetRequiredFields((uint64_t)this, v9);
    uint64_t v12 = RequiredFields[1] - *RequiredFields;
    if (v12)
    {
      uint64_t v13 = 0;
      uint64_t v14 = v12 >> 3;
      uint64_t v16 = *(char **)a4;
      char v15 = *(char **)(a4 + 8);
      BOOL v17 = (v12 >> 3) + ((uint64_t)&v15[-*(void *)a4] >> 3) > (unint64_t)((uint64_t)(*(void *)(a4 + 16)
                                                                                           - *(void *)a4) >> 3);
      uint64_t v18 = v15;
      do
      {
        uint64_t v19 = (uint64_t *)(*RequiredFields + 8 * v13);
        uint64_t v20 = v18;
        if (v16 != v18)
        {
          uint64_t v20 = v16;
          while ((*(void *)v20 & 0xFFFFFFFFFFFFFFF8) != (*v19 & 0xFFFFFFFFFFFFFFF8))
          {
            v20 += 8;
            if (v20 == v18)
            {
              uint64_t v20 = v18;
              break;
            }
          }
        }
        if (v20 == v18)
        {
          unint64_t v21 = *(void *)(a4 + 16);
          if (v17)
          {
            uint64_t v22 = (uint64_t)&v15[-*(void *)a4] >> 3;
            if (v22 == (uint64_t)(v21 - *(void *)a4) >> 3)
            {
              sub_216973388((char **)a4, v14 - v13 + v22);
              BOOL v17 = 0;
              int64_t v23 = v18 - v16;
              uint64_t v16 = *(char **)a4;
              char v15 = *(char **)(a4 + 8);
              uint64_t v18 = (char *)(*(void *)a4 + v23);
              unint64_t v21 = *(void *)(a4 + 16);
            }
            else
            {
              BOOL v17 = 1;
            }
          }
          else
          {
            BOOL v17 = 0;
          }
          if ((unint64_t)v15 >= v21)
          {
            char v15 = sub_216973984((char **)a4, v19);
          }
          else
          {
            uint64_t v24 = *v19;
            *(void *)char v15 = *v19;
            if ((v24 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              *(void *)v15 &= 0xFFFFFFFFFFFFFFF8;
            }
            v15 += 8;
          }
          *(void *)(a4 + 8) = v15;
        }
        ++v13;
      }
      while (v13 != v14);
    }
  }
}

void sub_216AB4D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(void *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (***a4)(void, uint64_t))
{
  unsigned int v21 = 0;
  uint64_t v8 = sub_216A5B7B0(a1 + 14);
  if ((*(uint64_t (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, uint64_t (***)(void, uint64_t), unsigned int *))(*(void *)v8 + 120))(v8, a2, a3, a4, &v21))return 1; {
  unsigned int v10 = v21;
  }
  if (v21 >= 0xC)
  {
    v19[0] = "sdf/layer.cpp";
    v19[1] = "HasField";
    v19[2] = 3586;
    uint64_t v19[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(const SdfPath &, const TfToken &, SdfAbstractDataValue *) const";
    char v20 = 0;
    unint64_t v15 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
    if (v15)
    {
      uint64_t v16 = (const char *)(v15 + 16);
      if (*(char *)(v15 + 39) < 0) {
        uint64_t v16 = *(const char **)v16;
      }
    }
    else
    {
      uint64_t v16 = "";
    }
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    uint64_t v18 = (const char *)a1[59];
    if (v18[23] < 0) {
      uint64_t v18 = *(const char **)v18;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Illegal SpecType int(specType)==<%i> for field:%s on path <%s>. SpecType is not valid for layer @%s@.", v10, v16, Text, v18);
    return 0;
  }
  if (!v21) {
    return 0;
  }
  char v11 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)a1[10];
  uint64_t v12 = (void *)*((void *)v11 + 116);
  uint64_t v13 = (void *)*((void *)v11 + 117);
  if (v12 == v13) {
    return 0;
  }
  while ((*v12 & 0xFFFFFFFFFFFFFFF8) != (*(void *)a3 & 0xFFFFFFFFFFFFFFF8))
  {
    if (++v12 == v13) {
      return 0;
    }
  }
  if (!*((unsigned char *)v11 + 72 * v21 + 120)) {
    return 0;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsRequiredField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)((char *)v11 + 72 * v21 + 56), a3);
  if (result)
  {
    uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(v11, a3);
    if (result)
    {
      if (!a4) {
        return 1;
      }
      uint64_t FallbackValue = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)result);
      return (**a4)(a4, FallbackValue);
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasFieldDictKey(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  unsigned int v10 = (uint64_t *)((char *)this + 112);
  uint64_t v11 = sub_216A5B7B0((uint64_t *)this + 14);
  if ((*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, const pxrInternal__aapl__pxrReserved__::TfToken *, pxrInternal__aapl__pxrReserved__::VtValue *))(*(void *)v11 + 192))(v11, a2, a3, a4, a5))return 1; {
  uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)*((void *)this + 10);
  }
  uint64_t v14 = (void *)*((void *)v13 + 116);
  unint64_t v15 = (void *)*((void *)v13 + 117);
  if (v14 == v15) {
    return 0;
  }
  while ((*v14 & 0xFFFFFFFFFFFFFFF8) != (*(void *)a3 & 0xFFFFFFFFFFFFFFF8))
  {
    if (++v14 == v15) {
      return 0;
    }
  }
  uint64_t v16 = sub_216A5B7B0(v10);
  unsigned int v17 = (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)v16 + 96))(v16, a2);
  if (!*((unsigned char *)v13 + 72 * v17 + 120)) {
    return 0;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsRequiredField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)((char *)v13 + 72 * v17 + 56), a3);
  if (result)
  {
    uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(v13, a3);
    if (result)
    {
      uint64_t FallbackValue = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)result);
      uint64_t result = sub_2168EC434(FallbackValue);
      if (result)
      {
        uint64_t v19 = *((void *)FallbackValue + 1);
        if ((v19 & 4) != 0)
        {
          uint64_t result = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v19 & 0xFFFFFFFFFFFFFFF8)
                                                                                          + 168))(FallbackValue);
          char v20 = (uint64_t *)result;
        }
        else
        {
          char v20 = *(uint64_t **)FallbackValue;
        }
        unsigned int v21 = (*(void *)a4 & 0xFFFFFFFFFFFFFFF8) != 0
            ? (std::string *)((*(void *)a4 & 0xFFFFFFFFFFFFFFF8) + 16)
            : (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        uint64_t result = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath(v20, v21, ":");
        if (result)
        {
          if (a5) {
            sub_2168EC6DC(a5, (void *)result);
          }
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasFieldDictKey(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, void *a4, uint64_t (***a5)(void, uint64_t))
{
  unsigned int v10 = (uint64_t *)(a1 + 112);
  uint64_t v11 = sub_216A5B7B0((uint64_t *)(a1 + 112));
  if ((*(uint64_t (**)(uint64_t, uint64_t, const pxrInternal__aapl__pxrReserved__::TfToken *, void *, uint64_t (***)(void, uint64_t)))(*(void *)v11 + 184))(v11, a2, a3, a4, a5))return 1; {
  uint64_t v13 = *(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)(a1 + 80);
  }
  uint64_t v14 = (void *)*((void *)v13 + 116);
  unint64_t v15 = (void *)*((void *)v13 + 117);
  if (v14 == v15) {
    return 0;
  }
  while ((*v14 & 0xFFFFFFFFFFFFFFF8) != (*(void *)a3 & 0xFFFFFFFFFFFFFFF8))
  {
    if (++v14 == v15) {
      return 0;
    }
  }
  uint64_t v16 = sub_216A5B7B0(v10);
  unsigned int v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v16 + 96))(v16, a2);
  if (!*((unsigned char *)v13 + 72 * v17 + 120)) {
    return 0;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsRequiredField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)((char *)v13 + 72 * v17 + 56), a3);
  if (result)
  {
    uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(v13, a3);
    if (result)
    {
      uint64_t FallbackValue = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)result);
      uint64_t result = sub_2168EC434(FallbackValue);
      if (result)
      {
        uint64_t v19 = *((void *)FallbackValue + 1);
        if ((v19 & 4) != 0)
        {
          uint64_t result = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v19 & 0xFFFFFFFFFFFFFFF8)
                                                                                          + 168))(FallbackValue);
          char v20 = (uint64_t *)result;
        }
        else
        {
          char v20 = *(uint64_t **)FallbackValue;
        }
        unsigned int v21 = (*a4 & 0xFFFFFFFFFFFFFFF8) != 0
            ? (std::string *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 16)
            : (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        uint64_t result = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath(v20, v21, ":");
        if (result)
        {
          if (!a5) {
            return 1;
          }
          uint64_t v22 = **a5;
          return v22(a5, result);
        }
      }
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetFieldDictValueByKey@<X0>(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, const pxrInternal__aapl__pxrReserved__::TfToken *a4@<X3>, pxrInternal__aapl__pxrReserved__::VtValue *a5@<X8>)
{
  *((void *)a5 + 1) = 0;
  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasFieldDictKey(this, a2, a3, a4, a5);
}

void sub_216AB534C(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void *sub_216AB5360(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = sub_216A5B7B0((uint64_t *)(a1 + 112));
  unsigned int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a2);

  return pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidFieldForSpec(v5, a3, v7);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  char v20 = 0;
  int v8 = (*(uint64_t (**)(uint64_t, char **))(*(void *)a4 + 8))(a4, &v19);
  sub_2168EE084((uint64_t)&v19);
  if (v8)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, a2, a3);
  }
  else if (!*(unsigned char *)(a1 + 513) {
         || pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1))
  }
  {
    uint64_t v19 = "sdf/layer.cpp";
    char v20 = "SetField";
    uint64_t v21 = 3730;
    uint64_t v22 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(const SdfPath &, const TfToken &, const SdfAbstractD"
          "ataConstValue &)";
    char v23 = 0;
    unint64_t v9 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
    if (v9)
    {
      unsigned int v10 = (const char *)(v9 + 16);
      if (*(char *)(v9 + 39) < 0) {
        unsigned int v10 = *(const char **)v10;
      }
    }
    else
    {
      unsigned int v10 = "";
    }
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    uint64_t v14 = *(const char **)(a1 + 472);
    if (v14[23] < 0) {
      uint64_t v14 = *(const char **)v14;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set %s on <%s>. Layer @%s@ is not editable.", v10, Text, v14);
  }
  else if (!*(unsigned char *)(a1 + 515) || (sub_216AB5360(a1, (uint64_t)a2, a3) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetField((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)&v19);
    if (((*(uint64_t (**)(uint64_t, char **))(*(void *)a4 + 8))(a4, &v19) & 1) == 0) {
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
    }
    sub_2168EE084((uint64_t)&v19);
  }
  else
  {
    uint64_t v19 = "sdf/layer.cpp";
    char v20 = "SetField";
    uint64_t v21 = 3739;
    uint64_t v22 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(const SdfPath &, const TfToken &, const SdfAbstractD"
          "ataConstValue &)";
    char v23 = 0;
    unsigned int v17 = &unk_26C759010;
    int v18 = 0;
    unint64_t v11 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
    if (v11)
    {
      uint64_t v12 = (const char *)(v11 + 16);
      if (*(char *)(v11 + 39) < 0) {
        uint64_t v12 = *(const char **)v12;
      }
    }
    else
    {
      uint64_t v12 = "";
    }
    unint64_t v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    uint64_t v16 = *(const char **)(a1 + 472);
    if (v16[23] < 0) {
      uint64_t v16 = *(const char **)v16;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, (uint64_t *)&v17, (pxrInternal__aapl__pxrReserved__ *)"Cannot set %s on <%s>. Field is not valid for layer @%s@.", v12, v15, v16);
  }
}

void sub_216AB5658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(const char **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 513)
    && !pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted((pxrInternal__aapl__pxrReserved__::SdfLayer *)this))
  {
    if (!*((unsigned char *)this + 515) || (sub_216AB5360((uint64_t)this, (uint64_t)a2, a3) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetFieldDictValueByKey((pxrInternal__aapl__pxrReserved__::SdfLayer *)this, a2, a3, a4, (pxrInternal__aapl__pxrReserved__::VtValue *)&v25);
      if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(a5, &v25, v12) & 1) == 0) {
        pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetFieldDictValueByKey<pxrInternal__aapl__pxrReserved__::VtValue>();
      }
      sub_2168EE084((uint64_t)&v25);
    }
    else
    {
      v25.__vftable = (std::type_info_vtbl *)"sdf/layer.cpp";
      v25.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)"SetFieldDictValueByKey";
      uint64_t v26 = 3767;
      char v27 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(const SdfPath &, const TfToken &, co"
            "nst TfToken &, const VtValue &)";
      char v28 = 0;
      char v23 = &unk_26C759010;
      int v24 = 0;
      unint64_t v17 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
      if (v17)
      {
        int v18 = (const char *)(v17 + 16);
        if (*(char *)(v17 + 39) < 0) {
          int v18 = *(const char **)v18;
        }
      }
      else
      {
        int v18 = "";
      }
      unint64_t v19 = *(void *)a4 & 0xFFFFFFFFFFFFFFF8;
      if (v19)
      {
        char v20 = (const char *)(v19 + 16);
        if (*(char *)(v19 + 39) < 0) {
          char v20 = *(const char **)v20;
        }
      }
      else
      {
        char v20 = "";
      }
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      uint64_t v22 = this[59];
      if (v22[23] < 0) {
        uint64_t v22 = *(const char **)v22;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, (uint64_t *)&v23, (pxrInternal__aapl__pxrReserved__ *)"Cannot set %s:%s on <%s>. Field is not valid for layer @%s@.", v18, v20, Text, v22);
    }
  }
  else
  {
    v25.__vftable = (std::type_info_vtbl *)"sdf/layer.cpp";
    v25.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)"SetFieldDictValueByKey";
    uint64_t v26 = 3758;
    char v27 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(const SdfPath &, const TfToken &, cons"
          "t TfToken &, const VtValue &)";
    char v28 = 0;
    unint64_t v10 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      unint64_t v11 = (const char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0) {
        unint64_t v11 = *(const char **)v11;
      }
    }
    else
    {
      unint64_t v11 = "";
    }
    unint64_t v13 = *(void *)a4 & 0xFFFFFFFFFFFFFFF8;
    if (v13)
    {
      uint64_t v14 = (const char *)(v13 + 16);
      if (*(char *)(v13 + 39) < 0) {
        uint64_t v14 = *(const char **)v14;
      }
    }
    else
    {
      uint64_t v14 = "";
    }
    unint64_t v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    uint64_t v16 = this[59];
    if (v16[23] < 0) {
      uint64_t v16 = *(const char **)v16;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set %s:%s on <%s>. Layer @%s@ is not editable.", v11, v14, v15, v16);
  }
}

void sub_216AB58DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(const char **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, uint64_t a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 513)
    && !pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted((pxrInternal__aapl__pxrReserved__::SdfLayer *)this))
  {
    if (!*((unsigned char *)this + 515) || (sub_216AB5360((uint64_t)this, (uint64_t)a2, a3) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetFieldDictValueByKey((pxrInternal__aapl__pxrReserved__::SdfLayer *)this, a2, a3, a4, (pxrInternal__aapl__pxrReserved__::VtValue *)&v24);
      if (((*(uint64_t (**)(uint64_t, char **))(*(void *)a5 + 8))(a5, &v24) & 1) == 0) {
        pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetFieldDictValueByKey<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
      }
      sub_2168EE084((uint64_t)&v24);
    }
    else
    {
      int v24 = "sdf/layer.cpp";
      std::type_info v25 = "SetFieldDictValueByKey";
      uint64_t v26 = 3797;
      char v27 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(const SdfPath &, const TfToken &, co"
            "nst TfToken &, const SdfAbstractDataConstValue &)";
      char v28 = 0;
      uint64_t v22 = &unk_26C759010;
      int v23 = 0;
      unint64_t v16 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
      if (v16)
      {
        unint64_t v17 = (const char *)(v16 + 16);
        if (*(char *)(v16 + 39) < 0) {
          unint64_t v17 = *(const char **)v17;
        }
      }
      else
      {
        unint64_t v17 = "";
      }
      unint64_t v18 = *(void *)a4 & 0xFFFFFFFFFFFFFFF8;
      if (v18)
      {
        unint64_t v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0) {
          unint64_t v19 = *(const char **)v19;
        }
      }
      else
      {
        unint64_t v19 = "";
      }
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      uint64_t v21 = this[59];
      if (v21[23] < 0) {
        uint64_t v21 = *(const char **)v21;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, (uint64_t *)&v22, (pxrInternal__aapl__pxrReserved__ *)"Cannot set %s:%s on <%s>. Field is not valid for layer @%s@.", v17, v19, Text, v21);
    }
  }
  else
  {
    int v24 = "sdf/layer.cpp";
    std::type_info v25 = "SetFieldDictValueByKey";
    uint64_t v26 = 3788;
    char v27 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(const SdfPath &, const TfToken &, cons"
          "t TfToken &, const SdfAbstractDataConstValue &)";
    char v28 = 0;
    unint64_t v10 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      unint64_t v11 = (const char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0) {
        unint64_t v11 = *(const char **)v11;
      }
    }
    else
    {
      unint64_t v11 = "";
    }
    unint64_t v12 = *(void *)a4 & 0xFFFFFFFFFFFFFFF8;
    if (v12)
    {
      unint64_t v13 = (const char *)(v12 + 16);
      if (*(char *)(v12 + 39) < 0) {
        unint64_t v13 = *(const char **)v13;
      }
    }
    else
    {
      unint64_t v13 = "";
    }
    uint64_t v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    unint64_t v15 = this[59];
    if (v15[23] < 0) {
      unint64_t v15 = *(const char **)v15;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set %s:%s on <%s>. Layer @%s@ is not editable.", v11, v13, v14, v15);
  }
}

void sub_216AB5B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::EraseFieldDictValueByKey(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 513) && !pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
  {
    uint64_t v10 = sub_216A5B7B0((uint64_t *)this + 14);
    if ((*(unsigned int (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, const pxrInternal__aapl__pxrReserved__::TfToken *, void))(*(void *)v10 + 192))(v10, a2, a3, a4, 0))
    {
      unint64_t v16 = 0;
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetFieldDictValueByKey<pxrInternal__aapl__pxrReserved__::VtValue>();
    }
  }
  else
  {
    unint64_t v15 = "sdf/layer.cpp";
    unint64_t v16 = "EraseFieldDictValueByKey";
    uint64_t v17 = 3850;
    unint64_t v18 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::EraseFieldDictValueByKey(const SdfPath &, const TfToken &, const TfToken &)";
    char v19 = 0;
    unint64_t v8 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      unint64_t v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0) {
        unint64_t v9 = *(const char **)v9;
      }
    }
    else
    {
      unint64_t v9 = "";
    }
    unint64_t v11 = *(void *)a4 & 0xFFFFFFFFFFFFFFF8;
    if (v11)
    {
      unint64_t v12 = (const char *)(v11 + 16);
      if (*(char *)(v11 + 39) < 0) {
        unint64_t v12 = *(const char **)v12;
      }
    }
    else
    {
      unint64_t v12 = "";
    }
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    uint64_t v14 = (const char *)*((void *)this + 59);
    if (v14[23] < 0) {
      uint64_t v14 = *(const char **)v14;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot erase %s:%s on <%s>. Layer @%s@ is not editable.", v9, v12, Text, v14);
  }
}

void sub_216AB5D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_SwapData(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 112);
  *(void *)(result + 112) = *a2;
  *a2 = v2;
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfLayer::_AdoptData(uint64_t a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v7);
  uint64_t v4 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 112);
  *(void *)(a1 + 112) = *a2;
  sub_2168BD80C(a2);
  sub_2168BD378(a1 + 112, v4);
  uint64_t v5 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidReplaceLayerContent(v5, (uint64_t *)(a1 + 24));
  return sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v7);
}

void sub_216AB5DEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216AB5E00(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3
    || ((int v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    unsigned int v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    double v8[2] = 216;
    void v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::SdfAbstractData>::operator->() const [PtrTemplate = pxrInternal__aapl__pxrRes"
            "erved__::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::SdfAbstractData]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x800000021746E66CLL & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

char *sub_216AB5EA8(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3 == *(void **)(a1 + 24))
  {
    v8[0] = "tf/iterator.h";
    v8[1] = "operator*";
    double v8[2] = 271;
    void v8[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::set<pxrInternal__aapl__pxrReserved__::SdfPath>, "
            "true>::operator*() [T = std::set<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = true]";
    char v9 = 0;
    int v10 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v8, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  int v4 = (void *)*v3;
  if (*v3)
  {
    do
    {
      uint64_t v5 = v4;
      int v4 = (void *)v4[1];
    }
    while (v4);
  }
  else
  {
    do
    {
      uint64_t v5 = (void *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }
    while (v6);
  }
  return (char *)v5 + 28;
}

void sub_216AB5F50()
{
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimDeleteSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3, int a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a4
    && (*((void *)this + 15)
     || (unint64_t v12 = "sdf/layer.cpp",
         unint64_t v13 = (uint64_t (*)(uint64_t))"_PrimDeleteSpec",
         uint64_t v14 = 4539,
         unint64_t v15 = (char **)"void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimDeleteSpec(const SdfPath &, BOOL, BOOL)",
         char v16 = 0,
         (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "_stateDelegate", 0) & 1) != 0)))
  {
    unsigned int v7 = (pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *)sub_216AA2D04((uint64_t *)this + 15);
    return (pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::DeleteSpec(v7, a2, a3);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v11);
    char v9 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
    if (!v9) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance();
    }
    pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidRemoveSpec(v9, (uint64_t *)this + 3, a2, a3);
    uint64_t v10 = *((void *)this + 14);
    unint64_t v12 = (char *)&unk_26C759158;
    unint64_t v13 = sub_216AB8B60;
    uint64_t v14 = v10;
    unint64_t v15 = &v12;
    pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse((uint64_t)this, a2, (uint64_t)&v12);
    sub_216ABEE34(&v12);
    return sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v11);
  }
}

void sub_216AB60B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  sub_216ABEE34((uint64_t *)va1);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_IsInertSubtree(pxrInternal__aapl__pxrReserved__::SdfLayer **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfLayer::_IsInert(this, a2, 1, 1);
  if (result)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(a2)) {
      goto LABEL_10;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection(a2, (uint64_t)v37);
    if ((v41 & 0x80u) == 0) {
      uint64_t v5 = v41;
    }
    else {
      uint64_t v5 = v40;
    }
    if ((char)v41 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v38) < 0)
    {
      operator delete(v37[0]);
      if (v5)
      {
LABEL_10:
        if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath(a2))
        {
          BOOL v6 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v6) {
            BOOL v6 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          }
          uint64_t v7 = *((void *)v6 + 4);
          uint64_t v42 = v7;
          if ((v7 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v42 &= 0xFFFFFFFFFFFFFFF8;
          }
          unint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v8) {
            unint64_t v8 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          }
          uint64_t v9 = *((void *)v8 + 8);
          uint64_t v43 = v9;
          if ((v9 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v43 &= 0xFFFFFFFFFFFFFFF8;
          }
          for (uint64_t i = 0; i != 2; ++i)
          {
            v35[0] = 0;
            v35[1] = 0;
            int v36 = 0;
            v37[0] = &unk_26C759208;
            v37[1] = v35;
            std::string v38 = &stru_26C74C2D0;
            LOWORD(__p) = 0;
            int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)(&v42 + i), (uint64_t (***)(void, uint64_t))v37);
            if ((_BYTE)__p) {
              int v12 = 0;
            }
            else {
              int v12 = HasField;
            }
            if (v12 == 1)
            {
              unint64_t v13 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v35[0];
              uint64_t v14 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v35[1];
              while (v13 != v14)
              {
                pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a2, v13, v37);
                char IsInertSubtree = pxrInternal__aapl__pxrReserved__::SdfLayer::_IsInertSubtree((pxrInternal__aapl__pxrReserved__::SdfLayer *)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v37);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v37 + 1);
                sub_21697C414(v37);
                if ((IsInertSubtree & 1) == 0)
                {
                  v37[0] = v35;
                  sub_216889A04((void ***)v37);
                  char v16 = 0;
                  goto LABEL_33;
                }
                unint64_t v13 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v13 + 8);
              }
            }
            v37[0] = v35;
            sub_216889A04((void ***)v37);
          }
          char v16 = 1;
LABEL_33:
          for (uint64_t j = 8; j != -8; j -= 8)
          {
            uint64_t v18 = *(uint64_t *)((char *)&v42 + j);
            if ((v18 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
          if ((v16 & 1) == 0) {
            return 0;
          }
          v35[0] = 0;
          v35[1] = 0;
          int v36 = 0;
          char v19 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v19) {
            char v19 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          }
          v37[1] = v35;
          std::string v38 = &stru_26C74C2D0;
          LOWORD(__p) = 0;
          v37[0] = &unk_26C759208;
          int v20 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, a2, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v19 + 40), (uint64_t (***)(void, uint64_t))v37);
          if ((_BYTE)__p) {
            int v21 = 0;
          }
          else {
            int v21 = v20;
          }
          if (v21 == 1)
          {
            uint64_t v22 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v35[0];
            int v23 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v35[1];
            if (v35[0] != v35[1])
            {
              while (1)
              {
                pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a2, v22, (int *)v37);
                BOOL IsInert = pxrInternal__aapl__pxrReserved__::SdfLayer::_IsInert(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v37, 0, 1);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v37 + 1);
                sub_21697C414(v37);
                if (!IsInert) {
                  break;
                }
                uint64_t v22 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v22 + 8);
                if (v22 == v23) {
                  goto LABEL_47;
                }
              }
              v37[0] = v35;
              sub_216889A04((void ***)v37);
              return 0;
            }
          }
LABEL_47:
          v37[0] = v35;
          sub_216889A04((void ***)v37);
        }
        return 1;
      }
    }
    else if (v5)
    {
      goto LABEL_10;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection(a2, (uint64_t)v37);
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v37;
    int v36 = v38;
    v37[0] = 0;
    v37[1] = 0;
    std::string v38 = 0;
    if ((char)v41 < 0)
    {
      operator delete(__p);
      if (SHIBYTE(v38) < 0) {
        operator delete(v37[0]);
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v33);
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    std::type_info v25 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v25) {
      std::type_info v25 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    }
    v37[1] = &v42;
    std::string v38 = &stru_26C74C2D0;
    LOWORD(__p) = 0;
    v37[0] = &unk_26C759208;
    uint64_t v26 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, a2, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v25 + 56), (uint64_t (***)(void, uint64_t))v37);
    if ((_BYTE)__p) {
      int v27 = 0;
    }
    else {
      int v27 = (int)v26;
    }
    if (v27 != 1 || (uint64_t v28 = v43, v42 == v43))
    {
      char v31 = 1;
    }
    else
    {
      uint64_t v29 = v42 + 8;
      do
      {
        if ((*(void *)(v29 - 8) & 0xFFFFFFFFFFFFFFF8) != 0) {
          EmptyString = (uint64_t *)((*(void *)(v29 - 8) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v26);
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(&v33, (uint64_t)v35, (uint64_t)EmptyString, v37);
        char v31 = pxrInternal__aapl__pxrReserved__::SdfLayer::_IsInertSubtree((pxrInternal__aapl__pxrReserved__::SdfLayer *)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v37);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v37 + 1);
        uint64_t v26 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21697C414(v37);
        if (v29 == v28) {
          char v32 = 0;
        }
        else {
          char v32 = v31;
        }
        v29 += 8;
      }
      while ((v32 & 1) != 0);
    }
    v37[0] = &v42;
    sub_216889A04((void ***)v37);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
    sub_21697C414(&v33);
    if (SHIBYTE(v36) < 0)
    {
      operator delete(v35[0]);
      if (v31) {
        return 1;
      }
    }
    else if (v31)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

void sub_216AB660C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if ((a24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216AB6724(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2 == *(void **)(a1 + 24))
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    void v7[2] = 250;
    void v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::set<pxrInternal__aapl__pxrReserved"
            "__::SdfPath>, true>::operator++() [T = std::set<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = true]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v3 = (void *)*v2;
    if (*v2)
    {
      do
      {
        int v4 = v3;
        uint64_t v3 = (void *)v3[1];
      }
      while (v3);
    }
    else
    {
      do
      {
        int v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (v5);
    }
    *(void *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_216AB67D0(uint64_t a1)
{
  *(void *)a1 = &unk_26C758B40;
  sub_216981EE8(a1 + 16, *(void **)(a1 + 24));
  sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8));

  pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor((pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)a1);
}

uint64_t sub_216AB6830(void *a1, uint64_t a2, char *a3)
{
  if (*a1 == a1[1])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator*";
    v4[2] = 271;
    void v4[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>:"
            ":operator*() [T = std::set<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    char v5 = 0;
    int v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return *a1 + 28;
}

void sub_216AB68A8()
{
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimCreateSpec(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5
    && (a1[15]
     || (v13[0] = "sdf/layer.cpp",
         v13[1] = "_PrimCreateSpec",
         v13[2] = 4558,
         void v13[3] = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimCreateSpec(const SdfPath &, SdfSpecType, BOOL, BOOL)",
         char v14 = 0,
         (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v13, "_stateDelegate", 0) & 1) != 0)))
  {
    uint64_t v9 = (uint64_t *)sub_216AA2D04(a1 + 15);
    return (pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::CreateSpec(v9, (uint64_t)a2, a3, a4);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v13);
    unint64_t v11 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
    if (!v11) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance();
    }
    pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidAddSpec(v11, a1 + 3, a2, a4);
    uint64_t v12 = sub_216A5B7B0(a1 + 14);
    (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(void *)v12 + 64))(v12, a2, a3);
    return sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v13);
  }
}

void sub_216AB69D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va);
  _Unwind_Resume(a1);
}

void *sub_216AB69E4(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    void v7[2] = 250;
    void v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::set<pxrInternal__aapl__pxrReserved"
            "__::SdfPath>>::operator++() [T = std::set<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        int v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        int v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

void sub_216AB6A8C(pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *a1)
{
  *(void *)a1 = &unk_26C758B88;
  sub_216981EE8((uint64_t)a1 + 16, *((void **)a1 + 3));

  pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor(a1);
}

void sub_216AB6AE4(pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *a1)
{
  *(void *)a1 = &unk_26C758BD0;
  sub_216ABB40C((uint64_t)a1 + 24, *((void **)a1 + 4));

  pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  if (*((unsigned char *)this + 513) && !pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
  {
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2)
      && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a3))
    {
      if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, a3)
        || pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a3, a2))
      {
        uint64_t v10 = "sdf/layer.cpp";
        unint64_t v11 = "_MoveSpec";
        uint64_t v12 = 4359;
        unint64_t v13 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(const SdfPath &, const SdfPath &)";
        char v14 = 0;
        pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot move <%s> to <%s>. Source and destination must not overlap");
      }
      else
      {
        uint64_t v8 = sub_216A5B7B0((uint64_t *)this + 14);
        if ((*(unsigned int (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)v8 + 72))(v8, a2))
        {
          uint64_t v9 = sub_216A5B7B0((uint64_t *)this + 14);
          if (((*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)v9 + 72))(v9, a3) & 1) == 0)
          {
            uint64_t v6 = 1;
            pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimMoveSpec(this, a2, a3, 1);
            return v6;
          }
        }
      }
    }
    else
    {
      uint64_t v10 = "sdf/layer.cpp";
      unint64_t v11 = "_MoveSpec";
      uint64_t v12 = 4352;
      unint64_t v13 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(const SdfPath &, const SdfPath &)";
      char v14 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot move <%s> to <%s>. Source and destination must be non-empty paths");
    }
  }
  else
  {
    uint64_t v10 = "sdf/layer.cpp";
    unint64_t v11 = "_MoveSpec";
    uint64_t v12 = 4345;
    unint64_t v13 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(const SdfPath &, const SdfPath &)";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot move <%s> to <%s>. Layer @%s@ is not editable.");
  }
  return 0;
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimMoveSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, int a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a4
    && (*((void *)this + 15)
     || (v18[0] = "sdf/layer.cpp",
         v18[1] = "_PrimMoveSpec",
         void v18[2] = 4395,
         v18[3] = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimMoveSpec(const SdfPath &, const SdfPath &, BOOL)",
         char v19 = 0,
         (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v18, "_stateDelegate", 0) & 1) != 0)))
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *)sub_216AA2D04((uint64_t *)this + 15);
    return (pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::MoveSpec(v7, a2, a3);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
    uint64_t v9 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
    if (!v9) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance();
    }
    pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidMoveSpec(v9, (uint64_t *)this + 3, a2, a3);
    uint64_t v10 = (char *)this + 88;
    unint64_t v11 = sub_216AB72D4;
    sub_216ABE954((uint64_t)v12, (void *)this + 14, &v10, MEMORY[0x263F8C0C8], a2, a3);
    sub_216ABE9D0((uint64_t)v18, (uint64_t *)&v11);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse((uint64_t)this, a2, (uint64_t)v18);
    sub_216ABEE34(v18);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
    sub_21697C414(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
    sub_21697C414(&v13);
    sub_216AA10A8(v12);
    return sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
  }
}

void sub_216AB6EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfAbstractData *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer::_ListFields(*(pxrInternal__aapl__pxrReserved__::SdfLayer **)(a1 + 80), *(const pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)(a1 + 112), a2, (uint64_t)v44);
  for (long long i = v44[0]; (void)i != *((void *)&i + 1); sub_2169CECC4(&i))
  {
    uint64_t v10 = (void *)sub_2169CEBC8((uint64_t *)&i, v6, v7);
    unint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v11) {
      unint64_t v11 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    }
    if ((*v10 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v11 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_216AB7820(a1, a2);
    }
    else
    {
      int v14 = (void *)sub_2169CEBC8((uint64_t *)&i, v8, v9);
      int v15 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      if (!v15) {
        int v15 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      }
      if ((*v14 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v15 + 5) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216AB7A44(a1, a2);
      }
      else
      {
        uint64_t v18 = (void *)sub_2169CEBC8((uint64_t *)&i, v12, v13);
        char v19 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        if (!v19) {
          char v19 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        }
        if ((*v18 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v19 + 3) & 0xFFFFFFFFFFFFFFF8))
        {
          sub_216AB7C68(a1, a2);
        }
        else
        {
          uint64_t v22 = (void *)sub_2169CEBC8((uint64_t *)&i, v16, v17);
          int v23 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v23) {
            int v23 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          }
          if ((*v22 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v23 + 2) & 0xFFFFFFFFFFFFFFF8))
          {
            sub_216AB7E8C(a1, a2);
          }
          else
          {
            uint64_t v26 = (void *)sub_2169CEBC8((uint64_t *)&i, v20, v21);
            int v27 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
            if (!v27) {
              int v27 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
            }
            if ((*v26 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v27 + 7) & 0xFFFFFFFFFFFFFFF8))
            {
              sub_216AB80B0(a1, a2);
            }
            else
            {
              unint64_t v30 = (void *)sub_2169CEBC8((uint64_t *)&i, v24, v25);
              char v31 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
              if (!v31) {
                char v31 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
              }
              if ((*v30 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v31 + 8) & 0xFFFFFFFFFFFFFFF8))
              {
                sub_216AB82D4(a1, a2);
              }
              else
              {
                int v34 = (void *)sub_2169CEBC8((uint64_t *)&i, v28, v29);
                uint64_t v35 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                if (!v35) {
                  uint64_t v35 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                }
                if ((*v34 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v35 & 0xFFFFFFFFFFFFFFF8))
                {
                  sub_216AB84F8(a1, a2);
                }
                else
                {
                  std::string v38 = (void *)sub_2169CEBC8((uint64_t *)&i, v32, v33);
                  long long v39 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                  if (!v39) {
                    long long v39 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                  }
                  if ((*v38 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v39 + 6) & 0xFFFFFFFFFFFFFFF8))
                  {
                    sub_216AB871C(a1, a2);
                  }
                  else
                  {
                    uint64_t v40 = (void *)sub_2169CEBC8((uint64_t *)&i, v36, v37);
                    unsigned __int8 v41 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                    if (!v41) {
                      unsigned __int8 v41 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                    }
                    if ((*v40 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v41 + 1) & 0xFFFFFFFFFFFFFFF8)) {
                      sub_216AB8940(a1, a2);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v42 = *(void *)(a3 + 24);
  if (!v42) {
    sub_21683A7CC();
  }
  (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfAbstractData *))(*(void *)v42 + 48))(v42, a2);
  *(void *)&long long i = v44;
  sub_216889A04((void ***)&i);
}

void sub_216AB72B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  sub_216889A04(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_216AB72D4(uint64_t *a1, uint64_t **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4, const pxrInternal__aapl__pxrReserved__::SdfPath *a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v10, a3, a4, a5, 0);
  uint64_t v8 = sub_216A5B7B0(a1);
  (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t *))(*(void *)v8 + 88))(v8, a3, &v10);
  pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::MoveIdentity(a2, a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
  return sub_21697C414(&v10);
}

void sub_216AB7380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216AB7394(uint64_t a1)
{
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *this, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    if (*((unsigned char *)this + 513) && !pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
    {
      if (*((unsigned char *)this + 515) && !*(unsigned char *)(*((void *)this + 10) + 72 * a3 + 120))
      {
        uint64_t v18 = "sdf/layer.cpp";
        char v19 = "_CreateSpec";
        uint64_t v20 = 4436;
        int v21 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(const SdfPath &, SdfSpecType, BOOL)";
        char v22 = 0;
        uint64_t v16 = &unk_26C759010;
        int v17 = 1;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
        pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C755200, a3, (uint64_t)__p);
        if (v15 >= 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        int v13 = (const char *)*((void *)this + 59);
        if (v13[23] < 0) {
          int v13 = *(const char **)v13;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, (uint64_t *)&v16, (pxrInternal__aapl__pxrReserved__ *)"Cannot create spec at <%s>. %s is not a valid spec type for layer @%s@", Text, (const char *)v12, v13);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        uint64_t v10 = sub_216A5B7B0((uint64_t *)this + 14);
        if (!(*(unsigned int (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)v10 + 72))(v10, a2))
        {
          uint64_t v8 = 1;
          pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimCreateSpec((uint64_t *)this, a2, a3, a4, 1);
          return v8;
        }
        uint64_t v18 = "sdf/layer.cpp";
        char v19 = "_CreateSpec";
        uint64_t v20 = 4443;
        int v21 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(const SdfPath &, SdfSpecType, BOOL)";
        char v22 = 0;
        pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create spec <%s> because it already exists in @%s@");
      }
    }
    else
    {
      uint64_t v18 = "sdf/layer.cpp";
      char v19 = "_CreateSpec";
      uint64_t v20 = 4427;
      int v21 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(const SdfPath &, SdfSpecType, BOOL)";
      char v22 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create spec at <%s>. Layer @%s@ is not editable.");
    }
  }
  return 0;
}

void sub_216AB761C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 513) || pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
  {
    unint64_t v11 = "sdf/layer.cpp";
    uint64_t v12 = "_DeleteSpec";
    uint64_t v13 = 4458;
    int v14 = (char **)"BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(const SdfPath &)";
    char v15 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    BOOL v5 = (const char *)*((void *)this + 59);
    if (v5[23] < 0) {
      BOOL v5 = *(const char **)v5;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot delete <%s>. Layer @%s@ is not editable", Text, v5);
    return 0;
  }
  uint64_t v8 = sub_216A5B7B0((uint64_t *)this + 14);
  if (!(*(unsigned int (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)v8 + 72))(v8, a2))return 0; {
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::_IsInertSubtree((pxrInternal__aapl__pxrReserved__::SdfLayer **)this, a2))
  }
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v10);
    unint64_t v9 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
    if (!v9) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance();
    }
    unint64_t v11 = (char *)&unk_26C7590D8;
    uint64_t v12 = (const char *)this;
    uint64_t v13 = v9;
    int v14 = &v11;
    pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse((uint64_t)this, a2, (uint64_t)&v11);
    sub_216ABEE34(&v11);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimDeleteSpec(this, a2, 1, 1);
    sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v10);
    return 1;
  }
  else
  {
    uint64_t v6 = 1;
    pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimDeleteSpec(this, a2, 0, 1);
  }
  return v6;
}

void sub_216AB77F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va);
  _Unwind_Resume(a1);
}

void sub_216AB7820(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  sub_216A775C0((atomic_uint **)&v12);
  long long i = 0uLL;
  uint64_t v11 = 0;
  uint64_t v4 = sub_216A5B7B0((uint64_t *)(a1 + 112));
  (*(void (**)(uint64_t ***__return_ptr))(*(void *)v4 + 136))(&v15);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v15))
  {
    if ((v16 & 4) != 0) {
      BOOL v5 = (uint64_t **)(*(uint64_t (**)(uint64_t ***))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(&v15);
    }
    else {
      BOOL v5 = v15;
    }
  }
  else
  {
    BOOL v5 = (uint64_t **)&i;
  }
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  sub_21698FA28(&v13, *v5, v5[1], v5[1] - *v5);
  uint64_t v6 = (void ***)sub_2168EE084((uint64_t)&v15);
  char v15 = (uint64_t **)&i;
  sub_216889A04(v6);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  for (long long i = v13; (void)i != *((void *)&i + 1); sub_2169CECC4(&i))
  {
    unint64_t v9 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_2169CEBC8((uint64_t *)&i, v7, v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a2, v9, &v15);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(a1, (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
    sub_21697C414(&v15);
  }
  *(void *)&long long i = &v13;
  sub_216889A04((void ***)&i);
}

void sub_216AB79BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

void sub_216AB7A44(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  sub_216A69BE4((atomic_uint **)&v12);
  long long i = 0uLL;
  uint64_t v11 = 0;
  uint64_t v4 = sub_216A5B7B0((uint64_t *)(a1 + 112));
  (*(void (**)(uint64_t ***__return_ptr))(*(void *)v4 + 136))(&v15);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v15))
  {
    if ((v16 & 4) != 0) {
      BOOL v5 = (uint64_t **)(*(uint64_t (**)(uint64_t ***))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(&v15);
    }
    else {
      BOOL v5 = v15;
    }
  }
  else
  {
    BOOL v5 = (uint64_t **)&i;
  }
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  sub_21698FA28(&v13, *v5, v5[1], v5[1] - *v5);
  uint64_t v6 = (void ***)sub_2168EE084((uint64_t)&v15);
  char v15 = (uint64_t **)&i;
  sub_216889A04(v6);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  for (long long i = v13; (void)i != *((void *)&i + 1); sub_2169CECC4(&i))
  {
    unint64_t v9 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_2169CEBC8((uint64_t *)&i, v7, v8);
    sub_216A63E40(a2, v9, (int *)&v15);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(a1, (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
    sub_21697C414(&v15);
  }
  *(void *)&long long i = &v13;
  sub_216889A04((void ***)&i);
}

void sub_216AB7BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

void sub_216AB7C68(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  sub_216A6D828((atomic_uint **)&v12);
  long long i = 0uLL;
  uint64_t v11 = 0;
  uint64_t v4 = sub_216A5B7B0((uint64_t *)(a1 + 112));
  (*(void (**)(long long **__return_ptr))(*(void *)v4 + 136))(&v15);
  if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v15))
  {
    if ((v16 & 4) != 0) {
      BOOL v5 = (long long *)(*(uint64_t (**)(long long **))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(&v15);
    }
    else {
      BOOL v5 = v15;
    }
  }
  else
  {
    BOOL v5 = &i;
  }
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  sub_216980EEC(&v13, *(_DWORD **)v5, *((_DWORD **)v5 + 1), (uint64_t)(*((void *)v5 + 1) - *(void *)v5) >> 3);
  uint64_t v6 = (void ***)sub_2168EE084((uint64_t)&v15);
  char v15 = &i;
  sub_216981168(v6);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  for (long long i = v13; (void)i != *((void *)&i + 1); sub_21698147C(&i))
  {
    unint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169813FC((uint64_t *)&i, v7, v8);
    sub_216A64ABC(a2, v9, &v15);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(a1, (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
    sub_21697C414(&v15);
  }
  *(void *)&long long i = &v13;
  sub_216981168((void ***)&i);
}

void sub_216AB7E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

void sub_216AB7E8C(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  sub_216A708D0((atomic_uint **)&v12);
  long long i = 0uLL;
  uint64_t v11 = 0;
  uint64_t v4 = sub_216A5B7B0((uint64_t *)(a1 + 112));
  (*(void (**)(uint64_t ***__return_ptr))(*(void *)v4 + 136))(&v15);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v15))
  {
    if ((v16 & 4) != 0) {
      BOOL v5 = (uint64_t **)(*(uint64_t (**)(uint64_t ***))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(&v15);
    }
    else {
      BOOL v5 = v15;
    }
  }
  else
  {
    BOOL v5 = (uint64_t **)&i;
  }
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  sub_21698FA28(&v13, *v5, v5[1], v5[1] - *v5);
  uint64_t v6 = (void ***)sub_2168EE084((uint64_t)&v15);
  char v15 = (uint64_t **)&i;
  sub_216889A04(v6);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  for (long long i = v13; (void)i != *((void *)&i + 1); sub_2169CECC4(&i))
  {
    unint64_t v9 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_2169CEBC8((uint64_t *)&i, v7, v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg(a2, v9, &v15);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(a1, (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
    sub_21697C414(&v15);
  }
  *(void *)&long long i = &v13;
  sub_216889A04((void ***)&i);
}

void sub_216AB8028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

void sub_216AB80B0(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  sub_216A81AA0((atomic_uint **)&v12);
  long long i = 0uLL;
  uint64_t v11 = 0;
  uint64_t v4 = sub_216A5B7B0((uint64_t *)(a1 + 112));
  (*(void (**)(uint64_t ***__return_ptr))(*(void *)v4 + 136))(&v15);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v15))
  {
    if ((v16 & 4) != 0) {
      BOOL v5 = (uint64_t **)(*(uint64_t (**)(uint64_t ***))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(&v15);
    }
    else {
      BOOL v5 = v15;
    }
  }
  else
  {
    BOOL v5 = (uint64_t **)&i;
  }
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  sub_21698FA28(&v13, *v5, v5[1], v5[1] - *v5);
  uint64_t v6 = (void ***)sub_2168EE084((uint64_t)&v15);
  char v15 = (uint64_t **)&i;
  sub_216889A04(v6);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  for (long long i = v13; (void)i != *((void *)&i + 1); sub_2169CECC4(&i))
  {
    unint64_t v9 = (void *)sub_2169CEBC8((uint64_t *)&i, v7, v8);
    sub_216A68404(a2, v9, &v15);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(a1, (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
    sub_21697C414(&v15);
  }
  *(void *)&long long i = &v13;
  sub_216889A04((void ***)&i);
}

void sub_216AB824C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

void sub_216AB82D4(uint64_t a1, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  sub_216A85210((atomic_uint **)&v12);
  long long i = 0uLL;
  uint64_t v11 = 0;
  uint64_t v4 = sub_216A5B7B0((uint64_t *)(a1 + 112));
  (*(void (**)(uint64_t ***__return_ptr))(*(void *)v4 + 136))(&v15);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v15))
  {
    if ((v16 & 4) != 0) {
      BOOL v5 = (uint64_t **)(*(uint64_t (**)(uint64_t ***))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(&v15);
    }
    else {
      BOOL v5 = v15;
    }
  }
  else
  {
    BOOL v5 = (uint64_t **)&i;
  }
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  sub_21698FA28(&v13, *v5, v5[1], v5[1] - *v5);
  uint64_t v6 = (void ***)sub_2168EE084((uint64_t)&v15);
  char v15 = (uint64_t **)&i;
  sub_216889A04(v6);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  for (long long i = v13; (void)i != *((void *)&i + 1); sub_2169CECC4(&i))
  {
    unint64_t v9 = (void *)sub_2169CEBC8((uint64_t *)&i, v7, v8);
    sub_216A69174(a2, v9, &v15);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(a1, (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
    sub_21697C414(&v15);
  }
  *(void *)&long long i = &v13;
  sub_216889A04((void ***)&i);
}

void sub_216AB8470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

void sub_216AB84F8(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  sub_216A8B400((atomic_uint **)&v12);
  long long i = 0uLL;
  uint64_t v11 = 0;
  uint64_t v4 = sub_216A5B7B0((uint64_t *)(a1 + 112));
  (*(void (**)(long long **__return_ptr))(*(void *)v4 + 136))(&v15);
  if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v15))
  {
    if ((v16 & 4) != 0) {
      BOOL v5 = (long long *)(*(uint64_t (**)(long long **))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(&v15);
    }
    else {
      BOOL v5 = v15;
    }
  }
  else
  {
    BOOL v5 = &i;
  }
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  sub_216980EEC(&v13, *(_DWORD **)v5, *((_DWORD **)v5 + 1), (uint64_t)(*((void *)v5 + 1) - *(void *)v5) >> 3);
  uint64_t v6 = (void ***)sub_2168EE084((uint64_t)&v15);
  char v15 = &i;
  sub_216981168(v6);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  for (long long i = v13; (void)i != *((void *)&i + 1); sub_21698147C(&i))
  {
    unint64_t v9 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169813FC((uint64_t *)&i, v7, v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, v9, &v15);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(a1, (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
    sub_21697C414(&v15);
  }
  *(void *)&long long i = &v13;
  sub_216981168((void ***)&i);
}

void sub_216AB8694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

void sub_216AB871C(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  sub_216A88950((atomic_uint **)&v12);
  long long i = 0uLL;
  uint64_t v11 = 0;
  uint64_t v4 = sub_216A5B7B0((uint64_t *)(a1 + 112));
  (*(void (**)(long long **__return_ptr))(*(void *)v4 + 136))(&v15);
  if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v15))
  {
    if ((v16 & 4) != 0) {
      BOOL v5 = (long long *)(*(uint64_t (**)(long long **))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(&v15);
    }
    else {
      BOOL v5 = v15;
    }
  }
  else
  {
    BOOL v5 = &i;
  }
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  sub_216980EEC(&v13, *(_DWORD **)v5, *((_DWORD **)v5 + 1), (uint64_t)(*((void *)v5 + 1) - *(void *)v5) >> 3);
  uint64_t v6 = (void ***)sub_2168EE084((uint64_t)&v15);
  char v15 = &i;
  sub_216981168(v6);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  for (long long i = v13; (void)i != *((void *)&i + 1); sub_21698147C(&i))
  {
    unint64_t v9 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169813FC((uint64_t *)&i, v7, v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, v9, &v15);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(a1, (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
    sub_21697C414(&v15);
  }
  *(void *)&long long i = &v13;
  sub_216981168((void ***)&i);
}

void sub_216AB88B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

void sub_216AB8940(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  sub_216A73F8C((atomic_uint **)&v11);
  long long i = 0uLL;
  uint64_t v10 = 0;
  uint64_t v4 = sub_216A5B7B0((uint64_t *)(a1 + 112));
  (*(void (**)(uint64_t ***__return_ptr))(*(void *)v4 + 136))(&v14);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v14))
  {
    if ((v15 & 4) != 0) {
      BOOL v5 = (uint64_t **)(*(uint64_t (**)(uint64_t ***))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(&v14);
    }
    else {
      BOOL v5 = v14;
    }
  }
  else
  {
    BOOL v5 = (uint64_t **)&i;
  }
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  sub_21698FA28(&v12, *v5, v5[1], v5[1] - *v5);
  uint64_t v6 = (void ***)sub_2168EE084((uint64_t)&v14);
  uint64_t v14 = (uint64_t **)&i;
  sub_216889A04(v6);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  for (long long i = v12; (void)i != *((void *)&i + 1); sub_2169CECC4(&i))
  {
    sub_2169CEBC8((uint64_t *)&i, v7, v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression(a2, &v14);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(a1, (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
    sub_21697C414(&v14);
  }
  *(void *)&long long i = &v12;
  sub_216889A04((void ***)&i);
}

void sub_216AB8AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

uint64_t sub_216AB8B60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_IsInert(pxrInternal__aapl__pxrReserved__::SdfLayer **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3, char a4)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v8 = (uint64_t *)(this + 14);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_ListFields(this[10], this[14], a2, (uint64_t)&v46);
  if ((void)v46 == *((void *)&v46 + 1))
  {
    BOOL v12 = 1;
  }
  else
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
      sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    LOBYTE(v47) = 0;
    uint64_t v10 = sub_216A5B7B0(v8);
    (*(void (**)(long long *__return_ptr))(*(void *)v10 + 136))(&i);
    if (sub_216959490((pxrInternal__aapl__pxrReserved__::VtValue *)&i))
    {
      if ((BYTE8(i) & 4) != 0) {
        unint64_t v11 = (int *)(*(uint64_t (**)(long long *))((*((void *)&i + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&i);
      }
      else {
        unint64_t v11 = (int *)&i;
      }
    }
    else
    {
      unint64_t v11 = &v47;
    }
    int v13 = *(unsigned __int8 *)v11;
    sub_2168EE084((uint64_t)&i);
    if (v13) {
      goto LABEL_10;
    }
    uint64_t v15 = sub_216A5B7B0(v8);
    unsigned int v18 = (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)v15 + 96))(v15, a2);
    if (v18 == 6)
    {
      if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
        sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      int v47 = 1;
      uint64_t v20 = sub_216A5B7B0(v8);
      (*(void (**)(long long *__return_ptr))(*(void *)v20 + 136))(&i);
      if (sub_216A94450((pxrInternal__aapl__pxrReserved__::VtValue *)&i)) {
        int v21 = (BYTE8(i) & 4) != 0
      }
            ? (int *)(*(uint64_t (**)(long long *))((*((void *)&i + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&i)
            : (int *)&i;
      else {
        int v21 = &v47;
      }
      int v22 = *v21;
      sub_2168EE084((uint64_t)&i);
      if (v22 != 1) {
        goto LABEL_10;
      }
      if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
        sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      uint64_t v24 = sub_216A5B7B0(v8);
      (*(void (**)(long long *__return_ptr))(*(void *)v24 + 136))(&i);
      if (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)&i))
      {
        if ((BYTE8(i) & 4) != 0) {
          std::type_info v25 = (uint64_t *)(*(uint64_t (**)(long long *))((*((void *)&i + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&i);
        }
        else {
          std::type_info v25 = (uint64_t *)&i;
        }
        uint64_t v26 = *v25;
        if ((*v25 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v26 &= 0xFFFFFFFFFFFFFFF8;
        }
      }
      else
      {
        uint64_t v26 = 0;
      }
      sub_2168EE084((uint64_t)&i);
      if ((v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v26)
      {
LABEL_10:
        BOOL v12 = 0;
        goto LABEL_11;
      }
    }
    if ((a4 & 1) != 0 || (BOOL v12 = 0, v18 != 1) && v18 != 8)
    {
      BOOL v12 = 0;
      if (v18 <= 0xB && ((1 << v18) & 0xD42) != 0)
      {
        uint64_t v27 = (uint64_t)this[10] + 72 * v18;
        uint64_t v28 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)(v27 + 56);
        int v29 = *(unsigned __int8 *)(v27 + 120);
        if (v29) {
          unint64_t v30 = v28;
        }
        else {
          unint64_t v30 = 0;
        }
        if (v29
          || (*(void *)&long long i = "sdf/layer.cpp",
              *((void *)&i + 1) = "_IsInert",
              uint64_t v49 = 4623,
              uint64_t v50 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_IsInert(const SdfPath &, BOOL, BOOL) const",
              char v51 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&i, "specDefinition", 0) & 1) != 0))
        {
          for (long long i = v46; ; sub_21699A5F0(&i))
          {
            BOOL v12 = i == *((void *)&i + 1);
            if ((void)i == *((void *)&i + 1)) {
              goto LABEL_11;
            }
            if (a3)
            {
              if (v18 == 6)
              {
                int v33 = (void *)sub_21699A570((uint64_t *)&i, v16, v17);
                int v34 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                if (!v34) {
                  int v34 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                }
                if ((*v33 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v34 + 4) & 0xFFFFFFFFFFFFFFF8)) {
                  continue;
                }
                uint64_t v37 = (void *)sub_21699A570((uint64_t *)&i, v31, v32);
                std::string v38 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                if (!v38) {
                  std::string v38 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                }
                if ((*v37 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v38 + 5) & 0xFFFFFFFFFFFFFFF8)) {
                  continue;
                }
                long long v39 = (void *)sub_21699A570((uint64_t *)&i, v35, v36);
                uint64_t v40 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                if (!v40) {
                  uint64_t v40 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                }
                unint64_t v41 = *v39 & 0xFFFFFFFFFFFFFFF8;
                uint64_t v42 = *((void *)v40 + 8);
                goto LABEL_59;
              }
              if (v18 == 11)
              {
                uint64_t v43 = (void *)sub_21699A570((uint64_t *)&i, v16, v17);
                uint64_t v44 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                if (!v44) {
                  uint64_t v44 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                }
                unint64_t v41 = *v43 & 0xFFFFFFFFFFFFFFF8;
                uint64_t v42 = *((void *)v44 + 7);
LABEL_59:
                if (v41 == (v42 & 0xFFFFFFFFFFFFFFF8)) {
                  continue;
                }
              }
            }
            uint64_t v45 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_21699A570((uint64_t *)&i, v16, v17);
            if (!pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsRequiredField(v30, v45))goto LABEL_11; {
          }
            }
        }
        goto LABEL_10;
      }
    }
  }
LABEL_11:
  *(void *)&long long i = &v46;
  sub_216889A04((void ***)&i);
  return v12;
}

void sub_216AB9058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216889A04(&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ExportToString(uint64_t a1, const char *a2, char *a3)
{
  BOOL v5 = *(uint64_t **)(a1 + 472);
  if (*((char *)v5 + 23) < 0) {
    BOOL v5 = (uint64_t *)*v5;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Writing layer @%s@", a2, a3, v5);
  unint64_t v9 = "sdf/layer.cpp";
  uint64_t v10 = "ExportToString";
  uint64_t v11 = 4720;
  BOOL v12 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::ExportToString(std::string *) const";
  char v13 = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v16, &__p, &v9);
  if (v15 < 0) {
    operator delete(__p);
  }
  uint64_t v6 = sub_216979288((uint64_t *)(a1 + 40));
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, void **))(*(void *)v6 + 88))(v6, a1, a2, &v9);
  if (SHIBYTE(v11) < 0) {
    operator delete(v9);
  }
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v16);
  return v7;
}

void sub_216AB91AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)&a25);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_WriteToFile(uint64_t a1, const char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (std::string *)a2;
  uint64_t v10 = *(uint64_t **)(a1 + 472);
  if (*((char *)v10 + 23) < 0) {
    uint64_t v10 = (uint64_t *)*v10;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Writing layer @%s@", a2, a3, v10);
  long long v61 = "sdf/layer.cpp";
  unint64_t v62 = "_WriteToFile";
  uint64_t v63 = 4733;
  unint64_t v64 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_WriteToFile(const string &, const string &, SdfFileFormatConst"
        "Ptr, const FileFormatArguments &) const";
  char v65 = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v68, __p, &v61);
  if (SHIBYTE(v67) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
  if ((v11 & 0x80u) == 0) {
    std::string::size_type size = HIBYTE(v8->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v8->__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_89;
  }
  uint64_t v13 = *(void *)(a1 + 472);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 47);
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *(void *)(v13 + 32);
  }
  if (size == v14)
  {
    unsigned int v18 = *(unsigned __int8 **)(v13 + 24);
    uint64_t v16 = (unsigned __int8 *)(v13 + 24);
    uint64_t v17 = v18;
    if (v15 >= 0) {
      char v19 = v16;
    }
    else {
      char v19 = v17;
    }
    if ((v11 & 0x80) != 0)
    {
      if (memcmp(v8->__r_.__value_.__l.__data_, v19, v8->__r_.__value_.__l.__size_)) {
        goto LABEL_23;
      }
    }
    else if (*((unsigned char *)&v8->__r_.__value_.__s + 23))
    {
      uint64_t v20 = v8;
      while (v20->__r_.__value_.__s.__data_[0] == *v19)
      {
        uint64_t v20 = (std::string *)((char *)v20 + 1);
        ++v19;
        if (!--v11) {
          goto LABEL_22;
        }
      }
      goto LABEL_23;
    }
LABEL_22:
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToSave((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1) & 1) == 0)
    {
      long long v61 = "sdf/layer.cpp";
      unint64_t v62 = "_WriteToFile";
      uint64_t v63 = 4740;
      unint64_t v64 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_WriteToFile(const string &, const string &, SdfFileFormatC"
            "onstPtr, const FileFormatArguments &) const";
      char v65 = 0;
      if ((v8->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v55 = (const char *)v8;
      }
      else {
        long long v55 = (const char *)v8->__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v61, 3, (pxrInternal__aapl__pxrReserved__ *)"Cannot save layer @%s@, saving not allowed", v55);
      goto LABEL_89;
    }
  }
LABEL_23:
  int v21 = sub_216AA0AEC((void *)a4);
  if (!(v22 & 1 | (unint64_t)v21))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_GetExtension(v8);
    int v23 = (const char *)HIBYTE(v63);
    if (v63 < 0) {
      int v23 = v62;
    }
    if (v23)
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v67 = 0;
      pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension((uint64_t)&v61, (uint64_t)__p, (uint64_t *)&v60);
      uint64_t v24 = *(atomic_uint **)(a4 + 8);
      *(_OWORD *)a4 = v60;
      *((void *)&v60 + 1) = 0;
      if (v24)
      {
        if (atomic_fetch_add_explicit(v24 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v24 + 8))(v24);
        }
        uint64_t v25 = *((void *)&v60 + 1);
        *(void *)&long long v60 = 0;
        if (*((void *)&v60 + 1)
          && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v60 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
        }
      }
      else
      {
        *(void *)&long long v60 = 0;
      }
      if (SHIBYTE(v67) < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v26 = sub_216AA0AEC((void *)a4);
    if (!(v27 & 1 | (unint64_t)v26))
    {
      *(void *)a4 = *(void *)(a1 + 40);
      sub_2168CD2FC((atomic_uint **)(a4 + 8), (atomic_uint **)(a1 + 48));
    }
    if (SHIBYTE(v63) < 0) {
      operator delete(v61);
    }
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_IsPackageOrPackagedLayer((uint64_t *)a4, (uint64_t)v8))
  {
    long long v61 = "sdf/layer.cpp";
    unint64_t v62 = "_WriteToFile";
    uint64_t v63 = 4766;
    unint64_t v64 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_WriteToFile(const string &, const string &, SdfFileFormatCon"
          "stPtr, const FileFormatArguments &) const";
    char v65 = 0;
    if ((v8->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v8 = (std::string *)v8->__r_.__value_.__r.__words[0];
    }
    uint64_t v28 = sub_216979288((uint64_t *)a4);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v28 + 16))(v28)) {
      int v29 = "package";
    }
    else {
      int v29 = "packaged";
    }
    unint64_t v30 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_216979288((uint64_t *)a4);
    unint64_t v31 = *(void *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v30) & 0xFFFFFFFFFFFFFFF8;
    if (v31)
    {
      uint64_t v32 = (const char *)(v31 + 16);
      if (*(char *)(v31 + 39) < 0) {
        uint64_t v32 = *(const char **)v32;
      }
    }
    else
    {
      uint64_t v32 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v61, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot save layer @%s@: writing %s %s layer is not allowed through this API.", (const char *)v8, v29, v32);
    goto LABEL_89;
  }
  int v33 = sub_216AA0AEC((void *)a4);
  if (!(v34 & 1 | (unint64_t)v33))
  {
    long long v61 = "sdf/layer.cpp";
    unint64_t v62 = "_WriteToFile";
    uint64_t v63 = 4770;
    unint64_t v64 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_WriteToFile(const string &, const string &, SdfFileFormatCon"
          "stPtr, const FileFormatArguments &) const";
    char v65 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v61, "fileFormat", 0) & 1) == 0)
    {
      long long v61 = "sdf/layer.cpp";
      unint64_t v62 = "_WriteToFile";
      uint64_t v63 = 4772;
      unint64_t v64 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_WriteToFile(const string &, const string &, SdfFileFormatC"
            "onstPtr, const FileFormatArguments &) const";
      char v65 = 0;
      if ((v8->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v59 = (const char *)v8;
      }
      else {
        uint64_t v59 = (const char *)v8->__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v61, 3, (pxrInternal__aapl__pxrReserved__ *)"Unknown file format when attempting to write '%s'", v59);
      goto LABEL_89;
    }
  }
  uint64_t v35 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_216979288((uint64_t *)a4);
  if (!pxrInternal__aapl__pxrReserved__::SdfFileFormat::SupportsWriting(v35))
  {
    long long v61 = "sdf/layer.cpp";
    unint64_t v62 = "_WriteToFile";
    uint64_t v63 = 4780;
    unint64_t v64 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_WriteToFile(const string &, const string &, SdfFileFormatCon"
          "stPtr, const FileFormatArguments &) const";
    char v65 = 0;
    if ((v8->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v8 = (std::string *)v8->__r_.__value_.__r.__words[0];
    }
    uint64_t v52 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_216979288((uint64_t *)a4);
    unint64_t v53 = *(void *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v52) & 0xFFFFFFFFFFFFFFF8;
    if (v53)
    {
      long long v54 = (const char *)(v53 + 16);
      if (*(char *)(v53 + 39) < 0) {
        long long v54 = *(const char **)v54;
      }
    }
    else
    {
      long long v54 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v61, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot save layer @%s@: %s file format does notsupport writing", (const char *)v8, v54);
    goto LABEL_89;
  }
  uint64_t v36 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_216979288((uint64_t *)a4);
  if (pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetSchema(v36) != *(void *)(a1 + 80))
  {
    sub_216779094(&v61, "cross-schema-write-test");
    pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous((uint64_t)&v61, (uint64_t *)a4, (uint64_t *)__p);
    if (SHIBYTE(v63) < 0) {
      operator delete(v61);
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v60);
    uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)__p);
    sub_216A9ED88(&v61, a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent(v37, (uint64_t *)&v61);
    std::string v38 = v62;
    if (v62 && atomic_fetch_add_explicit((atomic_uint *volatile)v62 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(const char *))(*(void *)v38 + 8))(v38);
    }
    unint64_t v39 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v39) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    unint64_t v40 = v60;
    unint64_t v41 = atomic_load((unint64_t *)(v39 + 144));
    if (v40 < v41
      && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v60, (atomic_ullong *)v39))
    {
      long long v61 = "sdf/layer.cpp";
      unint64_t v62 = "_WriteToFile";
      uint64_t v63 = 4799;
      unint64_t v64 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_WriteToFile(const string &, const string &, SdfFileFormatC"
            "onstPtr, const FileFormatArguments &) const";
      char v65 = 0;
      if ((v8->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v58 = (const char *)v8;
      }
      else {
        uint64_t v58 = (const char *)v8->__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v61, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed attempting to write '%s' under a different schema.  If this is intended, TransferContent() to a temporary anonymous layer with the desired schema and handle the errors, then export that temporary layer", v58);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v60);
      sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
      goto LABEL_89;
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v60);
    sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
  }
  uint64_t v42 = sub_216979288((uint64_t *)a4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, std::string *, char *, uint64_t))(*(void *)v42 + 64))(v42, a1, v8, a3, a5))
  {
    uint64_t v43 = *(void *)(a1 + 472);
    uint64_t v44 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
    if ((v44 & 0x80u) == 0) {
      std::string::size_type v45 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v45 = v8->__r_.__value_.__l.__size_;
    }
    uint64_t v46 = *(unsigned __int8 *)(v43 + 47);
    int v47 = (char)v46;
    if ((v46 & 0x80u) != 0) {
      uint64_t v46 = *(void *)(v43 + 32);
    }
    if (v45 != v46) {
      goto LABEL_97;
    }
    uint64_t v50 = *(unsigned __int8 **)(v43 + 24);
    uint64_t v48 = (unsigned __int8 *)(v43 + 24);
    uint64_t v49 = v50;
    if (v47 >= 0) {
      char v51 = v48;
    }
    else {
      char v51 = v49;
    }
    if ((v44 & 0x80) != 0)
    {
      if (memcmp(v8->__r_.__value_.__l.__data_, v51, v8->__r_.__value_.__l.__size_))
      {
LABEL_97:
        uint64_t v56 = 1;
        goto LABEL_90;
      }
    }
    else if (*((unsigned char *)&v8->__r_.__value_.__s + 23))
    {
      while (v8->__r_.__value_.__s.__data_[0] == *v51)
      {
        uint64_t v8 = (std::string *)((char *)v8 + 1);
        ++v51;
        if (!--v44) {
          goto LABEL_96;
        }
      }
      goto LABEL_97;
    }
LABEL_96:
    pxrInternal__aapl__pxrReserved__::SdfLayer::_MarkCurrentStateAsClean((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1);
    goto LABEL_97;
  }
LABEL_89:
  uint64_t v56 = 0;
LABEL_90:
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v68);
  return v56;
}

void sub_216AB9898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::Export(uint64_t a1, const char *a2, char *a3, uint64_t a4)
{
  uint64_t v8 = sub_216979288((uint64_t *)(a1 + 40));
  if (pxrInternal__aapl__pxrReserved__::SdfFileFormat::IsSupportedExtension(v8, (uint64_t)a2))
  {
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  uint64_t v10 = pxrInternal__aapl__pxrReserved__::SdfLayer::_WriteToFile(a1, a2, a3, (uint64_t)&v13, a4);
  uint64_t v11 = v14;
  if (v14 && atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return v10;
}

void sub_216AB9A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a10 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      sub_217324674(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216AB9A98()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  BOOL v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216AB9B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

tbb::queuing_rw_mutex::scoped_lock *sub_216AB9BA0(tbb::queuing_rw_mutex::scoped_lock *this)
{
  if (*(void *)this) {
    tbb::queuing_rw_mutex::scoped_lock::release((uint64_t)this);
  }
  return this;
}

void sub_216AB9BD8()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3B0] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C200], MEMORY[0x263F8C088]);
}

uint64_t sub_216AB9C24(uint64_t a1)
{
  *(void *)a1 = &unk_26C758AC8;
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 16));
  return a1;
}

uint64_t sub_216AB9C68(uint64_t a1)
{
  return sub_216AB9CE4(**(void **)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8), 0, (void *)(a1 + 16));
}

void sub_216AB9C90(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  *a1 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&unk_26C758AC8;
  sub_216ABB798(a1 + 2);

  operator delete(a1);
}

uint64_t sub_216AB9CE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__ *a3@<X2>, void *a4@<X8>)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v8 = (const char *)(a2 + 96);
  std::operator+<char>();
  sub_2168E8C88((uint64_t)&v57, "Sdf", (char *)&__p);
  if (SHIBYTE(v61) < 0) {
    operator delete(__p);
  }
  if (sub_216977CF0(3))
  {
    if (*(char *)(a2 + 119) >= 0) {
      int v9 = v8;
    }
    else {
      int v9 = *(const char **)(a2 + 96);
    }
    if (*(char *)(a2 + 71) >= 0) {
      uint64_t v10 = a2 + 48;
    }
    else {
      uint64_t v10 = *(void *)(a2 + 48);
    }
    uint64_t v11 = sub_216AA0AEC((void *)a2);
    if (v12 & 1 | (unint64_t)v11)
    {
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_216979288((uint64_t *)a2);
      unint64_t v14 = *(void *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v13) & 0xFFFFFFFFFFFFFFF8;
      if (v14)
      {
        int v15 = (const char *)(v14 + 16);
        if (*(char *)(v14 + 39) < 0) {
          int v15 = *(const char **)v15;
        }
      }
      else
      {
        int v15 = "";
      }
    }
    else
    {
      int v15 = "unknown file format";
    }
    sub_216AA60C4((void *)(a2 + 16));
    if (v61 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    char v19 = "False";
    if (a3) {
      char v19 = "True";
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"SdfLayer::_OpenLayerAndUnlockRegistry('%s', '%s', '%s', '%s', metadataOnly=%s)\n", v16, v17, v9, v10, v15, p_p, v19);
    if (SHIBYTE(v61) < 0) {
      operator delete(__p);
    }
  }
  uint64_t v20 = sub_216AA0AEC((void *)a2);
  if (v21 & 1 | (unint64_t)v20)
  {
    uint64_t v22 = sub_216979288((uint64_t *)a2);
    pxrInternal__aapl__pxrReserved__::SdfFileFormat::NewLayer(v22, (uint64_t *)&v56);
    int v23 = (pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *)atomic_load((unint64_t *)&qword_267B8EDE8);
    if (!v23) {
      int v23 = sub_216ABB6C8(&qword_267B8EDE8);
    }
    uint64_t v24 = *(void *)(sub_216AA5ECC((uint64_t *)&v56) + 472);
    uint64_t v25 = sub_216AA5ECC((uint64_t *)&v56);
    pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Find(v23, v24, (void **)(*(void *)(v25 + 472) + 24), &v54);
    if (!sub_216ABA3A0(&v54, &v56))
    {
      std::string __p = "sdf/layer.cpp";
      long long v60 = "_OpenLayerAndUnlockRegistry";
      uint64_t v61 = 3337;
      unint64_t v62 = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::_OpenLayerAndUnlockRegistry(Lock &, const "
            "_FindOrOpenLayerInfo &, BOOL) [Loclong long k = tbb::queuing_rw_mutex::scoped_lock]";
      char v63 = 0;
      uint64_t v52 = *(uint64_t **)(sub_216AA5ECC((uint64_t *)&v56) + 472);
      if (*((char *)v52 + 23) < 0) {
        uint64_t v52 = (uint64_t *)*v52;
      }
      unint64_t v53 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Could not find %s", v50, v51, v52);
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "_layerRegistry->Find(layer->GetIdentifier(), layer->GetResolvedPath()) == layer", v53);
    }
    uint64_t v26 = v55;
    if (v55 && atomic_fetch_add_explicit((atomic_uint *volatile)(v55 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    }
    tbb::queuing_rw_mutex::scoped_lock::release(a1);
    int v27 = *(unsigned __int8 *)(a2 + 40);
    uint64_t v28 = sub_216AA5ECC((uint64_t *)&v56);
    if (v27 == pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(*(void *)(v28 + 472)))
    {
      int v29 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v56);
      uint64_t IsMuted = pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(v29);
      if ((IsMuted & 1) != 0
        || (uint64_t v31 = sub_216AA5ECC((uint64_t *)&v56),
            uint64_t IsMuted = pxrInternal__aapl__pxrReserved__::SdfLayer::_Read(v31, (uint64_t)v8, (std::string *)(a2 + 72), a3),
            (IsMuted & 1) != 0))
      {
        if (!*(unsigned char *)(a2 + 40))
        {
          Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)IsMuted);
          pxrInternal__aapl__pxrReserved__::ArResolver::GetModificationTimestamp((uint64_t)Resolver);
          long long v60 = (char *)&off_26C7549D0 + 1;
          std::string __p = v33;
          uint64_t v34 = sub_216AA5ECC((uint64_t *)&v56);
          sub_21697DC0C((void *)(v34 + 480), &__p);
          sub_2168EE084((uint64_t)&__p);
        }
        uint64_t v35 = (pxrInternal__aapl__pxrReserved__ *)sub_216AA5ECC((uint64_t *)&v56);
        pxrInternal__aapl__pxrReserved__::Sdf_ComputeExternalAssetModificationTimestamps(v35, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&__p);
        uint64_t v36 = sub_216AA5ECC((uint64_t *)&v56);
        uint64_t v37 = (void **)__p;
        std::string __p = 0;
        sub_2168EBBB8((void ***)(v36 + 496), v37);
        sub_2168EBBB8((void ***)&__p, 0);
        std::string v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v56);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_MarkCurrentStateAsClean(v38);
        uint64_t v39 = sub_216AA5ECC((uint64_t *)&v56);
        *(_WORD *)(v39 + 465) = 257;
        atomic_store(1u, (unsigned __int8 *)(v39 + 464));
        *a4 = v56;
        uint64_t v56 = 0;
        goto LABEL_57;
      }
    }
    else if (*(unsigned char *)(a2 + 40))
    {
      std::string __p = "sdf/layer.cpp";
      long long v60 = "_OpenLayerAndUnlockRegistry";
      uint64_t v61 = 3351;
      unint64_t v62 = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::_OpenLayerAndUnlockRegistry(Lock &, const "
            "_FindOrOpenLayerInfo &, BOOL) [Loclong long k = tbb::queuing_rw_mutex::scoped_lock]";
      char v63 = 0;
      if (*(char *)(a2 + 119) < 0) {
        uint64_t v8 = *(const char **)(a2 + 96);
      }
      uint64_t v42 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_216979288((uint64_t *)a2);
      unint64_t v43 = *(void *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v42) & 0xFFFFFFFFFFFFFFF8;
      if (v43)
      {
        uint64_t v44 = (const char *)(v43 + 16);
        if (*(char *)(v43 + 39) < 0) {
          uint64_t v44 = *(const char **)v44;
        }
      }
      else
      {
        uint64_t v44 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Opened anonymous layer ('%s' with format id '%s') but resulting layer is not anonymous.", v8, v44);
    }
    else
    {
      std::string __p = "sdf/layer.cpp";
      long long v60 = "_OpenLayerAndUnlockRegistry";
      uint64_t v61 = 3358;
      unint64_t v62 = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::_OpenLayerAndUnlockRegistry(Lock &, const "
            "_FindOrOpenLayerInfo &, BOOL) [Loclong long k = tbb::queuing_rw_mutex::scoped_lock]";
      char v63 = 0;
      if (*(char *)(a2 + 119) < 0) {
        uint64_t v8 = *(const char **)(a2 + 96);
      }
      std::string::size_type v45 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_216979288((uint64_t *)a2);
      unint64_t v46 = *(void *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v45) & 0xFFFFFFFFFFFFFFF8;
      if (v46)
      {
        int v47 = (const char *)(v46 + 16);
        if (*(char *)(v46 + 39) < 0) {
          int v47 = *(const char **)v47;
        }
      }
      else
      {
        int v47 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Opened layer without anonymous prefix ('%s' with format id '%s') but resulting layer is anonymous.", v8, v47);
    }
    uint64_t v48 = sub_216AA5ECC((uint64_t *)&v56);
    *(_WORD *)(v48 + 465) = 256;
    atomic_store(1u, (unsigned __int8 *)(v48 + 464));
    *a4 = 0;
LABEL_57:
    uint64_t result = (uint64_t)sub_216ABB798(&v56);
    goto LABEL_58;
  }
  std::string __p = "sdf/layer.cpp";
  long long v60 = "_OpenLayerAndUnlockRegistry";
  uint64_t v61 = 3320;
  unint64_t v62 = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::_OpenLayerAndUnlockRegistry(Lock &, const _Fin"
        "dOrOpenLayerInfo &, BOOL) [Loclong long k = tbb::queuing_rw_mutex::scoped_lock]";
  char v63 = 0;
  if (*(char *)(a2 + 119) >= 0) {
    unint64_t v40 = v8;
  }
  else {
    unint64_t v40 = *(const char **)(a2 + 96);
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot determine file format for @%s@", v40);
  uint64_t result = tbb::queuing_rw_mutex::scoped_lock::release(a1);
  *a4 = 0;
LABEL_58:
  while (v58--)
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v57);
  return result;
}

void sub_216ABA298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, atomic_uint *a15, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a15)
  {
    if (atomic_fetch_add_explicit(a15 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a15 + 8))(a15);
    }
  }
  sub_216ABB798(&a16);
  sub_21684E6B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

BOOL sub_216ABA3A0(uint64_t *a1, void *a2)
{
  if (sub_216851B24((uint64_t)a1))
  {
    if (!a1[1]) {
      return 0;
    }
    uint64_t v4 = sub_216850B68(a1 + 1);
    uint64_t v5 = *a1;
    if (!*(unsigned char *)(v4 + 14) || v5 == 0) {
      return 0;
    }
    return v5 == *a2;
  }
  else
  {
    return *a2 == 0;
  }
}

uint64_t sub_216ABA410(uint64_t a1)
{
  sub_2168EE084(a1 + 192);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  sub_2167877AC(a1 + 16, *(void **)(a1 + 24));
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t sub_216ABA4E8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217467E60 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C754A88);
}

uint64_t sub_216ABA574(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  if (sub_21695DC44(a2))
  {
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    sub_2168D2318(*(void **)(a1 + 8), v2);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(v2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216ABA5F8(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21695DC44(a2))
  {
    sub_216ABA6B8(a2, &v6);
    uint64_t v4 = *(uint64_t **)(a1 + 8);
    if (&v6 == v4)
    {
      if ((v6 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if ((*v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *uint64_t v4 = v6;
    }
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t *sub_216ABA6B8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  uint64_t result = sub_216ABA73C(a1);
  uint64_t v5 = *result;
  uint64_t *result = 0;
  *a2 = v5;
  uint64_t v6 = a1[1];
  if (v6) {
    BOOL v7 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(void *))((v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void *sub_216ABA73C(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return a1;
}

uint64_t sub_216ABA7CC(uint64_t a1, long long *a2, char a3)
{
  *(void *)a1 = &unk_26C759850;
  uint64_t v5 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24((unsigned char *)v5, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v5 = v6;
  }
  *(unsigned char *)(a1 + 32) = a3;
  return a1;
}

void sub_216ABA83C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfNotice::Base::~Base(v1);
  _Unwind_Resume(a1);
}

void *sub_216ABA850@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  void v6[4] = *MEMORY[0x263EF8340];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = (void *)sub_216ABA91C((uint64_t)a1);
  if (result)
  {
    uint64_t v5 = *a1;
    void v6[3] = 0;
    (*(void (**)(uint64_t, void *, void *))(*(void *)v5 + 72))(v5, a2, v6);
    return sub_216ABA994(v6);
  }
  return result;
}

void sub_216ABA8F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216ABA994((void ***)va);
  sub_2169CC68C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216ABA91C(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(void *)a1 + 8)))
  {
    v2[0] = "sdf/listEditorProxy.h";
    v2[1] = "_Validate";
    v2[2] = 423;
    void v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfReferenceType"
            "Policy>::_Validate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy]";
    char v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

void *sub_216ABA994(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_216ABAA18@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  void v6[4] = *MEMORY[0x263EF8340];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = (void *)sub_216ABAAE4((uint64_t)a1);
  if (result)
  {
    uint64_t v5 = *a1;
    void v6[3] = 0;
    (*(void (**)(uint64_t, void *, void *))(*(void *)v5 + 72))(v5, a2, v6);
    return sub_216ABAB5C(v6);
  }
  return result;
}

void sub_216ABAABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216ABAB5C((void ***)va);
  sub_2169CC78C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216ABAAE4(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(void *)a1 + 8)))
  {
    v2[0] = "sdf/listEditorProxy.h";
    v2[1] = "_Validate";
    v2[2] = 423;
    void v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePo"
            "licy>::_Validate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy]";
    char v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

void *sub_216ABAB5C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_216ABABE0(uint64_t a1)
{
  *(void *)a1 = &unk_26C758B40;
  sub_216981EE8(a1 + 16, *(void **)(a1 + 24));
  sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor((pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)a1);

  operator delete(v2);
}

uint64_t sub_216ABAC44(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  long long v6 = (uint64_t *)(a1 + 8);
  uint64_t v7 = sub_216A5B7B0((uint64_t *)(a1 + 8));
  if (!(*(unsigned int (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)v7 + 72))(v7, a3)|| (v8 = sub_216A5B7B0(v6), int v9 = (*(uint64_t (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)v8 + 96))(v8, a3), v9 != (*(unsigned int (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)a2 + 96))(a2, a3)))
  {
    sub_216A5CF30((uint64_t **)(a1 + 16), a3, a3);
  }
  return 1;
}

void sub_216ABAD2C(pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *a1)
{
  *(void *)a1 = &unk_26C758B88;
  sub_216981EE8((uint64_t)a1 + 16, *((void **)a1 + 3));
  pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor(a1);

  operator delete(v2);
}

uint64_t sub_216ABAD88(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  if (((*(uint64_t (**)(void, pxrInternal__aapl__pxrReserved__::SdfPath *))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8), a3) & 1) == 0)sub_216A5CF30((uint64_t **)(a1 + 16), a3, a3); {
  return 1;
  }
}

void sub_216ABADF4(pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *a1)
{
  *(void *)a1 = &unk_26C758BD0;
  sub_216ABB40C((uint64_t)a1 + 24, *((void **)a1 + 4));
  pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor(a1);

  operator delete(v2);
}

uint64_t sub_216ABAE50(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a2, const pxrInternal__aapl__pxrReserved__::SdfAbstractData *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfLayer::_ListFields(*(pxrInternal__aapl__pxrReserved__::SdfLayer **)(*(void *)(a1 + 8) + 80), *(const pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)(*(void *)(a1 + 8) + 112), a3, (uint64_t)v20);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_ListFields(*(pxrInternal__aapl__pxrReserved__::SdfLayer **)(a1 + 16), a2, a3, (uint64_t)&v18);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(v6 + 80);
  if (v8 == v7
    || (uint64_t v9 = sub_216A5B7B0((uint64_t *)(v6 + 112)),
        ((*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfAbstractData *))(*(void *)v9 + 72))(v9, a3) & 1) != 0))
  {
    for (long long i = (void *)v20[0]; i != (void *)v20[1]; ++i)
    {
      uint64_t v11 = v18;
      if (v18 != v19)
      {
        while (((unint64_t)*v11 & 0xFFFFFFFFFFFFFFF8) != (*i & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v11 == v19)
          {
            uint64_t v11 = v19;
            break;
          }
        }
      }
      if (v11 == v19)
      {
        v23.__type_name = 0;
        pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::VtValue>();
      }
    }
    char v12 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v18;
    uint64_t v13 = v19;
    if (v18 != v19)
    {
      do
      {
        sub_216ABB128(*(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)(a1 + 16), (uint64_t)a2, (uint64_t)a3, v12, &v23);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(*(pxrInternal__aapl__pxrReserved__::SdfLayer **)(a1 + 8), a3, v12, (pxrInternal__aapl__pxrReserved__::VtValue *)v21);
        if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v21, &v23, v14) & 1) == 0)
        {
          if (v8 == v7
            || v22
            || (uint64_t v15 = sub_216A5B7B0((uint64_t *)(*(void *)(a1 + 8) + 112)),
                unsigned int v16 = (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfAbstractData *))(*(void *)v15 + 96))(v15, a3), (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidFieldForSpec(v8, v12, v16) & 1) != 0))
          {
            pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::VtValue>();
          }
          sub_216ABB244((uint64_t **)(a1 + 24), (uint64_t *)v12, (uint64_t *)v12, a3);
        }
        sub_2168EE084((uint64_t)v21);
        sub_2168EE084((uint64_t)&v23);
        char v12 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v12 + 8);
      }
      while (v12 != (const pxrInternal__aapl__pxrReserved__::TfToken *)v13);
    }
  }
  v23.__vftable = (std::type_info_vtbl *)&v18;
  sub_216889A04((void ***)&v23);
  unsigned int v18 = (void **)v20;
  sub_216889A04(&v18);
  return 1;
}

void sub_216ABB0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  sub_216889A04(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_216ABB128@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const pxrInternal__aapl__pxrReserved__::TfToken *a4@<X3>, void *a5@<X8>)
{
  a5[1] = 0;
  unsigned int v12 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const pxrInternal__aapl__pxrReserved__::TfToken *, void *, unsigned int *))(*(void *)a2 + 128))(a2, a3, a4, a5, &v12);
  if ((result & 1) == 0)
  {
    if (v12)
    {
      uint64_t v9 = (void *)*((void *)a1 + 116);
      uint64_t v10 = (void *)*((void *)a1 + 117);
      if (v9 != v10)
      {
        while ((*v9 & 0xFFFFFFFFFFFFFFF8) != (*(void *)a4 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v9 == v10) {
            return result;
          }
        }
        if (*((unsigned char *)a1 + 72 * v12 + 120))
        {
          uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsRequiredField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)((char *)a1 + 72 * v12 + 56), a4);
          if (result)
          {
            uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(a1, a4);
            if (a5)
            {
              if (result)
              {
                uint64_t FallbackValue = (void *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)result);
                return (uint64_t)sub_2168EC6DC(a5, FallbackValue);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_216ABB230(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216ABB244(uint64_t **a1, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v7 = (uint64_t **)sub_2168BE158((uint64_t)a1, &v13, a2);
  uint64_t v8 = *v7;
  if (!*v7)
  {
    uint64_t v9 = v7;
    uint64_t v8 = (uint64_t *)operator new(0x30uLL);
    v11[1] = a1 + 1;
    sub_216ABB2FC((uint64_t)(v8 + 4), a3, a4);
    char v12 = 1;
    sub_21677B358(a1, v13, v9, v8);
    v11[0] = 0;
    sub_216ABB368((uint64_t)v11, 0);
  }
  return v8;
}

uint64_t sub_216ABB2FC(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_216981010((_DWORD *)(a1 + 8), a3);
  sub_21698105C((_DWORD *)(a1 + 12), a3 + 1);
  return a1;
}

void sub_216ABB368(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216ABB3C0((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

_DWORD *sub_216ABB3C0(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  uint64_t result = sub_21697C414((_DWORD *)(a1 + 8));
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216ABB40C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216ABB40C(a1, *a2);
    sub_216ABB40C(a1, a2[1]);
    sub_216ABB3C0((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(pxrInternal__aapl__pxrReserved__::SdfSpec *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    if (atomic_fetch_add((atomic_uint *volatile)v1, 0xFFFFFFFF) == 1) {
      pxrInternal__aapl__pxrReserved__::Sdf_Identity::_UnregisterOrDelete(v2, (_DWORD *)v1);
    }
  }
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216ABB4B0(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216ABB4E0(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

void sub_216ABB510(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_2168EE084(a2 + 144);
    if (*(char *)(a2 + 143) < 0) {
      operator delete(*(void **)(a2 + 120));
    }
    if (*(char *)(a2 + 119) < 0) {
      operator delete(*(void **)(a2 + 96));
    }
    if (*(char *)(a2 + 95) < 0) {
      operator delete(*(void **)(a2 + 72));
    }
    char v3 = (void **)(a2 + 48);
    sub_216787968(&v3);
    if (*(char *)(a2 + 47) < 0) {
      operator delete(*(void **)(a2 + 24));
    }
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    operator delete((void *)a2);
  }
}

unint64_t sub_216ABB5B0(atomic_ullong *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  char v3 = v2;
  uint64_t v4 = 0;
  v2[2] = 0;
  v2[1] = 0;
  *uint64_t v2 = v2 + 1;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v4, (unint64_t)v2);
  if (v4)
  {
    sub_216ABB61C((uint64_t)v2, (void *)v2[1]);
    operator delete(v3);
    return atomic_load((unint64_t *)a1);
  }
  return (unint64_t)v3;
}

void sub_216ABB61C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216ABB61C(a1, *a2);
    sub_216ABB61C(a1, a2[1]);
    sub_216ABB678((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_216ABB678(uint64_t a1)
{
  sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *sub_216ABB6C8(atomic_ullong *a1)
{
  uint64_t result = sub_216ABB710();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      uint64_t v4 = (void *)sub_216ABB754((uint64_t)result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *sub_216ABB710()
{
  v0 = (pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *)operator new(0x78uLL);
  pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Sdf_LayerRegistry(v0);
  return v0;
}

void sub_216ABB740(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216ABB754(uint64_t a1)
{
  sub_2168E7B94(a1 + 80);
  sub_2168E7B94(a1 + 40);

  return sub_2168E7B94(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216ABB798(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *sub_216ABB7C8(atomic_ullong *a1)
{
  uint64_t result = sub_216ABB810();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType::~SdfTextFileFormatTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *sub_216ABB810()
{
  v0 = (pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *)operator new(0x30uLL);
  pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType::SdfTextFileFormatTokens_StaticTokenType(v0);
  return v0;
}

void sub_216ABB840(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216ABB854(void *a1, void *a2)
{
  sub_216779180(a1, (uint64_t)"< ", 2);
  uint64_t v6 = (void *)*a2;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = v6;
  if (v6 != v4)
  {
    do
    {
      uint64_t v7 = sub_216779180(a1, (uint64_t)"<", 1);
      int v8 = *((char *)v5 + 55);
      if (v8 >= 0) {
        uint64_t v9 = (uint64_t)(v5 + 4);
      }
      else {
        uint64_t v9 = v5[4];
      }
      if (v8 >= 0) {
        uint64_t v10 = *((unsigned __int8 *)v5 + 55);
      }
      else {
        uint64_t v10 = v5[5];
      }
      uint64_t v11 = sub_216779180(v7, v9, v10);
      char v12 = sub_216779180(v11, (uint64_t)": ", 2);
      int v13 = *((char *)v5 + 79);
      if (v13 >= 0) {
        uint64_t v14 = (uint64_t)(v5 + 7);
      }
      else {
        uint64_t v14 = v5[7];
      }
      if (v13 >= 0) {
        uint64_t v15 = *((unsigned __int8 *)v5 + 79);
      }
      else {
        uint64_t v15 = v5[8];
      }
      unsigned int v16 = sub_216779180(v12, v14, v15);
      sub_216779180(v16, (uint64_t)"> ", 2);
      uint64_t v17 = (void *)v5[1];
      if (v17)
      {
        do
        {
          unsigned int v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          unsigned int v18 = (void *)v5[2];
          BOOL v19 = *v18 == (void)v5;
          uint64_t v5 = v18;
        }
        while (!v19);
      }
      uint64_t v5 = v18;
    }
    while (v18 != v4);
  }
  sub_216779180(a1, (uint64_t)">", 1);
  return a1;
}

uint64_t sub_216ABB984(uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 48 * a3;
    do
    {
      sub_2167899B4((uint64_t **)a1, v4, a2, (long long *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_216ABB9F0(_Unwind_Exception *a1)
{
  sub_2167877AC(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_216ABBA08@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t result = a1 + 8;
  if (!v5
    || ((uint64_t result = sub_216850B68((uint64_t *)result),
         uint64_t v7 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1,
         *(unsigned char *)(result + 14))
      ? (BOOL v8 = v7 == 0)
      : (BOOL v8 = 1),
        v8
     || (uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::AddRefIfNonzero(v7, v6),
         (result & 1) == 0)))
  {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t *sub_216ABBA60(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_21685203C((unint64_t *)(v3 + 16), &v7);
    uint64_t v4 = (atomic_uint *)a1[1];
    a1[1] = v7;
    uint64_t v7 = 0;
    if (v4)
    {
      if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
      }
      uint64_t v5 = v7;
      if (v7 && atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
    }
  }
  return a1;
}

void sub_216ABBB30(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_217324208(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216ABBB48(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2169980B4(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_216ABBBDC, (uint64_t)&stru_26C755240);
  }
}

uint64_t sub_216ABBBE0@<X0>(uint64_t a1@<X8>)
{
  sub_216ABBC34(v4);
  uint64_t v2 = v4[1];
  *(pxrInternal__aapl__pxrReserved__::SdfAssetPath **)a1 = v4[0];
  *(void *)(a1 + 8) = v2;
  v4[0] = 0;
  *(void *)(a1 + 16) = &stru_26C755240;
  return ((uint64_t (*)(void))v2)(0);
}

void sub_216ABBC34(pxrInternal__aapl__pxrReserved__::SdfAssetPath **a1@<X8>)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)operator new(0x30uLL);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v2);
  *a1 = v2;
  a1[1] = (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)sub_216ABBC88;
}

void sub_216ABBC74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216ABBC88(void **__p)
{
  if (__p)
  {
    if (*((char *)__p + 47) < 0) {
      operator delete(__p[3]);
    }
    if (*((char *)__p + 23) < 0) {
      operator delete(*__p);
    }
    operator delete(__p);
  }
}

void sub_216ABBCE8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216ABBD10(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216ABBD40(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C758C58)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_216ABBD84(unsigned int *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (sub_216ABBF20((uint64_t)a1))
  {
    if (!a3 && *a4 == a4[1])
    {
      (*(void (**)(void **__return_ptr))(**(void **)a1 + 32))(__p);
      if (v17)
      {
        uint64_t v10 = "sdf/listProxy.h";
        uint64_t v11 = "_Edit";
        uint64_t v12 = 750;
        int v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolic"
              "y>::_Edit(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfS"
              "ubLayerTypePolicy]";
        char v14 = 0;
        WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
        if (*((char *)WhyNot + 23) >= 0) {
          uint64_t v9 = (const char *)WhyNot;
        }
        else {
          uint64_t v9 = (const char *)*WhyNot;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Editing list: %s", v9);
        if (v17 && v16 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else if (((*(uint64_t (**)(void, void, uint64_t, uint64_t, void *))(**(void **)a1 + 80))(*(void *)a1, a1[4], a2, a3, a4) & 1) == 0)
    {
      uint64_t v10 = "sdf/listProxy.h";
      uint64_t v11 = "_Edit";
      uint64_t v12 = 758;
      int v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy>"
            "::_Edit(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy]";
      char v14 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Inserting invalid value into list editor");
    }
  }
}

void sub_216ABBEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a21)
  {
    if (a20 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216ABBF20(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(void *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 689;
    void v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy>"
            "::_Validate() [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy]";
    char v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

void *sub_216ABBF98(void *a1)
{
  *a1 = &unk_26C758C78;
  uint64_t v2 = (atomic_uint *)a1[3];
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_216ABC018(void *__p)
{
  void *__p = &unk_26C758C78;
  uint64_t v2 = (atomic_uint *)__p[3];
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  operator delete(__p);
}

char *sub_216ABC0A8(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_26C758C78;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_216ABC10C(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26C758C78;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint *sub_216ABC14C(uint64_t a1)
{
  uint64_t result = *(atomic_uint **)(a1 + 24);
  if (result)
  {
    if (atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
  }
  return result;
}

void sub_216ABC190(void *__p)
{
  uint64_t v2 = (atomic_uint *)__p[3];
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  operator delete(__p);
}

uint64_t sub_216ABC204(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a1 + 16);
}

uint64_t sub_216ABC214(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C758D10)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216ABC254()
{
  return &unk_26C758D10;
}

void *sub_216ABC260(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_216ABC2E4(void *a1)
{
  *a1 = &unk_26C758D38;
  uint64_t v2 = (atomic_uint *)a1[3];
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_216ABC364(void *__p)
{
  void *__p = &unk_26C758D38;
  uint64_t v2 = (atomic_uint *)__p[3];
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  operator delete(__p);
}

char *sub_216ABC3F4(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_26C758D38;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_216ABC458(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26C758D38;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint *sub_216ABC498(uint64_t a1)
{
  uint64_t result = *(atomic_uint **)(a1 + 24);
  if (result)
  {
    if (atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
  }
  return result;
}

void sub_216ABC4DC(void *__p)
{
  uint64_t v2 = (atomic_uint *)__p[3];
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  operator delete(__p);
}

uint64_t sub_216ABC550(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 8))(a1 + 16, a2, *a3);
}

uint64_t sub_216ABC564(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C758DB8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216ABC5A4()
{
  return &unk_26C758DB8;
}

void *sub_216ABC5B0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_216ABC634(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 5;
        sub_216ABC6CC((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_216ABC6CC(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 3);
  sub_21697C414(a2 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 1);

  return sub_21697C414(a2);
}

void *sub_216ABC720(void *a1)
{
  *a1 = &unk_26C758DE0;
  uint64_t v2 = (atomic_uint *)a1[3];
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_216ABC7A0(void *__p)
{
  void *__p = &unk_26C758DE0;
  uint64_t v2 = (atomic_uint *)__p[3];
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  operator delete(__p);
}

char *sub_216ABC830(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_26C758DE0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_216ABC894(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26C758DE0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint *sub_216ABC8D4(uint64_t a1)
{
  uint64_t result = *(atomic_uint **)(a1 + 24);
  if (result)
  {
    if (atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
  }
  return result;
}

void sub_216ABC918(void *__p)
{
  uint64_t v2 = (atomic_uint *)__p[3];
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  operator delete(__p);
}

uint64_t sub_216ABC98C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a1 + 16);
}

uint64_t sub_216ABC99C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C758E40)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216ABC9DC()
{
  return &unk_26C758E40;
}

void *sub_216ABC9E8(void *a1)
{
  *a1 = &unk_26C758E68;
  uint64_t v2 = (atomic_uint *)a1[3];
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_216ABCA68(void *__p)
{
  void *__p = &unk_26C758E68;
  uint64_t v2 = (atomic_uint *)__p[3];
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  operator delete(__p);
}

char *sub_216ABCAF8(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_26C758E68;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_216ABCB5C(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26C758E68;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint *sub_216ABCB9C(uint64_t a1)
{
  uint64_t result = *(atomic_uint **)(a1 + 24);
  if (result)
  {
    if (atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
  }
  return result;
}

void sub_216ABCBE0(void *__p)
{
  uint64_t v2 = (atomic_uint *)__p[3];
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  operator delete(__p);
}

uint64_t sub_216ABCC54(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 8))(a1 + 16, a2, *a3);
}

uint64_t sub_216ABCC68(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C758EC8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216ABCCA8()
{
  return &unk_26C758EC8;
}

void sub_216ABCCB4(_OWORD *a1)
{
  *a1 = 0u;
  a1[1] = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::Sdf_Children();
}

void sub_216ABCD14(_Unwind_Exception *a1)
{
  sub_216991118(v1);
  _Unwind_Resume(a1);
}

void sub_216ABCD2C(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  a1[4] = 0;
  a1[5] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::Sdf_Children();
}

void sub_216ABCDF8(_Unwind_Exception *a1)
{
  sub_216991430(v1);
  _Unwind_Resume(a1);
}

void **sub_216ABCE20(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t result = (void **)a2;
  if (a1 != a2)
  {
    do
    {
      uint64_t v7 = a1 + 24;
      if (a1 + 24 == a2) {
        return (void **)a2;
      }
      int v8 = sub_2168513F8(a3, a1, a1 + 24);
      a1 = v7;
    }
    while (!v8);
    uint64_t v9 = v7 + 24;
    uint64_t v10 = v7 - 24;
    if (v9 == a2)
    {
      uint64_t v11 = (void **)v10;
    }
    else
    {
      do
      {
        if (sub_2168513F8(a3, v10, v9))
        {
          uint64_t v11 = (void **)v10;
        }
        else
        {
          uint64_t v11 = (void **)(v10 + 24);
          if ((char)v10[47] < 0) {
            operator delete(*v11);
          }
          long long v12 = *(_OWORD *)v9;
          *((void *)v10 + 5) = *((void *)v9 + 2);
          *(_OWORD *)uint64_t v11 = v12;
          v9[23] = 0;
          *uint64_t v9 = 0;
          v10 += 24;
        }
        v9 += 24;
      }
      while (v9 != a2);
    }
    return v11 + 3;
  }
  return result;
}

unint64_t sub_216ABCF04()
{
  v0 = operator new(0x38uLL);
  _OWORD *v0 = 0u;
  v0[1] = 0u;
  v0[2] = 0u;
  *((unsigned char *)v0 + 48) = 0;
  uint64_t v1 = (std::string *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_LAYER_INCLUDE_DETACHED);
  if (!v1) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>();
  }
  sub_216779094(__p, ",");
  pxrInternal__aapl__pxrReserved__::TfStringSplit(v1, (char *)__p, (uint64_t *)&v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = sub_216ABD120(v11, v12, "*");
  if (v2 == v12)
  {
    if (v11 != v2) {
      pxrInternal__aapl__pxrReserved__::SdfLayer::DetachedLayerRules::Include((uint64_t)v0, (uint64_t)&v11);
    }
  }
  else
  {
    *((unsigned char *)v0 + 48) = 1;
    sub_216782F74((uint64_t *)v0);
  }
  uint64_t v3 = (std::string *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_LAYER_EXCLUDE_DETACHED);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>();
  }
  sub_216779094(v7, ",");
  pxrInternal__aapl__pxrReserved__::TfStringSplit(v3, (char *)v7, (uint64_t *)__p);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (__p[0] != __p[1]) {
    pxrInternal__aapl__pxrReserved__::SdfLayer::DetachedLayerRules::Exclude((uint64_t)v0, (uint64_t)__p);
  }
  v7[0] = __p;
  sub_216782F20((void ***)v7);
  __p[0] = &v11;
  sub_216782F20((void ***)__p);
  uint64_t v4 = 0;
  atomic_compare_exchange_strong(&qword_267B8EDF0, (unint64_t *)&v4, (unint64_t)v0);
  if (v4)
  {
    uint64_t v6 = sub_216AB217C((void **)v0);
    operator delete(v6);
    return atomic_load((unint64_t *)&qword_267B8EDF0);
  }
  return (unint64_t)v0;
}

void sub_216ABD0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, uint64_t a18, char a19)
{
  a16 = &a19;
  sub_216782F20((void ***)&a16);
  _Unwind_Resume(a1);
}

void sub_216ABD108(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x216ABD100);
}

unsigned __int8 *sub_216ABD120(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    size_t v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((void *)v3 + 1))
        {
          if (v6 == -1) {
LABEL_14:
          }
            sub_216855AD4();
          uint64_t v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6)) {
            return v3;
          }
        }
      }
      else if (v6 == v3[23])
      {
        uint64_t v7 = v3;
        if (v6 == -1) {
          goto LABEL_14;
        }
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

unint64_t sub_216ABD1D4(atomic_ullong *a1)
{
  uint64_t v2 = (char **)operator new(0x18uLL);
  uint64_t v3 = v2;
  uint64_t v4 = 0;
  v2[2] = 0;
  v2[1] = 0;
  *uint64_t v2 = (char *)(v2 + 1);
  atomic_compare_exchange_strong(a1, (unint64_t *)&v4, (unint64_t)v2);
  if (v4)
  {
    sub_21678A498((uint64_t)v2, v2[1]);
    operator delete(v3);
    return atomic_load((unint64_t *)a1);
  }
  return (unint64_t)v3;
}

uint64_t *sub_216ABD240(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_216ABD298(a1, *a2, a2 + 1);
  return a1;
}

void sub_216ABD280(_Unwind_Exception *a1)
{
  sub_21678A498(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_216ABD298(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    size_t v6 = result + 1;
    do
    {
      uint64_t result = sub_216814A8C(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          char v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          char v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_216ABD324(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  size_t v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    char v8 = v6;
    sub_216ABD3D0((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_216ABD464((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_216ABD3D0@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  size_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 32;
  char v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  *((void *)v6 + 7) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216ABD44C(_Unwind_Exception *a1)
{
  sub_216ABD464(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216ABD464(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216ABB678((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *sub_216ABD4BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_21685203C((unint64_t *)(v3 + 16), &v7);
    uint64_t v4 = (atomic_uint *)a1[1];
    a1[1] = v7;
    uint64_t v7 = 0;
    if (v4)
    {
      if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
      }
      uint64_t v5 = v7;
      if (v7 && atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
    }
  }
  return a1;
}

void sub_216ABD58C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_217324208(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216ABD5A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_21685203C((unint64_t *)(v3 + 16), &v7);
    uint64_t v4 = (atomic_uint *)a1[1];
    a1[1] = v7;
    uint64_t v7 = 0;
    if (v4)
    {
      if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
      }
      uint64_t v5 = v7;
      if (v7 && atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
    }
  }
  return a1;
}

void sub_216ABD674(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_217324208(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216ABD68C(uint64_t a1)
{
  if (!sub_216ABD6F8(a1)) {
    return 0;
  }
  uint64_t result = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)result + 112))(result, *(unsigned int *)(a1 + 16));
    return (uint64_t)(v3[1] - *v3) >> 3;
  }
  return result;
}

uint64_t sub_216ABD6F8(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(void *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 702;
    void v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy>"
            "::_Validate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy]";
    char v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

void *sub_216ABD770(void *a1, long long *a2, long long *a3)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
  long long v7 = *a2;
  uint64_t v8 = *((void *)a2 + 2);
  long long v5 = *a3;
  uint64_t v6 = *((void *)a3 + 2);
  sub_216ABD7F0((uint64_t)a1, (uint64_t)&v7, (uint64_t)&v5);
  return a1;
}

void sub_216ABD7D8(_Unwind_Exception *a1)
{
  sub_21678A498(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL sub_216ABD7F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (BOOL result = sub_216ABD870(a2, a3); !result; BOOL result = sub_216ABD870(a2, a3))
  {
    uint64_t v7 = *(void *)(a2 + 16);
    v8[0] = *(void *)(a2 + 8);
    v8[1] = v7;
    sub_216ABD8F0((uint64_t **)a1, (uint64_t *)(a1 + 8), (uint64_t)v8);
    ++*(void *)(a2 + 16);
  }
  return result;
}

BOOL sub_216ABD870(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    return *(void *)(a1 + 16) == *(void *)(a2 + 16);
  }
  v3[0] = "sdf/listProxy.h";
  v3[1] = "equal";
  _OWORD v3[2] = 268;
  v3[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy>::"
          "_Iterator<pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePoli"
          "cy> *, pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy>"
          "::_GetHelper>::equal(const This &) const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolic"
          "y, Owner = pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePol"
          "icy> *, GetItelong long m = pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayer"
          "TypePolicy>::_GetHelper]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Comparing SdfListProxy iterators from different proxies!");
  return 0;
}

uint64_t *sub_216ABD8F0(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  sub_216ABD9A4((uint64_t)a1, a3, (uint64_t)&__p);
  long long v5 = (uint64_t **)sub_216789A4C(a1, a2, &v10, &v9, (const void **)__p + 4);
  uint64_t v6 = *v5;
  if (*v5)
  {
    uint64_t v7 = (void **)__p;
    std::string __p = 0;
    if (v7) {
      sub_21678C278((uint64_t)&v12, v7);
    }
  }
  else
  {
    sub_21677B358(a1, (uint64_t)v10, v5, (uint64_t *)__p);
    return (uint64_t *)__p;
  }
  return v6;
}

void sub_216ABD980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    sub_21678C278((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216ABD9A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  BOOL result = sub_21697E720(*(uint64_t **)a2, *(void *)(a2 + 8), v6 + 4);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216ABDA0C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_21678C278(v3, v2);
  _Unwind_Resume(a1);
}

unint64_t sub_216ABDA28(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  char v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v5 = sub_2169CAFD0(*v4, v4[1], a3);
  if (v5 == v4[1]) {
    return -1;
  }
  else {
    return 0xAAAAAAAAAAAAAAABLL * ((v5 - *v4) >> 3);
  }
}

char *sub_216ABDAB8(char *__dst, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v5;
  }
  uint64_t v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(v6, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v6 = v7;
  }
  return __dst;
}

void sub_216ABDB34(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216ABDB50(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, char *a4@<X8>)
{
  size_t v6 = a3[23];
  size_t v7 = *((void *)a3 + 1);
  if ((v6 & 0x80u) == 0) {
    size_t v8 = v6;
  }
  else {
    size_t v8 = v7;
  }
  uint64_t v9 = a1[23];
  int v10 = (char)v9;
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *((void *)a1 + 1);
  }
  if (v8 != v9) {
    goto LABEL_17;
  }
  if (v10 >= 0) {
    uint64_t v12 = a1;
  }
  else {
    uint64_t v12 = *(unsigned __int8 **)a1;
  }
  if ((v6 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a3, v12, v7)) {
      goto LABEL_19;
    }
LABEL_17:
    sub_2169D5338(a4, (long long *)a3);
    a4[56] = 1;
    return;
  }
  if (v6)
  {
    int v13 = a3;
    while (*v13 == *v12)
    {
      ++v13;
      ++v12;
      if (!--v6) {
        goto LABEL_19;
      }
    }
    goto LABEL_17;
  }
LABEL_19:
  uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *(void *)(a2 + 8);
  }
  if (v14)
  {
    sub_2169D5338((char *)__p, (long long *)a3);
    sub_216ABDCAC((uint64_t)__p);
    sub_216A9985C((uint64_t)a4, (long long *)__p);
    sub_2168EBBB8(&v19, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v18);
    sub_21697C414(&v17);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *a4 = 0;
    a4[56] = 0;
  }
}

void sub_216ABDC98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169D5474((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216ABDCAC(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v2);
  if (SHIBYTE(v3) < 0)
  {
    sub_216778F24(&__dst, v2[0], (unint64_t)v2[1]);
  }
  else
  {
    long long __dst = *(_OWORD *)v2;
    uint64_t v7 = v3;
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(_OWORD *)a1 = __dst;
  *(void *)(a1 + 16) = v7;
  HIBYTE(v7) = 0;
  LOBYTE(__dst) = 0;
  if (v5 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v3) < 0) {
    operator delete(v2[0]);
  }
}

void sub_216ABDD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216ABDD60(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(void *)a1 + 8)))
  {
    v2[0] = "sdf/listEditorProxy.h";
    v2[1] = "_Validate";
    v2[2] = 410;
    void v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfReferenceType"
            "Policy>::_Validate() [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy]";
    char v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

char *sub_216ABDDD8(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  char v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_216778F24(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)char v5 = v6;
  }
  return __dst;
}

void sub_216ABDE54(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216ABDE70(uint64_t a1)
{
  *(void *)a1 = &unk_26C758EF0;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_216ABDED0(void **__p)
{
  void *__p = &unk_26C758EF0;
  if (*((char *)__p + 63) < 0) {
    operator delete(__p[5]);
  }
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }

  operator delete(__p);
}

void *sub_216ABDF40(uint64_t a1)
{
  uint64_t v2 = operator new(0x40uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v2 = &unk_26C758EF0;
  *((void *)v2 + 1) = v3;
  sub_216ABDDD8((char *)v2 + 16, (long long *)(a1 + 16));
  return v2;
}

void sub_216ABDF98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_216ABDFAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26C758EF0;
  *(void *)(a2 + 8) = v2;
  return sub_216ABDDD8((char *)(a2 + 16), (long long *)(a1 + 16));
}

void sub_216ABDFDC(uint64_t a1)
{
}

void sub_216ABDFE4(void *a1)
{
  sub_216ABE084((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_216ABE020(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1 + 16, a1 + 40, a2);
}

uint64_t sub_216ABE038(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C758F60)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216ABE078()
{
  return &unk_26C758F60;
}

void sub_216ABE084(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

void sub_216ABE0DC(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = a3[23];
  unint64_t v7 = *((void *)a3 + 1);
  if ((v6 & 0x80u) == 0) {
    uint64_t v8 = a3[23];
  }
  else {
    uint64_t v8 = *((void *)a3 + 1);
  }
  uint64_t v9 = a1[23];
  int v10 = (char)v9;
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *((void *)a1 + 1);
  }
  if (v8 == v9)
  {
    if (v10 >= 0) {
      uint64_t v12 = a1;
    }
    else {
      uint64_t v12 = *(unsigned __int8 **)a1;
    }
    if ((v6 & 0x80) == 0)
    {
      if (a3[23])
      {
        int v13 = a3;
        while (*v13 == *v12)
        {
          ++v13;
          ++v12;
          if (!--v6) {
            goto LABEL_15;
          }
        }
        goto LABEL_20;
      }
LABEL_15:
      uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
      if ((v14 & 0x80u) != 0) {
        uint64_t v14 = *(void *)(a2 + 8);
      }
      if (v14)
      {
        *(_OWORD *)std::string __p = *(_OWORD *)a3;
        uint64_t v17 = *((void *)a3 + 2);
        goto LABEL_27;
      }
      goto LABEL_29;
    }
    if (!memcmp(*(const void **)a3, v12, *((void *)a3 + 1)))
    {
      uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
      if ((v15 & 0x80u) != 0) {
        uint64_t v15 = *(void *)(a2 + 8);
      }
      if (v15)
      {
        sub_216778F24(__p, *(void **)a3, v7);
LABEL_27:
        sub_216981010(&v18, (_DWORD *)a3 + 6);
        sub_21698105C(&v19, (_DWORD *)a3 + 7);
        long long v20 = *((_OWORD *)a3 + 2);
        sub_216ABE2D8((uint64_t)__p);
        *(_OWORD *)a4 = *(_OWORD *)__p;
        *(void *)(a4 + 16) = v17;
        __p[1] = 0;
        uint64_t v17 = 0;
        __p[0] = 0;
        sub_21697D878((_DWORD *)(a4 + 24), &v18);
        sub_21697D8B4((_DWORD *)(a4 + 28), &v19);
        *(_OWORD *)(a4 + 32) = v20;
        *(unsigned char *)(a4 + 48) = 1;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
        sub_21697C414(&v18);
        if (SHIBYTE(v17) < 0) {
          operator delete(__p[0]);
        }
        return;
      }
LABEL_29:
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 48) = 0;
      return;
    }
  }
LABEL_20:

  sub_216ABE38C((void *)a4, (long long *)a3);
}

void sub_216ABE2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216ABE2D8(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v2);
  if (SHIBYTE(v3) < 0)
  {
    sub_216778F24(&__dst, v2[0], (unint64_t)v2[1]);
  }
  else
  {
    long long __dst = *(_OWORD *)v2;
    uint64_t v7 = v3;
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(_OWORD *)a1 = __dst;
  *(void *)(a1 + 16) = v7;
  HIBYTE(v7) = 0;
  LOBYTE(__dst) = 0;
  if (v5 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v3) < 0) {
    operator delete(v2[0]);
  }
}

void sub_216ABE378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216ABE38C(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_216981010((_DWORD *)__dst + 6, (_DWORD *)a2 + 6);
  sub_21698105C((_DWORD *)__dst + 7, (_DWORD *)a2 + 7);
  *((_OWORD *)__dst + 2) = a2[2];
  *((unsigned char *)__dst + 48) = 1;
  return __dst;
}

uint64_t sub_216ABE404(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(void *)a1 + 8)))
  {
    v2[0] = "sdf/listEditorProxy.h";
    v2[1] = "_Validate";
    v2[2] = 410;
    void v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePo"
            "licy>::_Validate() [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy]";
    char v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

uint64_t sub_216ABE47C(uint64_t a1)
{
  *(void *)a1 = &unk_26C758F88;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_216ABE4DC(void **__p)
{
  void *__p = &unk_26C758F88;
  if (*((char *)__p + 63) < 0) {
    operator delete(__p[5]);
  }
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }

  operator delete(__p);
}

void *sub_216ABE54C(uint64_t a1)
{
  uint64_t v2 = operator new(0x40uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v2 = &unk_26C758F88;
  *((void *)v2 + 1) = v3;
  sub_216ABDDD8((char *)v2 + 16, (long long *)(a1 + 16));
  return v2;
}

void sub_216ABE5A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_216ABE5B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26C758F88;
  *(void *)(a2 + 8) = v2;
  return sub_216ABDDD8((char *)(a2 + 16), (long long *)(a1 + 16));
}

void sub_216ABE5E8(uint64_t a1)
{
}

void sub_216ABE5F0(void *a1)
{
  sub_216ABE084((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_216ABE62C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1 + 16, a1 + 40, a2);
}

uint64_t sub_216ABE644(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C758FF8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216ABE684()
{
  return &unk_26C758FF8;
}

void *sub_216ABE690(void *a1, unint64_t a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21677CACC(a1, a2);
    uint64_t v6 = (uint64_t *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      uint64_t v9 = *a3;
      *uint64_t v6 = *a3;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v6 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v6;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_216ABE730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_216ABE744(uint64_t a1, uint64_t **a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, a1);
  *(void *)(a1 + 8) = &off_26C756C08;
  sub_2169DBAB4((unsigned int **)a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216ABE7D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_216ABE814(uint64_t ***a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t ***))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169DBA14(a1);
}

void *sub_216ABE8A8(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21677CACC(a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    uint64_t v7 = &v6[2 * a2];
    uint64_t v8 = 8 * a2;
    do
    {
      sub_216981010(v6, a3);
      sub_21698105C(v6 + 1, a3 + 1);
      v6 += 2;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_216ABE940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_216ABE954(uint64_t a1, void *a2, void *a3, uint64_t a4, _DWORD *a5, _DWORD *a6)
{
  *(void *)a1 = *a2;
  sub_2168BD80C((uint64_t *)a1);
  *(void *)(a1 + 8) = *a3;
  sub_216981010((_DWORD *)(a1 + 16), a5);
  sub_21698105C((_DWORD *)(a1 + 20), a5 + 1);
  sub_216981010((_DWORD *)(a1 + 24), a6);
  sub_21698105C((_DWORD *)(a1 + 28), a6 + 1);
  return a1;
}

uint64_t sub_216ABE9D0(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 24) = 0;
  long long v4 = operator new(0x30uLL);
  uint64_t v5 = *a2;
  *long long v4 = &unk_26C759030;
  v4[1] = v5;
  sub_216ABEC74((uint64_t)(v4 + 2), (uint64_t)(a2 + 1));
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_216ABEA3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216ABEA50(uint64_t a1)
{
  *(void *)a1 = &unk_26C759030;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 44));
  sub_21697C414((_DWORD *)(a1 + 40));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_21697C414((_DWORD *)(a1 + 32));
  sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 16));
  return a1;
}

void sub_216ABEAC0(void *a1)
{
  *(void *)a1 = &unk_26C759030;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 11);
  sub_21697C414((_DWORD *)a1 + 10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 9);
  sub_21697C414((_DWORD *)a1 + 8);
  sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1 + 2);

  operator delete(a1);
}

void *sub_216ABEB40(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = &unk_26C759030;
  v2[1] = v3;
  sub_216ABECE0((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_216ABEB98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216ABEBAC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26C759030;
  a2[1] = v2;
  return sub_216ABECE0((uint64_t)(a2 + 2), a1 + 16);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216ABEBDC(uint64_t a1)
{
  return sub_216ABED4C(a1 + 8);
}

void sub_216ABEBE4(void *a1)
{
  sub_216ABED4C((uint64_t)a1 + 8);

  operator delete(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216ABEC20(uint64_t a1, uint64_t a2)
{
  return sub_216ABEDAC(a1 + 8, a2);
}

uint64_t sub_216ABEC28(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7590B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216ABEC68()
{
  return &unk_26C7590B0;
}

uint64_t sub_216ABEC74(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  sub_21697D878((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21697D8B4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  sub_21697D878((_DWORD *)(a1 + 24), (_DWORD *)(a2 + 24));
  sub_21697D8B4((_DWORD *)(a1 + 28), (_DWORD *)(a2 + 28));
  return a1;
}

uint64_t sub_216ABECE0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  sub_2168BD80C((uint64_t *)a1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  sub_216981010((_DWORD *)(a1 + 24), (_DWORD *)(a2 + 24));
  sub_21698105C((_DWORD *)(a1 + 28), (_DWORD *)(a2 + 28));
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216ABED4C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_21697C414((_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));

  return sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8));
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216ABEDAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 24;
  uint64_t v5 = a1 + 32;
  uint64_t v6 = *(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, void, uint64_t, uint64_t, uint64_t))a1;
  uint64_t v8 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8);
  sub_2168BD80C((uint64_t *)&v8);
  v6(&v8, *(void *)(a1 + 16), a2, v4, v5);
  return sub_216AA10A8(&v8);
}

void sub_216ABEE20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

void *sub_216ABEE34(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

__n128 sub_216ABEEC0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7590D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216ABEF0C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7590D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216ABEF3C(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
}

uint64_t sub_216ABEF50(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C759138)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216ABEF90()
{
  return &unk_26C759138;
}

__n128 sub_216ABEFA4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C759158;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216ABEFF0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C759158;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216ABF020(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)(a1 + 16));
}

uint64_t sub_216ABF028(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7591E0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216ABF068()
{
  return &unk_26C7591E0;
}

uint64_t sub_216ABF074(uint64_t a1, uint64_t ***a2)
{
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (uint64_t **)(*(uint64_t (**)(uint64_t ***))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    if (*(uint64_t ***)(a1 + 8) != v5) {
      sub_216ABF1B0(*(void **)(a1 + 8), *v5, v5[1], v5[1] - *v5);
    }
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216ABF10C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21697BFBC(a2))
  {
    sub_216ABF350((uint64_t)a2, (uint64_t **)&v6);
    uint64_t v4 = *(void *)(a1 + 8);
    sub_216A698A4((void **)v4);
    *(_OWORD *)uint64_t v4 = v6;
    *(void *)(v4 + 16) = v7;
    long long v6 = 0uLL;
    uint64_t v7 = 0;
    uint64_t v8 = (void **)&v6;
    sub_216889A04(&v8);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void *sub_216ABF1B0(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  long long v6 = a2;
  uint64_t v7 = result;
  uint64_t v8 = (char *)*result;
  if (a4 > (uint64_t)(result[2] - *result) >> 3)
  {
    sub_216A698A4((void **)result);
    if (a4 >> 61) {
      sub_21677CB10();
    }
    uint64_t v9 = v7[2] - *v7;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_21677CACC(v7, v11);
    uint64_t v12 = (uint64_t)v7;
    int v13 = v6;
    uint64_t v14 = a3;
LABEL_19:
    return (void *)sub_21698FAA0(v12, v13, v14);
  }
  uint64_t v15 = (char *)result[1];
  unint64_t v16 = (v15 - v8) >> 3;
  if (v16 < a4)
  {
    uint64_t v17 = &a2[v16];
    if (v15 != v8)
    {
      uint64_t v18 = 8 * v16;
      do
      {
        sub_2168D2318(v8, v6++);
        v8 += 8;
        v18 -= 8;
      }
      while (v18);
    }
    uint64_t v12 = (uint64_t)v7;
    int v13 = v17;
    uint64_t v14 = a3;
    goto LABEL_19;
  }
  if (a2 == a3)
  {
    int v19 = (char *)*result;
  }
  else
  {
    int v19 = (char *)*result;
    do
    {
      uint64_t result = sub_2168D2318(v8, v6++);
      v8 += 8;
      v19 += 8;
    }
    while (v6 != a3);
    uint64_t v15 = (char *)v7[1];
  }
  while (v15 != v19)
  {
    uint64_t v21 = *((void *)v15 - 1);
    v15 -= 8;
    uint64_t v20 = v21;
    if ((v21 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  v7[1] = v19;
  return result;
}

uint64_t **sub_216ABF350@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = sub_216ABE814((uint64_t ***)a1);
  uint64_t v5 = *result;
  void *result = 0;
  *a2 = v5;
  long long v6 = result[1];
  result[1] = 0;
  a2[1] = v6;
  uint64_t v7 = result[2];
  result[2] = 0;
  a2[2] = v7;
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8 && (*(void *)(a1 + 8) & 3) != 3) {
    uint64_t result = (uint64_t **)(*(uint64_t (**)(uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void sub_216ABF3D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216ABF3EC()
{
  sub_216ABF744();

  return sub_216ABF848();
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity(pxrInternal__aapl__pxrReserved__::SdfLayerOffset *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EE40, memory_order_acquire) & 1) == 0)
  {
    uint64_t v3 = this;
    int v2 = __cxa_guard_acquire(&qword_267B8EE40);
    this = v3;
    if (v2)
    {
      xmmword_267B8EE30 = xmmword_217409FD0;
      __cxa_guard_release(&qword_267B8EE40);
      this = v3;
    }
  }

  return pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==((double *)this, (double *)&xmmword_267B8EE30);
}

double *pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(double *this, double a2, double a3)
{
  *this = a2;
  this[1] = a3;
  return this;
}

{
  *this = a2;
  this[1] = a3;
  return this;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==(double *a1, double *a2)
{
  if ((*(void *)a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || ((void)a1[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    double v2 = *a2;
    if ((*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || ((void)a2[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      return 1;
    }
  }
  else
  {
    double v2 = *a2;
  }
  return vabdd_f64(*a1, v2) < 0.000001 && vabdd_f64(a1[1], a2[1]) < 0.000001;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsValid(pxrInternal__aapl__pxrReserved__::SdfLayerOffset *this)
{
  return (*(void *)this & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*((void *)this + 1) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
}

double pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse(pxrInternal__aapl__pxrReserved__::SdfLayerOffset *this)
{
  if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity(this)) {
    return *(double *)this;
  }
  double v3 = *((double *)this + 1);
  double v4 = 1.0 / v3;
  BOOL v5 = v3 == 0.0;
  double v6 = INFINITY;
  if (!v5) {
    double v6 = v4;
  }
  return -(*(double *)this * v6);
}

double pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(double *a1, double *a2)
{
  return a1[1] * *a2 + *a1;
}

{
  return *a2 * a1[1] + *a1;
}

double pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(double *a1, double a2)
{
  return a1[1] * a2 + *a1;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator<(double *a1, double *a2)
{
  double v2 = *a1;
  if ((*(void *)a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    return 0;
  }
  double v3 = a1[1];
  if ((*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    return 0;
  }
  double v4 = *a2;
  if ((*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    return 1;
  }
  double v5 = a2[1];
  if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    return 1;
  }
  if (vabdd_f64(v3, v5) >= 0.000001)
  {
    return v3 < v5;
  }
  else
  {
    if (vabdd_f64(v2, v4) < 0.000001) {
      return 0;
    }
    return v2 < v4;
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetHash(int8x16_t *this)
{
  int64x2_t v1 = (int64x2_t)vbicq_s8(*this, (int8x16_t)vceqzq_f64(*(float64x2_t *)this));
  v1.i64[0] = vaddvq_s64(v1);
  return bswap64(0x9E3779B97F4A7C55 * (v1.i64[1] + ((unint64_t)(v1.i64[0] + v1.i64[0] * v1.i64[0]) >> 1)));
}

uint64_t *sub_216ABF744()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  double v5 = 0;
  double v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C759230, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C759230, (char *)0x10, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    double v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216ABF804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216ABF848()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  double v5 = 0;
  double v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C754B90, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C754B90, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    double v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216ABF908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SdfLayerStateDelegateBase(uint64_t this)
{
  *(_DWORD *)(this + 8) = 1;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)this = &unk_26C759250;
  *(void *)(this + 32) = 0;
  return this;
}

void pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::~SdfLayerStateDelegateBase(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this, const void *a2)
{
  *(void *)this = &unk_26C759250;
  double v3 = (atomic_uint *)*((void *)this + 4);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  sub_216859A88((uint64_t *)this + 2, a2);

  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::IsDirty(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 16))();
}

void pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetField(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  double v5 = (uint64_t *)((char *)this + 24);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *))(*(void *)this + 48))(this);
  sub_2169791E0(v5);

  pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::VtValue>();
}

void pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetField(uint64_t *a1)
{
  int64x2_t v1 = a1 + 3;
  (*(void (**)(uint64_t *))(*a1 + 56))(a1);
  sub_2169791E0(v1);

  pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

void pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetFieldDictValueByKey(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::VtValue *a5, pxrInternal__aapl__pxrReserved__::VtValue *a6)
{
  double v6 = (uint64_t *)((char *)this + 24);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *))(*(void *)this + 64))(this);
  sub_2169791E0(v6);

  pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetFieldDictValueByKey<pxrInternal__aapl__pxrReserved__::VtValue>();
}

void pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetFieldDictValueByKey(uint64_t *a1)
{
  int64x2_t v1 = a1 + 3;
  (*(void (**)(uint64_t *))(*a1 + 72))(a1);
  sub_2169791E0(v1);

  pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetFieldDictValueByKey<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

void pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetTimeSample(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  char v4 = (uint64_t *)((char *)this + 24);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *))(*(void *)this + 80))(this);
  sub_2169791E0(v4);

  pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample<pxrInternal__aapl__pxrReserved__::VtValue>();
}

void pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetTimeSample(uint64_t *a1)
{
  int64x2_t v1 = a1 + 3;
  (*(void (**)(uint64_t *))(*a1 + 88))(a1);
  sub_2169791E0(v1);

  pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::CreateSpec(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 + 3;
  (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  uint64_t v8 = sub_2169791E0(v7);

  return pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimCreateSpec(v8, a2, a3, a4, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::DeleteSpec(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, BOOL a3)
{
  double v5 = (uint64_t *)((char *)this + 24);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *))(*(void *)this + 104))(this);
  double v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v5);

  return pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimDeleteSpec(v6, a2, a3, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::MoveSpec(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  double v5 = (uint64_t *)((char *)this + 24);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *))(*(void *)this + 112))(this);
  double v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v5);

  return pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimMoveSpec(v6, a2, a3, 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::PushChild(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  char v4 = (uint64_t *)((char *)this + 24);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *))(*(void *)this + 120))(this);
  sub_2169791E0(v4);

  pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::TfToken>();
}

void pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::PushChild(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  char v4 = (uint64_t *)((char *)this + 24);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *))(*(void *)this + 128))(this);
  sub_2169791E0(v4);

  pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::SdfPath>();
}

void pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::PopChild(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  char v4 = (uint64_t *)((char *)this + 24);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, const pxrInternal__aapl__pxrReserved__::TfToken *))(*(void *)this + 136))(this, a2, a3, a4);
  sub_2169791E0(v4);

  pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild<pxrInternal__aapl__pxrReserved__::TfToken>();
}

void pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::PopChild(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  char v4 = (uint64_t *)((char *)this + 24);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)this + 144))(this, a2, a3, a4);
  sub_2169791E0(v4);

  pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild<pxrInternal__aapl__pxrReserved__::SdfPath>();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::_SetLayer(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = *(void *)a2;
  uint64_t v3 = a1 + 24;
  sub_2168CD2FC((atomic_uint **)(a1 + 32), (atomic_uint **)(a2 + 8));
  char v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40);

  return v4(a1, v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::_GetLayer@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 32);
  *a2 = *(void *)(this + 24);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return this;
}

unint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::_GetLayerData@<X0>(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)((char *)this + 24);
  unint64_t result = (unint64_t)sub_21697CF14((void *)this + 3);
  if (v5 & 1 | result)
  {
    double v6 = (uint64_t *)(sub_2169791E0(v3) + 112);
    return (unint64_t)sub_216AA12F0(a2, v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::New@<X0>(void *a1@<X8>)
{
  unint64_t result = operator new(0x30uLL);
  result[2] = 1;
  *((void *)result + 3) = 0;
  *((void *)result + 4) = 0;
  *((void *)result + 2) = 0;
  *(void *)unint64_t result = &unk_26C7592F8;
  *((unsigned char *)result + 4sub_2168EBBB8(&a9, 0) = 0;
  *a1 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::SdfSimpleLayerStateDelegate(uint64_t this)
{
  *(_DWORD *)(this + 8) = 1;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_26C7592F8;
  *(unsigned char *)(this + 4sub_2168EBBB8(&a9, 0) = 0;
  return this;
}

{
  *(_DWORD *)(this + 8) = 1;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_26C7592F8;
  *(unsigned char *)(this + 4sub_2168EBBB8(&a9, 0) = 0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::_IsDirty(pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate *this)
{
  return *((unsigned __int8 *)this + 40);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::_MarkCurrentStateAsClean(uint64_t this)
{
  *(unsigned char *)(this + 4sub_2168EBBB8(&a9, 0) = 0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::_MarkCurrentStateAsDirty(uint64_t this)
{
  *(unsigned char *)(this + 4sub_2168EBBB8(&a9, 0) = 1;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::_OnSetField(uint64_t result)
{
  *(unsigned char *)(result + 4sub_2168EBBB8(&a9, 0) = 1;
  return result;
}

{
  *(unsigned char *)(result + 4sub_2168EBBB8(&a9, 0) = 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::_OnSetFieldDictValueByKey(uint64_t result)
{
  *(unsigned char *)(result + 4sub_2168EBBB8(&a9, 0) = 1;
  return result;
}

{
  *(unsigned char *)(result + 4sub_2168EBBB8(&a9, 0) = 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::_OnSetTimeSample(uint64_t result)
{
  *(unsigned char *)(result + 4sub_2168EBBB8(&a9, 0) = 1;
  return result;
}

{
  *(unsigned char *)(result + 4sub_2168EBBB8(&a9, 0) = 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::_OnCreateSpec(uint64_t result)
{
  *(unsigned char *)(result + 4sub_2168EBBB8(&a9, 0) = 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::_OnDeleteSpec(uint64_t result)
{
  *(unsigned char *)(result + 4sub_2168EBBB8(&a9, 0) = 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::_OnMoveSpec(uint64_t result)
{
  *(unsigned char *)(result + 4sub_2168EBBB8(&a9, 0) = 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::_OnPushChild(uint64_t result)
{
  *(unsigned char *)(result + 4sub_2168EBBB8(&a9, 0) = 1;
  return result;
}

{
  *(unsigned char *)(result + 4sub_2168EBBB8(&a9, 0) = 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::_OnPopChild(uint64_t result)
{
  *(unsigned char *)(result + 4sub_2168EBBB8(&a9, 0) = 1;
  return result;
}

{
  *(unsigned char *)(result + 4sub_2168EBBB8(&a9, 0) = 1;
  return result;
}

void sub_216AC0378(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *a1, const void *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::~SdfLayerStateDelegateBase(a1, a2);

  operator delete(v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerTree::New@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x50uLL);
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfLayerTree::SdfLayerTree((uint64_t)v8, a1, a2, a3);
  *a4 = v8;
  return result;
}

void sub_216AC03FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerTree::SdfLayerTree(uint64_t a1, void *a2, uint64_t *a3, long long *a4)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C7593F0;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 24) = *a2;
  *(void *)(a1 + 32) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
  }
  long long v6 = *a4;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = v6;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_216AC0630((void *)(a1 + 56), *a3, a3[1], (a3[1] - *a3) >> 3);
  return a1;
}

void sub_216AC04A4(_Unwind_Exception *a1, const void *a2)
{
  uint64_t v5 = (atomic_uint *)*((void *)v2 + 4);
  if (v5) {
    sub_217324328(v5);
  }
  sub_216859A88(v3, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(v2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerTree::GetLayer(pxrInternal__aapl__pxrReserved__::SdfLayerTree *this)
{
  return (uint64_t)this + 24;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerTree::GetOffset(pxrInternal__aapl__pxrReserved__::SdfLayerTree *this)
{
  return (uint64_t)this + 40;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerTree::GetChildTrees(pxrInternal__aapl__pxrReserved__::SdfLayerTree *this)
{
  return (uint64_t)this + 56;
}

void sub_216AC04E4(uint64_t a1)
{
  *(void *)a1 = &unk_26C7593F0;
  char v4 = (void **)(a1 + 56);
  sub_216AC0770(&v4);
  uint64_t v3 = *(atomic_uint **)(a1 + 32);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  sub_216859A88((uint64_t *)(a1 + 16), v2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

void sub_216AC0588(uint64_t a1)
{
  *(void *)a1 = &unk_26C7593F0;
  uint64_t v5 = (void **)(a1 + 56);
  sub_216AC0770(&v5);
  uint64_t v3 = *(atomic_uint **)(a1 + 32);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  sub_216859A88((uint64_t *)(a1 + 16), v2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
  operator delete(v4);
}

void *sub_216AC0630(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_21677CACC(result, a4);
    uint64_t result = (void *)sub_216AC06B8((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216AC0698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216AC0770(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216AC06B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(void *)(a4 + v7) = *(void *)(a2 + v7);
      sub_2168BD80C((uint64_t *)(a4 + v7));
      v7 += 8;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_216AC071C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 8;
    do
    {
      sub_216AC0740((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v4 + v2));
      v2 -= 8;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216AC0740(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

void sub_216AC0770(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)**a1;
  if (v2)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = sub_216AC0740(v4 - 1);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v6 = sub_21697CF14(a1);
  if (!(v7 & 1 | (unint64_t)v6))
  {
    v41[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/layerUtils.cpp";
    v41[0].__r_.__value_.__l.__size_ = (std::string::size_type)"SdfComputeAssetPathRelativeToLayer";
    v41[0].__r_.__value_.__r.__words[2] = 87;
    v41[1].__r_.__value_.__r.__words[0] = (std::string::size_type)"string pxrInternal__aapl__pxrReserved__::SdfComputeAss"
                                                                  "etPathRelativeToLayer(const SdfLayerHandle &, const string &)";
    v41[1].__r_.__value_.__s.__data_[8] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid anchor layer");
LABEL_14:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    return;
  }
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  if (!v8)
  {
    v41[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/layerUtils.cpp";
    v41[0].__r_.__value_.__l.__size_ = (std::string::size_type)"SdfComputeAssetPathRelativeToLayer";
    v41[0].__r_.__value_.__r.__words[2] = 92;
    v41[1].__r_.__value_.__r.__words[0] = (std::string::size_type)"string pxrInternal__aapl__pxrReserved__::SdfComputeAss"
                                                                  "etPathRelativeToLayer(const SdfLayerHandle &, const string &)";
    v41[1].__r_.__value_.__s.__data_[8] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Layer path is empty");
    goto LABEL_14;
  }
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)v6);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_IsPackageOrPackagedLayer(a1)
    || !pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a2))
  {
LABEL_47:
    if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsAnonymousLayerIdentifier(a2))
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_216778F24((unsigned char *)a3, *(void **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(void *)(a3 + 16) = *(void *)(a2 + 16);
      }
    }
    else
    {
      uint64_t v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsAnonymous(v26))
      {
        memset(v41, 0, 24);
        pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier((uint64_t)Resolver);
        if (SHIBYTE(v41[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v41[0].__r_.__value_.__l.__data_);
        }
      }
      else
      {
        int v27 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetResolvedPath(v27);
        pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier((uint64_t)Resolver);
      }
    }
    return;
  }
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  uint64_t RepositoryPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRepositoryPath(v10);
  if (*(char *)(RepositoryPath + 23) >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(RepositoryPath + 23);
  }
  else {
    uint64_t v12 = *(void *)(RepositoryPath + 8);
  }
  int v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  if (v12) {
    uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRepositoryPath(v13);
  }
  else {
    uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v13);
  }
  if (*(char *)(RealPath + 23) < 0)
  {
    sub_216778F24(&__str, *(void **)RealPath, *(void *)(RealPath + 8));
  }
  else
  {
    long long v15 = *(_OWORD *)RealPath;
    __str.__r_.__value_.__r.__words[2] = *(void *)(RealPath + 16);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v15;
  }
  memset(v41, 0, sizeof(v41));
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v16);
  uint64_t v18 = sub_216979288(FileFormat);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 16))(v18))
  {
    std::string::operator=(v41, &__str);
    int v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    uint64_t v20 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v19);
    uint64_t v21 = sub_216979288(v20);
    uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    uint64_t v23 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v22);
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)v21 + 24))(&v38, v21, v23);
    if (SHIBYTE(v41[1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41[1].__r_.__value_.__l.__data_);
    }
    v41[1] = v38;
    sub_216AC0EB4((long long *)v41, (uint64_t)&v38);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner((uint64_t)&__str, (uint64_t)&v38);
  }
  sub_216AC10C0((uint64_t)v41, (long long *)&v38);
  if (v40 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  pxrInternal__aapl__pxrReserved__::TfNormPath(&v37, a2, 0);
  sub_216AC1144(&v41[1], (uint64_t)&v37, &v38);
  if (SHIBYTE(v41[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41[1].__r_.__value_.__l.__data_);
  }
  v41[1] = v38;
  pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath((uint64_t)v41, (std::string *)a3);
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v24 = (unsigned char *)a2;
  }
  else {
    uint64_t v24 = *(unsigned char **)a2;
  }
  if (*v24 == 46) {
    goto LABEL_37;
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = v38.__r_.__value_.__l.__size_;
    operator delete(v38.__r_.__value_.__l.__data_);
    if (size) {
      goto LABEL_37;
    }
  }
  else if (*((unsigned char *)&v38.__r_.__value_.__s + 23))
  {
LABEL_37:
    LOBYTE(v25) = 0;
    goto LABEL_38;
  }
  memset(&v38, 0, sizeof(v38));
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension((uint64_t)v41, (uint64_t)&v38, &v35);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  int v29 = sub_216AA0AEC(&v35);
  if (v30 & 1 | (unint64_t)v29
    && (uint64_t v31 = sub_216979288(&v35), (*(unsigned int (**)(uint64_t))(*(void *)v31 + 16))(v31)))
  {
    uint64_t v32 = sub_216979288(&v35);
    (*(void (**)(std::string *__return_ptr))(*(void *)v32 + 24))(&v38);
    if (SHIBYTE(v41[1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41[1].__r_.__value_.__l.__data_);
    }
    v41[1] = v38;
    sub_216AC0EB4((long long *)v41, (uint64_t)&v38);
    sub_216AC10C0((uint64_t)v41, (long long *)&v38);
    sub_21682E578((uint64_t)&v38);
    sub_216AC1144(&v41[1], (uint64_t)&v37, &v38);
    if (SHIBYTE(v41[1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41[1].__r_.__value_.__l.__data_);
    }
    v41[1] = v38;
  }
  else
  {
    std::string::operator=(&v41[1], &v37);
  }
  pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath((uint64_t)v41, &v38);
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(std::string *)a3 = v38;
  pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v25 = v38.__r_.__value_.__l.__size_ == 0;
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v25 = SHIBYTE(v38.__r_.__value_.__r.__words[2]) == 0;
  }
  uint64_t v33 = v36;
  if (v36 && atomic_fetch_add_explicit((atomic_uint *volatile)(v36 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  if (*(char *)(a3 + 23) < 0 && v25)
  {
    operator delete(*(void **)a3);
    LOBYTE(v25) = 1;
  }
LABEL_38:
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41[1].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v25) {
    goto LABEL_47;
  }
}

void sub_216AC0DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a11 && atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
  }
  if (*(char *)(v32 + 23) < 0) {
    operator delete(*(void **)v32);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_21682E578((uint64_t)&a27);
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  _Unwind_Resume(a1);
}

char *sub_216AC0EB4@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216AC11F8((char *)a2, a1);
  uint64_t v4 = (void **)(a2 + 24);
  do
  {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 47);
    if ((v5 & 0x80u) != 0) {
      uint64_t v5 = *(void *)(a2 + 32);
    }
    if (!v5) {
      break;
    }
    memset(&__p, 0, sizeof(__p));
    pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension(a2 + 24, (uint64_t)&__p, &v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    long long v6 = sub_216AA0AEC(&v12);
    if (v7 & 1 | (unint64_t)v6
      && (uint64_t v8 = sub_216979288(&v12), ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8) & 1) != 0))
    {
      pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath(a2, a2 + 24, &__p);
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      *(std::string *)a2 = __p;
      uint64_t v9 = sub_216979288(&v12);
      (*(void (**)(std::string *__return_ptr))(*(void *)v9 + 24))(&__p);
      if (*(char *)(a2 + 47) < 0) {
        operator delete(*v4);
      }
      *(_OWORD *)uint64_t v4 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(a2 + 4sub_2168EBBB8(&a9, 0) = *((void *)&__p.__r_.__value_.__l + 2);
      char v10 = 1;
    }
    else
    {
      char v10 = 0;
    }
    uint64_t result = (char *)v13;
    if (v13)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        uint64_t result = (char *)(*(uint64_t (**)(char *))(*(void *)result + 8))(result);
      }
    }
  }
  while ((v10 & 1) != 0);
  return result;
}

void sub_216AC104C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, atomic_uint *a17)
{
  if (a17)
  {
    if (atomic_fetch_add_explicit(a17 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a17 + 8))(a17);
    }
  }
  sub_21682E578(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_216AC10C0(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *((void *)a2 + 5);
  *(_OWORD *)uint64_t v5 = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  return a1;
}

void sub_216AC1144(std::string *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfGetPathName(a1, &__p);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)&__p.__r_.__value_.__l.__data_, a2, a3);
  }
  else if (*(char *)(a2 + 23) < 0)
  {
    sub_216778F24(a3, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    a3[2] = *(void *)(a2 + 16);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216AC11DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216AC11F8(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  uint64_t v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_216778F24(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)uint64_t v5 = v6;
  }
  return __dst;
}

void sub_216AC1274(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<int>::CreateExplicit(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetExplicitItems();
}

void sub_216AC12E8(_Unwind_Exception *a1)
{
  sub_2169DD2C4(v1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  double result;

  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetExplicitItems(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 1;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  double result = (char *)(a1 + 8);
  if (result != (char *)a2) {
    return sub_216825D78(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<int>::Create(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetPrependedItems();
}

void sub_216AC1410(_Unwind_Exception *a1)
{
  sub_2169DD2C4(v1);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetPrependedItems(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  double result = (char *)(a1 + 56);
  if (result != (char *)a2) {
    return sub_216825D78(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAppendedItems(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  double result = (char *)(a1 + 80);
  if (result != (char *)a2) {
    return sub_216825D78(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetDeletedItems(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  double result = (char *)(a1 + 104);
  if (result != (char *)a2) {
    return sub_216825D78(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::Swap(char *result, char *a2)
{
  char v2 = *result;
  char *result = *a2;
  *a2 = v2;
  uint64_t v3 = *((void *)result + 1);
  *((void *)result + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = *((void *)result + 2);
  *((void *)result + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)result + 3);
  *((void *)result + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)result + 4);
  *((void *)result + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)result + 5);
  *((void *)result + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = *((void *)result + 6);
  *((void *)result + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  uint64_t v9 = *((void *)result + 7);
  *((void *)result + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  uint64_t v10 = *((void *)result + 8);
  *((void *)result + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = *((void *)result + 9);
  *((void *)result + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v11;
  uint64_t v12 = *((void *)result + 10);
  *((void *)result + 1sub_2168EBBB8(&a9, 0) = *((void *)a2 + 10);
  *((void *)a2 + 1sub_2168EBBB8(&a9, 0) = v12;
  uint64_t v13 = *((void *)result + 11);
  *((void *)result + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v13;
  uint64_t v14 = *((void *)result + 12);
  *((void *)result + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v14;
  uint64_t v15 = *((void *)result + 13);
  *((void *)result + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v15;
  uint64_t v16 = *((void *)result + 14);
  *((void *)result + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v16;
  uint64_t v17 = *((void *)result + 15);
  *((void *)result + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v17;
  uint64_t v18 = *((void *)result + 16);
  *((void *)result + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v18;
  uint64_t v19 = *((void *)result + 17);
  *((void *)result + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v19;
  uint64_t v20 = *((void *)result + 18);
  *((void *)result + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v20;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<int>::HasKeys(uint64_t a1)
{
  return *(unsigned char *)a1
      || *(void *)(a1 + 40) != *(void *)(a1 + 32)
      || *(void *)(a1 + 64) != *(void *)(a1 + 56)
      || *(void *)(a1 + 88) != *(void *)(a1 + 80)
      || *(void *)(a1 + 112) != *(void *)(a1 + 104)
      || *(void *)(a1 + 136) != *(void *)(a1 + 128);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::IsExplicit(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::HasItem(uint64_t a1, __int32 *a2)
{
  __int32 v4 = *a2;
  if (*(unsigned char *)a1)
  {
    uint64_t v5 = (__int32 **)(a1 + 16);
    uint64_t v6 = *(__int32 **)(a1 + 16);
    uint64_t v7 = wmemchr(*(__int32 **)(a1 + 8), v4, ((uint64_t)v6 - *(void *)(a1 + 8)) >> 2);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = v6;
    }
    return v8 != *v5;
  }
  uint64_t v10 = *(__int32 **)(a1 + 40);
  uint64_t v11 = wmemchr(*(__int32 **)(a1 + 32), v4, ((uint64_t)v10 - *(void *)(a1 + 32)) >> 2);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12 == *(__int32 **)(a1 + 40))
  {
    uint64_t v13 = *(__int32 **)(a1 + 64);
    uint64_t v14 = wmemchr(*(__int32 **)(a1 + 56), *a2, ((uint64_t)v13 - *(void *)(a1 + 56)) >> 2);
    uint64_t v15 = v14 ? v14 : v13;
    if (v15 == *(__int32 **)(a1 + 64))
    {
      uint64_t v16 = *(__int32 **)(a1 + 88);
      uint64_t v17 = wmemchr(*(__int32 **)(a1 + 80), *a2, ((uint64_t)v16 - *(void *)(a1 + 80)) >> 2);
      uint64_t v18 = v17 ? v17 : v16;
      if (v18 == *(__int32 **)(a1 + 88))
      {
        uint64_t v19 = *(__int32 **)(a1 + 112);
        uint64_t v20 = wmemchr(*(__int32 **)(a1 + 104), *a2, ((uint64_t)v19 - *(void *)(a1 + 104)) >> 2);
        uint64_t v21 = v20 ? v20 : v19;
        if (v21 == *(__int32 **)(a1 + 112))
        {
          uint64_t v23 = *(__int32 **)(a1 + 136);
          uint64_t v5 = (__int32 **)(a1 + 136);
          uint64_t v22 = v23;
          uint64_t v24 = wmemchr(*(v5 - 1), *a2, v23 - *(v5 - 1));
          if (v24) {
            uint64_t v8 = v24;
          }
          else {
            uint64_t v8 = v22;
          }
          return v8 != *v5;
        }
      }
    }
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetExplicitItems(uint64_t a1)
{
  return a1 + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetAddedItems(uint64_t a1)
{
  return a1 + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetPrependedItems(uint64_t a1)
{
  return a1 + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetAppendedItems(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetDeletedItems(uint64_t a1)
{
  return a1 + 104;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetOrderedItems(uint64_t a1)
{
  return a1 + 128;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetItems(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      uint64_t result = a1 + 32;
      break;
    case 2:
      uint64_t result = a1 + 104;
      break;
    case 3:
      uint64_t result = a1 + 128;
      break;
    case 4:
      uint64_t result = a1 + 56;
      break;
    case 5:
      uint64_t result = a1 + 80;
      break;
    default:
      v4[0] = "sdf/listOp.cpp";
      v4[1] = "GetItems";
      v4[2] = 167;
      void v4[3] = "const typename SdfListOp<T>::ItemVector &pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetItems(SdfLis"
              "tOpType) const [T = int]";
      char v5 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Got out-of-range type value: %d", a2);
LABEL_4:
      uint64_t result = a1 + 8;
      break;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetAppliedItems(void *a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ApplyOperations();
}

void sub_216AC19B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216ADE850((uint64_t *)va);
  __int32 v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ApplyOperations(void *result, int **a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v7 = (uint64_t)&v7;
    uint64_t v8 = &v7;
    uint64_t v9 = 0;
    if (*(unsigned char *)result)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      __int32 v4 = &v5;
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_AddKeys();
    }
    if (*(void *)(a3 + 24)
      || ((uint64_t)(result[8] - result[7]) >> 2)
       + ((uint64_t)(result[11] - result[10]) >> 2)
       + ((uint64_t)(result[5] - result[4]) >> 2)
       + ((uint64_t)(result[14] - result[13]) >> 2)
       + ((uint64_t)(result[17] - result[16]) >> 2))
    {
      sub_216ADE8D4((uint64_t)&v7, &v7, *a2, a2[1]);
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      __int32 v4 = &v5;
      for (long long i = v8; i != &v7; long long i = (uint64_t *)i[1])
      {
        uint64_t v10 = i + 2;
        sub_216ADE9D4(&v4, (int *)i + 4, (uint64_t)&unk_2174BFD90, &v10)[5] = i;
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_DeleteKeys();
    }
    return sub_2168505B4(&v7);
  }
  return result;
}

void sub_216AC1BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2168505B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_SetExplicit(unsigned __int8 *result, int a2)
{
  if (*result != a2)
  {
    char *result = a2;
    *((void *)result + 2) = *((void *)result + 1);
    *((void *)result + 5) = *((void *)result + 4);
    *((void *)result + 8) = *((void *)result + 7);
    *((void *)result + 11) = *((void *)result + 10);
    *((void *)result + 14) = *((void *)result + 13);
    *((void *)result + 17) = *((void *)result + 16);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAddedItems(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  uint64_t result = (char *)(a1 + 32);
  if (result != (char *)a2) {
    return sub_216825D78(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetOrderedItems(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  uint64_t result = (char *)(a1 + 128);
  if (result != (char *)a2) {
    return sub_216825D78(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetItems(uint64_t a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetExplicitItems();
    case 1:
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAddedItems();
    case 2:
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetDeletedItems();
    case 3:
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetOrderedItems();
    case 4:
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetPrependedItems();
    case 5:
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAppendedItems();
    default:
      return;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::Clear(uint64_t result)
{
  *(unsigned char *)uint64_t result = 0;
  *(void *)(result + 16) = *(void *)(result + 8);
  *(void *)(result + 4sub_2168EBBB8(&a9, 0) = *(void *)(result + 32);
  *(void *)(result + 64) = *(void *)(result + 56);
  *(void *)(result + 88) = *(void *)(result + 80);
  *(void *)(result + 112) = *(void *)(result + 104);
  *(void *)(result + 136) = *(void *)(result + 128);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ClearAndMakeExplicit(uint64_t result)
{
  *(unsigned char *)uint64_t result = 1;
  *(void *)(result + 16) = *(void *)(result + 8);
  *(void *)(result + 4sub_2168EBBB8(&a9, 0) = *(void *)(result + 32);
  *(void *)(result + 64) = *(void *)(result + 56);
  *(void *)(result + 88) = *(void *)(result + 80);
  *(void *)(result + 112) = *(void *)(result + 104);
  *(void *)(result + 136) = *(void *)(result + 128);
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_AddKeys()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_DeleteKeys()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_PrependKeys()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_AppendKeys()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<int>::_ReorderKeys()
{
  memset(v1, 0, 40);
  v0 = v1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetItems();
}

{
  while (1)
    ;
}

void sub_216AC29C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, void *a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ApplyOperations@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = (void *)result;
  uint64_t v53 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)result)
  {
    uint64_t result = sub_2169DD444((uint64_t)a3, result);
    a3[152] = 1;
  }
  else
  {
    if (*(void *)(result + 32) == *(void *)(result + 40) && *(void *)(result + 128) == *(void *)(result + 136))
    {
      if (*(unsigned char *)a2)
      {
        char v40 = 0;
        unint64_t v41 = 0;
        uint64_t v42 = 0;
        sub_216825C04(&v40, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
        v45[0] = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ApplyOperations();
      }
      if (*(void *)(a2 + 32) == *(void *)(a2 + 40) && *(void *)(a2 + 128) == *(void *)(a2 + 136))
      {
        char v40 = 0;
        unint64_t v41 = 0;
        uint64_t v42 = 0;
        sub_216825C04(&v40, *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
        long long __dst = 0;
        std::string v38 = 0;
        uint64_t v39 = 0;
        sub_216825C04(&__dst, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        sub_216825C04(&v34, *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
        uint64_t v6 = (__int32 *)v3[13];
        for (long long i = (__int32 *)v3[14]; v6 != i; ++v6)
        {
          uint64_t v8 = sub_216AC30C0((__int32 *)__dst, v38, v6);
          if (v38 != v8) {
            std::string v38 = v8;
          }
          uint64_t v9 = sub_216AC30C0((__int32 *)v34, v35, v6);
          if (v35 != v9) {
            uint64_t v35 = v9;
          }
          uint64_t v10 = v41;
          uint64_t v11 = wmemchr((__int32 *)v40, *v6, ((char *)v41 - (unsigned char *)v40) >> 2);
          if (v11) {
            uint64_t v12 = v11;
          }
          else {
            uint64_t v12 = v10;
          }
          if (v12 == v41)
          {
            if (v12 >= v42)
            {
              uint64_t v14 = (__int32 *)v40;
              int64_t v15 = ((char *)v41 - (unsigned char *)v40) >> 2;
              unint64_t v16 = v15 + 1;
              if ((unint64_t)(v15 + 1) >> 62) {
                sub_21677CB10();
              }
              uint64_t v17 = (char *)v42 - (unsigned char *)v40;
              if (((char *)v42 - (unsigned char *)v40) >> 1 > v16) {
                unint64_t v16 = v17 >> 1;
              }
              if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v18 = v16;
              }
              if (v18)
              {
                uint64_t v19 = (char *)sub_21677EA28((uint64_t)&v42, v18);
                uint64_t v14 = (__int32 *)v40;
                uint64_t v12 = v41;
              }
              else
              {
                uint64_t v19 = 0;
              }
              uint64_t v20 = (__int32 *)&v19[4 * v15];
              *uint64_t v20 = *v6;
              uint64_t v13 = v20 + 1;
              while (v12 != v14)
              {
                __int32 v21 = *--v12;
                *--uint64_t v20 = v21;
              }
              char v40 = v20;
              unint64_t v41 = v13;
              uint64_t v42 = (__int32 *)&v19[4 * v18];
              if (v14) {
                operator delete(v14);
              }
            }
            else
            {
              __int32 *v12 = *v6;
              uint64_t v13 = v12 + 1;
            }
            unint64_t v41 = v13;
          }
        }
        uint64_t v22 = (__int32 *)v3[7];
        uint64_t v23 = (__int32 *)v3[8];
        if (v22 == v23)
        {
          int v27 = (char *)v3[7];
        }
        else
        {
          do
          {
            uint64_t v24 = sub_216AC30C0((__int32 *)v40, v41, v22);
            if (v41 != v24) {
              unint64_t v41 = v24;
            }
            BOOL v25 = sub_216AC30C0((__int32 *)__dst, v38, v22);
            if (v38 != v25) {
              std::string v38 = v25;
            }
            uint64_t v26 = sub_216AC30C0((__int32 *)v34, v35, v22);
            if (v35 != v26) {
              uint64_t v35 = v26;
            }
            ++v22;
          }
          while (v22 != v23);
          int v27 = (char *)v3[7];
          uint64_t v22 = (__int32 *)v3[8];
        }
        sub_216ADED1C((uint64_t)&__dst, (uint64_t)__dst, v27, (char *)v22, ((char *)v22 - v27) >> 2);
        uint64_t v28 = (__int32 *)v3[10];
        int v29 = (__int32 *)v3[11];
        if (v28 == v29)
        {
          uint64_t v32 = v35;
          uint64_t v33 = (char *)v3[10];
        }
        else
        {
          do
          {
            char v30 = sub_216AC30C0((__int32 *)v40, v41, v28);
            if (v41 != v30) {
              unint64_t v41 = v30;
            }
            uint64_t v31 = sub_216AC30C0((__int32 *)__dst, v38, v28);
            if (v38 != v31) {
              std::string v38 = v31;
            }
            uint64_t v32 = sub_216AC30C0((__int32 *)v34, v35, v28);
            if (v35 != v32) {
              uint64_t v35 = v32;
            }
            ++v28;
          }
          while (v28 != v29);
          uint64_t v33 = (char *)v3[10];
          uint64_t v28 = (__int32 *)v3[11];
        }
        sub_216ADED1C((uint64_t)&v34, (uint64_t)v32, v33, (char *)v28, ((char *)v28 - v33) >> 2);
        char v43 = 0;
        *(_OWORD *)uint64_t v44 = 0u;
        *(_OWORD *)std::string::size_type v45 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetDeletedItems();
      }
    }
    *a3 = 0;
    a3[152] = 0;
  }
  return result;
}

void sub_216AC3010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

__int32 *sub_216AC30C0(__int32 *a1, __int32 *a2, __int32 *a3)
{
  uint64_t result = wmemchr(a1, *a3, a2 - a1);
  if (!result) {
    uint64_t result = a2;
  }
  uint64_t v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      if (*v6 != *a3) {
        *result++ = *v6;
      }
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ModifyOperations(int **a1, uint64_t a2, int a3)
{
  if (!*(void *)(a2 + 24)) {
    return 0;
  }
  int v6 = sub_216AC31F0(a2, a1 + 1, a3);
  int v7 = v6 | sub_216AC31F0(a2, a1 + 4, a3);
  int v8 = sub_216AC31F0(a2, a1 + 7, a3);
  int v9 = v7 | v8 | sub_216AC31F0(a2, a1 + 10, a3);
  int v10 = sub_216AC31F0(a2, a1 + 13, a3);
  return v9 | v10 | sub_216AC31F0(a2, a1 + 16, a3);
}

uint64_t sub_216AC31F0(uint64_t a1, int **a2, int a3)
{
  __p[0] = 0;
  __p[1] = 0;
  v42[0] = 0;
  *(_OWORD *)uint64_t v39 = 0u;
  long long v40 = 0u;
  uint64_t v3 = *a2;
  __int32 v4 = a2[1];
  if (*a2 == v4) {
    goto LABEL_49;
  }
  char v8 = 0;
  do
  {
    uint64_t v9 = *(void *)(a1 + 24);
    if (!v9) {
      sub_21683A7CC();
    }
    uint64_t v38 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v9 + 48))(v9, v3);
    int v10 = BYTE4(v38);
    if (a3
      && BYTE4(v38)
      && (sub_216ADEF2C((uint64_t *)v39, (int *)&v38), int v10 = BYTE4(v38), (v11 & 1) == 0)
      && BYTE4(v38)
      || !v10)
    {
      char v8 = 1;
      goto LABEL_46;
    }
    int v12 = v38;
    uint64_t v13 = (char *)__p[1];
    if (v38 == *v3)
    {
      if (__p[1] >= (void *)v42[0])
      {
        unint64_t v16 = (char *)__p[0];
        int64_t v17 = ((char *)__p[1] - (char *)__p[0]) >> 2;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62) {
          goto LABEL_58;
        }
        int64_t v19 = v42[0] - (unint64_t)__p[0];
        if ((uint64_t)(v42[0] - (unint64_t)__p[0]) >> 1 > v18) {
          unint64_t v18 = v19 >> 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          __int32 v21 = (char *)sub_21677EA28((uint64_t)v42, v20);
          unint64_t v16 = (char *)__p[0];
          uint64_t v13 = (char *)__p[1];
          int v12 = *v3;
        }
        else
        {
          __int32 v21 = 0;
        }
        uint64_t v28 = &v21[4 * v17];
        *(_DWORD *)uint64_t v28 = v12;
        int64_t v15 = v28 + 4;
        while (v13 != v16)
        {
          int v29 = *((_DWORD *)v13 - 1);
          v13 -= 4;
          *((_DWORD *)v28 - 1) = v29;
          v28 -= 4;
        }
        __p[0] = v28;
        __p[1] = v15;
        v42[0] = &v21[4 * v20];
        if (v16) {
          operator delete(v16);
        }
        goto LABEL_45;
      }
      *(_DWORD *)__p[1] = v38;
      uint64_t v14 = v13 + 4;
    }
    else
    {
      if (__p[1] >= (void *)v42[0])
      {
        uint64_t v22 = (char *)__p[0];
        int64_t v23 = ((char *)__p[1] - (char *)__p[0]) >> 2;
        unint64_t v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 62) {
LABEL_58:
        }
          sub_21677CB10();
        int64_t v25 = v42[0] - (unint64_t)__p[0];
        if ((uint64_t)(v42[0] - (unint64_t)__p[0]) >> 1 > v24) {
          unint64_t v24 = v25 >> 1;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v24;
        }
        if (v26)
        {
          int v27 = (char *)sub_21677EA28((uint64_t)v42, v26);
          uint64_t v22 = (char *)__p[0];
          uint64_t v13 = (char *)__p[1];
          int v12 = v38;
        }
        else
        {
          int v27 = 0;
        }
        char v30 = &v27[4 * v23];
        *(_DWORD *)char v30 = v12;
        int64_t v15 = v30 + 4;
        while (v13 != v22)
        {
          int v31 = *((_DWORD *)v13 - 1);
          v13 -= 4;
          *((_DWORD *)v30 - 1) = v31;
          v30 -= 4;
        }
        __p[0] = v30;
        __p[1] = v15;
        v42[0] = &v27[4 * v26];
        if (v22) {
          operator delete(v22);
        }
        char v8 = 1;
        goto LABEL_45;
      }
      *(_DWORD *)__p[1] = v38;
      uint64_t v14 = v13 + 4;
      char v8 = 1;
    }
    int64_t v15 = v14;
LABEL_45:
    __p[1] = v15;
LABEL_46:
    ++v3;
  }
  while (v3 != v4);
  if (v8)
  {
    long long v32 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_OWORD *)std::string __p = v32;
    uint64_t v33 = a2[2];
    a2[2] = (int *)v42[0];
    v42[0] = v33;
    uint64_t v34 = 1;
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v34 = 0;
LABEL_50:
  uint64_t v35 = *((void *)&v40 + 1);
  *((void *)&v40 + 1) = 0;
  if (v35)
  {
    uint64_t v36 = (void *)sub_216850320(v35);
    operator delete(v36);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v34;
}

void sub_216AC34AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ReplaceOperations(unsigned char *a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (*a1) {
    BOOL v5 = a2 == 0;
  }
  else {
    BOOL v5 = a2 != 0;
  }
  if (v5 || !a4 && *a5 != a5[1]) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetItems();
  }
  return 0;
}

void sub_216AC36CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ComposeOperations(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (a3) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<int>::GetItems();
  }

  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetExplicitItems();
}

void sub_216AC398C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<int>::operator==(void *a1, void *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  BOOL v5 = a1 + 1;
  __int32 v4 = (const void *)a1[1];
  size_t v6 = v5[1] - (void)v4;
  char v8 = a2 + 1;
  int v7 = (const void *)a2[1];
  if (v6 != v8[1] - (void)v7) {
    return 0;
  }
  if (memcmp(v4, v7, v6)) {
    return 0;
  }
  uint64_t v9 = (const void *)a1[4];
  size_t v10 = a1[5] - (void)v9;
  char v11 = (const void *)a2[4];
  if (v10 != a2[5] - (void)v11) {
    return 0;
  }
  if (memcmp(v9, v11, v10)) {
    return 0;
  }
  int v12 = (const void *)a1[7];
  size_t v13 = a1[8] - (void)v12;
  uint64_t v14 = (const void *)a2[7];
  if (v13 != a2[8] - (void)v14) {
    return 0;
  }
  if (memcmp(v12, v14, v13)) {
    return 0;
  }
  int64_t v15 = (const void *)a1[10];
  size_t v16 = a1[11] - (void)v15;
  int64_t v17 = (const void *)a2[10];
  if (v16 != a2[11] - (void)v17) {
    return 0;
  }
  if (memcmp(v15, v17, v16)) {
    return 0;
  }
  unint64_t v18 = (const void *)a1[13];
  size_t v19 = a1[14] - (void)v18;
  unint64_t v20 = (const void *)a2[13];
  if (v19 != a2[14] - (void)v20 || memcmp(v18, v20, v19)) {
    return 0;
  }

  return sub_216AC3B04((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
}

BOOL sub_216AC3B04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const void **)a1;
  size_t v4 = *(void *)(a1 + 8) - (void)v2;
  BOOL v5 = *(const void **)a2;
  return v4 == *(void *)(a2 + 8) - (void)v5 && memcmp(v2, v5, v4) == 0;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<int>::operator!=()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::operator==();
}

uint64_t sub_216AC3B60(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_216AC3BB4(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    void v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<int>>::operator*() [T = std::vector<int>,"
            " Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216AC3C2C()
{
}

void *sub_216AC3C34(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    _OWORD v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<int>>::operator++() [T = st"
            "d::vector<int>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 4;
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::TfType *pxrInternal__aapl__pxrReserved__::operator<<<int>(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2)
{
  uint64_t Root = pxrInternal__aapl__pxrReserved__::TfType::GetRoot(a1);
  int v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755180, v5, v6);
  pxrInternal__aapl__pxrReserved__::TfType::GetAliases(Root, *v7, v8, (uint64_t)v20);
  uint64_t v9 = v20[0];
  if (v20[0] == v20[1])
  {
    __p[0] = "sdf/listOp.cpp";
    __p[1] = "_StreamOut";
    uint64_t v17 = 809;
    unint64_t v18 = "std::ostream &pxrInternal__aapl__pxrReserved__::_StreamOut(std::ostream &, const SdfListOp<T> &) [T = int]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!listOpAliases.empty()", 0);
    uint64_t v9 = v20[0];
  }
  int v10 = *(char *)(v9 + 23);
  if (v10 >= 0) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = *(void *)v9;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(v9 + 23);
  }
  else {
    uint64_t v12 = *(void *)(v9 + 8);
  }
  size_t v13 = sub_216779180(a1, v11, v12);
  sub_216779180(v13, (uint64_t)"(", 1);
  char v15 = 1;
  if (*(unsigned char *)a2)
  {
    sub_216779094(__p, "Explicit");
    sub_216ADF648(a1, (uint64_t)__p, (uint64_t *)(a2 + 8), &v15, 1);
  }
  else
  {
    sub_216779094(__p, "Deleted");
    sub_216ADF648(a1, (uint64_t)__p, (uint64_t *)(a2 + 104), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Added");
    sub_216ADF648(a1, (uint64_t)__p, (uint64_t *)(a2 + 32), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Prepended");
    sub_216ADF648(a1, (uint64_t)__p, (uint64_t *)(a2 + 56), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Appended");
    sub_216ADF648(a1, (uint64_t)__p, (uint64_t *)(a2 + 80), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Ordered");
    sub_216ADF648(a1, (uint64_t)__p, (uint64_t *)(a2 + 128), &v15, 0);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  sub_216779180(a1, (uint64_t)")", 1);
  __p[0] = v20;
  sub_216782F20((void ***)__p);
  return a1;
}

void sub_216AC3F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  std::string __p = &a19;
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::CreateExplicit(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetExplicitItems();
}

void sub_216AC3FC8(_Unwind_Exception *a1)
{
  sub_2169DD2C4(v1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  double result;

  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetExplicitItems(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 1;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  double result = (char *)(a1 + 8);
  if (result != (char *)a2) {
    return sub_216825D78(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::Create(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetPrependedItems();
}

void sub_216AC40F0(_Unwind_Exception *a1)
{
  sub_2169DD2C4(v1);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetPrependedItems(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  double result = (char *)(a1 + 56);
  if (result != (char *)a2) {
    return sub_216825D78(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAppendedItems(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  double result = (char *)(a1 + 80);
  if (result != (char *)a2) {
    return sub_216825D78(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetDeletedItems(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  double result = (char *)(a1 + 104);
  if (result != (char *)a2) {
    return sub_216825D78(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::Swap(char *result, char *a2)
{
  char v2 = *result;
  char *result = *a2;
  *a2 = v2;
  uint64_t v3 = *((void *)result + 1);
  *((void *)result + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = *((void *)result + 2);
  *((void *)result + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)result + 3);
  *((void *)result + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)result + 4);
  *((void *)result + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)result + 5);
  *((void *)result + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = *((void *)result + 6);
  *((void *)result + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  uint64_t v9 = *((void *)result + 7);
  *((void *)result + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  uint64_t v10 = *((void *)result + 8);
  *((void *)result + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = *((void *)result + 9);
  *((void *)result + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v11;
  uint64_t v12 = *((void *)result + 10);
  *((void *)result + 1sub_2168EBBB8(&a9, 0) = *((void *)a2 + 10);
  *((void *)a2 + 1sub_2168EBBB8(&a9, 0) = v12;
  uint64_t v13 = *((void *)result + 11);
  *((void *)result + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v13;
  uint64_t v14 = *((void *)result + 12);
  *((void *)result + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v14;
  uint64_t v15 = *((void *)result + 13);
  *((void *)result + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v15;
  uint64_t v16 = *((void *)result + 14);
  *((void *)result + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v16;
  uint64_t v17 = *((void *)result + 15);
  *((void *)result + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v17;
  uint64_t v18 = *((void *)result + 16);
  *((void *)result + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v18;
  uint64_t v19 = *((void *)result + 17);
  *((void *)result + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v19;
  uint64_t v20 = *((void *)result + 18);
  *((void *)result + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v20;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::HasKeys(uint64_t a1)
{
  return *(unsigned char *)a1
      || *(void *)(a1 + 40) != *(void *)(a1 + 32)
      || *(void *)(a1 + 64) != *(void *)(a1 + 56)
      || *(void *)(a1 + 88) != *(void *)(a1 + 80)
      || *(void *)(a1 + 112) != *(void *)(a1 + 104)
      || *(void *)(a1 + 136) != *(void *)(a1 + 128);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::IsExplicit(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::HasItem(uint64_t a1, __int32 *a2)
{
  __int32 v4 = *a2;
  if (*(unsigned char *)a1)
  {
    uint64_t v5 = (__int32 **)(a1 + 16);
    uint64_t v6 = *(__int32 **)(a1 + 16);
    uint64_t v7 = wmemchr(*(__int32 **)(a1 + 8), v4, ((uint64_t)v6 - *(void *)(a1 + 8)) >> 2);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = v6;
    }
    return v8 != *v5;
  }
  uint64_t v10 = *(__int32 **)(a1 + 40);
  uint64_t v11 = wmemchr(*(__int32 **)(a1 + 32), v4, ((uint64_t)v10 - *(void *)(a1 + 32)) >> 2);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12 == *(__int32 **)(a1 + 40))
  {
    uint64_t v13 = *(__int32 **)(a1 + 64);
    uint64_t v14 = wmemchr(*(__int32 **)(a1 + 56), *a2, ((uint64_t)v13 - *(void *)(a1 + 56)) >> 2);
    uint64_t v15 = v14 ? v14 : v13;
    if (v15 == *(__int32 **)(a1 + 64))
    {
      uint64_t v16 = *(__int32 **)(a1 + 88);
      uint64_t v17 = wmemchr(*(__int32 **)(a1 + 80), *a2, ((uint64_t)v16 - *(void *)(a1 + 80)) >> 2);
      uint64_t v18 = v17 ? v17 : v16;
      if (v18 == *(__int32 **)(a1 + 88))
      {
        uint64_t v19 = *(__int32 **)(a1 + 112);
        uint64_t v20 = wmemchr(*(__int32 **)(a1 + 104), *a2, ((uint64_t)v19 - *(void *)(a1 + 104)) >> 2);
        __int32 v21 = v20 ? v20 : v19;
        if (v21 == *(__int32 **)(a1 + 112))
        {
          int64_t v23 = *(__int32 **)(a1 + 136);
          uint64_t v5 = (__int32 **)(a1 + 136);
          uint64_t v22 = v23;
          unint64_t v24 = wmemchr(*(v5 - 1), *a2, v23 - *(v5 - 1));
          if (v24) {
            uint64_t v8 = v24;
          }
          else {
            uint64_t v8 = v22;
          }
          return v8 != *v5;
        }
      }
    }
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetExplicitItems(uint64_t a1)
{
  return a1 + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetAddedItems(uint64_t a1)
{
  return a1 + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetPrependedItems(uint64_t a1)
{
  return a1 + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetAppendedItems(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetDeletedItems(uint64_t a1)
{
  return a1 + 104;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetOrderedItems(uint64_t a1)
{
  return a1 + 128;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetItems(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      uint64_t result = a1 + 32;
      break;
    case 2:
      uint64_t result = a1 + 104;
      break;
    case 3:
      uint64_t result = a1 + 128;
      break;
    case 4:
      uint64_t result = a1 + 56;
      break;
    case 5:
      uint64_t result = a1 + 80;
      break;
    default:
      v4[0] = "sdf/listOp.cpp";
      v4[1] = "GetItems";
      v4[2] = 167;
      void v4[3] = "const typename SdfListOp<T>::ItemVector &pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetIte"
              "ms(SdfListOpType) const [T = unsigned int]";
      char v5 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Got out-of-range type value: %d", a2);
LABEL_4:
      uint64_t result = a1 + 8;
      break;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetAppliedItems(void *a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ApplyOperations();
}

void sub_216AC4694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216ADF770((uint64_t *)va);
  __int32 v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ApplyOperations(void *result, int **a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v7 = (uint64_t)&v7;
    uint64_t v8 = &v7;
    uint64_t v9 = 0;
    if (*(unsigned char *)result)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      __int32 v4 = &v5;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_AddKeys();
    }
    if (*(void *)(a3 + 24)
      || ((uint64_t)(result[8] - result[7]) >> 2)
       + ((uint64_t)(result[11] - result[10]) >> 2)
       + ((uint64_t)(result[5] - result[4]) >> 2)
       + ((uint64_t)(result[14] - result[13]) >> 2)
       + ((uint64_t)(result[17] - result[16]) >> 2))
    {
      sub_216ADE8D4((uint64_t)&v7, &v7, *a2, a2[1]);
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      __int32 v4 = &v5;
      for (long long i = v8; i != &v7; long long i = (uint64_t *)i[1])
      {
        uint64_t v10 = i + 2;
        sub_216ADF7F4(&v4, (unsigned int *)i + 4, (uint64_t)&unk_2174BFD90, &v10)[5] = i;
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_DeleteKeys();
    }
    return sub_2168505B4(&v7);
  }
  return result;
}

void sub_216AC48D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2168505B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_SetExplicit(unsigned __int8 *result, int a2)
{
  if (*result != a2)
  {
    char *result = a2;
    *((void *)result + 2) = *((void *)result + 1);
    *((void *)result + 5) = *((void *)result + 4);
    *((void *)result + 8) = *((void *)result + 7);
    *((void *)result + 11) = *((void *)result + 10);
    *((void *)result + 14) = *((void *)result + 13);
    *((void *)result + 17) = *((void *)result + 16);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAddedItems(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  uint64_t result = (char *)(a1 + 32);
  if (result != (char *)a2) {
    return sub_216825D78(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetOrderedItems(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  uint64_t result = (char *)(a1 + 128);
  if (result != (char *)a2) {
    return sub_216825D78(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetItems(uint64_t a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetExplicitItems();
    case 1:
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAddedItems();
    case 2:
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetDeletedItems();
    case 3:
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetOrderedItems();
    case 4:
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetPrependedItems();
    case 5:
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAppendedItems();
    default:
      return;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::Clear(uint64_t result)
{
  *(unsigned char *)uint64_t result = 0;
  *(void *)(result + 16) = *(void *)(result + 8);
  *(void *)(result + 4sub_2168EBBB8(&a9, 0) = *(void *)(result + 32);
  *(void *)(result + 64) = *(void *)(result + 56);
  *(void *)(result + 88) = *(void *)(result + 80);
  *(void *)(result + 112) = *(void *)(result + 104);
  *(void *)(result + 136) = *(void *)(result + 128);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ClearAndMakeExplicit(uint64_t result)
{
  *(unsigned char *)uint64_t result = 1;
  *(void *)(result + 16) = *(void *)(result + 8);
  *(void *)(result + 4sub_2168EBBB8(&a9, 0) = *(void *)(result + 32);
  *(void *)(result + 64) = *(void *)(result + 56);
  *(void *)(result + 88) = *(void *)(result + 80);
  *(void *)(result + 112) = *(void *)(result + 104);
  *(void *)(result + 136) = *(void *)(result + 128);
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_AddKeys()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_DeleteKeys()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_PrependKeys()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_AppendKeys()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::_ReorderKeys()
{
  memset(v1, 0, 40);
  v0 = v1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetItems();
}

{
  while (1)
    ;
}

void sub_216AC56A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, void *a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ApplyOperations@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = (void *)result;
  uint64_t v53 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)result)
  {
    uint64_t result = sub_2169DEF68((uint64_t)a3, result);
    a3[152] = 1;
  }
  else
  {
    if (*(void *)(result + 32) == *(void *)(result + 40) && *(void *)(result + 128) == *(void *)(result + 136))
    {
      if (*(unsigned char *)a2)
      {
        long long v40 = 0;
        unint64_t v41 = 0;
        uint64_t v42 = 0;
        sub_216825C80(&v40, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
        v45[0] = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ApplyOperations();
      }
      if (*(void *)(a2 + 32) == *(void *)(a2 + 40) && *(void *)(a2 + 128) == *(void *)(a2 + 136))
      {
        long long v40 = 0;
        unint64_t v41 = 0;
        uint64_t v42 = 0;
        sub_216825C80(&v40, *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
        long long __dst = 0;
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        sub_216825C80(&__dst, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        sub_216825C80(&v34, *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
        uint64_t v6 = (__int32 *)v3[13];
        for (long long i = (__int32 *)v3[14]; v6 != i; ++v6)
        {
          uint64_t v8 = sub_216AC30C0((__int32 *)__dst, v38, v6);
          if (v38 != v8) {
            uint64_t v38 = v8;
          }
          uint64_t v9 = sub_216AC30C0((__int32 *)v34, v35, v6);
          if (v35 != v9) {
            uint64_t v35 = v9;
          }
          uint64_t v10 = v41;
          uint64_t v11 = wmemchr((__int32 *)v40, *v6, ((char *)v41 - (unsigned char *)v40) >> 2);
          if (v11) {
            uint64_t v12 = v11;
          }
          else {
            uint64_t v12 = v10;
          }
          if (v12 == v41)
          {
            if (v12 >= v42)
            {
              uint64_t v14 = (__int32 *)v40;
              int64_t v15 = ((char *)v41 - (unsigned char *)v40) >> 2;
              unint64_t v16 = v15 + 1;
              if ((unint64_t)(v15 + 1) >> 62) {
                sub_21677CB10();
              }
              uint64_t v17 = (char *)v42 - (unsigned char *)v40;
              if (((char *)v42 - (unsigned char *)v40) >> 1 > v16) {
                unint64_t v16 = v17 >> 1;
              }
              if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v18 = v16;
              }
              if (v18)
              {
                uint64_t v19 = (char *)sub_21677EA28((uint64_t)&v42, v18);
                uint64_t v14 = (__int32 *)v40;
                uint64_t v12 = v41;
              }
              else
              {
                uint64_t v19 = 0;
              }
              uint64_t v20 = (__int32 *)&v19[4 * v15];
              *uint64_t v20 = *v6;
              uint64_t v13 = v20 + 1;
              while (v12 != v14)
              {
                __int32 v21 = *--v12;
                *--uint64_t v20 = v21;
              }
              long long v40 = v20;
              unint64_t v41 = v13;
              uint64_t v42 = (__int32 *)&v19[4 * v18];
              if (v14) {
                operator delete(v14);
              }
            }
            else
            {
              __int32 *v12 = *v6;
              uint64_t v13 = v12 + 1;
            }
            unint64_t v41 = v13;
          }
        }
        uint64_t v22 = (__int32 *)v3[7];
        int64_t v23 = (__int32 *)v3[8];
        if (v22 == v23)
        {
          int v27 = (char *)v3[7];
        }
        else
        {
          do
          {
            unint64_t v24 = sub_216AC30C0((__int32 *)v40, v41, v22);
            if (v41 != v24) {
              unint64_t v41 = v24;
            }
            int64_t v25 = sub_216AC30C0((__int32 *)__dst, v38, v22);
            if (v38 != v25) {
              uint64_t v38 = v25;
            }
            unint64_t v26 = sub_216AC30C0((__int32 *)v34, v35, v22);
            if (v35 != v26) {
              uint64_t v35 = v26;
            }
            ++v22;
          }
          while (v22 != v23);
          int v27 = (char *)v3[7];
          uint64_t v22 = (__int32 *)v3[8];
        }
        sub_216ADED1C((uint64_t)&__dst, (uint64_t)__dst, v27, (char *)v22, ((char *)v22 - v27) >> 2);
        uint64_t v28 = (__int32 *)v3[10];
        int v29 = (__int32 *)v3[11];
        if (v28 == v29)
        {
          long long v32 = v35;
          uint64_t v33 = (char *)v3[10];
        }
        else
        {
          do
          {
            char v30 = sub_216AC30C0((__int32 *)v40, v41, v28);
            if (v41 != v30) {
              unint64_t v41 = v30;
            }
            int v31 = sub_216AC30C0((__int32 *)__dst, v38, v28);
            if (v38 != v31) {
              uint64_t v38 = v31;
            }
            long long v32 = sub_216AC30C0((__int32 *)v34, v35, v28);
            if (v35 != v32) {
              uint64_t v35 = v32;
            }
            ++v28;
          }
          while (v28 != v29);
          uint64_t v33 = (char *)v3[10];
          uint64_t v28 = (__int32 *)v3[11];
        }
        sub_216ADED1C((uint64_t)&v34, (uint64_t)v32, v33, (char *)v28, ((char *)v28 - v33) >> 2);
        char v43 = 0;
        *(_OWORD *)uint64_t v44 = 0u;
        *(_OWORD *)std::string::size_type v45 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetDeletedItems();
      }
    }
    *a3 = 0;
    a3[152] = 0;
  }
  return result;
}

void sub_216AC5CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ModifyOperations(int **a1, uint64_t a2, int a3)
{
  if (!*(void *)(a2 + 24)) {
    return 0;
  }
  int v6 = sub_216AC5E64(a2, a1 + 1, a3);
  int v7 = v6 | sub_216AC5E64(a2, a1 + 4, a3);
  int v8 = sub_216AC5E64(a2, a1 + 7, a3);
  int v9 = v7 | v8 | sub_216AC5E64(a2, a1 + 10, a3);
  int v10 = sub_216AC5E64(a2, a1 + 13, a3);
  return v9 | v10 | sub_216AC5E64(a2, a1 + 16, a3);
}

uint64_t sub_216AC5E64(uint64_t a1, int **a2, int a3)
{
  __p[0] = 0;
  __p[1] = 0;
  v42[0] = 0;
  *(_OWORD *)uint64_t v39 = 0u;
  long long v40 = 0u;
  uint64_t v3 = *a2;
  __int32 v4 = a2[1];
  if (*a2 == v4) {
    goto LABEL_49;
  }
  char v8 = 0;
  do
  {
    uint64_t v9 = *(void *)(a1 + 24);
    if (!v9) {
      sub_21683A7CC();
    }
    uint64_t v38 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v9 + 48))(v9, v3);
    int v10 = BYTE4(v38);
    if (a3
      && BYTE4(v38)
      && (sub_216ADF8B8((uint64_t *)v39, (unsigned int *)&v38), int v10 = BYTE4(v38), (v11 & 1) == 0)
      && BYTE4(v38)
      || !v10)
    {
      char v8 = 1;
      goto LABEL_46;
    }
    int v12 = v38;
    uint64_t v13 = (char *)__p[1];
    if (v38 == *v3)
    {
      if (__p[1] >= (void *)v42[0])
      {
        unint64_t v16 = (char *)__p[0];
        int64_t v17 = ((char *)__p[1] - (char *)__p[0]) >> 2;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62) {
          goto LABEL_58;
        }
        int64_t v19 = v42[0] - (unint64_t)__p[0];
        if ((uint64_t)(v42[0] - (unint64_t)__p[0]) >> 1 > v18) {
          unint64_t v18 = v19 >> 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          __int32 v21 = (char *)sub_21677EA28((uint64_t)v42, v20);
          unint64_t v16 = (char *)__p[0];
          uint64_t v13 = (char *)__p[1];
          int v12 = *v3;
        }
        else
        {
          __int32 v21 = 0;
        }
        uint64_t v28 = &v21[4 * v17];
        *(_DWORD *)uint64_t v28 = v12;
        int64_t v15 = v28 + 4;
        while (v13 != v16)
        {
          int v29 = *((_DWORD *)v13 - 1);
          v13 -= 4;
          *((_DWORD *)v28 - 1) = v29;
          v28 -= 4;
        }
        __p[0] = v28;
        __p[1] = v15;
        v42[0] = &v21[4 * v20];
        if (v16) {
          operator delete(v16);
        }
        goto LABEL_45;
      }
      *(_DWORD *)__p[1] = v38;
      uint64_t v14 = v13 + 4;
    }
    else
    {
      if (__p[1] >= (void *)v42[0])
      {
        uint64_t v22 = (char *)__p[0];
        int64_t v23 = ((char *)__p[1] - (char *)__p[0]) >> 2;
        unint64_t v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 62) {
LABEL_58:
        }
          sub_21677CB10();
        int64_t v25 = v42[0] - (unint64_t)__p[0];
        if ((uint64_t)(v42[0] - (unint64_t)__p[0]) >> 1 > v24) {
          unint64_t v24 = v25 >> 1;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v24;
        }
        if (v26)
        {
          int v27 = (char *)sub_21677EA28((uint64_t)v42, v26);
          uint64_t v22 = (char *)__p[0];
          uint64_t v13 = (char *)__p[1];
          int v12 = v38;
        }
        else
        {
          int v27 = 0;
        }
        char v30 = &v27[4 * v23];
        *(_DWORD *)char v30 = v12;
        int64_t v15 = v30 + 4;
        while (v13 != v22)
        {
          int v31 = *((_DWORD *)v13 - 1);
          v13 -= 4;
          *((_DWORD *)v30 - 1) = v31;
          v30 -= 4;
        }
        __p[0] = v30;
        __p[1] = v15;
        v42[0] = &v27[4 * v26];
        if (v22) {
          operator delete(v22);
        }
        char v8 = 1;
        goto LABEL_45;
      }
      *(_DWORD *)__p[1] = v38;
      uint64_t v14 = v13 + 4;
      char v8 = 1;
    }
    int64_t v15 = v14;
LABEL_45:
    __p[1] = v15;
LABEL_46:
    ++v3;
  }
  while (v3 != v4);
  if (v8)
  {
    long long v32 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_OWORD *)std::string __p = v32;
    uint64_t v33 = a2[2];
    a2[2] = (int *)v42[0];
    v42[0] = v33;
    uint64_t v34 = 1;
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v34 = 0;
LABEL_50:
  uint64_t v35 = *((void *)&v40 + 1);
  *((void *)&v40 + 1) = 0;
  if (v35)
  {
    uint64_t v36 = (void *)sub_216850320(v35);
    operator delete(v36);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v34;
}

void sub_216AC6120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ReplaceOperations(unsigned char *a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (*a1) {
    BOOL v5 = a2 == 0;
  }
  else {
    BOOL v5 = a2 != 0;
  }
  if (v5 || !a4 && *a5 != a5[1]) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetItems();
  }
  return 0;
}

void sub_216AC6340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ComposeOperations(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (a3) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::GetItems();
  }

  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetExplicitItems();
}

void sub_216AC6600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::operator==(void *a1, void *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  BOOL v5 = a1 + 1;
  __int32 v4 = (const void *)a1[1];
  size_t v6 = v5[1] - (void)v4;
  char v8 = a2 + 1;
  int v7 = (const void *)a2[1];
  if (v6 != v8[1] - (void)v7) {
    return 0;
  }
  if (memcmp(v4, v7, v6)) {
    return 0;
  }
  uint64_t v9 = (const void *)a1[4];
  size_t v10 = a1[5] - (void)v9;
  char v11 = (const void *)a2[4];
  if (v10 != a2[5] - (void)v11) {
    return 0;
  }
  if (memcmp(v9, v11, v10)) {
    return 0;
  }
  int v12 = (const void *)a1[7];
  size_t v13 = a1[8] - (void)v12;
  uint64_t v14 = (const void *)a2[7];
  if (v13 != a2[8] - (void)v14) {
    return 0;
  }
  if (memcmp(v12, v14, v13)) {
    return 0;
  }
  int64_t v15 = (const void *)a1[10];
  size_t v16 = a1[11] - (void)v15;
  int64_t v17 = (const void *)a2[10];
  if (v16 != a2[11] - (void)v17) {
    return 0;
  }
  if (memcmp(v15, v17, v16)) {
    return 0;
  }
  unint64_t v18 = (const void *)a1[13];
  size_t v19 = a1[14] - (void)v18;
  unint64_t v20 = (const void *)a2[13];
  if (v19 != a2[14] - (void)v20 || memcmp(v18, v20, v19)) {
    return 0;
  }

  return sub_216AC3B04((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::operator!=()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::operator==();
}

uint64_t sub_216AC6794(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_216AC67E8(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    void v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<unsigned int>>::operator*() [T = std::vec"
            "tor<unsigned int>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216AC6860()
{
}

void *sub_216AC6868(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    _OWORD v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<unsigned int>>::operator++("
            ") [T = std::vector<unsigned int>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 4;
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::TfType *pxrInternal__aapl__pxrReserved__::operator<<<unsigned int>(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2)
{
  uint64_t Root = pxrInternal__aapl__pxrReserved__::TfType::GetRoot(a1);
  int v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551A0, v5, v6);
  pxrInternal__aapl__pxrReserved__::TfType::GetAliases(Root, *v7, v8, (uint64_t)v20);
  uint64_t v9 = v20[0];
  if (v20[0] == v20[1])
  {
    __p[0] = "sdf/listOp.cpp";
    __p[1] = "_StreamOut";
    uint64_t v17 = 809;
    unint64_t v18 = "std::ostream &pxrInternal__aapl__pxrReserved__::_StreamOut(std::ostream &, const SdfListOp<T> &) [T = unsigned int]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!listOpAliases.empty()", 0);
    uint64_t v9 = v20[0];
  }
  int v10 = *(char *)(v9 + 23);
  if (v10 >= 0) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = *(void *)v9;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(v9 + 23);
  }
  else {
    uint64_t v12 = *(void *)(v9 + 8);
  }
  size_t v13 = sub_216779180(a1, v11, v12);
  sub_216779180(v13, (uint64_t)"(", 1);
  char v15 = 1;
  if (*(unsigned char *)a2)
  {
    sub_216779094(__p, "Explicit");
    sub_216AE0140(a1, (uint64_t)__p, (uint64_t *)(a2 + 8), &v15, 1);
  }
  else
  {
    sub_216779094(__p, "Deleted");
    sub_216AE0140(a1, (uint64_t)__p, (uint64_t *)(a2 + 104), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Added");
    sub_216AE0140(a1, (uint64_t)__p, (uint64_t *)(a2 + 32), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Prepended");
    sub_216AE0140(a1, (uint64_t)__p, (uint64_t *)(a2 + 56), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Appended");
    sub_216AE0140(a1, (uint64_t)__p, (uint64_t *)(a2 + 80), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Ordered");
    sub_216AE0140(a1, (uint64_t)__p, (uint64_t *)(a2 + 128), &v15, 0);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  sub_216779180(a1, (uint64_t)")", 1);
  __p[0] = v20;
  sub_216782F20((void ***)__p);
  return a1;
}

void sub_216AC6B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  std::string __p = &a19;
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::CreateExplicit(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetExplicitItems();
}

void sub_216AC6BFC(_Unwind_Exception *a1)
{
  sub_2169DD2C4(v1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  double result;

  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetExplicitItems(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 1;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  double result = (char *)(a1 + 8);
  if (result != (char *)a2) {
    return sub_21677CC7C(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::Create(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetPrependedItems();
}

void sub_216AC6D24(_Unwind_Exception *a1)
{
  sub_2169DD2C4(v1);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetPrependedItems(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  double result = (char *)(a1 + 56);
  if (result != (char *)a2) {
    return sub_21677CC7C(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAppendedItems(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  double result = (char *)(a1 + 80);
  if (result != (char *)a2) {
    return sub_21677CC7C(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetDeletedItems(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  double result = (char *)(a1 + 104);
  if (result != (char *)a2) {
    return sub_21677CC7C(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::Swap(char *result, char *a2)
{
  char v2 = *result;
  char *result = *a2;
  *a2 = v2;
  uint64_t v3 = *((void *)result + 1);
  *((void *)result + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = *((void *)result + 2);
  *((void *)result + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)result + 3);
  *((void *)result + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)result + 4);
  *((void *)result + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)result + 5);
  *((void *)result + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = *((void *)result + 6);
  *((void *)result + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  uint64_t v9 = *((void *)result + 7);
  *((void *)result + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  uint64_t v10 = *((void *)result + 8);
  *((void *)result + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = *((void *)result + 9);
  *((void *)result + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v11;
  uint64_t v12 = *((void *)result + 10);
  *((void *)result + 1sub_2168EBBB8(&a9, 0) = *((void *)a2 + 10);
  *((void *)a2 + 1sub_2168EBBB8(&a9, 0) = v12;
  uint64_t v13 = *((void *)result + 11);
  *((void *)result + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v13;
  uint64_t v14 = *((void *)result + 12);
  *((void *)result + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v14;
  uint64_t v15 = *((void *)result + 13);
  *((void *)result + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v15;
  uint64_t v16 = *((void *)result + 14);
  *((void *)result + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v16;
  uint64_t v17 = *((void *)result + 15);
  *((void *)result + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v17;
  uint64_t v18 = *((void *)result + 16);
  *((void *)result + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v18;
  uint64_t v19 = *((void *)result + 17);
  *((void *)result + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v19;
  uint64_t v20 = *((void *)result + 18);
  *((void *)result + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v20;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::HasKeys(uint64_t a1)
{
  return *(unsigned char *)a1
      || *(void *)(a1 + 40) != *(void *)(a1 + 32)
      || *(void *)(a1 + 64) != *(void *)(a1 + 56)
      || *(void *)(a1 + 88) != *(void *)(a1 + 80)
      || *(void *)(a1 + 112) != *(void *)(a1 + 104)
      || *(void *)(a1 + 136) != *(void *)(a1 + 128);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::IsExplicit(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::HasItem(uint64_t a1, void *a2)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v3 = *(void **)(a1 + 8);
    char v2 = *(void **)(a1 + 16);
    if (v3 != v2)
    {
      while (*v3 != *a2)
      {
        if (++v3 == v2) {
          goto LABEL_5;
        }
      }
    }
    return v3 != v2;
  }
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  if (v6 != v5)
  {
    while (*v6 != *a2)
    {
      if (++v6 == v5)
      {
        uint64_t v6 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  if (v6 == v5)
  {
    uint64_t v8 = *(void **)(a1 + 56);
    uint64_t v7 = *(void **)(a1 + 64);
    if (v8 != v7)
    {
      while (*v8 != *a2)
      {
        if (++v8 == v7)
        {
          uint64_t v8 = *(void **)(a1 + 64);
          break;
        }
      }
    }
    if (v8 == v7)
    {
      uint64_t v10 = *(void **)(a1 + 80);
      uint64_t v9 = *(void **)(a1 + 88);
      if (v10 != v9)
      {
        while (*v10 != *a2)
        {
          if (++v10 == v9)
          {
            uint64_t v10 = *(void **)(a1 + 88);
            break;
          }
        }
      }
      if (v10 == v9)
      {
        uint64_t v12 = *(void **)(a1 + 104);
        uint64_t v11 = *(void **)(a1 + 112);
        if (v12 != v11)
        {
          while (*v12 != *a2)
          {
            if (++v12 == v11)
            {
              uint64_t v12 = *(void **)(a1 + 112);
              break;
            }
          }
        }
        if (v12 == v11)
        {
          uint64_t v3 = *(void **)(a1 + 128);
          char v2 = *(void **)(a1 + 136);
          if (v3 != v2)
          {
            while (*v3 != *a2)
            {
              if (++v3 == v2)
              {
LABEL_5:
                uint64_t v3 = v2;
                return v3 != v2;
              }
            }
          }
          return v3 != v2;
        }
      }
    }
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetExplicitItems(uint64_t a1)
{
  return a1 + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetAddedItems(uint64_t a1)
{
  return a1 + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetPrependedItems(uint64_t a1)
{
  return a1 + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetAppendedItems(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetDeletedItems(uint64_t a1)
{
  return a1 + 104;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetOrderedItems(uint64_t a1)
{
  return a1 + 128;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetItems(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      uint64_t result = a1 + 32;
      break;
    case 2:
      uint64_t result = a1 + 104;
      break;
    case 3:
      uint64_t result = a1 + 128;
      break;
    case 4:
      uint64_t result = a1 + 56;
      break;
    case 5:
      uint64_t result = a1 + 80;
      break;
    default:
      v4[0] = "sdf/listOp.cpp";
      v4[1] = "GetItems";
      v4[2] = 167;
      void v4[3] = "const typename SdfListOp<T>::ItemVector &pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetItems("
              "SdfListOpType) const [T = long long]";
      char v5 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Got out-of-range type value: %d", a2);
LABEL_4:
      uint64_t result = a1 + 8;
      break;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetAppliedItems(void *a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ApplyOperations();
}

void sub_216AC72D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AE0268((uint64_t *)va);
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ApplyOperations(void *result, uint64_t **a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v7 = (uint64_t)&v7;
    uint64_t v8 = &v7;
    uint64_t v9 = 0;
    if (*(unsigned char *)result)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v4 = &v5;
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_AddKeys();
    }
    if (*(void *)(a3 + 24)
      || ((uint64_t)(result[8] - result[7]) >> 3)
       + ((uint64_t)(result[11] - result[10]) >> 3)
       + ((uint64_t)(result[5] - result[4]) >> 3)
       + ((uint64_t)(result[14] - result[13]) >> 3)
       + ((uint64_t)(result[17] - result[16]) >> 3))
    {
      sub_216AE02EC((uint64_t)&v7, &v7, *a2, a2[1]);
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v4 = &v5;
      for (long long i = v8; i != &v7; long long i = (uint64_t *)i[1])
      {
        uint64_t v10 = i + 2;
        sub_216AE03EC(&v4, i + 2, (uint64_t)&unk_2174BFD90, &v10)[5] = (uint64_t)i;
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_DeleteKeys();
    }
    return sub_2168505B4(&v7);
  }
  return result;
}

void sub_216AC7510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2168505B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_SetExplicit(unsigned __int8 *result, int a2)
{
  if (*result != a2)
  {
    char *result = a2;
    *((void *)result + 2) = *((void *)result + 1);
    *((void *)result + 5) = *((void *)result + 4);
    *((void *)result + 8) = *((void *)result + 7);
    *((void *)result + 11) = *((void *)result + 10);
    *((void *)result + 14) = *((void *)result + 13);
    *((void *)result + 17) = *((void *)result + 16);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAddedItems(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  uint64_t result = (char *)(a1 + 32);
  if (result != (char *)a2) {
    return sub_21677CC7C(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetOrderedItems(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  uint64_t result = (char *)(a1 + 128);
  if (result != (char *)a2) {
    return sub_21677CC7C(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetItems(uint64_t a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetExplicitItems();
    case 1:
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAddedItems();
    case 2:
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetDeletedItems();
    case 3:
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetOrderedItems();
    case 4:
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetPrependedItems();
    case 5:
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAppendedItems();
    default:
      return;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::Clear(uint64_t result)
{
  *(unsigned char *)uint64_t result = 0;
  *(void *)(result + 16) = *(void *)(result + 8);
  *(void *)(result + 4sub_2168EBBB8(&a9, 0) = *(void *)(result + 32);
  *(void *)(result + 64) = *(void *)(result + 56);
  *(void *)(result + 88) = *(void *)(result + 80);
  *(void *)(result + 112) = *(void *)(result + 104);
  *(void *)(result + 136) = *(void *)(result + 128);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ClearAndMakeExplicit(uint64_t result)
{
  *(unsigned char *)uint64_t result = 1;
  *(void *)(result + 16) = *(void *)(result + 8);
  *(void *)(result + 4sub_2168EBBB8(&a9, 0) = *(void *)(result + 32);
  *(void *)(result + 64) = *(void *)(result + 56);
  *(void *)(result + 88) = *(void *)(result + 80);
  *(void *)(result + 112) = *(void *)(result + 104);
  *(void *)(result + 136) = *(void *)(result + 128);
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_AddKeys()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_DeleteKeys()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_PrependKeys()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_AppendKeys()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::_ReorderKeys()
{
  memset(v1, 0, 40);
  v0 = v1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetItems();
}

{
  while (1)
    ;
}

void sub_216AC82E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ApplyOperations@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = (void *)result;
  uint64_t v52 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)result)
  {
    uint64_t result = sub_2169DE38C((uint64_t)a3, result);
    a3[152] = 1;
  }
  else
  {
    if (*(void *)(result + 32) == *(void *)(result + 40) && *(void *)(result + 128) == *(void *)(result + 136))
    {
      if (*(unsigned char *)a2)
      {
        uint64_t v39 = 0;
        long long v40 = 0;
        unint64_t v41 = 0;
        sub_2169DE310(&v39, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
        v44[0] = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ApplyOperations();
      }
      if (*(void *)(a2 + 32) == *(void *)(a2 + 40) && *(void *)(a2 + 128) == *(void *)(a2 + 136))
      {
        uint64_t v39 = 0;
        long long v40 = 0;
        unint64_t v41 = 0;
        sub_2169DE310(&v39, *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
        long long __dst = 0;
        std::string v37 = 0;
        uint64_t v38 = 0;
        sub_2169DE310(&__dst, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        sub_2169DE310(&v33, *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
        uint64_t v6 = (void *)v3[13];
        for (long long i = (void *)v3[14]; v6 != i; ++v6)
        {
          uint64_t v8 = sub_216859D70(__dst, v37, v6);
          if (v37 != v8) {
            std::string v37 = v8;
          }
          uint64_t v9 = sub_216859D70(v33, v34, v6);
          if (v34 != v9) {
            uint64_t v34 = v9;
          }
          uint64_t v10 = (char *)v39;
          uint64_t v11 = v40;
          if (v39 == v40)
          {
            uint64_t v12 = (char *)v39;
          }
          else
          {
            uint64_t v12 = (char *)v39;
            do
            {
              if (*(void *)v12 == *v6) {
                goto LABEL_21;
              }
              v12 += 8;
            }
            while (v12 != v40);
            uint64_t v12 = v40;
          }
LABEL_21:
          if (v12 == v40)
          {
            if ((unint64_t)v40 >= v41)
            {
              int64_t v14 = (v40 - (unsigned char *)v39) >> 3;
              unint64_t v15 = v14 + 1;
              if ((unint64_t)(v14 + 1) >> 61) {
                sub_21677CB10();
              }
              uint64_t v16 = v41 - (void)v39;
              if ((uint64_t)(v41 - (void)v39) >> 2 > v15) {
                unint64_t v15 = v16 >> 2;
              }
              if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v17 = v15;
              }
              if (v17)
              {
                uint64_t v18 = (char *)sub_21677CB28((uint64_t)&v41, v17);
                uint64_t v10 = (char *)v39;
                uint64_t v11 = v40;
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v19 = &v18[8 * v14];
              *(void *)uint64_t v19 = *v6;
              uint64_t v13 = v19 + 8;
              while (v11 != v10)
              {
                uint64_t v20 = *((void *)v11 - 1);
                v11 -= 8;
                *((void *)v19 - 1) = v20;
                v19 -= 8;
              }
              uint64_t v39 = v19;
              long long v40 = v13;
              unint64_t v41 = (unint64_t)&v18[8 * v17];
              if (v10) {
                operator delete(v10);
              }
            }
            else
            {
              *(void *)long long v40 = *v6;
              uint64_t v13 = v11 + 8;
            }
            long long v40 = v13;
          }
        }
        __int32 v21 = (char *)v3[7];
        uint64_t v22 = (char *)v3[8];
        if (v21 == v22)
        {
          unint64_t v26 = (char *)v3[7];
        }
        else
        {
          do
          {
            int64_t v23 = (char *)sub_216859D70(v39, v40, v21);
            if (v40 != v23) {
              long long v40 = v23;
            }
            unint64_t v24 = sub_216859D70(__dst, v37, v21);
            if (v37 != v24) {
              std::string v37 = v24;
            }
            int64_t v25 = sub_216859D70(v33, v34, v21);
            if (v34 != v25) {
              uint64_t v34 = v25;
            }
            v21 += 8;
          }
          while (v21 != v22);
          unint64_t v26 = (char *)v3[7];
          __int32 v21 = (char *)v3[8];
        }
        sub_216891650((uint64_t)&__dst, (uint64_t)__dst, v26, v21, (v21 - v26) >> 3);
        int v27 = (char *)v3[10];
        uint64_t v28 = (char *)v3[11];
        if (v27 == v28)
        {
          int v31 = v34;
          long long v32 = (char *)v3[10];
        }
        else
        {
          do
          {
            int v29 = (char *)sub_216859D70(v39, v40, v27);
            if (v40 != v29) {
              long long v40 = v29;
            }
            char v30 = sub_216859D70(__dst, v37, v27);
            if (v37 != v30) {
              std::string v37 = v30;
            }
            int v31 = sub_216859D70(v33, v34, v27);
            if (v34 != v31) {
              uint64_t v34 = v31;
            }
            v27 += 8;
          }
          while (v27 != v28);
          long long v32 = (char *)v3[10];
          int v27 = (char *)v3[11];
        }
        sub_216891650((uint64_t)&v33, (uint64_t)v31, v32, v27, (v27 - v32) >> 3);
        char v42 = 0;
        *(_OWORD *)char v43 = 0u;
        *(_OWORD *)uint64_t v44 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetDeletedItems();
      }
    }
    *a3 = 0;
    a3[152] = 0;
  }
  return result;
}

void sub_216AC8944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ModifyOperations(long long *a1, uint64_t a2, int a3)
{
  if (!*(void *)(a2 + 24)) {
    return 0;
  }
  int v6 = sub_216AC8AB8(a2, (long long *)((char *)a1 + 8), a3);
  int v7 = v6 | sub_216AC8AB8(a2, a1 + 2, a3);
  int v8 = sub_216AC8AB8(a2, (long long *)((char *)a1 + 56), a3);
  int v9 = v7 | v8 | sub_216AC8AB8(a2, a1 + 5, a3);
  int v10 = sub_216AC8AB8(a2, (long long *)((char *)a1 + 104), a3);
  return v9 | v10 | sub_216AC8AB8(a2, a1 + 8, a3);
}

uint64_t sub_216AC8AB8(uint64_t a1, long long *a2, int a3)
{
  __p[0] = 0;
  __p[1] = 0;
  v44[0] = 0;
  *(_OWORD *)unint64_t v41 = 0u;
  long long v42 = 0u;
  uint64_t v3 = *(uint64_t **)a2;
  uint64_t v4 = (uint64_t *)*((void *)a2 + 1);
  if (*(uint64_t **)a2 == v4) {
    goto LABEL_49;
  }
  char v8 = 0;
  do
  {
    uint64_t v9 = *(void *)(a1 + 24);
    if (!v9) {
      sub_21683A7CC();
    }
    uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, v3);
    uint64_t v40 = v10;
    int v11 = v10;
    if (a3
      && (_BYTE)v10
      && (sub_216AE0730((uint64_t *)v41, &v39), int v11 = v40, (v12 & 1) == 0)
      && (_BYTE)v40
      || !v11)
    {
      char v8 = 1;
      goto LABEL_46;
    }
    uint64_t v13 = v39;
    int64_t v14 = (char *)__p[1];
    if (v39 == *v3)
    {
      if (__p[1] >= (void *)v44[0])
      {
        unint64_t v17 = (char *)__p[0];
        int64_t v18 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61) {
          goto LABEL_58;
        }
        int64_t v20 = v44[0] - (unint64_t)__p[0];
        if ((uint64_t)(v44[0] - (unint64_t)__p[0]) >> 2 > v19) {
          unint64_t v19 = v20 >> 2;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          uint64_t v22 = (char *)sub_21677CB28((uint64_t)v44, v21);
          unint64_t v17 = (char *)__p[0];
          int64_t v14 = (char *)__p[1];
          uint64_t v13 = *v3;
        }
        else
        {
          uint64_t v22 = 0;
        }
        int v29 = (uint64_t *)&v22[8 * v18];
        *int v29 = v13;
        uint64_t v16 = v29 + 1;
        while (v14 != v17)
        {
          uint64_t v30 = *((void *)v14 - 1);
          v14 -= 8;
          *--int v29 = v30;
        }
        __p[0] = v29;
        __p[1] = v16;
        v44[0] = &v22[8 * v21];
        if (v17) {
          operator delete(v17);
        }
        goto LABEL_45;
      }
      *(void *)__p[1] = v39;
      unint64_t v15 = v14 + 8;
    }
    else
    {
      if (__p[1] >= (void *)v44[0])
      {
        int64_t v23 = (char *)__p[0];
        int64_t v24 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 61) {
LABEL_58:
        }
          sub_21677CB10();
        int64_t v26 = v44[0] - (unint64_t)__p[0];
        if ((uint64_t)(v44[0] - (unint64_t)__p[0]) >> 2 > v25) {
          unint64_t v25 = v26 >> 2;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27)
        {
          uint64_t v28 = (char *)sub_21677CB28((uint64_t)v44, v27);
          int64_t v23 = (char *)__p[0];
          int64_t v14 = (char *)__p[1];
          uint64_t v13 = v39;
        }
        else
        {
          uint64_t v28 = 0;
        }
        int v31 = (uint64_t *)&v28[8 * v24];
        *int v31 = v13;
        uint64_t v16 = v31 + 1;
        while (v14 != v23)
        {
          uint64_t v32 = *((void *)v14 - 1);
          v14 -= 8;
          *--int v31 = v32;
        }
        __p[0] = v31;
        __p[1] = v16;
        v44[0] = &v28[8 * v27];
        if (v23) {
          operator delete(v23);
        }
        char v8 = 1;
        goto LABEL_45;
      }
      *(void *)__p[1] = v39;
      unint64_t v15 = v14 + 8;
      char v8 = 1;
    }
    uint64_t v16 = v15;
LABEL_45:
    __p[1] = v16;
LABEL_46:
    ++v3;
  }
  while (v3 != v4);
  if (v8)
  {
    long long v33 = *a2;
    *a2 = *(_OWORD *)__p;
    *(_OWORD *)std::string __p = v33;
    uint64_t v34 = *((void *)a2 + 2);
    *((void *)a2 + 2) = v44[0];
    v44[0] = v34;
    uint64_t v35 = 1;
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v35 = 0;
LABEL_50:
  uint64_t v36 = *((void *)&v42 + 1);
  *((void *)&v42 + 1) = 0;
  if (v36)
  {
    std::string v37 = (void *)sub_216850320(v36);
    operator delete(v37);
  }
  if (v41[0])
  {
    v41[1] = v41[0];
    operator delete(v41[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v35;
}

void sub_216AC8D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ReplaceOperations(unsigned char *a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (*a1) {
    BOOL v5 = a2 == 0;
  }
  else {
    BOOL v5 = a2 != 0;
  }
  if (v5 || !a4 && *a5 != a5[1]) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetItems();
  }
  return 0;
}

void sub_216AC8F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ComposeOperations(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (a3) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::GetItems();
  }

  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetExplicitItems();
}

void sub_216AC9254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::operator==(void *a1, void *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  BOOL v5 = a1 + 1;
  uint64_t v4 = (const void *)a1[1];
  size_t v6 = v5[1] - (void)v4;
  char v8 = a2 + 1;
  int v7 = (const void *)a2[1];
  if (v6 != v8[1] - (void)v7) {
    return 0;
  }
  if (memcmp(v4, v7, v6)) {
    return 0;
  }
  uint64_t v9 = (const void *)a1[4];
  size_t v10 = a1[5] - (void)v9;
  int v11 = (const void *)a2[4];
  if (v10 != a2[5] - (void)v11) {
    return 0;
  }
  if (memcmp(v9, v11, v10)) {
    return 0;
  }
  char v12 = (const void *)a1[7];
  size_t v13 = a1[8] - (void)v12;
  int64_t v14 = (const void *)a2[7];
  if (v13 != a2[8] - (void)v14) {
    return 0;
  }
  if (memcmp(v12, v14, v13)) {
    return 0;
  }
  unint64_t v15 = (const void *)a1[10];
  size_t v16 = a1[11] - (void)v15;
  unint64_t v17 = (const void *)a2[10];
  if (v16 != a2[11] - (void)v17) {
    return 0;
  }
  if (memcmp(v15, v17, v16)) {
    return 0;
  }
  int64_t v18 = (const void *)a1[13];
  size_t v19 = a1[14] - (void)v18;
  int64_t v20 = (const void *)a2[13];
  if (v19 != a2[14] - (void)v20 || memcmp(v18, v20, v19)) {
    return 0;
  }

  return sub_216AC3B04((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::operator!=()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::operator==();
}

uint64_t sub_216AC93E8(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_216AC943C(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    void v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<long long>>::operator*() [T = std::vector"
            "<long long>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216AC94B4()
{
}

void *sub_216AC94BC(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    _OWORD v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<long long>>::operator++() ["
            "T = std::vector<long long>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::TfType *pxrInternal__aapl__pxrReserved__::operator<<<long long>(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2)
{
  uint64_t Root = pxrInternal__aapl__pxrReserved__::TfType::GetRoot(a1);
  int v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755190, v5, v6);
  pxrInternal__aapl__pxrReserved__::TfType::GetAliases(Root, *v7, v8, (uint64_t)v20);
  uint64_t v9 = v20[0];
  if (v20[0] == v20[1])
  {
    __p[0] = "sdf/listOp.cpp";
    __p[1] = "_StreamOut";
    uint64_t v17 = 809;
    int64_t v18 = "std::ostream &pxrInternal__aapl__pxrReserved__::_StreamOut(std::ostream &, const SdfListOp<T> &) [T = long long]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!listOpAliases.empty()", 0);
    uint64_t v9 = v20[0];
  }
  int v10 = *(char *)(v9 + 23);
  if (v10 >= 0) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = *(void *)v9;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(v9 + 23);
  }
  else {
    uint64_t v12 = *(void *)(v9 + 8);
  }
  size_t v13 = sub_216779180(a1, v11, v12);
  sub_216779180(v13, (uint64_t)"(", 1);
  char v15 = 1;
  if (*(unsigned char *)a2)
  {
    sub_216779094(__p, "Explicit");
    sub_216AE1038(a1, (uint64_t)__p, (uint64_t *)(a2 + 8), &v15, 1);
  }
  else
  {
    sub_216779094(__p, "Deleted");
    sub_216AE1038(a1, (uint64_t)__p, (uint64_t *)(a2 + 104), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Added");
    sub_216AE1038(a1, (uint64_t)__p, (uint64_t *)(a2 + 32), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Prepended");
    sub_216AE1038(a1, (uint64_t)__p, (uint64_t *)(a2 + 56), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Appended");
    sub_216AE1038(a1, (uint64_t)__p, (uint64_t *)(a2 + 80), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Ordered");
    sub_216AE1038(a1, (uint64_t)__p, (uint64_t *)(a2 + 128), &v15, 0);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  sub_216779180(a1, (uint64_t)")", 1);
  __p[0] = v20;
  sub_216782F20((void ***)__p);
  return a1;
}

void sub_216AC9790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  std::string __p = &a19;
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::CreateExplicit(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetExplicitItems();
}

void sub_216AC9850(_Unwind_Exception *a1)
{
  sub_2169DD2C4(v1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  double result;

  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetExplicitItems(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 1;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  double result = (char *)(a1 + 8);
  if (result != (char *)a2) {
    return sub_21677CC7C(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::Create(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetPrependedItems();
}

void sub_216AC9978(_Unwind_Exception *a1)
{
  sub_2169DD2C4(v1);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetPrependedItems(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  double result = (char *)(a1 + 56);
  if (result != (char *)a2) {
    return sub_21677CC7C(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAppendedItems(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  double result = (char *)(a1 + 80);
  if (result != (char *)a2) {
    return sub_21677CC7C(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetDeletedItems(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  double result = (char *)(a1 + 104);
  if (result != (char *)a2) {
    return sub_21677CC7C(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::Swap(char *result, char *a2)
{
  char v2 = *result;
  char *result = *a2;
  *a2 = v2;
  uint64_t v3 = *((void *)result + 1);
  *((void *)result + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = *((void *)result + 2);
  *((void *)result + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)result + 3);
  *((void *)result + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)result + 4);
  *((void *)result + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)result + 5);
  *((void *)result + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = *((void *)result + 6);
  *((void *)result + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  uint64_t v9 = *((void *)result + 7);
  *((void *)result + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  uint64_t v10 = *((void *)result + 8);
  *((void *)result + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = *((void *)result + 9);
  *((void *)result + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v11;
  uint64_t v12 = *((void *)result + 10);
  *((void *)result + 1sub_2168EBBB8(&a9, 0) = *((void *)a2 + 10);
  *((void *)a2 + 1sub_2168EBBB8(&a9, 0) = v12;
  uint64_t v13 = *((void *)result + 11);
  *((void *)result + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v13;
  uint64_t v14 = *((void *)result + 12);
  *((void *)result + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v14;
  uint64_t v15 = *((void *)result + 13);
  *((void *)result + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v15;
  uint64_t v16 = *((void *)result + 14);
  *((void *)result + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v16;
  uint64_t v17 = *((void *)result + 15);
  *((void *)result + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v17;
  uint64_t v18 = *((void *)result + 16);
  *((void *)result + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v18;
  uint64_t v19 = *((void *)result + 17);
  *((void *)result + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v19;
  uint64_t v20 = *((void *)result + 18);
  *((void *)result + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v20;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::HasKeys(uint64_t a1)
{
  return *(unsigned char *)a1
      || *(void *)(a1 + 40) != *(void *)(a1 + 32)
      || *(void *)(a1 + 64) != *(void *)(a1 + 56)
      || *(void *)(a1 + 88) != *(void *)(a1 + 80)
      || *(void *)(a1 + 112) != *(void *)(a1 + 104)
      || *(void *)(a1 + 136) != *(void *)(a1 + 128);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::IsExplicit(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::HasItem(uint64_t a1, void *a2)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v3 = *(void **)(a1 + 8);
    char v2 = *(void **)(a1 + 16);
    if (v3 != v2)
    {
      while (*v3 != *a2)
      {
        if (++v3 == v2) {
          goto LABEL_5;
        }
      }
    }
    return v3 != v2;
  }
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  if (v6 != v5)
  {
    while (*v6 != *a2)
    {
      if (++v6 == v5)
      {
        uint64_t v6 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  if (v6 == v5)
  {
    uint64_t v8 = *(void **)(a1 + 56);
    uint64_t v7 = *(void **)(a1 + 64);
    if (v8 != v7)
    {
      while (*v8 != *a2)
      {
        if (++v8 == v7)
        {
          uint64_t v8 = *(void **)(a1 + 64);
          break;
        }
      }
    }
    if (v8 == v7)
    {
      uint64_t v10 = *(void **)(a1 + 80);
      uint64_t v9 = *(void **)(a1 + 88);
      if (v10 != v9)
      {
        while (*v10 != *a2)
        {
          if (++v10 == v9)
          {
            uint64_t v10 = *(void **)(a1 + 88);
            break;
          }
        }
      }
      if (v10 == v9)
      {
        uint64_t v12 = *(void **)(a1 + 104);
        uint64_t v11 = *(void **)(a1 + 112);
        if (v12 != v11)
        {
          while (*v12 != *a2)
          {
            if (++v12 == v11)
            {
              uint64_t v12 = *(void **)(a1 + 112);
              break;
            }
          }
        }
        if (v12 == v11)
        {
          uint64_t v3 = *(void **)(a1 + 128);
          char v2 = *(void **)(a1 + 136);
          if (v3 != v2)
          {
            while (*v3 != *a2)
            {
              if (++v3 == v2)
              {
LABEL_5:
                uint64_t v3 = v2;
                return v3 != v2;
              }
            }
          }
          return v3 != v2;
        }
      }
    }
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetExplicitItems(uint64_t a1)
{
  return a1 + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetAddedItems(uint64_t a1)
{
  return a1 + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetPrependedItems(uint64_t a1)
{
  return a1 + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetAppendedItems(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetDeletedItems(uint64_t a1)
{
  return a1 + 104;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetOrderedItems(uint64_t a1)
{
  return a1 + 128;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetItems(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      uint64_t result = a1 + 32;
      break;
    case 2:
      uint64_t result = a1 + 104;
      break;
    case 3:
      uint64_t result = a1 + 128;
      break;
    case 4:
      uint64_t result = a1 + 56;
      break;
    case 5:
      uint64_t result = a1 + 80;
      break;
    default:
      v4[0] = "sdf/listOp.cpp";
      v4[1] = "GetItems";
      v4[2] = 167;
      void v4[3] = "const typename SdfListOp<T>::ItemVector &pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::"
              "GetItems(SdfListOpType) const [T = unsigned long long]";
      char v5 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Got out-of-range type value: %d", a2);
LABEL_4:
      uint64_t result = a1 + 8;
      break;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetAppliedItems(void *a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ApplyOperations();
}

void sub_216AC9F28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AE1160((uint64_t *)va);
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ApplyOperations(void *result, uint64_t **a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v7 = (uint64_t)&v7;
    uint64_t v8 = &v7;
    uint64_t v9 = 0;
    if (*(unsigned char *)result)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v4 = &v5;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_AddKeys();
    }
    if (*(void *)(a3 + 24)
      || ((uint64_t)(result[8] - result[7]) >> 3)
       + ((uint64_t)(result[11] - result[10]) >> 3)
       + ((uint64_t)(result[5] - result[4]) >> 3)
       + ((uint64_t)(result[14] - result[13]) >> 3)
       + ((uint64_t)(result[17] - result[16]) >> 3))
    {
      sub_216AE02EC((uint64_t)&v7, &v7, *a2, a2[1]);
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v4 = &v5;
      for (long long i = v8; i != &v7; long long i = (uint64_t *)i[1])
      {
        uint64_t v10 = i + 2;
        sub_216AE11E4(&v4, (unint64_t *)i + 2, (uint64_t)&unk_2174BFD90, &v10)[5] = (uint64_t)i;
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_DeleteKeys();
    }
    return sub_2168505B4(&v7);
  }
  return result;
}

void sub_216ACA164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2168505B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_SetExplicit(unsigned __int8 *result, int a2)
{
  if (*result != a2)
  {
    char *result = a2;
    *((void *)result + 2) = *((void *)result + 1);
    *((void *)result + 5) = *((void *)result + 4);
    *((void *)result + 8) = *((void *)result + 7);
    *((void *)result + 11) = *((void *)result + 10);
    *((void *)result + 14) = *((void *)result + 13);
    *((void *)result + 17) = *((void *)result + 16);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAddedItems(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  uint64_t result = (char *)(a1 + 32);
  if (result != (char *)a2) {
    return sub_21677CC7C(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetOrderedItems(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 32);
    *(void *)(a1 + 64) = *(void *)(a1 + 56);
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 112) = *(void *)(a1 + 104);
    *(void *)(a1 + 136) = *(void *)(a1 + 128);
  }
  uint64_t result = (char *)(a1 + 128);
  if (result != (char *)a2) {
    return sub_21677CC7C(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetItems(uint64_t a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetExplicitItems();
    case 1:
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAddedItems();
    case 2:
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetDeletedItems();
    case 3:
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetOrderedItems();
    case 4:
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetPrependedItems();
    case 5:
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAppendedItems();
    default:
      return;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::Clear(uint64_t result)
{
  *(unsigned char *)uint64_t result = 0;
  *(void *)(result + 16) = *(void *)(result + 8);
  *(void *)(result + 4sub_2168EBBB8(&a9, 0) = *(void *)(result + 32);
  *(void *)(result + 64) = *(void *)(result + 56);
  *(void *)(result + 88) = *(void *)(result + 80);
  *(void *)(result + 112) = *(void *)(result + 104);
  *(void *)(result + 136) = *(void *)(result + 128);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ClearAndMakeExplicit(uint64_t result)
{
  *(unsigned char *)uint64_t result = 1;
  *(void *)(result + 16) = *(void *)(result + 8);
  *(void *)(result + 4sub_2168EBBB8(&a9, 0) = *(void *)(result + 32);
  *(void *)(result + 64) = *(void *)(result + 56);
  *(void *)(result + 88) = *(void *)(result + 80);
  *(void *)(result + 112) = *(void *)(result + 104);
  *(void *)(result + 136) = *(void *)(result + 128);
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_AddKeys()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_DeleteKeys()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_PrependKeys()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_AppendKeys()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::_ReorderKeys()
{
  memset(v1, 0, 40);
  v0 = v1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetItems();
}

{
  while (1)
    ;
}

void sub_216ACAF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ApplyOperations@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = (void *)result;
  uint64_t v52 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)result)
  {
    uint64_t result = sub_2169DFB7C((uint64_t)a3, result);
    a3[152] = 1;
  }
  else
  {
    if (*(void *)(result + 32) == *(void *)(result + 40) && *(void *)(result + 128) == *(void *)(result + 136))
    {
      if (*(unsigned char *)a2)
      {
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        unint64_t v41 = 0;
        sub_21677EA60(&v39, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
        v44[0] = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ApplyOperations();
      }
      if (*(void *)(a2 + 32) == *(void *)(a2 + 40) && *(void *)(a2 + 128) == *(void *)(a2 + 136))
      {
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        unint64_t v41 = 0;
        sub_21677EA60(&v39, *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
        long long __dst = 0;
        std::string v37 = 0;
        uint64_t v38 = 0;
        sub_21677EA60(&__dst, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
        long long v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        sub_21677EA60(&v33, *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
        uint64_t v6 = (void *)v3[13];
        for (long long i = (void *)v3[14]; v6 != i; ++v6)
        {
          uint64_t v8 = sub_216859D70(__dst, v37, v6);
          if (v37 != v8) {
            std::string v37 = v8;
          }
          uint64_t v9 = sub_216859D70(v33, v34, v6);
          if (v34 != v9) {
            uint64_t v34 = v9;
          }
          uint64_t v10 = (char *)v39;
          uint64_t v11 = v40;
          if (v39 == v40)
          {
            uint64_t v12 = (char *)v39;
          }
          else
          {
            uint64_t v12 = (char *)v39;
            do
            {
              if (*(void *)v12 == *v6) {
                goto LABEL_21;
              }
              v12 += 8;
            }
            while (v12 != v40);
            uint64_t v12 = v40;
          }
LABEL_21:
          if (v12 == v40)
          {
            if ((unint64_t)v40 >= v41)
            {
              int64_t v14 = (v40 - (unsigned char *)v39) >> 3;
              unint64_t v15 = v14 + 1;
              if ((unint64_t)(v14 + 1) >> 61) {
                sub_21677CB10();
              }
              uint64_t v16 = v41 - (void)v39;
              if ((uint64_t)(v41 - (void)v39) >> 2 > v15) {
                unint64_t v15 = v16 >> 2;
              }
              if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v17 = v15;
              }
              if (v17)
              {
                uint64_t v18 = (char *)sub_21677CB28((uint64_t)&v41, v17);
                uint64_t v10 = (char *)v39;
                uint64_t v11 = v40;
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v19 = &v18[8 * v14];
              *(void *)uint64_t v19 = *v6;
              uint64_t v13 = v19 + 8;
              while (v11 != v10)
              {
                uint64_t v20 = *((void *)v11 - 1);
                v11 -= 8;
                *((void *)v19 - 1) = v20;
                v19 -= 8;
              }
              uint64_t v39 = v19;
              uint64_t v40 = v13;
              unint64_t v41 = (unint64_t)&v18[8 * v17];
              if (v10) {
                operator delete(v10);
              }
            }
            else
            {
              *(void *)uint64_t v40 = *v6;
              uint64_t v13 = v11 + 8;
            }
            uint64_t v40 = v13;
          }
        }
        unint64_t v21 = (char *)v3[7];
        uint64_t v22 = (char *)v3[8];
        if (v21 == v22)
        {
          int64_t v26 = (char *)v3[7];
        }
        else
        {
          do
          {
            int64_t v23 = (char *)sub_216859D70(v39, v40, v21);
            if (v40 != v23) {
              uint64_t v40 = v23;
            }
            int64_t v24 = sub_216859D70(__dst, v37, v21);
            if (v37 != v24) {
              std::string v37 = v24;
            }
            unint64_t v25 = sub_216859D70(v33, v34, v21);
            if (v34 != v25) {
              uint64_t v34 = v25;
            }
            v21 += 8;
          }
          while (v21 != v22);
          int64_t v26 = (char *)v3[7];
          unint64_t v21 = (char *)v3[8];
        }
        sub_216891650((uint64_t)&__dst, (uint64_t)__dst, v26, v21, (v21 - v26) >> 3);
        unint64_t v27 = (char *)v3[10];
        uint64_t v28 = (char *)v3[11];
        if (v27 == v28)
        {
          int v31 = v34;
          uint64_t v32 = (char *)v3[10];
        }
        else
        {
          do
          {
            int v29 = (char *)sub_216859D70(v39, v40, v27);
            if (v40 != v29) {
              uint64_t v40 = v29;
            }
            uint64_t v30 = sub_216859D70(__dst, v37, v27);
            if (v37 != v30) {
              std::string v37 = v30;
            }
            int v31 = sub_216859D70(v33, v34, v27);
            if (v34 != v31) {
              uint64_t v34 = v31;
            }
            v27 += 8;
          }
          while (v27 != v28);
          uint64_t v32 = (char *)v3[10];
          unint64_t v27 = (char *)v3[11];
        }
        sub_216891650((uint64_t)&v33, (uint64_t)v31, v32, v27, (v27 - v32) >> 3);
        char v42 = 0;
        *(_OWORD *)char v43 = 0u;
        *(_OWORD *)uint64_t v44 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetDeletedItems();
      }
    }
    *a3 = 0;
    a3[152] = 0;
  }
  return result;
}

void sub_216ACB598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ModifyOperations(long long *a1, uint64_t a2, int a3)
{
  if (!*(void *)(a2 + 24)) {
    return 0;
  }
  int v6 = sub_216ACB70C(a2, (long long *)((char *)a1 + 8), a3);
  int v7 = v6 | sub_216ACB70C(a2, a1 + 2, a3);
  int v8 = sub_216ACB70C(a2, (long long *)((char *)a1 + 56), a3);
  int v9 = v7 | v8 | sub_216ACB70C(a2, a1 + 5, a3);
  int v10 = sub_216ACB70C(a2, (long long *)((char *)a1 + 104), a3);
  return v9 | v10 | sub_216ACB70C(a2, a1 + 8, a3);
}

uint64_t sub_216ACB70C(uint64_t a1, long long *a2, int a3)
{
  __p[0] = 0;
  __p[1] = 0;
  v44[0] = 0;
  *(_OWORD *)unint64_t v41 = 0u;
  long long v42 = 0u;
  uint64_t v3 = *(uint64_t **)a2;
  uint64_t v4 = (uint64_t *)*((void *)a2 + 1);
  if (*(uint64_t **)a2 == v4) {
    goto LABEL_49;
  }
  char v8 = 0;
  do
  {
    uint64_t v9 = *(void *)(a1 + 24);
    if (!v9) {
      sub_21683A7CC();
    }
    uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, v3);
    uint64_t v40 = v10;
    int v11 = v10;
    if (a3
      && (_BYTE)v10
      && (sub_216AE12A4((uint64_t *)v41, &v39), int v11 = v40, (v12 & 1) == 0)
      && (_BYTE)v40
      || !v11)
    {
      char v8 = 1;
      goto LABEL_46;
    }
    uint64_t v13 = v39;
    int64_t v14 = (char *)__p[1];
    if (v39 == *v3)
    {
      if (__p[1] >= (void *)v44[0])
      {
        unint64_t v17 = (char *)__p[0];
        int64_t v18 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61) {
          goto LABEL_58;
        }
        int64_t v20 = v44[0] - (unint64_t)__p[0];
        if ((uint64_t)(v44[0] - (unint64_t)__p[0]) >> 2 > v19) {
          unint64_t v19 = v20 >> 2;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          uint64_t v22 = (char *)sub_21677CB28((uint64_t)v44, v21);
          unint64_t v17 = (char *)__p[0];
          int64_t v14 = (char *)__p[1];
          uint64_t v13 = *v3;
        }
        else
        {
          uint64_t v22 = 0;
        }
        int v29 = (uint64_t *)&v22[8 * v18];
        *int v29 = v13;
        uint64_t v16 = v29 + 1;
        while (v14 != v17)
        {
          uint64_t v30 = *((void *)v14 - 1);
          v14 -= 8;
          *--int v29 = v30;
        }
        __p[0] = v29;
        __p[1] = v16;
        v44[0] = &v22[8 * v21];
        if (v17) {
          operator delete(v17);
        }
        goto LABEL_45;
      }
      *(void *)__p[1] = v39;
      unint64_t v15 = v14 + 8;
    }
    else
    {
      if (__p[1] >= (void *)v44[0])
      {
        int64_t v23 = (char *)__p[0];
        int64_t v24 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 61) {
LABEL_58:
        }
          sub_21677CB10();
        int64_t v26 = v44[0] - (unint64_t)__p[0];
        if ((uint64_t)(v44[0] - (unint64_t)__p[0]) >> 2 > v25) {
          unint64_t v25 = v26 >> 2;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27)
        {
          uint64_t v28 = (char *)sub_21677CB28((uint64_t)v44, v27);
          int64_t v23 = (char *)__p[0];
          int64_t v14 = (char *)__p[1];
          uint64_t v13 = v39;
        }
        else
        {
          uint64_t v28 = 0;
        }
        int v31 = (uint64_t *)&v28[8 * v24];
        *int v31 = v13;
        uint64_t v16 = v31 + 1;
        while (v14 != v23)
        {
          uint64_t v32 = *((void *)v14 - 1);
          v14 -= 8;
          *--int v31 = v32;
        }
        __p[0] = v31;
        __p[1] = v16;
        v44[0] = &v28[8 * v27];
        if (v23) {
          operator delete(v23);
        }
        char v8 = 1;
        goto LABEL_45;
      }
      *(void *)__p[1] = v39;
      unint64_t v15 = v14 + 8;
      char v8 = 1;
    }
    uint64_t v16 = v15;
LABEL_45:
    __p[1] = v16;
LABEL_46:
    ++v3;
  }
  while (v3 != v4);
  if (v8)
  {
    long long v33 = *a2;
    *a2 = *(_OWORD *)__p;
    *(_OWORD *)std::string __p = v33;
    uint64_t v34 = *((void *)a2 + 2);
    *((void *)a2 + 2) = v44[0];
    v44[0] = v34;
    uint64_t v35 = 1;
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v35 = 0;
LABEL_50:
  uint64_t v36 = *((void *)&v42 + 1);
  *((void *)&v42 + 1) = 0;
  if (v36)
  {
    std::string v37 = (void *)sub_216850320(v36);
    operator delete(v37);
  }
  if (v41[0])
  {
    v41[1] = v41[0];
    operator delete(v41[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v35;
}

void sub_216ACB9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ReplaceOperations(unsigned char *a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (*a1) {
    BOOL v5 = a2 == 0;
  }
  else {
    BOOL v5 = a2 != 0;
  }
  if (v5 || !a4 && *a5 != a5[1]) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetItems();
  }
  return 0;
}

void sub_216ACBBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ComposeOperations(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (a3) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::GetItems();
  }

  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetExplicitItems();
}

void sub_216ACBEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::operator==(void *a1, void *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  BOOL v5 = a1 + 1;
  uint64_t v4 = (const void *)a1[1];
  size_t v6 = v5[1] - (void)v4;
  char v8 = a2 + 1;
  int v7 = (const void *)a2[1];
  if (v6 != v8[1] - (void)v7) {
    return 0;
  }
  if (memcmp(v4, v7, v6)) {
    return 0;
  }
  uint64_t v9 = (const void *)a1[4];
  size_t v10 = a1[5] - (void)v9;
  int v11 = (const void *)a2[4];
  if (v10 != a2[5] - (void)v11) {
    return 0;
  }
  if (memcmp(v9, v11, v10)) {
    return 0;
  }
  char v12 = (const void *)a1[7];
  size_t v13 = a1[8] - (void)v12;
  int64_t v14 = (const void *)a2[7];
  if (v13 != a2[8] - (void)v14) {
    return 0;
  }
  if (memcmp(v12, v14, v13)) {
    return 0;
  }
  unint64_t v15 = (const void *)a1[10];
  size_t v16 = a1[11] - (void)v15;
  unint64_t v17 = (const void *)a2[10];
  if (v16 != a2[11] - (void)v17) {
    return 0;
  }
  if (memcmp(v15, v17, v16)) {
    return 0;
  }
  int64_t v18 = (const void *)a1[13];
  size_t v19 = a1[14] - (void)v18;
  int64_t v20 = (const void *)a2[13];
  if (v19 != a2[14] - (void)v20 || memcmp(v18, v20, v19)) {
    return 0;
  }

  return sub_216AC3B04((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::operator!=()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::operator==();
}

uint64_t sub_216ACC03C(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_216ACC090(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    void v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<unsigned long long>>::operator*() [T = st"
            "d::vector<unsigned long long>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216ACC108()
{
}

void *sub_216ACC110(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    _OWORD v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<unsigned long long>>::opera"
            "tor++() [T = std::vector<unsigned long long>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::TfType *pxrInternal__aapl__pxrReserved__::operator<<<unsigned long long>(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2)
{
  uint64_t Root = pxrInternal__aapl__pxrReserved__::TfType::GetRoot(a1);
  int v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551B0, v5, v6);
  pxrInternal__aapl__pxrReserved__::TfType::GetAliases(Root, *v7, v8, (uint64_t)v20);
  uint64_t v9 = v20[0];
  if (v20[0] == v20[1])
  {
    __p[0] = "sdf/listOp.cpp";
    __p[1] = "_StreamOut";
    uint64_t v17 = 809;
    int64_t v18 = "std::ostream &pxrInternal__aapl__pxrReserved__::_StreamOut(std::ostream &, const SdfListOp<T> &) [T = unsigned long long]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!listOpAliases.empty()", 0);
    uint64_t v9 = v20[0];
  }
  int v10 = *(char *)(v9 + 23);
  if (v10 >= 0) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = *(void *)v9;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(v9 + 23);
  }
  else {
    uint64_t v12 = *(void *)(v9 + 8);
  }
  size_t v13 = sub_216779180(a1, v11, v12);
  sub_216779180(v13, (uint64_t)"(", 1);
  char v15 = 1;
  if (*(unsigned char *)a2)
  {
    sub_216779094(__p, "Explicit");
    sub_216AE1574(a1, (uint64_t)__p, (uint64_t *)(a2 + 8), &v15, 1);
  }
  else
  {
    sub_216779094(__p, "Deleted");
    sub_216AE1574(a1, (uint64_t)__p, (uint64_t *)(a2 + 104), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Added");
    sub_216AE1574(a1, (uint64_t)__p, (uint64_t *)(a2 + 32), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Prepended");
    sub_216AE1574(a1, (uint64_t)__p, (uint64_t *)(a2 + 56), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Appended");
    sub_216AE1574(a1, (uint64_t)__p, (uint64_t *)(a2 + 80), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Ordered");
    sub_216AE1574(a1, (uint64_t)__p, (uint64_t *)(a2 + 128), &v15, 0);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  sub_216779180(a1, (uint64_t)")", 1);
  __p[0] = v20;
  sub_216782F20((void ***)__p);
  return a1;
}

void sub_216ACC3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  std::string __p = &a19;
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::CreateExplicit(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetExplicitItems();
}

void sub_216ACC4A4(_Unwind_Exception *a1)
{
  sub_2169CBCC8(v1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  double result;

  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetExplicitItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::Create(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetPrependedItems();
}

void sub_216ACC5D4(_Unwind_Exception *a1)
{
  sub_2169CBCC8(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetPrependedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAppendedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetDeletedItems()
{
}

{
  while (1)
    ;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::Swap(char *result, char *a2)
{
  char v2 = *result;
  char *result = *a2;
  *a2 = v2;
  uint64_t v3 = *((void *)result + 1);
  *((void *)result + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = *((void *)result + 2);
  *((void *)result + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)result + 3);
  *((void *)result + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)result + 4);
  *((void *)result + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)result + 5);
  *((void *)result + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = *((void *)result + 6);
  *((void *)result + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  uint64_t v9 = *((void *)result + 7);
  *((void *)result + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  uint64_t v10 = *((void *)result + 8);
  *((void *)result + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = *((void *)result + 9);
  *((void *)result + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v11;
  uint64_t v12 = *((void *)result + 10);
  *((void *)result + 1sub_2168EBBB8(&a9, 0) = *((void *)a2 + 10);
  *((void *)a2 + 1sub_2168EBBB8(&a9, 0) = v12;
  uint64_t v13 = *((void *)result + 11);
  *((void *)result + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v13;
  uint64_t v14 = *((void *)result + 12);
  *((void *)result + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v14;
  uint64_t v15 = *((void *)result + 13);
  *((void *)result + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v15;
  uint64_t v16 = *((void *)result + 14);
  *((void *)result + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v16;
  uint64_t v17 = *((void *)result + 15);
  *((void *)result + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v17;
  uint64_t v18 = *((void *)result + 16);
  *((void *)result + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v18;
  uint64_t v19 = *((void *)result + 17);
  *((void *)result + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v19;
  uint64_t v20 = *((void *)result + 18);
  *((void *)result + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v20;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::HasKeys(uint64_t a1)
{
  return *(unsigned char *)a1
      || *(void *)(a1 + 40) != *(void *)(a1 + 32)
      || *(void *)(a1 + 64) != *(void *)(a1 + 56)
      || *(void *)(a1 + 88) != *(void *)(a1 + 80)
      || *(void *)(a1 + 112) != *(void *)(a1 + 104)
      || *(void *)(a1 + 136) != *(void *)(a1 + 128);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::IsExplicit(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::HasItem(uint64_t a1, unsigned __int8 **a2)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v5 = (void *)(a1 + 16);
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v6 = *(void *)(a1 + 8);
    return sub_2169CAFD0(v6, v4, a2) != *v5;
  }
  if (sub_2169CAFD0(*(void *)(a1 + 32), *(void *)(a1 + 40), a2) == *(void *)(a1 + 40)
    && sub_2169CAFD0(*(void *)(a1 + 56), *(void *)(a1 + 64), a2) == *(void *)(a1 + 64)
    && sub_2169CAFD0(*(void *)(a1 + 80), *(void *)(a1 + 88), a2) == *(void *)(a1 + 88)
    && sub_2169CAFD0(*(void *)(a1 + 104), *(void *)(a1 + 112), a2) == *(void *)(a1 + 112))
  {
    uint64_t v8 = *(void *)(a1 + 136);
    uint64_t v5 = (void *)(a1 + 136);
    uint64_t v4 = v8;
    uint64_t v6 = *(v5 - 1);
    return sub_2169CAFD0(v6, v4, a2) != *v5;
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetExplicitItems(uint64_t a1)
{
  return a1 + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetAddedItems(uint64_t a1)
{
  return a1 + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetPrependedItems(uint64_t a1)
{
  return a1 + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetAppendedItems(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetDeletedItems(uint64_t a1)
{
  return a1 + 104;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetOrderedItems(uint64_t a1)
{
  return a1 + 128;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetItems(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      uint64_t result = a1 + 32;
      break;
    case 2:
      uint64_t result = a1 + 104;
      break;
    case 3:
      uint64_t result = a1 + 128;
      break;
    case 4:
      uint64_t result = a1 + 56;
      break;
    case 5:
      uint64_t result = a1 + 80;
      break;
    default:
      v4[0] = "sdf/listOp.cpp";
      v4[1] = "GetItems";
      v4[2] = 167;
      void v4[3] = "const typename SdfListOp<T>::ItemVector &pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetItem"
              "s(SdfListOpType) const [T = std::string]";
      char v5 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Got out-of-range type value: %d", a2);
LABEL_4:
      uint64_t result = a1 + 8;
      break;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetAppliedItems(void *a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ApplyOperations();
}

void sub_216ACCB40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AE169C((void ***)va);
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ApplyOperations(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v7 = (uint64_t)&v7;
    *(void *)uint64_t v8 = &v7;
    uint64_t v9 = 0;
    if (*(unsigned char *)a1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v4 = &v5;
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_AddKeys();
    }
    if (*(void *)(a3 + 24)
      || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3)
       - 0x5555555555555555 * ((uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 3)
       - 0x5555555555555555 * ((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3)
       - 0x5555555555555555 * ((uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 3) != 0x5555555555555555
                                                                                                 * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 3))
    {
      sub_216AE1720((uint64_t)&v7, &v7, *a2, a2[1]);
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v4 = &v5;
      for (uint64_t i = *(void *)v8; (uint64_t *)i != &v7; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v10 = (long long *)(i + 16);
        sub_216839B68(&v4, (const void **)(i + 16), (uint64_t)&unk_2174BFD90, &v10)[7] = i;
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_DeleteKeys();
    }
    sub_21687B9B4(&v7);
  }
}

void sub_216ACCDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21687B9B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_SetExplicit(uint64_t *a1, int a2)
{
  if (*(unsigned __int8 *)a1 != a2)
  {
    *(unsigned char *)a1 = a2;
    uint64_t v3 = a1 + 16;
    sub_216782F74(a1 + 1);
    sub_216782F74(a1 + 4);
    sub_216782F74(a1 + 7);
    sub_216782F74(a1 + 10);
    sub_216782F74(a1 + 13);
    sub_216782F74(v3);
  }
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAddedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetOrderedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetItems(uint64_t a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetExplicitItems();
    case 1:
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAddedItems();
    case 2:
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetDeletedItems();
    case 3:
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetOrderedItems();
    case 4:
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetPrependedItems();
    case 5:
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAppendedItems();
    default:
      return;
  }
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::Clear(unsigned char *a1)
{
  *a1 = 1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_SetExplicit();
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ClearAndMakeExplicit(unsigned char *a1)
{
  *a1 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_SetExplicit();
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_AddKeys()
{
}

{
  while (1)
    ;
}

void sub_216ACD15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_DeleteKeys()
{
}

{
  while (1)
    ;
}

void sub_216ACD2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_PrependKeys()
{
}

{
  while (1)
    ;
}

void sub_216ACD548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_AppendKeys()
{
}

{
  while (1)
    ;
}

void sub_216ACD7B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::_ReorderKeys()
{
  long long v2 = 0uLL;
  uint64_t v3 = 0;
  v1[0] = 0;
  v1[1] = 0;
  v0 = v1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetItems();
}

{
  while (1)
    ;
}

void sub_216ACDA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, char *a20,uint64_t a21,char a22,uint64_t a23)
{
  std::string __p = &a22;
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ApplyOperations@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = (void *)result;
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)result)
  {
    uint64_t result = sub_2169DAE8C((uint64_t)a3, result);
    a3[152] = 1;
  }
  else
  {
    if (*(void *)(result + 32) == *(void *)(result + 40) && *(void *)(result + 128) == *(void *)(result + 136))
    {
      if (*(unsigned char *)a2)
      {
        uint64_t v32 = 0;
        long long v33 = 0;
        unint64_t v34 = 0;
        sub_216812BD8((char *)&v32, *(long long **)(a2 + 8), *(long long **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
        *(void *)&long long v37 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ApplyOperations();
      }
      if (*(void *)(a2 + 32) == *(void *)(a2 + 40) && *(void *)(a2 + 128) == *(void *)(a2 + 136))
      {
        uint64_t v32 = 0;
        long long v33 = 0;
        unint64_t v34 = 0;
        sub_216812BD8((char *)&v32, *(long long **)(a2 + 104), *(long long **)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3));
        *(void *)int v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        sub_216812BD8((char *)v29, *(long long **)(a2 + 56), *(long long **)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
        uint64_t v26 = 0;
        *(void *)unint64_t v27 = 0;
        uint64_t v28 = 0;
        sub_216812BD8((char *)&v26, *(long long **)(a2 + 80), *(long long **)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3));
        uint64_t v6 = v3[13];
        uint64_t v7 = v3[14];
        while (v6 != v7)
        {
          uint64_t v8 = sub_216ACE0B8(*(uint64_t *)v29, (uint64_t)v30, v6);
          sub_216AB1AAC((uint64_t)v29, v8, v30);
          uint64_t v9 = sub_216ACE0B8(v26, *(uint64_t *)v27, v6);
          sub_216AB1AAC((uint64_t)&v26, v9, *(long long **)v27);
          unint64_t v10 = sub_2169CAFD0(v32, (uint64_t)v33, (unsigned __int8 **)v6);
          if ((long long *)v10 == v33)
          {
            unint64_t v11 = v10;
            if (v10 >= v34)
            {
              uint64_t v13 = (long long *)sub_2167E9A44(&v32, (long long *)v6);
            }
            else
            {
              if (*(char *)(v6 + 23) < 0)
              {
                sub_216778F24((unsigned char *)v10, *(void **)v6, *(void *)(v6 + 8));
              }
              else
              {
                long long v12 = *(_OWORD *)v6;
                *(void *)(v10 + 16) = *(void *)(v6 + 16);
                *(_OWORD *)unint64_t v10 = v12;
              }
              uint64_t v13 = (long long *)(v11 + 24);
            }
            long long v33 = v13;
          }
          v6 += 24;
        }
        uint64_t v14 = (long long *)v3[7];
        uint64_t v15 = (long long *)v3[8];
        if (v14 == v15)
        {
          uint64_t v19 = (std::string *)v3[7];
        }
        else
        {
          do
          {
            uint64_t v16 = sub_216ACE0B8(v32, (uint64_t)v33, (uint64_t)v14);
            sub_216AB1AAC((uint64_t)&v32, v16, v33);
            uint64_t v17 = sub_216ACE0B8(*(uint64_t *)v29, (uint64_t)v30, (uint64_t)v14);
            sub_216AB1AAC((uint64_t)v29, v17, v30);
            uint64_t v18 = sub_216ACE0B8(v26, *(uint64_t *)v27, (uint64_t)v14);
            sub_216AB1AAC((uint64_t)&v26, v18, *(long long **)v27);
            uint64_t v14 = (long long *)((char *)v14 + 24);
          }
          while (v14 != v15);
          uint64_t v19 = (std::string *)v3[7];
          uint64_t v14 = (long long *)v3[8];
        }
        sub_21695F4FC((uint64_t *)v29, *(std::string **)v29, v19, v14, 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v19) >> 3));
        uint64_t v20 = (long long *)v3[10];
        unint64_t v21 = (long long *)v3[11];
        if (v20 == v21)
        {
          unint64_t v25 = (std::string *)v3[10];
        }
        else
        {
          do
          {
            uint64_t v22 = sub_216ACE0B8(v32, (uint64_t)v33, (uint64_t)v20);
            sub_216AB1AAC((uint64_t)&v32, v22, v33);
            uint64_t v23 = sub_216ACE0B8(*(uint64_t *)v29, (uint64_t)v30, (uint64_t)v20);
            sub_216AB1AAC((uint64_t)v29, v23, v30);
            uint64_t v24 = sub_216ACE0B8(v26, *(uint64_t *)v27, (uint64_t)v20);
            sub_216AB1AAC((uint64_t)&v26, v24, *(long long **)v27);
            uint64_t v20 = (long long *)((char *)v20 + 24);
          }
          while (v20 != v21);
          unint64_t v25 = (std::string *)v3[10];
          uint64_t v20 = (long long *)v3[11];
        }
        sub_21695F4FC(&v26, *(std::string **)v27, v25, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v25) >> 3));
        LOBYTE(v35) = 0;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetDeletedItems();
      }
    }
    *a3 = 0;
    a3[152] = 0;
  }
  return result;
}

void sub_216ACDFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a10;
  sub_216782F20(&a19);
  a19 = (void **)&a13;
  sub_216782F20(&a19);
  a19 = (void **)&a16;
  sub_216782F20(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_216ACE0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_2169CAFD0(a1, a2, (unsigned __int8 **)a3);
  if (v5 == a2) {
    return a2;
  }
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 24;
  if (v5 + 24 != a2)
  {
    uint64_t v8 = v5;
    while (1)
    {
      uint64_t v9 = v6;
      uint64_t v6 = v7;
      uint64_t v10 = *(unsigned __int8 *)(v9 + 47);
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = *(unsigned __int8 *)(v9 + 47);
      }
      else {
        uint64_t v11 = *(void *)(v9 + 32);
      }
      uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
      int v13 = (char)v12;
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(a3 + 8);
      }
      if (v11 != v12) {
        goto LABEL_20;
      }
      if (v13 >= 0) {
        uint64_t v14 = (unsigned __int8 *)a3;
      }
      else {
        uint64_t v14 = *(unsigned __int8 **)a3;
      }
      if ((v10 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v6, v14, *(void *)(v9 + 32))) {
          goto LABEL_20;
        }
      }
      else if (*(unsigned char *)(v9 + 47))
      {
        uint64_t v15 = 0;
        while (*(unsigned __int8 *)(v6 + v15) == v14[v15])
        {
          if (v10 == ++v15) {
            goto LABEL_23;
          }
        }
LABEL_20:
        if (*(char *)(v8 + 23) < 0) {
          operator delete(*(void **)v8);
        }
        long long v16 = *(_OWORD *)v6;
        *(void *)(v8 + 16) = *(void *)(v6 + 16);
        *(_OWORD *)uint64_t v8 = v16;
        v8 += 24;
        *(unsigned char *)(v9 + 47) = 0;
        *(unsigned char *)uint64_t v6 = 0;
      }
LABEL_23:
      uint64_t v7 = v6 + 24;
      if (v6 + 24 == a2) {
        return v8;
      }
    }
  }
  return v5;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ModifyOperations(unsigned __int8 **a1, uint64_t a2, int a3)
{
  if (!*(void *)(a2 + 24)) {
    return 0;
  }
  int v6 = sub_216ACE2A0(a2, a1 + 1, a3);
  int v7 = v6 | sub_216ACE2A0(a2, a1 + 4, a3);
  int v8 = sub_216ACE2A0(a2, a1 + 7, a3);
  int v9 = v7 | v8 | sub_216ACE2A0(a2, a1 + 10, a3);
  int v10 = sub_216ACE2A0(a2, a1 + 13, a3);
  return v9 | v10 | sub_216ACE2A0(a2, a1 + 16, a3);
}

uint64_t sub_216ACE2A0(uint64_t a1, unsigned __int8 **a2, int a3)
{
  long long v42 = 0uLL;
  unint64_t v43 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 == v4) {
    goto LABEL_54;
  }
  char v7 = 0;
  do
  {
    uint64_t v8 = *(void *)(a1 + 24);
    if (!v8) {
      sub_21683A7CC();
    }
    (*(void (**)(void **__return_ptr))(*(void *)v8 + 48))(__s1);
    int v9 = v39;
    if (a3)
    {
      if (v39)
      {
        sub_216AE1C38((uint64_t)&v40, (uint64_t)__s1);
        int v9 = v39;
        if ((v10 & 1) == 0)
        {
          if (v39)
          {
            char v7 = 1;
            if ((SHIBYTE(v38) & 0x80000000) == 0) {
              goto LABEL_48;
            }
LABEL_47:
            operator delete(__s1[0]);
            goto LABEL_48;
          }
        }
      }
    }
    if (!v9)
    {
      char v7 = 1;
      goto LABEL_48;
    }
    uint64_t v11 = HIBYTE(v38);
    if (SHIBYTE(v38) >= 0) {
      uint64_t v12 = (void *)HIBYTE(v38);
    }
    else {
      uint64_t v12 = __s1[1];
    }
    int v13 = (void *)v3[23];
    int v14 = (char)v13;
    unint64_t v15 = *((void *)v3 + 1);
    if ((char)v13 < 0) {
      int v13 = (void *)*((void *)v3 + 1);
    }
    if (v12 == v13)
    {
      long long v16 = *(unsigned __int8 **)v3;
      if (v14 >= 0) {
        uint64_t v17 = v3;
      }
      else {
        uint64_t v17 = *(unsigned __int8 **)v3;
      }
      if ((HIBYTE(v38) & 0x80) != 0)
      {
        if (!memcmp(__s1[0], v17, (size_t)__s1[1]))
        {
LABEL_38:
          uint64_t v26 = (long long *)*((void *)&v42 + 1);
          if (*((void *)&v42 + 1) >= v43)
          {
            uint64_t v21 = sub_2167E9A44((uint64_t *)&v42, (long long *)v3);
          }
          else
          {
            if (v14 < 0)
            {
              sub_216778F24(*((unsigned char **)&v42 + 1), v16, v15);
            }
            else
            {
              long long v27 = *(_OWORD *)v3;
              *(void *)(*((void *)&v42 + 1) + 16) = *((void *)v3 + 2);
              long long *v26 = v27;
            }
            uint64_t v21 = (uint64_t)v26 + 24;
          }
          goto LABEL_45;
        }
      }
      else
      {
        if (!HIBYTE(v38)) {
          goto LABEL_38;
        }
        uint64_t v18 = __s1;
        while (*(unsigned __int8 *)v18 == *v17)
        {
          uint64_t v18 = (void **)((char *)v18 + 1);
          ++v17;
          if (!--v11) {
            goto LABEL_38;
          }
        }
      }
    }
    uint64_t v19 = (_OWORD *)*((void *)&v42 + 1);
    if (*((void *)&v42 + 1) >= v43)
    {
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v42 + 1) - v42) >> 3);
      unint64_t v23 = v22 + 1;
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      if (0x5555555555555556 * ((uint64_t)(v43 - v42) >> 3) > v23) {
        unint64_t v23 = 0x5555555555555556 * ((uint64_t)(v43 - v42) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - v42) >> 3) >= 0x555555555555555) {
        unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v24 = v23;
      }
      v44[4] = (void **)&v43;
      if (v24) {
        unint64_t v25 = (void **)sub_216782ED8((uint64_t)&v43, v24);
      }
      else {
        unint64_t v25 = 0;
      }
      uint64_t v28 = &v25[3 * v22];
      v44[0] = v25;
      v44[1] = v28;
      v44[3] = &v25[3 * v24];
      long long v29 = *(_OWORD *)__s1;
      v28[2] = v38;
      *(_OWORD *)uint64_t v28 = v29;
      __s1[1] = 0;
      long long v38 = 0;
      __s1[0] = 0;
      void v44[2] = v28 + 3;
      sub_216790CCC((uint64_t *)&v42, v44);
      uint64_t v21 = *((void *)&v42 + 1);
      sub_216790E64((uint64_t)v44);
    }
    else
    {
      long long v20 = *(_OWORD *)__s1;
      *(void *)(*((void *)&v42 + 1) + 16) = v38;
      _OWORD *v19 = v20;
      __s1[1] = 0;
      long long v38 = 0;
      __s1[0] = 0;
      uint64_t v21 = (uint64_t)v19 + 24;
    }
    char v7 = 1;
LABEL_45:
    *((void *)&v42 + 1) = v21;
    if (v39 && SHIBYTE(v38) < 0) {
      goto LABEL_47;
    }
LABEL_48:
    v3 += 24;
  }
  while (v3 != v4);
  if (v7)
  {
    long long v30 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v42;
    long long v42 = v30;
    uint64_t v31 = a2[2];
    a2[2] = (unsigned __int8 *)v43;
    unint64_t v43 = (unint64_t)v31;
    uint64_t v32 = 1;
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v32 = 0;
LABEL_55:
  uint64_t v33 = *((void *)&v41 + 1);
  *((void *)&v41 + 1) = 0;
  if (v33)
  {
    unint64_t v34 = (void *)sub_216850298(v33);
    operator delete(v34);
  }
  v44[0] = (void **)&v40;
  sub_216782F20(v44);
  v44[0] = (void **)&v42;
  sub_216782F20(v44);
  return v32;
}

void sub_216ACE5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, char *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a17)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
  }
  sub_216AE1DD0((uint64_t)&a18);
  a18 = &a22;
  sub_216782F20((void ***)&a18);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ReplaceOperations(unsigned char *a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (*a1) {
    BOOL v5 = a2 == 0;
  }
  else {
    BOOL v5 = a2 != 0;
  }
  if (v5 || !a4 && *a5 != a5[1]) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetItems();
  }
  return 0;
}

void sub_216ACE864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  a11 = (void **)&a16;
  sub_216782F20(&a11);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ComposeOperations(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (a3) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::GetItems();
  }

  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetExplicitItems();
}

void sub_216ACEB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::operator==(unsigned __int8 *a1, void *a2)
{
  if (*a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  uint64_t v4 = (unsigned __int8 *)*((void *)a1 + 1);
  BOOL v5 = (unsigned __int8 *)*((void *)a1 + 2);
  int v6 = (unsigned __int8 *)a2[1];
  if (v5 - v4 != a2[2] - (void)v6) {
    return 0;
  }
  while (v4 != v5)
  {
    uint64_t result = sub_2168513F8((uint64_t)&v20, v4, v6);
    if (!result) {
      return result;
    }
    v4 += 24;
    v6 += 24;
  }
  uint64_t v8 = (unsigned __int8 *)*((void *)a1 + 4);
  int v9 = (unsigned __int8 *)*((void *)a1 + 5);
  char v10 = (unsigned __int8 *)a2[4];
  if (v9 - v8 != a2[5] - (void)v10) {
    return 0;
  }
  while (v8 != v9)
  {
    uint64_t result = sub_2168513F8((uint64_t)&v21, v8, v10);
    if (!result) {
      return result;
    }
    v8 += 24;
    v10 += 24;
  }
  uint64_t v11 = (unsigned __int8 *)*((void *)a1 + 7);
  uint64_t v12 = (unsigned __int8 *)*((void *)a1 + 8);
  int v13 = (unsigned __int8 *)a2[7];
  if (v12 - v11 != a2[8] - (void)v13) {
    return 0;
  }
  while (v11 != v12)
  {
    uint64_t result = sub_2168513F8((uint64_t)&v22, v11, v13);
    if (!result) {
      return result;
    }
    v11 += 24;
    v13 += 24;
  }
  int v14 = (unsigned __int8 *)*((void *)a1 + 10);
  unint64_t v15 = (unsigned __int8 *)*((void *)a1 + 11);
  long long v16 = (unsigned __int8 *)a2[10];
  if (v15 - v14 != a2[11] - (void)v16) {
    return 0;
  }
  while (v14 != v15)
  {
    uint64_t result = sub_2168513F8((uint64_t)&v23, v14, v16);
    if (!result) {
      return result;
    }
    v14 += 24;
    v16 += 24;
  }
  uint64_t v17 = (unsigned __int8 *)*((void *)a1 + 13);
  uint64_t v18 = (unsigned __int8 *)*((void *)a1 + 14);
  uint64_t v19 = (unsigned __int8 *)a2[13];
  if (v18 - v17 != a2[14] - (void)v19) {
    return 0;
  }
  while (v17 != v18)
  {
    uint64_t result = sub_2168513F8((uint64_t)&v24, v17, v19);
    if (!result) {
      return result;
    }
    v17 += 24;
    v19 += 24;
  }
  return sub_2169CBA78((unsigned __int8 **)a1 + 16, (uint64_t)(a2 + 16));
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::operator!=()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::operator==();
}

uint64_t sub_216ACED60(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

pxrInternal__aapl__pxrReserved__::TfType *pxrInternal__aapl__pxrReserved__::operator<<<std::string>(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2)
{
  uint64_t Root = pxrInternal__aapl__pxrReserved__::TfType::GetRoot(a1);
  char v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551C0, v5, v6);
  pxrInternal__aapl__pxrReserved__::TfType::GetAliases(Root, *v7, v8, (uint64_t)v20);
  uint64_t v9 = v20[0];
  if (v20[0] == v20[1])
  {
    __p[0] = "sdf/listOp.cpp";
    __p[1] = "_StreamOut";
    uint64_t v17 = 809;
    uint64_t v18 = "std::ostream &pxrInternal__aapl__pxrReserved__::_StreamOut(std::ostream &, const SdfListOp<T> &) [T = std::string]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!listOpAliases.empty()", 0);
    uint64_t v9 = v20[0];
  }
  int v10 = *(char *)(v9 + 23);
  if (v10 >= 0) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = *(void *)v9;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(v9 + 23);
  }
  else {
    uint64_t v12 = *(void *)(v9 + 8);
  }
  int v13 = sub_216779180(a1, v11, v12);
  sub_216779180(v13, (uint64_t)"(", 1);
  char v15 = 1;
  if (*(unsigned char *)a2)
  {
    sub_216779094(__p, "Explicit");
    sub_216AE2114(a1, (uint64_t)__p, (uint64_t *)(a2 + 8), &v15, 1);
  }
  else
  {
    sub_216779094(__p, "Deleted");
    sub_216AE2114(a1, (uint64_t)__p, (uint64_t *)(a2 + 104), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Added");
    sub_216AE2114(a1, (uint64_t)__p, (uint64_t *)(a2 + 32), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Prepended");
    sub_216AE2114(a1, (uint64_t)__p, (uint64_t *)(a2 + 56), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Appended");
    sub_216AE2114(a1, (uint64_t)__p, (uint64_t *)(a2 + 80), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Ordered");
    sub_216AE2114(a1, (uint64_t)__p, (uint64_t *)(a2 + 128), &v15, 0);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  sub_216779180(a1, (uint64_t)")", 1);
  __p[0] = v20;
  sub_216782F20((void ***)__p);
  return a1;
}

void sub_216ACF008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  std::string __p = &a19;
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::CreateExplicit(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetExplicitItems();
}

void sub_216ACF0C8(_Unwind_Exception *a1)
{
  sub_2169E0B70(v1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  double result;

  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetExplicitItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::Create(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetPrependedItems();
}

void sub_216ACF1EC(_Unwind_Exception *a1)
{
  sub_2169E0B70(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetPrependedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAppendedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetDeletedItems()
{
}

{
  while (1)
    ;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::Swap(char *result, char *a2)
{
  char v2 = *result;
  char *result = *a2;
  *a2 = v2;
  uint64_t v3 = *((void *)result + 1);
  *((void *)result + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = *((void *)result + 2);
  *((void *)result + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)result + 3);
  *((void *)result + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)result + 4);
  *((void *)result + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)result + 5);
  *((void *)result + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = *((void *)result + 6);
  *((void *)result + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  uint64_t v9 = *((void *)result + 7);
  *((void *)result + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  uint64_t v10 = *((void *)result + 8);
  *((void *)result + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = *((void *)result + 9);
  *((void *)result + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v11;
  uint64_t v12 = *((void *)result + 10);
  *((void *)result + 1sub_2168EBBB8(&a9, 0) = *((void *)a2 + 10);
  *((void *)a2 + 1sub_2168EBBB8(&a9, 0) = v12;
  uint64_t v13 = *((void *)result + 11);
  *((void *)result + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v13;
  uint64_t v14 = *((void *)result + 12);
  *((void *)result + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v14;
  uint64_t v15 = *((void *)result + 13);
  *((void *)result + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v15;
  uint64_t v16 = *((void *)result + 14);
  *((void *)result + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v16;
  uint64_t v17 = *((void *)result + 15);
  *((void *)result + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v17;
  uint64_t v18 = *((void *)result + 16);
  *((void *)result + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v18;
  uint64_t v19 = *((void *)result + 17);
  *((void *)result + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v19;
  uint64_t v20 = *((void *)result + 18);
  *((void *)result + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v20;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::HasKeys(uint64_t a1)
{
  return *(unsigned char *)a1
      || *(void *)(a1 + 40) != *(void *)(a1 + 32)
      || *(void *)(a1 + 64) != *(void *)(a1 + 56)
      || *(void *)(a1 + 88) != *(void *)(a1 + 80)
      || *(void *)(a1 + 112) != *(void *)(a1 + 104)
      || *(void *)(a1 + 136) != *(void *)(a1 + 128);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::IsExplicit(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::HasItem(uint64_t a1, void *a2)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v3 = *(void **)(a1 + 8);
    char v2 = *(void **)(a1 + 16);
    if (v3 != v2)
    {
      while ((*v3 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v3 == v2) {
          goto LABEL_5;
        }
      }
    }
    return v3 != v2;
  }
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  if (v6 != v5)
  {
    while ((*v6 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v6 == v5)
      {
        uint64_t v6 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  if (v6 == v5)
  {
    uint64_t v8 = *(void **)(a1 + 56);
    uint64_t v7 = *(void **)(a1 + 64);
    if (v8 != v7)
    {
      while ((*v8 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v8 == v7)
        {
          uint64_t v8 = *(void **)(a1 + 64);
          break;
        }
      }
    }
    if (v8 == v7)
    {
      uint64_t v10 = *(void **)(a1 + 80);
      uint64_t v9 = *(void **)(a1 + 88);
      if (v10 != v9)
      {
        while ((*v10 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v10 == v9)
          {
            uint64_t v10 = *(void **)(a1 + 88);
            break;
          }
        }
      }
      if (v10 == v9)
      {
        uint64_t v12 = *(void **)(a1 + 104);
        uint64_t v11 = *(void **)(a1 + 112);
        if (v12 != v11)
        {
          while ((*v12 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v12 == v11)
            {
              uint64_t v12 = *(void **)(a1 + 112);
              break;
            }
          }
        }
        if (v12 == v11)
        {
          uint64_t v3 = *(void **)(a1 + 128);
          char v2 = *(void **)(a1 + 136);
          if (v3 != v2)
          {
            while ((*v3 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
            {
              if (++v3 == v2)
              {
LABEL_5:
                uint64_t v3 = v2;
                return v3 != v2;
              }
            }
          }
          return v3 != v2;
        }
      }
    }
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetExplicitItems(uint64_t a1)
{
  return a1 + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetAddedItems(uint64_t a1)
{
  return a1 + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetPrependedItems(uint64_t a1)
{
  return a1 + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetAppendedItems(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetDeletedItems(uint64_t a1)
{
  return a1 + 104;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetOrderedItems(uint64_t a1)
{
  return a1 + 128;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetItems(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      uint64_t result = a1 + 32;
      break;
    case 2:
      uint64_t result = a1 + 104;
      break;
    case 3:
      uint64_t result = a1 + 128;
      break;
    case 4:
      uint64_t result = a1 + 56;
      break;
    case 5:
      uint64_t result = a1 + 80;
      break;
    default:
      v4[0] = "sdf/listOp.cpp";
      v4[1] = "GetItems";
      v4[2] = 167;
      void v4[3] = "const typename SdfListOp<T>::ItemVector &pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__px"
              "rReserved__::TfToken>::GetItems(SdfListOpType) const [T = pxrInternal__aapl__pxrReserved__::TfToken]";
      char v5 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Got out-of-range type value: %d", a2);
LABEL_4:
      uint64_t result = a1 + 8;
      break;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetAppliedItems(void *a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ApplyOperations();
}

void sub_216ACF7CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AE2250((void ***)va);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ApplyOperations(void *result, uint64_t **a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v7 = (uint64_t)&v7;
    uint64_t v8 = &v7;
    uint64_t v9 = 0;
    if (*(unsigned char *)result)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v4 = &v5;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_AddKeys();
    }
    if (*(void *)(a3 + 24)
      || ((uint64_t)(result[8] - result[7]) >> 3)
       + ((uint64_t)(result[11] - result[10]) >> 3)
       + ((uint64_t)(result[5] - result[4]) >> 3)
       + ((uint64_t)(result[14] - result[13]) >> 3)
       + ((uint64_t)(result[17] - result[16]) >> 3))
    {
      sub_216AE22D4((uint64_t)&v7, &v7, *a2, a2[1]);
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v4 = &v5;
      for (uint64_t i = v8; i != &v7; uint64_t i = (uint64_t *)i[1])
      {
        uint64_t v10 = i + 2;
        sub_216AE242C((uint64_t)&v4, i + 2, (uint64_t)&unk_2174BFD90, &v10)[5] = (uint64_t)i;
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_DeleteKeys();
    }
    return sub_216ADD964(&v7);
  }
  return result;
}

void sub_216ACFA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216ADD964((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_SetExplicit(unsigned __int8 *result, int a2)
{
  if (*result != a2)
  {
    char *result = a2;
    uint64_t v2 = *((void *)result + 1);
    for (uint64_t i = *((void *)result + 2); i != v2; i -= 8)
    {
      uint64_t v5 = *(void *)(i - 8);
      uint64_t v4 = v5;
      if ((v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    *((void *)result + 2) = v2;
    uint64_t v6 = *((void *)result + 4);
    for (uint64_t j = *((void *)result + 5); j != v6; j -= 8)
    {
      uint64_t v9 = *(void *)(j - 8);
      uint64_t v8 = v9;
      if ((v9 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    *((void *)result + 5) = v6;
    uint64_t v10 = *((void *)result + 7);
    for (uint64_t k = *((void *)result + 8); k != v10; k -= 8)
    {
      uint64_t v13 = *(void *)(k - 8);
      uint64_t v12 = v13;
      if ((v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    *((void *)result + 8) = v10;
    uint64_t v14 = *((void *)result + 10);
    for (uint64_t m = *((void *)result + 11); m != v14; m -= 8)
    {
      uint64_t v17 = *(void *)(m - 8);
      uint64_t v16 = v17;
      if ((v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    *((void *)result + 11) = v14;
    uint64_t v18 = *((void *)result + 13);
    for (uint64_t n = *((void *)result + 14); n != v18; n -= 8)
    {
      uint64_t v21 = *(void *)(n - 8);
      uint64_t v20 = v21;
      if ((v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    *((void *)result + 14) = v18;
    uint64_t v22 = *((void *)result + 16);
    for (iuint64_t i = *((void *)result + 17); ii != v22; ii -= 8)
    {
      uint64_t v25 = *(void *)(ii - 8);
      uint64_t v24 = v25;
      if ((v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    *((void *)result + 17) = v22;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAddedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetOrderedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetItems(uint64_t a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetExplicitItems();
    case 1:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAddedItems();
    case 2:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetDeletedItems();
    case 3:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetOrderedItems();
    case 4:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetPrependedItems();
    case 5:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAppendedItems();
    default:
      return;
  }
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::Clear(unsigned char *a1)
{
  *a1 = 1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_SetExplicit();
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ClearAndMakeExplicit(unsigned char *a1)
{
  *a1 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_SetExplicit();
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_AddKeys()
{
}

{
  while (1)
    ;
}

void sub_216ACFE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a10) {
    sub_2173242CC(&a9);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_DeleteKeys()
{
}

{
  while (1)
    ;
}

void sub_216ACFFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a10) {
    sub_2173242CC(&a9);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_PrependKeys()
{
}

{
  while (1)
    ;
}

void sub_216AD0268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a10) {
    sub_2173242CC(&a9);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_AppendKeys()
{
}

{
  while (1)
    ;
}

void sub_216AD04E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a10) {
    sub_2173242CC(&a9);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::_ReorderKeys()
{
  long long v2 = 0uLL;
  uint64_t v3 = 0;
  v1[0] = 0;
  v1[1] = 0;
  v0 = v1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetItems();
}

{
  while (1)
    ;
}

void sub_216AD07F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, void *a17, uint64_t a18, char a19)
{
  a16 = (void **)&a19;
  sub_216889A04(&a16);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ApplyOperations@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = (void *)result;
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)result)
  {
    uint64_t result = sub_2169E21E0((uint64_t)a3, result);
    a3[152] = 1;
  }
  else
  {
    if (*(void *)(result + 32) == *(void *)(result + 40) && *(void *)(result + 128) == *(void *)(result + 136))
    {
      if (*(unsigned char *)a2)
      {
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        unint64_t v34 = 0;
        sub_21698FA28(&v32, *(uint64_t **)(a2 + 8), *(uint64_t **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
        *(void *)&long long v37 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ApplyOperations();
      }
      if (*(void *)(a2 + 32) == *(void *)(a2 + 40) && *(void *)(a2 + 128) == *(void *)(a2 + 136))
      {
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        unint64_t v34 = 0;
        sub_21698FA28(&v32, *(uint64_t **)(a2 + 104), *(uint64_t **)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
        long long v29 = 0;
        long long v30 = 0;
        uint64_t v31 = 0;
        sub_21698FA28(&v29, *(uint64_t **)(a2 + 56), *(uint64_t **)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
        uint64_t v26 = 0;
        long long v27 = 0;
        uint64_t v28 = 0;
        sub_21698FA28(&v26, *(uint64_t **)(a2 + 80), *(uint64_t **)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
        uint64_t v6 = (uint64_t *)v3[13];
        for (uint64_t i = (uint64_t *)v3[14]; v6 != i; ++v6)
        {
          uint64_t v8 = sub_216AD0E58(v29, v30, v6);
          sub_216AD0DE4((uint64_t)&v29, v8, v30);
          uint64_t v9 = sub_216AD0E58(v26, v27, v6);
          sub_216AD0DE4((uint64_t)&v26, v9, v27);
          uint64_t v11 = (uint64_t *)v32;
          uint64_t v10 = v33;
          if (v32 != (char *)v33)
          {
            do
            {
              if ((*v11 & 0xFFFFFFFFFFFFFFF8) == (*v6 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_15;
              }
              ++v11;
            }
            while (v11 != v33);
            uint64_t v11 = v33;
          }
LABEL_15:
          if (v11 == v33)
          {
            if ((unint64_t)v33 >= v34)
            {
              uint64_t v13 = (uint64_t *)sub_216973984(&v32, v6);
            }
            else
            {
              uint64_t v12 = *v6;
              *uint64_t v33 = *v6;
              if ((v12 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                *v10 &= 0xFFFFFFFFFFFFFFF8;
              }
              uint64_t v13 = v10 + 1;
            }
            uint64_t v33 = v13;
          }
        }
        uint64_t v14 = (uint64_t *)v3[7];
        uint64_t v15 = (uint64_t *)v3[8];
        if (v14 == v15)
        {
          uint64_t v19 = (uint64_t *)v3[7];
        }
        else
        {
          do
          {
            uint64_t v16 = sub_216AD0E58((uint64_t *)v32, v33, v14);
            sub_216AD0DE4((uint64_t)&v32, v16, v33);
            uint64_t v17 = sub_216AD0E58(v29, v30, v14);
            sub_216AD0DE4((uint64_t)&v29, v17, v30);
            uint64_t v18 = sub_216AD0E58(v26, v27, v14);
            sub_216AD0DE4((uint64_t)&v26, v18, v27);
            ++v14;
          }
          while (v14 != v15);
          uint64_t v19 = (uint64_t *)v3[7];
          uint64_t v14 = (uint64_t *)v3[8];
        }
        sub_216AE27E0((uint64_t *)&v29, v29, v19, v14, v14 - v19);
        uint64_t v20 = (uint64_t *)v3[10];
        uint64_t v21 = (uint64_t *)v3[11];
        if (v20 == v21)
        {
          uint64_t v25 = (uint64_t *)v3[10];
        }
        else
        {
          do
          {
            uint64_t v22 = sub_216AD0E58((uint64_t *)v32, v33, v20);
            sub_216AD0DE4((uint64_t)&v32, v22, v33);
            char v23 = sub_216AD0E58(v29, v30, v20);
            sub_216AD0DE4((uint64_t)&v29, v23, v30);
            uint64_t v24 = sub_216AD0E58(v26, v27, v20);
            sub_216AD0DE4((uint64_t)&v26, v24, v27);
            ++v20;
          }
          while (v20 != v21);
          uint64_t v25 = (uint64_t *)v3[10];
          uint64_t v20 = (uint64_t *)v3[11];
        }
        sub_216AE27E0((uint64_t *)&v26, v27, v25, v20, v20 - v25);
        LOBYTE(v35) = 0;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetDeletedItems();
      }
    }
    *a3 = 0;
    a3[152] = 0;
  }
  return result;
}

void sub_216AD0D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a10;
  sub_216889A04(&a19);
  a19 = (void **)&a13;
  sub_216889A04(&a19);
  a19 = (void **)&a16;
  sub_216889A04(&a19);
  _Unwind_Resume(a1);
}

void *sub_216AD0DE4(uint64_t a1, void *a2, void *a3)
{
  if (a2 != a3)
  {
    sub_216A8E2D8(a3, *(void **)(a1 + 8), a2);
    for (uint64_t i = *(void *)(a1 + 8); i != v5; i -= 8)
    {
      uint64_t v8 = *(void *)(i - 8);
      uint64_t v7 = v8;
      if ((v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    *(void *)(a1 + 8) = v5;
  }
  return a2;
}

uint64_t *sub_216AD0E58(uint64_t *result, uint64_t *a2, void *a3)
{
  if (result == a2)
  {
LABEL_4:
    uint64_t result = a2;
  }
  else
  {
    while ((*result & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
    {
      if (++result == a2) {
        goto LABEL_4;
      }
    }
  }
  if (result != a2)
  {
    for (uint64_t i = result + 1; i != a2; ++i)
    {
      uint64_t v4 = *i;
      if ((*i & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        if (i != result)
        {
          if ((*result & 7) != 0)
          {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*result & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            uint64_t v4 = *i;
          }
          char *result = v4;
          uint64_t *i = 0;
        }
        ++result;
      }
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ModifyOperations(uint64_t a1, uint64_t a2, int a3)
{
  if (!*(void *)(a2 + 24)) {
    return 0;
  }
  int v6 = sub_216AD0FB8(a2, a1 + 8, a3);
  int v7 = v6 | sub_216AD0FB8(a2, a1 + 32, a3);
  int v8 = sub_216AD0FB8(a2, a1 + 56, a3);
  int v9 = v7 | v8 | sub_216AD0FB8(a2, a1 + 80, a3);
  int v10 = sub_216AD0FB8(a2, a1 + 104, a3);
  return v9 | v10 | sub_216AD0FB8(a2, a1 + 128, a3);
}

uint64_t sub_216AD0FB8(uint64_t a1, uint64_t a2, int a3)
{
  int64x2_t v39 = 0uLL;
  long long v40 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  uint64_t v3 = *(uint64_t **)a2;
  uint64_t v4 = *(uint64_t **)(a2 + 8);
  if (*(uint64_t **)a2 == v4) {
    goto LABEL_42;
  }
  char v8 = 0;
  do
  {
    uint64_t v9 = *(void *)(a1 + 24);
    if (!v9) {
      sub_21683A7CC();
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v9 + 48))(&v35);
    int v10 = v36;
    if (a3)
    {
      if (v36)
      {
        sub_216AE29A8((char **)&v37, &v35);
        int v10 = v36;
        if ((v11 & 1) == 0)
        {
          if (v36)
          {
            uint64_t v12 = v35;
            char v8 = 1;
            goto LABEL_37;
          }
        }
      }
    }
    if (!v10)
    {
      char v8 = 1;
      goto LABEL_39;
    }
    uint64_t v13 = v35;
    uint64_t v14 = (atomic_uint *)(v35 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v15 = *v3;
    uint64_t v16 = (void *)v39.i64[1];
    if ((v35 & 0xFFFFFFFFFFFFFFF8) == (*v3 & 0xFFFFFFFFFFFFFFF8))
    {
      if (v39.i64[1] >= (unint64_t)v40)
      {
        uint64_t v17 = sub_216973984((char **)&v39, v3);
      }
      else
      {
        *(void *)v39.i64[1] = v15;
        if ((v15 & 7) != 0 && (atomic_fetch_add_explicit(v14, 2u, memory_order_relaxed) & 1) == 0) {
          *v16 &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v17 = (char *)(v16 + 1);
      }
    }
    else
    {
      if (v39.i64[1] >= (unint64_t)v40)
      {
        uint64_t v18 = (v39.i64[1] - v39.i64[0]) >> 3;
        if ((unint64_t)(v18 + 1) >> 61) {
          sub_21677CB10();
        }
        unint64_t v19 = (uint64_t)&v40[-v39.i64[0]] >> 2;
        if (v19 <= v18 + 1) {
          unint64_t v19 = v18 + 1;
        }
        if ((unint64_t)&v40[-v39.i64[0]] >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v19;
        }
        long long v44 = &v40;
        if (v20)
        {
          uint64_t v21 = (char *)sub_21677CB28((uint64_t)&v40, v20);
          uint64_t v13 = v35;
        }
        else
        {
          uint64_t v21 = 0;
        }
        uint64_t v22 = (uint64_t *)&v21[8 * v18];
        char v23 = &v21[8 * v20];
        long long v43 = v23;
        *uint64_t v22 = v13;
        uint64_t v17 = (char *)(v22 + 1);
        uint64_t v35 = 0;
        v42.i64[1] = (uint64_t)(v22 + 1);
        uint64_t v24 = (void *)v39.i64[1];
        uint64_t v25 = (void *)v39.i64[0];
        if (v39.i64[1] == v39.i64[0])
        {
          int64x2_t v27 = vdupq_n_s64(v39.u64[1]);
        }
        else
        {
          do
          {
            uint64_t v26 = *--v24;
            *--uint64_t v22 = v26;
            *uint64_t v24 = 0;
          }
          while (v24 != v25);
          int64x2_t v27 = v39;
          uint64_t v17 = (char *)v42.i64[1];
          char v23 = v43;
        }
        v39.i64[0] = (uint64_t)v22;
        v39.i64[1] = (uint64_t)v17;
        int64x2_t v42 = v27;
        uint64_t v28 = v40;
        long long v40 = v23;
        long long v43 = v28;
        long long v41 = (int64x2_t *)v27.i64[0];
        sub_2168BE9D8((uint64_t)&v41);
      }
      else
      {
        *(void *)v39.i64[1] = v35;
        uint64_t v17 = (char *)(v16 + 1);
        uint64_t v35 = 0;
      }
      char v8 = 1;
    }
    v39.i64[1] = (uint64_t)v17;
    if (v36)
    {
      uint64_t v12 = v35;
LABEL_37:
      if ((v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
LABEL_39:
    ++v3;
  }
  while (v3 != v4);
  if (v8)
  {
    int64x2_t v29 = *(int64x2_t *)a2;
    *(int64x2_t *)a2 = v39;
    int64x2_t v39 = v29;
    long long v30 = *(char **)(a2 + 16);
    *(void *)(a2 + 16) = v40;
    long long v40 = v30;
    uint64_t v31 = 1;
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v31 = 0;
LABEL_43:
  uint64_t v32 = *((void *)&v38 + 1);
  *((void *)&v38 + 1) = 0;
  if (v32)
  {
    uint64_t v33 = (void *)sub_2168C08A0(v32);
    operator delete(v33);
  }
  long long v41 = (int64x2_t *)&v37;
  sub_216889A04((void ***)&v41);
  long long v41 = &v39;
  sub_216889A04((void ***)&v41);
  return v31;
}

void sub_216AD1288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a10)
  {
    if ((a9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  sub_216AE2AF4((uint64_t)&a11);
  a11 = (void **)&a15;
  sub_216889A04(&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ReplaceOperations(unsigned char *a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (*a1) {
    BOOL v5 = a2 == 0;
  }
  else {
    BOOL v5 = a2 != 0;
  }
  if (v5 || !a4 && *a5 != a5[1]) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetItems();
  }
  return 0;
}

void sub_216AD14D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  a11 = (void **)&a16;
  sub_216889A04(&a11);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ComposeOperations(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (a3) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::GetItems();
  }

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetExplicitItems();
}

void sub_216AD1794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::operator==(void *a1, void *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  uint64_t v3 = (char *)a1[1];
  long long v2 = (char *)a1[2];
  uint64_t v4 = (void *)a2[1];
  if (v2 - v3 != a2[2] - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if ((*(void *)v3 & 0xFFFFFFFFFFFFFFF8) != (*v4 & 0xFFFFFFFFFFFFFFF8)) {
      return 0;
    }
    v3 += 8;
    ++v4;
  }
  int v6 = (char *)a1[4];
  BOOL v5 = (char *)a1[5];
  int v7 = (void *)a2[4];
  if (v5 - v6 != a2[5] - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) != (*v7 & 0xFFFFFFFFFFFFFFF8)) {
      return 0;
    }
    v6 += 8;
    ++v7;
  }
  uint64_t v9 = (char *)a1[7];
  char v8 = (char *)a1[8];
  int v10 = (void *)a2[7];
  if (v8 - v9 != a2[8] - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != (*v10 & 0xFFFFFFFFFFFFFFF8)) {
      return 0;
    }
    v9 += 8;
    ++v10;
  }
  uint64_t v12 = (char *)a1[10];
  char v11 = (char *)a1[11];
  uint64_t v13 = (void *)a2[10];
  if (v11 - v12 != a2[11] - (void)v13) {
    return 0;
  }
  while (v12 != v11)
  {
    if ((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) != (*v13 & 0xFFFFFFFFFFFFFFF8)) {
      return 0;
    }
    v12 += 8;
    ++v13;
  }
  uint64_t v15 = (char *)a1[13];
  uint64_t v14 = (char *)a1[14];
  uint64_t v16 = (void *)a2[13];
  if (v14 - v15 != a2[14] - (void)v16) {
    return 0;
  }
  while (v15 != v14)
  {
    if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) != (*v16 & 0xFFFFFFFFFFFFFFF8)) {
      return 0;
    }
    v15 += 8;
    ++v16;
  }
  return sub_2169DB9B8(a1 + 16, (uint64_t)(a2 + 16));
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::operator!=()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::operator==();
}

uint64_t sub_216AD19A0(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

pxrInternal__aapl__pxrReserved__::TfType *pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::TfToken>(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2)
{
  uint64_t Root = pxrInternal__aapl__pxrReserved__::TfType::GetRoot(a1);
  int v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551D0, v5, v6);
  pxrInternal__aapl__pxrReserved__::TfType::GetAliases(Root, *v7, v8, (uint64_t)v20);
  uint64_t v9 = v20[0];
  if (v20[0] == v20[1])
  {
    __p[0] = "sdf/listOp.cpp";
    __p[1] = "_StreamOut";
    uint64_t v17 = 809;
    uint64_t v18 = "std::ostream &pxrInternal__aapl__pxrReserved__::_StreamOut(std::ostream &, const SdfListOp<T> &) [T = pxrInter"
          "nal__aapl__pxrReserved__::TfToken]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!listOpAliases.empty()", 0);
    uint64_t v9 = v20[0];
  }
  int v10 = *(char *)(v9 + 23);
  if (v10 >= 0) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = *(void *)v9;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(v9 + 23);
  }
  else {
    uint64_t v12 = *(void *)(v9 + 8);
  }
  uint64_t v13 = sub_216779180(a1, v11, v12);
  sub_216779180(v13, (uint64_t)"(", 1);
  char v15 = 1;
  if (*(unsigned char *)a2)
  {
    sub_216779094(__p, "Explicit");
    sub_216AE2F74(a1, (uint64_t)__p, (uint64_t *)(a2 + 8), &v15, 1);
  }
  else
  {
    sub_216779094(__p, "Deleted");
    sub_216AE2F74(a1, (uint64_t)__p, (uint64_t *)(a2 + 104), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Added");
    sub_216AE2F74(a1, (uint64_t)__p, (uint64_t *)(a2 + 32), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Prepended");
    sub_216AE2F74(a1, (uint64_t)__p, (uint64_t *)(a2 + 56), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Appended");
    sub_216AE2F74(a1, (uint64_t)__p, (uint64_t *)(a2 + 80), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Ordered");
    sub_216AE2F74(a1, (uint64_t)__p, (uint64_t *)(a2 + 128), &v15, 0);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  sub_216779180(a1, (uint64_t)")", 1);
  __p[0] = v20;
  sub_216782F20((void ***)__p);
  return a1;
}

void sub_216AD1C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  std::string __p = &a19;
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::CreateExplicit(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetExplicitItems();
}

void sub_216AD1D08(_Unwind_Exception *a1)
{
  sub_2169D3664(v1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  double result;

  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetExplicitItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::Create(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetPrependedItems();
}

void sub_216AD1E2C(_Unwind_Exception *a1)
{
  sub_2169D3664(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetPrependedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAppendedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetDeletedItems()
{
}

{
  while (1)
    ;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::Swap(char *result, char *a2)
{
  char v2 = *result;
  char *result = *a2;
  *a2 = v2;
  uint64_t v3 = *((void *)result + 1);
  *((void *)result + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = *((void *)result + 2);
  *((void *)result + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)result + 3);
  *((void *)result + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)result + 4);
  *((void *)result + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)result + 5);
  *((void *)result + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = *((void *)result + 6);
  *((void *)result + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  uint64_t v9 = *((void *)result + 7);
  *((void *)result + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  uint64_t v10 = *((void *)result + 8);
  *((void *)result + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = *((void *)result + 9);
  *((void *)result + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v11;
  uint64_t v12 = *((void *)result + 10);
  *((void *)result + 1sub_2168EBBB8(&a9, 0) = *((void *)a2 + 10);
  *((void *)a2 + 1sub_2168EBBB8(&a9, 0) = v12;
  uint64_t v13 = *((void *)result + 11);
  *((void *)result + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v13;
  uint64_t v14 = *((void *)result + 12);
  *((void *)result + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v14;
  uint64_t v15 = *((void *)result + 13);
  *((void *)result + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v15;
  uint64_t v16 = *((void *)result + 14);
  *((void *)result + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v16;
  uint64_t v17 = *((void *)result + 15);
  *((void *)result + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v17;
  uint64_t v18 = *((void *)result + 16);
  *((void *)result + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v18;
  uint64_t v19 = *((void *)result + 17);
  *((void *)result + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v19;
  uint64_t v20 = *((void *)result + 18);
  *((void *)result + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v20;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::HasKeys(uint64_t a1)
{
  return *(unsigned char *)a1
      || *(void *)(a1 + 40) != *(void *)(a1 + 32)
      || *(void *)(a1 + 64) != *(void *)(a1 + 56)
      || *(void *)(a1 + 88) != *(void *)(a1 + 80)
      || *(void *)(a1 + 112) != *(void *)(a1 + 104)
      || *(void *)(a1 + 136) != *(void *)(a1 + 128);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::IsExplicit(unsigned __int8 *a1)
{
  return *a1;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::HasItem(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    if (v4 != v5)
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v4, a2) & 1) == 0)
      {
        v4 += 16;
        if (v4 == v5)
        {
          uint64_t v4 = v5;
          break;
        }
      }
      uint64_t v6 = v4;
      uint64_t v4 = *(void *)(a1 + 16);
      return v6 != v4;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    if (v7 == v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
    }
    else
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v7, a2) & 1) == 0)
      {
        v7 += 16;
        if (v7 == v8)
        {
          uint64_t v7 = v8;
          break;
        }
      }
      uint64_t v9 = v7;
      uint64_t v7 = *(void *)(a1 + 40);
    }
    if (v9 != v7) {
      return 1;
    }
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 64);
    if (v10 == v11)
    {
      uint64_t v12 = *(void *)(a1 + 56);
    }
    else
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v10, a2) & 1) == 0)
      {
        v10 += 16;
        if (v10 == v11)
        {
          uint64_t v10 = v11;
          break;
        }
      }
      uint64_t v12 = v10;
      uint64_t v10 = *(void *)(a1 + 64);
    }
    if (v12 != v10) {
      return 1;
    }
    uint64_t v13 = *(void *)(a1 + 80);
    uint64_t v14 = *(void *)(a1 + 88);
    if (v13 == v14)
    {
      uint64_t v15 = *(void *)(a1 + 80);
    }
    else
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v13, a2) & 1) == 0)
      {
        v13 += 16;
        if (v13 == v14)
        {
          uint64_t v13 = v14;
          break;
        }
      }
      uint64_t v15 = v13;
      uint64_t v13 = *(void *)(a1 + 88);
    }
    if (v15 != v13) {
      return 1;
    }
    uint64_t v16 = *(void *)(a1 + 104);
    uint64_t v17 = *(void *)(a1 + 112);
    if (v16 == v17)
    {
      uint64_t v18 = *(void *)(a1 + 104);
    }
    else
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v16, a2) & 1) == 0)
      {
        v16 += 16;
        if (v16 == v17)
        {
          uint64_t v16 = v17;
          break;
        }
      }
      uint64_t v18 = v16;
      uint64_t v16 = *(void *)(a1 + 112);
    }
    if (v18 != v16) {
      return 1;
    }
    uint64_t v4 = *(void *)(a1 + 128);
    uint64_t v20 = *(void *)(a1 + 136);
    if (v4 != v20)
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v4, a2) & 1) == 0)
      {
        v4 += 16;
        if (v4 == v20)
        {
          uint64_t v4 = v20;
          break;
        }
      }
      uint64_t v6 = v4;
      uint64_t v4 = *(void *)(a1 + 136);
      return v6 != v4;
    }
  }
  uint64_t v6 = v4;
  return v6 != v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetExplicitItems(uint64_t a1)
{
  return a1 + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetAddedItems(uint64_t a1)
{
  return a1 + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetPrependedItems(uint64_t a1)
{
  return a1 + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetAppendedItems(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetDeletedItems(uint64_t a1)
{
  return a1 + 104;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetOrderedItems(uint64_t a1)
{
  return a1 + 128;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetItems(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      uint64_t result = a1 + 32;
      break;
    case 2:
      uint64_t result = a1 + 104;
      break;
    case 3:
      uint64_t result = a1 + 128;
      break;
    case 4:
      uint64_t result = a1 + 56;
      break;
    case 5:
      uint64_t result = a1 + 80;
      break;
    default:
      v4[0] = "sdf/listOp.cpp";
      v4[1] = "GetItems";
      v4[2] = 167;
      void v4[3] = "const typename SdfListOp<T>::ItemVector &pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__px"
              "rReserved__::SdfUnregisteredValue>::GetItems(SdfListOpType) const [T = pxrInternal__aapl__pxrReserved__::S"
              "dfUnregisteredValue]";
      char v5 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Got out-of-range type value: %d", a2);
LABEL_4:
      uint64_t result = a1 + 8;
      break;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetAppliedItems(void *a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ApplyOperations();
}

void sub_216AD2460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AE309C((void ***)va);
  sub_216932118((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ApplyOperations(uint64_t a1, void **a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v7 = (uint64_t)&v7;
    uint64_t v8 = &v7;
    uint64_t v9 = 0;
    if (*(unsigned char *)a1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v4 = &v5;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_AddKeys();
    }
    if (*(void *)(a3 + 24)
      || ((uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 4)
       + ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 4)
       + ((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 4)
       + ((uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 4)
       + ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 4))
    {
      sub_216AE3358((uint64_t)&v7, &v7, *a2, a2[1]);
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v4 = &v5;
      for (uint64_t i = v8; i != &v7; uint64_t i = (uint64_t *)i[1])
      {
        uint64_t v10 = i + 2;
        sub_216AE34B0(&v4, (pxrInternal__aapl__pxrReserved__::VtValue *)(i + 2), (uint64_t)&unk_2174BFD90, &v10)[6] = (uint64_t)i;
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_DeleteKeys();
    }
    sub_216ADD9E4(&v7);
  }
}

void sub_216AD269C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216ADD9E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_SetExplicit(unsigned __int8 *result, int a2)
{
  if (*result != a2)
  {
    uint64_t v2 = result;
    char *result = a2;
    uint64_t v3 = *((void *)result + 2);
    uint64_t v4 = *((void *)v2 + 1);
    while (v3 != v4)
      uint64_t v3 = sub_2168EE084(v3 - 16);
    *((void *)v2 + 2) = v4;
    uint64_t v6 = *((void *)v2 + 4);
    for (uint64_t i = *((void *)v2 + 5); i != v6; uint64_t i = sub_2168EE084(i - 16))
      ;
    *((void *)v2 + 5) = v6;
    uint64_t v8 = *((void *)v2 + 7);
    for (uint64_t j = *((void *)v2 + 8); j != v8; uint64_t j = sub_2168EE084(j - 16))
      ;
    *((void *)v2 + 8) = v8;
    uint64_t v10 = *((void *)v2 + 10);
    for (uint64_t k = *((void *)v2 + 11); k != v10; uint64_t k = sub_2168EE084(k - 16))
      ;
    *((void *)v2 + 11) = v10;
    uint64_t v12 = *((void *)v2 + 13);
    for (uint64_t m = *((void *)v2 + 14); m != v12; uint64_t m = sub_2168EE084(m - 16))
      ;
    *((void *)v2 + 14) = v12;
    uint64_t v13 = (unsigned __int8 *)*((void *)v2 + 16);
    for (uint64_t result = (unsigned __int8 *)*((void *)v2 + 17);
          result != v13;
    *((void *)v2 + 17) = v13;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAddedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetOrderedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetItems(uint64_t a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetExplicitItems();
    case 1:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAddedItems();
    case 2:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetDeletedItems();
    case 3:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetOrderedItems();
    case 4:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetPrependedItems();
    case 5:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAppendedItems();
    default:
      return;
  }
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::Clear(unsigned char *a1)
{
  *a1 = 1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_SetExplicit();
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ClearAndMakeExplicit(unsigned char *a1)
{
  *a1 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_SetExplicit();
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_AddKeys()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetItems();
}

{
  while (1)
    ;
}

void sub_216AD2AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  if (a15) {
    sub_2168EE084((uint64_t)&a13);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_DeleteKeys()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetItems();
}

{
  while (1)
    ;
}

void sub_216AD2CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  if (a13) {
    sub_2168EE084((uint64_t)&a11);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_PrependKeys()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetItems();
}

{
  while (1)
    ;
}

void sub_216AD2F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  if (a13) {
    sub_2168EE084((uint64_t)&a11);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_AppendKeys()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetItems();
}

{
  while (1)
    ;
}

void sub_216AD31C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  if (a13) {
    sub_2168EE084((uint64_t)&a11);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_ReorderKeys()
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  long long v2 = 0uLL;
  uint64_t v3 = 0;
  v1[0] = 0;
  v1[1] = 0;
  uint64_t v0 = v1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetItems();
}

{
  while (1)
    ;
}

void sub_216AD3444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void *a13, uint64_t a14, char a15)
{
  a12 = (void **)&a15;
  sub_216932118(&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ApplyOperations@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = (void *)result;
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)result)
  {
    uint64_t result = sub_2169E2B3C((uint64_t)a3, result);
    a3[152] = 1;
  }
  else
  {
    if (*(void *)(result + 32) == *(void *)(result + 40) && *(void *)(result + 128) == *(void *)(result + 136))
    {
      if (*(unsigned char *)a2)
      {
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        sub_2169E2CB4(&v31, *(void *)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4);
        *(void *)&long long v36 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ApplyOperations();
      }
      if (*(void *)(a2 + 32) == *(void *)(a2 + 40) && *(void *)(a2 + 128) == *(void *)(a2 + 136))
      {
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        sub_2169E2CB4(&v31, *(void *)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 4);
        uint64_t v28 = 0;
        int64x2_t v29 = 0;
        uint64_t v30 = 0;
        sub_2169E2CB4(&v28, *(void *)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 4);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        sub_2169E2CB4(&v25, *(void *)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 4);
        uint64_t v6 = (void *)v3[13];
        uint64_t v7 = (void *)v3[14];
        while (1)
        {
          if (v6 == v7)
          {
            uint64_t v13 = v3[7];
            uint64_t v14 = v3[8];
            if (v13 == v14)
            {
              uint64_t v18 = (void *)v3[7];
            }
            else
            {
              do
              {
                uint64_t v15 = sub_216AD3A8C(v31, v32, v13);
                sub_216AD39EC((uint64_t)&v31, v15, (uint64_t)v32);
                uint64_t v16 = sub_216AD3A8C(v28, v29, v13);
                sub_216AD39EC((uint64_t)&v28, v16, (uint64_t)v29);
                uint64_t v17 = sub_216AD3A8C(v25, v26, v13);
                sub_216AD39EC((uint64_t)&v25, v17, (uint64_t)v26);
                v13 += 16;
              }
              while (v13 != v14);
              uint64_t v18 = (void *)v3[7];
              uint64_t v13 = v3[8];
            }
            sub_216AE3C18((uint64_t *)&v28, v28, v18, v13, (v13 - (uint64_t)v18) >> 4);
            uint64_t v19 = v3[10];
            uint64_t v20 = v3[11];
            if (v19 == v20)
            {
              uint64_t v24 = (void *)v3[10];
            }
            else
            {
              do
              {
                uint64_t v21 = sub_216AD3A8C(v31, v32, v19);
                sub_216AD39EC((uint64_t)&v31, v21, (uint64_t)v32);
                uint64_t v22 = sub_216AD3A8C(v28, v29, v19);
                sub_216AD39EC((uint64_t)&v28, v22, (uint64_t)v29);
                char v23 = sub_216AD3A8C(v25, v26, v19);
                sub_216AD39EC((uint64_t)&v25, v23, (uint64_t)v26);
                v19 += 16;
              }
              while (v19 != v20);
              uint64_t v24 = (void *)v3[10];
              uint64_t v19 = v3[11];
            }
            sub_216AE3C18((uint64_t *)&v25, v26, v24, v19, (v19 - (uint64_t)v24) >> 4);
            LOBYTE(v34) = 0;
            long long v35 = 0u;
            long long v36 = 0u;
            long long v37 = 0u;
            long long v38 = 0u;
            long long v39 = 0u;
            long long v40 = 0u;
            long long v41 = 0u;
            long long v42 = 0u;
            long long v43 = 0u;
            pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetDeletedItems();
          }
          uint64_t v8 = sub_216AD3A8C(v28, v29, (uint64_t)v6);
          sub_216AD39EC((uint64_t)&v28, v8, (uint64_t)v29);
          uint64_t v9 = sub_216AD3A8C(v25, v26, (uint64_t)v6);
          sub_216AD39EC((uint64_t)&v25, v9, (uint64_t)v26);
          uint64_t v10 = v31;
          uint64_t v11 = v32;
          if (v31 == v32)
          {
            uint64_t v12 = v31;
          }
          else
          {
            do
            {
              if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v10, v6)) {
                goto LABEL_17;
              }
              v10 += 2;
            }
            while (v10 != v11);
            uint64_t v10 = v11;
LABEL_17:
            uint64_t v12 = v10;
            uint64_t v10 = v32;
          }
          if (v12 == v10) {
            sub_216AD3B24(&v31, v6);
          }
          v6 += 2;
        }
      }
    }
    *a3 = 0;
    a3[152] = 0;
  }
  return result;
}

void sub_216AD391C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a10;
  sub_216932118(&a19);
  a19 = (void **)&a13;
  sub_216932118(&a19);
  a19 = (void **)&a16;
  sub_216932118(&a19);
  _Unwind_Resume(a1);
}

void *sub_216AD39EC(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2 != (void *)a3)
  {
    uint64_t v5 = a3;
    uint64_t v6 = *(void **)(a1 + 8);
    if ((void *)a3 == v6)
    {
      uint64_t v8 = a2;
    }
    else
    {
      uint64_t v7 = 2 * ((a3 - (uint64_t)a2) >> 4);
      uint64_t v8 = a2;
      do
      {
        sub_2168ED33C(v8, &v8[v7]);
        v8 += 2;
      }
      while (&v8[v7] != v6);
      uint64_t v5 = *(void *)(a1 + 8);
    }
    while ((void *)v5 != v8)
      uint64_t v5 = sub_2168EE084(v5 - 16);
    *(void *)(a1 + 8) = v8;
  }
  return a2;
}

void *sub_216AD3A8C(void *a1, void *a2, uint64_t a3)
{
  if (a1 == a2)
  {
LABEL_5:
    uint64_t v5 = a2;
  }
  else
  {
    uint64_t v5 = a1;
    while ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v5, a3) & 1) == 0)
    {
      v5 += 2;
      if (v5 == a2) {
        goto LABEL_5;
      }
    }
  }
  if (v5 != a2)
  {
    for (uint64_t i = v5 + 2; i != a2; i += 2)
    {
      if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(i, a3) & 1) == 0)
      {
        sub_2168ED33C(v5, i);
        v5 += 2;
      }
    }
  }
  return v5;
}

uint64_t sub_216AD3B24(void *a1, void *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 3;
    if (v11 >> 3 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      uint64_t v14 = (char *)sub_216787EE0(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = v14;
    uint64_t v16 = &v14[16 * v10];
    uint64_t v18 = &v14[16 * v13];
    sub_2168EE4C4(v16, a2);
    uint64_t v17 = v16 + 16;
    sub_21696CA88(a1, &v15);
    unint64_t v9 = a1[1];
    uint64_t result = sub_21696CB10((uint64_t)&v15);
  }
  else
  {
    uint64_t result = (uint64_t)sub_2168EE4C4(*(void **)(v4 - 8), a2);
    unint64_t v9 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v9;
  return result;
}

void sub_216AD3C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ModifyOperations(long long *a1, uint64_t a2, int a3)
{
  if (!*(void *)(a2 + 24)) {
    return 0;
  }
  int v6 = sub_216AD3CFC(a2, (long long *)((char *)a1 + 8), a3);
  int v7 = v6 | sub_216AD3CFC(a2, a1 + 2, a3);
  int v8 = sub_216AD3CFC(a2, (long long *)((char *)a1 + 56), a3);
  int v9 = v7 | v8 | sub_216AD3CFC(a2, a1 + 5, a3);
  int v10 = sub_216AD3CFC(a2, (long long *)((char *)a1 + 104), a3);
  return v9 | v10 | sub_216AD3CFC(a2, a1 + 8, a3);
}

uint64_t sub_216AD3CFC(uint64_t a1, long long *a2, int a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  long long v21 = 0uLL;
  uint64_t v22 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v3 = *(std::type_info **)a2;
  uint64_t v4 = (std::type_info *)*((void *)a2 + 1);
  if (*(std::type_info **)a2 == v4) {
    goto LABEL_19;
  }
  char v8 = 0;
  do
  {
    uint64_t v9 = *(void *)(a1 + 24);
    if (!v9) {
      sub_21683A7CC();
    }
    (*(void (**)(void ***__return_ptr))(*(void *)v9 + 48))(v23);
    int v11 = v24;
    if (a3)
    {
      if (v24)
      {
        sub_216AE3DD4((uint64_t *)&v19, (pxrInternal__aapl__pxrReserved__::VtValue *)v23);
        int v11 = v24;
        if ((v12 & 1) == 0)
        {
          if (v24)
          {
            char v8 = 1;
LABEL_15:
            sub_2168EE084((uint64_t)v23);
            goto LABEL_16;
          }
        }
      }
    }
    if (!v11)
    {
      char v8 = 1;
      goto LABEL_16;
    }
    if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator!=((pxrInternal__aapl__pxrReserved__::VtValue *)v23, v3, v10))
    {
      sub_216AE3F1C(&v21, v23);
      char v8 = 1;
    }
    else
    {
      sub_216AD3B24(&v21, v3);
    }
    if (v24) {
      goto LABEL_15;
    }
LABEL_16:
    ++v3;
  }
  while (v3 != v4);
  if (v8)
  {
    long long v13 = *a2;
    *a2 = v21;
    long long v21 = v13;
    uint64_t v14 = *((void *)a2 + 2);
    *((void *)a2 + 2) = v22;
    uint64_t v22 = v14;
    uint64_t v15 = 1;
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v15 = 0;
LABEL_20:
  uint64_t v16 = *((void *)&v20 + 1);
  *((void *)&v20 + 1) = 0;
  if (v16)
  {
    uint64_t v17 = (void *)sub_216AE40A4(v16);
    operator delete(v17);
  }
  v23[0] = (void **)&v19;
  sub_216932118(v23);
  *(void *)&long long v19 = &v21;
  sub_216932118((void ***)&v19);
  return v15;
}

void sub_216AD3EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  if (a19) {
    sub_2168EE084((uint64_t)&a17);
  }
  sub_216AE4020((uint64_t)&a9);
  a9 = (void **)&a13;
  sub_216932118(&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ReplaceOperations(unsigned char *a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (*a1) {
    BOOL v5 = a2 == 0;
  }
  else {
    BOOL v5 = a2 != 0;
  }
  if (v5 || !a4 && *a5 != a5[1]) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetItems();
  }
  return 0;
}

void sub_216AD40E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  a11 = (void **)&a16;
  sub_216932118(&a11);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ComposeOperations(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (a3) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::GetItems();
  }

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetExplicitItems();
}

void sub_216AD43AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::operator==(void *a1, void *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a2[1];
  if (v5 - v4 != a2[2] - v6) {
    return 0;
  }
  while (v4 != v5)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v4, v6)) {
      return 0;
    }
    v4 += 16;
    v6 += 16;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a2[4];
  if (v8 - v7 != a2[5] - v9) {
    return 0;
  }
  while (v7 != v8)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v7, v9)) {
      return 0;
    }
    v7 += 16;
    v9 += 16;
  }
  uint64_t v10 = a1[7];
  uint64_t v11 = a1[8];
  uint64_t v12 = a2[7];
  if (v11 - v10 != a2[8] - v12) {
    return 0;
  }
  while (v10 != v11)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v10, v12)) {
      return 0;
    }
    v10 += 16;
    v12 += 16;
  }
  uint64_t v13 = a1[10];
  uint64_t v14 = a1[11];
  uint64_t v15 = a2[10];
  if (v14 - v13 != a2[11] - v15) {
    return 0;
  }
  while (v13 != v14)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v13, v15)) {
      return 0;
    }
    v13 += 16;
    v15 += 16;
  }
  uint64_t v16 = a1[13];
  uint64_t v17 = a1[14];
  uint64_t v18 = a2[13];
  if (v17 - v16 != a2[14] - v18) {
    return 0;
  }
  while (v16 != v17)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v16, v18)) {
      return 0;
    }
    v16 += 16;
    v18 += 16;
  }

  return sub_216AD45C4(a1 + 16, a2 + 16);
}

uint64_t sub_216AD45C4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  if (v3 - *a1 != a2[1] - *a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  do
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v2, v4);
    if (!result) {
      break;
    }
    v2 += 16;
    v4 += 16;
  }
  while (v2 != v3);
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::operator!=()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::operator==();
}

uint64_t sub_216AD4654(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_216AD46A8(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    void v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfUnre"
            "gisteredValue>>::operator*() [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216AD4720()
{
}

void *sub_216AD4728(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    _OWORD v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::SdfUnregisteredValue>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregister"
            "edValue>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::TfType *pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2)
{
  uint64_t Root = pxrInternal__aapl__pxrReserved__::TfType::GetRoot(a1);
  int v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551F0, v5, v6);
  pxrInternal__aapl__pxrReserved__::TfType::GetAliases(Root, *v7, v8, (uint64_t)v20);
  uint64_t v9 = v20[0];
  if (v20[0] == v20[1])
  {
    __p[0] = "sdf/listOp.cpp";
    __p[1] = "_StreamOut";
    uint64_t v17 = 809;
    uint64_t v18 = "std::ostream &pxrInternal__aapl__pxrReserved__::_StreamOut(std::ostream &, const SdfListOp<T> &) [T = pxrInter"
          "nal__aapl__pxrReserved__::SdfUnregisteredValue]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!listOpAliases.empty()", 0);
    uint64_t v9 = v20[0];
  }
  int v10 = *(char *)(v9 + 23);
  if (v10 >= 0) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = *(void *)v9;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(v9 + 23);
  }
  else {
    uint64_t v12 = *(void *)(v9 + 8);
  }
  uint64_t v13 = sub_216779180(a1, v11, v12);
  sub_216779180(v13, (uint64_t)"(", 1);
  char v15 = 1;
  if (*(unsigned char *)a2)
  {
    sub_216779094(__p, "Explicit");
    sub_216AE4DAC(a1, (uint64_t)__p, (uint64_t *)(a2 + 8), &v15, 1);
  }
  else
  {
    sub_216779094(__p, "Deleted");
    sub_216AE4DAC(a1, (uint64_t)__p, (uint64_t *)(a2 + 104), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Added");
    sub_216AE4DAC(a1, (uint64_t)__p, (uint64_t *)(a2 + 32), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Prepended");
    sub_216AE4DAC(a1, (uint64_t)__p, (uint64_t *)(a2 + 56), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Appended");
    sub_216AE4DAC(a1, (uint64_t)__p, (uint64_t *)(a2 + 80), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Ordered");
    sub_216AE4DAC(a1, (uint64_t)__p, (uint64_t *)(a2 + 128), &v15, 0);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  sub_216779180(a1, (uint64_t)")", 1);
  __p[0] = v20;
  sub_216782F20((void ***)__p);
  return a1;
}

void sub_216AD49FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  std::string __p = &a19;
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::CreateExplicit(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetExplicitItems();
}

void sub_216AD4ABC(_Unwind_Exception *a1)
{
  sub_216980BCC(v1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  double result;

  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetExplicitItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::Create(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetPrependedItems();
}

void sub_216AD4BE0(_Unwind_Exception *a1)
{
  sub_216980BCC(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetPrependedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAppendedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetDeletedItems()
{
}

{
  while (1)
    ;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::Swap(char *result, char *a2)
{
  char v2 = *result;
  char *result = *a2;
  *a2 = v2;
  uint64_t v3 = *((void *)result + 1);
  *((void *)result + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = *((void *)result + 2);
  *((void *)result + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)result + 3);
  *((void *)result + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)result + 4);
  *((void *)result + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)result + 5);
  *((void *)result + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = *((void *)result + 6);
  *((void *)result + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  uint64_t v9 = *((void *)result + 7);
  *((void *)result + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  uint64_t v10 = *((void *)result + 8);
  *((void *)result + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = *((void *)result + 9);
  *((void *)result + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v11;
  uint64_t v12 = *((void *)result + 10);
  *((void *)result + 1sub_2168EBBB8(&a9, 0) = *((void *)a2 + 10);
  *((void *)a2 + 1sub_2168EBBB8(&a9, 0) = v12;
  uint64_t v13 = *((void *)result + 11);
  *((void *)result + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v13;
  uint64_t v14 = *((void *)result + 12);
  *((void *)result + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v14;
  uint64_t v15 = *((void *)result + 13);
  *((void *)result + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v15;
  uint64_t v16 = *((void *)result + 14);
  *((void *)result + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v16;
  uint64_t v17 = *((void *)result + 15);
  *((void *)result + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v17;
  uint64_t v18 = *((void *)result + 16);
  *((void *)result + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v18;
  uint64_t v19 = *((void *)result + 17);
  *((void *)result + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v19;
  uint64_t v20 = *((void *)result + 18);
  *((void *)result + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v20;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::HasKeys(uint64_t a1)
{
  return *(unsigned char *)a1
      || *(void *)(a1 + 40) != *(void *)(a1 + 32)
      || *(void *)(a1 + 64) != *(void *)(a1 + 56)
      || *(void *)(a1 + 88) != *(void *)(a1 + 80)
      || *(void *)(a1 + 112) != *(void *)(a1 + 104)
      || *(void *)(a1 + 136) != *(void *)(a1 + 128);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::IsExplicit(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::HasItem(uint64_t a1, void *a2)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v3 = *(void **)(a1 + 8);
    char v2 = *(void **)(a1 + 16);
    if (v3 != v2)
    {
      while (*v3 != *a2)
      {
        if (++v3 == v2) {
          goto LABEL_5;
        }
      }
    }
    return v3 != v2;
  }
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  if (v6 != v5)
  {
    while (*v6 != *a2)
    {
      if (++v6 == v5)
      {
        uint64_t v6 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  if (v6 == v5)
  {
    uint64_t v8 = *(void **)(a1 + 56);
    uint64_t v7 = *(void **)(a1 + 64);
    if (v8 != v7)
    {
      while (*v8 != *a2)
      {
        if (++v8 == v7)
        {
          uint64_t v8 = *(void **)(a1 + 64);
          break;
        }
      }
    }
    if (v8 == v7)
    {
      uint64_t v10 = *(void **)(a1 + 80);
      uint64_t v9 = *(void **)(a1 + 88);
      if (v10 != v9)
      {
        while (*v10 != *a2)
        {
          if (++v10 == v9)
          {
            uint64_t v10 = *(void **)(a1 + 88);
            break;
          }
        }
      }
      if (v10 == v9)
      {
        uint64_t v12 = *(void **)(a1 + 104);
        uint64_t v11 = *(void **)(a1 + 112);
        if (v12 != v11)
        {
          while (*v12 != *a2)
          {
            if (++v12 == v11)
            {
              uint64_t v12 = *(void **)(a1 + 112);
              break;
            }
          }
        }
        if (v12 == v11)
        {
          uint64_t v3 = *(void **)(a1 + 128);
          char v2 = *(void **)(a1 + 136);
          if (v3 != v2)
          {
            while (*v3 != *a2)
            {
              if (++v3 == v2)
              {
LABEL_5:
                uint64_t v3 = v2;
                return v3 != v2;
              }
            }
          }
          return v3 != v2;
        }
      }
    }
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetExplicitItems(uint64_t a1)
{
  return a1 + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetAddedItems(uint64_t a1)
{
  return a1 + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetPrependedItems(uint64_t a1)
{
  return a1 + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetAppendedItems(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetDeletedItems(uint64_t a1)
{
  return a1 + 104;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetOrderedItems(uint64_t a1)
{
  return a1 + 128;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetItems(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      uint64_t result = a1 + 32;
      break;
    case 2:
      uint64_t result = a1 + 104;
      break;
    case 3:
      uint64_t result = a1 + 128;
      break;
    case 4:
      uint64_t result = a1 + 56;
      break;
    case 5:
      uint64_t result = a1 + 80;
      break;
    default:
      v4[0] = "sdf/listOp.cpp";
      v4[1] = "GetItems";
      v4[2] = 167;
      void v4[3] = "const typename SdfListOp<T>::ItemVector &pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__px"
              "rReserved__::SdfPath>::GetItems(SdfListOpType) const [T = pxrInternal__aapl__pxrReserved__::SdfPath]";
      char v5 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Got out-of-range type value: %d", a2);
LABEL_4:
      uint64_t result = a1 + 8;
      break;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetAppliedItems(void *a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ApplyOperations();
}

void sub_216AD5190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AE4ED4((void ***)va);
  sub_216981168((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ApplyOperations(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v7 = (uint64_t)&v7;
    uint64_t v8 = &v7;
    uint64_t v9 = 0;
    if (*(unsigned char *)a1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v4 = &v5;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_AddKeys();
    }
    if (*(void *)(a3 + 24)
      || ((uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 3)
       + ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3)
       + ((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3)
       + ((uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 3)
       + ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 3))
    {
      sub_216AE4FF4((uint64_t)&v7, &v7, *a2, a2[1]);
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v4 = &v5;
      for (uint64_t i = v8; i != &v7; uint64_t i = (uint64_t *)i[1])
      {
        uint64_t v10 = i + 2;
        sub_216AE5144(&v4, (unint64_t *)i + 2, (uint64_t)&unk_2174BFD90, &v10)[5] = i;
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_DeleteKeys();
    }
    sub_216ADDA58(&v7);
  }
}

void sub_216AD53DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216ADDA58((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_SetExplicit(_DWORD *result, int a2)
{
  if (*(unsigned __int8 *)result != a2)
  {
    uint64_t v2 = result;
    *(unsigned char *)uint64_t result = a2;
    uint64_t v4 = (_DWORD *)*((void *)result + 1);
    for (i = (_DWORD *)*((void *)result + 2); i != v4; uint64_t result = sub_216981128((uint64_t)(v2 + 3), i))
      i -= 2;
    v2[2] = v4;
    uint64_t v6 = (_DWORD *)v2[4];
    for (j = (_DWORD *)v2[5]; j != v6; uint64_t result = sub_216981128((uint64_t)(v2 + 6), j))
      j -= 2;
    v2[5] = v6;
    uint64_t v8 = (_DWORD *)v2[7];
    for (k = (_DWORD *)v2[8]; k != v8; uint64_t result = sub_216981128((uint64_t)(v2 + 9), k))
      k -= 2;
    v2[8] = v8;
    uint64_t v10 = (_DWORD *)v2[10];
    for (m = (_DWORD *)v2[11]; m != v10; uint64_t result = sub_216981128((uint64_t)(v2 + 12), m))
      m -= 2;
    v2[11] = v10;
    uint64_t v12 = (_DWORD *)v2[13];
    for (n = (_DWORD *)v2[14]; n != v12; uint64_t result = sub_216981128((uint64_t)(v2 + 15), n))
      n -= 2;
    v2[14] = v12;
    uint64_t v14 = (_DWORD *)v2[16];
    for (ii = (_DWORD *)v2[17]; ii != v14; uint64_t result = sub_216981128((uint64_t)(v2 + 18), ii))
      ii -= 2;
    v2[17] = v14;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAddedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetOrderedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetItems(uint64_t a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetExplicitItems();
    case 1:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAddedItems();
    case 2:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetDeletedItems();
    case 3:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetOrderedItems();
    case 4:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetPrependedItems();
    case 5:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAppendedItems();
    default:
      return;
  }
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::Clear(unsigned char *a1)
{
  *a1 = 1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_SetExplicit();
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ClearAndMakeExplicit(unsigned char *a1)
{
  *a1 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_SetExplicit();
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_AddKeys()
{
}

{
  while (1)
    ;
}

void sub_216AD588C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_DeleteKeys()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_PrependKeys()
{
}

{
  while (1)
    ;
}

void sub_216AD5D14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216982EE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_AppendKeys()
{
}

{
  while (1)
    ;
}

void sub_216AD5FB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216982EE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::_ReorderKeys()
{
  long long v2 = 0uLL;
  uint64_t v3 = 0;
  v1[0] = 0;
  v1[1] = 0;
  uint64_t v0 = v1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetItems();
}

{
  while (1)
    ;
}

void sub_216AD62B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void *a15, uint64_t a16, char a17)
{
  a14 = (void **)&a17;
  sub_216981168(&a14);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ApplyOperations@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = (void *)result;
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)result)
  {
    uint64_t result = sub_216980D74((uint64_t)a3, result);
    a3[152] = 1;
  }
  else
  {
    if (*(void *)(result + 32) == *(void *)(result + 40) && *(void *)(result + 128) == *(void *)(result + 136))
    {
      if (*(unsigned char *)a2)
      {
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        unint64_t v33 = 0;
        sub_216980EEC(&v31, *(_DWORD **)(a2 + 8), *(_DWORD **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
        *(void *)&long long v36 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ApplyOperations();
      }
      if (*(void *)(a2 + 32) == *(void *)(a2 + 40) && *(void *)(a2 + 128) == *(void *)(a2 + 136))
      {
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        unint64_t v33 = 0;
        sub_216980EEC(&v31, *(_DWORD **)(a2 + 104), *(_DWORD **)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
        uint64_t v28 = 0;
        int64x2_t v29 = 0;
        uint64_t v30 = 0;
        sub_216980EEC(&v28, *(_DWORD **)(a2 + 56), *(_DWORD **)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        sub_216980EEC(&v25, *(_DWORD **)(a2 + 80), *(_DWORD **)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
        uint64_t v6 = v3[13];
        uint64_t v7 = v3[14];
        while (1)
        {
          if (v6 == v7)
          {
            uint64_t v13 = (char *)v3[7];
            uint64_t v14 = (char *)v3[8];
            if (v13 == v14)
            {
              uint64_t v18 = (char *)v3[7];
            }
            else
            {
              do
              {
                uint64_t v15 = sub_216AD6900(v31, v32, v13);
                sub_216AD6870((uint64_t)&v31, v15, v32);
                uint64_t v16 = sub_216AD6900(v28, v29, v13);
                sub_216AD6870((uint64_t)&v28, v16, v29);
                uint64_t v17 = sub_216AD6900(v25, v26, v13);
                sub_216AD6870((uint64_t)&v25, v17, v26);
                v13 += 8;
              }
              while (v13 != v14);
              uint64_t v18 = (char *)v3[7];
              uint64_t v13 = (char *)v3[8];
            }
            sub_2169DC954((uint64_t *)&v28, v28, v18, v13, (v13 - v18) >> 3);
            uint64_t v19 = (char *)v3[10];
            uint64_t v20 = (char *)v3[11];
            if (v19 == v20)
            {
              unsigned __int8 v24 = (char *)v3[10];
            }
            else
            {
              do
              {
                long long v21 = sub_216AD6900(v31, v32, v19);
                sub_216AD6870((uint64_t)&v31, v21, v32);
                uint64_t v22 = sub_216AD6900(v28, v29, v19);
                sub_216AD6870((uint64_t)&v28, v22, v29);
                char v23 = sub_216AD6900(v25, v26, v19);
                sub_216AD6870((uint64_t)&v25, v23, v26);
                v19 += 8;
              }
              while (v19 != v20);
              unsigned __int8 v24 = (char *)v3[10];
              uint64_t v19 = (char *)v3[11];
            }
            sub_2169DC954((uint64_t *)&v25, v26, v24, v19, (v19 - v24) >> 3);
            LOBYTE(v34) = 0;
            long long v35 = 0u;
            long long v36 = 0u;
            long long v37 = 0u;
            long long v38 = 0u;
            long long v39 = 0u;
            long long v40 = 0u;
            long long v41 = 0u;
            long long v42 = 0u;
            long long v43 = 0u;
            pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetDeletedItems();
          }
          uint64_t v8 = sub_216AD6900(v28, v29, (void *)v6);
          sub_216AD6870((uint64_t)&v28, v8, v29);
          uint64_t v9 = sub_216AD6900(v25, v26, (void *)v6);
          sub_216AD6870((uint64_t)&v25, v9, v26);
          uint64_t v10 = v31;
          uint64_t v11 = v32;
          if (v31 != v32)
          {
            do
            {
              if (*(void *)v10 == *(void *)v6) {
                goto LABEL_16;
              }
              v10 += 2;
            }
            while (v10 != v32);
            uint64_t v10 = v32;
          }
LABEL_16:
          if (v10 == v32)
          {
            if ((unint64_t)v32 >= v33)
            {
              uint64_t v12 = (int *)sub_216981B30((uint64_t *)&v31, (_DWORD *)v6);
            }
            else
            {
              sub_216981010(v32, (_DWORD *)v6);
              sub_21698105C(v11 + 1, (_DWORD *)(v6 + 4));
              uint64_t v12 = v11 + 2;
            }
            uint64_t v32 = v12;
          }
          v6 += 8;
        }
      }
    }
    *a3 = 0;
    a3[152] = 0;
  }
  return result;
}

void sub_216AD67A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a10;
  sub_216981168(&a19);
  a19 = (void **)&a13;
  sub_216981168(&a19);
  a19 = (void **)&a16;
  sub_216981168(&a19);
  _Unwind_Resume(a1);
}

int *sub_216AD6870(uint64_t a1, int *a2, int *a3)
{
  if (a2 != a3)
  {
    sub_216A8E5E4((uint64_t)&v9, a3, *(int **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(_DWORD **)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 2;
        sub_216981128(a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

int *sub_216AD6900(int *a1, int *a2, void *a3)
{
  if (a1 == a2)
  {
LABEL_5:
    uint64_t v5 = a2;
  }
  else
  {
    uint64_t v5 = a1;
    while (*(void *)v5 != *a3)
    {
      v5 += 2;
      if (v5 == a2) {
        goto LABEL_5;
      }
    }
  }
  if (v5 != a2)
  {
    for (uint64_t i = v5 + 2; i != a2; i += 2)
    {
      if (*(void *)i != *a3)
      {
        sub_21697DE94(v5, i);
        sub_21697DEEC(v5 + 1, i + 1);
        v5 += 2;
      }
    }
  }
  return v5;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ModifyOperations(long long *a1, uint64_t a2, int a3)
{
  if (!*(void *)(a2 + 24)) {
    return 0;
  }
  int v6 = sub_216AD6A68(a2, (long long *)((char *)a1 + 8), a3);
  int v7 = v6 | sub_216AD6A68(a2, a1 + 2, a3);
  int v8 = sub_216AD6A68(a2, (long long *)((char *)a1 + 56), a3);
  int v9 = v7 | v8 | sub_216AD6A68(a2, a1 + 5, a3);
  int v10 = sub_216AD6A68(a2, (long long *)((char *)a1 + 104), a3);
  return v9 | v10 | sub_216AD6A68(a2, a1 + 8, a3);
}

uint64_t sub_216AD6A68(uint64_t a1, long long *a2, int a3)
{
  long long v24 = 0uLL;
  unint64_t v25 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v3 = *(void ****)a2;
  uint64_t v4 = (void ***)*((void *)a2 + 1);
  if (*(void ****)a2 == v4) {
    goto LABEL_23;
  }
  char v8 = 0;
  do
  {
    uint64_t v9 = *(void *)(a1 + 24);
    if (!v9) {
      sub_21683A7CC();
    }
    (*(void (**)(void ***__return_ptr))(*(void *)v9 + 48))(&v20);
    int v10 = v21;
    if (a3 && v21)
    {
      sub_216AE55F4((uint64_t *)&v22, (unsigned int *)&v20);
      if ((v11 & 1) == 0) {
        sub_216AE5CA4(&v20);
      }
      int v10 = v21;
    }
    if (v10)
    {
      uint64_t v12 = *((void *)&v24 + 1);
      if (v20 == *v3)
      {
        if (*((void *)&v24 + 1) >= v25)
        {
          uint64_t v13 = sub_216981B30((uint64_t *)&v24, v3);
        }
        else
        {
          sub_216981010(*((_DWORD **)&v24 + 1), v3);
          sub_21698105C((_DWORD *)(v12 + 4), (_DWORD *)v3 + 1);
          uint64_t v13 = v12 + 8;
        }
      }
      else
      {
        if (*((void *)&v24 + 1) >= v25)
        {
          uint64_t v13 = sub_216AE5CE4((uint64_t *)&v24, &v20);
        }
        else
        {
          sub_21697D878(*((_DWORD **)&v24 + 1), &v20);
          sub_21697D8B4((_DWORD *)(v12 + 4), (_DWORD *)&v20 + 1);
          uint64_t v13 = v12 + 8;
        }
        char v8 = 1;
      }
      *((void *)&v24 + 1) = v13;
    }
    else
    {
      char v8 = 1;
    }
    sub_216982EE4((uint64_t)&v20);
    ++v3;
  }
  while (v3 != v4);
  if ((v8 & 1) == 0)
  {
LABEL_23:
    uint64_t v16 = 0;
  }
  else
  {
    long long v14 = *a2;
    *a2 = v24;
    long long v24 = v14;
    unint64_t v15 = *((void *)a2 + 2);
    *((void *)a2 + 2) = v25;
    unint64_t v25 = v15;
    uint64_t v16 = 1;
  }
  uint64_t v17 = *((void *)&v23 + 1);
  *((void *)&v23 + 1) = 0;
  if (v17)
  {
    uint64_t v18 = (void *)sub_21697C738(v17);
    operator delete(v18);
  }
  uint64_t v20 = (void **)&v22;
  sub_216981168(&v20);
  *(void *)&long long v22 = &v24;
  sub_216981168((void ***)&v22);
  return v16;
}

void sub_216AD6C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a11 = (void **)&a15;
  sub_216981168(&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ReplaceOperations(unsigned char *a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (*a1) {
    BOOL v5 = a2 == 0;
  }
  else {
    BOOL v5 = a2 != 0;
  }
  if (v5 || !a4 && *a5 != a5[1]) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetItems();
  }
  return 0;
}

void sub_216AD6E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a12 = (void **)&a17;
  sub_216981168(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ComposeOperations(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (a3) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::GetItems();
  }

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetExplicitItems();
}

void sub_216AD711C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::operator==(void *a1, void *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  uint64_t v3 = (char *)a1[1];
  long long v2 = (char *)a1[2];
  uint64_t v4 = (void *)a2[1];
  if (v2 - v3 != a2[2] - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*(void *)v3 != *v4) {
      return 0;
    }
    v3 += 8;
    ++v4;
  }
  int v6 = (char *)a1[4];
  BOOL v5 = (char *)a1[5];
  int v7 = (void *)a2[4];
  if (v5 - v6 != a2[5] - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*(void *)v6 != *v7) {
      return 0;
    }
    v6 += 8;
    ++v7;
  }
  uint64_t v9 = (char *)a1[7];
  char v8 = (char *)a1[8];
  int v10 = (void *)a2[7];
  if (v8 - v9 != a2[8] - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if (*(void *)v9 != *v10) {
      return 0;
    }
    v9 += 8;
    ++v10;
  }
  uint64_t v12 = (char *)a1[10];
  char v11 = (char *)a1[11];
  uint64_t v13 = (void *)a2[10];
  if (v11 - v12 != a2[11] - (void)v13) {
    return 0;
  }
  while (v12 != v11)
  {
    if (*(void *)v12 != *v13) {
      return 0;
    }
    v12 += 8;
    ++v13;
  }
  unint64_t v15 = (char *)a1[13];
  long long v14 = (char *)a1[14];
  uint64_t v16 = (void *)a2[13];
  if (v14 - v15 != a2[14] - (void)v16) {
    return 0;
  }
  while (v15 != v14)
  {
    if (*(void *)v15 != *v16) {
      return 0;
    }
    v15 += 8;
    ++v16;
  }
  uint64_t v18 = a1[16];
  uint64_t v17 = a1[17];
  uint64_t v19 = (uint64_t *)a2[16];
  if (v17 - v18 != a2[17] - (void)v19) {
    return 0;
  }
  if (v18 == v17) {
    return 1;
  }
  uint64_t v20 = v18 + 8;
  do
  {
    uint64_t v21 = *v19++;
    BOOL result = *(void *)(v20 - 8) == v21;
    BOOL v23 = *(void *)(v20 - 8) != v21 || v20 == v17;
    v20 += 8;
  }
  while (!v23);
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::operator!=()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::operator==();
}

uint64_t sub_216AD7340(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

pxrInternal__aapl__pxrReserved__::TfType *pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfPath>(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2)
{
  uint64_t Root = pxrInternal__aapl__pxrReserved__::TfType::GetRoot(a1);
  int v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C754E48, v5, v6);
  pxrInternal__aapl__pxrReserved__::TfType::GetAliases(Root, *v7, v8, (uint64_t)v20);
  uint64_t v9 = v20[0];
  if (v20[0] == v20[1])
  {
    __p[0] = "sdf/listOp.cpp";
    __p[1] = "_StreamOut";
    uint64_t v17 = 809;
    uint64_t v18 = "std::ostream &pxrInternal__aapl__pxrReserved__::_StreamOut(std::ostream &, const SdfListOp<T> &) [T = pxrInter"
          "nal__aapl__pxrReserved__::SdfPath]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!listOpAliases.empty()", 0);
    uint64_t v9 = v20[0];
  }
  int v10 = *(char *)(v9 + 23);
  if (v10 >= 0) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = *(void *)v9;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(v9 + 23);
  }
  else {
    uint64_t v12 = *(void *)(v9 + 8);
  }
  uint64_t v13 = sub_216779180(a1, v11, v12);
  sub_216779180(v13, (uint64_t)"(", 1);
  char v15 = 1;
  if (*(unsigned char *)a2)
  {
    sub_216779094(__p, "Explicit");
    sub_216AE5FE0(a1, (uint64_t)__p, (uint64_t *)(a2 + 8), &v15, 1);
  }
  else
  {
    sub_216779094(__p, "Deleted");
    sub_216AE5FE0(a1, (uint64_t)__p, (uint64_t *)(a2 + 104), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Added");
    sub_216AE5FE0(a1, (uint64_t)__p, (uint64_t *)(a2 + 32), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Prepended");
    sub_216AE5FE0(a1, (uint64_t)__p, (uint64_t *)(a2 + 56), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Appended");
    sub_216AE5FE0(a1, (uint64_t)__p, (uint64_t *)(a2 + 80), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Ordered");
    sub_216AE5FE0(a1, (uint64_t)__p, (uint64_t *)(a2 + 128), &v15, 0);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  sub_216779180(a1, (uint64_t)")", 1);
  __p[0] = v20;
  sub_216782F20((void ***)__p);
  return a1;
}

void sub_216AD75E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  std::string __p = &a19;
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::CreateExplicit(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetExplicitItems();
}

void sub_216AD76A8(_Unwind_Exception *a1)
{
  sub_2169D5040(v1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  double result;

  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetExplicitItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::Create(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetPrependedItems();
}

void sub_216AD77E0(_Unwind_Exception *a1)
{
  sub_2169D5040(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetPrependedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAppendedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetDeletedItems()
{
}

{
  while (1)
    ;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::Swap(char *result, char *a2)
{
  char v2 = *result;
  char *result = *a2;
  *a2 = v2;
  uint64_t v3 = *((void *)result + 1);
  *((void *)result + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = *((void *)result + 2);
  *((void *)result + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)result + 3);
  *((void *)result + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)result + 4);
  *((void *)result + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)result + 5);
  *((void *)result + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = *((void *)result + 6);
  *((void *)result + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  uint64_t v9 = *((void *)result + 7);
  *((void *)result + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  uint64_t v10 = *((void *)result + 8);
  *((void *)result + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = *((void *)result + 9);
  *((void *)result + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v11;
  uint64_t v12 = *((void *)result + 10);
  *((void *)result + 1sub_2168EBBB8(&a9, 0) = *((void *)a2 + 10);
  *((void *)a2 + 1sub_2168EBBB8(&a9, 0) = v12;
  uint64_t v13 = *((void *)result + 11);
  *((void *)result + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v13;
  uint64_t v14 = *((void *)result + 12);
  *((void *)result + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v14;
  uint64_t v15 = *((void *)result + 13);
  *((void *)result + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v15;
  uint64_t v16 = *((void *)result + 14);
  *((void *)result + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v16;
  uint64_t v17 = *((void *)result + 15);
  *((void *)result + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v17;
  uint64_t v18 = *((void *)result + 16);
  *((void *)result + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v18;
  uint64_t v19 = *((void *)result + 17);
  *((void *)result + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v19;
  uint64_t v20 = *((void *)result + 18);
  *((void *)result + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v20;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::HasKeys(uint64_t a1)
{
  return *(unsigned char *)a1
      || *(void *)(a1 + 40) != *(void *)(a1 + 32)
      || *(void *)(a1 + 64) != *(void *)(a1 + 56)
      || *(void *)(a1 + 88) != *(void *)(a1 + 80)
      || *(void *)(a1 + 112) != *(void *)(a1 + 104)
      || *(void *)(a1 + 136) != *(void *)(a1 + 128);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::IsExplicit(unsigned __int8 *a1)
{
  return *a1;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::HasItem(uint64_t a1, unsigned __int8 *a2)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v4 = *(unsigned __int8 **)(a1 + 8);
    uint64_t v5 = *(unsigned __int8 **)(a1 + 16);
    if (v4 != v5)
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v4, a2) & 1) == 0)
      {
        v4 += 56;
        if (v4 == v5)
        {
          uint64_t v4 = v5;
          break;
        }
      }
      uint64_t v6 = v4;
      uint64_t v4 = *(unsigned __int8 **)(a1 + 16);
      return v6 != v4;
    }
  }
  else
  {
    uint64_t v7 = *(unsigned __int8 **)(a1 + 32);
    uint64_t v8 = *(unsigned __int8 **)(a1 + 40);
    if (v7 == v8)
    {
      uint64_t v9 = *(unsigned __int8 **)(a1 + 32);
    }
    else
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v7, a2) & 1) == 0)
      {
        v7 += 56;
        if (v7 == v8)
        {
          uint64_t v7 = v8;
          break;
        }
      }
      uint64_t v9 = v7;
      uint64_t v7 = *(unsigned __int8 **)(a1 + 40);
    }
    if (v9 != v7) {
      return 1;
    }
    uint64_t v10 = *(unsigned __int8 **)(a1 + 56);
    uint64_t v11 = *(unsigned __int8 **)(a1 + 64);
    if (v10 == v11)
    {
      uint64_t v12 = *(unsigned __int8 **)(a1 + 56);
    }
    else
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v10, a2) & 1) == 0)
      {
        v10 += 56;
        if (v10 == v11)
        {
          uint64_t v10 = v11;
          break;
        }
      }
      uint64_t v12 = v10;
      uint64_t v10 = *(unsigned __int8 **)(a1 + 64);
    }
    if (v12 != v10) {
      return 1;
    }
    uint64_t v13 = *(unsigned __int8 **)(a1 + 80);
    uint64_t v14 = *(unsigned __int8 **)(a1 + 88);
    if (v13 == v14)
    {
      uint64_t v15 = *(unsigned __int8 **)(a1 + 80);
    }
    else
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v13, a2) & 1) == 0)
      {
        v13 += 56;
        if (v13 == v14)
        {
          uint64_t v13 = v14;
          break;
        }
      }
      uint64_t v15 = v13;
      uint64_t v13 = *(unsigned __int8 **)(a1 + 88);
    }
    if (v15 != v13) {
      return 1;
    }
    uint64_t v16 = *(unsigned __int8 **)(a1 + 104);
    uint64_t v17 = *(unsigned __int8 **)(a1 + 112);
    if (v16 == v17)
    {
      uint64_t v18 = *(unsigned __int8 **)(a1 + 104);
    }
    else
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v16, a2) & 1) == 0)
      {
        v16 += 56;
        if (v16 == v17)
        {
          uint64_t v16 = v17;
          break;
        }
      }
      uint64_t v18 = v16;
      uint64_t v16 = *(unsigned __int8 **)(a1 + 112);
    }
    if (v18 != v16) {
      return 1;
    }
    uint64_t v4 = *(unsigned __int8 **)(a1 + 128);
    uint64_t v20 = *(unsigned __int8 **)(a1 + 136);
    if (v4 != v20)
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v4, a2) & 1) == 0)
      {
        v4 += 56;
        if (v4 == v20)
        {
          uint64_t v4 = v20;
          break;
        }
      }
      uint64_t v6 = v4;
      uint64_t v4 = *(unsigned __int8 **)(a1 + 136);
      return v6 != v4;
    }
  }
  uint64_t v6 = v4;
  return v6 != v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetExplicitItems(uint64_t a1)
{
  return a1 + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetAddedItems(uint64_t a1)
{
  return a1 + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetPrependedItems(uint64_t a1)
{
  return a1 + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetAppendedItems(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetDeletedItems(uint64_t a1)
{
  return a1 + 104;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetOrderedItems(uint64_t a1)
{
  return a1 + 128;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetItems(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      uint64_t result = a1 + 32;
      break;
    case 2:
      uint64_t result = a1 + 104;
      break;
    case 3:
      uint64_t result = a1 + 128;
      break;
    case 4:
      uint64_t result = a1 + 56;
      break;
    case 5:
      uint64_t result = a1 + 80;
      break;
    default:
      v4[0] = "sdf/listOp.cpp";
      v4[1] = "GetItems";
      v4[2] = 167;
      void v4[3] = "const typename SdfListOp<T>::ItemVector &pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__px"
              "rReserved__::SdfReference>::GetItems(SdfListOpType) const [T = pxrInternal__aapl__pxrReserved__::SdfReference]";
      char v5 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Got out-of-range type value: %d", a2);
LABEL_4:
      uint64_t result = a1 + 8;
      break;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetAppliedItems(void *a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ApplyOperations();
}

void sub_216AD7E50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216ABA994((void ***)va);
  sub_2169CC68C((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ApplyOperations(uint64_t a1, long long **a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v7 = (uint64_t)&v7;
    uint64_t v8 = &v7;
    uint64_t v9 = 0;
    if (*(unsigned char *)a1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v4 = &v5;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_AddKeys();
    }
    if (*(void *)(a3 + 24)
      || 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3)
       + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 3)
       + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3)
       + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 3) != 0x9249249249249249
                                                                                                 * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 3))
    {
      sub_216AE61CC((uint64_t)&v7, &v7, *a2, a2[1]);
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v4 = &v5;
      for (uint64_t i = (uint64_t)v8; (uint64_t *)i != &v7; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v10 = (long long *)(i + 16);
        sub_216AE6324(&v4, (unsigned __int8 *)(i + 16), (uint64_t)&unk_2174BFD90, &v10)[11] = i;
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_DeleteKeys();
    }
    sub_216ADDACC(&v7);
  }
}

void sub_216AD80D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216ADDACC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_SetExplicit(unsigned __int8 *a1, int a2)
{
  if (*a1 != a2)
  {
    *a1 = a2;
    uint64_t v4 = *((void *)a1 + 1);
    for (uint64_t i = *((void *)a1 + 2); i != v4; sub_2169CC724((uint64_t)(a1 + 24), i))
      i -= 56;
    *((void *)a1 + 2) = v4;
    uint64_t v6 = *((void *)a1 + 4);
    for (uint64_t j = *((void *)a1 + 5); j != v6; sub_2169CC724((uint64_t)(a1 + 48), j))
      j -= 56;
    *((void *)a1 + 5) = v6;
    uint64_t v8 = *((void *)a1 + 7);
    for (uint64_t k = *((void *)a1 + 8); k != v8; sub_2169CC724((uint64_t)(a1 + 72), k))
      k -= 56;
    *((void *)a1 + 8) = v8;
    uint64_t v10 = *((void *)a1 + 10);
    for (uint64_t m = *((void *)a1 + 11); m != v10; sub_2169CC724((uint64_t)(a1 + 96), m))
      m -= 56;
    *((void *)a1 + 11) = v10;
    uint64_t v12 = *((void *)a1 + 13);
    for (uint64_t n = *((void *)a1 + 14); n != v12; sub_2169CC724((uint64_t)(a1 + 120), n))
      n -= 56;
    *((void *)a1 + 14) = v12;
    uint64_t v14 = *((void *)a1 + 16);
    for (iuint64_t i = *((void *)a1 + 17); ii != v14; sub_2169CC724((uint64_t)(a1 + 144), ii))
      ii -= 56;
    *((void *)a1 + 17) = v14;
  }
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAddedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetOrderedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetItems(uint64_t a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetExplicitItems();
    case 1:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAddedItems();
    case 2:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetDeletedItems();
    case 3:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetOrderedItems();
    case 4:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetPrependedItems();
    case 5:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAppendedItems();
    default:
      return;
  }
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::Clear(unsigned char *a1)
{
  *a1 = 1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_SetExplicit();
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ClearAndMakeExplicit(unsigned char *a1)
{
  *a1 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_SetExplicit();
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_AddKeys()
{
}

{
  while (1)
    ;
}

void sub_216AD8554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_DeleteKeys()
{
}

{
  while (1)
    ;
}

void sub_216AD86F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_PrependKeys()
{
}

{
  while (1)
    ;
}

void sub_216AD8940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_AppendKeys()
{
}

{
  while (1)
    ;
}

void sub_216AD8B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::_ReorderKeys()
{
  long long v2 = 0uLL;
  uint64_t v3 = 0;
  v1[0] = 0;
  v1[1] = 0;
  uint64_t v0 = v1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetItems();
}

{
  while (1)
    ;
}

void sub_216AD8E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21)
{
  sub_216AE83F4((uint64_t)&a20, a21);
  a9 = (void **)(v21 - 80);
  sub_2169CC68C(&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ApplyOperations@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = (void *)result;
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)result)
  {
    uint64_t result = sub_2169D73B4((uint64_t)a3, result);
    a3[152] = 1;
  }
  else
  {
    if (*(void *)(result + 32) == *(void *)(result + 40) && *(void *)(result + 128) == *(void *)(result + 136))
    {
      if (*(unsigned char *)a2)
      {
        uint64_t v32 = 0;
        long long __dst = 0;
        unint64_t v34 = 0;
        sub_2169D520C((char *)&v32, *(long long **)(a2 + 8), *(long long **)(a2 + 16), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
        *(void *)&long long v37 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ApplyOperations();
      }
      if (*(void *)(a2 + 32) == *(void *)(a2 + 40) && *(void *)(a2 + 128) == *(void *)(a2 + 136))
      {
        uint64_t v32 = 0;
        long long __dst = 0;
        unint64_t v34 = 0;
        sub_2169D520C((char *)&v32, *(long long **)(a2 + 104), *(long long **)(a2 + 112), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3));
        int64x2_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        sub_2169D520C((char *)&v29, *(long long **)(a2 + 56), *(long long **)(a2 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        sub_2169D520C((char *)&v26, *(long long **)(a2 + 80), *(long long **)(a2 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3));
        uint64_t v6 = (unsigned __int8 *)v3[13];
        uint64_t v7 = (unsigned __int8 *)v3[14];
        while (1)
        {
          if (v6 == v7)
          {
            uint64_t v14 = (unsigned __int8 *)v3[7];
            uint64_t v15 = (unsigned __int8 *)v3[8];
            if (v14 == v15)
            {
              uint64_t v19 = (std::string *)v3[7];
            }
            else
            {
              do
              {
                uint64_t v16 = sub_216AD94E8((void ***)v32, (void ***)__dst, v14);
                sub_216AD9458((uint64_t)&v32, (uint64_t)v16, (long long *)__dst);
                uint64_t v17 = sub_216AD94E8(v29, (void ***)v30, v14);
                sub_216AD9458((uint64_t)&v29, (uint64_t)v17, v30);
                uint64_t v18 = sub_216AD94E8(v26, (void ***)v27, v14);
                sub_216AD9458((uint64_t)&v26, (uint64_t)v18, v27);
                v14 += 56;
              }
              while (v14 != v15);
              uint64_t v19 = (std::string *)v3[7];
              uint64_t v14 = (unsigned __int8 *)v3[8];
            }
            sub_216AE7038((uint64_t *)&v29, v29, v19, (long long *)v14, 0x6DB6DB6DB6DB6DB7 * ((v14 - (unsigned __int8 *)v19) >> 3));
            uint64_t v20 = (unsigned __int8 *)v3[10];
            uint64_t v21 = (unsigned __int8 *)v3[11];
            if (v20 == v21)
            {
              unint64_t v25 = (std::string *)v3[10];
            }
            else
            {
              do
              {
                long long v22 = sub_216AD94E8((void ***)v32, (void ***)__dst, v20);
                sub_216AD9458((uint64_t)&v32, (uint64_t)v22, (long long *)__dst);
                BOOL v23 = sub_216AD94E8(v29, (void ***)v30, v20);
                sub_216AD9458((uint64_t)&v29, (uint64_t)v23, v30);
                long long v24 = sub_216AD94E8(v26, (void ***)v27, v20);
                sub_216AD9458((uint64_t)&v26, (uint64_t)v24, v27);
                v20 += 56;
              }
              while (v20 != v21);
              unint64_t v25 = (std::string *)v3[10];
              uint64_t v20 = (unsigned __int8 *)v3[11];
            }
            sub_216AE7038((uint64_t *)&v26, (std::string *)v27, v25, (long long *)v20, 0x6DB6DB6DB6DB6DB7 * ((v20 - (unsigned __int8 *)v25) >> 3));
            LOBYTE(v35) = 0;
            long long v36 = 0u;
            long long v37 = 0u;
            long long v38 = 0u;
            long long v39 = 0u;
            long long v40 = 0u;
            long long v41 = 0u;
            long long v42 = 0u;
            long long v43 = 0u;
            long long v44 = 0u;
            pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetDeletedItems();
          }
          uint64_t v8 = sub_216AD94E8(v29, (void ***)v30, v6);
          sub_216AD9458((uint64_t)&v29, (uint64_t)v8, v30);
          uint64_t v9 = sub_216AD94E8(v26, (void ***)v27, v6);
          sub_216AD9458((uint64_t)&v26, (uint64_t)v9, v27);
          uint64_t v10 = v32;
          uint64_t v11 = (unsigned __int8 *)__dst;
          if (v32 == __dst)
          {
            uint64_t v12 = v32;
          }
          else
          {
            do
            {
              if (pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v10, v6)) {
                goto LABEL_17;
              }
              v10 += 56;
            }
            while (v10 != v11);
            uint64_t v10 = v11;
LABEL_17:
            uint64_t v12 = v10;
            uint64_t v10 = (unsigned __int8 *)__dst;
          }
          if (v12 == v10)
          {
            if ((unint64_t)v10 >= v34)
            {
              uint64_t v13 = (void *)sub_216AE6EA0((uint64_t *)&v32, (long long *)v6);
            }
            else
            {
              sub_2169D5338((char *)v10, (long long *)v6);
              uint64_t v13 = v10 + 56;
            }
            long long __dst = v13;
          }
          v6 += 56;
        }
      }
    }
    *a3 = 0;
    a3[152] = 0;
  }
  return result;
}

void sub_216AD937C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a10;
  sub_2169CC68C(&a19);
  a19 = (void **)&a13;
  sub_2169CC68C(&a19);
  a19 = (void **)&a16;
  sub_2169CC68C(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_216AD9458(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    sub_216AE6DF4((uint64_t)&v9, a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 56;
        sub_2169CC724(a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

void ***sub_216AD94E8(void ***a1, void ***a2, unsigned __int8 *a3)
{
  if (a1 == a2)
  {
LABEL_5:
    uint64_t v6 = a2;
  }
  else
  {
    uint64_t v6 = a1;
    while ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==((unsigned __int8 *)v6, a3) & 1) == 0)
    {
      v6 += 7;
      if (v6 == a2) {
        goto LABEL_5;
      }
    }
  }
  if (v6 != a2 && v6 + 7 != a2)
  {
    uint64_t v7 = &a1[v6 - a1 + 13];
    do
    {
      if ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==((unsigned __int8 *)v7 - 48, a3) & 1) == 0)
      {
        if (*((char *)v6 + 23) < 0) {
          operator delete(*v6);
        }
        long long v8 = *((_OWORD *)v7 - 3);
        v6[2] = *(v7 - 4);
        *(_OWORD *)uint64_t v6 = v8;
        *((unsigned char *)v7 - 25) = 0;
        *((unsigned char *)v7 - 48) = 0;
        sub_21697DE94((int *)v6 + 6, (int *)v7 - 6);
        sub_21697DEEC((int *)v6 + 7, (int *)v7 - 5);
        *((_OWORD *)v6 + 2) = *((_OWORD *)v7 - 1);
        char v9 = *v7;
        unsigned __int8 *v7 = 0;
        sub_2168EBBB8(v6 + 6, v9);
        v6 += 7;
      }
      uint64_t v10 = v7 + 1;
      v7 += 7;
    }
    while (v10 != a2);
  }
  return v6;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ModifyOperations(long long *a1, uint64_t a2, int a3)
{
  if (!*(void *)(a2 + 24)) {
    return 0;
  }
  int v6 = sub_216AD96D0(a2, (long long *)((char *)a1 + 8), a3);
  int v7 = v6 | sub_216AD96D0(a2, a1 + 2, a3);
  int v8 = sub_216AD96D0(a2, (long long *)((char *)a1 + 56), a3);
  int v9 = v7 | v8 | sub_216AD96D0(a2, a1 + 5, a3);
  int v10 = sub_216AD96D0(a2, (long long *)((char *)a1 + 104), a3);
  return v9 | v10 | sub_216AD96D0(a2, a1 + 8, a3);
}

uint64_t sub_216AD96D0(uint64_t a1, long long *a2, int a3)
{
  long long v32 = 0uLL;
  unint64_t v33 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v3 = *(unsigned __int8 **)a2;
  uint64_t v4 = (unsigned __int8 *)*((void *)a2 + 1);
  if (*(unsigned __int8 **)a2 == v4) {
    goto LABEL_23;
  }
  char v8 = 0;
  do
  {
    uint64_t v9 = *(void *)(a1 + 24);
    if (!v9) {
      sub_21683A7CC();
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v9 + 48))(&v23);
    int v10 = v29;
    if (a3 && v29)
    {
      sub_216AE72EC((uint64_t)&v30, &v23);
      if ((v11 & 1) == 0) {
        sub_216AE80C8((uint64_t)&v23);
      }
      int v10 = v29;
    }
    if (v10)
    {
      char v12 = pxrInternal__aapl__pxrReserved__::SdfReference::operator==((unsigned __int8 *)&v23, v3);
      uint64_t v13 = *((void *)&v32 + 1);
      if (v12)
      {
        if (*((void *)&v32 + 1) >= v33)
        {
          uint64_t v14 = sub_216AE6EA0((uint64_t *)&v32, (long long *)v3);
        }
        else
        {
          sub_2169D5338(*((char **)&v32 + 1), (long long *)v3);
          uint64_t v14 = v13 + 56;
        }
      }
      else
      {
        if (*((void *)&v32 + 1) >= v33)
        {
          uint64_t v14 = sub_216AE8124((uint64_t *)&v32, &v23);
        }
        else
        {
          long long v15 = v23;
          *(void *)(*((void *)&v32 + 1) + 16) = v24;
          *(_OWORD *)uint64_t v13 = v15;
          uint64_t v24 = 0;
          long long v23 = 0uLL;
          sub_21697D878((_DWORD *)(v13 + 24), &v25);
          sub_21697D8B4((_DWORD *)(v13 + 28), &v26);
          *(_OWORD *)(v13 + 32) = v27;
          uint64_t v16 = v28;
          uint64_t v28 = 0;
          *(void *)(v13 + 48) = v16;
          uint64_t v14 = v13 + 56;
        }
        char v8 = 1;
      }
      *((void *)&v32 + 1) = v14;
    }
    else
    {
      char v8 = 1;
    }
    sub_216ADDBA8((uint64_t)&v23);
    v3 += 56;
  }
  while (v3 != v4);
  if ((v8 & 1) == 0)
  {
LABEL_23:
    uint64_t v19 = 0;
  }
  else
  {
    long long v17 = *a2;
    *a2 = v32;
    long long v32 = v17;
    unint64_t v18 = *((void *)a2 + 2);
    *((void *)a2 + 2) = v33;
    unint64_t v33 = v18;
    uint64_t v19 = 1;
  }
  uint64_t v20 = *((void *)&v31 + 1);
  *((void *)&v31 + 1) = 0;
  if (v20)
  {
    uint64_t v21 = (void *)sub_216AE755C(v20);
    operator delete(v21);
  }
  *(void *)&long long v23 = &v30;
  sub_2169CC68C((void ***)&v23);
  *(void *)&long long v23 = &v32;
  sub_2169CC68C((void ***)&v23);
  return v19;
}

void sub_216AD98E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  a9 = (void **)&a21;
  sub_2169CC68C(&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ReplaceOperations(unsigned char *a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (*a1) {
    BOOL v5 = a2 == 0;
  }
  else {
    BOOL v5 = a2 != 0;
  }
  if (v5 || !a4 && *a5 != a5[1]) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetItems();
  }
  return 0;
}

void sub_216AD9B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a12 = (void **)&a17;
  sub_2169CC68C(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ComposeOperations(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (a3) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::GetItems();
  }

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetExplicitItems();
}

void sub_216AD9E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::operator==(unsigned __int8 *a1, void *a2)
{
  if (*a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  uint64_t v4 = (unsigned __int8 *)*((void *)a1 + 1);
  BOOL v5 = (unsigned __int8 *)*((void *)a1 + 2);
  int v6 = (unsigned __int8 *)a2[1];
  if (v5 - v4 != a2[2] - (void)v6) {
    return 0;
  }
  while (v4 != v5)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v4, v6)) {
      return 0;
    }
    v4 += 56;
    v6 += 56;
  }
  int v7 = (unsigned __int8 *)*((void *)a1 + 4);
  char v8 = (unsigned __int8 *)*((void *)a1 + 5);
  uint64_t v9 = (unsigned __int8 *)a2[4];
  if (v8 - v7 != a2[5] - (void)v9) {
    return 0;
  }
  while (v7 != v8)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v7, v9)) {
      return 0;
    }
    v7 += 56;
    v9 += 56;
  }
  int v10 = (unsigned __int8 *)*((void *)a1 + 7);
  char v11 = (unsigned __int8 *)*((void *)a1 + 8);
  char v12 = (unsigned __int8 *)a2[7];
  if (v11 - v10 != a2[8] - (void)v12) {
    return 0;
  }
  while (v10 != v11)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v10, v12)) {
      return 0;
    }
    v10 += 56;
    v12 += 56;
  }
  uint64_t v13 = (unsigned __int8 *)*((void *)a1 + 10);
  uint64_t v14 = (unsigned __int8 *)*((void *)a1 + 11);
  long long v15 = (unsigned __int8 *)a2[10];
  if (v14 - v13 != a2[11] - (void)v15) {
    return 0;
  }
  while (v13 != v14)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v13, v15)) {
      return 0;
    }
    v13 += 56;
    v15 += 56;
  }
  uint64_t v16 = (unsigned __int8 *)*((void *)a1 + 13);
  long long v17 = (unsigned __int8 *)*((void *)a1 + 14);
  unint64_t v18 = (unsigned __int8 *)a2[13];
  if (v17 - v16 != a2[14] - (void)v18) {
    return 0;
  }
  while (v16 != v17)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v16, v18)) {
      return 0;
    }
    v16 += 56;
    v18 += 56;
  }

  return sub_216ADA024((unsigned __int8 **)a1 + 16, (uint64_t)(a2 + 16));
}

uint64_t sub_216ADA024(unsigned __int8 **a1, uint64_t a2)
{
  long long v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(unsigned __int8 **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  do
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v2, v4);
    if (!result) {
      break;
    }
    v2 += 56;
    v4 += 56;
  }
  while (v2 != v3);
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::operator!=()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::operator==();
}

uint64_t sub_216ADA0B4(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

pxrInternal__aapl__pxrReserved__::TfType *pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfReference>(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2)
{
  uint64_t Root = pxrInternal__aapl__pxrReserved__::TfType::GetRoot(a1);
  int v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755170, v5, v6);
  pxrInternal__aapl__pxrReserved__::TfType::GetAliases(Root, *v7, v8, (uint64_t)v20);
  uint64_t v9 = v20[0];
  if (v20[0] == v20[1])
  {
    __p[0] = "sdf/listOp.cpp";
    __p[1] = "_StreamOut";
    uint64_t v17 = 809;
    unint64_t v18 = "std::ostream &pxrInternal__aapl__pxrReserved__::_StreamOut(std::ostream &, const SdfListOp<T> &) [T = pxrInter"
          "nal__aapl__pxrReserved__::SdfReference]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!listOpAliases.empty()", 0);
    uint64_t v9 = v20[0];
  }
  int v10 = *(char *)(v9 + 23);
  if (v10 >= 0) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = *(void *)v9;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(v9 + 23);
  }
  else {
    uint64_t v12 = *(void *)(v9 + 8);
  }
  uint64_t v13 = sub_216779180(a1, v11, v12);
  sub_216779180(v13, (uint64_t)"(", 1);
  char v15 = 1;
  if (*(unsigned char *)a2)
  {
    sub_216779094(__p, "Explicit");
    sub_216AE8690(a1, (uint64_t)__p, (uint64_t *)(a2 + 8), &v15, 1);
  }
  else
  {
    sub_216779094(__p, "Deleted");
    sub_216AE8690(a1, (uint64_t)__p, (uint64_t *)(a2 + 104), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Added");
    sub_216AE8690(a1, (uint64_t)__p, (uint64_t *)(a2 + 32), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Prepended");
    sub_216AE8690(a1, (uint64_t)__p, (uint64_t *)(a2 + 56), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Appended");
    sub_216AE8690(a1, (uint64_t)__p, (uint64_t *)(a2 + 80), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Ordered");
    sub_216AE8690(a1, (uint64_t)__p, (uint64_t *)(a2 + 128), &v15, 0);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  sub_216779180(a1, (uint64_t)")", 1);
  __p[0] = v20;
  sub_216782F20((void ***)__p);
  return a1;
}

void sub_216ADA35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  std::string __p = &a19;
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::CreateExplicit(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetExplicitItems();
}

void sub_216ADA41C(_Unwind_Exception *a1)
{
  sub_2169D8044(v1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

{
  double result;

  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetExplicitItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::Create(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetPrependedItems();
}

void sub_216ADA54C(_Unwind_Exception *a1)
{
  sub_2169D8044(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetPrependedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAppendedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetDeletedItems()
{
}

{
  while (1)
    ;
}

char *pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::Swap(char *result, char *a2)
{
  char v2 = *result;
  char *result = *a2;
  *a2 = v2;
  uint64_t v3 = *((void *)result + 1);
  *((void *)result + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = *((void *)result + 2);
  *((void *)result + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)result + 3);
  *((void *)result + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)result + 4);
  *((void *)result + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)result + 5);
  *((void *)result + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = *((void *)result + 6);
  *((void *)result + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  uint64_t v9 = *((void *)result + 7);
  *((void *)result + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  uint64_t v10 = *((void *)result + 8);
  *((void *)result + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = *((void *)result + 9);
  *((void *)result + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v11;
  uint64_t v12 = *((void *)result + 10);
  *((void *)result + 1sub_2168EBBB8(&a9, 0) = *((void *)a2 + 10);
  *((void *)a2 + 1sub_2168EBBB8(&a9, 0) = v12;
  uint64_t v13 = *((void *)result + 11);
  *((void *)result + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v13;
  uint64_t v14 = *((void *)result + 12);
  *((void *)result + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v14;
  uint64_t v15 = *((void *)result + 13);
  *((void *)result + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v15;
  uint64_t v16 = *((void *)result + 14);
  *((void *)result + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v16;
  uint64_t v17 = *((void *)result + 15);
  *((void *)result + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v17;
  uint64_t v18 = *((void *)result + 16);
  *((void *)result + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v18;
  uint64_t v19 = *((void *)result + 17);
  *((void *)result + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v19;
  uint64_t v20 = *((void *)result + 18);
  *((void *)result + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v20;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::HasKeys(uint64_t a1)
{
  return *(unsigned char *)a1
      || *(void *)(a1 + 40) != *(void *)(a1 + 32)
      || *(void *)(a1 + 64) != *(void *)(a1 + 56)
      || *(void *)(a1 + 88) != *(void *)(a1 + 80)
      || *(void *)(a1 + 112) != *(void *)(a1 + 104)
      || *(void *)(a1 + 136) != *(void *)(a1 + 128);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::IsExplicit(unsigned __int8 *a1)
{
  return *a1;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::HasItem(uint64_t a1, unsigned __int8 *a2)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v4 = *(unsigned __int8 **)(a1 + 8);
    uint64_t v5 = *(unsigned __int8 **)(a1 + 16);
    if (v4 != v5)
    {
      while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v4, a2))
      {
        v4 += 48;
        if (v4 == v5)
        {
          uint64_t v4 = v5;
          break;
        }
      }
      uint64_t v6 = v4;
      uint64_t v4 = *(unsigned __int8 **)(a1 + 16);
      return v6 != v4;
    }
  }
  else
  {
    uint64_t v7 = *(unsigned __int8 **)(a1 + 32);
    uint64_t v8 = *(unsigned __int8 **)(a1 + 40);
    if (v7 == v8)
    {
      uint64_t v9 = *(unsigned __int8 **)(a1 + 32);
    }
    else
    {
      while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v7, a2))
      {
        v7 += 48;
        if (v7 == v8)
        {
          uint64_t v7 = v8;
          break;
        }
      }
      uint64_t v9 = v7;
      uint64_t v7 = *(unsigned __int8 **)(a1 + 40);
    }
    if (v9 != v7) {
      return 1;
    }
    uint64_t v10 = *(unsigned __int8 **)(a1 + 56);
    uint64_t v11 = *(unsigned __int8 **)(a1 + 64);
    if (v10 == v11)
    {
      uint64_t v12 = *(unsigned __int8 **)(a1 + 56);
    }
    else
    {
      while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v10, a2))
      {
        v10 += 48;
        if (v10 == v11)
        {
          uint64_t v10 = v11;
          break;
        }
      }
      uint64_t v12 = v10;
      uint64_t v10 = *(unsigned __int8 **)(a1 + 64);
    }
    if (v12 != v10) {
      return 1;
    }
    uint64_t v13 = *(unsigned __int8 **)(a1 + 80);
    uint64_t v14 = *(unsigned __int8 **)(a1 + 88);
    if (v13 == v14)
    {
      uint64_t v15 = *(unsigned __int8 **)(a1 + 80);
    }
    else
    {
      while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v13, a2))
      {
        v13 += 48;
        if (v13 == v14)
        {
          uint64_t v13 = v14;
          break;
        }
      }
      uint64_t v15 = v13;
      uint64_t v13 = *(unsigned __int8 **)(a1 + 88);
    }
    if (v15 != v13) {
      return 1;
    }
    uint64_t v16 = *(unsigned __int8 **)(a1 + 104);
    uint64_t v17 = *(unsigned __int8 **)(a1 + 112);
    if (v16 == v17)
    {
      uint64_t v18 = *(unsigned __int8 **)(a1 + 104);
    }
    else
    {
      while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v16, a2))
      {
        v16 += 48;
        if (v16 == v17)
        {
          uint64_t v16 = v17;
          break;
        }
      }
      uint64_t v18 = v16;
      uint64_t v16 = *(unsigned __int8 **)(a1 + 112);
    }
    if (v18 != v16) {
      return 1;
    }
    uint64_t v4 = *(unsigned __int8 **)(a1 + 128);
    uint64_t v20 = *(unsigned __int8 **)(a1 + 136);
    if (v4 != v20)
    {
      while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v4, a2))
      {
        v4 += 48;
        if (v4 == v20)
        {
          uint64_t v4 = v20;
          break;
        }
      }
      uint64_t v6 = v4;
      uint64_t v4 = *(unsigned __int8 **)(a1 + 136);
      return v6 != v4;
    }
  }
  uint64_t v6 = v4;
  return v6 != v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetExplicitItems(uint64_t a1)
{
  return a1 + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetAddedItems(uint64_t a1)
{
  return a1 + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetPrependedItems(uint64_t a1)
{
  return a1 + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetAppendedItems(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetDeletedItems(uint64_t a1)
{
  return a1 + 104;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetOrderedItems(uint64_t a1)
{
  return a1 + 128;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetItems(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      uint64_t result = a1 + 32;
      break;
    case 2:
      uint64_t result = a1 + 104;
      break;
    case 3:
      uint64_t result = a1 + 128;
      break;
    case 4:
      uint64_t result = a1 + 56;
      break;
    case 5:
      uint64_t result = a1 + 80;
      break;
    default:
      v4[0] = "sdf/listOp.cpp";
      v4[1] = "GetItems";
      v4[2] = 167;
      void v4[3] = "const typename SdfListOp<T>::ItemVector &pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__px"
              "rReserved__::SdfPayload>::GetItems(SdfListOpType) const [T = pxrInternal__aapl__pxrReserved__::SdfPayload]";
      char v5 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Got out-of-range type value: %d", a2);
LABEL_4:
      uint64_t result = a1 + 8;
      break;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetAppliedItems(void *a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ApplyOperations();
}

void sub_216ADABA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216ABAB5C((void ***)va);
  sub_2169CC78C((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ApplyOperations(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v7 = (__n128 *)&v7;
    uint64_t v8 = &v7;
    uint64_t v9 = 0;
    if (*(unsigned char *)a1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v4 = &v5;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_AddKeys();
    }
    if (*(void *)(a3 + 24)
      || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 4)
       - 0x5555555555555555 * ((uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 4)
       - 0x5555555555555555 * ((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 4)
       - 0x5555555555555555 * ((uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 4) != 0x5555555555555555
                                                                                                 * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 4))
    {
      sub_216AE8870((uint64_t)&v7, &v7, *a2, a2[1]);
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v4 = &v5;
      for (uint64_t i = (uint64_t)v8; (__n128 **)i != &v7; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v10 = (long long *)(i + 16);
        sub_216AE89DC(&v4, (const void **)(i + 16), (uint64_t)&unk_2174BFD90, &v10)[10] = i;
      }
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_DeleteKeys();
    }
    sub_216ADDC04((uint64_t *)&v7);
  }
}

void sub_216ADAE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216ADDC04((uint64_t *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_SetExplicit(unsigned __int8 *a1, int a2)
{
  if (*a1 != a2)
  {
    *a1 = a2;
    uint64_t v4 = *((void *)a1 + 1);
    for (uint64_t i = *((void *)a1 + 2); i != v4; sub_2169CC824((uint64_t)(a1 + 24), i))
      i -= 48;
    *((void *)a1 + 2) = v4;
    uint64_t v6 = *((void *)a1 + 4);
    for (uint64_t j = *((void *)a1 + 5); j != v6; sub_2169CC824((uint64_t)(a1 + 48), j))
      j -= 48;
    *((void *)a1 + 5) = v6;
    uint64_t v8 = *((void *)a1 + 7);
    for (uint64_t k = *((void *)a1 + 8); k != v8; sub_2169CC824((uint64_t)(a1 + 72), k))
      k -= 48;
    *((void *)a1 + 8) = v8;
    uint64_t v10 = *((void *)a1 + 10);
    for (uint64_t m = *((void *)a1 + 11); m != v10; sub_2169CC824((uint64_t)(a1 + 96), m))
      m -= 48;
    *((void *)a1 + 11) = v10;
    uint64_t v12 = *((void *)a1 + 13);
    for (uint64_t n = *((void *)a1 + 14); n != v12; sub_2169CC824((uint64_t)(a1 + 120), n))
      n -= 48;
    *((void *)a1 + 14) = v12;
    uint64_t v14 = *((void *)a1 + 16);
    for (iuint64_t i = *((void *)a1 + 17); ii != v14; sub_2169CC824((uint64_t)(a1 + 144), ii))
      ii -= 48;
    *((void *)a1 + 17) = v14;
  }
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAddedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetOrderedItems()
{
}

{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetItems(uint64_t a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetExplicitItems();
    case 1:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAddedItems();
    case 2:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetDeletedItems();
    case 3:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetOrderedItems();
    case 4:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetPrependedItems();
    case 5:
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAppendedItems();
    default:
      return;
  }
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::Clear(unsigned char *a1)
{
  *a1 = 1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_SetExplicit();
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ClearAndMakeExplicit(unsigned char *a1)
{
  *a1 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_SetExplicit();
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_AddKeys()
{
}

{
  while (1)
    ;
}

void sub_216ADB284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216ADDCD4((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_DeleteKeys()
{
}

{
  while (1)
    ;
}

void sub_216ADB420(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216ADDCD4((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_PrependKeys()
{
}

{
  while (1)
    ;
}

void sub_216ADB670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216ADDCD4((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_AppendKeys()
{
}

{
  while (1)
    ;
}

void sub_216ADB8B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216ADDCD4((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::_ReorderKeys()
{
  long long v2 = 0uLL;
  uint64_t v3 = 0;
  v1[0] = 0;
  v1[1] = 0;
  uint64_t v0 = v1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetItems();
}

{
  while (1)
    ;
}

void sub_216ADBB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21)
{
  sub_216AEAAE4((uint64_t)&a20, a21);
  a10 = (void **)(v21 - 80);
  sub_2169CC78C(&a10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ApplyOperations@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = (void *)result;
  uint64_t v42 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)result)
  {
    uint64_t result = sub_2169DA0D8((uint64_t)a3, result);
    a3[152] = 1;
  }
  else
  {
    if (*(void *)(result + 32) == *(void *)(result + 40) && *(void *)(result + 128) == *(void *)(result + 136))
    {
      if (*(unsigned char *)a2)
      {
        __n128 v30 = 0uLL;
        unint64_t v31 = 0;
        sub_2169D8208(&v30, *(void *)(a2 + 8), *(void *)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4));
        *(void *)&long long v34 = 0;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ApplyOperations();
      }
      if (*(void *)(a2 + 32) == *(void *)(a2 + 40) && *(void *)(a2 + 128) == *(void *)(a2 + 136))
      {
        __n128 v30 = 0uLL;
        unint64_t v31 = 0;
        sub_2169D8208(&v30, *(void *)(a2 + 104), *(void *)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 4));
        __n128 v28 = 0uLL;
        uint64_t v29 = 0;
        sub_2169D8208(&v28, *(void *)(a2 + 56), *(void *)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 4));
        __n128 v26 = 0uLL;
        uint64_t v27 = 0;
        sub_2169D8208(&v26, *(void *)(a2 + 80), *(void *)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 4));
        uint64_t v6 = (unsigned __int8 *)v3[13];
        for (uint64_t i = (unsigned __int8 *)v3[14]; v6 != i; v6 += 48)
        {
          uint64_t v8 = sub_216ADC21C(v28.n128_u64[0], (_OWORD *)v28.n128_u64[1], v6);
          sub_216ADC18C((uint64_t)&v28, (uint64_t)v8, (long long *)v28.n128_u64[1]);
          uint64_t v9 = sub_216ADC21C(v26.n128_u64[0], (_OWORD *)v26.n128_u64[1], v6);
          sub_216ADC18C((uint64_t)&v26, (uint64_t)v9, (long long *)v26.n128_u64[1]);
          unint64_t v11 = v30.n128_u64[1];
          uint64_t v10 = (__n128 *)v30.n128_u64[0];
          if (v30.n128_u64[0] == v30.n128_u64[1])
          {
            unint64_t v12 = v30.n128_u64[0];
          }
          else
          {
            do
            {
              if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator==((unsigned __int8 *)v10, v6)) {
                goto LABEL_16;
              }
              v10 += 3;
            }
            while (v10 != (__n128 *)v11);
            uint64_t v10 = (__n128 *)v11;
LABEL_16:
            unint64_t v12 = (unint64_t)v10;
            uint64_t v10 = (__n128 *)v30.n128_u64[1];
          }
          if ((__n128 *)v12 == v10)
          {
            if ((unint64_t)v10 >= v31)
            {
              uint64_t v13 = sub_216AE9558((uint64_t *)&v30, (uint64_t)v6);
            }
            else
            {
              sub_2169D8390((int)&v31, v10, (uint64_t)v6);
              uint64_t v13 = (uint64_t)&v10[3];
            }
            v30.n128_u64[1] = v13;
          }
        }
        uint64_t v14 = (unsigned __int8 *)v3[7];
        uint64_t v15 = (unsigned __int8 *)v3[8];
        if (v14 == v15)
        {
          uint64_t v19 = (std::string *)v3[7];
        }
        else
        {
          do
          {
            uint64_t v16 = sub_216ADC21C(v30.n128_u64[0], (_OWORD *)v30.n128_u64[1], v14);
            sub_216ADC18C((uint64_t)&v30, (uint64_t)v16, (long long *)v30.n128_u64[1]);
            uint64_t v17 = sub_216ADC21C(v28.n128_u64[0], (_OWORD *)v28.n128_u64[1], v14);
            sub_216ADC18C((uint64_t)&v28, (uint64_t)v17, (long long *)v28.n128_u64[1]);
            uint64_t v18 = sub_216ADC21C(v26.n128_u64[0], (_OWORD *)v26.n128_u64[1], v14);
            sub_216ADC18C((uint64_t)&v26, (uint64_t)v18, (long long *)v26.n128_u64[1]);
            v14 += 48;
          }
          while (v14 != v15);
          uint64_t v19 = (std::string *)v3[7];
          uint64_t v14 = (unsigned __int8 *)v3[8];
        }
        sub_216AE96E0((uint64_t *)&v28, (std::string *)v28.n128_u64[0], v19, (uint64_t)v14, 0xAAAAAAAAAAAAAAABLL * ((v14 - (unsigned __int8 *)v19) >> 4));
        uint64_t v20 = (unsigned __int8 *)v3[10];
        uint64_t v21 = (unsigned __int8 *)v3[11];
        if (v20 == v21)
        {
          int v25 = (std::string *)v3[10];
        }
        else
        {
          do
          {
            long long v22 = sub_216ADC21C(v30.n128_u64[0], (_OWORD *)v30.n128_u64[1], v20);
            sub_216ADC18C((uint64_t)&v30, (uint64_t)v22, (long long *)v30.n128_u64[1]);
            long long v23 = sub_216ADC21C(v28.n128_u64[0], (_OWORD *)v28.n128_u64[1], v20);
            sub_216ADC18C((uint64_t)&v28, (uint64_t)v23, (long long *)v28.n128_u64[1]);
            uint64_t v24 = sub_216ADC21C(v26.n128_u64[0], (_OWORD *)v26.n128_u64[1], v20);
            sub_216ADC18C((uint64_t)&v26, (uint64_t)v24, (long long *)v26.n128_u64[1]);
            v20 += 48;
          }
          while (v20 != v21);
          int v25 = (std::string *)v3[10];
          uint64_t v20 = (unsigned __int8 *)v3[11];
        }
        sub_216AE96E0((uint64_t *)&v26, (std::string *)v26.n128_u64[1], v25, (uint64_t)v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (unsigned __int8 *)v25) >> 4));
        LOBYTE(v32) = 0;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetDeletedItems();
      }
    }
    *a3 = 0;
    a3[152] = 0;
  }
  return result;
}

void sub_216ADC0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a10;
  sub_2169CC78C(&a19);
  a19 = (void **)&a13;
  sub_2169CC78C(&a19);
  a19 = (void **)&a16;
  sub_2169CC78C(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_216ADC18C(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    sub_216AE94BC((uint64_t)&v9, a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 48;
        sub_2169CC824(a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

_OWORD *sub_216ADC21C(_OWORD *a1, _OWORD *a2, unsigned __int8 *a3)
{
  if (a1 == a2)
  {
LABEL_5:
    uint64_t v6 = a2;
  }
  else
  {
    uint64_t v6 = a1;
    while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==((unsigned __int8 *)v6, a3))
    {
      v6 += 3;
      if (v6 == a2) {
        goto LABEL_5;
      }
    }
  }
  if (v6 != a2 && v6 + 3 != a2)
  {
    uint64_t v7 = &a1[v6 - a1 + 5];
    do
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==((unsigned __int8 *)v7 - 32, a3))
      {
        if (*((char *)v6 + 23) < 0) {
          operator delete(*(void **)v6);
        }
        long long v8 = *(v7 - 2);
        *((void *)v6 + 2) = *((void *)v7 - 2);
        *uint64_t v6 = v8;
        *((unsigned char *)v7 - 9) = 0;
        *((unsigned char *)v7 - 32) = 0;
        sub_21697DE94((int *)v6 + 6, (int *)v7 - 2);
        sub_21697DEEC((int *)v6 + 7, (int *)v7 - 1);
        v6[2] = *v7;
        v6 += 3;
      }
      char v9 = v7 + 1;
      v7 += 3;
    }
    while (v9 != a2);
  }
  return v6;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ModifyOperations(long long *a1, uint64_t a2, int a3)
{
  if (!*(void *)(a2 + 24)) {
    return 0;
  }
  int v6 = sub_216ADC3EC(a2, (long long *)((char *)a1 + 8), a3);
  int v7 = v6 | sub_216ADC3EC(a2, a1 + 2, a3);
  int v8 = sub_216ADC3EC(a2, (long long *)((char *)a1 + 56), a3);
  int v9 = v7 | v8 | sub_216ADC3EC(a2, a1 + 5, a3);
  int v10 = sub_216ADC3EC(a2, (long long *)((char *)a1 + 104), a3);
  return v9 | v10 | sub_216ADC3EC(a2, a1 + 8, a3);
}

uint64_t sub_216ADC3EC(uint64_t a1, long long *a2, int a3)
{
  long long v30 = 0uLL;
  unint64_t v31 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  uint64_t v3 = *(unsigned __int8 **)a2;
  uint64_t v4 = (unsigned __int8 *)*((void *)a2 + 1);
  if (*(unsigned __int8 **)a2 == v4) {
    goto LABEL_23;
  }
  char v8 = 0;
  do
  {
    uint64_t v9 = *(void *)(a1 + 24);
    if (!v9) {
      sub_21683A7CC();
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v9 + 48))(&v22);
    int v10 = v27;
    if (a3 && v27)
    {
      sub_216AE9980((uint64_t)&v28, &v22);
      if ((v11 & 1) == 0) {
        sub_216AEA7D4((uint64_t)&v22);
      }
      int v10 = v27;
    }
    if (v10)
    {
      BOOL v12 = pxrInternal__aapl__pxrReserved__::SdfPayload::operator==((unsigned __int8 *)&v22, v3);
      uint64_t v13 = *((void *)&v30 + 1);
      if (v12)
      {
        if (*((void *)&v30 + 1) >= v31)
        {
          uint64_t v14 = sub_216AE9558((uint64_t *)&v30, (uint64_t)v3);
        }
        else
        {
          sub_2169D8390((int)&v31, *((__n128 **)&v30 + 1), (uint64_t)v3);
          uint64_t v14 = v13 + 48;
        }
      }
      else
      {
        if (*((void *)&v30 + 1) >= v31)
        {
          uint64_t v14 = sub_216AEA824((uint64_t *)&v30, &v22);
        }
        else
        {
          long long v15 = v22;
          *(void *)(*((void *)&v30 + 1) + 16) = v23;
          *(_OWORD *)uint64_t v13 = v15;
          uint64_t v23 = 0;
          long long v22 = 0uLL;
          sub_21697D878((_DWORD *)(v13 + 24), &v24);
          sub_21697D8B4((_DWORD *)(v13 + 28), &v25);
          *(_OWORD *)(v13 + 32) = v26;
          uint64_t v14 = v13 + 48;
        }
        char v8 = 1;
      }
      *((void *)&v30 + 1) = v14;
    }
    else
    {
      char v8 = 1;
    }
    sub_216ADDCD4((uint64_t)&v22);
    v3 += 48;
  }
  while (v3 != v4);
  if ((v8 & 1) == 0)
  {
LABEL_23:
    uint64_t v18 = 0;
  }
  else
  {
    long long v16 = *a2;
    *a2 = v30;
    long long v30 = v16;
    unint64_t v17 = *((void *)a2 + 2);
    *((void *)a2 + 2) = v31;
    unint64_t v31 = v17;
    uint64_t v18 = 1;
  }
  uint64_t v19 = *((void *)&v29 + 1);
  *((void *)&v29 + 1) = 0;
  if (v19)
  {
    uint64_t v20 = (void *)sub_216AE9C28(v19);
    operator delete(v20);
  }
  *(void *)&long long v22 = &v28;
  sub_2169CC78C((void ***)&v22);
  *(void *)&long long v22 = &v30;
  sub_2169CC78C((void ***)&v22);
  return v18;
}

void sub_216ADC600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  a10 = (void **)&a21;
  sub_2169CC78C(&a10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ReplaceOperations(unsigned char *a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (*a1) {
    BOOL v5 = a2 == 0;
  }
  else {
    BOOL v5 = a2 != 0;
  }
  if (v5 || !a4 && *a5 != a5[1]) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetItems();
  }
  return 0;
}

void sub_216ADC84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a12 = (void **)&a17;
  sub_2169CC78C(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ComposeOperations(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (a3) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::GetItems();
  }

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetExplicitItems();
}

void sub_216ADCB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

BOOL pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::operator==(unsigned __int8 *a1, void *a2)
{
  if (*a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  uint64_t v4 = (unsigned __int8 *)*((void *)a1 + 1);
  BOOL v5 = (unsigned __int8 *)*((void *)a1 + 2);
  int v6 = (unsigned __int8 *)a2[1];
  if (v5 - v4 != a2[2] - (void)v6) {
    return 0;
  }
  while (v4 != v5)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v4, v6)) {
      return 0;
    }
    v4 += 48;
    v6 += 48;
  }
  int v7 = (unsigned __int8 *)*((void *)a1 + 4);
  char v8 = (unsigned __int8 *)*((void *)a1 + 5);
  uint64_t v9 = (unsigned __int8 *)a2[4];
  if (v8 - v7 != a2[5] - (void)v9) {
    return 0;
  }
  while (v7 != v8)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v7, v9)) {
      return 0;
    }
    v7 += 48;
    v9 += 48;
  }
  int v10 = (unsigned __int8 *)*((void *)a1 + 7);
  char v11 = (unsigned __int8 *)*((void *)a1 + 8);
  BOOL v12 = (unsigned __int8 *)a2[7];
  if (v11 - v10 != a2[8] - (void)v12) {
    return 0;
  }
  while (v10 != v11)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v10, v12)) {
      return 0;
    }
    v10 += 48;
    v12 += 48;
  }
  uint64_t v13 = (unsigned __int8 *)*((void *)a1 + 10);
  uint64_t v14 = (unsigned __int8 *)*((void *)a1 + 11);
  long long v15 = (unsigned __int8 *)a2[10];
  if (v14 - v13 != a2[11] - (void)v15) {
    return 0;
  }
  while (v13 != v14)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v13, v15)) {
      return 0;
    }
    v13 += 48;
    v15 += 48;
  }
  long long v16 = (unsigned __int8 *)*((void *)a1 + 13);
  unint64_t v17 = (unsigned __int8 *)*((void *)a1 + 14);
  uint64_t v18 = (unsigned __int8 *)a2[13];
  if (v17 - v16 != a2[14] - (void)v18) {
    return 0;
  }
  while (v16 != v17)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v16, v18)) {
      return 0;
    }
    v16 += 48;
    v18 += 48;
  }

  return sub_216ADCD2C((unsigned __int8 **)a1 + 16, (uint64_t)(a2 + 16));
}

BOOL sub_216ADCD2C(unsigned __int8 **a1, uint64_t a2)
{
  long long v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(unsigned __int8 **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  do
  {
    BOOL result = pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v2, v4);
    if (!result) {
      break;
    }
    v2 += 48;
    v4 += 48;
  }
  while (v2 != v3);
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::operator!=()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::operator==();
}

uint64_t sub_216ADCDBC(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

pxrInternal__aapl__pxrReserved__::TfType *pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfPayload>(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2)
{
  uint64_t Root = pxrInternal__aapl__pxrReserved__::TfType::GetRoot(a1);
  int v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755160, v5, v6);
  pxrInternal__aapl__pxrReserved__::TfType::GetAliases(Root, *v7, v8, (uint64_t)v20);
  uint64_t v9 = v20[0];
  if (v20[0] == v20[1])
  {
    __p[0] = "sdf/listOp.cpp";
    __p[1] = "_StreamOut";
    uint64_t v17 = 809;
    uint64_t v18 = "std::ostream &pxrInternal__aapl__pxrReserved__::_StreamOut(std::ostream &, const SdfListOp<T> &) [T = pxrInter"
          "nal__aapl__pxrReserved__::SdfPayload]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!listOpAliases.empty()", 0);
    uint64_t v9 = v20[0];
  }
  int v10 = *(char *)(v9 + 23);
  if (v10 >= 0) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = *(void *)v9;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(v9 + 23);
  }
  else {
    uint64_t v12 = *(void *)(v9 + 8);
  }
  uint64_t v13 = sub_216779180(a1, v11, v12);
  sub_216779180(v13, (uint64_t)"(", 1);
  char v15 = 1;
  if (*(unsigned char *)a2)
  {
    sub_216779094(__p, "Explicit");
    sub_216AEAD84(a1, (uint64_t)__p, (uint64_t *)(a2 + 8), &v15, 1);
  }
  else
  {
    sub_216779094(__p, "Deleted");
    sub_216AEAD84(a1, (uint64_t)__p, (uint64_t *)(a2 + 104), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Added");
    sub_216AEAD84(a1, (uint64_t)__p, (uint64_t *)(a2 + 32), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Prepended");
    sub_216AEAD84(a1, (uint64_t)__p, (uint64_t *)(a2 + 56), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Appended");
    sub_216AEAD84(a1, (uint64_t)__p, (uint64_t *)(a2 + 80), &v15, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "Ordered");
    sub_216AEAD84(a1, (uint64_t)__p, (uint64_t *)(a2 + 128), &v15, 0);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  sub_216779180(a1, (uint64_t)")", 1);
  __p[0] = v20;
  sub_216782F20((void ***)__p);
  return a1;
}

void sub_216ADD064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  std::string __p = &a19;
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::SdfApplyListOrdering<std::string>(void *result, void *a2)
{
  if (*a2 != a2[1] && *result != result[1]) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetOrderedItems();
  }
  return result;
}

void sub_216ADD1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_216AE169C((void *)(v9 - 72));
  sub_2169CBCC8(&a9);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::SdfApplyListOrdering<pxrInternal__aapl__pxrReserved__::TfToken>(void *result, void *a2)
{
  if (*a2 != a2[1] && *result != result[1]) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetOrderedItems();
  }
  return result;
}

void sub_216ADD340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_216AE2250((void *)(v9 - 72));
  sub_2169E0B70(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_216ADD364()
{
  uint64_t v0 = sub_216ADDD24();
  uint64_t v1 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v0);
  sub_216779094(__p, "SdfTokenListOp");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v0, v1, (char *)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = sub_216ADDE28();
  uint64_t v3 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v2);
  sub_216779094(__p, "SdfPathListOp");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v2, v3, (char *)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  int v4 = sub_216ADDF2C();
  uint64_t v5 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v4);
  sub_216779094(__p, "SdfStringListOp");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v4, v5, (char *)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  int v6 = sub_216ADE030();
  uint64_t v7 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v6);
  sub_216779094(__p, "SdfReferenceListOp");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v6, v7, (char *)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  char v8 = sub_216ADE134();
  uint64_t v9 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v8);
  sub_216779094(__p, "SdfPayloadListOp");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v8, v9, (char *)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  int v10 = sub_216ADE238();
  uint64_t v11 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v10);
  sub_216779094(__p, "SdfIntListOp");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v10, v11, (char *)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = sub_216ADE33C();
  uint64_t v13 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v12);
  sub_216779094(__p, "SdfUIntListOp");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v12, v13, (char *)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = sub_216ADE440();
  uint64_t v15 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v14);
  sub_216779094(__p, "SdfInt64ListOp");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v14, v15, (char *)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  long long v16 = sub_216ADE544();
  uint64_t v17 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v16);
  sub_216779094(__p, "SdfUInt64ListOp");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v16, v17, (char *)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v18 = sub_216ADE648();
  uint64_t v19 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v18);
  sub_216779094(__p, "SdfUnregisteredValueListOp");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v18, v19, (char *)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  return sub_216ADE74C();
}

void sub_216ADD60C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216ADD64C()
{
  sub_216779094(v3, "SdfListOpTypeExplicit");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C759438, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfListOpTypeAdded");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C759438, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfListOpTypePrepended");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C759438, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfListOpTypeAppended");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C759438, 5, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfListOpTypeDeleted");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C759438, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfListOpTypeOrdered");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C759438, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
}

void sub_216ADD850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216ADD890(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a1 + 8sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 8sub_2168EBBB8(&a9, 0) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 8sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 12sub_2168EBBB8(&a9, 0) = *(void *)(a2 + 120);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 12sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  __n128 result = *(__n128 *)(a2 + 128);
  *(__n128 *)(a1 + 128) = result;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(unsigned char *)(a1 + 152) = 1;
  return result;
}

void *sub_216ADD964(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    __n128 result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    void v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v5 = (void *)result[1];
        uint64_t v4 = result[2];
        if ((v4 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        operator delete(result);
        __n128 result = v5;
      }
      while (v5 != v1);
    }
  }
  return result;
}

void sub_216ADD9E4(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_2168EE084((uint64_t)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_216ADDA58(void *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (void *)v3[1];
        sub_2169818D8((_DWORD *)v3 + 4);
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_216ADDACC(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_216ADDB40((uint64_t)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_216ADDB40(uint64_t a1)
{
  sub_2168EBBB8((void ***)(a1 + 48), 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_216ADDBA8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    sub_2168EBBB8((void ***)(a1 + 48), 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
    sub_21697C414((_DWORD *)(a1 + 24));
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

void sub_216ADDC04(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_216ADDC78((uint64_t)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_216ADDC78(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_216ADDCD4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
    sub_21697C414((_DWORD *)(a1 + 24));
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

uint64_t *sub_216ADDD24()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551D0, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C7551D0, (char *)0x98, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    int v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216ADDDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216ADDE28()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C754E48, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C754E48, (char *)0x98, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    int v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216ADDEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216ADDF2C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551C0, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C7551C0, (char *)0x98, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    int v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216ADDFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216ADE030()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755170, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C755170, (char *)0x98, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    int v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216ADE0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216ADE134()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755160, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C755160, (char *)0x98, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    int v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216ADE1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216ADE238()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755180, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C755180, (char *)0x98, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    int v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216ADE2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216ADE33C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551A0, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C7551A0, (char *)0x98, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    int v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216ADE3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216ADE440()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755190, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C755190, (char *)0x98, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    int v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216ADE500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216ADE544()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551B0, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C7551B0, (char *)0x98, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    int v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216ADE604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216ADE648()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551F0, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C7551F0, (char *)0x98, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    int v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216ADE708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216ADE74C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C759438, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C759438, (char *)4, 1, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    int v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216ADE80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void *sub_216ADE850(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_216ADE8D4(uint64_t a1, uint64_t *a2, int *a3, int *a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = operator new(0x18uLL);
    int v9 = v8;
    void *v8 = 0;
    v8[1] = 0;
    int v11 = *a3;
    int v10 = a3 + 1;
    *((_DWORD *)v8 + 4) = v11;
    uint64_t v12 = 1;
    if (v10 != a4)
    {
      uint64_t v13 = v8;
      do
      {
        uint64_t v8 = operator new(0x18uLL);
        int v14 = *v10++;
        void *v8 = v13;
        v8[1] = 0;
        *((_DWORD *)v8 + 4) = v14;
        v13[1] = v8;
        ++v12;
        uint64_t v13 = v8;
      }
      while (v10 != a4);
    }
    uint64_t v15 = *a2;
    *(void *)(v15 + 8) = v9;
    *int v9 = v15;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v12;
    return v9;
  }
  return a2;
}

void sub_216ADE9A0(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_216ADE9C0(_Unwind_Exception *a1)
{
}

uint64_t **sub_216ADE9D4(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_10:
    int v11 = operator new(0x30uLL);
    unsigned char v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    sub_21677B358(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

char *sub_216ADEA98(uint64_t a1, char *__src, void *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = __src;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v9 = a1 + 16;
    uint64_t v10 = v11;
    uint64_t v12 = *(char **)(v9 - 8);
    if (a5 <= (v11 - (uint64_t)v12) >> 2)
    {
      unint64_t v19 = a5 + 1;
      uint64_t v20 = a3;
      do
      {
        uint64_t v20 = (void *)v20[1];
        --v19;
      }
      while (v19 > 1);
      uint64_t v21 = (v12 - __src) >> 2;
      if (v21 >= a5)
      {
        uint64_t v23 = *(char **)(v9 - 8);
        uint64_t v21 = a5;
      }
      else
      {
        if (v12 - __src <= -4)
        {
          uint64_t v27 = (v12 - __src) >> 2;
          uint64_t v20 = a3;
          do
            uint64_t v20 = (void *)*v20;
          while (!__CFADD__(v27++, 1));
        }
        else if (v12 == __src)
        {
          uint64_t v20 = a3;
        }
        else
        {
          unint64_t v22 = v21 + 1;
          uint64_t v20 = a3;
          do
          {
            uint64_t v20 = (void *)v20[1];
            --v22;
          }
          while (v22 > 1);
        }
        uint64_t v23 = *(char **)(v9 - 8);
        if (v20 != a4)
        {
          long long v29 = v20;
          long long v30 = *(_DWORD **)(v9 - 8);
          do
          {
            *v30++ = *((_DWORD *)v29 + 4);
            long long v29 = (void *)v29[1];
            v23 += 4;
          }
          while (v29 != a4);
        }
        *(void *)(a1 + 8) = v23;
      }
      if (v21 >= 1)
      {
        unint64_t v31 = &__src[4 * a5];
        uint64_t v32 = &v23[-4 * a5];
        long long v33 = v23;
        if (v32 < v12)
        {
          long long v33 = v23;
          do
          {
            int v34 = *(_DWORD *)v32;
            v32 += 4;
            *(_DWORD *)long long v33 = v34;
            v33 += 4;
          }
          while (v32 < v12);
        }
        *(void *)(a1 + 8) = v33;
        if (v23 != v31) {
          memmove(&v23[-4 * ((v23 - v31) >> 2)], __src, v23 - v31);
        }
        if (v20 != v7)
        {
          long long v35 = v5;
          do
          {
            *(_DWORD *)long long v35 = *((_DWORD *)v7 + 4);
            v35 += 4;
            uint64_t v7 = (void *)v7[1];
          }
          while (v7 != v20);
        }
      }
    }
    else
    {
      uint64_t v13 = *(unsigned char **)a1;
      unint64_t v14 = a5 + ((uint64_t)&v12[-*(void *)a1] >> 2);
      if (v14 >> 62) {
        sub_21677CB10();
      }
      uint64_t v15 = (__src - v13) >> 2;
      uint64_t v16 = v10 - (void)v13;
      if (v16 >> 1 > v14) {
        unint64_t v14 = v16 >> 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      uint64_t v41 = v9;
      if (v17) {
        uint64_t v18 = (char *)sub_21677EA28(v9, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      int v24 = &v18[4 * v15];
      std::string __p = v18;
      long long v38 = v24;
      long long v40 = &v18[4 * v17];
      uint64_t v25 = 4 * a5;
      long long v26 = &v24[4 * a5];
      do
      {
        *(_DWORD *)int v24 = *((_DWORD *)v7 + 4);
        v24 += 4;
        uint64_t v7 = (void *)v7[1];
        v25 -= 4;
      }
      while (v25);
      long long v39 = v26;
      uint64_t v5 = sub_2168278D4((void **)a1, (uint64_t)&__p, v5);
      if (v39 != v38) {
        v39 += (v38 - v39 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      }
      if (__p) {
        operator delete(__p);
      }
    }
  }
  return v5;
}

void sub_216ADECE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216ADED1C(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    uint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 2);
    if (v14 >> 62) {
      sub_21677CB10();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 2;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      uint64_t v18 = (char *)sub_21677EA28(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    long long v28 = &v18[4 * v15];
    std::string __p = v18;
    int v34 = v28;
    long long v36 = &v18[4 * v17];
    uint64_t v29 = 4 * a5;
    long long v30 = &v28[4 * a5];
    do
    {
      int v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)long long v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    long long v35 = v30;
    uint64_t v5 = sub_2168278D4((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[4 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    int v24 = &v5[4 * a5];
    uint64_t v25 = &v23[-4 * a5];
    long long v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      long long v26 = v23;
      do
      {
        int v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)long long v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_216ADEEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_216ADEF2C(uint64_t *a1, int *a2)
{
  uint64_t v4 = a1[3];
  if (v4)
  {
    uint64_t v5 = (a1[1] - *a1) >> 2;
    LODWORD(v2sub_2168EBBB8(&a9, 0) = *a2;
    *((void *)&v20 + 1) = v5;
    int v6 = sub_2168CDFA4(v4, (int *)&v20, &v20);
    if (!v7) {
      return (_DWORD *)(*a1 + 4 * v6[3]);
    }
    __n128 result = (_DWORD *)a1[1];
  }
  else
  {
    __n128 result = (_DWORD *)sub_216ADF0E0(a1, a2);
    if ((_DWORD *)a1[1] != result) {
      return result;
    }
  }
  unint64_t v9 = a1[2];
  if ((unint64_t)result >= v9)
  {
    uint64_t v11 = (_DWORD *)*a1;
    uint64_t v12 = ((uint64_t)result - *a1) >> 2;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62) {
      sub_21677CB10();
    }
    uint64_t v14 = v9 - (void)v11;
    if (v14 >> 1 > v13) {
      unint64_t v13 = v14 >> 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      uint64_t v16 = (char *)sub_21677EA28((uint64_t)(a1 + 2), v15);
      uint64_t v11 = (_DWORD *)*a1;
      __n128 result = (_DWORD *)a1[1];
    }
    else
    {
      uint64_t v16 = 0;
    }
    unint64_t v17 = (int *)&v16[4 * v12];
    uint64_t v18 = &v16[4 * v15];
    int *v17 = *a2;
    uint64_t v10 = v17 + 1;
    while (result != v11)
    {
      int v19 = *--result;
      *--unint64_t v17 = v19;
    }
    *a1 = (uint64_t)v17;
    a1[1] = (uint64_t)v10;
    a1[2] = (uint64_t)v18;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    _DWORD *result = *a2;
    uint64_t v10 = result + 1;
  }
  a1[1] = (uint64_t)v10;
  sub_216ADF158(a1);
  return (_DWORD *)(a1[1] - 4);
}

uint64_t sub_216ADF0A0(uint64_t a1)
{
  sub_2168CAEA8((uint64_t *)(a1 + 24), 0);
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_216ADF0E0(void *a1, int *a2)
{
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    uint64_t v4 = sub_2168CE1D8(v3, a2);
    if (v4) {
      return *a1 + 4 * v4[3];
    }
    else {
      return a1[1];
    }
  }
  else
  {
    int v6 = (_DWORD *)*a1;
    uint64_t result = a1[1];
    if (*a1 != result)
    {
      while (*v6 != *a2)
      {
        if (++v6 == (_DWORD *)result) {
          return result;
        }
      }
      return (uint64_t)v6;
    }
  }
  return result;
}

void sub_216ADF158(uint64_t *a1)
{
  if ((unint64_t)(a1[1] - *a1) >= 0x1FD)
  {
    uint64_t v2 = a1 + 3;
    if (!a1[3])
    {
      uint64_t v3 = operator new(0x28uLL);
      _OWORD *v3 = 0u;
      v3[1] = 0u;
      *((_DWORD *)v3 + 8) = 1065353216;
      sub_21678A04C((uint64_t)v3, 0x80uLL);
      sub_2168CAEA8(v2, (uint64_t)v3);
      uint64_t v4 = *a1;
      if (a1[1] != *a1)
      {
        uint64_t v5 = 0;
        unint64_t v6 = 0;
        do
        {
          uint64_t v7 = a1[3];
          int v8 = (_DWORD *)(v4 + v5);
          sub_216ADF240(v7, (int *)(v4 + v5), (uint64_t)&unk_2174BFD90, &v8)[3] = v6++;
          uint64_t v4 = *a1;
          v5 += 4;
        }
        while (v6 < (a1[1] - *a1) >> 2);
      }
    }
  }
}

void sub_216ADF228(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)sub_216850320(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void *sub_216ADF240(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * v7);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v7) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v12 = operator new(0x20uLL);
  void *v12 = 0;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = **a4;
  v12[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *v12 = *v21;
LABEL_38:
    *uint64_t v21 = v12;
    goto LABEL_39;
  }
  void *v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    unint64_t v22 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_216ADF468(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216ADF47C(void *a1, int *a2, int *a3)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    uint64_t v6 = 1;
    uint64_t v7 = a1;
    do
    {
      unint64_t v8 = operator new(0x18uLL);
      int v9 = *v5++;
      void v8[4] = v9;
      *(void *)unint64_t v8 = v7;
      *((void *)v8 + 1) = a1;
      *((void *)v7 + 1) = v8;
      *a1 = v8;
      a1[2] = v6++;
      uint64_t v7 = v8;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_216ADF500(_Unwind_Exception *a1)
{
  sub_2168505B4(v1);
  _Unwind_Resume(a1);
}

char *sub_216ADF514(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_216781458(result, a4);
    uint64_t v7 = (_DWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      *v7++ = *(_DWORD *)(a2 + 16);
      a2 = *(void *)(a2 + 8);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_216ADF570(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_216ADF58C(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    uint8x8_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    sub_21677B358(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void *sub_216ADF648(void *result, uint64_t a2, uint64_t *a3, unsigned char *a4, char a5)
{
  unint64_t v8 = result;
  if ((a5 & 1) != 0 || *a3 != a3[1])
  {
    if (*a4) {
      int v9 = "";
    }
    else {
      int v9 = ", ";
    }
    uint8x8_t v10 = sub_216779180(result, (uint64_t)v9, 2 * (*a4 == 0));
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    float v14 = sub_216779180(v10, v12, v13);
    sub_216779180(v14, (uint64_t)" Items: [", 9);
    *a4 = 0;
    uint64_t v17 = *a3;
    uint64_t v18 = a3[1];
    *(void *)&long long v21 = *a3;
    *((void *)&v21 + 1) = v18;
    while (v17 != v18)
    {
      sub_216999264((uint64_t *)&v21, v15, v16);
      size_t v19 = (void *)std::ostream::operator<<();
      long long v22 = v21;
      sub_2169992E4(&v22);
      if ((void)v22 == *((void *)&v22 + 1)) {
        uint64_t v20 = "";
      }
      else {
        uint64_t v20 = ", ";
      }
      sub_216779180(v19, (uint64_t)v20, 2 * ((void)v22 != *((void *)&v22 + 1)));
      sub_2169992E4(&v21);
      uint64_t v18 = *((void *)&v21 + 1);
      uint64_t v17 = v21;
    }
    return sub_216779180(v8, (uint64_t)"]", 1);
  }
  return result;
}

void *sub_216ADF770(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t **sub_216ADF7F4(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  int v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_10:
    int v11 = operator new(0x30uLL);
    unsigned char v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    sub_21677B358(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

_DWORD *sub_216ADF8B8(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4 = a1[3];
  if (v4)
  {
    uint64_t v5 = (a1[1] - *a1) >> 2;
    LODWORD(v2sub_2168EBBB8(&a9, 0) = *a2;
    *((void *)&v20 + 1) = v5;
    uint64_t v6 = sub_216ADFB8C(v4, (unsigned int *)&v20, &v20);
    if (!v7) {
      return (_DWORD *)(*a1 + 4 * v6[3]);
    }
    uint64_t result = (_DWORD *)a1[1];
  }
  else
  {
    uint64_t result = (_DWORD *)sub_216ADFA2C(a1, a2);
    if ((_DWORD *)a1[1] != result) {
      return result;
    }
  }
  unint64_t v9 = a1[2];
  if ((unint64_t)result >= v9)
  {
    int v11 = (_DWORD *)*a1;
    uint64_t v12 = ((uint64_t)result - *a1) >> 2;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62) {
      sub_21677CB10();
    }
    uint64_t v14 = v9 - (void)v11;
    if (v14 >> 1 > v13) {
      unint64_t v13 = v14 >> 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      BOOL v16 = (char *)sub_21677EA28((uint64_t)(a1 + 2), v15);
      int v11 = (_DWORD *)*a1;
      uint64_t result = (_DWORD *)a1[1];
    }
    else
    {
      BOOL v16 = 0;
    }
    uint64_t v17 = (unsigned int *)&v16[4 * v12];
    uint64_t v18 = &v16[4 * v15];
    unsigned int *v17 = *a2;
    unsigned int v10 = v17 + 1;
    while (result != v11)
    {
      unsigned int v19 = *--result;
      *--uint64_t v17 = v19;
    }
    *a1 = (uint64_t)v17;
    a1[1] = (uint64_t)v10;
    a1[2] = (uint64_t)v18;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    _DWORD *result = *a2;
    unsigned int v10 = result + 1;
  }
  a1[1] = (uint64_t)v10;
  sub_216ADFAA4(a1);
  return (_DWORD *)(a1[1] - 4);
}

uint64_t sub_216ADFA2C(void *a1, unsigned int *a2)
{
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    uint64_t v4 = sub_216ADFDC0(v3, a2);
    if (v4) {
      return *a1 + 4 * v4[3];
    }
    else {
      return a1[1];
    }
  }
  else
  {
    uint64_t v6 = (_DWORD *)*a1;
    uint64_t result = a1[1];
    if (*a1 != result)
    {
      while (*v6 != *a2)
      {
        if (++v6 == (_DWORD *)result) {
          return result;
        }
      }
      return (uint64_t)v6;
    }
  }
  return result;
}

void sub_216ADFAA4(uint64_t *a1)
{
  if ((unint64_t)(a1[1] - *a1) >= 0x1FD)
  {
    uint64_t v2 = a1 + 3;
    if (!a1[3])
    {
      uint64_t v3 = operator new(0x28uLL);
      _OWORD *v3 = 0u;
      v3[1] = 0u;
      *((_DWORD *)v3 + 8) = 1065353216;
      sub_21678A04C((uint64_t)v3, 0x80uLL);
      sub_2168CAEA8(v2, (uint64_t)v3);
      uint64_t v4 = *a1;
      if (a1[1] != *a1)
      {
        uint64_t v5 = 0;
        unint64_t v6 = 0;
        do
        {
          uint64_t v7 = a1[3];
          unsigned int v8 = (_DWORD *)(v4 + v5);
          sub_216ADFE8C(v7, (unsigned int *)(v4 + v5), (uint64_t)&unk_2174BFD90, &v8)[3] = v6++;
          uint64_t v4 = *a1;
          v5 += 4;
        }
        while (v6 < (a1[1] - *a1) >> 2);
      }
    }
  }
}

void sub_216ADFB74(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)sub_216850320(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void *sub_216ADFB8C(uint64_t a1, unsigned int *a2, _OWORD *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = v7 & (v8 - 1);
    }
    unsigned int v10 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      int v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v6) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3) {
              break;
            }
          }
          int v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  int v11 = operator new(0x20uLL);
  *int v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  long long v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *int v11 = *v20;
LABEL_38:
    *long long v20 = v11;
    goto LABEL_39;
  }
  *int v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    long long v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_216ADFDAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216ADFDC0(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v3);
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v4;
    if (v4 >= *(void *)&v2) {
      unint64_t v6 = v4 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v6 = v4 & (*(void *)&v2 - 1);
  }
  unint64_t v7 = *(uint64_t ***)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  for (uint64_t result = *v7; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v9 = result[1];
    if (v9 == v4)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v5.u32[0] > 1uLL)
      {
        if (v9 >= *(void *)&v2) {
          v9 %= *(void *)&v2;
        }
      }
      else
      {
        v9 &= *(void *)&v2 - 1;
      }
      if (v9 != v6) {
        return 0;
      }
    }
  }
  return result;
}

void *sub_216ADFE8C(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * v7);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    int v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      unint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v7) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  unint64_t v12 = operator new(0x20uLL);
  void *v12 = 0;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = **a4;
  v12[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *v12 = *v21;
LABEL_38:
    *unint64_t v21 = v12;
    goto LABEL_39;
  }
  void *v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    unint64_t v22 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_216AE00B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_216AE00C8(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_216781458(result, a4);
    uint64_t v7 = (_DWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      *v7++ = *(_DWORD *)(a2 + 16);
      a2 = *(void *)(a2 + 8);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_216AE0124(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216AE0140(void *result, uint64_t a2, uint64_t *a3, unsigned char *a4, char a5)
{
  unint64_t v8 = result;
  if ((a5 & 1) != 0 || *a3 != a3[1])
  {
    if (*a4) {
      unint64_t v9 = "";
    }
    else {
      unint64_t v9 = ", ";
    }
    uint8x8_t v10 = sub_216779180(result, (uint64_t)v9, 2 * (*a4 == 0));
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    float v14 = sub_216779180(v10, v12, v13);
    sub_216779180(v14, (uint64_t)" Items: [", 9);
    *a4 = 0;
    uint64_t v17 = *a3;
    uint64_t v18 = a3[1];
    *(void *)&long long v21 = *a3;
    *((void *)&v21 + 1) = v18;
    while (v17 != v18)
    {
      sub_216999AD4((uint64_t *)&v21, v15, v16);
      size_t v19 = (void *)std::ostream::operator<<();
      long long v22 = v21;
      sub_216999B54(&v22);
      if ((void)v22 == *((void *)&v22 + 1)) {
        uint64_t v20 = "";
      }
      else {
        uint64_t v20 = ", ";
      }
      sub_216779180(v19, (uint64_t)v20, 2 * ((void)v22 != *((void *)&v22 + 1)));
      sub_216999B54(&v21);
      uint64_t v18 = *((void *)&v21 + 1);
      uint64_t v17 = v21;
    }
    return sub_216779180(v8, (uint64_t)"]", 1);
  }
  return result;
}

void *sub_216AE0268(void *a1)
{
  int8x8_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_216AE02EC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (a3 != a4)
  {
    unint64_t v8 = operator new(0x18uLL);
    unint64_t v9 = v8;
    void *v8 = 0;
    v8[1] = 0;
    uint64_t v11 = *a3;
    uint8x8_t v10 = a3 + 1;
    int v8[2] = v11;
    uint64_t v12 = 1;
    if (v10 != a4)
    {
      uint64_t v13 = v8;
      do
      {
        unint64_t v8 = operator new(0x18uLL);
        uint64_t v14 = *v10++;
        void *v8 = v13;
        v8[1] = 0;
        int v8[2] = v14;
        v13[1] = v8;
        ++v12;
        uint64_t v13 = v8;
      }
      while (v10 != a4);
    }
    uint64_t v15 = *a2;
    *(void *)(v15 + 8) = v9;
    *unint64_t v9 = v15;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v12;
    return v9;
  }
  return a2;
}

void sub_216AE03B8(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    int8x8_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_216AE03D8(_Unwind_Exception *a1)
{
}

uint64_t *sub_216AE03EC(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    uint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        uint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    sub_21677B358(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

char *sub_216AE04AC(uint64_t a1, char *__src, void *a3, void *a4, uint64_t a5)
{
  uint8x8_t v5 = __src;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v9 = a1 + 16;
    uint64_t v10 = v11;
    uint64_t v12 = *(char **)(v9 - 8);
    if (a5 <= (v11 - (uint64_t)v12) >> 3)
    {
      unint64_t v19 = a5 + 1;
      uint64_t v20 = a3;
      do
      {
        uint64_t v20 = (void *)v20[1];
        --v19;
      }
      while (v19 > 1);
      uint64_t v21 = (v12 - __src) >> 3;
      if (v21 >= a5)
      {
        uint64_t v23 = *(char **)(v9 - 8);
        uint64_t v21 = a5;
      }
      else
      {
        if (v12 - __src <= -8)
        {
          uint64_t v27 = (v12 - __src) >> 3;
          uint64_t v20 = a3;
          do
            uint64_t v20 = (void *)*v20;
          while (!__CFADD__(v27++, 1));
        }
        else if (v12 == __src)
        {
          uint64_t v20 = a3;
        }
        else
        {
          unint64_t v22 = v21 + 1;
          uint64_t v20 = a3;
          do
          {
            uint64_t v20 = (void *)v20[1];
            --v22;
          }
          while (v22 > 1);
        }
        uint64_t v23 = *(char **)(v9 - 8);
        if (v20 != a4)
        {
          uint64_t v29 = v20;
          long long v30 = *(void **)(v9 - 8);
          do
          {
            *v30++ = v29[2];
            uint64_t v29 = (void *)v29[1];
            v23 += 8;
          }
          while (v29 != a4);
        }
        *(void *)(a1 + 8) = v23;
      }
      if (v21 >= 1)
      {
        int v31 = &__src[8 * a5];
        uint64_t v32 = &v23[-8 * a5];
        long long v33 = v23;
        if (v32 < v12)
        {
          long long v33 = v23;
          do
          {
            uint64_t v34 = *(void *)v32;
            v32 += 8;
            *(void *)long long v33 = v34;
            v33 += 8;
          }
          while (v32 < v12);
        }
        *(void *)(a1 + 8) = v33;
        if (v23 != v31) {
          memmove(&v23[-8 * ((v23 - v31) >> 3)], __src, v23 - v31);
        }
        if (v20 != v7)
        {
          long long v35 = v5;
          do
          {
            *(void *)long long v35 = v7[2];
            v35 += 8;
            uint64_t v7 = (void *)v7[1];
          }
          while (v7 != v20);
        }
      }
    }
    else
    {
      uint64_t v13 = *(unsigned char **)a1;
      unint64_t v14 = a5 + ((uint64_t)&v12[-*(void *)a1] >> 3);
      if (v14 >> 61) {
        sub_21677CB10();
      }
      uint64_t v15 = (__src - v13) >> 3;
      uint64_t v16 = v10 - (void)v13;
      if (v16 >> 2 > v14) {
        unint64_t v14 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      uint64_t v41 = v9;
      if (v17) {
        uint64_t v18 = (char *)sub_21677CB28(v9, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      int v24 = &v18[8 * v15];
      std::string __p = v18;
      long long v38 = v24;
      long long v40 = &v18[8 * v17];
      uint64_t v25 = 8 * a5;
      long long v26 = &v24[8 * a5];
      do
      {
        *(void *)int v24 = v7[2];
        v24 += 8;
        uint64_t v7 = (void *)v7[1];
        v25 -= 8;
      }
      while (v25);
      long long v39 = v26;
      uint8x8_t v5 = sub_216891860((void **)a1, (uint64_t)&__p, v5);
      if (v39 != v38) {
        v39 += (v38 - v39 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      if (__p) {
        operator delete(__p);
      }
    }
  }
  return v5;
}

void sub_216AE06F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216AE0730(uint64_t *a1, void *a2)
{
  uint64_t v4 = a1[3];
  if (v4)
  {
    uint64_t v5 = (a1[1] - *a1) >> 3;
    *(void *)&long long v20 = *a2;
    *((void *)&v20 + 1) = v5;
    unint64_t v6 = sub_216AE0A00(v4, &v20, &v20);
    if (!v7) {
      return (void *)(*a1 + 8 * v6[3]);
    }
    uint64_t result = (void *)a1[1];
  }
  else
  {
    uint64_t result = (void *)sub_216AE08A0(a1, a2);
    if ((void *)a1[1] != result) {
      return result;
    }
  }
  unint64_t v9 = a1[2];
  if ((unint64_t)result >= v9)
  {
    uint64_t v11 = (void *)*a1;
    uint64_t v12 = ((uint64_t)result - *a1) >> 3;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v14 = v9 - (void)v11;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      uint64_t v16 = (char *)sub_21677CB28((uint64_t)(a1 + 2), v15);
      uint64_t v11 = (void *)*a1;
      uint64_t result = (void *)a1[1];
    }
    else
    {
      uint64_t v16 = 0;
    }
    unint64_t v17 = &v16[8 * v12];
    uint64_t v18 = &v16[8 * v15];
    *(void *)unint64_t v17 = *a2;
    uint64_t v10 = v17 + 8;
    while (result != v11)
    {
      uint64_t v19 = *--result;
      *((void *)v17 - 1) = v19;
      v17 -= 8;
    }
    *a1 = (uint64_t)v17;
    a1[1] = (uint64_t)v10;
    a1[2] = (uint64_t)v18;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    void *result = *a2;
    uint64_t v10 = result + 1;
  }
  a1[1] = (uint64_t)v10;
  sub_216AE0918(a1);
  return (void *)(a1[1] - 8);
}

uint64_t sub_216AE08A0(void *a1, void *a2)
{
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    uint64_t v4 = sub_21687CB2C(v3, a2);
    if (v4) {
      return *a1 + 8 * v4[3];
    }
    else {
      return a1[1];
    }
  }
  else
  {
    unint64_t v6 = (void *)*a1;
    uint64_t result = a1[1];
    if (*a1 != result)
    {
      while (*v6 != *a2)
      {
        if (++v6 == (void *)result) {
          return result;
        }
      }
      return (uint64_t)v6;
    }
  }
  return result;
}

void sub_216AE0918(uint64_t *a1)
{
  if ((unint64_t)(a1[1] - *a1) >= 0x3F9)
  {
    int8x8_t v2 = a1 + 3;
    if (!a1[3])
    {
      uint64_t v3 = operator new(0x28uLL);
      _OWORD *v3 = 0u;
      v3[1] = 0u;
      *((_DWORD *)v3 + 8) = 1065353216;
      sub_21678A04C((uint64_t)v3, 0x80uLL);
      sub_2168CAEA8(v2, (uint64_t)v3);
      uint64_t v4 = *a1;
      if (a1[1] != *a1)
      {
        uint64_t v5 = 0;
        unint64_t v6 = 0;
        do
        {
          uint64_t v7 = a1[3];
          uint64_t v8 = (void *)(v4 + v5);
          sub_216AE0C34(v7, (void *)(v4 + v5), (uint64_t)&unk_2174BFD90, &v8)[3] = v6++;
          uint64_t v4 = *a1;
          v5 += 8;
        }
        while (v6 < (a1[1] - *a1) >> 3);
      }
    }
  }
}

void sub_216AE09E8(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)sub_216850320(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void *sub_216AE0A00(uint64_t a1, void *a2, _OWORD *a3)
{
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * *a2);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    void *v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216AE0C20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216AE0C34(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * *a2);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    void *i = *v20;
LABEL_38:
    *unint64_t v20 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216AE0E58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216AE0E6C(void *a1, uint64_t *a2, uint64_t *a3)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    uint64_t v6 = 1;
    unint64_t v7 = a1;
    do
    {
      unint64_t v8 = operator new(0x18uLL);
      uint64_t v9 = *v5++;
      v8[1] = a1;
      int v8[2] = v9;
      void *v8 = v7;
      v7[1] = v8;
      *a1 = v8;
      a1[2] = v6++;
      unint64_t v7 = v8;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_216AE0EF0(_Unwind_Exception *a1)
{
  sub_2168505B4(v1);
  _Unwind_Resume(a1);
}

char *sub_216AE0F04(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_21677CACC(result, a4);
    unint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      *v7++ = *(void *)(a2 + 16);
      a2 = *(void *)(a2 + 8);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_216AE0F60(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216AE0F7C(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    uint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        uint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    void v10[4] = *a3;
    sub_21677B358(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void *sub_216AE1038(void *result, uint64_t a2, uint64_t *a3, unsigned char *a4, char a5)
{
  unint64_t v8 = result;
  if ((a5 & 1) != 0 || *a3 != a3[1])
  {
    if (*a4) {
      uint64_t v9 = "";
    }
    else {
      uint64_t v9 = ", ";
    }
    uint64_t v10 = sub_216779180(result, (uint64_t)v9, 2 * (*a4 == 0));
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    float v14 = sub_216779180(v10, v12, v13);
    sub_216779180(v14, (uint64_t)" Items: [", 9);
    *a4 = 0;
    uint64_t v17 = *a3;
    uint64_t v18 = a3[1];
    *(void *)&long long v21 = *a3;
    *((void *)&v21 + 1) = v18;
    while (v17 != v18)
    {
      sub_2169995F8((uint64_t *)&v21, v15, v16);
      uint64_t v19 = (void *)std::ostream::operator<<();
      long long v22 = v21;
      sub_216999678(&v22);
      if ((void)v22 == *((void *)&v22 + 1)) {
        unint64_t v20 = "";
      }
      else {
        unint64_t v20 = ", ";
      }
      sub_216779180(v19, (uint64_t)v20, 2 * ((void)v22 != *((void *)&v22 + 1)));
      sub_216999678(&v21);
      uint64_t v18 = *((void *)&v21 + 1);
      uint64_t v17 = v21;
    }
    return sub_216779180(v8, (uint64_t)"]", 1);
  }
  return result;
}

void *sub_216AE1160(void *a1)
{
  int8x8_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_216AE11E4(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    int v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    sub_21677B358(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void *sub_216AE12A4(uint64_t *a1, void *a2)
{
  uint64_t v4 = a1[3];
  if (v4)
  {
    uint64_t v5 = (a1[1] - *a1) >> 3;
    *(void *)&long long v20 = *a2;
    *((void *)&v20 + 1) = v5;
    uint64_t v6 = sub_216AE0A00(v4, &v20, &v20);
    if (!v7) {
      return (void *)(*a1 + 8 * v6[3]);
    }
    uint64_t result = (void *)a1[1];
  }
  else
  {
    uint64_t result = (void *)sub_216AE08A0(a1, a2);
    if ((void *)a1[1] != result) {
      return result;
    }
  }
  unint64_t v9 = a1[2];
  if ((unint64_t)result >= v9)
  {
    int v11 = (void *)*a1;
    uint64_t v12 = ((uint64_t)result - *a1) >> 3;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v14 = v9 - (void)v11;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      unint64_t v16 = (char *)sub_21677CB28((uint64_t)(a1 + 2), v15);
      int v11 = (void *)*a1;
      uint64_t result = (void *)a1[1];
    }
    else
    {
      unint64_t v16 = 0;
    }
    uint64_t v17 = &v16[8 * v12];
    uint64_t v18 = &v16[8 * v15];
    *(void *)uint64_t v17 = *a2;
    unint64_t v10 = v17 + 8;
    while (result != v11)
    {
      uint64_t v19 = *--result;
      *((void *)v17 - 1) = v19;
      v17 -= 8;
    }
    *a1 = (uint64_t)v17;
    a1[1] = (uint64_t)v10;
    a1[2] = (uint64_t)v18;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    void *result = *a2;
    unint64_t v10 = result + 1;
  }
  a1[1] = (uint64_t)v10;
  sub_216AE1414(a1);
  return (void *)(a1[1] - 8);
}

void sub_216AE1414(uint64_t *a1)
{
  if ((unint64_t)(a1[1] - *a1) >= 0x3F9)
  {
    int8x8_t v2 = a1 + 3;
    if (!a1[3])
    {
      unint64_t v3 = operator new(0x28uLL);
      _OWORD *v3 = 0u;
      v3[1] = 0u;
      *((_DWORD *)v3 + 8) = 1065353216;
      sub_21678A04C((uint64_t)v3, 0x80uLL);
      sub_2168CAEA8(v2, (uint64_t)v3);
      uint64_t v4 = *a1;
      if (a1[1] != *a1)
      {
        uint64_t v5 = 0;
        unint64_t v6 = 0;
        do
        {
          uint64_t v7 = a1[3];
          unint64_t v8 = (void *)(v4 + v5);
          sub_216AE0C34(v7, (void *)(v4 + v5), (uint64_t)&unk_2174BFD90, &v8)[3] = v6++;
          uint64_t v4 = *a1;
          v5 += 8;
        }
        while (v6 < (a1[1] - *a1) >> 3);
      }
    }
  }
}

void sub_216AE14E4(_Unwind_Exception *a1)
{
  unint64_t v3 = (void *)sub_216850320(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

char *sub_216AE14FC(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_21677CACC(result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      *v7++ = *(void *)(a2 + 16);
      a2 = *(void *)(a2 + 8);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_216AE1558(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216AE1574(void *result, uint64_t a2, uint64_t *a3, unsigned char *a4, char a5)
{
  unint64_t v8 = result;
  if ((a5 & 1) != 0 || *a3 != a3[1])
  {
    if (*a4) {
      unint64_t v9 = "";
    }
    else {
      unint64_t v9 = ", ";
    }
    unint64_t v10 = sub_216779180(result, (uint64_t)v9, 2 * (*a4 == 0));
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    uint64_t v14 = sub_216779180(v10, v12, v13);
    sub_216779180(v14, (uint64_t)" Items: [", 9);
    *a4 = 0;
    uint64_t v17 = *a3;
    uint64_t v18 = a3[1];
    *(void *)&long long v21 = *a3;
    *((void *)&v21 + 1) = v18;
    while (v17 != v18)
    {
      sub_216999E68((uint64_t *)&v21, v15, v16);
      uint64_t v19 = (void *)std::ostream::operator<<();
      long long v22 = v21;
      sub_216999EE8(&v22);
      if ((void)v22 == *((void *)&v22 + 1)) {
        long long v20 = "";
      }
      else {
        long long v20 = ", ";
      }
      sub_216779180(v19, (uint64_t)v20, 2 * ((void)v22 != *((void *)&v22 + 1)));
      sub_216999EE8(&v21);
      uint64_t v18 = *((void *)&v21 + 1);
      uint64_t v17 = v21;
    }
    return sub_216779180(v8, (uint64_t)"]", 1);
  }
  return result;
}

void *sub_216AE169C(void *a1)
{
  int8x8_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_216AE1720(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    unint64_t v8 = sub_216AE1828(a1, 0, 0, a3);
    unint64_t v9 = v8;
    uint64_t v10 = a3 + 24;
    uint64_t v11 = 1;
    if (a3 + 24 != a4)
    {
      uint64_t v12 = (uint64_t)v8;
      do
      {
        unint64_t v8 = sub_216AE1828(a1, v12, 0, v10);
        *(void *)(v12 + 8) = v8;
        ++v11;
        v10 += 24;
        uint64_t v12 = (uint64_t)v8;
      }
      while (v10 != a4);
    }
    uint64_t v13 = *a2;
    *(void *)(v13 + 8) = v9;
    *unint64_t v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_216AE17F0(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    unint64_t v3 = v2;
    int8x8_t v2 = (void **)*v2;
    sub_21687BA18(v1, v3);
  }
  while (v2);
  __cxa_rethrow();
}

void sub_216AE1810(_Unwind_Exception *a1)
{
}

void *sub_216AE1828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = operator new(0x28uLL);
  void *v7 = a2;
  v7[1] = a3;
  unint64_t v8 = v7 + 2;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_216778F24(v8, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t v8 = *(_OWORD *)a4;
    void v7[4] = *(void *)(a4 + 16);
  }
  return v7;
}

void sub_216AE1890(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

long long *sub_216AE18A4(uint64_t *a1, long long *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = (uint64_t)a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      unint64_t v20 = a5 + 1;
      long long v21 = a3;
      do
      {
        long long v21 = (void *)v21[1];
        --v20;
      }
      while (v20 > 1);
      int64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 3);
      int64_t v23 = a5;
      if (v22 < a5)
      {
        if ((uint64_t)(v12 - (void)a2) <= -24)
        {
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 3);
          long long v21 = a3;
          do
            long long v21 = (void *)*v21;
          while (!__CFADD__(v25++, 1));
        }
        else if ((long long *)v12 == a2)
        {
          long long v21 = a3;
        }
        else
        {
          unint64_t v24 = v22 + 1;
          long long v21 = a3;
          do
          {
            long long v21 = (void *)v21[1];
            --v24;
          }
          while (v24 > 1);
        }
        a1[1] = (uint64_t)sub_216AE1B74(v9, (uint64_t)v21, a4, *(char **)(v9 - 8));
        int64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v5) >> 3);
      }
      if (v23 >= 1)
      {
        sub_21680F12C((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)v5 + 24 * a5);
        if (v21 != (void *)v7)
        {
          uint64_t v27 = (std::string *)v5;
          do
          {
            std::string::operator=(v27, (const std::string *)(v7 + 16));
            uint64_t v7 = *(void *)(v7 + 8);
            ++v27;
          }
          while ((void *)v7 != v21);
        }
      }
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v33 = v9;
      if (v18) {
        uint64_t v19 = (char *)sub_216782ED8(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v29 = v19;
      long long v30 = &v19[24 * v15];
      int v31 = v30;
      uint64_t v32 = &v19[24 * v18];
      sub_216AE1ADC(&v29, v7, a5);
      uint64_t v5 = (long long *)sub_21680F250((uint64_t)a1, &v29, v5);
      sub_216790E64((uint64_t)&v29);
    }
  }
  return v5;
}

void sub_216AE1ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *sub_216AE1ADC(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  uint64_t v4 = result[2];
  if (a3)
  {
    uint64_t v6 = v4 + 24 * a3;
    uint64_t v7 = 24 * a3;
    do
    {
      if (*(char *)(a2 + 39) < 0)
      {
        uint64_t result = sub_216778F24((unsigned char *)v4, *(void **)(a2 + 16), *(void *)(a2 + 24));
      }
      else
      {
        long long v8 = *(_OWORD *)(a2 + 16);
        *(void *)(v4 + 16) = *(void *)(a2 + 32);
        *(_OWORD *)uint64_t v4 = v8;
      }
      v4 += 24;
      a2 = *(void *)(a2 + 8);
      v7 -= 24;
    }
    while (v7);
    uint64_t v4 = v6;
  }
  _OWORD v3[2] = v4;
  return result;
}

void sub_216AE1B6C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

char *sub_216AE1B74(uint64_t a1, uint64_t a2, uint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v11 = __dst;
  unint64_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*(char *)(v6 + 39) < 0)
      {
        sub_216778F24(v4, *(void **)(v6 + 16), *(void *)(v6 + 24));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *(_OWORD *)(v6 + 16);
        *((void *)v4 + 2) = *(void *)(v6 + 32);
        *(_OWORD *)uint64_t v4 = v7;
      }
      uint64_t v6 = *(void *)(v6 + 8);
      v4 += 24;
      unint64_t v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_21680F480((uint64_t)v9);
  return v4;
}

void sub_216AE1C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216AE1C38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
    if (*(char *)(a2 + 23) < 0)
    {
      sub_216778F24(v13, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a2;
      uint64_t v14 = *(void *)(a2 + 16);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)v13;
    uint64_t v7 = v14;
    v13[0] = 0;
    v13[1] = 0;
    uint64_t v14 = 0;
    unint64_t v15 = v5;
    uint64_t v17 = v7;
    unint64_t v18 = v5;
    long long v8 = sub_21689127C(v4, (unsigned __int8 *)__p, (uint64_t)__p);
    char v10 = v9;
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(v13[0]);
    }
    if (!v10) {
      return *(void *)a1 + 24 * *((void *)v8 + 5);
    }
    unint64_t v6 = *(void *)(a1 + 8);
  }
  else
  {
    unint64_t v6 = sub_216AE1E14((unsigned __int8 **)a1, (unsigned __int8 *)a2);
    if (*(void *)(a1 + 8) != v6) {
      return v6;
    }
  }
  if (v6 >= *(void *)(a1 + 16))
  {
    uint64_t v11 = sub_2167E9A44((uint64_t *)a1, (long long *)a2);
  }
  else
  {
    sub_2167E99E4((void *)a1, (long long *)a2);
    uint64_t v11 = v6 + 24;
  }
  *(void *)(a1 + 8) = v11;
  if (0xAAAAAAAAAAAAAAABLL * ((v11 - *(void *)a1) >> 3) >= 0x80)
  {
    sub_216AE1EA0((uint64_t *)a1);
    uint64_t v11 = *(void *)(a1 + 8);
  }
  return v11 - 24;
}

void sub_216AE1DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_217324650((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216AE1DD0(uint64_t a1)
{
  sub_21688A830((uint64_t *)(a1 + 24), 0);
  unint64_t v3 = (void **)a1;
  sub_216782F20(&v3);
  return a1;
}

uint64_t sub_216AE1E14(unsigned __int8 **a1, unsigned __int8 *a2)
{
  uint64_t v4 = a1[3];
  if (v4)
  {
    unint64_t v5 = sub_2168602D4(v4, a2);
    if (v5) {
      return (uint64_t)&(*a1)[24 * *((void *)v5 + 5)];
    }
    else {
      return (uint64_t)a1[1];
    }
  }
  else
  {
    uint64_t v7 = *a1;
    unint64_t v6 = a1[1];
    while (v7 != v6)
    {
      if (sub_2168513F8((uint64_t)a1, v7, a2)) {
        return (uint64_t)v7;
      }
      v7 += 24;
    }
  }
  return (uint64_t)v6;
}

void sub_216AE1EA0(uint64_t *a1)
{
  uint64_t v1 = a1 + 3;
  if (!a1[3])
  {
    unint64_t v3 = operator new(0x28uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    *((_DWORD *)v3 + 8) = 1065353216;
    sub_21678A04C((uint64_t)v3, 0x80uLL);
    sub_21688A830(v1, (uint64_t)v3);
    uint64_t v4 = *a1;
    if (a1[1] != *a1)
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        uint64_t v7 = a1[3];
        long long v8 = (long long *)(v4 + v5);
        *((void *)sub_21685FAEC(v7, (unsigned __int8 *)(v4 + v5), (uint64_t)&unk_2174BFD90, &v8) + 5) = v6++;
        uint64_t v4 = *a1;
        v5 += 24;
      }
      while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
    }
  }
}

void sub_216AE1F78(_Unwind_Exception *a1)
{
  unint64_t v3 = (void *)sub_216850298(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

std::string *sub_216AE1F90(std::string *__str, std::string *a2, std::string *this)
{
  unint64_t v3 = this;
  uint64_t v4 = __str;
  if (__str != a2)
  {
    unint64_t v6 = this;
    do
    {
      std::string::operator=(v6++, v4++);
      ++v3;
    }
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

uint64_t *sub_216AE1FF8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      unint64_t v6 = sub_21687C484((uint64_t)a1, 0, 0, v5);
      uint64_t v7 = *a1;
      *unint64_t v6 = *a1;
      v6[1] = a1;
      *(void *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_216AE2078(_Unwind_Exception *a1)
{
  sub_21687B9B4(v1);
  _Unwind_Resume(a1);
}

char *sub_216AE208C(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_216782E84(result, a4);
    uint64_t result = sub_216AE1B74((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_216AE20F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216782F20(&a9);
  _Unwind_Resume(a1);
}

void *sub_216AE2114(void *result, uint64_t a2, uint64_t *a3, unsigned char *a4, char a5)
{
  long long v8 = result;
  if ((a5 & 1) != 0 || *a3 != a3[1])
  {
    if (*a4) {
      uint64_t v9 = "";
    }
    else {
      uint64_t v9 = ", ";
    }
    uint64_t v10 = sub_216779180(result, (uint64_t)v9, 2 * (*a4 == 0));
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    uint64_t v14 = sub_216779180(v10, v12, v13);
    sub_216779180(v14, (uint64_t)" Items: [", 9);
    *a4 = 0;
    uint64_t v17 = *a3;
    uint64_t v18 = a3[1];
    *(void *)&long long v25 = *a3;
    *((void *)&v25 + 1) = v18;
    while (v17 != v18)
    {
      uint64_t v19 = sub_2168E5C08((uint64_t *)&v25, v15, v16);
      int v20 = *(char *)(v19 + 23);
      if (v20 >= 0) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = *(void *)v19;
      }
      if (v20 >= 0) {
        uint64_t v22 = *(unsigned __int8 *)(v19 + 23);
      }
      else {
        uint64_t v22 = *(void *)(v19 + 8);
      }
      int64_t v23 = sub_216779180(v8, v21, v22);
      long long v26 = v25;
      sub_2168E5E20(&v26);
      if ((void)v26 == *((void *)&v26 + 1)) {
        unint64_t v24 = "";
      }
      else {
        unint64_t v24 = ", ";
      }
      sub_216779180(v23, (uint64_t)v24, 2 * ((void)v26 != *((void *)&v26 + 1)));
      sub_2168E5E20(&v25);
      uint64_t v18 = *((void *)&v25 + 1);
      uint64_t v17 = v25;
    }
    return sub_216779180(v8, (uint64_t)"]", 1);
  }
  return result;
}

void *sub_216AE2250(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_216AE22D4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (a3 != a4)
  {
    long long v8 = sub_216AE23CC(a1, 0, 0, a3);
    uint64_t v9 = v8;
    uint64_t v10 = a3 + 1;
    uint64_t v11 = 1;
    if (v10 != a4)
    {
      uint64_t v12 = (uint64_t)v8;
      do
      {
        long long v8 = sub_216AE23CC(a1, v12, 0, v10);
        *(void *)(v12 + 8) = v8;
        ++v11;
        ++v10;
        uint64_t v12 = (uint64_t)v8;
      }
      while (v10 != a4);
    }
    uint64_t v13 = *a2;
    *(void *)(v13 + 8) = v9;
    *uint64_t v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_216AE23A4(void *a1)
{
  __cxa_begin_catch(a1);
  sub_217324288(v1);
  __cxa_rethrow();
}

void sub_216AE23B8(_Unwind_Exception *a1)
{
}

void *sub_216AE23CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = operator new(0x18uLL);
  void *result = a2;
  result[1] = a3;
  uint64_t v8 = *a4;
  result[2] = *a4;
  if ((v8 & 7) != 0)
  {
    uint64_t v9 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v9, 2u, memory_order_relaxed) & 1) == 0) {
      result[2] = v9;
    }
  }
  return result;
}

uint64_t *sub_216AE242C(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v6 = (uint64_t **)(a1 + 8);
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    unint64_t v7 = *a2 & 0xFFFFFFFFFFFFFFF8;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4] & 0xFFFFFFFFFFFFFFF8;
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    sub_216AE24F0(a1, a4, (uint64_t)&v11);
    sub_21677B358((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

void *sub_216AE24F0@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t result = operator new(0x30uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  uint64_t v7 = **a2;
  result[4] = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[5] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void *sub_216AE2568(uint64_t *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 3)
    {
      unint64_t v19 = a5 + 1;
      int v20 = a3;
      do
      {
        int v20 = (void *)v20[1];
        --v19;
      }
      while (v19 > 1);
      uint64_t v21 = (uint64_t)(v12 - (void)a2) >> 3;
      uint64_t v22 = a5;
      if (v21 < a5)
      {
        if ((uint64_t)(v12 - (void)a2) <= -8)
        {
          uint64_t v28 = (uint64_t)(v12 - (void)a2) >> 3;
          int v20 = a3;
          do
            int v20 = (void *)*v20;
          while (!__CFADD__(v28++, 1));
        }
        else if ((void *)v12 == a2)
        {
          int v20 = a3;
        }
        else
        {
          unint64_t v23 = v21 + 1;
          int v20 = a3;
          do
          {
            int v20 = (void *)v20[1];
            --v23;
          }
          while (v23 > 1);
        }
        a1[1] = (uint64_t)sub_216AE2794(v9, (uint64_t)v20, a4, *(void **)(v9 - 8));
        uint64_t v22 = (uint64_t)(v12 - (void)v5) >> 3;
      }
      if (v22 >= 1)
      {
        sub_216A8E328((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[a5]);
        if (v20 != v7)
        {
          long long v30 = v5;
          do
          {
            sub_2168D2318(v30, v7 + 2);
            uint64_t v7 = (void *)v7[1];
            ++v30;
          }
          while (v7 != v20);
        }
      }
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 3);
      if (v14 >> 61) {
        sub_21677CB10();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 3;
      uint64_t v16 = v10 - v13;
      if (v16 >> 2 > v14) {
        unint64_t v14 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      v32[4] = v9;
      if (v17) {
        uint64_t v18 = (char *)sub_21677CB28(v9, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      unint64_t v24 = &v18[8 * v15];
      v32[0] = v18;
      v32[1] = v24;
      v32[3] = &v18[8 * v17];
      uint64_t v25 = 8 * a5;
      long long v26 = &v24[8 * a5];
      do
      {
        uint64_t v27 = v7[2];
        *(void *)unint64_t v24 = v27;
        if ((v27 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)v24 &= 0xFFFFFFFFFFFFFFF8;
        }
        v24 += 8;
        uint64_t v7 = (void *)v7[1];
        v25 -= 8;
      }
      while (v25);
      v32[2] = v26;
      uint64_t v5 = (void *)sub_216A8E370(a1, v32, v5);
      sub_2168BE9D8((uint64_t)v32);
    }
  }
  return v5;
}

void sub_216AE2774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *sub_216AE2794(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  for (uint64_t result = a4; a2 != a3; ++result)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    void *result = v5;
    if ((v5 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *result &= 0xFFFFFFFFFFFFFFF8;
    }
    a2 = *(void *)(a2 + 8);
  }
  return result;
}

void *sub_216AE27E0(uint64_t *a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 3)
    {
      uint64_t v19 = v12 - (void)a2;
      if (a5 <= (uint64_t)(v12 - (void)a2) >> 3)
      {
        int v20 = &a3[a5];
      }
      else
      {
        int v20 = &a3[v19 >> 3];
        sub_21698FAA0((uint64_t)a1, v20, a4);
        if (v19 < 1) {
          return v5;
        }
      }
      sub_216A8E328((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[a5]);
      if (v20 != v7)
      {
        uint64_t v21 = v5;
        do
          sub_2168D2318(v21++, v7++);
        while (v7 != v20);
      }
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 3);
      if (v14 >> 61) {
        sub_21677CB10();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 3;
      uint64_t v16 = v10 - v13;
      if (v16 >> 2 > v14) {
        unint64_t v14 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      v27[4] = v9;
      if (v17) {
        uint64_t v18 = (char *)sub_21677CB28(v9, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v22 = (uint64_t *)&v18[8 * v15];
      v27[0] = v18;
      v27[1] = v22;
      v27[3] = &v18[8 * v17];
      uint64_t v23 = 8 * a5;
      unint64_t v24 = &v22[a5];
      do
      {
        uint64_t v25 = *v7;
        *uint64_t v22 = *v7;
        if ((v25 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *v22 &= 0xFFFFFFFFFFFFFFF8;
        }
        ++v22;
        ++v7;
        v23 -= 8;
      }
      while (v23);
      int v27[2] = v24;
      uint64_t v5 = (void *)sub_216A8E370(a1, v27, v5);
      sub_2168BE9D8((uint64_t)v27);
    }
  }
  return v5;
}

void sub_216AE2994(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168BE9D8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_216AE29A8(char **a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t)a1[3];
  if (v4)
  {
    uint64_t v5 = (a1[1] - *a1) >> 3;
    uint64_t v6 = *a2;
    if ((*a2 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v6 &= 0xFFFFFFFFFFFFFFF8;
    }
    v12[0] = v6;
    v12[1] = v5;
    uint64_t v7 = sub_2168CD6A4(v4, v12, v12);
    if ((v12[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (!v8) {
      return &(*a1)[8 * v7[3]];
    }
    uint64_t result = a1[1];
  }
  else
  {
    uint64_t result = (char *)sub_216AE2B38(a1, a2);
    if (a1[1] != result) {
      return result;
    }
  }
  if (result >= a1[2])
  {
    uint64_t v11 = sub_216973984(a1, a2);
  }
  else
  {
    uint64_t v10 = *a2;
    *(void *)uint64_t result = *a2;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)result &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = result + 8;
  }
  a1[1] = v11;
  sub_216AE2BB8((uint64_t *)a1);
  return a1[1] - 8;
}

uint64_t sub_216AE2AF4(uint64_t a1)
{
  sub_2168CAE68((uint64_t *)(a1 + 24), 0);
  unint64_t v3 = (void **)a1;
  sub_216889A04(&v3);
  return a1;
}

uint64_t sub_216AE2B38(void *a1, void *a2)
{
  unint64_t v3 = (void *)a1[3];
  if (v3)
  {
    uint64_t v4 = sub_2168CB1F4(v3, a2);
    if (v4) {
      return *a1 + 8 * v4[3];
    }
    else {
      return a1[1];
    }
  }
  else
  {
    uint64_t v6 = (void *)*a1;
    uint64_t result = a1[1];
    if (*a1 != result)
    {
      while ((*v6 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v6 == (void *)result) {
          return result;
        }
      }
      return (uint64_t)v6;
    }
  }
  return result;
}

void sub_216AE2BB8(uint64_t *a1)
{
  if ((unint64_t)(a1[1] - *a1) >= 0x3F9)
  {
    uint64_t v2 = a1 + 3;
    if (!a1[3])
    {
      unint64_t v3 = operator new(0x28uLL);
      _OWORD *v3 = 0u;
      v3[1] = 0u;
      *((_DWORD *)v3 + 8) = 1065353216;
      sub_21678A04C((uint64_t)v3, 0x80uLL);
      sub_2168CAE68(v2, (uint64_t)v3);
      uint64_t v4 = *a1;
      if (a1[1] != *a1)
      {
        uint64_t v5 = 0;
        unint64_t v6 = 0;
        do
        {
          uint64_t v7 = a1[3];
          char v8 = (uint64_t *)(v4 + v5);
          sub_2168CB2C8(v7, (void *)(v4 + v5), (uint64_t)&unk_2174BFD90, &v8)[3] = v6++;
          uint64_t v4 = *a1;
          v5 += 8;
        }
        while (v6 < (a1[1] - *a1) >> 3);
      }
    }
  }
}

void sub_216AE2C88(_Unwind_Exception *a1)
{
  unint64_t v3 = (void *)sub_2168C08A0(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t *sub_216AE2CA0(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      unint64_t v6 = sub_216AE23CC((uint64_t)a1, 0, 0, v5);
      uint64_t v7 = *a1;
      *unint64_t v6 = *a1;
      v6[1] = a1;
      *(void *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_216AE2D20(_Unwind_Exception *a1)
{
  sub_216ADD964(v1);
  _Unwind_Resume(a1);
}

void *sub_216AE2D34(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_21677CACC(result, a4);
    uint64_t result = sub_216AE2794((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216AE2D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216889A04(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216AE2DBC(uint64_t a1, uint64_t *__p)
{
  uint64_t v2 = *__p;
  uint64_t v3 = __p[1];
  *(void *)(v2 + 8) = v3;
  uint64_t v4 = __p[2];
  *(void *)__p[1] = v2;
  --*(void *)(a1 + 16);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  operator delete(__p);
  return v3;
}

uint64_t *sub_216AE2E14(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = sub_2167AE00C(a1, a2);
  uint64_t v4 = a2[4];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  operator delete(a2);
  return v3;
}

uint64_t *sub_216AE2E60(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = (uint64_t **)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v4;
        unint64_t v8 = v4[4] & 0xFFFFFFFFFFFFFFF8;
        if (v6 >= v8) {
          break;
        }
        uint64_t v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      if (v8 >= v6) {
        break;
      }
      uint64_t v4 = v7[1];
      if (!v4)
      {
        uint64_t v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    sub_21697C3A4(a1, a3, (uint64_t)&v10);
    sub_21677B358((uint64_t **)a1, (uint64_t)v7, v5, v10);
    return v10;
  }
  return (uint64_t *)v7;
}

void *sub_216AE2F1C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = v2;
  do
  {
    unint64_t v7 = v3[4] & 0xFFFFFFFFFFFFFFF8;
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      uint64_t v9 = v3;
    }
    else {
      uint64_t v9 = v3 + 1;
    }
    if (v8) {
      unint64_t v6 = v3;
    }
    uint64_t v3 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v2 || v5 < (v6[4] & 0xFFFFFFFFFFFFFFF8)) {
    return v2;
  }
  return v6;
}

void *sub_216AE2F74(void *result, uint64_t a2, uint64_t *a3, unsigned char *a4, char a5)
{
  BOOL v8 = result;
  if ((a5 & 1) != 0 || *a3 != a3[1])
  {
    if (*a4) {
      uint64_t v9 = "";
    }
    else {
      uint64_t v9 = ", ";
    }
    uint64_t v10 = sub_216779180(result, (uint64_t)v9, 2 * (*a4 == 0));
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    unint64_t v14 = sub_216779180(v10, v12, v13);
    sub_216779180(v14, (uint64_t)" Items: [", 9);
    *a4 = 0;
    uint64_t v17 = *a3;
    uint64_t v18 = a3[1];
    *(void *)&long long v22 = *a3;
    *((void *)&v22 + 1) = v18;
    while (v17 != v18)
    {
      uint64_t v19 = (void *)sub_21699A570((uint64_t *)&v22, v15, v16);
      int v20 = pxrInternal__aapl__pxrReserved__::operator<<(v8, v19);
      long long v23 = v22;
      sub_21699A5F0(&v23);
      if ((void)v23 == *((void *)&v23 + 1)) {
        uint64_t v21 = "";
      }
      else {
        uint64_t v21 = ", ";
      }
      sub_216779180(v20, (uint64_t)v21, 2 * ((void)v23 != *((void *)&v23 + 1)));
      sub_21699A5F0(&v22);
      uint64_t v18 = *((void *)&v22 + 1);
      uint64_t v17 = v22;
    }
    return sub_216779180(v8, (uint64_t)"]", 1);
  }
  return result;
}

void *sub_216AE309C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_216AE3120(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6 = a2;
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    sub_216AE329C((void **)a1);
    if (a4 >> 60) {
      sub_21677CB10();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_21682BF78((void *)a1, v12);
    uint64_t result = sub_2169E2D3C(v8, (uint64_t)v6, a3, *(void *)(a1 + 8));
LABEL_15:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = *(void *)(a1 + 8);
  unint64_t v14 = (result - (uint64_t)v9) >> 4;
  if (v14 < a4)
  {
    uint64_t v15 = (uint64_t)&a2[2 * v14];
    if ((void *)result != v9)
    {
      uint64_t v16 = 16 * v14;
      do
      {
        sub_2168EC6DC(v9, v6);
        v6 += 2;
        v9 += 2;
        v16 -= 16;
      }
      while (v16);
      uint64_t v9 = *(void **)(a1 + 8);
    }
    uint64_t result = sub_2169E2D3C(v8, v15, a3, (uint64_t)v9);
    goto LABEL_15;
  }
  if (a2 == (void *)a3)
  {
    uint64_t v17 = v9;
  }
  else
  {
    uint64_t v17 = v9;
    do
    {
      sub_2168EC6DC(v9, v6);
      v6 += 2;
      v9 += 2;
      v17 += 2;
    }
    while (v6 != (void *)a3);
    uint64_t result = *(void *)(a1 + 8);
  }
  while ((void *)result != v17)
    uint64_t result = sub_2168EE084(result - 16);
  *(void *)(a1 + 8) = v17;
  return result;
}

void sub_216AE3290(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216AE329C(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        uint64_t v3 = sub_2168EE084(v3 - 16);
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_216AE32FC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216AE32FC(a1, *a2);
    sub_216AE32FC(a1, a2[1]);
    sub_2168EE084((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_216AE3358(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = sub_216AE3450(a1, 0, 0, a3);
    uint64_t v9 = v8;
    uint64_t v10 = a3 + 2;
    uint64_t v11 = 1;
    if (v10 != a4)
    {
      uint64_t v12 = (uint64_t)v8;
      do
      {
        uint64_t v8 = sub_216AE3450(a1, v12, 0, v10);
        *(void *)(v12 + 8) = v8;
        ++v11;
        v10 += 2;
        uint64_t v12 = (uint64_t)v8;
      }
      while (v10 != a4);
    }
    uint64_t v13 = *a2;
    *(void *)(v13 + 8) = v9;
    *uint64_t v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_216AE3428(void *a1)
{
  __cxa_begin_catch(a1);
  sub_2173246AC(v1);
  __cxa_rethrow();
}

void sub_216AE343C(_Unwind_Exception *a1)
{
}

void *sub_216AE3450(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v7 = operator new(0x20uLL);
  void *v7 = a2;
  v7[1] = a3;
  sub_2168EE4C4(v7 + 2, a4);
  return v7;
}

void sub_216AE349C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216AE34B0(uint64_t **a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, void **a4)
{
  unint64_t v6 = (uint64_t **)sub_216AE355C((uint64_t)a1, &v11, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_216AE35FC((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    unint64_t v7 = v10[0];
    v10[0] = 0;
    sub_216AE3798((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_216AE355C(uint64_t a1, void *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    int v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = v4;
        uint64_t v9 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v4 + 4);
        if (!sub_216AE3670(v7, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)(v4 + 4))) {
          break;
        }
        uint64_t v4 = (void *)*v8;
        unint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!sub_216AE3670(v7, v9, a3)) {
        break;
      }
      unint64_t v5 = v8 + 1;
      uint64_t v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void *sub_216AE35FC@<X0>(uint64_t a1@<X0>, void **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_2168EE4C4(v6 + 4, *a2);
  v6[6] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216AE3658(_Unwind_Exception *a1)
{
  sub_216AE3798(v1, 0);
  _Unwind_Resume(a1);
}

BOOL sub_216AE3670(int a1, pxrInternal__aapl__pxrReserved__::VtValue *this, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  unint64_t Hash = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(this);
  unint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(a3);
  if (Hash < v6) {
    return 1;
  }
  if (Hash > v6 || (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(this, a3) & 1) != 0) {
    return 0;
  }
  sub_21699AA04((uint64_t)this);
  sub_21699AA04((uint64_t)a3);
  int v9 = (char)v19;
  uint64_t v10 = (void *)v18[0];
  unsigned __int8 v11 = v21;
  if ((v21 & 0x80u) == 0) {
    size_t v12 = v21;
  }
  else {
    size_t v12 = (size_t)__p[1];
  }
  if ((v21 & 0x80u) == 0) {
    uint64_t v13 = __p;
  }
  else {
    uint64_t v13 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    size_t v14 = v19;
  }
  else {
    size_t v14 = v18[1];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v15 = v18;
  }
  else {
    uint64_t v15 = (void *)v18[0];
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  int v17 = memcmp(v13, v15, v16);
  if (v17) {
    BOOL v7 = v17 < 0;
  }
  else {
    BOOL v7 = v12 < v14;
  }
  if (v9 < 0)
  {
    operator delete(v10);
    unsigned __int8 v11 = v21;
  }
  if ((v11 & 0x80) != 0) {
    operator delete(__p[0]);
  }
  return v7;
}

void sub_216AE377C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216AE3798(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2168EE084((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void *sub_216AE37F0(uint64_t *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    BOOL v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      unint64_t v19 = a5 + 1;
      int v20 = a3;
      do
      {
        int v20 = (void *)v20[1];
        --v19;
      }
      while (v19 > 1);
      uint64_t v21 = (uint64_t)(v12 - (void)a2) >> 4;
      uint64_t v22 = a5;
      if (v21 < a5)
      {
        if ((uint64_t)(v12 - (void)a2) <= -16)
        {
          uint64_t v27 = (uint64_t)(v12 - (void)a2) >> 4;
          int v20 = a3;
          do
            int v20 = (void *)*v20;
          while (!__CFADD__(v27++, 1));
        }
        else if ((void *)v12 == a2)
        {
          int v20 = a3;
        }
        else
        {
          unint64_t v23 = v21 + 1;
          int v20 = a3;
          do
          {
            int v20 = (void *)v20[1];
            --v23;
          }
          while (v23 > 1);
        }
        a1[1] = sub_216AE3B94(v9, (uint64_t)v20, a4, *(void *)(v9 - 8));
        uint64_t v22 = (uint64_t)(v12 - (void)v5) >> 4;
      }
      if (v22 >= 1)
      {
        sub_216AE3A08((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[2 * a5]);
        if (v20 != v7)
        {
          uint64_t v29 = v5;
          do
          {
            sub_2168EC6DC(v29, v7 + 2);
            BOOL v7 = (void *)v7[1];
            v29 += 2;
          }
          while (v7 != v20);
        }
      }
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60) {
        sub_21677CB10();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      if (v16 >> 3 > v14) {
        unint64_t v14 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      uint64_t v34 = v9;
      if (v17) {
        uint64_t v18 = (char *)sub_216787EE0(v9, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      unint64_t v24 = &v18[16 * v15];
      v31[0] = v18;
      v31[1] = v24;
      uint64_t v32 = v24;
      uint64_t v33 = &v18[16 * v17];
      uint64_t v25 = 16 * a5;
      long long v26 = &v24[16 * a5];
      do
      {
        sub_2168EE4C4(v24, v7 + 2);
        v24 += 16;
        BOOL v7 = (void *)v7[1];
        v25 -= 16;
      }
      while (v25);
      uint64_t v32 = v26;
      uint64_t v5 = sub_216AE3AB8(a1, v31, v5);
      sub_21696CB10((uint64_t)v31);
    }
  }
  return v5;
}

void sub_216AE39DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

void *sub_216AE3A08(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = v7 - a4;
  uint64_t v9 = (void *)(a2 + v7 - a4);
  if ((unint64_t)v9 >= a3)
  {
    uint64_t result = *(void **)(a1 + 8);
  }
  else
  {
    uint64_t result = *(void **)(a1 + 8);
    do
    {
      uint64_t v12 = sub_2168EDFA8(result, v9);
      v9 += 2;
      uint64_t result = v12 + 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = result;
  if (v7 != a4)
  {
    uint64_t v13 = (void *)(v7 - 16);
    uint64_t v14 = 16 * (v8 >> 4);
    uint64_t v15 = a2 - 16;
    do
    {
      uint64_t result = sub_2168ED33C(v13, (void *)(v15 + v14));
      v13 -= 2;
      v14 -= 16;
    }
    while (v14);
  }
  return result;
}

void *sub_216AE3AB8(void *a1, void *a2, void *a3)
{
  uint64_t v3 = a3;
  unint64_t v6 = (void *)a2[1];
  uint64_t v7 = (void *)*a1;
  uint64_t v8 = v6;
  if (v7 != a3)
  {
    uint64_t v9 = a3;
    uint64_t v8 = (void *)a2[1];
    do
    {
      v9 -= 2;
      uint64_t v8 = sub_2168EDFA8(v8 - 2, v9);
    }
    while (v9 != v7);
  }
  a2[1] = v8;
  uint64_t v10 = (void *)a1[1];
  uint64_t v11 = (void *)a2[2];
  if (v10 != v3)
  {
    do
    {
      sub_2168EDFA8(v11, v3);
      v3 += 2;
      v11 += 2;
    }
    while (v3 != v10);
    uint64_t v8 = (void *)a2[1];
  }
  a2[2] = v11;
  uint64_t v12 = (void *)*a1;
  *a1 = v8;
  a2[1] = v12;
  uint64_t v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  uint64_t v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_216AE3B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    uint64_t v7 = 0;
    do
    {
      sub_2168EE4C4((void *)(a4 + v7), (void *)(v6 + 16));
      uint64_t v6 = *(void *)(v6 + 8);
      v7 += 16;
    }
    while (v6 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_216AE3BF4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 16;
    do
    {
      sub_2168EE084(v4 + v2);
      v2 -= 16;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216AE3C18(uint64_t *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 4;
      if (v20 >= a5)
      {
        uint64_t v21 = (uint64_t)&a3[2 * a5];
      }
      else
      {
        uint64_t v21 = (uint64_t)&a3[2 * v20];
        a1[1] = sub_2169D374C(v9, v21, a4, *(void *)(v9 - 8));
        if (v19 < 1) {
          return v5;
        }
      }
      sub_216AE3A08((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[2 * a5]);
      if ((void *)v21 != v7)
      {
        uint64_t v22 = v5;
        do
        {
          sub_2168EC6DC(v22, v7);
          v7 += 2;
          v22 += 2;
        }
        while (v7 != (void *)v21);
      }
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60) {
        sub_21677CB10();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      if (v16 >> 3 > v14) {
        unint64_t v14 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      uint64_t v30 = v9;
      if (v17) {
        uint64_t v18 = (char *)sub_216787EE0(v9, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      unint64_t v23 = &v18[16 * v15];
      v27[0] = v18;
      v27[1] = v23;
      uint64_t v28 = v23;
      uint64_t v29 = &v18[16 * v17];
      uint64_t v24 = 16 * a5;
      uint64_t v25 = &v23[16 * a5];
      do
      {
        sub_2168EE4C4(v23, v7);
        v23 += 16;
        v7 += 2;
        v24 -= 16;
      }
      while (v24);
      uint64_t v28 = v25;
      uint64_t v5 = sub_216AE3AB8(a1, v27, v5);
      sub_21696CB10((uint64_t)v27);
    }
  }
  return v5;
}

void sub_216AE3DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216AE3DD4(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v12[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[3];
  if (v4)
  {
    uint64_t v6 = *a1;
    uint64_t v5 = a1[1];
    sub_2168EE4C4(v10, a2);
    uint64_t v11 = (v5 - v6) >> 4;
    sub_2168EDFA8(v12, v10);
    uint64_t v12[2] = v11;
    uint64_t v7 = sub_216AE4290(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)v12, v12);
    LOBYTE(v5) = v8;
    sub_2168EE084((uint64_t)v12);
    sub_2168EE084((uint64_t)v10);
    if (!(_BYTE)v5) {
      return *a1 + 16 * v7[4];
    }
  }
  else
  {
    uint64_t result = sub_216AE4124(a1, a2);
    if (a1[1] != result) {
      return result;
    }
  }
  sub_216AD3B24(a1, a2);
  sub_216AE41A8(a1);
  return a1[1] - 16;
}

void sub_216AE3EF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_2168EE084((uint64_t)va1);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216AE3F1C(void *a1, void *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 3;
    if (v11 >> 3 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      unint64_t v14 = (char *)sub_216787EE0(v4, v13);
    }
    else {
      unint64_t v14 = 0;
    }
    uint64_t v15 = v14;
    uint64_t v16 = &v14[16 * v10];
    uint64_t v18 = &v14[16 * v13];
    sub_2168EDFA8(v16, a2);
    unint64_t v17 = v16 + 16;
    sub_21696CA88(a1, &v15);
    unint64_t v9 = a1[1];
    uint64_t result = sub_21696CB10((uint64_t)&v15);
  }
  else
  {
    uint64_t result = (uint64_t)sub_2168EDFA8(*(void **)(v4 - 8), a2);
    unint64_t v9 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v9;
  return result;
}

void sub_216AE400C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21696CB10((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216AE4020(uint64_t a1)
{
  sub_216AE4064((uint64_t *)(a1 + 24), 0);
  uint64_t v3 = (void **)a1;
  sub_216932118(&v3);
  return a1;
}

void sub_216AE4064(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216AE40A4(v3);
    operator delete(v4);
  }
}

uint64_t sub_216AE40A4(uint64_t a1)
{
  sub_216AE40E0(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216AE40E0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168EE084((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_216AE4124(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    unint64_t v5 = sub_216AE45F4(v4, a2);
    if (v5) {
      return *a1 + 16 * v5[4];
    }
    else {
      return a1[1];
    }
  }
  else
  {
    char v8 = a1;
    uint64_t v7 = *a1;
    uint64_t v6 = v8[1];
    while (v7 != v6)
    {
      if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v7, a2)) {
        return v7;
      }
      v7 += 16;
    }
  }
  return v6;
}

void sub_216AE41A8(uint64_t *a1)
{
  if ((unint64_t)(a1[1] - *a1) >= 0x7F1)
  {
    uint64_t v2 = a1 + 3;
    if (!a1[3])
    {
      uint64_t v3 = operator new(0x28uLL);
      _OWORD *v3 = 0u;
      v3[1] = 0u;
      *((_DWORD *)v3 + 8) = 1065353216;
      sub_21678A04C((uint64_t)v3, 0x80uLL);
      sub_216AE4064(v2, (uint64_t)v3);
      uint64_t v4 = *a1;
      if (a1[1] != *a1)
      {
        uint64_t v5 = 0;
        unint64_t v6 = 0;
        do
        {
          uint64_t v7 = a1[3];
          char v8 = (void *)(v4 + v5);
          sub_216AE4704(v7, (pxrInternal__aapl__pxrReserved__::VtValue *)(v4 + v5), (uint64_t)&unk_2174BFD90, &v8)[4] = v6++;
          uint64_t v4 = *a1;
          v5 += 16;
        }
        while (v6 < (a1[1] - *a1) >> 4);
      }
    }
  }
}

void sub_216AE4278(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)sub_216AE40A4(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void *sub_216AE4290(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this, void *a3)
{
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * pxrInternal__aapl__pxrReserved__::VtValue::GetHash(this));
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    uint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v7)
          {
            if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v12 + 2, this)) {
              return v12;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  sub_216AE4514(a1, v7, a3, (uint64_t)v23);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)v23[0] = *v20;
    *uint64_t v20 = v23[0];
  }
  else
  {
    *(void *)v23[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v23[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v23[0])
    {
      unint64_t v21 = *(void *)(*(void *)v23[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v21 >= v8) {
          v21 %= v8;
        }
      }
      else
      {
        v21 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v23[0];
    }
  }
  uint64_t v12 = (void *)v23[0];
  v23[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216AE459C((uint64_t)v23, 0);
  return v12;
}

void sub_216AE44FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AE459C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_216AE4514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x28uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_2168EE4C4(v8 + 2, a3);
  void v8[4] = a3[2];
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216AE4584(_Unwind_Exception *a1)
{
  sub_216AE459C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216AE459C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2168EE084((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *sub_216AE45F4(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t Hash = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(this);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * Hash);
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v6;
    if (v6 >= *(void *)&v5) {
      unint64_t v9 = v6 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v6;
  }
  unint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v12 == v6)
      {
        if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v11 + 2, this)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(void *)&v5) {
            v12 %= *(void *)&v5;
          }
        }
        else
        {
          v12 &= *(void *)&v5 - 1;
        }
        if (v12 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

void *sub_216AE4704(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this, uint64_t a3, void **a4)
{
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * pxrInternal__aapl__pxrReserved__::VtValue::GetHash(this));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    unint64_t v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v13 + 2, this)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  sub_216AE49A0(a1, v8, a4, (uint64_t)v24);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_21678A04C(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *unint64_t v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9) {
          v22 %= v9;
        }
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  unint64_t v13 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216AE459C((uint64_t)v24, 0);
  return v13;
}

void sub_216AE4988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AE459C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_216AE49A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x28uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_2168EE4C4(v8 + 2, *a3);
  void v8[4] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216AE4A08(_Unwind_Exception *a1)
{
  sub_216AE459C(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_216AE4A20(uint64_t *a1, void *a2, void *a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a2 != a3)
  {
    int8x8_t v5 = a2;
    do
    {
      unint64_t v6 = sub_216AE4AB4((uint64_t)a1, 0, 0, v5);
      uint64_t v7 = *a1;
      *unint64_t v6 = *a1;
      v6[1] = a1;
      *(void *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      v5 += 2;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_216AE4AA0(_Unwind_Exception *a1)
{
  sub_216ADD9E4(v1);
  _Unwind_Resume(a1);
}

void *sub_216AE4AB4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = operator new(0x20uLL);
  void *v7 = a2;
  v7[1] = a3;
  sub_2168EE4C4(v7 + 2, a4);
  return v7;
}

void sub_216AE4B00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216AE4B14(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_21682BF78(result, a4);
    uint64_t result = (void *)sub_216AE3B94((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216AE4B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216932118(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_216AE4B9C(uint64_t **a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, void *a3)
{
  int8x8_t v5 = (uint64_t **)sub_216AE355C((uint64_t)a1, &v10, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    sub_216AE4C30((uint64_t)a1, a3, (uint64_t)v9);
    sub_21677B358(a1, v10, v7, v9[0]);
    unint64_t v6 = v9[0];
    v9[0] = 0;
    sub_216AE3798((uint64_t)v9, 0);
  }
  return v6;
}

void *sub_216AE4C30@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_2168EE4C4(v6 + 4, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216AE4C84(_Unwind_Exception *a1)
{
  sub_216AE3798(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_216AE4C9C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  unint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  int v5 = a1 + 16;
  unint64_t v6 = (void *)(a1 + 8);
  do
  {
    BOOL v7 = sub_216AE3670(v5, (pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 4), a2);
    unint64_t v8 = v3 + 1;
    if (!v7)
    {
      unint64_t v8 = v3;
      unint64_t v6 = v3;
    }
    unint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v2 || sub_216AE3670(v5, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)(v6 + 4))) {
    return v2;
  }
  return v6;
}

uint64_t sub_216AE4D2C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    int v4 = a1 + 16;
    uint64_t v5 = 1;
    do
    {
      if (!sub_216AE3670(v4, this, (pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 4)))
      {
        if (!sub_216AE3670(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 4), this)) {
          return v5;
        }
        ++v2;
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return 0;
}

void *sub_216AE4DAC(void *result, uint64_t a2, uint64_t *a3, unsigned char *a4, char a5)
{
  unint64_t v8 = result;
  if ((a5 & 1) != 0 || *a3 != a3[1])
  {
    if (*a4) {
      uint64_t v9 = "";
    }
    else {
      uint64_t v9 = ", ";
    }
    uint64_t v10 = sub_216779180(result, (uint64_t)v9, 2 * (*a4 == 0));
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    unint64_t v14 = sub_216779180(v10, v12, v13);
    sub_216779180(v14, (uint64_t)" Items: [", 9);
    *a4 = 0;
    uint64_t v17 = *a3;
    uint64_t v18 = a3[1];
    *(void *)&long long v22 = *a3;
    *((void *)&v22 + 1) = v18;
    while (v17 != v18)
    {
      uint64_t v19 = sub_21699A904((uint64_t *)&v22, v15, v16);
      size_t v20 = (void *)pxrInternal__aapl__pxrReserved__::operator<<(v8, v19);
      long long v23 = v22;
      sub_21699A984(&v23);
      if ((void)v23 == *((void *)&v23 + 1)) {
        unint64_t v21 = "";
      }
      else {
        unint64_t v21 = ", ";
      }
      sub_216779180(v20, (uint64_t)v21, 2 * ((void)v23 != *((void *)&v23 + 1)));
      sub_21699A984(&v22);
      uint64_t v18 = *((void *)&v22 + 1);
      uint64_t v17 = v22;
    }
    return sub_216779180(v8, (uint64_t)"]", 1);
  }
  return result;
}

void *sub_216AE4ED4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_216AE4F58(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216AE4F58(a1, *a2);
    sub_216AE4F58(a1, a2[1]);
    sub_216AE4FB4((_DWORD *)a2 + 8);
    operator delete(a2);
  }
}

_DWORD *sub_216AE4FB4(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

uint64_t *sub_216AE4FF4(uint64_t a1, uint64_t *a2, _DWORD *a3, _DWORD *a4)
{
  if (a3 != a4)
  {
    unint64_t v8 = sub_216AE50EC(a1, 0, 0, a3);
    uint64_t v9 = v8;
    uint64_t v10 = a3 + 2;
    uint64_t v11 = 1;
    if (v10 != a4)
    {
      uint64_t v12 = (uint64_t)v8;
      do
      {
        unint64_t v8 = sub_216AE50EC(a1, v12, 0, v10);
        *(void *)(v12 + 8) = v8;
        ++v11;
        v10 += 2;
        uint64_t v12 = (uint64_t)v8;
      }
      while (v10 != a4);
    }
    uint64_t v13 = *a2;
    *(void *)(v13 + 8) = v9;
    *uint64_t v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_216AE50C4(void *a1)
{
  __cxa_begin_catch(a1);
  sub_2173246E4(v1);
  __cxa_rethrow();
}

void sub_216AE50D8(_Unwind_Exception *a1)
{
}

void *sub_216AE50EC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  BOOL v7 = operator new(0x18uLL);
  void *v7 = a2;
  v7[1] = a3;
  sub_216981010((_DWORD *)v7 + 4, a4);
  sub_21698105C((_DWORD *)v7 + 5, a4 + 1);
  return v7;
}

uint64_t **sub_216AE5144(uint64_t **a1, unint64_t *a2, uint64_t a3, _DWORD **a4)
{
  BOOL v7 = a1 + 1;
  unint64_t v6 = a1[1];
  unint64_t v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (v6)
  {
    unint64_t v10 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v11 = v6[4];
        if (v10 >= v11) {
          break;
        }
        unint64_t v6 = *v9;
        unint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v12 = operator new(0x30uLL);
    v15[1] = v7;
    uint64_t v13 = *a4;
    sub_216981010(v12 + 8, v13);
    sub_21698105C(v12 + 9, v13 + 1);
    *((void *)v12 + 5) = 0;
    char v16 = 1;
    sub_21677B358(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v15[0] = 0;
    sub_216AE523C((uint64_t)v15, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void sub_216AE523C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216AE4FB4(v2 + 8);
    }
    operator delete(v2);
  }
}

int *sub_216AE5294(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 3)
    {
      unint64_t v19 = a5 + 1;
      size_t v20 = (void *)a3;
      do
      {
        size_t v20 = (void *)v20[1];
        --v19;
      }
      while (v19 > 1);
      uint64_t v21 = (uint64_t)(v12 - (void)a2) >> 3;
      uint64_t v22 = a5;
      if (v21 < a5)
      {
        if ((uint64_t)(v12 - (void)a2) <= -8)
        {
          uint64_t v24 = (uint64_t)(v12 - (void)a2) >> 3;
          size_t v20 = (void *)a3;
          do
            size_t v20 = (void *)*v20;
          while (!__CFADD__(v24++, 1));
        }
        else if ((int *)v12 == a2)
        {
          size_t v20 = (void *)a3;
        }
        else
        {
          unint64_t v23 = v21 + 1;
          size_t v20 = (void *)a3;
          do
          {
            size_t v20 = (void *)v20[1];
            --v23;
          }
          while (v23 > 1);
        }
        a1[1] = (uint64_t)sub_216AE54E8(v9, (uint64_t)v20, a4, *(_DWORD **)(v9 - 8));
        uint64_t v22 = (uint64_t)(v12 - (void)v5) >> 3;
      }
      if (v22 >= 1)
      {
        sub_2169DCAD8((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[2 * a5]);
        sub_216AE5584((uint64_t)&v27, a3, (uint64_t)v20, v5);
      }
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 3);
      if (v14 >> 61) {
        sub_21677CB10();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 3;
      uint64_t v16 = v10 - v13;
      if (v16 >> 2 > v14) {
        unint64_t v14 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      uint64_t v31 = v9;
      if (v17) {
        uint64_t v18 = (char *)sub_21677CB28(v9, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v27 = v18;
      uint64_t v28 = &v18[8 * v15];
      uint64_t v29 = v28;
      uint64_t v30 = &v18[8 * v17];
      sub_216AE5474(&v27, a3, a5);
      uint64_t v5 = (int *)sub_2169DCBF4((uint64_t)a1, &v27, v5);
      sub_216981DDC(&v27);
    }
  }
  return v5;
}

void sub_216AE5454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

_DWORD *sub_216AE5474(_DWORD *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  int v4 = (_DWORD *)*((void *)result + 2);
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    BOOL v7 = &v4[2 * a3];
    do
    {
      sub_216981010(v4, (_DWORD *)(a2 + 16));
      uint64_t result = sub_21698105C(v4 + 1, (_DWORD *)(a2 + 20));
      v4 += 2;
      a2 = *(void *)(a2 + 8);
      v6 -= 8;
    }
    while (v6);
    int v4 = v7;
  }
  *((void *)v3 + 2) = v4;
  return result;
}

_DWORD *sub_216AE54E8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  int v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216981010(v4, (_DWORD *)(v6 + 16));
      sub_21698105C(v4 + 1, (_DWORD *)(v6 + 20));
      uint64_t v6 = *(void *)(v6 + 8);
      int v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_21698109C((uint64_t)v8);
  return v4;
}

uint64_t sub_216AE5584(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    sub_2169C487C(a4, (_DWORD *)(v5 + 16));
    sub_2169C48D4(a4 + 1, (_DWORD *)(v5 + 20));
    uint64_t v5 = *(void *)(v5 + 8);
    a4 += 2;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_216AE55F4(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4 = a1[3];
  if (v4)
  {
    uint64_t v5 = (a1[1] - *a1) >> 3;
    sub_216981010(&v11, a2);
    sub_21698105C(&v12, a2 + 1);
    uint64_t v13 = v5;
    unsigned int v14 = v11;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(&v11);
    int v15 = v12;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(&v12);
    uint64_t v16 = v13;
    uint64_t v6 = sub_216A62954(v4, &v14, (uint64_t)&v14);
    LOBYTE(v5) = v7;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_21697C414(&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
    sub_21697C414(&v11);
    if (!(_BYTE)v5) {
      return *a1 + 8 * v6[3];
    }
    unint64_t v8 = (_DWORD *)a1[1];
  }
  else
  {
    unint64_t v8 = (_DWORD *)sub_216AE5860(a1, a2);
    if ((_DWORD *)a1[1] != v8) {
      return (uint64_t)v8;
    }
  }
  if ((unint64_t)v8 >= a1[2])
  {
    uint64_t v9 = sub_216981B30(a1, a2);
  }
  else
  {
    sub_216981010(v8, a2);
    sub_21698105C(v8 + 1, a2 + 1);
    uint64_t v9 = (uint64_t)(v8 + 2);
  }
  a1[1] = v9;
  sub_216AE58D8(a1);
  return a1[1] - 8;
}

void sub_216AE5778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
}

uint64_t sub_216AE579C(uint64_t a1)
{
  sub_21697C6F8((uint64_t *)(a1 + 24), 0);
  unint64_t v3 = (void **)a1;
  sub_216981168(&v3);
  return a1;
}

_DWORD *sub_216AE57E0(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

_DWORD *sub_216AE5820(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

uint64_t sub_216AE5860(void *a1, unsigned int *a2)
{
  unint64_t v3 = (void *)a1[3];
  if (v3)
  {
    uint64_t v4 = sub_216A62F60(v3, a2);
    if (v4) {
      return *a1 + 8 * v4[3];
    }
    else {
      return a1[1];
    }
  }
  else
  {
    uint64_t v6 = (void *)*a1;
    uint64_t result = a1[1];
    if (*a1 != result)
    {
      while (*v6 != *(void *)a2)
      {
        if (++v6 == (void *)result) {
          return result;
        }
      }
      return (uint64_t)v6;
    }
  }
  return result;
}

void sub_216AE58D8(uint64_t *a1)
{
  if ((unint64_t)(a1[1] - *a1) >= 0x3F9)
  {
    uint64_t v2 = a1 + 3;
    if (!a1[3])
    {
      unint64_t v3 = operator new(0x28uLL);
      _OWORD *v3 = 0u;
      v3[1] = 0u;
      *((_DWORD *)v3 + 8) = 1065353216;
      sub_21678A04C((uint64_t)v3, 0x80uLL);
      sub_21697C6F8(v2, (uint64_t)v3);
      uint64_t v4 = *a1;
      if (a1[1] != *a1)
      {
        uint64_t v5 = 0;
        unint64_t v6 = 0;
        do
        {
          uint64_t v7 = a1[3];
          unint64_t v8 = (_DWORD *)(v4 + v5);
          sub_216AE59C0(v7, (unsigned int *)(v4 + v5), (uint64_t)&unk_2174BFD90, &v8)[3] = v6++;
          uint64_t v4 = *a1;
          v5 += 8;
        }
        while (v6 < (a1[1] - *a1) >> 3);
      }
    }
  }
}

void sub_216AE59A8(_Unwind_Exception *a1)
{
  unint64_t v3 = (void *)sub_21697C738(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void *sub_216AE59C0(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = v6;
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = v6 & (v7 - 1);
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(void *)a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_216AE5C30(a1, v6, a4, (uint64_t)v21);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *(void *)v21[0] = *v18;
    void *v18 = v21[0];
  }
  else
  {
    *(void *)v21[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v21[0])
    {
      unint64_t v19 = *(void *)(*(void *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v21[0];
    }
  }
  uint64_t v10 = (void *)v21[0];
  v21[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216A62C38((uint64_t)v21, 0);
  return v10;
}

void sub_216AE5C18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216A62C38((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_216AE5C30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = operator new(0x20uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  void *v8 = 0;
  v8[1] = a2;
  uint64_t v9 = *a3;
  sub_216981010((_DWORD *)v8 + 4, v9);
  uint64_t result = sub_21698105C((_DWORD *)v8 + 5, v9 + 1);
  void v8[3] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

_DWORD *sub_216AE5CA4(_DWORD *result)
{
  if (*((unsigned char *)result + 8))
  {
    uint64_t v1 = result;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(result + 1);
    uint64_t result = sub_21697C414(v1);
    *((unsigned char *)v1 + 8) = 0;
  }
  return result;
}

uint64_t sub_216AE5CE4(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  size_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_21677CB28(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  float v13 = v10;
  BOOL v14 = &v10[8 * v4];
  unint64_t v16 = &v10[8 * v9];
  sub_21697D878(v14, a2);
  sub_21697D8B4((_DWORD *)v14 + 1, a2 + 1);
  unint64_t v15 = v14 + 8;
  sub_216981C20(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216981DDC(&v13);
  return v11;
}

void sub_216AE5DC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216981DDC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216AE5DD4(uint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a2 != a3)
  {
    unint64_t v5 = a2;
    do
    {
      unint64_t v6 = sub_216AE50EC((uint64_t)a1, 0, 0, v5);
      uint64_t v7 = *a1;
      *unint64_t v6 = *a1;
      v6[1] = a1;
      *(void *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      v5 += 2;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_216AE5E54(_Unwind_Exception *a1)
{
  sub_216ADDA58(v1);
  _Unwind_Resume(a1);
}

void *sub_216AE5E68(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_21677CACC(result, a4);
    uint64_t result = sub_216AE54E8((uint64_t)(v6 + 2), a2, a3, (_DWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216AE5ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216981168(&a9);
  _Unwind_Resume(a1);
}

uint64_t **sub_216AE5EF0(uint64_t **a1, unint64_t *a2, _DWORD *a3)
{
  unint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  uint64_t v7 = a1 + 1;
  uint64_t v8 = a1 + 1;
  if (v5)
  {
    unint64_t v9 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v10 = *(uint64_t *)((char *)v5 + 28);
        if (v9 >= v10) {
          break;
        }
        unint64_t v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_9;
        }
      }
      if (v10 >= v9) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v11 = (uint64_t *)operator new(0x28uLL);
    v13[1] = v6;
    sub_216981010((_DWORD *)v11 + 7, a3);
    sub_21698105C((_DWORD *)v11 + 8, a3 + 1);
    char v14 = 1;
    sub_21677B358(a1, (uint64_t)v8, v7, v11);
    v13[0] = 0;
    sub_216981880((uint64_t)v13, 0);
    return (uint64_t **)v11;
  }
  return v8;
}

void *sub_216AE5FE0(void *result, uint64_t a2, uint64_t *a3, unsigned char *a4, char a5)
{
  uint64_t v8 = result;
  if ((a5 & 1) != 0 || *a3 != a3[1])
  {
    if (*a4) {
      unint64_t v9 = "";
    }
    else {
      unint64_t v9 = ", ";
    }
    unint64_t v10 = sub_216779180(result, (uint64_t)v9, 2 * (*a4 == 0));
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    char v14 = sub_216779180(v10, v12, v13);
    sub_216779180(v14, (uint64_t)" Items: [", 9);
    *a4 = 0;
    uint64_t v17 = *a3;
    uint64_t v18 = a3[1];
    *(void *)&long long v22 = *a3;
    *((void *)&v22 + 1) = v18;
    while (v17 != v18)
    {
      unint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169984B8((uint64_t *)&v22, v15, v16);
      size_t v20 = pxrInternal__aapl__pxrReserved__::operator<<(v8, v19);
      long long v23 = v22;
      sub_216998538(&v23);
      if ((void)v23 == *((void *)&v23 + 1)) {
        uint64_t v21 = "";
      }
      else {
        uint64_t v21 = ", ";
      }
      sub_216779180(v20, (uint64_t)v21, 2 * ((void)v23 != *((void *)&v23 + 1)));
      sub_216998538(&v22);
      uint64_t v18 = *((void *)&v22 + 1);
      uint64_t v17 = v22;
    }
    return sub_216779180(v8, (uint64_t)"]", 1);
  }
  return result;
}

void sub_216AE6108(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216AE6108(a1, *a2);
    sub_216AE6108(a1, a2[1]);
    sub_216AE6164((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_216AE6164(uint64_t a1)
{
  sub_2168EBBB8((void ***)(a1 + 48), 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t *sub_216AE61CC(uint64_t a1, uint64_t *a2, long long *a3, long long *a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = sub_216AE62C4(a1, 0, 0, a3);
    unint64_t v9 = v8;
    unint64_t v10 = (long long *)((char *)a3 + 56);
    uint64_t v11 = 1;
    if (v10 != a4)
    {
      uint64_t v12 = (uint64_t)v8;
      do
      {
        uint64_t v8 = sub_216AE62C4(a1, v12, 0, v10);
        *(void *)(v12 + 8) = v8;
        ++v11;
        unint64_t v10 = (long long *)((char *)v10 + 56);
        uint64_t v12 = (uint64_t)v8;
      }
      while (v10 != a4);
    }
    uint64_t v13 = *a2;
    *(void *)(v13 + 8) = v9;
    *unint64_t v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_216AE629C(void *a1)
{
  __cxa_begin_catch(a1);
  sub_21732471C(v1);
  __cxa_rethrow();
}

void sub_216AE62B0(_Unwind_Exception *a1)
{
}

void *sub_216AE62C4(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v7 = operator new(0x48uLL);
  *(void *)uint64_t v7 = a2;
  *((void *)v7 + 1) = a3;
  sub_2169D5338((char *)v7 + 16, a4);
  return v7;
}

void sub_216AE6310(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216AE6324(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (uint64_t **)sub_216AE63D0((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_216AE6464((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_216AE64D8((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_216AE63D0(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = (void *)v4;
        uint64_t v8 = (unsigned __int8 *)(v4 + 32);
        if (!pxrInternal__aapl__pxrReserved__::SdfReference::operator<(a3, (unsigned __int8 *)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v7;
        unint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfReference::operator<(v8, a3)) {
        break;
      }
      unint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

char *sub_216AE6464@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (char *)operator new(0x60uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_2169D5338(v6 + 32, *a2);
  *((void *)v6 + 11) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216AE64C0(_Unwind_Exception *a1)
{
  sub_216AE64D8(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216AE64D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216AE6164((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

std::string *sub_216AE6530(uint64_t *a1, std::string *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = (uint64_t)a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      unint64_t v20 = a5 + 1;
      uint64_t v21 = a3;
      do
      {
        uint64_t v21 = (void *)v21[1];
        --v20;
      }
      while (v20 > 1);
      uint64_t v22 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (void)a2) >> 3);
      uint64_t v23 = a5;
      if (v22 < a5)
      {
        if ((uint64_t)(v12 - (void)a2) <= -56)
        {
          uint64_t v28 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (void)a2) >> 3);
          uint64_t v21 = a3;
          do
            uint64_t v21 = (void *)*v21;
          while (!__CFADD__(v28++, 1));
        }
        else if ((std::string *)v12 == a2)
        {
          uint64_t v21 = a3;
        }
        else
        {
          unint64_t v24 = v22 + 1;
          uint64_t v21 = a3;
          do
          {
            uint64_t v21 = (void *)v21[1];
            --v24;
          }
          while (v24 > 1);
        }
        a1[1] = (uint64_t)sub_216AE6934(v9, (uint64_t)v21, a4, *(char **)(v9 - 8));
        uint64_t v23 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (void)v5) >> 3);
      }
      if (v23 >= 1)
      {
        sub_216AE67A4((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)v5 + 56 * a5);
        sub_216AE6AA8((int)v31, v7, (uint64_t)v21, v5);
      }
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x492492492492492) {
        sub_21677CB10();
      }
      uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x249249249249249) {
        unint64_t v18 = 0x492492492492492;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v34 = v9;
      if (v18) {
        unint64_t v19 = (char *)sub_2167B421C(v9, v18);
      }
      else {
        unint64_t v19 = 0;
      }
      uint64_t v25 = &v19[56 * v15];
      v31[0] = v19;
      v31[1] = v25;
      uint64_t v32 = v25;
      uint64_t v33 = &v19[56 * v18];
      uint64_t v26 = 56 * a5;
      uint64_t v27 = &v25[56 * a5];
      do
      {
        sub_2169D5338(v25, (long long *)(v7 + 16));
        v25 += 56;
        uint64_t v7 = *(void *)(v7 + 8);
        v26 -= 56;
      }
      while (v26);
      uint64_t v32 = v27;
      uint64_t v5 = (std::string *)sub_216AE6880(a1, v31, (uint64_t)v5);
      sub_216AE6D78(v31);
    }
  }
  return v5;
}

void sub_216AE6778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216AE67A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = (void *)(v7 + v10);
      uint64_t v12 = v6 + v10;
      long long v13 = *(_OWORD *)(v7 + v10);
      *(void *)(v12 + 16) = *(void *)(v7 + v10 + 16);
      *(_OWORD *)uint64_t v12 = v13;
      v11[1] = 0;
      void v11[2] = 0;
      *uint64_t v11 = 0;
      sub_21697D878((_DWORD *)(v6 + v10 + 24), (_DWORD *)(v7 + v10 + 24));
      sub_21697D8B4((_DWORD *)(v6 + v10 + 28), (_DWORD *)(v7 + v10 + 28));
      *(_OWORD *)(v12 + 32) = *(_OWORD *)(v7 + v10 + 32);
      uint64_t v14 = *(void *)(v7 + v10 + 48);
      v11[6] = 0;
      *(void *)(v12 + 48) = v14;
      v10 += 56;
    }
    while ((unint64_t)(v11 + 7) < a3);
    uint64_t v8 = v6 + v10;
  }
  *(void *)(a1 + 8) = v8;
  return sub_216AE69D8((uint64_t)&v16, a2, v7, v6);
}

uint64_t sub_216AE6880(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_216AE6B38((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_216AE6C1C(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

char *sub_216AE6934(uint64_t a1, uint64_t a2, uint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v10 = __dst;
  uint64_t v11 = __dst;
  v8[0] = a1;
  v8[1] = &v10;
  int v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_2169D5338(v4, (long long *)(v6 + 16));
      uint64_t v6 = *(void *)(v6 + 8);
      uint64_t v4 = v11 + 56;
      v11 += 56;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_2169D53E8((uint64_t)v8);
  return v4;
}

void sub_216AE69C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216AE69D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      char v9 = (void **)(a4 + v7 - 56);
      if (*(char *)(a4 + v7 - 33) < 0) {
        operator delete(*v9);
      }
      uint64_t v10 = (long long *)(a3 + v7 - 56);
      long long v11 = *v10;
      *(void *)(a4 + v7 - 4sub_2168EBBB8(&a9, 0) = *(void *)(a3 + v7 - 40);
      *(_OWORD *)char v9 = v11;
      *(unsigned char *)(a3 + v7 - 33) = 0;
      *(unsigned char *)uint64_t v10 = 0;
      sub_21697DE94((int *)(v8 - 32), (int *)(a3 + v7 - 32));
      sub_21697DEEC((int *)(v8 - 28), (int *)(a3 + v7 - 28));
      *(_OWORD *)(v8 - 24) = *(_OWORD *)(a3 + v7 - 24);
      uint64_t v12 = *(void ***)(a3 + v7 - 8);
      *(void *)(a3 + v7 - 8) = 0;
      sub_2168EBBB8((void ***)(v8 - 8), v12);
      v7 -= 56;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_216AE6AA8(int a1, uint64_t a2, uint64_t a3, std::string *this)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    std::string::operator=(this, (const std::string *)(v5 + 16));
    sub_2169C487C((int *)&this[1], (_DWORD *)(v5 + 40));
    sub_2169C48D4((int *)this[1].__r_.__value_.__r.__words + 1, (_DWORD *)(v5 + 44));
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = *(_OWORD *)(v5 + 48);
    pxrInternal__aapl__pxrReserved__::VtDictionary::operator=((const void ****)&this[2], (const void ****)(v5 + 64));
    uint64_t v5 = *(void *)(v5 + 8);
    this = (std::string *)((char *)this + 56);
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_216AE6B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  char v15 = 0;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      long long v10 = *(_OWORD *)(v9 - 56);
      *(void *)(v7 - 4sub_2168EBBB8(&a9, 0) = *(void *)(v9 - 40);
      *(_OWORD *)(v7 - 56) = v10;
      *(void *)(v9 - 48) = 0;
      *(void *)(v9 - 4sub_2168EBBB8(&a9, 0) = 0;
      *(void *)(v9 - 56) = 0;
      sub_21697D878((_DWORD *)(v7 - 32), (_DWORD *)(v9 - 32));
      sub_21697D8B4((_DWORD *)(v7 - 28), (_DWORD *)(v9 - 28));
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(v9 - 24);
      uint64_t v11 = *(void *)(v9 - 8);
      *(void *)(v9 - 8) = 0;
      *(void *)(v7 - 8) = v11;
      uint64_t v7 = *((void *)&v17 + 1) - 56;
      *((void *)&v17 + 1) -= 56;
      v9 -= 56;
    }
    while (v9 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  sub_216AE6CEC((uint64_t)v14);
  return v12;
}

uint64_t sub_216AE6C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v13 = a4;
  uint64_t v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 28;
    do
    {
      long long v7 = *(_OWORD *)(v6 - 28);
      *(void *)(v4 + 16) = *(void *)(v6 - 12);
      *(_OWORD *)uint64_t v4 = v7;
      *(void *)(v6 - 12) = 0;
      *(void *)(v6 - 2sub_2168EBBB8(&a9, 0) = 0;
      *(void *)(v6 - 28) = 0;
      sub_21697D878((_DWORD *)(v4 + 24), (_DWORD *)(v6 - 4));
      sub_21697D8B4((_DWORD *)(v4 + 28), (_DWORD *)v6);
      *(_OWORD *)(v4 + 32) = *(_OWORD *)(v6 + 4);
      uint64_t v8 = *(void *)(v6 + 20);
      *(void *)(v6 + 2sub_2168EBBB8(&a9, 0) = 0;
      *(void *)(v4 + 48) = v8;
      uint64_t v4 = v14 + 56;
      v14 += 56;
      uint64_t v9 = v6 + 28;
      v6 += 56;
    }
    while (v9 != a3);
  }
  char v12 = 1;
  sub_2169D53E8((uint64_t)v11);
  return v4;
}

uint64_t sub_216AE6CEC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216AE6D24((uint64_t *)a1);
  }
  return a1;
}

void sub_216AE6D24(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_2169CC724(v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void **sub_216AE6D78(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216AE6DAC(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 56;
    sub_2169CC724(v4, i - 56);
  }
}

long long *sub_216AE6DF4(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)uint64_t v5 = 0;
      sub_21697DE94((int *)(a4 + 24), (int *)v5 + 6);
      sub_21697DEEC((int *)(a4 + 28), (int *)v5 + 7);
      *(_OWORD *)(a4 + 32) = v5[2];
      uint64_t v8 = (void **)*((void *)v5 + 6);
      *((void *)v5 + 6) = 0;
      sub_2168EBBB8((void ***)(a4 + 48), v8);
      a4 += 56;
      uint64_t v5 = (long long *)((char *)v5 + 56);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_216AE6EA0(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_2167B421C(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[56 * v4];
  long long v16 = &v10[56 * v9];
  sub_2169D5338(v14, a2);
  char v15 = v14 + 56;
  sub_216AE6FC0(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216AE6D78(&v13);
  return v11;
}

void sub_216AE6FAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AE6D78((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216AE6FC0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216AE6B38((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

std::string *sub_216AE7038(uint64_t *a1, std::string *a2, std::string *a3, long long *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (void)a2) >> 3) >= a5)
      {
        uint64_t v21 = (long long *)((char *)a3 + 56 * a5);
      }
      else
      {
        uint64_t v21 = (long long *)(&a3->__r_.__value_.__l.__data_ + ((uint64_t)(v12 - (void)a2) >> 3));
        a1[1] = (uint64_t)sub_216AE7248(v9, v21, a4, *(char **)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_216AE67A4((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)v5 + 56 * a5);
      sub_216A995EC((int)v26, v7, (std::string *)v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x492492492492492) {
        sub_21677CB10();
      }
      uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x249249249249249) {
        unint64_t v18 = 0x492492492492492;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        unint64_t v19 = (char *)sub_2167B421C(v9, v18);
      }
      else {
        unint64_t v19 = 0;
      }
      uint64_t v22 = &v19[56 * v15];
      v26[0] = v19;
      v26[1] = v22;
      uint64_t v27 = v22;
      uint64_t v28 = &v19[56 * v18];
      uint64_t v23 = 56 * a5;
      unint64_t v24 = &v22[56 * a5];
      do
      {
        sub_2169D5338(v22, (long long *)v7);
        v22 += 56;
        uint64_t v7 = (std::string *)((char *)v7 + 56);
        v23 -= 56;
      }
      while (v23);
      uint64_t v27 = v24;
      uint64_t v5 = (std::string *)sub_216AE6880(a1, v26, (uint64_t)v5);
      sub_216AE6D78(v26);
    }
  }
  return v5;
}

void sub_216AE721C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

char *sub_216AE7248(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v10 = __dst;
  uint64_t v11 = __dst;
  v8[0] = a1;
  v8[1] = &v10;
  int v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_2169D5338(v4, v6);
      uint64_t v6 = (long long *)((char *)v6 + 56);
      uint64_t v4 = v11 + 56;
      v11 += 56;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_2169D53E8((uint64_t)v8);
  return v4;
}

void sub_216AE72D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216AE72EC(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    uint64_t v5 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
    sub_2169D5338((char *)v12, a2);
    v16[1] = (void **)v5;
    sub_216AE7AF8((uint64_t)&__p, (long long *)v12);
    uint64_t v6 = sub_216AE7774(v4, &__p, (uint64_t)&__p);
    char v8 = v7;
    sub_2168EBBB8(&v21, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v20);
    sub_21697C414(&v19);
    if (v18 < 0) {
      operator delete((void *)__p.i64[0]);
    }
    sub_2168EBBB8(v16, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v15);
    sub_21697C414(&v14);
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    if (!v8) {
      return *(void *)a1 + 56 * *((void *)v6 + 9);
    }
    char v9 = *(char **)(a1 + 8);
  }
  else
  {
    char v9 = (char *)sub_216AE76EC((unsigned __int8 **)a1, (int8x16_t *)a2);
    if (*(char **)(a1 + 8) != v9) {
      return (uint64_t)v9;
    }
  }
  if ((unint64_t)v9 >= *(void *)(a1 + 16))
  {
    uint64_t v10 = sub_216AE6EA0((uint64_t *)a1, a2);
  }
  else
  {
    sub_2169D5338(v9, a2);
    uint64_t v10 = (uint64_t)(v9 + 56);
    *(void *)(a1 + 8) = v9 + 56;
  }
  *(void *)(a1 + 8) = v10;
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v10 - *(void *)a1) >> 3)) >= 0x80)
  {
    sub_216AE7C94((uint64_t *)a1);
    uint64_t v10 = *(void *)(a1 + 8);
  }
  return v10 - 56;
}

void sub_216AE74A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  *(void *)(v17 + 8) = v18;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216AE74D8(uint64_t a1)
{
  sub_216AE751C((uint64_t *)(a1 + 24), 0);
  uint64_t v3 = (void **)a1;
  sub_2169CC68C(&v3);
  return a1;
}

void sub_216AE751C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216AE755C(v3);
    operator delete(v4);
  }
}

uint64_t sub_216AE755C(uint64_t a1)
{
  sub_216AE7598(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216AE7598(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216AE75DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216AE75DC(uint64_t a1)
{
  sub_2168EBBB8((void ***)(a1 + 48), 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_216AE7644(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_216AE7698(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_216AE76EC(unsigned __int8 **a1, int8x16_t *a2)
{
  uint64_t v4 = a1[3];
  if (v4)
  {
    uint64_t v5 = sub_216AE7B5C(v4, a2);
    if (v5) {
      return (uint64_t)&(*a1)[56 * *((void *)v5 + 9)];
    }
    else {
      return (uint64_t)a1[1];
    }
  }
  else
  {
    char v8 = a1;
    char v7 = *a1;
    uint64_t v6 = v8[1];
    while (v7 != v6)
    {
      if (pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v7, (unsigned __int8 *)a2)) {
        return (uint64_t)v7;
      }
      v7 += 56;
    }
  }
  return (uint64_t)v6;
}

unsigned __int8 *sub_216AE7774(uint64_t a1, int8x16_t *a2, uint64_t a3)
{
  uint64_t v23 = 0;
  char v24 = 0;
  sub_2169D7BA4((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v23, (pxrInternal__aapl__pxrReserved__ *)a2, &a2[1].u32[2], a2 + 2, a2[3].i64);
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (void)v23));
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = v7 & (v8 - 1);
    }
    uint64_t v11 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v13 = *((void *)i + 1);
        if (v13 == v7)
        {
          if (pxrInternal__aapl__pxrReserved__::SdfReference::operator==(i + 16, (unsigned __int8 *)a2)) {
            return i;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v13 >= v8) {
              v13 %= v8;
            }
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_216AE7A18(a1, v7, a3, (uint64_t)&v23);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)uint64_t v23 = *v20;
    *uint64_t v20 = v23;
  }
  else
  {
    *(void *)uint64_t v23 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v23;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v23)
    {
      unint64_t v21 = *(void *)(*(void *)v23 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v21 >= v8) {
          v21 %= v8;
        }
      }
      else
      {
        v21 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v23;
    }
  }
  uint64_t i = v23;
  uint64_t v23 = 0;
  ++*(void *)(a1 + 24);
  sub_216AE7AA0((uint64_t)&v23, 0);
  return i;
}

void sub_216AE7A00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AE7AA0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_216AE7A18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = sub_2169D5338((char *)v8 + 16, (long long *)a3);
  *((void *)v8 + 9) = *(void *)(a3 + 56);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216AE7A88(_Unwind_Exception *a1)
{
  sub_216AE7AA0(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216AE7AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216AE75DC((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_216AE7AF8(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  sub_21697D878((_DWORD *)(a1 + 24), (_DWORD *)a2 + 6);
  sub_21697D8B4((_DWORD *)(a1 + 28), (_DWORD *)a2 + 7);
  *(_OWORD *)(a1 + 32) = a2[2];
  uint64_t v5 = *((void *)a2 + 6);
  uint64_t v6 = *((void *)a2 + 7);
  *((void *)a2 + 6) = 0;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  return a1;
}

unsigned __int8 *sub_216AE7B5C(void *a1, int8x16_t *a2)
{
  uint64_t v13 = 0;
  char v14 = 0;
  sub_2169D7BA4((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v13, (pxrInternal__aapl__pxrReserved__ *)a2, &a2[1].u32[2], a2 + 2, a2[3].i64);
  int8x8_t v4 = (int8x8_t)a1[1];
  if (!*(void *)&v4) {
    return 0;
  }
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v13));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
  v6.i16[0] = vaddlv_u8(v6);
  unint64_t v7 = v6.u32[0];
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v8 = v5;
    if (v5 >= *(void *)&v4) {
      unint64_t v8 = v5 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v8 = v5 & (*(void *)&v4 - 1);
  }
  uint8x8_t v9 = *(unsigned __int8 ***)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  for (uint64_t i = *v9; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v11 = *((void *)i + 1);
    if (v11 == v5)
    {
      if (pxrInternal__aapl__pxrReserved__::SdfReference::operator==(i + 16, (unsigned __int8 *)a2)) {
        return i;
      }
    }
    else
    {
      if (v7 > 1)
      {
        if (v11 >= *(void *)&v4) {
          v11 %= *(void *)&v4;
        }
      }
      else
      {
        v11 &= *(void *)&v4 - 1;
      }
      if (v11 != v8) {
        return 0;
      }
    }
  }
  return i;
}

void sub_216AE7C94(uint64_t *a1)
{
  uint64_t v1 = a1 + 3;
  if (!a1[3])
  {
    unint64_t v3 = operator new(0x28uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    *((_DWORD *)v3 + 8) = 1065353216;
    sub_21678A04C((uint64_t)v3, 0x80uLL);
    sub_216AE751C(v1, (uint64_t)v3);
    uint64_t v4 = *a1;
    if (a1[1] != *a1)
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        uint64_t v7 = a1[3];
        unint64_t v8 = (long long *)(v4 + v5);
        *((void *)sub_216AE7D8C(v7, (int8x16_t *)(v4 + v5), (uint64_t)&unk_2174BFD90, &v8) + 9) = v6++;
        uint64_t v4 = *a1;
        v5 += 56;
      }
      while (v6 < 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3));
    }
  }
}

void sub_216AE7D74(_Unwind_Exception *a1)
{
  unint64_t v3 = (void *)sub_216AE755C(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_216AE7D8C(uint64_t a1, int8x16_t *a2, uint64_t a3, long long **a4)
{
  char v24 = 0;
  char v25 = 0;
  sub_2169D7BA4((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v24, (pxrInternal__aapl__pxrReserved__ *)a2, &a2[1].u32[2], a2 + 2, a2[3].i64);
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (void)v24));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    uint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (pxrInternal__aapl__pxrReserved__::SdfReference::operator==(i + 16, (unsigned __int8 *)a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_216AE8048(a1, v8, a4, (uint64_t)&v24);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_21678A04C(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  unint64_t v21 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)char v24 = *v21;
    *unint64_t v21 = v24;
  }
  else
  {
    *(void *)char v24 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v24)
    {
      unint64_t v22 = *(void *)(*(void *)v24 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9) {
          v22 %= v9;
        }
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24;
    }
  }
  uint64_t i = v24;
  char v24 = 0;
  ++*(void *)(a1 + 24);
  sub_216AE7AA0((uint64_t)&v24, 0);
  return i;
}

void sub_216AE8030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AE7AA0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_216AE8048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = sub_2169D5338((char *)v8 + 16, *a3);
  *((void *)v8 + 9) = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216AE80B0(_Unwind_Exception *a1)
{
  sub_216AE7AA0(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216AE80C8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    sub_2168EBBB8((void ***)(a1 + 48), 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
    sub_21697C414((_DWORD *)(a1 + 24));
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 56) = 0;
  }
}

uint64_t sub_216AE8124(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  void v16[4] = a1 + 2;
  if (v9) {
    uint8x8_t v10 = (char *)sub_2167B421C(v7, v9);
  }
  else {
    uint8x8_t v10 = 0;
  }
  unint64_t v11 = &v10[56 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[56 * v9];
  long long v12 = *a2;
  *((void *)v11 + 2) = *((void *)a2 + 2);
  *(_OWORD *)unint64_t v11 = v12;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  sub_21697D878((_DWORD *)v11 + 6, (_DWORD *)a2 + 6);
  sub_21697D8B4((_DWORD *)v11 + 7, (_DWORD *)a2 + 7);
  *((_OWORD *)v11 + 2) = a2[2];
  uint64_t v13 = *((void *)a2 + 6);
  *((void *)a2 + 6) = 0;
  *((void *)v11 + 6) = v13;
  void v16[2] = v11 + 56;
  sub_216AE6FC0(a1, v16);
  uint64_t v14 = a1[1];
  sub_216AE6D78(v16);
  return v14;
}

void sub_216AE8264(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AE6D78((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216AE8278(uint64_t *a1, long long *a2, long long *a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a2 != a3)
  {
    unint64_t v5 = a2;
    do
    {
      unint64_t v6 = sub_216AE830C((uint64_t)a1, 0, 0, v5);
      uint64_t v7 = *a1;
      *unint64_t v6 = *a1;
      v6[1] = a1;
      *(void *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      unint64_t v5 = (long long *)((char *)v5 + 56);
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_216AE82F8(_Unwind_Exception *a1)
{
  sub_216ADDACC(v1);
  _Unwind_Resume(a1);
}

void *sub_216AE830C(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v7 = operator new(0x48uLL);
  *(void *)uint64_t v7 = a2;
  *((void *)v7 + 1) = a3;
  sub_2169D5338((char *)v7 + 16, a4);
  return v7;
}

void sub_216AE8358(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_216AE836C(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_2167B8760(result, a4);
    uint64_t result = sub_216AE6934((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_216AE83D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2169CC68C(&a9);
  _Unwind_Resume(a1);
}

void sub_216AE83F4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216AE83F4(a1, *a2);
    sub_216AE83F4(a1, a2[1]);
    sub_216ADDB40((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_216AE8450(uint64_t **a1, unsigned __int8 *a2, long long *a3)
{
  unint64_t v5 = (uint64_t **)sub_216AE63D0((uint64_t)a1, &v10, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    sub_216AE84E4((uint64_t)a1, a3, (uint64_t)v9);
    sub_21677B358(a1, v10, v7, v9[0]);
    unint64_t v6 = v9[0];
    v9[0] = 0;
    sub_216AE8550((uint64_t)v9, 0);
  }
  return v6;
}

char *sub_216AE84E4@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (char *)operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_2169D5338(v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216AE8538(_Unwind_Exception *a1)
{
  sub_216AE8550(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216AE8550(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216ADDB40((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_216AE85A8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    BOOL v6 = pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)(v3 + 32), a2);
    uint64_t v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      uint64_t v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || pxrInternal__aapl__pxrReserved__::SdfReference::operator<(a2, (unsigned __int8 *)(v5 + 32))) {
    return v2;
  }
  return v5;
}

uint64_t sub_216AE8624(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = 1;
    do
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfReference::operator<(a2, v2 + 32))
      {
        if (!pxrInternal__aapl__pxrReserved__::SdfReference::operator<(v2 + 32, a2)) {
          return v4;
        }
        v2 += 8;
      }
      uint64_t v2 = *(unsigned __int8 **)v2;
    }
    while (v2);
  }
  return 0;
}

void *sub_216AE8690(void *result, uint64_t a2, uint64_t *a3, unsigned char *a4, char a5)
{
  unint64_t v8 = result;
  if ((a5 & 1) != 0 || *a3 != a3[1])
  {
    if (*a4) {
      uint64_t v9 = "";
    }
    else {
      uint64_t v9 = ", ";
    }
    uint64_t v10 = sub_216779180(result, (uint64_t)v9, 2 * (*a4 == 0));
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    uint64_t v14 = sub_216779180(v10, v12, v13);
    sub_216779180(v14, (uint64_t)" Items: [", 9);
    *a4 = 0;
    uint64_t v17 = *a3;
    uint64_t v18 = a3[1];
    *(void *)&long long v22 = *a3;
    *((void *)&v22 + 1) = v18;
    while (v17 != v18)
    {
      uint64_t v19 = sub_216998ED0((uint64_t *)&v22, v15, v16);
      size_t v20 = pxrInternal__aapl__pxrReserved__::operator<<(v8, v19);
      long long v23 = v22;
      sub_216998F50(&v23);
      if ((void)v23 == *((void *)&v23 + 1)) {
        unint64_t v21 = "";
      }
      else {
        unint64_t v21 = ", ";
      }
      sub_216779180(v20, (uint64_t)v21, 2 * ((void)v23 != *((void *)&v23 + 1)));
      sub_216998F50(&v22);
      uint64_t v18 = *((void *)&v22 + 1);
      uint64_t v17 = v22;
    }
    return sub_216779180(v8, (uint64_t)"]", 1);
  }
  return result;
}

void sub_216AE87B8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216AE87B8(a1, *a2);
    sub_216AE87B8(a1, a2[1]);
    sub_216AE8814((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_216AE8814(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

__n128 *sub_216AE8870(uint64_t a1, __n128 **a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    unint64_t v8 = sub_216AE8968(a1, 0, 0, a3);
    uint64_t v9 = v8;
    uint64_t v10 = a3 + 48;
    uint64_t v11 = 1;
    if (v10 != a4)
    {
      unint64_t v12 = (unint64_t)v8;
      do
      {
        unint64_t v8 = sub_216AE8968(a1, v12, 0, v10);
        *(void *)(v12 + 8) = v8;
        ++v11;
        v10 += 48;
        unint64_t v12 = (unint64_t)v8;
      }
      while (v10 != a4);
    }
    uint64_t v13 = *a2;
    v13->n128_u64[1] = (unint64_t)v9;
    v9->n128_u64[0] = (unint64_t)v13;
    *a2 = v8;
    v8->n128_u64[1] = (unint64_t)a2;
    *(void *)(a1 + 16) += v11;
    return v9;
  }
  return (__n128 *)a2;
}

void sub_216AE8940(void *a1)
{
  __cxa_begin_catch(a1);
  sub_217324754(v1);
  __cxa_rethrow();
}

void sub_216AE8954(_Unwind_Exception *a1)
{
}

__n128 *sub_216AE8968(int a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  int v7 = a1 + 16;
  unint64_t v8 = (__n128 *)operator new(0x40uLL);
  v8->n128_u64[0] = a2;
  v8->n128_u64[1] = a3;
  sub_2169D8390(v7, v8 + 1, a4);
  return v8;
}

void sub_216AE89C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216AE89DC(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  BOOL v6 = (uint64_t **)sub_216AE8A88((uint64_t)a1, &v11, a2);
  int v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    sub_216AE8B1C((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    int v7 = v10[0];
    v10[0] = 0;
    sub_216AE8BFC((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_216AE8A88(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        int v7 = (void *)v4;
        unint64_t v8 = (const void **)(v4 + 32);
        if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator<(a3, (unsigned __int8 *)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator<(v8, (unsigned __int8 *)a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    int v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void *sub_216AE8B1C@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  BOOL v6 = operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_216AE8B88(v6 + 4, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216AE8B70(_Unwind_Exception *a1)
{
  sub_216AE8BFC(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_216AE8B88(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_216981010((_DWORD *)__dst + 6, (_DWORD *)a2 + 6);
  sub_21698105C((_DWORD *)__dst + 7, (_DWORD *)a2 + 7);
  *((_OWORD *)__dst + 2) = a2[2];
  __dst[6] = 0;
  return __dst;
}

void sub_216AE8BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216AE8814((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

std::string *sub_216AE8C54(uint64_t *a1, std::string *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = (uint64_t)a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      unint64_t v20 = a5 + 1;
      unint64_t v21 = a3;
      do
      {
        unint64_t v21 = (void *)v21[1];
        --v20;
      }
      while (v20 > 1);
      int64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 4);
      int64_t v23 = a5;
      if (v22 < a5)
      {
        if ((uint64_t)(v12 - (void)a2) <= -48)
        {
          unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 4);
          unint64_t v21 = a3;
          do
            unint64_t v21 = (void *)*v21;
          while (!__CFADD__(v29++, 1));
        }
        else if ((std::string *)v12 == a2)
        {
          unint64_t v21 = a3;
        }
        else
        {
          unint64_t v24 = v22 + 1;
          unint64_t v21 = a3;
          do
          {
            unint64_t v21 = (void *)v21[1];
            --v24;
          }
          while (v24 > 1);
        }
        a1[1] = (uint64_t)sub_216AE9028(v9, (uint64_t)v21, a4, *(__n128 **)(v9 - 8));
        int64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v5) >> 4);
      }
      if (v23 >= 1)
      {
        sub_216AE8EA4((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[2 * a5]);
        sub_216AE9194((int)v32, v7, (uint64_t)v21, v5);
      }
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0x555555555555555) {
        sub_21677CB10();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 4);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 4);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v18 = 0x555555555555555;
      }
      else {
        unint64_t v18 = v17;
      }
      *(void *)long long v35 = v9;
      if (v18) {
        uint64_t v19 = (char *)sub_2168073F4(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      char v25 = (__n128 *)&v19[48 * v15];
      v32[0] = v19;
      v32[1] = v25;
      uint64_t v33 = v25;
      uint64_t v34 = &v19[48 * v18];
      uint64_t v26 = 3 * a5;
      uint64_t v27 = &v25[3 * a5];
      uint64_t v28 = 16 * v26;
      do
      {
        sub_2169D8390(v35[0], v25, v7 + 16);
        v25 += 3;
        uint64_t v7 = *(void *)(v7 + 8);
        v28 -= 48;
      }
      while (v28);
      uint64_t v33 = v27;
      uint64_t v5 = (std::string *)sub_216AE8F74(a1, v32, (uint64_t)v5);
      sub_216AE9440(v32);
    }
  }
  return v5;
}

void sub_216AE8E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216AE8EA4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = (void *)(v7 + v10);
      uint64_t v12 = v6 + v10;
      long long v13 = *(_OWORD *)(v7 + v10);
      *(void *)(v12 + 16) = *(void *)(v7 + v10 + 16);
      *(_OWORD *)uint64_t v12 = v13;
      v11[1] = 0;
      void v11[2] = 0;
      *uint64_t v11 = 0;
      sub_21697D878((_DWORD *)(v6 + v10 + 24), (_DWORD *)(v7 + v10 + 24));
      sub_21697D8B4((_DWORD *)(v6 + v10 + 28), (_DWORD *)(v7 + v10 + 28));
      *(_OWORD *)(v12 + 32) = *(_OWORD *)(v7 + v10 + 32);
      v10 += 48;
    }
    while ((unint64_t)(v11 + 6) < a3);
    uint64_t v8 = v6 + v10;
  }
  *(void *)(a1 + 8) = v8;
  return sub_216AE90D4((uint64_t)&v15, a2, v7, v6);
}

uint64_t sub_216AE8F74(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_216AE9218((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_216AE92F0(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

__n128 *sub_216AE9028(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *__dst)
{
  long long v4 = __dst;
  uint64_t v11 = __dst;
  uint64_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    int v7 = a1;
    do
    {
      sub_2169D8390(v7, v4, v6 + 16);
      uint64_t v6 = *(void *)(v6 + 8);
      long long v4 = v12 + 3;
      v12 += 3;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_2169D83FC((uint64_t)v9);
  return v4;
}

void sub_216AE90C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216AE90D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      uint64_t v9 = (void **)(a4 + v7 - 48);
      if (*(char *)(a4 + v7 - 25) < 0) {
        operator delete(*v9);
      }
      char v10 = (long long *)(a3 + v7 - 48);
      long long v11 = *v10;
      *(void *)(a4 + v7 - 32) = *(void *)(a3 + v7 - 32);
      *(_OWORD *)uint64_t v9 = v11;
      *(unsigned char *)(a3 + v7 - 25) = 0;
      *(unsigned char *)char v10 = 0;
      sub_21697DE94((int *)(v8 - 24), (int *)(a3 + v7 - 24));
      sub_21697DEEC((int *)(v8 - 20), (int *)(a3 + v7 - 20));
      *(_OWORD *)(v8 - 16) = *(_OWORD *)(a3 + v7 - 16);
      v7 -= 48;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_216AE9194(int a1, uint64_t a2, uint64_t a3, std::string *this)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    std::string::operator=(this, (const std::string *)(v5 + 16));
    sub_2169C487C((int *)&this[1], (_DWORD *)(v5 + 40));
    sub_2169C48D4((int *)this[1].__r_.__value_.__r.__words + 1, (_DWORD *)(v5 + 44));
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = *(_OWORD *)(v5 + 48);
    uint64_t v5 = *(void *)(v5 + 8);
    this += 2;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_216AE9218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  char v15 = 0;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v9 = a3 - 24;
    do
    {
      uint64_t v10 = v9 - 24;
      long long v11 = *(_OWORD *)(v9 - 24);
      *(void *)(v7 - 32) = *(void *)(v9 - 8);
      *(_OWORD *)(v7 - 48) = v11;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      *(void *)(v9 - 24) = 0;
      sub_21697D878((_DWORD *)(v7 - 24), (_DWORD *)v9);
      sub_21697D8B4((_DWORD *)(v7 - 20), (_DWORD *)(v9 + 4));
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(v9 + 8);
      uint64_t v7 = *((void *)&v17 + 1) - 48;
      *((void *)&v17 + 1) -= 48;
      v9 -= 48;
    }
    while (v10 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  sub_216AE93B4((uint64_t)v14);
  return v12;
}

uint64_t sub_216AE92F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v12 = a4;
  uint64_t v13 = a4;
  v10[0] = a1;
  v10[1] = &v12;
  void v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 28;
    do
    {
      long long v7 = *(_OWORD *)(v6 - 28);
      *(void *)(v4 + 16) = *(void *)(v6 - 12);
      *(_OWORD *)uint64_t v4 = v7;
      *(void *)(v6 - 12) = 0;
      *(void *)(v6 - 2sub_2168EBBB8(&a9, 0) = 0;
      *(void *)(v6 - 28) = 0;
      sub_21697D878((_DWORD *)(v4 + 24), (_DWORD *)(v6 - 4));
      sub_21697D8B4((_DWORD *)(v4 + 28), (_DWORD *)v6);
      *(_OWORD *)(v4 + 32) = *(_OWORD *)(v6 + 4);
      uint64_t v4 = v13 + 48;
      v13 += 48;
      uint64_t v8 = v6 + 20;
      v6 += 48;
    }
    while (v8 != a3);
  }
  char v11 = 1;
  sub_2169D83FC((uint64_t)v10);
  return v4;
}

uint64_t sub_216AE93B4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216AE93EC((uint64_t *)a1);
  }
  return a1;
}

void sub_216AE93EC(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_2169CC824(v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **sub_216AE9440(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216AE9474(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    sub_2169CC824(v4, i - 48);
  }
}

long long *sub_216AE94BC(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)uint64_t v5 = 0;
      sub_21697DE94((int *)(a4 + 24), (int *)v5 + 6);
      sub_21697DEEC((int *)(a4 + 28), (int *)v5 + 7);
      *(_OWORD *)(a4 + 32) = v5[2];
      a4 += 48;
      v5 += 3;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_216AE9558(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_21677CB10();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v14 = a1 + 2;
  if (v6) {
    long long v7 = (char *)sub_2168073F4((uint64_t)(a1 + 2), v6);
  }
  else {
    long long v7 = 0;
  }
  uint64_t v10 = v7;
  char v11 = (__n128 *)&v7[48 * v3];
  uint64_t v13 = &v7[48 * v6];
  sub_2169D8390(a1 + 16, v11, a2);
  uint64_t v12 = v11 + 3;
  sub_216AE9668(a1, &v10);
  uint64_t v8 = a1[1];
  sub_216AE9440(&v10);
  return v8;
}

void sub_216AE9654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AE9440((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216AE9668(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216AE9218((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

std::string *sub_216AE96E0(uint64_t *a1, std::string *a2, std::string *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 4)) >= a5)
      {
        unint64_t v21 = &a3[2 * a5];
      }
      else
      {
        unint64_t v21 = (std::string *)((char *)a3 + 16 * ((uint64_t)(v12 - (void)a2) >> 4));
        a1[1] = (uint64_t)sub_216AE98D4(v9, (uint64_t)v21, a4, *(__n128 **)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_216AE8EA4((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[2 * a5]);
      sub_216A99E54((int)v27, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0x555555555555555) {
        sub_21677CB10();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 4);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 4);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v18 = 0x555555555555555;
      }
      else {
        unint64_t v18 = v17;
      }
      *(void *)uint64_t v30 = v9;
      if (v18) {
        uint64_t v19 = (char *)sub_2168073F4(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      int64_t v22 = (__n128 *)&v19[48 * v15];
      v27[0] = v19;
      v27[1] = v22;
      uint64_t v28 = v22;
      unint64_t v29 = &v19[48 * v18];
      uint64_t v23 = 3 * a5;
      unint64_t v24 = &v22[3 * a5];
      uint64_t v25 = 16 * v23;
      do
      {
        sub_2169D8390(v30[0], v22, (uint64_t)v7);
        v22 += 3;
        v7 += 2;
        v25 -= 48;
      }
      while (v25);
      uint64_t v28 = v24;
      uint64_t v5 = (std::string *)sub_216AE8F74(a1, v27, (uint64_t)v5);
      sub_216AE9440(v27);
    }
  }
  return v5;
}

void sub_216AE98A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

__n128 *sub_216AE98D4(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *__dst)
{
  unint64_t v4 = __dst;
  uint64_t v11 = __dst;
  uint64_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    int v7 = a1;
    do
    {
      sub_2169D8390(v7, v4, v6);
      v6 += 48;
      unint64_t v4 = v12 + 3;
      v12 += 3;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_2169D83FC((uint64_t)v9);
  return v4;
}

void sub_216AE996C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216AE9980(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
    sub_216AEA204(__dst, a2, &v11);
    *(_OWORD *)int8x16_t __p = *(_OWORD *)__dst;
    uint64_t v19 = v13;
    __dst[1] = 0;
    uint64_t v13 = 0;
    __dst[0] = 0;
    int v20 = v14;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(&v14);
    int v21 = v15;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(&v15);
    long long v22 = v16;
    uint64_t v23 = v17;
    uint64_t v5 = sub_216AE9E1C(v4, (int8x16_t *)__p, (long long *)__p);
    char v7 = v6;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
    sub_21697C414(&v20);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_21697C414(&v14);
    if (SHIBYTE(v13) < 0) {
      operator delete(__dst[0]);
    }
    if (!v7) {
      return *(void *)a1 + 48 * *((void *)v5 + 8);
    }
    uint64_t v8 = *(__n128 **)(a1 + 8);
  }
  else
  {
    uint64_t v8 = (__n128 *)sub_216AE9D94((unsigned __int8 **)a1, (int8x16_t *)a2);
    if (*(__n128 **)(a1 + 8) != v8) {
      return (uint64_t)v8;
    }
  }
  if ((unint64_t)v8 >= *(void *)(a1 + 16))
  {
    uint64_t v9 = sub_216AE9558((uint64_t *)a1, (uint64_t)a2);
  }
  else
  {
    sub_2169D8390(a1 + 16, v8, (uint64_t)a2);
    uint64_t v9 = (uint64_t)&v8[3];
    *(void *)(a1 + 8) = v8 + 3;
  }
  *(void *)(a1 + 8) = v9;
  if (0xAAAAAAAAAAAAAAABLL * ((v9 - *(void *)a1) >> 4) >= 0x80)
  {
    sub_216AEA3BC((uint64_t *)a1);
    uint64_t v9 = *(void *)(a1 + 8);
  }
  return v9 - 48;
}

void sub_216AE9B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  *(void *)(v17 + 8) = v18;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216AE9BA4(uint64_t a1)
{
  sub_216AE9BE8((uint64_t *)(a1 + 24), 0);
  unint64_t v3 = (void **)a1;
  sub_2169CC78C(&v3);
  return a1;
}

void sub_216AE9BE8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216AE9C28(v3);
    operator delete(v4);
  }
}

uint64_t sub_216AE9C28(uint64_t a1)
{
  sub_216AE9C64(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216AE9C64(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216AE9CA8((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216AE9CA8(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_216AE9D04(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_216AE9D4C(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_216AE9D94(unsigned __int8 **a1, int8x16_t *a2)
{
  uint64_t v4 = a1[3];
  if (v4)
  {
    uint64_t v5 = sub_216AEA288(v4, a2);
    if (v5) {
      return (uint64_t)&(*a1)[48 * *((void *)v5 + 8)];
    }
    else {
      return (uint64_t)a1[1];
    }
  }
  else
  {
    uint64_t v8 = a1;
    char v7 = *a1;
    char v6 = v8[1];
    while (v7 != v6)
    {
      if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v7, (unsigned __int8 *)a2)) {
        return (uint64_t)v7;
      }
      v7 += 48;
    }
  }
  return (uint64_t)v6;
}

unsigned __int8 *sub_216AE9E1C(uint64_t a1, int8x16_t *a2, long long *a3)
{
  uint64_t v23 = 0;
  char v24 = 0;
  sub_2169DA89C((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v23, (pxrInternal__aapl__pxrReserved__ *)a2, &a2[1].u32[2], a2 + 2);
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (void)v23));
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = v7 & (v8 - 1);
    }
    unint64_t v11 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v13 = *((void *)i + 1);
        if (v13 == v7)
        {
          if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(i + 16, (unsigned __int8 *)a2)) {
            return i;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v13 >= v8) {
              v13 %= v8;
            }
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_216AEA0BC(a1, v7, a3, (uint64_t)&v23);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  int v20 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)uint64_t v23 = *v20;
    *int v20 = v23;
  }
  else
  {
    *(void *)uint64_t v23 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v23;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v23)
    {
      unint64_t v21 = *(void *)(*(void *)v23 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v21 >= v8) {
          v21 %= v8;
        }
      }
      else
      {
        v21 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v23;
    }
  }
  uint64_t i = v23;
  uint64_t v23 = 0;
  ++*(void *)(a1 + 24);
  sub_216AEA1AC((uint64_t)&v23, 0);
  return i;
}

void sub_216AEA0A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AEA1AC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_216AEA0BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_216AEA134(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216AEA11C(_Unwind_Exception *a1)
{
  sub_216AEA1AC(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_216AEA134(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_216981010((_DWORD *)__dst + 6, (_DWORD *)a2 + 6);
  sub_21698105C((_DWORD *)__dst + 7, (_DWORD *)a2 + 7);
  *((_OWORD *)__dst + 2) = a2[2];
  __dst[6] = *((void *)a2 + 6);
  return __dst;
}

void sub_216AEA1AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216AE9CA8((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *sub_216AEA204(void *__dst, long long *a2, void *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v6;
  }
  sub_216981010((_DWORD *)__dst + 6, (_DWORD *)a2 + 6);
  sub_21698105C((_DWORD *)__dst + 7, (_DWORD *)a2 + 7);
  *((_OWORD *)__dst + 2) = a2[2];
  __dst[6] = *a3;
  return __dst;
}

unsigned __int8 *sub_216AEA288(void *a1, int8x16_t *a2)
{
  uint64_t v13 = 0;
  char v14 = 0;
  sub_2169DA89C((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v13, (pxrInternal__aapl__pxrReserved__ *)a2, &a2[1].u32[2], a2 + 2);
  int8x8_t v4 = (int8x8_t)a1[1];
  if (!*(void *)&v4) {
    return 0;
  }
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v13));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
  v6.i16[0] = vaddlv_u8(v6);
  unint64_t v7 = v6.u32[0];
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v8 = v5;
    if (v5 >= *(void *)&v4) {
      unint64_t v8 = v5 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v8 = v5 & (*(void *)&v4 - 1);
  }
  uint8x8_t v9 = *(unsigned __int8 ***)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  for (uint64_t i = *v9; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v11 = *((void *)i + 1);
    if (v11 == v5)
    {
      if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(i + 16, (unsigned __int8 *)a2)) {
        return i;
      }
    }
    else
    {
      if (v7 > 1)
      {
        if (v11 >= *(void *)&v4) {
          v11 %= *(void *)&v4;
        }
      }
      else
      {
        v11 &= *(void *)&v4 - 1;
      }
      if (v11 != v8) {
        return 0;
      }
    }
  }
  return i;
}

void sub_216AEA3BC(uint64_t *a1)
{
  uint64_t v1 = a1 + 3;
  if (!a1[3])
  {
    unint64_t v3 = operator new(0x28uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    *((_DWORD *)v3 + 8) = 1065353216;
    sub_21678A04C((uint64_t)v3, 0x80uLL);
    sub_216AE9BE8(v1, (uint64_t)v3);
    uint64_t v4 = *a1;
    if (a1[1] != *a1)
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        uint64_t v7 = a1[3];
        unint64_t v8 = (long long *)(v4 + v5);
        *((void *)sub_216AEA4AC(v7, (int8x16_t *)(v4 + v5), (uint64_t)&unk_2174BFD90, &v8) + 8) = v6++;
        uint64_t v4 = *a1;
        v5 += 48;
      }
      while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4));
    }
  }
}

void sub_216AEA494(_Unwind_Exception *a1)
{
  unint64_t v3 = (void *)sub_216AE9C28(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_216AEA4AC(uint64_t a1, int8x16_t *a2, uint64_t a3, long long **a4)
{
  char v24 = 0;
  char v25 = 0;
  sub_2169DA89C((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v24, (pxrInternal__aapl__pxrReserved__ *)a2, &a2[1].u32[2], a2 + 2);
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (void)v24));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    uint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(i + 16, (unsigned __int8 *)a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_216AEA764(a1, v8, a4, (uint64_t)&v24);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_21678A04C(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  unint64_t v21 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)char v24 = *v21;
    *unint64_t v21 = v24;
  }
  else
  {
    *(void *)char v24 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v24)
    {
      unint64_t v22 = *(void *)(*(void *)v24 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9) {
          v22 %= v9;
        }
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24;
    }
  }
  uint64_t i = v24;
  char v24 = 0;
  ++*(void *)(a1 + 24);
  sub_216AEA1AC((uint64_t)&v24, 0);
  return i;
}

void sub_216AEA74C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AEA1AC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_216AEA764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_216AE8B88(v8 + 2, *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216AEA7BC(_Unwind_Exception *a1)
{
  sub_216AEA1AC(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216AEA7D4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
    sub_21697C414((_DWORD *)(a1 + 24));
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 48) = 0;
  }
}

uint64_t sub_216AEA824(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  if (v9) {
    uint8x8_t v10 = (char *)sub_2168073F4(v7, v9);
  }
  else {
    uint8x8_t v10 = 0;
  }
  unint64_t v11 = &v10[48 * v4];
  v15[0] = v10;
  v15[1] = v11;
  _DWORD v15[3] = &v10[48 * v9];
  long long v12 = *a2;
  *((void *)v11 + 2) = *((void *)a2 + 2);
  *(_OWORD *)unint64_t v11 = v12;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  sub_21697D878((_DWORD *)v11 + 6, (_DWORD *)a2 + 6);
  sub_21697D8B4((_DWORD *)v11 + 7, (_DWORD *)a2 + 7);
  *((_OWORD *)v11 + 2) = a2[2];
  void v15[2] = v11 + 48;
  sub_216AE9668(a1, v15);
  uint64_t v13 = a1[1];
  sub_216AE9440(v15);
  return v13;
}

void sub_216AEA940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AE9440((void **)va);
  _Unwind_Resume(a1);
}

__n128 **sub_216AEA954(__n128 **a1, uint64_t a2, uint64_t a3)
{
  *a1 = (__n128 *)a1;
  a1[1] = (__n128 *)a1;
  a1[2] = 0;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      unint64_t v6 = sub_216AEA9E8((int)a1, 0, 0, v5);
      unint64_t v7 = (unint64_t)*a1;
      v6->n128_u64[0] = (unint64_t)*a1;
      v6->n128_u64[1] = (unint64_t)a1;
      *(void *)(v7 + 8) = v6;
      *a1 = v6;
      a1[2] = (__n128 *)((char *)a1[2] + 1);
      v5 += 48;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_216AEA9D4(_Unwind_Exception *a1)
{
  sub_216ADDC04(v1);
  _Unwind_Resume(a1);
}

__n128 *sub_216AEA9E8(int a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  int v7 = a1 + 16;
  unint64_t v8 = (__n128 *)operator new(0x40uLL);
  v8->n128_u64[0] = a2;
  v8->n128_u64[1] = a3;
  sub_2169D8390(v7, v8 + 1, a4);
  return v8;
}

void sub_216AEAA48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 *sub_216AEAA5C(__n128 *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_2169D8290(result, a4);
    uint64_t result = sub_216AE9028((uint64_t)&v6[1], a2, a3, (__n128 *)v6->n128_u64[1]);
    v6->n128_u64[1] = (unint64_t)result;
  }
  return result;
}

void sub_216AEAAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2169CC78C(&a9);
  _Unwind_Resume(a1);
}

void sub_216AEAAE4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216AEAAE4(a1, *a2);
    sub_216AEAAE4(a1, a2[1]);
    sub_216ADDC78((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_216AEAB40(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)sub_216AE8A88((uint64_t)a1, &v10, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    int v7 = v5;
    sub_216AEABD4((uint64_t)a1, a3, (uint64_t)v9);
    sub_21677B358(a1, v10, v7, v9[0]);
    unint64_t v6 = v9[0];
    v9[0] = 0;
    sub_216AEAC44((uint64_t)v9, 0);
  }
  return v6;
}

void sub_216AEABD4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (__n128 *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  sub_2169D8390(v5, v6 + 2, a2);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_216AEAC2C(_Unwind_Exception *a1)
{
  sub_216AEAC44(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216AEAC44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216ADDC78((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_216AEAC9C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    BOOL v6 = pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)(v3 + 32), a2);
    int v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      int v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2
    || pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)a2, (unsigned __int8 *)(v5 + 32)))
  {
    return v2;
  }
  return v5;
}

uint64_t sub_216AEAD18(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = 1;
    do
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)a2, (unsigned __int8 *)v2 + 32))
      {
        if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator<(v2 + 4, a2)) {
          return v4;
        }
        ++v2;
      }
      uint64_t v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

void *sub_216AEAD84(void *result, uint64_t a2, uint64_t *a3, unsigned char *a4, char a5)
{
  unint64_t v8 = result;
  if ((a5 & 1) != 0 || *a3 != a3[1])
  {
    if (*a4) {
      uint64_t v9 = "";
    }
    else {
      uint64_t v9 = ", ";
    }
    uint64_t v10 = sub_216779180(result, (uint64_t)v9, 2 * (*a4 == 0));
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    unint64_t v14 = sub_216779180(v10, v12, v13);
    sub_216779180(v14, (uint64_t)" Items: [", 9);
    *a4 = 0;
    uint64_t v17 = *a3;
    uint64_t v18 = a3[1];
    *(void *)&long long v22 = *a3;
    *((void *)&v22 + 1) = v18;
    while (v17 != v18)
    {
      uint64_t v19 = sub_216998934((uint64_t *)&v22, v15, v16);
      size_t v20 = pxrInternal__aapl__pxrReserved__::operator<<(v8, v19);
      long long v23 = v22;
      sub_2169989B4(&v23);
      if ((void)v23 == *((void *)&v23 + 1)) {
        unint64_t v21 = "";
      }
      else {
        unint64_t v21 = ", ";
      }
      sub_216779180(v20, (uint64_t)v21, 2 * ((void)v23 != *((void *)&v23 + 1)));
      sub_2169989B4(&v22);
      uint64_t v18 = *((void *)&v22 + 1);
      uint64_t v17 = v22;
    }
    return sub_216779180(v8, (uint64_t)"]", 1);
  }
  return result;
}

uint64_t sub_216AEAEAC()
{
  return v0 + 16;
}

void *pxrInternal__aapl__pxrReserved__::Sdf_MapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::Sdf_MapEditor(void *result)
{
  void *result = &unk_26C759458;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::Sdf_LsdMapEditor(uint64_t a1, atomic_uint **a2, uint64_t *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C7594D0;
  uint64_t v4 = *a2;
  *(void *)(a1 + 8) = *a2;
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  uint64_t v5 = *a3;
  *(void *)(a1 + 16) = *a3;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 24) = 0;
  BOOL v6 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), (pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  if (v15)
  {
    if (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)v14))
    {
      int v7 = (const void ****)sub_2168EF25C((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      pxrInternal__aapl__pxrReserved__::VtDictionary::operator=((const void ****)(a1 + 24), v7);
    }
    else
    {
      v12[0] = "sdf/mapEditor.cpp";
      v12[1] = "Sdf_LsdMapEditor";
      uint64_t v12[2] = 77;
      v12[3] = "pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::Sdf_L"
               "sdMapEditor(const SdfSpecHandle &, const TfToken &) [T = pxrInternal__aapl__pxrReserved__::VtDictionary]";
      char v13 = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
      if (v11 >= 0) {
        unint64_t v8 = __p;
      }
      else {
        unint64_t v8 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"%s does not hold value of expected type.", (const char *)v8);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  sub_2168EE084((uint64_t)v14);
  return a1;
}

void sub_216AEB088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_2168EE084((uint64_t)&a21);
  sub_2168EBBB8(v23, 0);
  if ((*v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v21);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::GetLocation(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
  if (v1)
  {
    uint64_t v2 = (const char *)(v1 + 16);
    if (*(char *)(v1 + 39) < 0) {
      uint64_t v2 = *(const char **)v2;
    }
  }
  else
  {
    uint64_t v2 = "";
  }
  uint64_t v3 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v3, &v8);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"field '%s' in <%s>", v5, v6, v2, Text);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  return sub_21697C414(&v8);
}

void sub_216AEB184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::GetOwner@<X0>(uint64_t result@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v2 = *(atomic_uint **)(result + 8);
  *a2 = v2;
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::IsExpired(uint64_t a1)
{
  return pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::GetData(uint64_t a1)
{
  return a1 + 24;
}

{
  return a1 + 24;
}

void pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::Copy(uint64_t a1, const void ****a2)
{
  pxrInternal__aapl__pxrReserved__::VtDictionary::operator=((const void ****)(a1 + 24), a2);

  pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::_UpdateDataInSpec();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::_UpdateDataInSpec(uint64_t a1)
{
  sub_216851EE4((uint64_t)&v8, "Sdf", "Sdf_LsdMapEditor::_UpdateDataInSpec");
  if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8))
    || (v6[0] = "sdf/mapEditor.cpp",
        v6[1] = "_UpdateDataInSpec",
        v6[2] = 163,
        void v6[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>:"
                ":_UpdateDataInSpec() [T = pxrInternal__aapl__pxrReserved__::VtDictionary]",
        char v7 = 0,
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "_owner", 0),
        (result & 1) != 0))
  {
    if (pxrInternal__aapl__pxrReserved__::VtDictionary::empty((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a1 + 24)))
    {
      uint64_t v2 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
      uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(v2, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
    }
    else
    {
      uint64_t v4 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
      uint64_t result = sub_216AEB648(v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), (const void ****)(a1 + 24));
    }
  }
  while (v9--)
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return result;
}

void sub_216AEB2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_21684E6B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::Set(uint64_t a1, long long *a2, void *a3)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a1 + 24), a2);
  sub_2168EC6DC(v4, a3);

  pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::_UpdateDataInSpec();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::Insert@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::VtDictionary::insert((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a1 + 24), a2, a3);
  if (*(unsigned char *)(a3 + 16))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::_UpdateDataInSpec();
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::Erase(uint64_t a1, const void **a2)
{
  if (pxrInternal__aapl__pxrReserved__::VtDictionary::erase((uint64_t ***)(a1 + 24), a2)) {
    pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::_UpdateDataInSpec();
  }
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::IsValidKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  BOOL v6 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v6);
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
  if (result)
  {
    return sub_216AEB464(result, a2, a3);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

uint64_t *sub_216AEB464@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  v5[2] = *(unsigned int **)MEMORY[0x263EF8340];
  uint64_t v3 = (void (*)(uint64_t, unsigned int **))result[10];
  if (v3)
  {
    uint64_t v4 = *result;
    v5[1] = (unsigned int *)&off_26C750BB8;
    sub_21691B31C(v5, a2);
    v3(v4, v5);
    return (uint64_t *)sub_2168EE084((uint64_t)v5);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

void sub_216AEB504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>::IsValidValue@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  BOOL v6 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v6);
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
  if (result)
  {
    return sub_216AEB598(result, a2, a3);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

uint64_t *sub_216AEB598@<X0>(uint64_t *result@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  v5[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = (void (*)(uint64_t, void *))result[11];
  if (v3)
  {
    uint64_t v4 = *result;
    sub_2168EE4C4(v5, a2);
    v3(v4, v5);
    return (uint64_t *)sub_2168EE084((uint64_t)v5);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

void sub_216AEB62C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_216AEB648(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const void ****a3)
{
  void v7[2] = *(unsigned int **)MEMORY[0x263EF8340];
  v7[1] = (unsigned int *)&off_26C74DD80;
  sub_2168EEEA8(v7, a3);
  BOOL v5 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216AEB6D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_CreateMapEditor<pxrInternal__aapl__pxrReserved__::VtDictionary>()
{
}

{
  while (1)
    ;
}

void sub_216AEB740(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::Sdf_MapEditor<std::map<std::string,std::string>>::Sdf_MapEditor(void *result)
{
  uint64_t *result = &unk_26C759548;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::Sdf_LsdMapEditor(uint64_t a1, atomic_uint **a2, uint64_t *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C7595C0;
  uint64_t v4 = *a2;
  *(void *)(a1 + 8) = *a2;
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  uint64_t v5 = *a3;
  *(void *)(a1 + 16) = *a3;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = a1 + 32;
  uint64_t v6 = a1 + 24;
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0;
  char v7 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), (pxrInternal__aapl__pxrReserved__::VtValue *)v15);
  if (v16)
  {
    if (sub_2169DBB2C((pxrInternal__aapl__pxrReserved__::VtValue *)v15))
    {
      uint64_t v8 = sub_2169CF86C((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
      if (v6 != v8) {
        sub_216799C1C((uint64_t **)(a1 + 24), *(long long **)v8, (long long *)(v8 + 8));
      }
    }
    else
    {
      v13[0] = "sdf/mapEditor.cpp";
      v13[1] = "Sdf_LsdMapEditor";
      void v13[2] = 77;
      void v13[3] = "pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string, std::string>>::Sdf_LsdMapEditor("
               "const SdfSpecHandle &, const TfToken &) [T = std::map<std::string, std::string>]";
      char v14 = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
      if (v12 >= 0) {
        int v9 = __p;
      }
      else {
        int v9 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v13, 1, (pxrInternal__aapl__pxrReserved__ *)"%s does not hold value of expected type.", (const char *)v9);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  sub_2168EE084((uint64_t)v15);
  return a1;
}

void sub_216AEB93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_2168EE084((uint64_t)&a21);
  sub_2167877AC(v23, *v24);
  if ((*v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v21);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::GetLocation(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
  if (v1)
  {
    uint64_t v2 = (const char *)(v1 + 16);
    if (*(char *)(v1 + 39) < 0) {
      uint64_t v2 = *(const char **)v2;
    }
  }
  else
  {
    uint64_t v2 = "";
  }
  uint64_t v3 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v3, &v8);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"field '%s' in <%s>", v5, v6, v2, Text);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  return sub_21697C414(&v8);
}

void sub_216AEBA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::GetOwner@<X0>(uint64_t result@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v2 = *(atomic_uint **)(result + 8);
  *a2 = v2;
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::IsExpired(uint64_t a1)
{
  return pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::GetData(uint64_t a1)
{
  return a1 + 24;
}

{
  return a1 + 24;
}

void pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t **)(a1 + 24);
  if (v2 != (uint64_t **)a2) {
    sub_216799C1C(v2, *(long long **)a2, (long long *)(a2 + 8));
  }

  pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::_UpdateDataInSpec();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::_UpdateDataInSpec(uint64_t a1)
{
  sub_216851EE4((uint64_t)&v8, "Sdf", "Sdf_LsdMapEditor::_UpdateDataInSpec");
  if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8))
    || (v6[0] = "sdf/mapEditor.cpp",
        v6[1] = "_UpdateDataInSpec",
        v6[2] = 163,
        void v6[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string, std::string>>::_UpdateData"
                "InSpec() [T = std::map<std::string, std::string>]",
        char v7 = 0,
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "_owner", 0),
        (result & 1) != 0))
  {
    if (*(void *)(a1 + 40))
    {
      uint64_t v2 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
      uint64_t result = sub_216AEBE5C(v2, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), (const void ***)(a1 + 24));
    }
    else
    {
      uint64_t v4 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
      uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
    }
  }
  while (v9--)
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return result;
}

void sub_216AEBBA8(_Unwind_Exception *a1)
{
  sub_21684E6B8(v1 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::Set(uint64_t a1, long long *a2, const std::string *a3)
{
  uint64_t v5 = a2;
  uint64_t v4 = sub_21677B174((uint64_t **)(a1 + 24), (const void **)a2, (uint64_t)&unk_2174BFD90, &v5);
  std::string::operator=((std::string *)(v4 + 7), a3);
  pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::_UpdateDataInSpec();
}

uint64_t *pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::Insert(uint64_t a1, const void **a2)
{
  uint64_t v2 = sub_216835CD4((uint64_t **)(a1 + 24), a2, (long long *)a2);
  if (v3) {
    pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::_UpdateDataInSpec();
  }
  return v2;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::Erase(uint64_t a1, const void **a2)
{
  if (sub_216839AC4((uint64_t **)(a1 + 24), a2)) {
    pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::_UpdateDataInSpec();
  }
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::IsValidKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v6);
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
  if (result)
  {
    return sub_216AEB464(result, a2, a3);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<std::string,std::string>>::IsValidValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v6);
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
  if (result)
  {
    return sub_216AEBDA0(result, a2, a3);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

uint64_t *sub_216AEBDA0@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  v5[2] = *(unsigned int **)MEMORY[0x263EF8340];
  char v3 = (void (*)(uint64_t, unsigned int **))result[11];
  if (v3)
  {
    uint64_t v4 = *result;
    v5[1] = (unsigned int *)&off_26C750BB8;
    sub_21691B31C(v5, a2);
    v3(v4, v5);
    return (uint64_t *)sub_2168EE084((uint64_t)v5);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

void sub_216AEBE40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_216AEBE5C(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const void ***a3)
{
  void v7[2] = *MEMORY[0x263EF8340];
  v7[1] = &off_26C756CD0;
  sub_2169DC07C(v7, a3);
  BOOL v5 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216AEBEEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_CreateMapEditor<std::map<std::string,std::string>>()
{
}

{
  while (1)
    ;
}

void sub_216AEBF54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::Sdf_MapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::Sdf_MapEditor(void *result)
{
  uint64_t *result = &unk_26C759638;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::Sdf_LsdMapEditor(uint64_t a1, atomic_uint **a2, uint64_t *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C7596B0;
  uint64_t v4 = *a2;
  *(void *)(a1 + 8) = *a2;
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  uint64_t v5 = *a3;
  *(void *)(a1 + 16) = *a3;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = a1 + 32;
  uint64_t v6 = a1 + 24;
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0;
  char v7 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), (pxrInternal__aapl__pxrReserved__::VtValue *)v15);
  if (v16)
  {
    if (sub_216A9A2D4((pxrInternal__aapl__pxrReserved__::VtValue *)v15))
    {
      uint64_t v8 = sub_216AEC1B4((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
      if (v6 != v8) {
        sub_216A9A360((uint64_t **)(a1 + 24), *(void **)v8, (void *)(v8 + 8));
      }
    }
    else
    {
      v13[0] = "sdf/mapEditor.cpp";
      v13[1] = "Sdf_LsdMapEditor";
      void v13[2] = 77;
      void v13[3] = "pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, px"
               "rInternal__aapl__pxrReserved__::SdfPath>>::Sdf_LsdMapEditor(const SdfSpecHandle &, const TfToken &) [T = "
               "std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>]";
      char v14 = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
      if (v12 >= 0) {
        int v9 = __p;
      }
      else {
        int v9 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v13, 1, (pxrInternal__aapl__pxrReserved__ *)"%s does not hold value of expected type.", (const char *)v9);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  sub_2168EE084((uint64_t)v15);
  return a1;
}

void sub_216AEC150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_2168EE084((uint64_t)&a21);
  sub_21698F21C(v23, *v24);
  if ((*v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_216AEC1B4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_216A9A2D4(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_216AECBB4, (uint64_t)&stru_26C758458);
  }
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::GetLocation(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
  if (v1)
  {
    uint64_t v2 = (const char *)(v1 + 16);
    if (*(char *)(v1 + 39) < 0) {
      uint64_t v2 = *(const char **)v2;
    }
  }
  else
  {
    uint64_t v2 = "";
  }
  char v3 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v3, &v8);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"field '%s' in <%s>", v5, v6, v2, Text);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  return sub_21697C414(&v8);
}

void sub_216AEC2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::GetOwner@<X0>(uint64_t result@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v2 = *(atomic_uint **)(result + 8);
  *a2 = v2;
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::IsExpired(uint64_t a1)
{
  return pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::GetData(uint64_t a1)
{
  return a1 + 24;
}

{
  return a1 + 24;
}

void pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::Copy(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = (uint64_t **)(a1 + 24);
  if (v2 != a2) {
    sub_216A9A360(v2, *a2, a2 + 1);
  }

  pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::_UpdateDataInSpec();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::_UpdateDataInSpec(uint64_t a1)
{
  sub_216851EE4((uint64_t)&v8, "Sdf", "Sdf_LsdMapEditor::_UpdateDataInSpec");
  if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8))
    || (v6[0] = "sdf/mapEditor.cpp",
        v6[1] = "_UpdateDataInSpec",
        v6[2] = 163,
        void v6[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPa"
                "th, pxrInternal__aapl__pxrReserved__::SdfPath>>::_UpdateDataInSpec() [T = std::map<pxrInternal__aapl__px"
                "rReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>]",
        char v7 = 0,
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "_owner", 0),
        (result & 1) != 0))
  {
    if (*(void *)(a1 + 40))
    {
      uint64_t v2 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
      uint64_t result = sub_216AEC808(v2, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), a1 + 24);
    }
    else
    {
      uint64_t v4 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
      uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
    }
  }
  while (v9--)
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return result;
}

void sub_216AEC450(_Unwind_Exception *a1)
{
  sub_21684E6B8(v1 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::Set(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v5 = a2;
  uint64_t v4 = sub_216A9AA80((uint64_t **)(a1 + 24), (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (uint64_t)&unk_2174BFD90, &v5);
  sub_2169C487C((int *)v4 + 9, a3);
  sub_2169C48D4((int *)v4 + 10, a3 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::_UpdateDataInSpec();
}

uint64_t *pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::Insert(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2 = sub_216AECC4C((uint64_t **)(a1 + 24), a2, a2);
  if (v3) {
    pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::_UpdateDataInSpec();
  }
  return v2;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::Erase(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  if (sub_216AECCFC((uint64_t **)(a1 + 24), a2)) {
    pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::_UpdateDataInSpec();
  }
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::IsValidKey@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v6);
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
  if (result)
  {
    return sub_216AEC5E8(result, a2, a3);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

uint64_t *sub_216AEC5E8@<X0>(uint64_t *result@<X0>, _DWORD *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  char v3 = (void (*)(uint64_t, int *))result[10];
  if (v3)
  {
    uint64_t v5 = *result;
    uint64_t v8 = (char *)&off_26C754FA0 + 1;
    sub_216981010(&v6, a2);
    sub_21698105C(&v7, a2 + 1);
    v3(v5, &v6);
    return (uint64_t *)sub_2168EE084((uint64_t)&v6);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

void sub_216AEC6A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Sdf_LsdMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::IsValidValue@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, unsigned char *a3@<X8>)
{
  int v6 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v6);
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
  if (result)
  {
    return sub_216AEC734(result, a2, a3);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

uint64_t *sub_216AEC734@<X0>(uint64_t *result@<X0>, _DWORD *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  char v3 = (void (*)(uint64_t, int *))result[11];
  if (v3)
  {
    uint64_t v5 = *result;
    uint64_t v8 = (char *)&off_26C754FA0 + 1;
    sub_216981010(&v6, a2);
    sub_21698105C(&v7, a2 + 1);
    v3(v5, &v6);
    return (uint64_t *)sub_2168EE084((uint64_t)&v6);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

void sub_216AEC7F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_216AEC808(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  void v7[2] = *MEMORY[0x263EF8340];
  v7[1] = &off_26C7584A0;
  sub_216A9AFA0(v7, a3);
  BOOL v5 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216AEC898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_CreateMapEditor<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>()
{
}

{
  while (1)
    ;
}

void sub_216AEC900(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216AEC914(uint64_t a1)
{
  *(void *)a1 = &unk_26C7594D0;
  sub_2168EBBB8((void ***)(a1 + 24), 0);
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 8));
  return a1;
}

void sub_216AEC97C(void ***a1)
{
  *a1 = (void **)&unk_26C7594D0;
  sub_2168EBBB8(a1 + 3, 0);
  unint64_t v2 = (unint64_t)a1[2];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 1));

  operator delete(a1);
}

uint64_t sub_216AEC9F4(uint64_t a1)
{
  *(void *)a1 = &unk_26C7595C0;
  sub_2167877AC(a1 + 24, *(void **)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 8));
  return a1;
}

void sub_216AECA5C(void **a1)
{
  *a1 = &unk_26C7595C0;
  sub_2167877AC((uint64_t)(a1 + 3), a1[4]);
  unint64_t v2 = (unint64_t)a1[2];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 1));

  operator delete(a1);
}

uint64_t sub_216AECAD4(uint64_t a1)
{
  *(void *)a1 = &unk_26C7596B0;
  sub_21698F21C(a1 + 24, *(void **)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 8));
  return a1;
}

void sub_216AECB3C(void **a1)
{
  *a1 = &unk_26C7596B0;
  sub_21698F21C((uint64_t)(a1 + 3), a1[4]);
  unint64_t v2 = (unint64_t)a1[2];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 1));

  operator delete(a1);
}

void *sub_216AECBB4@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(0x18uLL);
  result[2] = 0;
  result[1] = 0;
  void *result = result + 1;
  *a1 = result;
  a1[1] = sub_216AECC08;
  a1[2] = &stru_26C758458;
  return result;
}

void sub_216AECC08(void **a1)
{
  if (a1)
  {
    sub_21698F21C((uint64_t)a1, a1[1]);
    operator delete(a1);
  }
}

uint64_t *sub_216AECC4C(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _DWORD *a3)
{
  BOOL v5 = (void **)sub_216981754((uint64_t)a1, &v11, a2);
  int v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    int v7 = (uint64_t **)v5;
    int v6 = (uint64_t *)operator new(0x30uLL);
    v9[1] = a1 + 1;
    sub_216A8FD38((_DWORD *)v6 + 7, a3);
    char v10 = 1;
    sub_21677B358(a1, v11, v7, v6);
    v9[0] = 0;
    sub_21698F170((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t sub_216AECCFC(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  char v3 = sub_21698EFF0((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = v3;
  sub_2167AE00C(a1, v3);
  sub_21698F1C8((_DWORD *)v4 + 7);
  operator delete(v4);
  return 1;
}

void sub_216AECD58()
{
  sub_216779094(v3, "SdfNamespaceEditDetail::Error");
  int8x16_t __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7597D8, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfNamespaceEditDetail::Unbatched");
  int8x16_t __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7597D8, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfNamespaceEditDetail::Okay");
  int8x16_t __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7597D8, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
}

void sub_216AECE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::GetChild(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v8);
  sub_21697C414(&v7);
  sub_216AF06F4((uint64_t)&v7, a2);
  char v4 = sub_216AF1534(*((void *)this + 3), (uint64_t)&v7);
  if ((void *)(*((void *)this + 3) + 8) == v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4[4];
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  sub_216AF07CC(&v9, 0);
  sub_216AF0B98((uint64_t)&v7);
  return v5;
}

{
  void *v4;
  uint64_t v5;
  int v7;
  _DWORD v8[5];
  void **v9;
  int v10;
  int v11;

  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v8);
  sub_21697C414(&v7);
  sub_216AF06F4((uint64_t)&v7, a2);
  char v4 = sub_216AF1534(*((void *)this + 3), (uint64_t)&v7);
  if ((void *)(*((void *)this + 3) + 8) == v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4[4];
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  sub_216AF07CC(&v9, 0);
  sub_216AF0B98((uint64_t)&v7);
  return v5;
}

void sub_216AECF58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AECF70((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216AECF70(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_21697C414((_DWORD *)(a1 + 32));
  sub_216AF07CC((void ***)(a1 + 24), 0);

  return sub_216AF0B98(a1);
}

void sub_216AED07C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AECF70((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::FindOrCreateChild(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13);
  sub_21697C414(&v12);
  NameTokeuint64_t n = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
  sub_216AF08EC((uint64_t)&v12, NameToken);
  uint64_t v5 = sub_216AF1534(*((void *)this + 3), (uint64_t)&v12);
  if ((void *)(*((void *)this + 3) + 8) == v5)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v10);
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v11, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, (pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *)((char *)this + 32), 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
    sub_21697C414(&v10);
    int v6 = (uint64_t **)*((void *)this + 3);
    int v7 = operator new(0x28uLL);
    sub_216AF0960((uint64_t)v7, (uint64_t)this, (uint64_t)&v12, &v11);
    int v10 = v7;
    uint64_t v5 = sub_216AF1660(v6, (uint64_t *)&v10);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
    sub_21697C414(&v11);
  }
  uint64_t v8 = v5[4];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  sub_216AF07CC(&v14, 0);
  sub_216AF0B98((uint64_t)&v12);
  return v8;
}

void sub_216AED1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, __int16 a14, char a15, char a16)
{
  operator delete(v16);
  sub_21697B754(&a12);
  sub_216AECF70((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::FindOrCreateChild(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, BOOL *a4)
{
  sub_216981010(&v15, a2);
  sub_21698105C(v16, (_DWORD *)a2 + 1);
  v16[1] = 2;
  sub_216AF0BF4((uint64_t)v17, (uint64_t)&v15);
  sub_216AF0B98((uint64_t)&v15);
  uint64_t v8 = sub_216AF1534(*((void *)this + 3), (uint64_t)v17);
  BOOL v9 = *((void *)this + 3) + 8 == (void)v8;
  *a4 = v9;
  if (v9)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *)((char *)this + 32), a3, &v15);
    int v10 = (uint64_t **)*((void *)this + 3);
    uint64_t v11 = operator new(0x28uLL);
    sub_216AF0960((uint64_t)v11, (uint64_t)this, (uint64_t)v17, &v15);
    char v14 = v11;
    uint64_t v8 = sub_216AF1660(v10, (uint64_t *)&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v16);
    sub_21697C414(&v15);
  }
  uint64_t v12 = v8[4];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  sub_216AF07CC(&v18, 0);
  sub_216AF0B98((uint64_t)v17);
  return v12;
}

void sub_216AED34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, char a12)
{
  operator delete(v12);
  sub_21697B754(&a10);
  sub_216AECF70((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Remove(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 || !*(_DWORD *)(a1 + 8))
  {
    if (v4) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }
  BOOL v9 = "sdf/namespaceEdit.cpp";
  int v10 = "Remove";
  uint64_t v11 = 350;
  uint64_t v12 = "BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Remove(std::string *)";
  char v13 = 0;
  if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v9, "!IsRemoved()", 0))
  {
    uint64_t v8 = "Coding error: Node has no parent";
    goto LABEL_18;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_10:
    BOOL v9 = "sdf/namespaceEdit.cpp";
    int v10 = "Remove";
    uint64_t v11 = 354;
    uint64_t v12 = "BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Remove(std::string *)";
    char v13 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v9, "_parent", 0))
    {
      uint64_t v8 = "Coding error: Removing root";
      goto LABEL_18;
    }
    uint64_t v4 = *(void *)(a1 + 16);
  }
LABEL_4:
  uint64_t v5 = sub_216AF1534(*(void *)(v4 + 24), a1);
  if ((uint64_t *)(*(void *)(*(void *)(a1 + 16) + 24) + 8) == v5)
  {
    BOOL v9 = "sdf/namespaceEdit.cpp";
    int v10 = "Remove";
    uint64_t v11 = 360;
    uint64_t v12 = "BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Remove(std::string *)";
    char v13 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v9, "i != _parent->_children->end()", 0) & 1) == 0)
    {
      uint64_t v8 = "Coding error: Node not found under parent";
LABEL_18:
      MEMORY[0x21D4477E0](a2, v8);
      return 0;
    }
  }
  if (v5[4] != a1)
  {
    BOOL v9 = "sdf/namespaceEdit.cpp";
    int v10 = "Remove";
    uint64_t v11 = 365;
    uint64_t v12 = "BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Remove(std::string *)";
    char v13 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v9, "i->get() == this", 0) & 1) == 0)
    {
      uint64_t v8 = "Coding error: Found wrong node by key";
      goto LABEL_18;
    }
  }
  sub_2167AE00C(*(uint64_t ***)(*(void *)(a1 + 16) + 24), v5);
  BOOL v9 = (char *)v5;
  uint64_t v6 = 1;
  BYTE1(v1sub_2168EBBB8(&a9, 0) = 1;
  void v5[4] = 0;
  *(void *)(a1 + 16) = 0;
  sub_216AF181C((uint64_t **)&v9);
  return v6;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Reparent(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, uint64_t a4)
{
  uint64_t v22 = a2;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3, &v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v18);
  sub_21697C414(&v17);
  sub_216AF06F4((uint64_t)&v17, a3);
  if ((void *)(*(void *)(a1 + 24) + 8) != sub_216AF1534(*(void *)(a1 + 24), (uint64_t)&v17))
  {
    uint64_t v12 = "sdf/namespaceEdit.cpp";
    char v13 = "Reparent";
    uint64_t v14 = 390;
    int v15 = "BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Reparent(_Node *, const SdfPath &, std::string *)";
    char v16 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "_children->find(keyNode) == _children->end()", 0) & 1) == 0)
    {
      int v10 = "Coding error: Object with new path already exists";
LABEL_12:
      MEMORY[0x21D4477E0](a4, v10);
      goto LABEL_13;
    }
  }
  if (!*(void *)(a2 + 16))
  {
    if (*(_DWORD *)(a2 + 8))
    {
      uint64_t v12 = "sdf/namespaceEdit.cpp";
      char v13 = "Reparent";
      uint64_t v14 = 396;
      int v15 = "BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Reparent(_Node *, const SdfPath &, std::string *)";
      char v16 = 0;
      if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "!node->IsRemoved()", 0) & 1) == 0)
      {
        int v10 = "Coding error: Object at path has been removed";
        goto LABEL_12;
      }
    }
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Remove(a2, a4))
  {
LABEL_13:
    uint64_t v9 = 0;
    goto LABEL_14;
  }
  sub_216AF0C38(a2, (uint64_t)&v17);
  sub_216AF1660(*(uint64_t ***)(a1 + 24), &v22);
  if ((v8 & 1) == 0)
  {
    uint64_t v12 = "sdf/namespaceEdit.cpp";
    char v13 = "Reparent";
    uint64_t v14 = 410;
    int v15 = "BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Reparent(_Node *, const SdfPath &, std::string *)";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "_children->emplace(node).second", 0);
  }
  *(void *)(v22 + 16) = a1;
  uint64_t v9 = 1;
LABEL_14:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  sub_21697C414(&v20);
  sub_216AF07CC(&v19, 0);
  sub_216AF0B98((uint64_t)&v17);
  return v9;
}

void sub_216AED774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216AECF70((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::FindOrCreateOriginalPath(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  NodeAtPath = pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_FindOrCreateNodeAtPath(this, a2);
  if (NodeAtPath) {
    return (uint64_t *)((char *)NodeAtPath + 32);
  }

  return pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(0);
}

pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_FindOrCreateNodeAtPath(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  if (pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_IsDeadspace(this, a2)) {
    return 0;
  }
  BOOL v11 = 0;
  Child = (pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *)((char *)this + 8);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(a2, (uint64_t *)&v9);
  uint64_t v5 = v9;
  for (i = v10; v5 != i; uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v5 + 8))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(v5))
    {
      TargetPath = pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(v5);
      pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_UneditPath(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)TargetPath, (uint64_t *)&v12);
      Child = (pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *)pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::FindOrCreateChild(Child, (const pxrInternal__aapl__pxrReserved__::SdfPath *)TargetPath, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, &v11);
      if (v11 && *(unsigned char *)this) {
        pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_AddBackpointer((uint64_t **)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)TargetPath, Child);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
      sub_21697C414(&v12);
    }
    else
    {
      Child = (pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *)pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::FindOrCreateChild(Child, v5);
    }
  }
  uint64_t v12 = &v9;
  sub_216981168((void ***)&v12);
  return Child;
}

void sub_216AED900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  sub_216981168(&a14);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::GetOriginalPath(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL IsDeadspace = pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_IsDeadspace(this, a2);
  if (IsDeadspace)
  {
    int v7 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)IsDeadspace);
    sub_216981010(a3, v7);
    sub_21698105C((_DWORD *)a3 + 1, (_DWORD *)v7 + 1);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_UneditPath(this, a2, a3);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_IsDeadspace(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4 = (void *)((char *)this + 56);
  uint64_t v5 = (void *)*((void *)this + 7);
  if (v5)
  {
    do
    {
      int v6 = sub_2169817E8(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v5 + 28));
      int v7 = v5 + 1;
      if (v6)
      {
        int v7 = v5;
        uint64_t v4 = v5;
      }
      uint64_t v5 = (void *)*v7;
    }
    while (*v7);
  }
  if (v4 == *((void **)this + 6)) {
    return 0;
  }
  char v8 = (void *)*v4;
  if (*v4)
  {
    do
    {
      uint64_t v9 = v8;
      char v8 = (void *)v8[1];
    }
    while (v8);
  }
  else
  {
    do
    {
      uint64_t v9 = (void *)v4[2];
      BOOL v10 = *v9 == (void)v4;
      uint64_t v4 = v9;
    }
    while (v10);
  }

  return pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 28));
}

void pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_UneditPath(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = (char *)this + 8;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(a2, (uint64_t *)&v10);
  int v6 = v10;
  int v7 = v11;
  if (v10 == v11)
  {
    uint64_t v9 = v5;
LABEL_6:
    uint64_t v12 = &v10;
    sub_216981168((void ***)&v12);
    sub_216981010(a3, (_DWORD *)v9 + 8);
    sub_21698105C((_DWORD *)a3 + 1, (_DWORD *)v9 + 9);
  }
  else
  {
    while (1)
    {
      uint64_t Child = pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::GetChild((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *)v5, v6);
      uint64_t v9 = (char *)Child;
      if (!Child) {
        break;
      }
      int v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8);
      uint64_t v5 = (char *)Child;
      if (v6 == v7) {
        goto LABEL_6;
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v6, &v12);
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(a3, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 32), 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
    sub_21697C414(&v12);
    uint64_t v12 = &v10;
    sub_216981168((void ***)&v12);
  }
}

void sub_216AEDB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216981168(&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::Apply(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *a1, _DWORD *a2, uint64_t a3)
{
  int v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 2);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 2))
  {
    if (*(void *)a2 == *((void *)a2 + 1))
    {
      return 1;
    }
    else
    {
      return pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Move(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2, v6, a3);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Remove(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2, a3);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Remove(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  NodeAtPath = pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_GetNodeAtPath(a1, a2);
  if (!NodeAtPath)
  {
    v10[0] = "sdf/namespaceEdit.cpp";
    v10[1] = "_Remove";
    void v10[2] = 514;
    void v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Remove(const SdfPath &, std::string *)";
    char v11 = 0;
    if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v10, "node", 0))
    {
      if (pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Remove(0, a3)) {
        goto LABEL_4;
      }
    }
    else
    {
      MEMORY[0x21D4477E0](a3, "Coding error: Object at path doesn't exist");
    }
    return 0;
  }
  uint64_t v7 = (uint64_t)NodeAtPath;
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Remove((uint64_t)NodeAtPath, a3);
  if (!result) {
    return result;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v7 + 36));
  sub_21697C414((_DWORD *)(v7 + 32));
  sub_216AF07CC((void ***)(v7 + 24), 0);
  uint64_t v9 = (void *)sub_216AF0B98(v7);
  operator delete(v9);
LABEL_4:
  if (*(unsigned char *)a1) {
    pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_RemoveBackpointers(a1, a2);
  }
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_AddDeadspace((uint64_t **)a1, a2);
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Move(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, uint64_t a4)
{
  NodeAtPath = pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_GetNodeAtPath(a1, a2);
  if (!NodeAtPath)
  {
    uint64_t v12 = "sdf/namespaceEdit.cpp";
    char v13 = "_Move";
    uint64_t v14 = 546;
    int v15 = "BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Move(const SdfPath &, const SdfPath &, std::string *)";
    char v16 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "node", 0) & 1) == 0)
    {
      char v11 = "Coding error: Object at path doesn't exist";
LABEL_12:
      MEMORY[0x21D4477E0](a4, v11);
      return 0;
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3, &v12);
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_GetNodeAtPath(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
  sub_21697C414(&v12);
  if (!v9)
  {
    uint64_t v12 = "sdf/namespaceEdit.cpp";
    char v13 = "_Move";
    uint64_t v14 = 553;
    int v15 = "BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Move(const SdfPath &, const SdfPath &, std::string *)";
    char v16 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "newParent", 0) & 1) == 0)
    {
      char v11 = "Coding error: New parent object doesn't exist";
      goto LABEL_12;
    }
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::Reparent((uint64_t)v9, (uint64_t)NodeAtPath, a3, a4);
  if (result)
  {
    if (*(unsigned char *)a1) {
      pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_FixBackpointers(a1, a2, a3);
    }
    pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_MoveDeadspaceDescendants(a1, a2, a3);
    pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_AddDeadspace((uint64_t **)a1, a2);
    pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_RemoveDeadspace((uint64_t **)a1, a3);
    return 1;
  }
  return result;
}

void sub_216AEDF04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_GetNodeAtPath(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t Child = (pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *)((char *)this + 8);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(a2, v6);
  char v3 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v6[0];
  uint64_t v4 = v6[1];
  while (v3 != (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4)
  {
    uint64_t Child = (pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *)pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node::GetChild(Child, v3);
    if (!Child) {
      break;
    }
    char v3 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v3 + 8);
  }
  uint64_t v7 = (void **)v6;
  sub_216981168(&v7);
  return Child;
}

void sub_216AEDF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216981168(&a12);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_AddBackpointer(uint64_t **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_Node *a3)
{
  uint64_t v5 = a3;
  int v6 = a2;
  char v3 = sub_216AF1860(this + 9, a2, (uint64_t)&unk_2174BFD90, &v6);
  return sub_216856018((uint64_t **)v3 + 5, (unint64_t *)&v5, (uint64_t *)&v5);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_RemoveBackpointers(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  char v3 = (uint64_t *)((char *)this + 80);
  uint64_t v4 = (void *)*((void *)this + 10);
  if (v4)
  {
    int v6 = (uint64_t *)((char *)this + 80);
    do
    {
      int v7 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 4), a2);
      char v8 = v4 + 1;
      if (!v7)
      {
        char v8 = v4;
        int v6 = v4;
      }
      uint64_t v4 = (void *)*v8;
    }
    while (*v8);
    if (v6 != v3)
    {
      uint64_t v9 = v6;
      while (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 4), a2))
      {
        BOOL v10 = (uint64_t *)v9[1];
        if (v10)
        {
          do
          {
            char v11 = v10;
            BOOL v10 = (uint64_t *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            char v11 = (uint64_t *)v9[2];
            BOOL v12 = *v11 == (void)v9;
            uint64_t v9 = v11;
          }
          while (!v12);
        }
        uint64_t v9 = v11;
        if (v11 == v3) {
          goto LABEL_18;
        }
      }
      char v3 = v9;
    }
  }
  else
  {
    int v6 = (uint64_t *)((char *)this + 80);
  }
LABEL_18:

  return sub_216AF1A64((uint64_t **)this + 9, v6, v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_AddDeadspace(uint64_t **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  if (*(void *)a2 != *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)this)) {
    return (uint64_t)sub_216A5CF30(this + 6, a2, a2);
  }
  v5[0] = "sdf/namespaceEdit.cpp";
  v5[1] = "_AddDeadspace";
  v5[2] = 645;
  void v5[3] = "void pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_AddDeadspace(const SdfPath &)";
  char v6 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "path != SdfPath::AbsoluteRootPath()", 0);
  if (result) {
    return (uint64_t)sub_216A5CF30(this + 6, a2, a2);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_FixBackpointers(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  char v6 = (uint64_t *)((char *)this + 80);
  uint64_t v5 = (void *)*((void *)this + 10);
  if (!v5)
  {
    BOOL v10 = (uint64_t *)((char *)this + 80);
    int v7 = (uint64_t *)((char *)this + 80);
LABEL_41:
    long long v44 = 0;
    uint64_t v45 = 0;
    long long v43 = (uint64_t *)&v44;
    goto LABEL_42;
  }
  int v7 = (uint64_t *)((char *)this + 80);
  do
  {
    int v8 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 4), a2);
    uint64_t v9 = v5 + 1;
    if (!v8)
    {
      uint64_t v9 = v5;
      int v7 = v5;
    }
    uint64_t v5 = (void *)*v9;
  }
  while (*v9);
  BOOL v10 = v6;
  if (v7 != v6)
  {
    BOOL v10 = v7;
    while (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 4), a2))
    {
      char v11 = (uint64_t *)v10[1];
      if (v11)
      {
        do
        {
          BOOL v12 = v11;
          char v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          BOOL v12 = (uint64_t *)v10[2];
          BOOL v13 = *v12 == (void)v10;
          BOOL v10 = v12;
        }
        while (!v13);
      }
      BOOL v10 = v12;
      if (v12 == v6)
      {
        BOOL v10 = v6;
        break;
      }
    }
  }
  if (v7 == v10) {
    goto LABEL_41;
  }
  uint64_t v14 = v7;
  do
  {
    int v15 = (uint64_t *)v14[5];
    if (v15 != v14 + 6)
    {
      do
      {
        uint64_t v16 = v15[4];
        if (*(_DWORD *)(v16 + 8) != 2) {
          sub_2168BBB60();
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v43, (pxrInternal__aapl__pxrReserved__::SdfPath *)v15[4], a2, a3, 0);
        LODWORD(v38) = v43;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(&v43);
        HIDWORD(v38) = HIDWORD(v43);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)&v43 + 1);
        LODWORD(v39) = 2;
        sub_216AF0C38(v16, (uint64_t)&v38);
        sub_216AF0B98((uint64_t)&v38);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
        sub_21697C414(&v43);
        int v17 = (uint64_t *)v15[1];
        if (v17)
        {
          do
          {
            uint64_t v18 = v17;
            int v17 = (uint64_t *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            uint64_t v18 = (uint64_t *)v15[2];
            BOOL v13 = *v18 == (void)v15;
            int v15 = v18;
          }
          while (!v13);
        }
        int v15 = v18;
      }
      while (v18 != v14 + 6);
    }
    int v19 = (uint64_t *)v14[1];
    if (v19)
    {
      do
      {
        int v20 = v19;
        int v19 = (uint64_t *)*v19;
      }
      while (v19);
    }
    else
    {
      do
      {
        int v20 = (uint64_t *)v14[2];
        BOOL v13 = *v20 == (void)v14;
        uint64_t v14 = v20;
      }
      while (!v13);
    }
    uint64_t v14 = v20;
  }
  while (v20 != v10);
  long long v44 = 0;
  uint64_t v45 = 0;
  long long v43 = (uint64_t *)&v44;
  int v21 = v7;
  do
  {
    long long v38 = v21 + 4;
    uint64_t v22 = sub_216AF1860(&v43, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 + 4), (uint64_t)&unk_2174BFD90, (_DWORD **)&v38);
    sub_2168A6B2C(v22 + 5, (uint64_t)(v21 + 5));
    uint64_t v23 = (uint64_t *)v21[1];
    if (v23)
    {
      do
      {
        char v24 = v23;
        uint64_t v23 = (uint64_t *)*v23;
      }
      while (v23);
    }
    else
    {
      do
      {
        char v24 = (uint64_t *)v21[2];
        BOOL v13 = *v24 == (void)v21;
        int v21 = v24;
      }
      while (!v13);
    }
    int v21 = v24;
  }
  while (v24 != v10);
LABEL_42:
  char v25 = (uint64_t **)(v6 - 1);
  sub_216AF1A64((uint64_t **)v6 - 1, v7, v10);
  uint64_t v26 = (void *)*v6;
  if (!*v6) {
    goto LABEL_49;
  }
  uint64_t v27 = v6;
  do
  {
    int v28 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)(v26 + 4), a3);
    unint64_t v29 = v26 + 1;
    if (!v28)
    {
      unint64_t v29 = v26;
      uint64_t v27 = v26;
    }
    uint64_t v26 = (void *)*v29;
  }
  while (*v29);
  if (v27 == v6
    || !pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v27 + 4), a2)
    || (long long v38 = (uint64_t *)"sdf/namespaceEdit.cpp",
        long long v39 = "_FixBackpointers",
        uint64_t v40 = 613,
        uint64_t v41 = "void pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_FixBackpointers(const SdfPath &, const SdfPath &)",
        char v42 = 0,
        long long v36 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Found backpointers under new path", v30, v31), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v38, "i == _nodesWithPath.end() || !i->first.HasPrefix(currentPath)", v36) & 1) != 0))
  {
LABEL_49:
    uint64_t v32 = v43;
    if (v43 != (uint64_t *)&v44)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v37, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v32 + 4), a2, a3, 1);
        long long v38 = &v37;
        uint64_t v33 = sub_216AF1ACC(v25, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v37, (uint64_t)&unk_2174BFD90, (_DWORD **)&v38);
        sub_2168A6B2C(v33 + 5, (uint64_t)(v32 + 5));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
        sub_21697C414(&v37);
        uint64_t v34 = (uint64_t *)v32[1];
        if (v34)
        {
          do
          {
            long long v35 = v34;
            uint64_t v34 = (uint64_t *)*v34;
          }
          while (v34);
        }
        else
        {
          do
          {
            long long v35 = (uint64_t *)v32[2];
            BOOL v13 = *v35 == (void)v32;
            uint64_t v32 = v35;
          }
          while (!v13);
        }
        uint64_t v32 = v35;
      }
      while (v35 != (uint64_t *)&v44);
    }
  }
  sub_216AF148C((uint64_t)&v43, v44);
}

void sub_216AEE560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *a18)
{
}

void pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_MoveDeadspaceDescendants(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  char v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  if (*(void *)a2 != *(void *)v6
    || (uint64_t v23 = "sdf/namespaceEdit.cpp",
        char v24 = "_MoveDeadspaceDescendants",
        unint64_t v25 = 675,
        uint64_t v26 = "void pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_MoveDeadspaceDescendants(const SdfPath"
              " &, const SdfPath &)",
        char v27 = 0,
        char v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v23, "from != SdfPath::AbsoluteRootPath()", 0), v6))
  {
    if (*(void *)a3 != *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6)
      || (v21[0] = (void **)"sdf/namespaceEdit.cpp",
          v21[1] = (void **)"_MoveDeadspaceDescendants",
          v21[2] = (void **)676,
          void v21[3] = (void **)"void pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_MoveDeadspaceDescendants"
                            "(const SdfPath &, const SdfPath &)",
          char v22 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v21, "to != SdfPath::AbsoluteRootPath()", 0) & 1) != 0))
    {
      int v8 = (void *)*((void *)this + 6);
      int v7 = (char *)this + 48;
      uint64_t v9 = sub_216AEE8AC(v8, (void *)v7 + 1, a2, &v23);
      BOOL v10 = v9;
      BOOL v12 = v11;
      uint64_t v23 = 0;
      char v24 = 0;
      unint64_t v25 = 0;
      if (v9 != v11)
      {
        BOOL v13 = v9;
        do
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)v21, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 28), a2, a3, 1);
          uint64_t v14 = v24;
          if ((unint64_t)v24 >= v25)
          {
            int v15 = (char *)sub_216AE5CE4((uint64_t *)&v23, v21);
          }
          else
          {
            sub_21697D878(v24, v21);
            sub_21697D8B4((_DWORD *)v14 + 1, (_DWORD *)v21 + 1);
            int v15 = v14 + 8;
          }
          char v24 = v15;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v21 + 1);
          sub_21697C414(v21);
          uint64_t v16 = (uint64_t *)v13[1];
          if (v16)
          {
            do
            {
              int v17 = v16;
              uint64_t v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              int v17 = (uint64_t *)v13[2];
              BOOL v18 = *v17 == (void)v13;
              BOOL v13 = v17;
            }
            while (!v18);
          }
          BOOL v13 = v17;
        }
        while (v17 != v12);
      }
      sub_216AF1D2C((uint64_t **)v7, v10, v12);
      int v19 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v23;
      int v20 = v24;
      while (v19 != (const pxrInternal__aapl__pxrReserved__::SdfPath *)v20)
      {
        sub_2169814FC((uint64_t **)v7, (void *)v7 + 1, v19, v19);
        int v19 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v19 + 8);
      }
      v21[0] = (void **)&v23;
      sub_216981168(v21);
    }
  }
}

void sub_216AEE7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  a9 = (void **)&a14;
  sub_216981168(&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_RemoveDeadspace(uint64_t **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  if (*(void *)a2 != *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)this)) {
    return sub_216AF1BE4(this + 6, a2);
  }
  v5[0] = "sdf/namespaceEdit.cpp";
  v5[1] = "_RemoveDeadspace";
  v5[2] = 656;
  void v5[3] = "void pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_RemoveDeadspace(const SdfPath &)";
  char v6 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "path != SdfPath::AbsoluteRootPath()", 0);
  if (result) {
    return sub_216AF1BE4(this + 6, a2);
  }
  return result;
}

void *sub_216AEE8AC(void *a1, void *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, void *a4)
{
  BOOL v18 = a4;
  char v6 = sub_216AF1C40(a1, a2, a3);
  int v7 = v6;
  if (v6 != a2)
  {
    unint64_t v8 = 0;
    uint64_t v9 = v6;
    do
    {
      BOOL v10 = (void *)v9[1];
      if (v10)
      {
        do
        {
          char v11 = v10;
          BOOL v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          char v11 = (void *)v9[2];
          BOOL v12 = *v11 == (void)v9;
          uint64_t v9 = v11;
        }
        while (!v12);
      }
      ++v8;
      uint64_t v9 = v11;
    }
    while (v11 != a2);
    BOOL v13 = v6;
    do
    {
      unint64_t v14 = v8 >> 1;
      BOOL v18 = v13;
      sub_21680F304(&v18, v8 >> 1);
      if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v18 + 28), a3))
      {
        int v15 = v18;
        uint64_t v16 = (void *)v18[1];
        if (v16)
        {
          do
          {
            BOOL v13 = v16;
            uint64_t v16 = (void *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            BOOL v13 = (void *)v15[2];
            BOOL v12 = *v13 == (void)v15;
            int v15 = v13;
          }
          while (!v12);
        }
        unint64_t v14 = v8 + ~v14;
      }
      unint64_t v8 = v14;
    }
    while (v14);
  }
  return v7;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::operator==(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2
      && *(void *)(a1 + 8) == *(void *)(a2 + 8)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::operator!=(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 != *(void *)a2
      || *(void *)(a1 + 8) != *(void *)(a2 + 8)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16);
}

void *pxrInternal__aapl__pxrReserved__::operator<<(void *a1, _DWORD *a2)
{
  sub_216AF0EF0(&v15);
  BOOL v6 = *(void *)a2 != v15 || *((void *)a2 + 1) != v16 || a2[4] != (unint64_t)v17;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_21697C414(&v16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_21697C414(&v15);
  if (v6)
  {
    int v7 = sub_216779180(a1, (uint64_t)"(", 1);
    unint64_t v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
    uint64_t v9 = sub_216779180(v8, (uint64_t)",", 1);
    BOOL v10 = pxrInternal__aapl__pxrReserved__::operator<<(v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 2));
    sub_216779180(v10, (uint64_t)",", 1);
    char v11 = (void *)std::ostream::operator<<();
    BOOL v12 = ")";
    uint64_t v13 = 1;
  }
  else
  {
    BOOL v12 = "()";
    char v11 = a1;
    uint64_t v13 = 2;
  }
  return sub_216779180(v11, (uint64_t)v12, v13);
}

_DWORD *sub_216AEEB3C(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 3);
  sub_21697C414(a1 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

void sub_216AEEC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  *(void *)(v17 - 4sub_2168EBBB8(&a9, 0) = &a9;
  sub_216782F20((void ***)(v17 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_216AEECA8(_DWORD *a1)
{
  sub_21677B834((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216AEEDDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail *pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail(pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail *this)
{
  *(_DWORD *)this = 2;
  sub_216AF0EF0((_DWORD *)this + 1);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  return this;
}

{
  *(_DWORD *)this = 2;
  sub_216AF0EF0((_DWORD *)this + 1);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail(uint64_t a1, int a2, _DWORD *a3, long long *a4)
{
  *(_DWORD *)a1 = a2;
  sub_216981010((_DWORD *)(a1 + 4), a3);
  sub_21698105C((_DWORD *)(a1 + 8), a3 + 1);
  sub_216981010((_DWORD *)(a1 + 12), a3 + 2);
  sub_21698105C((_DWORD *)(a1 + 16), a3 + 3);
  *(_DWORD *)(a1 + 2sub_2168EBBB8(&a9, 0) = a3[4];
  int v7 = (unsigned char *)(a1 + 24);
  if (*((char *)a4 + 23) < 0)
  {
    sub_216778F24(v7, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v8 = *a4;
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *((void *)a4 + 2);
    *(_OWORD *)int v7 = v8;
  }
  return a1;
}

void sub_216AEEEFC(_Unwind_Exception *a1)
{
  sub_216AEEB3C(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(void *)(a1 + 4) != *(void *)(a2 + 4)
    || *(void *)(a1 + 12) != *(void *)(a2 + 12)
    || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
  {
    return 0;
  }
  uint64_t v2 = *(unsigned __int8 *)(a1 + 47);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 47);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 32);
  }
  if (v3 != v4) {
    return 0;
  }
  BOOL v6 = (const void **)(a1 + 24);
  uint64_t v9 = *(unsigned __int8 **)(a2 + 24);
  int v7 = (unsigned __int8 *)(a2 + 24);
  long long v8 = v9;
  if (v5 < 0) {
    int v7 = v8;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*v6, v7, *(void *)(a1 + 32)) == 0;
  }
  if (!*(unsigned char *)(a1 + 47)) {
    return 1;
  }
  uint64_t v10 = v2 - 1;
  do
  {
    int v12 = *(unsigned __int8 *)v6;
    BOOL v6 = (const void **)((char *)v6 + 1);
    int v11 = v12;
    int v14 = *v7++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::operator!=(uint64_t a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::operator==(a1, a2) ^ 1;
}

void *pxrInternal__aapl__pxrReserved__::operator<<(void *a1, unsigned int *a2)
{
  LODWORD(__p) = 2;
  sub_216AF0EF0((_DWORD *)&__p + 1);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  int v4 = pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::operator==((uint64_t)a2, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
  sub_21697C414((_DWORD *)&v25 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_21697C414((_DWORD *)&__p + 1);
  if (v4)
  {
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C7597D8, *a2, (uint64_t)&__p);
    if ((v27 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v27 & 0x80u) == 0) {
      uint64_t v6 = v27;
    }
    else {
      uint64_t v6 = v25;
    }
    int v7 = sub_216779180(a1, (uint64_t)p_p, v6);
  }
  else
  {
    long long v8 = sub_216779180(a1, (uint64_t)"(", 1);
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C7597D8, *a2, (uint64_t)&__p);
    if ((v27 & 0x80u) == 0) {
      uint64_t v9 = &__p;
    }
    else {
      uint64_t v9 = __p;
    }
    if ((v27 & 0x80u) == 0) {
      uint64_t v10 = v27;
    }
    else {
      uint64_t v10 = v25;
    }
    int v11 = sub_216779180(v8, (uint64_t)v9, v10);
    int v12 = sub_216779180(v11, (uint64_t)",", 1);
    int v13 = pxrInternal__aapl__pxrReserved__::operator<<(v12, a2 + 1);
    int v14 = sub_216779180(v13, (uint64_t)",", 1);
    uint64_t v17 = *((void *)a2 + 3);
    BOOL v16 = a2 + 6;
    uint64_t v15 = v17;
    int v18 = *((char *)v16 + 23);
    if (v18 >= 0) {
      uint64_t v19 = (uint64_t)v16;
    }
    else {
      uint64_t v19 = v15;
    }
    if (v18 >= 0) {
      uint64_t v20 = *((unsigned __int8 *)v16 + 23);
    }
    else {
      uint64_t v20 = *((void *)v16 + 1);
    }
    int v21 = sub_216779180(v14, v19, v20);
    int v7 = sub_216779180(v21, (uint64_t)")", 1);
  }
  char v22 = v7;
  if ((char)v27 < 0) {
    operator delete(__p);
  }
  return v22;
}

{
  void **v3;
  uint64_t v4;
  void *v5;
  const std::locale::facet *v6;
  void *__p[2];
  unsigned __int8 v9;
  std::locale v10;

  pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&stru_26C758108, *a2, (uint64_t)__p);
  if ((v9 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    int v4 = v9;
  }
  else {
    int v4 = (uint64_t)__p[1];
  }
  int v5 = sub_216779180(a1, (uint64_t)v3, v4);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  uint64_t v6 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_216AEF1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216AEF1C8(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 16));
  sub_21697C414((_DWORD *)(a1 + 12));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 8));
  sub_21697C414((_DWORD *)(a1 + 4));
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::operator<<(void *a1, unsigned int **a2)
{
  memset(v9, 0, sizeof(v9));
  uint64_t v3 = *a2;
  int v4 = a2[1];
  int v11 = v9;
  while (v3 != v4)
  {
    sub_216AEF33C(v3);
    sub_216AF1D94((uint64_t **)&v11, (long long *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    v3 += 12;
  }
  pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", v9, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v7 = sub_216779180(a1, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
  sub_216782F20((void ***)&__p);
  return v7;
}

void sub_216AEF300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  *(void *)(v17 - 4sub_2168EBBB8(&a9, 0) = &a9;
  sub_216782F20((void ***)(v17 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_216AEF33C(unsigned int *a1)
{
  sub_21677B834((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216AEF470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::SdfBatchNamespaceEdit(void *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::SdfBatchNamespaceEdit(pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *this, const pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  sub_216AF1EDC(this, *(_DWORD **)a2, *((_DWORD **)a2 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 2));
  return this;
}

{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  sub_216AF1EDC(this, *(_DWORD **)a2, *((_DWORD **)a2 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 2));
  return this;
}

void *pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::SdfBatchNamespaceEdit(void *a1, _DWORD **a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_216AF1EDC(a1, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2));
  return a1;
}

{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_216AF1EDC(a1, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2));
  return a1;
}

void pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::~SdfBatchNamespaceEdit(void **this)
{
  uint64_t v1 = this;
  sub_216ABC634(&v1);
}

{
  void **v1;

  uint64_t v1 = this;
  sub_216ABC634(&v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::operator=(uint64_t a1, _DWORD **a2)
{
  if ((_DWORD **)a1 != a2) {
    sub_216AF20D8(a1, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2));
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::Process(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  if (a2)
  {
    uint64_t v10 = *a2;
    uint64_t v9 = (_DWORD *)a2[1];
    if (v9 != (_DWORD *)*a2)
    {
      do
      {
        v9 -= 5;
        sub_216ABC6CC((uint64_t)(a2 + 2), v9);
      }
      while (v9 != (_DWORD *)v10);
    }
    a2[1] = v10;
  }
  v72[0] = a6;
  sub_216AF0F48((uint64_t)v73);
  v77 = v78;
  v78[0] = 0;
  v80[0] = 0;
  v80[1] = 0;
  v78[1] = 0;
  uint64_t v79 = v80;
  int v11 = *(_DWORD **)a1;
  int v12 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 == v12)
  {
LABEL_133:
    int v17 = 2;
    goto LABEL_164;
  }
  uint64_t v55 = (uint64_t)(a5 + 2);
  while (1)
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v11))
    {
      char IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 2));
    }
    else
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v11))
      {
        if (!a5) {
          goto LABEL_163;
        }
        sub_216779094(&v64, "Unsupported object type");
        pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, &v64);
        unint64_t v46 = a5[1];
        if (v46 >= a5[2])
        {
          uint64_t v47 = sub_216AF235C(a5, (uint64_t)&v66);
        }
        else
        {
          sub_216AF2468(v55, a5[1], (uint64_t)&v66);
          uint64_t v47 = v46 + 48;
        }
        a5[1] = v47;
        if (v71 < 0) {
          operator delete(__p);
        }
        goto LABEL_161;
      }
      char IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 2));
    }
    if ((IsPrimPath & 1) == 0
      && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v11 + 2))
    {
      if (!a5) {
        goto LABEL_163;
      }
      sub_216779094(&v64, "Path type mismatch");
      pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, &v64);
      unint64_t v48 = a5[1];
      if (v48 >= a5[2])
      {
        uint64_t v49 = sub_216AF235C(a5, (uint64_t)&v66);
      }
      else
      {
        sub_216AF2468(v55, a5[1], (uint64_t)&v66);
        uint64_t v49 = v48 + 48;
      }
      a5[1] = v49;
      if (v71 < 0) {
        operator delete(__p);
      }
      goto LABEL_161;
    }
    NodeAtPath = pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_FindOrCreateNodeAtPath((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *)v72, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v11);
    uint64_t v15 = NodeAtPath ? (uint64_t *)((char *)NodeAtPath + 32) : pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(0);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v15)) {
      break;
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v11 + 2))
    {
      if (!a5) {
        goto LABEL_163;
      }
      sub_216779094(&v64, "Object was removed");
      pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, &v64);
      unint64_t v50 = a5[1];
      if (v50 >= a5[2])
      {
        uint64_t v51 = sub_216AF235C(a5, (uint64_t)&v66);
      }
      else
      {
        sub_216AF2468(v55, a5[1], (uint64_t)&v66);
        uint64_t v51 = v50 + 48;
      }
      a5[1] = v51;
      if (v71 < 0) {
        operator delete(__p);
      }
      goto LABEL_161;
    }
LABEL_132:
    v11 += 5;
    if (v11 == v12) {
      goto LABEL_133;
    }
  }
  uint64_t v16 = *(void *)(a3 + 24);
  if (!v16 || ((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v16 + 48))(v16, v15) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v62);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v63);
    if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v11 + 2)) {
      goto LABEL_33;
    }
    if (*(void *)v11 == *((void *)v11 + 1) && v11[4] == -2)
    {
      int v17 = 3;
      goto LABEL_130;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 2), v59);
    int v18 = pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::_FindOrCreateNodeAtPath((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *)v72, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v59);
    if (v18) {
      uint64_t v19 = (uint64_t *)((char *)v18 + 32);
    }
    else {
      uint64_t v19 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(0);
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v19))
    {
      uint64_t v20 = *(void *)(a3 + 24);
      if (v20 && ((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v20 + 48))(v20, v19) & 1) == 0)
      {
        if (a5)
        {
          sub_216779094(&v64, "New parent does not exist");
          pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, &v64);
          unint64_t v40 = a5[1];
          if (v40 >= a5[2])
          {
            uint64_t v41 = sub_216AF235C(a5, (uint64_t)&v66);
          }
          else
          {
            sub_216AF2468(v55, a5[1], (uint64_t)&v66);
            uint64_t v41 = v40 + 48;
          }
          a5[1] = v41;
          if (v71 < 0) {
            operator delete(__p);
          }
          goto LABEL_125;
        }
      }
      else
      {
        if (*(void *)v11 == *((void *)v11 + 1))
        {
LABEL_32:
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v66, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 2), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v59, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v19, 1);
          sub_21697DE94(&v62, (int *)&v66);
          sub_21697DEEC(&v63, (int *)&v66 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v66 + 1);
          sub_21697C414(&v66);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v59 + 1);
          sub_21697C414(v59);
LABEL_33:
          if ((a6 & 1) == 0)
          {
            long long v64 = 0uLL;
            uint64_t v65 = 0;
            pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively((uint64_t)v11, (uint64_t *)&v64);
            char v22 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)&v64 + 1);
            for (uint64_t i = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v64;
                  i != v22;
                  uint64_t i = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)i + 8))
            {
              pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::GetOriginalPath((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *)v72, i, &v61);
              if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v61)
                && v61 != *(void *)i)
              {
                if (a5)
                {
                  sub_216779094(v59, "Current target was edited");
                  pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, (long long *)v59);
                  unint64_t v34 = a5[1];
                  if (v34 >= a5[2])
                  {
                    uint64_t v35 = sub_216AF235C(a5, (uint64_t)&v66);
                  }
                  else
                  {
                    sub_216AF2468(v55, a5[1], (uint64_t)&v66);
                    uint64_t v35 = v34 + 48;
                  }
                  a5[1] = v35;
                  if (v71 < 0) {
                    operator delete(__p);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v69);
                  sub_21697C414(&v68);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
                  sub_21697C414((_DWORD *)&v66 + 1);
                  if (v60 < 0) {
                    operator delete(v59[0]);
                  }
                }
                goto LABEL_106;
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
              sub_21697C414(&v61);
            }
            pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively((uint64_t)(v11 + 2), (uint64_t *)&v64);
            char v24 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)&v64 + 1);
            for (uint64_t j = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v64;
                  ;
                  uint64_t j = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)j + 8))
            {
              if (j == v24)
              {
                long long v66 = (void **)&v64;
                sub_216981168(&v66);
                goto LABEL_45;
              }
              pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::GetOriginalPath((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *)v72, j, &v61);
              if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v61)
                && v61 != *(void *)j)
              {
                break;
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
              sub_21697C414(&v61);
            }
            if (a5)
            {
              sub_216779094(v59, "New target was edited");
              pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, (long long *)v59);
              unint64_t v36 = a5[1];
              if (v36 >= a5[2])
              {
                uint64_t v37 = sub_216AF235C(a5, (uint64_t)&v66);
              }
              else
              {
                sub_216AF2468(v55, a5[1], (uint64_t)&v66);
                uint64_t v37 = v36 + 48;
              }
              a5[1] = v37;
              if (v71 < 0) {
                operator delete(__p);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v69);
              sub_21697C414(&v68);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
              sub_21697C414((_DWORD *)&v66 + 1);
              if (v60 < 0) {
                operator delete(v59[0]);
              }
            }
LABEL_106:
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
            sub_21697C414(&v61);
            long long v66 = (void **)&v64;
            sub_216981168(&v66);
            goto LABEL_129;
          }
LABEL_45:
          long long v64 = 0uLL;
          uint64_t v65 = 0;
          if (*(void *)(a4 + 24)
            && (sub_216AF0FE4(&v66, v15, &v62, v11[4]),
                char v25 = sub_216AF0638(a4, (uint64_t)&v66, (uint64_t)&v64),
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v68),
                sub_21697C414(&v67),
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v66 + 1),
                sub_21697C414(&v66),
                (v25 & 1) == 0))
          {
            if (a5)
            {
              pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, &v64);
              unint64_t v30 = a5[1];
              if (v30 >= a5[2])
              {
                uint64_t v31 = sub_216AF235C(a5, (uint64_t)&v66);
              }
              else
              {
                sub_216AF2468(v55, a5[1], (uint64_t)&v66);
                uint64_t v31 = v30 + 48;
              }
              a5[1] = v31;
              if (v71 < 0) {
                operator delete(__p);
              }
              goto LABEL_76;
            }
          }
          else
          {
            if (pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::Apply((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *)v72, v11, (uint64_t)&v64))
            {
              if (a2)
              {
                unint64_t v26 = a2[1];
                if (v26 >= a2[2])
                {
                  uint64_t v27 = sub_216AF1048(a2, v11);
                }
                else
                {
                  sub_216AF1154((uint64_t)(a2 + 2), (_DWORD *)a2[1], v11);
                  uint64_t v27 = v26 + 20;
                }
                int v17 = 0;
                a2[1] = v27;
              }
              else
              {
                int v17 = 0;
              }
LABEL_78:
              if (SHIBYTE(v65) < 0) {
                operator delete((void *)v64);
              }
LABEL_130:
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v63);
              sub_21697C414(&v62);
              if (v17 != 3 && v17) {
                goto LABEL_164;
              }
              goto LABEL_132;
            }
            if (a5)
            {
              pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, &v64);
              unint64_t v28 = a5[1];
              if (v28 >= a5[2])
              {
                uint64_t v29 = sub_216AF235C(a5, (uint64_t)&v66);
              }
              else
              {
                sub_216AF2468(v55, a5[1], (uint64_t)&v66);
                uint64_t v29 = v28 + 48;
              }
              a5[1] = v29;
              if (v71 < 0) {
                operator delete(__p);
              }
LABEL_76:
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v69);
              sub_21697C414(&v68);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
              sub_21697C414((_DWORD *)&v66 + 1);
            }
          }
          int v17 = 1;
          goto LABEL_78;
        }
        if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 2)))
        {
          if (a5)
          {
            sub_216779094(&v64, "Object cannot be an ancestor of itself");
            pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, &v64);
            unint64_t v38 = a5[1];
            if (v38 >= a5[2])
            {
              uint64_t v39 = sub_216AF235C(a5, (uint64_t)&v66);
            }
            else
            {
              sub_216AF2468(v55, a5[1], (uint64_t)&v66);
              uint64_t v39 = v38 + 48;
            }
            a5[1] = v39;
            if (v71 < 0) {
              operator delete(__p);
            }
LABEL_125:
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v69);
            sub_21697C414(&v68);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
            sub_21697C414((_DWORD *)&v66 + 1);
LABEL_126:
            if (SHIBYTE(v65) < 0) {
              operator delete((void *)v64);
            }
          }
        }
        else if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 2), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v11))
        {
          if (a5)
          {
            sub_216779094(&v64, "Object cannot be a descendant of itself");
            pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, &v64);
            unint64_t v42 = a5[1];
            if (v42 >= a5[2])
            {
              uint64_t v43 = sub_216AF235C(a5, (uint64_t)&v66);
            }
            else
            {
              sub_216AF2468(v55, a5[1], (uint64_t)&v66);
              uint64_t v43 = v42 + 48;
            }
            a5[1] = v43;
            if (v71 < 0) {
              operator delete(__p);
            }
            goto LABEL_125;
          }
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace::GetOriginalPath((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit_Namespace *)v72, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 2), (uint64_t *)&v66);
          sub_21697DE94(&v62, (int *)&v66);
          sub_21697DEEC(&v63, (int *)&v66 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v66 + 1);
          sub_21697C414(&v66);
          BOOL v44 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
          if (*(void *)(a3 + 24)) {
            BOOL v45 = v44;
          }
          else {
            BOOL v45 = 0;
          }
          if (!v45 || !sub_216AF05E8(a3)) {
            goto LABEL_32;
          }
          if (a5)
          {
            sub_216779094(&v64, "Object already exists");
            pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, &v64);
            sub_216AF0594(a5, (uint64_t)&v66);
            sub_216AEF1C8((uint64_t)&v66);
            goto LABEL_126;
          }
        }
      }
    }
    else if (a5)
    {
      sub_216779094(&v64, "New parent was removed");
      pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, &v64);
      unint64_t v32 = a5[1];
      if (v32 >= a5[2])
      {
        uint64_t v33 = sub_216AF235C(a5, (uint64_t)&v66);
      }
      else
      {
        sub_216AF2468(v55, a5[1], (uint64_t)&v66);
        uint64_t v33 = v32 + 48;
      }
      a5[1] = v33;
      if (v71 < 0) {
        operator delete(__p);
      }
      goto LABEL_125;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v59 + 1);
    sub_21697C414(v59);
LABEL_129:
    int v17 = 1;
    goto LABEL_130;
  }
  if (!a5) {
    goto LABEL_163;
  }
  sub_216779094(&v64, "Object does not exist");
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEditDetail::SdfNamespaceEditDetail((uint64_t)&v66, 0, v11, &v64);
  unint64_t v52 = a5[1];
  if (v52 >= a5[2])
  {
    uint64_t v53 = sub_216AF235C(a5, (uint64_t)&v66);
  }
  else
  {
    sub_216AF2468(v55, a5[1], (uint64_t)&v66);
    uint64_t v53 = v52 + 48;
  }
  a5[1] = v53;
  if (v71 < 0) {
    operator delete(__p);
  }
LABEL_161:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v69);
  sub_21697C414(&v68);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
  sub_21697C414((_DWORD *)&v66 + 1);
  if (SHIBYTE(v65) < 0) {
    operator delete((void *)v64);
  }
LABEL_163:
  int v17 = 1;
LABEL_164:
  sub_216AF148C((uint64_t)&v79, v80[0]);
  sub_216981EE8((uint64_t)&v77, v78[0]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v76);
  sub_21697C414(&v75);
  sub_216AF07CC(&v74, 0);
  sub_216AF0B98((uint64_t)v73);
  return v17 == 2;
}

void sub_216AF0350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,int a29,int a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37)
{
  sub_216AEF1C8((uint64_t)&a37);
  if (a36 < 0) {
    operator delete(__p);
  }
  sub_21697B754(&a22);
  sub_21697B754(&a30);
  sub_216AF068C(v37 - 184);
  _Unwind_Resume(a1);
}

uint64_t sub_216AF0594(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  unint64_t v5 = *(void *)(v3 - 8);
  if (v5 >= v4)
  {
    uint64_t result = sub_216AF235C(a1, a2);
  }
  else
  {
    sub_216AF2468(v3, *(void *)(v3 - 8), a2);
    uint64_t result = v5 + 48;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_216AF05E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    sub_21683A7CC();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_216AF0638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, a2, &v5);
}

uint64_t sub_216AF068C(uint64_t a1)
{
  return a1;
}

uint64_t sub_216AF06F4(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  *(void *)(a1 + 24) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 36));
  return a1;
}

uint64_t *sub_216AF0740@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, _DWORD *a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a1))
  {
    TargetPath = pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(a1);
    sub_216981010(a2, TargetPath);
    uint64_t result = (uint64_t *)sub_21698105C(a2 + 1, (_DWORD *)TargetPath + 1);
    int v6 = 2;
  }
  else
  {
    uint64_t result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a1);
    uint64_t v7 = *result;
    *(void *)a2 = *result;
    if ((v7 & 7) != 0)
    {
      long long v8 = (atomic_uint *)(v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        *(void *)a2 = v8;
      }
    }
    int v6 = 1;
  }
  a2[2] = v6;
  return result;
}

void sub_216AF07CC(void ***a1, void **a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_216AF0820((uint64_t)v2, v2[1]);
    operator delete(v2);
  }
}

void sub_216AF0820(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216AF0820(a1, *a2);
    sub_216AF0820(a1, a2[1]);
    sub_216AF0880(a2 + 4, 0);
    operator delete(a2);
  }
}

void sub_216AF0880(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v2 + 36));
    sub_21697C414((_DWORD *)(v2 + 32));
    sub_216AF07CC(v2 + 24, 0);
    uint64_t v3 = (void *)sub_216AF0B98(v2);
    operator delete(v3);
  }
}

uint64_t sub_216AF08EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 24) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 36));
  return a1;
}

uint64_t sub_216AF0960(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *(void *)(sub_216AF09E8(a1, a3) + 16) = a2;
  int v6 = operator new(0x18uLL);
  v6[2] = 0;
  v6[1] = 0;
  *int v6 = v6 + 1;
  *(void *)(a1 + 24) = v6;
  sub_216981010((_DWORD *)(a1 + 32), a4);
  sub_21698105C((_DWORD *)(a1 + 36), a4 + 1);
  return a1;
}

void sub_216AF09D4(_Unwind_Exception *a1)
{
  sub_216AF0B98(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216AF09E8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  sub_216AF0A30(a1, a2);
  return a1;
}

void sub_216AF0A1C(_Unwind_Exception *a1)
{
  sub_216AF0B98(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216AF0A30(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_26C759790[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 8) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26C7597A8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void sub_216AF0AC4(uint64_t a1, void *a2)
{
  if ((*a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

_DWORD *sub_216AF0AE0(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 1);

  return sub_21697C414(a2);
}

void sub_216AF0B24(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a2 = *a3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a2 &= 0xFFFFFFFFFFFFFFF8;
  }
}

_DWORD *sub_216AF0B54(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4 = sub_216981010(a2, a3) + 1;

  return sub_21698105C(v4, a3 + 1);
}

uint64_t sub_216AF0B98(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C759790[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 8) = -1;
  return a1;
}

uint64_t sub_216AF0BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_216AF09E8(a1, a2);
  *(void *)(v3 + 24) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(v3 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 36));
  return a1;
}

uint64_t sub_216AF0C38(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 8);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26C759790[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_26C7597C0[v4])(&v5, result, a2);
}

uint64_t sub_216AF0CC8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 8)) {
    return sub_216AF0CF0(result);
  }
  return result;
}

void *sub_216AF0CE0(uint64_t *a1, void *a2, uint64_t *a3)
{
  return sub_216AF0D48(*a1, a2, a3);
}

int *sub_216AF0CE8(_DWORD **a1, int *a2, _DWORD *a3)
{
  return sub_216AF0DFC(*a1, a2, a3);
}

uint64_t sub_216AF0CF0(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C759790[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void *sub_216AF0D48(uint64_t a1, void *a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 8) == 1) {
    return sub_2168D2318(a2, a3);
  }
  else {
    return (void *)sub_216AF0D68(a1, a3);
  }
}

uint64_t sub_216AF0D68(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26C759790[v4])(&v7, a1);
  }
  *(_DWORD *)(a1 + 8) = -1;
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 8) = 1;
  return a1;
}

int *sub_216AF0DFC(_DWORD *a1, int *a2, _DWORD *a3)
{
  if (a1[2] == 2)
  {
    sub_2169C487C(a2, a3);
    return sub_2169C48D4(a2 + 1, a3 + 1);
  }
  else
  {
    return sub_216AF0E70(a1, a3);
  }
}

_DWORD *sub_216AF0E70(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))off_26C759790[v4])(&v6, a1);
  }
  a1[2] = -1;
  sub_216981010(a1, a2);
  sub_21698105C(a1 + 1, a2 + 1);
  a1[2] = 2;
  return a1;
}

_DWORD *sub_216AF0EF0(_DWORD *a1)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a1 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a1 + 3);
  a1[4] = -1;
  return a1;
}

uint64_t sub_216AF0F48(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)operator new(0x18uLL);
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 1) = 0;
  *(void *)uint64_t v2 = (char *)v2 + 8;
  *(void *)(a1 + 24) = v2;
  uint64_t v3 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v2);
  sub_216981010((_DWORD *)(a1 + 32), v3);
  sub_21698105C((_DWORD *)(a1 + 36), v3 + 1);
  return a1;
}

void sub_216AF0FBC(_Unwind_Exception *a1)
{
  sub_216AF07CC(v2, 0);
  sub_216AF0B98(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_216AF0FE4(_DWORD *a1, _DWORD *a2, _DWORD *a3, int a4)
{
  long long v8 = sub_216981010(a1, a2);
  sub_21698105C(v8 + 1, a2 + 1);
  sub_216981010(a1 + 2, a3);
  sub_21698105C(a1 + 3, a3 + 1);
  a1[4] = a4;
  return a1;
}

uint64_t sub_216AF1048(uint64_t *a1, _DWORD *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 2);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xCCCCCCCCCCCCCCCLL) {
    sub_21677CB10();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 2) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 2);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 2) >= 0x666666666666666) {
    unint64_t v6 = 0xCCCCCCCCCCCCCCCLL;
  }
  else {
    unint64_t v6 = v4;
  }
  int v14 = a1 + 2;
  if (v6) {
    char v7 = (char *)sub_216AF1228((uint64_t)(a1 + 2), v6);
  }
  else {
    char v7 = 0;
  }
  uint64_t v10 = v7;
  int v11 = &v7[20 * v3];
  int v13 = &v7[20 * v6];
  sub_216AF1154((uint64_t)(a1 + 2), v11, a2);
  int v12 = v11 + 20;
  sub_216AF11B0(a1, &v10);
  uint64_t v8 = a1[1];
  sub_216AF1410(&v10);
  return v8;
}

void sub_216AF1140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AF1410((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216AF1154(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  sub_216981010(a2, a3);
  sub_21698105C(a2 + 1, a3 + 1);
  sub_216981010(a2 + 2, a3 + 2);
  uint64_t result = sub_21698105C(a2 + 3, a3 + 3);
  a2[4] = a3[4];
  return result;
}

uint64_t sub_216AF11B0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216AF1270((uint64_t)(a1 + 2), a1[1], (_DWORD *)a1[1], *a1, (_DWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_216AF1228(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    sub_21677CA1C();
  }
  return operator new(20 * a2);
}

uint64_t sub_216AF1270(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 5;
      sub_216AF1328(a1, (_DWORD *)(v7 - 20), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 20;
      *((void *)&v16 + 1) -= 20;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216AF1384((uint64_t)v13);
  return v11;
}

_DWORD *sub_216AF1328(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  sub_21697D878(a2, a3);
  sub_21697D8B4(a2 + 1, a3 + 1);
  sub_21697D878(a2 + 2, a3 + 2);
  uint64_t result = sub_21697D8B4(a2 + 3, a3 + 3);
  a2[4] = a3[4];
  return result;
}

uint64_t sub_216AF1384(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216AF13BC((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216AF13BC(uint64_t *result)
{
  uint64_t v1 = *(_DWORD **)(result[2] + 8);
  uint64_t v2 = *(_DWORD **)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_216ABC6CC(v3, v1);
      v1 += 5;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_216AF1410(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

_DWORD *sub_216AF1444(_DWORD *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2) = v1 - 20;
      uint64_t result = sub_216ABC6CC(v4, (_DWORD *)(v1 - 20));
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

void sub_216AF148C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216AF148C(a1, *a2);
    sub_216AF148C(a1, a2[1]);
    sub_216AF14E8((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_DWORD *sub_216AF14E8(uint64_t a1)
{
  sub_2167FB780(a1 + 8, *(void **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

void *sub_216AF1534(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    int v6 = sub_216AF15B0(v3[4], a2);
    uint64_t v7 = v3 + 1;
    if (!v6)
    {
      uint64_t v7 = v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_216AF15B0(a2, v5[4])) {
    return v2;
  }
  return v5;
}

uint64_t sub_216AF15B0(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  if (v2 == -1) {
    return 0;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 == -1 || v3 < v2) {
    return 1;
  }
  if (v3 > v2) {
    return 0;
  }
  int v6 = &v5;
  return ((uint64_t (*)(char **, uint64_t, uint64_t))off_26C7597E8[v3])(&v6, a1, a2);
}

uint64_t sub_216AF1628()
{
  return 0;
}

uint64_t sub_216AF1630(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return sub_2168BE1F8((uint64_t)&v4, a2, a3);
}

uint64_t sub_216AF1654(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  return sub_2169817E8(a2, a3);
}

uint64_t *sub_216AF1660(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t)(a1 + 1);
  char v5 = (uint64_t *)operator new(0x28uLL);
  void v9[2] = v4;
  void v5[4] = *a2;
  char v10 = 1;
  int v6 = (uint64_t **)sub_216AF173C((uint64_t)a1, v9, v5 + 4);
  uint64_t v7 = *v6;
  if (*v6)
  {
    sub_216AF0880(v5 + 4, 0);
    operator delete(v5);
    return v7;
  }
  else
  {
    sub_21677B358(a1, v9[0], v6, v5);
  }
  return v5;
}

void sub_216AF1720(_Unwind_Exception *a1)
{
  sub_216AF17C4(v2, v1);
  _Unwind_Resume(a1);
}

void *sub_216AF173C(uint64_t a1, void *a2, uint64_t *a3)
{
  char v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        if (!sub_216AF15B0(*a3, v4[4])) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        char v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_216AF15B0(v7[4], *a3)) {
        break;
      }
      char v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void sub_216AF17C4(uint64_t a1, uint64_t *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_216AF0880(__p + 4, 0);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t **sub_216AF181C(uint64_t **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    sub_216AF0880(v2 + 4, 0);
    operator delete(v2);
    *a1 = 0;
  }
  return a1;
}

uint64_t *sub_216AF1860(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  int v6 = (uint64_t **)sub_216AF190C((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_216AF19A0((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_216AF1A0C((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_216AF190C(uint64_t a1, void *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  char v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 4);
        if (!sub_2169817E8(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 4))) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        char v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_2169817E8(v8, a3)) {
        break;
      }
      char v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_DWORD *sub_216AF19A0@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  uint64_t v7 = *a2;
  sub_216981010(v6 + 8, v7);
  uint64_t result = sub_21698105C(v6 + 9, v7 + 1);
  *((void *)v6 + 6) = 0;
  *((void *)v6 + 7) = 0;
  *((void *)v6 + 5) = v6 + 12;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216AF1A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216AF14E8((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *sub_216AF1A64(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
    {
      int v6 = sub_2167AE00C(a1, v4);
      sub_216AF14E8((uint64_t)(v4 + 4));
      operator delete(v4);
      uint64_t v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

uint64_t *sub_216AF1ACC(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  int v6 = (uint64_t **)sub_216AF190C((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_216AF1B78((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_216AF1A0C((uint64_t)v10, 0);
  }
  return v7;
}

_DWORD *sub_216AF1B78@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  uint64_t v7 = *a2;
  sub_21697D878(v6 + 8, v7);
  uint64_t result = sub_21697D8B4(v6 + 9, v7 + 1);
  *((void *)v6 + 6) = 0;
  *((void *)v6 + 7) = 0;
  *((void *)v6 + 5) = v6 + 12;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_216AF1BE4(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v3 = sub_21698EFF0((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = v3;
  sub_2167AE00C(a1, v3);
  sub_2169818D8((_DWORD *)v4 + 7);
  operator delete(v4);
  return 1;
}

void *sub_216AF1C40(void *a1, void *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    unint64_t v5 = 0;
    int v6 = a1;
    do
    {
      uint64_t v7 = (void *)v6[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v6[2];
          BOOL v9 = *v8 == (void)v6;
          int v6 = v8;
        }
        while (!v9);
      }
      ++v5;
      int v6 = v8;
    }
    while (v8 != a2);
    do
    {
      unint64_t v10 = v5 >> 1;
      char v14 = v3;
      sub_21680F304(&v14, v5 >> 1);
      if (sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v14 + 28), a3))
      {
        uint64_t v11 = v14;
        int v12 = (void *)v14[1];
        if (v12)
        {
          do
          {
            uint64_t v3 = v12;
            int v12 = (void *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            uint64_t v3 = (void *)v11[2];
            BOOL v9 = *v3 == (void)v11;
            uint64_t v11 = v3;
          }
          while (!v9);
        }
        unint64_t v10 = v5 + ~v10;
      }
      unint64_t v5 = v10;
    }
    while (v10);
  }
  return v3;
}

uint64_t *sub_216AF1D2C(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
    {
      int v6 = sub_2167AE00C(a1, v4);
      sub_2169818D8((_DWORD *)v4 + 7);
      operator delete(v4);
      uint64_t v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

uint64_t **sub_216AF1D94(uint64_t **a1, long long *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = (*a1)[1];
  int v6 = *a1;
  unint64_t v9 = v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if (v5 >= v9)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *v4) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v4) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    v20[4] = v7;
    if (v15) {
      long long v16 = (char *)sub_216782ED8(v7, v15);
    }
    else {
      long long v16 = 0;
    }
    int v17 = &v16[24 * v12];
    v20[0] = v16;
    v20[1] = v17;
    void v20[3] = &v16[24 * v15];
    long long v18 = *a2;
    *((void *)v17 + 2) = *((void *)a2 + 2);
    *(_OWORD *)int v17 = v18;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    v20[2] = v17 + 24;
    sub_216790CCC(v4, v20);
    uint64_t v11 = v4[1];
    sub_216790E64((uint64_t)v20);
  }
  else
  {
    long long v10 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v5 = v10;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    uint64_t v11 = v5 + 24;
    v4[1] = v5 + 24;
  }
  v4[1] = v11;
  return a1;
}

void sub_216AF1EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216790E64((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216AF1EDC(void *result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    sub_216AF1F64(result, a4);
    uint64_t result = sub_216AF1FB8((uint64_t)(v6 + 2), a2, a3, (_DWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216AF1F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216ABC634(&a9);
  _Unwind_Resume(a1);
}

char *sub_216AF1F64(void *a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    sub_21677CB10();
  }
  uint64_t result = (char *)sub_216AF1228((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[20 * v4];
  return result;
}

_DWORD *sub_216AF1FB8(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  unint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      sub_216AF1154(a1, v4, v6);
      v6 += 5;
      uint64_t v4 = v12 + 5;
      v12 += 5;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_216AF204C((uint64_t)v9);
  return v4;
}

uint64_t sub_216AF204C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216AF2084((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216AF2084(uint64_t *result)
{
  uint64_t v2 = (void *)result[1];
  uint64_t v1 = (_DWORD **)result[2];
  uint64_t v3 = *v1;
  uint64_t v4 = (_DWORD *)*v2;
  if (*v1 != (_DWORD *)*v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 5;
      uint64_t result = (uint64_t *)sub_216ABC6CC(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

_DWORD *sub_216AF20D8(uint64_t a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(int **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 2) < a4)
  {
    sub_216AF225C((void *)a1);
    if (a4 > 0xCCCCCCCCCCCCCCCLL) {
      sub_21677CB10();
    }
    unint64_t v10 = 0x999999999999999ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 2);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 2) >= 0x666666666666666) {
      unint64_t v11 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_216AF1F64((void *)a1, v11);
    uint64_t result = sub_216AF1FB8(v8, a2, a3, *(_DWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 2) < a4)
  {
    unint64_t v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 2];
    sub_216AF22CC((uint64_t)&v17, a2, v13, v9);
    uint64_t result = sub_216AF1FB8(v8, v13, a3, *(_DWORD **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = sub_216AF22CC((uint64_t)&v18, a2, a3, v9);
  unint64_t v15 = v14;
  long long v16 = *(_DWORD **)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 5;
      uint64_t result = sub_216ABC6CC(v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
  return result;
}

void sub_216AF224C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216AF2254(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216AF225C(void *a1)
{
  uint64_t v1 = (_DWORD *)*a1;
  if (*a1)
  {
    uint64_t v3 = (_DWORD *)a1[1];
    uint64_t v4 = (_DWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 5;
        sub_216ABC6CC((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v1);
      uint64_t v4 = (_DWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_DWORD *sub_216AF22CC(uint64_t a1, _DWORD *a2, _DWORD *a3, int *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  int v6 = a3;
  do
  {
    sub_2169C487C(a4, v5);
    sub_2169C48D4(a4 + 1, v5 + 1);
    sub_2169C487C(a4 + 2, v5 + 2);
    sub_2169C48D4(a4 + 3, v5 + 3);
    a4[4] = v5[4];
    a4 += 5;
    v5 += 5;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_216AF235C(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_21677CB10();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_2168073F4((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v10 = v7;
  unint64_t v11 = &v7[48 * v3];
  unint64_t v13 = &v7[48 * v6];
  sub_216AF2468((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  unint64_t v12 = v11 + 48;
  sub_216AF24E4(a1, &v10);
  uint64_t v8 = a1[1];
  sub_216AF2704(&v10);
  return v8;
}

void sub_216AF2454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AF2704((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_216AF2468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  sub_21697D878((_DWORD *)(a2 + 4), (_DWORD *)(a3 + 4));
  sub_21697D8B4((_DWORD *)(a2 + 8), (_DWORD *)(a3 + 8));
  sub_21697D878((_DWORD *)(a2 + 12), (_DWORD *)(a3 + 12));
  sub_21697D8B4((_DWORD *)(a2 + 16), (_DWORD *)(a3 + 16));
  *(_DWORD *)(a2 + 2sub_2168EBBB8(&a9, 0) = *(_DWORD *)(a3 + 20);
  __n128 result = *(__n128 *)(a3 + 24);
  *(void *)(a2 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a3 + 40);
  *(__n128 *)(a2 + 24) = result;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 4sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a3 + 24) = 0;
  return result;
}

uint64_t sub_216AF24E4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216AF255C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216AF255C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 48;
      sub_216AF2468(a1, v7 - 48, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 48;
      *((void *)&v16 + 1) -= 48;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216AF2614((uint64_t)v13);
  return v11;
}

uint64_t sub_216AF2614(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216AF264C((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216AF264C(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_216AF26A0(v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
  return result;
}

_DWORD *sub_216AF26A0(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 16));
  sub_21697C414((_DWORD *)(a2 + 12));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 8));

  return sub_21697C414((_DWORD *)(a2 + 4));
}

void **sub_216AF2704(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

_DWORD *sub_216AF2738(_DWORD *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2) = v1 - 48;
      uint64_t result = sub_216AF26A0(v4, v1 - 48);
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t *sub_216AF2780()
{
  sub_216AF2F5C();
  sub_216AF3088();
  sub_216AF31B4();
  sub_216AF32E0();
  sub_216AF340C();
  sub_216AF3538();
  sub_216AF3664();
  sub_216AF3790();
  sub_216AF38BC();

  return sub_216AF39E8();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNotice::BaseLayersDidChange::GetLayers@<X0>(long long **this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = sub_216AF2898(a2, 0x34F72C234F72C235 * ((uint64_t)(*((void *)*this + 1) - *(void *)*this) >> 3));
  for (i = **this; (void)i != *((void *)&i + 1); uint64_t result = (uint64_t)sub_216AF2AC4(&i))
  {
    uint64_t v7 = sub_216AF292C(&i, v5, v6);
    uint64_t v8 = sub_21697CF14((void *)*v7);
    if (v9 & 1 | (unint64_t)v8)
    {
      uint64_t v11 = (long long **)sub_216AF292C(&i, v9, v10);
      sub_216AF29A8(a2, *v11);
    }
  }
  return result;
}

void sub_216AF287C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_216AF2898(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_216787EE0(result, a2);
    v7[1] = v7[0] + v5;
    void v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 16 * v6;
    sub_216AF3C5C(a1, v7);
    return sub_216852520((uint64_t)v7);
  }
  return result;
}

void sub_216AF2918(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216852520((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216AF292C(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    _OWORD v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::pair<pxrInternal__aapl__pxrRes"
            "erved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>, pxrInternal__aapl__pxrReserved__::SdfChangeL"
            "ist>>>::operator->() [T = const std::vector<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInterna"
            "l__aapl__pxrReserved__::SdfLayer>, pxrInternal__aapl__pxrReserved__::SdfChangeList>>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_216AF29A8(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    char v14 = (char *)sub_216787EE0(result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v17 + 1) + 8), 1u, memory_order_relaxed);
    }
    void v18[2] = v15 + 16;
    sub_216AF3C5C(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = sub_216852520((uint64_t)v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_216AF2AB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216852520((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216AF2AC4(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    _OWORD v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::pair<pxrInternal"
            "__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>, pxrInternal__aapl__pxrReserved"
            "__::SdfChangeList>>>::operator++() [T = const std::vector<std::pair<pxrInternal__aapl__pxrReserved__::TfWeak"
            "Ptr<pxrInternal__aapl__pxrReserved__::SdfLayer>, pxrInternal__aapl__pxrReserved__::SdfChangeList>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 232;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfNotice::LayerIdentifierDidChange::LayerIdentifierDidChange(uint64_t a1, long long *a2, long long *a3)
{
  *(void *)a1 = &unk_26C759810;
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 8), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  unint64_t v6 = (unsigned char *)(a1 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(v6, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *(void *)(a1 + 48) = *((void *)a3 + 2);
    *(_OWORD *)unint64_t v6 = v7;
  }
  return a1;
}

void sub_216AF2BE8(_Unwind_Exception *a1)
{
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice((pxrInternal__aapl__pxrReserved__::TfNotice *)v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfNotice::Base::~Base(pxrInternal__aapl__pxrReserved__::SdfNotice::Base *this)
{
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::SdfNotice::LayersDidChange::~LayersDidChange(pxrInternal__aapl__pxrReserved__::SdfNotice::LayersDidChange *this)
{
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::SdfNotice::LayersDidChangeSentPerLayer::~LayersDidChangeSentPerLayer(pxrInternal__aapl__pxrReserved__::SdfNotice::LayersDidChangeSentPerLayer *this)
{
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::SdfNotice::LayerInfoDidChange::~LayerInfoDidChange(pxrInternal__aapl__pxrReserved__::SdfNotice::LayerInfoDidChange *this)
{
  *(void *)this = &unk_26C759830;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
}

{
  uint64_t v1;

  *(void *)this = &unk_26C759830;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
}

{
  uint64_t v1;
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C759830;
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);

  operator delete(v2);
}

void pxrInternal__aapl__pxrReserved__::SdfNotice::LayerIdentifierDidChange::~LayerIdentifierDidChange(void **this)
{
  *this = &unk_26C759810;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice((pxrInternal__aapl__pxrReserved__::TfNotice *)this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::SdfNotice::LayerIdentifierDidChange::~LayerIdentifierDidChange(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidReplaceContent::~LayerDidReplaceContent(pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidReplaceContent *this)
{
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidReloadContent::~LayerDidReloadContent(pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidReloadContent *this)
{
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidSaveLayerToFile::~LayerDidSaveLayerToFile(pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidSaveLayerToFile *this)
{
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDirtinessChanged::~LayerDirtinessChanged(pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDirtinessChanged *this)
{
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::SdfNotice::LayerMutenessChanged::~LayerMutenessChanged(void **this)
{
  *this = &unk_26C759850;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice((pxrInternal__aapl__pxrReserved__::TfNotice *)this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::SdfNotice::LayerMutenessChanged::~LayerMutenessChanged(this);

  operator delete(v1);
}

uint64_t *sub_216AF2F5C()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216856744((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216AF303C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216AF3088()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216AF3B18((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216AF3168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216AF31B4()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216AF3B18((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216AF3294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216AF32E0()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216AF3B18((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216AF33C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216AF340C()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216AF3B18((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216AF34EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216AF3538()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216AF3B18((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216AF3618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216AF3664()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216AF3BBC((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216AF3744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216AF3790()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216AF3B18((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216AF3870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216AF38BC()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216AF3B18((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216AF399C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216AF39E8()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216AF3B18((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216AF3AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216AF3B18(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216AF3B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216AF3BBC(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216AF3C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216AF3C5C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216AF3CD4((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216AF3CD4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216AF3D68((uint64_t)v12);
  return v10;
}

uint64_t sub_216AF3D68(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_21685249C(a1);
  }
  return a1;
}

uint64_t *sub_216AF3DA0()
{
  sub_216AF3DD8();

  return sub_216AF3EDC();
}

uint64_t *sub_216AF3DD8()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755210, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C755210, (char *)1, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216AF3E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216AF3EDC()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755C58, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C755C58, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216AF3F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216AF3FE0()
{
  sub_216AFC2F8();
  uint64_t v0 = sub_216AFC3FC();
  uint64_t v1 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v0);
  sub_216779094(__p, "vector<SdfPath>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v0, v1, (char *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216AF4048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(int *a1, long long *a2)
{
  char v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v4 + 1);
  sub_216851EE4((uint64_t)&v14, "Sdf", "SdfPath::SdfPath(string)");
  memset(&__p, 0, sizeof(__p));
  if (*((char *)a2 + 23) < 0)
  {
    unint64_t v5 = *((void *)a2 + 1);
    if (v5 >= 0x401)
    {
      unint64_t v6 = 0;
      uint64_t v7 = *(unsigned __int8 **)a2;
      do
      {
        int v8 = *v7++;
        if (v8 == 47) {
          ++v6;
        }
        --v5;
      }
      while (v5);
      if (v6 >= 0x201) {
        goto LABEL_9;
      }
    }
  }
  if ((pxrInternal__aapl__pxrReserved__::Sdf_ParsePath(a2, a1, (uint64_t)&__p) & 1) == 0)
  {
LABEL_9:
    v11[0] = "sdf/path.cpp";
    v11[1] = "SdfPath";
    void v11[2] = 155;
    void v11[3] = "pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(const std::string &)";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v11, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  while (v15--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v14);
  return a1;
}

void sub_216AF4180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_21684E6B8(v21 - 48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v20);
  sub_21697C414(v19);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EE50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8EE50))
  {
    sub_2169C4380(&qword_267B8EE48);
    __cxa_atexit((void (*)(void *))sub_21697B754, &qword_267B8EE48, &dword_216758000);
    __cxa_guard_release(&qword_267B8EE50);
  }
  return &qword_267B8EE48;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EE60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8EE60))
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)operator new(8uLL);
    uint64_t AbsoluteRootNode = pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetAbsoluteRootNode(v2);
    sub_216AFC500(v2, AbsoluteRootNode, 0);
    qword_267B8EE58 = (uint64_t)v2;
    __cxa_guard_release(&qword_267B8EE60);
  }
  return qword_267B8EE58;
}

void sub_216AF42C8(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EE70, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8EE70))
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)operator new(8uLL);
    uint64_t RelativeRootNode = pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetRelativeRootNode(v2);
    sub_216AFC500(v2, RelativeRootNode, 0);
    qword_267B8EE68 = (uint64_t)v2;
    __cxa_guard_release(&qword_267B8EE70);
  }
  return qword_267B8EE68;
}

void sub_216AF4368(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this)) {
    uint64_t v2 = *(unsigned __int16 *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this)
  }
                             + 12);
  else {
    uint64_t v2 = 0;
  }
  char v3 = (_DWORD *)((char *)this + 4);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3)) {
    uint64_t v4 = *(unsigned __int16 *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(v3)
  }
                             + 12);
  else {
    uint64_t v4 = 0;
  }
  return v4 + v2;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  BOOL result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this);
  if (result) {
    return *(unsigned char *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this)
  }
                    + 15) & 1;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1)) {
    return 0;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this);
  if (result)
  {
    uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
    return *(unsigned char *)(Ptr + 15) & (*(_WORD *)(Ptr + 12) == 0);
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1)) {
    return 0;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this);
  if (result)
  {
    uint64_t Ptr = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
    return *((unsigned char *)Ptr + 14) == 1
        || *(void *)this == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath(Ptr);
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1)) {
    return 0;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this);
  if (result)
  {
    uint64_t Ptr = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
    if (*((unsigned char *)Ptr + 14) == 1) {
      return 1;
    }
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(Ptr);
    return *(void *)this == *(void *)v4
        || *(void *)this == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath(v4);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1))
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
    if (!result) {
      return result;
    }
    if (*(unsigned char *)(result + 15)) {
      return *(unsigned __int16 *)(result + 12) == 1;
    }
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if (result)
  {
    int v2 = *(unsigned __int8 *)(result + 14);
    return v2 == 3 || v2 == 6;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if (result) {
    return *(unsigned __int8 *)(result + 14) == 3;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsNamespacedPropertyPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if (result)
  {
    uint64_t v2 = result;
    int v3 = *(unsigned __int8 *)(result + 14);
    if (v3 == 6 || v3 == 3)
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_IsNamespacedImpl((pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)result);
      if (result)
      {
        int v5 = *(unsigned __int8 *)(v2 + 14);
        return v5 == 3 || v5 == 6;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1)) {
    return 0;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
  if (result) {
    return *(unsigned __int8 *)(result + 14) == 2;
  }
  return result;
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1)) {
    return 0;
  }
  uint64_t result = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
  if (result)
  {
    if (result[14] - 1 >= 2) {
      return (unsigned __int8 *)(*(void *)this == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)result));
    }
    else {
      return (unsigned __int8 *)1;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
  if (result) {
    return (*(unsigned __int8 *)(result + 15) >> 1) & 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::ContainsTargetPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if (result) {
    return (*(unsigned __int8 *)(result + 15) >> 2) & 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsRelationalAttributePath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if (result) {
    return *(unsigned __int8 *)(result + 14) == 6;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if (result) {
    return *(unsigned __int8 *)(result + 14) == 4;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if (result) {
    return *(unsigned __int8 *)(result + 14) == 5;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperArgPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if (result) {
    return *(unsigned __int8 *)(result + 14) == 7;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsExpressionPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if (result) {
    return *(unsigned __int8 *)(result + 14) == 8;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetAsToken@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, void *a2@<X8>)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this);
  if (result)
  {
    uint64_t Ptr = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
    unint64_t v6 = (const pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetPathAsToken(Ptr, v6, v7);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, uint64_t a2@<X8>)
{
  AsTokeuint64_t n = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetAsToken(this, &v6);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t result = (char *)((v6 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t result = (char *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
  }
  if (result[23] < 0)
  {
    uint64_t result = (char *)sub_216778F24((unsigned char *)a2, *(void **)result, *((void *)result + 1));
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *((void *)result + 2);
    *(_OWORD *)a2 = v5;
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfPath::GetToken(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this))
  {
    uint64_t Ptr = (atomic_uint *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
    int v3 = (std::string *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetPathToken(Ptr, v3, v4);
  }
  else
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    if (!v6) {
      uint64_t v6 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    }
    return (uint64_t *)((char *)v6 + 88);
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfPath::GetString(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  Tokeuint64_t n = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetToken(this);
  if ((*(void *)Token & 0xFFFFFFFFFFFFFFF8) != 0) {
    return (uint64_t *)((*(void *)Token & 0xFFFFFFFFFFFFFFF8) + 16);
  }

  return pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Token);
}

const char *pxrInternal__aapl__pxrReserved__::SdfPath::GetText(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  unint64_t v1 = *pxrInternal__aapl__pxrReserved__::SdfPath::GetToken(this) & 0xFFFFFFFFFFFFFFF8;
  if (!v1) {
    return "";
  }
  uint64_t result = (const char *)(v1 + 16);
  if (*(char *)(v1 + 39) < 0) {
    return *(const char **)result;
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(this, a2, 0);
}

void sub_216AF4B00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216981168((void ***)va);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(a1, a2, 0);
}

void *pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(this, a3, a2);
}

void sub_216AF4B5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216981168((void ***)va);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t Ptr = (void *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)a1 + 1);
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a1);
  unint64_t PathElementCount = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(a1);
  if (a3 - 1 >= PathElementCount) {
    a3 = PathElementCount;
  }
  uint64_t result = sub_216AF4CFC(a2, a3);
  uint64_t v10 = a2[1];
  if (Ptr && a3)
  {
    do
    {
      int Handle = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(v7);
      if (v7) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 1u, memory_order_relaxed);
      }
      int v17 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle((uint64_t)Ptr);
      uint64_t v11 = v10 - 8;
      sub_21697DE94((int *)(v10 - 8), &Handle);
      sub_21697DEEC((int *)(v10 - 4), &v17);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
      uint64_t result = sub_21697C414(&Handle);
      uint64_t Ptr = (void *)*Ptr;
      --a3;
      if (!Ptr) {
        break;
      }
      v10 -= 8;
    }
    while (a3);
  }
  else
  {
    uint64_t v11 = a2[1];
  }
  if (v7 && a3)
  {
    unint64_t v12 = a3 - 1;
    char v13 = (int *)(v11 - 8);
    do
    {
      int Handle = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(v7);
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 1u, memory_order_relaxed);
      int v17 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle(0);
      sub_21697DE94(v13, &Handle);
      sub_21697DEEC(v13 + 1, &v17);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
      uint64_t result = sub_21697C414(&Handle);
      uint64_t v7 = *(void *)v7;
      BOOL v15 = v12-- != 0;
      if (!v7) {
        break;
      }
      v13 -= 2;
    }
    while (v15);
  }
  return result;
}

uint64_t *sub_216AF4CFC(uint64_t *result, unint64_t a2)
{
  uint64_t v2 = result;
  int v3 = (_DWORD *)result[1];
  unint64_t v4 = ((uint64_t)v3 - *result) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      for (i = *result + 8 * a2; v3 != (_DWORD *)i; uint64_t result = (uint64_t *)sub_216981128((uint64_t)(v2 + 2), v3))
        v3 -= 2;
      v2[1] = i;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    return (uint64_t *)sub_216AFE300(result, v5);
  }
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPath::GetAncestorsRange@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, _DWORD *a2@<X8>)
{
  int v3 = sub_216981010(a2, this) + 1;

  return sub_21698105C(v3, (_DWORD *)this + 1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfPath::GetName(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  NameTokeuint64_t n = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(this);
  if ((*(void *)NameToken & 0xFFFFFFFFFFFFFFF8) != 0) {
    return (uint64_t *)((*(void *)NameToken & 0xFFFFFFFFFFFFFFF8) + 16);
  }

  return pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NameToken);
}

pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t v2 = (_DWORD *)((char *)this + 4);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1))
  {
    uint64_t Ptr = (unsigned char *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(v2);
    switch(Ptr[14])
    {
      case 0:
        goto LABEL_9;
      case 1:
      case 3:
      case 6:
      case 7:
        goto LABEL_5;
      case 2:
        goto LABEL_13;
      case 8:
        goto LABEL_16;
      default:
        goto LABEL_6;
    }
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this))
  {
    uint64_t Ptr = (unsigned char *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
    switch(Ptr[14])
    {
      case 0:
LABEL_9:
        char v6 = Ptr[15];
        uint64_t result = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
        if (v6)
        {
          if (!result)
          {
            uint64_t result = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
          }
        }
        else
        {
          if (!result) {
            uint64_t result = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
          }
          uint64_t result = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)result + 8);
        }
        break;
      case 1:
      case 3:
      case 6:
      case 7:
LABEL_5:
        uint64_t result = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)(Ptr + 16);
        break;
      case 2:
LABEL_13:
        uint64_t result = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode::_GetNameImpl((pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode *)Ptr);
        break;
      case 8:
LABEL_16:
        uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
        if (!v7) {
          uint64_t v7 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
        }
        uint64_t result = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v7 + 64);
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    if (!v5) {
      unint64_t v5 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    }
    return (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v5 + 88);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfPath::GetElementString@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetElementToken(this, (atomic_uint **)&v6);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t result = (char *)((v6 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t result = (char *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  }
  if (result[23] < 0)
  {
    uint64_t result = (char *)sub_216778F24((unsigned char *)a2, *(void **)result, *((void *)result + 1));
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *((void *)result + 2);
    *(_OWORD *)a2 = v5;
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfPath::GetElementToken(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, atomic_uint **a2@<X8>)
{
  unint64_t v4 = (_DWORD *)((char *)this + 4);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1))
  {
    uint64_t Ptr = (std::string *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(v4);
  }
  else
  {
    if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this))
    {
LABEL_7:
      *a2 = 0;
      return;
    }
    uint64_t Ptr = (std::string *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
  }
  if (Ptr->__r_.__value_.__s.__data_[14] == 1)
  {
    unint64_t v6 = (atomic_uint *)Ptr->__r_.__value_.__r.__words[2];
    *a2 = v6;
    if ((v6 & 7) != 0)
    {
      uint64_t v7 = (atomic_uint *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
        *a2 = v7;
      }
    }
  }
  else
  {
    if (!Ptr->__r_.__value_.__s.__data_[14]) {
      goto LABEL_7;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_GetElementImpl(Ptr, (uint64_t)a2);
  }
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceName@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(this))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, v11);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v11, a2, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v11 + 1);
    return sub_21697C414(v11);
  }
  uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if (Ptr && *(unsigned char *)(Ptr + 14) == 3)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, v11);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)v11, a2, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v11 + 1);
    return sub_21697C414(v11);
  }
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if (v7 && *(unsigned char *)(v7 + 14) == 6)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, v11);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendRelationalAttribute((pxrInternal__aapl__pxrReserved__::SdfPath *)v11, a2, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v11 + 1);
    return sub_21697C414(v11);
  }
  v11[0] = "sdf/path.cpp";
  v11[1] = "ReplaceName";
  void v11[2] = 474;
  void v11[3] = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceName(const TfToken &) const";
  char v12 = 0;
  unint64_t v9 = *pxrInternal__aapl__pxrReserved__::SdfPath::GetToken(this) & 0xFFFFFFFFFFFFFFF8;
  if (v9)
  {
    uint64_t v10 = (const char *)(v9 + 16);
    if (*(char *)(v9 + 39) < 0) {
      uint64_t v10 = *(const char **)v10;
    }
  }
  else
  {
    uint64_t v10 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"%s is not a prim, property, or relational attribute path", v10);
  *(void *)a3 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
  return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
}

void sub_216AF52D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, _DWORD *a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this))
  {
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1))
    {
      uint64_t Ptr = (uint64_t *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
      int Handle = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle(*Ptr);
      sub_216981010(a2, this);
      sub_21698105C(a2 + 1, &Handle);
      return (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&Handle);
    }
    else
    {
      unint64_t v6 = (unsigned char *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
      uint64_t v7 = v6;
      if (v6[15]) {
        goto LABEL_27;
      }
      if (v6 == (unsigned char *)pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetRelativeRootNode((pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)v6)) {
        goto LABEL_30;
      }
      switch(v7[14])
      {
        case 0:
          char v9 = v7[15];
          NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
          if (v9)
          {
            if (!NameImpl) {
              NameImpl = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
            }
          }
          else
          {
            if (!NameImpl) {
              NameImpl = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
            }
            NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)NameImpl + 8);
          }
          break;
        case 1:
        case 3:
        case 6:
        case 7:
          NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)(v7 + 16);
          break;
        case 2:
          NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode::_GetNameImpl((pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode *)v7);
          break;
        case 8:
          uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
          if (!v11) {
            uint64_t v11 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
          }
          NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v11 + 64);
          break;
        default:
          uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
          if (!v10) {
            uint64_t v10 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
          }
          NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v10 + 88);
          break;
      }
      char v12 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v12)
      {
        BOOL v15 = NameImpl;
        char v12 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
        NameImpl = v15;
      }
      if ((*(void *)NameImpl & 0xFFFFFFFFFFFFFFF8) == (*((void *)v12 + 6) & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_30:
        uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
        if (!v14) {
          uint64_t v14 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreatePrim((uint64_t)v7, (uint64_t *)v14 + 6, (uint64_t)&v18, (uint64_t (*)(uint64_t))sub_216AFC55C, &v17);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v16);
        sub_21697D878(a2, &v17);
        sub_21697D8B4(a2 + 1, &v16);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
        return sub_21697C414(&v17);
      }
      else
      {
LABEL_27:
        uint64_t v13 = *(void *)v7;
        return sub_216AFC500(a2, v13, 0);
      }
    }
  }
  else
  {
    sub_216981010(a2, this);
    return sub_21698105C(a2 + 1, (_DWORD *)this + 1);
  }
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, _DWORD *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1))
  {
    uint64_t v31 = "sdf/path.cpp";
    unint64_t v32 = "AppendChild";
    uint64_t v33 = 840;
    unint64_t v34 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(const TfToken &) const";
    char v35 = 0;
    unint64_t v18 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v18)
    {
      uint64_t v19 = (const char *)(v18 + 16);
      if (*(char *)(v18 + 39) < 0) {
        uint64_t v19 = *(const char **)v19;
      }
    }
    else
    {
      uint64_t v19 = "";
    }
    unint64_t v23 = *pxrInternal__aapl__pxrReserved__::SdfPath::GetToken(this) & 0xFFFFFFFFFFFFFFF8;
    if (v23)
    {
      char v24 = (const char *)(v23 + 16);
      if (*(char *)(v23 + 39) < 0) {
        char v24 = *(const char **)v24;
      }
    }
    else
    {
      char v24 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v31, (pxrInternal__aapl__pxrReserved__ *)"Cannot append child '%s' to path '%s'.", v22, v19, v24);
    pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v25);
    sub_216981010(a3, &qword_267B8EE48);
    return sub_21698105C(a3 + 1, (_DWORD *)&qword_267B8EE48 + 1);
  }
  else
  {
    unint64_t v6 = (uint64_t *)off_26B4B1A10();
    uint64_t v7 = *v6;
    if (!*v6)
    {
      uint64_t v20 = v6;
      uint64_t v7 = off_26B4B1A28();
      *uint64_t v20 = sub_216AFE474(v7);
    }
    int v8 = 0;
    unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * (*(void *)a2 & 0xFFFFFFFFFFFFFFF8));
    __int16 v10 = bswap64(0x9E3779B97F4A7C55* (((v9+ ((unint64_t)*(unsigned int *)this >> 8)+ (v9 + ((unint64_t)*(unsigned int *)this >> 8))* (v9 + ((unint64_t)*(unsigned int *)this >> 8))) >> 1)+ ((unint64_t)*(unsigned int *)this >> 8)));
    while (1)
    {
      uint64_t v11 = (v10 + (_WORD)v8) & 0x3FFF;
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator==((_DWORD *)(v7 + 16 * v11), this))
      {
        uint64_t v12 = v7 + 16 * v11;
        if ((*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)a2 & 0xFFFFFFFFFFFFFFF8)) {
          break;
        }
      }
      BOOL v13 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v7 + 16 * v11));
      if (v8++ == 1 || !v13)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v31);
        goto LABEL_13;
      }
    }
    sub_216981010(&v31, (_DWORD *)(v12 + 4));
LABEL_13:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v28);
    int v29 = (int)v31;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(&v31);
    int v30 = (int)v28;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(&v28);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    sub_21697C414(&v31);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v29))
    {
      sub_21697D878(a3, &v29);
      sub_21697D8B4(a3 + 1, &v30);
    }
    else
    {
      unint64_t v28 = 0;
      uint64_t v31 = (char *)this;
      unint64_t v32 = (const char *)a2;
      uint64_t v33 = (uint64_t)&v28;
      uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreatePrim(Ptr, (uint64_t *)a2, (uint64_t)&v31, sub_216AFC564, &v27);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v27)) {
        goto LABEL_16;
      }
      uint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v21) {
        uint64_t v21 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      }
      if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v21 + 6) & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_16:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v26);
        sub_21697D878(a3, &v27);
        sub_21697D8B4(a3 + 1, &v26);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, a3);
      }
      sub_21697C414(&v27);
      sub_216AF6D78(&v28);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
    return sub_21697C414(&v29);
  }
}

void sub_216AF58F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, void **a13, int a14)
{
}

void pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1))
  {
    int v29 = "sdf/path.cpp";
    int v30 = "AppendProperty";
    uint64_t v31 = 937;
    unint64_t v32 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(const TfToken &) const";
    char v33 = 0;
    unint64_t v15 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v15)
    {
      int v16 = (const char *)(v15 + 16);
      if (*(char *)(v15 + 39) < 0) {
        int v16 = *(const char **)v16;
      }
    }
    else
    {
      int v16 = "";
    }
    unint64_t v20 = *pxrInternal__aapl__pxrReserved__::SdfPath::GetToken(this) & 0xFFFFFFFFFFFFFFF8;
    if (v20)
    {
      uint64_t v21 = (const char *)(v20 + 16);
      if (*(char *)(v20 + 39) < 0) {
        uint64_t v21 = *(const char **)v21;
      }
    }
    else
    {
      uint64_t v21 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v29, (pxrInternal__aapl__pxrReserved__ *)"Can only append a property '%s' to a prim path (%s)", v19, v16, v21);
  }
  else
  {
    unint64_t v28 = 0;
    int v29 = (char *)this;
    int v30 = (const char *)a2;
    uint64_t v31 = (uint64_t)&v28;
    uint64_t v6 = *(void *)off_26B4B1A40();
    if (!v6)
    {
      int v17 = off_26B4B1A70;
      if ((*(unsigned char *)off_26B4B1A70() & 1) == 0)
      {
        uint64_t v22 = 0;
        unint64_t v23 = off_26B4B1A58;
        do
        {
          uint64_t v24 = v23(&off_26B4B1A58) + v22;
          *(void *)uint64_t v24 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(v24 + 8));
          v22 += 16;
        }
        while (v22 != 0x4000);
        char v25 = (void *)v23(&off_26B4B1A58);
        _tlv_atexit((void (__cdecl *)(void *))sub_216AFE4D0, v25);
        *(unsigned char *)((uint64_t (*)(uint64_t (**)(void)))v17)(&off_26B4B1A7sub_2168EBBB8(&a9, 0) = 1;
      }
      uint64_t v6 = off_26B4B1A58(&off_26B4B1A58);
      uint64_t *v18 = v6;
    }
    int v7 = 0;
    unint64_t v8 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v9 = bswap64((2135587925 * v8)) >> 54;
    while (1)
    {
      uint64_t v10 = *(void *)(v6 + 16 * (((_WORD)v9 + (_WORD)v7) & 0x3FF));
      if ((v10 & 0xFFFFFFFFFFFFFFF8) == v8) {
        break;
      }
      if (v10) {
        BOOL v11 = v7 == 1;
      }
      else {
        BOOL v11 = 1;
      }
      ++v7;
      if (v11)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v27);
        goto LABEL_12;
      }
    }
    sub_21698105C(&v27, (_DWORD *)(v6 + 16 * (((_WORD)v9 + (_WORD)v7) & 0x3FF) + 8));
    unint64_t v9 = 0;
LABEL_12:
    if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreatePrimProperty(a2, (uint64_t)&v29, sub_216AFCBB0, &v34);
      sub_21697DEEC(&v27, (int *)&v34);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27))
      {
        sub_21698105C(&v26, &v27);
        uint64_t v12 = *(atomic_uint **)a2;
        unint64_t v34 = v12;
        if ((v12 & 7) != 0)
        {
          BOOL v13 = (atomic_uint *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
          if ((atomic_fetch_add_explicit(v13, 2u, memory_order_relaxed) & 1) == 0) {
            unint64_t v34 = v13;
          }
        }
        sub_21698105C(&v35, &v26);
        unint64_t v14 = v6 + 16 * v9;
        if (&v34 != (atomic_uint **)v14)
        {
          if ((*(void *)v14 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          *(void *)unint64_t v14 = v34;
          unint64_t v34 = 0;
        }
        sub_21697DEEC((int *)(v14 + 8), &v35);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v35);
        if ((v34 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
      }
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27))
    {
      sub_2169C487C(a3, this);
      sub_21697DEEC(a3 + 1, &v27);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
    sub_216AF6D78(&v28);
  }
}

void sub_216AF5CBC(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

void ***pxrInternal__aapl__pxrReserved__::SdfPath::AppendRelationalAttribute@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, _DWORD *a3@<X8>)
{
  v9[0] = this;
  v9[1] = a2;
  void v9[2] = &v10;
  uint64_t v10 = 0;
  uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreateRelationalAttribute(Ptr, a2, (uint64_t)v9, (uint64_t (*)(uint64_t))sub_216AFD324, &v8);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8))
  {
    sub_216981010(a3, this);
    sub_21698105C(a3 + 1, &v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    *(void *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
  return sub_216AF6D78(&v10);
}

void sub_216AF5DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216AF6D78((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  unint64_t v1 = (_DWORD *)((char *)this + 4);
  uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1);
  if (Ptr)
  {
    uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(v1);
    if (Ptr)
    {
      if ((*(unsigned char *)(Ptr + 15) & 4) != 0)
      {
        while (1)
        {
          int v3 = *(unsigned __int8 *)(Ptr + 14);
          if ((v3 & 0xFE) == 4) {
            break;
          }
          uint64_t Ptr = *(void *)Ptr;
          if (!Ptr) {
            goto LABEL_10;
          }
        }
        if (v3 == 4 || v3 == 5) {
          return (uint64_t *)(Ptr + 16);
        }
      }
    }
  }
LABEL_10:
  pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)Ptr);
  return &qword_267B8EE48;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively(uint64_t a1, uint64_t *a2)
{
  int v3 = (_DWORD *)(a1 + 4);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  if (result)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(v3);
    if (result)
    {
      uint64_t v5 = result;
      if ((*(unsigned char *)(result + 15) & 4) != 0)
      {
        while ((*(unsigned char *)(v5 + 14) & 0xFE) != 4)
        {
          uint64_t v5 = *(void *)v5;
          if (!v5) {
            return result;
          }
        }
        while (1)
        {
          int v6 = *(unsigned __int8 *)(v5 + 14);
          if (v6 == 4 || v6 == 5)
          {
            int v7 = (uint64_t *)(v5 + 16);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)result);
            int v7 = &qword_267B8EE48;
          }
          unint64_t v8 = a2[1];
          if (v8 >= a2[2])
          {
            uint64_t v9 = sub_216981B30(a2, v7);
          }
          else
          {
            sub_216981010((_DWORD *)a2[1], v7);
            sub_21698105C((_DWORD *)(v8 + 4), (_DWORD *)v7 + 1);
            uint64_t v9 = v8 + 8;
          }
          a2[1] = v9;
          uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively(v7, a2);
          uint64_t v5 = *(void *)v5;
          if (!v5 || (*(unsigned char *)(v5 + 15) & 4) == 0) {
            break;
          }
          while ((*(unsigned char *)(v5 + 14) & 0xFE) != 4)
          {
            uint64_t v5 = *(void *)v5;
            if (!v5) {
              return result;
            }
          }
        }
      }
    }
  }
  return result;
}

std::string *pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t result = (std::string *)pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(this);
  if (result)
  {
    uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
    if (*(unsigned char *)(Ptr + 14) == 2)
    {
      int v6 = *(void **)(Ptr + 16);
    }
    else
    {
      uint64_t Ptr = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_GetEmptyVariantSelection((pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)Ptr);
      int v6 = (void *)Ptr;
    }
    if ((*v6 & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (const std::string *)((*v6 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)Ptr);
    }
    unint64_t v8 = std::string::operator=((std::string *)a2, EmptyString);
    if ((v6[1] & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v9 = (const std::string *)((v6[1] & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      uint64_t v9 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
    }
    return std::string::operator=((std::string *)(a2 + 24), v9);
  }
  return result;
}

void sub_216AF6034(_Unwind_Exception *a1)
{
  sub_21682E578(v1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  BOOL result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2);
  if (result)
  {
    BOOL result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this);
    if (result)
    {
      uint64_t v5 = (_DWORD *)((char *)a2 + 4);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a2 + 1))
      {
        if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator!=(this, a2))
        {
          BOOL result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1);
          if (!result) {
            return result;
          }
          uint64_t Ptr = (void *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
          uint64_t v7 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(v5);
          if (Ptr && Ptr != (void *)v7)
          {
            do
            {
              uint64_t Ptr = (void *)*Ptr;
              if (Ptr) {
                BOOL v8 = Ptr == (void *)v7;
              }
              else {
                BOOL v8 = 1;
              }
            }
            while (!v8);
          }
          return Ptr == (void *)v7;
        }
      }
      else
      {
        uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
        BOOL v11 = v10;
        if ((*((unsigned char *)v10 + 15) & 1) != 0
          && *(void *)a2 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v10))
        {
          return 1;
        }
        uint64_t v12 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a2);
        unsigned int v13 = *(unsigned __int16 *)(v12 + 12);
        unsigned int v14 = *((unsigned __int16 *)v11 + 6);
        if (v14 >= v13)
        {
          if (v14 > v13)
          {
            do
            {
              BOOL v11 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)v11;
              --v14;
            }
            while ((int)v14 > (int)v13);
          }
          return v11 == (pxrInternal__aapl__pxrReserved__::SdfPath *)v12;
        }
      }
      return 0;
    }
  }
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, _DWORD *a2@<X8>)
{
  for (uint64_t i = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
        i;
        uint64_t i = *(void *)i)
  {
    if (*(unsigned char *)(i + 14) == 1) {
      break;
    }
  }

  return sub_216AFC500(a2, i, 0);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimOrPrimVariantSelectionPath@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, _DWORD *a2@<X8>)
{
  for (uint64_t i = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
        i;
        uint64_t i = *(void *)i)
  {
    if (*(unsigned __int8 *)(i + 14) - 1 < 2) {
      break;
    }
  }

  return sub_216AFC500(a2, i, 0);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, _DWORD *a2@<X8>)
{
  if (*(void *)this == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this))
  {
    sub_216981010(a2, this);
    return sub_21698105C(a2 + 1, (_DWORD *)this + 1);
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(this, a2);
  }
}

void pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, int *a2@<X8>)
{
  uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
  if (Ptr && (*(unsigned char *)(Ptr + 15) & 2) != 0)
  {
    std::string __p = 0;
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v5 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
    int v6 = 0;
    do
    {
      if (*(unsigned char *)(v5 + 14) != 2)
      {
        if (v6 >= v21)
        {
          uint64_t v7 = ((char *)v6 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v7 + 1) >> 61) {
            sub_21677CB10();
          }
          unint64_t v8 = ((char *)v21 - (unsigned char *)__p) >> 2;
          if (v8 <= v7 + 1) {
            unint64_t v8 = v7 + 1;
          }
          if ((unint64_t)((char *)v21 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v9 = v8;
          }
          if (v9) {
            uint64_t v10 = (char *)sub_21677CB28((uint64_t)&v21, v9);
          }
          else {
            uint64_t v10 = 0;
          }
          BOOL v11 = (uint64_t *)&v10[8 * v7];
          *BOOL v11 = v5;
          int v6 = v11 + 1;
          unsigned int v13 = (char *)__p;
          uint64_t v12 = (char *)v20;
          if (v20 != __p)
          {
            do
            {
              uint64_t v14 = *((void *)v12 - 1);
              v12 -= 8;
              *--BOOL v11 = v14;
            }
            while (v12 != v13);
            uint64_t v12 = (char *)__p;
          }
          std::string __p = v11;
          unint64_t v20 = v6;
          uint64_t v21 = (uint64_t *)&v10[8 * v9];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *v6++ = v5;
        }
        unint64_t v20 = v6;
      }
      uint64_t v5 = *(void *)v5;
    }
    while (v5);
    sub_216AFC500(a2, *(v6 - 1), 0);
    unint64_t v15 = (char *)(v20 - 1);
    if (v20 - 1 != __p)
    {
      do
      {
        uint64_t v16 = *((void *)v15 - 1);
        v15 -= 8;
        sub_216AF64E4((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, v16, &v17);
        sub_21697DE94(a2, &v17);
        sub_21697DEEC(a2 + 1, &v18);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
        sub_21697C414(&v17);
      }
      while (v15 != __p);
    }
    sub_2169C48D4(a2 + 1, (_DWORD *)this + 1);
    if (__p)
    {
      unint64_t v20 = (uint64_t *)__p;
      operator delete(__p);
    }
  }
  else
  {
    sub_216981010(a2, this);
    sub_21698105C(a2 + 1, (_DWORD *)this + 1);
  }
}

void sub_216AF64AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216AF64E4(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, uint64_t a2@<X1>, int *a3@<X8>)
{
  int v4 = *(unsigned __int8 *)(a2 + 14);
  uint64_t v5 = this;
  switch(*(unsigned char *)(a2 + 14))
  {
    case 1:
      int v6 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(this, v6, a3);
      break;
    case 2:
      unint64_t v8 = *(void **)(a2 + 16);
      if ((*v8 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        unint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else
      {
        this = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
        unint64_t v9 = this;
      }
      if ((v8[1] & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (uint64_t *)((v8[1] & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(v5, (uint64_t)v9, (uint64_t)EmptyString, a3);
      break;
    case 3:
      uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(this, v10, a3);
      break;
    case 4:
      BOOL v11 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(this, v11, a3);
      break;
    case 5:
      uint64_t v12 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper(this, v12, a3);
      break;
    case 6:
      unsigned int v13 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendRelationalAttribute(this, v13, a3);
      break;
    case 7:
      uint64_t v14 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg(this, v14, a3);
      break;
    case 8:
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression(this, a3);
      break;
    default:
      v16[0] = "sdf/path.cpp";
      v16[1] = "_AppendNode";
      void v16[2] = 671;
      _DWORD v16[3] = "SdfPath pxrInternal__aapl__pxrReserved__::_AppendNode(const SdfPath &, const Sdf_PathNode *)";
      char v17 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected node type %i", v4);
      pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v7);
      sub_216981010(a3, &qword_267B8EE48);
      sub_21698105C(a3 + 1, (_DWORD *)&qword_267B8EE48 + 1);
      break;
  }
}

void pxrInternal__aapl__pxrReserved__::SdfPath::AppendPath(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, int *a3@<X8>)
{
  int v6 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(this);
  if (*(void *)this == qword_267B8EE48)
  {
    uint64_t v51 = "sdf/path.cpp";
    unint64_t v52 = "AppendPath";
    uint64_t v53 = 704;
    uint64_t v54 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::AppendPath(const SdfPath &) const";
    char v55 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot append to invalid path");
LABEL_19:
    pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v7);
    sub_216981010(a3, &qword_267B8EE48);
    sub_21698105C(a3 + 1, (_DWORD *)&qword_267B8EE48 + 1);
    return;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v6);
  if (*(void *)a2 == qword_267B8EE48)
  {
    uint64_t v51 = "sdf/path.cpp";
    unint64_t v52 = "AppendPath";
    uint64_t v53 = 709;
    uint64_t v54 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::AppendPath(const SdfPath &) const";
    char v55 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(this, (uint64_t)&v48);
    if (SHIBYTE(v50) >= 0) {
      unint64_t v8 = (const char *)&v48;
    }
    else {
      unint64_t v8 = (const char *)v48;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot append invalid path to <%s>", v8);
LABEL_17:
    if (SHIBYTE(v50) < 0) {
      operator delete(v48);
    }
    goto LABEL_19;
  }
  BOOL IsAbsolutePath = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a2);
  if (IsAbsolutePath)
  {
    uint64_t v51 = "sdf/path.cpp";
    unint64_t v52 = "AppendPath";
    uint64_t v53 = 714;
    uint64_t v54 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::AppendPath(const SdfPath &) const";
    char v55 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(a2, (uint64_t)&v48);
    int v10 = SHIBYTE(v50);
    BOOL v11 = (void **)v48;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(this, (uint64_t)__p);
    if (v10 >= 0) {
      unsigned int v13 = &v48;
    }
    else {
      unsigned int v13 = v11;
    }
    if (v47 >= 0) {
      uint64_t v14 = __p;
    }
    else {
      uint64_t v14 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v51, (pxrInternal__aapl__pxrReserved__ *)"Cannot append absolute path <%s> to another path <%s>.", v12, v13, v14);
    if (v47 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_17;
  }
  if (*(void *)a2 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)IsAbsolutePath))
  {
    sub_216981010(a3, this);
    sub_21698105C(a3 + 1, (_DWORD *)this + 1);
    return;
  }
  unsigned int v15 = *(unsigned __int8 *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this)
                           + 14);
  BOOL v16 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1);
  int v18 = v15 > 2 || v16;
  if (v18 == 1)
  {
    uint64_t v51 = "sdf/path.cpp";
    unint64_t v52 = "AppendPath";
    uint64_t v53 = 726;
    uint64_t v54 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::AppendPath(const SdfPath &) const";
    char v55 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v51, (pxrInternal__aapl__pxrReserved__ *)"Cannot append a path to another path that is not a root or a prim path.", v17);
    goto LABEL_19;
  }
  unint64_t v48 = 0;
  uint64_t v49 = 0;
  unint64_t v50 = 0;
  uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)a2 + 1);
  if (Ptr)
  {
    unint64_t v20 = (void *)Ptr;
    uint64_t v21 = 0;
    do
    {
      if (v21 >= v50)
      {
        uint64_t v22 = (v21 - (unsigned char *)v48) >> 3;
        if ((unint64_t)(v22 + 1) >> 61) {
LABEL_78:
        }
          sub_21677CB10();
        unint64_t v23 = (v50 - (unsigned char *)v48) >> 2;
        if (v23 <= v22 + 1) {
          unint64_t v23 = v22 + 1;
        }
        if ((unint64_t)(v50 - (unsigned char *)v48) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24) {
          char v25 = (char *)sub_21677CB28((uint64_t)&v50, v24);
        }
        else {
          char v25 = 0;
        }
        int v26 = &v25[8 * v22];
        *(void *)int v26 = v20;
        uint64_t v21 = v26 + 8;
        unint64_t v28 = (char *)v48;
        int v27 = v49;
        if (v49 != v48)
        {
          do
          {
            uint64_t v29 = *((void *)v27 - 1);
            v27 -= 8;
            *((void *)v26 - 1) = v29;
            v26 -= 8;
          }
          while (v27 != v28);
          int v27 = (char *)v48;
        }
        unint64_t v48 = v26;
        uint64_t v49 = v21;
        unint64_t v50 = &v25[8 * v24];
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        *(void *)uint64_t v21 = v20;
        v21 += 8;
      }
      uint64_t v49 = v21;
      unint64_t v20 = (void *)*v20;
    }
    while (v20);
  }
  uint64_t RelativeRootNode = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a2);
  for (uint64_t i = RelativeRootNode; ; uint64_t i = *(pxrInternal__aapl__pxrReserved__::Sdf_PathNode **)i)
  {
    uint64_t RelativeRootNode = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetRelativeRootNode(RelativeRootNode);
    unint64_t v32 = v49;
    if (i == RelativeRootNode) {
      break;
    }
    if (v49 >= v50)
    {
      uint64_t v34 = (v49 - (unsigned char *)v48) >> 3;
      if ((unint64_t)(v34 + 1) >> 61) {
        goto LABEL_78;
      }
      unint64_t v35 = (v50 - (unsigned char *)v48) >> 2;
      if (v35 <= v34 + 1) {
        unint64_t v35 = v34 + 1;
      }
      if ((unint64_t)(v50 - (unsigned char *)v48) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v35;
      }
      if (v36) {
        uint64_t RelativeRootNode = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)sub_21677CB28((uint64_t)&v50, v36);
      }
      else {
        uint64_t RelativeRootNode = 0;
      }
      uint64_t v37 = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode **)((char *)RelativeRootNode + 8 * v34);
      void *v37 = i;
      char v33 = (char *)(v37 + 1);
      uint64_t v39 = (char *)v48;
      unint64_t v38 = v49;
      if (v49 != v48)
      {
        do
        {
          unint64_t v40 = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)*((void *)v38 - 1);
          v38 -= 8;
          *--uint64_t v37 = v40;
        }
        while (v38 != v39);
        unint64_t v38 = (char *)v48;
      }
      unint64_t v48 = v37;
      uint64_t v49 = v33;
      unint64_t v50 = (char *)RelativeRootNode + 8 * v36;
      if (v38) {
        operator delete(v38);
      }
    }
    else
    {
      *(void *)uint64_t v49 = i;
      char v33 = v32 + 8;
    }
    uint64_t v49 = v33;
  }
  if (*(unsigned char *)(*((void *)v49 - 1) + 14) == 3
    && *(void *)this == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(RelativeRootNode))
  {
    uint64_t v51 = "sdf/path.cpp";
    unint64_t v52 = "AppendPath";
    uint64_t v53 = 747;
    uint64_t v54 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::AppendPath(const SdfPath &) const";
    char v55 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v51, (pxrInternal__aapl__pxrReserved__ *)"Cannot append a property path to the absolute root path.", v41);
    pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v42);
    sub_216981010(a3, &qword_267B8EE48);
    sub_21698105C(a3 + 1, (_DWORD *)&qword_267B8EE48 + 1);
LABEL_71:
    uint64_t v43 = (char *)v48;
    goto LABEL_76;
  }
  sub_216981010(a3, this);
  BOOL v44 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_21698105C(a3 + 1, (_DWORD *)this + 1);
  uint64_t v43 = v49;
  if (v49 != v48)
  {
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v44);
      if (*(void *)a3 == qword_267B8EE48) {
        goto LABEL_71;
      }
      uint64_t v45 = *((void *)v43 - 1);
      v43 -= 8;
      sub_216AF64E4((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, v45, (int *)&v51);
      sub_21697DE94(a3, (int *)&v51);
      sub_21697DEEC(a3 + 1, (int *)&v51 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v51 + 1);
      BOOL v44 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_21697C414(&v51);
      if (v43 == v48) {
        goto LABEL_77;
      }
    }
  }
LABEL_76:
  if (v43)
  {
LABEL_77:
    uint64_t v49 = v43;
    operator delete(v43);
  }
}

void sub_216AF6D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ***sub_216AF6D78(void ***a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = (char *)*v2;
    int v4 = (char *)v2[1];
    if (*v2 != v4)
    {
      do
      {
        if (*(_DWORD *)v3 == 1)
        {
          int v6 = "sdf/path.cpp";
          uint64_t v7 = "~_DeferredDiagnostics";
          uint64_t v8 = 82;
          unint64_t v9 = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DeferredDiagnostics::~_DeferredDiagnostics()";
          char v10 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v6, 1, (uint64_t *)v3 + 1);
        }
        else if (*(_DWORD *)v3 == 6)
        {
          int v6 = "sdf/path.cpp";
          uint64_t v7 = "~_DeferredDiagnostics";
          uint64_t v8 = 79;
          unint64_t v9 = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DeferredDiagnostics::~_DeferredDiagnostics()";
          char v10 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v6, (std::string *)(v3 + 8));
        }
        v3 += 32;
      }
      while (v3 != v4);
    }
  }
  sub_216AFCA18(a1, 0);
  return a1;
}

void ***pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  BOOL v11 = 0;
  v10[0] = a1;
  v10[1] = a2;
  void v10[2] = a3;
  void v10[3] = &v11;
  uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a1);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreatePrimVariantSelection(Ptr, &v8, &v7, (uint64_t)v10, (uint64_t (*)(uint64_t))sub_216AFCDD8, &v9);
  sub_21697D878(a4, &v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
  sub_21697C414(&v9);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return sub_216AF6D78(&v11);
}

void sub_216AF6F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216AF6D78((void ***)(v10 - 40));
  _Unwind_Resume(a1);
}

void ***pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _DWORD *a3@<X8>)
{
  v9[0] = this;
  v9[1] = a2;
  void v9[2] = &v10;
  uint64_t v10 = 0;
  uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreateTarget(Ptr, (unsigned int *)a2, (uint64_t)v9, sub_216AFCFBC, &v8);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8))
  {
    sub_216981010(a3, this);
    sub_21698105C(a3 + 1, &v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    *(void *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
  return sub_216AF6D78(&v10);
}

void sub_216AF706C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216AF6D78((void ***)va);
  _Unwind_Resume(a1);
}

void ***pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _DWORD *a3@<X8>)
{
  v9[0] = this;
  v9[1] = a2;
  void v9[2] = &v10;
  uint64_t v10 = 0;
  uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreateMapper(Ptr, (unsigned int *)a2, (uint64_t)v9, (uint64_t (*)(uint64_t))sub_216AFD5A8, &v8);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8))
  {
    sub_216981010(a3, this);
    sub_21698105C(a3 + 1, &v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    *(void *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
  return sub_216AF6D78(&v10);
}

void sub_216AF7158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216AF6D78((void ***)va);
  _Unwind_Resume(a1);
}

void ***pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, _DWORD *a3@<X8>)
{
  v9[0] = this;
  v9[1] = a2;
  void v9[2] = &v10;
  uint64_t v10 = 0;
  uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreateMapperArg(Ptr, a2, (uint64_t)v9, (uint64_t (*)(uint64_t))sub_216AFD95C, &v8);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8))
  {
    sub_216981010(a3, this);
    sub_21698105C(a3 + 1, &v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    *(void *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
  return sub_216AF6D78(&v10);
}

void sub_216AF7244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216AF6D78((void ***)va);
  _Unwind_Resume(a1);
}

void ***pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, _DWORD *a2@<X8>)
{
  v7[0] = this;
  v7[1] = &v8;
  int v8 = 0;
  uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreateExpression(Ptr, (uint64_t)v7, (uint64_t (*)(uint64_t))sub_216AFDBC8, &v6);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6))
  {
    sub_216981010(a2, this);
    sub_21698105C(a2 + 1, &v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
    *(void *)a2 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a2 + 1);
  }
  return sub_216AF6D78(&v8);
}

void sub_216AF7320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216AF6D78((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementString(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, int *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v4);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v4, a2);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int *a3@<X8>)
{
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this))
  {
    uint64_t v7 = (unsigned __int8 *)EmptyString;
    if (*((char *)EmptyString + 23) < 0) {
      uint64_t v7 = (unsigned __int8 *)*EmptyString;
    }
    int v8 = *v7;
    if (v8 == 91)
    {
      uint64_t v9 = *((unsigned __int8 *)EmptyString + 23);
      if ((v9 & 0x80) != 0) {
        uint64_t v9 = EmptyString[1];
      }
      std::string::basic_string(&v48, (const std::string *)EmptyString, 1uLL, v9 - 2, (std::allocator<char> *)&v52);
      pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath((int *)&v51, (long long *)&v48);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v51, a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v51 + 1);
      goto LABEL_18;
    }
    if (v8 != 46)
    {
      if (v8 != 123)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(this, a2, a3);
        return;
      }
      pxrInternal__aapl__pxrReserved__::TfStringTokenize((unsigned __int8 *)EmptyString, "{=}", &v48);
      unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48.__r_.__value_.__l.__size_ - v48.__r_.__value_.__r.__words[0]) >> 3);
      if (v28 == 1)
      {
        unint64_t v29 = 0;
      }
      else
      {
        if (v28 != 2)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v27);
          sub_216981010(a3, &qword_267B8EE48);
          sub_21698105C(a3 + 1, (_DWORD *)&qword_267B8EE48 + 1);
          unint64_t v29 = 0;
LABEL_81:
          if ((v29 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          unint64_t v51 = (unint64_t)&v48;
          sub_216782F20((void ***)&v51);
          return;
        }
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v51);
        unint64_t v29 = v51;
      }
      int v30 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v51);
      if ((v51 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v31 = (v51 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        int v30 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v30);
        uint64_t v31 = (uint64_t)v30;
      }
      if ((v29 & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t v32 = (uint64_t *)((v29 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        unint64_t v32 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v30);
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(this, v31, (uint64_t)v32, a3);
      if ((v51 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_81;
    }
    uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
    if (!Ptr) {
      goto LABEL_48;
    }
    int v11 = *(unsigned __int8 *)(Ptr + 14);
    if (v11 != 6 && v11 != 3) {
      goto LABEL_48;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EE90, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B8EE90))
    {
      char v33 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v33) {
        char v33 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      }
      if ((*((void *)v33 + 3) & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v34 = (uint64_t *)((*((void *)v33 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v34 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v33);
      }
      uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v37) {
        uint64_t v37 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      }
      if ((*((void *)v37 + 7) & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t v38 = (uint64_t *)((*((void *)v37 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        unint64_t v38 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v37);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)v34, (const void **)v38, (uint64_t)&v48);
      uint64_t v41 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v41) {
        uint64_t v41 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      }
      if ((*((void *)v41 + 4) & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t v42 = (uint64_t *)((*((void *)v41 + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        unint64_t v42 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v41);
      }
      int v43 = *((char *)v42 + 23);
      if (v43 >= 0) {
        BOOL v44 = (const std::string::value_type *)v42;
      }
      else {
        BOOL v44 = (const std::string::value_type *)*v42;
      }
      if (v43 >= 0) {
        std::string::size_type v45 = *((unsigned __int8 *)v42 + 23);
      }
      else {
        std::string::size_type v45 = v42[1];
      }
      unint64_t v46 = std::string::append(&v48, v44, v45);
      long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      unk_267B8EE88 = *((void *)&v46->__r_.__value_.__l + 2);
      xmmword_267B8EE78 = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267B8EE78, &dword_216758000);
      __cxa_guard_release(&qword_267B8EE90);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EEB0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B8EEB0))
    {
      unint64_t v35 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v35) {
        unint64_t v35 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      }
      if ((*((void *)v35 + 3) & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t v36 = (uint64_t *)((*((void *)v35 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        unint64_t v36 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v35);
      }
      uint64_t v39 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v39) {
        uint64_t v39 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      }
      if ((*((void *)v39 + 8) & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t v40 = (uint64_t *)((*((void *)v39 + 8) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        unint64_t v40 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v39);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)v36, (const void **)v40, (uint64_t)&qword_267B8EE98);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267B8EE98, &dword_216758000);
      __cxa_guard_release(&qword_267B8EEB0);
    }
    char v12 = *((unsigned char *)EmptyString + 23);
    if (v12 >= 0) {
      size_t v13 = *((unsigned __int8 *)EmptyString + 23);
    }
    else {
      size_t v13 = EmptyString[1];
    }
    uint64_t v14 = qword_267B8EEA0;
    if (byte_267B8EEAF >= 0) {
      uint64_t v14 = byte_267B8EEAF;
    }
    if (v13 == v14)
    {
      if (byte_267B8EEAF >= 0) {
        unsigned int v15 = &qword_267B8EE98;
      }
      else {
        unsigned int v15 = (uint64_t *)qword_267B8EE98;
      }
      if ((*((unsigned char *)EmptyString + 23) & 0x80) == 0)
      {
        if (*((unsigned char *)EmptyString + 23))
        {
          BOOL v16 = EmptyString;
          uint64_t v17 = *((unsigned __int8 *)EmptyString + 23);
          while (*(unsigned __int8 *)v16 == *(unsigned __int8 *)v15)
          {
            BOOL v16 = (uint64_t *)((char *)v16 + 1);
            unsigned int v15 = (uint64_t *)((char *)v15 + 1);
            if (!--v17) {
              goto LABEL_58;
            }
          }
          goto LABEL_40;
        }
LABEL_58:
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression(this, a3);
        return;
      }
      if (!memcmp((const void *)*EmptyString, v15, EmptyString[1])) {
        goto LABEL_58;
      }
    }
LABEL_40:
    std::string::size_type v18 = byte_267B8EE8F;
    if (byte_267B8EE8F >= 0) {
      uint64_t v19 = (const char *)&xmmword_267B8EE78;
    }
    else {
      uint64_t v19 = (const char *)xmmword_267B8EE78;
    }
    size_t v20 = strlen(v19);
    if (v13 < v20
      || ((size_t v21 = v20, v12 >= 0) ? (v22 = (const char *)EmptyString) : (v22 = (const char *)*EmptyString),
          strncmp(v22, v19, v21)))
    {
LABEL_48:
      std::string::basic_string(&v48, (const std::string *)EmptyString, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v52);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v51);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      uint64_t v23 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
      if (v23 && *(unsigned char *)(v23 + 14) == 5)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v51, a3);
      }
      else
      {
        uint64_t v24 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
        if (v24 && *(unsigned char *)(v24 + 14) == 4) {
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendRelationalAttribute(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v51, a3);
        }
        else {
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v51, a3);
        }
      }
      if ((v51 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      return;
    }
    if ((v18 & 0x80u) == 0) {
      std::string::size_type v25 = v18;
    }
    else {
      std::string::size_type v25 = *((void *)&xmmword_267B8EE78 + 1);
    }
    std::string::basic_string(&v48, (const std::string *)EmptyString, v25, v13 + ~v25, (std::allocator<char> *)&v52);
    pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath((int *)&v51, (long long *)&v48);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v51, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v51 + 1);
LABEL_18:
    sub_21697C414(&v51);
    return;
  }
  v48.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/path.cpp";
  v48.__r_.__value_.__l.__size_ = (std::string::size_type)"AppendElementToken";
  v48.__r_.__value_.__r.__words[2] = 1117;
  uint64_t v49 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken(const TfToken &) const";
  char v50 = 0;
  if (*((char *)EmptyString + 23) < 0) {
    EmptyString = (uint64_t *)*EmptyString;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot append element '%s' to the EmptyPath.", (const char *)EmptyString);
  pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v26);
  sub_216981010(a3, &qword_267B8EE48);
  sub_21698105C(a3 + 1, (_DWORD *)&qword_267B8EE48 + 1);
}

void sub_216AF7AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267B8EE90);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::_ReplacePrimPrefix(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, int *a4@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a2);
  uint64_t v10 = *(unsigned __int16 *)(v9 + 12);
  uint64_t v11 = *(unsigned __int16 *)(Ptr + 12);
  if (v11 < v10)
  {
    sub_216981010(a4, this);
    sub_21698105C(a4 + 1, (_DWORD *)this + 1);
    return;
  }
  uint64_t v12 = v9;
  uint64_t v13 = v11 - v10;
  memset(v32, 0, sizeof(v32));
  if ((v11 - v10) < 0x11)
  {
    unsigned int v15 = 0;
    BOOL v16 = (uint64_t *)v32;
  }
  else
  {
    if (v13 < 0) {
      size_t v14 = -1;
    }
    else {
      size_t v14 = 8 * v13;
    }
    unsigned int v15 = (uint64_t *)operator new[](v14);
    BOOL v16 = v15;
  }
  if (v11 <= v10)
  {
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = (v11 - v10);
    std::string::size_type v18 = v16;
    uint64_t v19 = v13;
    do
    {
      *v18++ = Ptr;
      uint64_t Ptr = *(void *)Ptr;
      --v19;
    }
    while (v19);
  }
  if (Ptr != v12)
  {
    sub_216981010(a4, this);
    sub_21698105C(a4 + 1, (_DWORD *)this + 1);
    if (!v15) {
      return;
    }
    goto LABEL_18;
  }
  sub_216981010(a4, a3);
  sub_21698105C(a4 + 1, (_DWORD *)a3 + 1);
  if (v17)
  {
    size_t v20 = (char *)(v16 - 1);
    uint64_t v21 = 8 * v17;
    do
    {
      uint64_t v22 = *(void *)&v20[v21];
      if (*(unsigned char *)(v22 + 14) == 1)
      {
        uint64_t v23 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a4);
        uint64_t v24 = *(uint64_t **)&v20[v21];
        switch(*((unsigned char *)v24 + 14))
        {
          case 0:
            char v26 = *((unsigned char *)v24 + 15);
            NameImpl = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
            if (v26)
            {
              if (!NameImpl) {
                NameImpl = (uint64_t *)sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              }
            }
            else
            {
              if (!NameImpl) {
                NameImpl = (uint64_t *)sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              }
              ++NameImpl;
            }
            break;
          case 1:
          case 3:
          case 6:
          case 7:
            NameImpl = v24 + 2;
            break;
          case 2:
            NameImpl = (uint64_t *)pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode::_GetNameImpl((pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode *)v24);
            break;
          case 8:
            unint64_t v28 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
            if (!v28) {
              unint64_t v28 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
            }
            NameImpl = (uint64_t *)((char *)v28 + 64);
            break;
          default:
            int v27 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
            if (!v27) {
              int v27 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
            }
            NameImpl = (uint64_t *)((char *)v27 + 88);
            break;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreatePrim(v23, NameImpl, (uint64_t)&v31, (uint64_t (*)(uint64_t))sub_216AFDD58, &v29);
        sub_21697DE94(a4, &v29);
      }
      else
      {
        sub_216AF64E4((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v22, &v29);
        sub_21697DE94(a4, &v29);
        sub_21697DEEC(a4 + 1, &v30);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
      }
      sub_21697C414(&v29);
      v21 -= 8;
    }
    while (v21);
  }
  sub_2169C48D4(a4 + 1, (_DWORD *)this + 1);
  if (v15) {
LABEL_18:
  }
    operator delete[](v15);
}

void sub_216AF7EDC(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  if (v2) {
    operator delete[](v2);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::_ReplaceTargetPathPrefixes(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, int *a4@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v8 = (_DWORD *)((char *)this + 4);
  uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  if ((*(unsigned char *)(Ptr + 15) & 4) == 0)
  {
    sub_216981010(a4, this);
    sub_21698105C(a4 + 1, v8);
    return;
  }
  uint64_t v10 = Ptr;
  memset(v25, 0, sizeof(v25));
  unint64_t v11 = *(unsigned __int16 *)(Ptr + 12);
  if (v11 < 0x11)
  {
    uint64_t v12 = 0;
    uint64_t v13 = v25;
  }
  else
  {
    uint64_t v12 = operator new[](8 * v11);
    uint64_t v13 = v12;
  }
  uint64_t v14 = 0;
  while ((*(unsigned char *)(v10 + 15) & 4) != 0)
  {
    uint64_t v15 = v14 + 1;
    *((void *)v13 + v14) = v10;
    uint64_t v10 = *(void *)v10;
    ++v14;
    if (!v10) {
      goto LABEL_13;
    }
  }
  uint64_t v15 = v14;
LABEL_13:
  uint64_t v16 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
  sub_216AFC500(a4, v16, v10);
  if (v15)
  {
    uint64_t v17 = (char *)v13 - 8;
    while (1)
    {
      uint64_t v18 = *(void *)&v17[8 * v15];
      int v19 = *(unsigned __int8 *)(v18 + 14);
      if (v19 != 3) {
        break;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreatePrimProperty((void *)(v18 + 16), (uint64_t)&v24, (uint64_t (*)(uint64_t))sub_216AFDD60, &v22);
      sub_21697DEEC(a4 + 1, &v22);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
LABEL_24:
      if (!--v15) {
        goto LABEL_25;
      }
    }
    if (v19 == 4)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v21, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v18 + 16), a2, a3, 1);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, &v22);
      sub_21697DE94(a4, &v22);
      sub_21697DEEC(a4 + 1, &v23);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
      sub_21697C414(&v22);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
    }
    else
    {
      if (v19 != 5)
      {
        sub_216AF64E4((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v18, &v22);
        sub_21697DE94(a4, &v22);
        sub_21697DEEC(a4 + 1, &v23);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
        size_t v20 = (uint64_t *)&v22;
        goto LABEL_23;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v21, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v18 + 16), a2, a3, 1);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, &v22);
      sub_21697DE94(a4, &v22);
      sub_21697DEEC(a4 + 1, &v23);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
      sub_21697C414(&v22);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
    }
    size_t v20 = &v21;
LABEL_23:
    sub_21697C414(v20);
    goto LABEL_24;
  }
LABEL_25:
  if (v12) {
    operator delete[](v12);
  }
}

void sub_216AF822C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  if (v11) {
    operator delete[](v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix@<X0>(uint64_t *__return_ptr a1@<X8>, pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a4@<X2>, int a5@<W3>)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this)
    && *(void *)a3 != *(void *)a4)
  {
    BOOL v13 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a3);
    if (!v13
      || !(BOOL v13 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4)))
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v13);
      sub_216981010(a1, &qword_267B8EE48);
      uint64_t v10 = (_DWORD *)a1 + 1;
      unint64_t v11 = (char *)&qword_267B8EE48 + 4;
      goto LABEL_4;
    }
    if (*(void *)this == *(void *)a3)
    {
      sub_216981010(a1, a4);
      uint64_t v10 = (_DWORD *)a1 + 1;
      unint64_t v11 = (char *)a4 + 4;
      goto LABEL_4;
    }
    uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
    uint64_t v15 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v18);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v19);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a3 + 1))
    {
      if (!v15)
      {
LABEL_17:
        sub_216981010(a1, this);
        sub_21698105C((_DWORD *)a1 + 1, (_DWORD *)this + 1);
LABEL_27:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
        return (uint64_t *)sub_21697C414(&v18);
      }
      if (Ptr == pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a3))
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::_ReplacePropPrefix(this, a3, a4, a5, &v16);
        sub_21697DE94(&v18, &v16);
LABEL_25:
        sub_21697DEEC(&v19, &v17);
        sub_21697B754(&v16);
LABEL_26:
        sub_21697D878(a1, &v18);
        sub_21697D8B4((_DWORD *)a1 + 1, &v19);
        goto LABEL_27;
      }
      if (!a5 || (*(unsigned char *)(v15 + 15) & 4) == 0) {
        goto LABEL_17;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::_ReplaceTargetPathPrefixes(this, a3, a4, &v16);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::_ReplacePrimPrefix(this, a3, a4, &v16);
      sub_21697DE94(&v18, &v16);
      sub_21697DEEC(&v19, &v17);
      sub_21697B754(&v16);
      if (!a5 || !v15 || (*(unsigned char *)(v15 + 15) & 4) == 0) {
        goto LABEL_26;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::_ReplaceTargetPathPrefixes((pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a3, a4, &v16);
    }
    sub_21697DE94(&v18, &v16);
    goto LABEL_25;
  }
  sub_216981010(a1, this);
  uint64_t v10 = (_DWORD *)a1 + 1;
  unint64_t v11 = (char *)this + 4;
LABEL_4:

  return (uint64_t *)sub_21698105C(v10, v11);
}

void sub_216AF8528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::_ReplacePropPrefix(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, int a4@<W3>, int *a5@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v10 = (_DWORD *)((char *)this + 4);
  uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  int v29 = a2;
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)a2 + 1);
  uint64_t v13 = *(unsigned __int16 *)(v12 + 12);
  uint64_t v14 = *(unsigned __int16 *)(Ptr + 12);
  if (v14 < v13)
  {
    if (a4 && (*(unsigned char *)(Ptr + 15) & 4) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::_ReplaceTargetPathPrefixes(this, v29, a3, a5);
    }
    else
    {
      sub_216981010(a5, this);
      sub_21698105C(a5 + 1, v10);
    }
    return;
  }
  uint64_t v15 = v12;
  int v30 = a4;
  uint64_t v16 = v14 - v13;
  memset(v35, 0, sizeof(v35));
  if ((v14 - v13) < 0x11)
  {
    std::string __p = 0;
    int v18 = v35;
  }
  else
  {
    if (v16 < 0) {
      size_t v17 = -1;
    }
    else {
      size_t v17 = 8 * v16;
    }
    int v18 = operator new[](v17);
    std::string __p = v18;
  }
  if (v14 <= v13)
  {
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = (v14 - v13);
    size_t v20 = (uint64_t *)v18;
    uint64_t v21 = v16;
    do
    {
      *v20++ = Ptr;
      uint64_t Ptr = *(void *)Ptr;
      --v21;
    }
    while (v21);
  }
  int v22 = a3;
  if (Ptr == v15)
  {
    sub_216981010(a5, a3);
    sub_21698105C(a5 + 1, (_DWORD *)a3 + 1);
    if (!v19) {
      goto LABEL_42;
    }
    uint64_t v24 = 8 * v19;
    while (1)
    {
      uint64_t v25 = *(void *)((char *)v18 + v24 - 8);
      int v26 = *(unsigned __int8 *)(v25 + 14);
      if (v26 == 5) {
        break;
      }
      if (v26 == 4)
      {
        if (v30)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v31, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v25 + 16), v29, v22, 1);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)a5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, &v32);
          sub_21697DE94(a5, &v32);
          sub_21697DEEC(a5 + 1, &v33);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
          sub_21697C414(&v32);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
LABEL_33:
          int v27 = &v31;
LABEL_35:
          sub_21697C414(v27);
          goto LABEL_36;
        }
LABEL_34:
        sub_216AF64E4((pxrInternal__aapl__pxrReserved__::SdfPath *)a5, v25, &v32);
        sub_21697DE94(a5, &v32);
        sub_21697DEEC(a5 + 1, &v33);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
        int v27 = (uint64_t *)&v32;
        goto LABEL_35;
      }
      if (v26 != 3) {
        goto LABEL_34;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreatePrimProperty((void *)(v25 + 16), (uint64_t)&v34, (uint64_t (*)(uint64_t))sub_216AFDD68, &v32);
      sub_21697DEEC(a5 + 1, &v32);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
LABEL_36:
      v24 -= 8;
      if (!v24) {
        goto LABEL_42;
      }
    }
    if (v30)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v31, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v25 + 16), v29, v22, 1);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper((pxrInternal__aapl__pxrReserved__::SdfPath *)a5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, &v32);
      sub_21697DE94(a5, &v32);
      sub_21697DEEC(a5 + 1, &v33);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
      sub_21697C414(&v32);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
      goto LABEL_33;
    }
    goto LABEL_34;
  }
  if (v30
    && (uint64_t v23 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(v10)) != 0
    && (*(unsigned char *)(v23 + 15) & 4) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::_ReplaceTargetPathPrefixes(this, v29, a3, a5);
  }
  else
  {
    sub_216981010(a5, this);
    sub_21698105C(a5 + 1, v10);
  }
LABEL_42:
  if (__p) {
    operator delete[](__p);
  }
}

void sub_216AF89B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, char a13)
{
  if (__p) {
    operator delete[](__p);
  }
  _Unwind_Resume(exception_object);
}

int *pxrInternal__aapl__pxrReserved__::SdfPath::GetCommonPrefix@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, int *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1)
      && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a2 + 1)
      && !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator!=(this, a2))
    {
      uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
      uint64_t v8 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)a2 + 1);
      int v9 = 0;
    }
    else
    {
      uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
      uint64_t v8 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a2);
      int v9 = 1;
    }
    unint64_t v10 = *(unsigned __int16 *)(Ptr + 12);
    unint64_t v11 = *(unsigned __int16 *)(v8 + 12);
    if (v10 <= v11)
    {
      if (v10 < v11)
      {
        do
        {
          uint64_t v8 = *(void *)v8;
          --v11;
        }
        while (v11 > v10);
      }
    }
    else
    {
      do
      {
        uint64_t Ptr = *(void *)Ptr;
        --v10;
      }
      while (v10 > v11);
    }
    while (Ptr != v8)
    {
      uint64_t Ptr = *(void *)Ptr;
      uint64_t v8 = *(void *)v8;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
    if (v9)
    {
      return sub_216AF8C1C(a3, Ptr);
    }
    else
    {
      sub_2169C487C(a3, this);
      return sub_216AF8C7C(a3 + 1, Ptr);
    }
  }
  else
  {
    v13[0] = "sdf/path.cpp";
    v13[1] = "GetCommonPrefix";
    void v13[2] = 1464;
    void v13[3] = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::GetCommonPrefix(const SdfPath &) const";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v13, (pxrInternal__aapl__pxrReserved__ *)"GetCommonPrefix(): invalid path.", v6);
    *(void *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
}

int *sub_216AF8C1C(int *a1, uint64_t a2)
{
  int Handle = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(a2);
  if (a2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(&Handle, a1);
  sub_21697C414(&Handle);
  return a1;
}

int *sub_216AF8C7C(int *a1, uint64_t a2)
{
  int Handle = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle(a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(&Handle, a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&Handle);
  return a1;
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPath::RemoveCommonSuffix@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, char a3@<W2>, _DWORD *a4@<X8>)
{
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this)
    || !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2)
    || (BOOL v8 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1),
        v8 != pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a2 + 1)))
  {
    return sub_2169D36F0(a4, this, a2);
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1))
  {
LABEL_18:
    uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
    uint64_t v17 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a2);
    unsigned int v18 = *(unsigned __int16 *)(Ptr + 12);
    if (v18 >= 2)
    {
      while (1)
      {
        if (*(unsigned __int16 *)(v17 + 12) < 2u)
        {
          unsigned int v18 = 1;
          goto LABEL_24;
        }
        if ((sub_216AF9100(Ptr, v17) & 1) == 0) {
          break;
        }
        uint64_t Ptr = *(void *)Ptr;
        uint64_t v17 = *(void *)v17;
        unsigned int v18 = *(unsigned __int16 *)(Ptr + 12);
        if (v18 <= 1) {
          goto LABEL_24;
        }
      }
      int Handle = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(Ptr);
      atomic_fetch_add_explicit((atomic_uint *volatile)(Ptr + 8), 1u, memory_order_relaxed);
      int v24 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle(0);
      int v20 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(v17);
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 + 8), 1u, memory_order_relaxed);
      int v21 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle(0);
      sub_216AFDD70(a4, &Handle, &v20);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
      sub_21697C414(&v20);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
      return sub_21697C414(&Handle);
    }
LABEL_24:
    if (v18 && (a3 & 1) == 0 && *(_WORD *)(v17 + 12) && (sub_216AF9100(Ptr, v17) & 1) != 0)
    {
      uint64_t Ptr = *(void *)Ptr;
      uint64_t v17 = *(void *)v17;
      int Handle = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(Ptr);
      if (!Ptr) {
        goto LABEL_32;
      }
    }
    else
    {
      int Handle = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(Ptr);
    }
    atomic_fetch_add_explicit((atomic_uint *volatile)(Ptr + 8), 1u, memory_order_relaxed);
LABEL_32:
    int v24 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle(0);
    int v20 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(v17);
    if (v17) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 + 8), 1u, memory_order_relaxed);
    }
    int v21 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle(0);
    sub_216AFDD70(a4, &Handle, &v20);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
    sub_21697C414(&v20);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
    return sub_21697C414(&Handle);
  }
  unint64_t v10 = (void *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
  uint64_t v11 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)a2 + 1);
  uint64_t v12 = (void *)v11;
  BOOL v13 = v10 != 0;
  BOOL v14 = v11 != 0;
  if (!v10 || !v11)
  {
LABEL_16:
    if (v13 || v14)
    {
      int v22 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle((uint64_t)v10);
      sub_216981010(&Handle, this);
      sub_21698105C(&v24, &v22);
      int v19 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle((uint64_t)v12);
      sub_216981010(&v20, a2);
      sub_21698105C(&v21, &v19);
      sub_216AFDD70(a4, &Handle, &v20);
      sub_21697B754(&v20);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
      sub_21697B754(&Handle);
      return (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    }
    goto LABEL_18;
  }
  while ((sub_216AF9100((uint64_t)v10, (uint64_t)v12) & 1) != 0)
  {
    unint64_t v10 = (void *)*v10;
    uint64_t v12 = (void *)*v12;
    BOOL v13 = v10 != 0;
    BOOL v14 = v12 != 0;
    if (v10) {
      BOOL v15 = v12 == 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (v15) {
      goto LABEL_16;
    }
  }
  int v22 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle((uint64_t)v10);
  sub_216981010(&Handle, this);
  sub_21698105C(&v24, &v22);
  int v19 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle((uint64_t)v12);
  sub_216981010(&v20, a2);
  sub_21698105C(&v21, &v19);
  sub_216AFDD70(a4, &Handle, &v20);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  sub_21697C414(&v20);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
  sub_21697C414(&Handle);
  return (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
}

uint64_t sub_216AF9100(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 14);
  if (v2 != *(unsigned __int8 *)(a2 + 14)) {
    return 0;
  }
  uint64_t result = 1;
  switch(v2)
  {
    case 0:
      BOOL v7 = ((*(unsigned __int8 *)(a2 + 15) ^ *(unsigned __int8 *)(a1 + 15)) & 1) == 0;
      goto LABEL_6;
    case 1:
    case 3:
    case 6:
    case 7:
      unint64_t v5 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v6 = *(void *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_5;
    case 2:
      BOOL v8 = *(void **)(a1 + 16);
      int v9 = *(void **)(a2 + 16);
      if ((*v8 & 0xFFFFFFFFFFFFFFF8) != (*v9 & 0xFFFFFFFFFFFFFFF8)) {
        return 0;
      }
      BOOL v7 = (v8[1] & 0xFFFFFFFFFFFFFFF8) == (v9[1] & 0xFFFFFFFFFFFFFFF8);
      goto LABEL_6;
    case 4:
    case 5:
      unint64_t v5 = *(void *)(a1 + 16);
      unint64_t v6 = *(void *)(a2 + 16);
LABEL_5:
      BOOL v7 = v5 == v6;
LABEL_6:
      uint64_t result = v7;
      break;
    case 8:
      return result;
    default:
      v10[0] = "sdf/pathNode.h";
      v10[1] = "Compare";
      void v10[2] = 665;
      void v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_PathNode::Compare(const Sdf_PathNode &) const [Comp = pxrInter"
               "nal__aapl__pxrReserved__::(anonymous namespace)::_NodeEqual]";
      char v11 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Unhandled Sdf_PathNode::NodeType enumerant");
      return 0;
  }
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceTargetPath@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _DWORD *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this))
  {
    v23[0] = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v23);
    unint64_t v6 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v23 + 1);
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = v23[0];
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v6);
    sub_21697C414(v23);
    if (v7 == v8)
    {
      v23[0] = (uint64_t)"sdf/path.cpp";
      v23[1] = (uint64_t)"ReplaceTargetPath";
      v23[2] = 1598;
      void v23[3] = (uint64_t)"SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceTargetPath(const SdfPath &) const";
      char v24 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v23, (pxrInternal__aapl__pxrReserved__ *)"ReplaceTargetPath(): invalid new target path.", v9);
      *(void *)a3 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
      return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
    }
    else if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 1))
    {
      uint64_t Ptr = (unsigned char *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
      switch(*(unsigned char *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1)
                        + 14))
      {
        case 4:
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, v23);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)v23, a2, a3);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v23 + 1);
          goto LABEL_17;
        case 5:
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, v23);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper((pxrInternal__aapl__pxrReserved__::SdfPath *)v23, a2, a3);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v23 + 1);
LABEL_17:
          BOOL v14 = v23;
          goto LABEL_47;
        case 6:
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, &v21);
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceTargetPath(v23, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, a2);
          switch(Ptr[14])
          {
            case 0:
              char v15 = Ptr[15];
              NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              if (v15)
              {
                if (!NameImpl) {
                  NameImpl = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
                }
              }
              else
              {
                if (!NameImpl) {
                  NameImpl = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
                }
                NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)NameImpl + 8);
              }
              break;
            case 1:
            case 3:
            case 6:
            case 7:
              NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)(Ptr + 16);
              break;
            case 2:
              NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode::_GetNameImpl((pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode *)Ptr);
              break;
            case 8:
              uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              if (!v17) {
                uint64_t v17 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              }
              NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v17 + 64);
              break;
            default:
              uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              if (!v16) {
                uint64_t v16 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              }
              NameImpl = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v16 + 88);
              break;
          }
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendRelationalAttribute((pxrInternal__aapl__pxrReserved__::SdfPath *)v23, NameImpl, a3);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v23 + 1);
          sub_21697C414(v23);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
          goto LABEL_46;
        case 7:
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, &v21);
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceTargetPath(v23, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, a2);
          switch(Ptr[14])
          {
            case 0:
              char v18 = Ptr[15];
              BOOL v13 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              if (v18)
              {
                if (!v13) {
                  BOOL v13 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
                }
              }
              else
              {
                if (!v13) {
                  BOOL v13 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
                }
                BOOL v13 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v13 + 8);
              }
              break;
            case 1:
            case 3:
            case 6:
            case 7:
              BOOL v13 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)(Ptr + 16);
              break;
            case 2:
              BOOL v13 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode::_GetNameImpl((pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode *)Ptr);
              break;
            case 8:
              int v20 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              if (!v20) {
                int v20 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              }
              BOOL v13 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v20 + 64);
              break;
            default:
              int v19 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              if (!v19) {
                int v19 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
              }
              BOOL v13 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v19 + 88);
              break;
          }
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg((pxrInternal__aapl__pxrReserved__::SdfPath *)v23, v13, a3);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v23 + 1);
          sub_21697C414(v23);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
          goto LABEL_46;
        case 8:
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, &v21);
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceTargetPath(v23, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, a2);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression((pxrInternal__aapl__pxrReserved__::SdfPath *)v23, a3);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v23 + 1);
          sub_21697C414(v23);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
LABEL_46:
          BOOL v14 = (uint64_t *)&v21;
LABEL_47:
          uint64_t result = sub_21697C414(v14);
          break;
        default:
          goto LABEL_10;
      }
    }
    else
    {
LABEL_10:
      sub_216981010(a3, this);
      return sub_21698105C(a3 + 1, (_DWORD *)this + 1);
    }
  }
  else
  {
    *(void *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
  return result;
}

void sub_216AF96E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, int *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  std::string __p = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&__p);
  unint64_t v6 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&__p + 1);
  uint64_t v7 = *(void **)a2;
  uint64_t v8 = __p;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v6);
  sub_21697C414(&__p);
  if (v7 == v8)
  {
    std::string __p = "sdf/path.cpp";
    int v27 = "MakeAbsolutePath";
    uint64_t v28 = 1632;
    int v29 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(const SdfPath &) const";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"MakeAbsolutePath(): anchor is the empty path.", v9);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a2))
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a2)
      && (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(a2) & 1) == 0)
    {
      std::string __p = "sdf/path.cpp";
      int v27 = "MakeAbsolutePath";
      uint64_t v28 = 1645;
      int v29 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(const SdfPath &) const";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"MakeAbsolutePath() requires a prim path as an argument.", v11);
      return;
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this))
    {
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(this))
      {
        sub_2169C487C(a3, this);
        sub_2169C48D4(a3 + 1, (_DWORD *)this + 1);
      }
      else
      {
        uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
        if (*(__int16 *)(Ptr + 12) < 0)
        {
          std::string __p = "sdf/path.cpp";
          int v27 = "MakeAbsolutePath";
          uint64_t v28 = 1664;
          int v29 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(const SdfPath &) const";
          char v30 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"MakeAbsolutePath() found an invalid element count.", v13);
          return;
        }
        BOOL v14 = (void *)Ptr;
        unint64_t v15 = *(unsigned __int16 *)(Ptr + 12);
        sub_216AFE530(&__p, v15);
        if (v15)
        {
          uint64_t v16 = 8 * v15 - 8;
          do
          {
            *(void *)((char *)__p + v16) = v14;
            BOOL v14 = (void *)*v14;
            v16 -= 8;
          }
          while (v16 != -8);
        }
        sub_2169C487C(a3, a2);
        sub_2169C48D4(a3 + 1, (_DWORD *)a2 + 1);
        uint64_t v17 = (char *)__p;
        char v18 = (char *)v27;
        if (__p != v27)
        {
          int v19 = (char *)__p + 8;
          do
          {
            sub_216AF64E4((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, *((void *)v19 - 1), (int *)&v25);
            sub_21697DE94(a3, (int *)&v25);
            sub_21697DEEC(a3 + 1, (int *)&v25 + 1);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
            sub_21697C414(&v25);
            BOOL v20 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a3);
            BOOL v21 = v19 != v18 && v20;
            v19 += 8;
          }
          while (v21);
          uint64_t v17 = (char *)__p;
        }
        if (v17)
        {
          int v27 = v17;
          operator delete(v17);
        }
      }
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a3))
      {
        sub_2169C48D4(a3 + 1, (_DWORD *)this + 1);
        TargetPath = pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
        if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(TargetPath))
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, &__p);
          pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(&v25, (pxrInternal__aapl__pxrReserved__::SdfPath *)TargetPath, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceTargetPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, &v23);
          sub_21697DE94(a3, &v23);
          sub_21697DEEC(a3 + 1, &v24);
          sub_21697B754(&v23);
          sub_21697B754(&v25);
          sub_21697B754(&__p);
        }
      }
    }
  }
  else
  {
    std::string __p = "sdf/path.cpp";
    int v27 = "MakeAbsolutePath";
    uint64_t v28 = 1638;
    int v29 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(const SdfPath &) const";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"MakeAbsolutePath() requires an absolute path as an argument.", v10);
  }
}

void sub_216AF9AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13)
{
  sub_21697B754(&a11);
  sub_21697B754(&__p);
  sub_21697B754(v13);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, char **a2@<X1>, int *a3@<X8>)
{
  int v43 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v43);
  unint64_t v6 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v43 + 1);
  uint64_t v7 = *a2;
  uint64_t v8 = v43;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v6);
  sub_21697C414(&v43);
  if (v7 == v8)
  {
    int v43 = "sdf/path.cpp";
    BOOL v44 = "MakeRelativePath";
    uint64_t v45 = 1716;
    unint64_t v46 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath(const SdfPath &) const";
    char v47 = 0;
    unint64_t v10 = "MakeRelativePath(): anchor is the invalid path.";
LABEL_29:
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v43, (pxrInternal__aapl__pxrReserved__ *)v10, v9);
    goto LABEL_30;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2))
  {
    int v43 = "sdf/path.cpp";
    BOOL v44 = "MakeRelativePath";
    uint64_t v45 = 1722;
    unint64_t v46 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath(const SdfPath &) const";
    char v47 = 0;
    unint64_t v10 = "MakeRelativePath() requires an absolute path as an argument.";
    goto LABEL_29;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2)
    && (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2) & 1) == 0)
  {
    int v43 = "sdf/path.cpp";
    BOOL v44 = "MakeRelativePath";
    uint64_t v45 = 1731;
    unint64_t v46 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath(const SdfPath &) const";
    char v47 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (uint64_t)&__p);
    if (SHIBYTE(v42) >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v43, (pxrInternal__aapl__pxrReserved__ *)"MakeRelativePath() requires a prim, prim variant selection, or absolute root path as an anchor (got '%s').", v25, p_p);
    if (SHIBYTE(v42) < 0) {
      operator delete(__p);
    }
    goto LABEL_30;
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this))
  {
LABEL_30:
    *(void *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
    return;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(this))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (int *)&v43);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v43, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
    sub_21697C414(&v43);
    return;
  }
  std::string __p = 0;
  uint64_t v41 = 0;
  unint64_t v42 = 0;
  unint64_t v11 = *(unsigned __int16 *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this)
                            + 12);
  unint64_t v12 = *(unsigned __int16 *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a2)
                            + 12);
  uint64_t Ptr = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
  BOOL v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a2);
  uint64_t v16 = v14;
  if (v11 <= v12)
  {
    if (v11 < v12)
    {
      unint64_t v27 = v12 - v11;
      unint64_t v28 = v27;
      do
      {
        uint64_t v16 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)v16;
        --v28;
      }
      while (v28);
      goto LABEL_44;
    }
    if (v11 != v12)
    {
      int v43 = "sdf/path.cpp";
      BOOL v44 = "MakeRelativePath";
      uint64_t v45 = 1778;
      unint64_t v46 = "SdfPath pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath(const SdfPath &) const";
      char v47 = 0;
      int v48 = 4;
      pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v43, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v15, "thisCount == anchorCount");
    }
  }
  else
  {
    uint64_t v17 = v41;
    do
    {
      if (v17 >= v42)
      {
        uint64_t v18 = (v17 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v18 + 1) >> 61) {
LABEL_70:
        }
          sub_21677CB10();
        unint64_t v19 = (v42 - (unsigned char *)__p) >> 2;
        if (v19 <= v18 + 1) {
          unint64_t v19 = v18 + 1;
        }
        if ((unint64_t)(v42 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v19;
        }
        if (v20) {
          BOOL v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_21677CB28((uint64_t)&v42, v20);
        }
        else {
          BOOL v14 = 0;
        }
        BOOL v21 = (char *)v14 + 8 * v18;
        *(void *)BOOL v21 = Ptr;
        uint64_t v17 = v21 + 8;
        int v23 = (char *)__p;
        int v22 = v41;
        if (v41 != __p)
        {
          do
          {
            uint64_t v24 = *((void *)v22 - 1);
            v22 -= 8;
            *((void *)v21 - 1) = v24;
            v21 -= 8;
          }
          while (v22 != v23);
          int v22 = (char *)__p;
        }
        std::string __p = v21;
        uint64_t v41 = v17;
        unint64_t v42 = (char *)v14 + 8 * v20;
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(void *)uint64_t v17 = Ptr;
        v17 += 8;
      }
      uint64_t v41 = v17;
      uint64_t Ptr = *(pxrInternal__aapl__pxrReserved__::SdfPath **)Ptr;
      --v11;
    }
    while (v11 > v12);
  }
  unint64_t v27 = 0;
LABEL_44:
  if (Ptr != v16)
  {
    int v29 = v41;
    do
    {
      if (v29 >= v42)
      {
        uint64_t v30 = (v29 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v30 + 1) >> 61) {
          goto LABEL_70;
        }
        unint64_t v31 = (v42 - (unsigned char *)__p) >> 2;
        if (v31 <= v30 + 1) {
          unint64_t v31 = v30 + 1;
        }
        if ((unint64_t)(v42 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v31;
        }
        if (v32) {
          BOOL v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_21677CB28((uint64_t)&v42, v32);
        }
        else {
          BOOL v14 = 0;
        }
        int v33 = (char *)v14 + 8 * v30;
        *(void *)int v33 = Ptr;
        int v29 = v33 + 8;
        unint64_t v35 = (char *)__p;
        char v34 = v41;
        if (v41 != __p)
        {
          do
          {
            uint64_t v36 = *((void *)v34 - 1);
            v34 -= 8;
            *((void *)v33 - 1) = v36;
            v33 -= 8;
          }
          while (v34 != v35);
          char v34 = (char *)__p;
        }
        std::string __p = v33;
        uint64_t v41 = v29;
        unint64_t v42 = (char *)v14 + 8 * v32;
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        *(void *)int v29 = Ptr;
        v29 += 8;
      }
      uint64_t v41 = v29;
      ++v27;
      uint64_t Ptr = *(pxrInternal__aapl__pxrReserved__::SdfPath **)Ptr;
      uint64_t v16 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)v16;
    }
    while (Ptr != v16);
  }
  uint64_t v37 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath(v14);
  sub_216981010(a3, v37);
  sub_21698105C(a3 + 1, v37 + 1);
  while (v27)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, &v43);
    sub_21697DE94(a3, (int *)&v43);
    sub_21697DEEC(a3 + 1, (int *)&v43 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
    --v27;
    sub_21697C414(&v43);
  }
  unint64_t v38 = v41;
  while (v38 != __p)
  {
    uint64_t v39 = *((void *)v38 - 1);
    v38 -= 8;
    sub_216AF64E4((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, v39, (int *)&v43);
    sub_21697DE94(a3, (int *)&v43);
    sub_21697DEEC(a3 + 1, (int *)&v43 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
    sub_21697C414(&v43);
  }
  sub_2169C48D4(a3 + 1, (_DWORD *)this + 1);
  if (__p)
  {
    uint64_t v41 = (char *)__p;
    operator delete(__p);
  }
}

void sub_216AFA09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  int v2 = (char)v1;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (!v1) {
    return 0;
  }
  unint64_t v3 = v2 >= 0 ? a1 : *(void *)a1;
  unint64_t v10 = v3;
  unint64_t v11 = v3 + v1;
  LODWORD(v4) = pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint((pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *)&v10);
  BOOL v5 = (v4 - 57344) >= 0xFFFFF800 || v4 >= 0x110000;
  uint64_t v4 = v5 ? (pxrInternal__aapl__pxrReserved__ *)65533 : (pxrInternal__aapl__pxrReserved__ *)v4;
  if (v4 != 95 && !pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidStart(v4)) {
    return 0;
  }
  sub_216AFA7B0(&v10);
  if (v10 >= v11) {
    return 1;
  }
  do
  {
    LODWORD(v6) = pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint((pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *)&v10);
    if ((v6 - 57344) >= 0xFFFFF800 || v6 >= 0x110000) {
      uint64_t v6 = 65533;
    }
    else {
      uint64_t v6 = v6;
    }
    uint64_t IsUtf8CodePointXidContinue = pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidContinue((pxrInternal__aapl__pxrReserved__ *)v6);
    if (!IsUtf8CodePointXidContinue) {
      break;
    }
    sub_216AFA7B0(&v10);
  }
  while (v10 < v11);
  return IsUtf8CodePointXidContinue;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier(size_t *__s)
{
  uint64_t v1 = (char *)__s;
  if ((*((char *)__s + 23) & 0x80000000) == 0)
  {
    size_t v2 = *((unsigned __int8 *)__s + 23);
    if (*((unsigned char *)__s + 23)) {
      goto LABEL_6;
    }
    return 0;
  }
  size_t v2 = __s[1];
  if (!v2) {
    return 0;
  }
  uint64_t v1 = (char *)*__s;
  do
  {
LABEL_6:
    unint64_t v3 = memchr(v1, 58, v2);
    if (v3) {
      unint64_t v4 = v3 - v1;
    }
    else {
      unint64_t v4 = -1;
    }
    if (v4) {
      BOOL v5 = v4 == v2 - 1;
    }
    else {
      BOOL v5 = 1;
    }
    uint64_t v6 = !v5;
    if (v5) {
      break;
    }
    if (v2 >= v4) {
      unint64_t v7 = v4;
    }
    else {
      unint64_t v7 = v2;
    }
    BOOL v13 = v1;
    unint64_t v14 = (unint64_t)&v1[v7];
    LODWORD(v8) = pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint((pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *)&v13);
    if ((v8 - 57344) >= 0xFFFFF800 || v8 >= 0x110000) {
      uint64_t v8 = 65533;
    }
    else {
      uint64_t v8 = v8;
    }
    if (v8 != 95
      && !pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidStart((pxrInternal__aapl__pxrReserved__ *)v8))
    {
      return 0;
    }
    while (1)
    {
      sub_216AFA7B0((unint64_t *)&v13);
      if ((unint64_t)v13 >= v14) {
        break;
      }
      LODWORD(v1sub_2168EBBB8(&a9, 0) = pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint((pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *)&v13);
      if ((v10 - 57344) >= 0xFFFFF800 || v10 >= 0x110000) {
        uint64_t v10 = 65533;
      }
      else {
        uint64_t v10 = v10;
      }
      if (!pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidContinue((pxrInternal__aapl__pxrReserved__ *)v10)) {
        return 0;
      }
    }
    if (v4 == -1) {
      break;
    }
    if (v2 <= v4) {
      sub_216855AEC("string_view::substr");
    }
    v1 += v4 + 1;
    v2 -= v4 + 1;
  }
  while (v2);
  return v6;
}

void pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifier(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  if (!v4) {
    unint64_t v4 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  }
  unint64_t v5 = *((void *)v4 + 10) & 0xFFFFFFFFFFFFFFF8;
  if (v5)
  {
    uint64_t v6 = (const char *)(v5 + 16);
    if (*(char *)(v5 + 39) < 0) {
      uint64_t v6 = *(const char **)v6;
    }
  }
  else
  {
    uint64_t v6 = "";
  }
  int v7 = *(unsigned __int8 *)v6;
  if ((char)a1[23] < 0)
  {
    uint64_t v8 = *((void *)a1 + 1);
    if (!v8) {
      return;
    }
    unint64_t v10 = *(void *)a1;
    int v9 = *(unsigned __int8 *)(*(void *)a1 + v8 - 1);
  }
  else
  {
    uint64_t v8 = a1[23];
    if (!a1[23]) {
      return;
    }
    int v9 = a1[v8 - 1];
    unint64_t v10 = (unint64_t)a1;
  }
  if (v9 != v7)
  {
    int v48 = (char *)v10;
    unint64_t v49 = v10 + v8;
    LODWORD(v11) = pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint((pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *)&v48);
    BOOL v12 = (v11 - 57344) >= 0xFFFFF800 || v11 >= 0x110000;
    unint64_t v11 = v12 ? (pxrInternal__aapl__pxrReserved__ *)65533 : (pxrInternal__aapl__pxrReserved__ *)v11;
    if v11 == 95 || (pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidStart(v11))
    {
      uint64_t v13 = a1[23];
      if ((v13 & 0x80u) == 0) {
        unint64_t v14 = a1;
      }
      else {
        unint64_t v14 = *(unsigned __int8 **)a1;
      }
      uint64_t v15 = 0;
      if ((v13 & 0x80u) != 0) {
        uint64_t v13 = *((void *)a1 + 1);
      }
      for (; v13; --v13)
      {
        int v16 = *v14++;
        if (v16 == v7) {
          ++v15;
        }
      }
      sub_21680BC90(a2, v15 + 1);
      sub_216AFA7B0((unint64_t *)&v48);
      while (1)
      {
        if ((unint64_t)v48 >= v49)
        {
          sub_21682E90C(__p, (char *)v10, v48, (unint64_t)&v48[-v10]);
          unint64_t v35 = a2[1];
          unint64_t v34 = a2[2];
          if (v35 >= v34)
          {
            unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *a2) >> 3);
            unint64_t v38 = v37 + 1;
            if (v37 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *a2) >> 3);
            if (2 * v39 > v38) {
              unint64_t v38 = 2 * v39;
            }
            if (v39 >= 0x555555555555555) {
              unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v40 = v38;
            }
            uint64_t v53 = a2 + 2;
            if (v40) {
              uint64_t v41 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v40);
            }
            else {
              uint64_t v41 = 0;
            }
            unint64_t v42 = &v41[24 * v37];
            *(void *)&long long v50 = v41;
            *((void *)&v50 + 1) = v42;
            char v52 = &v41[24 * v40];
            long long v43 = *(_OWORD *)__p;
            *((void *)v42 + 2) = v47;
            *(_OWORD *)unint64_t v42 = v43;
            __p[1] = 0;
            uint64_t v47 = 0;
            __p[0] = 0;
            uint64_t v51 = (uint64_t)(v42 + 24);
            sub_216790CCC(a2, &v50);
            uint64_t v44 = a2[1];
            sub_216790E64((uint64_t)&v50);
            int v45 = SHIBYTE(v47);
            a2[1] = v44;
            if (v45 < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v36 = *(_OWORD *)__p;
            *(void *)(v35 + 16) = v47;
            *(_OWORD *)unint64_t v35 = v36;
            a2[1] = v35 + 24;
          }
          return;
        }
        if (pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint((pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *)&v48) == 58)
        {
          sub_21682E90C(__p, (char *)v10, v48, (unint64_t)&v48[-v10]);
          unint64_t v18 = a2[1];
          unint64_t v17 = a2[2];
          if (v18 >= v17)
          {
            unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *a2) >> 3);
            unint64_t v24 = v23 + 1;
            if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a2) >> 3);
            if (2 * v25 > v24) {
              unint64_t v24 = 2 * v25;
            }
            if (v25 >= 0x555555555555555) {
              unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v26 = v24;
            }
            uint64_t v53 = a2 + 2;
            if (v26) {
              unint64_t v27 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v26);
            }
            else {
              unint64_t v27 = 0;
            }
            unint64_t v28 = &v27[24 * v23];
            *(void *)&long long v50 = v27;
            *((void *)&v50 + 1) = v28;
            char v52 = &v27[24 * v26];
            long long v29 = *(_OWORD *)__p;
            *((void *)v28 + 2) = v47;
            *(_OWORD *)unint64_t v28 = v29;
            __p[1] = 0;
            uint64_t v47 = 0;
            __p[0] = 0;
            uint64_t v51 = (uint64_t)(v28 + 24);
            sub_216790CCC(a2, &v50);
            uint64_t v30 = a2[1];
            sub_216790E64((uint64_t)&v50);
            int v31 = SHIBYTE(v47);
            a2[1] = v30;
            if (v31 < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v19 = *(_OWORD *)__p;
            *(void *)(v18 + 16) = v47;
            *(_OWORD *)unint64_t v18 = v19;
            a2[1] = v18 + 24;
          }
          unint64_t v10 = *sub_216AFA7B0((unint64_t *)&v48);
          LODWORD(v32) = pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint((pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *)&v48);
          if ((v32 - 57344) >= 0xFFFFF800 || v32 >= 0x110000) {
            uint64_t v32 = 65533;
          }
          else {
            uint64_t v32 = v32;
          }
          if (v32 == 95) {
            goto LABEL_62;
          }
          char IsUtf8CodePointXidStart = pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidStart((pxrInternal__aapl__pxrReserved__ *)v32);
        }
        else
        {
          LODWORD(v2sub_2168EBBB8(&a9, 0) = pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint((pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *)&v48);
          if ((v20 - 57344) >= 0xFFFFF800 || v20 >= 0x110000) {
            uint64_t v20 = 65533;
          }
          else {
            uint64_t v20 = v20;
          }
          char IsUtf8CodePointXidStart = pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidContinue((pxrInternal__aapl__pxrReserved__ *)v20);
        }
        if ((IsUtf8CodePointXidStart & 1) == 0)
        {
          long long v50 = *(_OWORD *)a2;
          *a2 = 0;
          a2[1] = 0;
          uint64_t v51 = a2[2];
          a2[2] = 0;
          __p[0] = &v50;
          sub_216782F20((void ***)__p);
          return;
        }
LABEL_62:
        sub_216AFA7B0((unint64_t *)&v48);
      }
    }
  }
}

void sub_216AFA754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
}

unint64_t *sub_216AFA7B0(unint64_t *result)
{
  size_t v2 = (char *)*result;
  unint64_t v1 = result[1];
  if (*result >= v1) {
    goto LABEL_3;
  }
  int v3 = *v2;
  if ((v3 & 0x80000000) == 0) {
    goto LABEL_3;
  }
  if ((v3 & 0xE0) == 0xC0)
  {
    int v4 = 2;
  }
  else if ((v3 & 0xF0) == 0xE0)
  {
    int v4 = 3;
  }
  else
  {
    if ((v3 & 0xF8) != 0xF0)
    {
LABEL_3:
      _DWORD *result = (unint64_t)(v2 + 1);
      return result;
    }
    int v4 = 4;
  }
  unint64_t v5 = v2 + 1;
  _DWORD *result = (unint64_t)v5;
  do
  {
    if ((unint64_t)v5 >= v1) {
      break;
    }
    if (*v5 > -65) {
      break;
    }
    _DWORD *result = (unint64_t)++v5;
    --v4;
  }
  while (v4 > 1u);
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifierAsTokens(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifier(a1, &v8);
  sub_216AFE5A8(a2, 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3));
  if (v9 != v8)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = (v9 - v8) / 24;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v10);
      uint64_t v6 = *a2;
      unint64_t v7 = v10;
      unint64_t v10 = *(void *)(*a2 + v3);
      *(void *)(v6 + v3) = v7;
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      v4 += 24;
      v3 += 8;
      --v5;
    }
    while (v5);
  }
  unint64_t v10 = (unint64_t)&v8;
  sub_216782F20((void ***)&v10);
}

void sub_216AFA92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216782F20(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(std::string **a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
LABEL_7:
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    if (!v8) {
      uint64_t v8 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    }
    unint64_t v9 = *((void *)v8 + 10) & 0xFFFFFFFFFFFFFFF8;
    if (v9)
    {
      unint64_t v10 = (char *)(v9 + 16);
      if (*(char *)(v9 + 39) < 0) {
        unint64_t v10 = *(char **)v10;
      }
    }
    else
    {
      unint64_t v10 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfStringJoin(v10, a1, a2);
  }
  else
  {
    uint64_t v6 = *a1;
    while (1)
    {
      std::string::size_type size = HIBYTE(v6->__r_.__value_.__r.__words[2]);
      if ((size & 0x80u) != 0) {
        std::string::size_type size = v6->__r_.__value_.__l.__size_;
      }
      if (!size) {
        break;
      }
      if (++v6 == v5) {
        goto LABEL_7;
      }
    }
    memset(v17, 0, sizeof(v17));
    sub_21680BC90((uint64_t *)v17, 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)v4) >> 3));
    BOOL v12 = *a1;
    unint64_t v11 = a1[1];
    unint64_t v18 = v17;
    while (v12 != v11)
    {
      std::string::size_type v13 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
      if ((v13 & 0x80u) != 0) {
        std::string::size_type v13 = v12->__r_.__value_.__l.__size_;
      }
      if (v13) {
        sub_21697E4BC((uint64_t **)&v18, (long long *)v12);
      }
      ++v12;
    }
    unint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    if (!v14) {
      unint64_t v14 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    }
    unint64_t v15 = *((void *)v14 + 10) & 0xFFFFFFFFFFFFFFF8;
    if (v15)
    {
      int v16 = (char *)(v15 + 16);
      if (*(char *)(v15 + 39) < 0) {
        int v16 = *(char **)v16;
      }
    }
    else
    {
      int v16 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfStringJoin(v16, v17, a2);
    long long v19 = v17;
    sub_216782F20((void ***)&v19);
  }
}

void sub_216AFAB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  sub_216782F20(&a14);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(void *a1@<X0>, std::string *a2@<X8>)
{
  int v16 = 0;
  unint64_t v17 = 0;
  unint64_t v18 = 0;
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21680BC90((uint64_t *)&v16, (uint64_t)(a1[1] - *a1) >> 3);
  uint64_t v5 = a1[1] - *a1;
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = v5 >> 3;
    do
    {
      uint64_t v8 = *(void *)(*a1 + 8 * v6);
      if (v8)
      {
        unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFF8;
        if (v9) {
          EmptyString = (uint64_t *)(v9 + 16);
        }
        else {
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
        }
        unint64_t v11 = (long long *)v17;
        if ((unint64_t)v17 >= v18)
        {
          uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2167E9A44((uint64_t *)&v16, (long long *)EmptyString);
        }
        else
        {
          if (*((char *)EmptyString + 23) < 0)
          {
            sub_216778F24(v17, (void *)*EmptyString, EmptyString[1]);
          }
          else
          {
            long long v12 = *(_OWORD *)EmptyString;
            *((void *)v17 + 2) = EmptyString[2];
            *unint64_t v11 = v12;
          }
          uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v11 + 24);
        }
        unint64_t v17 = v4;
      }
      ++v6;
    }
    while (v7 != v6);
  }
  std::string::size_type v13 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  if (!v13) {
    std::string::size_type v13 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  }
  unint64_t v14 = *((void *)v13 + 10) & 0xFFFFFFFFFFFFFFF8;
  if (v14)
  {
    unint64_t v15 = (char *)(v14 + 16);
    if (*(char *)(v14 + 39) < 0) {
      unint64_t v15 = *(char **)v15;
    }
  }
  else
  {
    unint64_t v15 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringJoin(v15, &v16, a2);
  long long v19 = &v16;
  sub_216782F20((void ***)&v19);
}

void sub_216AFAC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216782F20(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *((char *)a1 + 23);
  unint64_t v6 = (unint64_t)a1[1];
  if (v5 >= 0) {
    uint64_t v7 = (const void *)*((unsigned __int8 *)a1 + 23);
  }
  else {
    uint64_t v7 = a1[1];
  }
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if (v7)
  {
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    if (v8)
    {
      unint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v10) {
        unint64_t v10 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      }
      unint64_t v11 = *((void *)v10 + 10) & 0xFFFFFFFFFFFFFFF8;
      if (v11)
      {
        long long v12 = (const char *)(v11 + 16);
        if (*(char *)(v11 + 39) < 0) {
          long long v12 = *(const char **)v12;
        }
      }
      else
      {
        long long v12 = "";
      }
      if (*((char *)a1 + 23) >= 0) {
        size_t v14 = *((unsigned __int8 *)a1 + 23);
      }
      else {
        size_t v14 = (size_t)a1[1];
      }
      size_t v15 = strlen(v12);
      p_p = &__p;
      sub_2167940B4((uint64_t)&__p, v14 + v15);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v14)
      {
        if (*((char *)a1 + 23) >= 0) {
          unint64_t v17 = a1;
        }
        else {
          unint64_t v17 = *a1;
        }
        memmove(p_p, v17, v14);
      }
      if (v15) {
        memmove((char *)p_p + v14, v12, v15);
      }
      p_p->__r_.__value_.__s.__data_[v14 + v15] = 0;
      int v18 = *(char *)(a2 + 23);
      if (v18 >= 0) {
        long long v19 = (const std::string::value_type *)a2;
      }
      else {
        long long v19 = *(const std::string::value_type **)a2;
      }
      if (v18 >= 0) {
        std::string::size_type v20 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v20 = *(void *)(a2 + 8);
      }
      BOOL v21 = std::string::append(&__p, v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      *(void *)(a3 + 16) = *((void *)&v21->__r_.__value_.__l + 2);
      *(_OWORD *)a3 = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      return;
    }
    if ((v5 & 0x80000000) == 0)
    {
      *(_OWORD *)a3 = *(_OWORD *)a1;
      std::string::size_type v13 = a1[2];
      goto LABEL_17;
    }
    unint64_t v23 = (void *)*a1;
  }
  else
  {
    if ((v8 & 0x80) == 0)
    {
      *(_OWORD *)a3 = *(_OWORD *)a2;
      std::string::size_type v13 = *(const void **)(a2 + 16);
LABEL_17:
      *(void *)(a3 + 16) = v13;
      return;
    }
    unint64_t v23 = *(void **)a2;
    unint64_t v6 = *(void *)(a2 + 8);
  }

  sub_216778F24((unsigned char *)a3, v23, v6);
}

void sub_216AFAE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v6 = (const void **)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    this = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
    unint64_t v6 = (const void **)this;
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }

  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(v6, (uint64_t)EmptyString, a3);
}

std::string *pxrInternal__aapl__pxrReserved__::SdfPath::StripNamespace@<X0>(std::string *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  if (!v4) {
    uint64_t v4 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  }
  unint64_t v5 = *((void *)v4 + 10) & 0xFFFFFFFFFFFFFFF8;
  if (v5)
  {
    unint64_t v6 = (const char *)(v5 + 16);
    if (*(char *)(v5 + 39) < 0) {
      unint64_t v6 = *(const char **)v6;
    }
  }
  else
  {
    unint64_t v6 = "";
  }
  uint64_t result = (std::string *)std::string::rfind(this, *v6, 0xFFFFFFFFFFFFFFFFLL);
  if (result != (std::string *)-1) {
    return std::string::basic_string(a2, this, (std::string::size_type)result->__r_.__value_.__r.__words + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v10);
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v8 = (void *)this->__r_.__value_.__r.__words[0];
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    return (std::string *)sub_216778F24(a2, v8, size);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)&this->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = this->__r_.__value_.__r.__words[2];
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfPath::StripNamespace(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, uint64_t a2@<X8>)
{
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (std::string *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::StripNamespace(EmptyString, &__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216AFB06C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double pxrInternal__aapl__pxrReserved__::SdfPath::StripPrefixNamespace@<D0>(const std::string *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EEC0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v19 = a2;
    int v20 = __cxa_guard_acquire(&qword_267B8EEC0);
    a2 = v19;
    if (v20)
    {
      BOOL v21 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v21) {
        BOOL v21 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      }
      unint64_t v22 = *((void *)v21 + 10) & 0xFFFFFFFFFFFFFFF8;
      if (v22)
      {
        unint64_t v23 = (const char *)(v22 + 16);
        if (*(char *)(v22 + 39) < 0) {
          unint64_t v23 = *(const char **)v23;
        }
      }
      else
      {
        unint64_t v23 = "";
      }
      byte_267B8EEB8 = *v23;
      __cxa_guard_release(&qword_267B8EEC0);
      a2 = v19;
    }
  }
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    std::string::size_type v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v6 = *(void *)(a2 + 8);
  }
  if (v6)
  {
    if (v5 >= 0) {
      uint64_t v7 = (const char *)a2;
    }
    else {
      uint64_t v7 = *(const char **)a2;
    }
    int v8 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
    unint64_t size = a1->__r_.__value_.__l.__size_;
    if (v8 >= 0) {
      size_t v10 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v10 = a1->__r_.__value_.__l.__size_;
    }
    size_t v11 = strlen(v7);
    if (v10 < v11
      || (v8 >= 0 ? (long long v12 = (const char *)a1) : (long long v12 = (const char *)a1->__r_.__value_.__r.__words[0]),
          strncmp(v12, v7, v11)))
    {
LABEL_17:
      if (v8 < 0)
      {
        std::string::size_type v13 = (void *)a1->__r_.__value_.__r.__words[0];
        size_t v14 = a3;
        unint64_t v15 = size;
LABEL_22:
        sub_216778F24(v14, v13, v15);
        goto LABEL_23;
      }
      goto LABEL_20;
    }
    if (v7[v6 - 1] == byte_267B8EEB8)
    {
      unint64_t v17 = a1;
      std::string::size_type v18 = v6;
    }
    else
    {
      if (v12[v6] != byte_267B8EEB8) {
        goto LABEL_17;
      }
      std::string::size_type v18 = v6 + 1;
      unint64_t v17 = a1;
    }
    std::string::basic_string(&v25, v17, v18, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v26);
    *(void *)&long long v16 = v25.__r_.__value_.__r.__words[0];
    *a3 = v25;
    a3[1].__r_.__value_.__s.__data_[0] = 1;
    return *(double *)&v16;
  }
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v13 = (void *)a1->__r_.__value_.__r.__words[0];
    unint64_t v15 = a1->__r_.__value_.__l.__size_;
    size_t v14 = a3;
    goto LABEL_22;
  }
LABEL_20:
  long long v16 = *(_OWORD *)&a1->__r_.__value_.__l.__data_;
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)&a1->__r_.__value_.__l.__data_;
  a3->__r_.__value_.__r.__words[2] = a1->__r_.__value_.__r.__words[2];
LABEL_23:
  a3[1].__r_.__value_.__s.__data_[0] = 0;
  return *(double *)&v16;
}

void sub_216AFB270(_Unwind_Exception *a1)
{
}

int *pxrInternal__aapl__pxrReserved__::SdfPath::IsValidPathString(long long *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_ParsePath(a1, 0, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::_LessThanInternal(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a2);
  unsigned int v7 = *(unsigned __int8 *)(Ptr + 15);
  if ((v7 ^ *(unsigned __int8 *)(v6 + 15))) {
    return v7 & 1;
  }
  if (Ptr == v6)
  {
    uint64_t v16 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);
    uint64_t v17 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)a2 + 1);
    if (!v16 || !v17)
    {
      LOBYTE(v7) = v16 == 0;
      return v7 & 1;
    }
    return sub_216AFB474(v16, v17);
  }
  else
  {
    unsigned int v7 = *(unsigned __int16 *)(Ptr + 12);
    unsigned int v8 = *(unsigned __int16 *)(v6 + 12);
    if (*(_WORD *)(Ptr + 12)) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      if (*(_WORD *)(Ptr + 12)) {
        BOOL v10 = 1;
      }
      else {
        BOOL v10 = v8 == 0;
      }
      LOBYTE(v7) = !v10;
      return v7 & 1;
    }
    if ((int)(v8 - v7) < 0)
    {
      unsigned int v12 = v7 - v8;
      while (Ptr)
      {
        uint64_t Ptr = *(void *)Ptr;
        if (!--v12) {
          goto LABEL_23;
        }
      }
      std::string::size_type v18 = "sdf/path.cpp";
      uint64_t v19 = "_LessThanCompareNodes";
      uint64_t v20 = 2113;
      BOOL v21 = "BOOL pxrInternal__aapl__pxrReserved__::_LessThanCompareNodes(const Sdf_PathNode *, const Sdf_PathNode *)";
      char v22 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 3, (pxrInternal__aapl__pxrReserved__ *)"Left path node is null");
      goto LABEL_31;
    }
    if (v8 != v7)
    {
      int v11 = v8 - v7 + 1;
      while (v6)
      {
        uint64_t v6 = *(void *)v6;
        if (--v11 <= 1) {
          goto LABEL_23;
        }
      }
      std::string::size_type v18 = "sdf/path.cpp";
      uint64_t v19 = "_LessThanCompareNodes";
      uint64_t v20 = 2123;
      BOOL v21 = "BOOL pxrInternal__aapl__pxrReserved__::_LessThanCompareNodes(const Sdf_PathNode *, const Sdf_PathNode *)";
      char v22 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 3, (pxrInternal__aapl__pxrReserved__ *)"Right path node is null");
LABEL_31:
      LOBYTE(v7) = 0;
      return v7 & 1;
    }
LABEL_23:
    if (Ptr == v6)
    {
      LOBYTE(v7) = v7 < v8;
      return v7 & 1;
    }
    do
    {
      uint64_t v13 = v6;
      uint64_t v14 = Ptr;
      uint64_t v6 = *(void *)v6;
      uint64_t Ptr = *(void *)Ptr;
    }
    while (Ptr != v6);
    return sub_216AFDDCC(v14, v13);
  }
}

uint64_t sub_216AFB474(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 12);
  unsigned int v3 = *(unsigned __int16 *)(a2 + 12);
  if (*(_WORD *)(a1 + 12)) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (*(_WORD *)(a1 + 12)) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = v3 == 0;
    }
    return !v5;
  }
  else
  {
    if ((int)(v3 - v2) < 0)
    {
      unsigned int v8 = v2 - v3;
      while (a1)
      {
        a1 = *(void *)a1;
        if (!--v8) {
          goto LABEL_21;
        }
      }
      int v11 = "sdf/path.cpp";
      unsigned int v12 = "_LessThanCompareNodes";
      uint64_t v13 = 2113;
      uint64_t v14 = "BOOL pxrInternal__aapl__pxrReserved__::_LessThanCompareNodes(const Sdf_PathNode *, const Sdf_PathNode *)";
      char v15 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Left path node is null");
      return 0;
    }
    if (v3 != v2)
    {
      int v7 = v3 - v2 + 1;
      while (a2)
      {
        a2 = *(void *)a2;
        if (--v7 <= 1) {
          goto LABEL_21;
        }
      }
      int v11 = "sdf/path.cpp";
      unsigned int v12 = "_LessThanCompareNodes";
      uint64_t v13 = 2123;
      uint64_t v14 = "BOOL pxrInternal__aapl__pxrReserved__::_LessThanCompareNodes(const Sdf_PathNode *, const Sdf_PathNode *)";
      char v15 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Right path node is null");
      return 0;
    }
LABEL_21:
    if (a1 == a2)
    {
      return v2 < v3;
    }
    else
    {
      do
      {
        uint64_t v9 = a2;
        uint64_t v10 = a1;
        a2 = *(void *)a2;
        a1 = *(void *)a1;
      }
      while (a1 != a2);
      return sub_216AFDDCC(v10, v9);
    }
  }
}

void *pxrInternal__aapl__pxrReserved__::operator<<(void *a1, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(this);
  int v4 = *((char *)String + 23);
  if (v4 >= 0) {
    uint64_t v5 = (uint64_t)String;
  }
  else {
    uint64_t v5 = *String;
  }
  if (v4 >= 0) {
    uint64_t v6 = *((unsigned __int8 *)String + 23);
  }
  else {
    uint64_t v6 = String[1];
  }

  return sub_216779180(a1, v5, v6);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::GetConciseRelativePaths(_DWORD **a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v61 = 0;
  int v62 = 0;
  unint64_t v63 = 0;
  int v58 = 0;
  uint64_t v59 = 0;
  unint64_t v60 = 0;
  char v55 = 0;
  uint64_t v56 = 0;
  unint64_t v57 = 0;
  for (long long i = *(_OWORD *)a1; (void)i != *((void *)&i + 1); sub_216998538(&i))
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath **)sub_216AFBD24(&i, a2, a3);
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(*v6))
    {
      long long v50 = (void **)"sdf/path.cpp";
      uint64_t v51 = "GetConciseRelativePaths";
      unint64_t v52 = 2190;
      uint64_t v53 = "static SdfPathVector pxrInternal__aapl__pxrReserved__::SdfPath::GetConciseRelativePaths(const SdfPathVector &)";
      char v54 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v50, (pxrInternal__aapl__pxrReserved__ *)"argument to GetConciseRelativePaths contains a relative path.", v8);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      sub_216980EEC(a4, *a1, a1[1], ((char *)a1[1] - (char *)*a1) >> 3);
      goto LABEL_63;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfPath **)sub_216AFBD24(&i, v7, v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(*v9, &v50);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, v64);
    uint64_t v10 = v62;
    if ((unint64_t)v62 >= v63)
    {
      int v11 = (_DWORD *)sub_216981B30(&v61, &v50);
    }
    else
    {
      sub_216981010(v62, &v50);
      sub_21698105C(v10 + 1, (_DWORD *)&v50 + 1);
      int v11 = v10 + 2;
    }
    int v62 = v11;
    unsigned int v12 = v59;
    if ((unint64_t)v59 >= v60)
    {
      uint64_t v13 = (_DWORD *)sub_216981B30((uint64_t *)&v58, v64);
    }
    else
    {
      sub_216981010(v59, v64);
      sub_21698105C(v12 + 1, (_DWORD *)v64 + 1);
      uint64_t v13 = v12 + 2;
    }
    uint64_t v59 = v13;
    uint64_t v14 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v13);
    if (v64[0] == *v14)
    {
      char v15 = v56;
      if ((unint64_t)v56 >= v57)
      {
        uint64_t v16 = (_DWORD *)sub_216981B30((uint64_t *)&v55, &v50);
      }
      else
      {
        sub_216981010(v56, &v50);
        sub_21698105C(v15 + 1, (_DWORD *)&v50 + 1);
        uint64_t v16 = v15 + 2;
      }
      uint64_t v56 = v16;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, v64, &v48);
      uint64_t v17 = v56;
      if ((unint64_t)v56 >= v57)
      {
        std::string::size_type v18 = (_DWORD *)sub_216AE5CE4((uint64_t *)&v55, &v48);
      }
      else
      {
        sub_21697D878(v56, &v48);
        sub_21697D8B4(v17 + 1, &v49);
        std::string::size_type v18 = v17 + 2;
      }
      uint64_t v56 = v18;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
      sub_21697C414(&v48);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v64 + 1);
    sub_21697C414(v64);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v50 + 1);
    sub_21697C414(&v50);
  }
  do
  {
    long long v50 = 0;
    uint64_t v51 = 0;
    unint64_t v52 = 0;
    long long i = 0uLL;
    unint64_t v47 = 0;
    uint64_t v19 = v55;
    if (v56 == v55)
    {
      unint64_t v37 = 0;
      long long v36 = 0;
      char v21 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      char v21 = 0;
      unint64_t v22 = ((char *)v56 - (char *)v55) >> 3;
      do
      {
        uint64_t v23 = 0;
        if (v22 <= 1) {
          unint64_t v22 = 1;
        }
        while (v20 == v23
             || *(void *)&v19[2 * v20] != *(void *)&v19[2 * v23]
             || *(void *)(v61 + 8 * v20) == *(void *)(v61 + 8 * v23))
        {
          if (v22 == ++v23)
          {
            unint64_t v24 = &v58[2 * v20];
            std::string v25 = v51;
            if ((unint64_t)v51 >= v52)
            {
              char v26 = (char *)sub_216981B30((uint64_t *)&v50, &v58[2 * v20]);
            }
            else
            {
              sub_216981010(v51, &v58[2 * v20]);
              sub_21698105C((_DWORD *)v25 + 1, v24 + 1);
              char v26 = v25 + 8;
            }
            uint64_t v51 = v26;
            unint64_t v27 = &v55[2 * v20];
            uint64_t v28 = *((void *)&i + 1);
            if (*((void *)&i + 1) >= v47)
            {
              uint64_t v29 = sub_216981B30((uint64_t *)&i, &v55[2 * v20]);
            }
            else
            {
              sub_216981010(*((_DWORD **)&i + 1), &v55[2 * v20]);
              sub_21698105C((_DWORD *)(v28 + 4), v27 + 1);
              uint64_t v29 = v28 + 8;
            }
            *((void *)&i + 1) = v29;
            goto LABEL_45;
          }
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58[2 * v20], v64);
        uint64_t v30 = v51;
        if ((unint64_t)v51 >= v52)
        {
          int v31 = (char *)sub_216981B30((uint64_t *)&v50, v64);
        }
        else
        {
          sub_216981010(v51, v64);
          sub_21698105C((_DWORD *)v30 + 1, (_DWORD *)v64 + 1);
          int v31 = v30 + 8;
        }
        uint64_t v51 = v31;
        uint64_t v32 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v31);
        uint64_t v33 = v61 + 8 * v20;
        if (v64[0] == *v32)
        {
          sub_216981010(&v48, (_DWORD *)(v61 + 8 * v20));
          sub_21698105C(&v49, (_DWORD *)(v33 + 4));
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v61 + 8 * v20), v64, &v48);
        }
        uint64_t v34 = *((void *)&i + 1);
        if (*((void *)&i + 1) >= v47)
        {
          uint64_t v35 = sub_216AE5CE4((uint64_t *)&i, &v48);
        }
        else
        {
          sub_21697D878(*((_DWORD **)&i + 1), &v48);
          sub_21697D8B4((_DWORD *)(v34 + 4), &v49);
          uint64_t v35 = v34 + 8;
        }
        *((void *)&i + 1) = v35;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
        sub_21697C414(&v48);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v64 + 1);
        sub_21697C414(v64);
        char v21 = 1;
LABEL_45:
        ++v20;
        uint64_t v19 = v55;
        unint64_t v22 = ((char *)v56 - (char *)v55) >> 3;
      }
      while (v20 < v22);
      long long v36 = v50;
      unint64_t v37 = v51;
    }
    sub_216A98D9C((uint64_t)&v58, v36, v37, (v37 - (char *)v36) >> 3);
    sub_216A98D9C((uint64_t)&v55, (_DWORD *)i, *((_DWORD **)&i + 1), (uint64_t)(*((void *)&i + 1) - i) >> 3);
    v64[0] = (char *)&i;
    sub_216981168((void ***)v64);
    *(void *)&long long i = &v50;
    sub_216981168((void ***)&i);
  }
  while ((v21 & 1) != 0);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  unint64_t v39 = v58;
  if (v59 != v58)
  {
    uint64_t v40 = 0;
    unint64_t v41 = 0;
    do
    {
      if (*(void *)&v39[2 * v41] == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v38))
      {
        unint64_t v42 = &(*a1)[v40];
        unint64_t v43 = a4[1];
        if (v43 >= a4[2])
        {
          unint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216981B30(a4, &(*a1)[v40]);
        }
        else
        {
          sub_216981010((_DWORD *)a4[1], &(*a1)[v40]);
          sub_21698105C((_DWORD *)(v43 + 4), v42 + 1);
          unint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v43 + 8);
        }
        a4[1] = (uint64_t)v38;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&(*a1)[v40], (char **)&v58[v40], (int *)&v50);
        unint64_t v44 = a4[1];
        if (v44 >= a4[2])
        {
          uint64_t v45 = sub_216AE5CE4(a4, &v50);
        }
        else
        {
          sub_21697D878((_DWORD *)a4[1], &v50);
          sub_21697D8B4((_DWORD *)(v44 + 4), (_DWORD *)&v50 + 1);
          uint64_t v45 = v44 + 8;
        }
        a4[1] = v45;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v50 + 1);
        unint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_21697C414(&v50);
      }
      ++v41;
      unint64_t v39 = v58;
      v40 += 2;
    }
    while (v41 < ((char *)v59 - (char *)v58) >> 3);
  }
LABEL_63:
  long long v50 = (void **)&v55;
  sub_216981168(&v50);
  long long v50 = (void **)&v58;
  sub_216981168(&v50);
  long long v50 = (void **)&v61;
  sub_216981168(&v50);
}

void sub_216AFBC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  a13 = (void **)&a18;
  sub_216981168(&a13);
  a13 = (void **)&a21;
  sub_216981168(&a13);
  a13 = (void **)&a24;
  sub_216981168(&a13);
  _Unwind_Resume(a1);
}

void *sub_216AFBD24(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    _OWORD v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfPath>>::operator->() [T = const std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

int *pxrInternal__aapl__pxrReserved__::SdfPath::RemoveDescendentPaths(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  unsigned int v3 = *(int **)(a1 + 8);
  unint64_t v4 = 126 - 2 * __clz(((uint64_t)v3 - v2) >> 3);
  if (v3 == (int *)v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  sub_2169D38EC(v2, v3, (uint64_t)&v14, v5, 1);
  uint64_t v6 = *(int **)a1;
  uint64_t v7 = *(int **)(a1 + 8);
  if (*(int **)a1 != v7)
  {
    do
    {
      unsigned int v8 = v6 + 2;
      if (v6 + 2 == v7)
      {
        uint64_t v6 = v7;
        return sub_216AD6870(a1, v6, *(int **)(a1 + 8));
      }
      BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 2), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v6);
      uint64_t v6 = v8;
    }
    while (!HasPrefix);
    uint64_t v10 = v8 - 2;
    if (v8 + 2 != v7)
    {
      int v11 = v8 + 3;
      do
      {
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 - 1), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v10))
        {
          sub_21697DE94(v10 + 2, v11 - 1);
          sub_21697DEEC(v10 + 3, v11);
          v10 += 2;
        }
        unsigned int v12 = v11 + 1;
        v11 += 2;
      }
      while (v12 != v7);
    }
    uint64_t v6 = v10 + 2;
  }
  return sub_216AD6870(a1, v6, *(int **)(a1 + 8));
}

int *pxrInternal__aapl__pxrReserved__::SdfPath::RemoveAncestorPaths(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unsigned int v3 = (int *)a1[1];
  unint64_t v4 = 126 - 2 * __clz(((uint64_t)v3 - v2) >> 3);
  if (v3 == (int *)v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  sub_2169D38EC(v2, v3, (uint64_t)&v14, v5, 1);
  uint64_t v7 = (int *)*a1;
  uint64_t v6 = a1[1];
  if (v6 != *a1)
  {
    uint64_t v8 = v6 + 8;
    while ((int *)(v8 - 16) != v7)
    {
      BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v8 - 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v8 - 24));
      v8 -= 8;
      if (HasPrefix)
      {
        uint64_t v10 = v8 - 16;
        if ((int *)(v8 - 16) != v7)
        {
          do
          {
            int v11 = (int *)(v10 - 8);
            if (!pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v8 - 8), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 - 8)))
            {
              sub_21697DE94((int *)(v8 - 16), (int *)(v10 - 8));
              sub_21697DEEC((int *)(v8 - 12), (int *)(v10 - 4));
              v8 -= 8;
            }
            v10 -= 8;
          }
          while (v11 != v7);
        }
        unsigned int v12 = (int *)(v8 - 8);
        return sub_216AD6870((uint64_t)a1, v7, v12);
      }
    }
  }
  unsigned int v12 = v7;
  return sub_216AD6870((uint64_t)a1, v7, v12);
}

void *pxrInternal__aapl__pxrReserved__::SdfPathFindLongestPrefix(void *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return sub_216AFBFC0(a1, a2, 0, (uint64_t)&v3);
}