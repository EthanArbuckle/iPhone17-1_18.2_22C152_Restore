void sub_216B75294()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_TEXTFILE_SIZE_WARNING_MB)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>();
  }
}

uint64_t sub_216B752DC()
{
  v0 = sub_216B76B78();

  return sub_216B76CA4(v0);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::SdfTextFileFormat(pxrInternal__aapl__pxrReserved__::SdfTextFileFormat *this)
{
  v2 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
  if (!v2) {
    v2 = (uint64_t *)sub_216ABB7C8(&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
  }
  v3 = (pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
  if (!v3) {
    v3 = sub_216ABB7C8(&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
  }
  v4 = (pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
  if (!v4) {
    v4 = sub_216ABB7C8(&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
  }
  v5 = (pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
  if (!v5) {
    v5 = sub_216ABB7C8(&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
  }
  if ((*(void *)v5 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v5 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat((uint64_t)this, v2, (uint64_t *)v3 + 1, (uint64_t *)v4 + 2, (uint64_t)EmptyString);
  *(void *)this = &unk_26C75ADA8;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::SdfTextFileFormat(pxrInternal__aapl__pxrReserved__::SdfTextFileFormat *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  v5 = (uint64_t *)a3;
  v7 = this;
  if (!*(void *)a3)
  {
    this = (pxrInternal__aapl__pxrReserved__::SdfTextFileFormat *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
    if (!this) {
      this = sub_216ABB7C8(&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
    }
    v5 = (uint64_t *)((char *)this + 8);
  }
  if (!*(void *)a4)
  {
    this = (pxrInternal__aapl__pxrReserved__::SdfTextFileFormat *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
    if (!this) {
      this = sub_216ABB7C8(&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
    }
    a4 = (pxrInternal__aapl__pxrReserved__::SdfTextFileFormat *)((char *)this + 16);
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat((uint64_t)v7, (uint64_t *)a2, v5, (uint64_t *)a4, (uint64_t)EmptyString);
  *(void *)v7 = &unk_26C75ADA8;
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::~SdfTextFileFormat(pxrInternal__aapl__pxrReserved__::SdfTextFileFormat *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::~SdfFileFormat(this);

  operator delete(v1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::CanRead(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2)
{
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    uint64_t v9 = *(void *)(a2 + 16);
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset((uint64_t)Resolver);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (v10)
  {
    FileCookie = (const char *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileCookie(a1);
    BOOL v6 = sub_216B755F0(&v10, FileCookie);
  }
  else
  {
    BOOL v6 = 0;
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  return v6;
}

void sub_216B755C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216B755F0(void *a1, const char *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18);
  unint64_t v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) != 0) {
    unint64_t v4 = *((void *)a2 + 1);
  }
  if (v4 >= 0x200) {
    uint64_t v5 = 512;
  }
  else {
    uint64_t v5 = v4;
  }
  if ((*(uint64_t (**)(void, char *, uint64_t, void))(*(void *)*a1 + 32))(*a1, __s, v5, 0) != v5) {
    goto LABEL_11;
  }
  __s[v5] = 0;
  BOOL v6 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  v7 = sub_216862604(&v18, 0);
  LOBYTE(__p[0]) = 0;
  v8 = (void *)sub_2168520EC(v6 + 19, __p);
  if (v8 != v7)
  {
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v6, v7, v8);
LABEL_11:
    BOOL v9 = 0;
    goto LABEL_12;
  }
  sub_216779094(__p, __s);
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  int v11 = (char)v17;
  if ((v17 & 0x80u) == 0) {
    unint64_t v12 = v17;
  }
  else {
    unint64_t v12 = (unint64_t)__p[1];
  }
  size_t v13 = strlen(a2);
  if (v12 < v13)
  {
    BOOL v9 = 0;
    if (((char)v17 & 0x80000000) == 0) {
      goto LABEL_12;
    }
LABEL_25:
    operator delete(__p[0]);
    goto LABEL_12;
  }
  size_t v14 = v13;
  if ((v17 & 0x80u) == 0) {
    v15 = __p;
  }
  else {
    v15 = (void **)__p[0];
  }
  BOOL v9 = strncmp((const char *)v15, a2, v14) == 0;
  if (v11 < 0) {
    goto LABEL_25;
  }
LABEL_12:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18);
  return v9;
}

void sub_216B757A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::_CanReadFromAsset(pxrInternal__aapl__pxrReserved__::SdfFileFormat *a1, uint64_t a2, void *a3)
{
  FileCookie = (const char *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileCookie(a1);

  return sub_216B755F0(a3, FileCookie);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::Read(pxrInternal__aapl__pxrReserved__ *a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, uint64_t a3, char a4)
{
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    uint64_t v12 = *(void *)(a3 + 16);
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset((uint64_t)Resolver);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  if (v13) {
    BOOL v9 = pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::_ReadFromAsset(a1, a2, (const std::string *)a3, &v13, a4);
  }
  else {
    BOOL v9 = 0;
  }
  if (v14) {
    sub_216784EC4(v14);
  }
  return v9;
}

void sub_216B758D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_216784EC4(a17);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::_ReadFromAsset(pxrInternal__aapl__pxrReserved__::SdfFileFormat *a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, const std::string *a3, void *a4, char a5)
{
  FileCookie = (const char *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileCookie(a1);
  if (sub_216B755F0(a4, FileCookie))
  {
    int v11 = (unsigned int *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_TEXTFILE_SIZE_WARNING_MB);
    if (!v11) {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>();
    }
    uint64_t v12 = *v11;
    if ((int)v12 >= 1 && (*(uint64_t (**)(void))(*(void *)*a4 + 16))() > (unint64_t)(v12 << 20))
    {
      lpsrc = "sdf/textFileFormat.cpp";
      v30 = "_ReadFromAsset";
      uint64_t v31 = 194;
      v32 = "BOOL pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::_ReadFromAsset(SdfLayer *, const string &, const s"
            "td::shared_ptr<ArAsset> &, BOOL) const";
      char v33 = 0;
      unint64_t v13 = (*(uint64_t (**)(void))(*(void *)*a4 + 16))();
      if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v15 = (uint64_t *)a3;
      }
      else {
        v15 = (uint64_t *)a3->__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&lpsrc, (pxrInternal__aapl__pxrReserved__ *)"Performance warning: reading %lu MB text-based layer <%s>.", v14, v13 >> 20, v15);
    }
    char v28 = 1;
    uint64_t FileFormatArguments = pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormatArguments(a2);
    (*(void (**)(void **__return_ptr, pxrInternal__aapl__pxrReserved__::SdfFileFormat *, uint64_t))(*(void *)a1 + 40))(&lpsrc, a1, FileFormatArguments);
    FormatId = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(a1);
    if ((*(void *)FormatId & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (const std::string *)((*(void *)FormatId & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(FormatId);
    }
    VersionString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetVersionString(a1);
    if ((*(void *)VersionString & 0xFFFFFFFFFFFFFFF8) != 0) {
      v24 = (const std::string *)((*(void *)VersionString & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      v24 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(VersionString);
    }
    v25 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)lpsrc;
    if (lpsrc) {
    v27 = v25;
    }
    sub_2168BD80C((uint64_t *)&v27);
    BOOL v22 = Sdf_ParseLayer(a3, a4, EmptyString, v24, a5, (uint64_t *)&v27, &v28);
    sub_2169CC880(&v27);
    if (v22) {
      pxrInternal__aapl__pxrReserved__::SdfFileFormat::_SetLayerData(a2, (uint64_t *)&lpsrc, v28);
    }
    sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&lpsrc);
  }
  else
  {
    lpsrc = "sdf/textFileFormat.cpp";
    v30 = "_ReadFromAsset";
    uint64_t v31 = 184;
    v32 = "BOOL pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::_ReadFromAsset(SdfLayer *, const string &, const std"
          "::shared_ptr<ArAsset> &, BOOL) const";
    char v33 = 0;
    if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v19 = (const char *)a3;
    }
    else {
      v19 = (const char *)a3->__r_.__value_.__r.__words[0];
    }
    unint64_t v20 = *(void *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(a1) & 0xFFFFFFFFFFFFFFF8;
    if (v20)
    {
      v21 = (const char *)(v20 + 16);
      if (*(char *)(v20 + 39) < 0) {
        v21 = *(const char **)v21;
      }
    }
    else
    {
      v21 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&lpsrc, 3, (pxrInternal__aapl__pxrReserved__ *)"<%s> is not a valid %s layer", v19, v21);
    return 0;
  }
  return v22;
}

void sub_216B75BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *);
  uint64_t v7 = va_arg(va1, void);
  sub_2169CC880((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::WriteToFile(pxrInternal__aapl__pxrReserved__ *a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, uint64_t a3, uint64_t a4)
{
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    uint64_t v19 = *(void *)(a3 + 16);
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAssetForWrite((uint64_t)Resolver);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  if (!v22)
  {
    __p[0] = "sdf/textFileFormat.cpp";
    __p[1] = "WriteToFile";
    uint64_t v19 = 352;
    unint64_t v20 = "virtual BOOL pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::WriteToFile(const SdfLayer &, const std::str"
          "ing &, const std::string &, const FileFormatArguments &) const";
    char v21 = 0;
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v12 = (const char *)a3;
    }
    else {
      uint64_t v12 = *(const char **)a3;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Unable to open %s for write", v12);
    uint64_t v13 = 0;
    goto LABEL_23;
  }
  sub_2169895DC((uint64_t)__p, (uint64_t)&v22);
  uint64_t FileCookie = pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileCookie(a1);
  VersionString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetVersionString(a1);
  if ((*(void *)VersionString & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)VersionString & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(VersionString);
  }
  if (!sub_216B75E24(a2, (pxrInternal__aapl__pxrReserved__::TfToken *)__p, FileCookie, (uint64_t)EmptyString, a4))goto LABEL_21; {
  if ((sub_21699309C(__p) & 1) == 0)
  }
  {
    v16[0] = "sdf/textFileFormat.cpp";
    v16[1] = "WriteToFile";
    v16[2] = 362;
    v16[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::WriteToFile(const SdfLayer &, const std::"
             "string &, const std::string &, const FileFormatArguments &) const";
    char v17 = 0;
    if (*(char *)(a3 + 23) >= 0) {
      size_t v14 = (const char *)a3;
    }
    else {
      size_t v14 = *(const char **)a3;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Could not close %s", v14);
LABEL_21:
    uint64_t v13 = 0;
    goto LABEL_22;
  }
  uint64_t v13 = 1;
LABEL_22:
  sub_216993048(__p);
LABEL_23:
  if (v23) {
    sub_216784EC4(v23);
  }
  return v13;
}

void sub_216B75DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_216993048(&__p);
  uint64_t v22 = *(std::__shared_weak_count **)(v20 - 56);
  if (v22) {
    sub_216784EC4(v22);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216B75E24(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(char *)(a3 + 23) >= 0) {
    v8 = (const char *)a3;
  }
  else {
    v8 = *(const char **)a3;
  }
  if (*(char *)(a4 + 23) >= 0) {
    BOOL v9 = (const char *)a4;
  }
  else {
    BOOL v9 = *(const char **)a4;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"%s %s\n", v8, v9);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(a1, v39);
  int IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v39);
  if ((IsDormant & 1) == 0)
  {
    sub_216B7C7B8((uint64_t)v38);
    int v11 = sub_216A663FC(v39);
    pxrInternal__aapl__pxrReserved__::SdfSpec::ListFields(v11, v37);
    unint64_t v12 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
    if (!v12) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
    }
    std::string::size_type v13 = v12 + 560;
    if (!*(unsigned char *)(v12 + 624)) {
      std::string::size_type v13 = 0;
    }
    __p[0].__r_.__value_.__r.__words[0] = v13;
    v30 = sub_216B775A8(v37[0], v37[1], (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **)__p);
    if (*(char *)(a5 + 23) < 0)
    {
      unint64_t v14 = *(void *)(a5 + 8);
      if (v14)
      {
        sub_216778F24(&__dst, *(void **)a5, v14);
        goto LABEL_18;
      }
    }
    else if (*(unsigned char *)(a5 + 23))
    {
      std::string __dst = *(std::string *)a5;
      goto LABEL_18;
    }
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetComment((pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)a1, (uint64_t)&__dst);
LABEL_18:
    std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(v38, 1, &__dst);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(v38, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
    }
    unint64_t v16 = 126 - 2 * __clz((v30 - v37[0]) >> 3);
    if (v30 == v37[0]) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = v16;
    }
    sub_2169E0EAC((uint64_t)v37[0], (uint64_t *)v30, (uint64_t)__p, v17, 1);
    unint64_t v18 = v37[0];
    if (v37[0] == v30)
    {
LABEL_62:
      sub_21699309C(v38);
      std::stringbuf::str();
      unint64_t v27 = v35;
      if ((v35 & 0x80u) != 0) {
        unint64_t v27 = (unint64_t)v34;
      }
      if (v27)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"(\n");
        char v28 = (const char *)&v33;
        if ((v35 & 0x80u) != 0) {
          char v28 = (const char *)v33;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"%s", v28);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)")\n");
      }
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetRootPrimOrder(a1, (uint64_t)__p);
      sub_21698F998((uint64_t)__p, v32);
      if (__p[0].__r_.__value_.__l.__size_) {
        sub_216784EC4((std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_);
      }
      if (v32[1] - v32[0] >= 9uLL)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"reorder rootPrims = ");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(a2, 0, v32);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
      }
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetRootPrims(a1);
    }
    while (1)
    {
      uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v19) {
        uint64_t v19 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)v18 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v19 + 17) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetDocumentation((pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)a1, (uint64_t)__p);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v26 = __p[0].__r_.__value_.__l.__size_;
          operator delete(__p[0].__r_.__value_.__l.__data_);
          if (v26)
          {
LABEL_58:
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(v38, 1, (pxrInternal__aapl__pxrReserved__ *)"doc = ");
            pxrInternal__aapl__pxrReserved__::SdfLayer::GetDocumentation((pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)a1, (uint64_t)__p);
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(v38, 0, __p);
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(v38, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
          }
        }
        else if (*((unsigned char *)&__p[0].__r_.__value_.__s + 23))
        {
          goto LABEL_58;
        }
      }
      else
      {
        uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v20) {
          uint64_t v20 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if ((*(void *)v18 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v20 + 45) & 0xFFFFFFFFFFFFFFF8))
        {
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(v38, 1, (pxrInternal__aapl__pxrReserved__ *)"subLayers = [\n");
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(a1, (uint64_t)__p);
          unint64_t v22 = sub_21697B6DC((uint64_t)__p);
          if (__p[0].__r_.__value_.__l.__size_) {
            sub_216784EC4((std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_);
          }
          if (v22)
          {
            for (unint64_t i = 0; i != v22; ++i)
            {
              pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(a1, (uint64_t)&v33);
              if (sub_216ABBF20((uint64_t)&v33)) {
                v24 = (uint64_t *)&v33;
              }
              else {
                v24 = 0;
              }
              sub_21697E720(v24, i, __p);
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteAssetPath(v38, 2, __p);
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p[0].__r_.__value_.__l.__data_);
              }
              if (v34) {
                sub_216784EC4(v34);
              }
              __p[0].__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerOffset(a1, i);
              __p[0].__r_.__value_.__l.__size_ = v25;
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteLayerOffset(v38, 0, 0, (double *)__p);
              if (i >= v22 - 1) {
                pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(v38, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
              }
              else {
                pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(v38, 0, (pxrInternal__aapl__pxrReserved__ *)",\n");
              }
            }
          }
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(v38, 1, (pxrInternal__aapl__pxrReserved__ *)"]\n");
        }
        else
        {
          char v21 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v21) {
            char v21 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          if ((*(void *)v18 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v21 + 23) & 0xFFFFFFFFFFFFFFF8))
          {
            if (pxrInternal__aapl__pxrReserved__::SdfLayer::GetHasOwnedSubLayers((pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)a1)) {
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(v38, 1, (pxrInternal__aapl__pxrReserved__ *)"hasOwnedSubLayers = true\n");
            }
          }
          else
          {
            sub_216B76E98(v38, 1, v39, v18);
          }
        }
      }
      unint64_t v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v18 + 8);
      if (v18 == v30) {
        goto LABEL_62;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v39);
  return IsDormant ^ 1u;
}

void sub_216B7654C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,uint64_t a45,char a46)
{
  a37 = &a43;
  sub_216889A04((void ***)&a37);
  sub_216B76A14((uint64_t)&a46);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v46 - 104));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::ReadFromString(pxrInternal__aapl__pxrReserved__::SdfFileFormat *a1, pxrInternal__aapl__pxrReserved__::SdfLayer *this, uint64_t a3)
{
  char v16 = 1;
  uint64_t FileFormatArguments = pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormatArguments(this);
  (*(void (**)(void **__return_ptr, pxrInternal__aapl__pxrReserved__::SdfFileFormat *, uint64_t))(*(void *)a1 + 40))(&lpsrc, a1, FileFormatArguments);
  FormatId = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(a1);
  if ((*(void *)FormatId & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (const std::string *)((*(void *)FormatId & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(FormatId);
  }
  VersionString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetVersionString(a1);
  if ((*(void *)VersionString & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v10 = (const std::string *)((*(void *)VersionString & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v10 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(VersionString);
  }
  int v11 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)lpsrc;
  if (lpsrc) {
  unint64_t v14 = v11;
  }
  sub_2168BD80C((uint64_t *)&v14);
  BOOL v12 = Sdf_ParseLayerFromString(a3, EmptyString, v10, (uint64_t *)&v14, &v16);
  sub_2169CC880(&v14);
  if (v12) {
    pxrInternal__aapl__pxrReserved__::SdfFileFormat::_SetLayerData(this, (uint64_t *)&lpsrc, v16);
  }
  sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&lpsrc);
  return v12;
}

void sub_216B767E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *);
  sub_2169CC880((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::WriteToString(pxrInternal__aapl__pxrReserved__::SdfFileFormat *a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, uint64_t a3, uint64_t a4)
{
  sub_216B7C7B8((uint64_t)v16);
  uint64_t FileCookie = pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileCookie(a1);
  VersionString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetVersionString(a1);
  if ((*(void *)VersionString & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)VersionString & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(VersionString);
  }
  uint64_t v11 = sub_216B75E24(a2, (pxrInternal__aapl__pxrReserved__::TfToken *)v16, FileCookie, (uint64_t)EmptyString, a4);
  if (v11)
  {
    sub_21699309C(v16);
    std::stringbuf::str();
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(_OWORD *)a3 = v14;
    *(void *)(a3 + 16) = v15;
  }
  v17[0] = *MEMORY[0x263F8C2B8];
  uint64_t v12 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v17[2] = v12;
  v17[3] = MEMORY[0x263F8C318] + 16;
  if (v18 < 0) {
    operator delete((void *)v17[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x21D447E60](&v19);
  sub_216993048(v16);
  return v11;
}

void sub_216B769FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216B76A14((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216B76A14(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)(a1 + 48) = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + 48 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x21D447E60](a1 + 176);

  return sub_216993048((void *)a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::WriteToStream(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_WriteToStream(a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::_ShouldSkipAnonymousReload(pxrInternal__aapl__pxrReserved__::SdfTextFileFormat *this)
{
  return 0;
}

uint64_t *sub_216B76B78()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216B76D4C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216B76C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_216B76CA4(uint64_t *a1)
{
  uint64_t v2 = operator new(8uLL);
  void *v2 = &unk_26C75AE60;
  uint64_t v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  uint64_t result = (uint64_t)v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_216B76D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324398(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B76D4C(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216B76DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B76DE4(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatFactoryBase *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatFactoryBase::~Sdf_FileFormatFactoryBase(a1);

  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216B76E0C@<X0>(pxrInternal__aapl__pxrReserved__::SdfTextFileFormat **a1@<X8>)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfTextFileFormat *)operator new(0x70uLL);
  pxrInternal__aapl__pxrReserved__::SdfTextFileFormat::SdfTextFileFormat(v2);
  *a1 = v2;
  char v4 = 0;
  return sub_216B76E68(&v4);
}

void sub_216B76E54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216B76E68(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

uint64_t sub_216B76E98(void *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, a4, (pxrInternal__aapl__pxrReserved__::VtValue *)&v21);
  if (sub_21698F4F4((pxrInternal__aapl__pxrReserved__::VtValue *)&v21))
  {
    if ((v22 & 4) != 0) {
      (*(void (**)(const std::string **))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(&v21);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<int>();
  }
  if (sub_21698F580((pxrInternal__aapl__pxrReserved__::VtValue *)&v21))
  {
    if ((v22 & 4) != 0) {
      (*(void (**)(const std::string **))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(&v21);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<long long>();
  }
  if (sub_21698F60C((pxrInternal__aapl__pxrReserved__::VtValue *)&v21))
  {
    if ((v22 & 4) != 0) {
      (*(void (**)(const std::string **))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(&v21);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<unsigned int>();
  }
  if (sub_21698F698((pxrInternal__aapl__pxrReserved__::VtValue *)&v21))
  {
    if ((v22 & 4) != 0) {
      (*(void (**)(const std::string **))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(&v21);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<unsigned long long>();
  }
  if (sub_21698F724((pxrInternal__aapl__pxrReserved__::VtValue *)&v21))
  {
    if ((v22 & 4) != 0) {
      (*(void (**)(const std::string **))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(&v21);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<std::string>();
  }
  if (sub_21698F7B0((pxrInternal__aapl__pxrReserved__::VtValue *)&v21))
  {
    if ((v22 & 4) != 0) {
      (*(void (**)(const std::string **))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(&v21);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::TfToken>();
  }
  if (sub_21698F348((pxrInternal__aapl__pxrReserved__::VtValue *)&v21))
  {
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_21698F3D4((pxrInternal__aapl__pxrReserved__::VtValue *)&v21);
    if (sub_21698F468(v8))
    {
      uint64_t v9 = *((void *)v8 + 1);
      if ((v9 & 4) != 0) {
        (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v8);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>();
    }
    unint64_t v12 = *(void *)a4 & 0xFFFFFFFFFFFFFFF8;
    if (v12)
    {
      std::string::size_type v13 = (const char *)(v12 + 16);
      if (*(char *)(v12 + 39) < 0) {
        std::string::size_type v13 = *(const char **)v13;
      }
    }
    else
    {
      std::string::size_type v13 = "";
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s = ", v13);
    if (sub_2168EC434(v8))
    {
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_2168EF25C(v8);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDictionary(a1, a2, 1, v17, 0);
    }
    else if (sub_21695C360(v8))
    {
      uint64_t v18 = sub_21695A928(v8);
      if (*(char *)(v18 + 23) >= 0) {
        uint64_t v19 = (const char *)v18;
      }
      else {
        uint64_t v19 = *(const char **)v18;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"%s\n", v19);
    }
  }
  else
  {
    unint64_t v10 = *(void *)a4 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      uint64_t v11 = (const char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0) {
        uint64_t v11 = *(const char **)v11;
      }
    }
    else
    {
      uint64_t v11 = "";
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s = ", v11);
    if (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)&v21))
    {
      long long v14 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_2168EF25C((pxrInternal__aapl__pxrReserved__::VtValue *)&v21);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDictionary(a1, a2, 1, v14, 0);
    }
    else
    {
      if (sub_216959490((pxrInternal__aapl__pxrReserved__::VtValue *)&v21))
      {
        uint64_t v15 = (unsigned __int8 *)sub_216958184((pxrInternal__aapl__pxrReserved__::VtValue *)&v21);
        pxrInternal__aapl__pxrReserved__::TfStringify((pxrInternal__aapl__pxrReserved__ *)*v15, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::StringFromVtValue(&v21, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"%s\n", (const char *)p_p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  return sub_2168EE084((uint64_t)&v21);
}

void sub_216B772BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_2168EE084((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_216B77304(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  unsigned int Specifier = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecifier(a1);
  if (Specifier != 1) {
    goto LABEL_5;
  }
  int v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7) {
    int v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 448)))
  {
LABEL_5:
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetTypeName(a1, (atomic_uint **)&__p);
    std::string::size_type v8 = __p.__r_.__value_.__r.__words[0];
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfTokens);
    if (!v9) {
      uint64_t v9 = sub_21698B188(&pxrInternal__aapl__pxrReserved__::SdfTokens);
    }
    unint64_t v10 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if ((v8 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v9 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_11:
      uint64_t v11 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(Specifier);
      unint64_t v12 = " ";
      std::string::size_type v13 = "";
      if (v8)
      {
        unint64_t v14 = v8 & 0xFFFFFFFFFFFFFFF8;
        if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          std::string::size_type v13 = (const char *)(v14 + 16);
          if (*(char *)(v14 + 39) < 0) {
            std::string::size_type v13 = *(const char **)v13;
          }
        }
      }
      else
      {
        unint64_t v12 = "";
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s ", v11, v12, v13);
      Name = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPrimSpec *)a1);
      if (*((char *)Name + 23) >= 0) {
        uint64_t v16 = (char *)Name;
      }
      else {
        uint64_t v16 = (char *)*Name;
      }
      sub_216779094(&__p, v16);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, 0, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      sub_216B776B4(a1, a2, a3);
      sub_216779094(&__p, "\n");
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_216779094(&__p, "{\n");
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, a3, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_216B78BCC((atomic_uint **)a1, a2, a3);
    }
    if ((v8 & 7) != 0)
    {
      std::string::size_type v8 = 0;
      atomic_fetch_add_explicit(v10, 0xFFFFFFFE, memory_order_release);
      goto LABEL_11;
    }
  }
  std::string::size_type v8 = 0;
  goto LABEL_11;
}

void sub_216B77540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

const pxrInternal__aapl__pxrReserved__::TfToken *sub_216B775A8(const pxrInternal__aapl__pxrReserved__::TfToken *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = a1;
    uint64_t v3 = a2;
    while (2)
    {
      while (sub_216B7764C(a3, v5))
      {
        char v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8);
        if (v5 == v3) {
          return v3;
        }
      }
      do
      {
        uint64_t v3 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v3 - 8);
        if (v3 == v5) {
          return v5;
        }
      }
      while (!sub_216B7764C(a3, v3));
      uint64_t v6 = *(void *)v5;
      *(void *)char v5 = *(void *)v3;
      char v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8);
      *(void *)uint64_t v3 = v6;
      if (v3 != v5) {
        continue;
      }
      break;
    }
  }
  return v3;
}

BOOL sub_216B7764C(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if (sub_21698BCEC(a1, a2)) {
    return 1;
  }
  char v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    char v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  return (*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v4 + 45) & 0xFFFFFFFFFFFFFFF8);
}

void sub_216B776B4(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, void *a2, uint64_t a3)
{
  v82[2] = *(void **)MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfSpec::ListFields(a1, v78);
  unint64_t v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  unint64_t v7 = v6 + 488;
  if (!*(unsigned char *)(v6 + 552)) {
    unint64_t v7 = 0;
  }
  *(void *)&long long v79 = v7;
  std::string::size_type v8 = sub_21698BA74(v78[0], v78[1], (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **)&v79);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetComment(a1, (uint64_t)&v77);
  std::string::size_type size = HIBYTE(v77.__r_.__value_.__r.__words[2]);
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v77.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    int v10 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::OpenParensIfNeeded(a2, 0, 1);
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, a3 + 1, &v77);
    sub_216779094(__p, "\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)__p);
    if (SBYTE7(v71[0]) < 0) {
      operator delete(__p[0]);
    }
    BOOL v11 = 1;
    unint64_t v12 = v78[0];
  }
  else
  {
    int v10 = 0;
    unint64_t v12 = v78[0];
    BOOL v11 = v78[0] != v8;
  }
  unint64_t v13 = 126 - 2 * __clz((v8 - v12) >> 3);
  if (v8 == v12) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v13;
  }
  sub_21698BD44(v12, (char *)v8, (uint64_t)&v79, v14, 1);
  uint64_t v15 = v78[0];
  if (v78[0] != v8)
  {
    uint64_t v16 = a3 + 1;
    if (v11) {
      uint64_t v17 = a3 + 1;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = "";
    if (v11) {
      uint64_t v18 = "\n";
    }
    v64 = v18;
    uint64_t v65 = v17;
    while (1)
    {
      int v10 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::OpenParensIfNeeded(a2, v10 & 1, v11);
      uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v19) {
        uint64_t v19 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v19 + 17) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216779094(__p, "doc = ");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v16, (uint64_t)__p);
        if (SBYTE7(v71[0]) < 0) {
          operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetDocumentation(a1, (uint64_t)__p);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, 0, (const std::string *)__p);
        if (SBYTE7(v71[0]) < 0) {
          operator delete(__p[0]);
        }
        sub_216779094(__p, "\n");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)__p);
        if (SBYTE7(v71[0]) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_135;
      }
      uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v20) {
        uint64_t v20 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v20 + 31) & 0xFFFFFFFFFFFFFFF8))
      {
        int Permission = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPermission(a1);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(Permission);
        if (v11) {
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v16, (pxrInternal__aapl__pxrReserved__ *)"permission = %s\n");
        }
        else {
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"permission = %s");
        }
        goto LABEL_135;
      }
      char v21 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v21) {
        char v21 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v21 + 52) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSymmetryFunction(a1, (atomic_uint **)__p);
        unint64_t v32 = (unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8;
        if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          char v33 = (const char *)(v32 + 16);
          if (*(char *)(v32 + 39) < 0) {
            char v33 = *(const char **)v33;
          }
        }
        else
        {
          char v33 = "";
        }
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v65, (pxrInternal__aapl__pxrReserved__ *)"symmetryFunction = %s%s", v33, v64);
        if (((uint64_t)__p[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        goto LABEL_135;
      }
      uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v22) {
        uint64_t v22 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v22 + 30) & 0xFFFFFFFFFFFFFFF8)) {
        break;
      }
      uint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v23) {
        uint64_t v23 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v23 + 35) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, v15, (pxrInternal__aapl__pxrReserved__::VtValue *)&v81);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, "references");
        if (sub_21698E9D8((pxrInternal__aapl__pxrReserved__::VtValue *)&v81))
        {
          if (((uint64_t)v82[0] & 4) != 0) {
            (*(void (**)(unsigned int **))(((unint64_t)v82[0] & 0xFFFFFFFFFFFFFFF8) + 168))(&v81);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::SdfReference>();
        }
        if (((uint64_t)__p[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        __p[0] = "sdf/fileIO_Common.h";
        __p[1] = "Sdf_WritePrimMetadata";
        *(void *)&v71[0] = 397;
        *((void *)&v71[0] + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_WritePrimMetadata(const SdfPrimSpec &, Sdf"
                                   "_TextOutput &, size_t)";
        LOBYTE(v71[1]) = 0;
        unint64_t v42 = *(void *)v15 & 0xFFFFFFFFFFFFFFF8;
        if (v42)
        {
          v38 = (const char *)(v42 + 16);
          if (*(char *)(v42 + 39) < 0) {
            v38 = *(const char **)v38;
          }
        }
        else
        {
          v38 = "";
        }
        pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v81, v40, v41, (uint64_t)&v79);
        v47 = (const char *)&v79;
        if (v80 < 0) {
          v47 = (const char *)v79;
        }
        goto LABEL_132;
      }
      v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v24) {
        v24 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v24 + 59) & 0xFFFFFFFFFFFFFFF8)) {
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSetNameList((atomic_uint **)a1);
      }
      std::string::size_type v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v25) {
        std::string::size_type v25 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v25 + 24) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, v15, (pxrInternal__aapl__pxrReserved__::VtValue *)&v81);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, "inherits");
        char v43 = sub_21698B2B0((uint64_t)a2, v16, (uint64_t)__p, (pxrInternal__aapl__pxrReserved__::VtValue *)&v81);
        if (((uint64_t)__p[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v43 & 1) == 0)
        {
          __p[0] = "sdf/fileIO_Common.h";
          __p[1] = "Sdf_WritePrimMetadata";
          *(void *)&v71[0] = 448;
          *((void *)&v71[0] + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_WritePrimMetadata(const SdfPrimSpec &, S"
                                     "df_TextOutput &, size_t)";
          LOBYTE(v71[1]) = 0;
          unint64_t v46 = *(void *)v15 & 0xFFFFFFFFFFFFFFF8;
          if (v46)
          {
            v38 = (const char *)(v46 + 16);
            if (*(char *)(v46 + 39) < 0) {
              v38 = *(const char **)v38;
            }
          }
          else
          {
            v38 = "";
          }
          pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v81, v44, v45, (uint64_t)&v79);
          v47 = (const char *)&v79;
          if (v80 < 0) {
            v47 = (const char *)v79;
          }
          goto LABEL_132;
        }
        goto LABEL_134;
      }
      std::string::size_type v26 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v26) {
        std::string::size_type v26 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v26 + 38) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, v15, (pxrInternal__aapl__pxrReserved__::VtValue *)&v81);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, "specializes");
        char v48 = sub_21698B2B0((uint64_t)a2, v16, (uint64_t)__p, (pxrInternal__aapl__pxrReserved__::VtValue *)&v81);
        if (((uint64_t)__p[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v48 & 1) == 0)
        {
          __p[0] = "sdf/fileIO_Common.h";
          __p[1] = "Sdf_WritePrimMetadata";
          *(void *)&v71[0] = 457;
          *((void *)&v71[0] + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_WritePrimMetadata(const SdfPrimSpec &, S"
                                     "df_TextOutput &, size_t)";
          LOBYTE(v71[1]) = 0;
          unint64_t v51 = *(void *)v15 & 0xFFFFFFFFFFFFFFF8;
          if (v51)
          {
            v38 = (const char *)(v51 + 16);
            if (*(char *)(v51 + 39) < 0) {
              v38 = *(const char **)v38;
            }
          }
          else
          {
            v38 = "";
          }
          pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v81, v49, v50, (uint64_t)&v79);
          v47 = (const char *)&v79;
          if (v80 < 0) {
            v47 = (const char *)v79;
          }
          goto LABEL_132;
        }
        goto LABEL_134;
      }
      unint64_t v27 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v27) {
        unint64_t v27 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v27 + 36) & 0xFFFFFFFFFFFFFFF8))
      {
        v82[0] = 0;
        v82[1] = 0;
        v81 = (unsigned int *)v82;
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v76);
        v75[0] = 0;
        v75[1] = 0;
        v74 = (uint64_t *)v75;
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetRelocates(a1, &v72);
        memset(v71, 0, sizeof(v71));
        *(_OWORD *)std::string __p = 0u;
        sub_21698EBCC(&v72, &v79);
        *(_OWORD *)std::string __p = v79;
        *(void *)&v71[0] = v80;
        sub_21698ED3C(&v72, (uint64_t **)&v79);
        *(_OWORD *)((char *)v71 + 8) = v79;
        *((void *)&v71[1] + 1) = v80;
        while (!sub_21698EDEC((uint64_t)__p, (uint64_t)v71 + 8))
        {
          uint64_t v52 = sub_21698B334((uint64_t)__p);
          v53 = sub_21698EEC4(*(uint64_t **)v52, *(void *)(v52 + 8), *(char **)(v52 + 16));
          pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v53 + 8), &v76, &v68);
          uint64_t v54 = sub_21698B334((uint64_t)__p);
          v55 = sub_21698EEC4(*(uint64_t **)v54, *(void *)(v54 + 8), *(char **)(v54 + 16));
          pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)v55, &v76, &v66);
          *(void *)&long long v79 = &v66;
          v56 = sub_21698F06C(&v74, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v66, (uint64_t)&unk_2174BFD90, (_DWORD **)&v79);
          sub_21697DE94((int *)v56 + 9, &v68);
          sub_21697DEEC((int *)v56 + 10, &v69);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
          sub_21697C414(&v66);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v69);
          sub_21697C414(&v68);
          sub_21698B3B0((uint64_t)__p);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteRelocates(a2, v16, v11, &v74);
        if (v73) {
          sub_216784EC4(v73);
        }
        sub_21698F21C((uint64_t)&v74, v75[0]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v76 + 1);
        sub_21697C414(&v76);
        sub_21698F21C((uint64_t)&v81, v82[0]);
        goto LABEL_135;
      }
      char v28 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v28) {
        char v28 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v28 + 33) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPrefixSubstitutions(a1, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v79);
        sub_216779094(__p, "prefixSubstitutions = ");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v16, (uint64_t)__p);
        if (SBYTE7(v71[0]) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        v29 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v29) {
          v29 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v29 + 48) & 0xFFFFFFFFFFFFFFF8))
        {
          v30 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v30) {
            v30 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v30 + 57) & 0xFFFFFFFFFFFFFFF8))
          {
            pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSelections(a1, &v79);
            sub_21698B45C(&v79, (uint64_t *)__p);
            if (*((void *)&v79 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v79 + 1));
            }
            if (*(void *)&v71[0])
            {
              v74 = 0;
              *(void **)&long long v79 = __p[0];
              *((void *)&v79 + 1) = &__p[1];
              while ((void)v79 != *((void *)&v79 + 1))
              {
                uint64_t v59 = *sub_21698B4E4(&v79, v57, v58) + 56;
                v82[0] = &off_26C750BB8;
                sub_21691B31C(&v81, v59);
                v62 = sub_21698B4E4(&v79, v60, v61);
                v63 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v74, (long long *)(*v62 + 32));
                sub_2168ED33C(v63, &v81);
                sub_2168EE084((uint64_t)&v81);
                sub_21698B560(&v79);
              }
              sub_216779094(&v79, "variants = ");
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v16, (uint64_t)&v79);
              if (SHIBYTE(v80) < 0) {
                operator delete((void *)v79);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDictionary(a2, v16, v11, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v74, 0);
              sub_2168EBBB8((void ***)&v74, 0);
            }
            sub_2167877AC((uint64_t)__p, (void *)__p[1]);
          }
          else
          {
            sub_216B76E98(a2, v16, a1, v15);
          }
          goto LABEL_135;
        }
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSuffixSubstitutions(a1, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v79);
        sub_216779094(__p, "suffixSubstitutions = ");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v16, (uint64_t)__p);
        if (SBYTE7(v71[0]) < 0) {
          operator delete(__p[0]);
        }
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDictionary(a2, v16, v11, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v79, 1);
      sub_2168EBBB8((void ***)&v79, 0);
LABEL_135:
      uint64_t v15 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v15 + 8);
      if (v15 == v8) {
        goto LABEL_147;
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, v15, (pxrInternal__aapl__pxrReserved__::VtValue *)&v81);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, "payload");
    if (sub_21698E94C((pxrInternal__aapl__pxrReserved__::VtValue *)&v81))
    {
      if (((uint64_t)v82[0] & 4) != 0) {
        (*(void (**)(unsigned int **))(((unint64_t)v82[0] & 0xFFFFFFFFFFFFFFF8) + 168))(&v81);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>();
    }
    if (((uint64_t)__p[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    __p[0] = "sdf/fileIO_Common.h";
    __p[1] = "Sdf_WritePrimMetadata";
    *(void *)&v71[0] = 388;
    *((void *)&v71[0] + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_WritePrimMetadata(const SdfPrimSpec &, Sdf_Tex"
                               "tOutput &, size_t)";
    LOBYTE(v71[1]) = 0;
    unint64_t v37 = *(void *)v15 & 0xFFFFFFFFFFFFFFF8;
    if (v37)
    {
      v38 = (const char *)(v37 + 16);
      if (*(char *)(v37 + 39) < 0) {
        v38 = *(const char **)v38;
      }
    }
    else
    {
      v38 = "";
    }
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v81, v35, v36, (uint64_t)&v79);
    v47 = (const char *)&v79;
    if (v80 < 0) {
      v47 = (const char *)v79;
    }
LABEL_132:
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"'%s' field holding unexpected type '%s'", v38, v47);
    if (SHIBYTE(v80) < 0) {
      operator delete((void *)v79);
    }
LABEL_134:
    sub_2168EE084((uint64_t)&v81);
    goto LABEL_135;
  }
LABEL_147:
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::CloseParensIfNeeded(a2, a3, v10, v11);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  __p[0] = v78;
  sub_216889A04((void ***)__p);
}

void sub_216B78888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,void *__p,void *a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_2168EBBB8((void ***)&a38, 0);
  sub_2167877AC((uint64_t)&__p, a27);
  if (*(char *)(v41 - 177) < 0) {
    operator delete(*(void **)(v41 - 200));
  }
  std::string __p = (void *)(v41 - 176);
  sub_216889A04((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_216B78BCC(atomic_uint **a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  v10[18] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPropertyOrder(a1, (uint64_t)&__p);
  sub_21698F998((uint64_t)&__p, v10);
  if (v8) {
    sub_216784EC4(v8);
  }
  if (v10[1] - v10[0] >= 9uLL)
  {
    sub_216779094(&__p, "reorder properties = ");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, a3 + 1, (uint64_t)&__p);
    if (v9 < 0) {
      operator delete(__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(a2, a3 + 1, v10);
    sub_216779094(&__p, "\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&__p);
    if (v9 < 0) {
      operator delete(__p);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildrenOrder(a1, (uint64_t)&v6);
  sub_21698F998((uint64_t)&v6, &__p);
  if (v6.__r_.__value_.__l.__size_) {
    sub_216784EC4((std::__shared_weak_count *)v6.__r_.__value_.__l.__size_);
  }
  if ((unint64_t)((char *)v8 - (unsigned char *)__p) >= 9)
  {
    sub_216779094(&v6, "reorder nameChildren = ");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, a3 + 1, (uint64_t)&v6);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v6.__r_.__value_.__l.__data_);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(a2, a3 + 1, (uint64_t *)&__p);
    sub_216779094(&v6, "\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&v6);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v6.__r_.__value_.__l.__data_);
    }
  }
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  sub_216889A04((void ***)&v6);
  std::string __p = v10;
  sub_216889A04((void ***)&__p);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetProperties((uint64_t **)a1);
}

void sub_216B7A6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,__int16 *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,char a51)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a21);
  a36 = &a23;
  sub_216991094((void ***)&a36);
  _Unwind_Resume(a1);
}

void sub_216B7ABAC(atomic_uint **a1, atomic_uint **a2, uint64_t a3, char a4)
{
  std::string::size_type v8 = a2;
  char v9 = a1;
  v74 = a2;
  v75 = a1;
  while (1)
  {
    uint64_t v10 = (char *)v8 - (char *)v9;
    uint64_t v11 = v8 - v9;
    if (!(!v5 & v4))
    {
      switch(v11)
      {
        case 0:
        case 1:
          return;
        case 2:
          v74 = v8 - 1;
          if (sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v8 - 1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v9))sub_216990ADC(&v75, &v74); {
          break;
          }
        case 3:
          v74 = v8 - 1;
          sub_216990C14(v9, v9 + 1, v8 - 1);
          break;
        case 4:
          v74 = v8 - 1;
          sub_216990FF8(v9, v9 + 1, v9 + 2, v8 - 1);
          break;
        case 5:
          v74 = v8 - 1;
          sub_216990B4C(v9, v9 + 1, v9 + 2, v9 + 3, v8 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v10 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v9 != v8)
      {
        v73 = v8;
        int64_t v48 = (unint64_t)(v11 - 2) >> 1;
        int64_t v49 = v48;
        do
        {
          int64_t v50 = v49;
          if (v48 >= v49)
          {
            uint64_t v51 = (2 * v49) | 1;
            uint64_t v52 = &v9[v51];
            if (2 * v49 + 2 < v11
              && sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v9[v51], (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v52 + 1))
            {
              ++v52;
              uint64_t v51 = 2 * v50 + 2;
            }
            v53 = &v9[v50];
            if ((sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v52, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v53) & 1) == 0)
            {
              uint64_t v54 = *v53;
              v78 = (atomic_uint **)v54;
              if (v54) {
                atomic_fetch_add(v54, 1u);
              }
              do
              {
                v55 = v52;
                pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v53, v52);
                if (v48 < v51) {
                  break;
                }
                uint64_t v56 = (2 * v51) | 1;
                uint64_t v52 = &v9[v56];
                uint64_t v51 = 2 * v51 + 2;
                if (v51 < v11)
                {
                  if (sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v9[v56], (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v52 + 1))++v52; {
                  else
                  }
                    uint64_t v51 = v56;
                }
                else
                {
                  uint64_t v51 = v56;
                }
                v53 = v55;
              }
              while (!sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v52, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v78));
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v55, (atomic_uint **)&v78);
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v78);
            }
          }
          int64_t v49 = v50 - 1;
        }
        while (v50);
        uint64_t v57 = (unint64_t)v10 >> 3;
        v58 = v73;
        do
        {
          uint64_t v59 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)*v9;
          std::string v77 = (atomic_uint **)v59;
          if (v59) {
            atomic_fetch_add((atomic_uint *volatile)v59, 1u);
          }
          uint64_t v60 = 0;
          v61 = v9;
          do
          {
            v62 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v61[v60 + 1];
            uint64_t v63 = 2 * v60;
            uint64_t v60 = (2 * v60) | 1;
            uint64_t v64 = v63 + 2;
            if (v63 + 2 < v57 && sub_216990958(v62, v62 + 1))
            {
              ++v62;
              uint64_t v60 = v64;
            }
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v61, (atomic_uint **)v62);
            v61 = (atomic_uint **)v62;
          }
          while (v60 <= (uint64_t)((unint64_t)(v57 - 2) >> 1));
          if (v62 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)--v58)
          {
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((atomic_uint **)v62, (atomic_uint **)&v77);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((atomic_uint **)v62, v58);
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v58, (atomic_uint **)&v77);
            uint64_t v65 = (char *)v62 - (char *)v9 + 8;
            if (v65 >= 9)
            {
              unint64_t v66 = (((unint64_t)v65 >> 3) - 2) >> 1;
              int v67 = &v9[v66];
              if (sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v67, v62))
              {
                int v68 = *v62;
                v78 = (atomic_uint **)v68;
                if (v68) {
                  atomic_fetch_add((atomic_uint *volatile)v68, 1u);
                }
                do
                {
                  int v69 = v67;
                  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((atomic_uint **)v62, v67);
                  if (!v66) {
                    break;
                  }
                  unint64_t v66 = (v66 - 1) >> 1;
                  int v67 = &v9[v66];
                  v62 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v69;
                }
                while ((sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v67, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v78) & 1) != 0);
                pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v69, (atomic_uint **)&v78);
                pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v78);
              }
            }
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v77);
        }
        while (v57-- > 2);
      }
      return;
    }
    unint64_t v12 = (unint64_t)v11 >> 1;
    unint64_t v13 = v8 - 1;
    if ((unint64_t)v10 < 0x401)
    {
      sub_216990C14(&v9[v12], v9, v13);
    }
    else
    {
      sub_216990C14(v9, &v9[v12], v13);
      uint64_t v14 = 8 * v12 - 8;
      sub_216990C14(v75 + 1, (atomic_uint **)((char *)v75 + v14), v74 - 2);
      uint64_t v15 = 8 * v12 + 8;
      sub_216990C14(v75 + 2, (atomic_uint **)((char *)v75 + v15), v74 - 3);
      sub_216990C14((atomic_uint **)((char *)v75 + v14), &v75[v12], (atomic_uint **)((char *)v75 + v15));
      v78 = &v75[v12];
      sub_216990CC8(&v75, &v78);
    }
    --a3;
    if (a4)
    {
      uint64_t v16 = v74;
    }
    else
    {
      char v17 = sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v75 - 1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v75);
      uint64_t v16 = v74;
      if ((v17 & 1) == 0)
      {
        v29 = v75;
        std::string v77 = v74;
        v78 = v75;
        v30 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)*v75;
        v76 = (atomic_uint *)v30;
        if (v30)
        {
          atomic_fetch_add((atomic_uint *volatile)v30, 1u);
          uint64_t v16 = v77;
        }
        char v31 = sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v16 - 1);
        unint64_t v32 = v78 + 1;
        if (v31)
        {
          do
          {
            v78 = v32;
            char v33 = sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32++);
          }
          while ((v33 & 1) == 0);
        }
        else
        {
          do
          {
            v78 = v32;
            if (v32 >= v77) {
              break;
            }
            int v34 = sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32++);
          }
          while (!v34);
        }
        v36 = v77;
        unsigned __int8 v35 = v78;
        if (v78 < v77)
        {
          do
            std::string v77 = --v36;
          while ((sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v36) & 1) != 0);
          unsigned __int8 v35 = v78;
        }
        if (v35 < v36)
        {
          do
          {
            sub_216990ADC(&v78, &v77);
            do
              ++v78;
            while (!sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v78));
            do
              --v77;
            while ((sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v77) & 1) != 0);
            unsigned __int8 v35 = v78;
          }
          while (v78 < v77);
        }
        unint64_t v37 = v35 - 1;
        if (v35 - 1 != v29) {
          pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v29, v35 - 1);
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v37, &v76);
        char v9 = v78;
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v76);
        goto LABEL_52;
      }
    }
    uint64_t v18 = v75;
    std::string v77 = v16;
    v78 = v75;
    uint64_t v19 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)*v75;
    v76 = (atomic_uint *)v19;
    uint64_t v20 = v75;
    if (v19)
    {
      atomic_fetch_add((atomic_uint *volatile)v19, 1u);
      uint64_t v20 = v78;
    }
    char v21 = v20 + 1;
    do
    {
      v78 = v21;
      char v22 = sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v21++, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76);
    }
    while ((v22 & 1) != 0);
    uint64_t v23 = v77;
    v24 = v78;
    if (v78 - 1 == v18)
    {
      do
      {
        if (v24 >= v23) {
          break;
        }
        std::string v77 = --v23;
      }
      while ((sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v23, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76) & 1) == 0);
    }
    else
    {
      std::string::size_type v25 = v77 - 1;
      do
      {
        std::string v77 = v25;
        int v26 = sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v25--, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76);
      }
      while (!v26);
      v24 = v78;
    }
    unint64_t v27 = v77;
    char v9 = v24;
    if (v24 < v77)
    {
      do
      {
        sub_216990ADC(&v78, &v77);
        do
          ++v78;
        while ((sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v78, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76) & 1) != 0);
        do
          --v77;
        while (!sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v77, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76));
        char v9 = v78;
      }
      while (v78 < v77);
    }
    if (v9 - 1 != v18) {
      pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v18, v9 - 1);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v9 - 1, &v76);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v76);
    if (v24 < v27) {
      goto LABEL_30;
    }
    int v28 = sub_216B7B430(v75, v9 - 1);
    if (!sub_216B7B430(v9, v74))
    {
      if (v28) {
        goto LABEL_53;
      }
LABEL_30:
      sub_216B7ABAC(v75, v9 - 1, a3, a4 & 1);
LABEL_52:
      a4 = 0;
LABEL_53:
      v75 = v9;
      goto LABEL_54;
    }
    if (v28) {
      return;
    }
    v74 = v9 - 1;
    char v9 = v75;
LABEL_54:
    std::string::size_type v8 = v74;
  }
  v38 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v9 + 1);
  BOOL v40 = v9 == v8 || v38 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v8;
  if (a4)
  {
    if (!v40)
    {
      uint64_t v41 = 0;
      unint64_t v42 = (atomic_uint ***)v9;
      do
      {
        char v43 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v42;
        unint64_t v42 = (atomic_uint ***)v38;
        if (sub_216990958(v38, v43))
        {
          v44 = *v42;
          v78 = v44;
          if (v44) {
            atomic_fetch_add((atomic_uint *volatile)v44, 1u);
          }
          uint64_t v45 = v41;
          while (1)
          {
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((atomic_uint **)((char *)v9 + v45 + 8), (atomic_uint **)((char *)v9 + v45));
            if (!v45) {
              break;
            }
            char v46 = sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v78, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)((char *)v9 + v45 - 8));
            v45 -= 8;
            if ((v46 & 1) == 0)
            {
              v47 = (atomic_uint **)((char *)v9 + v45 + 8);
              goto LABEL_80;
            }
          }
          v47 = v9;
LABEL_80:
          pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v47, (atomic_uint **)&v78);
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v78);
        }
        v38 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v42 + 1);
        v41 += 8;
      }
      while (v42 + 1 != (atomic_uint ***)v8);
    }
  }
  else if (!v40)
  {
    do
    {
      v71 = (atomic_uint ***)v38;
      if (sub_216990958(v38, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v9))
      {
        uint64_t v72 = *v71;
        v78 = v72;
        if (v72) {
          atomic_fetch_add((atomic_uint *volatile)v72, 1u);
        }
        do
        {
          pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v9 + 1, v9);
          --v9;
        }
        while ((sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v78, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v9) & 1) != 0);
        pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v9 + 1, (atomic_uint **)&v78);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v78);
      }
      v38 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v71 + 1);
      char v9 = (atomic_uint **)v71;
    }
    while (v71 + 1 != (atomic_uint ***)v8);
  }
}

void sub_216B7B388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B7B430(atomic_uint **a1, atomic_uint **a2)
{
  unint64_t v12 = a2;
  unint64_t v13 = a1;
  BOOL v4 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      unint64_t v12 = a2 - 1;
      if (sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2 - 1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1))sub_216990ADC(&v13, &v12); {
      return v4;
      }
    case 3:
      sub_216990C14(a1, a1 + 1, a2 - 1);
      return v4;
    case 4:
      sub_216990FF8(a1, a1 + 1, a1 + 2, a2 - 1);
      return v4;
    case 5:
      sub_216990B4C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return v4;
    default:
      char v5 = a1 + 2;
      sub_216990C14(a1, a1 + 1, a1 + 2);
      uint64_t v6 = a1 + 3;
      BOOL v4 = 1;
      if (v6 == a2) {
        return v4;
      }
      int v7 = 0;
      break;
  }
  while (!sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v5))
  {
LABEL_13:
    char v5 = v6++;
    if (v6 == v12) {
      return 1;
    }
  }
  std::string::size_type v8 = *v6;
  uint64_t v11 = v8;
  if (v8) {
    atomic_fetch_add(v8, 1u);
  }
  do
  {
    char v9 = v5;
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v5 + 1, v5);
    if (v5 == v13) {
      break;
    }
    --v5;
  }
  while ((sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v11, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v9 - 1) & 1) != 0);
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v9, &v11);
  if (++v7 != 8)
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v11);
    goto LABEL_13;
  }
  BOOL v4 = v6 + 1 == v12;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v11);
  return v4;
}

void sub_216B7B5E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void sub_216B7B614(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*(char *)(a4 + 23) >= 0) {
    uint64_t v10 = (const char *)a4;
  }
  else {
    uint64_t v10 = *(const char **)a4;
  }
  if (*(char *)(a5 + 23) >= 0) {
    uint64_t v11 = (const char *)a5;
  }
  else {
    uint64_t v11 = *(const char **)a5;
  }
  if (*(char *)(a6 + 23) >= 0) {
    unint64_t v12 = (const char *)a6;
  }
  else {
    unint64_t v12 = *(const char **)a6;
  }
  if (*(char *)(a7 + 23) >= 0) {
    unint64_t v13 = (const char *)a7;
  }
  else {
    unint64_t v13 = *(const char **)a7;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s %s.connect = ", v10, v11, v12, v13);
  if (sub_216991950((uint64_t)a3))
  {
    if (sub_216991950((uint64_t)a3) == 1)
    {
      sub_216991B40(a3, 0, __p);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteSdfPath(a1, 0, (pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_21697C414(__p);
      sub_216779094(__p, "\n");
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, 0, (uint64_t)__p);
    }
    else
    {
      sub_216779094(__p, "[\n");
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, 0, (uint64_t)__p);
      if (SHIBYTE(v18) < 0) {
        operator delete(__p[0]);
      }
      v19[1] = 0;
      v19[2] = 0;
      if (sub_216991AC8((uint64_t)a3)) {
        uint64_t v14 = a3;
      }
      else {
        uint64_t v14 = 0;
      }
      __p[1] = v14;
      uint64_t v18 = 0;
      sub_216991C48((uint64_t)a3, (uint64_t)v19);
      while (!sub_216991CCC((uint64_t)__p, (uint64_t)v19))
      {
        sub_2169919BC((uint64_t)__p, v15);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteSdfPath(a1, a2 + 1, (pxrInternal__aapl__pxrReserved__::SdfPath *)v15);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v15 + 1);
        sub_21697C414(v15);
        sub_216779094(v15, ",\n");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, 0, (uint64_t)v15);
        if (v16 < 0) {
          operator delete(v15[0]);
        }
        sub_216991A44((uint64_t)__p);
      }
      sub_216779094(__p, "]\n");
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2, (uint64_t)__p);
    }
  }
  else
  {
    sub_216779094(__p, "None\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, 0, (uint64_t)__p);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216B7B860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B7B8C0(uint64_t *a1, void *a2, uint64_t a3, char a4)
{
  if ((unint64_t)sub_216991950((uint64_t)a1) < 2)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)" = ");
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)" = [\n");
    ++a3;
  }
  if (sub_216991950((uint64_t)a1))
  {
    unint64_t v8 = 0;
    do
    {
      if ((unint64_t)sub_216991950((uint64_t)a1) >= 2) {
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"");
      }
      sub_216991B40(a1, v8, &v9);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteSdfPath(a2, 0, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v9);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
      sub_21697C414(&v9);
      if ((unint64_t)sub_216991950((uint64_t)a1) >= 2) {
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)",\n");
      }
      ++v8;
    }
    while (v8 < sub_216991950((uint64_t)a1));
  }
  if ((unint64_t)sub_216991950((uint64_t)a1) > 1) {
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3 - 1, (pxrInternal__aapl__pxrReserved__ *)"]");
  }
  if ((a4 & 2) == 0) {
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
  }
}

void sub_216B7BA34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void sub_216B7BA48(atomic_uint **a1, atomic_uint **a2, uint64_t a3, char a4)
{
  unint64_t v8 = a2;
  int v9 = a1;
  v74 = a2;
  v75 = a1;
  while (1)
  {
    uint64_t v10 = (char *)v8 - (char *)v9;
    uint64_t v11 = v8 - v9;
    if (!(!v5 & v4))
    {
      switch(v11)
      {
        case 0:
        case 1:
          return;
        case 2:
          v74 = v8 - 1;
          if (sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v8 - 1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v9))
          {
            sub_216992A90(&v75, &v74);
          }
          break;
        case 3:
          v74 = v8 - 1;
          sub_216B7C484(v9, v9 + 1, v8 - 1);
          break;
        case 4:
          v74 = v8 - 1;
          sub_216B7C71C(v9, v9 + 1, v9 + 2, v8 - 1);
          break;
        case 5:
          v74 = v8 - 1;
          sub_216B7C3BC(v9, v9 + 1, v9 + 2, v9 + 3, v8 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v10 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v9 != v8)
      {
        v73 = v8;
        int64_t v48 = (unint64_t)(v11 - 2) >> 1;
        int64_t v49 = v48;
        do
        {
          int64_t v50 = v49;
          if (v48 >= v49)
          {
            uint64_t v51 = (2 * v49) | 1;
            uint64_t v52 = &v9[v51];
            if (2 * v49 + 2 < v11
              && sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v9[v51], (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v52 + 1))
            {
              ++v52;
              uint64_t v51 = 2 * v50 + 2;
            }
            v53 = &v9[v50];
            if (!sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v52, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v53))
            {
              uint64_t v54 = *v53;
              v78 = (atomic_uint **)v54;
              if (v54) {
                atomic_fetch_add(v54, 1u);
              }
              do
              {
                v55 = v52;
                pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v53, v52);
                if (v48 < v51) {
                  break;
                }
                uint64_t v56 = (2 * v51) | 1;
                uint64_t v52 = &v9[v56];
                uint64_t v51 = 2 * v51 + 2;
                if (v51 < v11)
                {
                  if (sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v9[v56], (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v52 + 1))
                  {
                    ++v52;
                  }
                  else
                  {
                    uint64_t v51 = v56;
                  }
                }
                else
                {
                  uint64_t v51 = v56;
                }
                v53 = v55;
              }
              while (!sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v52, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v78));
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v55, (atomic_uint **)&v78);
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v78);
            }
          }
          int64_t v49 = v50 - 1;
        }
        while (v50);
        uint64_t v57 = (unint64_t)v10 >> 3;
        v58 = v73;
        do
        {
          uint64_t v59 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)*v9;
          std::string v77 = (atomic_uint **)v59;
          if (v59) {
            atomic_fetch_add((atomic_uint *volatile)v59, 1u);
          }
          uint64_t v60 = 0;
          v61 = v9;
          do
          {
            v62 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v61[v60 + 1];
            uint64_t v63 = 2 * v60;
            uint64_t v60 = (2 * v60) | 1;
            uint64_t v64 = v63 + 2;
            if (v63 + 2 < v57 && sub_216B7C2CC(v62, v62 + 1))
            {
              ++v62;
              uint64_t v60 = v64;
            }
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v61, (atomic_uint **)v62);
            v61 = (atomic_uint **)v62;
          }
          while (v60 <= (uint64_t)((unint64_t)(v57 - 2) >> 1));
          if (v62 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)--v58)
          {
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((atomic_uint **)v62, (atomic_uint **)&v77);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((atomic_uint **)v62, v58);
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v58, (atomic_uint **)&v77);
            uint64_t v65 = (char *)v62 - (char *)v9 + 8;
            if (v65 >= 9)
            {
              unint64_t v66 = (((unint64_t)v65 >> 3) - 2) >> 1;
              int v67 = &v9[v66];
              if (sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v67, v62))
              {
                int v68 = *v62;
                v78 = (atomic_uint **)v68;
                if (v68) {
                  atomic_fetch_add((atomic_uint *volatile)v68, 1u);
                }
                do
                {
                  int v69 = v67;
                  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((atomic_uint **)v62, v67);
                  if (!v66) {
                    break;
                  }
                  unint64_t v66 = (v66 - 1) >> 1;
                  int v67 = &v9[v66];
                  v62 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v69;
                }
                while (sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v67, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v78));
                pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v69, (atomic_uint **)&v78);
                pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v78);
              }
            }
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v77);
        }
        while (v57-- > 2);
      }
      return;
    }
    unint64_t v12 = (unint64_t)v11 >> 1;
    unint64_t v13 = v8 - 1;
    if ((unint64_t)v10 < 0x401)
    {
      sub_216B7C484(&v9[v12], v9, v13);
    }
    else
    {
      sub_216B7C484(v9, &v9[v12], v13);
      uint64_t v14 = 8 * v12 - 8;
      sub_216B7C484(v75 + 1, (atomic_uint **)((char *)v75 + v14), v74 - 2);
      uint64_t v15 = 8 * v12 + 8;
      sub_216B7C484(v75 + 2, (atomic_uint **)((char *)v75 + v15), v74 - 3);
      sub_216B7C484((atomic_uint **)((char *)v75 + v14), &v75[v12], (atomic_uint **)((char *)v75 + v15));
      v78 = &v75[v12];
      sub_216992C7C(&v75, &v78);
    }
    --a3;
    if (a4)
    {
      char v16 = v74;
    }
    else
    {
      BOOL v17 = sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v75 - 1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v75);
      char v16 = v74;
      if (!v17)
      {
        v29 = v75;
        std::string v77 = v74;
        v78 = v75;
        v30 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)*v75;
        v76 = (atomic_uint *)v30;
        if (v30)
        {
          atomic_fetch_add((atomic_uint *volatile)v30, 1u);
          char v16 = v77;
        }
        BOOL v31 = sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v16 - 1);
        unint64_t v32 = v78 + 1;
        if (v31)
        {
          do
            v78 = v32;
          while (!sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32++));
        }
        else
        {
          do
          {
            v78 = v32;
            if (v32 >= v77) {
              break;
            }
          }
          while (!sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32++));
        }
        v36 = v77;
        unsigned __int8 v35 = v78;
        if (v78 < v77)
        {
          do
            std::string v77 = --v36;
          while (sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v36));
          unsigned __int8 v35 = v78;
        }
        if (v35 < v36)
        {
          do
          {
            sub_216992A90(&v78, &v77);
            do
              ++v78;
            while (!sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v78));
            do
              --v77;
            while (sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v77));
            unsigned __int8 v35 = v78;
          }
          while (v78 < v77);
        }
        unint64_t v37 = v35 - 1;
        if (v35 - 1 != v29) {
          pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v29, v35 - 1);
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v37, &v76);
        int v9 = v78;
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v76);
        goto LABEL_52;
      }
    }
    uint64_t v18 = v75;
    std::string v77 = v16;
    v78 = v75;
    uint64_t v19 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)*v75;
    v76 = (atomic_uint *)v19;
    uint64_t v20 = v75;
    if (v19)
    {
      atomic_fetch_add((atomic_uint *volatile)v19, 1u);
      uint64_t v20 = v78;
    }
    char v21 = v20 + 1;
    do
      v78 = v21;
    while (sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v21++, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76));
    uint64_t v23 = v77;
    v24 = v78;
    if (v78 - 1 == v18)
    {
      do
      {
        if (v24 >= v23) {
          break;
        }
        std::string v77 = --v23;
      }
      while (!sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v23, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76));
    }
    else
    {
      std::string::size_type v25 = v77 - 1;
      do
        std::string v77 = v25;
      while (!sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v25--, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76));
      v24 = v78;
    }
    unint64_t v27 = v77;
    int v9 = v24;
    if (v24 < v77)
    {
      do
      {
        sub_216992A90(&v78, &v77);
        do
          ++v78;
        while (sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v78, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76));
        do
          --v77;
        while (!sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v77, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76));
        int v9 = v78;
      }
      while (v78 < v77);
    }
    if (v9 - 1 != v18) {
      pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v18, v9 - 1);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v9 - 1, &v76);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v76);
    if (v24 < v27) {
      goto LABEL_30;
    }
    int v28 = sub_216B7C538(v75, v9 - 1);
    if (!sub_216B7C538(v9, v74))
    {
      if (v28) {
        goto LABEL_53;
      }
LABEL_30:
      sub_216B7BA48(v75, v9 - 1, a3, a4 & 1);
LABEL_52:
      a4 = 0;
LABEL_53:
      v75 = v9;
      goto LABEL_54;
    }
    if (v28) {
      return;
    }
    v74 = v9 - 1;
    int v9 = v75;
LABEL_54:
    unint64_t v8 = v74;
  }
  v38 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v9 + 1);
  BOOL v40 = v9 == v8 || v38 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v8;
  if (a4)
  {
    if (!v40)
    {
      uint64_t v41 = 0;
      unint64_t v42 = (atomic_uint ***)v9;
      do
      {
        char v43 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v42;
        unint64_t v42 = (atomic_uint ***)v38;
        if (sub_216B7C2CC(v38, v43))
        {
          v44 = *v42;
          v78 = v44;
          if (v44) {
            atomic_fetch_add((atomic_uint *volatile)v44, 1u);
          }
          uint64_t v45 = v41;
          while (1)
          {
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((atomic_uint **)((char *)v9 + v45 + 8), (atomic_uint **)((char *)v9 + v45));
            if (!v45) {
              break;
            }
            BOOL v46 = sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v78, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)((char *)v9 + v45 - 8));
            v45 -= 8;
            if (!v46)
            {
              v47 = (atomic_uint **)((char *)v9 + v45 + 8);
              goto LABEL_80;
            }
          }
          v47 = v9;
LABEL_80:
          pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v47, (atomic_uint **)&v78);
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v78);
        }
        v38 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v42 + 1);
        v41 += 8;
      }
      while (v42 + 1 != (atomic_uint ***)v8);
    }
  }
  else if (!v40)
  {
    do
    {
      v71 = (atomic_uint ***)v38;
      if (sub_216B7C2CC(v38, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v9))
      {
        uint64_t v72 = *v71;
        v78 = v72;
        if (v72) {
          atomic_fetch_add((atomic_uint *volatile)v72, 1u);
        }
        do
        {
          pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v9 + 1, v9);
          --v9;
        }
        while (sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v78, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v9));
        pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v9 + 1, (atomic_uint **)&v78);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v78);
      }
      v38 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v71 + 1);
      int v9 = (atomic_uint **)v71;
    }
    while (v71 + 1 != (atomic_uint ***)v8);
  }
}

void sub_216B7C224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

BOOL sub_216B7C2CC(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  uint64_t v3 = sub_216992ED0(a1);
  pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetName((pxrInternal__aapl__pxrReserved__::SdfVariantSpec *)v3, (uint64_t)__p);
  char v4 = sub_216992ED0(a2);
  pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetName((pxrInternal__aapl__pxrReserved__::SdfVariantSpec *)v4, (uint64_t)v15);
  int v5 = (char)v16;
  uint64_t v6 = (void *)v15[0];
  unsigned __int8 v7 = v18;
  if ((v18 & 0x80u) == 0) {
    size_t v8 = v18;
  }
  else {
    size_t v8 = (size_t)__p[1];
  }
  if ((v18 & 0x80u) == 0) {
    int v9 = __p;
  }
  else {
    int v9 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    size_t v10 = v16;
  }
  else {
    size_t v10 = v15[1];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v11 = v15;
  }
  else {
    uint64_t v11 = (void *)v15[0];
  }
  if (v10 >= v8) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v10;
  }
  int v13 = memcmp(v9, v11, v12);
  if (v5 < 0)
  {
    operator delete(v6);
    if ((v18 & 0x80) == 0) {
      goto LABEL_18;
    }
  }
  else if ((v7 & 0x80) == 0)
  {
    goto LABEL_18;
  }
  operator delete(__p[0]);
LABEL_18:
  if (v13) {
    return v13 < 0;
  }
  else {
    return v8 < v10;
  }
}

void sub_216B7C3A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B7C3BC(atomic_uint **a1, atomic_uint **a2, atomic_uint **a3, atomic_uint **a4, atomic_uint **a5)
{
  int v13 = a2;
  uint64_t v14 = a1;
  uint64_t v11 = a4;
  size_t v12 = a3;
  size_t v10 = a5;
  sub_216B7C71C(a1, a2, a3, a4);
  if (sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a5, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a4))
  {
    sub_216992A90(&v11, &v10);
    if (sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v11, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3))
    {
      sub_216992A90(&v12, &v11);
      if (sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v12, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2))
      {
        sub_216992A90(&v13, &v12);
        if (sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v13, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1))
        {
          sub_216992A90(&v14, &v13);
        }
      }
    }
  }
}

void sub_216B7C484(atomic_uint **a1, atomic_uint **a2, atomic_uint **a3)
{
  size_t v10 = a2;
  uint64_t v11 = a1;
  int v9 = a3;
  BOOL v5 = sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1);
  BOOL v6 = sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2);
  if (v5)
  {
    if (v6)
    {
      unsigned __int8 v7 = &v11;
    }
    else
    {
      sub_216992A90(&v11, &v10);
      if (!sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v9, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v10))return; {
      unsigned __int8 v7 = &v10;
      }
    }
    size_t v8 = &v9;
    goto LABEL_10;
  }
  if (v6)
  {
    sub_216992A90(&v10, &v9);
    if (sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v10, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v11))
    {
      unsigned __int8 v7 = &v11;
      size_t v8 = &v10;
LABEL_10:
      sub_216992A90(v7, v8);
    }
  }
}

uint64_t sub_216B7C538(atomic_uint **a1, atomic_uint **a2)
{
  size_t v12 = a2;
  int v13 = a1;
  BOOL v4 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      size_t v12 = a2 - 1;
      if (sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2 - 1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1))
      {
        sub_216992A90(&v13, &v12);
      }
      return v4;
    case 3:
      sub_216B7C484(a1, a1 + 1, a2 - 1);
      return v4;
    case 4:
      sub_216B7C71C(a1, a1 + 1, a1 + 2, a2 - 1);
      return v4;
    case 5:
      sub_216B7C3BC(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return v4;
    default:
      BOOL v5 = a1 + 2;
      sub_216B7C484(a1, a1 + 1, a1 + 2);
      BOOL v6 = a1 + 3;
      BOOL v4 = 1;
      if (v6 == a2) {
        return v4;
      }
      int v7 = 0;
      break;
  }
  while (!sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v5))
  {
LABEL_13:
    BOOL v5 = v6++;
    if (v6 == v12) {
      return 1;
    }
  }
  size_t v8 = *v6;
  uint64_t v11 = v8;
  if (v8) {
    atomic_fetch_add(v8, 1u);
  }
  do
  {
    int v9 = v5;
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v5 + 1, v5);
    if (v5 == v13) {
      break;
    }
    --v5;
  }
  while (sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v11, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v9 - 1));
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v9, &v11);
  if (++v7 != 8)
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v11);
    goto LABEL_13;
  }
  BOOL v4 = v6 + 1 == v12;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v11);
  return v4;
}

void sub_216B7C6EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void sub_216B7C71C(atomic_uint **a1, atomic_uint **a2, atomic_uint **a3, atomic_uint **a4)
{
  size_t v10 = a2;
  uint64_t v11 = a1;
  size_t v8 = a4;
  int v9 = a3;
  sub_216B7C484(a1, a2, a3);
  if (sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a4, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3))
  {
    sub_216992A90(&v9, &v8);
    if (sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v9, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2))
    {
      sub_216992A90(&v10, &v9);
      if (sub_216B7C2CC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v10, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1))
      {
        sub_216992A90(&v11, &v10);
      }
    }
  }
}

uint64_t sub_216B7C7B8(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  sub_216B7C804(a1, a1 + 64);
  sub_216778A5C(v2);
  return a1;
}

void sub_216B7C7F0(_Unwind_Exception *a1)
{
  sub_216993048(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216B7C804(uint64_t a1, uint64_t a2)
{
  sub_216989478(a2, &v4);
  long long v5 = v4;
  long long v4 = 0uLL;
  sub_2169895DC(a1, (uint64_t)&v5);
  if (*((void *)&v5 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v5 + 1));
  }
  if (*((void *)&v4 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v4 + 1));
  }
  return a1;
}

void sub_216B7C86C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216B7C890()
{
  sub_216B7C930();

  return sub_216B7CA34();
}

void sub_216B7C8B8()
{
  uint64_t v0 = MEMORY[0x263F8C240];
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast(MEMORY[0x263F8C240], (uint64_t)&stru_26C7557E0, (uint64_t)sub_216B7CB38);

  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C7557E0, v0, (uint64_t)sub_216B7CB84);
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<<()
{
  return std::ostream::operator<<();
}

uint64_t *sub_216B7C930()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  long long v5 = 0;
  BOOL v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7557E0, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C7557E0, (char *)8, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    BOOL v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B7C9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B7CA34()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  long long v5 = 0;
  BOOL v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7558A8, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C7558A8, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    BOOL v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B7CAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void *sub_216B7CB38@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = result[1];
  if ((v3 & 4) != 0) {
    uint64_t result = (void *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = (char *)&off_26C755728 + 1;
  return result;
}

double sub_216B7CB84@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double result = *(double *)a1;
  *(void *)(a2 + 8) = &unk_26C750B03;
  *(double *)a2 = result;
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType::~SdfTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *this)
{
  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

{
  void **v2;

  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType::SdfTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *this)
{
  uint64_t v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "__AnyType__", 0);
  uint64_t v3 = *v2;
  if ((*v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  char v4 = operator new(8uLL);
  *((void *)this + 1) = v4;
  *((void *)this + 2) = v4;
  void *v4 = v3;
  long long v5 = v4 + 1;
  *((void *)this + 3) = v4 + 1;
  if ((v3 & 7) != 0)
  {
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      *v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 2) = v5;
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  else
  {
    *((void *)this + 2) = v5;
  }
  return this;
}

void sub_216B7CD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v11 = v10;
  sub_216889A04(&a9);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2173242CC(v9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType::~SdfPathTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *this)
{
  int v13 = (void **)((char *)this + 96);
  sub_216889A04(&v13);
  uint64_t v2 = *((void *)this + 11);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 10);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 9);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 8);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 7);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 6);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 5);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 4);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 3);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 2);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 1);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType::SdfPathTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *this)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v20 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "/", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v20, ".", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "/", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, ".", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "[", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "]", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "..", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "mapper", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "expression", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, ".", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, ":", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v21 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v20;
  uint64_t v22 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v22 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v23 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v24 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v25 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v26 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v27 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v28 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v29 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v29 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v30 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v31 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v31 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v32 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v32 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  uint64_t v14 = (char *)operator new(0x60uLL);
  uint64_t v15 = 0;
  *((void *)this + 12) = v14;
  *((void *)this + 13) = v14;
  *((void *)this + 14) = v14 + 96;
  do
  {
    uint64_t v16 = *(uint64_t *)((char *)&v21 + v15);
    *(void *)&v14[v15] = v16;
    if ((v16 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v14[v15] &= 0xFFFFFFFFFFFFFFF8;
    }
    v15 += 8;
  }
  while (v15 != 96);
  *((void *)this + 13) = v14 + 96;
  for (uint64_t i = 88; i != -8; i -= 8)
  {
    uint64_t v18 = *(uint64_t *)((char *)&v21 + i);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_216B7D324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void **a12, uint64_t a13, char a14)
{
  sub_216889A04(&a12);
  uint64_t v24 = 88;
  while (1)
  {
    uint64_t v25 = *(void *)(&a14 + v24);
    if ((v25 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v24 -= 8;
    if (v24 == -8)
    {
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_216B7D4CC()
{
}

void sub_216B7D4D4()
{
}

void sub_216B7D4DC()
{
}

void pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType::~SdfMetadataDisplayGroupTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *this)
{
  uint64_t v7 = (void **)((char *)this + 48);
  sub_216889A04(&v7);
  uint64_t v2 = *((void *)this + 5);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 4);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 2);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 1);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType::SdfMetadataDisplayGroupTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "Internal", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "Direct Manip", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "Pipeline", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 4, "Symmetry", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 5, "User Interface", 0);
  uint64_t v3 = *this;
  uint64_t v21 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v21 = v4;
    }
  }
  uint64_t v5 = *v2;
  uint64_t v22 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v22 = v6;
    }
  }
  uint64_t v7 = this[2];
  uint64_t v23 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v23 = v8;
    }
  }
  uint64_t v9 = this[3];
  uint64_t v24 = v9;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v24 = v10;
    }
  }
  uint64_t v11 = this[4];
  uint64_t v25 = v11;
  if ((v11 & 7) != 0)
  {
    uint64_t v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v25 = v12;
    }
  }
  uint64_t v13 = this[5];
  uint64_t v26 = v13;
  if ((v13 & 7) != 0)
  {
    uint64_t v14 = (atomic_uint *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v14, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v26 = v14;
    }
  }
  this[6] = 0;
  this[7] = 0;
  this[8] = 0;
  uint64_t v15 = (atomic_uint *)operator new(0x30uLL);
  unint64_t v16 = 0;
  this[6] = v15;
  this[7] = v15;
  this[8] = v15 + 12;
  do
  {
    BOOL v17 = (&v21)[v16 / 2];
    *(void *)&v15[v16] = v17;
    if ((v17 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v15[v16] &= 0xFFFFFFFFFFFFFFF8;
    }
    v16 += 2;
  }
  while (v16 != 12);
  this[7] = v15 + 12;
  for (uint64_t i = 5; i != -1; --i)
  {
    uint64_t v19 = (&v21)[i];
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)this;
}

void sub_216B7D824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v19 = 40;
  while (1)
  {
    uint64_t v20 = *(void *)(&a12 + v19);
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v19 -= 8;
    if (v19 == -8)
    {
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType::~SdfValueRoleNames_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *this)
{
  uint64_t v12 = (void **)((char *)this + 88);
  sub_216889A04(&v12);
  uint64_t v2 = *((void *)this + 10);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 9);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 8);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 7);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 6);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 5);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 4);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 3);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 2);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 1);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType::SdfValueRoleNames_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *this)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v19 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "Point", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v19, "Normal", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "Vector", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "Color", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "Frame", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "Transform", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "PointIndex", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "EdgeIndex", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "FaceIndex", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "Group", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "TextureCoordinate", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v20 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v19;
  uint64_t v21 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v22 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v22 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v23 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v24 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v25 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v26 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v27 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v28 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v29 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v29 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v30 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  uint64_t v13 = (char *)operator new(0x58uLL);
  uint64_t v14 = 0;
  *((void *)this + 11) = v13;
  *((void *)this + 12) = v13;
  *((void *)this + 13) = v13 + 88;
  do
  {
    uint64_t v15 = *(uint64_t *)((char *)&v20 + v14);
    *(void *)&v13[v14] = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v13[v14] &= 0xFFFFFFFFFFFFFFF8;
    }
    v14 += 8;
  }
  while (v14 != 88);
  *((void *)this + 12) = v13 + 88;
  for (uint64_t i = 80; i != -8; i -= 8)
  {
    uint64_t v17 = *(uint64_t *)((char *)&v20 + i);
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_216B7DE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void **a11, uint64_t a12, char a13)
{
  sub_216889A04(&a11);
  uint64_t v23 = 80;
  while (1)
  {
    uint64_t v24 = *(void *)(&a13 + v23);
    if ((v24 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v23 -= 8;
    if (v23 == -8)
    {
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_216B7DFF0()
{
}

void sub_216B7DFF8()
{
}

uint64_t *sub_216B7E004()
{
  sub_216B81008();
  sub_216B8110C();
  sub_216B81210();
  sub_216B81314();
  uint64_t v0 = sub_216B81418();
  uint64_t v1 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v0);
  sub_216779094(__p, "SdfTimeSampleMap");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v0, v1, (char *)__p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  sub_216B8151C();
  uint64_t v2 = sub_216B81620();
  uint64_t v3 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v2);
  sub_216779094(__p, "SdfRelocatesMap");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v2, v3, (char *)__p);
  uint64_t v5 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot(v4);
  sub_216779094(v7, "map<SdfPath, SdfPath>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v2, v5, (char *)v7);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  sub_216B81724();
  return sub_216B81828();
}

void sub_216B7E0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B7E138()
{
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C759D20, (uint64_t)&stru_26C74BC40, (uint64_t)sub_216B8192C);
  uint64_t v0 = MEMORY[0x263F8C258];
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast(MEMORY[0x263F8C258], (uint64_t)&stru_26C759D20, (uint64_t)sub_216B8198C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C759D20, v0, (uint64_t)sub_216B819DC);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C758108, (uint64_t)&stru_26C74BC40, (uint64_t)sub_216B81A2C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast(v0, (uint64_t)&stru_26C758108, (uint64_t)sub_216B81A8C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C758108, v0, (uint64_t)sub_216B81ADC);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C756E50, (uint64_t)&stru_26C74BC40, (uint64_t)sub_216B81B2C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast(v0, (uint64_t)&stru_26C756E50, (uint64_t)sub_216B81B8C);

  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C756E50, v0, (uint64_t)sub_216B81BDC);
}

void sub_216B7E28C()
{
  sub_216779094(v3, "SdfSpecTypeUnknown");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C755200, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfSpecTypeAttribute");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C755200, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfSpecTypeConnection");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C755200, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfSpecTypeExpression");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C755200, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfSpecTypeMapper");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C755200, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfSpecTypeMapperArg");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C755200, 5, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfSpecTypePrim");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C755200, 6, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfSpecTypePseudoRoot");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C755200, 7, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfSpecTypeRelationship");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C755200, 8, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfSpecTypeRelationshipTarget");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C755200, 9, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfSpecTypeVariant");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C755200, 10, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfSpecTypeVariantSet");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C755200, 11, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfSpecifierDef");
  sub_216779094(&__p, "Def");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C758108, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfSpecifierOver");
  sub_216779094(&__p, "Over");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C758108, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfSpecifierClass");
  sub_216779094(&__p, "Class");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C758108, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfPermissionPublic");
  sub_216779094(&__p, "Public");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C759D20, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfPermissionPrivate");
  sub_216779094(&__p, "Private");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C759D20, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfVariabilityVarying");
  sub_216779094(&__p, "Varying");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C756E50, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfVariabilityUniform");
  sub_216779094(&__p, "Uniform");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&stru_26C756E50, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfAuthoringErrorUnrecognizedFields");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C759010, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfAuthoringErrorUnrecognizedSpecType");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C759010, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
}

void sub_216B7E978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B7EA14()
{
  sub_216779094(v2, "SdfLengthUnitMillimeter");
  sub_216779094(__p, "mm");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75AC48, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "SdfLengthUnitCentimeter");
  sub_216779094(__p, "cm");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75AC48, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "SdfLengthUnitDecimeter");
  sub_216779094(__p, "dm");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75AC48, 2, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "SdfLengthUnitMeter");
  sub_216779094(__p, "m");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75AC48, 3, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "SdfLengthUnitKilometer");
  sub_216779094(__p, "km");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75AC48, 4, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "SdfLengthUnitInch");
  sub_216779094(__p, "in");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75AC48, 5, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "SdfLengthUnitFoot");
  sub_216779094(__p, "ft");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75AC48, 6, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "SdfLengthUnitYard");
  sub_216779094(__p, "yd");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75AC48, 7, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "SdfLengthUnitMile");
  sub_216779094(__p, "mi");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75AC48, 8, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_216B7ED50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B7EDC4()
{
  sub_216779094(v2, "SdfAngularUnitDegrees");
  sub_216779094(__p, "deg");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75AE90, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "SdfAngularUnitRadians");
  sub_216779094(__p, "rad");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75AE90, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_216B7EE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B7EED4()
{
  sub_216779094(v2, "SdfDimensionlessUnitPercent");
  sub_216779094(__p, "%");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7572B0, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "SdfDimensionlessUnitDefault");
  sub_216779094(__p, "default");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7572B0, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_216B7EFA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B7EFE8()
{
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C75AC48, (uint64_t)&stru_26C74BC40, (uint64_t)sub_216B81D30);
  uint64_t v0 = MEMORY[0x263F8C258];
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast(MEMORY[0x263F8C258], (uint64_t)&stru_26C75AC48, (uint64_t)sub_216B81F04);

  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C75AC48, v0, (uint64_t)sub_216B82124);
}

void sub_216B7F07C()
{
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C75AE90, (uint64_t)&stru_26C74BC40, (uint64_t)sub_216B82278);
  uint64_t v0 = MEMORY[0x263F8C258];
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast(MEMORY[0x263F8C258], (uint64_t)&stru_26C75AE90, (uint64_t)sub_216B8244C);

  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C75AE90, v0, (uint64_t)sub_216B8266C);
}

void sub_216B7F110()
{
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C7572B0, (uint64_t)&stru_26C74BC40, (uint64_t)sub_216B827C0);
  uint64_t v0 = MEMORY[0x263F8C258];
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast(MEMORY[0x263F8C258], (uint64_t)&stru_26C7572B0, (uint64_t)sub_216B82994);

  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C7572B0, v0, (uint64_t)sub_216B82BB4);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfDefaultUnit(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  char v3 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v3, this);
  return *(void *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDefaultUnit((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfDefaultUnit(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfEnum *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91118, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91118))
  {
    qword_267B91108 = MEMORY[0x263F8C258];
    dword_267B91110 = 0;
    __cxa_guard_release(&qword_267B91118);
  }
  uint64_t v3 = sub_216B7F378();
  sub_216779094(__p, (char *)(*(void *)(*(void *)this + 8) & 0x7FFFFFFFFFFFFFFFLL));
  uint64_t v4 = sub_21678C2D8(v3 + 24, (const void **)__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  if (v3 + 32 != v4) {
    return (uint64_t *)(v4 + 56);
  }
  __p[0] = "sdf/types.cpp";
  __p[1] = "SdfDefaultUnit";
  uint64_t v11 = 266;
  uint64_t v12 = "const TfEnum &pxrInternal__aapl__pxrReserved__::SdfDefaultUnit(const TfEnum &)";
  char v13 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(*(void *)this + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v8);
  if (v9 >= 0) {
    uint64_t v7 = v8;
  }
  else {
    uint64_t v7 = (void **)v8[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__p, (pxrInternal__aapl__pxrReserved__ *)"Unsupported unit '%s'.", v6, v7);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  return &qword_267B91108;
}

void sub_216B7F348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B7F378()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91180, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91180))
  {
    qword_267B91178 = (uint64_t)sub_216B82C04();
    __cxa_guard_release(&qword_267B91180);
  }
  return qword_267B91178;
}

void sub_216B7F3D4(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfUnitCategory(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfEnum *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91138, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91138))
  {
    qword_267B91120 = 0;
    *(void *)algn_267B91128 = 0;
    qword_267B91130 = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267B91120, &dword_216758000);
    __cxa_guard_release(&qword_267B91138);
  }
  uint64_t v3 = sub_216B7F378();
  sub_216779094(__p, (char *)(*(void *)(*(void *)this + 8) & 0x7FFFFFFFFFFFFFFFLL));
  uint64_t v4 = sub_21678C2D8(v3 + 72, (const void **)__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  if (v3 + 80 != v4) {
    return (uint64_t *)(v4 + 56);
  }
  __p[0] = "sdf/types.cpp";
  __p[1] = "SdfUnitCategory";
  uint64_t v11 = 282;
  uint64_t v12 = "const string &pxrInternal__aapl__pxrReserved__::SdfUnitCategory(const TfEnum &)";
  char v13 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(*(void *)this + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v8);
  if (v9 >= 0) {
    uint64_t v7 = v8;
  }
  else {
    uint64_t v7 = (void **)v8[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__p, (pxrInternal__aapl__pxrReserved__ *)"Unsupported unit '%s'.", v6, v7);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  return &qword_267B91120;
}

void sub_216B7F548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfConvertUnit(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfEnum *a2, const pxrInternal__aapl__pxrReserved__::TfEnum *a3)
{
  uint64_t v5 = sub_216B7F378();
  uint64_t v6 = *(void *)this;
  uint64_t v7 = (char *)(*(void *)(*(void *)this + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if (!strcmp((const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL), v7))
  {
    sub_216779094(&v22, v7);
    uint64_t v13 = sub_21678C2D8(v5, (const void **)&v22);
    if (SHIBYTE(v24) < 0) {
      operator delete(v22);
    }
    if (v5 + 8 != v13)
    {
      uint64_t v14 = *(uint64_t ***)(v13 + 56);
      uint64_t v22 = (char *)this + 8;
      sub_216ADE9D4(v14, (int *)this + 2, (uint64_t)&unk_2174BFD90, (_DWORD **)&v22);
      uint64_t v15 = *(uint64_t ***)(v13 + 56);
      uint64_t v22 = (char *)a2 + 8;
      sub_216ADE9D4(v15, (int *)a2 + 2, (uint64_t)&unk_2174BFD90, (_DWORD **)&v22);
      return;
    }
    uint64_t v22 = "sdf/types.cpp";
    uint64_t v23 = "SdfConvertUnit";
    uint64_t v24 = 311;
    uint64_t v25 = "double pxrInternal__aapl__pxrReserved__::SdfConvertUnit(const TfEnum &, const TfEnum &)";
    char v26 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(*(void *)this + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v20);
    if (v21 >= 0) {
      uint64_t v17 = v20;
    }
    else {
      uint64_t v17 = (void **)v20[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v22, (pxrInternal__aapl__pxrReserved__ *)"Unsupported unit '%s'.", v16, v17);
  }
  else
  {
    uint64_t v22 = "sdf/types.cpp";
    uint64_t v23 = "SdfConvertUnit";
    uint64_t v24 = 303;
    uint64_t v25 = "double pxrInternal__aapl__pxrReserved__::SdfConvertUnit(const TfEnum &, const TfEnum &)";
    char v26 = 0;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetFullName(v6, *((void *)this + 1), (uint64_t)v20);
    int v8 = v21;
    char v9 = (void **)v20[0];
    pxrInternal__aapl__pxrReserved__::TfEnum::GetFullName(*(void *)a2, *((void *)a2 + 1), (uint64_t)__p);
    if (v8 >= 0) {
      uint64_t v11 = v20;
    }
    else {
      uint64_t v11 = v9;
    }
    if (v19 >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v22, (pxrInternal__aapl__pxrReserved__ *)"Can not convert from '%s' to '%s'.", v10, v11, v12);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
}

void sub_216B7F77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfGetNameForUnit(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfEnum *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91158, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91158))
  {
    qword_267B91140 = 0;
    *(void *)algn_267B91148 = 0;
    qword_267B91150 = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267B91140, &dword_216758000);
    __cxa_guard_release(&qword_267B91158);
  }
  uint64_t v3 = sub_216B7F378();
  sub_216779094(__p, (char *)(*(void *)(*(void *)this + 8) & 0x7FFFFFFFFFFFFFFFLL));
  uint64_t v4 = sub_21678C2D8(v3 + 768, (const void **)__p);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  if (v3 + 776 == v4)
  {
    __p[0] = "sdf/types.cpp";
    __p[1] = "SdfGetNameForUnit";
    uint64_t v14 = 329;
    uint64_t v15 = "const string &pxrInternal__aapl__pxrReserved__::SdfGetNameForUnit(const TfEnum &)";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(*(void *)this + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v11);
    if (v12 >= 0) {
      char v10 = v11;
    }
    else {
      char v10 = (void **)v11[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__p, (pxrInternal__aapl__pxrReserved__ *)"Unsupported unit '%s'.", v9, v10);
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    return &qword_267B91140;
  }
  else
  {
    uint64_t v5 = (uint64_t **)(sub_216B7F378() + 768);
    sub_216779094(__p, (char *)(*(void *)(*(void *)this + 8) & 0x7FFFFFFFFFFFFFFFLL));
    v11[0] = __p;
    unsigned int v6 = *((_DWORD *)sub_216B837AC(v5, (const void **)__p, (uint64_t)&unk_2174BFD90, (_OWORD **)v11) + 14);
    unsigned int v7 = *((_DWORD *)this + 2);
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    return (uint64_t *)(v3 + 216 * v6 + 24 * v7 + 96);
  }
}

void sub_216B7F98C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfGetUnitFromName(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91170, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91170))
  {
    qword_267B91160 = MEMORY[0x263F8C258];
    dword_267B91168 = 0;
    __cxa_guard_release(&qword_267B91170);
  }
  uint64_t v2 = sub_216B7F378();
  uint64_t v3 = sub_21678C2D8(v2 + 744, (const void **)a1);
  if (v2 + 752 != v3) {
    return (uint64_t *)(v3 + 56);
  }
  v7[0] = "sdf/types.cpp";
  v7[1] = "SdfGetUnitFromName";
  v7[2] = 347;
  v7[3] = "const TfEnum &pxrInternal__aapl__pxrReserved__::SdfGetUnitFromName(const std::string &)";
  char v8 = 0;
  if (*(char *)(a1 + 23) >= 0) {
    unsigned int v6 = (const void *)a1;
  }
  else {
    unsigned int v6 = *(const void **)a1;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v7, (pxrInternal__aapl__pxrReserved__ *)"Unknown unit name '%s'.", v4, v6);
  return &qword_267B91160;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfValueHasValidType(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v6 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v3, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v6);
  BOOL IsEmpty = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return !IsEmpty;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfGetTypeForValueTypeName(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v3, this);
  return *(void *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfGetValueTypeNameForValue(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v3, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v5);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

atomic_uint **pxrInternal__aapl__pxrReserved__::SdfGetRoleNameForValueTypeName@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v5 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v5, this);
  uint64_t result = (atomic_uint **)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetRole((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  unsigned int v7 = *result;
  *a2 = *result;
  if ((v7 & 7) != 0)
  {
    char v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v8;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfConvertToValidMetadataDictionary(pxrInternal__aapl__pxrReserved__::VtDictionary *a1, uint64_t a2)
{
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  memset(v23, 0, sizeof(v23));
  v22.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(a1);
  v22.__r_.__value_.__l.__size_ = v4;
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(a1);
  uint64_t v7 = v6;
  char v8 = 1;
  while (1)
  {
    std::string::size_type v9 = v22.__r_.__value_.__r.__words[0];
    BOOL v10 = !v7 || v22.__r_.__value_.__r.__words[0] == v5;
    BOOL v11 = v10;
    if (v22.__r_.__value_.__l.__size_ == v7 && v11) {
      break;
    }
    uint64_t v13 = (long long *)(v22.__r_.__value_.__r.__words[0] + 32);
    uint64_t v14 = (long long *)v25;
    if ((unint64_t)v25 >= v26)
    {
      char v16 = (void **)sub_2167E9A44(&v24, v13);
    }
    else
    {
      if (*(char *)(v22.__r_.__value_.__r.__words[0] + 55) < 0)
      {
        sub_216778F24(v25, *(void **)(v22.__r_.__value_.__r.__words[0] + 32), *(void *)(v22.__r_.__value_.__r.__words[0] + 40));
      }
      else
      {
        long long v15 = *v13;
        v25[2] = *(void **)(v22.__r_.__value_.__r.__words[0] + 48);
        *uint64_t v14 = v15;
      }
      char v16 = (void **)v14 + 3;
    }
    uint64_t v25 = v16;
    char v19 = sub_216B7FE58(v9 + 56, (uint64_t *)v23, &v24);
    uint64_t v20 = v25 - 3;
    if (*((char *)v25 - 1) < 0) {
      operator delete(*v20);
    }
    v8 &= v19;
    uint64_t v25 = v20;
    sub_2168EF1B0(&v22, v17, v18);
  }
  pxrInternal__aapl__pxrReserved__::TfStringJoin("; ", v23, &v22);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(std::string *)a2 = v22;
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  sub_216782F20((void ***)&v22);
  v23[0] = (std::string *)&v24;
  sub_216782F20((void ***)v23);
  return v8 & 1;
}

void sub_216B7FE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void ***a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  a10 = &a13;
  sub_216782F20((void ***)&a10);
  a13 = (void **)&a16;
  sub_216782F20(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_216B7FE58(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  if (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)a1))
  {
    __p[0] = 0;
    uint64_t v6 = (uint64_t *)sub_2168EEFE0((const void *****)a1);
    pxrInternal__aapl__pxrReserved__::VtDictionary::swap(v6, (pxrInternal__aapl__pxrReserved__::VtDictionary *)__p);
    std::string v77 = (char *)pxrInternal__aapl__pxrReserved__::VtDictionary::begin((pxrInternal__aapl__pxrReserved__::VtDictionary *)__p);
    v78 = v7;
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::VtDictionary::end((pxrInternal__aapl__pxrReserved__::VtDictionary *)__p);
    BOOL v10 = v9;
    char v11 = 1;
    while (1)
    {
      char v12 = v77;
      BOOL v13 = !v10 || v77 == (char *)v8;
      BOOL v14 = v13;
      if (v78 == v10 && v14) {
        break;
      }
      char v16 = (long long *)(v77 + 32);
      unint64_t v17 = a3[1];
      if (v17 >= a3[2])
      {
        uint64_t v18 = sub_2167E9A44(a3, v16);
      }
      else
      {
        sub_2167E99E4(a3, v16);
        uint64_t v18 = v17 + 24;
      }
      a3[1] = v18;
      char v21 = sub_216B7FE58(v12 + 56, a2, a3);
      uint64_t v22 = a3[1];
      uint64_t v23 = (void **)(v22 - 24);
      if (*(char *)(v22 - 1) < 0) {
        operator delete(*v23);
      }
      v11 &= v21;
      a3[1] = (uint64_t)v23;
      sub_2168EF1B0(&v77, v19, v20);
    }
    uint64_t v30 = (uint64_t *)sub_2168EEFE0((const void *****)a1);
    pxrInternal__aapl__pxrReserved__::VtDictionary::swap(v30, (pxrInternal__aapl__pxrReserved__::VtDictionary *)__p);
    sub_2168EBBB8((void ***)__p, 0);
    return v11 & 1;
  }
  if (!sub_21696BE24((pxrInternal__aapl__pxrReserved__::VtValue *)a1))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfValueHasValidType((pxrInternal__aapl__pxrReserved__ *)a1, v24))
    {
      char v11 = 1;
      return v11 & 1;
    }
LABEL_69:
    v78 = 0;
    sub_2168ED33C((void *)a1, &v77);
    sub_2168EE084((uint64_t)&v77);
    char v11 = 0;
    return v11 & 1;
  }
  uint64_t v25 = *(void *)(a1 + 8);
  if ((v25 & 4) != 0) {
    unint64_t v26 = (const void ****)(*(uint64_t (**)(uint64_t))((v25 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    unint64_t v26 = *(const void *****)a1;
  }
  if (*v26 == v26[1])
  {
    sub_216B83848((uint64_t)a3, v73);
    if (v74 >= 0) {
      uint64_t v33 = v73;
    }
    else {
      uint64_t v33 = (void **)v73[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"cannot infer type from empty vector/list%s -- use an empty typed array like VtIntArray/VtStringArray instead", v31, v32, v33);
    unint64_t v34 = a2[2];
    unint64_t v35 = a2[1];
    if (v35 < v34)
    {
      long long v36 = *(_OWORD *)__p;
      *(void *)(v35 + 16) = v76;
      *(_OWORD *)unint64_t v35 = v36;
      __p[1] = 0;
      uint64_t v76 = 0;
      __p[0] = 0;
      a2[1] = v35 + 24;
      goto LABEL_67;
    }
    unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *a2) >> 3);
    unint64_t v47 = v46 + 1;
    if (v46 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *a2) >> 3);
    if (2 * v48 > v47) {
      unint64_t v47 = 2 * v48;
    }
    if (v48 >= 0x555555555555555) {
      unint64_t v49 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v49 = v47;
    }
    v81 = a2 + 2;
    if (v49) {
      int64_t v50 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v49);
    }
    else {
      int64_t v50 = 0;
    }
    uint64_t v56 = &v50[24 * v46];
    std::string v77 = v50;
    v78 = v56;
    uint64_t v80 = &v50[24 * v49];
    long long v57 = *(_OWORD *)__p;
    *((void *)v56 + 2) = v76;
    *(_OWORD *)uint64_t v56 = v57;
    __p[1] = 0;
    uint64_t v76 = 0;
    __p[0] = 0;
    uint64_t v79 = (uint64_t)(v56 + 24);
    sub_216790CCC(a2, &v77);
    uint64_t v58 = a2[1];
    sub_216790E64((uint64_t)&v77);
    int v59 = SHIBYTE(v76);
    a2[1] = v58;
    if ((v59 & 0x80000000) == 0) {
      goto LABEL_67;
    }
    uint64_t v60 = __p[0];
LABEL_66:
    operator delete(v60);
LABEL_67:
    if (v74 < 0) {
      operator delete(v73[0]);
    }
    goto LABEL_69;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfValueHasValidType((pxrInternal__aapl__pxrReserved__ *)*v26, v24))
  {
    sub_216B8C3EC((pxrInternal__aapl__pxrReserved__::VtValue *)*v26);
    int v37 = v74;
    v38 = (void **)v73[0];
    sub_216B83848((uint64_t)a3, v71);
    uint64_t v41 = v73;
    if (v37 < 0) {
      uint64_t v41 = v38;
    }
    if (v72 >= 0) {
      unint64_t v42 = v71;
    }
    else {
      unint64_t v42 = (void **)v71[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s%s%s is not a valid scene description datatype", v39, v40, "first vector/list element ", v41, v42);
    unint64_t v43 = a2[2];
    unint64_t v44 = a2[1];
    if (v44 >= v43)
    {
      unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - *a2) >> 3);
      unint64_t v52 = v51 + 1;
      if (v51 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - *a2) >> 3);
      if (2 * v53 > v52) {
        unint64_t v52 = 2 * v53;
      }
      if (v53 >= 0x555555555555555) {
        unint64_t v54 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v54 = v52;
      }
      v81 = a2 + 2;
      if (v54) {
        v55 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v54);
      }
      else {
        v55 = 0;
      }
      v61 = &v55[24 * v51];
      std::string v77 = v55;
      v78 = v61;
      uint64_t v80 = &v55[24 * v54];
      long long v62 = *(_OWORD *)__p;
      *((void *)v61 + 2) = v76;
      *(_OWORD *)v61 = v62;
      __p[1] = 0;
      uint64_t v76 = 0;
      __p[0] = 0;
      uint64_t v79 = (uint64_t)(v61 + 24);
      sub_216790CCC(a2, &v77);
      uint64_t v63 = a2[1];
      sub_216790E64((uint64_t)&v77);
      int v64 = SHIBYTE(v76);
      a2[1] = v63;
      if (v64 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v45 = *(_OWORD *)__p;
      *(void *)(v44 + 16) = v76;
      *(_OWORD *)unint64_t v44 = v45;
      __p[1] = 0;
      uint64_t v76 = 0;
      __p[0] = 0;
      a2[1] = v44 + 24;
    }
    if ((v72 & 0x80000000) == 0) {
      goto LABEL_67;
    }
    uint64_t v60 = v71[0];
    goto LABEL_66;
  }
  __p[0] = (void *)pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)*v26, v27, v28);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91190, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91190))
  {
    qword_267B91188 = (uint64_t)sub_216B838EC();
    __cxa_guard_release(&qword_267B91190);
  }
  uint64_t v29 = sub_2168503EC((void *)qword_267B91188, __p);
  if (!v29)
  {
    std::string v77 = "sdf/types.cpp";
    v78 = "_GetTypedValueVectorToVtArrayFn";
    uint64_t v79 = 494;
    uint64_t v80 = "_ValueVectorToVtArrayFn pxrInternal__aapl__pxrReserved__::_GetTypedValueVectorToVtArrayFn(const TfType &)";
    LOBYTE(v81) = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)__p);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v69 = TypeName;
    }
    else {
      uint64_t v69 = *(void *)TypeName;
    }
    v70 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Value type '%s' returns true from SdfValueHasValidType but does not appear in SDF_VALUE_TYPES.", v67, v68, v69);
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v77, "iter != valueVectorToVtArrayFnMap->end()", v70);
  }
  char v11 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t *))v29[3])(a1, a2, a3);
  return v11 & 1;
}

void sub_216B803D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
}

void sub_216B80588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::operator<<(void *a1, uint64_t *a2, char *a3)
{
  uint64_t v5 = *a2;
  uint64_t v4 = (uint64_t)(a2 + 1);
  uint64_t v16 = v5;
  uint64_t v17 = v4;
  if (v5 != v4)
  {
    uint64_t v6 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      uint64_t v7 = sub_216996180(&v16, v4, a3);
      uint64_t v8 = pxrInternal__aapl__pxrReserved__::operator<<(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(*v7 + 28));
      std::string::size_type v9 = sub_216779180(v8, (uint64_t)": ", 2);
      char v12 = sub_216996180(&v16, v10, v11);
      BOOL v13 = pxrInternal__aapl__pxrReserved__::operator<<(v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(*v12 + 36));
      std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
      BOOL v14 = std::locale::use_facet(&v18, v6);
      ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
      std::locale::~locale(&v18);
      std::ostream::put();
      std::ostream::flush();
      sub_2169961FC(&v16);
    }
    while (v16 != v17);
  }
  return a1;
}

void sub_216B806DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<<(uint64_t a1, uint64_t *a2, char *a3)
{
  uint64_t v5 = *a2;
  uint64_t v4 = (uint64_t)(a2 + 1);
  uint64_t v15 = v5;
  uint64_t v16 = v4;
  if (v5 != v4)
  {
    uint64_t v6 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      sub_216A9C8F4(&v15, v4, a3);
      uint64_t v7 = (void *)std::ostream::operator<<();
      uint64_t v8 = sub_216779180(v7, (uint64_t)": ", 2);
      char v11 = sub_216A9C8F4(&v15, v9, v10);
      char v12 = (void *)pxrInternal__aapl__pxrReserved__::operator<<((uint64_t)v8, *v11 + 40);
      std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
      BOOL v13 = std::locale::use_facet(&v17, v6);
      ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale(&v17);
      std::ostream::put();
      std::ostream::flush();
      sub_216A9C970(&v15);
    }
    while (v15 != v16);
  }
  return a1;
}

void sub_216B80818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
}

void *pxrInternal__aapl__pxrReserved__::VtStreamOut(void *a1, void *a2)
{
  return sub_216ABB854(a2, a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue(uint64_t this)
{
  *(void *)(this + 8) = 0;
  return this;
}

{
  *(void *)(this + 8) = 0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = &off_26C750BB8;
  sub_21691B31C((unsigned int **)a1, a2);
  return a1;
}

{
  *(void *)(a1 + 8) = &off_26C750BB8;
  sub_21691B31C((unsigned int **)a1, a2);
  return a1;
}

{
  *(void *)(a1 + 8) = &off_26C75B0C8;
  sub_216B92898((unsigned int **)a1, a2);
  return a1;
}

{
  *(void *)(a1 + 8) = &off_26C75B0C8;
  sub_216B92898((unsigned int **)a1, a2);
  return a1;
}

pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue(pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *this, const void ****a2)
{
  *((void *)this + 1) = &off_26C74DD80;
  sub_2168EEEA8((unsigned int **)this, a2);
  return this;
}

{
  *((void *)this + 1) = &off_26C74DD80;
  sub_2168EEEA8((unsigned int **)this, a2);
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator!=(pxrInternal__aapl__pxrReserved__::VtValue *a1, std::type_info *a2, char *a3)
{
  return pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(a1, a2, a3) ^ 1;
}

pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::Sdf_ValueTypeNamesType(pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *this)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName(this);
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)((char *)v2 + 8));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 16));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 24));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 32));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 40));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 48));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 56));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 64));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 72));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 80));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 88));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 96));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 104));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 112));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 120));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 128));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 136));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 144));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 152));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 160));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 168));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 176));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 184));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 192));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 200));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 208));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 216));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 224));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 232));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 240));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 248));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 256));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 264));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 272));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 280));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 288));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 296));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 304));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 312));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 320));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 328));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 336));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 344));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 352));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 360));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 368));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 376));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 384));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 392));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 400));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 408));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 416));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 424));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 432));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 440));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 448));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 456));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 464));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 472));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 480));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 488));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 496));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 504));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 512));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 520));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 528));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 536));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 544));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 552));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 560));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 568));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 576));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 584));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 592));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 600));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 608));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 616));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 624));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 632));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 640));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 648));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 656));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 664));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 672));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 680));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 688));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 696));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 704));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 712));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 720));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 728));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 736));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 744));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 752));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 760));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 768));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 776));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 784));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 792));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 800));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 808));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 816));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 824));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 832));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 840));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 848));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 856));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 864));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 872));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)this + 880));
  return this;
}

void pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::GetSerializationName(uint64_t **a1@<X1>, atomic_uint **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAliasesAsTokens(a1, v7);
  unint64_t v5 = *(void *)v7[0];
  if ((*(void *)v7[0] & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v5 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = (void **)v7;
  sub_216889A04(&v8);
  if (v5)
  {
    *a2 = (atomic_uint *)v5;
    if ((v5 & 7) != 0)
    {
      uint64_t v6 = (atomic_uint *)(v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        *a2 = v6;
      }
      atomic_fetch_add_explicit(v6, 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)a1, a2);
  }
}

void pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::GetSerializationName(const pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, atomic_uint **a2@<X8>)
{
  uint64_t v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = 0;
  uint64_t Type = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::GetSerializationName(&Type, a2);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::GetSerializationName(const pxrInternal__aapl__pxrReserved__::TfToken *a1@<X1>, atomic_uint **a2@<X8>)
{
  uint64_t v5 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t Type = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v5, a1);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type))
  {
    uint64_t v6 = *(void *)a1;
    *a2 = *(atomic_uint **)a1;
    if ((v6 & 7) != 0)
    {
      uint64_t v7 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
        *a2 = v7;
      }
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::GetSerializationName(&Type, a2);
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::hash_value(uint64_t a1)
{
  uint64_t v5 = 0;
  char v6 = 0;
  int v1 = *(char *)(a1 + 23);
  if (v1 >= 0) {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__ *)a1;
  }
  else {
    uint64_t v2 = *(pxrInternal__aapl__pxrReserved__ **)a1;
  }
  if (v1 >= 0) {
    uint64_t v3 = (char *)*(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v3 = *(char **)(a1 + 8);
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v5, v2, v3);
  return bswap64(0x9E3779B97F4A7C55 * v5);
}

{
  char v2;

  return sub_216EE0354((uint64_t)&v2, a1);
}

{
  return bswap64(0x9E3779B97F4A7C55* (*(unsigned int *)(a1 + 20)+ ((*(unsigned int *)(a1 + 20)+ (unint64_t)*(unsigned int *)(a1 + 16)+ (*(unsigned int *)(a1 + 20) + (unint64_t)*(unsigned int *)(a1 + 16))* (*(unsigned int *)(a1 + 20) + (unint64_t)*(unsigned int *)(a1 + 16))) >> 1)));
}

uint64_t *sub_216B81008()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C759D20, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C759D20, (char *)4, 1, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    char v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B810C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B8110C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C758108, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C758108, (char *)4, 1, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    char v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B811CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B81210()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C756E50, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C756E50, (char *)4, 1, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    char v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B812D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B81314()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755200, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C755200, (char *)4, 1, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    char v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B813D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B81418()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755220, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C755220, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    char v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B814D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B8151C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C756CC0, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C756CC0, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    char v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B815DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B81620()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C758458, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C758458, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    char v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B816E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B81724()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551E0, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C7551E0, (char *)0x10, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    char v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B817E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B81828()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C757FD0, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C757FD0, (char *)1, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    char v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B818E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

_DWORD *sub_216B8192C@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, void *a2@<X8>)
{
  int v3 = *(_DWORD *)sub_216B44B64(a1);
  a2[1] = &off_26C757FE0;
  uint64_t result = operator new(0x18uLL);
  *(void *)uint64_t result = &stru_26C759D20;
  result[2] = v3;
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit(result + 4, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_216B8198C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if ((v3 & 4) != 0) {
    uint64_t result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)result;
  *(void *)(a2 + 8) = (char *)&off_26C759D30 + 3;
  *(_DWORD *)a2 = v4;
  return result;
}

uint64_t sub_216B819DC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if ((v3 & 4) != 0) {
    uint64_t result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)result;
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = v4;
  return result;
}

_DWORD *sub_216B81A2C@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, void *a2@<X8>)
{
  int v3 = *(_DWORD *)sub_216A943BC(a1);
  a2[1] = &off_26C757FE0;
  uint64_t result = operator new(0x18uLL);
  *(void *)uint64_t result = &stru_26C758108;
  result[2] = v3;
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit(result + 4, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_216B81A8C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if ((v3 & 4) != 0) {
    uint64_t result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)result;
  *(void *)(a2 + 8) = (char *)&off_26C758118 + 3;
  *(_DWORD *)a2 = v4;
  return result;
}

uint64_t sub_216B81ADC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if ((v3 & 4) != 0) {
    uint64_t result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)result;
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = v4;
  return result;
}

_DWORD *sub_216B81B2C@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, void *a2@<X8>)
{
  int v3 = *(_DWORD *)sub_2169D0924(a1);
  a2[1] = &off_26C757FE0;
  uint64_t result = operator new(0x18uLL);
  *(void *)uint64_t result = &stru_26C756E50;
  result[2] = v3;
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit(result + 4, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_216B81B8C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if ((v3 & 4) != 0) {
    uint64_t result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)result;
  *(void *)(a2 + 8) = (char *)&off_26C756E60 + 3;
  *(_DWORD *)a2 = v4;
  return result;
}

uint64_t sub_216B81BDC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if ((v3 & 4) != 0) {
    uint64_t result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)result;
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = v4;
  return result;
}

uint64_t *sub_216B81C2C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C75AC48, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C75AC48, (char *)4, 1, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    char v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B81CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

_DWORD *sub_216B81D30@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, void *a2@<X8>)
{
  int v3 = *(_DWORD *)sub_216B81D90(a1);
  a2[1] = &off_26C757FE0;
  uint64_t result = operator new(0x18uLL);
  *(void *)uint64_t result = &stru_26C75AC48;
  result[2] = v3;
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit(result + 4, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_216B81D90(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_216B81E24(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      char v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_216B81EB0, (uint64_t)&stru_26C75AC48);
  }
}

uint64_t sub_216B81E24(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217476121 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C75AC48);
}

_DWORD *sub_216B81EB0@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(4uLL);
  *uint64_t result = 0;
  *a1 = result;
  a1[1] = sub_216B81EF8;
  a1[2] = &stru_26C75AC48;
  return result;
}

void sub_216B81EF8(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

uint64_t sub_216B81F04@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if ((v3 & 4) != 0) {
    uint64_t result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)result;
  *(void *)(a2 + 8) = (char *)&off_26C75AEA0 + 3;
  *(_DWORD *)a2 = v4;
  return result;
}

_DWORD *sub_216B81F54(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_216B81F64(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_216B81F70()
{
  return 1;
}

unint64_t sub_216B81F78(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_216B81F98(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_216B81FAC(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_216B81FC4()
{
  return 0;
}

void *sub_216B81FD4()
{
  return &unk_26C75AC48;
}

uint64_t sub_216B81FE0()
{
  return 0;
}

uint64_t sub_216B81FE8()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216B81FF4()
{
  return 0;
}

uint64_t sub_216B81FFC()
{
  return 0;
}

BOOL sub_216B82004(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217476121 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216B82040(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C75AC48, a2, a3);
}

void *sub_216B82064()
{
  return &unk_26C75AC48;
}

_DWORD *sub_216B82074@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26C75AEA0 + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

void *sub_216B82090(unsigned int *a1, void *a2)
{
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C75AC48, *a1, (uint64_t)__p);
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  uint64_t v5 = sub_216779180(a2, (uint64_t)v3, v4);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_216B82108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B82124@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if ((v3 & 4) != 0) {
    uint64_t result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)result;
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = v4;
  return result;
}

uint64_t *sub_216B82174()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C75AE90, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C75AE90, (char *)4, 1, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    char v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B82234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

_DWORD *sub_216B82278@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, void *a2@<X8>)
{
  int v3 = *(_DWORD *)sub_216B822D8(a1);
  a2[1] = &off_26C757FE0;
  uint64_t result = operator new(0x18uLL);
  *(void *)uint64_t result = &stru_26C75AE90;
  result[2] = v3;
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit(result + 4, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_216B822D8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_216B8236C(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      char v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_216B823F8, (uint64_t)&stru_26C75AE90);
  }
}

uint64_t sub_216B8236C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217476488 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C75AE90);
}

_DWORD *sub_216B823F8@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(4uLL);
  *uint64_t result = 0;
  *a1 = result;
  a1[1] = sub_216B82440;
  a1[2] = &stru_26C75AE90;
  return result;
}

void sub_216B82440(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

uint64_t sub_216B8244C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if ((v3 & 4) != 0) {
    uint64_t result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)result;
  *(void *)(a2 + 8) = (char *)&off_26C75AF58 + 3;
  *(_DWORD *)a2 = v4;
  return result;
}

_DWORD *sub_216B8249C(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_216B824AC(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_216B824B8()
{
  return 1;
}

unint64_t sub_216B824C0(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_216B824E0(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_216B824F4(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_216B8250C()
{
  return 0;
}

void *sub_216B8251C()
{
  return &unk_26C75AE90;
}

uint64_t sub_216B82528()
{
  return 0;
}

uint64_t sub_216B82530()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216B8253C()
{
  return 0;
}

uint64_t sub_216B82544()
{
  return 0;
}

BOOL sub_216B8254C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217476488 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216B82588(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C75AE90, a2, a3);
}

void *sub_216B825AC()
{
  return &unk_26C75AE90;
}

_DWORD *sub_216B825BC@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26C75AF58 + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

void *sub_216B825D8(unsigned int *a1, void *a2)
{
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C75AE90, *a1, (uint64_t)__p);
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  uint64_t v5 = sub_216779180(a2, (uint64_t)v3, v4);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_216B82650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B8266C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if ((v3 & 4) != 0) {
    uint64_t result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)result;
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = v4;
  return result;
}

uint64_t *sub_216B826BC()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7572B0, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C7572B0, (char *)4, 1, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    char v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B8277C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

_DWORD *sub_216B827C0@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, void *a2@<X8>)
{
  int v3 = *(_DWORD *)sub_216B82820(a1);
  a2[1] = &off_26C757FE0;
  uint64_t result = operator new(0x18uLL);
  *(void *)uint64_t result = &stru_26C7572B0;
  result[2] = v3;
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit(result + 4, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_216B82820(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_216B828B4(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      char v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_216B82940, (uint64_t)&stru_26C7572B0);
  }
}

uint64_t sub_216B828B4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217469763 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C7572B0);
}

_DWORD *sub_216B82940@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(4uLL);
  *uint64_t result = 0;
  *a1 = result;
  a1[1] = sub_216B82988;
  a1[2] = &stru_26C7572B0;
  return result;
}

void sub_216B82988(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

uint64_t sub_216B82994@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if ((v3 & 4) != 0) {
    uint64_t result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)result;
  *(void *)(a2 + 8) = (char *)&off_26C75B010 + 3;
  *(_DWORD *)a2 = v4;
  return result;
}

_DWORD *sub_216B829E4(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_216B829F4(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_216B82A00()
{
  return 1;
}

unint64_t sub_216B82A08(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_216B82A28(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_216B82A3C(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_216B82A54()
{
  return 0;
}

void *sub_216B82A64()
{
  return &unk_26C7572B0;
}

uint64_t sub_216B82A70()
{
  return 0;
}

uint64_t sub_216B82A78()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216B82A84()
{
  return 0;
}

uint64_t sub_216B82A8C()
{
  return 0;
}

BOOL sub_216B82A94(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217469763 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216B82AD0(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7572B0, a2, a3);
}

void *sub_216B82AF4()
{
  return &unk_26C7572B0;
}

_DWORD *sub_216B82B04@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26C75B010 + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

void *sub_216B82B20(unsigned int *a1, void *a2)
{
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C7572B0, *a1, (uint64_t)__p);
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  uint64_t v5 = sub_216779180(a2, (uint64_t)v3, v4);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_216B82B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B82BB4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if ((v3 & 4) != 0) {
    uint64_t result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)result;
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = v4;
  return result;
}

void *sub_216B82C04()
{
  uint64_t v0 = operator new(0x318uLL);
  v0[1] = 0;
  void *v0 = v0 + 1;
  v0[4] = 0;
  v0[2] = 0;
  v0[3] = v0 + 4;
  v0[7] = 0;
  v0[5] = 0;
  v0[6] = v0 + 7;
  v0[10] = 0;
  v0[8] = 0;
  v0[9] = v0 + 10;
  v0[11] = 0;
  bzero(v0 + 12, 0x288uLL);
  v0[95] = 0;
  v0[94] = 0;
  v0[93] = v0 + 94;
  v0[98] = 0;
  v0[97] = 0;
  v0[96] = v0 + 97;
  int v4 = &unk_26C75AC48;
  int v5 = 0;
  sub_216779094(&v3, "mm");
  sub_216779094(&__p, "Length");
  sub_216B8327C((uint64_t)v0, (int *)&v4, &v3, &__p, 0.001);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  int v4 = &unk_26C75AC48;
  int v5 = 1;
  sub_216779094(&v3, "cm");
  sub_216779094(&__p, "Length");
  sub_216B8327C((uint64_t)v0, (int *)&v4, &v3, &__p, 0.01);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  int v4 = &unk_26C75AC48;
  int v5 = 2;
  sub_216779094(&v3, "dm");
  sub_216779094(&__p, "Length");
  sub_216B8327C((uint64_t)v0, (int *)&v4, &v3, &__p, 0.1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  int v4 = &unk_26C75AC48;
  int v5 = 3;
  sub_216779094(&v3, "m");
  sub_216779094(&__p, "Length");
  sub_216B8327C((uint64_t)v0, (int *)&v4, &v3, &__p, 1.0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  int v4 = &unk_26C75AC48;
  int v5 = 4;
  sub_216779094(&v3, "km");
  sub_216779094(&__p, "Length");
  sub_216B8327C((uint64_t)v0, (int *)&v4, &v3, &__p, 1000.0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  int v4 = &unk_26C75AC48;
  int v5 = 5;
  sub_216779094(&v3, "in");
  sub_216779094(&__p, "Length");
  sub_216B8327C((uint64_t)v0, (int *)&v4, &v3, &__p, 0.0254);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  int v4 = &unk_26C75AC48;
  int v5 = 6;
  sub_216779094(&v3, "ft");
  sub_216779094(&__p, "Length");
  sub_216B8327C((uint64_t)v0, (int *)&v4, &v3, &__p, 0.3048);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  int v4 = &unk_26C75AC48;
  int v5 = 7;
  sub_216779094(&v3, "yd");
  sub_216779094(&__p, "Length");
  sub_216B8327C((uint64_t)v0, (int *)&v4, &v3, &__p, 0.9144);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  int v4 = &unk_26C75AC48;
  int v5 = 8;
  sub_216779094(&v3, "mi");
  sub_216779094(&__p, "Length");
  sub_216B8327C((uint64_t)v0, (int *)&v4, &v3, &__p, 1609.344);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  int v4 = &unk_26C75AE90;
  int v5 = 0;
  sub_216779094(&v3, "deg");
  sub_216779094(&__p, "Angular");
  sub_216B8327C((uint64_t)v0, (int *)&v4, &v3, &__p, 1.0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  int v4 = &unk_26C75AE90;
  int v5 = 1;
  sub_216779094(&v3, "rad");
  sub_216779094(&__p, "Angular");
  sub_216B8327C((uint64_t)v0, (int *)&v4, &v3, &__p, 57.2957795);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  int v4 = &unk_26C7572B0;
  int v5 = 0;
  sub_216779094(&v3, "%");
  sub_216779094(&__p, "Dimensionless");
  sub_216B8327C((uint64_t)v0, (int *)&v4, &v3, &__p, 0.01);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  int v4 = &unk_26C7572B0;
  int v5 = 1;
  sub_216779094(&v3, "default");
  sub_216779094(&__p, "Dimensionless");
  sub_216B8327C((uint64_t)v0, (int *)&v4, &v3, &__p, 1.0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  return v0;
}

void sub_216B831E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216B8327C(uint64_t a1, int *a2, std::string *a3, std::string *a4, double a5)
{
  uint64_t v10 = (char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
  sub_216779094(__p, v10);
  uint64_t v22 = __p;
  char v11 = (uint64_t **)*((void *)sub_21687CA90((uint64_t **)a1, (const void **)__p, (uint64_t)&unk_2174BFD90, (_OWORD **)&v22)+ 7);
  if (v21 < 0)
  {
    operator delete(__p[0]);
    if (v11) {
      goto LABEL_7;
    }
  }
  else if (v11)
  {
    goto LABEL_7;
  }
  char v11 = (uint64_t **)operator new(0x18uLL);
  v11[2] = 0;
  v11[1] = 0;
  void *v11 = (uint64_t *)(v11 + 1);
  sub_216779094(__p, v10);
  uint64_t v22 = __p;
  *((void *)sub_21687CA90((uint64_t **)a1, (const void **)__p, (uint64_t)&unk_2174BFD90, (_OWORD **)&v22) + 7) = v11;
  if (v21 < 0) {
    operator delete(__p[0]);
  }
LABEL_7:
  __p[0] = a2 + 2;
  *((double *)sub_216ADE9D4(v11, a2 + 2, (uint64_t)&unk_2174BFD90, (_DWORD **)__p) + 5) = a5;
  if (a5 == 1.0)
  {
    sub_216779094(__p, v10);
    uint64_t v22 = __p;
    char v12 = sub_216B835B8((uint64_t **)(a1 + 24), (const void **)__p, (uint64_t)&unk_2174BFD90, (_OWORD **)&v22);
    uint64_t v13 = *(void *)a2;
    *((_DWORD *)v12 + 16) = a2[2];
    *((void *)v12 + 7) = v13;
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    __p[0] = a4;
    BOOL v14 = sub_216B83660((uint64_t **)(a1 + 48), (const void **)&a4->__r_.__value_.__l.__data_, (uint64_t)&unk_2174BFD90, (long long **)__p);
    uint64_t v15 = *(void *)a2;
    *((_DWORD *)v14 + 16) = a2[2];
    v14[7] = v15;
    sub_216779094(__p, (char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL));
    uint64_t v22 = __p;
    uint64_t v16 = sub_21677B5F8((uint64_t **)(a1 + 72), (const void **)__p, (uint64_t)&unk_2174BFD90, (_OWORD **)&v22);
    std::string::operator=((std::string *)((char *)v16 + 56), a4);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_216779094(__p, (char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL));
  uint64_t v17 = sub_21678C2D8(a1 + 768, (const void **)__p);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  if (a1 + 776 == v17)
  {
    uint64_t v17 = *(void *)(a1 + 784);
    sub_216779094(__p, (char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL));
    uint64_t v22 = __p;
    *((_DWORD *)sub_216B837AC((uint64_t **)(a1 + 768), (const void **)__p, (uint64_t)&unk_2174BFD90, (_OWORD **)&v22) + 14) = v17;
    if (v21 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    LODWORD(v17) = *(_DWORD *)(v17 + 56);
  }
  std::string::operator=((std::string *)(a1 + 216 * v17 + 24 * a2[2] + 96), a3);
  __p[0] = a3;
  uint64_t result = sub_216B83660((uint64_t **)(a1 + 744), (const void **)&a3->__r_.__value_.__l.__data_, (uint64_t)&unk_2174BFD90, (long long **)__p);
  uint64_t v19 = *(void *)a2;
  *((_DWORD *)result + 16) = a2[2];
  result[7] = v19;
  return result;
}

void sub_216B83588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_216B835B8(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  char v6 = (void **)sub_21677B220((uint64_t)a1, &v12, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unsigned __int8 v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x48uLL);
    int v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *int v9 = 0;
    *((void *)v7 + 7) = MEMORY[0x263F8C258];
    *((_DWORD *)v7 + 16) = 0;
    sub_21677B358(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_216B83660(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  char v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_216B836F8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_21677B358(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

unsigned char *sub_216B836F8@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  char v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 32;
  unsigned __int8 v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  *((void *)v6 + 7) = MEMORY[0x263F8C258];
  *((_DWORD *)v6 + 16) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216B83790(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_21678C278(v3, v2);
  _Unwind_Resume(a1);
}

_OWORD *sub_216B837AC(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  char v6 = (void **)sub_21677B220((uint64_t)a1, &v12, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unsigned __int8 v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x40uLL);
    long long v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *long long v9 = 0;
    *((_DWORD *)v7 + 14) = 0;
    sub_21677B358(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_216B83848(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfStringJoin(":", (std::string **)a1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)" under key '%s'", v2, v3, p_p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_216B838D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_216B838EC()
{
  uint64_t v0 = operator new(0x28uLL);
  _OWORD *v0 = 0u;
  v0[1] = 0u;
  *((_DWORD *)v0 + 8) = 1065353216;
  sub_21678A04C((uint64_t)v0, 0x21uLL);
  uint64_t v3 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C230], v1, v2);
  sub_216B8C164((uint64_t)v0, v3, v3, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<BOOL>);
  char v6 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C250], v4, v5);
  sub_216B8C164((uint64_t)v0, v6, v6, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<unsigned char>);
  long long v9 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C258], v7, v8);
  sub_216B8C164((uint64_t)v0, v9, v9, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<int>);
  uint64_t v12 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C260], v10, v11);
  sub_216B8C164((uint64_t)v0, v12, v12, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<unsigned int>);
  uint64_t v15 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C290], v13, v14);
  sub_216B8C164((uint64_t)v0, v15, v15, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<long long>);
  std::locale v18 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C298], v16, v17);
  sub_216B8C164((uint64_t)v0, v18, v18, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<unsigned long long>);
  char v21 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C510, v19, v20);
  sub_216B8C164((uint64_t)v0, v21, v21, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>);
  uint64_t v24 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C248], v22, v23);
  sub_216B8C164((uint64_t)v0, v24, v24, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<float>);
  uint64_t v27 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C240], v25, v26);
  sub_216B8C164((uint64_t)v0, v27, v27, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<double>);
  uint64_t v30 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7557E0, v28, v29);
  sub_216B8C164((uint64_t)v0, v30, v30, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>);
  uint64_t v33 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C747090, v31, v32);
  sub_216B8C164((uint64_t)v0, v33, v33, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<std::string>);
  long long v36 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C2C0, v34, v35);
  sub_216B8C164((uint64_t)v0, v36, v36, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::TfToken>);
  v39 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755240, v37, v38);
  sub_216B8C164((uint64_t)v0, v39, v39, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>);
  unint64_t v42 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755210, v40, v41);
  sub_216B8C164((uint64_t)v0, v42, v42, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>);
  long long v45 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755268, v43, v44);
  sub_216B8C164((uint64_t)v0, v45, v45, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>);
  unint64_t v48 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C570, v46, v47);
  sub_216B8C164((uint64_t)v0, v48, v48, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>);
  unint64_t v51 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5A0, v49, v50);
  sub_216B8C164((uint64_t)v0, v51, v51, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>);
  unint64_t v54 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5C0, v52, v53);
  sub_216B8C164((uint64_t)v0, v54, v54, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>);
  long long v57 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C610, v55, v56);
  sub_216B8C164((uint64_t)v0, v57, v57, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfQuath>);
  uint64_t v60 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C600, v58, v59);
  sub_216B8C164((uint64_t)v0, v60, v60, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>);
  uint64_t v63 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5F0, v61, v62);
  sub_216B8C164((uint64_t)v0, v63, v63, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>);
  unint64_t v66 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C720, v64, v65);
  sub_216B8C164((uint64_t)v0, v66, v66, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>);
  uint64_t v69 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C710, v67, v68);
  sub_216B8C164((uint64_t)v0, v69, v69, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>);
  char v72 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C700, v70, v71);
  sub_216B8C164((uint64_t)v0, v72, v72, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>);
  v75 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C6F0, v73, v74);
  sub_216B8C164((uint64_t)v0, v75, v75, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>);
  v78 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C760, v76, v77);
  sub_216B8C164((uint64_t)v0, v78, v78, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>);
  v81 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C750, v79, v80);
  sub_216B8C164((uint64_t)v0, v81, v81, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>);
  v84 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C740, v82, v83);
  sub_216B8C164((uint64_t)v0, v84, v84, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>);
  v87 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C730, v85, v86);
  sub_216B8C164((uint64_t)v0, v87, v87, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>);
  v90 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C7A0, v88, v89);
  sub_216B8C164((uint64_t)v0, v90, v90, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>);
  v93 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C790, v91, v92);
  sub_216B8C164((uint64_t)v0, v93, v93, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>);
  v96 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C780, v94, v95);
  sub_216B8C164((uint64_t)v0, v96, v96, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>);
  v99 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C770, v97, v98);
  sub_216B8C164((uint64_t)v0, v99, v99, (uint64_t)pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>);
  return v0;
}

void sub_216B83EDC(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)sub_216850320(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<BOOL>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2169AA8E8((uint64_t)v50, (v7 - *v6) >> 4);
  sub_2169AAF5C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v50, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  v39 = v4;
  char v11 = v51;
  uint64_t v12 = a2 + 2;
  char v13 = 1;
  BOOL v14 = v8;
  do
  {
    sub_216B8C3A4(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v52);
    if (v53)
    {
      sub_216B8C520((pxrInternal__aapl__pxrReserved__::VtValue *)v52, v11++);
    }
    else
    {
      uint64_t v41 = v11;
      uint64_t v15 = *v6;
      sub_216B8C3EC(v14);
      uint64_t v16 = v7;
      uint64_t v17 = (uint64_t)v12;
      if (v47 >= 0) {
        std::locale v18 = &v46;
      }
      else {
        std::locale v18 = v46;
      }
      sub_216B83848(a3, v44);
      int v19 = v45;
      uint64_t v20 = (void **)v44[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C230] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v42);
      uint64_t v23 = v44;
      if (v19 < 0) {
        uint64_t v23 = v20;
      }
      uint64_t v24 = v42;
      if (v43 < 0) {
        uint64_t v24 = (void **)v42[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v21, v22, (v8 - v15) >> 4, v18, v23, v24);
      unint64_t v25 = a2[1];
      unint64_t v26 = a2[2];
      uint64_t v12 = (uint64_t *)v17;
      uint64_t v7 = v16;
      if (v25 >= v26)
      {
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *a2) >> 3);
        unint64_t v29 = v28 + 1;
        char v11 = v41;
        if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *a2) >> 3);
        if (2 * v30 > v29) {
          unint64_t v29 = 2 * v30;
        }
        if (v30 >= 0x555555555555555) {
          unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v31 = v29;
        }
        uint64_t v58 = v17;
        if (v31) {
          uint64_t v32 = (char *)sub_216782ED8(v17, v31);
        }
        else {
          uint64_t v32 = 0;
        }
        uint64_t v33 = &v32[24 * v28];
        unint64_t v54 = v32;
        v55 = v33;
        long long v57 = &v32[24 * v31];
        long long v34 = *(_OWORD *)__p;
        *((void *)v33 + 2) = v49;
        *(_OWORD *)uint64_t v33 = v34;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        uint64_t v56 = v33 + 24;
        sub_216790CCC(a2, &v54);
        uint64_t v35 = a2[1];
        sub_216790E64((uint64_t)&v54);
        int v36 = SHIBYTE(v49);
        a2[1] = v35;
        if (v36 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v27 = *(_OWORD *)__p;
        *(void *)(v25 + 16) = v49;
        *(_OWORD *)unint64_t v25 = v27;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        a2[1] = v25 + 24;
        char v11 = v41;
      }
      if (v43 < 0) {
        operator delete(v42[0]);
      }
      if (v45 < 0) {
        operator delete(v44[0]);
      }
      if (v47 < 0) {
        operator delete(v46);
      }
      char v13 = 0;
    }
    sub_2168EE084((uint64_t)v52);
    BOOL v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v14 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v14 != v7);
  int v4 = v39;
  if (v13)
  {
LABEL_36:
    sub_216B8C59C(v4, v50);
    uint64_t v37 = 1;
  }
  else
  {
    v55 = 0;
    sub_2168ED33C(v39, &v54);
    sub_2168EE084((uint64_t)&v54);
    uint64_t v37 = 0;
  }
  sub_2168F83DC((uint64_t)v50);
  return v37;
}

void sub_216B84230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<unsigned char>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_21690833C((uint64_t)v50, (v7 - *v6) >> 4);
  sub_216908624((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v50, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  v39 = v4;
  char v11 = v51;
  uint64_t v12 = a2 + 2;
  char v13 = 1;
  BOOL v14 = v8;
  do
  {
    sub_216B8C6E4(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v52);
    if (v53)
    {
      sub_216B8C72C((pxrInternal__aapl__pxrReserved__::VtValue *)v52, v11++);
    }
    else
    {
      uint64_t v41 = v11;
      uint64_t v15 = *v6;
      sub_216B8C3EC(v14);
      uint64_t v16 = v7;
      uint64_t v17 = (uint64_t)v12;
      if (v47 >= 0) {
        std::locale v18 = &v46;
      }
      else {
        std::locale v18 = v46;
      }
      sub_216B83848(a3, v44);
      int v19 = v45;
      uint64_t v20 = (void **)v44[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C250] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v42);
      uint64_t v23 = v44;
      if (v19 < 0) {
        uint64_t v23 = v20;
      }
      uint64_t v24 = v42;
      if (v43 < 0) {
        uint64_t v24 = (void **)v42[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v21, v22, (v8 - v15) >> 4, v18, v23, v24);
      unint64_t v25 = a2[1];
      unint64_t v26 = a2[2];
      uint64_t v12 = (uint64_t *)v17;
      uint64_t v7 = v16;
      if (v25 >= v26)
      {
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *a2) >> 3);
        unint64_t v29 = v28 + 1;
        char v11 = v41;
        if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *a2) >> 3);
        if (2 * v30 > v29) {
          unint64_t v29 = 2 * v30;
        }
        if (v30 >= 0x555555555555555) {
          unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v31 = v29;
        }
        uint64_t v58 = v17;
        if (v31) {
          uint64_t v32 = (char *)sub_216782ED8(v17, v31);
        }
        else {
          uint64_t v32 = 0;
        }
        uint64_t v33 = &v32[24 * v28];
        unint64_t v54 = v32;
        v55 = v33;
        long long v57 = &v32[24 * v31];
        long long v34 = *(_OWORD *)__p;
        *((void *)v33 + 2) = v49;
        *(_OWORD *)uint64_t v33 = v34;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        uint64_t v56 = v33 + 24;
        sub_216790CCC(a2, &v54);
        uint64_t v35 = a2[1];
        sub_216790E64((uint64_t)&v54);
        int v36 = SHIBYTE(v49);
        a2[1] = v35;
        if (v36 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v27 = *(_OWORD *)__p;
        *(void *)(v25 + 16) = v49;
        *(_OWORD *)unint64_t v25 = v27;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        a2[1] = v25 + 24;
        char v11 = v41;
      }
      if (v43 < 0) {
        operator delete(v42[0]);
      }
      if (v45 < 0) {
        operator delete(v44[0]);
      }
      if (v47 < 0) {
        operator delete(v46);
      }
      char v13 = 0;
    }
    sub_2168EE084((uint64_t)v52);
    BOOL v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v14 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v14 != v7);
  int v4 = v39;
  if (v13)
  {
LABEL_36:
    sub_2169086B8(v4, v50);
    uint64_t v37 = 1;
  }
  else
  {
    v55 = 0;
    sub_2168ED33C(v39, &v54);
    sub_2168EE084((uint64_t)&v54);
    uint64_t v37 = 0;
  }
  sub_2168F83DC((uint64_t)v50);
  return v37;
}

void sub_216B84630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<int>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_216907954((uint64_t)v50, (v7 - *v6) >> 4);
  sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v50, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  v39 = v4;
  char v11 = v51;
  uint64_t v12 = a2 + 2;
  char v13 = 1;
  BOOL v14 = v8;
  do
  {
    sub_216B8C8C4(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v52);
    if (v53)
    {
      sub_216B8C90C((pxrInternal__aapl__pxrReserved__::VtValue *)v52, v11++);
    }
    else
    {
      uint64_t v41 = v11;
      uint64_t v15 = *v6;
      sub_216B8C3EC(v14);
      uint64_t v16 = v7;
      uint64_t v17 = (uint64_t)v12;
      if (v47 >= 0) {
        std::locale v18 = &v46;
      }
      else {
        std::locale v18 = v46;
      }
      sub_216B83848(a3, v44);
      int v19 = v45;
      uint64_t v20 = (void **)v44[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v42);
      uint64_t v23 = v44;
      if (v19 < 0) {
        uint64_t v23 = v20;
      }
      uint64_t v24 = v42;
      if (v43 < 0) {
        uint64_t v24 = (void **)v42[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v21, v22, (v8 - v15) >> 4, v18, v23, v24);
      unint64_t v25 = a2[1];
      unint64_t v26 = a2[2];
      uint64_t v12 = (uint64_t *)v17;
      uint64_t v7 = v16;
      if (v25 >= v26)
      {
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *a2) >> 3);
        unint64_t v29 = v28 + 1;
        char v11 = v41;
        if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *a2) >> 3);
        if (2 * v30 > v29) {
          unint64_t v29 = 2 * v30;
        }
        if (v30 >= 0x555555555555555) {
          unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v31 = v29;
        }
        uint64_t v58 = v17;
        if (v31) {
          uint64_t v32 = (char *)sub_216782ED8(v17, v31);
        }
        else {
          uint64_t v32 = 0;
        }
        uint64_t v33 = &v32[24 * v28];
        unint64_t v54 = v32;
        v55 = v33;
        long long v57 = &v32[24 * v31];
        long long v34 = *(_OWORD *)__p;
        *((void *)v33 + 2) = v49;
        *(_OWORD *)uint64_t v33 = v34;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        uint64_t v56 = v33 + 24;
        sub_216790CCC(a2, &v54);
        uint64_t v35 = a2[1];
        sub_216790E64((uint64_t)&v54);
        int v36 = SHIBYTE(v49);
        a2[1] = v35;
        if (v36 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v27 = *(_OWORD *)__p;
        *(void *)(v25 + 16) = v49;
        *(_OWORD *)unint64_t v25 = v27;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        a2[1] = v25 + 24;
        char v11 = v41;
      }
      if (v43 < 0) {
        operator delete(v42[0]);
      }
      if (v45 < 0) {
        operator delete(v44[0]);
      }
      if (v47 < 0) {
        operator delete(v46);
      }
      char v13 = 0;
    }
    sub_2168EE084((uint64_t)v52);
    BOOL v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v14 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v14 != v7);
  int v4 = v39;
  if (v13)
  {
LABEL_36:
    sub_216907D0C(v4, v50);
    uint64_t v37 = 1;
  }
  else
  {
    v55 = 0;
    sub_2168ED33C(v39, &v54);
    sub_2168EE084((uint64_t)&v54);
    uint64_t v37 = 0;
  }
  sub_2168F83DC((uint64_t)v50);
  return v37;
}

void sub_216B84A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<unsigned int>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_216906CDC((uint64_t)v50, (v7 - *v6) >> 4);
  sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v50, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  v39 = v4;
  char v11 = v51;
  uint64_t v12 = a2 + 2;
  char v13 = 1;
  BOOL v14 = v8;
  do
  {
    sub_216B8CA18(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v52);
    if (v53)
    {
      sub_216B8CA60((pxrInternal__aapl__pxrReserved__::VtValue *)v52, v11++);
    }
    else
    {
      uint64_t v41 = v11;
      uint64_t v15 = *v6;
      sub_216B8C3EC(v14);
      uint64_t v16 = v7;
      uint64_t v17 = (uint64_t)v12;
      if (v47 >= 0) {
        std::locale v18 = &v46;
      }
      else {
        std::locale v18 = v46;
      }
      sub_216B83848(a3, v44);
      int v19 = v45;
      uint64_t v20 = (void **)v44[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C260] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v42);
      uint64_t v23 = v44;
      if (v19 < 0) {
        uint64_t v23 = v20;
      }
      uint64_t v24 = v42;
      if (v43 < 0) {
        uint64_t v24 = (void **)v42[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v21, v22, (v8 - v15) >> 4, v18, v23, v24);
      unint64_t v25 = a2[1];
      unint64_t v26 = a2[2];
      uint64_t v12 = (uint64_t *)v17;
      uint64_t v7 = v16;
      if (v25 >= v26)
      {
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *a2) >> 3);
        unint64_t v29 = v28 + 1;
        char v11 = v41;
        if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *a2) >> 3);
        if (2 * v30 > v29) {
          unint64_t v29 = 2 * v30;
        }
        if (v30 >= 0x555555555555555) {
          unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v31 = v29;
        }
        uint64_t v58 = v17;
        if (v31) {
          uint64_t v32 = (char *)sub_216782ED8(v17, v31);
        }
        else {
          uint64_t v32 = 0;
        }
        uint64_t v33 = &v32[24 * v28];
        unint64_t v54 = v32;
        v55 = v33;
        long long v57 = &v32[24 * v31];
        long long v34 = *(_OWORD *)__p;
        *((void *)v33 + 2) = v49;
        *(_OWORD *)uint64_t v33 = v34;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        uint64_t v56 = v33 + 24;
        sub_216790CCC(a2, &v54);
        uint64_t v35 = a2[1];
        sub_216790E64((uint64_t)&v54);
        int v36 = SHIBYTE(v49);
        a2[1] = v35;
        if (v36 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v27 = *(_OWORD *)__p;
        *(void *)(v25 + 16) = v49;
        *(_OWORD *)unint64_t v25 = v27;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        a2[1] = v25 + 24;
        char v11 = v41;
      }
      if (v43 < 0) {
        operator delete(v42[0]);
      }
      if (v45 < 0) {
        operator delete(v44[0]);
      }
      if (v47 < 0) {
        operator delete(v46);
      }
      char v13 = 0;
    }
    sub_2168EE084((uint64_t)v52);
    BOOL v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v14 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v14 != v7);
  int v4 = v39;
  if (v13)
  {
LABEL_36:
    sub_216907130(v4, v50);
    uint64_t v37 = 1;
  }
  else
  {
    v55 = 0;
    sub_2168ED33C(v39, &v54);
    sub_2168EE084((uint64_t)&v54);
    uint64_t v37 = 0;
  }
  sub_2168F83DC((uint64_t)v50);
  return v37;
}

void sub_216B84E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<long long>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2169AD8FC((uint64_t)v50, (v7 - *v6) >> 4);
  sub_2169AE038((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v50, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  v39 = v4;
  char v11 = v51;
  uint64_t v12 = a2 + 2;
  char v13 = 1;
  BOOL v14 = v8;
  do
  {
    sub_216B8CC30(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v52);
    if (v53)
    {
      sub_216B8CC78((pxrInternal__aapl__pxrReserved__::VtValue *)v52, v11++);
    }
    else
    {
      uint64_t v41 = v11;
      uint64_t v15 = *v6;
      sub_216B8C3EC(v14);
      uint64_t v16 = v7;
      uint64_t v17 = (uint64_t)v12;
      if (v47 >= 0) {
        std::locale v18 = &v46;
      }
      else {
        std::locale v18 = v46;
      }
      sub_216B83848(a3, v44);
      int v19 = v45;
      uint64_t v20 = (void **)v44[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C290] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v42);
      uint64_t v23 = v44;
      if (v19 < 0) {
        uint64_t v23 = v20;
      }
      uint64_t v24 = v42;
      if (v43 < 0) {
        uint64_t v24 = (void **)v42[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v21, v22, (v8 - v15) >> 4, v18, v23, v24);
      unint64_t v25 = a2[1];
      unint64_t v26 = a2[2];
      uint64_t v12 = (uint64_t *)v17;
      uint64_t v7 = v16;
      if (v25 >= v26)
      {
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *a2) >> 3);
        unint64_t v29 = v28 + 1;
        char v11 = v41;
        if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *a2) >> 3);
        if (2 * v30 > v29) {
          unint64_t v29 = 2 * v30;
        }
        if (v30 >= 0x555555555555555) {
          unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v31 = v29;
        }
        uint64_t v58 = v17;
        if (v31) {
          uint64_t v32 = (char *)sub_216782ED8(v17, v31);
        }
        else {
          uint64_t v32 = 0;
        }
        uint64_t v33 = &v32[24 * v28];
        unint64_t v54 = v32;
        v55 = v33;
        long long v57 = &v32[24 * v31];
        long long v34 = *(_OWORD *)__p;
        *((void *)v33 + 2) = v49;
        *(_OWORD *)uint64_t v33 = v34;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        uint64_t v56 = v33 + 24;
        sub_216790CCC(a2, &v54);
        uint64_t v35 = a2[1];
        sub_216790E64((uint64_t)&v54);
        int v36 = SHIBYTE(v49);
        a2[1] = v35;
        if (v36 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v27 = *(_OWORD *)__p;
        *(void *)(v25 + 16) = v49;
        *(_OWORD *)unint64_t v25 = v27;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        a2[1] = v25 + 24;
        char v11 = v41;
      }
      if (v43 < 0) {
        operator delete(v42[0]);
      }
      if (v45 < 0) {
        operator delete(v44[0]);
      }
      if (v47 < 0) {
        operator delete(v46);
      }
      char v13 = 0;
    }
    sub_2168EE084((uint64_t)v52);
    BOOL v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v14 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v14 != v7);
  int v4 = v39;
  if (v13)
  {
LABEL_36:
    sub_216B8CCF0(v4, v50);
    uint64_t v37 = 1;
  }
  else
  {
    v55 = 0;
    sub_2168ED33C(v39, &v54);
    sub_2168EE084((uint64_t)&v54);
    uint64_t v37 = 0;
  }
  sub_2168F83DC((uint64_t)v50);
  return v37;
}

void sub_216B85230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<unsigned long long>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2169AE9CC((uint64_t)v50, (v7 - *v6) >> 4);
  sub_2169AF080((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v50, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  v39 = v4;
  char v11 = v51;
  uint64_t v12 = a2 + 2;
  char v13 = 1;
  BOOL v14 = v8;
  do
  {
    sub_216B8CEC4(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v52);
    if (v53)
    {
      sub_216B8CF0C((pxrInternal__aapl__pxrReserved__::VtValue *)v52, v11++);
    }
    else
    {
      uint64_t v41 = v11;
      uint64_t v15 = *v6;
      sub_216B8C3EC(v14);
      uint64_t v16 = v7;
      uint64_t v17 = (uint64_t)v12;
      if (v47 >= 0) {
        std::locale v18 = &v46;
      }
      else {
        std::locale v18 = v46;
      }
      sub_216B83848(a3, v44);
      int v19 = v45;
      uint64_t v20 = (void **)v44[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C298] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v42);
      uint64_t v23 = v44;
      if (v19 < 0) {
        uint64_t v23 = v20;
      }
      uint64_t v24 = v42;
      if (v43 < 0) {
        uint64_t v24 = (void **)v42[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v21, v22, (v8 - v15) >> 4, v18, v23, v24);
      unint64_t v25 = a2[1];
      unint64_t v26 = a2[2];
      uint64_t v12 = (uint64_t *)v17;
      uint64_t v7 = v16;
      if (v25 >= v26)
      {
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *a2) >> 3);
        unint64_t v29 = v28 + 1;
        char v11 = v41;
        if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *a2) >> 3);
        if (2 * v30 > v29) {
          unint64_t v29 = 2 * v30;
        }
        if (v30 >= 0x555555555555555) {
          unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v31 = v29;
        }
        uint64_t v58 = v17;
        if (v31) {
          uint64_t v32 = (char *)sub_216782ED8(v17, v31);
        }
        else {
          uint64_t v32 = 0;
        }
        uint64_t v33 = &v32[24 * v28];
        unint64_t v54 = v32;
        v55 = v33;
        long long v57 = &v32[24 * v31];
        long long v34 = *(_OWORD *)__p;
        *((void *)v33 + 2) = v49;
        *(_OWORD *)uint64_t v33 = v34;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        uint64_t v56 = v33 + 24;
        sub_216790CCC(a2, &v54);
        uint64_t v35 = a2[1];
        sub_216790E64((uint64_t)&v54);
        int v36 = SHIBYTE(v49);
        a2[1] = v35;
        if (v36 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v27 = *(_OWORD *)__p;
        *(void *)(v25 + 16) = v49;
        *(_OWORD *)unint64_t v25 = v27;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        a2[1] = v25 + 24;
        char v11 = v41;
      }
      if (v43 < 0) {
        operator delete(v42[0]);
      }
      if (v45 < 0) {
        operator delete(v44[0]);
      }
      if (v47 < 0) {
        operator delete(v46);
      }
      char v13 = 0;
    }
    sub_2168EE084((uint64_t)v52);
    BOOL v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v14 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v14 != v7);
  int v4 = v39;
  if (v13)
  {
LABEL_36:
    sub_216B8CF84(v4, v50);
    uint64_t v37 = 1;
  }
  else
  {
    v55 = 0;
    sub_2168ED33C(v39, &v54);
    sub_2168EE084((uint64_t)&v54);
    uint64_t v37 = 0;
  }
  sub_2168F83DC((uint64_t)v50);
  return v37;
}

void sub_216B85630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2168F8F50((uint64_t)v46, (v7 - *v6) >> 4);
  sub_2168F930C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  char v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B8D2F4(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_216B8D33C((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11++);
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4222 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        unint64_t v54 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        int64_t v50 = v29;
        unint64_t v51 = v30;
        uint64_t v53 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v52 = v30 + 24;
        sub_216790CCC(a2, &v50);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v50);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_2168F93A4(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    unint64_t v51 = 0;
    sub_2168ED33C(v36, &v50);
    sub_2168EE084((uint64_t)&v50);
    uint64_t v34 = 0;
  }
  sub_2168F83DC((uint64_t)v46);
  return v34;
}

void sub_216B85A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<float>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2168F8250((uint64_t)v50, (v7 - *v6) >> 4);
  sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v50, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  char v39 = v4;
  char v11 = v51;
  char v12 = a2 + 2;
  char v13 = 1;
  BOOL v14 = v8;
  do
  {
    sub_216B8D50C(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v52);
    if (v53)
    {
      sub_216B8D554((pxrInternal__aapl__pxrReserved__::VtValue *)v52, v11++);
    }
    else
    {
      char v41 = v11;
      uint64_t v15 = *v6;
      sub_216B8C3EC(v14);
      int v16 = v7;
      uint64_t v17 = (uint64_t)v12;
      if (v47 >= 0) {
        std::locale v18 = &v46;
      }
      else {
        std::locale v18 = v46;
      }
      sub_216B83848(a3, v44);
      int v19 = v45;
      uint64_t v20 = (void **)v44[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C248] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v42);
      unint64_t v23 = v44;
      if (v19 < 0) {
        unint64_t v23 = v20;
      }
      long long v24 = v42;
      if (v43 < 0) {
        long long v24 = (void **)v42[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v21, v22, (v8 - v15) >> 4, v18, v23, v24);
      unint64_t v25 = a2[1];
      unint64_t v26 = a2[2];
      char v12 = (uint64_t *)v17;
      uint64_t v7 = v16;
      if (v25 >= v26)
      {
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *a2) >> 3);
        unint64_t v29 = v28 + 1;
        char v11 = v41;
        if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *a2) >> 3);
        if (2 * v30 > v29) {
          unint64_t v29 = 2 * v30;
        }
        if (v30 >= 0x555555555555555) {
          unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v31 = v29;
        }
        uint64_t v58 = v17;
        if (v31) {
          uint64_t v32 = (char *)sub_216782ED8(v17, v31);
        }
        else {
          uint64_t v32 = 0;
        }
        int v33 = &v32[24 * v28];
        unint64_t v54 = v32;
        uint64_t v55 = v33;
        long long v57 = &v32[24 * v31];
        long long v34 = *(_OWORD *)__p;
        *((void *)v33 + 2) = v49;
        *(_OWORD *)int v33 = v34;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        uint64_t v56 = v33 + 24;
        sub_216790CCC(a2, &v54);
        uint64_t v35 = a2[1];
        sub_216790E64((uint64_t)&v54);
        int v36 = SHIBYTE(v49);
        a2[1] = v35;
        if (v36 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v27 = *(_OWORD *)__p;
        *(void *)(v25 + 16) = v49;
        *(_OWORD *)unint64_t v25 = v27;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        a2[1] = v25 + 24;
        char v11 = v41;
      }
      if (v43 < 0) {
        operator delete(v42[0]);
      }
      if (v45 < 0) {
        operator delete(v44[0]);
      }
      if (v47 < 0) {
        operator delete(v46);
      }
      char v13 = 0;
    }
    sub_2168EE084((uint64_t)v52);
    BOOL v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v14 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v14 != v7);
  int v4 = v39;
  if (v13)
  {
LABEL_36:
    sub_2168F87A8(v4, v50);
    uint64_t v37 = 1;
  }
  else
  {
    uint64_t v55 = 0;
    sub_2168ED33C(v39, &v54);
    sub_2168EE084((uint64_t)&v54);
    uint64_t v37 = 0;
  }
  sub_2168F83DC((uint64_t)v50);
  return v37;
}

void sub_216B85E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<double>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2168F9ADC((uint64_t)v50, (v7 - *v6) >> 4);
  sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v50, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  char v39 = v4;
  char v11 = v51;
  char v12 = a2 + 2;
  char v13 = 1;
  BOOL v14 = v8;
  do
  {
    sub_216B8D5D0(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v52);
    if (v53)
    {
      sub_216B8D618((pxrInternal__aapl__pxrReserved__::VtValue *)v52, v11++);
    }
    else
    {
      char v41 = v11;
      uint64_t v15 = *v6;
      sub_216B8C3EC(v14);
      int v16 = v7;
      uint64_t v17 = (uint64_t)v12;
      if (v47 >= 0) {
        std::locale v18 = &v46;
      }
      else {
        std::locale v18 = v46;
      }
      sub_216B83848(a3, v44);
      int v19 = v45;
      uint64_t v20 = (void **)v44[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v42);
      unint64_t v23 = v44;
      if (v19 < 0) {
        unint64_t v23 = v20;
      }
      long long v24 = v42;
      if (v43 < 0) {
        long long v24 = (void **)v42[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v21, v22, (v8 - v15) >> 4, v18, v23, v24);
      unint64_t v25 = a2[1];
      unint64_t v26 = a2[2];
      char v12 = (uint64_t *)v17;
      uint64_t v7 = v16;
      if (v25 >= v26)
      {
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *a2) >> 3);
        unint64_t v29 = v28 + 1;
        char v11 = v41;
        if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *a2) >> 3);
        if (2 * v30 > v29) {
          unint64_t v29 = 2 * v30;
        }
        if (v30 >= 0x555555555555555) {
          unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v31 = v29;
        }
        uint64_t v58 = v17;
        if (v31) {
          uint64_t v32 = (char *)sub_216782ED8(v17, v31);
        }
        else {
          uint64_t v32 = 0;
        }
        int v33 = &v32[24 * v28];
        unint64_t v54 = v32;
        uint64_t v55 = v33;
        long long v57 = &v32[24 * v31];
        long long v34 = *(_OWORD *)__p;
        *((void *)v33 + 2) = v49;
        *(_OWORD *)int v33 = v34;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        uint64_t v56 = v33 + 24;
        sub_216790CCC(a2, &v54);
        uint64_t v35 = a2[1];
        sub_216790E64((uint64_t)&v54);
        int v36 = SHIBYTE(v49);
        a2[1] = v35;
        if (v36 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v27 = *(_OWORD *)__p;
        *(void *)(v25 + 16) = v49;
        *(_OWORD *)unint64_t v25 = v27;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        a2[1] = v25 + 24;
        char v11 = v41;
      }
      if (v43 < 0) {
        operator delete(v42[0]);
      }
      if (v45 < 0) {
        operator delete(v44[0]);
      }
      if (v47 < 0) {
        operator delete(v46);
      }
      char v13 = 0;
    }
    sub_2168EE084((uint64_t)v52);
    BOOL v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v14 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v14 != v7);
  int v4 = v39;
  if (v13)
  {
LABEL_36:
    sub_2168F9E94(v4, v50);
    uint64_t v37 = 1;
  }
  else
  {
    uint64_t v55 = 0;
    sub_2168ED33C(v39, &v54);
    sub_2168EE084((uint64_t)&v54);
    uint64_t v37 = 0;
  }
  sub_2168F83DC((uint64_t)v50);
  return v37;
}

void sub_216B86220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2169B0D90((uint64_t)v46, (v7 - *v6) >> 4);
  sub_2169B1440((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  char v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B8D690(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_216B8D6D8((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11++);
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217468BA7 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        unint64_t v54 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        int64_t v50 = v29;
        unint64_t v51 = v30;
        uint64_t v53 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v52 = v30 + 24;
        sub_216790CCC(a2, &v50);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v50);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_216B8D734(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    unint64_t v51 = 0;
    sub_2168ED33C(v36, &v50);
    sub_2168EE084((uint64_t)&v50);
    uint64_t v34 = 0;
  }
  sub_2168F83DC((uint64_t)v46);
  return v34;
}

void sub_216B86610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<std::string>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2169B19A0((uint64_t)v46, (v7 - *v6) >> 4);
  sub_2169B23EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  char v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B8DC24(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_216B8DC6C((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11);
      char v11 = (__n128 *)((char *)v11 + 24);
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174BFD94 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        unint64_t v54 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        int64_t v50 = v29;
        unint64_t v51 = v30;
        uint64_t v53 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v52 = v30 + 24;
        sub_216790CCC(a2, &v50);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v50);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_216B8DD08(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    unint64_t v51 = 0;
    sub_2168ED33C(v36, &v50);
    sub_2168EE084((uint64_t)&v50);
    uint64_t v34 = 0;
  }
  sub_2169B1EE4(v46);
  return v34;
}

void sub_216B86A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::TfToken>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2169B28F8((uint64_t)v46, (v7 - *v6) >> 4);
  sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  char v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B8DF24(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v48[1])
    {
      sub_216B8DF6C(v48, v11++);
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217473E3CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v53 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        uint64_t v49 = v29;
        int64_t v50 = v30;
        unint64_t v52 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v51 = v30 + 24;
        sub_216790CCC(a2, &v49);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v49);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_216B8DFFC(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    int64_t v50 = 0;
    sub_2168ED33C(v36, &v49);
    sub_2168EE084((uint64_t)&v49);
    uint64_t v34 = 0;
  }
  sub_2169B2E0C(v46);
  return v34;
}

void sub_216B86DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2169B3E0C((uint64_t)v46, (v7 - *v6) >> 4);
  sub_2169B49FC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  uint64_t v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B8E2DC(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_216B8E324((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11);
      v11 += 48;
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000021746880ALL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v54 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        int64_t v50 = v29;
        unint64_t v51 = v30;
        uint64_t v53 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v52 = v30 + 24;
        sub_216790CCC(a2, &v50);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v50);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_216B8E3E8(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    unint64_t v51 = 0;
    sub_2168ED33C(v36, &v50);
    sub_2168EE084((uint64_t)&v50);
    uint64_t v34 = 0;
  }
  sub_2169B4408(v46);
  return v34;
}

void sub_216B871E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2169B4DEC((uint64_t)v46, (v7 - *v6) >> 4);
  sub_2169B5370((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  uint64_t v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B8E7F4(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_216B8E83C((pxrInternal__aapl__pxrReserved__::VtValue *)v48);
      ++v11;
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217468799 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v54 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        int64_t v50 = v29;
        unint64_t v51 = v30;
        uint64_t v53 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v52 = v30 + 24;
        sub_216790CCC(a2, &v50);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v50);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_216B8E8AC(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    unint64_t v51 = 0;
    sub_2168ED33C(v36, &v50);
    sub_2168EE084((uint64_t)&v50);
    uint64_t v34 = 0;
  }
  sub_2168F83DC((uint64_t)v46);
  return v34;
}

void sub_216B875D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2169B82EC((uint64_t)v46, (v7 - *v6) >> 4);
  sub_2169B8E9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  uint64_t v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B8EC70(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_216B8ECB8((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11);
      v11 += 96;
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217478EC2 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v54 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        int64_t v50 = v29;
        unint64_t v51 = v30;
        uint64_t v53 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v52 = v30 + 24;
        sub_216790CCC(a2, &v50);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v50);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_216B8ED74(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    unint64_t v51 = 0;
    sub_2168ED33C(v36, &v50);
    sub_2168EE084((uint64_t)&v50);
    uint64_t v34 = 0;
  }
  sub_2169B88CC(v46);
  return v34;
}

void sub_216B879C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2169C035C((uint64_t)v46, (v7 - *v6) >> 4);
  sub_2169C0A9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  uint64_t v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B8F194(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_216B8F1DC((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11);
      v11 += 2;
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217452F88 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v54 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        int64_t v50 = v29;
        unint64_t v51 = v30;
        uint64_t v53 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v52 = v30 + 24;
        sub_216790CCC(a2, &v50);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v50);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_216B8F268(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    unint64_t v51 = 0;
    sub_2168ED33C(v36, &v50);
    sub_2168EE084((uint64_t)&v50);
    uint64_t v34 = 0;
  }
  sub_2168F83DC((uint64_t)v46);
  return v34;
}

void sub_216B87DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2169C1040((uint64_t)v46, (v7 - *v6) >> 4);
  sub_2169C195C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  uint64_t v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B8F5A8(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_216B8F5F0((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11);
      v11 += 72;
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4256 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v54 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        int64_t v50 = v29;
        unint64_t v51 = v30;
        uint64_t v53 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v52 = v30 + 24;
        sub_216790CCC(a2, &v50);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v50);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_216B8F6D4(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    unint64_t v51 = 0;
    sub_2168ED33C(v36, &v50);
    sub_2168EE084((uint64_t)&v50);
    uint64_t v34 = 0;
  }
  sub_2168F83DC((uint64_t)v46);
  return v34;
}

void sub_216B881A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2169020B0((uint64_t)v46, (v7 - *v6) >> 4);
  sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  uint64_t v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B8FA24(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_216B8FA6C((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11);
      v11 += 8;
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E42C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v54 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        int64_t v50 = v29;
        unint64_t v51 = v30;
        uint64_t v53 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v52 = v30 + 24;
        sub_216790CCC(a2, &v50);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v50);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_2169025F8(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    unint64_t v51 = 0;
    sub_2168ED33C(v36, &v50);
    sub_2168EE084((uint64_t)&v50);
    uint64_t v34 = 0;
  }
  sub_2168F83DC((uint64_t)v46);
  return v34;
}

void sub_216B88590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfQuath>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2169046B8((uint64_t)v46, (v7 - *v6) >> 4);
  sub_216904A70((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  uint64_t v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B8FC78(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_216B8FCC0((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11++);
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4546 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v54 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        int64_t v50 = v29;
        unint64_t v51 = v30;
        uint64_t v53 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v52 = v30 + 24;
        sub_216790CCC(a2, &v50);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v50);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_216904B08(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    unint64_t v51 = 0;
    sub_2168ED33C(v36, &v50);
    sub_2168EE084((uint64_t)&v50);
    uint64_t v34 = 0;
  }
  sub_2168F83DC((uint64_t)v46);
  return v34;
}

void sub_216B88980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_216903AC8((uint64_t)v46, (v7 - *v6) >> 4);
  sub_216903EB4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  uint64_t v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B8FF0C(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v48[1])
    {
      sub_216B8FF54(v48, v11++);
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4576 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v53 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        uint64_t v49 = v29;
        int64_t v50 = v30;
        unint64_t v52 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v51 = v30 + 24;
        sub_216790CCC(a2, &v49);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v49);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_216903F4C(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    int64_t v50 = 0;
    sub_2168ED33C(v36, &v49);
    sub_2168EE084((uint64_t)&v49);
    uint64_t v34 = 0;
  }
  sub_2168F83DC((uint64_t)v46);
  return v34;
}

void sub_216B88D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_216905300((uint64_t)v46, (v7 - *v6) >> 4);
  sub_21690562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  uint64_t v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B90128(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_216B90170((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11);
      v11 += 2;
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E45A6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v54 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        int64_t v50 = v29;
        unint64_t v51 = v30;
        uint64_t v53 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v52 = v30 + 24;
        sub_216790CCC(a2, &v50);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v50);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_2169056C4(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    unint64_t v51 = 0;
    sub_2168ED33C(v36, &v50);
    sub_2168EE084((uint64_t)&v50);
    uint64_t v34 = 0;
  }
  sub_2168F83DC((uint64_t)v46);
  return v34;
}

void sub_216B89160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2169B94DC((uint64_t)v46, (v7 - *v6) >> 4);
  sub_2169B9C54((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  uint64_t v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B90344(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_216B9038C((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11++);
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4396 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v54 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        int64_t v50 = v29;
        unint64_t v51 = v30;
        uint64_t v53 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v52 = v30 + 24;
        sub_216790CCC(a2, &v50);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v50);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_216B90404(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    unint64_t v51 = 0;
    sub_2168ED33C(v36, &v50);
    sub_2168EE084((uint64_t)&v50);
    uint64_t v34 = 0;
  }
  sub_2168F83DC((uint64_t)v46);
  return v34;
}

void sub_216B89550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2168FB500((uint64_t)v46, (v7 - *v6) >> 4);
  sub_2168FB8BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  uint64_t v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B907AC(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_216B907F4((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11++);
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4366 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v54 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        int64_t v50 = v29;
        unint64_t v51 = v30;
        uint64_t v53 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v52 = v30 + 24;
        sub_216790CCC(a2, &v50);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v50);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_2168FB954(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    unint64_t v51 = 0;
    sub_2168ED33C(v36, &v50);
    sub_2168EE084((uint64_t)&v50);
    uint64_t v34 = 0;
  }
  sub_2168F83DC((uint64_t)v46);
  return v34;
}

void sub_216B89940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2168FA95C((uint64_t)v46, (v7 - *v6) >> 4);
  sub_2168FAD50((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  uint64_t v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B909C4(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_216B90A0C((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11++);
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174C2ED4 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v54 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        int64_t v50 = v29;
        unint64_t v51 = v30;
        uint64_t v53 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v52 = v30 + 24;
        sub_216790CCC(a2, &v50);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v50);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_2168FADE8(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    unint64_t v51 = 0;
    sub_2168ED33C(v36, &v50);
    sub_2168EE084((uint64_t)&v50);
    uint64_t v34 = 0;
  }
  sub_2168F83DC((uint64_t)v46);
  return v34;
}

void sub_216B89D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2168FC144((uint64_t)v46, (v7 - *v6) >> 4);
  sub_2168FC460((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  uint64_t v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B90A84(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v48[1])
    {
      sub_216B90ACC(v48, v11++);
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4336 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v53 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        uint64_t v49 = v29;
        int64_t v50 = v30;
        unint64_t v52 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v51 = v30 + 24;
        sub_216790CCC(a2, &v49);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v49);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_2168FC4F8(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    int64_t v50 = 0;
    sub_2168ED33C(v36, &v49);
    sub_2168EE084((uint64_t)&v49);
    uint64_t v34 = 0;
  }
  sub_2168F83DC((uint64_t)v46);
  return v34;
}

void sub_216B8A120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2169BB3AC((uint64_t)v46, (v7 - *v6) >> 4);
  sub_2169BBC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  uint64_t v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B90C40(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_216B90C88((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11);
      v11 += 12;
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4456 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v54 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        int64_t v50 = v29;
        unint64_t v51 = v30;
        uint64_t v53 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v52 = v30 + 24;
        sub_216790CCC(a2, &v50);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v50);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_216B90D24(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    unint64_t v51 = 0;
    sub_2168ED33C(v36, &v50);
    sub_2168EE084((uint64_t)&v50);
    uint64_t v34 = 0;
  }
  sub_2168F83DC((uint64_t)v46);
  return v34;
}

void sub_216B8A510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2168FDCC0((uint64_t)v46, (v7 - *v6) >> 4);
  sub_2168FE0EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  uint64_t v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B911C4(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_216B9120C((uint64_t)v48, v11);
      v11 += 6;
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4426 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v54 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        int64_t v50 = v29;
        unint64_t v51 = v30;
        uint64_t v53 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v52 = v30 + 24;
        sub_216790CCC(a2, &v50);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v50);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_2168FE194(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    unint64_t v51 = 0;
    sub_2168ED33C(v36, &v50);
    sub_2168EE084((uint64_t)&v50);
    uint64_t v34 = 0;
  }
  sub_2168F83DC((uint64_t)v46);
  return v34;
}

void sub_216B8A900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2168FD0E8((uint64_t)v46, (v7 - *v6) >> 4);
  sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  uint64_t v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B913F8(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_216B91440((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11);
      v11 += 12;
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43F6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v54 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        int64_t v50 = v29;
        unint64_t v51 = v30;
        uint64_t v53 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v52 = v30 + 24;
        sub_216790CCC(a2, &v50);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v50);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_2168FD5F4(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    unint64_t v51 = 0;
    sub_2168ED33C(v36, &v50);
    sub_2168EE084((uint64_t)&v50);
    uint64_t v34 = 0;
  }
  sub_2168F83DC((uint64_t)v46);
  return v34;
}

void sub_216B8ACF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2168FE9F8((uint64_t)v46, (v7 - *v6) >> 4);
  sub_2168FED88((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  uint64_t v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B915D0(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_216B91618((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11);
      uint64_t v11 = (__n128 *)((char *)v11 + 24);
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v54 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        int64_t v50 = v29;
        unint64_t v51 = v30;
        uint64_t v53 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v52 = v30 + 24;
        sub_216790CCC(a2, &v50);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v50);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_2168FEE30(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    unint64_t v51 = 0;
    sub_2168ED33C(v36, &v50);
    sub_2168EE084((uint64_t)&v50);
    uint64_t v34 = 0;
  }
  sub_2168F83DC((uint64_t)v46);
  return v34;
}

void sub_216B8B0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2169BD4D8((uint64_t)v46, (v7 - *v6) >> 4);
  sub_2169BDD28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  uint64_t v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B917A8(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v48[1])
    {
      sub_216B917F0(v48, v11++);
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4516 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v53 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        uint64_t v49 = v29;
        int64_t v50 = v30;
        unint64_t v52 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v51 = v30 + 24;
        sub_216790CCC(a2, &v49);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v49);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_216B91878(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    int64_t v50 = 0;
    sub_2168ED33C(v36, &v49);
    sub_2168EE084((uint64_t)&v49);
    uint64_t v34 = 0;
  }
  sub_2168F83DC((uint64_t)v46);
  return v34;
}

void sub_216B8B4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_216900518((uint64_t)v46, (v7 - *v6) >> 4);
  sub_2169008D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  uint64_t v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B91D10(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_216B91D58((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11++);
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E44E6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v54 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        int64_t v50 = v29;
        unint64_t v51 = v30;
        uint64_t v53 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v52 = v30 + 24;
        sub_216790CCC(a2, &v50);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v50);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_21690096C(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    unint64_t v51 = 0;
    sub_2168ED33C(v36, &v50);
    sub_2168EE084((uint64_t)&v50);
    uint64_t v34 = 0;
  }
  sub_2168F83DC((uint64_t)v46);
  return v34;
}

void sub_216B8B8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_2168FF930((uint64_t)v46, (v7 - *v6) >> 4);
  sub_2168FFD20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  uint64_t v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B91F24(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v48[1])
    {
      sub_216B91F6C(v48, v11++);
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E44B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v53 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        uint64_t v49 = v29;
        int64_t v50 = v30;
        unint64_t v52 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v51 = v30 + 24;
        sub_216790CCC(a2, &v49);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v49);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_2168FFDB8(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    int64_t v50 = 0;
    sub_2168ED33C(v36, &v49);
    sub_2168EE084((uint64_t)&v49);
    uint64_t v34 = 0;
  }
  sub_2168F83DC((uint64_t)v46);
  return v34;
}

void sub_216B8BCB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ValueVectorToVtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v5 & 4) != 0) {
    char v6 = (pxrInternal__aapl__pxrReserved__::VtValue **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    char v6 = *(pxrInternal__aapl__pxrReserved__::VtValue ***)a1;
  }
  unsigned __int8 v8 = *v6;
  uint64_t v7 = v6[1];
  sub_216901170((uint64_t)v46, (v7 - *v6) >> 4);
  sub_2169014A0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46, v9, v10);
  if (v8 == v7) {
    goto LABEL_36;
  }
  uint64_t v11 = v47;
  int v36 = v4;
  char v12 = 1;
  char v13 = v8;
  do
  {
    sub_216B920E0(v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v48);
    if (v49)
    {
      sub_216B92128((pxrInternal__aapl__pxrReserved__::VtValue *)v48, v11);
      v11 += 2;
    }
    else
    {
      BOOL v14 = *v6;
      sub_216B8C3EC(v13);
      if (v43 >= 0) {
        uint64_t v15 = &v42;
      }
      else {
        uint64_t v15 = v42;
      }
      sub_216B83848(a3, v40);
      int v16 = v41;
      uint64_t v17 = (void **)v40[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4486 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v38);
      uint64_t v20 = v40;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      char v21 = v38;
      if (v39 < 0) {
        char v21 = (void **)v38[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"failed to cast array element %zu: %s%s to <%s>", v18, v19, (v8 - v14) >> 4, v15, v20, v21);
      unint64_t v22 = a2[1];
      unint64_t v23 = a2[2];
      if (v22 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v54 = a2 + 2;
        if (v28) {
          unint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
        }
        else {
          unint64_t v29 = 0;
        }
        unint64_t v30 = &v29[24 * v25];
        int64_t v50 = v29;
        unint64_t v51 = v30;
        uint64_t v53 = &v29[24 * v28];
        long long v31 = *(_OWORD *)__p;
        *((void *)v30 + 2) = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v52 = v30 + 24;
        sub_216790CCC(a2, &v50);
        uint64_t v32 = a2[1];
        sub_216790E64((uint64_t)&v50);
        int v33 = SHIBYTE(v45);
        a2[1] = v32;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *(void *)(v22 + 16) = v45;
        *(_OWORD *)unint64_t v22 = v24;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        a2[1] = v22 + 24;
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      char v12 = 0;
    }
    sub_2168EE084((uint64_t)v48);
    char v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
  }
  while (v13 != v7);
  int v4 = v36;
  if (v12)
  {
LABEL_36:
    sub_216901538(v4, v46);
    uint64_t v34 = 1;
  }
  else
  {
    unint64_t v51 = 0;
    sub_2168ED33C(v36, &v50);
    sub_2168EE084((uint64_t)&v50);
    uint64_t v34 = 0;
  }
  sub_2168F83DC((uint64_t)v46);
  return v34;
}

void sub_216B8C0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

void *sub_216B8C164(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * *a2);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = a4;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  char v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    char v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216B8C390(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::type_info *sub_216B8C3A4@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216959404(a2);
}

void sub_216B8C3D8(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void sub_216B8C3EC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  sub_216928738((uint64_t)a1);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = v11.__r_.__value_.__l.__size_;
    if (v11.__r_.__value_.__l.__size_ <= 0x20) {
      goto LABEL_6;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
    if (HIBYTE(v11.__r_.__value_.__r.__words[2]) < 0x21u) {
      goto LABEL_6;
    }
  }
  std::string::erase(&v11, 0x20uLL, size - 32);
  std::string::append(&v11, "...");
LABEL_6:
  pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a1, v2, v3, (uint64_t)__p);
  if (v10 >= 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  unint64_t v8 = &v11;
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"<%s> '%s'", v5, v6, v7, v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_216B8C4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216B8C520(pxrInternal__aapl__pxrReserved__::VtValue *a1, unsigned char *a2)
{
  if ((sub_216959490(a1) & 1) == 0)
  {
    uint64_t v4 = *((void *)a1 + 1);
    if (v4) {
      BOOL v5 = (*((void *)a1 + 1) & 3) == 3;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    }
    *((void *)a1 + 1) = &unk_26C7501AB;
    *(unsigned char *)a1 = 0;
  }
  uint64_t result = sub_216B8C654(a1);
  char v7 = *(unsigned char *)result;
  *(unsigned char *)uint64_t result = *a2;
  *a2 = v7;
  return result;
}

__n128 sub_216B8C59C(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_216A31600(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_216A31534(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  uint64_t v4 = (__n128 *)sub_216A316E4(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_216B8C63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216B8C654(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return a1;
}

std::type_info *sub_216B8C6E4@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216B8C7A8(a2);
}

void sub_216B8C718(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void *sub_216B8C72C(pxrInternal__aapl__pxrReserved__::VtValue *a1, unsigned char *a2)
{
  if ((sub_2169975B8(a1) & 1) == 0)
  {
    uint64_t v4 = *((void *)a1 + 1);
    if (v4) {
      BOOL v5 = (*((void *)a1 + 1) & 3) == 3;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    }
    *((void *)a1 + 1) = &unk_26C75031B;
    *(unsigned char *)a1 = 0;
  }
  __n128 result = sub_216B8C834(a1);
  char v7 = *(unsigned char *)result;
  *(unsigned char *)__n128 result = *a2;
  *a2 = v7;
  return result;
}

std::type_info *sub_216B8C7A8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_2169975B8(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x263F8C250], v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

void *sub_216B8C834(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return a1;
}

std::type_info *sub_216B8C8C4@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_21695A7D0(a2);
}

void sub_216B8C8F8(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void *sub_216B8C90C(pxrInternal__aapl__pxrReserved__::VtValue *a1, _DWORD *a2)
{
  if ((sub_21695A85C(a1) & 1) == 0)
  {
    uint64_t v4 = *((void *)a1 + 1);
    if (v4) {
      BOOL v5 = (*((void *)a1 + 1) & 3) == 3;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    }
    *((void *)a1 + 1) = &unk_26C750543;
    *(_DWORD *)a1 = 0;
  }
  __n128 result = sub_216B8C988(a1);
  int v7 = *(_DWORD *)result;
  *(_DWORD *)__n128 result = *a2;
  *a2 = v7;
  return result;
}

void *sub_216B8C988(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return a1;
}

std::type_info *sub_216B8CA18@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216B8CADC(a2);
}

void sub_216B8CA4C(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void *sub_216B8CA60(pxrInternal__aapl__pxrReserved__::VtValue *a1, _DWORD *a2)
{
  if ((sub_216B8CB68(a1) & 1) == 0)
  {
    uint64_t v4 = *((void *)a1 + 1);
    if (v4) {
      BOOL v5 = (*((void *)a1 + 1) & 3) == 3;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    }
    *((void *)a1 + 1) = &unk_26C7505FB;
    *(_DWORD *)a1 = 0;
  }
  __n128 result = sub_216B8CBA0(a1);
  int v7 = *(_DWORD *)result;
  *(_DWORD *)__n128 result = *a2;
  *a2 = v7;
  return result;
}

std::type_info *sub_216B8CADC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_216B8CB68(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x263F8C260], v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_216B8CB68(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 6) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x263F8C260]);
  }
  else {
    return 0;
  }
}

void *sub_216B8CBA0(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return a1;
}

std::type_info *sub_216B8CC30@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216B8CDA8(a2);
}

void sub_216B8CC64(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B8CC78(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2)
{
  if ((sub_2169F9268(a1) & 1) == 0)
  {
    uint64_t v4 = *((void *)a1 + 1);
    if (v4) {
      BOOL v5 = (*((void *)a1 + 1) & 3) == 3;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = &unk_26C750823;
  }
  __n128 result = sub_216B8CE34(a1);
  uint64_t v7 = *result;
  *__n128 result = *a2;
  *a2 = v7;
  return result;
}

__n128 sub_216B8CCF0(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_2169DDCD4(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_216A319F4(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  uint64_t v4 = (__n128 *)sub_216A31B6C(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_216B8CD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::type_info *sub_216B8CDA8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_2169F9268(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x263F8C290], v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

void *sub_216B8CE34(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return a1;
}

std::type_info *sub_216B8CEC4@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216B8D03C(a2);
}

void sub_216B8CEF8(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B8CF0C(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2)
{
  if ((sub_216B8D0C8(a1) & 1) == 0)
  {
    uint64_t v4 = *((void *)a1 + 1);
    if (v4) {
      BOOL v5 = (*((void *)a1 + 1) & 3) == 3;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = &unk_26C7508DB;
  }
  __n128 result = sub_216B8D100(a1);
  uint64_t v7 = *result;
  *__n128 result = *a2;
  *a2 = v7;
  return result;
}

__n128 sub_216B8CF84(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_2169DF540(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_216B8D190(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  uint64_t v4 = (__n128 *)sub_216B8D260(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_216B8D024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::type_info *sub_216B8D03C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_216B8D0C8(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x263F8C298], v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_216B8D0C8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 8) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x263F8C298]);
  }
  else {
    return 0;
  }
}

void *sub_216B8D100(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return a1;
}

void *sub_216B8D190(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_26C755610;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216B8D224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B8D260(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169AED64((_OWORD **)a1);
}

std::type_info *sub_216B8D2F4@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216B8D3B8(a2);
}

void sub_216B8D328(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void *sub_216B8D33C(pxrInternal__aapl__pxrReserved__::VtValue *a1, _WORD *a2)
{
  if ((sub_216B8D444(a1) & 1) == 0)
  {
    uint64_t v4 = *((void *)a1 + 1);
    if (v4) {
      BOOL v5 = (*((void *)a1 + 1) & 3) == 3;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    }
    *((void *)a1 + 1) = (char *)&off_26C750990 + 3;
    *(_WORD *)a1 = 0;
  }
  __n128 result = sub_216B8D47C(a1);
  __int16 v7 = *(_WORD *)result;
  *(_WORD *)__n128 result = *a2;
  *a2 = v7;
  return result;
}

std::type_info *sub_216B8D3B8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_216B8D444(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C74C510, v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_216B8D444(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 11) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C510);
  }
  else {
    return 0;
  }
}

void *sub_216B8D47C(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return a1;
}

std::type_info *sub_216B8D50C@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216921B90(a2);
}

void sub_216B8D540(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

float sub_216B8D554(pxrInternal__aapl__pxrReserved__::VtValue *a1, float *a2)
{
  if ((sub_21691FA2C(a1) & 1) == 0)
  {
    uint64_t v4 = *((void *)a1 + 1);
    if (v4) {
      BOOL v5 = (*((void *)a1 + 1) & 3) == 3;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    }
    *((void *)a1 + 1) = &unk_26C750A4B;
    *(_DWORD *)a1 = 0;
  }
  uint64_t v6 = (float *)sub_21691FB18(a1);
  float result = *v6;
  *uint64_t v6 = *a2;
  *a2 = result;
  return result;
}

std::type_info *sub_216B8D5D0@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_2169235E0(a2);
}

void sub_216B8D604(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

double sub_216B8D618(pxrInternal__aapl__pxrReserved__::VtValue *a1, double *a2)
{
  if ((sub_21691CE68(a1) & 1) == 0)
  {
    uint64_t v4 = *((void *)a1 + 1);
    if (v4) {
      BOOL v5 = (*((void *)a1 + 1) & 3) == 3;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = &unk_26C750B03;
  }
  uint64_t v6 = (double *)sub_21691F1E4(a1);
  double result = *v6;
  *uint64_t v6 = *a2;
  *a2 = result;
  return result;
}

std::type_info *sub_216B8D690@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216B8D7EC(a2);
}

void sub_216B8D6C4(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

double sub_216B8D6D8(pxrInternal__aapl__pxrReserved__::VtValue *a1, double *a2)
{
  if ((sub_216B8D878(a1) & 1) == 0)
  {
    uint64_t v6 = 0;
    sub_216B8D904(a1, &v6);
  }
  uint64_t v4 = (double *)sub_216B8D9A4(a1);
  double result = *v4;
  double *v4 = *a2;
  *a2 = result;
  return result;
}

__n128 sub_216B8D734(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_216B8DA34(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_216B8DAC0(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  uint64_t v4 = (__n128 *)sub_216B8DB90(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_216B8D7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::type_info *sub_216B8D7EC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_216B8D878(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C7557E0, v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_216B8D878(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217468BA7 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C7557E0);
}

void *sub_216B8D904(void *a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = (char *)&off_26C755728 + 1;
  *a1 = *a2;
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216B8D998(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_21675DB74(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_216B8D9A4(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return a1;
}

uint64_t sub_216B8DA34(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217468BD9 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C7558A8);
}

void *sub_216B8DAC0(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_26C7557F0;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216B8DB54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B8DB90(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169B1124((_OWORD **)a1);
}

std::type_info *sub_216B8DC24@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_21695C2D4(a2);
}

void sub_216B8DC58(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216B8DC6C(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_21695C360(a1) & 1) == 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v9 = 0;
    sub_216B8DDC0((uint64_t)a1, (uint64_t)__p);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v4 = (__n128 *)sub_216B8DE90((uint64_t *)a1);
  unint64_t v5 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v7 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v7;
  *a2 = result;
  a2[1].n128_u64[0] = v5;
  return result;
}

void sub_216B8DCEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216B8DD08(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_216998044(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_216A31E78(a1, (uint64_t)v10);
    sub_2169B1EE4(v10);
  }
  uint64_t v4 = (__n128 *)sub_216A31FF0(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_216B8DDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216B8DDC0(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, a1);
  *(void *)(a1 + 8) = &off_26C750BB8;
  sub_21691B31C((unsigned int **)a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216B8DE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B8DE90(uint64_t *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_21691B26C(a1);
}

std::type_info *sub_216B8DF24@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_21695DBB8(a2);
}

void sub_216B8DF58(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B8DF6C(uint64_t *a1, uint64_t *a2)
{
  if ((sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
  {
    uint64_t v6 = 0;
    sub_216B8E0B4(a1, &v6);
    if ((v6 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  __n128 result = sub_216ABA73C(a1);
  uint64_t v5 = *result;
  *__n128 result = *a2;
  *a2 = v5;
  return result;
}

__n128 sub_216B8DFFC(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_21699807C(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_216B8E178(a1, (uint64_t)v10);
    sub_2169B2E0C(v10);
  }
  uint64_t v4 = (__n128 *)sub_216B8E248(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_216B8E09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_216B8E0B4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v6, (uint64_t)a1);
  a1[1] = (uint64_t)&off_26C750C70 + 1;
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  if (v7) {
    (*(void (**)(unsigned char *))(v7 + 32))(v6);
  }
  return a1;
}

void sub_216B8E16C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_21675DB74(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_216B8E178(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C755978;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216B8E20C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B8E248(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169B2D58((_OWORD **)a1);
}

std::type_info *sub_216B8E2DC@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216B8E4A0(a2);
}

void sub_216B8E310(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216B8E324(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  if ((sub_2169980B4(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v11);
    sub_216B8E52C(a1, (long long *)v11);
    if (v14 < 0) {
      operator delete(__p);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
  }
  uint64_t v4 = sub_216B8E5FC((long long **)a1);
  uint64_t v5 = *((void *)v4 + 2);
  long long v6 = *v4;
  uint64_t v7 = *(void *)(a2 + 16);
  long long *v4 = *(_OWORD *)a2;
  *((void *)v4 + 2) = v7;
  *(_OWORD *)a2 = v6;
  *(void *)(a2 + 16) = v5;
  uint64_t v8 = *((void *)v4 + 5);
  __n128 result = *(__n128 *)((char *)v4 + 24);
  uint64_t v10 = *(void *)(a2 + 40);
  *(long long *)((char *)v4 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v4 + 5) = v10;
  *(__n128 *)(a2 + 24) = result;
  *(void *)(a2 + 40) = v8;
  return result;
}

void sub_216B8E3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_216B8E3E8(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_216998140(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_216B8E690(a1, (uint64_t)v10);
    sub_2169B4408(v10);
  }
  uint64_t v4 = (__n128 *)sub_216B8E760(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_216B8E488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::type_info *sub_216B8E4A0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_2169980B4(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C755240, v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

void *sub_216B8E52C(void *a1, long long *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_26C755A30;
  sub_2169B3DA8(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216B8E5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_216B8E5FC(long long **a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, long long **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169B3C80(a1);
}

void *sub_216B8E690(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C755AE8;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216B8E724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B8E760(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169B4354((_OWORD **)a1);
}

std::type_info *sub_216B8E7F4@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216B8E964(a2);
}

void sub_216B8E828(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void *sub_216B8E83C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_21699510C(a1) & 1) == 0)
  {
    uint64_t v2 = *((void *)a1 + 1);
    if (v2) {
      BOOL v3 = (*((void *)a1 + 1) & 3) == 3;
    }
    else {
      BOOL v3 = 1;
    }
    if (!v3) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    }
    *((void *)a1 + 1) = (char *)&off_26C75AC58 + 3;
  }

  return sub_216B8E9F0(a1);
}

__n128 sub_216B8E8AC(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_216B8EA80(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_216B8EB0C(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  uint64_t v4 = (__n128 *)sub_216B8EBDC(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_216B8E94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::type_info *sub_216B8E964(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_21699510C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C755210, v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

void *sub_216B8E9F0(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return a1;
}

uint64_t sub_216B8EA80(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217468C19 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C755C58);
}

void *sub_216B8EB0C(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_26C755BA0;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216B8EBA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B8EBDC(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169B5168((_OWORD **)a1);
}

std::type_info *sub_216B8EC70@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216B8EE2C(a2);
}

void sub_216B8ECA4(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

double sub_216B8ECB8(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  if ((sub_21699AB4C(a1) & 1) == 0)
  {
    *(_OWORD *)std::string __p = 0u;
    long long v9 = 0u;
    long long v7 = 0u;
    *(_OWORD *)unint64_t v5 = 0u;
    memset(v6, 0, sizeof(v6));
    sub_216B8EEB8((uint64_t)a1, (uint64_t)v5);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p[1]);
    }
    uint64_t v10 = (void **)&v7;
    sub_2169B81EC(&v10);
    uint64_t v10 = (void **)v6 + 1;
    sub_2169B74B8(&v10);
    if (v5[0])
    {
      v5[1] = v5[0];
      operator delete(v5[0]);
    }
  }
  return sub_216B8EF88((uint64_t *)a1, a2);
}

void sub_216B8ED60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_216B8ED74(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_21699AC40(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_216B8F0C4(a1, (uint64_t)v10);
    sub_2169B88CC(v10);
  }
  uint64_t v4 = (__n128 *)sub_216B50650(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_216B8EE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::type_info *sub_216B8EE2C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_21699AB4C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C755268, v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_216B8EEB8(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, a1);
  *(void *)(a1 + 8) = &off_26C755C70;
  sub_2169B8284((unsigned int **)a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216B8EF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_216B8EF88(uint64_t *a1, uint64_t a2)
{
  v5[0] = (uint64_t *)sub_216B5051C(a1);
  v5[1] = v5[0] + 3;
  v5[2] = v5[0] + 6;
  v5[3] = v5[0] + 9;
  v4[0] = a2;
  v4[1] = a2 + 24;
  v4[2] = a2 + 48;
  void v4[3] = a2 + 72;
  *(void *)&double result = sub_216B8EFE8(v5, (uint64_t)v4).n128_u64[0];
  return result;
}

__n128 sub_216B8EFE8(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  BOOL v3 = *(uint64_t **)a2;
  uint64_t v4 = **a1;
  uint64_t *v2 = **(void **)a2;
  uint64_t *v3 = v4;
  uint64_t v5 = v2[1];
  v2[1] = v3[1];
  v3[1] = v5;
  uint64_t v6 = v2[2];
  v2[2] = v3[2];
  v3[2] = v6;
  uint64_t v7 = a1[1];
  unint64_t v8 = *(uint64_t **)(a2 + 8);
  uint64_t v9 = *v7;
  uint64_t *v7 = *v8;
  uint64_t *v8 = v9;
  uint64_t v10 = v7[1];
  v7[1] = v8[1];
  v8[1] = v10;
  uint64_t v11 = v7[2];
  v7[2] = v8[2];
  v8[2] = v11;
  char v12 = a1[2];
  unint64_t v13 = *(uint64_t **)(a2 + 16);
  uint64_t v14 = *v12;
  *char v12 = *v13;
  *unint64_t v13 = v14;
  uint64_t v15 = v12[1];
  v12[1] = v13[1];
  v13[1] = v15;
  uint64_t v16 = v12[2];
  v12[2] = v13[2];
  v13[2] = v16;
  unint64_t v17 = (__n128 *)a1[3];
  unint64_t v18 = *(__n128 **)(a2 + 24);
  unint64_t v19 = v17[1].n128_u64[0];
  __n128 result = *v17;
  unint64_t v21 = v18[1].n128_u64[0];
  *unint64_t v17 = *v18;
  v17[1].n128_u64[0] = v21;
  *unint64_t v18 = result;
  v18[1].n128_u64[0] = v19;
  return result;
}

void *sub_216B8F0C4(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C755D28;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216B8F158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::type_info *sub_216B8F194@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_21694FA94(a2);
}

void sub_216B8F1C8(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216B8F1DC(pxrInternal__aapl__pxrReserved__::VtValue *a1, _OWORD *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if ((sub_21694FB20(a1) & 1) == 0)
  {
    memset(v8, 0, 32);
    sub_216B8F320(a1, v8);
  }
  uint64_t v4 = sub_21694FC28((atomic_uint **)a1);
  long long v6 = *(_OWORD *)v4;
  __n128 result = *((__n128 *)v4 + 1);
  long long v7 = a2[1];
  *(_OWORD *)uint64_t v4 = *a2;
  *((_OWORD *)v4 + 1) = v7;
  *a2 = v6;
  a2[1] = result;
  return result;
}

__n128 sub_216B8F268(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_216B8F40C(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_216B8F444(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  uint64_t v4 = (__n128 *)sub_216B8F514(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_216B8F308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216B8F320(void *a1, _OWORD *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v7, (uint64_t)a1);
  a1[1] = (char *)&off_26C7526A0 + 2;
  uint64_t v4 = operator new(0x28uLL);
  long long v5 = a2[1];
  *(_OWORD *)uint64_t v4 = *a2;
  *((_OWORD *)v4 + 1) = v5;
  atomic_store(0, (unsigned int *)v4 + 8);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 8, 1u, memory_order_relaxed);
  if (v8) {
    (*(void (**)(unsigned char *))(v8 + 32))(v7);
  }
  return a1;
}

void sub_216B8F3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B8F40C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 31) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74DFE0);
  }
  else {
    return 0;
  }
}

void *sub_216B8F444(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C756230;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216B8F4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B8F514(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169C0770((_OWORD **)a1);
}

std::type_info *sub_216B8F5A8@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_2169526B0(a2);
}

void sub_216B8F5DC(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

double sub_216B8F5F0(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if ((sub_21695273C(a1) & 1) == 0)
  {
    uint64_t v15 = 0;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    sub_216B8F78C(a1, (uint64_t)&v11);
  }
  uint64_t v4 = sub_2169528D0(a1);
  long long v12 = *(_OWORD *)(v4 + 16);
  long long v13 = *(_OWORD *)(v4 + 32);
  long long v14 = *(_OWORD *)(v4 + 48);
  uint64_t v15 = *(void *)(v4 + 64);
  long long v11 = *(_OWORD *)v4;
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(void *)(v4 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(v4 + 32) = v6;
  *(_OWORD *)(v4 + 48) = v5;
  *(_OWORD *)(v4 + 16) = v7;
  *(void *)(a2 + 64) = v15;
  long long v8 = v14;
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)(a2 + 48) = v8;
  double result = *(double *)&v11;
  long long v10 = v12;
  *(_OWORD *)a2 = v11;
  *(_OWORD *)(a2 + 16) = v10;
  return result;
}

__n128 sub_216B8F6D4(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_216B8F888(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_216B8F8C0(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  uint64_t v4 = (__n128 *)sub_216B8F990(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_216B8F774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216B8F78C(void *a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v8, (uint64_t)a1);
  a1[1] = (char *)&off_26C752928 + 2;
  uint64_t v4 = operator new(0x50uLL);
  long long v5 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v4 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v4 + 3) = v5;
  *((void *)v4 + 8) = *(void *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *((_OWORD *)v4 + 1) = v6;
  atomic_store(0, (unsigned int *)v4 + 18);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 18, 1u, memory_order_relaxed);
  if (v9) {
    (*(void (**)(unsigned char *))(v9 + 32))(v8);
  }
  return a1;
}

void sub_216B8F84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B8F888(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 30) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74DFC8);
  }
  else {
    return 0;
  }
}

void *sub_216B8F8C0(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C7562E8;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216B8F954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B8F990(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169C1578((_OWORD **)a1);
}

std::type_info *sub_216B8FA24@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216955210(a2);
}

void sub_216B8FA58(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216B8FA6C(pxrInternal__aapl__pxrReserved__::VtValue *a1, long long *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if ((sub_21695529C(a1) & 1) == 0)
  {
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    __n128 v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    sub_216B8FB74(a1, &v15);
  }
  uint64_t v4 = sub_216955448((long long **)a1);
  long long v19 = v4[4];
  __n128 v20 = (__n128)v4[5];
  long long v21 = v4[6];
  long long v22 = v4[7];
  long long v15 = *v4;
  long long v16 = v4[1];
  long long v17 = v4[2];
  long long v18 = v4[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  v4[6] = a2[6];
  v4[7] = v7;
  void v4[4] = v5;
  v4[5] = v6;
  long long v8 = *a2;
  long long v9 = a2[1];
  long long v10 = a2[3];
  v4[2] = a2[2];
  void v4[3] = v10;
  long long *v4 = v8;
  v4[1] = v9;
  long long v11 = v18;
  a2[2] = v17;
  a2[3] = v11;
  long long v12 = v16;
  *a2 = v15;
  a2[1] = v12;
  long long v13 = v22;
  a2[6] = v21;
  a2[7] = v13;
  __n128 result = v20;
  a2[4] = v19;
  a2[5] = (__int128)result;
  return result;
}

void *sub_216B8FB74(void *a1, _OWORD *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v10, (uint64_t)a1);
  a1[1] = (char *)&off_26C74E928 + 2;
  uint64_t v4 = operator new(0x88uLL);
  long long v5 = a2[5];
  *((_OWORD *)v4 + 4) = a2[4];
  *((_OWORD *)v4 + 5) = v5;
  long long v6 = a2[7];
  *((_OWORD *)v4 + 6) = a2[6];
  *((_OWORD *)v4 + 7) = v6;
  long long v7 = a2[1];
  *(_OWORD *)uint64_t v4 = *a2;
  *((_OWORD *)v4 + 1) = v7;
  long long v8 = a2[3];
  *((_OWORD *)v4 + 2) = a2[2];
  *((_OWORD *)v4 + 3) = v8;
  atomic_store(0, (unsigned int *)v4 + 32);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 32, 1u, memory_order_relaxed);
  if (v11) {
    (*(void (**)(unsigned char *))(v11 + 32))(v10);
  }
  return a1;
}

void sub_216B8FC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::type_info *sub_216B8FC78@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216B8FD18(a2);
}

void sub_216B8FCAC(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B8FCC0(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2)
{
  if ((sub_216B8FDA4(a1) & 1) == 0) {
    sub_216B8FDDC(a1, &v6);
  }
  __n128 result = sub_216B8FE7C(a1);
  uint64_t v5 = *result;
  *__n128 result = *a2;
  *a2 = v5;
  return result;
}

std::type_info *sub_216B8FD18(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_216B8FDA4(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C74C610, v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_216B8FDA4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 87) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C610);
  }
  else {
    return 0;
  }
}

void *sub_216B8FDDC(void *a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = (char *)&off_26C74EB50 + 1;
  *a1 = *a2;
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216B8FE70(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_21675DB74(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_216B8FE7C(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return a1;
}

std::type_info *sub_216B8FF0C@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216958080(a2);
}

void sub_216B8FF40(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216B8FF54(unsigned int **a1, __n128 *a2)
{
  if ((sub_21695810C((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0) {
    sub_216B8FFAC(a1, &v6);
  }
  uint64_t v4 = (__n128 *)sub_216B90094((atomic_uint **)a1);
  __n128 result = *v4;
  __n128 *v4 = *a2;
  *a2 = result;
  return result;
}

unsigned int **sub_216B8FFAC(unsigned int **a1, _OWORD *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v6, (uint64_t)a1);
  a1[1] = (unsigned int *)&off_26C74EA98;
  uint64_t v4 = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)uint64_t v4 = *a2;
  atomic_store(0, v4 + 4);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 4, 1u, memory_order_relaxed);
  if (v7) {
    (*(void (**)(char *))(v7 + 32))(v6);
  }
  return a1;
}

void sub_216B90058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

atomic_uint *sub_216B90094(atomic_uint **a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, atomic_uint **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2168F58F0(a1);
}

std::type_info *sub_216B90128@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216956A60(a2);
}

void sub_216B9015C(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216B90170(pxrInternal__aapl__pxrReserved__::VtValue *a1, _OWORD *a2)
{
  if ((sub_216956AEC(a1) & 1) == 0) {
    sub_216B901C8(a1, v8);
  }
  uint64_t v4 = sub_216B902B0((atomic_uint **)a1);
  long long v6 = *(_OWORD *)v4;
  __n128 result = *((__n128 *)v4 + 1);
  long long v7 = a2[1];
  *(_OWORD *)uint64_t v4 = *a2;
  *((_OWORD *)v4 + 1) = v7;
  *a2 = v6;
  a2[1] = result;
  return result;
}

void *sub_216B901C8(void *a1, _OWORD *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v7, (uint64_t)a1);
  a1[1] = &off_26C74EC08;
  uint64_t v4 = operator new(0x28uLL);
  long long v5 = a2[1];
  *(_OWORD *)uint64_t v4 = *a2;
  *((_OWORD *)v4 + 1) = v5;
  atomic_store(0, (unsigned int *)v4 + 8);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 8, 1u, memory_order_relaxed);
  if (v8) {
    (*(void (**)(unsigned char *))(v8 + 32))(v7);
  }
  return a1;
}

void sub_216B90274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

atomic_uint *sub_216B902B0(atomic_uint **a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, atomic_uint **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2168F5CD0(a1);
}

std::type_info *sub_216B90344@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216B904BC(a2);
}

void sub_216B90378(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B9038C(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2)
{
  if ((sub_216B90548(a1) & 1) == 0)
  {
    uint64_t v4 = *((void *)a1 + 1);
    if (v4) {
      BOOL v5 = (*((void *)a1 + 1) & 3) == 3;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = (char *)&off_26C755DE0 + 3;
  }
  __n128 result = sub_216B90580(a1);
  uint64_t v7 = *result;
  *__n128 result = *a2;
  *a2 = v7;
  return result;
}

__n128 sub_216B90404(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_216B90610(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_216B90648(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  uint64_t v4 = (__n128 *)sub_216B90718(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_216B904A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::type_info *sub_216B904BC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_216B90548(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C74C720, v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_216B90548(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 63) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C720);
  }
  else {
    return 0;
  }
}

void *sub_216B90580(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return a1;
}

uint64_t sub_216B90610(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 16) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74DE78);
  }
  else {
    return 0;
  }
}

void *sub_216B90648(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C755E98;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216B906DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B90718(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169B9938((_OWORD **)a1);
}

std::type_info *sub_216B907AC@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216B90870(a2);
}

void sub_216B907E0(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void *sub_216B907F4(pxrInternal__aapl__pxrReserved__::VtValue *a1, _DWORD *a2)
{
  if ((sub_216B908FC(a1) & 1) == 0)
  {
    uint64_t v4 = *((void *)a1 + 1);
    if (v4) {
      BOOL v5 = (*((void *)a1 + 1) & 3) == 3;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    }
    *((void *)a1 + 1) = (char *)&off_26C74E2B0 + 3;
    *(_DWORD *)a1 = 0;
  }
  __n128 result = sub_216B90934(a1);
  int v7 = *(_DWORD *)result;
  *(_DWORD *)__n128 result = *a2;
  *a2 = v7;
  return result;
}

std::type_info *sub_216B90870(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_216B908FC(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C74C710, v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_216B908FC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 66) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C710);
  }
  else {
    return 0;
  }
}

void *sub_216B90934(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return a1;
}

std::type_info *sub_216B909C4@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216945640(a2);
}

void sub_216B909F8(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B90A0C(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2)
{
  if ((sub_2169456CC(a1) & 1) == 0)
  {
    uint64_t v4 = *((void *)a1 + 1);
    if (v4) {
      BOOL v5 = (*((void *)a1 + 1) & 3) == 3;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = (char *)&off_26C74E368 + 3;
  }
  __n128 result = sub_2169457BC(a1);
  uint64_t v7 = *result;
  *__n128 result = *a2;
  *a2 = v7;
  return result;
}

std::type_info *sub_216B90A84@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216943A74(a2);
}

void sub_216B90AB8(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216B90ACC(unsigned int **a1, __n128 *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if ((sub_216943B00((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
  {
    long long v6 = 0uLL;
    sub_216B90B54(a1, &v6);
  }
  uint64_t v4 = (__n128 *)sub_216943BF0((atomic_uint **)a1);
  __n128 result = *v4;
  __n128 *v4 = *a2;
  *a2 = result;
  return result;
}

unsigned int **sub_216B90B54(unsigned int **a1, _OWORD *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v6, (uint64_t)a1);
  a1[1] = (unsigned int *)((char *)&off_26C74E420 + 2);
  uint64_t v4 = (unsigned int *)operator new(0x18uLL);
  *(_OWORD *)uint64_t v4 = *a2;
  atomic_store(0, v4 + 4);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 4, 1u, memory_order_relaxed);
  if (v7) {
    (*(void (**)(char *))(v7 + 32))(v6);
  }
  return a1;
}

void sub_216B90C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::type_info *sub_216B90C40@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216B90DDC(a2);
}

void sub_216B90C74(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

atomic_uint *sub_216B90C88(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if ((sub_216B90E68(a1) & 1) == 0)
  {
    int v9 = 0;
    uint64_t v8 = 0;
    sub_216B90EA0(a1, (uint64_t)&v8);
  }
  __n128 result = sub_216B90F94((atomic_uint **)a1);
  atomic_uint v5 = result[2];
  uint64_t v6 = *(void *)result;
  atomic_uint v7 = *(_DWORD *)(a2 + 8);
  *(void *)__n128 result = *(void *)a2;
  result[2] = v7;
  *(void *)a2 = v6;
  *(_DWORD *)(a2 + 8) = v5;
  return result;
}

__n128 sub_216B90D24(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_216B91028(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_216B91060(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  uint64_t v4 = (__n128 *)sub_216B91130(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_216B90DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::type_info *sub_216B90DDC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_216B90E68(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C74C760, v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_216B90E68(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 62) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C760);
  }
  else {
    return 0;
  }
}

void *sub_216B90EA0(void *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v6, (uint64_t)a1);
  a1[1] = (char *)&off_26C755F50 + 2;
  uint64_t v4 = operator new(0x10uLL);
  *(void *)uint64_t v4 = *(void *)a2;
  v4[2] = *(_DWORD *)(a2 + 8);
  atomic_store(0, v4 + 3);
  *a1 = v4;
  atomic_fetch_add_explicit(v4 + 3, 1u, memory_order_relaxed);
  if (v7) {
    (*(void (**)(unsigned char *))(v7 + 32))(v6);
  }
  return a1;
}

void sub_216B90F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

atomic_uint *sub_216B90F94(atomic_uint **a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, atomic_uint **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2168F489C(a1);
}

uint64_t sub_216B91028(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 15) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74DE60);
  }
  else {
    return 0;
  }
}

void *sub_216B91060(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C756008;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216B910F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B91130(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169BB8D8((_OWORD **)a1);
}

std::type_info *sub_216B911C4@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216B912A4(a2);
}

void sub_216B911F8(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void *sub_216B9120C(uint64_t a1, uint64_t a2)
{
  if ((sub_216B91330((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4) {
      BOOL v5 = (*(void *)(a1 + 8) & 3) == 3;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    }
    *(void *)(a1 + 8) = (char *)&off_26C74E4D8 + 3;
    *(_WORD *)(a1 + 4) = 0;
    *(_DWORD *)a1 = 0;
  }
  __n128 result = sub_216B91368((void *)a1);
  __int16 v7 = *((_WORD *)result + 2);
  int v8 = *(_DWORD *)result;
  __int16 v9 = *(_WORD *)(a2 + 4);
  *(_DWORD *)__n128 result = *(_DWORD *)a2;
  *((_WORD *)result + 2) = v9;
  *(_DWORD *)a2 = v8;
  *(_WORD *)(a2 + 4) = v7;
  return result;
}

std::type_info *sub_216B912A4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_216B91330(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C74C750, v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_216B91330(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 65) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C750);
  }
  else {
    return 0;
  }
}

void *sub_216B91368(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return a1;
}

std::type_info *sub_216B913F8@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_2169496FC(a2);
}

void sub_216B9142C(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

atomic_uint *sub_216B91440(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if ((sub_216949788(a1) & 1) == 0)
  {
    int v9 = 0;
    uint64_t v8 = 0;
    sub_216B914DC(a1, (uint64_t)&v8);
  }
  __n128 result = sub_21694988C((atomic_uint **)a1);
  atomic_uint v5 = result[2];
  uint64_t v6 = *(void *)result;
  atomic_uint v7 = *(_DWORD *)(a2 + 8);
  *(void *)__n128 result = *(void *)a2;
  result[2] = v7;
  *(void *)a2 = v6;
  *(_DWORD *)(a2 + 8) = v5;
  return result;
}

void *sub_216B914DC(void *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v6, (uint64_t)a1);
  a1[1] = (char *)&off_26C74E590 + 2;
  uint64_t v4 = operator new(0x10uLL);
  *(void *)uint64_t v4 = *(void *)a2;
  v4[2] = *(_DWORD *)(a2 + 8);
  atomic_store(0, v4 + 3);
  *a1 = v4;
  atomic_fetch_add_explicit(v4 + 3, 1u, memory_order_relaxed);
  if (v7) {
    (*(void (**)(unsigned char *))(v7 + 32))(v6);
  }
  return a1;
}

void sub_216B91594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::type_info *sub_216B915D0@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216947688(a2);
}

void sub_216B91604(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216B91618(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  v8[6] = *MEMORY[0x263EF8340];
  if ((sub_216947714(a1) & 1) == 0)
  {
    memset(v8, 0, 24);
    sub_216B916B4(a1, (uint64_t)v8);
  }
  uint64_t v4 = (__n128 *)sub_216947818((atomic_uint **)a1);
  unint64_t v5 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v7 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v7;
  *a2 = result;
  a2[1].n128_u64[0] = v5;
  return result;
}

void *sub_216B916B4(void *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v6, (uint64_t)a1);
  a1[1] = (char *)&off_26C74E648 + 2;
  uint64_t v4 = operator new(0x20uLL);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *((void *)v4 + 2) = *(void *)(a2 + 16);
  atomic_store(0, (unsigned int *)v4 + 6);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 6, 1u, memory_order_relaxed);
  if (v7) {
    (*(void (**)(unsigned char *))(v7 + 32))(v6);
  }
  return a1;
}

void sub_216B9176C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::type_info *sub_216B917A8@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216B91930(a2);
}

void sub_216B917DC(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216B917F0(unsigned int **a1, __n128 *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if ((sub_216B919BC((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
  {
    long long v6 = 0uLL;
    sub_216B919F4(a1, &v6);
  }
  uint64_t v4 = (__n128 *)sub_216B91AE0((atomic_uint **)a1);
  __n128 result = *v4;
  __n128 *v4 = *a2;
  *a2 = result;
  return result;
}

__n128 sub_216B91878(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_216B91B74(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_216B91BAC(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  uint64_t v4 = (__n128 *)sub_216B91C7C(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_216B91918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::type_info *sub_216B91930(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_216B919BC(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C74C7A0, v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_216B919BC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 61) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C7A0);
  }
  else {
    return 0;
  }
}

unsigned int **sub_216B919F4(unsigned int **a1, _OWORD *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v6, (uint64_t)a1);
  a1[1] = (unsigned int *)((char *)&off_26C7560C0 + 2);
  uint64_t v4 = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)uint64_t v4 = *a2;
  atomic_store(0, v4 + 4);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 4, 1u, memory_order_relaxed);
  if (v7) {
    (*(void (**)(char *))(v7 + 32))(v6);
  }
  return a1;
}

void sub_216B91AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

atomic_uint *sub_216B91AE0(atomic_uint **a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, atomic_uint **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2168F58F0(a1);
}

uint64_t sub_216B91B74(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 14) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74DE48);
  }
  else {
    return 0;
  }
}

void *sub_216B91BAC(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C756178;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216B91C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B91C7C(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169BDA10((_OWORD **)a1);
}

std::type_info *sub_216B91D10@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_216B91DD0(a2);
}

void sub_216B91D44(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B91D58(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2)
{
  if ((sub_216B91E5C(a1) & 1) == 0)
  {
    uint64_t v4 = *((void *)a1 + 1);
    if (v4) {
      BOOL v5 = (*((void *)a1 + 1) & 3) == 3;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = (char *)&off_26C74E700 + 3;
  }
  __n128 result = sub_216B91E94(a1);
  uint64_t v7 = *result;
  *__n128 result = *a2;
  *a2 = v7;
  return result;
}

std::type_info *sub_216B91DD0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_216B91E5C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C74C790, v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_216B91E5C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 64) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C790);
  }
  else {
    return 0;
  }
}

void *sub_216B91E94(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return a1;
}

std::type_info *sub_216B91F24@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_21694D6A0(a2);
}

void sub_216B91F58(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216B91F6C(unsigned int **a1, __n128 *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if ((sub_21694D72C((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
  {
    long long v6 = 0uLL;
    sub_216B91FF4(a1, &v6);
  }
  uint64_t v4 = (__n128 *)sub_21694D834((atomic_uint **)a1);
  __n128 result = *v4;
  __n128 *v4 = *a2;
  *a2 = result;
  return result;
}

unsigned int **sub_216B91FF4(unsigned int **a1, _OWORD *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v6, (uint64_t)a1);
  a1[1] = (unsigned int *)((char *)&off_26C74E7B8 + 2);
  uint64_t v4 = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)uint64_t v4 = *a2;
  atomic_store(0, v4 + 4);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 4, 1u, memory_order_relaxed);
  if (v7) {
    (*(void (**)(char *))(v7 + 32))(v6);
  }
  return a1;
}

void sub_216B920A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::type_info *sub_216B920E0@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  return sub_21694B6D8(a2);
}

void sub_216B92114(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216B92128(pxrInternal__aapl__pxrReserved__::VtValue *a1, _OWORD *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if ((sub_21694B764(a1) & 1) == 0)
  {
    memset(v8, 0, 32);
    sub_216B921B4(a1, v8);
  }
  uint64_t v4 = sub_21694B86C((atomic_uint **)a1);
  long long v6 = *(_OWORD *)v4;
  __n128 result = *((__n128 *)v4 + 1);
  long long v7 = a2[1];
  *(_OWORD *)uint64_t v4 = *a2;
  *((_OWORD *)v4 + 1) = v7;
  *a2 = v6;
  a2[1] = result;
  return result;
}

void *sub_216B921B4(void *a1, _OWORD *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v7, (uint64_t)a1);
  a1[1] = (char *)&off_26C74E870 + 2;
  uint64_t v4 = operator new(0x28uLL);
  long long v5 = a2[1];
  *(_OWORD *)uint64_t v4 = *a2;
  *((_OWORD *)v4 + 1) = v5;
  atomic_store(0, (unsigned int *)v4 + 8);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 8, 1u, memory_order_relaxed);
  if (v8) {
    (*(void (**)(unsigned char *))(v8 + 32))(v7);
  }
  return a1;
}

void sub_216B92264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216B922A0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_216B922C0(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_216B923D0(a1);
}

uint64_t sub_216B922D0()
{
  return 1;
}

unint64_t sub_216B922D8(unsigned __int8 **a1)
{
  return sub_216B92484(*a1);
}

void sub_216B922E0()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::operator==();
}

void sub_216B922EC()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::operator==();
}

uint64_t sub_216B922F8()
{
  return 0;
}

void sub_216B92304()
{
}

void *sub_216B92314()
{
  return &unk_26C7551F0;
}

uint64_t sub_216B92320()
{
  return 0;
}

uint64_t sub_216B92328()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216B92334()
{
  return 0;
}

uint64_t sub_216B9233C()
{
  return 0;
}

BOOL sub_216B92344(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217478E00 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216B92380(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551F0, a2, a3);
}

void *sub_216B923A4()
{
  return &unk_26C7551F0;
}

uint64_t sub_216B923B0(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_216B923B8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)(a2 + 8) = &off_26C75B0C8;
  return sub_216B92898((unsigned int **)a2, v2);
}

uint64_t *sub_216B923D0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v4 = (void **)(v2 + 128);
    sub_216932118(&v4);
    uint64_t v4 = (void **)(v2 + 104);
    sub_216932118(&v4);
    uint64_t v4 = (void **)(v2 + 80);
    sub_216932118(&v4);
    uint64_t v4 = (void **)(v2 + 56);
    sub_216932118(&v4);
    uint64_t v4 = (void **)(v2 + 32);
    sub_216932118(&v4);
    uint64_t v4 = (void **)(v2 + 8);
    sub_216932118(&v4);
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_216B92484(unsigned __int8 *a1)
{
  uint64_t v2 = 0;
  char v3 = 0;
  sub_216B924F0((uint64_t)&v2, a1, (uint64_t)(a1 + 8), (uint64_t)(a1 + 32), (uint64_t)(a1 + 56), (uint64_t)(a1 + 80), (uint64_t)(a1 + 104), (uint64_t)(a1 + 128));
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2));
}

uint64_t sub_216B924F0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v8 += (unint64_t)(*(void *)a1 + v8 + (*(void *)a1 + v8) * (*(void *)a1 + v8)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v8;
  return sub_216B92538(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_216B92538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  long long v14 = *(pxrInternal__aapl__pxrReserved__::VtValue **)a2;
  uint64_t v15 = *(void *)(a2 + 8) - (void)v14;
  if (v15)
  {
    uint64_t v16 = v15 >> 4;
    do
    {
      --v16;
      long long v17 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v14 + 16);
      sub_2168EEDCC(a1, v14);
      long long v14 = v17;
    }
    while (v16);
  }

  return sub_216B925DC(a1, a3, a4, a5, a6, a7);
}

uint64_t sub_216B925DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(pxrInternal__aapl__pxrReserved__::VtValue **)a2;
  uint64_t v13 = *(void *)(a2 + 8) - (void)v12;
  if (v13)
  {
    uint64_t v14 = v13 >> 4;
    do
    {
      --v14;
      uint64_t v15 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v12 + 16);
      sub_2168EEDCC(a1, v12);
      uint64_t v12 = v15;
    }
    while (v14);
  }

  return sub_216B92678(a1, a3, a4, a5, a6);
}

uint64_t sub_216B92678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(pxrInternal__aapl__pxrReserved__::VtValue **)a2;
  uint64_t v11 = *(void *)(a2 + 8) - (void)v10;
  if (v11)
  {
    uint64_t v12 = v11 >> 4;
    do
    {
      --v12;
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v10 + 16);
      sub_2168EEDCC(a1, v10);
      uint64_t v10 = v13;
    }
    while (v12);
  }

  return sub_216B92704(a1, a3, a4, a5);
}

uint64_t sub_216B92704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(pxrInternal__aapl__pxrReserved__::VtValue **)a2;
  uint64_t v9 = *(void *)(a2 + 8) - (void)v8;
  if (v9)
  {
    uint64_t v10 = v9 >> 4;
    do
    {
      --v10;
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
      sub_2168EEDCC(a1, v8);
      uint64_t v8 = v11;
    }
    while (v10);
  }

  return sub_216B92788(a1, a3, a4);
}

uint64_t sub_216B92788(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  long long v6 = *(pxrInternal__aapl__pxrReserved__::VtValue **)a2;
  uint64_t v7 = *(void *)(a2 + 8) - (void)v6;
  if (v7)
  {
    uint64_t v8 = v7 >> 4;
    do
    {
      --v8;
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v6 + 16);
      __n128 result = sub_2168EEDCC(v5, v6);
      long long v6 = v9;
    }
    while (v8);
  }
  uint64_t v10 = *(pxrInternal__aapl__pxrReserved__::VtValue **)a3;
  uint64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
  if (v11)
  {
    uint64_t v12 = v11 >> 4;
    do
    {
      --v12;
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v10 + 16);
      __n128 result = sub_2168EEDCC(v5, v10);
      uint64_t v10 = v13;
    }
    while (v12);
  }
  return result;
}

uint64_t sub_216B9280C(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(*a1 + 152));
  if (v2 != 1)
  {
    char v3 = (unsigned int *)operator new(0xA0uLL);
    sub_2169E2B3C((uint64_t)v3, *a1);
    atomic_store(0, v3 + 38);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 38, 1u, memory_order_relaxed);
    uint64_t v5 = *a1;
    *a1 = (uint64_t)v3;
    sub_216B923D0(&v5);
  }
  return *a1;
}

void sub_216B92884(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216B92898(unsigned int **a1, uint64_t a2)
{
  uint64_t v4 = (unsigned int *)operator new(0xA0uLL);
  uint64_t result = sub_2169E2B3C((uint64_t)v4, a2);
  atomic_store(0, v4 + 38);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 38, 1u, memory_order_relaxed);
  return result;
}

void sub_216B928EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfTupleDimensions::operator==(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  return v2 == a2[2] && (!v2 || *a1 == *a2 && (v2 < 2 || a1[1] == a2[1]));
}

pxrInternal__aapl__pxrReserved__::SdfValueTypeName *pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  *(void *)this = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::GetEmptyTypeName(this);
  return this;
}

{
  *(void *)this = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::GetEmptyTypeName(this);
  return this;
}

void *pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

{
  *uint64_t result = a2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken@<X0>(uint64_t this@<X0>, atomic_uint **a2@<X8>)
{
  unint64_t v2 = *(atomic_uint **)(*(void *)this + 8);
  *a2 = v2;
  if ((v2 & 7) != 0)
  {
    char v3 = (atomic_uint *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v3, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v3;
    }
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return **(void **)this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetCPPTypeName(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return **(void **)this + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetRole(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return **(void **)this + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDefaultValue(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return **(void **)this + 64;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDefaultUnit(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return **(void **)this + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return *(void *)(*(void *)this + 16);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return *(void *)(*(void *)this + 24);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  unint64_t v2 = *(void **)this;
  return v2 != pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::GetEmptyTypeName(this)
      && *(void *)this == *(void *)(*(void *)this + 16);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  unint64_t v2 = *(void **)this;
  return v2 != pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::GetEmptyTypeName(this)
      && *(void *)this == *(void *)(*(void *)this + 24);
}

__n128 pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions@<Q0>(uint64_t **this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2 = **this;
  __n128 result = *(__n128 *)(v2 + 40);
  *a2 = result;
  a2[1].n128_u64[0] = *(void *)(v2 + 56);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(void **a1, void **a2)
{
  uint64_t v2 = (void *)**a1;
  char v3 = (void *)**a2;
  return *v2 == *v3 && (v2[4] & 0xFFFFFFFFFFFFFFF8) == (v3[4] & 0xFFFFFFFFFFFFFFF8);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v10 = *(void *)(a2 + 16);
  }
  char v3 = *(pxrInternal__aapl__pxrReserved__::TfToken **)(v2 + 96);
  uint64_t v4 = *(pxrInternal__aapl__pxrReserved__::TfToken **)(v2 + 104);
  if (v3 == v4)
  {
    uint64_t v6 = 0;
  }
  else
  {
    do
    {
      uint64_t v5 = pxrInternal__aapl__pxrReserved__::TfToken::operator==(v3, (unsigned __int8 *)__p);
      uint64_t v6 = v5;
      char v3 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v3 + 8);
      if (v3 == v4) {
        int v7 = 1;
      }
      else {
        int v7 = v5;
      }
    }
    while (v7 != 1);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

void sub_216B92BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = **a1;
  uint64_t v3 = *a2;
  if ((*a2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *(void *)(v2 + 96);
  uint64_t v4 = *(void *)(v2 + 104);
  if (v5 == v4)
  {
    BOOL result = 0;
  }
  else
  {
    unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v7 = v5 + 8;
    do
    {
      unint64_t v8 = *(void *)(v7 - 8) & 0xFFFFFFFFFFFFFFF8;
      BOOL result = v8 == v6;
      BOOL v10 = v8 == v6 || v7 == v4;
      v7 += 8;
    }
    while (!v10);
  }
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetHash(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  uint64_t v1 = **(void ***)this;
  return bswap64(0x9E3779B97F4A7C55* ((v1[4] & 0xFFFFFFFFFFFFFFF8)+ (((v1[4] & 0xFFFFFFFFFFFFFFF8)+ *v1+ ((v1[4] & 0xFFFFFFFFFFFFFFF8) + *v1) * ((v1[4] & 0xFFFFFFFFFFFFFFF8) + *v1)) >> 1)));
}

BOOL pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  uint64_t v1 = *(void **)this;
  return v1 == pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::GetEmptyTypeName(this);
}

void *pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAliasesAsTokens@<X0>(uint64_t **this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = **this;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return sub_21698FA28(a2, *(uint64_t **)(v2 + 96), *(uint64_t **)(v2 + 104), (uint64_t)(*(void *)(v2 + 104) - *(void *)(v2 + 96)) >> 3);
}

void *pxrInternal__aapl__pxrReserved__::operator<<(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)a2 + 8);
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = (atomic_uint *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)(v4 + 4);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  int v6 = *((char *)EmptyString + 23);
  if (v6 >= 0) {
    uint64_t v7 = (uint64_t)EmptyString;
  }
  else {
    uint64_t v7 = *EmptyString;
  }
  if (v6 >= 0) {
    uint64_t v8 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    uint64_t v8 = EmptyString[1];
  }
  BOOL result = sub_216779180(a1, v7, v8);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit(v4, 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfVariableExpression *pxrInternal__aapl__pxrReserved__::SdfVariableExpression::SdfVariableExpression(pxrInternal__aapl__pxrReserved__::SdfVariableExpression *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  sub_216779094(__p, "No expression specified");
  unint64_t v2 = *((void *)this + 2);
  unint64_t v3 = *((void *)this + 1);
  if (v3 >= v2)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *(void *)this) >> 3);
    unint64_t v6 = v5 + 1;
    if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - *(void *)this) >> 3);
    if (2 * v7 > v6) {
      unint64_t v6 = 2 * v7;
    }
    if (v7 >= 0x555555555555555) {
      unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v8 = v6;
    }
    v17[4] = (char *)this + 16;
    if (v8) {
      uint64_t v9 = (char *)sub_216782ED8((uint64_t)this + 16, v8);
    }
    else {
      uint64_t v9 = 0;
    }
    BOOL v10 = &v9[24 * v5];
    v17[0] = v9;
    v17[1] = v10;
    v17[3] = &v9[24 * v8];
    long long v11 = *(_OWORD *)__p;
    *((void *)v10 + 2) = v16;
    *(_OWORD *)BOOL v10 = v11;
    __p[1] = 0;
    uint64_t v16 = 0;
    __p[0] = 0;
    v17[2] = v10 + 24;
    sub_216790CCC((uint64_t *)this, v17);
    uint64_t v12 = *((void *)this + 1);
    sub_216790E64((uint64_t)v17);
    int v13 = SHIBYTE(v16);
    *((void *)this + 1) = v12;
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v4 = *(_OWORD *)__p;
    *(void *)(v3 + 16) = v16;
    *(_OWORD *)unint64_t v3 = v4;
    *((void *)this + 1) = v3 + 24;
  }
  return this;
}

void sub_216B92EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_216790E64((uint64_t)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 63) < 0) {
    operator delete(*(void **)(v15 + 40));
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 32);
  if (v17) {
    sub_216784EC4(v17);
  }
  std::string __p = (void *)v15;
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfVariableExpression::SdfVariableExpression(uint64_t a1, long long *a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 40), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(a1 + 56) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 40) = v4;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_ParseVariableExpression((uint64_t *)a2, &v8);
  locale = v8.__locale_;
  v8.__locale_ = 0;
  sub_216B9308C((void *)(a1 + 24), (uint64_t)locale);
  sub_21680F80C((uint64_t *)a1);
  *(_OWORD *)a1 = v9;
  *(void *)(a1 + 16) = v10;
  uint64_t v10 = 0;
  long long v9 = 0uLL;
  long long v11 = (void **)&v9;
  sub_216782F20(&v11);
  unint64_t v6 = v8.__locale_;
  v8.__locale_ = 0;
  if (v6) {
    (*(void (**)(std::locale::__imp *))(*(void *)v6 + 8))(v6);
  }
  return a1;
}

void sub_216B93040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v12 = *(std::__shared_weak_count **)(v10 + 32);
  if (v12) {
    sub_216784EC4(v12);
  }
  a10 = (void **)v10;
  sub_216782F20(&a10);
  _Unwind_Resume(a1);
}

void sub_216B9308C(void *a1, uint64_t a2)
{
  sub_216B935A8(&v5, a2);
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v5;
  *(void *)&long long v5 = *a1;
  *((void *)&v5 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_216784EC4(v3);
  }
}

void pxrInternal__aapl__pxrReserved__::SdfVariableExpression::~SdfVariableExpression(void **this)
{
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  unint64_t v2 = (std::__shared_weak_count *)this[4];
  if (v2) {
    sub_216784EC4(v2);
  }
  unint64_t v3 = this;
  sub_216782F20(&v3);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfVariableExpression::IsValidVariableType(pxrInternal__aapl__pxrReserved__::SdfVariableExpression *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v7[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::CoerceIfUnsupportedValueType(this, v7);
  if (v7[1]) {
    long long v4 = (pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl *)v7;
  }
  else {
    long long v4 = this;
  }
  BOOL v5 = pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::GetValueType(v4, v3) != 0;
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216B931B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfVariableExpression::operator BOOL(uint64_t a1)
{
  return *(void *)(a1 + 24) != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfVariableExpression::GetString(pxrInternal__aapl__pxrReserved__::SdfVariableExpression *this)
{
  return (uint64_t)this + 40;
}

double pxrInternal__aapl__pxrReserved__::SdfVariableExpression::Evaluate@<D0>(pxrInternal__aapl__pxrReserved__::SdfVariableExpression *this@<X0>, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*((void *)this + 3))
  {
    double v5 = pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::EvalContext::EvalContext((pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::EvalContext *)v7, a2);
    (*(void (**)(void *__return_ptr, double))(**((void **)this + 3) + 16))(v11, v5);
    sub_2168EDFA8((void *)a3, v11);
    *(_OWORD *)(a3 + 16) = v12;
    *(void *)(a3 + 32) = v13;
    uint64_t v13 = 0;
    long long v12 = 0uLL;
    sub_2168C06A4(a3 + 40, v8);
    uint64_t v10 = (void **)&v12;
    sub_216782F20(&v10);
    sub_2168EE084((uint64_t)v11);
    sub_216B93450(v9);
    sub_216850298((uint64_t)v8);
  }
  else
  {
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 8) = 0u;
    sub_216812BD8((char *)(a3 + 16), *(long long **)this, *((long long **)this + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3));
    double result = 0.0;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_DWORD *)(a3 + 72) = 1065353216;
  }
  return result;
}

void sub_216B93338(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfVariableExpression::_FormatUnexpectedTypeError(pxrInternal__aapl__pxrReserved__::SdfVariableExpression *this, std::type_info *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(this, a2, (char *)a3, (uint64_t)v14);
  int v4 = v15;
  double v5 = (void **)v14[0];
  pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)a2, v6, v7, (uint64_t)__p);
  if (v4 >= 0) {
    uint64_t v10 = v14;
  }
  else {
    uint64_t v10 = v5;
  }
  if (v13 >= 0) {
    long long v11 = __p;
  }
  else {
    long long v11 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Expression evaluated to '%s' but expected '%s'", v8, v9, v10, v11);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
}

void sub_216B9341C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B93450(void *a1)
{
  unint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    int v4 = a1 + 5;
    unint64_t v3 = (void **)a1[1];
  }
  else
  {
    int v4 = a1 + 5;
    unint64_t v5 = a1[4];
    unint64_t v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v9 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 23) < 0)
        {
          operator delete(*(void **)v8);
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          unint64_t v10 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v10;
          unint64_t v8 = v10;
        }
      }
      while (v8 != v9);
      unint64_t v2 = (void **)a1[1];
      unint64_t v3 = (void **)a1[2];
    }
  }
  void *v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 85;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_18;
    }
    uint64_t v13 = 170;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    uint64_t v14 = *v2++;
    operator delete(v14);
  }

  return sub_21683347C((uint64_t)a1);
}

void *sub_216B935A8(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = operator new(0x20uLL);
  void *v4 = &unk_26C75B190;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216B93600(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173248F8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B9361C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216B93644(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216B93674(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75B1E0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_216B936BC()
{
}

void pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::New(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    std::string __p = "sdf/variantSetSpec.cpp";
    long long v19 = "New";
    uint64_t v20 = 48;
    long long v21 = "static SdfVariantSetSpecHandle pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::New(const SdfPrimSpecHandl"
          "e &, const std::string &)";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"NULL owner prim");
LABEL_9:
    *a3 = 0;
    return;
  }
  if ((MEMORY[0x21D444AC0](a2) & 1) == 0)
  {
    std::string __p = "sdf/variantSetSpec.cpp";
    long long v19 = "New";
    uint64_t v20 = 54;
    long long v21 = "static SdfVariantSetSpecHandle pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::New(const SdfPrimSpecHandl"
          "e &, const std::string &)";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create variant set spec with invalid identifier: '%s'");
    goto LABEL_9;
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
  unint64_t v6 = (uint64_t **)sub_216A663FC(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v6, &v15);
  unint64_t v7 = sub_216A663FC(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v7, &v12);
  sub_216779094(&__p, "");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(&v12, a2, (uint64_t)&__p, &v13);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
  sub_21697C414(&v12);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v13)) {
    pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::CreateSpec();
  }
  std::string __p = "sdf/variantSetSpec.cpp";
  long long v19 = "New";
  uint64_t v20 = 65;
  long long v21 = "static SdfVariantSetSpecHandle pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::New(const SdfPrimSpecHandle "
        "&, const std::string &)";
  char v22 = 0;
  unint64_t v8 = sub_216A663FC(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v8, &v12);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v12);
  if (*(char *)(a2 + 23) >= 0) {
    unint64_t v10 = (const char *)a2;
  }
  else {
    unint64_t v10 = *(const char **)a2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create variant set spec at invalid path <%s{%s=}>", Text, v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
  sub_21697C414(&v12);
  *a3 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  uint64_t v11 = v16;
  if (v16)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
}

{
  uint64_t **v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v8;
  const char *Text;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char v17[8];
  void *__p;
  const char *v19;
  uint64_t v20;
  const char *v21;
  char v22;

  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    std::string __p = "sdf/variantSetSpec.cpp";
    long long v19 = "New";
    uint64_t v20 = 83;
    long long v21 = "static SdfVariantSetSpecHandle pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::New(const SdfVariantSpecHa"
          "ndle &, const std::string &)";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"NULL owner variant");
LABEL_9:
    *a3 = 0;
    return;
  }
  if ((MEMORY[0x21D444AC0](a2) & 1) == 0)
  {
    std::string __p = "sdf/variantSetSpec.cpp";
    long long v19 = "New";
    uint64_t v20 = 89;
    long long v21 = "static SdfVariantSetSpecHandle pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::New(const SdfVariantSpecHa"
          "ndle &, const std::string &)";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create variant set spec with invalid identifier: '%s'");
    goto LABEL_9;
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
  unint64_t v6 = (uint64_t **)sub_216992ED0(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v6, &v15);
  unint64_t v7 = sub_216992ED0(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v7, &v12);
  sub_216779094(&__p, "");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(&v12, a2, (uint64_t)&__p, &v13);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
  sub_21697C414(&v12);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v13)) {
    pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::CreateSpec();
  }
  std::string __p = "sdf/variantSetSpec.cpp";
  long long v19 = "New";
  uint64_t v20 = 100;
  long long v21 = "static SdfVariantSetSpecHandle pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::New(const SdfVariantSpecHand"
        "le &, const std::string &)";
  char v22 = 0;
  unint64_t v8 = sub_216992ED0(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v8, &v12);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v12);
  if (*(char *)(a2 + 23) >= 0) {
    unint64_t v10 = (const char *)a2;
  }
  else {
    unint64_t v10 = *(const char **)a2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create variant set spec at invalid path <%s{%s=}>", Text, v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
  sub_21697C414(&v12);
  *a3 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  uint64_t v11 = v16;
  if (v16)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
}

void sub_216B93974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, int a13, uint64_t a14, uint64_t a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_21697B754(&a13);
  uint64_t v23 = a15;
  if (a15)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a15 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    }
  }
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a16);
  _Unwind_Resume(a1);
}

void sub_216B93CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, int a13, uint64_t a14, uint64_t a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_21697B754(&a13);
  uint64_t v23 = a15;
  if (a15)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a15 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    }
  }
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a16);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::GetName@<X0>(pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v6);
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v6);
  if (*((char *)Name + 23) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)*Name, Name[1]);
  }
  else
  {
    long long v4 = *(_OWORD *)Name;
    *(void *)(a2 + 16) = Name[2];
    *(_OWORD *)a2 = v4;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_21697C414(&v6);
}

void sub_216B93DEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::GetNameToken@<X0>(pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec *this@<X0>, atomic_uint **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v7);
  NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7);
  long long v4 = *(atomic_uint **)NameToken;
  *a2 = *(atomic_uint **)NameToken;
  if ((v4 & 7) != 0)
  {
    unint64_t v5 = (atomic_uint *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v5;
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  return sub_21697C414(&v7);
}

void sub_216B93E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::GetOwner@<X0>(uint64_t **this@<X0>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v10);
  long long v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v10);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v6);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, &v8);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  uint64_t result = v11;
  if (v11)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216B93F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11, uint64_t a12, uint64_t a13)
{
  sub_21697B754(&a11);
  sub_21697B754(&a9);
  uint64_t v14 = a13;
  if (a13)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::GetVariants(uint64_t **this)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v4);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v3);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys)) {
    sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::Sdf_Children();
}

void sub_216B940A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  sub_21697B754(&a10);
  uint64_t v13 = a12;
  if (a12)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::GetVariantList(uint64_t **this)
{
}

void sub_216B9414C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216B94160()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::RemoveVariant(uint64_t **a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, &v21);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v20);
  uint64_t v4 = sub_216992ED0(a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v4, &v14);
  sub_216A687F4((pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, &v19);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
  sub_21697C414(&v14);
  unint64_t v5 = (uint64_t **)sub_216992ED0(a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v5, (uint64_t *)&v14);
  uint64_t v6 = sub_216851B24((uint64_t)&v14);
  if (v6 == sub_216851B24((uint64_t)&v21))
  {
    uint64_t v8 = v19;
    uint64_t v9 = v20;
    uint64_t v10 = v15;
    if (v15 && atomic_fetch_add_explicit((atomic_uint *volatile)v15 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(const char *))(*(void *)v10 + 8))(v10);
    }
    if (v8 == v9)
    {
      uint64_t v11 = sub_216992ED0(a2);
      NameToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfVariantSpec *)v11, (uint64_t)&v14);
      if ((v14 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NameToken);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::RemoveChild();
    }
  }
  else
  {
    int v7 = v15;
    if (v15 && atomic_fetch_add_explicit((atomic_uint *volatile)v15 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(const char *))(*(void *)v7 + 8))(v7);
    }
  }
  unint64_t v14 = (unint64_t)"sdf/variantSetSpec.cpp";
  uint64_t v15 = "RemoveVariant";
  uint64_t v16 = 165;
  long long v17 = "void pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::RemoveVariant(const SdfVariantSpecHandle &)";
  char v18 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot remove a variant that does not belong to this variant set.");
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v19 + 1);
  sub_21697C414(&v19);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v20 + 1);
  sub_21697C414(&v20);
  uint64_t result = v22;
  if (v22)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216B94478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_21697B754((_DWORD *)(v18 - 64));
  sub_21697B754((_DWORD *)(v18 - 56));
  uint64_t v20 = *(atomic_uint **)(v18 - 40);
  if (v20)
  {
    if (atomic_fetch_add_explicit(v20 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v20 + 8))(v20);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B94588()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216B47B20((unint64_t **)v5);
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7580F0, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C7580F0, (char *)8, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_AddCppCastFunc((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C757F48, (void *(*)(void *, BOOL))nullsub_299);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216B94668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void *sub_216B946B8(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a6)
  {
    uint64_t v10 = result;
    sub_21677CACC(result, a6);
    uint64_t result = (void *)sub_216B94758((uint64_t)(v10 + 2), a2, a3, a4, a5, v10[1]);
    v10[1] = result;
  }
  return result;
}

void sub_216B94738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216991094(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216B94758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3 != a5) {
    sub_216B48A30();
  }
  return a6;
}

void sub_216B947EC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 8;
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v4 + v2));
      v2 -= 8;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B94814()
{
}

void pxrInternal__aapl__pxrReserved__::SdfVariantSpec::New(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    std::string __p = "sdf/variantSpec.cpp";
    uint64_t v10 = "New";
    uint64_t v11 = 51;
    uint64_t v12 = "static SdfVariantSpecHandle pxrInternal__aapl__pxrReserved__::SdfVariantSpec::New(const SdfVariantSetSpecHandl"
          "e &, const std::string &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"NULL owner variant set");
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidVariantIdentifier(a2, (uint64_t)&__p);
    if (!(_BYTE)v12)
    {
      uint64_t v6 = sub_216A694A0(a1);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v6, &__p);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v14);
      sub_216A68404((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v14, &v8);
      if ((v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_21697C414(&__p);
      int v7 = (uint64_t **)sub_216A694A0(a1);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v7, (uint64_t *)&__p);
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::CreateSpec();
    }
    if (SHIBYTE(v11) < 0) {
      operator delete(__p);
    }
    std::string __p = "sdf/variantSpec.cpp";
    uint64_t v10 = "New";
    uint64_t v11 = 56;
    uint64_t v12 = "static SdfVariantSpecHandle pxrInternal__aapl__pxrReserved__::SdfVariantSpec::New(const SdfVariantSetSpecHandl"
          "e &, const std::string &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid variant name: %s");
  }
  *a3 = 0;
}

void sub_216B94A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = a14;
  if (a14)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  sub_21697B754(&a12);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetName@<X0>(pxrInternal__aapl__pxrReserved__::SdfVariantSpec *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v4);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v4, (uint64_t)&__p);
  *(_OWORD *)a2 = v8;
  *(void *)(a2 + 16) = v9;
  uint64_t v9 = 0;
  long long v8 = 0uLL;
  if (v7 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v5);
  return sub_21697C414(&v4);
}

void sub_216B94BA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetNameToken@<X0>(pxrInternal__aapl__pxrReserved__::SdfVariantSpec *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v4);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v4, (uint64_t)&v6);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v5);
  return sub_21697C414(&v4);
}

void sub_216B94C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  sub_21682E578((uint64_t)va1);
  sub_21697B754((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetOwner@<X0>(pxrInternal__aapl__pxrReserved__::SdfVariantSpec *this@<X0>, atomic_uint **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v8);
  sub_216A687F4((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, &v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v8 + 1);
  sub_21697C414(&v8);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, &v8);
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v8);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, &v10);
  char v13 = v10;
  if (v10)
  {
    atomic_fetch_add(v10, 1u);
    int v5 = v13;
    *a2 = v13;
    if (v5) {
      atomic_fetch_add(v5, 1u);
    }
  }
  else
  {
    *a2 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v13);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v10);
  uint64_t v6 = v9;
  if (v9 && atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  return sub_21697C414(&v11);
}

void sub_216B94D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetPrimSpec@<X0>(uint64_t **this@<X0>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v8);
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v8);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v6);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  uint64_t result = v9;
  if (v9)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216B94E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  sub_21697B754(&a10);
  uint64_t v13 = a12;
  if (a12)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetVariantSets(uint64_t **this)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v4);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v3);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys)) {
    sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::Sdf_Children();
}

void sub_216B95000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, char a20)
{
  sub_21697B754(&a17);
  uint64_t v21 = a19;
  if (a19)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a19 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
  }
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetVariantNames@<X0>(pxrInternal__aapl__pxrReserved__::SdfSpec *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, &i);
  sub_216779094(__p, "");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(&i, a2, (uint64_t)__p, &v25);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&i + 1);
  sub_21697C414(&i);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)a1, &v21);
  uint64_t v6 = sub_2169791E0(&v21);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys)) {
    sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  long long i = 0uLL;
  uint64_t v20 = 0;
  uint64_t v8 = sub_216A5B7B0((uint64_t *)(v6 + 112));
  (*(void (**)(uint64_t ***__return_ptr))(*(void *)v8 + 136))(&v27);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v27))
  {
    if ((v28 & 4) != 0) {
      uint64_t v9 = (uint64_t **)(*(uint64_t (**)(uint64_t ***))((v28 & 0xFFFFFFFFFFFFFFF8) + 168))(&v27);
    }
    else {
      uint64_t v9 = v27;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t **)&i;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v24 = 0;
  sub_21698FA28(__p, *v9, v9[1], v9[1] - *v9);
  uint64_t v10 = (void ***)sub_2168EE084((uint64_t)&v27);
  unint64_t v27 = (uint64_t **)&i;
  sub_216889A04(v10);
  uint64_t v11 = v22;
  if (v22 && atomic_fetch_add_explicit((atomic_uint *volatile)(v22 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  sub_21680BC90(a3, ((char *)__p[1] - (char *)__p[0]) >> 3);
  for (long long i = *(_OWORD *)__p; (void)i != *((void *)&i + 1); sub_2169CECC4(&i))
  {
    uint64_t v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2169CEC48(&i, v12, v13);
    if ((**(void **)v14 & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((**(void **)v14 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    }
    unint64_t v16 = a3[1];
    if (v16 >= a3[2])
    {
      uint64_t v17 = sub_2167E9A44(a3, (long long *)EmptyString);
    }
    else
    {
      sub_2167E99E4(a3, (long long *)EmptyString);
      uint64_t v17 = v16 + 24;
    }
    a3[1] = v17;
  }
  *(void *)&long long i = __p;
  sub_216889A04((void ***)&i);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v26);
  return sub_21697C414(&v25);
}

void sub_216B95310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfCreateVariantInLayer@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, atomic_uint **a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(a2, a3, a4, &v12);
  pxrInternal__aapl__pxrReserved__::SdfCreatePrimInLayer(a1, (uint64_t)&v12, &v11);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v11);
  int v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, &v10);
  uint64_t v14 = v10;
  if (v10)
  {
    atomic_fetch_add(v10, 1u);
    uint64_t v8 = v14;
    *a5 = v14;
    if (v8) {
      atomic_fetch_add(v8, 1u);
    }
  }
  else
  {
    *a5 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v14);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  return sub_21697C414(&v12);
}

void sub_216B954BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B954D4()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216B47B20((unint64_t **)v5);
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7580D8, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C7580D8, (char *)8, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_AddCppCastFunc((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C757F48, (void *(*)(void *, BOOL))nullsub_300);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216B955B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t textFileFormatYyparse(pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = MEMORY[0x270FA5388](a1, a2, a3);
  uint64_t v5 = v3;
  uint64_t v470 = *MEMORY[0x263EF8340];
  v446[0] = 0;
  int v447 = 0;
  uint64_t v6 = v466;
  uint64_t v7 = 1500;
  do
  {
    *(void *)uint64_t v6 = 0;
    *((_DWORD *)v6 + 12) = 0;
    v6 += 56;
    --v7;
  }
  while (v7);
  uint64_t v8 = 0;
  int v9 = 0;
  v444[0] = 0;
  int v445 = 0;
  v437 = (int *)(v3 + 220);
  v467[0] = 0;
  uint64_t v421 = v3 + 232;
  v442 = (uint64_t *)(v3 + 808);
  v427 = (uint64_t **)(v3 + 184);
  v433 = (uint64_t *)(v3 + 832);
  v440 = (int *)(v3 + 456);
  v434 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 760);
  v425 = (double *)(v3 + 208);
  v418 = (uint64_t *)(v3 + 192);
  v411 = (void *)(v3 + 48);
  uint64_t v431 = v3 + 304;
  v407 = (uint64_t *)(v3 + 288);
  v417 = (uint64_t *)(v3 + 848);
  v426 = (uint64_t **)(v3 + 160);
  v420 = (uint64_t *)(v3 + 896);
  v416 = (uint64_t *)(v3 + 920);
  v415 = (uint64_t *)(v3 + 944);
  uint64_t v410 = v3 + 176;
  v422 = (uint64_t **)(v3 + 416);
  v423 = (uint64_t *)(v3 + 872);
  v409 = (uint64_t *)(v3 + 344);
  uint64_t v429 = v3 + 336;
  uint64_t v430 = v3 + 360;
  v408 = (uint64_t *)(v3 + 320);
  v435 = (_OWORD *)(v3 + 96);
  uint64_t v428 = v3 + 384;
  v439 = (std::string *)(v3 + 72);
  uint64_t v432 = v3 + 408;
  v413 = (uint64_t *)(v3 + 392);
  v414 = (uint64_t *)(v3 + 368);
  uint64_t v412 = v3 + 424;
  v424 = (long long **)(v3 + 112);
  v419 = (char **)(v3 + 136);
  uint64_t v406 = v3 + 152;
  v405 = (void *)(v3 + 24);
  int v10 = -2;
  uint64_t v11 = v466;
  v441 = (int *)(v3 + 216);
  v443 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 816);
  v438 = (int *)(v3 + 820);
  v436 = (uint64_t *)(v3 + 824);
  while (1)
  {
    if (v9 == 5)
    {
LABEL_882:
      uint64_t v400 = 0;
      goto LABEL_885;
    }
    int v12 = asc_217476654[v9];
    if (v12 == -673) {
      break;
    }
    if (v10 == -2) {
      int v10 = textFileFormatYylex((uint64_t)v446, *(void **)(v5 + 976), v4);
    }
    if (v10 < 1)
    {
      int v10 = 0;
      int v13 = 0;
    }
    else
    {
      int v13 = v10 > 0x136 ? 2 : byte_217476D00[v10];
    }
    uint64_t v14 = (v13 + v12);
    if (v14 > 0x3D5 || v13 != (__int16)word_217476E38[v14]) {
      break;
    }
    int v9 = word_2174775E4[v14];
    if (!word_2174775E4[v14]) {
      goto LABEL_883;
    }
    v11 += 56;
    sub_216BA0AB8((uint64_t)v11, (uint64_t)v446);
    int v10 = -2;
LABEL_854:
    v467[v8 + 1] = v9;
    if (v8++ > 1497)
    {
      textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, "memory exhausted");
      uint64_t v400 = 2;
      goto LABEL_885;
    }
  }
  uint64_t v15 = word_217477D90[v9];
  if (word_217477D90[v9])
  {
    uint64_t v16 = byte_21747843C[v15];
    sub_216BA0AB8((uint64_t)v444, (uint64_t)&v11[-56 * v16 + 56]);
    int v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = 0;
    uint64_t v22 = 0;
    unsigned int v23 = 7;
    uint64_t v24 = (uint64_t)v11;
    switch((int)v15)
    {
      case 47:
        uint64_t v279 = pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(0);
        v280 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        if (!v280) {
          v280 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        }
        uint64_t v281 = *(void *)(v5 + 880);
        uint64_t v282 = sub_2169D1B08(v442);
        *(void *)&__dst[8] = &off_26C756C08;
        sub_2169DBAB4((unsigned int **)__dst, (uint64_t **)(v281 - 24));
        (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)v282 + 152))(v282, v279, (uint64_t)v280 + 32, __dst);
        sub_2168EE084((uint64_t)__dst);
        *(void *)std::string __dst = *(void *)(v5 + 880) - 24;
        uint64_t v283 = *(void *)__dst;
        sub_216889A04((void ***)__dst);
        *(void *)(v5 + 880) = v283;
        goto LABEL_850;
      case 48:
        unint64_t v26 = (const std::string *)sub_2169B1904((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::TfStringTrimRight(" \n\t\r", v26, &__str);
        std::operator+<char>();
        unint64_t v27 = std::string::append((std::string *)__dst, " ");
        long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        int64_t v452 = v27->__r_.__value_.__r.__words[2];
        long long v451 = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
        std::string::size_type v403 = HIBYTE(v452);
        int v29 = SHIBYTE(v452);
        if (v452 >= 0) {
          unint64_t v30 = (const char *)&v451;
        }
        else {
          unint64_t v30 = (const char *)v451;
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
        }
        size_t v32 = strlen(v30);
        if (size >= v32
          && ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? (p_str = &__str)
            : (p_str = (std::string *)__str.__r_.__value_.__r.__words[0]),
              !strncmp((const char *)p_str, v30, v32)))
        {
          if (*(char *)(v5 + 47) < 0) {
            uint64_t v391 = *(void *)(v5 + 32);
          }
          else {
            uint64_t v391 = *(unsigned __int8 *)(v5 + 47);
          }
          if (v391)
          {
            v392 = *(char *)(v5 + 47) >= 0 ? (const char *)v405 : (const char *)*v405;
            size_t v393 = strlen(v392);
            if (size < v393 || strcmp((const char *)p_str + size - v393, v392))
            {
              *(void *)std::string __dst = "sdf/textFileFormat.yy";
              *(void *)&__dst[8] = "_MatchMagicIdentifier";
              *(void *)&__dst[16] = 305;
              *(void *)&__dst[24] = "void _MatchMagicIdentifier(const Value &, Sdf_TextParserContext *)";
              LOBYTE(v463) = 0;
              v394 = v411;
              if (*(char *)(v5 + 71) < 0) {
                v394 = (void *)*v411;
              }
              uint64_t v395 = v5;
              if (*(char *)(v5 + 23) < 0) {
                uint64_t v395 = *(void *)v5;
              }
              if (v29 >= 0) {
                std::string::size_type v396 = v403;
              }
              else {
                std::string::size_type v396 = *((void *)&v451 + 1);
              }
              std::string::basic_string(&__p, &__str, v396, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v448);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_p = &__p;
              }
              else {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              v399 = v405;
              if (*(char *)(v5 + 47) < 0) {
                v399 = (void *)*v405;
              }
              pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__dst, (pxrInternal__aapl__pxrReserved__ *)"File '%s' is not the latest %s version (found '%s', expected '%s'). The file may parse correctly and yield incorrect results.", v397, v394, v395, p_p, v399);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
          }
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::TfStringTrim(" \n\t\r", &__str, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v36 = &__p;
          }
          else {
            int v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Magic Cookie '%s'. Expected prefix of '%s'", v34, v35, v36, v30);
          if (__dst[23] >= 0) {
            uint64_t v37 = __dst;
          }
          else {
            uint64_t v37 = *(const char **)__dst;
          }
          textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, v37);
          if ((__dst[23] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          LOBYTE(v29) = HIBYTE(v452);
        }
        if ((v29 & 0x80) != 0) {
          operator delete((void *)v451);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        memset(__dst, 0, 24);
        sub_216B9B5A0(v423, (uint64_t)__dst);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
        sub_216889A04((void ***)&__str);
        uint64_t v39 = pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v38);
        uint64_t v40 = sub_2169D1B08(v442);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v40 + 64))(v40, v39, 7);
        goto LABEL_815;
      case 50:
        goto LABEL_606;
      case 51:
        if (*(unsigned char *)(v5 + 800)) {
          goto LABEL_884;
        }
LABEL_606:
        if (*(unsigned char *)(v5 + 864)) {
          goto LABEL_882;
        }
        goto LABEL_850;
      case 57:
        v84 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v84) {
          v84 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        goto LABEL_625;
      case 58:
        goto LABEL_387;
      case 59:
      case 61:
      case 63:
      case 65:
      case 67:
      case 69:
        goto LABEL_22;
      case 60:
        sub_216B9B6E0((uint64_t)v11, 7u, v5);
        goto LABEL_504;
      case 62:
        sub_216B9B6E0((uint64_t)v11, 7u, v5);
        goto LABEL_564;
      case 64:
        sub_216B9B6E0((uint64_t)v11, 7u, v5);
        goto LABEL_465;
      case 66:
        sub_216B9B6E0((uint64_t)v11, 7u, v5);
        goto LABEL_456;
      case 68:
        sub_216B9B6E0((uint64_t)v11, 7u, v5);
        goto LABEL_502;
      case 70:
        v156 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v156) {
          v156 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        goto LABEL_500;
      case 73:
        uint64_t v292 = pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(0);
        v293 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v293) {
          v293 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        uint64_t v294 = sub_2169D1B08(v442);
        *(void *)&__dst[8] = &off_26C756898;
        sub_2169CBC44(__dst, v424);
        (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)v294 + 152))(v294, v292, (uint64_t)v293 + 360, __dst);
        v295 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2168EE084((uint64_t)__dst);
        uint64_t v296 = pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v295);
        v297 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v297) {
          v297 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        uint64_t v298 = sub_2169D1B08(v442);
        *(void *)&__dst[8] = &off_26C7567E0;
        sub_2169CB460((unsigned int **)__dst, (uint64_t)v419);
        (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)v298 + 152))(v298, v296, (uint64_t)v297 + 368, __dst);
        sub_2168EE084((uint64_t)__dst);
        sub_216782F74((uint64_t *)v424);
        *(void *)(v5 + 144) = *(void *)(v5 + 136);
        goto LABEL_850;
      case 76:
        unint64_t v81 = *(void *)(v5 + 120);
        if (v81 >= *(void *)(v5 + 128))
        {
          uint64_t v82 = sub_2167E9A44((uint64_t *)v424, (long long *)v439);
        }
        else
        {
          sub_2167E99E4(v424, (long long *)v439);
          uint64_t v82 = v81 + 24;
        }
        *(void *)(v5 + 120) = v82;
        v308 = *(_OWORD **)(v5 + 144);
        unint64_t v307 = *(void *)(v5 + 152);
        if ((unint64_t)v308 >= v307)
        {
          uint64_t v310 = ((char *)v308 - *v419) >> 4;
          unint64_t v311 = v310 + 1;
          if ((unint64_t)(v310 + 1) >> 60) {
            sub_21677CB10();
          }
          uint64_t v312 = v307 - (void)*v419;
          if (v312 >> 3 > v311) {
            unint64_t v311 = v312 >> 3;
          }
          if ((unint64_t)v312 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v313 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v313 = v311;
          }
          if (v313) {
            v314 = (char *)sub_216787EE0(v406, v313);
          }
          else {
            v314 = 0;
          }
          v367 = &v314[16 * v310];
          *(_OWORD *)v367 = *v435;
          v369 = *(char **)(v5 + 136);
          v368 = *(char **)(v5 + 144);
          v370 = v367;
          if (v368 != v369)
          {
            do
            {
              *((_OWORD *)v370 - 1) = *((_OWORD *)v368 - 1);
              v370 -= 16;
              v368 -= 16;
            }
            while (v368 != v369);
            v368 = *v419;
          }
          v309 = v367 + 16;
          *(void *)(v5 + 136) = v370;
          *(void *)(v5 + 144) = v367 + 16;
          *(void *)(v5 + 152) = &v314[16 * v313];
          if (v368) {
            operator delete(v368);
          }
        }
        else
        {
          _OWORD *v308 = *v435;
          v309 = v308 + 1;
        }
        *(void *)(v5 + 144) = v309;
        goto LABEL_815;
      case 77:
        v94 = (const std::string *)sub_2169B1904((uint64_t)v11);
        std::string::operator=(v439, v94);
        pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__dst, 0.0, 1.0);
        long long v95 = *(_OWORD *)__dst;
        goto LABEL_686;
      case 82:
        sub_2169B0370((uint64_t)v11);
        *(void *)(v5 + 96) = v285;
        goto LABEL_815;
      case 83:
        sub_2169B0370((uint64_t)v11);
        *(void *)(v5 + 104) = v187;
        goto LABEL_815;
      case 86:
        *(_DWORD *)(v5 + 804) = 0;
        goto LABEL_620;
      case 88:
        *(_DWORD *)(v5 + 804) = 0;
        sub_2169B1904((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(__dst);
        goto LABEL_567;
      case 90:
        int v41 = 2;
        goto LABEL_619;
      case 92:
        *(_DWORD *)(v5 + 804) = 2;
        sub_2169B1904((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(__dst);
        goto LABEL_567;
      case 94:
        int v41 = 1;
LABEL_619:
        *(_DWORD *)(v5 + 804) = v41;
LABEL_620:
        uint64_t v299 = *(void *)(v5 + 824);
        if ((v299 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v299 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t *v436 = 0;
        goto LABEL_850;
      case 96:
        *(_DWORD *)(v5 + 804) = 1;
        sub_2169B1904((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(__dst);
LABEL_567:
        if (__dst == (unsigned char *)v436)
        {
          std::string::size_type v140 = *(void *)__dst;
        }
        else
        {
          if ((*v436 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v436 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          std::string::size_type v140 = 0;
          uint64_t *v436 = *(void *)__dst;
          *(void *)std::string __dst = 0;
        }
        goto LABEL_848;
      case 98:
        v286 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v286) {
          v286 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        uint64_t v287 = sub_2169D1B08(v442);
        *(void *)&__dst[8] = &off_26C756C08;
        sub_2169DBAB4((unsigned int **)__dst, v426);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, unsigned char *))(*(void *)v287 + 152))(v287, v443, (uint64_t)v286 + 216, __dst);
        sub_2168EE084((uint64_t)__dst);
        uint64_t v69 = *(void *)(v5 + 160);
        for (uint64_t i = *(void *)(v5 + 168); i != v69; i -= 8)
        {
          uint64_t v290 = *(void *)(i - 8);
          uint64_t v289 = v290;
          if ((v290 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v289 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        goto LABEL_604;
      case 99:
      case 458:
        sub_216BA0AB8((uint64_t)v444, (uint64_t)v11);
        goto LABEL_850;
      case 100:
        v96 = (const void **)sub_2169B1904((uint64_t)(v11 - 112));
        sub_216B9C180(v96, 46, (uint64_t)&__str);
        uint64_t v97 = sub_2169B1904((uint64_t)v11);
        int v98 = *(char *)(v97 + 23);
        if (v98 >= 0) {
          v99 = (const std::string::value_type *)v97;
        }
        else {
          v99 = *(const std::string::value_type **)v97;
        }
        if (v98 >= 0) {
          std::string::size_type v100 = *(unsigned __int8 *)(v97 + 23);
        }
        else {
          std::string::size_type v100 = *(void *)(v97 + 8);
        }
        v101 = std::string::append(&__str, v99, v100);
        v103 = (void *)v101->__r_.__value_.__r.__words[0];
        unint64_t v102 = v101->__r_.__value_.__l.__size_;
        LODWORD(v451) = v101->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)&v451 + 3) = *(_DWORD *)((char *)&v101->__r_.__value_.__r.__words[2] + 3);
        int v104 = SHIBYTE(v101->__r_.__value_.__r.__words[2]);
        v101->__r_.__value_.__l.__size_ = 0;
        v101->__r_.__value_.__r.__words[2] = 0;
        v101->__r_.__value_.__r.__words[0] = 0;
        if (v104 < 0)
        {
          sub_216778F24(__dst, v103, v102);
        }
        else
        {
          *(void *)std::string __dst = v103;
          *(void *)&__dst[8] = v102;
          *(_DWORD *)&__dst[16] = v451;
          *(_DWORD *)&__dst[19] = *(_DWORD *)((char *)&v451 + 3);
          __dst[23] = v104;
        }
        LODWORD(v465[0]) = 3;
        sub_216976968((uint64_t)v444, (uint64_t)__dst);
        sub_216976F30((uint64_t)__dst);
        if ((v104 & 0x80000000) == 0) {
          goto LABEL_782;
        }
        v234 = v103;
        goto LABEL_781;
      case 101:
        sub_2169B1904((uint64_t)v11);
        v189 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v451);
        if ((v451 & 0xFFFFFFFFFFFFFFF8) != 0) {
          EmptyString = (uint64_t *)((v451 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v189);
        }
        if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier((uint64_t)EmptyString) & 1) == 0)
        {
          unint64_t v350 = v451 & 0xFFFFFFFFFFFFFFF8;
          if ((v451 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v351 = (const char *)(v350 + 16);
            if (*(char *)(v350 + 39) < 0) {
              v351 = *(const char **)v351;
            }
          }
          else
          {
            v351 = "";
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid prim name", v348, v349, v351);
          if (__dst[23] >= 0) {
            v377 = __dst;
          }
          else {
            v377 = *(const char **)__dst;
          }
          textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, v377);
          if ((__dst[23] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v443, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v451, __dst);
        sub_21697DE94((int *)v443, (int *)__dst);
        sub_21697DEEC(v438, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_21697C414(__dst);
        uint64_t v378 = sub_2169D1B08(v442);
        if ((*(unsigned int (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)v378
                                                                                                  + 72))(v378, v443))
        {
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v443);
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate prim '%s'", v380, v381, Text);
          if (__dst[23] >= 0) {
            v382 = __dst;
          }
          else {
            v382 = *(const char **)__dst;
          }
          textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, v382);
          if ((__dst[23] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
        }
        else
        {
          uint64_t v383 = sub_2169D1B08(v442);
          (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(void *)v383 + 64))(v383, v443, 6);
          sub_216A90920(*(void *)(v5 + 880) - 24, (uint64_t *)&v451);
        }
        memset(__dst, 0, 24);
        sub_216B9B5A0(v423, (uint64_t)__dst);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
        sub_216889A04((void ***)&__str);
        memset(__dst, 0, 24);
        sub_216B9B5A0(v420, (uint64_t)__dst);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
        sub_216889A04((void ***)&__str);
        v384 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v384) {
          v384 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        uint64_t v385 = sub_2169D1B08(v442);
        *(void *)&__dst[8] = (char *)&off_26C758118 + 3;
        *(_DWORD *)std::string __dst = *(_DWORD *)(v5 + 804);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, unsigned char *))(*(void *)v385 + 152))(v385, v443, (uint64_t)v384 + 312, __dst);
        sub_2168EE084((uint64_t)__dst);
        if (*v436)
        {
          v386 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v386) {
            v386 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          sub_216B9C4EC((uint64_t)v443, (uint64_t)v386 + 448, v436, v5);
        }
        std::string::size_type v140 = v451;
        goto LABEL_848;
      case 102:
        if (*(void *)(*(void *)(v5 + 880) - 24) != *(void *)(*(void *)(v5 + 880) - 16))
        {
          v274 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v274) {
            v274 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          }
          sub_216B9B4C0((uint64_t)v443, (uint64_t)v274 + 32, (uint64_t **)(*(void *)(v5 + 880) - 24), v5);
        }
        if (*(void *)(*(void *)(v5 + 904) - 24) != *(void *)(*(void *)(v5 + 904) - 16))
        {
          v275 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v275) {
            v275 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          }
          sub_216B9B4C0((uint64_t)v443, (uint64_t)v275 + 40, (uint64_t **)(*(void *)(v5 + 904) - 24), v5);
        }
        *(void *)std::string __dst = *(void *)(v5 + 880) - 24;
        uint64_t v276 = *(void *)__dst;
        sub_216889A04((void ***)__dst);
        *(void *)(v5 + 880) = v276;
        *(void *)std::string __dst = *(void *)(v5 + 904) - 24;
        uint64_t v277 = *(void *)__dst;
        sub_216889A04((void ***)__dst);
        *(void *)(v5 + 904) = v277;
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v443, __dst);
        sub_21697DE94((int *)v443, (int *)__dst);
        sub_21697DEEC(v438, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_21697C414(__dst);
        goto LABEL_815;
      case 112:
        v84 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v84) {
          v84 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        goto LABEL_625;
      case 113:
        unsigned int v23 = 6;
        goto LABEL_387;
      case 114:
      case 116:
      case 118:
      case 120:
      case 122:
      case 124:
        unsigned int v23 = 6;
        goto LABEL_22;
      case 115:
        sub_216B9B6E0((uint64_t)v11, 6u, v5);
        goto LABEL_504;
      case 117:
        sub_216B9B6E0((uint64_t)v11, 6u, v5);
        goto LABEL_564;
      case 119:
        sub_216B9B6E0((uint64_t)v11, 6u, v5);
        goto LABEL_465;
      case 121:
        sub_216B9B6E0((uint64_t)v11, 6u, v5);
        goto LABEL_456;
      case 123:
        sub_216B9B6E0((uint64_t)v11, 6u, v5);
        goto LABEL_502;
      case 125:
        v156 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v156) {
          v156 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        goto LABEL_500;
      case 126:
        v226 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v226) {
          v226 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        sub_2169B1904((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__str);
        uint64_t v227 = sub_2169D1B08(v442);
        *(void *)&__dst[8] = (char *)&off_26C750C70 + 1;
        *(void *)std::string __dst = __str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          std::string::size_type v228 = __str.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
          if ((atomic_fetch_add_explicit((atomic_uint *volatile)(__str.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)*(void *)std::string __dst = v228; {
        }
          }
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, unsigned char *))(*(void *)v227 + 152))(v227, v443, (uint64_t)v226 + 208, __dst);
        goto LABEL_557;
      case 127:
        v157 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v157) {
          v157 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        goto LABEL_374;
      case 128:
        if (*(char *)(v5 + 95) < 0) {
          operator delete(v439->__r_.__value_.__l.__data_);
        }
        v439->__r_.__value_.__r.__words[0] = 0;
        v439->__r_.__value_.__l.__size_ = 0;
        v439->__r_.__value_.__r.__words[2] = 0;
        *(void *)std::string __dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_21697DE94(v441, (int *)__dst);
        sub_21697DEEC(v437, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_21697C414(__dst);
        uint64_t v43 = *(void *)(v5 + 392);
        for (uint64_t j = *(void *)(v5 + 400); j != v43; sub_2169CC824(v432, j))
          j -= 48;
        goto LABEL_545;
      case 129:
        goto LABEL_617;
      case 130:
        if (*(char *)(v5 + 95) < 0) {
          operator delete(v439->__r_.__value_.__l.__data_);
        }
        v439->__r_.__value_.__r.__words[0] = 0;
        v439->__r_.__value_.__l.__size_ = 0;
        v439->__r_.__value_.__r.__words[2] = 0;
        *(void *)std::string __dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_21697DE94(v441, (int *)__dst);
        sub_21697DEEC(v437, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_21697C414(__dst);
        uint64_t v43 = *(void *)(v5 + 392);
        for (uint64_t k = *(void *)(v5 + 400); k != v43; sub_2169CC824(v432, k))
          k -= 48;
        goto LABEL_545;
      case 131:
        int v18 = 2;
        goto LABEL_617;
      case 132:
        if (*(char *)(v5 + 95) < 0) {
          operator delete(v439->__r_.__value_.__l.__data_);
        }
        v439->__r_.__value_.__r.__words[0] = 0;
        v439->__r_.__value_.__l.__size_ = 0;
        v439->__r_.__value_.__r.__words[2] = 0;
        *(void *)std::string __dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_21697DE94(v441, (int *)__dst);
        sub_21697DEEC(v437, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_21697C414(__dst);
        uint64_t v43 = *(void *)(v5 + 392);
        for (uint64_t m = *(void *)(v5 + 400); m != v43; sub_2169CC824(v432, m))
          m -= 48;
        goto LABEL_545;
      case 133:
        int v18 = 1;
        goto LABEL_617;
      case 134:
        if (*(char *)(v5 + 95) < 0) {
          operator delete(v439->__r_.__value_.__l.__data_);
        }
        v439->__r_.__value_.__r.__words[0] = 0;
        v439->__r_.__value_.__l.__size_ = 0;
        v439->__r_.__value_.__r.__words[2] = 0;
        *(void *)std::string __dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_21697DE94(v441, (int *)__dst);
        sub_21697DEEC(v437, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_21697C414(__dst);
        uint64_t v43 = *(void *)(v5 + 392);
        for (uint64_t n = *(void *)(v5 + 400); n != v43; sub_2169CC824(v432, n))
          n -= 48;
        goto LABEL_545;
      case 135:
        int v18 = 4;
        goto LABEL_617;
      case 136:
        if (*(char *)(v5 + 95) < 0) {
          operator delete(v439->__r_.__value_.__l.__data_);
        }
        v439->__r_.__value_.__r.__words[0] = 0;
        v439->__r_.__value_.__l.__size_ = 0;
        v439->__r_.__value_.__r.__words[2] = 0;
        *(void *)std::string __dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_21697DE94(v441, (int *)__dst);
        sub_21697DEEC(v437, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_21697C414(__dst);
        uint64_t v43 = *(void *)(v5 + 392);
        for (iuint64_t i = *(void *)(v5 + 400); ii != v43; sub_2169CC824(v432, ii))
          ii -= 48;
        goto LABEL_545;
      case 137:
        int v18 = 5;
        goto LABEL_617;
      case 138:
        if (*(char *)(v5 + 95) < 0) {
          operator delete(v439->__r_.__value_.__l.__data_);
        }
        v439->__r_.__value_.__r.__words[0] = 0;
        v439->__r_.__value_.__l.__size_ = 0;
        v439->__r_.__value_.__r.__words[2] = 0;
        *(void *)std::string __dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_21697DE94(v441, (int *)__dst);
        sub_21697DEEC(v437, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_21697C414(__dst);
        uint64_t v43 = *(void *)(v5 + 392);
        for (uint64_t jj = *(void *)(v5 + 400); jj != v43; sub_2169CC824(v432, jj))
          jj -= 48;
LABEL_545:
        *(void *)(v5 + 400) = v43;
        goto LABEL_850;
      case 139:
        int v18 = 3;
LABEL_617:
        sub_216B9C70C(v18, v5, v17);
        goto LABEL_850;
      case 140:
        uint64_t v63 = *(_DWORD **)(v5 + 320);
        for (kuint64_t k = *(_DWORD **)(v5 + 328); kk != v63; sub_216981128(v429, kk))
          kk -= 2;
        goto LABEL_610;
      case 141:
        goto LABEL_318;
      case 142:
        uint64_t v63 = *(_DWORD **)(v5 + 320);
        for (muint64_t m = *(_DWORD **)(v5 + 328); mm != v63; sub_216981128(v429, mm))
          mm -= 2;
        goto LABEL_610;
      case 143:
        uint64_t v19 = 2;
        goto LABEL_318;
      case 144:
        uint64_t v63 = *(_DWORD **)(v5 + 320);
        for (nuint64_t n = *(_DWORD **)(v5 + 328); nn != v63; sub_216981128(v429, nn))
          nn -= 2;
        goto LABEL_610;
      case 145:
        uint64_t v19 = 1;
        goto LABEL_318;
      case 146:
        uint64_t v63 = *(_DWORD **)(v5 + 320);
        for (i1 = *(_DWORD **)(v5 + 328); i1 != v63; sub_216981128(v429, i1))
          i1 -= 2;
        goto LABEL_610;
      case 147:
        uint64_t v19 = 4;
        goto LABEL_318;
      case 148:
        uint64_t v63 = *(_DWORD **)(v5 + 320);
        for (i2 = *(_DWORD **)(v5 + 328); i2 != v63; sub_216981128(v429, i2))
          i2 -= 2;
        goto LABEL_610;
      case 149:
        uint64_t v19 = 5;
        goto LABEL_318;
      case 150:
        uint64_t v63 = *(_DWORD **)(v5 + 320);
        for (i3 = *(_DWORD **)(v5 + 328); i3 != v63; sub_216981128(v429, i3))
          i3 -= 2;
LABEL_610:
        *(void *)(v5 + 328) = v63;
        goto LABEL_850;
      case 151:
        uint64_t v19 = 3;
LABEL_318:
        sub_216B9CCCC(v19, v5, v17);
        goto LABEL_850;
      case 152:
        v86 = *(_DWORD **)(v5 + 344);
        for (i4 = *(_DWORD **)(v5 + 352); i4 != v86; sub_216981128(v430, i4))
          i4 -= 2;
        goto LABEL_596;
      case 153:
        goto LABEL_593;
      case 154:
        v86 = *(_DWORD **)(v5 + 344);
        for (i5 = *(_DWORD **)(v5 + 352); i5 != v86; sub_216981128(v430, i5))
          i5 -= 2;
        goto LABEL_596;
      case 155:
        uint64_t v20 = 2;
        goto LABEL_593;
      case 156:
        v86 = *(_DWORD **)(v5 + 344);
        for (i6 = *(_DWORD **)(v5 + 352); i6 != v86; sub_216981128(v430, i6))
          i6 -= 2;
        goto LABEL_596;
      case 157:
        uint64_t v20 = 1;
        goto LABEL_593;
      case 158:
        v86 = *(_DWORD **)(v5 + 344);
        for (i7 = *(_DWORD **)(v5 + 352); i7 != v86; sub_216981128(v430, i7))
          i7 -= 2;
        goto LABEL_596;
      case 159:
        uint64_t v20 = 4;
        goto LABEL_593;
      case 160:
        v86 = *(_DWORD **)(v5 + 344);
        for (i8 = *(_DWORD **)(v5 + 352); i8 != v86; sub_216981128(v430, i8))
          i8 -= 2;
        goto LABEL_596;
      case 161:
        uint64_t v20 = 5;
        goto LABEL_593;
      case 162:
        v86 = *(_DWORD **)(v5 + 344);
        for (i9 = *(_DWORD **)(v5 + 352); i9 != v86; sub_216981128(v430, i9))
          i9 -= 2;
LABEL_596:
        *(void *)(v5 + 352) = v86;
        goto LABEL_850;
      case 163:
        uint64_t v20 = 3;
LABEL_593:
        sub_216B9CE64(v20, v5, v17);
        goto LABEL_850;
      case 164:
        if (*(char *)(v5 + 95) < 0) {
          operator delete(v439->__r_.__value_.__l.__data_);
        }
        v439->__r_.__value_.__r.__words[0] = 0;
        v439->__r_.__value_.__l.__size_ = 0;
        v439->__r_.__value_.__r.__words[2] = 0;
        *(void *)std::string __dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_21697DE94(v441, (int *)__dst);
        sub_21697DEEC(v437, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_21697C414(__dst);
        uint64_t v75 = *(void *)(v5 + 368);
        for (uint64_t i10 = *(void *)(v5 + 376); i10 != v75; sub_2169CC724(v428, i10))
          i10 -= 56;
        goto LABEL_585;
      case 165:
        goto LABEL_256;
      case 166:
        if (*(char *)(v5 + 95) < 0) {
          operator delete(v439->__r_.__value_.__l.__data_);
        }
        v439->__r_.__value_.__r.__words[0] = 0;
        v439->__r_.__value_.__l.__size_ = 0;
        v439->__r_.__value_.__r.__words[2] = 0;
        *(void *)std::string __dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_21697DE94(v441, (int *)__dst);
        sub_21697DEEC(v437, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_21697C414(__dst);
        uint64_t v75 = *(void *)(v5 + 368);
        for (uint64_t i11 = *(void *)(v5 + 376); i11 != v75; sub_2169CC724(v428, i11))
          i11 -= 56;
        goto LABEL_585;
      case 167:
        int v21 = 2;
        goto LABEL_256;
      case 168:
        if (*(char *)(v5 + 95) < 0) {
          operator delete(v439->__r_.__value_.__l.__data_);
        }
        v439->__r_.__value_.__r.__words[0] = 0;
        v439->__r_.__value_.__l.__size_ = 0;
        v439->__r_.__value_.__r.__words[2] = 0;
        *(void *)std::string __dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_21697DE94(v441, (int *)__dst);
        sub_21697DEEC(v437, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_21697C414(__dst);
        uint64_t v75 = *(void *)(v5 + 368);
        for (uint64_t i12 = *(void *)(v5 + 376); i12 != v75; sub_2169CC724(v428, i12))
          i12 -= 56;
        goto LABEL_585;
      case 169:
        int v21 = 1;
        goto LABEL_256;
      case 170:
        if (*(char *)(v5 + 95) < 0) {
          operator delete(v439->__r_.__value_.__l.__data_);
        }
        v439->__r_.__value_.__r.__words[0] = 0;
        v439->__r_.__value_.__l.__size_ = 0;
        v439->__r_.__value_.__r.__words[2] = 0;
        *(void *)std::string __dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_21697DE94(v441, (int *)__dst);
        sub_21697DEEC(v437, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_21697C414(__dst);
        uint64_t v75 = *(void *)(v5 + 368);
        for (uint64_t i13 = *(void *)(v5 + 376); i13 != v75; sub_2169CC724(v428, i13))
          i13 -= 56;
        goto LABEL_585;
      case 171:
        int v21 = 4;
        goto LABEL_256;
      case 172:
        if (*(char *)(v5 + 95) < 0) {
          operator delete(v439->__r_.__value_.__l.__data_);
        }
        v439->__r_.__value_.__r.__words[0] = 0;
        v439->__r_.__value_.__l.__size_ = 0;
        v439->__r_.__value_.__r.__words[2] = 0;
        *(void *)std::string __dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_21697DE94(v441, (int *)__dst);
        sub_21697DEEC(v437, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_21697C414(__dst);
        uint64_t v75 = *(void *)(v5 + 368);
        for (uint64_t i14 = *(void *)(v5 + 376); i14 != v75; sub_2169CC724(v428, i14))
          i14 -= 56;
        goto LABEL_585;
      case 173:
        int v21 = 5;
        goto LABEL_256;
      case 174:
        if (*(char *)(v5 + 95) < 0) {
          operator delete(v439->__r_.__value_.__l.__data_);
        }
        v439->__r_.__value_.__r.__words[0] = 0;
        v439->__r_.__value_.__l.__size_ = 0;
        v439->__r_.__value_.__r.__words[2] = 0;
        *(void *)std::string __dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_21697DE94(v441, (int *)__dst);
        sub_21697DEEC(v437, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_21697C414(__dst);
        uint64_t v75 = *(void *)(v5 + 368);
        for (uint64_t i15 = *(void *)(v5 + 376); i15 != v75; sub_2169CC724(v428, i15))
          i15 -= 56;
LABEL_585:
        *(void *)(v5 + 376) = v75;
        goto LABEL_850;
      case 175:
        int v21 = 3;
LABEL_256:
        sub_216B9CFFC(v21, v5, v17);
        goto LABEL_850;
      case 176:
        v112 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v112) {
          v112 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        uint64_t v113 = sub_2169D1B08(v442);
        *(void *)&__dst[8] = &off_26C7584A0;
        sub_216A9AFA0(__dst, (uint64_t)v422);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, unsigned char *))(*(void *)v113 + 152))(v113, v443, (uint64_t)v112 + 288, __dst);
        sub_2168EE084((uint64_t)__dst);
        sub_21698F21C((uint64_t)v422, *(void **)(v5 + 424));
        *(void *)(v5 + 424) = 0;
        *(void *)(v5 + 432) = 0;
        *(void *)(v5 + 416) = v412;
        goto LABEL_850;
      case 177:
        *((void *)&v451 + 1) = 0;
        int64_t v452 = 0;
        *(void *)&long long v451 = (char *)&v451 + 8;
        uint64_t v469 = 0;
        unint64_t v44 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v44) {
          unint64_t v44 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        uint64_t v45 = sub_2169D1B08(v442);
        if ((*(unsigned int (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, char *))(*(void *)v45 + 112))(v45, v443, (uint64_t)v44 + 456, v468))
        {
          uint64_t v46 = sub_2169CF86C((pxrInternal__aapl__pxrReserved__::VtValue *)v468);
          if (&v451 != (long long *)v46) {
            sub_216799C1C((uint64_t **)&v451, *(long long **)v46, (long long *)(v46 + 8));
          }
        }
        uint64_t v47 = *(pxrInternal__aapl__pxrReserved__::VtDictionary **)(v5 + 776);
        memset(__dst, 0, sizeof(__dst));
        *(void *)std::string __dst = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(v47);
        *(void *)&__dst[8] = v48;
        *(void *)&__dst[16] = pxrInternal__aapl__pxrReserved__::VtDictionary::end(v47);
        *(void *)&__dst[24] = v49;
        while (2)
        {
          if (*(void *)&__dst[8] == *(void *)&__dst[24]
            && (!*(void *)&__dst[8] || *(void *)__dst == *(void *)&__dst[16]))
          {
            v365 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v365) {
              v365 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            uint64_t v366 = sub_2169D1B08(v442);
            *(void *)&__dst[8] = &off_26C756CD0;
            sub_2169DC07C(__dst, (const void ***)&v451);
            (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, unsigned char *))(*(void *)v366 + 152))(v366, v443, (uint64_t)v365 + 456, __dst);
            sub_2168EE084((uint64_t)__dst);
            pxrInternal__aapl__pxrReserved__::VtDictionary::clear(*(pxrInternal__aapl__pxrReserved__::VtDictionary **)(v5 + 776));
          }
          else
          {
            unint64_t v51 = sub_2168ECEE8(__dst, v49, v50);
            if (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)(*v51 + 56)))
            {
              uint64_t v54 = sub_2168ECEE8(__dst, (uint64_t)v52, v53);
              uint64_t v55 = sub_21695A928((pxrInternal__aapl__pxrReserved__::VtValue *)(*v54 + 56));
              if (*(char *)(v55 + 23) < 0)
              {
                sub_216778F24(&__p, *(void **)v55, *(void *)(v55 + 8));
              }
              else
              {
                long long v56 = *(_OWORD *)v55;
                __p.__r_.__value_.__r.__words[2] = *(void *)(v55 + 16);
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v56;
              }
              pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidVariantSelection((long long *)&__p, &__str);
              if (!(_BYTE)v457)
              {
                __str.__r_.__value_.__r.__words[0] = *sub_2168ECEE8(__dst, v57, v58) + 32;
                uint64_t v59 = sub_21677B174((uint64_t **)&v451, (const void **)__str.__r_.__value_.__l.__data_, (uint64_t)&unk_2174BFD90, (long long **)&__str);
                std::string::operator=((std::string *)(v59 + 7), &__p);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                sub_2168ECF78(__dst, v60, v61);
                continue;
              }
              WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)&__str);
              if (*((char *)WhyNot + 23) >= 0) {
                uint64_t v363 = (uint64_t)WhyNot;
              }
              else {
                uint64_t v363 = *WhyNot;
              }
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v361, v362, v363);
              if (v449 >= 0) {
                v364 = v448;
              }
              else {
                v364 = (void **)v448[0];
              }
              textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, (const char *)v364);
              if (v449 < 0) {
                operator delete(v448[0]);
              }
              if ((_BYTE)v457 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                v359 = (void *)__p.__r_.__value_.__r.__words[0];
                goto LABEL_803;
              }
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"variant name must be a string", v52, v53);
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v358 = &__str;
              }
              else {
                v358 = (std::string *)__str.__r_.__value_.__r.__words[0];
              }
              textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, (const char *)v358);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              {
                v359 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_803:
                operator delete(v359);
              }
            }
          }
          break;
        }
        sub_2168EE084((uint64_t)v468);
        sub_2167877AC((uint64_t)&v451, *((void **)&v451 + 1));
LABEL_850:
        v11 += -56 * (int)v16 + 56;
        sub_216BA0AB8((uint64_t)v11, (uint64_t)v444);
        v8 -= v16;
        uint64_t v388 = word_217478612[v15] - 67;
        uint64_t v389 = ((__int16)v467[v8] + word_2174789BE[v388]);
        if (v389 <= 0x3D5 && word_217476E38[v389] == (unsigned __int16)v467[v8]) {
          int v9 = word_2174775E4[v389];
        }
        else {
          int v9 = word_217478B6C[v388];
        }
        break;
      case 178:
        sub_216B9D5CC(0, (void *)v5);
        uint64_t v69 = *(void *)(v5 + 160);
        for (uint64_t i16 = *(void *)(v5 + 168); i16 != v69; i16 -= 8)
        {
          uint64_t v248 = *(void *)(i16 - 8);
          uint64_t v247 = v248;
          if ((v248 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v247 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        goto LABEL_604;
      case 179:
        sub_216B9D5CC(2, (void *)v5);
        uint64_t v69 = *(void *)(v5 + 160);
        for (uint64_t i17 = *(void *)(v5 + 168); i17 != v69; i17 -= 8)
        {
          uint64_t v210 = *(void *)(i17 - 8);
          uint64_t v209 = v210;
          if ((v210 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v209 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        goto LABEL_604;
      case 180:
        sub_216B9D5CC(1, (void *)v5);
        uint64_t v69 = *(void *)(v5 + 160);
        for (uint64_t i18 = *(void *)(v5 + 168); i18 != v69; i18 -= 8)
        {
          uint64_t v181 = *(void *)(i18 - 8);
          uint64_t v180 = v181;
          if ((v181 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v180 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        goto LABEL_604;
      case 181:
        sub_216B9D5CC(4, (void *)v5);
        uint64_t v69 = *(void *)(v5 + 160);
        for (uint64_t i19 = *(void *)(v5 + 168); i19 != v69; i19 -= 8)
        {
          uint64_t v92 = *(void *)(i19 - 8);
          uint64_t v91 = v92;
          if ((v92 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v91 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        goto LABEL_604;
      case 182:
        sub_216B9D5CC(5, (void *)v5);
        uint64_t v69 = *(void *)(v5 + 160);
        for (uint64_t i20 = *(void *)(v5 + 168); i20 != v69; i20 -= 8)
        {
          uint64_t v225 = *(void *)(i20 - 8);
          uint64_t v224 = v225;
          if ((v225 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v224 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        goto LABEL_604;
      case 183:
        sub_216B9D5CC(3, (void *)v5);
        uint64_t v69 = *(void *)(v5 + 160);
        for (uint64_t i21 = *(void *)(v5 + 168); i21 != v69; i21 -= 8)
        {
          uint64_t v242 = *(void *)(i21 - 8);
          uint64_t v241 = v242;
          if ((v242 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v241 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        goto LABEL_604;
      case 184:
        v151 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v151) {
          v151 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        sub_2169B1904((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__str);
        uint64_t v152 = sub_2169D1B08(v442);
        v153 = v443;
        *(void *)&__dst[8] = (char *)&off_26C750C70 + 1;
        *(void *)std::string __dst = __str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          std::string::size_type v272 = __str.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
          if ((atomic_fetch_add_explicit((atomic_uint *volatile)(__str.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)*(void *)std::string __dst = v272; {
        }
          }
        goto LABEL_556;
      case 185:
        v105 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v105) {
          v105 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        goto LABEL_472;
      case 186:
        int v64 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v64) {
          int v64 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        uint64_t v65 = *(const void *****)(v5 + 776);
        uint64_t v66 = sub_2169D1B08(v442);
        *(void *)&__dst[8] = &off_26C74DD80;
        sub_2168EEEA8((unsigned int **)__dst, v65);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, unsigned char *))(*(void *)v66 + 152))(v66, v443, (uint64_t)v64 + 264, __dst);
        goto LABEL_119;
      case 187:
        uint64_t v76 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v76) {
          uint64_t v76 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        std::string v77 = *(const void *****)(v5 + 776);
        uint64_t v78 = sub_2169D1B08(v442);
        *(void *)&__dst[8] = &off_26C74DD80;
        sub_2168EEEA8((unsigned int **)__dst, v77);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, unsigned char *))(*(void *)v78 + 152))(v78, v443, (uint64_t)v76 + 384, __dst);
LABEL_119:
        sub_2168EE084((uint64_t)__dst);
        goto LABEL_453;
      case 194:
        if (*(char *)(v5 + 95) < 0) {
          uint64_t v211 = *(void *)(v5 + 80);
        }
        else {
          uint64_t v211 = *(unsigned __int8 *)(v5 + 95);
        }
        if (!v211)
        {
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Payload asset path must not be empty. If this is intended to be an internal payload, remove the '@' delimiters.", (const char *)7, v17);
          v320 = __dst[23] >= 0 ? __dst : *(const char **)__dst;
          textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, v320);
          if ((__dst[23] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
        }
        pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__dst, v439, v441, v435);
        unint64_t v321 = *(void *)(v5 + 400);
        if (v321 < *(void *)(v5 + 408)) {
          goto LABEL_672;
        }
        goto LABEL_673;
      case 195:
        if (*(char *)(v5 + 95) < 0)
        {
          **(unsigned char **)(v5 + 72) = 0;
          *(void *)(v5 + 80) = 0;
        }
        else
        {
          *(unsigned char *)(v5 + 72) = 0;
          *(unsigned char *)(v5 + 95) = 0;
        }
        goto LABEL_685;
      case 196:
        uint64_t v236 = sub_2169B1904((uint64_t)(v11 - 112));
        uint64_t v237 = *(unsigned __int8 *)(v236 + 23);
        if ((v237 & 0x80u) != 0) {
          uint64_t v237 = *(void *)(v236 + 8);
        }
        if (v237)
        {
          sub_216B9DD44((uint64_t)(v11 - 112), (int *)v5);
        }
        else
        {
          v344 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v236);
          sub_2169C487C(v441, v344);
          sub_2169C48D4(v437, (_DWORD *)v344 + 1);
        }
        memset(&__str, 0, sizeof(__str));
        pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__dst, &__str, v441, v435);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        unint64_t v321 = *(void *)(v5 + 400);
        if (v321 < *(void *)(v5 + 408))
        {
LABEL_672:
          sub_2169D8390(v432, *(__n128 **)(v5 + 400), (uint64_t)__dst);
          uint64_t v322 = v321 + 48;
          *(void *)(v5 + 400) = v321 + 48;
        }
        else
        {
LABEL_673:
          uint64_t v322 = sub_216AE9558(v413, (uint64_t)__dst);
        }
        *(void *)(v5 + 400) = v322;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[28]);
        goto LABEL_744;
      case 209:
        if (*(char *)(v5 + 95) < 0) {
          uint64_t v252 = *(void *)(v5 + 80);
        }
        else {
          uint64_t v252 = *(unsigned __int8 *)(v5 + 95);
        }
        if (!v252)
        {
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Reference asset path must not be empty. If this is intended to be an internal reference, remove the '@' delimiters.", (const char *)7, v17);
          v323 = __dst[23] >= 0 ? __dst : *(const char **)__dst;
          textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, v323);
          if ((__dst[23] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
        }
        __str.__r_.__value_.__r.__words[0] = 0;
        pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(__dst, v439, v441, v435, &__str);
        sub_2168EBBB8(&__str, 0);
        pxrInternal__aapl__pxrReserved__::VtDictionary::swap((uint64_t *)v465, *(pxrInternal__aapl__pxrReserved__::VtDictionary **)(v5 + 776));
        unint64_t v324 = *(void *)(v5 + 376);
        if (v324 >= *(void *)(v5 + 384)) {
          goto LABEL_742;
        }
        goto LABEL_741;
      case 210:
        if (*(char *)(v5 + 95) < 0)
        {
          **(unsigned char **)(v5 + 72) = 0;
          *(void *)(v5 + 80) = 0;
        }
        else
        {
          *(unsigned char *)(v5 + 72) = 0;
          *(unsigned char *)(v5 + 95) = 0;
        }
LABEL_685:
        pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__dst, 0.0, 1.0);
        long long v95 = *(_OWORD *)__dst;
LABEL_686:
        _OWORD *v435 = v95;
LABEL_815:
        if (*(unsigned char *)(v5 + 800)) {
          goto LABEL_884;
        }
        goto LABEL_850;
      case 211:
        uint64_t v270 = sub_2169B1904((uint64_t)(v11 - 112));
        uint64_t v271 = *(unsigned __int8 *)(v270 + 23);
        if ((v271 & 0x80u) != 0) {
          uint64_t v271 = *(void *)(v270 + 8);
        }
        if (v271)
        {
          sub_216B9DD44((uint64_t)(v11 - 112), (int *)v5);
        }
        else
        {
          v345 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v270);
          sub_2169C487C(v441, v345);
          sub_2169C48D4(v437, (_DWORD *)v345 + 1);
        }
        memset(&__str, 0, sizeof(__str));
        *(void *)&long long v451 = 0;
        pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(__dst, &__str, v441, v435, &v451);
        sub_2168EBBB8((void ***)&v451, 0);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        pxrInternal__aapl__pxrReserved__::VtDictionary::swap((uint64_t *)v465, *(pxrInternal__aapl__pxrReserved__::VtDictionary **)(v5 + 776));
        unint64_t v324 = *(void *)(v5 + 376);
        if (v324 >= *(void *)(v5 + 384))
        {
LABEL_742:
          uint64_t v346 = sub_216AE6EA0(v414, (long long *)__dst);
        }
        else
        {
LABEL_741:
          sub_2169D5338(*(char **)(v5 + 376), (long long *)__dst);
          uint64_t v346 = v324 + 56;
          *(void *)(v5 + 376) = v324 + 56;
        }
        *(void *)(v5 + 376) = v346;
        sub_2168EBBB8(v465, 0);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[28]);
LABEL_744:
        v347 = (std::string *)&__dst[24];
        goto LABEL_760;
      case 225:
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v443, &__str);
        pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)v441, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__str, (int *)__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__str.__r_.__value_.__r.__words + 1);
        sub_21697C414(&__str);
        unint64_t v123 = *(void *)(v5 + 328);
        if (v123 >= *(void *)(v5 + 336))
        {
          uint64_t v124 = sub_216981B30(v408, __dst);
        }
        else
        {
          sub_216981010(*(_DWORD **)(v5 + 328), __dst);
          sub_21698105C((_DWORD *)(v123 + 4), &__dst[4]);
          uint64_t v124 = v123 + 8;
        }
        *(void *)(v5 + 328) = v124;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        goto LABEL_657;
      case 232:
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v443, &__str);
        pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)v441, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__str, (int *)__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__str.__r_.__value_.__r.__words + 1);
        sub_21697C414(&__str);
        unint64_t v135 = *(void *)(v5 + 352);
        if (v135 >= *(void *)(v5 + 360))
        {
          uint64_t v136 = sub_216981B30(v409, __dst);
        }
        else
        {
          sub_216981010(*(_DWORD **)(v5 + 352), __dst);
          sub_21698105C((_DWORD *)(v135 + 4), &__dst[4]);
          uint64_t v136 = v135 + 8;
        }
        *(void *)(v5 + 352) = v136;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        goto LABEL_657;
      case 238:
        uint64_t v160 = sub_2169B1904((uint64_t)(v11 - 112));
        uint64_t v161 = sub_2169B1904((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&__str, v160);
        pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v451, v161);
        pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidRelocatesPath((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)&__str, (uint64_t)__dst);
        if (__dst[24])
        {
          if ((__dst[23] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
          if (*(char *)(v160 + 23) >= 0) {
            uint64_t v164 = v160;
          }
          else {
            uint64_t v164 = *(void *)v160;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid relocates path", v162, v163, v164);
          if (__dst[23] >= 0) {
            v165 = __dst;
          }
          else {
            v165 = *(const char **)__dst;
          }
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidRelocatesPath((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)&v451, (uint64_t)__dst);
          if (!__dst[24])
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__str, v443, (int *)&__p);
            pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v451, v443, (int *)v448);
            sub_2169D36F0(__dst, &__p, v448);
            sub_2169DC0E4(v422, (pxrInternal__aapl__pxrReserved__::SdfPath *)__dst, __dst);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[12]);
            sub_21697C414(&__dst[8]);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
            sub_21697C414(__dst);
            *(unsigned char *)(v5 + 865) = 1;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v448 + 1);
            sub_21697C414(v448);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p.__r_.__value_.__r.__words + 1);
            sub_21697C414(&__p);
            goto LABEL_859;
          }
          if ((__dst[23] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
          if (*(char *)(v161 + 23) >= 0) {
            uint64_t v356 = v161;
          }
          else {
            uint64_t v356 = *(void *)v161;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid relocates path", v354, v355, v356);
          if (__dst[23] >= 0) {
            v165 = __dst;
          }
          else {
            v165 = *(const char **)__dst;
          }
        }
        textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, v165);
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
LABEL_859:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v451 + 1);
        sub_21697C414(&v451);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__str.__r_.__value_.__r.__words + 1);
LABEL_860:
        v150 = &__str;
LABEL_658:
        sub_21697C414(v150);
        goto LABEL_850;
      case 243:
        sub_2169B1904((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__str);
        v139 = *(void **)(v5 + 168);
        unint64_t v138 = *(void *)(v5 + 176);
        if ((unint64_t)v139 >= v138)
        {
          uint64_t v315 = v139 - *v426;
          if ((unint64_t)(v315 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v316 = v138 - (void)*v426;
          uint64_t v317 = v316 >> 2;
          if (v316 >> 2 <= (unint64_t)(v315 + 1)) {
            uint64_t v317 = v315 + 1;
          }
          if ((unint64_t)v316 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v318 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v318 = v317;
          }
          uint64_t v463 = v410;
          if (v318) {
            v319 = (char *)sub_21677CB28(v410, v318);
          }
          else {
            v319 = 0;
          }
          v371 = &v319[8 * v315];
          v372 = &v319[8 * v318];
          *(void *)&__dst[24] = v372;
          *(void *)v371 = __str.__r_.__value_.__r.__words[0];
          v141 = v371 + 8;
          __str.__r_.__value_.__r.__words[0] = 0;
          *(void *)&__dst[16] = v371 + 8;
          v374 = *(void **)(v5 + 160);
          v373 = *(void **)(v5 + 168);
          if (v373 == v374)
          {
            int64x2_t v376 = vdupq_n_s64((unint64_t)v373);
          }
          else
          {
            do
            {
              uint64_t v375 = *--v373;
              *((void *)v371 - 1) = v375;
              v371 -= 8;
              void *v373 = 0;
            }
            while (v373 != v374);
            int64x2_t v376 = *(int64x2_t *)v426;
            v141 = *(void **)&__dst[16];
            v372 = *(char **)&__dst[24];
          }
          *(void *)(v5 + 160) = v371;
          *(void *)(v5 + 168) = v141;
          *(int64x2_t *)&__dst[8] = v376;
          uint64_t v387 = *(void *)(v5 + 176);
          *(void *)(v5 + 176) = v372;
          *(void *)&__dst[24] = v387;
          *(void *)std::string __dst = v376.i64[0];
          sub_2168BE9D8((uint64_t)__dst);
          std::string::size_type v140 = __str.__r_.__value_.__r.__words[0];
        }
        else
        {
          std::string::size_type v140 = 0;
          void *v139 = __str.__r_.__value_.__r.__words[0];
          v141 = v139 + 1;
          __str.__r_.__value_.__r.__words[0] = 0;
        }
        *(void *)(v5 + 168) = v141;
        goto LABEL_848;
      case 253:
        uint64_t v158 = sub_2169B1904((uint64_t)v11);
        if (*(char *)(v158 + 23) < 0)
        {
          sub_216778F24(&__str, *(void **)v158, *(void *)(v158 + 8));
        }
        else
        {
          long long v159 = *(_OWORD *)v158;
          __str.__r_.__value_.__r.__words[2] = *(void *)(v158 + 16);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v159;
        }
        pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidVariantIdentifier((long long *)&__str, (uint64_t)__dst);
        if (__dst[24])
        {
          v325 = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__dst);
          if (*((char *)v325 + 23) >= 0) {
            uint64_t v328 = (uint64_t)v325;
          }
          else {
            uint64_t v328 = *v325;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v326, v327, v328);
          if (v452 >= 0) {
            v329 = (const char *)&v451;
          }
          else {
            v329 = (const char *)v451;
          }
          textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, v329);
          if (SHIBYTE(v452) < 0) {
            operator delete((void *)v451);
          }
          if (__dst[24] && (__dst[23] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
        }
        unint64_t v330 = *(void *)(v5 + 928);
        if (v330 >= *(void *)(v5 + 936))
        {
          uint64_t v331 = sub_2167E9A44(v416, (long long *)&__str);
        }
        else
        {
          sub_2167E99E4(v416, (long long *)&__str);
          uint64_t v331 = v330 + 24;
        }
        *(void *)(v5 + 928) = v331;
        memset(__dst, 0, 24);
        sub_216B9DE38(v415, (uint64_t)__dst);
        *(void *)&long long v451 = __dst;
        sub_216782F20((void ***)&v451);
        sub_216779094(__dst, "");
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(v443, (uint64_t)&__str, (uint64_t)__dst, &v451);
        sub_21697DE94((int *)v443, (int *)&v451);
        sub_21697DEEC(v438, (int *)&v451 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v451 + 1);
        sub_21697C414(&v451);
        goto LABEL_779;
      case 254:
        sub_216981010(&__p, v443);
        sub_21698105C((_DWORD *)__p.__r_.__value_.__r.__words + 1, v438);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v443, __dst);
        sub_21697DE94((int *)v443, (int *)__dst);
        sub_21697DEEC(v438, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_21697C414(__dst);
        uint64_t v142 = sub_2169D1B08(v442);
        if (((*(uint64_t (**)(uint64_t, std::string *))(*(void *)v142 + 72))(v142, &__p) & 1) == 0)
        {
          uint64_t v143 = sub_2169D1B08(v442);
          (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)v143 + 64))(v143, &__p, 11);
          v144 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v144) {
            v144 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          }
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(__dst);
          sub_216B9DF78((uint64_t)v144 + 64, (uint64_t *)__dst, v5);
          if ((__dst[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__dst & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        v145 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        if (!v145) {
          v145 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        }
        pxrInternal__aapl__pxrReserved__::TfToTokenVector((long long **)(*(void *)(v5 + 952) - 24), __dst);
        uint64_t v146 = sub_2169D1B08(v442);
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)&off_26C756C08;
        sub_2169DBAB4((unsigned int **)&__str, (uint64_t **)__dst);
        (*(void (**)(uint64_t, std::string *, uint64_t, std::string *))(*(void *)v146 + 152))(v146, &__p, (uint64_t)v145 + 56, &__str);
        sub_2168EE084((uint64_t)&__str);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
        sub_216889A04((void ***)&__str);
        uint64_t v147 = *(void *)(v5 + 928);
        v148 = (void **)(v147 - 24);
        if (*(char *)(v147 - 1) < 0) {
          operator delete(*v148);
        }
        *(void *)(v5 + 928) = v148;
        *(void *)std::string __dst = *(void *)(v5 + 952) - 24;
        uint64_t v149 = *(void *)__dst;
        sub_216782F20((void ***)__dst);
        *(void *)(v5 + 952) = v149;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p.__r_.__value_.__r.__words + 1);
        v150 = &__p;
        goto LABEL_658;
      case 257:
        uint64_t v215 = sub_2169B1904((uint64_t)v11);
        if (*(char *)(v215 + 23) < 0)
        {
          sub_216778F24(&__str, *(void **)v215, *(void *)(v215 + 8));
        }
        else
        {
          long long v216 = *(_OWORD *)v215;
          __str.__r_.__value_.__r.__words[2] = *(void *)(v215 + 16);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v216;
        }
        pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidVariantIdentifier((long long *)&__str, (uint64_t)__dst);
        if (__dst[24])
        {
          v333 = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__dst);
          if (*((char *)v333 + 23) >= 0) {
            uint64_t v336 = (uint64_t)v333;
          }
          else {
            uint64_t v336 = *v333;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v334, v335, v336);
          if (v452 >= 0) {
            v337 = (const char *)&v451;
          }
          else {
            v337 = (const char *)v451;
          }
          textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, v337);
          if (SHIBYTE(v452) < 0) {
            operator delete((void *)v451);
          }
          if (__dst[24] && (__dst[23] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
        }
        uint64_t v338 = *(void *)(v5 + 952);
        v339 = (uint64_t *)(v338 - 24);
        unint64_t v340 = *(void *)(v338 - 16);
        if (v340 >= *(void *)(v338 - 8))
        {
          uint64_t v341 = sub_2167E9A44(v339, (long long *)&__str);
        }
        else
        {
          sub_2167E99E4(v339, (long long *)&__str);
          uint64_t v341 = v340 + 24;
        }
        *(void *)(v338 - 16) = v341;
        memset(__dst, 0, 24);
        sub_216B9B5A0(v423, (uint64_t)__dst);
        *(void *)&long long v451 = __dst;
        sub_216889A04((void ***)&v451);
        memset(__dst, 0, 24);
        sub_216B9B5A0(v420, (uint64_t)__dst);
        *(void *)&long long v451 = __dst;
        sub_216889A04((void ***)&v451);
        uint64_t v342 = *(void *)(v5 + 928);
        if (*(char *)(v342 - 1) < 0)
        {
          sub_216778F24(__dst, *(void **)(v342 - 24), *(void *)(v342 - 16));
        }
        else
        {
          long long v343 = *(_OWORD *)(v342 - 24);
          *(void *)&__dst[16] = *(void *)(v342 - 8);
          *(_OWORD *)std::string __dst = v343;
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v443, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(&__p, (uint64_t)__dst, (uint64_t)&__str, &v451);
        sub_21697DE94((int *)v443, (int *)&v451);
        sub_21697DEEC(v438, (int *)&v451 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v451 + 1);
        sub_21697C414(&v451);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p.__r_.__value_.__r.__words + 1);
        sub_21697C414(&__p);
        uint64_t v357 = sub_2169D1B08(v442);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(void *)v357 + 64))(v357, v443, 10);
LABEL_779:
        if ((__dst[23] & 0x80000000) == 0) {
          goto LABEL_782;
        }
        v234 = *(void **)__dst;
        goto LABEL_781;
      case 258:
        if (*(void *)(*(void *)(v5 + 880) - 24) != *(void *)(*(void *)(v5 + 880) - 16))
        {
          v264 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v264) {
            v264 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          }
          sub_216B9B4C0((uint64_t)v443, (uint64_t)v264 + 32, (uint64_t **)(*(void *)(v5 + 880) - 24), v5);
        }
        if (*(void *)(*(void *)(v5 + 904) - 24) != *(void *)(*(void *)(v5 + 904) - 16))
        {
          v265 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v265) {
            v265 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          }
          sub_216B9B4C0((uint64_t)v443, (uint64_t)v265 + 40, (uint64_t **)(*(void *)(v5 + 904) - 24), v5);
        }
        *(void *)std::string __dst = *(void *)(v5 + 880) - 24;
        uint64_t v266 = *(void *)__dst;
        sub_216889A04((void ***)__dst);
        *(void *)(v5 + 880) = v266;
        *(void *)std::string __dst = *(void *)(v5 + 904) - 24;
        uint64_t v267 = *(void *)__dst;
        sub_216889A04((void ***)__dst);
        *(void *)(v5 + 904) = v267;
        pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection(v443, (uint64_t)__dst);
        std::string __str = *(std::string *)__dst;
        memset(__dst, 0, 24);
        if (v464 < 0)
        {
          operator delete(*(void **)&__dst[24]);
          if ((__dst[23] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v443, &__p);
        sub_216779094(__dst, "");
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(&__p, (uint64_t)&__str, (uint64_t)__dst, &v451);
        sub_21697DE94((int *)v443, (int *)&v451);
        sub_21697DEEC(v438, (int *)&v451 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v451 + 1);
        sub_21697C414(&v451);
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p.__r_.__value_.__r.__words + 1);
        sub_21697C414(&__p);
        goto LABEL_782;
      case 259:
        int v67 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v67) {
          int v67 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        uint64_t v68 = sub_2169D1B08(v442);
        *(void *)&__dst[8] = &off_26C756C08;
        sub_2169DBAB4((unsigned int **)__dst, v426);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, unsigned char *))(*(void *)v68 + 152))(v68, v443, (uint64_t)v67 + 216, __dst);
        sub_2168EE084((uint64_t)__dst);
        uint64_t v69 = *(void *)(v5 + 160);
        for (uint64_t i22 = *(void *)(v5 + 168); i22 != v69; i22 -= 8)
        {
          uint64_t v72 = *(void *)(i22 - 8);
          uint64_t v71 = v72;
          if ((v72 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        goto LABEL_604;
      case 260:
        v128 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v128) {
          v128 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        uint64_t v129 = sub_2169D1B08(v442);
        *(void *)&__dst[8] = &off_26C756C08;
        sub_2169DBAB4((unsigned int **)__dst, v426);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, unsigned char *))(*(void *)v129 + 152))(v129, v443, (uint64_t)v128 + 272, __dst);
        sub_2168EE084((uint64_t)__dst);
        uint64_t v69 = *(void *)(v5 + 160);
        for (uint64_t i23 = *(void *)(v5 + 168); i23 != v69; i23 -= 8)
        {
          uint64_t v132 = *(void *)(i23 - 8);
          uint64_t v131 = v132;
          if ((v132 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v131 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
LABEL_604:
        *(void *)(v5 + 168) = v69;
        goto LABEL_850;
      case 263:
      case 264:
        goto LABEL_323;
      case 265:
        *(void *)&__dst[8] = 0;
        v166 = v417;
        goto LABEL_326;
      case 266:
        v125 = (std::string *)sub_2169B1904((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetupFactory((uint64_t)v440, v125);
        goto LABEL_850;
      case 267:
        uint64_t v182 = sub_2169B1904((uint64_t)(v11 - 112));
        v183 = (char *)v182;
        if (*(char *)(v182 + 23) >= 0) {
          size_t v184 = *(unsigned __int8 *)(v182 + 23);
        }
        else {
          size_t v184 = *(void *)(v182 + 8);
        }
        v185 = __dst;
        sub_2167940B4((uint64_t)__dst, v184 + 2);
        if (__dst[23] < 0) {
          v185 = *(unsigned char **)__dst;
        }
        if (v184)
        {
          if (v183[23] >= 0) {
            v186 = v183;
          }
          else {
            v186 = *(char **)v183;
          }
          memmove(v185, v186, v184);
        }
        strcpy(&v185[v184], "[]");
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetupFactory((uint64_t)v440, (std::string *)__dst);
        goto LABEL_761;
      case 268:
        *(void *)&__dst[8] = 0;
        sub_2168ED33C(v433, __dst);
        sub_2168EE084((uint64_t)__dst);
        goto LABEL_272;
      case 269:
LABEL_272:
        *(unsigned char *)(v5 + 801) = 0;
        goto LABEL_850;
      case 270:
        sub_216B9E1A0((uint64_t)v11, v5);
        goto LABEL_539;
      case 271:
      case 274:
        if (!*(unsigned char *)(v5 + 600)) {
          pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::StopRecordingString((uint64_t)v440);
        }
        goto LABEL_850;
      case 272:
      case 275:
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v443, __dst);
        sub_21697DE94((int *)v443, (int *)__dst);
        sub_21697DEEC(v438, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        goto LABEL_657;
      case 273:
        *(unsigned char *)(v5 + 801) = 1;
        sub_216B9E1A0((uint64_t)v11, v5);
LABEL_539:
        if (!*(unsigned char *)(v5 + 600)) {
          pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::StartRecordingString((uint64_t)v440);
        }
        goto LABEL_850;
      case 276:
        sub_216B9E1A0((uint64_t)(v11 - 168), v5);
        uint64_t v80 = *(_DWORD **)(v5 + 288);
        for (i24 = *(_DWORD **)(v5 + 296); i24 != v80; sub_216981128(v431, i24))
          i24 -= 2;
        goto LABEL_411;
      case 277:
        sub_216B9E9AC(0, v5, v17);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v443, __dst);
        sub_21697DE94((int *)v443, (int *)__dst);
        sub_21697DEEC(v438, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        goto LABEL_657;
      case 278:
        sub_216B9E1A0((uint64_t)(v11 - 168), v5);
        uint64_t v80 = *(_DWORD **)(v5 + 288);
        for (i25 = *(_DWORD **)(v5 + 296); i25 != v80; sub_216981128(v431, i25))
          i25 -= 2;
        goto LABEL_411;
      case 279:
        sub_216B9E9AC(1, v5, v17);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v443, __dst);
        sub_21697DE94((int *)v443, (int *)__dst);
        sub_21697DEEC(v438, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        goto LABEL_657;
      case 280:
        sub_216B9E1A0((uint64_t)(v11 - 168), v5);
        uint64_t v80 = *(_DWORD **)(v5 + 288);
        for (i26 = *(_DWORD **)(v5 + 296); i26 != v80; sub_216981128(v431, i26))
          i26 -= 2;
        goto LABEL_411;
      case 281:
        sub_216B9E9AC(4, v5, v17);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v443, __dst);
        sub_21697DE94((int *)v443, (int *)__dst);
        sub_21697DEEC(v438, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        goto LABEL_657;
      case 282:
        sub_216B9E1A0((uint64_t)(v11 - 168), v5);
        uint64_t v80 = *(_DWORD **)(v5 + 288);
        for (i27 = *(_DWORD **)(v5 + 296); i27 != v80; sub_216981128(v431, i27))
          i27 -= 2;
LABEL_411:
        *(void *)(v5 + 296) = v80;
        *(unsigned char *)(v5 + 312) = 1;
        goto LABEL_850;
      case 283:
        sub_216B9E9AC(5, v5, v17);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v443, __dst);
        sub_21697DE94((int *)v443, (int *)__dst);
        sub_21697DEEC(v438, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        goto LABEL_657;
      case 284:
        sub_216B9E1A0((uint64_t)(v11 - 168), v5);
        v239 = *(_DWORD **)(v5 + 288);
        for (i28 = *(_DWORD **)(v5 + 296); i28 != v239; sub_216981128(v431, i28))
          i28 -= 2;
        goto LABEL_476;
      case 285:
        sub_216B9E9AC(2, v5, v17);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v443, __dst);
        sub_21697DE94((int *)v443, (int *)__dst);
        sub_21697DEEC(v438, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        goto LABEL_657;
      case 286:
        sub_216B9E1A0((uint64_t)(v11 - 168), v5);
        v239 = *(_DWORD **)(v5 + 288);
        for (i29 = *(_DWORD **)(v5 + 296); i29 != v239; sub_216981128(v431, i29))
          i29 -= 2;
LABEL_476:
        *(void *)(v5 + 296) = v239;
        *(unsigned char *)(v5 + 312) = 0;
        goto LABEL_850;
      case 287:
        sub_216B9E9AC(3, v5, v17);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v443, __dst);
        sub_21697DE94((int *)v443, (int *)__dst);
        sub_21697DEEC(v438, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        goto LABEL_657;
      case 288:
        sub_216B9E1A0((uint64_t)(v11 - 168), v5);
        goto LABEL_850;
      case 289:
        v133 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v133) {
          v133 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        uint64_t v134 = sub_2169D1B08(v442);
        *(void *)&__dst[8] = &off_26C758890;
        sub_216A9EC50(__dst, (uint64_t)v427);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, unsigned char *))(*(void *)v134 + 152))(v134, v443, (uint64_t)v133 + 432, __dst);
        sub_2168EE084((uint64_t)__dst);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v443, __dst);
        sub_21697DE94((int *)v443, (int *)__dst);
        sub_21697DEEC(v438, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        goto LABEL_657;
      case 300:
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v443, __dst);
        pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)v441, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__dst, (int *)&__str);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_21697C414(__dst);
        if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&__str))
        {
          *(void *)std::string __dst = "sdf/textFileFormat.yy";
          *(void *)&__dst[8] = "_AttributeAppendConnectionPath";
          *(void *)&__dst[16] = 688;
          *(void *)&__dst[24] = "void _AttributeAppendConnectionPath(Sdf_TextParserContext *)";
          LOBYTE(v463) = 0;
          v257 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__str);
          v258 = v411;
          if (*(char *)(v5 + 71) < 0) {
            v258 = (void *)*v411;
          }
          uint64_t v259 = *(unsigned int *)(v5 + 968);
          pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&__str, (int *)&v451);
          v260 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v451);
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__dst, (pxrInternal__aapl__pxrReserved__ *)"Connection path <%s> (in file @%s@, line %i) has a variant selection, but variant selections are not meaningful in connection paths.  Stripping the variant selection and using <%s> instead.  Resaving the file will fix this issue.", v261, v257, v258, v259, v260);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v451 + 1);
          sub_21697C414(&v451);
          pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&__str, (int *)__dst);
          sub_21697DE94((int *)&__str, (int *)__dst);
          sub_21697DEEC((int *)__str.__r_.__value_.__r.__words + 1, (int *)&__dst[4]);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
          sub_21697C414(__dst);
        }
        unint64_t v262 = *(void *)(v5 + 296);
        if (v262 >= *(void *)(v5 + 304))
        {
          uint64_t v263 = sub_216981B30(v407, &__str);
        }
        else
        {
          sub_216981010(*(_DWORD **)(v5 + 296), &__str);
          sub_21698105C((_DWORD *)(v262 + 4), (_DWORD *)__str.__r_.__value_.__r.__words + 1);
          uint64_t v263 = v262 + 8;
        }
        *(void *)(v5 + 296) = v263;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__str.__r_.__value_.__r.__words + 1);
        goto LABEL_860;
      case 301:
        *(_OWORD *)&__dst[8] = 0uLL;
        *(void *)std::string __dst = &__dst[8];
        sub_216997EC4((uint64_t)v427, *(void **)(v5 + 192));
        v126 = *(void **)&__dst[8];
        *(void *)(v5 + 184) = *(void *)__dst;
        *(void *)(v5 + 192) = v126;
        uint64_t v127 = *(void *)&__dst[16];
        *(void *)(v5 + 200) = *(void *)&__dst[16];
        if (v127)
        {
          v126[2] = v418;
          *(void *)std::string __dst = &__dst[8];
          *(_OWORD *)&__dst[8] = 0uLL;
          v126 = 0;
        }
        else
        {
          *v427 = v418;
        }
        sub_216997EC4((uint64_t)__dst, v126);
        goto LABEL_850;
      case 307:
        sub_2169B0370((uint64_t)(v11 - 56));
        *(void *)v425 = v245;
        goto LABEL_850;
      case 308:
        *(void *)std::string __dst = v425;
        v229 = sub_216A9E780(v427, v425, (uint64_t)&unk_2174BFD90, (uint64_t **)__dst);
        sub_2168EC6DC(v229 + 5, v434);
        goto LABEL_850;
      case 309:
        sub_2169B0370((uint64_t)(v11 - 112));
        *(void *)v425 = v230;
        *(void *)&__dst[8] = (char *)&off_26C75B258 + 3;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v425;
        v166 = sub_216A9E780(v427, v425, (uint64_t)&unk_2174BFD90, (uint64_t **)&__str) + 5;
        goto LABEL_326;
      case 318:
        v84 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v84) {
          v84 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        goto LABEL_625;
      case 319:
        unsigned int v23 = 1;
        goto LABEL_387;
      case 320:
      case 322:
      case 324:
      case 326:
      case 328:
      case 330:
        unsigned int v23 = 1;
        goto LABEL_22;
      case 321:
        sub_216B9B6E0((uint64_t)v11, 1u, v5);
        goto LABEL_504;
      case 323:
        sub_216B9B6E0((uint64_t)v11, 1u, v5);
        *(_DWORD *)(v5 + 448) = 1;
        goto LABEL_850;
      case 325:
        sub_216B9B6E0((uint64_t)v11, 1u, v5);
        goto LABEL_465;
      case 327:
        sub_216B9B6E0((uint64_t)v11, 1u, v5);
        goto LABEL_456;
      case 329:
        sub_216B9B6E0((uint64_t)v11, 1u, v5);
        goto LABEL_502;
      case 331:
        v156 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v156) {
          v156 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        goto LABEL_500;
      case 332:
        v157 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v157) {
          v157 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        goto LABEL_374;
      case 333:
        unint64_t v167 = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v404 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)v167;
        if (!v167) {
          v404 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        uint64_t v168 = sub_2169B1904((uint64_t)v11);
        UnitFromName = pxrInternal__aapl__pxrReserved__::SdfGetUnitFromName(v168);
        if (!*((_DWORD *)UnitFromName + 2)
          && !strcmp((const char *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*UnitFromName + 8) & 0x7FFFFFFFFFFFFFFFLL)))
        {
          uint64_t v172 = *(char *)(v168 + 23) >= 0 ? v168 : *(void *)v168;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid display unit", v170, v171, v172);
          v173 = __dst[23] >= 0 ? __dst : *(const char **)__dst;
          textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, v173);
          if ((__dst[23] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
        }
        uint64_t v175 = *UnitFromName;
        uint64_t v174 = UnitFromName[1];
        uint64_t v176 = sub_2169D1B08(v442);
        *(void *)&__dst[8] = &off_26C757FE0;
        v177 = operator new(0x18uLL);
        v178 = (char *)v404 + 128;
        *(void *)v177 = v175;
        *((void *)v177 + 1) = v174;
        atomic_store(0, (unsigned int *)v177 + 4);
        *(void *)std::string __dst = v177;
        atomic_fetch_add_explicit((atomic_uint *volatile)v177 + 4, 1u, memory_order_relaxed);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, char *, unsigned char *))(*(void *)v176 + 152))(v176, v443, v178, __dst);
        goto LABEL_327;
      case 334:
        v151 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v151) {
          v151 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        sub_2169B1904((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__str);
        uint64_t v152 = sub_2169D1B08(v442);
        v153 = v443;
        *(void *)&__dst[8] = (char *)&off_26C750C70 + 1;
        *(void *)std::string __dst = __str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          std::string::size_type v154 = __str.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
          if ((atomic_fetch_add_explicit((atomic_uint *volatile)(__str.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)*(void *)std::string __dst = v154; {
        }
          }
        goto LABEL_556;
      case 335:
        v105 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v105) {
          v105 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        goto LABEL_472;
      case 338:
        sub_2168EE4C4(v461, v434);
        sub_216B9ED00(v443, (pxrInternal__aapl__pxrReserved__::VtValue *)v461, v5);
        v188 = (char *)v461;
        goto LABEL_328;
      case 339:
        v460 = (char *)&off_26C75B258 + 3;
        sub_216B9ED00(v443, (pxrInternal__aapl__pxrReserved__::VtValue *)v459, v5);
        v188 = v459;
        goto LABEL_328;
      case 340:
      case 354:
        sub_216B9F260((void *)v5);
        goto LABEL_850;
      case 341:
      case 355:
        int v25 = (void ***)(*(void *)(v5 + 784) - 8);
        sub_2168EBBB8(v25, 0);
        *(void *)(v5 + 784) = v25;
        goto LABEL_850;
      case 346:
        goto LABEL_691;
      case 347:
        uint64_t v106 = *(void *)(v5 + 784);
        uint64_t v107 = *(void *)(v5 + 776);
        v108 = (long long *)sub_2169B1904((uint64_t)(v11 - 112));
        uint64_t v109 = (v106 - v107) >> 3;
        v110 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)(v107 + 8 * v109-- - 16), v108);
        sub_2168EC844((pxrInternal__aapl__pxrReserved__::VtValue *)v110, (const void ****)(*(void *)(v5 + 776) + 8 * v109));
        v111 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(void *)(v5 + 776) + 8 * v109);
        goto LABEL_454;
      case 352:
        sub_216B9F414((uint64_t)v11, (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5);
        goto LABEL_850;
      case 353:
        uint64_t v114 = sub_2169B1904((uint64_t)(v11 - 112));
        v115 = (char *)v114;
        if (*(char *)(v114 + 23) >= 0) {
          size_t v116 = *(unsigned __int8 *)(v114 + 23);
        }
        else {
          size_t v116 = *(void *)(v114 + 8);
        }
        v117 = __dst;
        sub_2167940B4((uint64_t)__dst, v116 + 2);
        if (__dst[23] < 0) {
          v117 = *(unsigned char **)__dst;
        }
        if (v116)
        {
          if (v115[23] >= 0) {
            v118 = v115;
          }
          else {
            v118 = *(char **)v115;
          }
          memmove(v117, v118, v116);
        }
        strcpy(&v117[v116], "[]");
        if (pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetupFactory((uint64_t)v440, (std::string *)__dst))goto LABEL_761; {
        v121 = __dst;
        }
        if (__dst[23] < 0) {
          v121 = *(unsigned char **)__dst;
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unrecognized value typename '%s' for dictionary", v119, v120, v121);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v122 = &__str;
        }
        else {
          v122 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        goto LABEL_632;
      case 360:
        sub_216779094(&__str, "string");
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(__dst, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else {
          *(std::string *)std::string __dst = __str;
        }
        LODWORD(v465[0]) = 3;
        sub_216B9F414((uint64_t)__dst, (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5);
        sub_216976F30((uint64_t)__dst);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::AppendValue(v440, (uint64_t)v11);
        sub_216B9F4C0(v5);
LABEL_691:
        sub_216B9F3C8((uint64_t)(v11 - 112), v5);
        goto LABEL_850;
      case 361:
        *(void *)&__dst[8] = 0;
        sub_2168ED33C(v434, __dst);
        sub_2168EE084((uint64_t)__dst);
        if (pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)v440)) {
          goto LABEL_228;
        }
        goto LABEL_850;
      case 362:
      case 368:
        sub_216B9F638(v5);
        goto LABEL_850;
      case 363:
        sub_2168EC844(v434, *(const void *****)(v5 + 776));
LABEL_453:
        v111 = *(pxrInternal__aapl__pxrReserved__::VtDictionary **)(v5 + 776);
LABEL_454:
        pxrInternal__aapl__pxrReserved__::VtDictionary::clear(v111);
        goto LABEL_850;
      case 365:
        *(void *)&__dst[8] = 0;
        sub_2168ED33C(v434, __dst);
        sub_2168EE084((uint64_t)__dst);
        if (!pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)v440)) {
          goto LABEL_850;
        }
LABEL_228:
        sub_216779094(__dst, "None");
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetRecordedString((uint64_t)v440, (const std::string *)__dst);
        goto LABEL_761;
      case 366:
        sub_216B9F4C0(v5);
        goto LABEL_850;
      case 367:
        if ((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)v440) & 1) == 0
          && *(unsigned char *)(v5 + 664))
        {
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Type name has [] for non-shaped value.\n", v232, v233);
          if (__dst[23] >= 0) {
            v196 = __dst;
          }
          else {
            v196 = *(const char **)__dst;
          }
          goto LABEL_824;
        }
        memset(__dst, 0, 24);
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::ProduceValue((uint64_t)v440, __dst, v233, &__str);
        sub_2168ED33C(v434, &__str);
        sub_2168EE084((uint64_t)&__str);
        __str.__r_.__value_.__l.__size_ = 0;
        int v303 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v434, (std::type_info *)&__str, v302);
        sub_2168EE084((uint64_t)&__str);
        if (!v303) {
          goto LABEL_761;
        }
        v306 = __dst;
        if (__dst[23] < 0) {
          v306 = *(unsigned char **)__dst;
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Error parsing tuple value: %s", v304, v305, v306);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v122 = &__str;
        }
        else {
          v122 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        goto LABEL_632;
      case 369:
        if (pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)v440))
        {
          sub_216779094(__dst, "[]");
          pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetRecordedString((uint64_t)v440, (const std::string *)__dst);
          if ((__dst[23] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
        }
        if ((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)v440) & 1) != 0
          || *(unsigned char *)(v5 + 664))
        {
          memset(__dst, 0, 24);
          pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::ProduceValue((uint64_t)v440, __dst, v202, &__str);
          sub_2168ED33C(v434, &__str);
          sub_2168EE084((uint64_t)&__str);
          __str.__r_.__value_.__l.__size_ = 0;
          int v204 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v434, (std::type_info *)&__str, v203);
          sub_2168EE084((uint64_t)&__str);
          if (v204)
          {
            v207 = __dst;
            if (__dst[23] < 0) {
              v207 = *(unsigned char **)__dst;
            }
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Error parsing shaped value: %s", v205, v206, v207);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v122 = &__str;
            }
            else {
              v122 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
LABEL_632:
            textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, (const char *)v122);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
          }
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Type name missing [] for shaped value.", v201, v202);
          if (__dst[23] >= 0) {
            v196 = __dst;
          }
          else {
            v196 = *(const char **)__dst;
          }
LABEL_824:
          textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, v196);
        }
LABEL_761:
        if ((__dst[23] & 0x80000000) != 0)
        {
          v353 = *(void **)__dst;
LABEL_784:
          operator delete(v353);
        }
        goto LABEL_850;
      case 370:
        uint64_t v212 = sub_2169B1904((uint64_t)v11);
        if (*(char *)(v212 + 23) < 0)
        {
          sub_216778F24(__dst, *(void **)v212, *(void *)(v212 + 8));
        }
        else
        {
          long long v213 = *(_OWORD *)v212;
          *(void *)&__dst[16] = *(void *)(v212 + 16);
          *(_OWORD *)std::string __dst = v213;
        }
        uint64_t v332 = __dst[23];
        if (__dst[23] < 0) {
          uint64_t v332 = *(void *)&__dst[8];
        }
        if (v332)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&__str, __dst);
        }
        else
        {
          __str.__r_.__value_.__r.__words[0] = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&__str);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)__str.__r_.__value_.__r.__words + 1);
        }
        sub_2169D13F4((uint64_t)v434, &__str);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__str.__r_.__value_.__r.__words + 1);
        goto LABEL_759;
      case 371:
      case 372:
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::AppendValue(v440, (uint64_t)v11);
        goto LABEL_850;
      case 373:
        sub_2169B1904((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__str);
        *(void *)std::string __dst = __str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__s.__data_[0] & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(__str.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)__dst &= 0xFFFFFFFFFFFFFFF8;
        }
        LODWORD(v465[0]) = 4;
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::AppendValue(v440, (uint64_t)__dst);
        sub_216976F30((uint64_t)__dst);
        goto LABEL_558;
      case 374:
        sub_2169B1904((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(&__str);
        sub_2169C3E44(__dst, (long long *)&__str);
        LODWORD(v465[0]) = 5;
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::AppendValue(v440, (uint64_t)__dst);
        sub_216976F30((uint64_t)__dst);
        if (v458 < 0)
        {
          v234 = v457;
LABEL_781:
          operator delete(v234);
        }
LABEL_782:
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_850;
        }
        v353 = (void *)__str.__r_.__value_.__r.__words[0];
        goto LABEL_784;
      case 375:
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::BeginList((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)v440);
        goto LABEL_850;
      case 376:
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::EndList((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)v440);
        goto LABEL_850;
      case 383:
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::BeginTuple((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)v440, (const char *)7, v17);
        goto LABEL_850;
      case 384:
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::EndTuple((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)v440, (const char *)7, v17);
        goto LABEL_850;
      case 390:
        *(unsigned char *)(v5 + 801) = 0;
LABEL_323:
        *(void *)&__dst[8] = (char *)&off_26C756E60 + 3;
        goto LABEL_324;
      case 391:
        *(unsigned char *)(v5 + 801) = 1;
        *(void *)&__dst[8] = (char *)&off_26C756E60 + 3;
LABEL_324:
        *(_DWORD *)std::string __dst = 1;
        goto LABEL_325;
      case 392:
        *(unsigned char *)(v5 + 801) = 1;
        goto LABEL_320;
      case 393:
        *(unsigned char *)(v5 + 801) = 0;
LABEL_320:
        *(void *)&__dst[8] = (char *)&off_26C756E60 + 3;
        *(_DWORD *)std::string __dst = 0;
LABEL_325:
        v166 = v433;
LABEL_326:
        sub_2168ED33C(v166, __dst);
        goto LABEL_327;
      case 394:
        uint64_t v24 = (uint64_t)(v11 - 168);
        goto LABEL_345;
      case 395:
        v220 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v220) {
          v220 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        uint64_t v221 = sub_2169D1B08(v442);
        *(void *)&__dst[8] = &off_26C758890;
        sub_216A9EC50(__dst, (uint64_t)v427);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, unsigned char *))(*(void *)v221 + 152))(v221, v443, (uint64_t)v220 + 432, __dst);
        sub_2168EE084((uint64_t)__dst);
        goto LABEL_406;
      case 396:
        sub_216B9F7DC((uint64_t)(v11 - 224), v5);
        uint64_t v218 = sub_2169B1904((uint64_t)v11);
        if (*(char *)(v218 + 23) < 0)
        {
          sub_216778F24(__dst, *(void **)v218, *(void *)(v218 + 8));
        }
        else
        {
          long long v219 = *(_OWORD *)v218;
          *(void *)&__dst[16] = *(void *)(v218 + 16);
          *(_OWORD *)std::string __dst = v219;
        }
        uint64_t v352 = __dst[23];
        if (__dst[23] < 0) {
          uint64_t v352 = *(void *)&__dst[8];
        }
        if (v352)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&__str, __dst);
        }
        else
        {
          __str.__r_.__value_.__r.__words[0] = 0;
          sub_2169C4380(&__str);
        }
        v455 = (char *)&off_26C754FA0 + 1;
        sub_216981010(&v453, &__str);
        sub_21698105C(&v454, (_DWORD *)__str.__r_.__value_.__r.__words + 1);
        sub_216B9ED00(v443, (pxrInternal__aapl__pxrReserved__::VtValue *)&v453, v5);
        sub_2168EE084((uint64_t)&v453);
        sub_216B9FBA8(v5);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__str.__r_.__value_.__r.__words + 1);
LABEL_759:
        v347 = &__str;
LABEL_760:
        sub_21697C414(v347);
        goto LABEL_761;
      case 397:
      case 401:
      case 403:
      case 405:
        sub_216B9F7DC((uint64_t)v11, v5);
        *(unsigned char *)(v5 + 224) = 1;
        goto LABEL_850;
      case 398:
        goto LABEL_405;
      case 399:
      case 407:
LABEL_345:
        sub_216B9F7DC(v24, v5);
        goto LABEL_850;
      case 400:
        uint64_t v22 = 2;
        goto LABEL_405;
      case 402:
        uint64_t v22 = 1;
        goto LABEL_405;
      case 404:
        uint64_t v22 = 4;
        goto LABEL_405;
      case 406:
        uint64_t v22 = 5;
        goto LABEL_405;
      case 408:
        uint64_t v22 = 3;
LABEL_405:
        sub_216B9FE40(v22, v5, v17);
LABEL_406:
        sub_216B9FBA8(v5);
        goto LABEL_850;
      case 409:
        sub_216B9F7DC((uint64_t)(v11 - 168), v5);
        *(unsigned char *)(v5 + 224) = 1;
        sub_216BA0018((uint64_t)(v11 - 56), v5);
        sub_216BA0194((pxrInternal__aapl__pxrReserved__::SdfPath *)(*(void *)(v5 + 240) - 8), (uint64_t *)v5);
        goto LABEL_850;
      case 420:
        v84 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v84) {
          v84 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
LABEL_625:
        uint64_t v300 = sub_2169B1904((uint64_t)v11);
        uint64_t v301 = sub_2169D1B08(v442);
        *(void *)&__dst[8] = &off_26C750BB8;
        sub_21691B31C((unsigned int **)__dst, v300);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, unsigned char *))(*(void *)v301 + 152))(v301, v443, (uint64_t)v84 + 48, __dst);
        goto LABEL_327;
      case 421:
        unsigned int v23 = 8;
LABEL_387:
        sub_216B9B6E0((uint64_t)v11, v23, v5);
        goto LABEL_850;
      case 422:
      case 424:
      case 426:
      case 428:
      case 430:
      case 432:
        unsigned int v23 = 8;
LABEL_22:
        sub_216B9B90C(v23, v5);
        goto LABEL_850;
      case 423:
        sub_216B9B6E0((uint64_t)v11, 8u, v5);
LABEL_504:
        int v235 = 2;
        goto LABEL_565;
      case 425:
        sub_216B9B6E0((uint64_t)v11, 8u, v5);
LABEL_564:
        int v235 = 1;
        goto LABEL_565;
      case 427:
        sub_216B9B6E0((uint64_t)v11, 8u, v5);
LABEL_465:
        int v235 = 4;
        goto LABEL_565;
      case 429:
        sub_216B9B6E0((uint64_t)v11, 8u, v5);
LABEL_456:
        int v235 = 5;
        goto LABEL_565;
      case 431:
        sub_216B9B6E0((uint64_t)v11, 8u, v5);
LABEL_502:
        int v235 = 3;
LABEL_565:
        *(_DWORD *)(v5 + 448) = v235;
        goto LABEL_850;
      case 433:
        v156 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v156) {
          v156 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
LABEL_500:
        uint64_t v253 = sub_2169B1904((uint64_t)v11);
        uint64_t v254 = sub_2169D1B08(v442);
        *(void *)&__dst[8] = &off_26C750BB8;
        sub_21691B31C((unsigned int **)__dst, v253);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, unsigned char *))(*(void *)v254 + 152))(v254, v443, (uint64_t)v156 + 136, __dst);
        goto LABEL_327;
      case 434:
        v157 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v157) {
          v157 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
LABEL_374:
        v197 = (uint64_t *)sub_2169B1904((uint64_t)v11);
        int v199 = sub_216B9C5D4(v197, (char *)v5, v198);
        uint64_t v200 = sub_2169D1B08(v442);
        *(void *)&__dst[8] = (char *)&off_26C759D30 + 3;
        *(_DWORD *)std::string __dst = v199;
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, unsigned char *))(*(void *)v200 + 152))(v200, v443, (uint64_t)v157 + 248, __dst);
        goto LABEL_327;
      case 435:
        v151 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v151) {
          v151 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        sub_2169B1904((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__str);
        uint64_t v152 = sub_2169D1B08(v442);
        v153 = v443;
        *(void *)&__dst[8] = (char *)&off_26C750C70 + 1;
        *(void *)std::string __dst = __str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          std::string::size_type v191 = __str.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
          if ((atomic_fetch_add_explicit((atomic_uint *volatile)(__str.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)*(void *)std::string __dst = v191; {
        }
          }
LABEL_556:
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, unsigned char *))(*(void *)v152 + 152))(v152, v153, (uint64_t)v151 + 416, __dst);
LABEL_557:
        sub_2168EE084((uint64_t)__dst);
LABEL_558:
        std::string::size_type v140 = __str.__r_.__value_.__r.__words[0];
LABEL_848:
        if ((v140 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v140 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        goto LABEL_850;
      case 436:
        v105 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v105) {
          v105 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
LABEL_472:
        uint64_t v243 = sub_2169D1B08(v442);
        *(void *)&__dst[8] = (char *)&off_26C750C70 + 1;
        *(void *)std::string __dst = 0;
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, unsigned char *))(*(void *)v243 + 152))(v243, v443, (uint64_t)v105 + 416, __dst);
LABEL_327:
        v188 = __dst;
LABEL_328:
        sub_2168EE084((uint64_t)v188);
        goto LABEL_850;
      case 440:
      case 441:
        memset(__dst, 0, 24);
        sub_2169D1D10(v421, (uint64_t)__dst);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
        sub_216981168((void ***)&__str);
        goto LABEL_850;
      case 445:
        sub_216BA0018((uint64_t)v11, v5);
        goto LABEL_850;
      case 446:
        *(void *)std::string __dst = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(__dst);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&__dst[4]);
        sub_21697DE94(v441, (int *)__dst);
        sub_21697DEEC(v437, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
LABEL_657:
        v150 = (std::string *)__dst;
        goto LABEL_658;
      case 448:
        sub_216B9DD44((uint64_t)v11, (int *)v5);
        goto LABEL_850;
      case 449:
        uint64_t v192 = sub_2169B1904((uint64_t)v11);
        pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(__dst, v192);
        sub_21697DE94(v441, (int *)__dst);
        sub_21697DEEC(v437, (int *)&__dst[4]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__dst[4]);
        sub_21697C414(__dst);
        if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v441)
           || pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v441))
          && !pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)v441))
        {
          goto LABEL_850;
        }
        if (*(char *)(v192 + 23) >= 0) {
          uint64_t v195 = v192;
        }
        else {
          uint64_t v195 = *(void *)v192;
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid prim or property scene path", v193, v194, v195);
        if (__dst[23] >= 0) {
          v196 = __dst;
        }
        else {
          v196 = *(const char **)__dst;
        }
        goto LABEL_824;
      default:
        goto LABEL_850;
    }
    goto LABEL_854;
  }
LABEL_883:
  textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v5, "syntax error");
LABEL_884:
  uint64_t v400 = 1;
LABEL_885:
  sub_216976F30((uint64_t)v444);
  for (uint64_t i30 = 0; i30 != -84000; i30 -= 56)
    sub_216976F30((uint64_t)&v466[i30 + 83944]);
  sub_216976F30((uint64_t)v446);
  return v400;
}

void sub_216B9A5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (v68 < 0) {
    operator delete((void *)STACK[0x280]);
  }
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  sub_216976F30((uint64_t)&a68);
  for (uint64_t i = 0; i != -84000; i -= 56)
    sub_216976F30((uint64_t)&STACK[0x14B28] + i);
  sub_216976F30((uint64_t)&STACK[0x210]);
  _Unwind_Resume(a1);
}

uint64_t sub_216B9B4C0(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  v9[2] = *(unsigned int **)MEMORY[0x263EF8340];
  uint64_t v7 = sub_2169D1B08((uint64_t *)(a4 + 808));
  v9[1] = (unsigned int *)&off_26C756C08;
  sub_2169DBAB4(v9, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int **))(*(void *)v7 + 152))(v7, a1, a2, v9);
  return sub_2168EE084((uint64_t)v9);
}

void sub_216B9B584(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_216B9B5A0(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    void v16[4] = result;
    int v13 = (char *)sub_216782ED8((uint64_t)result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    sub_216BA3734(a1, v16);
    uint64_t v8 = (void *)a1[1];
    uint64_t result = sub_216BA38D4(v16);
  }
  else
  {
    void *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_216B9B6CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BA38D4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B9B6E0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  sub_2169B1904(a1);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&Type);
  unint64_t v5 = (uint64_t *)(a3 + 440);
  if (&Type == (uint64_t *)(a3 + 440))
  {
    uint64_t v6 = Type;
  }
  else
  {
    if ((*v5 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v6 = 0;
    uint64_t *v5 = Type;
    uint64_t Type = 0;
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(_DWORD *)(a3 + 448) = 0;
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v8 = (char *)v7 + 72 * a2;
  if (v8[120]) {
    unint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)(v8 + 56);
  }
  else {
    unint64_t v9 = 0;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsMetadataField(v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a3 + 440)))return pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::StartRecordingString(a3 + 456); {
  FieldDefinitiouint64_t n = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a3 + 440));
  }
  FallbackValue = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(FieldDefinition);
  uint64_t Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType(FallbackValue, v12, v13);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v21);
  if (!sub_216BA0FE0(&Type, &v21))
  {
    uint64_t v17 = (const pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(FieldDefinition);
    unint64_t v18 = 0;
    uint64_t v19 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType((atomic_ullong ***)v7, v17, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v18);
    AsTokeuint64_t n = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&v19, (atomic_uint **)&v20);
    if ((v20 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      EmptyString = (std::string *)((v20 & 0xFFFFFFFFFFFFFFF8) + 16);
      goto LABEL_21;
    }
LABEL_20:
    EmptyString = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    goto LABEL_21;
  }
  unint64_t v18 = 0;
  uint64_t v19 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType((atomic_ullong ***)v7, (const pxrInternal__aapl__pxrReserved__::TfType *)&v21, (atomic_uint **)&v18);
  AsTokeuint64_t n = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&v19, (atomic_uint **)&v20);
  if ((v20 & 0xFFFFFFFFFFFFFFF8) == 0) {
    goto LABEL_20;
  }
  EmptyString = (std::string *)((v20 & 0xFFFFFFFFFFFFFFF8) + 16);
LABEL_21:
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetupFactory(a3 + 456, EmptyString);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216B9B8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216B9B90C(unsigned int a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  char v4 = (char *)v3 + 72 * a1;
  if (v4[120]) {
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)(v4 + 56);
  }
  else {
    unint64_t v5 = 0;
  }
  uint64_t v6 = (void *)(a2 + 440);
  if (!pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsMetadataField(v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 440)))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsValidField(v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 440)))
    {
      unint64_t v17 = *v6 & 0xFFFFFFFFFFFFFFF8;
      if (v17)
      {
        unint64_t v18 = (const char *)(v17 + 16);
        if (*(char *)(v17 + 39) < 0) {
          unint64_t v18 = *(const char **)v18;
        }
      }
      else
      {
        unint64_t v18 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\"%s\" is registered as a non-metadata field", v15, v16, v18);
      if (v36 >= 0) {
        p_p = (const char *)&__p;
      }
      else {
        p_p = (const char *)__p;
      }
      textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, p_p);
      goto LABEL_48;
    }
    uint64_t v42 = 0;
    if (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)))
    {
      uint64_t v19 = (const void ****)sub_2168EF25C((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760));
      pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *)&__p, v19);
      sub_2169C29AC((uint64_t)&v41, &__p);
      unint64_t v20 = &__p;
    }
    else
    {
      uint64_t v40 = 0;
      uint64_t v23 = sub_2169D1B08((uint64_t *)(a2 + 808));
      if (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v23 + 112))(v23, a2 + 816, a2 + 440, &v39)&& ((sub_21698F348((pxrInternal__aapl__pxrReserved__::VtValue *)&v39) & 1) != 0|| (__p = "sdf/textFileFormat.yy", uint64_t v35 = "operator()", v36 = 1170, v37 = "auto _GenericMetadataEnd(SdfSpecType, Sdf_TextParserContext *)::(anonymous class)::operator()() const", v38 = 0, (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "v.IsHolding<SdfUnregisteredValue>()", 0))))
      {
        if ((v40 & 4) != 0) {
          uint64_t v24 = (void *)(*(uint64_t (**)(void **))((v40 & 0xFFFFFFFFFFFFFFF8) + 168))(&v39);
        }
        else {
          uint64_t v24 = v39;
        }
        sub_2168EC6DC(&v39, v24);
      }
      else
      {
        uint64_t v35 = 0;
        sub_2168ED33C(&v39, &__p);
        sub_2168EE084((uint64_t)&__p);
      }
      if (*(_DWORD *)(a2 + 448))
      {
        if (!v40 || sub_21698F468((pxrInternal__aapl__pxrReserved__::VtValue *)&v39)) {
          pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp();
        }
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::GetRecordedString((char *)(a2 + 456), (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)&v33, (uint64_t)&__p);
        sub_2169C29AC((uint64_t)&v41, &v33);
        sub_2168EE084((uint64_t)&v33);
        if (SHIBYTE(v36) < 0) {
          operator delete(__p);
        }
      }
      unint64_t v20 = (void **)&v39;
    }
    sub_2168EE084((uint64_t)v20);
    if (v42)
    {
      uint64_t v31 = sub_2169D1B08((uint64_t *)(a2 + 808));
      sub_2168EE4C4(&__p, &v41);
      (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v31 + 152))(v31, a2 + 816, a2 + 440, &__p);
      sub_2168EE084((uint64_t)&__p);
    }
    unint64_t v27 = (void **)&v41;
LABEL_62:
    sub_2168EE084((uint64_t)v27);
    goto LABEL_63;
  }
  FieldDefinitiouint64_t n = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 440));
  FallbackValue = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(FieldDefinition);
  v33.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::VtValue::GetType(FallbackValue, v9, v10);
  if (sub_216BA0FE0(&v33, 0))
  {
    sub_2169D3490((uint64_t *)FieldDefinition, (void *)(a2 + 760), &__p);
    if (!(_BYTE)v37)
    {
      sub_216BA10FC((char *)&v33, (std::type_info *)a2, v12);
      goto LABEL_63;
    }
    if (SHIBYTE(v36) < 0) {
      operator delete(__p);
    }
    unint64_t v13 = *v6 & 0xFFFFFFFFFFFFFFF8;
    if (v13)
    {
      uint64_t v14 = (const char *)(v13 + 16);
      if (*(char *)(v13 + 39) < 0) {
        uint64_t v14 = *(const char **)v14;
      }
    }
    else
    {
      uint64_t v14 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"invalid value for field \"%s\"", v11, v12, v14);
    if (v36 >= 0) {
      unint64_t v30 = (const char *)&__p;
    }
    else {
      unint64_t v30 = (const char *)__p;
    }
    goto LABEL_47;
  }
  sub_2169D3540((uint64_t *)FieldDefinition, (void *)(a2 + 760), &__p);
  if ((_BYTE)v37)
  {
    if (SHIBYTE(v36) < 0) {
      operator delete(__p);
    }
    goto LABEL_36;
  }
  if (*(void *)(a2 + 768))
  {
    uint64_t v26 = sub_2169D1B08((uint64_t *)(a2 + 808));
    sub_2168EE4C4(&__p, (void *)(a2 + 760));
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v26 + 152))(v26, a2 + 816, a2 + 440, &__p);
    unint64_t v27 = &__p;
    goto LABEL_62;
  }
LABEL_36:
  unint64_t v28 = *v6 & 0xFFFFFFFFFFFFFFF8;
  if (v28)
  {
    int v29 = (const char *)(v28 + 16);
    if (*(char *)(v28 + 39) < 0) {
      int v29 = *(const char **)v29;
    }
  }
  else
  {
    int v29 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"invalid value for field \"%s\"", v21, v22, v29);
  if (v36 >= 0) {
    unint64_t v30 = (const char *)&__p;
  }
  else {
    unint64_t v30 = (const char *)__p;
  }
LABEL_47:
  textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v30);
LABEL_48:
  if (SHIBYTE(v36) < 0) {
    operator delete(__p);
  }
LABEL_63:
  pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::Clear((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)(a2 + 456));
  uint64_t v35 = 0;
  sub_2168ED33C((void *)(a2 + 760), &__p);
  return sub_2168EE084((uint64_t)&__p);
}

void sub_216B9C058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_2168EE084(v43 - 104);
  sub_2168EE084(v43 - 88);
  _Unwind_Resume(a1);
}

uint64_t sub_216B9C180@<X0>(const void **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  uint64_t result = sub_2167940B4(a3, v5 + 1);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v7 = (char *)result;
  }
  else {
    uint64_t v7 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v7, v8, v5);
  }
  unint64_t v9 = &v7[v5];
  *unint64_t v9 = a2;
  v9[1] = 0;
  return result;
}

void textFileFormatYyerror(pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *a1, const char *a2)
{
  v30[4] = *(void (**)(uint64_t, void, void, void, void))MEMORY[0x263EF8340];
  char v4 = (void *)textFileFormatYyget_text(*((void **)a1 + 122));
  size_t v5 = textFileFormatYyget_leng(*((void **)a1 + 122));
  sub_216799F58(__dst, v4, v5);
  if ((v29 & 0x80000000) == 0)
  {
    if (v29 == 1)
    {
      uint64_t v8 = __dst;
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v9 = *((unsigned int *)a1 + 242);
    goto LABEL_9;
  }
  if (__dst[1] != (void *)1) {
    goto LABEL_8;
  }
  uint64_t v8 = (void **)__dst[0];
LABEL_6:
  uint64_t v9 = *((unsigned int *)a1 + 242);
  if (*(unsigned char *)v8 == 10)
  {
    uint64_t v9 = (v9 - 1);
    p_p = "";
    char v11 = 1;
    goto LABEL_13;
  }
LABEL_9:
  unint64_t v12 = __dst;
  if (v29 < 0) {
    unint64_t v12 = (void **)__dst[0];
  }
  p_p = (const char *)&__p;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)" at '%s'", v6, v7, v12);
  char v11 = 0;
  if (v26 < 0) {
    p_p = (const char *)__p;
  }
LABEL_13:
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)((char *)a1 + 816));
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s%s in <%s> on line %i", v14, v15, a2, p_p, Text, v9);
  if ((v11 & 1) == 0 && v26 < 0) {
    operator delete(__p);
  }
  if (*((char *)a1 + 71) < 0)
  {
    if (!*((void *)a1 + 7)) {
      goto LABEL_28;
    }
  }
  else if (!*((unsigned char *)a1 + 71))
  {
    goto LABEL_28;
  }
  std::operator+<char>();
  if (v22 >= 0) {
    uint64_t v16 = (const std::string::value_type *)&v20;
  }
  else {
    uint64_t v16 = (const std::string::value_type *)v20;
  }
  if (v22 >= 0) {
    std::string::size_type v17 = HIBYTE(v22);
  }
  else {
    std::string::size_type v17 = (std::string::size_type)v21;
  }
  std::string::append(&v27, v16, v17);
  if (SHIBYTE(v22) < 0) {
    operator delete(v20);
  }
LABEL_28:
  std::string::append(&v27, "\n");
  v30[1] = (void (*)(uint64_t, void, void, void, void))v9;
  v30[0] = (void (*)(uint64_t, void, void, void, void))sub_2169E2DC0;
  unint64_t v20 = "sdf/textFileFormat.yy";
  uint64_t v21 = "textFileFormatYyerror";
  uint64_t v22 = 3187;
  uint64_t v23 = "void textFileFormatYyerror(Sdf_TextParserContext *, const char *)";
  char v24 = 0;
  unint64_t v18 = &unk_26C74B770;
  int v19 = 3;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, v30, (uint64_t *)&v18, (uint64_t *)&v27);
  *((unsigned char *)a1 + 800) = 1;
  sub_2168579F4((uint64_t (**)(void, void, void, void, void))v30);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (v29 < 0) {
    operator delete(__dst[0]);
  }
}

void sub_216B9C46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B9C4EC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void v11[2] = *MEMORY[0x263EF8340];
  uint64_t v7 = sub_2169D1B08((uint64_t *)(a4 + 808));
  uint64_t v8 = *a3;
  v11[0] = v8;
  v11[1] = (char *)&off_26C750C70 + 1;
  if ((v8 & 7) != 0)
  {
    uint64_t v9 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v9, 2u, memory_order_relaxed) & 1) == 0) {
      v11[0] = v9;
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v7 + 152))(v7, a1, a2, v11);
  return sub_2168EE084((uint64_t)v11);
}

void sub_216B9C5C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B9C5D4(uint64_t *a1, char *a2, char *a3)
{
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v5 = a1[1];
    if (v5 == 6 && *(_DWORD *)*a1 == 1818391920 && *(_WORD *)(*a1 + 4) == 25449) {
      return 0;
    }
    if (v5 != 7)
    {
      a1 = (uint64_t *)*a1;
      goto LABEL_25;
    }
    a1 = (uint64_t *)*a1;
LABEL_12:
    if (*(_DWORD *)a1 == 1986622064 && *(_DWORD *)((char *)a1 + 3) == 1702125942) {
      return 1;
    }
    goto LABEL_25;
  }
  int v4 = *((unsigned __int8 *)a1 + 23);
  if (v4 == 6)
  {
    if (*(_DWORD *)a1 == 1818391920 && *((_WORD *)a1 + 2) == 25449) {
      return 0;
    }
    goto LABEL_25;
  }
  if (v4 == 7) {
    goto LABEL_12;
  }
LABEL_25:
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid permission constant", a2, a3, a1);
  if (v12 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, p_p);
  if (v12 < 0) {
    operator delete(__p);
  }
  return 0;
}

void sub_216B9C6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B9C70C(int a1, uint64_t a2, char *a3)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 392);
  uint64_t v5 = *(void *)(a2 + 400);
  if (a1 && v4 == v5)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Setting payload to None (or an empty list) is only allowed when setting explicit payloads, not for list editing", (const char *)a2, a3);
    if (v37 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (__n128 *)__p.n128_u64[0];
    }
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, (const char *)p_p);
LABEL_7:
    if (SHIBYTE(v37) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    return;
  }
  uint64_t v41 = *(void *)(a2 + 392);
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v4 == v5)
    {
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v8) {
        uint64_t v8 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      uint64_t v9 = (void *)((char *)v8 + 240);
      unint64_t v10 = *(unsigned __int8 **)(a2 + 392);
      char v11 = *(unsigned __int8 **)(a2 + 400);
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 4);
      if (v12 < 2) {
        goto LABEL_16;
      }
      if (v12 > 0xA)
      {
        if (v10 == v11) {
          goto LABEL_16;
        }
        do
        {
          unint64_t v20 = v10 + 48;
          if (v10 + 48 == v11) {
            goto LABEL_38;
          }
          BOOL v21 = pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)v10, v10 + 48);
          v10 += 48;
        }
        while (v21);
        char v11 = v20 - 48;
LABEL_38:
        uint64_t v22 = *(void *)(a2 + 400);
        if (v11 == (unsigned __int8 *)v22) {
          goto LABEL_16;
        }
        __n128 __p = 0uLL;
        uint64_t v37 = 0;
        sub_2169D8208(&__p, *(void *)(a2 + 392), v22, 0xAAAAAAAAAAAAAAABLL * ((v22 - *(void *)(a2 + 392)) >> 4));
        unint64_t v23 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) >> 4));
        if (__p.n128_u64[1] == __p.n128_u64[0]) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = v23;
        }
        sub_2169D84D0((unsigned __int8 *)__p.n128_u64[0], (long long *)__p.n128_u64[1], (uint64_t)&v41, v24, 1);
        unint64_t v26 = __p.n128_u64[1];
        int v25 = (unsigned __int8 *)__p.n128_u64[0];
        if (__p.n128_u64[0] == __p.n128_u64[1])
        {
          v39[0] = &__p;
          sub_2169CC78C((void ***)v39);
          goto LABEL_16;
        }
        do
        {
          std::string v27 = v25 + 48;
          if (v25 + 48 == (unsigned __int8 *)v26) {
            goto LABEL_46;
          }
          BOOL v28 = pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v25, v25 + 48);
          int v25 = v27;
        }
        while (!v28);
        unint64_t v26 = (unint64_t)(v27 - 48);
LABEL_46:
        unint64_t v29 = __p.n128_u64[1];
        v39[0] = &__p;
        sub_2169CC78C((void ***)v39);
        if (v26 == v29)
        {
LABEL_16:
          sub_2169D1B08((uint64_t *)(a2 + 808));
          pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp();
        }
      }
      else
      {
        do
        {
LABEL_18:
          if (v10 == v11 - 48) {
            goto LABEL_16;
          }
          unint64_t v13 = v10;
          v10 += 48;
          uint64_t v14 = v10;
        }
        while (v10 == v11);
        while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v13, v14))
        {
          v14 += 48;
          if (v14 == v11) {
            goto LABEL_18;
          }
        }
      }
      unint64_t v30 = *v9 & 0xFFFFFFFFFFFFFFF8;
      if (v30)
      {
        uint64_t v31 = (const char *)(v30 + 16);
        if (*(char *)(v30 + 39) < 0) {
          uint64_t v31 = *(const char **)v31;
        }
      }
      else
      {
        uint64_t v31 = "";
      }
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816));
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v33, v34, v31, Text);
      if (v37 >= 0) {
        uint64_t v35 = &__p;
      }
      else {
        uint64_t v35 = (__n128 *)__p.n128_u64[0];
      }
      textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, (const char *)v35);
      if (SHIBYTE(v37) < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      goto LABEL_16;
    }
    uint64_t v7 = sub_2169CE1F8(&v41, a2, a3);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidPayload(v7, (uint64_t)&__p);
    if (v38) {
      break;
    }
    sub_2169CE278(&v41);
    uint64_t v4 = v41;
  }
  WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)&__p);
  if (*((char *)WhyNot + 23) >= 0) {
    uint64_t v18 = (uint64_t)WhyNot;
  }
  else {
    uint64_t v18 = *WhyNot;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v16, v17, v18);
  if (v40 >= 0) {
    int v19 = v39;
  }
  else {
    int v19 = (void **)v39[0];
  }
  textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, (const char *)v19);
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  if (v38) {
    goto LABEL_7;
  }
}

void sub_216B9CC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void **p_p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  p_p = &__p;
  sub_2169CC78C(&p_p);
  _Unwind_Resume(a1);
}

void sub_216B9CCCC(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(void *)(a2 + 320);
  uint64_t v6 = *(void *)(a2 + 328);
  if (a1 && v5 == v6)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Setting inherit paths to None (or empty list) is only allowed when setting explicit inherit paths, not for list editing", (const char *)a2, a3);
    if (v18 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, (const char *)v7);
LABEL_7:
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    return;
  }
  uint64_t v20 = *(void *)(a2 + 320);
  for (i = v6; ; uint64_t v6 = i)
  {
    if (v5 == v6)
    {
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v9) {
        uint64_t v9 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      sub_216BA306C((void *)v9 + 24, a1, (uint64_t **)(a2 + 320), (uint64_t *)a2);
    }
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_2169813FC(&v20, a2, a3);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidInheritPath(v8, (uint64_t)__p);
    if (v19) {
      break;
    }
    sub_21698147C(&v20);
    uint64_t v5 = v20;
  }
  WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
  if (*((char *)WhyNot + 23) >= 0) {
    uint64_t v13 = (uint64_t)WhyNot;
  }
  else {
    uint64_t v13 = *WhyNot;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v11, v12, v13);
  if (v16 >= 0) {
    uint64_t v14 = (const char *)&v15;
  }
  else {
    uint64_t v14 = (const char *)v15;
  }
  textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v14);
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v19) {
    goto LABEL_7;
  }
}

void sub_216B9CE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22)
  {
    if (a21 < 0) {
      operator delete(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_216B9CE64(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(void *)(a2 + 344);
  uint64_t v6 = *(void *)(a2 + 352);
  if (a1 && v5 == v6)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Setting specializes paths to None (or empty list) is only allowed when setting explicit specializes paths, not for list editing", (const char *)a2, a3);
    if (v18 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, (const char *)v7);
LABEL_7:
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    return;
  }
  uint64_t v20 = *(void *)(a2 + 344);
  for (i = v6; ; uint64_t v6 = i)
  {
    if (v5 == v6)
    {
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v9) {
        uint64_t v9 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      sub_216BA306C((void *)v9 + 38, a1, (uint64_t **)(a2 + 344), (uint64_t *)a2);
    }
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_2169813FC(&v20, a2, a3);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidSpecializesPath(v8, (uint64_t)__p);
    if (v19) {
      break;
    }
    sub_21698147C(&v20);
    uint64_t v5 = v20;
  }
  WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
  if (*((char *)WhyNot + 23) >= 0) {
    uint64_t v13 = (uint64_t)WhyNot;
  }
  else {
    uint64_t v13 = *WhyNot;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v11, v12, v13);
  if (v16 >= 0) {
    uint64_t v14 = (const char *)&v15;
  }
  else {
    uint64_t v14 = (const char *)v15;
  }
  textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v14);
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v19) {
    goto LABEL_7;
  }
}

void sub_216B9CFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22)
  {
    if (a21 < 0) {
      operator delete(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_216B9CFFC(int a1, uint64_t a2, char *a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 368);
  uint64_t v5 = *(void *)(a2 + 376);
  if (a1 && v4 == v5)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Setting references to None (or an empty list) is only allowed when setting explicit references, not for list editing", (const char *)a2, a3);
    if (v38 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, p_p);
LABEL_7:
    if (SHIBYTE(v38) < 0) {
      operator delete(__p);
    }
    return;
  }
  uint64_t v42 = *(void *)(a2 + 368);
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v4 == v5)
    {
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v8) {
        uint64_t v8 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      uint64_t v9 = (void *)((char *)v8 + 280);
      unint64_t v10 = *(unsigned __int8 **)(a2 + 368);
      char v11 = *(unsigned __int8 **)(a2 + 376);
      unint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((v11 - v10) >> 3);
      if (v12 < 2) {
        goto LABEL_16;
      }
      if (v12 > 0xA)
      {
        if (v10 == v11) {
          goto LABEL_16;
        }
        do
        {
          uint64_t v20 = v10 + 56;
          if (v10 + 56 == v11) {
            goto LABEL_38;
          }
          BOOL v21 = pxrInternal__aapl__pxrReserved__::SdfReference::operator<(v10, v10 + 56);
          v10 += 56;
        }
        while (v21);
        char v11 = v20 - 56;
LABEL_38:
        uint64_t v22 = *(long long **)(a2 + 376);
        if (v11 == (unsigned __int8 *)v22) {
          goto LABEL_16;
        }
        __n128 __p = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        sub_2169D520C((char *)&__p, *(long long **)(a2 + 368), v22, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v22 - *(void *)(a2 + 368)) >> 3));
        unint64_t v23 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((v37 - (unsigned char *)__p) >> 3));
        if (v37 == __p) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = v23;
        }
        sub_2169D54C8((unsigned __int8 *)__p, (long long *)v37, (uint64_t)&v42, v24, 1);
        int v25 = (unsigned __int8 *)__p;
        unint64_t v26 = v37;
        if (__p == v37)
        {
          v40[0] = &__p;
          sub_2169CC68C((void ***)v40);
          goto LABEL_16;
        }
        do
        {
          std::string v27 = v25 + 56;
          if (v25 + 56 == (unsigned __int8 *)v26) {
            goto LABEL_46;
          }
          char v28 = pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v25, v25 + 56);
          int v25 = v27;
        }
        while ((v28 & 1) == 0);
        unint64_t v26 = (char *)(v27 - 56);
LABEL_46:
        unint64_t v29 = v37;
        v40[0] = &__p;
        sub_2169CC68C((void ***)v40);
        if (v26 == v29)
        {
LABEL_16:
          sub_2169D1B08((uint64_t *)(a2 + 808));
          pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp();
        }
      }
      else
      {
        do
        {
LABEL_18:
          if (v10 == v11 - 56) {
            goto LABEL_16;
          }
          uint64_t v13 = v10;
          v10 += 56;
          uint64_t v14 = v10;
        }
        while (v10 == v11);
        while ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v13, v14) & 1) == 0)
        {
          v14 += 56;
          if (v14 == v11) {
            goto LABEL_18;
          }
        }
      }
      unint64_t v30 = *v9 & 0xFFFFFFFFFFFFFFF8;
      if (v30)
      {
        uint64_t v31 = (const char *)(v30 + 16);
        if (*(char *)(v30 + 39) < 0) {
          uint64_t v31 = *(const char **)v31;
        }
      }
      else
      {
        uint64_t v31 = "";
      }
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816));
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v33, v34, v31, Text);
      if (v38 >= 0) {
        uint64_t v35 = (const char *)&__p;
      }
      else {
        uint64_t v35 = (const char *)__p;
      }
      textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v35);
      if (SHIBYTE(v38) < 0) {
        operator delete(__p);
      }
      goto LABEL_16;
    }
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_2169CDB94(&v42, a2, a3);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidReference(v7, (uint64_t)&__p);
    if (v39) {
      break;
    }
    sub_2169CDC14(&v42);
    uint64_t v4 = v42;
  }
  WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)&__p);
  if (*((char *)WhyNot + 23) >= 0) {
    uint64_t v18 = (uint64_t)WhyNot;
  }
  else {
    uint64_t v18 = *WhyNot;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v16, v17, v18);
  if (v41 >= 0) {
    char v19 = v40;
  }
  else {
    char v19 = (void **)v40[0];
  }
  textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, (const char *)v19);
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  if (v39) {
    goto LABEL_7;
  }
}

void sub_216B9D520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void **p_p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  p_p = &__p;
  sub_2169CC68C(&p_p);
  _Unwind_Resume(a1);
}

void sub_216B9D5CC(uint64_t a1, void *a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  std::string v33 = 0;
  uint64_t v34 = 0;
  v35[0] = 0;
  uint64_t v3 = (long long *)(a2 + 20);
  sub_21680BC90((uint64_t *)&v33, (uint64_t)(a2[21] - a2[20]) >> 3);
  for (long long i = *v3; ; sub_2169CECC4(&i))
  {
    if ((void)i == *((void *)&i + 1))
    {
      BOOL v21 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v21) {
        BOOL v21 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if (sub_216BA2E08((long long **)&v33))
      {
        unint64_t v22 = *((void *)v21 + 59) & 0xFFFFFFFFFFFFFFF8;
        if (v22)
        {
          unint64_t v23 = (const char *)(v22 + 16);
          if (*(char *)(v22 + 39) < 0) {
            unint64_t v23 = *(const char **)v23;
          }
        }
        else
        {
          unint64_t v23 = "";
        }
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 102));
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v30, v31, v23, Text);
        if (SHIBYTE(v39) >= 0) {
          size_t v32 = v38;
        }
        else {
          size_t v32 = (void **)v38[0];
        }
        textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, (const char *)v32);
        if (SHIBYTE(v39) < 0) {
          operator delete(v38[0]);
        }
      }
      sub_2169D1B08(a2 + 101);
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp();
    }
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2169CEBC8((uint64_t *)&i, v4, v5);
    uint64_t v7 = (*(void *)v6 & 0xFFFFFFFFFFFFFFF8) != 0
       ? (long long *)((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) + 16)
       : (long long *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidVariantIdentifier(v7, (uint64_t)v38);
    if ((_BYTE)v40) {
      break;
    }
    unint64_t v10 = *(void *)*sub_2169CEC48(&i, v8, v9) & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      char v11 = (char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0) {
        char v11 = *(char **)v11;
      }
    }
    else
    {
      char v11 = "";
    }
    sub_216779094(__p, v11);
    unint64_t v12 = v34;
    if ((unint64_t)v34 >= v35[0])
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v33) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      if (0x5555555555555556 * ((uint64_t)(v35[0] - (void)v33) >> 3) > v15) {
        unint64_t v15 = 0x5555555555555556 * ((uint64_t)(v35[0] - (void)v33) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35[0] - (void)v33) >> 3) >= 0x555555555555555) {
        unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v16 = v15;
      }
      char v41 = v35;
      if (v16) {
        std::string::size_type v17 = (char *)sub_216782ED8((uint64_t)v35, v16);
      }
      else {
        std::string::size_type v17 = 0;
      }
      uint64_t v18 = &v17[24 * v14];
      v38[0] = v17;
      v38[1] = v18;
      char v40 = &v17[24 * v16];
      long long v19 = *(_OWORD *)__p;
      *((void *)v18 + 2) = v37;
      *(_OWORD *)uint64_t v18 = v19;
      __p[1] = 0;
      uint64_t v37 = 0;
      __p[0] = 0;
      char v39 = v18 + 24;
      sub_216790CCC((uint64_t *)&v33, v38);
      uint64_t v20 = v34;
      sub_216790E64((uint64_t)v38);
      uint64_t v34 = v20;
      if (SHIBYTE(v37) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v13 = *(_OWORD *)__p;
      *((void *)v34 + 2) = v37;
      *unint64_t v12 = v13;
      uint64_t v34 = (char *)v12 + 24;
    }
  }
  WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)v38);
  if (*((char *)WhyNot + 23) >= 0) {
    uint64_t v27 = (uint64_t)WhyNot;
  }
  else {
    uint64_t v27 = *WhyNot;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v25, v26, v27);
  if (v37 >= 0) {
    char v28 = __p;
  }
  else {
    char v28 = (void **)__p[0];
  }
  textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, (const char *)v28);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[0]);
  }
  if ((_BYTE)v40 && SHIBYTE(v39) < 0) {
    operator delete(v38[0]);
  }
  v38[0] = &v33;
  sub_216782F20((void ***)v38);
}

void sub_216B9DC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  a14 = &a11;
  sub_216782F20((void ***)&a14);
  _Unwind_Resume(a1);
}

void sub_216B9DD44(uint64_t a1, int *a2)
{
  uint64_t v3 = sub_2169B1904(a1);
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(__p, v3);
  sub_21697DE94(a2 + 54, (int *)__p);
  sub_21697DEEC(a2 + 55, (int *)__p + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
  sub_21697C414(__p);
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 54)))
  {
    if (*(char *)(v3 + 23) >= 0) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = *(void *)v3;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid prim path", v4, v5, v6);
    if (v9 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, (const char *)v7);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_216B9DE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **sub_216B9DE38(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    void v16[4] = result;
    long long v13 = (char *)sub_216782ED8((uint64_t)result, v12);
    unint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)unint64_t v14 = 0;
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    sub_2168DF430(a1, v16);
    uint64_t v8 = (void *)a1[1];
    uint64_t result = sub_2168DF5D0(v16);
  }
  else
  {
    void *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_216B9DF64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168DF5D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_216B9DF78(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unint64_t v6 = (uint64_t *)(a3 + 808);
  uint64_t v7 = sub_2169D1B08((uint64_t *)(a3 + 808));
  uint64_t v8 = a3 + 816;
  std::string::size_type v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  (*(void (**)(uint64_t ****__return_ptr))(*(void *)v7 + 136))(&v20);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
  {
    if ((v21 & 4) != 0) {
      unint64_t v9 = (uint64_t ***)(*(uint64_t (**)(uint64_t ****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
    }
    else {
      unint64_t v9 = v20;
    }
  }
  else
  {
    unint64_t v9 = &v17;
  }
  unint64_t v14 = 0;
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  sub_21698FA28(&v14, (uint64_t *)*v9, (uint64_t *)v9[1], v9[1] - *v9);
  sub_2168EE084((uint64_t)&v20);
  uint64_t v20 = &v17;
  sub_216889A04((void ***)&v20);
  unint64_t v10 = v15;
  if ((unint64_t)v15 >= v16)
  {
    unint64_t v12 = sub_216973984((char **)&v14, a2);
  }
  else
  {
    uint64_t v11 = *a2;
    void *v15 = *a2;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v10 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v12 = (char *)(v10 + 1);
  }
  uint64_t v15 = v12;
  uint64_t v13 = sub_2169D1B08(v6);
  uint64_t v18 = &off_26C756C08;
  sub_2169DBAB4((unsigned int **)&v17, &v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t ***))(*(void *)v13 + 152))(v13, v8, a1, &v17);
  sub_2168EE084((uint64_t)&v17);
  std::string::size_type v17 = &v14;
  sub_216889A04((void ***)&v17);
}

void sub_216B9E14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a9;
  sub_216889A04(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_216B9E1A0(uint64_t a1, uint64_t a2)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  sub_2169B1904(a1);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v58);
  if ((v58 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((v58 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  }
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier((size_t *)EmptyString) & 1) == 0)
  {
    unint64_t v7 = v58 & 0xFFFFFFFFFFFFFFF8;
    if ((v58 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v8 = (const char *)(v7 + 16);
      if (*(char *)(v7 + 39) < 0) {
        uint64_t v8 = *(const char **)v8;
      }
    }
    else
    {
      uint64_t v8 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid attribute name", v5, v6, v8);
    if (v65 >= 0) {
      unint64_t v9 = (const char *)&v63;
    }
    else {
      unint64_t v9 = v63;
    }
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v9);
    if (v65 < 0) {
      operator delete(v63);
    }
  }
  uint64_t v10 = a2 + 816;
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v58, (int *)&v63);
  sub_21697DE94((int *)(a2 + 816), (int *)&v63);
  sub_21697DEEC((int *)(a2 + 820), (int *)&v63 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v63 + 1);
  sub_21697C414(&v63);
  uint64_t v11 = (uint64_t *)(a2 + 808);
  uint64_t v12 = sub_2169D1B08((uint64_t *)(a2 + 808));
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 72))(v12, a2 + 816) & 1) == 0)
  {
    uint64_t v13 = *(void *)(a2 + 904);
    unint64_t v14 = *(void **)(v13 - 16);
    if ((unint64_t)v14 >= *(void *)(v13 - 8))
    {
      unint64_t v16 = sub_216973984((char **)(v13 - 24), &v58);
    }
    else
    {
      uint64_t v15 = v58;
      *unint64_t v14 = v58;
      if ((v15 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v14 &= 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v16 = (char *)(v14 + 1);
    }
    *(void *)(v13 - 16) = v16;
    uint64_t v17 = sub_2169D1B08((uint64_t *)(a2 + 808));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v17 + 64))(v17, a2 + 816, 1);
    uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v18) {
      uint64_t v18 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v19 = sub_2169D1B08((uint64_t *)(a2 + 808));
    int v64 = (char *)&unk_26C7501AB;
    LOBYTE(v63) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, char **))(*(void *)v19 + 152))(v19, a2 + 816, (uint64_t)v18 + 64, &v63);
    sub_2168EE084((uint64_t)&v63);
  }
  if (*(unsigned char *)(a2 + 801))
  {
    uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v20) {
      uint64_t v20 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v21 = sub_2169D1B08((uint64_t *)(a2 + 808));
    int v64 = (char *)&unk_26C7501AB;
    LOBYTE(v63) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, char **))(*(void *)v21 + 152))(v21, a2 + 816, (uint64_t)v20 + 64, &v63);
    sub_2168EE084((uint64_t)&v63);
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v57);
  uint64_t v62 = 0;
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v22) {
    uint64_t v22 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v23 = sub_2169D1B08((uint64_t *)(a2 + 808));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)v23 + 112))(v23, a2 + 816, (uint64_t)v22 + 448, v61))
  {
    uint64_t v24 = (void *)sub_21695C470((pxrInternal__aapl__pxrReserved__::VtValue *)v61);
    if ((v57 & 0xFFFFFFFFFFFFFFF8) != (*v24 & 0xFFFFFFFFFFFFFFF8))
    {
      Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816));
      if (*((char *)Name + 23) >= 0) {
        uint64_t v28 = (uint64_t)Name;
      }
      else {
        uint64_t v28 = *Name;
      }
      unint64_t v29 = *v24 & 0xFFFFFFFFFFFFFFF8;
      if (v29)
      {
        unint64_t v30 = (const char *)(v29 + 16);
        if (*(char *)(v29 + 39) < 0) {
          unint64_t v30 = *(const char **)v30;
        }
      }
      else
      {
        unint64_t v30 = "";
      }
      unint64_t v34 = v57 & 0xFFFFFFFFFFFFFFF8;
      if ((v57 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v35 = (const char *)(v34 + 16);
        if (*(char *)(v34 + 39) < 0) {
          uint64_t v35 = *(const char **)v35;
        }
      }
      else
      {
        uint64_t v35 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"attribute '%s' already has type '%s', cannot change to '%s'", v26, v27, v28, v30, v35);
      if (v65 >= 0) {
        uint64_t v36 = (const char *)&v63;
      }
      else {
        uint64_t v36 = v63;
      }
      textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v36);
      if (v65 < 0) {
        operator delete(v63);
      }
    }
  }
  else
  {
    uint64_t v31 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v31) {
      uint64_t v31 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v32 = sub_2169D1B08((uint64_t *)(a2 + 808));
    uint64_t v63 = (char *)v57;
    int v64 = (char *)&off_26C750C70 + 1;
    if ((v57 & 7) != 0)
    {
      std::string v33 = (char *)(v57 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v63 = v33;
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, char **))(*(void *)v32 + 152))(v32, a2 + 816, (uint64_t)v31 + 448, &v63);
    sub_2168EE084((uint64_t)&v63);
  }
  if (*(void *)(a2 + 840)) {
    unsigned int v37 = *(_DWORD *)sub_2169D0924((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 832));
  }
  else {
    unsigned int v37 = 0;
  }
  uint64_t v60 = 0;
  uint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v38) {
    uint64_t v38 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v39 = sub_2169D1B08((uint64_t *)(a2 + 808));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)v39 + 112))(v39, a2 + 816, (uint64_t)v38 + 464, v59))
  {
    if (v37 != *(_DWORD *)sub_2169D0924((pxrInternal__aapl__pxrReserved__::VtValue *)v59))
    {
      char v40 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816));
      if (*((char *)v40 + 23) >= 0) {
        uint64_t v41 = (uint64_t)v40;
      }
      else {
        uint64_t v41 = *v40;
      }
      uint64_t v42 = (unsigned int *)sub_2169D0924((pxrInternal__aapl__pxrReserved__::VtValue *)v59);
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C756E50, *v42, (uint64_t)v55);
      int v43 = v56;
      uint64_t v44 = (void **)v55[0];
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C756E50, v37, (uint64_t)__p);
      uint64_t v47 = v55;
      if (v43 < 0) {
        uint64_t v47 = v44;
      }
      if (v54 >= 0) {
        uint64_t v48 = __p;
      }
      else {
        uint64_t v48 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"attribute '%s' already has variability '%s', cannot change to '%s'", v45, v46, v41, v47, v48);
      if (v65 >= 0) {
        uint64_t v49 = (const char *)&v63;
      }
      else {
        uint64_t v49 = v63;
      }
      textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v49);
      if (v65 < 0) {
        operator delete(v63);
      }
      if (v54 < 0) {
        operator delete(__p[0]);
      }
      if (v56 < 0) {
        operator delete(v55[0]);
      }
    }
  }
  else
  {
    int64_t v50 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v50) {
      int64_t v50 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v51 = sub_2169D1B08(v11);
    int v64 = (char *)&off_26C756E60 + 3;
    LODWORD(v63) = v37;
    (*(void (**)(uint64_t, uint64_t, uint64_t, char **))(*(void *)v51 + 152))(v51, v10, (uint64_t)v50 + 464, &v63);
    sub_2168EE084((uint64_t)&v63);
  }
  sub_2168EE084((uint64_t)v59);
  uint64_t result = sub_2168EE084((uint64_t)v61);
  if ((v57 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v58 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216B9E868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27)
{
  if (*(char *)(v27 - 57) < 0) {
    operator delete(*(void **)(v27 - 80));
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  sub_2168EE084((uint64_t)&a27);
  sub_2168EE084(v27 - 96);
  if ((a25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_216B9E9AC(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a2 + 288);
  uint64_t v6 = *(void *)(a2 + 296);
  if (a1 && v5 == v6)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Setting connection paths to None (or an empty list) is only allowed when setting explicit connection paths, not for list editing", (const char *)a2, a3);
    if (v27 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, p_p);
LABEL_7:
    if (v27 < 0) {
      operator delete(__p);
    }
    return;
  }
  uint64_t v23 = *(void *)(a2 + 288);
  for (i = v6; ; uint64_t v6 = i)
  {
    if (v5 == v6)
    {
      if (a1 <= 1)
      {
        unint64_t v9 = *(_UNKNOWN ***)(a2 + 296);
        __n128 __p = *(void **)(a2 + 288);
        unint64_t v26 = v9;
        while (__p != v26)
        {
          uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169813FC((uint64_t *)&__p, a2, a3);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816), v10, v21);
          uint64_t v11 = sub_2169D1B08((uint64_t *)(a2 + 808));
          if (((*(uint64_t (**)(uint64_t, void **))(*(void *)v11 + 72))(v11, v21) & 1) == 0)
          {
            uint64_t v12 = sub_2169D1B08((uint64_t *)(a2 + 808));
            (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v12 + 64))(v12, v21, 2);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v21 + 1);
          sub_21697C414(v21);
          sub_21698147C(&__p);
        }
        uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        if (!v13) {
          uint64_t v13 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        }
        uint64_t v14 = sub_2169D1B08((uint64_t *)(a2 + 808));
        unint64_t v26 = &off_26C756D88;
        sub_2169DC54C((unsigned int **)&__p, (_DWORD **)(a2 + 288));
        (*(void (**)(uint64_t, uint64_t, pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *, void **))(*(void *)v14 + 152))(v14, a2 + 816, v13, &__p);
        sub_2168EE084((uint64_t)&__p);
      }
      uint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v15) {
        uint64_t v15 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      sub_216BA306C((void *)v15 + 7, a1, (uint64_t **)(a2 + 288), (uint64_t *)a2);
    }
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_2169813FC(&v23, a2, a3);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidAttributeConnectionPath(v8, (uint64_t)&__p);
    if (v28) {
      break;
    }
    sub_21698147C(&v23);
    uint64_t v5 = v23;
  }
  WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)&__p);
  if (*((char *)WhyNot + 23) >= 0) {
    uint64_t v19 = (uint64_t)WhyNot;
  }
  else {
    uint64_t v19 = *WhyNot;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v17, v18, v19);
  if (v22 >= 0) {
    uint64_t v20 = v21;
  }
  else {
    uint64_t v20 = (void **)v21[0];
  }
  textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, (const char *)v20);
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (v28) {
    goto LABEL_7;
  }
}

void sub_216B9EC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a25)
  {
    if (a24 < 0) {
      operator delete(a19);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B9ED00(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)a2;
  if (sub_21699AB4C(a2))
  {
    uint64_t v26 = a3;
    uint64_t v6 = sub_216B5051C(v4);
    *(_OWORD *)__n128 __p = *(_OWORD *)v6;
    *(void *)uint64_t v29 = *(void *)(v6 + 16);
    *(void *)(v6 + 8) = 0;
    *(void *)(v6 + 16) = 0;
    *(void *)uint64_t v6 = 0;
    *(_OWORD *)&v29[8] = *(_OWORD *)(v6 + 24);
    uint64_t v30 = *(void *)(v6 + 40);
    *(void *)(v6 + 32) = 0;
    *(void *)(v6 + 40) = 0;
    *(void *)(v6 + 24) = 0;
    long long v31 = *(_OWORD *)(v6 + 48);
    uint64_t v32 = *(void *)(v6 + 64);
    *(void *)(v6 + 48) = 0;
    *(void *)(v6 + 56) = 0;
    *(void *)(v6 + 64) = 0;
    long long v7 = *(_OWORD *)(v6 + 72);
    uint64_t v34 = *(void *)(v6 + 88);
    *(_OWORD *)std::string v33 = v7;
    *(void *)(v6 + 72) = 0;
    *(void *)(v6 + 80) = 0;
    *(void *)(v6 + 88) = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a1, &v35);
    sub_216B505B0((uint64_t)__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__n128 __p = *(_OWORD *)v37;
    *(void *)uint64_t v29 = v38;
    v37[1] = 0;
    uint64_t v38 = 0;
    v37[0] = 0;
    sub_2169B59AC((void **)&v29[8]);
    *(_OWORD *)&v29[8] = v39;
    uint64_t v30 = v40;
    uint64_t v40 = 0;
    long long v39 = 0uLL;
    sub_2169B5A6C((void **)&v31);
    long long v31 = v41;
    uint64_t v32 = v42;
    uint64_t v42 = 0;
    long long v41 = 0uLL;
    if (SHIBYTE(v34) < 0) {
      operator delete(v33[0]);
    }
    *(_OWORD *)std::string v33 = v43;
    uint64_t v34 = v44;
    HIBYTE(v44) = 0;
    LOBYTE(v43) = 0;
    v45[0] = (void **)&v41;
    sub_2169B81EC(v45);
    v45[0] = (void **)&v39;
    sub_2169B74B8(v45);
    if (v37[0])
    {
      v37[1] = v37[0];
      operator delete(v37[0]);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
    sub_21697C414(&v35);
    uint64_t v8 = *(void **)v6;
    if (*(void *)v6)
    {
      *(void *)(v6 + 8) = v8;
      operator delete(v8);
      *(void *)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
    }
    unint64_t v9 = (void **)(v6 + 72);
    *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
    *(void *)(v6 + 16) = *(void *)v29;
    __p[0] = 0;
    __p[1] = 0;
    *(void *)uint64_t v29 = 0;
    sub_2169B59AC((void **)(v6 + 24));
    *(_OWORD *)(v6 + 24) = *(_OWORD *)&v29[8];
    *(void *)(v6 + 40) = v30;
    *(void *)&v29[8] = 0;
    *(void *)&v29[16] = 0;
    uint64_t v30 = 0;
    sub_2169B5A6C((void **)(v6 + 48));
    *(_OWORD *)(v6 + 48) = v31;
    *(void *)(v6 + 64) = v32;
    long long v31 = 0uLL;
    uint64_t v32 = 0;
    if (*(char *)(v6 + 95) < 0) {
      operator delete(*v9);
    }
    long long v10 = *(_OWORD *)v33;
    *(void *)(v6 + 88) = v34;
    *(_OWORD *)unint64_t v9 = v10;
    HIBYTE(v34) = 0;
    LOBYTE(v33[0]) = 0;
    v37[0] = &v31;
    sub_2169B81EC((void ***)v37);
    v37[0] = &v29[8];
    sub_2169B74B8((void ***)v37);
    a3 = v26;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else if (sub_21699AC40((pxrInternal__aapl__pxrReserved__::VtValue *)v4))
  {
    uint64_t v11 = sub_216B50650(v4);
    long long v12 = *(_OWORD *)(v11 + 16);
    *(_OWORD *)__n128 __p = *(_OWORD *)v11;
    *(_OWORD *)uint64_t v29 = v12;
    *(_OWORD *)uint64_t v11 = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    *(void *)&v29[16] = *(void *)(v11 + 32);
    *(void *)(v11 + 32) = 0;
    sub_2169B8E9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v13, v14);
    uint64_t v15 = *(void *)&v29[16];
    sub_2169B8E9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v16, v17);
    char v27 = v4;
    for (uint64_t i = *(void *)&v29[16] + 96 * (uint64_t)__p[0]; v15 != i; v15 += 96)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a1, &v35);
      sub_216B505B0(v15, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, (uint64_t)v37);
      uint64_t v19 = *(void **)v15;
      if (*(void *)v15)
      {
        *(void *)(v15 + 8) = v19;
        operator delete(v19);
        *(void *)uint64_t v15 = 0;
        *(void *)(v15 + 8) = 0;
        *(void *)(v15 + 16) = 0;
      }
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v37;
      *(void *)(v15 + 16) = v38;
      v37[0] = 0;
      v37[1] = 0;
      uint64_t v38 = 0;
      sub_2169B59AC((void **)(v15 + 24));
      *(_OWORD *)(v15 + 24) = v39;
      *(void *)(v15 + 40) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      sub_2169B5A6C((void **)(v15 + 48));
      *(_OWORD *)(v15 + 48) = v41;
      *(void *)(v15 + 64) = v42;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      uint64_t v20 = (void **)(v15 + 72);
      if (*(char *)(v15 + 95) < 0) {
        operator delete(*v20);
      }
      long long v21 = v43;
      *(void *)(v15 + 88) = v44;
      *(_OWORD *)uint64_t v20 = v21;
      HIBYTE(v44) = 0;
      LOBYTE(v43) = 0;
      v45[0] = (void **)&v41;
      sub_2169B81EC(v45);
      v45[0] = (void **)&v39;
      sub_2169B74B8(v45);
      if (v37[0])
      {
        v37[1] = v37[0];
        operator delete(v37[0]);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
      sub_21697C414(&v35);
    }
    uint64_t v4 = v27;
    if ((void **)v11 != __p)
    {
      sub_2169B88CC((void *)v11);
      long long v22 = *(_OWORD *)v29;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)__p;
      *(_OWORD *)(v11 + 16) = v22;
      *(_OWORD *)__n128 __p = 0u;
      *(_OWORD *)uint64_t v29 = 0u;
      *(void *)(v11 + 32) = *(void *)&v29[16];
      *(void *)&v29[16] = 0;
    }
    sub_2169B88CC(__p);
  }
  uint64_t v23 = sub_2169D1B08((uint64_t *)(a3 + 808));
  uint64_t v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v24) {
    uint64_t v24 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  return (*(uint64_t (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, uint64_t *))(*(void *)v23 + 152))(v23, a1, (uint64_t)v24 + 88, v4);
}

void sub_216B9F1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,int a27)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v29 + 4));
  sub_21697C414(&a27);
  if (a25 < 0) {
    operator delete(__p);
  }
  *(void *)(v30 - 104) = v28;
  sub_2169B81EC((void ***)(v30 - 104));
  *(void *)(v30 - 104) = v27;
  sub_2169B74B8((void ***)(v30 - 104));
  if (a11) {
    operator delete(a11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216B9F260(void *a1)
{
  uint64_t v23 = 0;
  uint64_t v2 = (void *)a1[98];
  unint64_t v3 = a1[99];
  if ((unint64_t)v2 >= v3)
  {
    uint64_t v5 = (int64x2_t *)(a1 + 97);
    uint64_t v6 = a1[97];
    uint64_t v7 = ((uint64_t)v2 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v8 = (uint64_t)(a1 + 99);
    uint64_t v9 = v3 - v6;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v7 + 1)) {
      uint64_t v10 = v7 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t v27 = a1 + 99;
    if (v11)
    {
      long long v12 = (char *)sub_21677CB28(v8, v11);
      uint64_t v13 = v23;
    }
    else
    {
      uint64_t v13 = 0;
      long long v12 = 0;
    }
    uint64_t v14 = &v12[8 * v7];
    uint64_t v15 = &v12[8 * v11];
    uint64_t v26 = v15;
    uint64_t v23 = 0;
    *(void *)uint64_t v14 = v13;
    uint64_t v4 = v14 + 8;
    v25.i64[1] = (uint64_t)(v14 + 8);
    uint64_t v16 = (void *)a1[98];
    uint64_t v17 = (void *)a1[97];
    if (v16 == v17)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        uint64_t v18 = *--v16;
        *uint64_t v16 = 0;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      int64x2_t v19 = *v5;
      uint64_t v4 = (void *)v25.i64[1];
      uint64_t v15 = v26;
    }
    a1[97] = v14;
    a1[98] = v4;
    int64x2_t v25 = v19;
    uint64_t v20 = (char *)a1[99];
    a1[99] = v15;
    uint64_t v26 = v20;
    uint64_t v24 = v19.i64[0];
    sub_2169DC874((uint64_t)&v24);
  }
  else
  {
    void *v2 = 0;
    uint64_t v4 = v2 + 1;
  }
  a1[98] = v4;
  sub_2168EBBB8(&v23, 0);
  long long v21 = (pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)(a1 + 57);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString(v21);
  if (result) {
    return pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::StopRecordingString((uint64_t)v21);
  }
  return result;
}

void sub_216B9F3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_216B9F3C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a2 + 760);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(void *)(a2 + 784) - 16);
  uint64_t v4 = (long long *)sub_2169B1904(a1);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](v3, v4);

  return sub_2168EC6DC(v5, v2);
}

void sub_216B9F414(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *a2)
{
  uint64_t v3 = sub_2169B1904(a1);
  if ((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetupFactory((uint64_t)a2 + 456, (std::string *)v3) & 1) == 0)
  {
    if (*(char *)(v3 + 23) >= 0) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = *(void *)v3;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unrecognized value typename '%s' for dictionary", v4, v5, v6);
    if (v9 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    textFileFormatYyerror(a2, p_p);
    if (v9 < 0) {
      operator delete(__p);
    }
  }
}

void sub_216B9F4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B9F4C0(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 456;
  if ((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)(a1 + 456)) & 1) != 0
    || !*(unsigned char *)(a1 + 664))
  {
    v10[0] = 0;
    v10[1] = 0;
    uint64_t v11 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::ProduceValue(v2, (const char *)v10, v4, __p);
    sub_2168ED33C((void *)(a1 + 760), __p);
    sub_2168EE084((uint64_t)__p);
    if (!*(void *)(a1 + 768))
    {
      uint64_t v8 = v10;
      if (v11 < 0) {
        uint64_t v8 = (void **)v10[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Error parsing simple value: %s", v6, v7, v8);
      if (v13 >= 0) {
        char v9 = __p;
      }
      else {
        char v9 = (void **)__p[0];
      }
      textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a1, (const char *)v9);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Type name has [] for non-shaped value!\n", v3, v4);
    if (v11 >= 0) {
      uint64_t v5 = v10;
    }
    else {
      uint64_t v5 = (void **)v10[0];
    }
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a1, (const char *)v5);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
}

void sub_216B9F5F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B9F638(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 456;
  if ((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)(a1 + 456)) & 1) != 0
    || *(unsigned char *)(a1 + 664))
  {
    v12[0] = 0;
    v12[1] = 0;
    uint64_t v13 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::ProduceValue(v2, (const char *)v12, v4, &__p);
    sub_2168ED33C((void *)(a1 + 760), &__p);
    sub_2168EE084((uint64_t)&__p);
    __p.__type_name = 0;
    int v6 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 760), &__p, v5);
    sub_2168EE084((uint64_t)&__p);
    if (v6)
    {
      char v9 = v12;
      if (v13 < 0) {
        char v9 = (void **)v12[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Error parsing shaped value: %s", v7, v8, v9);
      if (v15 >= 0) {
        p_p = (std::type_info_vtbl *)&__p;
      }
      else {
        p_p = __p.__vftable;
      }
      textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a1, (const char *)p_p);
      if (v15 < 0) {
        operator delete(__p.__vftable);
      }
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Type name missing [] for shaped value.", v3, v4);
    if (v13 >= 0) {
      uint64_t v11 = v12;
    }
    else {
      uint64_t v11 = (void **)v12[0];
    }
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a1, (const char *)v11);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[0]);
  }
}

void sub_216B9F788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B9F7DC(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  sub_2169B1904(a1);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v22);
  if ((v22 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((v22 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier((size_t *)EmptyString))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22, (int *)__p);
    sub_21697DE94((int *)(a2 + 816), (int *)__p);
    sub_21697DEEC((int *)(a2 + 820), (int *)__p + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_21697C414(__p);
    uint64_t v7 = sub_2169D1B08((uint64_t *)(a2 + 808));
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 72))(v7, a2 + 816) & 1) == 0)
    {
      uint64_t v8 = *(void *)(a2 + 904);
      char v9 = *(void **)(v8 - 16);
      if ((unint64_t)v9 >= *(void *)(v8 - 8))
      {
        uint64_t v11 = sub_216973984((char **)(v8 - 24), &v22);
      }
      else
      {
        uint64_t v10 = v22;
        *char v9 = v22;
        if ((v10 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *v9 &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v11 = (char *)(v9 + 1);
      }
      *(void *)(v8 - 16) = v11;
      uint64_t v15 = sub_2169D1B08((uint64_t *)(a2 + 808));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 64))(v15, a2 + 816, 8);
    }
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v16) {
      uint64_t v16 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v17 = sub_2169D1B08((uint64_t *)(a2 + 808));
    sub_2168EE4C4(__p, (void *)(a2 + 832));
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v17 + 152))(v17, a2 + 816, (uint64_t)v16 + 464, __p);
    sub_2168EE084((uint64_t)__p);
    if (*(unsigned char *)(a2 + 801))
    {
      uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v18) {
        uint64_t v18 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      uint64_t v19 = sub_2169D1B08((uint64_t *)(a2 + 808));
      __p[1] = &unk_26C7501AB;
      LOBYTE(__p[0]) = *(unsigned char *)(a2 + 801);
      (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v19 + 152))(v19, a2 + 816, (uint64_t)v18 + 64, __p);
      sub_2168EE084((uint64_t)__p);
    }
    *(unsigned char *)(a2 + 224) = 0;
    if (*(unsigned char *)(a2 + 256))
    {
      __p[0] = (void *)(a2 + 232);
      sub_216981168((void ***)__p);
      *(unsigned char *)(a2 + 256) = 0;
    }
    long long v21 = *(_DWORD **)(a2 + 264);
    for (uint64_t i = *(_DWORD **)(a2 + 272); i != v21; sub_216981128(a2 + 280, i))
      i -= 2;
    *(void *)(a2 + 272) = v21;
  }
  else
  {
    unint64_t v12 = v22 & 0xFFFFFFFFFFFFFFF8;
    if ((v22 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v13 = (const char *)(v12 + 16);
      if (*(char *)(v12 + 39) < 0) {
        uint64_t v13 = *(const char **)v13;
      }
    }
    else
    {
      uint64_t v13 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid relationship name", v5, v6, v13);
    if (v24 >= 0) {
      uint64_t v14 = __p;
    }
    else {
      uint64_t v14 = (void **)__p[0];
    }
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, (const char *)v14);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
  }
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216B9FB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_216B9FBA8(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 264) != *(void *)(a1 + 272))
  {
    uint64_t v2 = sub_2169D1B08((uint64_t *)(a1 + 808));
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v3) {
      uint64_t v3 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    }
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    (*(void (**)(unsigned int ***__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v2 + 136))(&v14, v2, a1 + 816, (uint64_t)v3 + 48);
    if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v14))
    {
      if ((v15 & 4) != 0) {
        uint64_t v4 = (unsigned int **)(*(uint64_t (**)(unsigned int ***))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(&v14);
      }
      else {
        uint64_t v4 = v14;
      }
    }
    else
    {
      uint64_t v4 = &v11;
    }
    uint64_t v8 = 0;
    char v9 = 0;
    uint64_t v10 = 0;
    sub_216980EEC(&v8, *v4, v4[1], ((char *)v4[1] - (char *)*v4) >> 3);
    sub_2168EE084((uint64_t)&v14);
    uint64_t v14 = &v11;
    sub_216981168((void ***)&v14);
    sub_2169DC954((uint64_t *)&v8, v9, *(_DWORD **)(a1 + 264), *(_DWORD **)(a1 + 272), (uint64_t)(*(void *)(a1 + 272) - *(void *)(a1 + 264)) >> 3);
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v5) {
      uint64_t v5 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    }
    uint64_t v6 = sub_2169D1B08((uint64_t *)(a1 + 808));
    unint64_t v12 = &off_26C756D88;
    sub_2169DC54C(&v11, &v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int **))(*(void *)v6 + 152))(v6, a1 + 816, (uint64_t)v5 + 48, &v11);
    sub_2168EE084((uint64_t)&v11);
    uint64_t v11 = (unsigned int *)&v8;
    sub_216981168((void ***)&v11);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 816), &v8);
  sub_21697DE94((int *)(a1 + 816), (int *)&v8);
  sub_21697DEEC((int *)(a1 + 820), (int *)&v8 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v8 + 1);
  return sub_21697C414(&v8);
}

void sub_216B9FDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a9;
  sub_216981168(&a16);
  _Unwind_Resume(a1);
}

void sub_216B9FE40(uint64_t a1, uint64_t a2, char *a3)
{
  if (*(unsigned char *)(a2 + 256))
  {
    uint64_t v5 = *(void *)(a2 + 232);
    uint64_t v6 = *(void *)(a2 + 240);
    if (a1 && v5 == v6)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Setting relationship targets to None (or empty list) is only allowed when setting explicit targets, not for list editing", (const char *)a2, a3);
      if (v22 >= 0) {
        p_p = (const char *)&__p;
      }
      else {
        p_p = (const char *)__p;
      }
      textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, p_p);
LABEL_8:
      if (v22 < 0) {
        operator delete(__p);
      }
      return;
    }
    uint64_t v24 = *(void *)(a2 + 232);
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v5 == v6)
      {
        if (a1 <= 1)
        {
          char v9 = *(void **)(a2 + 232);
          uint64_t v10 = *(void **)(a2 + 240);
          std::type_info __p = v9;
          long long v21 = v10;
          while (v9 != v10)
          {
            uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169813FC((uint64_t *)&__p, a2, a3);
            sub_216BA0194(v11, (uint64_t *)a2);
            sub_21698147C(&__p);
            char v9 = __p;
            uint64_t v10 = v21;
          }
        }
        unint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v12) {
          unint64_t v12 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        sub_216BA306C((void *)v12 + 53, a1, (uint64_t **)(a2 + 232), (uint64_t *)a2);
      }
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_2169813FC(&v24, a2, a3);
      pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidRelationshipTargetPath(v8, (uint64_t)&__p);
      if (v23) {
        break;
      }
      sub_21698147C(&v24);
      uint64_t v5 = v24;
    }
    WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)&__p);
    if (*((char *)WhyNot + 23) >= 0) {
      uint64_t v16 = (uint64_t)WhyNot;
    }
    else {
      uint64_t v16 = *WhyNot;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v14, v15, v16);
    if (v19 >= 0) {
      uint64_t v17 = (const char *)&v18;
    }
    else {
      uint64_t v17 = (const char *)v18;
    }
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v17);
    if (v19 < 0) {
      operator delete(v18);
    }
    if (v23) {
      goto LABEL_8;
    }
  }
}

void sub_216B9FFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22)
  {
    if (a21 < 0) {
      operator delete(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_216BA0018(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_2169B1904(a1);
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v8, v3);
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816), &v10);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, (int *)v7);
    sub_21697DE94(&v8, (int *)v7);
    sub_21697DEEC(&v9, (int *)v7 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v7 + 1);
    sub_21697C414(v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
    sub_21697C414(&v10);
  }
  if (!*(unsigned char *)(a2 + 256))
  {
    memset(v7, 0, sizeof(v7));
    sub_2169D1D10(a2 + 232, (uint64_t)v7);
    uint64_t v10 = (void **)v7;
    sub_216981168(&v10);
  }
  unint64_t v4 = *(void *)(a2 + 240);
  if (v4 >= *(void *)(a2 + 248))
  {
    uint64_t v5 = sub_216981B30((uint64_t *)(a2 + 232), &v8);
  }
  else
  {
    sub_216981010(*(_DWORD **)(a2 + 240), &v8);
    sub_21698105C((_DWORD *)(v4 + 4), &v9);
    uint64_t v5 = v4 + 8;
  }
  *(void *)(a2 + 24sub_2168EBBB8(&a9, 0) = v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  return sub_21697C414(&v8);
}

void sub_216BA014C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  sub_216981168((void ***)va1);
  sub_21697B754((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216BA0194(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 102), a1, &v9);
  uint64_t v4 = sub_2169D1B08(a2 + 101);
  if (((*(uint64_t (**)(uint64_t, int *))(*(void *)v4 + 72))(v4, &v9) & 1) == 0)
  {
    uint64_t v5 = sub_2169D1B08(a2 + 101);
    (*(void (**)(uint64_t, int *, uint64_t))(*(void *)v5 + 64))(v5, &v9, 9);
    unint64_t v6 = a2[34];
    if (v6 >= a2[35])
    {
      uint64_t v7 = sub_216981B30(a2 + 33, a1);
    }
    else
    {
      sub_216981010((_DWORD *)a2[34], a1);
      sub_21698105C((_DWORD *)(v6 + 4), (_DWORD *)a1 + 1);
      uint64_t v7 = v6 + 8;
    }
    a2[34] = v7;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  return sub_21697C414(&v9);
}

void sub_216BA0298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void *Sdf_MemoryFlexBuffer::Sdf_MemoryFlexBuffer(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = a4;
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))();
  int v8 = (char *)operator new[](v7 + 2);
  if ((*(uint64_t (**)(void, char *, uint64_t, void))(*(void *)*a2 + 32))(*a2, v8, v7, 0) == v7)
  {
    *(_WORD *)&v8[v7] = 0;
    int v9 = (void *)a1[1];
    a1[1] = v8;
    if (v9)
    {
      operator delete[](v9);
      int v8 = (char *)a1[1];
    }
    *a1 = textFileFormatYy_scan_buffer(v8, v7 + 2, a1[2]);
  }
  else
  {
    v12[0] = "sdf/textFileFormat.yy";
    v12[1] = "Sdf_MemoryFlexBuffer";
    v12[2] = 3243;
    v12[3] = "Sdf_MemoryFlexBuffer::Sdf_MemoryFlexBuffer(const std::shared_ptr<ArAsset> &, const std::string &, yyscan_t)";
    char v13 = 0;
    if (*(char *)(a3 + 23) >= 0) {
      int v10 = (const char *)a3;
    }
    else {
      int v10 = *(const char **)a3;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read asset contents @%s@: an error occurred while reading", v10);
    operator delete[](v8);
  }
  return a1;
}

void sub_216BA03F8(_Unwind_Exception *a1)
{
  operator delete[](v2);
  uint64_t v4 = *(void **)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v4) {
    operator delete[](v4);
  }
  _Unwind_Resume(a1);
}

void Sdf_MemoryFlexBuffer::~Sdf_MemoryFlexBuffer(Sdf_MemoryFlexBuffer *this)
{
  uint64_t v2 = *(void ***)this;
  if (v2) {
    textFileFormatYy_delete_buffer(v2, *((void *)this + 2));
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    operator delete[](v3);
  }
}

BOOL Sdf_ParseLayer(const std::string *a1, void *a2, const std::string *a3, const std::string *a4, char a5, uint64_t *a6, unsigned char *a7)
{
  v32[1] = *(void **)MEMORY[0x263EF8340];
  sub_216851EE4((uint64_t)&v22, "Sdf", "Sdf_ParseLayer");
  int v14 = dword_267B91200;
  dword_267B91200 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext::Sdf_TextParserContext((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&v25);
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v29;
  uint64_t v29 = *a6;
  sub_2168BD80C(a6);
  sub_2168BD378((int)&v29, v15);
  std::string::operator=(v27, a1);
  std::string::operator=(&v25, a3);
  std::string::operator=(&v26, a4);
  char v30 = a5;
  __p[0] = &unk_26C75B320;
  __p[1] = sub_216BA0798;
  __p[2] = &v25;
  std::string __p[3] = __p;
  sub_216BA3B34(__p, v28);
  sub_2169CC47C(__p);
  textFileFormatYylex_init(v32);
  textFileFormatYyset_extra((uint64_t)&v25, (void *)v32[0]);
  Sdf_MemoryFlexBuffer::Sdf_MemoryFlexBuffer(v21, a2, (uint64_t)a1, (uint64_t)v32[0]);
  if (v21[0])
  {
    int v18 = textFileFormatYyparse((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&v25, v16, v17);
    *a7 = v31;
  }
  else
  {
    int v18 = -1;
  }
  Sdf_MemoryFlexBuffer::~Sdf_MemoryFlexBuffer((Sdf_MemoryFlexBuffer *)v21);
  textFileFormatYylex_destroy((void *)v32[0]);
  sub_216BA34C4((uint64_t)&v25);
  dword_267B91200 = v14 != 0;
  while (v23--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v22);
  return v18 == 0;
}

void sub_216BA0704()
{
  Sdf_MemoryFlexBuffer::~Sdf_MemoryFlexBuffer((Sdf_MemoryFlexBuffer *)&v0);
  JUMPOUT(0x216BA075CLL);
}

void sub_216BA070C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x216BA0730);
}

void sub_216BA0740()
{
}

void sub_216BA0780(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x216BA0788);
  }
  sub_21675DB74(a1);
}

void sub_216BA0798(uint64_t a1, uint64_t a2)
{
  if ((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)(a1 + 456)) & 1) == 0)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v4 = (const char *)a2;
    }
    else {
      uint64_t v4 = *(const char **)a2;
    }
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a1, v4);
  }
}

BOOL Sdf_ParseLayerFromString(uint64_t a1, const std::string *a2, const std::string *a3, uint64_t *a4, unsigned char *a5)
{
  v26[1] = *(void **)MEMORY[0x263EF8340];
  sub_216851EE4((uint64_t)&v18, "Sdf", "Sdf_ParseLayerFromString");
  pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext::Sdf_TextParserContext((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&v21);
  int v10 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v24;
  uint64_t v24 = *a4;
  sub_2168BD80C(a4);
  sub_2168BD378((int)&v24, v10);
  std::string::operator=(&v21, a2);
  std::string::operator=(v22, a3);
  v20[0] = &unk_26C75B320;
  v20[1] = sub_216BA0798;
  v20[2] = &v21;
  v20[3] = v20;
  sub_216BA3B34(v20, v23);
  sub_2169CC47C(v20);
  textFileFormatYylex_init(v26);
  textFileFormatYyset_extra((uint64_t)&v21, (void *)v26[0]);
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v11 = (const char *)a1;
  }
  else {
    uint64_t v11 = *(const char **)a1;
  }
  unint64_t v12 = (void **)textFileFormatYy_scan_string(v11, (uint64_t)v26[0]);
  int v15 = textFileFormatYyparse((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&v21, v13, v14);
  *a5 = v25;
  textFileFormatYy_delete_buffer(v12, (uint64_t)v26[0]);
  textFileFormatYylex_destroy((void *)v26[0]);
  sub_216BA34C4((uint64_t)&v21);
  while (v19--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v18);
  return v15 == 0;
}

uint64_t sub_216BA0AB8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 48);
  uint64_t v4 = *(unsigned int *)(a2 + 48);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26C75B1F8[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 48) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_26C75B228[v4])(&v5, result, a2);
}

uint64_t sub_216BA0B48(uint64_t *a1, void *a2, void *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 48)) {
    return sub_216BA0BC8(result, a3);
  }
  *a2 = *a3;
  return result;
}

uint64_t sub_216BA0B68(uint64_t *a1, void *a2, void *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 48) != 1) {
    return sub_216BA0C2C(result, a3);
  }
  *a2 = *a3;
  return result;
}

uint64_t sub_216BA0B8C(uint64_t *a1, void *a2, void *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 48) != 2) {
    return sub_216BA0C94(result, a3);
  }
  *a2 = *a3;
  return result;
}

void sub_216BA0BB0(uint64_t *a1, std::string *a2, std::string *a3)
{
}

void *sub_216BA0BB8(uint64_t *a1, void *a2, uint64_t *a3)
{
  return sub_216BA0DDC(*a1, a2, a3);
}

void sub_216BA0BC0(uint64_t *a1, std::string *a2, std::string *a3)
{
}

uint64_t sub_216BA0BC8(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26C75B1F8[v4])(&v6, a1);
  }
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 48) = 0;
  return a1;
}

uint64_t sub_216BA0C2C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26C75B1F8[v4])(&v6, a1);
  }
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 48) = 1;
  return a1;
}

uint64_t sub_216BA0C94(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26C75B1F8[v4])(&v6, a1);
  }
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 48) = 2;
  return a1;
}

void sub_216BA0CFC(uint64_t a1, std::string *this, std::string *__str)
{
  if (*(_DWORD *)(a1 + 48) == 3)
  {
    std::string::operator=(this, __str);
  }
  else
  {
    v3[0] = a1;
    v3[1] = (uint64_t)__str;
    sub_216BA0D54(v3);
  }
}

void sub_216BA0D54(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*(char *)(v1 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)v1, *(void *)(v1 + 8));
  }
  else
  {
    long long v3 = *(_OWORD *)v1;
    uint64_t v5 = *(void *)(v1 + 16);
    *(_OWORD *)std::type_info __p = v3;
  }
  sub_216976CB8(v2, (long long *)__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216BA0DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216BA0DDC(uint64_t a1, void *a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 48) == 4) {
    return sub_2168D2318(a2, a3);
  }
  else {
    return (void *)sub_216BA0DFC(a1, a3);
  }
}

uint64_t sub_216BA0DFC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26C75B1F8[v4])(&v7, a1);
  }
  *(_DWORD *)(a1 + 48) = -1;
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 48) = 4;
  return a1;
}

void sub_216BA0E90(uint64_t a1, std::string *this, std::string *__str)
{
  if (*(_DWORD *)(a1 + 48) == 5)
  {
    std::string::operator=(this, __str);
    std::string::operator=(this + 1, __str + 1);
  }
  else
  {
    v5[0] = a1;
    v5[1] = (uint64_t)__str;
    sub_216BA0F08(v5);
  }
}

void sub_216BA0F08(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*(char *)(v2 + 23) < 0)
  {
    sub_216778F24(v5, *(void **)v2, *(void *)(v2 + 8));
  }
  else
  {
    long long v3 = *(_OWORD *)v2;
    uint64_t v6 = *(void *)(v2 + 16);
    *(_OWORD *)uint64_t v5 = v3;
  }
  if (*(char *)(v2 + 47) < 0)
  {
    sub_216778F24(&__p, *(void **)(v2 + 24), *(void *)(v2 + 32));
  }
  else
  {
    long long v4 = *(_OWORD *)(v2 + 24);
    uint64_t v8 = *(void *)(v2 + 40);
    long long __p = v4;
  }
  sub_216976E98(v1, (long long *)v5);
  if (SHIBYTE(v8) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(v5[0]);
  }
}

void sub_216BA0FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216BA0FE0(void *a1, void *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B911F8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v6 = __cxa_guard_acquire(&qword_267B911F8);
    if (v6)
    {
      qword_267B91198[0] = sub_2169D2858(v6, v7, v8);
      unk_267B911A0 = v9;
      qword_267B911A8 = sub_2169D289C(qword_267B91198[0], v9, v10);
      unk_267B911B0 = v11;
      qword_267B911B8 = sub_2169D28E0(qword_267B911A8, v11, v12);
      unk_267B911C0 = v13;
      qword_267B911C8 = sub_2169D2924(qword_267B911B8, v13, v14);
      unk_267B911D0 = v15;
      qword_267B911D8 = sub_2169D2968(qword_267B911C8, v15, v16);
      unk_267B911E0 = v17;
      qword_267B911E8 = sub_2169D29AC(qword_267B911D8, v17, v18);
      unk_267B911F0 = v19;
      __cxa_guard_release(&qword_267B911F8);
    }
  }
  uint64_t v4 = 0;
  while (qword_267B91198[v4] != *a1)
  {
    v4 += 2;
    if (v4 == 12) {
      return 0;
    }
  }
  BOOL result = v4 != 12;
  if (a2)
  {
    *a2 = qword_267B91198[v4 + 1];
    return 1;
  }
  return result;
}

void sub_216BA10E4(_Unwind_Exception *a1)
{
}

uint64_t sub_216BA10FC(char *a1, std::type_info *a2, char *a3)
{
  v180[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755180, a2, a3);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, *v5, v6))
  {
    if ((sub_216907880((pxrInternal__aapl__pxrReserved__::VtValue *)&a2[47].__type_name) & 1) == 0)
    {
      if (a2[48].__vftable)
      {
        v171 = "sdf/textFileFormat.yy";
        uint64_t v172 = "_SetItemsIfListOp";
        uint64_t v173 = 1012;
        v174 = "BOOL _SetItemsIfListOp(const TfType &, Sdf_TextParserContext *) [ListOpuint64_t Type = pxrInternal__aapl__pxrReser"
               "ved__::SdfListOp<int>]";
        LOBYTE(v175) = 0;
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v171, "context->currentValue.IsHolding<ArrayType>() || context->currentValue.IsEmpty()", 0);
        if ((result & 1) == 0) {
          return result;
        }
      }
    }
    v170 = 0;
    long long v168 = 0u;
    long long v169 = 0u;
    if (sub_216907880((pxrInternal__aapl__pxrReserved__::VtValue *)&a2[47].__type_name))
    {
      int v9 = a2[48].__vftable;
      if ((v9 & 4) != 0) {
        type_name = (long long *)(*(uint64_t (**)(std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t *))(((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8) + 168))(&a2[47].__type_name);
      }
      else {
        type_name = (long long *)a2[47].__type_name;
      }
      sub_2169DCE38((uint64_t)&v168, type_name);
    }
    v177 = 0;
    uint64_t v178 = 0;
    uint64_t v176 = 0;
    sub_2167CD8AC(&v176, v170, (uint64_t)v170 + 4 * v168, v168);
    uint64_t v11 = (char *)v176;
    uint64_t v12 = v177 - (unsigned char *)v176;
    if ((unint64_t)(v177 - (unsigned char *)v176) < 8)
    {
LABEL_9:
      sub_2169D1B08((uint64_t *)&a2[50].__type_name);
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp();
    }
    if ((unint64_t)v12 > 0x2B)
    {
      if (v176 == v177) {
        goto LABEL_9;
      }
      unint64_t v43 = v12 >> 2;
      uint64_t v44 = (char *)v176 + 4;
      do
      {
        if (v44 == v177) {
          goto LABEL_9;
        }
        int v45 = *((_DWORD *)v44 - 1);
        int v46 = *(_DWORD *)v44;
        v44 += 4;
      }
      while (v45 < v46);
      v171 = 0;
      uint64_t v172 = 0;
      uint64_t v173 = 0;
      sub_216825C04(&v171, v176, (uint64_t)v177, v43);
      std::__sort<std::__less<int,int> &,int *>();
      uint64_t v47 = (int *)v172;
      uint64_t v48 = (int *)v171;
      if (v171 == v172) {
        goto LABEL_122;
      }
      uint64_t v49 = (int *)((char *)v171 + 4);
      while (v49 != v172)
      {
        int v50 = *(v49 - 1);
        int v51 = *v49++;
        if (v50 == v51)
        {
          uint64_t v48 = v49 - 2;
          goto LABEL_122;
        }
      }
      uint64_t v48 = (int *)v172;
LABEL_122:
      if (v171)
      {
        uint64_t v172 = v171;
        operator delete(v171);
      }
      if (v48 == v47) {
        goto LABEL_9;
      }
    }
    else
    {
      do
      {
LABEL_29:
        if (v11 == v177 - 4) {
          goto LABEL_9;
        }
        uint64_t v29 = v11;
        v11 += 4;
      }
      while (v11 == v177);
      int v30 = *(_DWORD *)v29;
      char v31 = v11;
      while (v30 != *(_DWORD *)v31)
      {
        v31 += 4;
        if (v31 == v177) {
          goto LABEL_29;
        }
      }
    }
    unint64_t v101 = a2[27].__type_name & 0xFFFFFFFFFFFFFFF8;
    if (v101)
    {
      unint64_t v102 = (const char *)(v101 + 16);
      if (*(char *)(v101 + 39) < 0) {
        unint64_t v102 = *(const char **)v102;
      }
    }
    else
    {
      unint64_t v102 = "";
    }
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&a2[51]);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v104, v105, v102, Text);
    if (v173 >= 0) {
      uint64_t v106 = (const char *)&v171;
    }
    else {
      uint64_t v106 = (const char *)v171;
    }
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v106);
    if (SHIBYTE(v173) < 0) {
      operator delete(v171);
    }
    goto LABEL_9;
  }
  uint64_t v13 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755190, v7, v8);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, *v13, v14))
  {
    if ((sub_2169DDCD4((pxrInternal__aapl__pxrReserved__::VtValue *)&a2[47].__type_name) & 1) == 0)
    {
      if (a2[48].__vftable)
      {
        v171 = "sdf/textFileFormat.yy";
        uint64_t v172 = "_SetItemsIfListOp";
        uint64_t v173 = 1012;
        v174 = "BOOL _SetItemsIfListOp(const TfType &, Sdf_TextParserContext *) [ListOpuint64_t Type = pxrInternal__aapl__pxrReser"
               "ved__::SdfListOp<int64_t>]";
        LOBYTE(v175) = 0;
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v171, "context->currentValue.IsHolding<ArrayType>() || context->currentValue.IsEmpty()", 0);
        if ((result & 1) == 0) {
          return result;
        }
      }
    }
    v170 = 0;
    long long v168 = 0u;
    long long v169 = 0u;
    if (sub_2169DDCD4((pxrInternal__aapl__pxrReserved__::VtValue *)&a2[47].__type_name))
    {
      uint64_t v17 = a2[48].__vftable;
      if ((v17 & 4) != 0) {
        uint64_t v18 = (long long *)(*(uint64_t (**)(std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t *))(((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8) + 168))(&a2[47].__type_name);
      }
      else {
        uint64_t v18 = (long long *)a2[47].__type_name;
      }
      sub_2169DDD0C((uint64_t)&v168, v18);
    }
    v177 = 0;
    uint64_t v178 = 0;
    uint64_t v176 = 0;
    sub_2169DE1DC(&v176, v170, (uint64_t)&v170[v168], v168);
    uint64_t v19 = (char *)v176;
    uint64_t v20 = v177 - (unsigned char *)v176;
    if ((unint64_t)(v177 - (unsigned char *)v176) < 0x10)
    {
LABEL_18:
      sub_2169D1B08((uint64_t *)&a2[50].__type_name);
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp();
    }
    if ((unint64_t)v20 > 0x57)
    {
      if (v176 == v177) {
        goto LABEL_18;
      }
      unint64_t v63 = v20 >> 3;
      int v64 = (char *)v176 + 8;
      do
      {
        if (v64 == v177) {
          goto LABEL_18;
        }
        uint64_t v65 = *((void *)v64 - 1);
        uint64_t v66 = *(void *)v64;
        v64 += 8;
      }
      while (v65 < v66);
      v171 = 0;
      uint64_t v172 = 0;
      uint64_t v173 = 0;
      sub_2169DE310(&v171, v176, (uint64_t)v177, v63);
      std::__sort<std::__less<long long,long long> &,long long *>();
      int v67 = (uint64_t *)v172;
      char v68 = (uint64_t *)v171;
      if (v171 == v172) {
        goto LABEL_142;
      }
      uint64_t v69 = (uint64_t *)((char *)v171 + 8);
      while (v69 != v172)
      {
        uint64_t v70 = *(v69 - 1);
        uint64_t v71 = *v69++;
        if (v70 == v71)
        {
          char v68 = v69 - 2;
          goto LABEL_142;
        }
      }
      char v68 = (uint64_t *)v172;
LABEL_142:
      if (v171)
      {
        uint64_t v172 = v171;
        operator delete(v171);
      }
      if (v68 == v67) {
        goto LABEL_18;
      }
    }
    else
    {
      do
      {
LABEL_45:
        if (v19 == v177 - 8) {
          goto LABEL_18;
        }
        uint64_t v40 = v19;
        v19 += 8;
      }
      while (v19 == v177);
      uint64_t v41 = *(void *)v40;
      uint64_t v42 = v19;
      while (v41 != *(void *)v42)
      {
        v42 += 8;
        if (v42 == v177) {
          goto LABEL_45;
        }
      }
    }
    unint64_t v110 = a2[27].__type_name & 0xFFFFFFFFFFFFFFF8;
    if (v110)
    {
      v111 = (const char *)(v110 + 16);
      if (*(char *)(v110 + 39) < 0) {
        v111 = *(const char **)v111;
      }
    }
    else
    {
      v111 = "";
    }
    v112 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&a2[51]);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v113, v114, v111, v112);
    if (v173 >= 0) {
      v115 = (const char *)&v171;
    }
    else {
      v115 = (const char *)v171;
    }
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v115);
    if (SHIBYTE(v173) < 0) {
      operator delete(v171);
    }
    goto LABEL_18;
  }
  std::string v21 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551A0, v15, v16);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, *v21, v22))
  {
    if ((sub_2169062C0((pxrInternal__aapl__pxrReserved__::VtValue *)&a2[47].__type_name) & 1) == 0)
    {
      if (a2[48].__vftable)
      {
        v171 = "sdf/textFileFormat.yy";
        uint64_t v172 = "_SetItemsIfListOp";
        uint64_t v173 = 1012;
        v174 = "BOOL _SetItemsIfListOp(const TfType &, Sdf_TextParserContext *) [ListOpuint64_t Type = pxrInternal__aapl__pxrReser"
               "ved__::SdfListOp<unsigned int>]";
        LOBYTE(v175) = 0;
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v171, "context->currentValue.IsHolding<ArrayType>() || context->currentValue.IsEmpty()", 0);
        if ((result & 1) == 0) {
          return result;
        }
      }
    }
    v170 = 0;
    long long v168 = 0u;
    long long v169 = 0u;
    if (sub_2169062C0((pxrInternal__aapl__pxrReserved__::VtValue *)&a2[47].__type_name))
    {
      char v25 = a2[48].__vftable;
      if ((v25 & 4) != 0) {
        std::string v26 = (long long *)(*(uint64_t (**)(std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t *))(((unint64_t)v25 & 0xFFFFFFFFFFFFFFF8) + 168))(&a2[47].__type_name);
      }
      else {
        std::string v26 = (long long *)a2[47].__type_name;
      }
      sub_2169DE964((uint64_t)&v168, v26);
    }
    v177 = 0;
    uint64_t v178 = 0;
    uint64_t v176 = 0;
    sub_2169DEE34(&v176, v170, (uint64_t)v170 + 4 * v168, v168);
    uint64_t v27 = (char *)v176;
    uint64_t v28 = v177 - (unsigned char *)v176;
    if ((unint64_t)(v177 - (unsigned char *)v176) < 8)
    {
LABEL_27:
      sub_2169D1B08((uint64_t *)&a2[50].__type_name);
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp();
    }
    if ((unint64_t)v28 > 0x2B)
    {
      if (v176 == v177) {
        goto LABEL_27;
      }
      unint64_t v83 = v28 >> 2;
      v84 = (char *)v176 + 4;
      do
      {
        if (v84 == v177) {
          goto LABEL_27;
        }
        unsigned int v85 = *((_DWORD *)v84 - 1);
        unsigned int v86 = *(_DWORD *)v84;
        v84 += 4;
      }
      while (v85 < v86);
      v171 = 0;
      uint64_t v172 = 0;
      uint64_t v173 = 0;
      sub_216825C80(&v171, v176, (uint64_t)v177, v83);
      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
      v87 = (int *)v172;
      v88 = (int *)v171;
      if (v171 == v172) {
        goto LABEL_194;
      }
      v89 = (int *)((char *)v171 + 4);
      while (v89 != v172)
      {
        int v90 = *(v89 - 1);
        int v91 = *v89++;
        if (v90 == v91)
        {
          v88 = v89 - 2;
          goto LABEL_194;
        }
      }
      v88 = (int *)v172;
LABEL_194:
      if (v171)
      {
        uint64_t v172 = v171;
        operator delete(v171);
      }
      if (v88 == v87) {
        goto LABEL_27;
      }
    }
    else
    {
      do
      {
LABEL_72:
        if (v27 == v177 - 4) {
          goto LABEL_27;
        }
        uint64_t v60 = v27;
        v27 += 4;
      }
      while (v27 == v177);
      int v61 = *(_DWORD *)v60;
      uint64_t v62 = v27;
      while (v61 != *(_DWORD *)v62)
      {
        v62 += 4;
        if (v62 == v177) {
          goto LABEL_72;
        }
      }
    }
    unint64_t v143 = a2[27].__type_name & 0xFFFFFFFFFFFFFFF8;
    if (v143)
    {
      v144 = (const char *)(v143 + 16);
      if (*(char *)(v143 + 39) < 0) {
        v144 = *(const char **)v144;
      }
    }
    else
    {
      v144 = "";
    }
    v145 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&a2[51]);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v146, v147, v144, v145);
    if (v173 >= 0) {
      v148 = (const char *)&v171;
    }
    else {
      v148 = (const char *)v171;
    }
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v148);
    if (SHIBYTE(v173) < 0) {
      operator delete(v171);
    }
    goto LABEL_27;
  }
  uint64_t v32 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551B0, v23, v24);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, *v32, v33))
  {
    if ((sub_2169DF540((pxrInternal__aapl__pxrReserved__::VtValue *)&a2[47].__type_name) & 1) == 0)
    {
      if (a2[48].__vftable)
      {
        v171 = "sdf/textFileFormat.yy";
        uint64_t v172 = "_SetItemsIfListOp";
        uint64_t v173 = 1012;
        v174 = "BOOL _SetItemsIfListOp(const TfType &, Sdf_TextParserContext *) [ListOpuint64_t Type = pxrInternal__aapl__pxrReser"
               "ved__::SdfListOp<uint64_t>]";
        LOBYTE(v175) = 0;
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v171, "context->currentValue.IsHolding<ArrayType>() || context->currentValue.IsEmpty()", 0);
        if ((result & 1) == 0) {
          return result;
        }
      }
    }
    v170 = 0;
    long long v168 = 0u;
    long long v169 = 0u;
    if (sub_2169DF540((pxrInternal__aapl__pxrReserved__::VtValue *)&a2[47].__type_name))
    {
      int v36 = a2[48].__vftable;
      if ((v36 & 4) != 0) {
        unsigned int v37 = (long long *)(*(uint64_t (**)(std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t *))(((unint64_t)v36 & 0xFFFFFFFFFFFFFFF8) + 168))(&a2[47].__type_name);
      }
      else {
        unsigned int v37 = (long long *)a2[47].__type_name;
      }
      sub_2169DF578((uint64_t)&v168, v37);
    }
    v177 = 0;
    uint64_t v178 = 0;
    uint64_t v176 = 0;
    sub_2169DFA48(&v176, v170, (uint64_t)&v170[v168], v168);
    uint64_t v38 = (char *)v176;
    uint64_t v39 = v177 - (unsigned char *)v176;
    if ((unint64_t)(v177 - (unsigned char *)v176) < 0x10)
    {
LABEL_43:
      sub_2169D1B08((uint64_t *)&a2[50].__type_name);
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp();
    }
    if ((unint64_t)v39 > 0x57)
    {
      if (v176 == v177) {
        goto LABEL_43;
      }
      unint64_t v92 = v39 >> 3;
      v93 = (char *)v176 + 8;
      do
      {
        if (v93 == v177) {
          goto LABEL_43;
        }
        unint64_t v94 = *((void *)v93 - 1);
        unint64_t v95 = *(void *)v93;
        v93 += 8;
      }
      while (v94 < v95);
      v171 = 0;
      uint64_t v172 = 0;
      uint64_t v173 = 0;
      sub_21677EA60(&v171, v176, (uint64_t)v177, v92);
      std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
      v96 = (uint64_t *)v172;
      uint64_t v97 = (uint64_t *)v171;
      if (v171 == v172) {
        goto LABEL_207;
      }
      int v98 = (uint64_t *)((char *)v171 + 8);
      while (v98 != v172)
      {
        uint64_t v99 = *(v98 - 1);
        uint64_t v100 = *v98++;
        if (v99 == v100)
        {
          uint64_t v97 = v98 - 2;
          goto LABEL_207;
        }
      }
      uint64_t v97 = (uint64_t *)v172;
LABEL_207:
      if (v171)
      {
        uint64_t v172 = v171;
        operator delete(v171);
      }
      if (v97 == v96) {
        goto LABEL_43;
      }
    }
    else
    {
      do
      {
LABEL_97:
        if (v38 == v177 - 8) {
          goto LABEL_43;
        }
        uint64_t v80 = v38;
        v38 += 8;
      }
      while (v38 == v177);
      uint64_t v81 = *(void *)v80;
      uint64_t v82 = v38;
      while (v81 != *(void *)v82)
      {
        v82 += 8;
        if (v82 == v177) {
          goto LABEL_97;
        }
      }
    }
    unint64_t v149 = a2[27].__type_name & 0xFFFFFFFFFFFFFFF8;
    if (v149)
    {
      v150 = (const char *)(v149 + 16);
      if (*(char *)(v149 + 39) < 0) {
        v150 = *(const char **)v150;
      }
    }
    else
    {
      v150 = "";
    }
    v151 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&a2[51]);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v152, v153, v150, v151);
    if (v173 >= 0) {
      std::string::size_type v154 = (const char *)&v171;
    }
    else {
      std::string::size_type v154 = (const char *)v171;
    }
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v154);
    if (SHIBYTE(v173) < 0) {
      operator delete(v171);
    }
    goto LABEL_43;
  }
  unint64_t v52 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551C0, v34, v35);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, *v52, v53))
  {
    if ((sub_216998044((pxrInternal__aapl__pxrReserved__::VtValue *)&a2[47].__type_name) & 1) != 0
      || !a2[48].__vftable
      || (v171 = "sdf/textFileFormat.yy",
          uint64_t v172 = "_SetItemsIfListOp",
          uint64_t v173 = 1012,
          v174 = "BOOL _SetItemsIfListOp(const TfType &, Sdf_TextParserContext *) [ListOpuint64_t Type = pxrInternal__aapl__pxrRes"
                 "erved__::SdfListOp<std::string>]",
          LOBYTE(v175) = 0,
          uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v171, "context->currentValue.IsHolding<ArrayType>() || context->currentValue.IsEmpty()", 0), (result & 1) != 0))
    {
      v170 = 0;
      long long v168 = 0u;
      long long v169 = 0u;
      if (sub_216998044((pxrInternal__aapl__pxrReserved__::VtValue *)&a2[47].__type_name))
      {
        char v56 = a2[48].__vftable;
        if ((v56 & 4) != 0) {
          unint64_t v57 = (long long *)(*(uint64_t (**)(std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t *))(((unint64_t)v56 & 0xFFFFFFFFFFFFFFF8) + 168))(&a2[47].__type_name);
        }
        else {
          unint64_t v57 = (long long *)a2[47].__type_name;
        }
        sub_2169E0154((uint64_t)&v168, v57);
      }
      v177 = 0;
      uint64_t v178 = 0;
      uint64_t v176 = 0;
      sub_2169E0664((char *)&v176, (long long *)v170, (long long *)&v170[3 * v168], v168);
      if (sub_216BA2E08((long long **)&v176))
      {
        unint64_t v58 = a2[27].__type_name & 0xFFFFFFFFFFFFFFF8;
        if (v58)
        {
          uint64_t v59 = (const char *)(v58 + 16);
          if (*(char *)(v58 + 39) < 0) {
            uint64_t v59 = *(const char **)v59;
          }
        }
        else
        {
          uint64_t v59 = "";
        }
        size_t v116 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&a2[51]);
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v117, v118, v59, v116);
        if (v173 >= 0) {
          v119 = (const char *)&v171;
        }
        else {
          v119 = (const char *)v171;
        }
        textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v119);
        if (SHIBYTE(v173) < 0) {
          operator delete(v171);
        }
      }
      sub_2169D1B08((uint64_t *)&a2[50].__type_name);
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp();
    }
  }
  else
  {
    uint64_t v72 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551D0, v54, v55);
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, *v72, v73);
    if (result)
    {
      if ((sub_21699807C((pxrInternal__aapl__pxrReserved__::VtValue *)&a2[47].__type_name) & 1) != 0
        || !a2[48].__vftable
        || (v171 = "sdf/textFileFormat.yy",
            uint64_t v172 = "_SetItemsIfListOp",
            uint64_t v173 = 1012,
            v174 = "BOOL _SetItemsIfListOp(const TfType &, Sdf_TextParserContext *) [ListOpuint64_t Type = pxrInternal__aapl__pxrR"
                   "eserved__::SdfListOp<TfToken>]",
            LOBYTE(v175) = 0,
            uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v171, "context->currentValue.IsHolding<ArrayType>() || context->currentValue.IsEmpty()", 0), (result & 1) != 0))
      {
        v170 = 0;
        long long v168 = 0u;
        long long v169 = 0u;
        if (sub_21699807C((pxrInternal__aapl__pxrReserved__::VtValue *)&a2[47].__type_name))
        {
          uint64_t v75 = a2[48].__vftable;
          if ((v75 & 4) != 0) {
            uint64_t v76 = (long long *)(*(uint64_t (**)(std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t *))(((unint64_t)v75 & 0xFFFFFFFFFFFFFFF8) + 168))(&a2[47].__type_name);
          }
          else {
            uint64_t v76 = (long long *)a2[47].__type_name;
          }
          sub_2169E06EC((uint64_t)&v168, v76);
        }
        v177 = 0;
        uint64_t v178 = 0;
        uint64_t v176 = 0;
        sub_2169E0C40(&v176, v170, &v170[v168], v168);
        uint64_t v78 = (uint64_t *)v176;
        std::string v77 = (uint64_t *)v177;
        uint64_t v79 = v177 - (unsigned char *)v176;
        if ((unint64_t)(v177 - (unsigned char *)v176) < 0x10) {
          goto LABEL_95;
        }
        if ((unint64_t)v79 <= 0x57)
        {
          do
          {
LABEL_135:
            if (v78 == (uint64_t *)(v177 - 8)) {
              goto LABEL_95;
            }
            uint64_t v107 = v78++;
          }
          while (v78 == (uint64_t *)v177);
          unint64_t v108 = *v107 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v109 = v78;
          while (v108 != (*v109 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v109 == (uint64_t *)v177) {
              goto LABEL_135;
            }
          }
          goto LABEL_229;
        }
        if (v176 == v177) {
          goto LABEL_95;
        }
        v120 = (uint64_t *)((char *)v176 + 8);
        if ((char *)v176 + 8 == v177) {
          goto LABEL_95;
        }
        unint64_t v121 = v79 >> 3;
        uint64_t v122 = *(void *)v176;
        while (1)
        {
          uint64_t v123 = v122;
          uint64_t v122 = *v120;
          if (v123 && v122)
          {
            if (v123 == v122) {
              goto LABEL_219;
            }
            unint64_t v124 = v123 & 0xFFFFFFFFFFFFFFF8;
            unint64_t v125 = v122 & 0xFFFFFFFFFFFFFFF8;
            unint64_t v126 = *(void *)(v124 + 8);
            unint64_t v127 = *(void *)((v122 & 0xFFFFFFFFFFFFFFF8) + 8);
            if (v126 >= v127)
            {
              if (v126 != v127) {
                goto LABEL_219;
              }
              v130 = *(const void **)(v125 + 16);
              unint64_t v128 = v125 + 16;
              uint64_t v129 = v130;
              int v131 = *(char *)(v128 + 23);
              uint64_t v134 = *(const void **)(v124 + 16);
              unint64_t v132 = v124 + 16;
              v133 = v134;
              int v135 = *(char *)(v132 + 23);
              if (v135 >= 0) {
                size_t v136 = *(unsigned __int8 *)(v132 + 23);
              }
              else {
                size_t v136 = *(void *)(v132 + 8);
              }
              if (v135 >= 0) {
                v137 = (const void *)v132;
              }
              else {
                v137 = v133;
              }
              if (v131 >= 0) {
                size_t v138 = *(unsigned __int8 *)(v128 + 23);
              }
              else {
                size_t v138 = *(void *)(v128 + 8);
              }
              if (v131 >= 0) {
                v139 = (const void *)v128;
              }
              else {
                v139 = v129;
              }
              if (v138 >= v136) {
                size_t v140 = v136;
              }
              else {
                size_t v140 = v138;
              }
              int v141 = memcmp(v137, v139, v140);
              BOOL v142 = v136 < v138;
              if (v141) {
                BOOL v142 = v141 < 0;
              }
              if (!v142)
              {
LABEL_219:
                if (v120 - 1 == v77) {
                  goto LABEL_95;
                }
                v171 = 0;
                uint64_t v172 = 0;
                uint64_t v173 = 0;
                sub_21698FA28(&v171, v78, v77, v121);
                unint64_t v155 = 126 - 2 * __clz(((unsigned char *)v172 - (unsigned char *)v171) >> 3);
                if (v172 == v171) {
                  uint64_t v156 = 0;
                }
                else {
                  uint64_t v156 = v155;
                }
                sub_2169E0EAC((uint64_t)v171, (uint64_t *)v172, (uint64_t)v180, v156, 1);
                uint64_t v158 = v171;
                v157 = v172;
                if (v171 != v172)
                {
                  long long v159 = (char *)v171 + 8;
                  while (v159 != v172)
                  {
                    unint64_t v160 = *(v159 - 1) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v161 = *v159++ & 0xFFFFFFFFFFFFFFF8;
                    if (v160 == v161)
                    {
                      uint64_t v158 = v159 - 2;
                      goto LABEL_228;
                    }
                  }
                  v179 = &v171;
                  sub_216889A04(&v179);
LABEL_95:
                  sub_2169D1B08((uint64_t *)&a2[50].__type_name);
                  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp();
                }
LABEL_228:
                v179 = &v171;
                sub_216889A04(&v179);
                if (v158 == v157) {
                  goto LABEL_95;
                }
LABEL_229:
                unint64_t v162 = a2[27].__type_name & 0xFFFFFFFFFFFFFFF8;
                if (v162)
                {
                  v163 = (const char *)(v162 + 16);
                  if (*(char *)(v162 + 39) < 0) {
                    v163 = *(const char **)v163;
                  }
                }
                else
                {
                  v163 = "";
                }
                uint64_t v164 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&a2[51]);
                pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v165, v166, v163, v164);
                if (v173 >= 0) {
                  unint64_t v167 = (const char *)&v171;
                }
                else {
                  unint64_t v167 = (const char *)v171;
                }
                textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a2, v167);
                if (SHIBYTE(v173) < 0) {
                  operator delete(v171);
                }
                goto LABEL_95;
              }
            }
          }
          else if (v123 || !v122)
          {
            goto LABEL_219;
          }
          if (++v120 == v77) {
            goto LABEL_95;
          }
        }
      }
    }
  }
  return result;
}

void sub_216BA2A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
}

uint64_t sub_216BA2E08(long long **a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1 - (char *)*a1) >> 3);
  if (v3 >= 2)
  {
    if (v3 > 0xA)
    {
      if (v2 != v1)
      {
        int v15 = *a1;
        while (1)
        {
          uint64_t v16 = (long long *)((char *)v15 + 24);
          if ((long long *)((char *)v15 + 24) == v1) {
            break;
          }
          int v17 = *((char *)v15 + 47);
          int v18 = *((char *)v15 + 23);
          if (v18 >= 0) {
            size_t v19 = *((unsigned __int8 *)v15 + 23);
          }
          else {
            size_t v19 = *((void *)v15 + 1);
          }
          if (v18 >= 0) {
            uint64_t v20 = v15;
          }
          else {
            uint64_t v20 = *(long long **)v15;
          }
          if (v17 >= 0) {
            size_t v21 = *((unsigned __int8 *)v15 + 47);
          }
          else {
            size_t v21 = *((void *)v15 + 4);
          }
          if (v17 >= 0) {
            uint64_t v22 = (char *)v15 + 24;
          }
          else {
            uint64_t v22 = (const void *)*((void *)v15 + 3);
          }
          if (v21 >= v19) {
            size_t v23 = v19;
          }
          else {
            size_t v23 = v21;
          }
          int v24 = memcmp(v20, v22, v23);
          BOOL v25 = v24 >= 0;
          if (!v24) {
            BOOL v25 = v19 >= v21;
          }
          int v15 = v16;
          if (v25)
          {
            uint64_t v32 = 0;
            std::string v33 = 0;
            uint64_t v34 = 0;
            sub_216812BD8((char *)&v32, v2, v1, v3);
            unint64_t v26 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v33 - (char *)v32) >> 3));
            if (v33 == v32) {
              uint64_t v27 = 0;
            }
            else {
              uint64_t v27 = v26;
            }
            sub_216878D58((uint64_t)v32, v33, (uint64_t)&v35, v27, 1);
            uint64_t v28 = v32;
            uint64_t v29 = v33;
            if (v32 == v33)
            {
              uint64_t v29 = v32;
            }
            else
            {
              do
              {
                int v30 = (long long *)((char *)v28 + 24);
                if ((long long *)((char *)v28 + 24) == v29) {
                  goto LABEL_55;
                }
                int v31 = sub_2168513F8((uint64_t)&v36, (unsigned __int8 *)v28, (unsigned __int8 *)v28 + 24);
                uint64_t v28 = v30;
              }
              while (!v31);
              uint64_t v29 = (long long *)((char *)v30 - 24);
LABEL_55:
              uint64_t v28 = v33;
            }
            BOOL v4 = v29 != v28;
            int v36 = &v32;
            sub_216782F20((void ***)&v36);
            return v4;
          }
        }
      }
    }
    else if (v2 != (long long *)((char *)v1 - 24))
    {
      while (1)
      {
        uint64_t v6 = v2;
        uint64_t v2 = (long long *)((char *)v2 + 24);
        if (v2 != v1) {
          break;
        }
LABEL_25:
        BOOL v4 = 0;
        if (v2 == (long long *)((char *)v1 - 24)) {
          return v4;
        }
      }
      uint64_t v7 = *((unsigned __int8 *)v6 + 23);
      size_t v8 = *((void *)v6 + 1);
      if ((v7 & 0x80u) == 0) {
        uint64_t v9 = *((unsigned __int8 *)v6 + 23);
      }
      else {
        uint64_t v9 = *((void *)v6 + 1);
      }
      int v10 = v2;
      while (1)
      {
        uint64_t v11 = *((unsigned __int8 *)v10 + 23);
        int v12 = (char)v11;
        if ((v11 & 0x80u) != 0) {
          uint64_t v11 = *((void *)v10 + 1);
        }
        if (v9 == v11)
        {
          if (v12 >= 0) {
            uint64_t v13 = v10;
          }
          else {
            uint64_t v13 = *(long long **)v10;
          }
          if ((v7 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v6, v13, v8)) {
              return 1;
            }
          }
          else
          {
            if (!v7) {
              return 1;
            }
            uint64_t v14 = 0;
            while (*((unsigned __int8 *)v6 + v14) == *((unsigned __int8 *)v13 + v14))
            {
              if (v7 == ++v14) {
                return 1;
              }
            }
          }
        }
        int v10 = (long long *)((char *)v10 + 24);
        if (v10 == v1) {
          goto LABEL_25;
        }
      }
    }
  }
  return 0;
}

void sub_216BA3054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216BA306C(void *a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  v33[2] = *MEMORY[0x263EF8340];
  uint64_t v7 = *a3;
  size_t v8 = a3[1];
  unint64_t v9 = (char *)v8 - (char *)*a3;
  if (v9 < 0x10) {
    goto LABEL_2;
  }
  if (v9 <= 0x57)
  {
    do
    {
LABEL_4:
      if (v7 == v8 - 1) {
        goto LABEL_2;
      }
      int v10 = v7++;
    }
    while (v7 == v8);
    uint64_t v11 = *v10;
    int v12 = v7;
    while (v11 != *v12)
    {
      if (++v12 == v8) {
        goto LABEL_4;
      }
    }
LABEL_24:
    unint64_t v23 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v23)
    {
      int v24 = (const char *)(v23 + 16);
      if (*(char *)(v23 + 39) < 0) {
        int v24 = *(const char **)v24;
      }
    }
    else
    {
      int v24 = "";
    }
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a4 + 102));
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v26, v27, v24, Text);
    if (v31 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    textFileFormatYyerror((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)a4, p_p);
    if (SHIBYTE(v31) < 0) {
      operator delete(__p);
    }
    goto LABEL_2;
  }
  if (v7 != v8)
  {
    do
    {
      uint64_t v13 = v7 + 1;
      if (v7 + 1 == v8) {
        goto LABEL_14;
      }
      char v14 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 1));
      uint64_t v7 = v13;
    }
    while ((v14 & 1) != 0);
    size_t v8 = v13 - 1;
LABEL_14:
    int v15 = a3[1];
    if (v8 != v15)
    {
      long long __p = 0;
      int v30 = 0;
      uint64_t v31 = 0;
      sub_216980EEC(&__p, *a3, v15, v15 - *a3);
      unint64_t v16 = 126 - 2 * __clz((v30 - (unsigned char *)__p) >> 3);
      if (v30 == __p) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = v16;
      }
      sub_2169D38EC((uint64_t)__p, (int *)v30, (uint64_t)v33, v17, 1);
      size_t v19 = (char *)__p;
      int v18 = v30;
      if (__p == v30)
      {
LABEL_23:
        v32[0] = &__p;
        sub_216981168(v32);
        if (v19 == v18) {
          goto LABEL_2;
        }
        goto LABEL_24;
      }
      uint64_t v20 = (int *)((char *)__p + 8);
      while (v20 != (int *)v30)
      {
        uint64_t v21 = *((void *)v20 - 1);
        uint64_t v22 = *(void *)v20;
        v20 += 2;
        if (v21 == v22)
        {
          size_t v19 = (char *)(v20 - 4);
          goto LABEL_23;
        }
      }
      v32[0] = &__p;
      sub_216981168(v32);
    }
  }
LABEL_2:
  sub_2169D1B08(a4 + 101);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp();
}

void sub_216BA3448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void **p_p)
{
  p_p = &__p;
  sub_216981168(&p_p);
  _Unwind_Resume(a1);
}

uint64_t sub_216BA34C4(uint64_t a1)
{
  uint64_t v6 = (void **)(a1 + 944);
  sub_2168DEE10(&v6);
  uint64_t v6 = (void **)(a1 + 920);
  sub_216782F20(&v6);
  uint64_t v6 = (void **)(a1 + 896);
  sub_216BA36C0(&v6);
  uint64_t v6 = (void **)(a1 + 872);
  sub_216BA36C0(&v6);
  sub_2168EE084(a1 + 848);
  sub_2168EE084(a1 + 832);
  uint64_t v2 = *(void *)(a1 + 824);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 820));
  sub_21697C414((_DWORD *)(a1 + 816));
  sub_2169CC880((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 808));
  uint64_t v6 = (void **)(a1 + 776);
  sub_2169CC604(&v6);
  sub_2168EE084(a1 + 760);
  sub_2169CC3E0(a1 + 456);
  uint64_t v3 = *(void *)(a1 + 440);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21698F21C(a1 + 416, *(void **)(a1 + 424));
  uint64_t v6 = (void **)(a1 + 392);
  sub_2169CC78C(&v6);
  uint64_t v6 = (void **)(a1 + 368);
  sub_2169CC68C(&v6);
  uint64_t v6 = (void **)(a1 + 344);
  sub_216981168(&v6);
  uint64_t v6 = (void **)(a1 + 320);
  sub_216981168(&v6);
  uint64_t v6 = (void **)(a1 + 288);
  sub_216981168(&v6);
  uint64_t v6 = (void **)(a1 + 264);
  sub_216981168(&v6);
  if (*(unsigned char *)(a1 + 256))
  {
    uint64_t v6 = (void **)(a1 + 232);
    sub_216981168(&v6);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 220));
  sub_21697C414((_DWORD *)(a1 + 216));
  sub_216997EC4(a1 + 184, *(void **)(a1 + 192));
  uint64_t v6 = (void **)(a1 + 160);
  sub_216889A04(&v6);
  BOOL v4 = *(void **)(a1 + 136);
  if (v4)
  {
    *(void *)(a1 + 144) = v4;
    operator delete(v4);
  }
  uint64_t v6 = (void **)(a1 + 112);
  sub_216782F20(&v6);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_216BA36C0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    BOOL v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        sub_216889A04(&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216BA3734(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216BA37AC((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216BA37AC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_216BA3850((uint64_t)v11);
  return v9;
}

uint64_t sub_216BA3850(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216BA3888(a1);
  }
  return a1;
}

void sub_216BA3888(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    sub_216889A04(&v3);
    v1 += 3;
  }
}

void **sub_216BA38D4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216BA3908(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    BOOL v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    sub_216889A04(&v5);
  }
}

uint64_t sub_216BA3968()
{
  return 1;
}

uint64_t sub_216BA3970()
{
  return 0;
}

uint64_t sub_216BA3978()
{
  return 1;
}

uint64_t sub_216BA3980()
{
  return 1;
}

uint64_t sub_216BA398C()
{
  return 0;
}

void *sub_216BA3998(uint64_t a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void *sub_216BA39A8()
{
  return &unk_26C757FD0;
}

uint64_t sub_216BA39B4()
{
  return 0;
}

uint64_t sub_216BA39BC()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216BA39C8()
{
  return 0;
}

uint64_t sub_216BA39D0()
{
  return 0;
}

BOOL sub_216BA39D8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174C2EA0 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216BA3A14(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C757FD0, a2, a3);
}

void *sub_216BA3A38()
{
  return &unk_26C757FD0;
}

void sub_216BA3A48(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = (char *)&off_26C75B258 + 3;
}

__n128 sub_216BA3A64(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C75B320;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216BA3AB0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75B320;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216BA3AE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)(a1 + 16));
}

uint64_t sub_216BA3AE8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75B3A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216BA3B28()
{
  return &unk_26C75B3A8;
}

void *sub_216BA3B34(void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    BOOL v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_216BA3D94(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_21675DB74(a1);
}

void sub_216BA3DA0()
{
  sub_216779094(v8, "NDR_DISCOVERY");
  long long __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75B3C0, 0, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  uint64_t v0 = sub_216BA4018();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "NDR_DISCOVERY", "Diagnostics from discovering nodes for Node Definition Registry");
  sub_216779094(v8, "NDR_PARSING");
  long long __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75B3C0, 1, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  uint64_t v1 = sub_216BA4018();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v1 + 4, "NDR_PARSING", "Diagnostics from parsing nodes for Node Definition Registry");
  sub_216779094(v8, "NDR_INFO");
  long long __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75B3C0, 2, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  uint64_t v2 = sub_216BA4018();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v2 + 8, "NDR_INFO", "Advisory information for Node Definition Registry");
  sub_216779094(v8, "NDR_STATS");
  long long __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75B3C0, 3, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  uint64_t v3 = sub_216BA4018();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v3 + 12, "NDR_STATS", "Statistics for registries derived from NdrRegistry");
  sub_216779094(v8, "NDR_DEBUG");
  long long __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75B3C0, 4, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  uint64_t v4 = sub_216BA4018();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v4 + 16, "NDR_DEBUG", "Advanced debugging for Node Definition Registry");
}

void sub_216BA3FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216BA4018()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798C468, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798C468))
  {
    uint64_t v1 = operator new(0x14uLL);
    void *v1 = 0;
    v1[1] = 0;
    *((_DWORD *)v1 + 4) = 0;
    qword_26798C460 = (uint64_t)v1;
    __cxa_guard_release(&qword_26798C468);
  }
  return qword_26798C460;
}

void sub_216BA4080(_Unwind_Exception *a1)
{
}

void sub_216BA409C()
{
  sub_216779094(v2, "NdrVersionFilterDefaultOnly");
  sub_216779094(__p, "DefaultOnly");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75B3D0, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "NdrVersionFilterAllVersions");
  sub_216779094(__p, "AllVersions");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75B3D0, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_216BA4170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::NdrVersion *pxrInternal__aapl__pxrReserved__::NdrVersion::NdrVersion(pxrInternal__aapl__pxrReserved__::NdrVersion *this, int a2, int a3)
{
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  *((unsigned char *)this + 8) = 0;
  if ((a3 | a2) <= 0)
  {
    *((unsigned char *)this + 8) = 0;
    *(void *)this = 0;
    v5[0] = "ndr/declare.cpp";
    v5[1] = "NdrVersion";
    uint64_t v5[2] = 83;
    v5[3] = "pxrInternal__aapl__pxrReserved__::NdrVersion::NdrVersion(int, int)";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid version %d.%d: both components must be non-negative and at least one non-zero", a2, a3);
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrVersion::NdrVersion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = sub_216BA426C(a2);
  *(unsigned char *)(a1 + 8) = v3;
  return a1;
}

{
  char v3;

  *(void *)a1 = sub_216BA426C(a2);
  *(unsigned char *)(a1 + 8) = v3;
  return a1;
}

uint64_t sub_216BA426C(uint64_t a1)
{
  size_t __idx = 0;
  int v2 = std::stoi((const std::string *)a1, &__idx, 10);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    size_t v4 = *(void *)(a1 + 8);
    if (__idx == v4) {
      goto LABEL_3;
    }
  }
  else
  {
    size_t v4 = *(unsigned __int8 *)(a1 + 23);
    if (__idx == v3)
    {
LABEL_3:
      pxrInternal__aapl__pxrReserved__::NdrVersion::NdrVersion((pxrInternal__aapl__pxrReserved__::NdrVersion *)&v15, v2, 0);
      return v15;
    }
  }
  if (__idx >= v4) {
    goto LABEL_16;
  }
  uint64_t v5 = (v3 & 0x80u) == 0 ? a1 : *(void *)a1;
  if (*(unsigned char *)(v5 + __idx) != 46) {
    goto LABEL_16;
  }
  size_t v13 = 0;
  std::string::basic_string(&__str, (const std::string *)a1, __idx + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v17);
  int v6 = std::stoi(&__str, &v13, 10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  if (__idx + v13 + 1 == v7)
  {
    pxrInternal__aapl__pxrReserved__::NdrVersion::NdrVersion((pxrInternal__aapl__pxrReserved__::NdrVersion *)&v15, v2, v6);
  }
  else
  {
LABEL_16:
    int v16 = 0;
    uint64_t v15 = 0;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"ndr/declare.cpp";
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)"_ParseVersionString";
    __str.__r_.__value_.__r.__words[2] = 70;
    uint64_t v11 = "NdrVersion pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParseVersionString(const std::string &)";
    char v12 = 0;
    if (*(char *)(a1 + 23) >= 0) {
      long long v8 = (const char *)a1;
    }
    else {
      long long v8 = *(const char **)a1;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__str, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid version string '%s'", v8);
  }
  return v15;
}

void pxrInternal__aapl__pxrReserved__::NdrVersion::GetString(pxrInternal__aapl__pxrReserved__::NdrVersion *this@<X0>, std::string *a2@<X8>)
{
  int v4 = *(_DWORD *)this;
  int v5 = *((_DWORD *)this + 1);
  if (v4)
  {
    if (!v5)
    {
      std::to_string(a2, v4);
      return;
    }
    goto LABEL_7;
  }
  if (v5)
  {
LABEL_7:
    std::to_string(&v13, v4);
    int v6 = std::string::append(&v13, ".");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, *((_DWORD *)this + 1));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    int v10 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    return;
  }

  sub_216779094(a2, "<invalid version>");
}

void sub_216BA45A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::NdrVersion::GetStringSuffix(pxrInternal__aapl__pxrReserved__::NdrVersion *this@<X0>, std::string *a2@<X8>)
{
  if (*((unsigned char *)this + 8))
  {
LABEL_2:
    sub_216779094(a2, "");
    return;
  }
  int v4 = *(_DWORD *)this;
  int v5 = *((_DWORD *)this + 1);
  if (v4)
  {
    if (!v5)
    {
      std::to_string(&v17, v4);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v6.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v17;
      }
      else {
        v6.__i_ = (std::__wrap_iter<const char *>::iterator_type)v17.__r_.__value_.__r.__words[0];
      }
      std::string::insert(&v17, v6, 95);
      *a2 = v17;
      return;
    }
  }
  else if (!v5)
  {
    goto LABEL_2;
  }
  std::to_string(&v15, v4);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v7.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v15;
  }
  else {
    v7.__i_ = (std::__wrap_iter<const char *>::iterator_type)v15.__r_.__value_.__r.__words[0];
  }
  std::string::insert(&v15, v7, 95);
  std::string v16 = v15;
  memset(&v15, 0, sizeof(v15));
  long long v8 = std::string::append(&v16, ".");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *((_DWORD *)this + 1));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  char v12 = std::string::append(&v17, (const std::string::value_type *)p_p, size);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_216BA47A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 - 41) < 0) {
    operator delete(*(void **)(v26 - 64));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216BA4818()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  std::string::const_iterator v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C75B3D0, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C75B3D0, (char *)4, 1, 1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    std::string::const_iterator v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216BA48D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::NdrDiscoveryPlugin(uint64_t this)
{
  *(_DWORD *)(this + 8) = 1;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_26C75B3F0;
  return this;
}

void pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::~NdrDiscoveryPlugin(pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin *this, const void *a2)
{
  sub_216859A88((uint64_t *)this + 2, a2);

  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(this);
}

uint64_t *sub_216BA4990()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  std::string::const_iterator v6 = 0;
  uint64_t v7 = 0;
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    std::string::const_iterator v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216BA4A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_216BA4A94()
{
  uint64_t v0 = sub_216BA5248();

  return sub_216BA5374(v0);
}

void sub_216BA4ABC()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_SEARCH_PATHS)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>();
  }
}

void sub_216BA4B04()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_ALLOWED_EXTS)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>();
  }
}

void sub_216BA4B4C()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_FOLLOW_SYMLINKS)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin *pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin::_NdrFilesystemDiscoveryPlugin(pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin *this)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::NdrDiscoveryPlugin((uint64_t)this);
  *(void *)uint64_t v2 = &unk_26C75B458;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t *)(v2 + 24);
  char v4 = (uint64_t *)(v2 + 48);
  *(void *)(v2 + 104) = 0;
  *(_OWORD *)(v2 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  int v5 = (std::string *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_SEARCH_PATHS);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>();
  }
  sub_216779094(__p, ":");
  pxrInternal__aapl__pxrReserved__::TfStringSplit(v5, (char *)__p, (uint64_t *)&v11);
  sub_21680F80C(v3);
  *(_OWORD *)((char *)this + 24) = v11;
  *((void *)this + 5) = v12;
  uint64_t v12 = 0;
  long long v11 = 0uLL;
  long long v13 = (void **)&v11;
  sub_216782F20(&v13);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::const_iterator v6 = (std::string *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_ALLOWED_EXTS);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>();
  }
  sub_216779094(__p, ":");
  pxrInternal__aapl__pxrReserved__::TfStringSplit(v6, (char *)__p, (uint64_t *)&v11);
  sub_21680F80C(v4);
  *((_OWORD *)this + 3) = v11;
  *((void *)this + 8) = v12;
  uint64_t v12 = 0;
  long long v11 = 0uLL;
  long long v13 = (void **)&v11;
  sub_216782F20(&v13);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_FS_PLUGIN_FOLLOW_SYMLINKS);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  *((unsigned char *)this + 72) = *v7;
  return this;
}

void sub_216BA4D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  sub_216BA5748((void *)v16 + 10);
  sub_216782F20((void ***)&a16);
  sub_216782F20((void ***)&a16);
  pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::~NdrDiscoveryPlugin(v16, v18);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin *pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin::_NdrFilesystemDiscoveryPlugin(pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin *a1, uint64_t a2)
{
  char v4 = pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin::_NdrFilesystemDiscoveryPlugin(a1);
  sub_216BA57CC((void *)v4 + 10, a2);
  return a1;
}

{
  pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin *v4;

  char v4 = pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin::_NdrFilesystemDiscoveryPlugin(a1);
  sub_216BA57CC((void *)v4 + 10, a2);
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin::DiscoverNodes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v10[4] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(unsigned __int8 *)(a1 + 72);
  v10[0] = &unk_26C75B4F8;
  v10[1] = pxrInternal__aapl__pxrReserved__::NdrFsHelpersSplitShaderIdentifier;
  v10[3] = v10;
  pxrInternal__aapl__pxrReserved__::NdrFsHelpersDiscoverNodes(a1 + 24, a1 + 48, v5, a2, (uint64_t)v10, a3);
  __n128 result = sub_216BA58D8(v10);
  if (*(void *)(a1 + 104))
  {
    uint64_t v7 = *a3;
    for (uint64_t i = *a3; i != a3[1]; i += 216)
    {
      uint64_t v9 = *(void *)(a1 + 104);
      if (!v9) {
        sub_21683A7CC();
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v9 + 48))(v9, i))
      {
        if (i != v7) {
          sub_216BA4F9C(v7, i);
        }
        v7 += 216;
      }
    }
    return (void *)sub_216BA51A4((uint64_t)a3, v7, i);
  }
  return result;
}

void sub_216BA4F6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BA5A40((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BA4F9C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    if ((*(void *)a1 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = 0;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = (void **)(a1 + 24);
  std::string::const_iterator v6 = (long long *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v7 = *v6;
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a2 + 40);
  *(_OWORD *)uint64_t v5 = v7;
  *(unsigned char *)(a2 + 47) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (a2 != a1)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if ((v8 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a2 + 48) = 0;
    uint64_t v9 = *(void *)(a1 + 56);
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    uint64_t v10 = *(void *)(a1 + 64);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a2 + 64) = 0;
  }
  long long v11 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v11);
  }
  long long v12 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)long long v11 = v12;
  *(unsigned char *)(a2 + 95) = 0;
  *(unsigned char *)(a2 + 72) = 0;
  long long v13 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v13);
  }
  long long v14 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)long long v13 = v14;
  *(unsigned char *)(a2 + 119) = 0;
  *(unsigned char *)(a2 + 96) = 0;
  std::string v15 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*v15);
  }
  long long v16 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)std::string v15 = v16;
  *(unsigned char *)(a2 + 143) = 0;
  *(unsigned char *)(a2 + 12sub_2168EBBB8(&a9, 0) = 0;
  sub_216BA5568(a1 + 144, (uint64_t *)(a2 + 144));
  std::string v17 = (void **)(a1 + 184);
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*v17);
  }
  long long v18 = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 20sub_2168EBBB8(&a9, 0) = *(void *)(a2 + 200);
  *(_OWORD *)std::string v17 = v18;
  *(unsigned char *)(a2 + 207) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (a2 != a1)
  {
    uint64_t v19 = *(void *)(a1 + 208);
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(void *)(a2 + 208) = 0;
  }
  return a1;
}

uint64_t sub_216BA51A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_216BA5BF4(a3, *(void *)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
        uint64_t v7 = sub_216BA5AC4(v7 - 216);
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

void sub_216BA5218(uint64_t a1)
{
  sub_216BA56F0(a1);

  operator delete(v1);
}

uint64_t sub_216BA5240(uint64_t a1)
{
  return a1 + 24;
}

uint64_t *sub_216BA5248()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216BA541C((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216BA5328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_216BA5374(uint64_t *a1)
{
  uint64_t v2 = operator new(8uLL);
  void *v2 = &unk_26C75B4A0;
  uint64_t v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  uint64_t result = (uint64_t)v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_216BA5400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324398(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BA541C(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216BA548C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BA54B4(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);

  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BA54DC@<X0>(pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin **a1@<X8>)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin *)operator new(0x70uLL);
  pxrInternal__aapl__pxrReserved__::_NdrFilesystemDiscoveryPlugin::_NdrFilesystemDiscoveryPlugin(v2);
  *a1 = v2;
  char v4 = 0;
  return sub_216BA5538(&v4);
}

void sub_216BA5524(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BA5538(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

void sub_216BA5568(uint64_t a1, uint64_t *a2)
{
  sub_216BA560C(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  char v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  int v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    void *v7 = 0;
    v7[1] = 0;
  }
}

void sub_216BA560C(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_216BA5664(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_216BA5664(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216BA56A8((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216BA56A8(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216BA56F0(uint64_t a1)
{
  sub_216BA5748((void *)(a1 + 80));
  uint64_t v3 = (void **)(a1 + 48);
  sub_216782F20(&v3);
  uint64_t v3 = (void **)(a1 + 24);
  sub_216782F20(&v3);
  pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::~NdrDiscoveryPlugin((pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin *)a1, v2);
}

void *sub_216BA5748(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_216BA57CC(void *a1, uint64_t a2)
{
  sub_216BA5850(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_216BA5850(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_216BA58D8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_216BA5964(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C75B4F8;
  result[1] = v3;
  return result;
}

uint64_t sub_216BA59AC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C75B4F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_216BA59D8(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  return (*(uint64_t (**)(uint64_t, void, void, void))(a1 + 8))(a2, *a3, *a4, *a5);
}

uint64_t sub_216BA59F4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75B578)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216BA5A34()
{
  return &unk_26C75B578;
}

void sub_216BA5A40(void ***a1)
{
  char v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    char v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_216BA5AC4(v4 - 216);
      while ((void *)v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216BA5AC4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 208);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*(void **)(a1 + 184));
  }
  sub_216BA5BB8(a1 + 144);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *(void *)(a1 + 56);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(void *)(a1 + 48);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

uint64_t sub_216BA5BB8(uint64_t a1)
{
  sub_216BA5664(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_216BA5BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_216BA4F9C(a3, v4);
      v4 += 216;
      a3 += 216;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrFsHelpersSplitShaderIdentifier(pxrInternal__aapl__pxrReserved__ *this, std::string *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4, pxrInternal__aapl__pxrReserved__::NdrVersion *a5)
{
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  pxrInternal__aapl__pxrReserved__::TfStringTokenize((unsigned __int8 *)EmptyString, "_", &v32);
  if (v32 == v33) {
    goto LABEL_38;
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__p);
  std::string::size_type v10 = a2->__r_.__value_.__r.__words[0];
  if (&__p != a2)
  {
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::string::size_type v10 = 0;
    a2->__r_.__value_.__r.__words[0] = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  unint64_t v11 = v32;
  unint64_t v12 = v33;
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v33 - (char *)v32) >> 3);
  if (v13 == 2)
  {
    if (sub_216BA6000((unsigned __int8 *)&v33[-1]))
    {
      int v14 = std::stoi(v12 - 1, 0, 10);
      pxrInternal__aapl__pxrReserved__::NdrVersion::NdrVersion((pxrInternal__aapl__pxrReserved__::NdrVersion *)&__p, v14, 0);
      *(void *)a4 = __p.__r_.__value_.__r.__words[0];
      *((unsigned char *)a4 + 8) = __p.__r_.__value_.__s.__data_[8];
      std::string v15 = a3;
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__ *)a2;
    }
    else
    {
      *((unsigned char *)a4 + 8) = 0;
      *(void *)a4 = 0;
      std::string v15 = a3;
      uint64_t v16 = this;
    }
    sub_2168D2318(v15, v16);
    goto LABEL_35;
  }
  if (v13 != 1)
  {
    BOOL v17 = sub_216BA6000((unsigned __int8 *)&v33[-1]);
    if (!sub_216BA6000((unsigned __int8 *)&v12[-2]))
    {
      if (!v17) {
        goto LABEL_14;
      }
      int v21 = std::stoi(v11 + v13 - 1, 0, 10);
      pxrInternal__aapl__pxrReserved__::NdrVersion::NdrVersion((pxrInternal__aapl__pxrReserved__::NdrVersion *)&__p, v21, 0);
      *(void *)a4 = __p.__r_.__value_.__r.__words[0];
      *((unsigned char *)a4 + 8) = __p.__r_.__value_.__s.__data_[8];
      sub_216881C38("_", v32, v33 - 1, &__p);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v28);
LABEL_24:
      uint64_t v22 = *(void *)a3;
      uint64_t v23 = *(void *)a3 & 7;
      if (&v28 == (uint64_t *)a3)
      {
        if (v23) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if (v23) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *(void *)a3 = v28;
        uint64_t v28 = 0;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_35;
    }
    if (v17)
    {
      int v19 = std::stoi(v12 - 2, 0, 10);
      int v20 = std::stoi(v33 - 1, 0, 10);
      pxrInternal__aapl__pxrReserved__::NdrVersion::NdrVersion((pxrInternal__aapl__pxrReserved__::NdrVersion *)&__p, v19, v20);
      *(void *)a4 = __p.__r_.__value_.__r.__words[0];
      *((unsigned char *)a4 + 8) = __p.__r_.__value_.__s.__data_[8];
      sub_216881C38("_", v32, v33 - 2, &__p);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v28);
      goto LABEL_24;
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"ndr/filesystemDiscoveryHelpers.cpp";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"NdrFsHelpersSplitShaderIdentifier";
    __p.__r_.__value_.__r.__words[2] = 183;
    int v30 = "BOOL pxrInternal__aapl__pxrReserved__::NdrFsHelpersSplitShaderIdentifier(const TfToken &, TfToken *, TfToken *, NdrVersion *)";
    char v31 = 0;
    unint64_t v24 = *(void *)this & 0xFFFFFFFFFFFFFFF8;
    if (v24)
    {
      BOOL v25 = (const char *)(v24 + 16);
      if (*(char *)(v24 + 39) < 0) {
        BOOL v25 = *(const char **)v25;
      }
    }
    else
    {
      BOOL v25 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Invalid shader identifier '%s'.", v18, v25);
LABEL_38:
    uint64_t v26 = 0;
    goto LABEL_39;
  }
  sub_2168D2318(a2, this);
LABEL_14:
  sub_2168D2318(a3, this);
  *(void *)a4 = 0;
  *((unsigned char *)a4 + 8) = 0;
LABEL_35:
  uint64_t v26 = 1;
LABEL_39:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  sub_216782F20((void ***)&__p);
  return v26;
}

void sub_216BA5FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  std::string __p = &a19;
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL sub_216BA6000(unsigned __int8 *a1)
{
  uint64_t v1 = a1[23];
  if (((char)a1[23] & 0x80000000) == 0)
  {
    if (a1[23])
    {
      uint64_t v2 = a1;
      uint64_t v3 = a1[23];
      goto LABEL_6;
    }
    return 0;
  }
  uint64_t v3 = *((void *)a1 + 1);
  if (!v3) {
    return 0;
  }
  uint64_t v2 = *(unsigned __int8 **)a1;
LABEL_6:
  uint64_t v4 = &v2[v3];
  while ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * *v2 + 60) & 0x400) != 0)
  {
    ++v2;
    if (!--v3)
    {
      uint64_t v2 = v4;
      break;
    }
  }
  if ((v1 & 0x80u) == 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(unsigned __int8 **)a1;
  }
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *((void *)a1 + 1);
  }
  return v2 == &v5[v1];
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrFsHelpersDiscoverNodes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v15 = a4;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  memset(v13, 0, sizeof(v13));
  int v14 = 1065353216;
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v17);
  unint64_t v11 = operator new(0x30uLL);
  void *v11 = &unk_26C75B5A8;
  v11[1] = a6;
  void v11[2] = v13;
  void v11[3] = a2;
  v11[4] = &v15;
  v11[5] = a5;
  v16[3] = v11;
  sub_216BA61B8(a1, (uint64_t)v16, a3);
  sub_216866950(v16);
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v17);
  return sub_216850298((uint64_t)v13);
}

void sub_216BA6178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_216866950(&a16);
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)(v16 - 72));
  sub_216850298((uint64_t)&a9);
  sub_216BA5A40(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216BA61B8(uint64_t result, uint64_t a2, uint64_t a3)
{
  _OWORD v8[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(const char **)result;
  uint64_t v4 = *(const char **)(result + 8);
  if (*(const char **)result != v4)
  {
    do
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::TfIsDir(v3, 0);
      if (result)
      {
        sub_216BA63D0((uint64_t)v8, a2);
        v7[0] = &unk_26C74BD70;
        v7[1] = pxrInternal__aapl__pxrReserved__::TfWalkIgnoreErrorHandler;
        void v7[3] = v7;
        pxrInternal__aapl__pxrReserved__::TfWalkDirs(v3, (const char *)v8, (char *)1, (uint64_t)v7, a3);
        sub_21686645C(v7);
        uint64_t result = (uint64_t)sub_216866950(v8);
      }
      v3 += 24;
    }
    while (v3 != v4);
  }
  return result;
}

void sub_216BA62C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_21686645C((uint64_t *)va);
  sub_216866950((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrFsHelpersDiscoverFiles(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v9);
  v8[0] = &unk_26C75B628;
  v8[1] = a2;
  v8[2] = a4;
  v8[3] = v8;
  sub_216BA61B8(a1, (uint64_t)v8, a3);
  sub_216866950(v8);
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v9);
}

void sub_216BA63A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_216866950((void ***)va);
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)va1);
  sub_21682E488((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BA63D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

__n128 sub_216BA6470(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26C75B5A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_216BA64CC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75B5A8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216BA650C(uint64_t a1, const void **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  uint64_t v5 = a4[1];
  if (*a4 != v5)
  {
    uint64_t v7 = *(uint64_t **)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v9 = *(uint64_t **)(a1 + 24);
    uint64_t v38 = **(pxrInternal__aapl__pxrReserved__ ***)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    do
    {
      pxrInternal__aapl__pxrReserved__::TfGetExtension(v4, &__p);
      pxrInternal__aapl__pxrReserved__::TfStringToLowerAscii((unsigned __int8 *)&__p, (uint64_t)v54);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (sub_2169CAFD0(*v9, v9[1], v54) != v9[1])
      {
        pxrInternal__aapl__pxrReserved__::TfStringCatPaths(a2, v4, &v52);
        pxrInternal__aapl__pxrReserved__::TfStringGetBeforeSuffix(v4, 46, &__p);
        unint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v51);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if ((v51 & 0xFFFFFFFFFFFFFFF8) != 0) {
          EmptyString = (uint64_t *)((v51 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
        }
        if (*((char *)EmptyString + 23) >= 0) {
          size_t v13 = *((unsigned __int8 *)EmptyString + 23);
        }
        else {
          size_t v13 = EmptyString[1];
        }
        sub_2167940B4((uint64_t)&__p, v13 + 1);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (v13)
        {
          if (*((char *)EmptyString + 23) >= 0) {
            uint64_t v15 = EmptyString;
          }
          else {
            uint64_t v15 = (const void *)*EmptyString;
          }
          memmove(p_p, v15, v13);
        }
        *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v13) = 45;
        if ((v55 & 0x80u) == 0) {
          uint64_t v16 = (const std::string::value_type *)v54;
        }
        else {
          uint64_t v16 = (const std::string::value_type *)v54[0];
        }
        if ((v55 & 0x80u) == 0) {
          std::string::size_type v17 = v55;
        }
        else {
          std::string::size_type v17 = (std::string::size_type)v54[1];
        }
        uint64_t v18 = std::string::append(&__p, v16, v17);
        long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        std::string::size_type v50 = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v49.__r_.__value_.__r.__words[1] = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        sub_216A38350(v8, (unsigned __int8 *)&v49.__r_.__value_.__s.__data_[8], (uint64_t)&v49.__r_.__value_.__l.__size_);
        if (v21)
        {
          uint64_t v48 = 0;
          v49.__r_.__value_.__r.__words[0] = 0;
          char v47 = 0;
          uint64_t v46 = 0;
          if (*(void *)(v10 + 24)) {
            char v26 = sub_216BA6BC4(v10, (uint64_t)&v51, (uint64_t)&v49, (uint64_t)&v48, (uint64_t)&v46);
          }
          else {
            char v26 = pxrInternal__aapl__pxrReserved__::NdrFsHelpersSplitShaderIdentifier((pxrInternal__aapl__pxrReserved__ *)&v51, &v49, (pxrInternal__aapl__pxrReserved__::TfToken *)&v48, (pxrInternal__aapl__pxrReserved__::TfToken *)&v46, v20);
          }
          if (v26)
          {
            pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v42);
            uint64_t v40 = v46;
            int v41 = 1;
            uint64_t v28 = v38;
            if (v38) {
              uint64_t v28 = (pxrInternal__aapl__pxrReserved__ *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)v38 + 16))(&v39);
            }
            else {
              uint64_t v39 = 0;
            }
            Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v28);
            pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
            unint64_t v35 = v7[1];
            if (v35 >= v7[2])
            {
              uint64_t v36 = sub_216BA6C24(v7, &v51, &v40, &v48, (uint64_t *)&v49, &v42, &v39, &v52, (long long *)&__p);
            }
            else
            {
              sub_216BA6DA0((pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 2), v35, &v51, &v40, &v48, (uint64_t *)&v49, &v42, &v39, &v52, (long long *)&__p);
              uint64_t v36 = v35 + 216;
              v7[1] = v35 + 216;
            }
            v7[1] = v36;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if ((v39 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if ((v42 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
          else
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"ndr/filesystemDiscoveryHelpers.cpp";
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_FsHelpersExamineFiles";
            __p.__r_.__value_.__r.__words[2] = 96;
            uint64_t v44 = "BOOL pxrInternal__aapl__pxrReserved__::_FsHelpersExamineFiles(NdrNodeDiscoveryResultVec *, NdrStringSe"
                  "t *, const NdrStringVec &, const NdrDiscoveryPluginContext *, const std::string &, const NdrStringVec "
                  "&, const NdrParseIdentifierFn &)";
            char v45 = 0;
            unint64_t v29 = v51 & 0xFFFFFFFFFFFFFFF8;
            if ((v51 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              int v30 = (const char *)(v29 + 16);
              if (*(char *)(v29 + 39) < 0) {
                int v30 = *(const char **)v30;
              }
            }
            else
            {
              int v30 = "";
            }
            std::string v33 = &v52;
            if (v53 < 0) {
              std::string v33 = (long long *)v52;
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Could not parse the family, name, and version from shader indentifier '%s' for shader file '%s'. Skipping.", v27, v30, v33);
          }
          if ((v48 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v49.__r_.__value_.__s.__data_[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v49.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        else if (sub_216BA6B60(0))
        {
          unint64_t v24 = v51 & 0xFFFFFFFFFFFFFFF8;
          if ((v51 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            BOOL v25 = (const char *)(v24 + 16);
            if (*(char *)(v24 + 39) < 0) {
              BOOL v25 = *(const char **)v25;
            }
          }
          else
          {
            BOOL v25 = "";
          }
          char v31 = v54;
          if ((v55 & 0x80u) != 0) {
            char v31 = (unsigned __int8 **)v54[0];
          }
          uint64_t v32 = &v52;
          if (v53 < 0) {
            uint64_t v32 = (long long *)v52;
          }
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Found a duplicate node with identifier [%s] and type [%s] at URI [%s]; ignoring.\n",
            v22,
            v23,
            v25,
            v31,
            v32);
        }
        if (SHIBYTE(v50) < 0) {
          operator delete((void *)v49.__r_.__value_.__l.__size_);
        }
        if ((v51 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v53 < 0) {
          operator delete((void *)v52);
        }
      }
      if ((char)v55 < 0) {
        operator delete(v54[0]);
      }
      v4 += 24;
    }
    while (v4 != v5);
  }
  return 1;
}

void sub_216BA69BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  uint64_t v37 = *(void *)(v35 - 144);
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(char *)(v35 - 113) < 0) {
    operator delete(*(void **)(v35 - 136));
  }
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  _Unwind_Resume(exception_object);
}

void sub_216BA6B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    JUMPOUT(0x216BA6AF4);
  }
  JUMPOUT(0x216BA6AF8);
}

uint64_t sub_216BA6B14(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75B608)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216BA6B54()
{
  return &unk_26C75B608;
}

BOOL sub_216BA6B60(int a1)
{
  uint64_t v2 = sub_216BA4018();
  unsigned int v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    uint64_t v5 = v2;
    uint64_t v6 = sub_216BA4018();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), off_2642944B0[a1]);
    unsigned int v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

uint64_t sub_216BA6BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a3;
  uint64_t v7 = a5;
  uint64_t v8 = a4;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(void *)v5 + 48))(v5, a2, &v9, &v8, &v7);
}

uint64_t sub_216BA6C24(uint64_t *a1, uint64_t *a2, uint64_t *a3, void *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, long long *a8, long long *a9)
{
  unint64_t v10 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3);
  unint64_t v11 = v10 + 1;
  if (v10 + 1 > 0x12F684BDA12F684) {
    sub_21677CB10();
  }
  if (0x97B425ED097B426 * ((a1[2] - *a1) >> 3) > v11) {
    unint64_t v11 = 0x97B425ED097B426 * ((a1[2] - *a1) >> 3);
  }
  if (0x84BDA12F684BDA13 * ((a1[2] - *a1) >> 3) >= 0x97B425ED097B42) {
    unint64_t v19 = 0x12F684BDA12F684;
  }
  else {
    unint64_t v19 = v11;
  }
  uint64_t v28 = a1 + 2;
  if (v19)
  {
    unint64_t v23 = v10;
    int v20 = (char *)sub_216BA76E0((uint64_t)(a1 + 2), v19);
    unint64_t v10 = v23;
  }
  else
  {
    int v20 = 0;
  }
  unint64_t v24 = v20;
  BOOL v25 = &v20[216 * v10];
  uint64_t v27 = &v20[216 * v19];
  sub_216BA6DA0((pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 2), (uint64_t)v25, a2, a3, a4, a5, a6, a7, a8, a9);
  char v26 = v25 + 216;
  sub_216BA7640(a1, &v24);
  uint64_t v21 = a1[1];
  sub_216BA7820((uint64_t)&v24);
  return v21;
}

void sub_216BA6D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216BA7820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216BA6DA0(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, long long *a9, long long *a10)
{
  if ((*a5 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*a5 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  long long v22 = 0uLL;
  uint64_t v23 = 0;
  memset(v20, 0, sizeof(v20));
  int v21 = 1065353216;
  long long __p = 0uLL;
  uint64_t v19 = 0;
  uint64_t v17 = 0;
  sub_216BA6EEC(a2, a3, a4, (long long *)EmptyString, a6, a7, a8, a9, a10, &v22, (uint64_t)v20, &__p, &v17);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)__p);
  }
  sub_216BA5BB8((uint64_t)v20);
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)v22);
  }
}

void sub_216BA6EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21732491C((uint64_t)va, (uint64_t)va1, (uint64_t)va2, v7 - 88);
  _Unwind_Resume(a1);
}

uint64_t sub_216BA6EEC(uint64_t a1, uint64_t *a2, uint64_t *a3, long long *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, long long *a8, long long *a9, long long *a10, uint64_t a11, long long *a12, uint64_t *a13)
{
  uint64_t v18 = *a2;
  *(void *)a1 = *a2;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *a3;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a3 + 2);
  *(void *)(a1 + 8) = v19;
  if (*((char *)a4 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 24), *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v20 = *a4;
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 24) = v20;
  }
  uint64_t v21 = *a5;
  *(void *)(a1 + 48) = *a5;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 48) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = *a6;
  *(void *)(a1 + 56) = *a6;
  if ((v22 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 56) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v23 = *a7;
  *(void *)(a1 + 64) = *a7;
  if ((v23 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 64) &= 0xFFFFFFFFFFFFFFF8;
  }
  if (*((char *)a8 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 72), *(void **)a8, *((void *)a8 + 1));
  }
  else
  {
    long long v24 = *a8;
    *(void *)(a1 + 88) = *((void *)a8 + 2);
    *(_OWORD *)(a1 + 72) = v24;
  }
  if (*((char *)a9 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 96), *(void **)a9, *((void *)a9 + 1));
  }
  else
  {
    long long v25 = *a9;
    *(void *)(a1 + 112) = *((void *)a9 + 2);
    *(_OWORD *)(a1 + 96) = v25;
  }
  if (*((char *)a10 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 120), *(void **)a10, *((void *)a10 + 1));
  }
  else
  {
    long long v26 = *a10;
    *(void *)(a1 + 136) = *((void *)a10 + 2);
    *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = v26;
  }
  sub_216BA71F4(a1 + 144, a11);
  uint64_t v27 = (unsigned char *)(a1 + 184);
  if (*((char *)a12 + 23) < 0)
  {
    sub_216778F24(v27, *(void **)a12, *((void *)a12 + 1));
  }
  else
  {
    long long v28 = *a12;
    *(void *)(a1 + 20sub_2168EBBB8(&a9, 0) = *((void *)a12 + 2);
    *(_OWORD *)uint64_t v27 = v28;
  }
  uint64_t v29 = *a13;
  *(void *)(a1 + 208) = *a13;
  if ((v29 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 208) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void sub_216BA7114(_Unwind_Exception *a1)
{
  uint64_t v7 = v4;
  sub_216BA5BB8(v7);
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v3);
  }
  uint64_t v9 = *(void *)(v1 + 64);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *(void *)(v1 + 56);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *(void *)(v1 + 48);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if ((*(void *)v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216BA71F4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_21678A04C(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_216BA726C(a1, i + 2, i + 2);
  return a1;
}

void sub_216BA7254(_Unwind_Exception *a1)
{
  sub_216BA5BB8(v1);
  _Unwind_Resume(a1);
}

void *sub_216BA726C(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = v6 & (v7 - 1);
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if ((v10[2] & 0xFFFFFFFFFFFFFFF8) == v5) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_216BA74D4(a1, v6, a3, (uint64_t)v21);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
  if (v18)
  {
    *(void *)v21[0] = *v18;
    *uint64_t v18 = v21[0];
  }
  else
  {
    *(void *)v21[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v21[0])
    {
      unint64_t v19 = *(void *)(*(void *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v21[0];
    }
  }
  uint64_t v10 = (void *)v21[0];
  v21[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216BA75E8((uint64_t)v21, 0);
  return v10;
}

void sub_216BA74BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BA75E8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_216BA74D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  __n128 result = sub_216BA754C(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216BA7534(_Unwind_Exception *a1)
{
  sub_216BA75E8(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_216BA754C(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = a1 + 1;
  if (*((char *)a2 + 31) < 0)
  {
    sub_216778F24(v4, (void *)a2[1], a2[2]);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 1);
    a1[3] = a2[3];
    *(_OWORD *)uint64_t v4 = v5;
  }
  return a1;
}

void sub_216BA75E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216BA56A8((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_216BA7640(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  if (v4 != *a1)
  {
    do
    {
      v6 -= 216;
      v4 -= 216;
      sub_216BA772C((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *sub_216BA76E0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x12F684BDA12F685) {
    sub_21677CA1C();
  }
  return operator new(216 * a2);
}

__n128 sub_216BA772C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = *(void *)a3;
  *(void *)a3 = 0;
  uint64_t v5 = *(void *)(a3 + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
  *(void *)(a2 + 8) = v5;
  long long v6 = *(_OWORD *)(a3 + 24);
  *(void *)(a2 + 4sub_2168EBBB8(&a9, 0) = *(void *)(a3 + 40);
  *(_OWORD *)(a2 + 24) = v6;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 4sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(void *)(a3 + 48) = 0;
  *(void *)(a2 + 56) = *(void *)(a3 + 56);
  *(void *)(a3 + 56) = 0;
  *(void *)(a2 + 64) = *(void *)(a3 + 64);
  *(void *)(a3 + 64) = 0;
  long long v7 = *(_OWORD *)(a3 + 72);
  *(void *)(a2 + 88) = *(void *)(a3 + 88);
  *(_OWORD *)(a2 + 72) = v7;
  *(void *)(a3 + 8sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 72) = 0;
  long long v8 = *(_OWORD *)(a3 + 96);
  *(void *)(a2 + 112) = *(void *)(a3 + 112);
  *(_OWORD *)(a2 + 96) = v8;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 96) = 0;
  long long v9 = *(_OWORD *)(a3 + 120);
  *(void *)(a2 + 136) = *(void *)(a3 + 136);
  *(_OWORD *)(a2 + 12sub_2168EBBB8(&a9, 0) = v9;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 12sub_2168EBBB8(&a9, 0) = 0;
  sub_2168C06A4(a2 + 144, (uint64_t *)(a3 + 144));
  __n128 result = *(__n128 *)(a3 + 184);
  *(void *)(a2 + 20sub_2168EBBB8(&a9, 0) = *(void *)(a3 + 200);
  *(__n128 *)(a2 + 184) = result;
  *(void *)(a3 + 184) = 0;
  *(void *)(a3 + 192) = 0;
  *(void *)(a3 + 20sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a2 + 208) = *(void *)(a3 + 208);
  *(void *)(a3 + 208) = 0;
  return result;
}

uint64_t sub_216BA7820(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 216;
    sub_216BA5AC4(i - 216);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_216BA7878(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C75B628;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216BA78C4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75B628;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216BA78F4(uint64_t a1, const void **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  uint64_t v5 = a4[1];
  if (*a4 != v5)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::TfGetExtension(v4, (std::string *)__p);
      pxrInternal__aapl__pxrReserved__::TfStringToLowerAscii((unsigned __int8 *)__p, (uint64_t)v15);
      if (SBYTE7(v13) < 0) {
        operator delete(__p[0]);
      }
      if (sub_2169CAFD0(**(void **)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8), v15) != *(void *)(*(void *)(a1 + 8) + 8))
      {
        long long v13 = 0u;
        long long v14 = 0u;
        *(_OWORD *)long long __p = 0u;
        pxrInternal__aapl__pxrReserved__::TfStringCatPaths(a2, v4, &__str);
        if (SBYTE7(v13) < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)long long __p = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *(void *)&long long v13 = *((void *)&__str.__r_.__value_.__l + 2);
        Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v8);
        pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
        std::string::operator=((std::string *)((char *)&v13 + 8), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        sub_216BA7B00(*(uint64_t **)(a1 + 16), (long long *)__p);
        if (SHIBYTE(v14) < 0) {
          operator delete(*((void **)&v13 + 1));
        }
        if (SBYTE7(v13) < 0) {
          operator delete(__p[0]);
        }
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
      v4 += 24;
    }
    while (v4 != v5);
  }
  return 1;
}

void sub_216BA7A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v27 - 49) < 0) {
    operator delete(*(void **)(v27 - 72));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216BA7AB4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75B688)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216BA7AF4()
{
  return &unk_26C75B688;
}

void **sub_216BA7B00(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  __n128 result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      sub_21677CB10();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    v19[4] = result;
    if (v14) {
      unint64_t v15 = (char *)sub_2168073F4((uint64_t)result, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    char v16 = &v15[48 * v11];
    v19[0] = v15;
    v19[1] = v16;
    void v19[3] = &v15[48 * v14];
    long long v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)char v16 = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    *((void *)v16 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    v19[2] = v16 + 48;
    sub_216BA7C6C(a1, v19);
    uint64_t v10 = a1[1];
    __n128 result = sub_2168303B0(v19);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 4sub_2168EBBB8(&a9, 0) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    uint64_t v10 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v10;
  return result;
}

void sub_216BA7C58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168303B0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BA7C6C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216BA7CE4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216BA7CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(void *)(a3 - 4sub_2168EBBB8(&a9, 0) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  sub_216BA7D9C((uint64_t)v13);
  return a6;
}

uint64_t sub_216BA7D9C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_21683035C((uint64_t *)a1);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrNode::NdrNode(uint64_t a1, uint64_t *a2, uint64_t *a3, long long *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, long long *a8, long long *a9, uint64_t a10, uint64_t a11, long long *a12)
{
  *(void *)a1 = &unk_26C75B6A8;
  uint64_t v17 = *a2;
  *(void *)(a1 + 16) = *a2;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *a3;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a3 + 2);
  *(void *)(a1 + 24) = v18;
  if (*((char *)a4 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 40), *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v19 = *a4;
    *(void *)(a1 + 56) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = v19;
  }
  uint64_t v20 = *a5;
  *(void *)(a1 + 64) = *a5;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 64) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v21 = *a6;
  *(void *)(a1 + 72) = *a6;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 72) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = *a7;
  *(void *)(a1 + 8sub_2168EBBB8(&a9, 0) = *a7;
  if ((v22 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 80) &= 0xFFFFFFFFFFFFFFF8;
  }
  if (*((char *)a8 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 88), *(void **)a8, *((void *)a8 + 1));
  }
  else
  {
    long long v23 = *a8;
    *(void *)(a1 + 104) = *((void *)a8 + 2);
    *(_OWORD *)(a1 + 88) = v23;
  }
  if (*((char *)a9 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 112), *(void **)a9, *((void *)a9 + 1));
  }
  else
  {
    long long v24 = *a9;
    *(void *)(a1 + 128) = *((void *)a9 + 2);
    *(_OWORD *)(a1 + 112) = v24;
  }
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)a10;
  *(void *)(a1 + 152) = *(void *)(a10 + 16);
  *(void *)a10 = 0;
  *(void *)(a10 + 8) = 0;
  *(void *)(a10 + 16) = 0;
  sub_216BA71F4(a1 + 160, a11);
  if (*((char *)a12 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 200), *(void **)a12, *((void *)a12 + 1));
  }
  else
  {
    long long v25 = *a12;
    *(void *)(a1 + 216) = *((void *)a12 + 2);
    *(_OWORD *)(a1 + 20sub_2168EBBB8(&a9, 0) = v25;
  }
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 24sub_2168EBBB8(&a9, 0) = 0u;
  *(_DWORD *)(a1 + 256) = 1065353216;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 28sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(void *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 32sub_2168EBBB8(&a9, 0) = 1065353216;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  uint64_t v26 = *(void *)(a1 + 136);
  uint64_t v27 = *(void *)(a1 + 144);
  *(unsigned char *)(a1 + 8) = v26 != v27;
  uint64_t v28 = v27 - v26;
  if (v28)
  {
    uint64_t v29 = 0;
    unint64_t v30 = v28 >> 3;
    if (v30 <= 1) {
      uint64_t v31 = 1;
    }
    else {
      uint64_t v31 = v30;
    }
    do
    {
      uint64_t v32 = *(void *)(*(void *)(a1 + 136) + 8 * v29);
      std::string v33 = (uint64_t *)(v32 + 8);
      if (*(unsigned char *)(v32 + 40))
      {
        uint64_t v34 = *(uint64_t **)(a1 + 336);
        if ((unint64_t)v34 >= *(void *)(a1 + 344))
        {
          uint64_t v36 = sub_216973984((char **)(a1 + 328), (uint64_t *)(v32 + 8));
        }
        else
        {
          uint64_t v35 = *v33;
          uint64_t *v34 = *v33;
          if ((v35 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *v34 &= 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v36 = (char *)(v34 + 1);
        }
        *(void *)(a1 + 336) = v36;
        uint64_t v40 = *v33;
        uint64_t v43 = v40;
        if ((v40 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v43 &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v44 = v32;
        sub_2168CD6A4(a1 + 288, &v43, &v43);
      }
      else
      {
        uint64_t v37 = *(uint64_t **)(a1 + 272);
        if ((unint64_t)v37 >= *(void *)(a1 + 280))
        {
          uint64_t v39 = sub_216973984((char **)(a1 + 264), (uint64_t *)(v32 + 8));
        }
        else
        {
          uint64_t v38 = *v33;
          *uint64_t v37 = *v33;
          if ((v38 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *v37 &= 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v39 = (char *)(v37 + 1);
        }
        *(void *)(a1 + 272) = v39;
        uint64_t v41 = *v33;
        uint64_t v43 = v41;
        if ((v41 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v43 &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v44 = v32;
        sub_2168CD6A4(a1 + 224, &v43, &v43);
      }
      if ((v43 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      ++v29;
    }
    while (v31 != v29);
  }
  return a1;
}

{
  return pxrInternal__aapl__pxrReserved__::NdrNode::NdrNode(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void sub_216BA81C0(_Unwind_Exception *a1, uint64_t a2, void **a3, void **a4, void **a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216BA5BB8(a6);
  sub_216BA861C((void ***)va);
  if (*(char *)(v7 + 135) < 0) {
    operator delete(*a3);
  }
  if (*(char *)(v7 + 111) < 0) {
    operator delete(*a4);
  }
  uint64_t v9 = *(void *)(v7 + 80);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *(void *)(v7 + 72);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *(void *)(v7 + 64);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(char *)(v7 + 63) < 0) {
    operator delete(*a5);
  }
  uint64_t v12 = *(void *)(v7 + 16);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrNode::~NdrNode(void **this)
{
  *this = &unk_26C75B6A8;
  uint64_t v6 = this + 41;
  sub_216889A04(&v6);
  sub_2168C08A0((uint64_t)(this + 36));
  uint64_t v6 = this + 33;
  sub_216889A04(&v6);
  sub_2168C08A0((uint64_t)(this + 28));
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  sub_216BA5BB8((uint64_t)(this + 20));
  uint64_t v6 = this + 17;
  sub_216BA861C(&v6);
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  unint64_t v2 = (unint64_t)this[10];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  unint64_t v3 = (unint64_t)this[9];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  unint64_t v4 = (unint64_t)this[8];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  unint64_t v5 = (unint64_t)this[2];
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::NdrNode::~NdrNode(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::NdrNode::GetInfoString(pxrInternal__aapl__pxrReserved__::NdrNode *this)
{
  if ((*((void *)this + 2) & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*((void *)this + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  if (*((char *)EmptyString + 23) < 0) {
    EmptyString = (uint64_t *)*EmptyString;
  }
  unint64_t v3 = *((void *)this + 9) & 0xFFFFFFFFFFFFFFF8;
  if (v3)
  {
    unint64_t v4 = (const char *)(v3 + 16);
    if (*(char *)(v3 + 39) < 0) {
      unint64_t v4 = *(const char **)v4;
    }
  }
  else
  {
    unint64_t v4 = "";
  }
  pxrInternal__aapl__pxrReserved__::NdrVersion::GetString((pxrInternal__aapl__pxrReserved__::NdrNode *)((char *)this + 24), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  unint64_t v8 = *((void *)this + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v8)
  {
    uint64_t v9 = (const char *)(v8 + 16);
    if (*(char *)(v8 + 39) < 0) {
      uint64_t v9 = *(const char **)v9;
    }
  }
  else
  {
    uint64_t v9 = "";
  }
  uint64_t v10 = (void *)((char *)this + 88);
  if (*((char *)this + 111) < 0) {
    uint64_t v10 = (void *)*v10;
  }
  uint64_t v11 = (void *)((char *)this + 112);
  if (*((char *)this + 135) < 0) {
    uint64_t v11 = (void *)*v11;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s (context: '%s', version: '%s', family: '%s'); definition URI: '%s'; implementation URI: '%s'",
    v5,
    v6,
    EmptyString,
    v4,
    p_p,
    v9,
    v10,
    v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216BA8598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrNode::GetInputNames(pxrInternal__aapl__pxrReserved__::NdrNode *this)
{
  return (uint64_t)this + 264;
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrNode::GetOutputNames(pxrInternal__aapl__pxrReserved__::NdrNode *this)
{
  return (uint64_t)this + 328;
}

void *pxrInternal__aapl__pxrReserved__::NdrNode::GetInput(pxrInternal__aapl__pxrReserved__::NdrNode *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t result = sub_2168CB120((void *)this + 28, a2);
  if (result) {
    return (void *)result[3];
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::NdrNode::GetOutput(pxrInternal__aapl__pxrReserved__::NdrNode *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t result = sub_2168CB120((void *)this + 36, a2);
  if (result) {
    return (void *)result[3];
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrNode::GetMetadata(pxrInternal__aapl__pxrReserved__::NdrNode *this)
{
  return (uint64_t)this + 160;
}

uint64_t sub_216BA8614(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_216BA861C(void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    sub_216BA8670(v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_216BA8670(void *result)
{
  uint64_t v1 = result;
  unint64_t v2 = (void *)*result;
  unint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    unint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    void *v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::NdrParserPlugin::NdrParserPlugin(void *this)
{
  *this = &unk_26C75B6E8;
  this[1] = 0;
  return this;
}

void pxrInternal__aapl__pxrReserved__::NdrParserPlugin::~NdrParserPlugin(pxrInternal__aapl__pxrReserved__::NdrParserPlugin *this, const void *a2)
{
}

void pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x160uLL);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v11, "unknown discovery type");
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v10, "unknown source type");
  memset(v9, 0, sizeof(v9));
  memset(v7, 0, sizeof(v7));
  int v8 = 1065353216;
  long long __p = 0uLL;
  uint64_t v6 = 0;
  pxrInternal__aapl__pxrReserved__::NdrNode::NdrNode((uint64_t)v4, (uint64_t *)a1, (uint64_t *)(a1 + 8), (long long *)(a1 + 24), (uint64_t *)(a1 + 48), &v11, &v10, (long long *)(a1 + 96), (long long *)(a1 + 96), (uint64_t)v9, (uint64_t)v7, &__p);
  *a2 = v4;
  if (SHIBYTE(v6) < 0) {
    operator delete((void *)__p);
  }
  sub_216BA5BB8((uint64_t)v7);
  *(void *)&v7[0] = v9;
  sub_216BA861C((void ***)v7);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216BA8848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_216BA5BB8((uint64_t)&a20);
  a20 = v21 - 72;
  sub_216BA861C((void ***)&a20);
  uint64_t v23 = *(void *)(v21 - 48);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *(void *)(v21 - 40);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  operator delete(v20);
  _Unwind_Resume(a1);
}

uint64_t *sub_216BA88C4()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216BA8984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrProperty::NdrProperty(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v13 = *a2;
  *(void *)a1 = &unk_26C75B748;
  *(void *)(a1 + 8) = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *a3;
  *(void *)(a1 + 16) = *a3;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2168EE4C4((void *)(a1 + 24), a4);
  *(unsigned char *)(a1 + 4sub_2168EBBB8(&a9, 0) = a5;
  *(void *)(a1 + 48) = a6;
  *(unsigned char *)(a1 + 56) = a7;
  *(unsigned char *)(a1 + 57) = 1;
  sub_216BA71F4(a1 + 64, a8);
  return a1;
}

void sub_216BA8AAC(_Unwind_Exception *a1)
{
  sub_2168EE084(v2);
  uint64_t v4 = *(void *)(v1 + 16);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(void *)(v1 + 8);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrProperty::~NdrProperty(pxrInternal__aapl__pxrReserved__::NdrProperty *this)
{
  *(void *)this = &unk_26C75B748;
  sub_216BA5BB8((uint64_t)this + 64);
  sub_2168EE084((uint64_t)this + 24);
  uint64_t v2 = *((void *)this + 2);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 1);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::NdrProperty::~NdrProperty(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::NdrProperty::GetInfoString(pxrInternal__aapl__pxrReserved__::NdrProperty *this, const char *a2, char *a3)
{
  unint64_t v3 = *((void *)this + 1) & 0xFFFFFFFFFFFFFFF8;
  if (v3)
  {
    uint64_t v4 = (const char *)(v3 + 16);
    if (*(char *)(v3 + 39) < 0) {
      uint64_t v4 = *(const char **)v4;
    }
  }
  else
  {
    uint64_t v4 = "";
  }
  unint64_t v5 = *((void *)this + 2) & 0xFFFFFFFFFFFFFFF8;
  if (v5)
  {
    uint64_t v6 = (const char *)(v5 + 16);
    if (*(char *)(v5 + 39) < 0) {
      uint64_t v6 = *(const char **)v6;
    }
  }
  else
  {
    uint64_t v6 = "";
  }
  if (*((unsigned char *)this + 40)) {
    uint64_t v7 = "output";
  }
  else {
    uint64_t v7 = "input";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s (type: '%s'); %s",
    a2,
    a3,
    v4,
    v6,
    v7);
}

BOOL pxrInternal__aapl__pxrReserved__::NdrProperty::IsConnectable(pxrInternal__aapl__pxrReserved__::NdrProperty *this)
{
  return *((unsigned char *)this + 57) && *((unsigned char *)this + 40) == 0;
}

BOOL pxrInternal__aapl__pxrReserved__::NdrProperty::CanConnectTo(pxrInternal__aapl__pxrReserved__::NdrProperty *this, const pxrInternal__aapl__pxrReserved__::NdrProperty *a2)
{
  return *((unsigned __int8 *)this + 40) != *((unsigned __int8 *)a2 + 40)
      && (*((void *)this + 2) & 0xFFFFFFFFFFFFFFF8) == (*((void *)a2 + 2) & 0xFFFFFFFFFFFFFFF8);
}

pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *pxrInternal__aapl__pxrReserved__::NdrProperty::GetTypeAsSdfType@<X0>(pxrInternal__aapl__pxrReserved__::NdrProperty *this@<X0>, void *a2@<X8>)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!result) {
    uint64_t result = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  uint64_t v5 = *((void *)this + 2);
  *a2 = *((void *)result + 11);
  a2[1] = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      a2[1] = v6;
    }
  }
  return result;
}

__guard pxrInternal__aapl__pxrReserved__::NdrProperty::GetDefaultValueAsSdfType(pxrInternal__aapl__pxrReserved__::NdrProperty *this)
{
  uint64_t v1 = &qword_267B91000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91210, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91210))
  {
    qword_267B91220 = 0;
    __cxa_atexit((void (*)(void *))sub_216B64E50, &unk_267B91218, &dword_216758000);
    qword_267B91208 = (uint64_t)&unk_267B91218;
    uint64_t v1 = &qword_267B91000;
    __cxa_guard_release(&qword_267B91210);
  }
  return v1[65];
}

uint64_t sub_216BA8D8C(uint64_t a1)
{
  return a1 + 64;
}

void sub_216BA8D94()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_SKIP_DISCOVERY_PLUGIN_DISCOVERY)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>();
  }
}

void sub_216BA8DDC()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_SKIP_PARSER_PLUGIN_DISCOVERY)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>();
  }
}

void sub_216BA8E24()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_DISABLE_PLUGINS)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry_ValidateProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(void))(**(void **)a2 + 56))();
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 48))(&v28);
  uint64_t v27 = v28;
  if (!*((void *)v6 + 1)
    || (uint64_t v9 = pxrInternal__aapl__pxrReserved__::VtValue::GetType(v6, v7, v8),
        EmptyString = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v27),
        *EmptyString == v9))
  {
    uint64_t result = 1;
  }
  else if (a3)
  {
    if ((*(void *)(*(void *)a1 + 16) & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      unint64_t v11 = (*(void *)(*(void *)a1 + 16) & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
      unint64_t v11 = (unint64_t)EmptyString;
    }
    if (*(char *)(v11 + 23) < 0) {
      unint64_t v11 = *(void *)v11;
    }
    if ((*(void *)(*(void *)a1 + 80) & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      unint64_t v13 = (*(void *)(*(void *)a1 + 80) & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
      unint64_t v13 = (unint64_t)EmptyString;
    }
    if (*(char *)(v13 + 23) < 0) {
      unint64_t v13 = *(void *)v13;
    }
    if ((*(void *)(*(void *)a2 + 8) & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v14 = (uint64_t *)((*(void *)(*(void *)a2 + 8) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      uint64_t v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
    }
    if (*((char *)v14 + 23) < 0) {
      uint64_t v14 = (uint64_t *)*v14;
    }
    uint64_t Type = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v27);
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(Type);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v19 = TypeName;
    }
    else {
      uint64_t v19 = *(void *)TypeName;
    }
    uint64_t v24 = pxrInternal__aapl__pxrReserved__::VtValue::GetType(v6, v17, v18);
    uint64_t v20 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v24);
    if (*(char *)(v20 + 23) >= 0) {
      uint64_t v23 = v20;
    }
    else {
      uint64_t v23 = *(void *)v20;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Default value type does not match specified type for property.\nNode identifier: %s\nSource type: %s\nProperty name: %s.\nType from SdfType: %s.\nType from default value: %s.\n", v21, v22, v11, v13, v14, v19, v23);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    uint64_t result = 0;
    *(_OWORD *)a3 = v25;
    *(void *)(a3 + 16) = v26;
  }
  else
  {
    uint64_t result = 0;
  }
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216BA9064(_Unwind_Exception *a1)
{
  uint64_t v2 = *(void *)(v1 - 56);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::NdrRegistry *pxrInternal__aapl__pxrReserved__::NdrRegistry::NdrRegistry(pxrInternal__aapl__pxrReserved__::NdrRegistry *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 850045863;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 850045863;
  uint64_t v2 = (uint64_t **)((char *)this + 136);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 1sub_2168EBBB8(&a9, 0) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *(_OWORD *)((char *)this + 20sub_2168EBBB8(&a9, 0) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((void *)this + 31) = 0;
  *((_DWORD *)this + 64) = 1065353216;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 28sub_2168EBBB8(&a9, 0) = 0u;
  *((_DWORD *)this + 74) = 1065353216;
  *((void *)this + 39) = 0;
  *((void *)this + 4sub_2168EBBB8(&a9, 0) = 0;
  *((void *)this + 38) = (char *)this + 312;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_DWORD *)this + 9sub_2168EBBB8(&a9, 0) = 1065353216;
  pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindAndInstantiateParserPlugins(this);
  pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindAndInstantiateDiscoveryPlugins(this);
  pxrInternal__aapl__pxrReserved__::NdrRegistry::_RunDiscoveryPlugins((uint64_t)this, v2);
  return this;
}

void sub_216BA9174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10)
{
  sub_216BAD7EC(v15);
  sub_2168CB05C(v14, *(void **)(v10 + 312));
  sub_216850298(v13);
  sub_216BAD74C(v10 + 224);
  sub_216BAD68C((void ***)&a10);
  sub_2168C08A0(v10 + 160);
  sub_216BAD608((void ***)&a10);
  std::mutex::~mutex(v12);
  std::mutex::~mutex(v11);
  sub_216859A88((uint64_t *)v10, v16);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindAndInstantiateParserPlugins(pxrInternal__aapl__pxrReserved__::NdrRegistry *this)
{
  uint64_t v2 = (_DWORD *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_SKIP_PARSER_PLUGIN_DISCOVERY);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>();
  }
  if (!*v2)
  {
    v7[0] = 0;
    v7[1] = 0;
    uint64_t v6 = (uint64_t *)v7;
    pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(this);
    pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllDerivedTypes(*v5, &v6);
    pxrInternal__aapl__pxrReserved__::NdrRegistry::_InstantiateParserPlugins((uint64_t *)this, (uint64_t)&v6);
    sub_2167FB780((uint64_t)&v6, v7[0]);
  }
}

void sub_216BA9284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindAndInstantiateDiscoveryPlugins(pxrInternal__aapl__pxrReserved__::NdrRegistry *this)
{
  uint64_t v2 = (_DWORD *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_SKIP_DISCOVERY_PLUGIN_DISCOVERY);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>();
  }
  if (!*v2)
  {
    v39[0] = 0;
    v39[1] = 0;
    uint64_t v38 = (uint64_t *)v39;
    pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(this);
    pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllDerivedTypes(*v5, &v38);
    unint64_t v6 = atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_DISABLE_PLUGINS);
    if (!v6) {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>();
    }
    if (*(char *)(v6 + 23) < 0)
    {
      sub_216778F24(__p, *(void **)v6, *(void *)(v6 + 8));
    }
    else
    {
      long long v7 = *(_OWORD *)v6;
      uint64_t v37 = *(void *)(v6 + 16);
      *(_OWORD *)long long __p = v7;
    }
    pxrInternal__aapl__pxrReserved__::TfStringTokenizeToSet((unsigned __int8 *)__p, ",", (uint64_t)v34);
    uint64_t v8 = v38;
    if (v38 != (uint64_t *)v39)
    {
      uint64_t v9 = (void *)((char *)this + 136);
      do
      {
        uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 4));
        if (&v35 == (char **)sub_21678C2D8((uint64_t)v34, (const void **)TypeName))
        {
          if (sub_216BA6B60(0))
          {
            uint64_t v16 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 4));
            if (*(char *)(v16 + 23) >= 0) {
              uint64_t v19 = v16;
            }
            else {
              uint64_t v19 = *(void *)v16;
            }
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Found NdrDiscoveryPlugin '%s'\n", v17, v18, v19);
          }
          uint64_t v20 = sub_216BA9D18((pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 4), v14, v15);
          if (v20
            || (uint64_t v40 = "ndr/registry.cpp",
                uint64_t v41 = "_FindAndInstantiateDiscoveryPlugins",
                uint64_t v42 = 928,
                uint64_t v43 = "void pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindAndInstantiateDiscoveryPlugins()",
                LOBYTE(v44) = 0,
                (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v40, "pluginFactory", 0) & 1) != 0))
          {
            (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **__return_ptr, void *))(*(void *)v20 + 16))(&v33, v20);
            uint64_t v22 = (void *)*((void *)this + 18);
            unint64_t v21 = *((void *)this + 19);
            if ((unint64_t)v22 >= v21)
            {
              uint64_t v24 = ((uint64_t)v22 - *v9) >> 3;
              if ((unint64_t)(v24 + 1) >> 61) {
                sub_21677CB10();
              }
              uint64_t v25 = v21 - *v9;
              uint64_t v26 = v25 >> 2;
              if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
                uint64_t v26 = v24 + 1;
              }
              if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v27 = v26;
              }
              uint64_t v44 = (char *)this + 152;
              if (v27) {
                uint64_t v28 = (char *)sub_21677CB28((uint64_t)this + 152, v27);
              }
              else {
                uint64_t v28 = 0;
              }
              uint64_t v29 = &v28[8 * v24];
              uint64_t v40 = v28;
              uint64_t v41 = v29;
              uint64_t v43 = &v28[8 * v27];
              *(void *)uint64_t v29 = v33;
              std::string v33 = 0;
              uint64_t v42 = (uint64_t)(v29 + 8);
              sub_216BADDF0((uint64_t *)this + 17, &v40);
              uint64_t v23 = (void *)*((void *)this + 18);
              sub_216BADD70((uint64_t)&v40);
            }
            else
            {
              *uint64_t v22 = v33;
              uint64_t v23 = v22 + 1;
              std::string v33 = 0;
              *((void *)this + 18) = v23;
            }
            *((void *)this + 18) = v23;
            sub_216BADDC0(&v33);
          }
        }
        else if (sub_216BA6B60(0))
        {
          if (*(char *)(TypeName + 23) >= 0) {
            uint64_t v13 = (const void *)TypeName;
          }
          else {
            uint64_t v13 = *(const void **)TypeName;
          }
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[PXR_NDR_DISABLE_PLUGINS] Disabled NdrDiscoveryPlugin '%s'\n", v11, v12, v13);
        }
        unint64_t v30 = (uint64_t *)v8[1];
        if (v30)
        {
          do
          {
            uint64_t v31 = v30;
            unint64_t v30 = (uint64_t *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            uint64_t v31 = (uint64_t *)v8[2];
            BOOL v32 = *v31 == (void)v8;
            uint64_t v8 = v31;
          }
          while (!v32);
        }
        uint64_t v8 = v31;
      }
      while (v31 != (uint64_t *)v39);
    }
    sub_21678A498((uint64_t)v34, v35);
    if (SHIBYTE(v37) < 0) {
      operator delete(__p[0]);
    }
    sub_2167FB780((uint64_t)&v38, v39[0]);
  }
}

void sub_216BA95F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,void *a26,uint64_t a27,char a28)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_2167FB780((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::_RunDiscoveryPlugins(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    do
    {
      uint64_t v7 = sub_216BAB804(v5);
      int v12 = 1;
      v13[0] = 0;
      v13[1] = a1;
      unint64_t v11 = (void **)&unk_26C75B978;
      (*(void (**)(void *__return_ptr))(*(void *)v7 + 16))(v14);
      sub_216859A88(v13, v8);
      pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)&v11);
      uint64_t v9 = (uint64_t *)v14[0];
      uint64_t v10 = (uint64_t *)v14[1];
      while (v9 != v10)
      {
        pxrInternal__aapl__pxrReserved__::NdrRegistry::_AddDiscoveryResultNoLock(a1, v9);
        v9 += 27;
      }
      unint64_t v11 = (void **)v14;
      sub_216BA5A40(&v11);
      ++v5;
    }
    while (v5 != v6);
  }
  std::mutex::unlock(v4);
}

void sub_216BA9798(_Unwind_Exception *a1, const void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216859A88(v4, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)va);
  std::mutex::unlock(v3);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::~NdrRegistry(pxrInternal__aapl__pxrReserved__::NdrRegistry *this)
{
  sub_216BAD7EC((uint64_t)this + 328);
  sub_2168CB05C((uint64_t)this + 304, *((void **)this + 39));
  sub_216850298((uint64_t)this + 264);
  sub_216BAD74C((uint64_t)this + 224);
  unint64_t v3 = (void **)((char *)this + 200);
  sub_216BAD68C(&v3);
  sub_2168C08A0((uint64_t)this + 160);
  unint64_t v3 = (void **)((char *)this + 136);
  sub_216BAD608(&v3);
  std::mutex::~mutex((std::mutex *)((char *)this + 72));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  sub_216859A88((uint64_t *)this, v2);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::SetExtraDiscoveryPlugins(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  if (*(void *)(a1 + 352))
  {
    v9[0] = "ndr/registry.cpp";
    v9[1] = "SetExtraDiscoveryPlugins";
    v9[2] = 308;
    void v9[3] = "void pxrInternal__aapl__pxrReserved__::NdrRegistry::SetExtraDiscoveryPlugins(DiscoveryPluginRefPtrVec)";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"SetExtraDiscoveryPlugins() cannot be called after nodes have been parsed; ignoring.");
    std::mutex::unlock(v4);
  }
  else
  {
    std::mutex::unlock(v4);
    pxrInternal__aapl__pxrReserved__::NdrRegistry::_RunDiscoveryPlugins(a1, (uint64_t **)a2);
    uint64_t v5 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(a1 + 144);
    unint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(a2 + 8);
    uint64_t v8 = ((uint64_t)v7 - *(void *)a2) >> 3;
    sub_216BAD8EC((uint64_t *)(a1 + 136), v5, (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v6, v7, v8);
  }
}

void sub_216BA9948(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::SetExtraDiscoveryPlugins(uint64_t a1, const std::type_info *a2, char *a3)
{
  v40[0] = 0;
  v40[1] = 0;
  uint64_t v39 = (uint64_t *)v40;
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfType *)a2->__vftable;
  type_name = (pxrInternal__aapl__pxrReserved__::TfType *)a2->__type_name;
  if ((pxrInternal__aapl__pxrReserved__::TfType *)a2->__vftable == type_name)
  {
LABEL_13:
    v38[0] = 0;
    long long v18 = 0uLL;
    long long v37 = 0u;
    uint64_t v19 = v39;
    if (v39 == (uint64_t *)v40)
    {
      uint64_t v31 = 0;
    }
    else
    {
      do
      {
        uint64_t v20 = sub_216BA9D18((pxrInternal__aapl__pxrReserved__::TfType *)(v19 + 4), v6, v7);
        if (v20
          || (uint64_t v41 = (void **)"ndr/registry.cpp",
              uint64_t v42 = "SetExtraDiscoveryPlugins",
              uint64_t v43 = 342,
              uint64_t v44 = "void pxrInternal__aapl__pxrReserved__::NdrRegistry::SetExtraDiscoveryPlugins(const std::vector<TfType> &)",
              LOBYTE(v45) = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v41, "pluginFactory", 0) & 1) != 0))
        {
          (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **__return_ptr, void *))(*(void *)v20 + 16))(v46, v20);
          uint64_t v21 = *((void *)&v37 + 1);
          if (*((void *)&v37 + 1) >= v38[0])
          {
            uint64_t v23 = (uint64_t)(*((void *)&v37 + 1) - v37) >> 3;
            if ((unint64_t)(v23 + 1) >> 61) {
              sub_21677CB10();
            }
            unint64_t v24 = (uint64_t)(v38[0] - v37) >> 2;
            if (v24 <= v23 + 1) {
              unint64_t v24 = v23 + 1;
            }
            if (v38[0] - (void)v37 >= 0x7FFFFFFFFFFFFFF8uLL) {
              unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v25 = v24;
            }
            char v45 = v38;
            if (v25) {
              uint64_t v26 = (void **)sub_21677CB28((uint64_t)v38, v25);
            }
            else {
              uint64_t v26 = 0;
            }
            unint64_t v27 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v26[v23];
            uint64_t v41 = v26;
            uint64_t v42 = (const char *)v27;
            uint64_t v44 = (const char *)&v26[v25];
            unsigned char *v27 = v46[0];
            v46[0] = 0;
            uint64_t v43 = (uint64_t)(v27 + 1);
            sub_216BADDF0((uint64_t *)&v37, &v41);
            uint64_t v22 = *((void *)&v37 + 1);
            sub_216BADD70((uint64_t)&v41);
          }
          else
          {
            **((void **)&v37 + 1) = v46[0];
            uint64_t v22 = v21 + 8;
            v46[0] = 0;
          }
          *((void *)&v37 + 1) = v22;
          sub_216BADDC0(v46);
        }
        uint64_t v28 = (uint64_t *)v19[1];
        if (v28)
        {
          do
          {
            uint64_t v29 = v28;
            uint64_t v28 = (uint64_t *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            uint64_t v29 = (uint64_t *)v19[2];
            BOOL v30 = *v29 == (void)v19;
            uint64_t v19 = v29;
          }
          while (!v30);
        }
        uint64_t v19 = v29;
      }
      while (v29 != (uint64_t *)v40);
      long long v18 = v37;
      uint64_t v31 = v38[0];
    }
    long long v35 = v18;
    uint64_t v36 = v31;
    v38[0] = 0;
    long long v37 = 0uLL;
    pxrInternal__aapl__pxrReserved__::NdrRegistry::SetExtraDiscoveryPlugins(a1, (uint64_t)&v35);
    uint64_t v41 = (void **)&v35;
    sub_216BAD608(&v41);
    uint64_t v41 = (void **)&v37;
    sub_216BAD608(&v41);
  }
  else
  {
    char v10 = (pxrInternal__aapl__pxrReserved__::TfType *)v5;
    while (1)
    {
      if (!pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)v8, *(void *)v10, v7))
      {
        uint64_t v41 = (void **)"ndr/registry.cpp";
        uint64_t v42 = "SetExtraDiscoveryPlugins";
        uint64_t v43 = 330;
        uint64_t v44 = "void pxrInternal__aapl__pxrReserved__::NdrRegistry::SetExtraDiscoveryPlugins(const std::vector<TfType> &)";
        LOBYTE(v45) = 0;
        uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
        int v33 = *(char *)(TypeName + 23);
        uint64_t v32 = *(void *)TypeName;
        uint64_t v34 = TypeName;
        uint64_t v12 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v10);
        uint64_t v15 = v34;
        if (v33 < 0) {
          uint64_t v15 = v32;
        }
        uint64_t v16 = *(char *)(v12 + 23) >= 0 ? v12 : *(void *)v12;
        uint64_t v17 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Type %s is not a %s", v13, v14, v15, v16);
        if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v41, "type.IsA(discoveryPluginType)", v17) & 1) == 0)break; {
      }
        }
      sub_216856018(&v39, (unint64_t *)v8, (uint64_t *)v8);
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v8 + 8);
      if (v8 == type_name) {
        goto LABEL_13;
      }
    }
  }
  sub_2167FB780((uint64_t)&v39, v40[0]);
}

void sub_216BA9CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24)
{
  *(void *)(v24 - 96) = &a19;
  sub_216BAD608((void ***)(v24 - 96));
  sub_2167FB780((uint64_t)&a23, a24);
  _Unwind_Resume(a1);
}

void *sub_216BA9D18(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2, char *a3)
{
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(a1, a2, a3);
  if (result)
  {
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::AddDiscoveryResult(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::NdrRegistry::_AddDiscoveryResultNoLock(a1, a2);

  std::mutex::unlock(v4);
}

void sub_216BA9DE0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::NdrRegistry::_AddDiscoveryResultNoLock(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = sub_216BAF64C((void *)(a1 + 224), a2, (uint64_t)a2);
  uint64_t v5 = v3 + 3;
  sub_216BAF8A4((void *)(a1 + 264), (uint64_t)(v3 + 6), &v5);
  return sub_216AE2E60(a1 + 304, v3 + 11, v3 + 11);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::AddDiscoveryResult(uint64_t a1, uint64_t *a2)
{
  sub_216BAC8B8((uint64_t)v4, a2);
  pxrInternal__aapl__pxrReserved__::NdrRegistry::AddDiscoveryResult(a1, v4);
  return sub_216BA5AC4((uint64_t)v4);
}

void sub_216BA9E98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BA5AC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::SetExtraParserPlugins(uint64_t a1, pxrInternal__aapl__pxrReserved__::TfType **a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  if (*(void *)(a1 + 352))
  {
    uint64_t v24 = "ndr/registry.cpp";
    unint64_t v25 = "SetExtraParserPlugins";
    uint64_t v26 = 376;
    unint64_t v27 = "void pxrInternal__aapl__pxrReserved__::NdrRegistry::SetExtraParserPlugins(const std::vector<TfType> &)";
    char v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"SetExtraParserPlugins() cannot be called after nodes have been parsed; ignoring.");
    std::mutex::unlock(v4);
  }
  else
  {
    std::mutex::unlock(v4);
    v23[0] = 0;
    v23[1] = 0;
    uint64_t v22 = (uint64_t *)v23;
    uint64_t v9 = *a2;
    char v10 = a2[1];
    if (*a2 == v10)
    {
LABEL_15:
      pxrInternal__aapl__pxrReserved__::NdrRegistry::_InstantiateParserPlugins((uint64_t *)a1, (uint64_t)&v22);
    }
    else
    {
      unint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfType *)v7;
      while (1)
      {
        if (!pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)v9, *(void *)v11, v8))
        {
          uint64_t v24 = "ndr/registry.cpp";
          unint64_t v25 = "SetExtraParserPlugins";
          uint64_t v26 = 388;
          unint64_t v27 = "void pxrInternal__aapl__pxrReserved__::NdrRegistry::SetExtraParserPlugins(const std::vector<TfType> &)";
          char v28 = 0;
          uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
          int v20 = *(char *)(TypeName + 23);
          uint64_t v19 = *(void *)TypeName;
          uint64_t v21 = TypeName;
          uint64_t v13 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v11);
          uint64_t v16 = v21;
          if (v20 < 0) {
            uint64_t v16 = v19;
          }
          uint64_t v17 = *(char *)(v13 + 23) >= 0 ? v13 : *(void *)v13;
          long long v18 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Type %s is not a %s", v14, v15, v16, v17);
          if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v24, "type.IsA(parserPluginType)", v18) & 1) == 0)break; {
        }
          }
        sub_216856018(&v22, (unint64_t *)v9, (uint64_t *)v9);
        uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v9 + 8);
        if (v9 == v10) {
          goto LABEL_15;
        }
      }
    }
    sub_2167FB780((uint64_t)&v22, v23[0]);
  }
}

void sub_216BAA078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16)
{
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::_InstantiateParserPlugins(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_NDR_DISABLE_PLUGINS);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>();
  }
  if (*(char *)(v4 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)v4, *(void *)(v4 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    uint64_t v56 = *(void *)(v4 + 16);
    *(_OWORD *)long long __p = v5;
  }
  pxrInternal__aapl__pxrReserved__::TfStringTokenizeToSet((unsigned __int8 *)__p, ",", (uint64_t)v53);
  sub_216BAE044(&v51, *(void **)a2, (void *)(a2 + 8));
  unint64_t v6 = 126 - 2 * __clz((v52 - v51) >> 3);
  if (v52 == v51) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  sub_216BAE13C((uint64_t)v51, v52, v7, 1);
  uint64_t v8 = v51;
  std::string v49 = v52;
  if (v51 != v52)
  {
    uint64_t v48 = a1 + 25;
    do
    {
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
      if (&v54 == (char **)sub_21678C2D8((uint64_t)v53, (const void **)TypeName))
      {
        if (sub_216BA6B60(0))
        {
          uint64_t v15 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
          if (*(char *)(v15 + 23) >= 0) {
            uint64_t v18 = v15;
          }
          else {
            uint64_t v18 = *(void *)v15;
          }
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Found NdrParserPlugin '%s' for discovery types:\n", v16, v17, v18);
        }
        uint64_t v19 = sub_216BAC774(v8, v13, v14);
        if (v19
          || (unint64_t v57 = (unint64_t)"ndr/registry.cpp",
              unint64_t v58 = "_InstantiateParserPlugins",
              uint64_t v59 = 984,
              uint64_t v60 = "void pxrInternal__aapl__pxrReserved__::NdrRegistry::_InstantiateParserPlugins(const std::set<TfType> &)",
              LOBYTE(v61) = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v57, "pluginFactory", 0) & 1) != 0))
        {
          uint64_t v20 = (*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
          uint64_t v21 = (const char *)v20;
          uint64_t v22 = a1;
          uint64_t v24 = (uint64_t *)a1[26];
          unint64_t v23 = a1[27];
          if ((unint64_t)v24 >= v23)
          {
            uint64_t v26 = ((uint64_t)v24 - *v48) >> 3;
            if ((unint64_t)(v26 + 1) >> 61) {
              sub_21677CB10();
            }
            uint64_t v27 = v23 - *v48;
            uint64_t v28 = v27 >> 2;
            if (v27 >> 2 <= (unint64_t)(v26 + 1)) {
              uint64_t v28 = v26 + 1;
            }
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v28;
            }
            int v61 = a1 + 27;
            if (v29) {
              BOOL v30 = (char *)sub_21677CB28((uint64_t)(a1 + 27), v29);
            }
            else {
              BOOL v30 = 0;
            }
            uint64_t v31 = &v30[8 * v26];
            unint64_t v57 = (unint64_t)v30;
            unint64_t v58 = v31;
            uint64_t v60 = &v30[8 * v29];
            *(void *)uint64_t v31 = v21;
            uint64_t v59 = (uint64_t)(v31 + 8);
            sub_216BAF3F0(v48, &v57);
            uint64_t v22 = a1;
            unint64_t v25 = (void *)a1[26];
            sub_216BAF5A0((void **)&v57);
          }
          else
          {
            uint64_t *v24 = v20;
            unint64_t v25 = v24 + 1;
            a1[26] = (uint64_t)v25;
          }
          v22[26] = (uint64_t)v25;
          uint64_t v32 = (*(uint64_t (**)(const char *))(*(void *)v21 + 24))(v21);
          int v33 = *(unint64_t **)v32;
          uint64_t v34 = *(unint64_t **)(v32 + 8);
          while (v33 != v34)
          {
            if (sub_216BA6B60(0))
            {
              unint64_t v37 = *v33 & 0xFFFFFFFFFFFFFFF8;
              if (v37)
              {
                uint64_t v38 = (const char *)(v37 + 16);
                if (*(char *)(v37 + 39) < 0) {
                  uint64_t v38 = *(const char **)v38;
                }
              }
              else
              {
                uint64_t v38 = "";
              }
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"  - %s\n", v35, v36, v38);
            }
            unint64_t v57 = *v33;
            if ((v57 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v57 &= 0xFFFFFFFFFFFFFFF8;
            }
            unint64_t v58 = v21;
            uint64_t v39 = sub_2168CD6A4((uint64_t)(a1 + 20), &v57, (uint64_t *)&v57);
            if ((v57 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (!(_BYTE)v40)
            {
              uint64_t v50 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(*(pxrInternal__aapl__pxrReserved__::TfType **)(*(void *)v39[3] - 8), v40, v41);
              unint64_t v57 = (unint64_t)"ndr/registry.cpp";
              unint64_t v58 = "_InstantiateParserPlugins";
              uint64_t v59 = 1001;
              uint64_t v60 = "void pxrInternal__aapl__pxrReserved__::NdrRegistry::_InstantiateParserPlugins(const std::set<TfType> &)";
              LOBYTE(v61) = 0;
              uint64_t v42 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
              if (*(char *)(v42 + 23) >= 0) {
                uint64_t v43 = (const char *)v42;
              }
              else {
                uint64_t v43 = *(const char **)v42;
              }
              unint64_t v44 = *v33 & 0xFFFFFFFFFFFFFFF8;
              if (v44)
              {
                char v45 = (const char *)(v44 + 16);
                if (*(char *)(v44 + 39) < 0) {
                  char v45 = *(const char **)v45;
                }
              }
              else
              {
                char v45 = "";
              }
              uint64_t v46 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v50);
              if (*(char *)(v46 + 23) >= 0) {
                char v47 = (const char *)v46;
              }
              else {
                char v47 = *(const char **)v46;
              }
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v57, 1, (pxrInternal__aapl__pxrReserved__ *)"Plugin type %s claims discovery type '%s' but that's already claimed by type %s", v43, v45, v47);
            }
            ++v33;
          }
        }
      }
      else if (sub_216BA6B60(0))
      {
        if (*(char *)(TypeName + 23) >= 0) {
          uint64_t v12 = (const void *)TypeName;
        }
        else {
          uint64_t v12 = *(const void **)TypeName;
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[PXR_NDR_DISABLE_PLUGINS] Disabled NdrParserPlugin '%s'\n", v10, v11, v12);
      }
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v8 + 8);
    }
    while (v8 != v49);
    uint64_t v8 = v51;
  }
  if (v8)
  {
    long long v52 = v8;
    operator delete(v8);
  }
  sub_21678A498((uint64_t)v53, v54);
  if (SHIBYTE(v56) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216BAA568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,char *a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (__p) {
    operator delete(__p);
  }
  sub_21678A498((uint64_t)&a22, a23);
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeFromAsset(pxrInternal__aapl__pxrReserved__ *a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, uint64_t *a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5)
{
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension((uint64_t)Resolver);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v46);
  if (v42 < 0) {
    operator delete(__p);
  }
  unint64_t v11 = sub_2168CB1F4((void *)a1 + 20, &v46);
  if (v11)
  {
    long long __p = 0;
    char v41 = 0;
    sub_2169B3AE8((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&__p, a2, (uint64_t)a2 + 24);
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55 * (void)__p));
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    for (uint64_t i = *(void **)(a3 + 16); i; uint64_t i = (void *)*i)
    {
      if ((i[2] & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (uint64_t *)((i[2] & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
      }
      long long __p = 0;
      char v41 = 0;
      sub_216BACBBC((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&__p, (uint64_t *)&v37, (pxrInternal__aapl__pxrReserved__ *)EmptyString, (uint64_t)(i + 3));
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)bswap64(0x9E3779B97F4A7C55 * (void)__p);
      v37.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    }
    std::to_string(&__dst, (unint64_t)v12);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    unint64_t v18 = *a4 & 0xFFFFFFFFFFFFFFF8;
    if (v18)
    {
      uint64_t v19 = (const char *)(v18 + 16);
      if (*(char *)(v18 + 39) < 0) {
        uint64_t v19 = *(const char **)v19;
      }
    }
    else
    {
      uint64_t v19 = "";
    }
    unint64_t v25 = *(void *)a5 & 0xFFFFFFFFFFFFFFF8;
    if (v25)
    {
      uint64_t v26 = (const char *)(v25 + 16);
      if (*(char *)(v25 + 39) < 0) {
        uint64_t v26 = *(const char **)v26;
      }
    }
    else
    {
      uint64_t v26 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s<%s><%s>", v15, v16, p_dst, v19, v26);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v45);
    if (v42 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    uint64_t v27 = (uint64_t *)a5;
    if (!*(void *)a5) {
      uint64_t v27 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v11[3] + 32))(v11[3]);
    }
    sub_216B12870(&v43, &v45, v27);
    NodeByIdentifierAnduint64_t Type = pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeByIdentifierAndType(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v45, a5);
    if (!NodeByIdentifierAndType)
    {
      uint64_t v29 = *((unsigned __int8 *)a2 + 47);
      if ((v29 & 0x80u) != 0) {
        uint64_t v29 = *((void *)a2 + 4);
      }
      if (v29) {
        BOOL v30 = (uint64_t *)((char *)a2 + 24);
      }
      else {
        BOOL v30 = (uint64_t *)a2;
      }
      if (*((char *)v30 + 23) < 0) {
        sub_216778F24(&__dst, (void *)*v30, v30[1]);
      }
      else {
        std::string __dst = *(std::string *)v30;
      }
      int v39 = 0;
      uint64_t v38 = 0;
      pxrInternal__aapl__pxrReserved__::TfGetBaseName(&__dst, &v37);
      uint64_t v36 = 0;
      sub_216779094(v34, "");
      sub_216779094(v32, "");
      sub_216BA6EEC((uint64_t)&__p, &v45, &v38, (long long *)&v37, &v36, &v46, v27, (long long *)a2, (long long *)&__dst, (long long *)v34, a3, (long long *)v32, a4);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
      if (v35 < 0) {
        operator delete(v34[0]);
      }
      if ((v36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      NodeByIdentifierAnduint64_t Type = pxrInternal__aapl__pxrReserved__::NdrRegistry::_ParseNodeFromAssetOrSourceCode((uint64_t)a1, v11[3], (uint64_t *)&__p);
      sub_216BA5AC4((uint64_t)&__p);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
    }
    if ((v44 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v43 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v45 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if (sub_216BA6B60(1))
    {
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v22 = (uint64_t *)a2;
      }
      else {
        uint64_t v22 = *(uint64_t **)a2;
      }
      unint64_t v23 = v46 & 0xFFFFFFFFFFFFFFF8;
      if ((v46 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v24 = (const char *)(v23 + 16);
        if (*(char *)(v23 + 39) < 0) {
          uint64_t v24 = *(const char **)v24;
        }
      }
      else
      {
        uint64_t v24 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Encountered a asset @%s@ of type [%s], but a parser for the type could not be found; ignoring.\n",
        v20,
        v21,
        v22,
        v24);
    }
    NodeByIdentifierAnduint64_t Type = 0;
  }
  if ((v46 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return NodeByIdentifierAndType;
}

void sub_216BAAA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v41 = *(void *)(v40 - 136);
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v42 = *(void *)(v40 - 144);
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v43 = *(void *)(v40 - 128);
  if ((v43 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v44 = *(void *)(v40 - 120);
  if ((v44 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeByIdentifierAndType(pxrInternal__aapl__pxrReserved__::NdrRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  unint64_t v6 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  uint64_t v8 = sub_216BADE68((void *)this + 28, a2);
  if (v8 == v7) {
    NodeInIdentifierRangeWithSourceuint64_t Type = 0;
  }
  else {
    NodeInIdentifierRangeWithSourceuint64_t Type = pxrInternal__aapl__pxrReserved__::NdrRegistry::_GetNodeInIdentifierRangeWithSourceType((uint64_t)this, v8, v7, a3);
  }
  std::mutex::unlock(v6);
  return NodeInIdentifierRangeWithSourceType;
}

void sub_216BAAC1C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::_ParseNodeFromAssetOrSourceCode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  (*(void (**)(pxrInternal__aapl__pxrReserved__::NdrNode **__return_ptr, uint64_t, uint64_t *))(*(void *)a2 + 16))(&v11, a2, a3);
  if (sub_216BAB210(&v11, (uint64_t)a3))
  {
    sub_216B12870(&v9, a3, a3 + 8);
    long long v5 = (std::mutex *)(a1 + 8);
    std::mutex::lock((std::mutex *)(a1 + 8));
    pxrInternal__aapl__pxrReserved__::NdrRegistry::_AddDiscoveryResultNoLock(a1, a3);
    uint64_t inserted = pxrInternal__aapl__pxrReserved__::NdrRegistry::_InsertNodeInCache(a1, &v9, (uint64_t *)&v11);
    std::mutex::unlock(v5);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t inserted = 0;
  }
  uint64_t v7 = v11;
  unint64_t v11 = 0;
  if (v7) {
    (*(void (**)(pxrInternal__aapl__pxrReserved__::NdrNode *))(*(void *)v7 + 8))(v7);
  }
  return inserted;
}

void sub_216BAAD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeFromSourceCode(pxrInternal__aapl__pxrReserved__::NdrRegistry *a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t a4)
{
  long long v5 = (uint64_t *)*((void *)a1 + 25);
  unint64_t v6 = (uint64_t *)*((void *)a1 + 26);
  if (v5 == v6) {
    goto LABEL_53;
  }
  uint64_t v10 = 0;
  do
  {
    if ((*(void *)(*(uint64_t (**)(void))(*(void *)*v5 + 32))() & 0xFFFFFFFFFFFFFFF8) == (*(void *)a3 & 0xFFFFFFFFFFFFFFF8)) {
      uint64_t v10 = *v5;
    }
    ++v5;
  }
  while (v5 != v6);
  if (!v10)
  {
LABEL_53:
    if (sub_216BA6B60(1))
    {
      unint64_t v21 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
      if (v21)
      {
        uint64_t v22 = (const char *)(v21 + 16);
        if (*(char *)(v21 + 39) < 0) {
          uint64_t v22 = *(const char **)v22;
        }
      }
      else
      {
        uint64_t v22 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Encountered source code of type [%s], but a parser for the type could not be found; ignoring.\n",
        v19,
        v20,
        v22);
    }
    return 0;
  }
  else
  {
    v38.__r_.__value_.__r.__words[0] = 0;
    v38.__r_.__value_.__s.__data_[8] = 0;
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__ *)a2;
    }
    else {
      uint64_t v12 = *(pxrInternal__aapl__pxrReserved__ **)a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = (char *)*(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(char **)(a2 + 8);
    }
    pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v38, v12, v13);
    uint64_t v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)bswap64(0x9E3779B97F4A7C55 * v38.__r_.__value_.__r.__words[0]);
    *(void *)&long long v26 = v14;
    for (uint64_t i = *(void **)(a4 + 16); i; uint64_t i = (void *)*i)
    {
      if ((i[2] & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (uint64_t *)((i[2] & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
      }
      v38.__r_.__value_.__r.__words[0] = 0;
      v38.__r_.__value_.__s.__data_[8] = 0;
      sub_216BACBBC((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v38, (uint64_t *)&v26, (pxrInternal__aapl__pxrReserved__ *)EmptyString, (uint64_t)(i + 3));
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)bswap64(0x9E3779B97F4A7C55 * v38.__r_.__value_.__r.__words[0]);
      *(void *)&long long v26 = v14;
    }
    std::to_string(&v38, (unint64_t)v14);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v39);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    NodeByIdentifierAnduint64_t Type = pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeByIdentifierAndType(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v39, a3);
    if (!NodeByIdentifierAndType)
    {
      int v37 = 0;
      uint64_t v36 = 0;
      if ((v39 & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t v18 = (uint64_t *)((v39 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        unint64_t v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(0);
      }
      uint64_t v35 = 0;
      sub_216779094(&v26, "");
      sub_216779094(v33, "");
      long long __p = 0uLL;
      uint64_t v32 = 0;
      uint64_t v30 = 0;
      sub_216BA6EEC((uint64_t)&v38, &v39, &v36, (long long *)v18, &v35, (uint64_t *)a3, (uint64_t *)a3, &v26, (long long *)v33, (long long *)a2, a4, &__p, &v30);
      if ((v30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (SHIBYTE(v32) < 0) {
        operator delete((void *)__p);
      }
      if (v34 < 0) {
        operator delete(v33[0]);
      }
      if (SHIBYTE(v27) < 0) {
        operator delete((void *)v26);
      }
      if ((v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      NodeByIdentifierAnduint64_t Type = pxrInternal__aapl__pxrReserved__::NdrRegistry::_ParseNodeFromAssetOrSourceCode((uint64_t)a1, v10, (uint64_t *)&v38);
      if (!NodeByIdentifierAndType)
      {
        *(void *)&long long v26 = "ndr/registry.cpp";
        *((void *)&v26 + 1) = "GetNodeFromSourceCode";
        uint64_t v27 = 510;
        uint64_t v28 = "NdrNodeConstPtr pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeFromSourceCode(const std::string &, "
              "const TfToken &, const NdrTokenMap &)";
        char v29 = 0;
        unint64_t v23 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
        if (v23)
        {
          uint64_t v24 = (const char *)(v23 + 16);
          if (*(char *)(v23 + 39) < 0) {
            uint64_t v24 = *(const char **)v24;
          }
        }
        else
        {
          uint64_t v24 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 3, (pxrInternal__aapl__pxrReserved__ *)"Could not create node for the given source code of source type '%s'.", v24);
      }
      sub_216BA5AC4((uint64_t)&v38);
    }
    if ((v39 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return NodeByIdentifierAndType;
}

void sub_216BAB144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_216BA5AC4((uint64_t)&a38);
  uint64_t v45 = *(void *)(v43 - 72);
  if ((v45 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216BAB210(pxrInternal__aapl__pxrReserved__::NdrNode **a1, uint64_t a2)
{
  unint64_t v4 = *a1;
  if (!v4)
  {
    char v47 = "ndr/registry.cpp";
    uint64_t v48 = "_ValidateNode";
    uint64_t v49 = 213;
    uint64_t v50 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ValidateNode(const NdrNodeUniquePtr &, const Nd"
          "rNodeDiscoveryResult &)";
    uint64_t v14 = *(const char **)(a2 + 96);
    char v51 = 0;
    if (*(char *)(a2 + 119) >= 0) {
      uint64_t v14 = (const char *)(a2 + 96);
    }
    unint64_t v15 = *(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFF8;
    if (v15)
    {
      uint64_t v16 = (const char *)(v15 + 16);
      if (*(char *)(v15 + 39) < 0) {
        uint64_t v16 = *(const char **)v16;
      }
    }
    else
    {
      uint64_t v16 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v47, 3, (pxrInternal__aapl__pxrReserved__ *)"Parser for asset @%s@ of type %s returned null", v14, v16);
    return 0;
  }
  long long v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::NdrNode *))(*(void *)v4 + 16))(v4);
  unint64_t v6 = *a1;
  if (v5)
  {
    unint64_t v7 = *((void *)v6 + 2) & 0xFFFFFFFFFFFFFFF8;
    if (v7 != (*(void *)a2 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_33;
    }
    uint64_t v8 = *((unsigned __int8 *)v6 + 63);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = *((unsigned __int8 *)v6 + 63);
    }
    else {
      uint64_t v9 = *((void *)v6 + 6);
    }
    uint64_t v10 = *(unsigned __int8 *)(a2 + 47);
    int v11 = (char)v10;
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a2 + 32);
    }
    if (v9 != v10) {
      goto LABEL_33;
    }
    uint64_t v12 = (const void **)((char *)v6 + 40);
    if (v11 >= 0) {
      uint64_t v13 = (unsigned __int8 *)(a2 + 24);
    }
    else {
      uint64_t v13 = *(unsigned __int8 **)(a2 + 24);
    }
    if ((v8 & 0x80) != 0)
    {
      long long v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)memcmp(*v12, v13, *((void *)v6 + 6));
      if (v5)
      {
LABEL_33:
        char v47 = "ndr/registry.cpp";
        uint64_t v48 = "_ValidateNode";
        uint64_t v49 = 242;
        uint64_t v50 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ValidateNode(const NdrNodeUniquePtr &, cons"
              "t NdrNodeDiscoveryResult &)";
        char v51 = 0;
        if (v7) {
          EmptyString = (uint64_t *)(v7 + 16);
        }
        else {
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
        }
        if (*((char *)EmptyString + 23) < 0) {
          EmptyString = (uint64_t *)*EmptyString;
        }
        int v26 = *((_DWORD *)*a1 + 8);
        uint64_t v44 = *((void *)*a1 + 3);
        int v45 = v26;
        uint64_t v27 = &v46;
        pxrInternal__aapl__pxrReserved__::NdrVersion::GetString((pxrInternal__aapl__pxrReserved__::NdrVersion *)&v44, &v46);
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v27 = (std::string *)v46.__r_.__value_.__r.__words[0];
        }
        char v29 = *a1;
        uint64_t v30 = (char *)*a1 + 40;
        if (*((char *)*a1 + 63) < 0) {
          uint64_t v30 = *(const char **)v30;
        }
        unint64_t v31 = *((void *)v29 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (v31)
        {
          uint64_t v32 = (const char *)(v31 + 16);
          if (*(char *)(v31 + 39) < 0) {
            uint64_t v32 = *(const char **)v32;
          }
        }
        else
        {
          uint64_t v32 = "";
        }
        unint64_t v33 = *((void *)v29 + 10) & 0xFFFFFFFFFFFFFFF8;
        if (v33)
        {
          char v34 = (const char *)(v33 + 16);
          if (*(char *)(v33 + 39) < 0) {
            char v34 = *(const char **)v34;
          }
        }
        else
        {
          char v34 = "";
        }
        if (*(char *)(a2 + 119) >= 0) {
          uint64_t v35 = (const char *)(a2 + 96);
        }
        else {
          uint64_t v35 = *(const char **)(a2 + 96);
        }
        if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
          uint64_t v36 = (uint64_t *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          uint64_t v36 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v28);
        }
        if (*((char *)v36 + 23) < 0) {
          uint64_t v36 = (uint64_t *)*v36;
        }
        pxrInternal__aapl__pxrReserved__::NdrVersion::GetString((pxrInternal__aapl__pxrReserved__::NdrVersion *)(a2 + 8), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (*(char *)(a2 + 47) >= 0) {
          std::string v38 = (const char *)(a2 + 24);
        }
        else {
          std::string v38 = *(const char **)(a2 + 24);
        }
        unint64_t v39 = *(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFF8;
        if (v39)
        {
          uint64_t v40 = (const char *)(v39 + 16);
          if (*(char *)(v39 + 39) < 0) {
            uint64_t v40 = *(const char **)v40;
          }
        }
        else
        {
          uint64_t v40 = "";
        }
        unint64_t v41 = *(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFF8;
        if (v41)
        {
          uint64_t v42 = (const char *)(v41 + 16);
          if (*(char *)(v41 + 39) < 0) {
            uint64_t v42 = *(const char **)v42;
          }
        }
        else
        {
          uint64_t v42 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v47, 3, (pxrInternal__aapl__pxrReserved__ *)"Parsed node %s:%s:%s:%s:%s doesn't match discovery result created for asset @%s@ - %s:%s:%s:%s:%s (identifier:version:name:family:source type); discarding.",
          (const char *)EmptyString,
          (const char *)v27,
          v30,
          v32,
          v34,
          v35,
          (const char *)v36,
          (const char *)p_p,
          v38,
          v40,
          v42);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        return 0;
      }
    }
    else if (*((unsigned char *)v6 + 63))
    {
      while (*(unsigned __int8 *)v12 == *v13)
      {
        uint64_t v12 = (const void **)((char *)v12 + 1);
        ++v13;
        if (!--v8) {
          goto LABEL_26;
        }
      }
      goto LABEL_33;
    }
LABEL_26:
    BOOL v17 = *(_DWORD *)(a2 + 8) == *((_DWORD *)v6 + 6) && *(_DWORD *)(a2 + 12) == *((_DWORD *)v6 + 7);
    if (!v17
      || (*((void *)v6 + 8) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFF8)
      || (*((void *)v6 + 10) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFF8))
    {
      goto LABEL_33;
    }
  }
  char v47 = (char *)v6;
  uint64_t InputNames = pxrInternal__aapl__pxrReserved__::NdrNode::GetInputNames(v6);
  uint64_t v20 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)InputNames;
  unint64_t v21 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(InputNames + 8);
  while (v20 != v21)
  {
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)pxrInternal__aapl__pxrReserved__::NdrNode::GetInput(*a1, v20);
    sub_216BACBF4((uint64_t)&v47, (uint64_t)&v46);
    uint64_t v20 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v20 + 8);
  }
  uint64_t OutputNames = pxrInternal__aapl__pxrReserved__::NdrNode::GetOutputNames(*a1);
  unint64_t v23 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)OutputNames;
  uint64_t v24 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(OutputNames + 8);
  while (v23 != v24)
  {
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)pxrInternal__aapl__pxrReserved__::NdrNode::GetOutput(*a1, v23);
    sub_216BACBF4((uint64_t)&v47, (uint64_t)&v46);
    unint64_t v23 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v23 + 8);
  }
  return 1;
}

void sub_216BAB650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::_InsertNodeInCache(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v6 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  uint64_t v7 = sub_216BAFB00(a1 + 328, a2, (uint64_t)a2, a3)[4];
  std::mutex::unlock(v6);
  return v7;
}

void sub_216BAB6E8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::GetSearchURIs(pxrInternal__aapl__pxrReserved__::NdrRegistry *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = (uint64_t *)*((void *)this + 17);
  for (uint64_t i = (uint64_t *)*((void *)this + 18); v2 != i; ++v2)
  {
    uint64_t v5 = sub_216BAB804(v2);
    unint64_t v6 = (long long **)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    sub_216812BD8((char *)&v7, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v6[1] - (char *)*v6) >> 3));
    sub_216A30E64((uint64_t *)a2, *(long long **)(a2 + 8), v7, v8, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - v7) >> 3));
    uint64_t v10 = (void **)&v7;
    sub_216782F20(&v10);
  }
}

void sub_216BAB7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, void ***a12)
{
  a12 = &a9;
  sub_216782F20((void ***)&a12);
  sub_216782F20(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216BAB804(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    uint64_t v3[2] = 953;
    void v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin>::operato"
            "r->() const [U = pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000021747A4B8 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeIdentifiers(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_216973388((char **)a4, *(void *)(a1 + 248));
  for (uint64_t i = *(uint64_t **)(a1 + 240); i; uint64_t i = (uint64_t *)*i)
  {
    if ((!*a2 || (*a2 & 0xFFFFFFFFFFFFFFF8) == (i[9] & 0xFFFFFFFFFFFFFFF8)) && (a3 || *((unsigned char *)i + 40)))
    {
      uint64_t v10 = i + 3;
      int v11 = *(uint64_t **)(a4 + 8);
      if (*(uint64_t **)a4 == v11 || (*(v11 - 1) & 0xFFFFFFFFFFFFFFF8) != (*v10 & 0xFFFFFFFFFFFFFFF8))
      {
        if ((unint64_t)v11 >= *(void *)(a4 + 16))
        {
          uint64_t v13 = sub_216973984((char **)a4, v10);
        }
        else
        {
          uint64_t v12 = *v10;
          uint64_t *v11 = *v10;
          if ((v12 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *v11 &= 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v13 = (char *)(v11 + 1);
        }
        *(void *)(a4 + 8) = v13;
      }
    }
  }

  std::mutex::unlock(v8);
}

void sub_216BAB9B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeNames(pxrInternal__aapl__pxrReserved__::NdrRegistry *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_21680BC90(a3, *((void *)this + 36));
  for (uint64_t i = (void *)*((void *)this + 35); i; uint64_t i = (void *)*i)
  {
    uint64_t v8 = i[5];
    if (!*(void *)a2 || (*(void *)(v8 + 48) & 0xFFFFFFFFFFFFFFF8) == (*(void *)a2 & 0xFFFFFFFFFFFFFFF8))
    {
      unint64_t v9 = a3[1];
      if (*a3 == v9) {
        goto LABEL_20;
      }
      uint64_t v10 = *(unsigned __int8 *)(v9 - 1);
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = *(unsigned __int8 *)(v9 - 1);
      }
      else {
        uint64_t v11 = *(void *)(v9 - 16);
      }
      uint64_t v12 = *(unsigned __int8 *)(v8 + 47);
      int v13 = (char)v12;
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(v8 + 32);
      }
      if (v11 != v12) {
        goto LABEL_20;
      }
      uint64_t v14 = (const void **)(v9 - 24);
      if (v13 >= 0) {
        unint64_t v15 = (unsigned __int8 *)(v8 + 24);
      }
      else {
        unint64_t v15 = *(unsigned __int8 **)(v8 + 24);
      }
      if ((v10 & 0x80) != 0)
      {
        if (memcmp(*v14, v15, *(void *)(v9 - 16))) {
          goto LABEL_20;
        }
      }
      else if (*(unsigned char *)(v9 - 1))
      {
        while (*(unsigned __int8 *)v14 == *v15)
        {
          uint64_t v14 = (const void **)((char *)v14 + 1);
          ++v15;
          if (!--v10) {
            goto LABEL_24;
          }
        }
LABEL_20:
        uint64_t v16 = (long long *)(v8 + 24);
        if (v9 >= a3[2])
        {
          uint64_t v17 = sub_2167E9A44(a3, v16);
        }
        else
        {
          sub_2167E99E4(a3, v16);
          uint64_t v17 = v9 + 24;
        }
        a3[1] = v17;
      }
    }
LABEL_24:
    ;
  }

  std::mutex::unlock(v6);
}

void sub_216BABB30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216782F20((void ***)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeByIdentifier(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v7 = sub_216BADE68((void *)(a1 + 224), a2);
  unint64_t v9 = v8;
  if (v7 == v8)
  {
LABEL_5:
    NodeInIdentifierRangeWithSourceuint64_t Type = 0;
  }
  else
  {
    uint64_t v10 = *(void **)a3;
    uint64_t v11 = *(void **)(a3 + 8);
    if (*(void **)a3 == v11)
    {
      while (1)
      {
        NodeInIdentifierRangeWithSourceuint64_t Type = pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindOrParseNodeInCache(a1, v7 + 3);
        if (NodeInIdentifierRangeWithSourceType) {
          break;
        }
        uint64_t v7 = (void *)*v7;
        if (v7 == v9) {
          goto LABEL_5;
        }
      }
    }
    else
    {
      while (1)
      {
        NodeInIdentifierRangeWithSourceuint64_t Type = pxrInternal__aapl__pxrReserved__::NdrRegistry::_GetNodeInIdentifierRangeWithSourceType(a1, v7, v9, v10);
        if (NodeInIdentifierRangeWithSourceType) {
          break;
        }
        if (++v10 == v11) {
          goto LABEL_5;
        }
      }
    }
  }
  std::mutex::unlock(v6);
  return NodeInIdentifierRangeWithSourceType;
}

void sub_216BABC24(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindOrParseNodeInCache(uint64_t a1, uint64_t *a2)
{
  sub_216B12870(&v16, a2, a2 + 8);
  uint64_t NodeInCache = pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindNodeInCache(a1, &v16);
  if (!NodeInCache)
  {
    unint64_t v6 = sub_2168CB1F4((void *)(a1 + 160), a2 + 7);
    if (v6)
    {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::NdrNode **__return_ptr))(*(void *)v6[3] + 16))(&v15);
      if (sub_216BAB210(&v15, (uint64_t)a2)) {
        uint64_t NodeInCache = pxrInternal__aapl__pxrReserved__::NdrRegistry::_InsertNodeInCache(a1, &v16, (uint64_t *)&v15);
      }
      else {
        uint64_t NodeInCache = 0;
      }
      uint64_t v11 = v15;
      unint64_t v15 = 0;
      if (v11) {
        (*(void (**)(pxrInternal__aapl__pxrReserved__::NdrNode *))(*(void *)v11 + 8))(v11);
      }
    }
    else
    {
      if (sub_216BA6B60(1))
      {
        unint64_t v9 = a2[7] & 0xFFFFFFFFFFFFFFF8;
        if (v9)
        {
          uint64_t v10 = (const char *)(v9 + 16);
          if (*(char *)(v9 + 39) < 0) {
            uint64_t v10 = *(const char **)v10;
          }
        }
        else
        {
          uint64_t v10 = "";
        }
        uint64_t v14 = a2[3];
        int v13 = a2 + 3;
        uint64_t v12 = v14;
        if (*((char *)v13 + 23) >= 0) {
          uint64_t v12 = (uint64_t)v13;
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Encountered a node of type [%s], with name [%s], but a parser for that type could not be found; ignoring.\n",
          v7,
          v8,
          v10,
          v12);
      }
      uint64_t NodeInCache = 0;
    }
  }
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return NodeInCache;
}

void sub_216BABDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::_GetNodeInIdentifierRangeWithSourceType(uint64_t a1, void *a2, void *a3, void *a4)
{
  if (a2 == a3) {
    return 0;
  }
  unint64_t v6 = a2;
  while (1)
  {
    if ((v6[11] & 0xFFFFFFFFFFFFFFF8) == (*a4 & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindOrParseNodeInCache(a1, v6 + 3);
      if (result) {
        break;
      }
    }
    unint64_t v6 = (void *)*v6;
    if (v6 == a3) {
      return 0;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeByName(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  uint64_t v8 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  unint64_t v9 = sub_21699CFF8((void *)(a1 + 264), a2);
  uint64_t v11 = v10;
  if (v9 == v10)
  {
LABEL_10:
    NodeInNameRangeWithSourceuint64_t Type = 0;
  }
  else
  {
    uint64_t v12 = *(void **)a3;
    int v13 = *(void **)(a3 + 8);
    if (*(void **)a3 == v13)
    {
      while (1)
      {
        uint64_t v15 = *((void *)v9 + 5);
        if (a4 || *(unsigned char *)(v15 + 16))
        {
          NodeInNameRangeWithSourceuint64_t Type = pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindOrParseNodeInCache(a1, (uint64_t *)v15);
          if (NodeInNameRangeWithSourceType) {
            break;
          }
        }
        unint64_t v9 = *(unsigned __int8 **)v9;
        if (v9 == v11) {
          goto LABEL_10;
        }
      }
    }
    else
    {
      while (1)
      {
        NodeInNameRangeWithSourceuint64_t Type = pxrInternal__aapl__pxrReserved__::NdrRegistry::_GetNodeInNameRangeWithSourceType(a1, v9, v11, v12, a4);
        if (NodeInNameRangeWithSourceType) {
          break;
        }
        if (++v12 == v13) {
          goto LABEL_10;
        }
      }
    }
  }
  std::mutex::unlock(v8);
  return NodeInNameRangeWithSourceType;
}

void sub_216BABF8C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::_GetNodeInNameRangeWithSourceType(uint64_t a1, void *a2, void *a3, void *a4, int a5)
{
  if (a2 == a3) {
    return 0;
  }
  uint64_t v8 = a2;
  while (1)
  {
    uint64_t v10 = v8[5];
    if ((*(void *)(v10 + 64) & 0xFFFFFFFFFFFFFFF8) == (*a4 & 0xFFFFFFFFFFFFFFF8) && (a5 || *(unsigned char *)(v10 + 16)))
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindOrParseNodeInCache(a1, (uint64_t *)v10);
      if (result) {
        break;
      }
    }
    uint64_t v8 = (void *)*v8;
    if (v8 == a3) {
      return 0;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeByNameAndType(uint64_t a1, unsigned __int8 *a2, void *a3, int a4)
{
  uint64_t v8 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v10 = sub_21699CFF8((void *)(a1 + 264), a2);
  if (v10 == v9) {
    NodeInNameRangeWithSourceuint64_t Type = 0;
  }
  else {
    NodeInNameRangeWithSourceuint64_t Type = pxrInternal__aapl__pxrReserved__::NdrRegistry::_GetNodeInNameRangeWithSourceType(a1, v10, v9, a3, a4);
  }
  std::mutex::unlock(v8);
  return NodeInNameRangeWithSourceType;
}

void sub_216BAC0D0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodesByIdentifier(pxrInternal__aapl__pxrReserved__::NdrRegistry *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, void **a3@<X8>)
{
  unint64_t v6 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v7 = sub_216BADE68((void *)this + 28, a2);
  for (i = v8; v7 != i; uint64_t v7 = (void *)*v7)
  {
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindOrParseNodeInCache((uint64_t)this, v7 + 3);
    uint64_t v11 = v10;
    if (v10)
    {
      int v13 = (uint64_t *)a3[1];
      unint64_t v12 = (unint64_t)a3[2];
      if ((unint64_t)v13 >= v12)
      {
        uint64_t v15 = ((char *)v13 - (unsigned char *)*a3) >> 3;
        if ((unint64_t)(v15 + 1) >> 61) {
          sub_21677CB10();
        }
        uint64_t v16 = v12 - (void)*a3;
        uint64_t v17 = v16 >> 2;
        if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
          uint64_t v17 = v15 + 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18) {
          uint64_t v19 = (char *)sub_21677CB28((uint64_t)(a3 + 2), v18);
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = (uint64_t *)&v19[8 * v15];
        *uint64_t v20 = v11;
        uint64_t v14 = v20 + 1;
        uint64_t v22 = (char *)*a3;
        unint64_t v21 = (char *)a3[1];
        if (v21 != *a3)
        {
          do
          {
            uint64_t v23 = *((void *)v21 - 1);
            v21 -= 8;
            *--uint64_t v20 = v23;
          }
          while (v21 != v22);
          unint64_t v21 = (char *)*a3;
        }
        *a3 = v20;
        a3[1] = v14;
        a3[2] = &v19[8 * v18];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *int v13 = v10;
        uint64_t v14 = v13 + 1;
      }
      a3[1] = v14;
    }
  }

  std::mutex::unlock(v6);
}

void sub_216BAC24C(_Unwind_Exception *a1)
{
  char v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodesByName(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, void **a4@<X8>)
{
  int v26 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v8 = sub_21699CFF8((void *)(a1 + 264), a2);
  for (uint64_t i = v9; v8 != i; v8 = *(unsigned __int8 **)v8)
  {
    uint64_t v11 = *((void *)v8 + 5);
    if (a3 || *(unsigned char *)(v11 + 16))
    {
      uint64_t v12 = pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindOrParseNodeInCache(a1, (uint64_t *)v11);
      uint64_t v13 = v12;
      if (v12)
      {
        uint64_t v15 = (uint64_t *)a4[1];
        unint64_t v14 = (unint64_t)a4[2];
        if ((unint64_t)v15 >= v14)
        {
          uint64_t v17 = ((char *)v15 - (unsigned char *)*a4) >> 3;
          if ((unint64_t)(v17 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v18 = v14 - (void)*a4;
          uint64_t v19 = v18 >> 2;
          if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
            uint64_t v19 = v17 + 1;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v19;
          }
          if (v20) {
            unint64_t v21 = (char *)sub_21677CB28((uint64_t)(a4 + 2), v20);
          }
          else {
            unint64_t v21 = 0;
          }
          uint64_t v22 = (uint64_t *)&v21[8 * v17];
          *uint64_t v22 = v13;
          uint64_t v16 = v22 + 1;
          uint64_t v24 = (char *)*a4;
          uint64_t v23 = (char *)a4[1];
          if (v23 != *a4)
          {
            do
            {
              uint64_t v25 = *((void *)v23 - 1);
              v23 -= 8;
              *--uint64_t v22 = v25;
            }
            while (v23 != v24);
            uint64_t v23 = (char *)*a4;
          }
          *a4 = v22;
          a4[1] = v16;
          a4[2] = &v21[8 * v20];
          if (v23) {
            operator delete(v23);
          }
        }
        else
        {
          uint64_t *v15 = v12;
          uint64_t v16 = v15 + 1;
        }
        a4[1] = v16;
      }
    }
  }

  std::mutex::unlock(v26);
}

void sub_216BAC3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodesByFamily(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, char **a4@<X8>)
{
  int v26 = a3;
  uint64_t v7 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v24 = (std::mutex *)(a1 + 72);
  char v25 = 1;
  std::mutex::lock((std::mutex *)(a1 + 72));
  unint64_t v8 = *(void *)(a1 + 352);
  if (v8 != *(void *)(a1 + 248))
  {
    sub_216BAC664((uint64_t)&v24);
    v23[0] = a1;
    v23[1] = a2;
    v23[2] = &v26;
    v27[0] = (uint64_t (**)(void))&unk_26C75B7A8;
    v27[1] = (uint64_t (**)(void))v23;
    tbb::interface7::internal::isolate_within_arena(v27, 0);
    sub_216BAC6A8((uint64_t)&v24);
    unint64_t v8 = *(void *)(a1 + 352);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_2168265D4((void **)a4, v8);
  for (uint64_t i = *(void **)(a1 + 344); i; uint64_t i = (void *)*i)
  {
    uint64_t v10 = i[4];
    if ((!*a2 || (*a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v10 + 64) & 0xFFFFFFFFFFFFFFF8))
      && (v26 || *(unsigned char *)(v10 + 32)))
    {
      uint64_t v12 = a4[1];
      unint64_t v11 = (unint64_t)a4[2];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = (v12 - *a4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          sub_21677CB10();
        }
        uint64_t v15 = v11 - (void)*a4;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          uint64_t v18 = (char *)sub_21677CB28((uint64_t)(a4 + 2), v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = &v18[8 * v14];
        *(void *)uint64_t v19 = v10;
        uint64_t v13 = v19 + 8;
        unint64_t v21 = *a4;
        unint64_t v20 = a4[1];
        if (v20 != *a4)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          unint64_t v20 = *a4;
        }
        *a4 = v19;
        a4[1] = v13;
        a4[2] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *(void *)uint64_t v12 = v10;
        uint64_t v13 = v12 + 8;
      }
      a4[1] = v13;
    }
  }
  if (v25) {
    std::mutex::unlock(v24);
  }
  std::mutex::unlock(v7);
}

void sub_216BAC614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13)
{
  if (a13) {
    std::mutex::unlock(a12);
  }
  std::mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_216BAC664(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::mutex::unlock(*(std::mutex **)a1);
    *(unsigned char *)(a1 + 8) = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    sub_216BAC6A8();
  }
}

void sub_216BAC6A8(uint64_t a1)
{
  uint64_t v2 = *(std::mutex **)a1;
  if (v2)
  {
    if (!*(unsigned char *)(a1 + 8))
    {
      std::mutex::lock(v2);
      *(unsigned char *)(a1 + 8) = 1;
      return;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::lock: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::lock: already locked");
  pxrInternal__aapl__pxrReserved__::NdrRegistry::GetAllNodeSourceTypes(v3, v4);
}

void pxrInternal__aapl__pxrReserved__::NdrRegistry::GetAllNodeSourceTypes(pxrInternal__aapl__pxrReserved__::NdrRegistry *this@<X0>, void *a2@<X8>)
{
  char v4 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  sub_216BADEBC(a2, *((void **)this + 38), (void *)this + 39);

  std::mutex::unlock(v4);
}

void sub_216BAC760(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *sub_216BAC774(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2, char *a3)
{
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(a1, a2, a3);
  if (result)
  {
  }
  return result;
}

void sub_216BAC7E4(uint64_t *a1, const void *a2)
{
  sub_216859A88(a1 + 2, a2);

  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindNodeInCache(uint64_t a1, void *a2)
{
  char v4 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  uint64_t v5 = sub_216BAFA08((void *)(a1 + 328), a2);
  if (v5) {
    uint64_t v6 = v5[4];
  }
  else {
    uint64_t v6 = 0;
  }
  std::mutex::unlock(v4);
  return v6;
}

void sub_216BAC880(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::NdrRegistry::_GetParserForDiscoveryType(pxrInternal__aapl__pxrReserved__::NdrRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t result = sub_2168CB120((void *)this + 20, a2);
  if (result) {
    return (void *)result[3];
  }
  return result;
}

uint64_t sub_216BAC8B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = a2[1];
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(void *)(a1 + 8) = v5;
  if (*((char *)a2 + 47) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 24), (void *)a2[3], a2[4]);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 3);
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = a2[5];
    *(_OWORD *)(a1 + 24) = v6;
  }
  uint64_t v7 = a2[6];
  *(void *)(a1 + 48) = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 48) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = a2[7];
  *(void *)(a1 + 56) = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 56) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = a2[8];
  *(void *)(a1 + 64) = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 64) &= 0xFFFFFFFFFFFFFFF8;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 72), (void *)a2[9], a2[10]);
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 9);
    *(void *)(a1 + 88) = a2[11];
    *(_OWORD *)(a1 + 72) = v10;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 96), (void *)a2[12], a2[13]);
  }
  else
  {
    long long v11 = *((_OWORD *)a2 + 6);
    *(void *)(a1 + 112) = a2[14];
    *(_OWORD *)(a1 + 96) = v11;
  }
  if (*((char *)a2 + 143) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 120), (void *)a2[15], a2[16]);
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 15);
    *(void *)(a1 + 136) = a2[17];
    *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = v12;
  }
  sub_216BA71F4(a1 + 144, (uint64_t)(a2 + 18));
  uint64_t v13 = (unsigned char *)(a1 + 184);
  if (*((char *)a2 + 207) < 0)
  {
    sub_216778F24(v13, (void *)a2[23], a2[24]);
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 23);
    *(void *)(a1 + 20sub_2168EBBB8(&a9, 0) = a2[25];
    *(_OWORD *)uint64_t v13 = v14;
  }
  uint64_t v15 = a2[26];
  *(void *)(a1 + 208) = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 208) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void sub_216BACAE0(_Unwind_Exception *a1)
{
  sub_216BA5BB8(v6);
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v3);
  }
  uint64_t v8 = *(void *)(v1 + 64);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *(void *)(v1 + 56);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *(void *)(v1 + 48);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if ((*(void *)v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_216BACBBC(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__ *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  if (*((unsigned char *)a1 + 8)) {
    v4 += (unint64_t)(*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *((unsigned char *)a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return sub_2169B3AE8(a1, a3, a4);
}

void sub_216BACBF4(uint64_t a1, uint64_t a2)
{
  memset(&__p, 0, sizeof(__p));
  if ((pxrInternal__aapl__pxrReserved__::NdrRegistry_ValidateProperty(a1, a2, (uint64_t)&__p) & 1) == 0)
  {
    v2[0] = "ndr/registry.cpp";
    v2[1] = "_ValidateProperty";
    v2[2] = 200;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ValidateProperty(const NdrNodeConstPtr &, con"
            "st NdrPropertyConstPtr &)";
    char v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216BACC70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BACC94(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(*v4 + 240);
  long long v11 = *(_OWORD *)(v4 + 1);
  uint64_t v12 = v5;
  v17[0] = 0;
  uint64_t v18 = 65539;
  int v19 = 55;
  tbb::task_group_context::init((uint64_t)v17, a2, a3, a4);
  uint64_t v13 = &v11;
  if (v6)
  {
    v14[0] = &unk_26C75B7E8;
    uint64_t v16 = (tbb::task_group_context *)v17;
    uint64_t v7 = (tbb::internal::allocate_child_proxy *)tbb::internal::allocate_root_with_context_proxy::allocate(&v16, 8uLL);
    *((unsigned char *)v7 - 11) = 1;
    *(void *)uint64_t v7 = &unk_26C746C48;
    v14[1] = &v13;
    uint64_t v15 = v7;
    uint64_t v8 = (void *)tbb::internal::allocate_child_proxy::allocate(v7, 0x20uLL);
    *((unsigned char *)v8 - 11) = 1;
    void *v8 = &unk_26C75B8A0;
    v8[1] = v6;
    v8[2] = 0;
    v8[3] = v14;
    uint64_t v9 = v15;
    *((void *)v15 - 3) = 2;
    (*(void (**)(void, tbb::internal::allocate_child_proxy *, void *))(**((void **)v9 - 5) + 8))(*((void *)v9 - 5), v9, v8);
    sub_216BACE7C((uint64_t)v14, v10);
  }
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)v17);
}

void sub_216BACE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BACE38(uint64_t ***a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  uint64_t v4 = (int *)(*a1)[1];
  uint64_t result = (uint64_t)(*a1)[2];
  int v5 = *v4;
  uint64_t v6 = *v2;
  if ((!v6 || (v6 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFF8))
    && (v5 || *(unsigned char *)(a2 + 24)))
  {
    return pxrInternal__aapl__pxrReserved__::NdrRegistry::_FindOrParseNodeInCache(result, (uint64_t *)(a2 + 8));
  }
  return result;
}

uint64_t sub_216BACE7C(uint64_t a1, tbb::task *a2)
{
  *(void *)a1 = &unk_26C75B7E8;
  tbb::interface5::internal::task_base::destroy(*(tbb::interface5::internal::task_base **)(a1 + 16), a2);
  return a1;
}

void sub_216BACEC8(uint64_t a1, tbb::task *a2)
{
  uint64_t v2 = (void *)sub_216BACE7C(a1, a2);

  operator delete(v2);
}

uint64_t sub_216BACEF0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  v7[0] = 0;
  v7[1] = v4;
  int v5 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0xF0uLL);
  *((unsigned char *)v5 - 11) = 1;
  void *v5 = &unk_26C75B858;
  sub_216BAD16C(v5 + 1, a2);
  v5[29] = a1;
  return (**(uint64_t (***)(void, void *, uint64_t))*(v5 - 5))(*(v5 - 5), v5, (uint64_t)(v5 - 1));
}

void sub_216BACF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  tbb::internal::allocate_additional_child_of_proxy::free((tbb::internal::allocate_additional_child_of_proxy *)&a9, v9);
  _Unwind_Resume(a1);
}

uint64_t sub_216BACFB8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  v7[0] = 0;
  v7[1] = v4;
  int v5 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0xF0uLL);
  *((unsigned char *)v5 - 11) = 1;
  void *v5 = &unk_26C75B858;
  sub_216BAD1E4((uint64_t)(v5 + 1), a2);
  v5[29] = a1;
  return (**(uint64_t (***)(void))*(v5 - 5))();
}

void *sub_216BAD078(void *a1)
{
  *a1 = &unk_26C75B858;
  sub_216BA5AC4((uint64_t)(a1 + 2));
  uint64_t v2 = a1[1];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216BAD0D4(void *a1)
{
  *a1 = &unk_26C75B858;
  sub_216BA5AC4((uint64_t)(a1 + 2));
  uint64_t v2 = a1[1];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  operator delete(a1);
}

uint64_t sub_216BAD140(uint64_t a1)
{
  return 0;
}

uint64_t *sub_216BAD16C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_216BAC8B8((uint64_t)(a1 + 1), a2 + 1);
  return a1;
}

uint64_t sub_216BAD1E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  *(void *)(a1 + 16) = v5;
  long long v6 = *((_OWORD *)a2 + 2);
  *(void *)(a1 + 48) = a2[6];
  *(_OWORD *)(a1 + 32) = v6;
  a2[5] = 0;
  a2[6] = 0;
  a2[4] = 0;
  *(void *)(a1 + 56) = a2[7];
  a2[7] = 0;
  *(void *)(a1 + 64) = a2[8];
  a2[8] = 0;
  *(void *)(a1 + 72) = a2[9];
  a2[9] = 0;
  long long v7 = *((_OWORD *)a2 + 5);
  *(void *)(a1 + 96) = a2[12];
  *(_OWORD *)(a1 + 8sub_2168EBBB8(&a9, 0) = v7;
  a2[11] = 0;
  a2[12] = 0;
  a2[10] = 0;
  long long v8 = *(_OWORD *)(a2 + 13);
  *(void *)(a1 + 12sub_2168EBBB8(&a9, 0) = a2[15];
  *(_OWORD *)(a1 + 104) = v8;
  a2[14] = 0;
  a2[15] = 0;
  a2[13] = 0;
  long long v9 = *((_OWORD *)a2 + 8);
  *(void *)(a1 + 144) = a2[18];
  *(_OWORD *)(a1 + 128) = v9;
  a2[17] = 0;
  a2[18] = 0;
  a2[16] = 0;
  sub_2168C06A4(a1 + 152, a2 + 19);
  long long v10 = *((_OWORD *)a2 + 12);
  *(void *)(a1 + 208) = a2[26];
  *(_OWORD *)(a1 + 192) = v10;
  a2[24] = 0;
  a2[25] = 0;
  a2[26] = 0;
  *(void *)(a1 + 216) = a2[27];
  a2[27] = 0;
  return a1;
}

void *sub_216BAD310(void *a1)
{
  uint64_t v2 = 0;
  uint64_t v4 = (void *)a1[1];
  uint64_t v3 = (void *)a1[2];
  uint64_t v5 = v4;
  while (v5 != v3)
  {
    uint64_t v5 = (void *)*v5;
    a1[1] = v5;
    if (++v2 == 4)
    {
      if (v5 != v3) {
        *((unsigned char *)a1 - 12) = 1;
      }
      uint64_t v2 = 4;
      goto LABEL_8;
    }
  }
  if (v2)
  {
LABEL_8:
    uint64_t v6 = *(void *)(a1[3] + 16);
    v9[0] = 0;
    v9[1] = v6;
    uint64_t result = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v9, 0x20uLL);
    uint64_t v8 = a1[3];
    *((unsigned char *)result - 11) = 1;
    *uint64_t result = &unk_26C75B8E8;
    result[1] = v8;
    result[2] = v4;
    result[3] = v2;
    return result;
  }
  return 0;
}

uint64_t sub_216BAD3D8(tbb::internal::allocate_child_proxy *this)
{
  uint64_t v2 = &v10;
  uint64_t v10 = 0;
  uint64_t v3 = 0x200000000;
  for (uint64_t i = 1; ; ++i)
  {
    long long v11 = v2;
    uint64_t v5 = (void *)tbb::internal::allocate_child_proxy::allocate(this, 0x18uLL);
    uint64_t v6 = v5;
    uint64_t v7 = *((void *)this + 1);
    *((unsigned char *)v5 - 11) = 1;
    void *v5 = &unk_26C75B930;
    v5[1] = *((void *)this + 2);
    uint64_t v5[2] = v7;
    uint64_t v8 = *((void *)this + 3);
    *((void *)this + 2) = **((void **)this + 2);
    if (i == v8) {
      break;
    }
    *(v5 - 1) = 0;
    uint64_t v2 = v5 - 1;
    uint64_t *v11 = (uint64_t)v5;
    v3 += 0x100000000;
  }
  *((void *)this - 3) = v3 >> 32;
  if (v10)
  {
    (***(void (****)(void, uint64_t, uint64_t *))(v10 - 40))(*(void *)(v10 - 40), v10, v11);
    uint64_t v10 = 0;
    long long v11 = &v10;
  }
  (*(void (**)(void, tbb::internal::allocate_child_proxy *, void *))(**((void **)this - 5) + 8))(*((void *)this - 5), this, v6);
  return 0;
}

uint64_t sub_216BAD518(uint64_t a1)
{
  return 0;
}

void sub_216BAD540(uint64_t *a1, const void *a2)
{
  sub_216859A88(a1 + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);

  operator delete(v3);
}

atomic_uint **sub_216BAD580@<X0>(uint64_t a1@<X0>, void *a2@<X1>, atomic_uint **a3@<X8>)
{
  uint64_t result = (atomic_uint **)sub_2168CB120((void *)(*(void *)(a1 + 24) + 160), a2);
  if (!result || (uint64_t result = (atomic_uint **)result[3]) == 0)
  {
    uint64_t v6 = 0;
LABEL_7:
    *a3 = v6;
    return result;
  }
  uint64_t result = (atomic_uint **)(*((uint64_t (**)(atomic_uint **))*result + 4))(result);
  uint64_t v5 = *result;
  *a3 = *result;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      goto LABEL_7;
    }
  }
  return result;
}

void sub_216BAD608(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)**a1;
  if (v2)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = sub_216BADDC0(v4 - 1);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216BAD68C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_216BAD6E0(v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_216BAD6E0(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    void *v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

uint64_t sub_216BAD74C(uint64_t a1)
{
  sub_216BAD788(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216BAD788(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216BA5AC4((uint64_t)(v2 + 3));
      uint64_t v4 = v2[2];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_216BAD7EC(uint64_t a1)
{
  sub_216BAD828(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216BAD828(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216BAD86C(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_216BAD86C(void *a1)
{
  uint64_t result = a1[2];
  a1[2] = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  uint64_t v3 = a1[1];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BAD8EC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a3, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    uint64_t v13 = *a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 3);
    if (v14 >> 61) {
      sub_21677CB10();
    }
    uint64_t v15 = ((uint64_t)a2 - v13) >> 3;
    uint64_t v16 = v10 - v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    v28[4] = v9;
    if (v17) {
      uint64_t v18 = (char *)sub_21677CB28(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v24 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v18[8 * v15];
    v28[0] = v18;
    v28[1] = v24;
    v28[3] = &v18[8 * v17];
    uint64_t v25 = 8 * a5;
    int v26 = &v24[a5];
    do
    {
      *v24++ = *a3;
      *a3++ = 0;
      v25 -= 8;
    }
    while (v25);
    v28[2] = v26;
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)sub_216BADAC8(a1, v28, (uint64_t)v5);
    sub_216BADD70((uint64_t)v28);
    return v5;
  }
  uint64_t v19 = (uint64_t)(v12 - (void)a2) >> 3;
  if (v19 >= a5)
  {
    uint64_t v20 = &a3[a5];
LABEL_18:
    sub_216BADA80((uint64_t)a1, a2, v12, (uint64_t)&a2[a5]);
    sub_216BADBE8(a3, v20, v5);
    return v5;
  }
  uint64_t v20 = &a3[v19];
  uint64_t v21 = *(void *)(v9 - 8);
  if (v20 != a4)
  {
    uint64_t v22 = v20;
    uint64_t v23 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(v9 - 8);
    do
    {
      *v23++ = *v22;
      *v22++ = 0;
      v21 += 8;
    }
    while (v22 != a4);
  }
  a1[1] = v21;
  if ((uint64_t)(v12 - (void)a2) >= 1) {
    goto LABEL_18;
  }
  return v5;
}

void sub_216BADA6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BADD70((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216BADA80(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)((char *)a2 + v6 - a4);
  uint64_t v8 = (void *)v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v9 = v7;
    uint64_t v8 = *(void **)(a1 + 8);
    do
    {
      *v8++ = *v9;
      *v9++ = 0;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_216BADB7C(a2, v7, v6);
}

uint64_t sub_216BADAC8(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_216BADC50((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_216BADCE8(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *sub_216BADB7C(void *a1, void *a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a3 - 8);
    uint64_t v6 = a2;
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a3 - 8);
    do
    {
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*--v6;
      uint64_t v9 = *v5;
      *v7-- = v8;
      *uint64_t v6 = 0;
      sub_2168BD378((int)v5, v9);
      uint64_t v5 = v7;
    }
    while (v6 != a1);
  }
  return a2;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BADBE8(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    uint64_t v5 = a3;
    do
    {
      uint64_t v6 = *a3;
      *v5++ = *v3;
      *v3++ = 0;
      sub_2168BD378((int)a3, v6);
      a3 = v5;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t sub_216BADC50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 8;
  while (a3 + v10 != a5)
  {
    unint64_t v12 = (uint64_t *)(v11 + v10);
    *unint64_t v12 = *(void *)(a3 + v10 - 8);
    v10 -= 8;
    sub_2168BD80C(v12);
  }
  return a6;
}

uint64_t sub_216BADCE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(void *)(a4 + v7) = *(void *)(a2 + v7);
      sub_2168BD80C((uint64_t *)(a4 + v7));
      v7 += 8;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_216BADD4C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 8;
    do
    {
      sub_216BADDC0((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v4 + v2));
      v2 -= 8;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216BADD70(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_216BADDC0((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BADDC0(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

uint64_t sub_216BADDF0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216BADC50((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_216BADE68(void *a1, void *a2)
{
  uint64_t result = sub_2168CB1F4(a1, a2);
  if (result)
  {
    uint64_t v4 = result;
    do
      uint64_t v4 = (void *)*v4;
    while (v4 && (v4[2] & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8));
  }
  return result;
}

void *sub_216BADEBC(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v5 = a2;
    do
    {
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      uint64_t v5 = v7;
    }
    while (v7 != a3);
  }
  sub_216BADF44(a1, a2, a3, v4);
  return a1;
}

void *sub_216BADF44(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_21677CACC(result, a4);
    uint64_t result = sub_216BADFCC((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216BADFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216889A04(&a9);
  _Unwind_Resume(a1);
}

void *sub_216BADFCC(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t result = a4;
  if (a2 != a3)
  {
    do
    {
      uint64_t v5 = a2[4];
      *uint64_t result = v5;
      if ((v5 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *result &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v6 = (void *)a2[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)a2[2];
          BOOL v8 = *v7 == (void)a2;
          a2 = v7;
        }
        while (!v8);
      }
      ++result;
      a2 = v7;
    }
    while (v7 != a3);
  }
  return result;
}

void *sub_216BAE044(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v5 = a2;
    do
    {
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      uint64_t v5 = v7;
    }
    while (v7 != a3);
  }
  sub_216BAE0CC(a1, a2, a3, v4);
  return a1;
}

void *sub_216BAE0CC(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    sub_21677CACC(result, a4);
    return (void *)sub_21696DC98(v6, a2, a3);
  }
  return result;
}

void sub_216BAE120(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216BAE13C(uint64_t result, pxrInternal__aapl__pxrReserved__::TfType *a2, uint64_t a3, char a4)
{
  unint64_t v8 = result;
  while (2)
  {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8);
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfType *)v8;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v8 = (unint64_t)v10;
          uint64_t v11 = a2;
          uint64_t v12 = a2 - v10;
          uint64_t v13 = (a2 - v10) >> 3;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
                uint64_t v157 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)v8);
                int v158 = *(char *)(v157 + 23);
                int v159 = *(char *)(TypeName + 23);
                if (v159 >= 0) {
                  size_t v160 = *(unsigned __int8 *)(TypeName + 23);
                }
                else {
                  size_t v160 = *(void *)(TypeName + 8);
                }
                if (v159 >= 0) {
                  unint64_t v161 = (const void *)TypeName;
                }
                else {
                  unint64_t v161 = *(const void **)TypeName;
                }
                if (v158 >= 0) {
                  size_t v162 = *(unsigned __int8 *)(v157 + 23);
                }
                else {
                  size_t v162 = *(void *)(v157 + 8);
                }
                if (v158 >= 0) {
                  v163 = (const void *)v157;
                }
                else {
                  v163 = *(const void **)v157;
                }
                if (v162 >= v160) {
                  size_t v164 = v160;
                }
                else {
                  size_t v164 = v162;
                }
                uint64_t result = memcmp(v161, v163, v164);
                BOOL v165 = v160 < v162;
                if (result) {
                  BOOL v165 = (int)result < 0;
                }
                if (v165)
                {
                  uint64_t v166 = *(void *)v8;
                  *(void *)unint64_t v8 = *(void *)v9;
                  *(void *)uint64_t v9 = v166;
                }
                break;
              case 3:
                uint64_t result = sub_21696EF6C((pxrInternal__aapl__pxrReserved__::TfType *)v8, (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8), v9);
                break;
              case 4:
                uint64_t result = sub_21696F48C((pxrInternal__aapl__pxrReserved__::TfType *)v8, (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8), (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 16), v9);
                break;
              case 5:
                uint64_t result = sub_21696ED20((pxrInternal__aapl__pxrReserved__::TfType *)v8, (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8), (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 16), (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 24), v9);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 191)
          {
            unint64_t v167 = (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8);
            BOOL v169 = (pxrInternal__aapl__pxrReserved__::TfType *)v8 == a2 || v167 == a2;
            if (a4)
            {
              if (!v169)
              {
                uint64_t v170 = 0;
                v171 = (void *)v8;
                do
                {
                  uint64_t v172 = (pxrInternal__aapl__pxrReserved__::TfType *)v171;
                  v171 = v167;
                  uint64_t v173 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v167);
                  uint64_t v174 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v172);
                  int v175 = *(char *)(v174 + 23);
                  int v176 = *(char *)(v173 + 23);
                  if (v176 >= 0) {
                    size_t v177 = *(unsigned __int8 *)(v173 + 23);
                  }
                  else {
                    size_t v177 = *(void *)(v173 + 8);
                  }
                  if (v176 >= 0) {
                    uint64_t v178 = (const void *)v173;
                  }
                  else {
                    uint64_t v178 = *(const void **)v173;
                  }
                  if (v175 >= 0) {
                    size_t v179 = *(unsigned __int8 *)(v174 + 23);
                  }
                  else {
                    size_t v179 = *(void *)(v174 + 8);
                  }
                  if (v175 >= 0) {
                    uint64_t v180 = (const void *)v174;
                  }
                  else {
                    uint64_t v180 = *(const void **)v174;
                  }
                  if (v179 >= v177) {
                    size_t v181 = v177;
                  }
                  else {
                    size_t v181 = v179;
                  }
                  uint64_t result = memcmp(v178, v180, v181);
                  BOOL v182 = v177 < v179;
                  if (result) {
                    BOOL v182 = (int)result < 0;
                  }
                  if (v182)
                  {
                    uint64_t v316 = *v171;
                    uint64_t v183 = v170;
                    while (1)
                    {
                      *(void *)(v8 + v183 + 8) = *(void *)(v8 + v183);
                      if (!v183) {
                        break;
                      }
                      v183 -= 8;
                      uint64_t v184 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
                      uint64_t v185 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v183 + v8));
                      int v186 = *(char *)(v185 + 23);
                      int v187 = *(char *)(v184 + 23);
                      if (v187 >= 0) {
                        size_t v188 = *(unsigned __int8 *)(v184 + 23);
                      }
                      else {
                        size_t v188 = *(void *)(v184 + 8);
                      }
                      if (v187 >= 0) {
                        v189 = (const void *)v184;
                      }
                      else {
                        v189 = *(const void **)v184;
                      }
                      if (v186 >= 0) {
                        size_t v190 = *(unsigned __int8 *)(v185 + 23);
                      }
                      else {
                        size_t v190 = *(void *)(v185 + 8);
                      }
                      if (v186 >= 0) {
                        std::string::size_type v191 = (const void *)v185;
                      }
                      else {
                        std::string::size_type v191 = *(const void **)v185;
                      }
                      if (v190 >= v188) {
                        size_t v192 = v188;
                      }
                      else {
                        size_t v192 = v190;
                      }
                      uint64_t result = memcmp(v189, v191, v192);
                      BOOL v193 = v188 < v190;
                      if (result) {
                        BOOL v193 = (int)result < 0;
                      }
                      if (!v193)
                      {
                        v194 = (void *)(v8 + v183 + 8);
                        goto LABEL_330;
                      }
                    }
                    v194 = (void *)v8;
LABEL_330:
                    void *v194 = v316;
                  }
                  unint64_t v167 = (pxrInternal__aapl__pxrReserved__::TfType *)(v171 + 1);
                  v170 += 8;
                }
                while (v171 + 1 != (void *)a2);
              }
            }
            else if (!v169)
            {
              uint64_t v289 = (pxrInternal__aapl__pxrReserved__::TfType *)(v8 - 8);
              do
              {
                uint64_t v290 = (pxrInternal__aapl__pxrReserved__::TfType *)v8;
                unint64_t v8 = (unint64_t)v167;
                uint64_t v291 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v167);
                uint64_t v292 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v290);
                int v293 = *(char *)(v292 + 23);
                int v294 = *(char *)(v291 + 23);
                if (v294 >= 0) {
                  size_t v295 = *(unsigned __int8 *)(v291 + 23);
                }
                else {
                  size_t v295 = *(void *)(v291 + 8);
                }
                if (v294 >= 0) {
                  uint64_t v296 = (const void *)v291;
                }
                else {
                  uint64_t v296 = *(const void **)v291;
                }
                if (v293 >= 0) {
                  size_t v297 = *(unsigned __int8 *)(v292 + 23);
                }
                else {
                  size_t v297 = *(void *)(v292 + 8);
                }
                if (v293 >= 0) {
                  uint64_t v298 = (const void *)v292;
                }
                else {
                  uint64_t v298 = *(const void **)v292;
                }
                if (v297 >= v295) {
                  size_t v299 = v295;
                }
                else {
                  size_t v299 = v297;
                }
                uint64_t result = memcmp(v296, v298, v299);
                BOOL v300 = v295 < v297;
                if (result) {
                  BOOL v300 = (int)result < 0;
                }
                if (v300)
                {
                  uint64_t v316 = *(void *)v8;
                  uint64_t v301 = v289;
                  do
                  {
                    *((void *)v301 + 2) = *((void *)v301 + 1);
                    uint64_t v302 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
                    uint64_t v303 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v301);
                    int v304 = *(char *)(v303 + 23);
                    int v305 = *(char *)(v302 + 23);
                    if (v305 >= 0) {
                      size_t v306 = *(unsigned __int8 *)(v302 + 23);
                    }
                    else {
                      size_t v306 = *(void *)(v302 + 8);
                    }
                    if (v305 >= 0) {
                      unint64_t v307 = (const void *)v302;
                    }
                    else {
                      unint64_t v307 = *(const void **)v302;
                    }
                    if (v304 >= 0) {
                      size_t v308 = *(unsigned __int8 *)(v303 + 23);
                    }
                    else {
                      size_t v308 = *(void *)(v303 + 8);
                    }
                    if (v304 >= 0) {
                      v309 = (const void *)v303;
                    }
                    else {
                      v309 = *(const void **)v303;
                    }
                    if (v308 >= v306) {
                      size_t v310 = v306;
                    }
                    else {
                      size_t v310 = v308;
                    }
                    uint64_t result = memcmp(v307, v309, v310);
                    BOOL v311 = v306 < v308;
                    if (result) {
                      BOOL v311 = (int)result < 0;
                    }
                    uint64_t v301 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v301 - 8);
                  }
                  while (v311);
                  *((void *)v301 + 2) = v316;
                }
                unint64_t v167 = (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8);
                uint64_t v289 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v289 + 8);
              }
              while ((pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8) != a2);
            }
            return result;
          }
          if (!a3)
          {
            if ((pxrInternal__aapl__pxrReserved__::TfType *)v8 != a2)
            {
              unint64_t v312 = v12;
              int64_t v195 = (unint64_t)(v13 - 2) >> 1;
              int64_t v196 = v195;
              do
              {
                int64_t v197 = v196;
                if (v195 >= v196)
                {
                  uint64_t v198 = (2 * v196) | 1;
                  unint64_t v199 = v8 + 8 * v198;
                  if (2 * v196 + 2 < v13)
                  {
                    uint64_t v200 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8 * v198));
                    uint64_t v201 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v199 + 8));
                    int v202 = *(char *)(v201 + 23);
                    int v203 = *(char *)(v200 + 23);
                    if (v203 >= 0) {
                      size_t v204 = *(unsigned __int8 *)(v200 + 23);
                    }
                    else {
                      size_t v204 = *(void *)(v200 + 8);
                    }
                    if (v203 >= 0) {
                      v205 = (const void *)v200;
                    }
                    else {
                      v205 = *(const void **)v200;
                    }
                    if (v202 >= 0) {
                      size_t v206 = *(unsigned __int8 *)(v201 + 23);
                    }
                    else {
                      size_t v206 = *(void *)(v201 + 8);
                    }
                    if (v202 >= 0) {
                      v207 = (const void *)v201;
                    }
                    else {
                      v207 = *(const void **)v201;
                    }
                    if (v206 >= v204) {
                      size_t v208 = v204;
                    }
                    else {
                      size_t v208 = v206;
                    }
                    int v209 = memcmp(v205, v207, v208);
                    BOOL v210 = v204 < v206;
                    if (v209) {
                      BOOL v210 = v209 < 0;
                    }
                    if (v210)
                    {
                      v199 += 8;
                      uint64_t v198 = 2 * v197 + 2;
                    }
                  }
                  uint64_t v211 = (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8 * v197);
                  uint64_t v212 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)v199);
                  uint64_t v213 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v211);
                  int v214 = *(char *)(v213 + 23);
                  int v215 = *(char *)(v212 + 23);
                  if (v215 >= 0) {
                    size_t v216 = *(unsigned __int8 *)(v212 + 23);
                  }
                  else {
                    size_t v216 = *(void *)(v212 + 8);
                  }
                  if (v215 >= 0) {
                    v217 = (const void *)v212;
                  }
                  else {
                    v217 = *(const void **)v212;
                  }
                  if (v214 >= 0) {
                    size_t v218 = *(unsigned __int8 *)(v213 + 23);
                  }
                  else {
                    size_t v218 = *(void *)(v213 + 8);
                  }
                  if (v214 >= 0) {
                    long long v219 = (const void *)v213;
                  }
                  else {
                    long long v219 = *(const void **)v213;
                  }
                  if (v218 >= v216) {
                    size_t v220 = v216;
                  }
                  else {
                    size_t v220 = v218;
                  }
                  uint64_t result = memcmp(v217, v219, v220);
                  BOOL v221 = v216 < v218;
                  if (result) {
                    BOOL v221 = (int)result < 0;
                  }
                  if (!v221)
                  {
                    int64_t v313 = v197;
                    uint64_t v316 = *(void *)v211;
                    do
                    {
                      v222 = (pxrInternal__aapl__pxrReserved__::TfType *)v199;
                      *(void *)uint64_t v211 = *(void *)v199;
                      if (v195 < v198) {
                        break;
                      }
                      uint64_t v223 = (2 * v198) | 1;
                      unint64_t v199 = v8 + 8 * v223;
                      uint64_t v224 = 2 * v198 + 2;
                      if (v224 < v13)
                      {
                        uint64_t v225 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8 * v223));
                        uint64_t v226 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v199 + 8));
                        int v227 = *(char *)(v226 + 23);
                        int v228 = *(char *)(v225 + 23);
                        int64_t v229 = v195;
                        if (v228 >= 0) {
                          size_t v230 = *(unsigned __int8 *)(v225 + 23);
                        }
                        else {
                          size_t v230 = *(void *)(v225 + 8);
                        }
                        if (v228 >= 0) {
                          v231 = (const void *)v225;
                        }
                        else {
                          v231 = *(const void **)v225;
                        }
                        if (v227 >= 0) {
                          size_t v232 = *(unsigned __int8 *)(v226 + 23);
                        }
                        else {
                          size_t v232 = *(void *)(v226 + 8);
                        }
                        if (v227 >= 0) {
                          v233 = (const void *)v226;
                        }
                        else {
                          v233 = *(const void **)v226;
                        }
                        if (v232 >= v230) {
                          size_t v234 = v230;
                        }
                        else {
                          size_t v234 = v232;
                        }
                        int v235 = memcmp(v231, v233, v234);
                        BOOL v4 = v230 >= v232;
                        int64_t v195 = v229;
                        BOOL v236 = !v4;
                        if (v235) {
                          BOOL v236 = v235 < 0;
                        }
                        if (v236)
                        {
                          v199 += 8;
                          uint64_t v223 = v224;
                        }
                      }
                      uint64_t v237 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)v199);
                      uint64_t v238 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
                      int v239 = *(char *)(v238 + 23);
                      int v240 = *(char *)(v237 + 23);
                      if (v240 >= 0) {
                        size_t v241 = *(unsigned __int8 *)(v237 + 23);
                      }
                      else {
                        size_t v241 = *(void *)(v237 + 8);
                      }
                      if (v240 >= 0) {
                        uint64_t v242 = (const void *)v237;
                      }
                      else {
                        uint64_t v242 = *(const void **)v237;
                      }
                      if (v239 >= 0) {
                        size_t v243 = *(unsigned __int8 *)(v238 + 23);
                      }
                      else {
                        size_t v243 = *(void *)(v238 + 8);
                      }
                      if (v239 >= 0) {
                        v244 = (const void *)v238;
                      }
                      else {
                        v244 = *(const void **)v238;
                      }
                      if (v243 >= v241) {
                        size_t v245 = v241;
                      }
                      else {
                        size_t v245 = v243;
                      }
                      uint64_t result = memcmp(v242, v244, v245);
                      BOOL v246 = v241 < v243;
                      if (result) {
                        BOOL v246 = (int)result < 0;
                      }
                      uint64_t v211 = v222;
                      uint64_t v198 = v223;
                    }
                    while (!v246);
                    *(void *)v222 = v316;
                    int64_t v197 = v313;
                  }
                }
                int64_t v196 = v197 - 1;
              }
              while (v197);
              uint64_t v247 = v312 >> 3;
              do
              {
                uint64_t v248 = 0;
                uint64_t v314 = *(void *)v8;
                v249 = (void *)v8;
                do
                {
                  uint64_t v250 = (uint64_t)&v249[v248 + 1];
                  uint64_t v251 = (2 * v248) | 1;
                  uint64_t v252 = 2 * v248 + 2;
                  if (v252 < v247)
                  {
                    uint64_t v253 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v249[v248 + 1]);
                    uint64_t v254 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v250 + 8));
                    int v255 = *(char *)(v254 + 23);
                    int v256 = *(char *)(v253 + 23);
                    if (v256 >= 0) {
                      size_t v257 = *(unsigned __int8 *)(v253 + 23);
                    }
                    else {
                      size_t v257 = *(void *)(v253 + 8);
                    }
                    if (v256 >= 0) {
                      v258 = (const void *)v253;
                    }
                    else {
                      v258 = *(const void **)v253;
                    }
                    if (v255 >= 0) {
                      size_t v259 = *(unsigned __int8 *)(v254 + 23);
                    }
                    else {
                      size_t v259 = *(void *)(v254 + 8);
                    }
                    if (v255 >= 0) {
                      v260 = (const void *)v254;
                    }
                    else {
                      v260 = *(const void **)v254;
                    }
                    if (v259 >= v257) {
                      size_t v261 = v257;
                    }
                    else {
                      size_t v261 = v259;
                    }
                    uint64_t result = memcmp(v258, v260, v261);
                    BOOL v262 = v257 < v259;
                    if (result) {
                      BOOL v262 = (int)result < 0;
                    }
                    if (v262)
                    {
                      v250 += 8;
                      uint64_t v251 = v252;
                    }
                  }
                  void *v249 = *(void *)v250;
                  v249 = (void *)v250;
                  uint64_t v248 = v251;
                }
                while (v251 <= (uint64_t)((unint64_t)(v247 - 2) >> 1));
                uint64_t v263 = (uint64_t *)((char *)a2 - 8);
                if ((pxrInternal__aapl__pxrReserved__::TfType *)v250 == (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8))
                {
                  *(void *)uint64_t v250 = v314;
                }
                else
                {
                  *(void *)uint64_t v250 = *v263;
                  *uint64_t v263 = v314;
                  uint64_t v264 = v250 - v8 + 8;
                  if (v264 >= 9)
                  {
                    unint64_t v265 = (((unint64_t)v264 >> 3) - 2) >> 1;
                    uint64_t v266 = (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8 * v265);
                    uint64_t v267 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v266);
                    uint64_t v268 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)v250);
                    int v269 = *(char *)(v268 + 23);
                    int v270 = *(char *)(v267 + 23);
                    if (v270 >= 0) {
                      size_t v271 = *(unsigned __int8 *)(v267 + 23);
                    }
                    else {
                      size_t v271 = *(void *)(v267 + 8);
                    }
                    if (v270 >= 0) {
                      std::string::size_type v272 = (const void *)v267;
                    }
                    else {
                      std::string::size_type v272 = *(const void **)v267;
                    }
                    if (v269 >= 0) {
                      size_t v273 = *(unsigned __int8 *)(v268 + 23);
                    }
                    else {
                      size_t v273 = *(void *)(v268 + 8);
                    }
                    if (v269 >= 0) {
                      v274 = (const void *)v268;
                    }
                    else {
                      v274 = *(const void **)v268;
                    }
                    if (v273 >= v271) {
                      size_t v275 = v271;
                    }
                    else {
                      size_t v275 = v273;
                    }
                    uint64_t result = memcmp(v272, v274, v275);
                    BOOL v276 = v271 < v273;
                    if (result) {
                      BOOL v276 = (int)result < 0;
                    }
                    if (v276)
                    {
                      uint64_t v316 = *(void *)v250;
                      do
                      {
                        uint64_t v277 = v266;
                        *(void *)uint64_t v250 = *(void *)v266;
                        if (!v265) {
                          break;
                        }
                        unint64_t v265 = (v265 - 1) >> 1;
                        uint64_t v266 = (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8 * v265);
                        uint64_t v278 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v266);
                        uint64_t v279 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
                        int v280 = *(char *)(v279 + 23);
                        int v281 = *(char *)(v278 + 23);
                        if (v281 >= 0) {
                          size_t v282 = *(unsigned __int8 *)(v278 + 23);
                        }
                        else {
                          size_t v282 = *(void *)(v278 + 8);
                        }
                        if (v281 >= 0) {
                          uint64_t v283 = (const void *)v278;
                        }
                        else {
                          uint64_t v283 = *(const void **)v278;
                        }
                        if (v280 >= 0) {
                          size_t v284 = *(unsigned __int8 *)(v279 + 23);
                        }
                        else {
                          size_t v284 = *(void *)(v279 + 8);
                        }
                        if (v280 >= 0) {
                          uint64_t v285 = (const void *)v279;
                        }
                        else {
                          uint64_t v285 = *(const void **)v279;
                        }
                        if (v284 >= v282) {
                          size_t v286 = v282;
                        }
                        else {
                          size_t v286 = v284;
                        }
                        uint64_t result = memcmp(v283, v285, v286);
                        BOOL v287 = v282 < v284;
                        if (result) {
                          BOOL v287 = (int)result < 0;
                        }
                        uint64_t v250 = (uint64_t)v277;
                      }
                      while (v287);
                      *(void *)uint64_t v277 = v316;
                    }
                  }
                }
                a2 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8);
              }
              while (v247-- > 2);
            }
            return result;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          uint64_t v15 = (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8 * ((unint64_t)v13 >> 1));
          if ((unint64_t)v12 < 0x401)
          {
            sub_21696EF6C(v15, (pxrInternal__aapl__pxrReserved__::TfType *)v8, v9);
          }
          else
          {
            sub_21696EF6C((pxrInternal__aapl__pxrReserved__::TfType *)v8, v15, v9);
            sub_21696EF6C((pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v15 - 8), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 16));
            sub_21696EF6C((pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 16), (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8 + 8 * v14), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 24));
            uint64_t v11 = a2;
            sub_21696EF6C((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v15 - 8), v15, (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8 + 8 * v14));
            uint64_t v16 = *(void *)v8;
            *(void *)unint64_t v8 = *(void *)v15;
            *(void *)uint64_t v15 = v16;
          }
          --a3;
          if (a4) {
            break;
          }
          uint64_t v17 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v8 - 8));
          uint64_t v18 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)v8);
          int v19 = *(char *)(v18 + 23);
          int v20 = *(char *)(v17 + 23);
          if (v20 >= 0) {
            size_t v21 = *(unsigned __int8 *)(v17 + 23);
          }
          else {
            size_t v21 = *(void *)(v17 + 8);
          }
          if (v20 >= 0) {
            uint64_t v22 = (const void *)v17;
          }
          else {
            uint64_t v22 = *(const void **)v17;
          }
          if (v19 >= 0) {
            size_t v23 = *(unsigned __int8 *)(v18 + 23);
          }
          else {
            size_t v23 = *(void *)(v18 + 8);
          }
          if (v19 >= 0) {
            uint64_t v24 = (const void *)v18;
          }
          else {
            uint64_t v24 = *(const void **)v18;
          }
          if (v23 >= v21) {
            size_t v25 = v21;
          }
          else {
            size_t v25 = v23;
          }
          int v26 = memcmp(v22, v24, v25);
          BOOL v27 = v21 < v23;
          if (v26) {
            BOOL v27 = v26 < 0;
          }
          if (v27) {
            break;
          }
          uint64_t v316 = *(void *)v8;
          uint64_t v91 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
          uint64_t v92 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
          int v93 = *(char *)(v92 + 23);
          int v94 = *(char *)(v91 + 23);
          if (v94 >= 0) {
            size_t v95 = *(unsigned __int8 *)(v91 + 23);
          }
          else {
            size_t v95 = *(void *)(v91 + 8);
          }
          if (v94 >= 0) {
            v96 = (const void *)v91;
          }
          else {
            v96 = *(const void **)v91;
          }
          if (v93 >= 0) {
            size_t v97 = *(unsigned __int8 *)(v92 + 23);
          }
          else {
            size_t v97 = *(void *)(v92 + 8);
          }
          if (v93 >= 0) {
            int v98 = (const void *)v92;
          }
          else {
            int v98 = *(const void **)v92;
          }
          if (v97 >= v95) {
            size_t v99 = v95;
          }
          else {
            size_t v99 = v97;
          }
          uint64_t result = memcmp(v96, v98, v99);
          BOOL v100 = v95 < v97;
          if (result) {
            BOOL v100 = (int)result < 0;
          }
          if (v100)
          {
            uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfType *)v8;
            do
            {
              uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v10 + 8);
              uint64_t v101 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
              uint64_t v102 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v10);
              int v103 = *(char *)(v102 + 23);
              int v104 = *(char *)(v101 + 23);
              if (v104 >= 0) {
                size_t v105 = *(unsigned __int8 *)(v101 + 23);
              }
              else {
                size_t v105 = *(void *)(v101 + 8);
              }
              if (v104 >= 0) {
                uint64_t v106 = (const void *)v101;
              }
              else {
                uint64_t v106 = *(const void **)v101;
              }
              if (v103 >= 0) {
                size_t v107 = *(unsigned __int8 *)(v102 + 23);
              }
              else {
                size_t v107 = *(void *)(v102 + 8);
              }
              if (v103 >= 0) {
                unint64_t v108 = (const void *)v102;
              }
              else {
                unint64_t v108 = *(const void **)v102;
              }
              if (v107 >= v105) {
                size_t v109 = v105;
              }
              else {
                size_t v109 = v107;
              }
              uint64_t result = memcmp(v106, v108, v109);
              BOOL v110 = v105 < v107;
              if (result) {
                BOOL v110 = (int)result < 0;
              }
            }
            while (!v110);
          }
          else
          {
            v111 = (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8);
            do
            {
              uint64_t v10 = v111;
              if (v111 >= v11) {
                break;
              }
              uint64_t v112 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
              uint64_t v113 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v10);
              int v114 = *(char *)(v113 + 23);
              int v115 = *(char *)(v112 + 23);
              if (v115 >= 0) {
                size_t v116 = *(unsigned __int8 *)(v112 + 23);
              }
              else {
                size_t v116 = *(void *)(v112 + 8);
              }
              if (v115 >= 0) {
                v117 = (const void *)v112;
              }
              else {
                v117 = *(const void **)v112;
              }
              if (v114 >= 0) {
                size_t v118 = *(unsigned __int8 *)(v113 + 23);
              }
              else {
                size_t v118 = *(void *)(v113 + 8);
              }
              if (v114 >= 0) {
                v119 = (const void *)v113;
              }
              else {
                v119 = *(const void **)v113;
              }
              if (v118 >= v116) {
                size_t v120 = v116;
              }
              else {
                size_t v120 = v118;
              }
              uint64_t result = memcmp(v117, v119, v120);
              BOOL v121 = (int)result < 0;
              if (!result) {
                BOOL v121 = v116 < v118;
              }
              v111 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v10 + 8);
            }
            while (!v121);
          }
          uint64_t v122 = v11;
          if (v10 < v11)
          {
            uint64_t v122 = v11;
            do
            {
              uint64_t v122 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v122 - 8);
              uint64_t v123 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
              uint64_t v124 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v122);
              int v125 = *(char *)(v124 + 23);
              int v126 = *(char *)(v123 + 23);
              if (v126 >= 0) {
                size_t v127 = *(unsigned __int8 *)(v123 + 23);
              }
              else {
                size_t v127 = *(void *)(v123 + 8);
              }
              if (v126 >= 0) {
                unint64_t v128 = (const void *)v123;
              }
              else {
                unint64_t v128 = *(const void **)v123;
              }
              if (v125 >= 0) {
                size_t v129 = *(unsigned __int8 *)(v124 + 23);
              }
              else {
                size_t v129 = *(void *)(v124 + 8);
              }
              if (v125 >= 0) {
                v130 = (const void *)v124;
              }
              else {
                v130 = *(const void **)v124;
              }
              if (v129 >= v127) {
                size_t v131 = v127;
              }
              else {
                size_t v131 = v129;
              }
              uint64_t result = memcmp(v128, v130, v131);
              BOOL v132 = v127 < v129;
              if (result) {
                BOOL v132 = (int)result < 0;
              }
            }
            while (v132);
          }
          while (v10 < v122)
          {
            uint64_t v133 = *(void *)v10;
            *(void *)uint64_t v10 = *(void *)v122;
            *(void *)uint64_t v122 = v133;
            do
            {
              uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v10 + 8);
              uint64_t v134 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
              uint64_t v135 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v10);
              int v136 = *(char *)(v135 + 23);
              int v137 = *(char *)(v134 + 23);
              if (v137 >= 0) {
                size_t v138 = *(unsigned __int8 *)(v134 + 23);
              }
              else {
                size_t v138 = *(void *)(v134 + 8);
              }
              if (v137 >= 0) {
                v139 = (const void *)v134;
              }
              else {
                v139 = *(const void **)v134;
              }
              if (v136 >= 0) {
                size_t v140 = *(unsigned __int8 *)(v135 + 23);
              }
              else {
                size_t v140 = *(void *)(v135 + 8);
              }
              if (v136 >= 0) {
                int v141 = (const void *)v135;
              }
              else {
                int v141 = *(const void **)v135;
              }
              if (v140 >= v138) {
                size_t v142 = v138;
              }
              else {
                size_t v142 = v140;
              }
              int v143 = memcmp(v139, v141, v142);
              BOOL v144 = v138 < v140;
              if (v143) {
                BOOL v144 = v143 < 0;
              }
            }
            while (!v144);
            do
            {
              uint64_t v122 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v122 - 8);
              uint64_t v145 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
              uint64_t v146 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v122);
              int v147 = *(char *)(v146 + 23);
              int v148 = *(char *)(v145 + 23);
              if (v148 >= 0) {
                size_t v149 = *(unsigned __int8 *)(v145 + 23);
              }
              else {
                size_t v149 = *(void *)(v145 + 8);
              }
              if (v148 >= 0) {
                v150 = (const void *)v145;
              }
              else {
                v150 = *(const void **)v145;
              }
              if (v147 >= 0) {
                size_t v151 = *(unsigned __int8 *)(v146 + 23);
              }
              else {
                size_t v151 = *(void *)(v146 + 8);
              }
              if (v147 >= 0) {
                uint64_t v152 = (const void *)v146;
              }
              else {
                uint64_t v152 = *(const void **)v146;
              }
              if (v151 >= v149) {
                size_t v153 = v149;
              }
              else {
                size_t v153 = v151;
              }
              uint64_t result = memcmp(v150, v152, v153);
              BOOL v154 = v149 < v151;
              if (result) {
                BOOL v154 = (int)result < 0;
              }
            }
            while (v154);
          }
          unint64_t v155 = (uint64_t *)((char *)v10 - 8);
          BOOL v4 = (unint64_t)v10 - 8 >= v8;
          BOOL v5 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v10 - 8) == (pxrInternal__aapl__pxrReserved__::TfType *)v8;
          if ((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v10 - 8) != (pxrInternal__aapl__pxrReserved__::TfType *)v8) {
            *(void *)unint64_t v8 = *v155;
          }
          a4 = 0;
          *unint64_t v155 = v316;
        }
        uint64_t v28 = 0;
        uint64_t v316 = *(void *)v8;
        do
        {
          v28 += 8;
          uint64_t v29 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v28 + v8));
          uint64_t v30 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
          int v31 = *(char *)(v30 + 23);
          int v32 = *(char *)(v29 + 23);
          if (v32 >= 0) {
            size_t v33 = *(unsigned __int8 *)(v29 + 23);
          }
          else {
            size_t v33 = *(void *)(v29 + 8);
          }
          if (v32 >= 0) {
            char v34 = (const void *)v29;
          }
          else {
            char v34 = *(const void **)v29;
          }
          if (v31 >= 0) {
            size_t v35 = *(unsigned __int8 *)(v30 + 23);
          }
          else {
            size_t v35 = *(void *)(v30 + 8);
          }
          if (v31 >= 0) {
            uint64_t v36 = (const void *)v30;
          }
          else {
            uint64_t v36 = *(const void **)v30;
          }
          if (v35 >= v33) {
            size_t v37 = v33;
          }
          else {
            size_t v37 = v35;
          }
          int v38 = memcmp(v34, v36, v37);
          BOOL v39 = v33 < v35;
          if (v38) {
            BOOL v39 = v38 < 0;
          }
        }
        while (v39);
        uint64_t v40 = (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + v28);
        unint64_t v41 = v11;
        if (v28 == 8)
        {
          unint64_t v41 = v11;
          do
          {
            if (v40 >= v41) {
              break;
            }
            unint64_t v41 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v41 - 8);
            uint64_t v53 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v41);
            uint64_t v54 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
            int v55 = *(char *)(v54 + 23);
            int v56 = *(char *)(v53 + 23);
            if (v56 >= 0) {
              size_t v57 = *(unsigned __int8 *)(v53 + 23);
            }
            else {
              size_t v57 = *(void *)(v53 + 8);
            }
            if (v56 >= 0) {
              unint64_t v58 = (const void *)v53;
            }
            else {
              unint64_t v58 = *(const void **)v53;
            }
            if (v55 >= 0) {
              size_t v59 = *(unsigned __int8 *)(v54 + 23);
            }
            else {
              size_t v59 = *(void *)(v54 + 8);
            }
            if (v55 >= 0) {
              uint64_t v60 = (const void *)v54;
            }
            else {
              uint64_t v60 = *(const void **)v54;
            }
            if (v59 >= v57) {
              size_t v61 = v57;
            }
            else {
              size_t v61 = v59;
            }
            int v62 = memcmp(v58, v60, v61);
            BOOL v63 = v57 < v59;
            if (v62) {
              BOOL v63 = v62 < 0;
            }
          }
          while (!v63);
        }
        else
        {
          do
          {
            unint64_t v41 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v41 - 8);
            uint64_t v42 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v41);
            uint64_t v43 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
            int v44 = *(char *)(v43 + 23);
            int v45 = *(char *)(v42 + 23);
            if (v45 >= 0) {
              size_t v46 = *(unsigned __int8 *)(v42 + 23);
            }
            else {
              size_t v46 = *(void *)(v42 + 8);
            }
            if (v45 >= 0) {
              char v47 = (const void *)v42;
            }
            else {
              char v47 = *(const void **)v42;
            }
            if (v44 >= 0) {
              size_t v48 = *(unsigned __int8 *)(v43 + 23);
            }
            else {
              size_t v48 = *(void *)(v43 + 8);
            }
            if (v44 >= 0) {
              uint64_t v49 = (const void *)v43;
            }
            else {
              uint64_t v49 = *(const void **)v43;
            }
            if (v48 >= v46) {
              size_t v50 = v46;
            }
            else {
              size_t v50 = v48;
            }
            int v51 = memcmp(v47, v49, v50);
            BOOL v52 = v46 < v48;
            if (v51) {
              BOOL v52 = v51 < 0;
            }
          }
          while (!v52);
        }
        if (v40 >= v41)
        {
          v89 = (uint64_t *)((char *)v40 - 8);
        }
        else
        {
          int v64 = v40;
          uint64_t v65 = v41;
          do
          {
            uint64_t v66 = *(void *)v64;
            *(void *)int v64 = *(void *)v65;
            *(void *)uint64_t v65 = v66;
            do
            {
              int v64 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v64 + 8);
              uint64_t v67 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v64);
              uint64_t v68 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
              int v69 = *(char *)(v68 + 23);
              int v70 = *(char *)(v67 + 23);
              if (v70 >= 0) {
                size_t v71 = *(unsigned __int8 *)(v67 + 23);
              }
              else {
                size_t v71 = *(void *)(v67 + 8);
              }
              if (v70 >= 0) {
                uint64_t v72 = (const void *)v67;
              }
              else {
                uint64_t v72 = *(const void **)v67;
              }
              if (v69 >= 0) {
                size_t v73 = *(unsigned __int8 *)(v68 + 23);
              }
              else {
                size_t v73 = *(void *)(v68 + 8);
              }
              if (v69 >= 0) {
                char v74 = (const void *)v68;
              }
              else {
                char v74 = *(const void **)v68;
              }
              if (v73 >= v71) {
                size_t v75 = v71;
              }
              else {
                size_t v75 = v73;
              }
              int v76 = memcmp(v72, v74, v75);
              BOOL v77 = v71 < v73;
              if (v76) {
                BOOL v77 = v76 < 0;
              }
            }
            while (v77);
            do
            {
              uint64_t v65 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v65 - 8);
              uint64_t v78 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v65);
              uint64_t v79 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
              int v80 = *(char *)(v79 + 23);
              int v81 = *(char *)(v78 + 23);
              if (v81 >= 0) {
                size_t v82 = *(unsigned __int8 *)(v78 + 23);
              }
              else {
                size_t v82 = *(void *)(v78 + 8);
              }
              if (v81 >= 0) {
                unint64_t v83 = (const void *)v78;
              }
              else {
                unint64_t v83 = *(const void **)v78;
              }
              if (v80 >= 0) {
                size_t v84 = *(unsigned __int8 *)(v79 + 23);
              }
              else {
                size_t v84 = *(void *)(v79 + 8);
              }
              if (v80 >= 0) {
                unsigned int v85 = (const void *)v79;
              }
              else {
                unsigned int v85 = *(const void **)v79;
              }
              if (v84 >= v82) {
                size_t v86 = v82;
              }
              else {
                size_t v86 = v84;
              }
              int v87 = memcmp(v83, v85, v86);
              BOOL v88 = v82 < v84;
              if (v87) {
                BOOL v88 = v87 < 0;
              }
            }
            while (!v88);
          }
          while (v64 < v65);
          v89 = (uint64_t *)((char *)v64 - 8);
        }
        if (v89 != (uint64_t *)v8) {
          *(void *)unint64_t v8 = *v89;
        }
        uint64_t *v89 = v316;
        if (v40 >= v41) {
          break;
        }
LABEL_135:
        uint64_t result = sub_216BAE13C(v8, v89, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfType *)(v89 + 1);
      }
      BOOL v90 = sub_216BAF114((uint64_t *)v8, (pxrInternal__aapl__pxrReserved__::TfType *)v89);
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfType *)(v89 + 1);
      uint64_t result = sub_216BAF114(v89 + 1, a2);
      if (result) {
        break;
      }
      if (!v90) {
        goto LABEL_135;
      }
    }
    a2 = (pxrInternal__aapl__pxrReserved__::TfType *)v89;
    if (!v90) {
      continue;
    }
    return result;
  }
}

BOOL sub_216BAF114(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  uint64_t v4 = (a2 - (pxrInternal__aapl__pxrReserved__::TfType *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (uint64_t *)((char *)a2 - 8);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8));
      uint64_t v8 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)a1);
      int v9 = *(char *)(v8 + 23);
      int v10 = *(char *)(TypeName + 23);
      if (v10 >= 0) {
        size_t v11 = *(unsigned __int8 *)(TypeName + 23);
      }
      else {
        size_t v11 = *(void *)(TypeName + 8);
      }
      if (v10 >= 0) {
        uint64_t v12 = (const void *)TypeName;
      }
      else {
        uint64_t v12 = *(const void **)TypeName;
      }
      if (v9 >= 0) {
        size_t v13 = *(unsigned __int8 *)(v8 + 23);
      }
      else {
        size_t v13 = *(void *)(v8 + 8);
      }
      if (v9 >= 0) {
        unint64_t v14 = (const void *)v8;
      }
      else {
        unint64_t v14 = *(const void **)v8;
      }
      if (v13 >= v11) {
        size_t v15 = v11;
      }
      else {
        size_t v15 = v13;
      }
      int v16 = memcmp(v12, v14, v15);
      BOOL v17 = v11 < v13;
      if (v16) {
        BOOL v17 = v16 < 0;
      }
      if (v17)
      {
        uint64_t v18 = *a1;
        *a1 = *v6;
        *uint64_t v6 = v18;
      }
      return 1;
    case 3:
      sub_21696EF6C((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 1), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8));
      return 1;
    case 4:
      sub_21696F48C((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 1), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 2), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8));
      return 1;
    case 5:
      sub_21696ED20((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 1), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 2), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 3), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8));
      return 1;
    default:
      int v19 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 2);
      sub_21696EF6C((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 1), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 2));
      int v20 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 3);
      if (a1 + 3 == (uint64_t *)a2) {
        return 1;
      }
      uint64_t v21 = 0;
      int v22 = 0;
      break;
  }
  while (1)
  {
    uint64_t v23 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v20);
    uint64_t v24 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v19);
    int v25 = *(char *)(v24 + 23);
    int v26 = *(char *)(v23 + 23);
    if (v26 >= 0) {
      size_t v27 = *(unsigned __int8 *)(v23 + 23);
    }
    else {
      size_t v27 = *(void *)(v23 + 8);
    }
    if (v26 >= 0) {
      uint64_t v28 = (const void *)v23;
    }
    else {
      uint64_t v28 = *(const void **)v23;
    }
    if (v25 >= 0) {
      size_t v29 = *(unsigned __int8 *)(v24 + 23);
    }
    else {
      size_t v29 = *(void *)(v24 + 8);
    }
    if (v25 >= 0) {
      uint64_t v30 = (const void *)v24;
    }
    else {
      uint64_t v30 = *(const void **)v24;
    }
    if (v29 >= v27) {
      size_t v31 = v27;
    }
    else {
      size_t v31 = v29;
    }
    int v32 = memcmp(v28, v30, v31);
    BOOL v33 = v27 < v29;
    if (v32) {
      BOOL v33 = v32 < 0;
    }
    if (v33)
    {
      uint64_t v47 = *(void *)v20;
      uint64_t v34 = v21;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v34 + 24) = *(uint64_t *)((char *)a1 + v34 + 16);
        if (v34 == -16) {
          break;
        }
        uint64_t v35 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v47);
        uint64_t v36 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)((char *)a1 + v34 + 8));
        int v37 = *(char *)(v36 + 23);
        int v38 = *(char *)(v35 + 23);
        if (v38 >= 0) {
          size_t v39 = *(unsigned __int8 *)(v35 + 23);
        }
        else {
          size_t v39 = *(void *)(v35 + 8);
        }
        if (v38 >= 0) {
          uint64_t v40 = (const void *)v35;
        }
        else {
          uint64_t v40 = *(const void **)v35;
        }
        if (v37 >= 0) {
          size_t v41 = *(unsigned __int8 *)(v36 + 23);
        }
        else {
          size_t v41 = *(void *)(v36 + 8);
        }
        if (v37 >= 0) {
          uint64_t v42 = (const void *)v36;
        }
        else {
          uint64_t v42 = *(const void **)v36;
        }
        if (v41 >= v39) {
          size_t v43 = v39;
        }
        else {
          size_t v43 = v41;
        }
        int v44 = memcmp(v40, v42, v43);
        BOOL v45 = v39 < v41;
        if (v44) {
          BOOL v45 = v44 < 0;
        }
        v34 -= 8;
        if (!v45)
        {
          size_t v46 = (uint64_t *)((char *)a1 + v34 + 24);
          goto LABEL_63;
        }
      }
      size_t v46 = a1;
LABEL_63:
      *size_t v46 = v47;
      if (++v22 == 8) {
        return (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v20 + 8) == a2;
      }
    }
    int v19 = v20;
    v21 += 8;
    int v20 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v20 + 8);
    if (v20 == a2) {
      return 1;
    }
  }
}

uint64_t sub_216BAF3F0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216BAF468((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216BAF468(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  uint64_t v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    int v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216BAF500((uint64_t)v13);
  return v11;
}

uint64_t sub_216BAF500(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216BAF538((void *)a1);
  }
  return a1;
}

void *sub_216BAF538(void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    void *v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **sub_216BAF5A0(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *sub_216BAF5D8(void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void *sub_216BAF64C(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = operator new(0xF0uLL);
  *uint64_t v6 = 0;
  v6[1] = 0;
  sub_216BAF710((uint64_t)(v6 + 2), a2, a3);
  v6[1] = bswap64(0x9E3779B97F4A7C55 * (v6[2] & 0xFFFFFFFFFFFFFFF8));
  return sub_2168D22B4(a1, v6);
}

void sub_216BAF6F4(_Unwind_Exception *a1)
{
  sub_216BAF834(v2, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216BAF710(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 8) = *(void *)a3;
  *(void *)a3 = 0;
  uint64_t v6 = *(void *)(a3 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a3 + 16);
  *(void *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a3 + 24);
  *(void *)(a1 + 48) = *(void *)(a3 + 40);
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 4sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a1 + 56) = *(void *)(a3 + 48);
  *(void *)(a3 + 48) = 0;
  *(void *)(a1 + 64) = *(void *)(a3 + 56);
  *(void *)(a3 + 56) = 0;
  *(void *)(a1 + 72) = *(void *)(a3 + 64);
  *(void *)(a3 + 64) = 0;
  long long v8 = *(_OWORD *)(a3 + 72);
  *(void *)(a1 + 96) = *(void *)(a3 + 88);
  *(_OWORD *)(a1 + 8sub_2168EBBB8(&a9, 0) = v8;
  *(void *)(a3 + 8sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 72) = 0;
  long long v9 = *(_OWORD *)(a3 + 96);
  *(void *)(a1 + 12sub_2168EBBB8(&a9, 0) = *(void *)(a3 + 112);
  *(_OWORD *)(a1 + 104) = v9;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 96) = 0;
  long long v10 = *(_OWORD *)(a3 + 120);
  *(void *)(a1 + 144) = *(void *)(a3 + 136);
  *(_OWORD *)(a1 + 128) = v10;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 12sub_2168EBBB8(&a9, 0) = 0;
  sub_2168C06A4(a1 + 152, (uint64_t *)(a3 + 144));
  long long v11 = *(_OWORD *)(a3 + 184);
  *(void *)(a1 + 208) = *(void *)(a3 + 200);
  *(_OWORD *)(a1 + 192) = v11;
  *(void *)(a3 + 184) = 0;
  *(void *)(a3 + 192) = 0;
  *(void *)(a3 + 20sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 216) = *(void *)(a3 + 208);
  *(void *)(a3 + 208) = 0;
  return a1;
}

void sub_216BAF834(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_216BA5AC4((uint64_t)(a2 + 3));
    uint64_t v3 = a2[2];
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

uint64_t sub_216BAF8A4(void *a1, uint64_t a2, void *a3)
{
  sub_216BAF904((uint64_t)a1, a2, a3, (uint64_t)v5);
  return sub_21699D558(a1, v5[0]);
}

void sub_216BAF8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_2168517F0((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_216BAF904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  long long v8 = (char *)operator new(0x30uLL);
  long long v9 = v8;
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  long long v10 = (pxrInternal__aapl__pxrReserved__ *)(v8 + 16);
  *(void *)long long v8 = 0;
  *((void *)v8 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_216778F24(v8 + 16, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long v10 = *(_OWORD *)a2;
    *((void *)v8 + 4) = *(void *)(a2 + 16);
  }
  *((void *)v9 + 5) = *a3;
  *(unsigned char *)(a4 + 16) = 1;
  uint64_t v15 = 0;
  char v16 = 0;
  int v11 = v9[39];
  if (v11 >= 0) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__ *)*((void *)v9 + 2);
  }
  if (v11 >= 0) {
    size_t v13 = (char *)v9[39];
  }
  else {
    size_t v13 = (char *)*((void *)v9 + 3);
  }
  unint64_t result = pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v15, v12, v13);
  *((void *)v9 + 1) = bswap64(0x9E3779B97F4A7C55 * v15);
  return result;
}

void sub_216BAF9EC(_Unwind_Exception *a1)
{
  void *v2 = 0;
  sub_2168517F0(v3, v1);
  _Unwind_Resume(a1);
}

void *sub_216BAFA08(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = a2[1] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55 * (v4 + ((((v4 + v3) | 1) * (v4 + v3)) >> 1)));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  long long v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  unint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v5 == v10)
      {
        if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v3 && (result[3] & 0xFFFFFFFFFFFFFFF8) == v4) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      unint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *sub_216BAFB00(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v8 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = a2[1] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * (v9 + ((((v9 + v8) | 1) * (v9 + v8)) >> 1)));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    size_t v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      char v14 = (void *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if ((v14[2] & 0xFFFFFFFFFFFFFFF8) == v8 && (v14[3] & 0xFFFFFFFFFFFFFFF8) == v9) {
              return v14;
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11) {
                v15 %= v11;
              }
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          char v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  uint64_t v16 = a1 + 16;
  BOOL v17 = operator new(0x28uLL);
  v28[0] = v17;
  v28[1] = a1 + 16;
  *BOOL v17 = 0;
  v17[1] = v10;
  *((_OWORD *)v17 + 1) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v18 = *a4;
  *a4 = 0;
  v17[4] = v18;
  char v29 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_21678A04C(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  int v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)v28[0] = *v25;
    void *v25 = v28[0];
  }
  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v4) = v16;
    if (*(void *)v28[0])
    {
      unint64_t v26 = *(void *)(*(void *)v28[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11) {
          v26 %= v11;
        }
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v28[0];
    }
  }
  char v14 = (void *)v28[0];
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216BAFDB8((uint64_t)v28, 0);
  return v14;
}

void sub_216BAFDA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BAFDB8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_216BAFDB8(uint64_t a1, uint64_t a2)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216BAD86C(v2 + 2);
    }
    operator delete(v2);
  }
}

void sub_216BAFE10()
{
  sub_216779094(v3, "SDR_TYPE_CONFORMANCE");
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75B9F8, 0, (uint64_t)v3, (uint64_t)__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p[0]);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  uint64_t v0 = sub_216BAFEC8();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "SDR_TYPE_CONFORMANCE", "Diagnostcs from parsing and conforming default values for Sdr and Sdf type conformance");
}

void sub_216BAFE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216BAFEC8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798C538, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798C538))
  {
    uint64_t v1 = operator new(4uLL);
    _DWORD *v1 = 0;
    qword_26798C530 = (uint64_t)v1;
    __cxa_guard_release(&qword_26798C538);
  }
  return qword_26798C530;
}

void sub_216BAFF2C(_Unwind_Exception *a1)
{
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::GetInstance()
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance();
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000021747A5BCLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v12);
  uint64_t v2 = std::string::insert(&v12, 0, "Create Singleton ");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  uint64_t v16 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_216851098((uint64_t)&v13, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (atomic_exchange(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::SdrRegistry*> &)::isInitializing, 1u))
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      unint64_t v5 = (pxrInternal__aapl__pxrReserved__::NdrRegistry *)operator new(0x170uLL);
      pxrInternal__aapl__pxrReserved__::NdrRegistry::NdrRegistry(v5);
      unint64_t v7 = atomic_load(a1);
      if (v7)
      {
        if (v5 != (pxrInternal__aapl__pxrReserved__::NdrRegistry *)v7)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          uint64_t v16 = 84;
          BOOL v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::"
                "_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::SdrRegistry]";
          char v18 = 0;
          int v19 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v6);
        }
      }
      else if (atomic_exchange((atomic_ullong *volatile)a1, (unint64_t)v5))
      {
        __p[0] = "tf/instantiateSingleton.h";
        __p[1] = "_CreateInstance";
        uint64_t v16 = 88;
        BOOL v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_C"
              "reateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::SdrRegistry]";
        char v18 = 0;
        int v19 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v6, "instance.exchange(newInst) == nullptr");
      }
    }
    atomic_store(0, (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::SdrRegistry*> &)::isInitializing);
  }
  unint64_t v9 = atomic_load(a1);
  while (v14--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v13);
  return v9;
}

void sub_216BB0128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::CurrentlyExists()
{
  unint64_t v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::SetInstanceConstructed(unint64_t result)
{
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance, result))
  {
    uint64_t v1 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/instantiateSingleton.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/instantiateSingleton.h", (uint64_t)v1, 0x2Fu);
    v3[1] = "SetInstanceConstructed";
    uint64_t v3[2] = 56;
    void v3[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::Se"
            "tInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::SdrRegistry]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v2);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::DeleteInstance()
{
  for (uint64_t i = (pxrInternal__aapl__pxrReserved__::NdrRegistry *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
        i;
        uint64_t i = v1)
  {
    uint64_t v1 = i;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance, (unint64_t *)&v1, 0);
    if (v1 == i)
    {
      pxrInternal__aapl__pxrReserved__::NdrRegistry::~NdrRegistry(i);
      operator delete(v2);
      return;
    }
    sched_yield();
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::SdrRegistry::GetInstance(pxrInternal__aapl__pxrReserved__::SdrRegistry *this)
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance();
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodeByIdentifier(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance();
  }
  unint64_t result = (void *)pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeByIdentifier(v3, a2, a3);
  if (result)
  {
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodeByIdentifierAndType(pxrInternal__aapl__pxrReserved__::SdrRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::NdrRegistry *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance();
  }
  unint64_t result = (void *)pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeByIdentifierAndType(v3, a2, a3);
  if (result)
  {
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodeFromAsset(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, uint64_t *a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5)
{
  int v5 = (pxrInternal__aapl__pxrReserved__ *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance();
  }
  unint64_t result = (void *)pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeFromAsset(v5, a2, a3, a4, a5);
  if (result)
  {
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodeFromSourceCode(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t a4)
{
  char v4 = (pxrInternal__aapl__pxrReserved__::NdrRegistry *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance();
  }
  unint64_t result = (void *)pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeFromSourceCode(v4, a2, a3, a4);
  if (result)
  {
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodeByName(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  uint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance();
  }
  unint64_t result = (void *)pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeByName(v4, a2, a3, a4);
  if (result)
  {
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodeByNameAndType(uint64_t a1, unsigned __int8 *a2, void *a3, int a4)
{
  uint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance();
  }
  unint64_t result = (void *)pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodeByNameAndType(v4, a2, a3, a4);
  if (result)
  {
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodesByIdentifier(const pxrInternal__aapl__pxrReserved__::TfToken *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::NdrRegistry *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodesByIdentifier(v4, a1, __p);
  sub_216BB07A4((void ***)__p, a2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_216BB0788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ***sub_216BB07A4@<X0>(void ***result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  for (uint64_t i = (void **)a2; v2 != v3; ++v2)
  {
    uint64_t v4 = *v2;
    unint64_t result = sub_216BB0960(&i, &v4);
  }
  return result;
}

void sub_216BB080C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodesByName(unsigned __int8 *a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodesByName(v4, a1, a2, __p);
  sub_216BB07A4((void ***)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_216BB08A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodesByFamily(void *a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdrRegistry>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodesByFamily(v4, a1, a2, (char **)__p);
  sub_216BB07A4((void ***)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_216BB0944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ***sub_216BB0960(void ***a1, void *a2)
{
  uint64_t v4 = *a1;
  int v5 = (*a1)[1];
  uint8x8_t v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    uint64_t v11 = ((char *)v5 - (unsigned char *)*v4) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v12 = v8 - (void)*v4;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      unint64_t v15 = (char *)sub_21677CB28(v7, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    uint64_t v16 = &v15[8 * v11];
    BOOL v17 = &v15[8 * v14];
    *(void *)uint64_t v16 = *a2;
    unint64_t v10 = v16 + 8;
    int v19 = (char *)*v4;
    char v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      char v18 = (char *)*v4;
    }
    void *v4 = v16;
    v4[1] = v10;
    v4[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    void *v5 = *a2;
    unint64_t v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::IsTruthy(void *a1, void *a2)
{
  uint64_t v2 = sub_2168CB120(a2, a1);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (void **)(v2 + 3);
  if ((*((char *)v2 + 47) & 0x80000000) == 0)
  {
    if (*((unsigned char *)v2 + 47))
    {
      long long v14 = *(_OWORD *)v3;
      uint64_t v15 = v2[5];
      goto LABEL_7;
    }
    return 1;
  }
  unint64_t v4 = v2[4];
  if (!v4) {
    return 1;
  }
  sub_216778F24(&v14, *v3, v4);
LABEL_7:
  char v5 = HIBYTE(v15);
  if (v15 >= 0) {
    uint8x8_t v6 = (char *)&v14 + HIBYTE(v15);
  }
  else {
    uint8x8_t v6 = (char *)(v14 + *((void *)&v14 + 1));
  }
  if (v15 >= 0) {
    uint64_t v7 = &v14;
  }
  else {
    uint64_t v7 = (long long *)v14;
  }
  if (v7 != (long long *)v6)
  {
    do
    {
      *(unsigned char *)uint64_t v7 = __tolower(*(char *)v7);
      uint64_t v7 = (long long *)((char *)v7 + 1);
    }
    while (v7 != (long long *)v6);
    char v5 = HIBYTE(v15);
  }
  if ((v5 & 0x80) == 0)
  {
    if (v5 == 1)
    {
      if (v14 != 48) {
        return v14 != 102;
      }
    }
    else
    {
      if (v5 != 5) {
        return 1;
      }
      if (v14 != 1936482662 || BYTE4(v14) != 101) {
        return 1;
      }
    }
    return 0;
  }
  if (*((void *)&v14 + 1) == 1)
  {
    int v11 = *(unsigned __int8 *)v14;
    BOOL v9 = v11 != 48 && v11 != 102;
  }
  else
  {
    BOOL v9 = 1;
    if (*((void *)&v14 + 1) == 5 && *(_DWORD *)v14 == 1936482662 && *(unsigned char *)(v14 + 4) == 101) {
      BOOL v9 = 0;
    }
  }
  operator delete((void *)v14);
  return v9;
}

void sub_216BB0BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::StringVal@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = sub_2168CB120(a2, a1);
  if (result)
  {
    if ((*((char *)result + 47) & 0x80000000) == 0)
    {
      long long v7 = *(_OWORD *)(result + 3);
      *(void *)(a4 + 16) = result[5];
      *(_OWORD *)a4 = v7;
      return result;
    }
    unint64_t v8 = (void *)result[3];
    unint64_t v9 = result[4];
  }
  else
  {
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)a4 = *(_OWORD *)a3;
      *(void *)(a4 + 16) = *(void *)(a3 + 16);
      return result;
    }
    unint64_t v8 = *(void **)a3;
    unint64_t v9 = *(void *)(a3 + 8);
  }

  return sub_216778F24((unsigned char *)a4, v8, v9);
}

void *pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVal@<X0>(void *a1@<X0>, void *a2@<X1>, atomic_uint **a3@<X2>, atomic_uint **a4@<X8>)
{
  unint64_t result = sub_2168CB120(a2, a1);
  if (result)
  {
    return (void *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a4);
  }
  else
  {
    long long v7 = *a3;
    *a4 = *a3;
    if ((v7 & 7) != 0)
    {
      unint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        *a4 = v8;
      }
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::IntVal(void *a1, void *a2, uint64_t a3)
{
  unint64_t v4 = (const std::string *)sub_2168CB120(a2, a1);
  if (v4) {
    return std::stoi(v4 + 1, 0, 10);
  }
  return a3;
}

void sub_216BB0D4C(void *a1)
{
}

void pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::StringVecVal(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4 = (std::string *)sub_2168CB120(a2, a1);
  if (v4)
  {
    char v5 = v4 + 1;
    sub_216779094(__p, "|");
    pxrInternal__aapl__pxrReserved__::TfStringSplit(v5, (char *)__p, a3);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_216BB0DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVecVal(void *a1@<X0>, void *a2@<X1>, char **a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::StringVecVal(a1, a2, &v22);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = v22;
  for (uint64_t i = v23; v4 != i; v4 += 24)
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v28);
    char v7 = a3[1];
    unint64_t v6 = (unint64_t)a3[2];
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v10 = (v7 - *a3) >> 3;
      if ((unint64_t)(v10 + 1) >> 61) {
        sub_21677CB10();
      }
      uint64_t v11 = v6 - (void)*a3;
      uint64_t v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
        uint64_t v12 = v10 + 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      size_t v27 = a3 + 2;
      if (v13) {
        long long v14 = (char *)sub_21677CB28((uint64_t)(a3 + 2), v13);
      }
      else {
        long long v14 = 0;
      }
      uint64_t v15 = &v14[8 * v10];
      uint64_t v16 = &v14[8 * v13];
      unint64_t v26 = v16;
      *(void *)uint64_t v15 = v28;
      unint64_t v9 = v15 + 8;
      uint64_t v28 = 0;
      v25.i64[1] = (uint64_t)(v15 + 8);
      char v18 = *a3;
      BOOL v17 = a3[1];
      if (v17 == *a3)
      {
        int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
      }
      else
      {
        do
        {
          uint64_t v19 = *((void *)v17 - 1);
          v17 -= 8;
          *((void *)v15 - 1) = v19;
          v15 -= 8;
          *(void *)BOOL v17 = 0;
        }
        while (v17 != v18);
        int64x2_t v20 = *(int64x2_t *)a3;
        unint64_t v9 = (char *)v25.i64[1];
        uint64_t v16 = v26;
      }
      *a3 = v15;
      a3[1] = v9;
      int64x2_t v25 = v20;
      BOOL v21 = a3[2];
      a3[2] = v16;
      unint64_t v26 = v21;
      size_t v24 = (void **)v20.i64[0];
      sub_2168BE9D8((uint64_t)&v24);
      uint64_t v8 = v28;
    }
    else
    {
      uint64_t v8 = 0;
      *(void *)char v7 = v28;
      unint64_t v9 = v7 + 8;
      uint64_t v28 = 0;
    }
    a3[1] = v9;
    if ((v8 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  size_t v24 = (void **)&v22;
  sub_216782F20(&v24);
}

void sub_216BB0F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  if ((a18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216889A04((void ***)&a18);
  a18 = (unint64_t)&a10;
  sub_216782F20((void ***)&a18);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::OptionVecVal(std::string *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_216779094(&__p, "|");
  pxrInternal__aapl__pxrReserved__::TfStringSplit(a1, (char *)&__p, (uint64_t *)&v35);
  if (SHIBYTE(v39) < 0) {
    operator delete(__p);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = v35;
  for (uint64_t i = v36; v4 != i; ++v4)
  {
    std::string::size_type v6 = std::string::find(v4, 58, 0);
    if (v6 == -1)
    {
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v33);
      std::string::size_type v13 = v33.__r_.__value_.__r.__words[0];
      v33.__r_.__value_.__r.__words[0] = 0;
      uint64_t v15 = (std::string::size_type *)a2[1];
      unint64_t v14 = a2[2];
      if ((unint64_t)v15 >= v14)
      {
        uint64_t v24 = ((uint64_t)v15 - *a2) >> 4;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 60) {
          sub_21677CB10();
        }
        uint64_t v26 = v14 - *a2;
        if (v26 >> 3 > v25) {
          unint64_t v25 = v26 >> 3;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        size_t v41 = a2 + 2;
        uint64_t v28 = (char *)sub_216787EE0((uint64_t)(a2 + 2), v27);
        char v29 = (std::string::size_type *)&v28[16 * v24];
        std::string __p = v28;
        int v38 = v29;
        uint64_t v40 = &v28[16 * v30];
        std::string::size_type *v29 = v13;
        v29[1] = 0;
        size_t v39 = v29 + 2;
        sub_216BB1AF8(a2, &__p);
        uint64_t v16 = (void *)a2[1];
        sub_216BB1C94((uint64_t)&__p);
      }
      else
      {
        std::string::size_type *v15 = v13;
        v15[1] = 0;
        uint64_t v16 = v15 + 2;
        a2[1] = (uint64_t)(v15 + 2);
      }
      a2[1] = (uint64_t)v16;
      if ((v33.__r_.__value_.__s.__data_[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v33.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      std::string::size_type v7 = v6;
      std::string::basic_string(&v33, v4, 0, v6, (std::allocator<char> *)&__p);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v34);
      std::string::basic_string(&v31, v4, v7 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v32);
      std::string::size_type v8 = v34;
      std::string::size_type v34 = 0;
      std::string::size_type v9 = v32;
      std::string::size_type v32 = 0;
      uint64_t v11 = (std::string::size_type *)a2[1];
      unint64_t v10 = a2[2];
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v17 = ((uint64_t)v11 - *a2) >> 4;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 60) {
          sub_21677CB10();
        }
        uint64_t v19 = v10 - *a2;
        if (v19 >> 3 > v18) {
          unint64_t v18 = v19 >> 3;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        size_t v41 = a2 + 2;
        BOOL v21 = (char *)sub_216787EE0((uint64_t)(a2 + 2), v20);
        uint64_t v22 = (std::string::size_type *)&v21[16 * v17];
        std::string __p = v21;
        int v38 = v22;
        uint64_t v40 = &v21[16 * v23];
        *uint64_t v22 = v8;
        v22[1] = v9;
        size_t v39 = v22 + 2;
        sub_216BB1AF8(a2, &__p);
        uint64_t v12 = (void *)a2[1];
        sub_216BB1C94((uint64_t)&__p);
      }
      else
      {
        std::string::size_type *v11 = v8;
        v11[1] = v9;
        uint64_t v12 = v11 + 2;
        a2[1] = (uint64_t)(v11 + 2);
      }
      a2[1] = (uint64_t)v12;
      if ((v32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if ((v34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
    }
  }
  std::string __p = &v35;
  sub_216782F20((void ***)&__p);
}

void sub_216BB12A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::CreateStringFromStringVec@<X0>(std::string **a1@<X0>, std::string *a2@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::TfStringJoin("|", a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::IsPropertyAnAssetIdentifier(void *a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v2) {
    uint64_t v2 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  }
  uint64_t result = (uint64_t)sub_2168CB120(a1, (void *)v2 + 5);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v8);
    unint64_t v4 = sub_216BB14F0();
    uint64_t v5 = v8;
    if ((v8 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v4 + 16) & 0xFFFFFFFFFFFFFFF8)
      || (std::string::size_type v6 = (void *)sub_216BB14F0(), v5 = v8, (v8 & 0xFFFFFFFFFFFFFFF8) == (*v6 & 0xFFFFFFFFFFFFFFF8))
      || (v7 = sub_216BB14F0(), uint64_t v5 = v8, (v8 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8)))
    {
      if ((v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      return 1;
    }
    else
    {
      if ((v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      return 0;
    }
  }
  return result;
}

unint64_t sub_216BB14F0()
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  unint64_t v0 = (char *)atomic_load((unint64_t *)&qword_267B91228);
  if (!v0)
  {
    unint64_t v0 = (char *)operator new(0x38uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "filename", 0);
    uint64_t v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "fileInput", 0);
    uint64_t v3 = v0 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "assetIdInput", 0);
    unint64_t v4 = v0 + 24;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 24, "terminal", 0);
    uint64_t v5 = *(void ***)v0;
    uint64_t v19 = v5;
    if ((v5 & 7) != 0)
    {
      std::string::size_type v6 = (void **)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)v6, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v19 = v6;
      }
    }
    unint64_t v7 = (atomic_uint *)*v2;
    unint64_t v20 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v20 = v8;
      }
    }
    std::string::size_type v9 = (atomic_uint *)*v3;
    BOOL v21 = v9;
    if ((v9 & 7) != 0)
    {
      unint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
        BOOL v21 = v10;
      }
    }
    uint64_t v11 = (atomic_uint *)*v4;
    uint64_t v22 = v11;
    if ((v11 & 7) != 0)
    {
      uint64_t v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v22 = v12;
      }
    }
    *((void *)v0 + 4) = 0;
    *((void *)v0 + 5) = 0;
    *((void *)v0 + 6) = 0;
    std::string::size_type v13 = (char *)operator new(0x20uLL);
    uint64_t v14 = 0;
    *((void *)v0 + 4) = v13;
    *((void *)v0 + 5) = v13;
    *((void *)v0 + 6) = v13 + 32;
    do
    {
      unint64_t v15 = (unint64_t)(&v19)[v14];
      *(void *)&v13[v14 * 8] = v15;
      if ((v15 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v13[v14 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v14;
    }
    while (v14 != 4);
    *((void *)v0 + 5) = v13 + 32;
    for (uint64_t i = 3; i != -1; --i)
    {
      unint64_t v17 = (unint64_t)(&v19)[i];
      if ((v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v18 = 0;
    atomic_compare_exchange_strong(&qword_267B91228, (unint64_t *)&v18, (unint64_t)v0);
    if (v18)
    {
      uint64_t v19 = (void **)(v0 + 32);
      sub_216889A04(&v19);
      if ((*v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B91228);
    }
  }
  return (unint64_t)v0;
}

void sub_216BB1780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v17 = 24;
  while (1)
  {
    uint64_t v18 = *(void *)(&a12 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v12);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::IsPropertyATerminal(void *a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v2) {
    uint64_t v2 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  }
  uint64_t v3 = sub_2168CB120(a1, (void *)v2 + 3);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = v3;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216BB14F0();
  std::string::size_type v6 = (*((void *)v5 + 3) & 0xFFFFFFFFFFFFFFF8) != 0
     ? (uint64_t *)((*((void *)v5 + 3) & 0xFFFFFFFFFFFFFFF8) + 16)
     : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  unint64_t v7 = *((char *)v6 + 23) >= 0 ? (const char *)v6 : (const char *)*v6;
  int v8 = *((char *)v4 + 47);
  size_t v9 = v8 >= 0 ? *((unsigned __int8 *)v4 + 47) : v4[4];
  size_t v10 = strlen(v7);
  if (v9 >= v10
    && ((size_t v11 = v10, v8 >= 0) ? (v12 = (const char *)(v4 + 3)) : (v12 = (const char *)v4[3]), !strncmp(v12, v7, v11)))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

void **pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::GetRoleFromMetadata@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v4) {
    unint64_t v4 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  }
  uint64_t result = (void **)sub_2168CB120(a1, (void *)v4 + 4);
  if (!result) {
    goto LABEL_17;
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  std::string::size_type v6 = (pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
  if (!v6) {
    std::string::size_type v6 = sub_216BB1DA8(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
  }
  unint64_t v7 = (void *)*((void *)v6 + 1);
  int v8 = (pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
  if (!v8) {
    int v8 = sub_216BB1DA8(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
  }
  size_t v9 = (void *)*((void *)v8 + 2);
  if (v7 != v9)
  {
    while ((*v7 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v7 == v9)
      {
        unint64_t v7 = (void *)*((void *)v8 + 2);
        break;
      }
    }
  }
  uint64_t result = (void **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
  if (!result) {
    uint64_t result = (void **)sub_216BB1DA8(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
  }
  if (v7 == result[2])
  {
    if ((*a2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
LABEL_17:
    *a2 = 0;
  }
  return result;
}

void sub_216BB1A38(_Unwind_Exception *a1)
{
  if ((*v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_216BB1A58(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_216BB1AAC((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_216BB1AAC(uint64_t result, uint64_t a2)
{
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 16)
  {
    uint64_t v3 = *(void *)(i - 8);
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v4 = *(void *)(i - 16);
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t sub_216BB1AF8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216BB1B70((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216BB1B70(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(a3 - 2);
      a3 -= 2;
      *(void *)(v7 - 16) = v8;
      *a3 = 0;
      *(void *)(v7 - 8) = a3[1];
      a3[1] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 16;
      *((void *)&v14 + 1) -= 16;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_216BB1C0C((uint64_t)v11);
  return v9;
}

uint64_t sub_216BB1C0C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216BB1C44(a1);
  }
  return a1;
}

uint64_t sub_216BB1C44(uint64_t result)
{
  uint64_t v1 = *(void **)(*(void *)(result + 16) + 8);
  for (uint64_t i = *(void **)(*(void *)(result + 8) + 8); v1 != i; v1 += 2)
  {
    uint64_t v3 = v1[1];
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((*v1 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

uint64_t sub_216BB1C94(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_216BB1CCC(uint64_t result, uint64_t a2)
{
  for (uint64_t i = *(void *)(result + 16); i != a2; uint64_t i = *(void *)(result + 16))
  {
    uint64_t v3 = (void *)(i - 16);
    *(void *)(result + 16) = i - 16;
    uint64_t v4 = *(void *)(i - 8);
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((*v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *sub_216BB1D1C(atomic_ullong *a1)
{
  uint64_t result = sub_216BB1D64();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType::~SdrPropertyMetadata_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *sub_216BB1D64()
{
  unint64_t v0 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)operator new(0xC0uLL);
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType::SdrPropertyMetadata_StaticTokenType(v0);
  return v0;
}

void sub_216BB1D94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType *sub_216BB1DA8(atomic_ullong *a1)
{
  uint64_t result = sub_216BB1DF0();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType::~SdrPropertyRole_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType *sub_216BB1DF0()
{
  unint64_t v0 = (pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType::SdrPropertyRole_StaticTokenType(v0);
  return v0;
}

void sub_216BB1E20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType::~SdrNodeMetadata_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *this)
{
  char v12 = (void **)((char *)this + 88);
  sub_216889A04(&v12);
  uint64_t v2 = *((void *)this + 10);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 9);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 8);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 7);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 6);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 5);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 4);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 3);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 2);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 1);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType::SdrNodeMetadata_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *this)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v19 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "category", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v19, "role", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "departments", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "help", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "label", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "pages", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "primvars", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "__SDR__implementationName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "__SDR__target", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "sdrUsdEncodingVersion", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "sdrDefinitionNameFallbackPrefix", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v20 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v19;
  uint64_t v21 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v22 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v22 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v23 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v24 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v25 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v26 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v27 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v28 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v29 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v29 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v30 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  long long v13 = (char *)operator new(0x58uLL);
  uint64_t v14 = 0;
  *((void *)this + 11) = v13;
  *((void *)this + 12) = v13;
  *((void *)this + 13) = v13 + 88;
  do
  {
    uint64_t v15 = *(uint64_t *)((char *)&v20 + v14);
    *(void *)&v13[v14] = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v13[v14] &= 0xFFFFFFFFFFFFFFF8;
    }
    v14 += 8;
  }
  while (v14 != 88);
  *((void *)this + 12) = v13 + 88;
  for (uint64_t i = 80; i != -8; i -= 8)
  {
    uint64_t v17 = *(uint64_t *)((char *)&v20 + i);
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_216BB2378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void **a11, uint64_t a12, char a13)
{
  sub_216889A04(&a11);
  uint64_t v23 = 80;
  while (1)
  {
    uint64_t v24 = *(void *)(&a13 + v23);
    if ((v24 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v23 -= 8;
    if (v23 == -8)
    {
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_216BB2504()
{
}

void sub_216BB250C()
{
}

void pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType::~SdrNodeContext_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType *this)
{
  uint64_t v10 = (void **)((char *)this + 72);
  sub_216889A04(&v10);
  uint64_t v2 = *((void *)this + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 7);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 6);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 5);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 4);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 3);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 1);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType::SdrNodeContext_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType *this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v2 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "pattern", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "surface", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "volume", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "displacement", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "light", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "displayFilter", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "lightFilter", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "pixelFilter", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "sampleFilter", 0);
  uint64_t v3 = *(void *)this;
  uint64_t v18 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v18 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *v2;
  uint64_t v19 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v19 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 2);
  uint64_t v20 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 3);
  uint64_t v21 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 4);
  uint64_t v22 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v22 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 5);
  uint64_t v23 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 6);
  uint64_t v24 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 7);
  uint64_t v25 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 8);
  uint64_t v26 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 9) = 0;
  *((void *)this + 1sub_2168EBBB8(&a9, 0) = 0;
  *((void *)this + 11) = 0;
  uint64_t v12 = (char *)operator new(0x48uLL);
  uint64_t v13 = 0;
  *((void *)this + 9) = v12;
  *((void *)this + 1sub_2168EBBB8(&a9, 0) = v12;
  *((void *)this + 11) = v12 + 72;
  do
  {
    uint64_t v14 = *(uint64_t *)((char *)&v18 + v13);
    *(void *)&v12[v13] = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v12[v13] &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 += 8;
  }
  while (v13 != 72);
  *((void *)this + 1sub_2168EBBB8(&a9, 0) = v12 + 72;
  for (uint64_t i = 64; i != -8; i -= 8)
  {
    uint64_t v16 = *(uint64_t *)((char *)&v18 + i);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_216BB29A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v21 = 64;
  while (1)
  {
    uint64_t v22 = *(void *)(&a11 + v21);
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v21 -= 8;
    if (v21 == -8)
    {
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::SdrNodeRole_StaticTokenType::~SdrNodeRole_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrNodeRole_StaticTokenType *this)
{
  uint64_t v5 = (void **)((char *)this + 32);
  sub_216889A04(&v5);
  uint64_t v2 = *((void *)this + 3);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 2);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 1);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::SdrNodeRole_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdrNodeRole_StaticTokenType::SdrNodeRole_StaticTokenType(atomic_uint **this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "primvar", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "texture", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "field", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "math", 0);
  uint64_t v3 = *this;
  uint64_t v17 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v17 = v4;
    }
  }
  uint64_t v5 = *v2;
  uint64_t v18 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v18 = v6;
    }
  }
  uint64_t v7 = this[2];
  uint64_t v19 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v19 = v8;
    }
  }
  uint64_t v9 = this[3];
  uint64_t v20 = v9;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v20 = v10;
    }
  }
  this[4] = 0;
  this[5] = 0;
  this[6] = 0;
  uint64_t v11 = (atomic_uint *)operator new(0x20uLL);
  unint64_t v12 = 0;
  this[4] = v11;
  this[5] = v11;
  this[6] = v11 + 8;
  do
  {
    uint64_t v13 = (&v17)[v12 / 2];
    *(void *)&v11[v12] = v13;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v11[v12] &= 0xFFFFFFFFFFFFFFF8;
    }
    v12 += 2;
  }
  while (v12 != 8);
  this[5] = v11 + 8;
  for (uint64_t i = 3; i != -1; --i)
  {
    uint64_t v15 = (&v17)[i];
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::SdrNodeRole_StaticTokenType *)this;
}

void sub_216BB2D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v17 = 24;
  while (1)
  {
    uint64_t v18 = *(void *)(&a12 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrShaderNode::SdrShaderNode(uint64_t a1, uint64_t *a2, uint64_t *a3, long long *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, long long *a8, long long *a9, uint64_t a10, uint64_t a11, long long *a12)
{
  uint64_t v13 = pxrInternal__aapl__pxrReserved__::NdrNode::NdrNode(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  *(void *)uint64_t v13 = &unk_26C75BA30;
  uint64_t v14 = (long long *)(v13 + 400);
  uint64_t v15 = (long long *)(v13 + 408);
  *(_OWORD *)(v13 + 352) = 0u;
  *(_OWORD *)(v13 + 368) = 0u;
  uint64_t v29 = (void **)(v13 + 440);
  uint64_t v30 = (void **)(v13 + 416);
  uint64_t v16 = v13 + 464;
  *(_OWORD *)(v13 + 384) = 0u;
  *(_OWORD *)(v13 + 40sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(v13 + 416) = 0u;
  *(_OWORD *)(v13 + 432) = 0u;
  *(_OWORD *)(v13 + 448) = 0u;
  *(_OWORD *)(v13 + 464) = 0u;
  *(_OWORD *)(v13 + 48sub_2168EBBB8(&a9, 0) = 0u;
  *(_DWORD *)(v13 + 496) = 1065353216;
  uint64_t v17 = v13 + 504;
  *(_OWORD *)(v13 + 504) = 0u;
  *(_OWORD *)(v13 + 52sub_2168EBBB8(&a9, 0) = 0u;
  *(_DWORD *)(v13 + 536) = 1065353216;
  for (uint64_t i = *(void **)(v13 + 240); i; uint64_t i = (void *)*i)
  {
    uint64_t v19 = (const void *)i[3];
    if (v19) {
    else
    }
      uint64_t v20 = 0;
    unint64_t v33 = (unint64_t)(i + 2);
    sub_2168CB2C8(v16, i + 2, (uint64_t)&unk_2174BFD90, (uint64_t **)&v33)[3] = v20;
  }
  for (uint64_t j = *(void **)(a1 + 304); j; uint64_t j = (void *)*j)
  {
    uint64_t v22 = (const void *)j[3];
    if (v22) {
    else
    }
      uint64_t v23 = 0;
    unint64_t v33 = (unint64_t)(j + 2);
    sub_2168CB2C8(v17, j + 2, (uint64_t)&unk_2174BFD90, (uint64_t **)&v33)[3] = v23;
  }
  pxrInternal__aapl__pxrReserved__::SdrShaderNode::_InitializePrimvars((pxrInternal__aapl__pxrReserved__::SdrShaderNode *)a1);
  pxrInternal__aapl__pxrReserved__::SdrShaderNode::_PostProcessProperties((pxrInternal__aapl__pxrReserved__::SdrShaderNode *)a1);
  uint64_t v24 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  if (!v24) {
    uint64_t v24 = sub_216BB427C(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  }
  unint64_t v33 = 0;
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVal((void *)v24 + 4, (void *)(a1 + 160), (atomic_uint **)&v33, (atomic_uint **)&v31);
  if (&v31 == v14)
  {
    uint64_t v25 = v31;
  }
  else
  {
    if ((*(void *)v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v25 = 0;
    *(void *)uint64_t v14 = v31;
    *(void *)&long long v31 = 0;
  }
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  if (!v26) {
    uint64_t v26 = sub_216BB427C(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  }
  unint64_t v33 = 0;
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVal(v26, (void *)(a1 + 160), (atomic_uint **)&v33, (atomic_uint **)&v31);
  if (&v31 == v15)
  {
    if ((v31 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if ((*(void *)v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)uint64_t v15 = v31;
    *(void *)&long long v31 = 0;
  }
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  if (!v27) {
    uint64_t v27 = sub_216BB427C(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  }
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVecVal((void *)v27 + 2, (void *)(a1 + 160), (char **)&v31);
  sub_216A698A4(v30);
  *(_OWORD *)(a1 + 416) = v31;
  *(void *)(a1 + 432) = v32;
  uint64_t v32 = 0;
  long long v31 = 0uLL;
  unint64_t v33 = (unint64_t)&v31;
  sub_216889A04((void ***)&v33);
  pxrInternal__aapl__pxrReserved__::SdrShaderNode::_ComputePages((char *)a1, (uint64_t)&v31);
  sub_216A698A4(v29);
  *(_OWORD *)uint64_t v29 = v31;
  *(void *)(a1 + 456) = v32;
  uint64_t v32 = 0;
  long long v31 = 0uLL;
  unint64_t v33 = (unint64_t)&v31;
  sub_216889A04((void ***)&v33);
  return a1;
}

{
  return pxrInternal__aapl__pxrReserved__::SdrShaderNode::SdrShaderNode(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void sub_216BB320C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14, void **a15)
{
  sub_2168C08A0(v18);
  sub_2168C08A0(v17);
  a15 = a13;
  sub_216889A04(&a15);
  a15 = a14;
  sub_216889A04(&a15);
  if ((*v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  a15 = v15 + 47;
  sub_216889A04(&a15);
  a15 = v15 + 44;
  sub_216889A04(&a15);
  pxrInternal__aapl__pxrReserved__::NdrNode::~NdrNode(v15);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdrShaderNode::_InitializePrimvars(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this)
{
  int64x2_t v49 = 0uLL;
  v50[0] = 0;
  int64x2_t v47 = 0uLL;
  v48[0] = 0;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  if (!v2) {
    uint64_t v2 = sub_216BB427C(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  }
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::StringVecVal((void *)v2 + 6, (void *)this + 20, &v45);
  uint64_t v3 = v45;
  for (uint64_t i = v46; v3 != i; v3 += 24)
  {
    uint64_t v5 = *(unsigned __int8 *)(v3 + 23);
    int v6 = (char)v5;
    if ((v5 & 0x80u) != 0) {
      uint64_t v5 = *(void *)(v3 + 8);
    }
    if (!v5) {
      goto LABEL_22;
    }
    uint64_t v7 = *(unsigned char **)v3;
    if (v6 >= 0) {
      uint64_t v7 = (unsigned char *)v3;
    }
    if (*v7 == 36)
    {
      pxrInternal__aapl__pxrReserved__::TfStringTrimLeft("$", (const std::string *)v3, &__p);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v51);
      ShaderInput = pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetShaderInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v51);
      uint64_t v9 = ShaderInput;
      if ((v51 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (!ShaderInput) {
        goto LABEL_70;
      }
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      if (!v10) {
        uint64_t v10 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      }
      if ((v9[2] & 0xFFFFFFFFFFFFFFF8) == (*((void *)v10 + 1) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v43);
        uint64_t v29 = v47.i64[1];
        if (v47.i64[1] >= v48[0])
        {
          uint64_t v32 = (v47.i64[1] - v47.i64[0]) >> 3;
          if ((unint64_t)(v32 + 1) >> 61) {
            sub_21677CB10();
          }
          unint64_t v33 = (v48[0] - v47.i64[0]) >> 2;
          if (v33 <= v32 + 1) {
            unint64_t v33 = v32 + 1;
          }
          if (v48[0] - v47.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL) {
            unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v33;
          }
          uint64_t v54 = v48;
          if (v34) {
            uint64_t v35 = (char *)sub_21677CB28((uint64_t)v48, v34);
          }
          else {
            uint64_t v35 = 0;
          }
          uint64_t v36 = &v35[8 * v32];
          int v37 = &v35[8 * v34];
          uint64_t v53 = v37;
          *(void *)uint64_t v36 = v43;
          long long v31 = v36 + 8;
          uint64_t v43 = 0;
          v52.i64[1] = (uint64_t)(v36 + 8);
          int v38 = (void *)v47.i64[1];
          size_t v39 = (void *)v47.i64[0];
          if (v47.i64[1] == v47.i64[0])
          {
            int64x2_t v41 = vdupq_n_s64(v47.u64[1]);
          }
          else
          {
            do
            {
              uint64_t v40 = *--v38;
              *((void *)v36 - 1) = v40;
              v36 -= 8;
              void *v38 = 0;
            }
            while (v38 != v39);
            int64x2_t v41 = v47;
            long long v31 = (void *)v52.i64[1];
            int v37 = v53;
          }
          v47.i64[0] = (uint64_t)v36;
          v47.i64[1] = (uint64_t)v31;
          int64x2_t v52 = v41;
          uint64_t v42 = (char *)v48[0];
          v48[0] = v37;
          uint64_t v53 = v42;
          unint64_t v51 = v41.i64[0];
          sub_2168BE9D8((uint64_t)&v51);
          uint64_t v30 = v43;
        }
        else
        {
          uint64_t v30 = 0;
          *(void *)v47.i64[1] = v43;
          long long v31 = (void *)(v29 + 8);
          uint64_t v43 = 0;
        }
        v47.i64[1] = (uint64_t)v31;
        if ((v30 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
LABEL_70:
        if (sub_216BA6B60(1))
        {
          uint64_t v13 = (char *)this + 40;
          if (*((char *)this + 63) < 0) {
            uint64_t v13 = (char *)*((void *)this + 5);
          }
          uint64_t v14 = (unsigned char *)v3;
          if (*(char *)(v3 + 23) < 0) {
            uint64_t v14 = *(unsigned char **)v3;
          }
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Found a node [%s] whose metadata indicates a primvar naming property [%s] but the property's type is not string; ignoring.",
            v11,
            v12,
            v13,
            v14);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
LABEL_22:
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__p);
      uint64_t v15 = v49.i64[1];
      if (v49.i64[1] >= v50[0])
      {
        uint64_t v18 = (v49.i64[1] - v49.i64[0]) >> 3;
        if ((unint64_t)(v18 + 1) >> 61) {
          sub_21677CB10();
        }
        unint64_t v19 = (v50[0] - v49.i64[0]) >> 2;
        if (v19 <= v18 + 1) {
          unint64_t v19 = v18 + 1;
        }
        if (v50[0] - v49.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v19;
        }
        uint64_t v54 = v50;
        if (v20) {
          uint64_t v21 = (char *)sub_21677CB28((uint64_t)v50, v20);
        }
        else {
          uint64_t v21 = 0;
        }
        uint64_t v22 = &v21[8 * v18];
        uint64_t v23 = &v21[8 * v20];
        uint64_t v53 = v23;
        *(void *)uint64_t v22 = __p.__r_.__value_.__r.__words[0];
        uint64_t v17 = v22 + 8;
        __p.__r_.__value_.__r.__words[0] = 0;
        v52.i64[1] = (uint64_t)(v22 + 8);
        uint64_t v24 = (void *)v49.i64[1];
        uint64_t v25 = (void *)v49.i64[0];
        if (v49.i64[1] == v49.i64[0])
        {
          int64x2_t v27 = vdupq_n_s64(v49.u64[1]);
        }
        else
        {
          do
          {
            uint64_t v26 = *--v24;
            *((void *)v22 - 1) = v26;
            v22 -= 8;
            void *v24 = 0;
          }
          while (v24 != v25);
          int64x2_t v27 = v49;
          uint64_t v17 = (void *)v52.i64[1];
          uint64_t v23 = v53;
        }
        v49.i64[0] = (uint64_t)v22;
        v49.i64[1] = (uint64_t)v17;
        int64x2_t v52 = v27;
        uint64_t v28 = (char *)v50[0];
        v50[0] = v23;
        uint64_t v53 = v28;
        unint64_t v51 = v27.i64[0];
        sub_2168BE9D8((uint64_t)&v51);
        std::string::size_type v16 = __p.__r_.__value_.__r.__words[0];
      }
      else
      {
        std::string::size_type v16 = 0;
        *(void *)v49.i64[1] = __p.__r_.__value_.__r.__words[0];
        uint64_t v17 = (void *)(v15 + 8);
        __p.__r_.__value_.__r.__words[0] = 0;
      }
      v49.i64[1] = (uint64_t)v17;
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
  }
  if ((int64x2_t *)((char *)this + 352) != &v49) {
    sub_216ABF1B0((void *)this + 44, (uint64_t *)v49.i64[0], (uint64_t *)v49.i64[1], (v49.i64[1] - v49.i64[0]) >> 3);
  }
  if ((int64x2_t *)((char *)this + 376) != &v47) {
    sub_216ABF1B0((void *)this + 47, (uint64_t *)v47.i64[0], (uint64_t *)v47.i64[1], (v47.i64[1] - v47.i64[0]) >> 3);
  }
  unint64_t v51 = (unint64_t)&v45;
  sub_216782F20((void ***)&v51);
  unint64_t v51 = (unint64_t)&v47;
  sub_216889A04((void ***)&v51);
  unint64_t v51 = (unint64_t)&v49;
  sub_216889A04((void ***)&v51);
}

void sub_216BB3724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char ***__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char **a19, uint64_t a20,uint64_t a21,char *a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  std::string __p = &a19;
  sub_216782F20((void ***)&__p);
  a19 = &a22;
  sub_216889A04((void ***)&a19);
  a22 = &a26;
  sub_216889A04((void ***)&a22);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdrShaderNode::_PostProcessProperties(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  if (!v2) {
    uint64_t v2 = sub_216BB427C(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  }
  int v3 = pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::IntVal((void *)v2 + 9, (void *)this + 20, 0xFFFFFFFFLL);
  pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetAllVstructNames(this, &v8);
  uint64_t v4 = (const void **)*((void *)this + 17);
  for (uint64_t i = (const void **)*((void *)this + 18); v4 != i; ++v4)
  {
    if (*v4) {
    else
    }
      int v6 = 0;
    if (v3 != -1) {
      pxrInternal__aapl__pxrReserved__::SdrShaderProperty::_SetUsdEncodingVersion((uint64_t)v6, v3);
    }
    uint64_t v7 = v8;
    if (v8 != v9)
    {
      while ((*v7 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v6 + 1) & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v7 == v9)
        {
          uint64_t v7 = v9;
          break;
        }
      }
    }
    if (v7 != v9) {
      pxrInternal__aapl__pxrReserved__::SdrShaderProperty::_ConvertToVStruct(v6);
    }
    pxrInternal__aapl__pxrReserved__::SdrShaderProperty::_FinalizeProperty(v6);
  }
  uint64_t v10 = (void **)&v8;
  sub_216889A04(&v10);
}

void sub_216BB394C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216889A04(&a12);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::SdrShaderNode::_ComputePages@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = (void *)*((void *)this + 17);
  int v3 = (void *)*((void *)this + 18);
  if (v2 != v3)
  {
    this = 0;
    do
    {
      uint64_t v5 = (uint64_t *)(*v2 + 200);
      int v6 = this;
      if (*(char **)a2 != this)
      {
        int v6 = *(char **)a2;
        while ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) != (*v5 & 0xFFFFFFFFFFFFFFF8))
        {
          v6 += 8;
          if (v6 == this)
          {
            int v6 = this;
            break;
          }
        }
      }
      if (v6 == this)
      {
        if ((unint64_t)this >= *(void *)(a2 + 16))
        {
          this = sub_216973984((char **)a2, v5);
        }
        else
        {
          uint64_t v7 = *v5;
          *(void *)this = *v5;
          if ((v7 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *(void *)this &= 0xFFFFFFFFFFFFFFF8;
          }
          this += 8;
        }
        *(void *)(a2 + 8) = this;
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return this;
}

void sub_216BB3A58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetAllVstructNames@<X0>(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this@<X0>, void *a2@<X8>)
{
  long long v31 = 0u;
  long long v32 = 0u;
  int v33 = 1065353216;
  for (uint64_t i = (uint64_t **)*((void *)this + 60); i; uint64_t i = (uint64_t **)*i)
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t *))(*i[3] + 24))(i[3]);
    int v6 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v6) {
      int v6 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    }
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168CB120(v5, (void *)v6 + 10);
    if (!v7) {
      goto LABEL_14;
    }
    uint64_t v8 = (void *)((char *)v7 + 24);
    int v9 = *((char *)v7 + 47);
    if (v9 < 0)
    {
      if (*((void *)v7 + 4) != 7) {
        goto LABEL_14;
      }
      uint64_t v8 = (void *)*v8;
    }
    else if (v9 != 7)
    {
      goto LABEL_14;
    }
    int v10 = *(_DWORD *)v8;
    int v11 = *(_DWORD *)((char *)v8 + 3);
    if (v10 == 1920234358 && v11 == 1952675186)
    {
      if (((unint64_t)i[2] & 0xFFFFFFFFFFFFFFF8) == 0) {
        goto LABEL_20;
      }
      EmptyString = (uint64_t *)(((unint64_t)i[2] & 0xFFFFFFFFFFFFFFF8) + 16);
      goto LABEL_21;
    }
LABEL_14:
    if (!pxrInternal__aapl__pxrReserved__::SdrShaderProperty::IsVStructMember((pxrInternal__aapl__pxrReserved__::SdrShaderProperty *)i[3])) {
      continue;
    }
    uint64_t v13 = i[3] + 27;
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168CB120((void *)this + 58, v13);
    if (!v7) {
      continue;
    }
    if ((*v13 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_20:
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
      goto LABEL_21;
    }
    EmptyString = (uint64_t *)((*v13 & 0xFFFFFFFFFFFFFFF8) + 16);
LABEL_21:
    sub_216A38350((uint64_t)&v31, (unsigned __int8 *)EmptyString, (uint64_t)EmptyString);
  }
  uint64_t v15 = (uint64_t **)*((void *)this + 65);
  if (v15)
  {
    std::string::size_type v16 = (void *)((char *)this + 504);
    do
    {
      uint64_t v17 = (void *)(*(uint64_t (**)(uint64_t *))(*v15[3] + 24))(v15[3]);
      uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      if (!v18) {
        uint64_t v18 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      }
      unint64_t v19 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168CB120(v17, (void *)v18 + 10);
      if (!v19) {
        goto LABEL_37;
      }
      unint64_t v20 = (void *)((char *)v19 + 24);
      int v21 = *((char *)v19 + 47);
      if (v21 < 0)
      {
        if (*((void *)v19 + 4) != 7) {
          goto LABEL_37;
        }
        unint64_t v20 = (void *)*v20;
      }
      else if (v21 != 7)
      {
        goto LABEL_37;
      }
      int v22 = *(_DWORD *)v20;
      int v23 = *(_DWORD *)((char *)v20 + 3);
      if (v22 == 1920234358 && v23 == 1952675186)
      {
        if (((unint64_t)v15[2] & 0xFFFFFFFFFFFFFFF8) == 0) {
          goto LABEL_43;
        }
        uint64_t v26 = (uint64_t *)(((unint64_t)v15[2] & 0xFFFFFFFFFFFFFFF8) + 16);
        goto LABEL_44;
      }
LABEL_37:
      if (!pxrInternal__aapl__pxrReserved__::SdrShaderProperty::IsVStructMember((pxrInternal__aapl__pxrReserved__::SdrShaderProperty *)v15[3])) {
        goto LABEL_45;
      }
      uint64_t v25 = v15[3] + 27;
      unint64_t v19 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168CB120(v16, v25);
      if (!v19) {
        goto LABEL_45;
      }
      if ((*v25 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
LABEL_43:
        uint64_t v26 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v19);
        goto LABEL_44;
      }
      uint64_t v26 = (uint64_t *)((*v25 & 0xFFFFFFFFFFFFFFF8) + 16);
LABEL_44:
      sub_216A38350((uint64_t)&v31, (unsigned __int8 *)v26, (uint64_t)v26);
LABEL_45:
      uint64_t v15 = (uint64_t **)*v15;
    }
    while (v15);
  }
  int64x2_t v27 = (void *)v32;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  unint64_t v28 = 0;
  if (v27)
  {
    uint64_t v29 = v27;
    do
    {
      ++v28;
      uint64_t v29 = (void *)*v29;
    }
    while (v29);
  }
  sub_216BB4308(a2, v27, 0, v28);
  return sub_216850298((uint64_t)&v31);
}

void sub_216BB3D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetShaderInput(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::NdrNode::GetInput(this, a2);
  if (result)
  {
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetShaderOutput(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::NdrNode::GetOutput(this, a2);
  if (result)
  {
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetAssetIdentifierInputNames@<X0>(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::NdrNode::GetInputNames(this);
  uint64_t v5 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)result;
  int v6 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(result + 8);
  if (*(const pxrInternal__aapl__pxrReserved__::TfToken **)result != v6)
  {
    do
    {
      uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetShaderInput(this, v5);
      uint64_t v7 = result;
      if (result)
      {
        uint64_t result = pxrInternal__aapl__pxrReserved__::SdrShaderProperty::IsAssetIdentifier((pxrInternal__aapl__pxrReserved__::SdrShaderProperty *)result);
        if (result)
        {
          uint64_t v8 = (uint64_t *)(v7 + 8);
          int v9 = *(uint64_t **)(a2 + 8);
          if ((unint64_t)v9 >= *(void *)(a2 + 16))
          {
            uint64_t result = (uint64_t)sub_216973984((char **)a2, v8);
          }
          else
          {
            uint64_t v10 = *v8;
            *int v9 = *v8;
            if ((v10 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              *v9 &= 0xFFFFFFFFFFFFFFF8;
            }
            uint64_t result = (uint64_t)(v9 + 1);
          }
          *(void *)(a2 + 8) = result;
        }
      }
      uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8);
    }
    while (v5 != v6);
  }
  return result;
}

void sub_216BB3F3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdrShaderProperty *pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetDefaultInput(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this)
{
  uint64_t InputNames = pxrInternal__aapl__pxrReserved__::NdrNode::GetInputNames(this);
  int v3 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)InputNames;
  uint64_t v4 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(InputNames + 8);
  while (v3 != v4)
  {
    ShaderInput = (pxrInternal__aapl__pxrReserved__::SdrShaderProperty *)pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetShaderInput(this, v3);
    if (ShaderInput)
    {
      int v6 = ShaderInput;
      if (pxrInternal__aapl__pxrReserved__::SdrShaderProperty::IsDefaultInput(ShaderInput)) {
        return v6;
      }
    }
    int v3 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v3 + 8);
  }
  return 0;
}

void pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetHelp(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  if (!v4) {
    uint64_t v4 = sub_216BB427C(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v6 = 0;
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::StringVal((void *)v4 + 3, (void *)this + 20, (uint64_t)__p, a2);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216BB4034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetImplementationName@<X0>(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  if (!v4) {
    uint64_t v4 = sub_216BB427C(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  }
  uint64_t v5 = (void *)((char *)v4 + 56);

  return pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::StringVal(v5, (void *)this + 20, (uint64_t)this + 40, a2);
}

void *pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetRole@<X0>(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  if (!v4) {
    uint64_t v4 = sub_216BB427C(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  }
  uint64_t v5 = (void *)((char *)v4 + 8);

  return pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::StringVal(v5, (void *)this + 20, (uint64_t)this + 40, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetPropertyNamesForPage@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  int v3 = *(const void ***)(result + 136);
  for (uint64_t i = *(const void ***)(result + 144); v3 != i; ++v3)
  {
    if (*v3) {
    else
    }
      uint64_t v7 = 0;
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 200), a2);
    if (result)
    {
      uint64_t v8 = (uint64_t *)(v7 + 8);
      int v9 = *(uint64_t **)(a3 + 8);
      if ((unint64_t)v9 >= *(void *)(a3 + 16))
      {
        uint64_t result = (uint64_t)sub_216973984((char **)a3, v8);
      }
      else
      {
        uint64_t v10 = *v8;
        *int v9 = *v8;
        if ((v10 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *v9 &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t result = (uint64_t)(v9 + 1);
      }
      *(void *)(a3 + 8) = result;
    }
  }
  return result;
}

void sub_216BB4238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216BB4254(uint64_t a1)
{
  sub_216BB44A8(a1);

  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *sub_216BB427C(atomic_ullong *a1)
{
  uint64_t result = sub_216BB42C4();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType::~SdrNodeMetadata_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *sub_216BB42C4()
{
  unint64_t v0 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)operator new(0x70uLL);
  pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType::SdrNodeMetadata_StaticTokenType(v0);
  return v0;
}

void sub_216BB42F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216BB4308(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_21677CACC(result, a4);
    uint64_t result = (void *)sub_216BB4390((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216BB4370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216889A04(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216BB4390(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    uint64_t v7 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a4 + v7);
      uint64_t v6 = (void *)*v6;
      v7 += 8;
    }
    while (v6 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_216BB43F0(_Unwind_Exception *a1)
{
  for (; v2; v2 -= 8)
  {
    uint64_t v3 = *(void *)(v1 - 8 + v2);
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *sub_216BB441C(atomic_ullong *a1)
{
  uint64_t result = sub_216BB4464();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType::~SdrPropertyTypes_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *sub_216BB4464()
{
  unint64_t v0 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)operator new(0x88uLL);
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType::SdrPropertyTypes_StaticTokenType(v0);
  return v0;
}

void sub_216BB4494(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216BB44A8(uint64_t a1)
{
  *(void *)a1 = &unk_26C75BA30;
  sub_2168C08A0(a1 + 504);
  sub_2168C08A0(a1 + 464);
  uint64_t v4 = (void **)(a1 + 440);
  sub_216889A04(&v4);
  uint64_t v4 = (void **)(a1 + 416);
  sub_216889A04(&v4);
  uint64_t v2 = *(void *)(a1 + 408);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 400);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = (void **)(a1 + 376);
  sub_216889A04(&v4);
  uint64_t v4 = (void **)(a1 + 352);
  sub_216889A04(&v4);
  pxrInternal__aapl__pxrReserved__::NdrNode::~NdrNode((void **)a1);
}

void pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType::~SdrPropertyTypes_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *this)
{
  uint64_t v15 = (void **)((char *)this + 112);
  sub_216889A04(&v15);
  uint64_t v2 = *((void *)this + 13);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 12);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 11);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 10);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 9);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 8);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 7);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 6);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 5);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 4);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 3);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)this + 2);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *((void *)this + 1);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType::SdrPropertyTypes_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *this)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  int v22 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "int", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v22, "string", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "float", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "half", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "color", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "color4", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "point", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "normal", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "vector", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "matrix", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "struct", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "terminal", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "vstruct", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "unknown", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v23 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v22;
  uint64_t v24 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v25 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v26 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v27 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v28 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v29 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v29 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v30 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v31 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v31 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v32 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v32 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v33 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v33 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v34 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v34 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v35 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v35 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v36 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v36 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  std::string::size_type v16 = (char *)operator new(0x70uLL);
  uint64_t v17 = 0;
  *((void *)this + 14) = v16;
  *((void *)this + 15) = v16;
  *((void *)this + 16) = v16 + 112;
  do
  {
    uint64_t v18 = *(uint64_t *)((char *)&v23 + v17);
    *(void *)&v16[v17] = v18;
    if ((v18 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v16[v17] &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 += 8;
  }
  while (v17 != 112);
  *((void *)this + 15) = v16 + 112;
  for (uint64_t i = 104; i != -8; i -= 8)
  {
    uint64_t v20 = *(uint64_t *)((char *)&v23 + i);
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_216BB4BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void **a15, uint64_t a16, char a17)
{
  sub_216889A04(&a15);
  uint64_t v27 = 104;
  while (1)
  {
    uint64_t v28 = *(void *)(&a17 + v27);
    if ((v28 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v27 -= 8;
    if (v27 == -8)
    {
      if ((*v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_216BB4DB8()
{
}

void sub_216BB4DC0()
{
}

void sub_216BB4DC8()
{
}

void sub_216BB4DD0()
{
}

void sub_216BB4DD8()
{
}

void pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType::~SdrPropertyMetadata_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *this)
{
  int v22 = (void **)((char *)this + 168);
  sub_216889A04(&v22);
  uint64_t v2 = *((void *)this + 20);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 19);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 18);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 17);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 16);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 15);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 14);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 13);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 12);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 11);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 10);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)this + 9);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *((void *)this + 8);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *((void *)this + 7);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *((void *)this + 6);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *((void *)this + 5);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *((void *)this + 4);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *((void *)this + 3);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *((void *)this + 2);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *((void *)this + 1);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType::SdrPropertyMetadata_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *this)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v29 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "label", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v29, "help", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "page", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "renderType", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "role", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "widget", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "hints", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "options", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "isDynamicArray", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "connectable", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "tag", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "validConnectionTypes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "vstructMemberOf", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "vstructMemberName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "vstructConditionalExpr", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "__SDR__isAssetIdentifier", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "__SDR__implementationName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "sdrUsdDefinitionType", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "__SDR__defaultinput", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "__SDR__target", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "__SDR__colorspace", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v30 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v29;
  uint64_t v31 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v31 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v32 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v32 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v33 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v33 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v34 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v34 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v35 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v35 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v36 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v36 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v37 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v37 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v38 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v38 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v39 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v39 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v40 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v40 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v41 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v41 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v42 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v42 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v43 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v43 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v44 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v44 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v45 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v46 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v46 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v47 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v47 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v48 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v21 = *((void *)this + 19);
  uint64_t v49 = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v49 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = *((void *)this + 20);
  uint64_t v50 = v22;
  if ((v22 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v50 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  uint64_t v23 = (char *)operator new(0xA8uLL);
  uint64_t v24 = 0;
  *((void *)this + 21) = v23;
  *((void *)this + 22) = v23;
  *((void *)this + 23) = v23 + 168;
  do
  {
    uint64_t v25 = *(uint64_t *)((char *)&v30 + v24);
    *(void *)&v23[v24] = v25;
    if ((v25 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v23[v24] &= 0xFFFFFFFFFFFFFFF8;
    }
    v24 += 8;
  }
  while (v24 != 168);
  *((void *)this + 22) = v23 + 168;
  for (uint64_t i = 160; i != -8; i -= 8)
  {
    uint64_t v27 = *(uint64_t *)((char *)&v30 + i);
    if ((v27 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_216BB56E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void **a22,uint64_t a23,char a24)
{
  sub_216889A04(&a22);
  uint64_t v34 = 160;
  while (1)
  {
    uint64_t v35 = *(void *)(&a24 + v34);
    if ((v35 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v34 -= 8;
    if (v34 == -8)
    {
      if ((*v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_216BB598C()
{
}

void sub_216BB5994()
{
}

void sub_216BB599C()
{
}

void sub_216BB59A4()
{
}

void sub_216BB59AC()
{
}

void sub_216BB59B4()
{
}

void sub_216BB59BC()
{
}

void sub_216BB59C4()
{
}

void sub_216BB59CC()
{
}

void sub_216BB59D4()
{
}

void sub_216BB59DC()
{
}

void sub_216BB59E4()
{
}

void pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType::~SdrPropertyRole_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType *this)
{
  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

{
  void **v2;

  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType::SdrPropertyRole_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrPropertyRole_StaticTokenType *this)
{
  uint64_t v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "none", 0);
  uint64_t v3 = *v2;
  if ((*v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = operator new(8uLL);
  *((void *)this + 1) = v4;
  *((void *)this + 2) = v4;
  void *v4 = v3;
  uint64_t v5 = v4 + 1;
  *((void *)this + 3) = v4 + 1;
  if ((v3 & 7) != 0)
  {
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      *v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 2) = v5;
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  else
  {
    *((void *)this + 2) = v5;
  }
  return this;
}

void sub_216BB5B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v11 = v10;
  sub_216889A04(&a9);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2173242CC(v9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdrPropertyTokens_StaticTokenType::~SdrPropertyTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrPropertyTokens_StaticTokenType *this)
{
  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

{
  void **v2;

  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::SdrPropertyTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdrPropertyTokens_StaticTokenType::SdrPropertyTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrPropertyTokens_StaticTokenType *this)
{
  uint64_t v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, ":", 0);
  uint64_t v3 = *v2;
  if ((*v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = operator new(8uLL);
  *((void *)this + 1) = v4;
  *((void *)this + 2) = v4;
  void *v4 = v3;
  uint64_t v5 = v4 + 1;
  *((void *)this + 3) = v4 + 1;
  if ((v3 & 7) != 0)
  {
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      *v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 2) = v5;
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  else
  {
    *((void *)this + 2) = v5;
  }
  return this;
}

void sub_216BB5D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v11 = v10;
  sub_216889A04(&a9);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2173242CC(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrShaderProperty::SdrShaderProperty(uint64_t a1, uint64_t *a2, atomic_uint **a3, void *a4, int a5, atomic_uint *a6, void *a7, uint64_t a8, uint64_t **a9)
{
  uint64_t v44 = a6;
  sub_216BB6548(a3, &v44, a7, (atomic_uint **)__p);
  sub_216BB6548(a3, &v44, a7, (atomic_uint **)v43);
  pxrInternal__aapl__pxrReserved__::NdrProperty::NdrProperty(a1, a2, (uint64_t *)__p, a4, a5, (uint64_t)v43[1], 0, (uint64_t)a7);
  if (((uint64_t)v43[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v43[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (((uint64_t)__p[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)a1 = &unk_26C75BA60;
  sub_216BA71F4(a1 + 104, a8);
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 16sub_2168EBBB8(&a9, 0) = 0;
  sub_216BBABAC((uint64_t *)(a1 + 144), *a9, a9[1], ((char *)a9[1] - (char *)*a9) >> 4);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 20sub_2168EBBB8(&a9, 0) = 0u;
  uint64_t v16 = (void **)(a1 + 200);
  *(_OWORD *)(a1 + 216) = 0u;
  uint64_t v17 = (void **)(a1 + 216);
  uint64_t v38 = (void **)(a1 + 208);
  uint64_t v39 = (void **)(a1 + 192);
  uint64_t v37 = (void **)(a1 + 224);
  *(void *)(a1 + 232) = 0;
  uint64_t v18 = (void **)(a1 + 232);
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 256) = 1;
  uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v19) {
    uint64_t v19 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  }
  *(unsigned char *)(a1 + 56) = pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::IsTruthy((void *)v19 + 8, (void *)(a1 + 64));
  if (a5)
  {
    *(unsigned char *)(a1 + 57) = 1;
  }
  else
  {
    uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v20) {
      uint64_t v20 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    }
    if (sub_2168CB120((void *)(a1 + 64), (void *)v20 + 9))
    {
      uint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      if (!v21) {
        uint64_t v21 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      }
      BOOL IsTruthy = pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::IsTruthy((void *)v21 + 9, (void *)(a1 + 64));
    }
    else
    {
      BOOL IsTruthy = 1;
    }
    *(unsigned char *)(a1 + 57) = IsTruthy;
  }
  uint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v23) {
    uint64_t v23 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  }
  sub_216BB95F4((uint64_t *)__p, (uint64_t *)v23 + 5, "default");
  sub_216BBAD48(a1 + 64, __p, (uint64_t *)__p);
  if (v42 < 0) {
    operator delete(__p[1]);
  }
  if (((uint64_t)__p[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v24) {
    uint64_t v24 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  }
  v43[0] = 0;
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVal(v24, (void *)(a1 + 64), (atomic_uint **)v43, (atomic_uint **)__p);
  if (__p == v39)
  {
    unint64_t v25 = (unint64_t)__p[0];
  }
  else
  {
    if (((unint64_t)*v39 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)*v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    unint64_t v25 = 0;
    void *v39 = __p[0];
    __p[0] = 0;
  }
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (((uint64_t)v43[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v43[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v26) {
    uint64_t v26 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  }
  v43[0] = 0;
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVal((void *)v26 + 2, (void *)(a1 + 64), (atomic_uint **)v43, (atomic_uint **)__p);
  if (__p == v16)
  {
    unint64_t v27 = (unint64_t)__p[0];
  }
  else
  {
    if (((unint64_t)*v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    unint64_t v27 = 0;
    *uint64_t v16 = __p[0];
    __p[0] = 0;
  }
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (((uint64_t)v43[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v43[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v28) {
    uint64_t v28 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  }
  v43[0] = 0;
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVal((void *)v28 + 5, (void *)(a1 + 64), (atomic_uint **)v43, (atomic_uint **)__p);
  if (__p == v38)
  {
    unint64_t v29 = (unint64_t)__p[0];
  }
  else
  {
    if (((unint64_t)*v38 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)*v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    unint64_t v29 = 0;
    void *v38 = __p[0];
    __p[0] = 0;
  }
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (((uint64_t)v43[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v43[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v30) {
    uint64_t v30 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  }
  v43[0] = 0;
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVal((void *)v30 + 12, (void *)(a1 + 64), (atomic_uint **)v43, (atomic_uint **)__p);
  if (__p == v17)
  {
    unint64_t v31 = (unint64_t)__p[0];
  }
  else
  {
    if (((unint64_t)*v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    unint64_t v31 = 0;
    *uint64_t v17 = __p[0];
    __p[0] = 0;
  }
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (((uint64_t)v43[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v43[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v32 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v32) {
    uint64_t v32 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  }
  v43[0] = 0;
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVal((void *)v32 + 13, (void *)(a1 + 64), (atomic_uint **)v43, (atomic_uint **)__p);
  if (__p == v37)
  {
    unint64_t v33 = (unint64_t)__p[0];
  }
  else
  {
    if (((unint64_t)*v37 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)*v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    unint64_t v33 = 0;
    *uint64_t v37 = __p[0];
    __p[0] = 0;
  }
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (((uint64_t)v43[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v43[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v34 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v34) {
    uint64_t v34 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  }
  v43[0] = 0;
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVal((void *)v34 + 14, (void *)(a1 + 64), (atomic_uint **)v43, (atomic_uint **)__p);
  if (__p == v18)
  {
    if (((uint64_t)__p[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if (((unint64_t)*v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *uint64_t v18 = __p[0];
    __p[0] = 0;
  }
  if (((uint64_t)v43[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v43[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v35 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v35) {
    uint64_t v35 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  }
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::TokenVecVal((void *)v35 + 11, (void *)(a1 + 64), (char **)__p);
  sub_216A698A4((void **)(a1 + 168));
  *(_OWORD *)(a1 + 168) = *(_OWORD *)__p;
  *(void *)(a1 + 184) = v41;
  __p[1] = 0;
  uint64_t v41 = 0;
  __p[0] = 0;
  v43[0] = __p;
  sub_216889A04(v43);
  return a1;
}

{
  return pxrInternal__aapl__pxrReserved__::SdrShaderProperty::SdrShaderProperty(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_216BB63B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21)
{
  sub_2168EE084(v23 + 72);
  if ((*v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  a13 = v23;
  sub_216889A04((void ***)&a13);
  sub_216BB1A58((void ***)&a13);
  sub_216BA5BB8(v22);
  pxrInternal__aapl__pxrReserved__::NdrProperty::~NdrProperty(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_216BB6548@<X0>(atomic_uint **a1@<X0>, atomic_uint **a2@<X1>, void *a3@<X2>, atomic_uint **a4@<X8>)
{
  uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::GetRoleFromMetadata(a3, &v15);
  if (*a1) {
    BOOL v8 = v15 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8
    && (v9 = (void *)sub_216BB8378(), v10 = sub_2168CB120(v9, a1), uint64_t result = sub_216BB8378(), v10)
    && (uint64_t result = (uint64_t)sub_2168CB120(v10 + 3, &v15)) != 0)
  {
    uint64_t v11 = *(atomic_uint **)(result + 24);
    *a4 = v11;
    if ((v11 & 7) != 0)
    {
      uint64_t v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
        *a4 = v12;
      }
    }
    a2 = (atomic_uint **)(result + 32);
  }
  else
  {
    uint64_t v13 = *a1;
    *a4 = *a1;
    if ((v13 & 7) != 0)
    {
      uint64_t v14 = (atomic_uint *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v14, 2u, memory_order_relaxed) & 1) == 0) {
        *a4 = v14;
      }
    }
  }
  a4[1] = *a2;
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216BB6638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdrShaderProperty::GetHelp(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v4) {
    uint64_t v4 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v6 = 0;
  pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::StringVal((void *)v4 + 1, (void *)this + 8, (uint64_t)__p, a2);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216BB66E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::SdrShaderProperty::GetImplementationName@<X0>(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = this;
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdrShaderProperty *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v4)
  {
    this = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    uint64_t v4 = this;
  }
  if ((*((void *)v2 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*((void *)v2 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }

  return pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::StringVal((void *)v4 + 16, (void *)v2 + 8, (uint64_t)EmptyString, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrShaderProperty::CanConnectTo(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *this, const pxrInternal__aapl__pxrReserved__::NdrProperty *a2)
{
  if (*((unsigned char *)this + 40)) {
    uint64_t v2 = a2;
  }
  else {
    uint64_t v2 = this;
  }
  if (*((unsigned char *)this + 40)) {
    uint64_t v3 = this;
  }
  else {
    uint64_t v3 = a2;
  }
  if (*((unsigned __int8 *)this + 40) == *((unsigned __int8 *)a2 + 40)) {
    return 0;
  }
  uint64_t v6 = *((void *)v2 + 6);
  uint64_t v7 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *))(*(void *)v2 + 24))(v2);
  uint64_t v8 = *((void *)v3 + 6);
  uint64_t v9 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *))(*(void *)v3 + 24))(v3);
  uint64_t v10 = (uint64_t *)((char *)v2 + 16);
  uint64_t v11 = (void *)((char *)v3 + 16);
  unint64_t v12 = *((void *)v2 + 2) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = *((void *)v3 + 2) & 0xFFFFFFFFFFFFFFF8;
  if (v12 == v13 && v6 == v8) {
    return 1;
  }
  uint64_t v15 = (void *)v9;
  if (v12 == v13 && !*((void *)v3 + 6) && !*((unsigned char *)v3 + 56) && *((unsigned char *)v2 + 56)) {
    return 1;
  }
  sub_216BB6C80(v10, (int)v6, v7, *((unsigned int *)this + 64), &v38);
  sub_216BB6C80((uint64_t *)v3 + 2, (int)v8, v15, *((unsigned int *)this + 64), &v36);
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v16) {
    uint64_t v16 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*v10 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v16 + 4) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_31;
  }
  uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v17) {
    uint64_t v17 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*v10 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v17 + 6) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_31;
  }
  uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v18) {
    uint64_t v18 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*v10 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v18 + 7) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_31;
  }
  uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v19) {
    uint64_t v19 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*v10 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v19 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_31:
    BOOL v21 = 1;
  }
  else
  {
    uint64_t v20 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v20) {
      uint64_t v20 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    BOOL v21 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&v38, (void **)v20 + 20);
  }
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v22) {
    uint64_t v22 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*v11 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v22 + 4) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_47;
  }
  uint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v23) {
    uint64_t v23 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*v11 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v23 + 6) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_47;
  }
  uint64_t v24 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v24) {
    uint64_t v24 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*v11 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v24 + 7) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_47;
  }
  unint64_t v25 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v25) {
    unint64_t v25 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*v11 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v25 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_47:
    BOOL v27 = 1;
  }
  else
  {
    uint64_t v26 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v26) {
      uint64_t v26 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    BOOL v27 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&v36, (void **)v26 + 20);
  }
  if (v21 && v27) {
    goto LABEL_64;
  }
  uint64_t v28 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v28) {
    uint64_t v28 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*v10 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v28 + 5) & 0xFFFFFFFFFFFFFFF8))
  {
    BOOL v30 = 1;
  }
  else
  {
    unint64_t v29 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v29) {
      unint64_t v29 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    BOOL v30 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&v38, (void **)v29 + 21);
  }
  unint64_t v31 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v31) {
    unint64_t v31 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*v11 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v31 + 5) & 0xFFFFFFFFFFFFFFF8))
  {
    BOOL v33 = 1;
  }
  else
  {
    uint64_t v32 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v32) {
      uint64_t v32 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    BOOL v33 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&v36, (void **)v32 + 21);
  }
  if (v30 && v33) {
    goto LABEL_64;
  }
  uint64_t v34 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v34) {
    uint64_t v34 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*v11 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v34 + 12) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_71;
  }
  uint64_t v35 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v35) {
    uint64_t v35 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*v10 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v35 + 2) & 0xFFFFFFFFFFFFFFF8)) {
LABEL_64:
  }
    uint64_t result = 1;
  else {
LABEL_71:
  }
    uint64_t result = 0;
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v39 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216BB6C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *sub_216BB6C80@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (a4 == 1)
  {
    unint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v13) {
      unint64_t v13 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    }
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::StringVal((void *)v13 + 17, a3, (uint64_t)&v46, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v45);
    if (SHIBYTE(v42) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v48) < 0) {
      operator delete(v46);
    }
    if (v45)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B912A8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B912A8))
      {
        xmmword_267B912B0 = 0u;
        unk_267B912C0 = 0u;
        dword_267B912D0 = 1065353216;
        uint64_t v35 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry **)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
        if (!v35) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
        }
        pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetAllTypes(v35, &__p);
        uint64_t v36 = (uint64_t *)__p;
        uint64_t v37 = (uint64_t *)v41;
        if (__p != v41)
        {
          do
          {
            pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)v36, (atomic_uint **)&v46);
            sub_216BBA20C((uint64_t)&xmmword_267B912B0, &v46, (uint64_t *)&v46, v36);
            if ((v46 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAliasesAsTokens((uint64_t **)v36, &v46);
            uint64_t v39 = (uint64_t *)v46;
            uint64_t v38 = v47;
            while (v39 != v38)
            {
              sub_216BBA474((uint64_t)&xmmword_267B912B0, v39, v39, v36);
              ++v39;
            }
            uint64_t v49 = &v46;
            sub_216889A04(&v49);
            ++v36;
          }
          while (v36 != v37);
          uint64_t v36 = (uint64_t *)__p;
        }
        if (v36)
        {
          uint64_t v41 = (const char *)v36;
          operator delete(v36);
        }
        __cxa_atexit((void (*)(void *))sub_216BBA190, &xmmword_267B912B0, &dword_216758000);
        qword_267B912A0 = (uint64_t)&xmmword_267B912B0;
        __cxa_guard_release(&qword_267B912A8);
      }
      uint64_t v14 = (void *)qword_267B912A0;
      if (sub_2168CB120((void *)qword_267B912A0, &v45))
      {
        uint64_t v16 = sub_2168CB120(v14, &v45);
        if (!v16) {
          sub_216855AEC("unordered_map::at: key not found");
        }
        std::string __p = (void *)v16[3];
      }
      else
      {
        std::string __p = "sdr/shaderProperty.cpp";
        uint64_t v41 = "_GetSdrUsdDefinitionType";
        uint64_t v42 = 178;
        uint64_t v43 = "SdfValueTypeName pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_GetSdrUsdDefinitionType(const NdrTokenMap &)";
        char v44 = 0;
        unint64_t v23 = v45 & 0xFFFFFFFFFFFFFFF8;
        if ((v45 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v24 = (const char *)(v23 + 16);
          if (*(char *)(v23 + 39) < 0) {
            uint64_t v24 = *(const char **)v24;
          }
        }
        else
        {
          uint64_t v24 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Invalid SdfValueTypeName or alias provided for sdrUsdDefinitionType metadata: %s", v15, v24);
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&__p);
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&__p);
    }
    if ((v45 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&__p);
    if (result)
    {
      int v26 = sub_216BB966C(a2, a3);
      if (sub_216BB7650(a3))
      {
        uint64_t result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (v26)
        {
          if (!result) {
            uint64_t result = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          }
          unint64_t v12 = (void **)((char *)result + 552);
        }
        else
        {
          if (!result) {
            uint64_t result = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          }
          unint64_t v12 = (void **)((char *)result + 96);
        }
        goto LABEL_83;
      }
      BOOL v27 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      if (!v27) {
        BOOL v27 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      }
      if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v27 + 11) & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_76;
      }
      uint64_t v28 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      if (!v28) {
        uint64_t v28 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      }
      if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v28 + 10) & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_76;
      }
      unint64_t v29 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      if (!v29) {
        unint64_t v29 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      }
      if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v29 + 12) & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_76:
        uint64_t result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (v26)
        {
          if (!result) {
            uint64_t result = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          }
          uint64_t v32 = (uint64_t *)((char *)result + 544);
        }
        else
        {
          if (!result) {
            uint64_t result = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          }
          uint64_t v32 = (uint64_t *)((char *)result + 88);
        }
        goto LABEL_96;
      }
      BOOL v30 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      if (!v30) {
        BOOL v30 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      }
      if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v30 & 0xFFFFFFFFFFFFFFF8))
      {
        switch(a2)
        {
          case 4:
            uint64_t result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (!result) {
              uint64_t result = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            }
            uint64_t v19 = (void *)*((void *)result + 15);
            goto LABEL_84;
          case 3:
            uint64_t result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (!result) {
              uint64_t result = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            }
            uint64_t v19 = (void *)*((void *)result + 14);
            goto LABEL_84;
          case 2:
            uint64_t result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (!result) {
              uint64_t result = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            }
            uint64_t v19 = (void *)*((void *)result + 13);
            goto LABEL_84;
        }
      }
      unint64_t v31 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      if (!v31) {
        unint64_t v31 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      }
      if ((*a1 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v31 + 2) & 0xFFFFFFFFFFFFFFF8)) {
        return (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)sub_216BB96C4(a1, v26, a5);
      }
      if (a2 == 4)
      {
        uint64_t result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!result) {
          uint64_t result = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        uint64_t v19 = (void *)*((void *)result + 21);
        goto LABEL_84;
      }
      if (a2 == 3)
      {
        uint64_t result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!result) {
          uint64_t result = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        uint64_t v19 = (void *)*((void *)result + 20);
        goto LABEL_84;
      }
      if (a2 != 2) {
        return (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)sub_216BB96C4(a1, v26, a5);
      }
      uint64_t result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!result) {
        uint64_t result = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      uint64_t v19 = (void *)*((void *)result + 19);
    }
    else
    {
      uint64_t v19 = __p;
    }
LABEL_84:
    *a5 = v19;
    a5[1] = 0;
    return result;
  }
  if (a4)
  {
    if (sub_216BA6B60(1)) {
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Invalid/unsupported usdEncodingVersion %d. Current version is %d.", v17, v18, a4, 1);
    }
    uint64_t result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!result) {
      uint64_t result = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v19 = (void *)*((void *)result + 11);
    goto LABEL_84;
  }
  int v10 = sub_216BB966C(a2, a3);
  if (sub_216BB7650(a3))
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (v10)
    {
      if (!result) {
        uint64_t result = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      unint64_t v12 = (void **)((char *)result + 536);
    }
    else
    {
      if (!result) {
        uint64_t result = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      unint64_t v12 = (void **)((char *)result + 80);
    }
LABEL_83:
    uint64_t v19 = *v12;
    goto LABEL_84;
  }
  uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v20) {
    uint64_t v20 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v20 + 11) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!result) {
      uint64_t result = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v25 = *((void *)result + 11);
    goto LABEL_97;
  }
  BOOL v21 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v21) {
    BOOL v21 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v21 + 10) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!result) {
      uint64_t result = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v25 = *((void *)result + 10);
    goto LABEL_97;
  }
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v22) {
    uint64_t v22 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v22 + 12) & 0xFFFFFFFFFFFFFFF8))
  {
    return (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)sub_216BB96C4(a1, v10, a5);
  }
  uint64_t result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (v10)
  {
    if (!result) {
      uint64_t result = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v32 = (uint64_t *)((char *)result + 512);
  }
  else
  {
    if (!result) {
      uint64_t result = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v32 = (uint64_t *)((char *)result + 56);
  }
LABEL_96:
  uint64_t v25 = *v32;
LABEL_97:
  uint64_t v33 = *a1;
  *a5 = v25;
  a5[1] = v33;
  if ((v33 & 7) != 0)
  {
    uint64_t v34 = (atomic_uint *)(v33 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v34, 2u, memory_order_relaxed) & 1) == 0) {
      a5[1] = v34;
    }
  }
  return result;
}

void sub_216BB74AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  if ((a19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdrShaderProperty::IsVStructMember(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v2) {
    uint64_t v2 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  }
  return sub_2168CB120((void *)this + 8, (void *)v2 + 13) != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::SdrShaderProperty::IsVStruct(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v2) {
    uint64_t v2 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  return (*((void *)this + 2) & 0xFFFFFFFFFFFFFFF8) == (*((void *)v2 + 12) & 0xFFFFFFFFFFFFFFF8);
}

pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *pxrInternal__aapl__pxrReserved__::SdrShaderProperty::GetTypeAsSdfType@<X0>(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *this@<X0>, void *a2@<X8>)
{
  return sub_216BB6C80((uint64_t *)this + 2, *((void *)this + 6), (void *)this + 8, *((unsigned int *)this + 64), a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdrShaderProperty::IsAssetIdentifier(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *this)
{
  return sub_216BB7650((void *)this + 8);
}

BOOL sub_216BB7650(void *a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v2) {
    uint64_t v2 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  }
  return sub_2168CB120(a1, (void *)v2 + 15) != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::SdrShaderProperty::IsDefaultInput(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v2) {
    uint64_t v2 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  }
  return sub_2168CB120((void *)this + 8, (void *)v2 + 18) != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrShaderProperty::_SetUsdEncodingVersion(uint64_t this, int a2)
{
  *(_DWORD *)(this + 256) = a2;
  return this;
}

void *pxrInternal__aapl__pxrReserved__::SdrShaderProperty::_ConvertToVStruct(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v2) {
    uint64_t v2 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  sub_2168D2318((void *)this + 2, (void *)v2 + 12);
  (*(void (**)(uint64_t *__return_ptr, pxrInternal__aapl__pxrReserved__::SdrShaderProperty *))(*(void *)this + 48))(&v6, this);
  uint64_t v5 = v6;
  DefaultValue = (void *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDefaultValue((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v5);
  uint64_t result = sub_2168EC6DC((void *)this + 3, DefaultValue);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrShaderProperty::_FinalizeProperty(pxrInternal__aapl__pxrReserved__::SdrShaderProperty *this)
{
  uint64_t v120 = *MEMORY[0x263EF8340];
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdrShaderProperty *)((char *)this + 24);
  uint64_t v3 = (void *)((char *)this + 16);
  uint64_t v4 = (void *)((char *)this + 64);
  if (!*((void *)this + 4))
  {
    sub_2168EE4C4(&v114, v2);
    goto LABEL_59;
  }
  uint64_t v5 = (void *)*((void *)this + 6);
  sub_216BB6C80((uint64_t *)this + 2, (uint64_t)v5, v4, *((unsigned int *)this + 64), &v112);
  uint64_t v111 = v112;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType(v2, v6, v7);
  if (*(void *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v111) == Type)
  {
    sub_2168EE4C4(&v114, v2);
    goto LABEL_57;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v9) {
    uint64_t v9 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  }
  if (sub_2168CB120(v4, (void *)v9 + 17))
  {
    int v10 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v111);
    Typeid = (const pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::TfType::GetTypeid(v10);
    pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeid(v2, Typeid, &v114);
    if (v115) {
      goto LABEL_57;
    }
    sub_2168EE084((uint64_t)&v114);
  }
  int v12 = sub_216BB966C((uint64_t)v5, v4);
  unint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v13) {
    unint64_t v13 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v13 + 1) & 0xFFFFFFFFFFFFFFF8) && sub_216BB7650(v4))
  {
    if (v12)
    {
      uint64_t v119 = 0;
      memset(v118, 0, sizeof(v118));
      if (sub_216998044(v2))
      {
        uint64_t v14 = *((void *)this + 4);
        if ((v14 & 4) != 0) {
          uint64_t v15 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
        }
        else {
          uint64_t v15 = *(long long **)v2;
        }
        sub_2169E0154((uint64_t)v118, v15);
      }
      uint64_t v117 = 0;
      memset(v116, 0, sizeof(v116));
      sub_216BBA74C(v116[0].n128_u64, *(unint64_t *)v118);
      sub_2169B23EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v118, v16, v17);
      uint64_t v18 = v119;
      sub_2169B23EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v118, v19, v20);
      uint64_t v21 = v119 + 24 * *(void *)v118;
      while (v18 != v21)
      {
        pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v107);
        sub_216BBA8E8((uint64_t)v116, (long long *)v107);
        if (v110 < 0) {
          operator delete(*((void **)&v108 + 1));
        }
        if (SBYTE7(v108) < 0) {
          operator delete(v107[0]);
        }
        v18 += 24;
      }
      sub_216BBA7DC(v116, (pxrInternal__aapl__pxrReserved__::VtValue *)&v114);
      sub_2169B4408(v116);
      sub_2169B1EE4(v118);
    }
    else
    {
      memset(v118, 0, 24);
      if (sub_21695C360(v2))
      {
        uint64_t v32 = *((void *)this + 4);
        if ((v32 & 4) != 0) {
          uint64_t v33 = (const std::string *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v32 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
        }
        else {
          uint64_t v33 = *(const std::string **)v2;
        }
        std::string::operator=((std::string *)v118, v33);
      }
      pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v107);
      int v115 = &off_26C755A30;
      sub_2169B3DA8(&v114, (long long *)v107);
      if (v110 < 0) {
        operator delete(*((void **)&v108 + 1));
      }
      if (SBYTE7(v108) < 0) {
        operator delete(v107[0]);
      }
      if ((v118[23] & 0x80000000) != 0) {
        operator delete(*(void **)v118);
      }
    }
    goto LABEL_57;
  }
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v22) {
    uint64_t v22 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v22 + 2) & 0xFFFFFFFFFFFFFFF8)) {
    int v23 = v12;
  }
  else {
    int v23 = 0;
  }
  if (v23 != 1) {
    goto LABEL_56;
  }
  size_t v109 = 0;
  *(_OWORD *)size_t v107 = 0u;
  long long v108 = 0u;
  sub_216BBA820(v2, (uint64_t)v107);
  if (v107[0] != v5)
  {
    if (sub_216BBA888(0)) {
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Default value for fixed size float array type does not have the right length (%zu vs expected %zu)", v30, v31, v107[0], v5);
    }
    sub_2168EE4C4(&v114, v2);
    goto LABEL_54;
  }
  if (v5 == (void *)4)
  {
    sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107, v24, v25);
    unsigned int v34 = *v109;
    sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107, v35, v36);
    unsigned int v37 = v109[1];
    sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107, v38, v39);
    unsigned int v40 = v109[2];
    sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107, v41, v42);
    unsigned int v43 = v109[3];
    int v115 = (std::type_info **)((char *)&off_26C74E7B8 + 2);
    char v44 = operator new(0x14uLL);
    _DWORD *v44 = v34;
    v44[1] = v37;
    v44[2] = v40;
    v44[3] = v43;
    uint64_t v45 = v44 + 4;
LABEL_53:
    atomic_store(0, v45);
    unint64_t v114 = (unint64_t)v44;
    atomic_fetch_add_explicit((atomic_uint *volatile)v45, 1u, memory_order_relaxed);
    goto LABEL_54;
  }
  if (v5 == (void *)3)
  {
    sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107, v24, v25);
    unsigned int v46 = *v109;
    sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107, v47, v48);
    unsigned int v49 = v109[1];
    sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107, v50, v51);
    unsigned int v52 = v109[2];
    int v115 = (std::type_info **)((char *)&off_26C74E590 + 2);
    char v44 = operator new(0x10uLL);
    _DWORD *v44 = v46;
    v44[1] = v49;
    v44[2] = v52;
    uint64_t v45 = v44 + 3;
    goto LABEL_53;
  }
  if (v5 == (void *)2)
  {
    sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107, v24, v25);
    unsigned int v26 = *v109;
    sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107, v27, v28);
    unsigned int v29 = v109[1];
    int v115 = (std::type_info **)((char *)&off_26C74E368 + 3);
    unint64_t v114 = __PAIR64__(v29, v26);
LABEL_54:
    sub_2168F83DC((uint64_t)v107);
    goto LABEL_57;
  }
  sub_2168F83DC((uint64_t)v107);
LABEL_56:
  DefaultValue = (void *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDefaultValue((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v111);
  sub_2168EE4C4(&v114, DefaultValue);
LABEL_57:
  if ((v113 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v113 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
LABEL_59:
  sub_2168ED33C((void *)this + 30, &v114);
  sub_2168EE084((uint64_t)&v114);
  uint64_t v54 = (void *)*((void *)this + 6);
  char v55 = sub_216BB966C((uint64_t)v54, v4);
  sub_2168EE4C4(v116, v2);
  int v56 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v56) {
    int v56 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v56 & 0xFFFFFFFFFFFFFFF8))
  {
    if (v55) {
      char v65 = sub_216907880(v2);
    }
    else {
      char v65 = sub_21695A85C(v2);
    }
LABEL_105:
    if (v65) {
      goto LABEL_124;
    }
    goto LABEL_106;
  }
  size_t v57 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v57) {
    size_t v57 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v57 + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    if (v55) {
      char v65 = sub_216998044(v2);
    }
    else {
      char v65 = sub_21695C360(v2);
    }
    goto LABEL_105;
  }
  unint64_t v58 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v58) {
    unint64_t v58 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v58 + 2) & 0xFFFFFFFFFFFFFFF8))
  {
    if ((v55 & 1) == 0)
    {
      char v65 = sub_21691FA2C(v2);
      goto LABEL_105;
    }
    size_t v109 = 0;
    *(_OWORD *)size_t v107 = 0u;
    long long v108 = 0u;
    int v66 = sub_216BBA820(v2, (uint64_t)v107);
    if (v107[0] != v54)
    {
      if (sub_216BBA888(0)) {
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Default value for fixed size float array type does not have the right length (%zu vs expected %zu)", v82, v83, v107[0], v54);
      }
      goto LABEL_122;
    }
    if (v66)
    {
      if (v54 == (void *)4)
      {
        sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107, v67, v68);
        unsigned int v86 = *v109;
        sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107, v87, v88);
        unsigned int v89 = v109[1];
        sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107, v90, v91);
        unsigned int v92 = v109[2];
        sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107, v93, v94);
        unsigned int v95 = v109[3];
        *(void *)&v118[8] = (char *)&off_26C74E7B8 + 2;
        v96 = operator new(0x14uLL);
        _DWORD *v96 = v86;
        v96[1] = v89;
        v96[2] = v92;
        v96[3] = v95;
        size_t v97 = v96 + 4;
      }
      else
      {
        if (v54 != (void *)3)
        {
          if (v54 == (void *)2)
          {
            sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107, v67, v68);
            unsigned int v69 = *v109;
            sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107, v70, v71);
            unsigned int v72 = v109[1];
            *(void *)&v118[8] = (char *)&off_26C74E368 + 3;
            *(void *)size_t v118 = __PAIR64__(v72, v69);
LABEL_131:
            sub_2168ED33C(v116, v118);
            sub_2168EE084((uint64_t)v118);
            char v84 = 0;
LABEL_123:
            sub_2168F83DC((uint64_t)v107);
            if ((v84 & 1) == 0) {
              goto LABEL_124;
            }
            goto LABEL_106;
          }
          if (sub_216BBA888(0)) {
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Invalid arraySize provided. Expects 2/3/4 but %zu  provided.", v105, v106, v54);
          }
          goto LABEL_122;
        }
        sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107, v67, v68);
        unsigned int v98 = *v109;
        sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107, v99, v100);
        unsigned int v101 = v109[1];
        sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v107, v102, v103);
        unsigned int v104 = v109[2];
        *(void *)&v118[8] = (char *)&off_26C74E590 + 2;
        v96 = operator new(0x10uLL);
        _DWORD *v96 = v98;
        v96[1] = v101;
        v96[2] = v104;
        size_t v97 = v96 + 3;
      }
      atomic_store(0, v97);
      *(void *)size_t v118 = v96;
      atomic_fetch_add_explicit((atomic_uint *volatile)v97, 1u, memory_order_relaxed);
      goto LABEL_131;
    }
LABEL_122:
    char v84 = 1;
    goto LABEL_123;
  }
  size_t v59 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v59) {
    size_t v59 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v59 + 4) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_92;
  }
  uint64_t v60 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v60) {
    uint64_t v60 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v60 + 6) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_92;
  }
  size_t v61 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v61) {
    size_t v61 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v61 + 7) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_92;
  }
  int v62 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v62) {
    int v62 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v62 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_92:
    if (v55) {
      char v65 = sub_2168FD6AC(v2);
    }
    else {
      char v65 = sub_216949788(v2);
    }
    goto LABEL_105;
  }
  BOOL v63 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v63) {
    BOOL v63 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v63 + 5) & 0xFFFFFFFFFFFFFFF8))
  {
    if (v55) {
      char v65 = sub_2168FFE70(v2);
    }
    else {
      char v65 = sub_21694D72C(v2);
    }
    goto LABEL_105;
  }
  int v64 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  if (!v64) {
    int v64 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
  }
  if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v64 + 9) & 0xFFFFFFFFFFFFFFF8))
  {
    if (v55) {
      char v65 = sub_2169026B0(v2);
    }
    else {
      char v65 = sub_21695529C(v2);
    }
    goto LABEL_105;
  }
LABEL_106:
  if (sub_216BBA888(0))
  {
    unint64_t v75 = *((void *)this + 1) & 0xFFFFFFFFFFFFFFF8;
    if (v75)
    {
      int v76 = (const char *)(v75 + 16);
      if (*(char *)(v75 + 39) < 0) {
        int v76 = *(const char **)v76;
      }
    }
    else
    {
      int v76 = "";
    }
    unint64_t v77 = *v3 & 0xFFFFFFFFFFFFFFF8;
    if (v77)
    {
      uint64_t v78 = (const char *)(v77 + 16);
      if (*(char *)(v77 + 39) < 0) {
        uint64_t v78 = *(const char **)v78;
      }
    }
    else
    {
      uint64_t v78 = "";
    }
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)v116, v73, v74, (uint64_t)v107);
    if ((SBYTE7(v108) & 0x80u) == 0) {
      int v81 = v107;
    }
    else {
      int v81 = (void **)v107[0];
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Expected type for defaultValue for property: %s is %s, but %s was provided.", v79, v80, v76, v78, v81);
    if (SBYTE7(v108) < 0) {
      operator delete(v107[0]);
    }
  }
LABEL_124:
  sub_2168ED33C(v2, v116);
  return sub_2168EE084((uint64_t)v116);
}

void sub_216BB81CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_216BB8340(uint64_t a1)
{
  sub_216BBAAA4(a1);

  operator delete(v1);
}

uint64_t sub_216BB8368(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 57);
}

uint64_t sub_216BB8370(uint64_t a1)
{
  return a1 + 240;
}

uint64_t sub_216BB8378()
{
  v48[6] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91238, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91238))
  {
    uint64_t v1 = operator new(0x28uLL);
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v2) {
      uint64_t v2 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    uint64_t v3 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
    if (!v3) {
      uint64_t v3 = (uint64_t *)sub_216BB1DA8(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
    }
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v4) {
      uint64_t v4 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    uint64_t v5 = *((void *)v4 + 2);
    v32[0] = v5;
    if ((v5 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v32[0] &= 0xFFFFFFFFFFFFFFF8;
    }
    v32[1] = 3;
    sub_216BB8C70(&v42, v3, v32);
    sub_216BB8CD4((uint64_t)v33, &v42, 1);
    sub_216BB901C(v44, (uint64_t *)v2 + 4, (uint64_t)v33);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v6) {
      uint64_t v6 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    uint64_t v7 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
    if (!v7) {
      uint64_t v7 = (uint64_t *)sub_216BB1DA8(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
    }
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v8) {
      uint64_t v8 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    uint64_t v9 = *((void *)v8 + 2);
    v30[0] = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v30[0] &= 0xFFFFFFFFFFFFFFF8;
    }
    v30[1] = 4;
    sub_216BB8C70(&v40, v7, v30);
    sub_216BB8CD4((uint64_t)v31, &v40, 1);
    sub_216BB901C(v45, (uint64_t *)v6 + 5, (uint64_t)v31);
    int v10 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v10) {
      int v10 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    uint64_t v11 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
    if (!v11) {
      uint64_t v11 = (uint64_t *)sub_216BB1DA8(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
    }
    int v12 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v12) {
      int v12 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    uint64_t v13 = *((void *)v12 + 2);
    v28[0] = v13;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v28[0] &= 0xFFFFFFFFFFFFFFF8;
    }
    v28[1] = 3;
    sub_216BB8C70(&v38, v11, v28);
    sub_216BB8CD4((uint64_t)v29, &v38, 1);
    sub_216BB901C(v46, (uint64_t *)v10 + 6, (uint64_t)v29);
    uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v14) {
      uint64_t v14 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    uint64_t v15 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
    if (!v15) {
      uint64_t v15 = (uint64_t *)sub_216BB1DA8(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
    }
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v16) {
      uint64_t v16 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    uint64_t v17 = *((void *)v16 + 2);
    v26[0] = v17;
    if ((v17 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v26[0] &= 0xFFFFFFFFFFFFFFF8;
    }
    v26[1] = 3;
    sub_216BB8C70(&v36, v15, v26);
    sub_216BB8CD4((uint64_t)v27, &v36, 1);
    sub_216BB901C(v47, (uint64_t *)v14 + 7, (uint64_t)v27);
    uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v18) {
      uint64_t v18 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    uint64_t v19 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
    if (!v19) {
      uint64_t v19 = (uint64_t *)sub_216BB1DA8(&pxrInternal__aapl__pxrReserved__::SdrPropertyRole);
    }
    uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v20) {
      uint64_t v20 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    uint64_t v21 = *((void *)v20 + 2);
    v24[0] = v21;
    if ((v21 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v24[0] &= 0xFFFFFFFFFFFFFFF8;
    }
    v24[1] = 3;
    sub_216BB8C70(&v34, v19, v24);
    sub_216BB8CD4((uint64_t)v25, &v34, 1);
    sub_216BB901C(v48, (uint64_t *)v18 + 8, (uint64_t)v25);
    sub_216BB910C((uint64_t)v1, v44, 5);
    for (uint64_t i = 0; i != -30; i -= 6)
    {
      sub_2169735B4((uint64_t)&v48[i + 1]);
      uint64_t v23 = v48[i];
      if ((v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    sub_2169735B4((uint64_t)v25);
    if ((v35 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v24[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    sub_2169735B4((uint64_t)v27);
    if ((v37 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v36 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v26[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v26[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    sub_2169735B4((uint64_t)v29);
    if ((v39 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v38 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v28[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    sub_2169735B4((uint64_t)v31);
    if ((v41 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v40 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v30[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v30[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    sub_2169735B4((uint64_t)v33);
    if ((v43 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v42 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v32[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v32[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    qword_267B91230 = (uint64_t)v1;
    __cxa_guard_release(&qword_267B91238);
  }
  return qword_267B91230;
}

void sub_216BB89B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  sub_2169735B4((uint64_t)&a19);
  if ((a49 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a48 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2169735B4((uint64_t)&a26);
  if ((a52 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a51 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2169735B4((uint64_t)&a33);
  if ((a55 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a54 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2169735B4((uint64_t)&a40);
  if ((a58 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a57 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  while (v61 != &a60)
  {
    sub_2169735B4((uint64_t)(v61 - 40));
    uint64_t v64 = *((void *)v61 - 6);
    v61 -= 48;
    uint64_t v63 = v64;
    if ((v64 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  operator delete(v60);
  __cxa_guard_abort(&qword_267B91238);
  _Unwind_Resume(a1);
}

uint64_t *sub_216BB8C70(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *uint64_t result = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *result &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *a3;
  result[1] = *a3;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[1] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[2] = a3[1];
  return result;
}

uint64_t sub_216BB8CD4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      sub_216BB8D50(a1, a2, a2);
      a2 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_216BB8D3C(_Unwind_Exception *a1)
{
  sub_2169735B4(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216BB8D50(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = v7 & (v8 - 1);
    }
    int v10 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = (uint64_t *)(a1 + 16);
  uint64_t i = (uint64_t *)operator new(0x28uLL);
  *uint64_t i = 0;
  i[1] = v7;
  sub_216BB8FB8(i + 2, a3);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(uint64_t **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    uint64_t *v21 = (uint64_t)i;
    goto LABEL_39;
  }
  *uint64_t i = *v13;
  *uint64_t v13 = (uint64_t)i;
  *(void *)(v20 + 8 * v3) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (uint64_t *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216BB8F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_2169738AC(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t *sub_216BB8FB8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *result &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = a2[1];
  result[1] = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[1] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[2] = a2[2];
  return result;
}

uint64_t *sub_216BB901C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_216BB9094((uint64_t)(a1 + 1), a3);
  return a1;
}

uint64_t sub_216BB9094(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_21678A04C(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_216BB8D50(a1, i + 2, i + 2);
  return a1;
}

void sub_216BB90F4(_Unwind_Exception *a1)
{
  sub_2169735B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216BB910C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 48 * a3;
    do
    {
      sub_216BB9188(a1, a2, a2);
      a2 += 6;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_216BB9174(_Unwind_Exception *a1)
{
  sub_216BB9554(v1);
  _Unwind_Resume(a1);
}

void *sub_216BB9188(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = v6 & (v7 - 1);
    }
    uint8x8_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t result = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = result[1];
          if (v11 == v6)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v5) {
              return result;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_216BB93E0(a1, v6, a3, (uint64_t)&v20);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  unint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
  if (v18)
  {
    *uint64_t v20 = *v18;
    *unint64_t v18 = v20;
  }
  else
  {
    *uint64_t v20 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v20)
    {
      unint64_t v19 = *(void *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v20;
    }
  }
  uint64_t result = v20;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_216BB93BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  if (a10) {
    sub_216BB94E4((uint64_t)&a11, a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216BB93E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_216BB946C(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216BB9450(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_216BB94E4(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_216BB946C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_216BB9094((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  return a1;
}

void sub_216BB94E4(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_2169735B4((uint64_t)(a2 + 3));
    uint64_t v3 = a2[2];
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

uint64_t sub_216BB9554(uint64_t a1)
{
  sub_216BB9590(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216BB9590(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2169735B4((uint64_t)(v2 + 3));
      uint64_t v4 = v2[2];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t *sub_216BB95F4(uint64_t *a1, uint64_t *a2, char *__s)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_216779094(a1 + 1, __s);
  return a1;
}

uint64_t sub_216BB966C(uint64_t a1, void *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v4) {
    uint64_t v4 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  }
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::IsTruthy((void *)v4 + 8, a2);
  if (a1) {
    return 1;
  }
  else {
    return result;
  }
}

void *sub_216BB96C4@<X0>(uint64_t *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  if (a2)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91268, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267B91268))
    {
      unint64_t v5 = &unk_267B91240;
      goto LABEL_6;
    }
    uint8x8_t v9 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v9) {
      uint8x8_t v9 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    int v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v10) {
      int v10 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v11 = *(void *)v9;
    uint64_t v69 = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v69 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v70 = *((void *)v10 + 58);
    float v12 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v12) {
      float v12 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    float v13 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v13) {
      float v13 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v14 = *((void *)v12 + 1);
    uint64_t v71 = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v71 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v72 = *((void *)v13 + 67);
    unint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v15) {
      unint64_t v15 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v16 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v16) {
      unint64_t v16 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v17 = *((void *)v15 + 2);
    uint64_t v73 = v17;
    if ((v17 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v73 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v74 = *((void *)v16 + 64);
    unint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v18) {
      unint64_t v18 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v19) {
      unint64_t v19 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v20 = *((void *)v18 + 4);
    uint64_t v75 = v20;
    if ((v20 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v75 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v76 = *((void *)v19 + 92);
    uint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v21) {
      uint64_t v21 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v22 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v22) {
      unint64_t v22 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v23 = *((void *)v21 + 5);
    uint64_t v77 = v23;
    if ((v23 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v77 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v78 = *((void *)v22 + 95);
    uint64_t v24 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v24) {
      uint64_t v24 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    uint64_t v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v25) {
      uint64_t v25 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v26 = *((void *)v24 + 6);
    uint64_t v79 = v26;
    if ((v26 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v79 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v80 = *((void *)v25 + 83);
    uint64_t v27 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v27) {
      uint64_t v27 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    uint64_t v28 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v28) {
      uint64_t v28 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v29 = *((void *)v27 + 7);
    uint64_t v81 = v29;
    if ((v29 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v81 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v82 = *((void *)v28 + 89);
    BOOL v30 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v30) {
      BOOL v30 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v31 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v31) {
      unint64_t v31 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v32 = *((void *)v30 + 8);
    uint64_t v83 = v32;
    if ((v32 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v83 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v84 = *((void *)v31 + 86);
    uint64_t v33 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v33) {
      uint64_t v33 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    uint64_t v34 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v34) {
      uint64_t v34 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v35 = *((void *)v33 + 9);
    uint64_t v85 = v35;
    if ((v35 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v85 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v86 = *((void *)v34 + 102);
    sub_216BBA194((uint64_t)&unk_267B91240, &v69, 9);
    for (uint64_t i = 128; i != -16; i -= 16)
    {
      uint64_t v37 = *(uint64_t *)((char *)&v69 + i);
      if ((v37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v38 = &qword_267B91268;
    uint64_t v39 = &unk_267B91240;
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91298, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_267B91298))
    {
      unint64_t v5 = &unk_267B91270;
      goto LABEL_6;
    }
    uint64_t v40 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v40) {
      uint64_t v40 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    uint64_t v41 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v41) {
      uint64_t v41 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v42 = *(void *)v40;
    uint64_t v69 = v42;
    if ((v42 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v69 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v70 = *((void *)v41 + 2);
    uint64_t v43 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v43) {
      uint64_t v43 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    char v44 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v44) {
      char v44 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v45 = *((void *)v43 + 1);
    uint64_t v71 = v45;
    if ((v45 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v71 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v72 = *((void *)v44 + 10);
    unsigned int v46 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v46) {
      unsigned int v46 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    uint64_t v47 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v47) {
      uint64_t v47 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v48 = *((void *)v46 + 2);
    uint64_t v73 = v48;
    if ((v48 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v73 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v74 = *((void *)v47 + 7);
    unsigned int v49 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v49) {
      unsigned int v49 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    uint64_t v50 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v50) {
      uint64_t v50 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v51 = *((void *)v49 + 4);
    uint64_t v75 = v51;
    if ((v51 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v75 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v76 = *((void *)v50 + 35);
    unsigned int v52 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v52) {
      unsigned int v52 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    uint64_t v53 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v53) {
      uint64_t v53 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v54 = *((void *)v52 + 5);
    uint64_t v77 = v54;
    if ((v54 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v77 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v78 = *((void *)v53 + 38);
    char v55 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v55) {
      char v55 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    int v56 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v56) {
      int v56 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v57 = *((void *)v55 + 6);
    uint64_t v79 = v57;
    if ((v57 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v79 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v80 = *((void *)v56 + 26);
    unint64_t v58 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v58) {
      unint64_t v58 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    size_t v59 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v59) {
      size_t v59 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v60 = *((void *)v58 + 7);
    uint64_t v81 = v60;
    if ((v60 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v81 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v82 = *((void *)v59 + 32);
    size_t v61 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v61) {
      size_t v61 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    int v62 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v62) {
      int v62 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v63 = *((void *)v61 + 8);
    uint64_t v83 = v63;
    if ((v63 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v83 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v84 = *((void *)v62 + 29);
    uint64_t v64 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v64) {
      uint64_t v64 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    char v65 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v65) {
      char v65 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v66 = *((void *)v64 + 9);
    uint64_t v85 = v66;
    if ((v66 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v85 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v86 = *((void *)v65 + 45);
    sub_216BBA194((uint64_t)&unk_267B91270, &v69, 9);
    for (uint64_t j = 128; j != -16; j -= 16)
    {
      uint64_t v68 = *(uint64_t *)((char *)&v69 + j);
      if ((v68 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v38 = &qword_267B91298;
    uint64_t v39 = &unk_267B91270;
  }
  __cxa_atexit((void (*)(void *))sub_216BBA190, v39, &dword_216758000);
  __cxa_guard_release(v38);
  unint64_t v5 = v39;
LABEL_6:
  uint64_t result = sub_2168CB120(v5, a1);
  if (result)
  {
    *a3 = result[3];
    a3[1] = 0;
  }
  else
  {
    uint64_t result = (void *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!result) {
      uint64_t result = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v7 = *a1;
    *a3 = result[11];
    a3[1] = v7;
    if ((v7 & 7) != 0)
    {
      uint8x8_t v8 = (atomic_uint *)(v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        a3[1] = v8;
      }
    }
  }
  return result;
}

void sub_216BBA0A8(_Unwind_Exception *a1)
{
}

uint64_t sub_216BBA194(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 16 * a3;
    do
    {
      sub_2168CD6A4(a1, a2, a2);
      a2 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_216BBA1F8(_Unwind_Exception *a1)
{
  sub_2168C08A0(v1);
  _Unwind_Resume(a1);
}

void *sub_216BBA20C(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v8 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * v8);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    float v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v8) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t v15 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v9;
  uint64_t v16 = *a3;
  *a3 = 0;
  uint64_t v17 = *a4;
  i[2] = v16;
  i[3] = v17;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_21678A04C(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *uint64_t i = *v25;
LABEL_38:
    void *v25 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v15;
  void *v15 = i;
  *(void *)(v24 + 8 * v4) = v15;
  if (*i)
  {
    unint64_t v26 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10) {
        v26 %= v10;
      }
    }
    else
    {
      v26 &= v10 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216BBA45C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168BE6D4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_216BBA474(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    unint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t result = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return result;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_216BBA6C0(a1, v7, a3, a4, (uint64_t)&v21);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  float v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    void *v21 = *v19;
    void *v19 = v21;
  }
  else
  {
    void *v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      unint64_t v20 = *(void *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v2sub_2168EBBB8(&a9, 0) = v21;
    }
  }
  uint64_t result = v21;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_216BBA6A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168BE6D4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_216BBA6C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint64_t result = operator new(0x20uLL);
  *(void *)a5 = result;
  *(void *)(a5 + 8) = v9;
  *uint64_t result = 0;
  result[1] = a2;
  uint64_t v11 = *a3;
  result[2] = *a3;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[3] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216BBA74C(unint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[4];
  if (!v3)
  {
    if (!a2) {
      return;
    }
    unint64_t v6 = sub_2169B4728((uint64_t)a1, a2);
    goto LABEL_9;
  }
  if (a1[3]) {
    unint64_t v4 = a1;
  }
  else {
    unint64_t v4 = (unint64_t *)(v3 - 8);
  }
  if (*v4 < a2)
  {
    unint64_t v5 = *a1;
    unint64_t v6 = sub_2169B4728((uint64_t)a1, a2);
    sub_2169B48DC(v3, v3 + 48 * v5, (uint64_t)v6);
LABEL_9:
    sub_2169B4408(a1);
    a1[4] = (unint64_t)v6;
  }
}

double sub_216BBA7DC@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_216B8E3E8(a2, a1).n128_u64[0];
  return result;
}

void sub_216BBA80C(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216BBA820(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  uint64_t v4 = sub_2168F8860(a1);
  if (v4)
  {
    uint64_t v5 = *((void *)a1 + 1);
    if ((v5 & 4) != 0) {
      unint64_t v6 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                              + 168))(a1);
    else {
      unint64_t v6 = *(long long **)a1;
    }
    sub_2169412D4(a2, v6);
  }
  return v4;
}

BOOL sub_216BBA888(int a1)
{
  uint64_t v2 = sub_216BAFEC8();
  unsigned int v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    uint64_t v5 = v2;
    uint64_t v6 = sub_216BAFEC8();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), "SDR_TYPE_CONFORMANCE");
    unsigned int v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

void sub_216BBA8E8(uint64_t a1, long long *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_15;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_15;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        unint64_t v7 = (uint64_t *)a1;
      }
      else {
        unint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      uint64_t v9 = v5 + 48 * v4;
      long long v10 = *a2;
      *(void *)(v9 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v9 = v10;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      long long v11 = *(long long *)((char *)a2 + 24);
      *(void *)(v9 + 4sub_2168EBBB8(&a9, 0) = *((void *)a2 + 5);
      *(_OWORD *)(v9 + 24) = v11;
      *((void *)a2 + 4) = 0;
      *((void *)a2 + 5) = 0;
      *((void *)a2 + 3) = 0;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_15:
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = 1;
    do
    {
      unint64_t v14 = v13;
      v13 *= 2;
    }
    while (v14 < v4 + 1);
    BOOL v15 = sub_2169B4728(a1, v14);
    uint64_t v16 = 3 * v4;
    sub_2169B48DC(v12, v12 + 16 * v16, (uint64_t)v15);
    uint64_t v17 = *((void *)a2 + 2);
    size_t v18 = &v15[2 * v16];
    *(_OWORD *)size_t v18 = *a2;
    v18[2] = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v19 = *(long long *)((char *)a2 + 24);
    v18[5] = *((void *)a2 + 5);
    *(_OWORD *)(v18 + 3) = v19;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    sub_2169B4408((void *)a1);
    *(void *)(a1 + 32) = v15;
    goto LABEL_13;
  }
  v21[0] = "vt/array.h";
  v21[1] = "emplace_back";
  v21[2] = 433;
  void v21[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::emplace_back("
           "Args &&...) [ELEM = pxrInternal__aapl__pxrReserved__::SdfAssetPath, Args = <pxrInternal__aapl__pxrReserved__::SdfAssetPath>]";
  char v22 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v20 = 4;
    }
    else {
      int v20 = 3;
    }
  }
  else
  {
    int v20 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v21, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v20);
}

void sub_216BBAAA4(uint64_t a1)
{
  *(void *)a1 = &unk_26C75BA60;
  sub_2168EE084(a1 + 240);
  uint64_t v2 = *(void *)(a1 + 232);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 224);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *(void *)(a1 + 216);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(void *)(a1 + 208);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *(void *)(a1 + 200);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *(void *)(a1 + 192);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = (void **)(a1 + 168);
  sub_216889A04(&v8);
  uint64_t v8 = (void **)(a1 + 144);
  sub_216BB1A58(&v8);
  sub_216BA5BB8(a1 + 104);
  pxrInternal__aapl__pxrReserved__::NdrProperty::~NdrProperty((pxrInternal__aapl__pxrReserved__::NdrProperty *)a1);
}

uint64_t *sub_216BBABAC(uint64_t *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_21682BF78(result, a4);
    double result = sub_216BBAC34((uint64_t)(v6 + 2), a2, a3, (uint64_t *)v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_216BBAC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216BB1A58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_216BBAC34(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  long long v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216B15074(v4, v6);
      v6 += 2;
      uint64_t v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_216BBACC0((uint64_t)v8);
  return v4;
}

uint64_t sub_216BBACC0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216BBACF8(a1);
  }
  return a1;
}

uint64_t sub_216BBACF8(uint64_t result)
{
  uint64_t v1 = **(void **)(result + 16);
  for (uint64_t i = **(void **)(result + 8); v1 != i; v1 -= 16)
  {
    uint64_t v3 = *(void *)(v1 - 8);
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v4 = *(void *)(v1 - 16);
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

void *sub_216BBAD48(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = v6 & (v7 - 1);
    }
    char v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if ((v10[2] & 0xFFFFFFFFFFFFFFF8) == v5) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_216BBAFB0(a1, v6, a3, (uint64_t)v21);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  size_t v18 = *(void **)(*(void *)a1 + 8 * v3);
  if (v18)
  {
    *(void *)v21[0] = *v18;
    *size_t v18 = v21[0];
  }
  else
  {
    *(void *)v21[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v21[0])
    {
      unint64_t v19 = *(void *)(*(void *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v21[0];
    }
  }
  uint64_t v10 = (void *)v21[0];
  v21[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216BA75E8((uint64_t)v21, 0);
  return v10;
}

void sub_216BBAF98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BA75E8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

__n128 sub_216BBAFB0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = (char *)operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(void *)uint8x8_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t v9 = *a3;
  *((void *)v8 + 2) = *a3;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)v8 + 2) &= 0xFFFFFFFFFFFFFFF8;
  }
  __n128 result = *(__n128 *)(a3 + 1);
  *(__n128 *)(v8 + 24) = result;
  *((void *)v8 + 5) = a3[3];
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216BBB040()
{
  sub_216779094(v9, "PCP_CHANGES");
  std::string __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75BAB8, 0, (uint64_t)v9, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  uint64_t v0 = sub_216BBB328();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "PCP_CHANGES", "Pcp change processing");
  sub_216779094(v9, "PCP_DEPENDENCIES");
  std::string __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75BAB8, 1, (uint64_t)v9, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  uint64_t v1 = sub_216BBB328();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v1 + 4, "PCP_DEPENDENCIES", "Pcp dependencies");
  sub_216779094(v9, "PCP_PRIM_INDEX");
  std::string __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75BAB8, 2, (uint64_t)v9, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  uint64_t v2 = sub_216BBB328();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v2 + 8, "PCP_PRIM_INDEX", "Print debug output to terminal during prim indexing");
  sub_216779094(v9, "PCP_PRIM_INDEX_GRAPHS");
  std::string __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75BAB8, 3, (uint64_t)v9, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  uint64_t v3 = sub_216BBB328();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v3 + 12, "PCP_PRIM_INDEX_GRAPHS", "Write graphviz 'dot' files during prim indexing (requires PCP_PRIM_INDEX)");
  sub_216779094(v9, "PCP_PRIM_INDEX_GRAPHS_MAPPINGS");
  std::string __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75BAB8, 4, (uint64_t)v9, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  uint64_t v4 = sub_216BBB328();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v4 + 16, "PCP_PRIM_INDEX_GRAPHS_MAPPINGS", "Include namespace mappings in graphviz files generated during prim indexing (requires PCP_PRIM_INDEX_GRAPHS)");
  sub_216779094(v9, "PCP_NAMESPACE_EDIT");
  std::string __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75BAB8, 5, (uint64_t)v9, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  uint64_t v5 = sub_216BBB328();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v5 + 20, "PCP_NAMESPACE_EDIT", "Pcp namespace edits");
}

void sub_216BBB2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216BBB328()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798C558, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798C558))
  {
    uint64_t v1 = operator new(0x18uLL);
    void *v1 = 0;
    v1[1] = 0;
    v1[2] = 0;
    qword_26798C550 = (uint64_t)v1;
    __cxa_guard_release(&qword_26798C558);
  }
  return qword_26798C550;
}

void sub_216BBB390(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::ConcurrentPopulationContext::ConcurrentPopulationContext(uint64_t this, pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *a2, char *a3)
{
  *(void *)this = a2;
  *(unsigned char *)(this + 8) = 0;
  if (*((void *)a2 + 36))
  {
    v3[0] = "pcp/dependencies.cpp";
    v3[1] = "ConcurrentPopulationContext";
    uint64_t v3[2] = 48;
    void v3[3] = "pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::ConcurrentPopulationContext::ConcurrentPopulationContext"
            "(Pcp_Dependencies &)";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "!_deps._concurrentPopulationContext");
  }
  *((void *)a2 + 36) = this;
  return this;
}

void pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::ConcurrentPopulationContext::~ConcurrentPopulationContext(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::ConcurrentPopulationContext *this)
{
  *(void *)(*(void *)this + 288) = 0;
}

{
  *(void *)(*(void *)this + 288) = 0;
}

double pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Pcp_Dependencies(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *this)
{
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 2sub_2168EBBB8(&a9, 0) = 1065353216;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 3sub_2168EBBB8(&a9, 0) = 1065353216;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 4sub_2168EBBB8(&a9, 0) = 1065353216;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 5sub_2168EBBB8(&a9, 0) = 1065353216;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 6sub_2168EBBB8(&a9, 0) = 1065353216;
  *((_DWORD *)this + 7sub_2168EBBB8(&a9, 0) = 1065353216;
  *((void *)this + 36) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  return result;
}

{
  double result;

  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 2sub_2168EBBB8(&a9, 0) = 1065353216;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 3sub_2168EBBB8(&a9, 0) = 1065353216;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 4sub_2168EBBB8(&a9, 0) = 1065353216;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 5sub_2168EBBB8(&a9, 0) = 1065353216;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 6sub_2168EBBB8(&a9, 0) = 1065353216;
  *((_DWORD *)this + 7sub_2168EBBB8(&a9, 0) = 1065353216;
  *((void *)this + 36) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::~Pcp_Dependencies(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *this)
{
  sub_216BBF1CC((uint64_t)this + 248);
  sub_216BBF104((uint64_t)this + 208);
  sub_2168C08A0((uint64_t)this + 168);
  sub_2168C08A0((uint64_t)this + 128);
  sub_216BBF034((uint64_t)this + 88);
  sub_216BBEF68((uint64_t)this + 48);

  sub_216BBEED4((uint64_t)this);
}

void pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Add(void *a1, pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *a4, uint64_t *a5)
{
  sub_216851EE4((uint64_t)&v106, "Pcp", "Pcp_Dependencies::Add");
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(a2);
  if (v8 && v7 != -1)
  {
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(a2);
    *(void *)&long long v108 = v9;
    *((void *)&v108 + 1) = v10;
    Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v108);
    if (sub_216BBBDFC(1))
    {
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(Path);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Pcp_Dependencies: Adding deps for index <%s>:\n", v13, v14, Text);
    }
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)a2, 6u, (uint64_t *)&v102);
    size_t v17 = v102;
    uint64_t v16 = v103;
    size_t v18 = v104;
    if (v102 == v104 && v103 == v105)
    {
      int v95 = 0;
    }
    else
    {
      uint64_t v19 = 0;
      int v95 = 0;
      uint64_t v94 = ~v103 + v105;
      do
      {
        uint64_t v20 = v19;
        v101[0] = v17;
        v101[1] = v16 + v19;
        unint64_t v21 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::PcpClassifyNodeDependency((pxrInternal__aapl__pxrReserved__ *)v101, v15);
        if ((v21 & 6) != 0)
        {
          unsigned int v98 = 0;
          LOBYTE(v99) = 0;
          uint64_t v22 = a1[36];
          if (v22) {
            sub_216B167C8(&v98, v22 + 8);
          }
          LayerStacuint64_t k = (void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v101);
          uint64_t v24 = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v101);
          uint64_t v110 = 0;
          long long v108 = 0u;
          long long v109 = 0u;
          uint64_t v25 = sub_216BBD830((uint64_t)a1, LayerStack, LayerStack, (uint64_t)&v108);
          char v27 = v26;
          sub_216BBDB9C((uint64_t *)&v108);
          if (v27) {
            ++a1[5];
          }
          uint64_t v28 = (uint64_t *)sub_216BBD760((uint64_t)(v25 + 3), v24);
          uint64_t v29 = v28;
          unint64_t v30 = v28[1];
          if (v30 >= v28[2])
          {
            uint64_t v31 = sub_216981B30(v28, Path);
          }
          else
          {
            sub_216981010((_DWORD *)v28[1], Path);
            sub_21698105C((_DWORD *)(v30 + 4), (_DWORD *)Path + 1);
            uint64_t v31 = v30 + 8;
          }
          v29[1] = v31;
          uint64_t v32 = v98;
          if (v98)
          {
            __dmb(0xBu);
            unsigned char *v32 = 0;
          }
          ++v95;
          if (sub_216BBBDFC(1))
          {
            pxrInternal__aapl__pxrReserved__::PcpDependencyFlagsToString(v21, (std::string *)&v108);
            if ((SBYTE7(v109) & 0x80u) == 0) {
              uint64_t v33 = &v108;
            }
            else {
              uint64_t v33 = (long long *)v108;
            }
            Arcuint64_t Type = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v101);
            pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C75BAC8, ArcType, (uint64_t)&v98);
            if (v100 >= 0) {
              uint64_t v35 = &v98;
            }
            else {
              uint64_t v35 = v98;
            }
            uint64_t v36 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v101);
            uint64_t v37 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v36);
            uint64_t v38 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v101);
            uint64_t v39 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v38);
            Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v39);
            sub_216BBBE60(Identifier);
            p_p = &__p;
            if (v97 < 0) {
              p_p = __p;
            }
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" - Node %i (%s %s): <%s> %s\n", v41, v42, v20, v33, v35, v37, p_p);
            if (v97 < 0) {
              operator delete(__p);
            }
            if (v100 < 0) {
              operator delete(v98);
            }
            if (SBYTE7(v109) < 0) {
              operator delete((void *)v108);
            }
          }
        }
        uint64_t v19 = v20 + 1;
      }
      while (v17 != v18 || v94 != v20);
    }
    uint64_t v45 = *a3;
    uint64_t v44 = a3[1];
    if (*a3 != v44)
    {
      uint64_t v102 = 0;
      LOBYTE(v103) = 0;
      uint64_t v46 = a1[36];
      if (v46)
      {
        sub_216B167C8(&v102, v46 + 8);
        uint64_t v45 = *a3;
        uint64_t v44 = a3[1];
      }
      if (v45 == v44)
      {
        uint64_t v54 = v44;
      }
      else
      {
        do
        {
          uint64_t v110 = 0;
          long long v108 = 0u;
          long long v109 = 0u;
          uint64_t v47 = sub_216BBD830((uint64_t)a1, (void *)(v45 + 8), (void *)(v45 + 8), (uint64_t)&v108);
          char v49 = v48;
          sub_216BBDB9C((uint64_t *)&v108);
          if (v49) {
            ++a1[5];
          }
          uint64_t v50 = (uint64_t *)sub_216BBD760((uint64_t)(v47 + 3), (_DWORD *)(v45 + 16));
          uint64_t v51 = v50;
          unint64_t v52 = v50[1];
          if (v52 >= v50[2])
          {
            uint64_t v53 = sub_216981B30(v50, Path);
          }
          else
          {
            sub_216981010((_DWORD *)v50[1], Path);
            sub_21698105C((_DWORD *)(v52 + 4), (_DWORD *)Path + 1);
            uint64_t v53 = v52 + 8;
          }
          v51[1] = v53;
          v45 += 88;
        }
        while (v45 != v44);
        uint64_t v44 = *a3;
        uint64_t v54 = a3[1];
      }
      *(void *)&long long v108 = Path;
      char v55 = sub_216BBF2C4((uint64_t)(a1 + 6), (unsigned int *)Path, (uint64_t)&unk_2174BFD90, (_DWORD **)&v108);
      int v56 = (void **)(v55 + 3);
      uint64_t v57 = v55[3];
      if (v57 == v55[4])
      {
        sub_216BBF604(v56);
        *(_OWORD *)(v55 + 3) = *(_OWORD *)a3;
        v55[5] = a3[2];
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
      }
      else
      {
        sub_216BBF6D8((uint64_t *)v56, v57, *a3, a3[1], 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3));
      }
      unint64_t v58 = v102;
      if (v102)
      {
        __dmb(0xBu);
        unsigned char *v58 = 0;
      }
      v95 -= 1171354717 * ((unint64_t)(v54 - v44) >> 3);
      if (sub_216BBBDFC(1))
      {
        size_t v59 = (uint64_t *)v55[3];
        for (uint64_t i = (unsigned int *)v55[4]; v59 != (uint64_t *)i; v59 += 11)
        {
          if (sub_216BBBDFC(1))
          {
            pxrInternal__aapl__pxrReserved__::PcpDependencyFlagsToString((pxrInternal__aapl__pxrReserved__ *)*(unsigned int *)v59, (std::string *)&v108);
            if ((SBYTE7(v109) & 0x80u) == 0) {
              size_t v61 = &v108;
            }
            else {
              size_t v61 = (long long *)v108;
            }
            int v62 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v59 + 2));
            uint64_t v63 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v59 + 1);
            uint64_t v64 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v63);
            sub_216BBBE60(v64);
            if (SHIBYTE(v104) >= 0) {
              uint64_t v67 = &v102;
            }
            else {
              uint64_t v67 = v102;
            }
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" - Node (culled) (%s): <%s> %s\n", v65, v66, v61, v62, v67);
            if (SHIBYTE(v104) < 0) {
              operator delete(v102);
            }
            if (SBYTE7(v109) < 0) {
              operator delete((void *)v108);
            }
          }
        }
      }
    }
    if (*(void *)a4)
    {
      *(void *)&long long v108 = 0;
      BYTE8(v108) = 0;
      uint64_t v68 = a1[36];
      if (v68) {
        sub_216B167C8(&v108, v68 + 8);
      }
      RelevantFieldNames = pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::GetRelevantFieldNames(a4);
      uint64_t v71 = RelevantFieldNames + 1;
      uint64_t v70 = (void *)*RelevantFieldNames;
      if ((uint64_t *)*RelevantFieldNames != RelevantFieldNames + 1)
      {
        do
        {
          LODWORD(v102) = 0;
          uint64_t v72 = sub_216BBE21C((uint64_t)(a1 + 16), v70 + 4, v70 + 4, &v102);
          ++*((_DWORD *)v72 + 6);
          uint64_t v73 = (uint64_t *)v70[1];
          if (v73)
          {
            do
            {
              uint64_t v74 = v73;
              uint64_t v73 = (uint64_t *)*v73;
            }
            while (v73);
          }
          else
          {
            do
            {
              uint64_t v74 = (uint64_t *)v70[2];
              BOOL v75 = *v74 == (void)v70;
              uint64_t v70 = v74;
            }
            while (!v75);
          }
          uint64_t v70 = v74;
        }
        while (v74 != v71);
      }
      RelevantAttributeNames = pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::GetRelevantAttributeNames(a4);
      uint64_t v78 = RelevantAttributeNames + 1;
      uint64_t v77 = (void *)*RelevantAttributeNames;
      if ((uint64_t *)*RelevantAttributeNames != RelevantAttributeNames + 1)
      {
        do
        {
          LODWORD(v102) = 0;
          uint64_t v79 = sub_216BBE21C((uint64_t)(a1 + 21), v77 + 4, v77 + 4, &v102);
          ++*((_DWORD *)v79 + 6);
          uint64_t v80 = (uint64_t *)v77[1];
          if (v80)
          {
            do
            {
              uint64_t v81 = v80;
              uint64_t v80 = (uint64_t *)*v80;
            }
            while (v80);
          }
          else
          {
            do
            {
              uint64_t v81 = (uint64_t *)v77[2];
              BOOL v75 = *v81 == (void)v77;
              uint64_t v77 = v81;
            }
            while (!v75);
          }
          uint64_t v77 = v81;
        }
        while (v81 != v78);
      }
      uint64_t v102 = Path;
      uint64_t v82 = sub_216BC0164((uint64_t)(a1 + 11), (unsigned int *)Path, (uint64_t)&unk_2174BFD90, (_DWORD **)&v102);
      uint64_t v83 = v82[3];
      v82[3] = *(void *)a4;
      *(void *)a4 = v83;
      uint64_t v84 = (unsigned char *)v108;
      if ((void)v108)
      {
        __dmb(0xBu);
        unsigned char *v84 = 0;
      }
    }
    if (!pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::IsEmpty((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)a5))
    {
      uint64_t v102 = 0;
      LOBYTE(v103) = 0;
      uint64_t v85 = a1[36];
      if (v85) {
        sub_216B167C8(&v102, v85 + 8);
      }
      unsigned int v98 = a1;
      uint64_t v99 = Path;
      *(void *)&long long v108 = &v98;
      *((void *)&v108 + 1) = sub_216BC042C;
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::_ForEachDependency((uint64_t)a5, (uint64_t)&v108);
      *(void *)&long long v108 = Path;
      uint64_t v86 = sub_216BC07D4((uint64_t)(a1 + 26), (unsigned int *)Path, (uint64_t)&unk_2174BFD90, (_DWORD **)&v108);
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::operator=(v86 + 3, a5);
      uint64_t v87 = v102;
      if (v102)
      {
        __dmb(0xBu);
        unsigned char *v87 = 0;
      }
    }
    if (!v95 && sub_216BBBDFC(1)) {
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"    None\n", v88, v89);
    }
  }
  while (v107--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v106);
}

void sub_216BBBCD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  sub_21684E6B8(v40 - 144);
  _Unwind_Resume(a1);
}

BOOL sub_216BBBDFC(int a1)
{
  uint64_t v2 = sub_216BBB328();
  unsigned int v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    uint64_t v5 = v2;
    uint64_t v6 = sub_216BBB328();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), off_2642944D8[a1]);
    unsigned int v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

uint64_t sub_216BBBE60(uint64_t *a1)
{
  sub_21677B834((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216BBBF94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BBBFA8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    uint64_t v3[2] = 953;
    void v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>::operator->()"
            " const [U = pxrInternal__aapl__pxrReserved__::PcpLayerStack]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000021747A664 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Remove(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2, pxrInternal__aapl__pxrReserved__::PcpLifeboat *a3)
{
  uint64_t v80 = a3;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(a2);
  if (v6 && v5 != -1)
  {
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(a2);
    *(void *)&long long v81 = v7;
    *((void *)&v81 + 1) = v8;
    Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v81);
    if (sub_216BBBDFC(1))
    {
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(Path);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Pcp_Dependencies: Removing deps for index <%s>\n", v11, v12, Text);
    }
    uint64_t v71 = this;
    uint64_t v72 = (unsigned int *)Path;
    v79[0] = this;
    v79[1] = Path;
    v79[2] = &v80;
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)a2, 6u, (uint64_t *)&v81);
    long long v14 = v81;
    uint64_t v15 = v82;
    if (v81 != v82)
    {
      uint64_t v16 = 0;
      uint64_t v17 = ~*((void *)&v81 + 1) + *((void *)&v82 + 1);
      do
      {
        uint64_t v18 = v16;
        v78[0] = v14;
        v78[1] = *((void *)&v14 + 1) + v16;
        uint64_t v19 = pxrInternal__aapl__pxrReserved__::PcpClassifyNodeDependency((pxrInternal__aapl__pxrReserved__ *)v78, v13);
        if ((v19 & 6) != 0)
        {
          uint64_t v20 = (pxrInternal__aapl__pxrReserved__ *)v19;
          if (sub_216BBBDFC(1))
          {
            pxrInternal__aapl__pxrReserved__::PcpDependencyFlagsToString(v20, &v77);
            if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v21 = &v77;
            }
            else {
              unint64_t v21 = (std::string *)v77.__r_.__value_.__r.__words[0];
            }
            Arcuint64_t Type = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v78);
            pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C75BAC8, ArcType, (uint64_t)v75);
            if (v76 >= 0) {
              size_t v23 = v75;
            }
            else {
              size_t v23 = (void **)v75[0];
            }
            uint64_t v24 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v78);
            uint64_t v25 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v24);
            LayerStacuint64_t k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v78);
            char v27 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
            Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v27);
            sub_216BBBE60(Identifier);
            p_p = &__p;
            if (v74 < 0) {
              p_p = __p;
            }
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" - Node %i (%s %s): <%s> %s\n", v29, v30, v18, v21, v23, v25, p_p);
            if (v74 < 0) {
              operator delete(__p);
            }
            if (v76 < 0) {
              operator delete(v75[0]);
            }
            if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v77.__r_.__value_.__l.__data_);
            }
          }
          uint64_t v32 = (void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v78);
          uint64_t v33 = (unsigned int *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v78);
          sub_216BBC65C(v79, v32, v33);
        }
        uint64_t v16 = v18 + 1;
      }
      while ((void)v14 != v15 || v17 != v18);
    }
    std::string::size_type v35 = (std::string::size_type)v71;
    uint64_t v34 = v72;
    uint64_t v36 = sub_216A62F60((void *)v71 + 6, v72);
    if (v36)
    {
      uint64_t v37 = v36;
      uint64_t v38 = (uint64_t *)v36[3];
      for (uint64_t i = (unsigned int *)v36[4]; v38 != (uint64_t *)i; v38 += 11)
      {
        if (sub_216BBBDFC(1))
        {
          pxrInternal__aapl__pxrReserved__::PcpDependencyFlagsToString((pxrInternal__aapl__pxrReserved__ *)*(unsigned int *)v38, (std::string *)&v81);
          if ((SBYTE7(v82) & 0x80u) == 0) {
            uint64_t v40 = &v81;
          }
          else {
            uint64_t v40 = (long long *)v81;
          }
          uint64_t v41 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v38 + 2));
          uint64_t v42 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v38 + 1);
          uint64_t v43 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v42);
          sub_216BBBE60(v43);
          if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v46 = &v77;
          }
          else {
            uint64_t v46 = (std::string *)v77.__r_.__value_.__r.__words[0];
          }
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" - Node (culled) (%s): <%s> %s\n", v44, v45, v40, v41, v46);
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v77.__r_.__value_.__l.__data_);
          }
          if (SBYTE7(v82) < 0) {
            operator delete((void *)v81);
          }
        }
        sub_216BBC65C(v79, v38 + 1, (unsigned int *)v38 + 4);
      }
      sub_216851DB0((void *)v71 + 6, v37, (uint64_t)&v81);
      sub_216BBF5AC((uint64_t)&v81, 0);
      uint64_t v34 = v72;
    }
    uint64_t v47 = sub_216A62F60((void *)v71 + 11, v34);
    if (v47)
    {
      char v48 = v47;
      char v49 = (pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *)(v47 + 3);
      if (v47[3]
        || (*(void *)&long long v81 = "pcp/dependencies.cpp",
            *((void *)&v81 + 1) = "Remove",
            *(void *)&long long v82 = 345,
            *((void *)&v82 + 1) = "void pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Remove(const PcpPrimIndex &"
                                    ", PcpLifeboat *)",
            char v83 = 0,
            (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v81, "!it->second.IsEmpty()", 0) & 1) != 0))
      {
        RelevantFieldNames = pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::GetRelevantFieldNames(v49);
        unint64_t v52 = RelevantFieldNames + 1;
        uint64_t v51 = (void *)*RelevantFieldNames;
        if ((uint64_t *)*RelevantFieldNames != RelevantFieldNames + 1)
        {
          uint64_t v53 = (void *)((char *)v71 + 128);
          do
          {
            uint64_t v54 = sub_2168CB1F4(v53, v51 + 4);
            if (v54
              || (*(void *)&long long v81 = "pcp/dependencies.cpp",
                  *((void *)&v81 + 1) = "operator()",
                  *(void *)&long long v82 = 352,
                  *((void *)&v82 + 1) = "auto pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Remove(const PcpPrimI"
                                          "ndex &, PcpLifeboat *)::(anonymous class)::operator()(_FileFormatArgumentField"
                                          "DepMap &, const TfToken::Set &) const",
                  char v83 = 0,
                  (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v81, "depMapIt != depMap.end()", 0) & 1) != 0))
            {
              int v55 = *((_DWORD *)v54 + 6);
              BOOL v56 = __OFSUB__(v55, 1);
              int v57 = v55 - 1;
              if ((v57 < 0) ^ v56 | (v57 == 0)) {
                sub_216BBEC7C(v53, v54);
              }
              else {
                *((_DWORD *)v54 + 6) = v57;
              }
            }
            unint64_t v58 = (uint64_t *)v51[1];
            if (v58)
            {
              do
              {
                size_t v59 = v58;
                unint64_t v58 = (uint64_t *)*v58;
              }
              while (v58);
            }
            else
            {
              do
              {
                size_t v59 = (uint64_t *)v51[2];
                BOOL v60 = *v59 == (void)v51;
                uint64_t v51 = v59;
              }
              while (!v60);
            }
            uint64_t v51 = v59;
          }
          while (v59 != v52);
        }
        RelevantAttributeNames = pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::GetRelevantAttributeNames(v49);
        uint64_t v63 = RelevantAttributeNames + 1;
        int v62 = (void *)*RelevantAttributeNames;
        std::string::size_type v35 = (std::string::size_type)v71;
        if ((uint64_t *)*RelevantAttributeNames != RelevantAttributeNames + 1)
        {
          do
          {
            uint64_t v64 = sub_2168CB1F4((void *)v71 + 21, v62 + 4);
            if (v64
              || (*(void *)&long long v81 = "pcp/dependencies.cpp",
                  *((void *)&v81 + 1) = "operator()",
                  *(void *)&long long v82 = 352,
                  *((void *)&v82 + 1) = "auto pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Remove(const PcpPrimI"
                                          "ndex &, PcpLifeboat *)::(anonymous class)::operator()(_FileFormatArgumentField"
                                          "DepMap &, const TfToken::Set &) const",
                  char v83 = 0,
                  (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v81, "depMapIt != depMap.end()", 0) & 1) != 0))
            {
              int v65 = *((_DWORD *)v64 + 6);
              BOOL v56 = __OFSUB__(v65, 1);
              int v66 = v65 - 1;
              if ((v66 < 0) ^ v56 | (v66 == 0)) {
                sub_216BBEC7C((void *)v71 + 21, v64);
              }
              else {
                *((_DWORD *)v64 + 6) = v66;
              }
            }
            uint64_t v67 = (uint64_t *)v62[1];
            if (v67)
            {
              do
              {
                uint64_t v68 = v67;
                uint64_t v67 = (uint64_t *)*v67;
              }
              while (v67);
            }
            else
            {
              do
              {
                uint64_t v68 = (uint64_t *)v62[2];
                BOOL v60 = *v68 == (void)v62;
                int v62 = v68;
              }
              while (!v60);
            }
            int v62 = v68;
          }
          while (v68 != v63);
        }
      }
      sub_216851DB0((void *)v71 + 11, v48, (uint64_t)&v81);
      sub_216BC03D4((uint64_t)&v81, 0);
      uint64_t v34 = v72;
    }
    uint64_t v69 = sub_216A62F60((void *)(v35 + 208), v34);
    if (v69)
    {
      uint64_t v70 = v69;
      v77.__r_.__value_.__r.__words[0] = v35;
      v77.__r_.__value_.__l.__size_ = (std::string::size_type)v34;
      *(void *)&long long v81 = &v77;
      *((void *)&v81 + 1) = sub_216BC0B78;
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::_ForEachDependency((uint64_t)(v69 + 3), (uint64_t)&v81);
      sub_216851DB0((void *)(v35 + 208), v70, (uint64_t)&v81);
      sub_216BC0B20((uint64_t)&v81, 0);
    }
  }
}

void sub_216BBC5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BBC65C(void **a1, void *a2, unsigned int *a3)
{
  uint64_t v6 = *a1;
  std::string __p = a2;
  uint64_t v7 = sub_216BBE5F8((uint64_t)v6, a2, (uint64_t)&unk_2174BFD90, (void **)&__p);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 3);
  uint64_t v9 = sub_216BBD760((uint64_t)(v7 + 3), a3);
  uint64_t v10 = v9;
  unint64_t v11 = *(int **)v9;
  float v12 = (int *)*((void *)v9 + 1);
  if (*(int **)v9 != v12)
  {
    while (*(void *)v11 != *a1[1])
    {
      v11 += 2;
      if (v11 == v12)
      {
        unint64_t v11 = (int *)*((void *)v9 + 1);
        break;
      }
    }
  }
  if (v11 == v12)
  {
    std::string __p = "pcp/dependencies.cpp";
    uint64_t v38 = "operator()";
    uint64_t v39 = 251;
    uint64_t v40 = "auto pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Remove(const PcpPrimIndex &, PcpLifeboat *)::(anonymo"
          "us class)::operator()(const PcpLayerStackRefPtr &, const SdfPath &) const";
    char v41 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "i != deps.end()", 0)) {
      return;
    }
    float v12 = (int *)*((void *)v10 + 1);
  }
  sub_216BBE4F4(v11, v12 - 2);
  sub_216A8E5E4((uint64_t)&__p, v12, *((int **)v10 + 1), v12 - 2);
  long long v14 = v13;
  uint64_t v15 = (_DWORD *)*((void *)v10 + 1);
  if (v15 != v13)
  {
    do
    {
      v15 -= 2;
      sub_216981128((uint64_t)(v10 + 16), v15);
    }
    while (v15 != v14);
  }
  *((void *)v10 + 1) = v14;
  if (*(_DWORD **)v10 == v14)
  {
    if (sub_216BBBDFC(1)) {
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"      Removed last dep on site\n", v16, v17);
    }
    uint64_t v38 = 0;
    std::string __p = sub_216BBE8E8(v8, a3);
    uint64_t v18 = (void *)sub_216BBE950((uint64_t)&__p);
    uint64_t v19 = __p;
    std::string::size_type v35 = __p;
    uint64_t v36 = __p;
    if (v18 == __p) {
      goto LABEL_18;
    }
    while (v19[1] == v19[2])
    {
      uint64_t v19 = (void *)v19[5];
      if (!v19) {
        uint64_t v19 = (void *)sub_216BBE950((uint64_t)&v36);
      }
      uint64_t v36 = v19;
      if (v19 == v18) {
        goto LABEL_18;
      }
    }
    if (v19 == v18)
    {
LABEL_18:
      sub_216BBE5A8(v8, (uint64_t *)&v35);
      if (sub_216BBBDFC(1)) {
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"      No subtree deps\n", v20, v21);
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, &v33);
      while (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v33))
      {
        uint64_t v38 = 0;
        std::string __p = sub_216BBE8E8(v8, (unsigned int *)&v33);
        uint64_t v22 = (void *)sub_216BBE950((uint64_t)&__p);
        std::string::size_type v35 = __p;
        if (__p == v22) {
          break;
        }
        unint64_t v23 = *((void *)__p + 5);
        if (!v23) {
          unint64_t v23 = sub_216BBE950((uint64_t)&__p);
        }
        if ((void *)v23 != v22 || v35[1] != v35[2]) {
          break;
        }
        if (sub_216BBBDFC(1))
        {
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33);
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"    Removing empty parent entry <%s>\n", v25, v26, Text);
        }
        sub_216BBE5A8(v8, (uint64_t *)&v35);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, &__p);
        sub_21697DE94(&v33, (int *)&__p);
        sub_21697DEEC(&v34, (int *)&__p + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_21697C414(&__p);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
      sub_21697C414(&v33);
      if (!v7[6])
      {
        uint64_t v27 = *a1[2];
        if (v27) {
          pxrInternal__aapl__pxrReserved__::PcpLifeboat::Retain(v27, a2);
        }
        sub_216BBEBF8(v6, a2);
        ++v6[5];
        if (sub_216BBBDFC(1))
        {
          uint64_t v28 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(a2);
          Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v28);
          sub_216BBBE60(Identifier);
          uint64_t v32 = v39 >= 0 ? &__p : (void **)__p;
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"    Removed last dep on %s\n", v30, v31, v32);
          if (SHIBYTE(v39) < 0) {
            operator delete(__p);
          }
        }
      }
    }
  }
}

void sub_216BBC9EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::RemoveAll(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *this, pxrInternal__aapl__pxrReserved__::PcpLifeboat *a2)
{
  if (sub_216BBBDFC(1)) {
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Pcp_Dependencies::RemoveAll: Clearing all dependencies\n", v4, v5);
  }
  if (a2)
  {
    uint64_t v7 = *((void *)this + 2);
    uint64_t v8 = 0;
    if (v7)
    {
      do
      {
        uint64_t v6 = sub_216BBCAF8(&v7, (uint64_t)v4, v5);
        pxrInternal__aapl__pxrReserved__::PcpLifeboat::Retain((uint64_t)a2, (unint64_t *)(*v6 + 16));
        sub_216BBCB74((uint64_t)&v7);
      }
      while (v7 != v8);
    }
  }
  sub_216BC0C4C((uint64_t)this);
  ++*((void *)this + 5);
  sub_2168CB0C8((uint64_t)this + 128);
  sub_2168CB0C8((uint64_t)this + 168);
  sub_216BC0CA4((uint64_t)this + 48);
  sub_216BC0CFC((uint64_t)this + 88);
  sub_216BC0D54((uint64_t)this + 208);
  sub_216BC0DAC((uint64_t)this + 248);
}

void *sub_216BBCAF8(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    uint64_t v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::unordered_map<pxrInternal__aapl__pxrReserved__::"
            "TfRefPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::SdfPathTable<st"
            "d::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>, pxrInternal__aapl__pxrReserved__::TfHash>>::operator-"
            ">() [T = std::unordered_map<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Pcp"
            "LayerStack>, pxrInternal__aapl__pxrReserved__::SdfPathTable<std::vector<pxrInternal__aapl__pxrReserved__::Sd"
            "fPath>>, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_216BBCB74(uint64_t a1)
{
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    uint64_t v3[2] = 250;
    void v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::unordered_map<pxrInternal__aapl__p"
            "xrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::S"
            "dfPathTable<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>, pxrInternal__aapl__pxrReserved__::TfHas"
            "h>>::operator++() [T = std::unordered_map<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrR"
            "eserved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::SdfPathTable<std::vector<pxrInternal__aapl__pxr"
            "Reserved__::SdfPath>>, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(void *)a1 = **(void **)a1;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetUsedLayers@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 8) = 0;
  int v5 = (void *)(a4 + 8);
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = a4 + 8;
  uint64_t v11 = *(void *)(this + 16);
  uint64_t v12 = 0;
  while (v11 != v12)
  {
    uint64_t v6 = sub_216BBCCB0(&v11, a2, a3);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8((uint64_t *)(*v6 + 16));
    uint64_t Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v7);
    uint64_t v9 = *(uint64_t **)Layers;
    uint64_t v10 = *(uint64_t **)(Layers + 8);
    while (v9 != v10)
      sub_216BC0E04((uint64_t **)a4, v5, v9++);
    this = sub_216BBCD2C((uint64_t)&v11);
  }
  return this;
}

void sub_216BBCC90(_Unwind_Exception *a1)
{
  sub_21699DA30(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *sub_216BBCCB0(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    uint64_t v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::unordered_map<pxrInternal__aapl__pxrReserv"
            "ed__::TfRefPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::SdfPathTa"
            "ble<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>, pxrInternal__aapl__pxrReserved__::TfHash>>::ope"
            "rator->() [T = const std::unordered_map<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrRes"
            "erved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::SdfPathTable<std::vector<pxrInternal__aapl__pxrRe"
            "served__::SdfPath>>, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_216BBCD2C(uint64_t a1)
{
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    uint64_t v3[2] = 250;
    void v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::unordered_map<pxrInternal__a"
            "apl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>, pxrInternal__aapl__pxrReserve"
            "d__::SdfPathTable<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>, pxrInternal__aapl__pxrReserved__:"
            ":TfHash>>::operator++() [T = const std::unordered_map<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal"
            "__aapl__pxrReserved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::SdfPathTable<std::vector<pxrInterna"
            "l__aapl__pxrReserved__::SdfPath>>, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(void *)a1 = **(void **)a1;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetUsedRootLayers@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = a4 + 8;
  uint64_t v11 = *(void *)(this + 16);
  uint64_t v12 = 0;
  while (v11 != v12)
  {
    int v5 = sub_216BBCCB0(&v11, a2, a3);
    sub_216BC11A8(&v9, (uint64_t *)(*v5 + 16));
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(&v9);
    Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v6);
    sub_21699DAC4((uint64_t **)a4, (uint64_t)Identifier, Identifier);
    uint64_t v8 = v10;
    if (v10)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
    }
    this = sub_216BBCD2C((uint64_t)&v11);
  }
  return this;
}

void sub_216BBCE78(_Unwind_Exception *a1)
{
  sub_21699DA30(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_216BBCEA8(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14), uint64_t result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    uint64_t v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    void v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::PcpLayerStack>::operator->() const [PtrTemplate = pxrInternal__aapl__pxrReser"
            "ved__::TfWeakPtr, uint64_t Type = pxrInternal__aapl__pxrReserved__::PcpLayerStack]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x800000021747A6D8 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::UsesLayerStack(void *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2)
{
  uint64_t v3 = a2[1];
  if (v3)
  {
    if (*(unsigned char *)(sub_216850B68((uint64_t *)a2 + 1) + 14)) {
      uint64_t v3 = *a2;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  uint64_t v7 = v3;
  sub_2168BD80C((uint64_t *)&v7);
  BOOL v5 = sub_216877FD4(a1, &v7) != 0;
  sub_216BBEEA4(&v7);
  return v5;
}

void sub_216BBCFC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetCulledDependencies(uint64_t a1, unsigned int *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B912F0, memory_order_acquire) & 1) == 0)
  {
    BOOL v5 = a2;
    uint64_t v6 = a1;
    int v4 = __cxa_guard_acquire(&qword_267B912F0);
    a2 = v5;
    a1 = v6;
    if (v4)
    {
      qword_267B912D8 = 0;
      unk_267B912E0 = 0;
      qword_267B912E8 = 0;
      __cxa_atexit((void (*)(void *))sub_216BBD088, &qword_267B912D8, &dword_216758000);
      __cxa_guard_release(&qword_267B912F0);
      a2 = v5;
      a1 = v6;
    }
  }
  uint64_t v2 = sub_216A9DB14((void *)(a1 + 48), a2);
  if (v2) {
    return v2 + 3;
  }
  else {
    return &qword_267B912D8;
  }
}

{
  return pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetCulledDependencies(*(void *)(a1 + 288), a2);
}

void **sub_216BBD088(void **a1)
{
  uint64_t v3 = a1;
  sub_216BC1290(&v3);
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::HasAnyDynamicFileFormatArgumentFieldDependencies(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *this)
{
  return *((void *)this + 19) != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::HasAnyDynamicFileFormatArgumentAttributeDependencies(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *this)
{
  return *((void *)this + 24) != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::IsPossibleDynamicFileFormatArgumentField(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return sub_2168CB120((void *)this + 16, a2) != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::IsPossibleDynamicFileFormatArgumentAttribute(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return sub_2168CB120((void *)this + 21, a2) != 0;
}

void *pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetDynamicFileFormatArgumentDependencyData(uint64_t a1, unsigned int *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91300, memory_order_acquire) & 1) == 0)
  {
    BOOL v5 = a2;
    uint64_t v6 = a1;
    int v4 = __cxa_guard_acquire(&qword_267B91300);
    a2 = v5;
    a1 = v6;
    if (v4)
    {
      __cxa_atexit((void (*)(void *))sub_216BBD1D0, &unk_267B912F8, &dword_216758000);
      __cxa_guard_release(&qword_267B91300);
      a2 = v5;
      a1 = v6;
    }
  }
  uint64_t v2 = sub_216A9DB14((void *)(a1 + 88), a2);
  if (v2) {
    return v2 + 3;
  }
  else {
    return &unk_267B912F8;
  }
}

uint64_t *sub_216BBD1D0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    sub_216BBECE0((uint64_t)a1, v2);
  }
  return a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetPrimsUsingExpressionVariablesFromLayerStack(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91320, memory_order_acquire) & 1) == 0)
  {
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    int v4 = __cxa_guard_acquire(&qword_267B91320);
    a2 = v5;
    a1 = v6;
    if (v4)
    {
      qword_267B91308 = 0;
      unk_267B91310 = 0;
      qword_267B91318 = 0;
      __cxa_atexit((void (*)(void *))sub_216BBD2B4, &qword_267B91308, &dword_216758000);
      __cxa_guard_release(&qword_267B91320);
      a2 = v5;
      a1 = v6;
    }
  }
  uint64_t v2 = sub_216BC1328((void *)(a1 + 248), a2);
  if (v2) {
    return v2 + 4;
  }
  else {
    return &qword_267B91308;
  }
}

void **sub_216BBD2B4(void **a1)
{
  uint64_t v3 = a1;
  sub_216981168(&v3);
  return a1;
}

long long *pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetExpressionVariablesFromLayerStackUsedByPrim(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91350, memory_order_acquire) & 1) == 0)
  {
    uint64_t v11 = a1;
    uint64_t v8 = a2;
    int v9 = __cxa_guard_acquire(&qword_267B91350);
    a2 = v8;
    int v10 = v9;
    a1 = v11;
    if (v10)
    {
      xmmword_267B91328 = 0u;
      unk_267B91338 = 0u;
      dword_267B91348 = 1065353216;
      __cxa_atexit((void (*)(void *))sub_216BBD3C4, &xmmword_267B91328, &dword_216758000);
      __cxa_guard_release(&qword_267B91350);
      a1 = v11;
      a2 = v8;
    }
  }
  int v4 = sub_216A9DB14((void *)(a1 + 208), a2);
  uint64_t v5 = &xmmword_267B91328;
  if (v4)
  {
    DependenciesForLayerStacuint64_t k = pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::GetDependenciesForLayerStack((void **)v4 + 3, a3);
    if (DependenciesForLayerStack) {
      return (long long *)DependenciesForLayerStack;
    }
  }
  return v5;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::Pcp_AddCulledDependency(pxrInternal__aapl__pxrReserved__ *a1, uint64_t *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t result = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)pxrInternal__aapl__pxrReserved__::PcpClassifyNodeDependency(a1, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)a2);
  if ((result & 6) != 0)
  {
    int v5 = (int)result;
    sub_216BBD640((uint64_t)&v20);
    int v20 = v5;
    LayerStacuint64_t k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a1);
    uint64_t v7 = v21;
    unint64_t v21 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*LayerStack;
    sub_2168BD80C(LayerStack);
    sub_2168BD378((int)&v21, v7);
    Path = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(a1);
    sub_2169C487C(&v22, Path);
    sub_2169C48D4(&v23, Path + 1);
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1) == 3)
    {
      v18[0] = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a1);
      v18[1] = v9;
      int v10 = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v18);
      sub_216981010(&v19, v10);
      sub_21698105C((_DWORD *)&v19 + 1, v10 + 1);
    }
    else
    {
      uint64_t v19 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v19);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v19 + 1);
    }
    sub_2169C487C(&v24, &v19);
    sub_2169C48D4(&v25, (_DWORD *)&v19 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v19 + 1);
    sub_21697C414(&v19);
    MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(a1);
    long long v14 = (char *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v12, v13);
    if (v26 != v14)
    {
      uint64_t v15 = (_DWORD *)sub_216BBED8C((uint64_t)v26);
      sub_216BBEE18(v15, (uint64_t)v14);
    }
    *(_OWORD *)&v26[40] = *(_OWORD *)(v14 + 40);
    unint64_t v16 = a2[1];
    if (v16 >= a2[2])
    {
      uint64_t v17 = sub_216BC1444(a2, (uint64_t)&v20);
    }
    else
    {
      sub_216BBFAF4((uint64_t)(a2 + 2), a2[1], (uint64_t)&v20);
      uint64_t v17 = v16 + 88;
      a2[1] = v16 + 88;
    }
    a2[1] = v17;
    sub_216BBED8C((uint64_t)v26);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
    sub_21697C414(&v24);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
    sub_21697C414(&v22);
    return sub_216BBEEA4(&v21);
  }
  return result;
}

void sub_216BBD5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v5 + 8) = v6;
  sub_216BBD704((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BBD640(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  uint64_t v2 = (_DWORD *)(a1 + 20);
  *(void *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 24));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 28));
  sub_216BBED3C(a1 + 32);
  return a1;
}

void sub_216BBD6C8(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v5);
  sub_21697C414(v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_21697C414(v2);
  sub_216BBEEA4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216BBD704(uint64_t a1)
{
  return a1;
}

char *sub_216BBD760(uint64_t a1, _DWORD *a2)
{
  sub_216981010(&v7, a2);
  sub_21698105C(&v8, a2 + 1);
  memset(v9, 0, sizeof(v9));
  memset(v6, 0, sizeof(v6));
  int v4 = sub_216BBDCC4(a1, &v7);
  int v10 = (void **)v9;
  sub_216981168(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  int v10 = (void **)v6;
  sub_216981168(&v10);
  return (char *)v4 + 8;
}

void sub_216BBD80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  sub_216BBDC78((uint64_t)&a12);
  *(void *)(v12 - 4sub_2168EBBB8(&a9, 0) = &a9;
  sub_216981168((void ***)(v12 - 40));
  _Unwind_Resume(a1);
}

void *sub_216BBD830(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * *a2);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = v6;
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = v6 & (v7 - 1);
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      uint64_t result = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = result[1];
          if (v11 == v6)
          {
            if (result[2] == *a2) {
              return result;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_216BBDA80(a1, v6, a3, a4, (uint64_t)&v20);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *int v20 = *v18;
    *uint64_t v18 = v20;
  }
  else
  {
    *int v20 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v20)
    {
      unint64_t v19 = *(void *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v20;
    }
  }
  uint64_t result = v20;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_216BBDA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_216BBDB3C((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216BBDA80@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  int v10 = (char *)operator new(0x40uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)int v10 = 0;
  *((void *)v10 + 1) = a2;
  *((void *)v10 + 2) = *a3;
  sub_2168BD80C((uint64_t *)v10 + 2);
  *(_OWORD *)(v10 + 24) = *(_OWORD *)a4;
  *((void *)v10 + 5) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  __n128 result = *(__n128 *)(a4 + 24);
  *((__n128 *)v10 + 3) = result;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216BBDB20(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_216BBDB3C(v3, v2);
  _Unwind_Resume(a1);
}

void sub_216BBDB3C(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_216BBDB9C((uint64_t *)__p + 3);
    sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p + 2);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t *sub_216BBDB9C(uint64_t *a1)
{
  sub_216BBDBD4(a1);
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    a1[1] = (uint64_t)v2;
    operator delete(v2);
  }
  return a1;
}

void sub_216BBDBD4(uint64_t *a1)
{
  uint64_t v2 = a1[1] - *a1;
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v2 >> 3;
    do
    {
      uint64_t v5 = *a1;
      uint64_t v6 = *(void *)(*a1 + 8 * v3);
      if (v6)
      {
        do
        {
          uint64_t v7 = *(void *)(v6 + 32);
          uint64_t v9 = (void **)(v6 + 8);
          sub_216981168(&v9);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v6 + 4));
          uint8x8_t v8 = sub_21697C414((_DWORD *)v6);
          operator delete(v8);
          uint64_t v6 = v7;
        }
        while (v7);
        uint64_t v5 = *a1;
      }
      *(void *)(v5 + 8 * v3++) = 0;
    }
    while (v3 != v4);
  }
  a1[3] = 0;
}

_DWORD *sub_216BBDC78(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 8);
  sub_216981168(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_21697C414((_DWORD *)a1);
}

pxrInternal__aapl__pxrReserved__::SdfPath *sub_216BBDCC4(uint64_t a1, unsigned int *a2)
{
  uint64_t v6 = a2;
  __n128 result = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216BBDE40(a1, a2, (uint64_t *)&v6);
  v5[0] = result;
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    sub_216BBDD14(a1, v5);
    return v5[0];
  }
  return result;
}

_DWORD *sub_216BBDD14(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  uint64_t v3 = *a2;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(*a2, &v12);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v12))
  {
    sub_216981010(&v9, &v12);
    sub_21698105C(&v10, &v13);
    memset(v11, 0, sizeof(v11));
    memset(v8, 0, sizeof(v8));
    uint64_t v4 = sub_216BBDCC4(a1, &v9);
    BOOL v14 = (void **)v11;
    sub_216981168(&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_21697C414(&v9);
    BOOL v14 = (void **)v8;
    sub_216981168(&v14);
    uint64_t v5 = *(void *)(v4 + 40);
    if (v5) {
      uint64_t v6 = v5 | 1;
    }
    else {
      uint64_t v6 = v4;
    }
    *((void *)v3 + 6) = v6;
    *(void *)(v4 + 4sub_2168EBBB8(&a9, 0) = v3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  return sub_21697C414(&v12);
}

void sub_216BBDE0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  sub_216BBDC78((uint64_t)va1);
  *(void *)(v2 - 56) = va;
  sub_216981168((void ***)(v2 - 56));
  sub_21697B754((int *)va2);
  _Unwind_Resume(a1);
}

void *sub_216BBDE40(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6)
  {
    sub_216BBDF84((void **)a1);
    uint64_t v6 = *(void *)(a1 + 32);
  }
  uint64_t v7 = (void *)(*(void *)a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & v6));
  uint64_t v8 = (void *)*v7;
  if (*v7)
  {
    int v9 = (void *)*v7;
    while (*v9 != *(void *)a2)
    {
      int v9 = (void *)v9[4];
      if (!v9) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    if (*(void *)(a1 + 24) > (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
    {
      sub_216BBDF84((void **)a1);
      uint64_t v7 = (void *)(*(void *)a1
                    + 8
                    * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & *(void *)(a1 + 32)));
      uint64_t v8 = (void *)*v7;
    }
    int v9 = operator new(0x38uLL);
    sub_216BBE1B4((uint64_t)v9, *a3);
    v9[5] = 0;
    void v9[6] = 0;
    void v9[4] = v8;
    void *v7 = v9;
    ++*(void *)(a1 + 24);
  }
  return v9;
}

void sub_216BBDF70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216BBDF84(void **a1)
{
  sub_216851EE4((uint64_t)&v21, "Sdf", "SdfPathTable::_Grow");
  unsigned __int8 v3 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v3)
  {
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("void pxrInternal__aapl__pxrReserved__::SdfPathTable<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>::_Grow() [MappedType = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>]", 0, v2);
    BOOL v5 = v4 != 0;
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v5 = 0;
  }
  unint64_t v19 = v4;
  unsigned int v20 = v5;
  unint64_t v6 = (2 * (void)a1[4]) | 1;
  if (v6 <= 7) {
    unint64_t v6 = 7;
  }
  a1[4] = (void *)v6;
  sub_216BBE13C(&v17, v6 + 1);
  uint64_t v7 = a1[1];
  if (v7 != *a1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (v7 - (unsigned char *)*a1) >> 3;
    do
    {
      uint64_t v10 = (unsigned int *)*((void *)*a1 + v8);
      if (v10)
      {
        unint64_t v11 = (unint64_t)a1[4];
        do
        {
          uint64_t v12 = (unsigned int *)*((void *)v10 + 4);
          unint64_t v13 = bswap64(0x9E3779B97F4A7C55* (v10[1]+ ((v10[1]+ (unint64_t)*v10+ (v10[1] + (unint64_t)*v10) * (v10[1] + (unint64_t)*v10)) >> 1))) & v11;
          uint64_t v14 = v17;
          *((void *)v10 + 4) = *(void *)(v17 + 8 * v13);
          *(void *)(v14 + 8 * v13) = v10;
          uint64_t v10 = v12;
        }
        while (v12);
      }
      ++v8;
    }
    while (v8 != v9);
    uint64_t v7 = *a1;
  }
  *(_OWORD *)a1 = v17;
  unint64_t v15 = a1[2];
  a1[2] = v18;
  *(void *)&long long v17 = v7;
  uint64_t v18 = v15;
  if (v7)
  {
    *((void *)&v17 + 1) = v7;
    operator delete(v7);
  }
  unsigned int v20 = v5 - 1;
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v4);
    unsigned int v20 = v5 | 0xFFFFFFFE;
  }
  while (v22--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v21);
}

void sub_216BBE110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_21684E6B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216BBE13C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21677CACC(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_216BBE198(_Unwind_Exception *exception_object)
{
  unsigned __int8 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216BBE1B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_216981010((_DWORD *)a1, (_DWORD *)a2);
  sub_21698105C(v4 + 1, (_DWORD *)(a2 + 4));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_216980EEC((void *)(a1 + 8), *(_DWORD **)(a2 + 8), *(_DWORD **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  return a1;
}

void sub_216BBE208(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

void *sub_216BBE21C(uint64_t a1, void *a2, uint64_t *a3, _DWORD *a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      __n128 result = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return result;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          __n128 result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_216BBE468(a1, v7, a3, a4, (uint64_t)&v21);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    void *v21 = *v19;
    void *v19 = v21;
  }
  else
  {
    void *v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      unint64_t v20 = *(void *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v2sub_2168EBBB8(&a9, 0) = v21;
    }
  }
  __n128 result = v21;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_216BBE450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168BE6D4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_216BBE468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  __n128 result = operator new(0x20uLL);
  *(void *)a5 = result;
  *(void *)(a5 + 8) = v9;
  *__n128 result = 0;
  result[1] = a2;
  uint64_t v11 = *a3;
  result[2] = *a3;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_DWORD *)result + 6) = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

_DWORD *sub_216BBE4F4(int *a1, int *a2)
{
  int v5 = *a1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a1);
  int v6 = a1[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a1 + 1);
  sub_21697DE94(a1, a2);
  sub_21697DEEC(a1 + 1, a2 + 1);
  sub_21697DE94(a2, &v5);
  sub_21697DEEC(a2 + 1, &v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  return sub_21697C414(&v5);
}

void sub_216BBE5A8(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2)
{
  unsigned __int8 v3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*a2;
  sub_216BBE98C(a1, *a2);
  sub_216BBE9E0(a1, v3);

  sub_216BBEA7C(a1, (unsigned int *)v3);
}

void *sub_216BBE5F8(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * *a2);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = v6;
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = v6 & (v7 - 1);
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      __n128 result = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = result[1];
          if (v11 == v6)
          {
            if (result[2] == *a2) {
              return result;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4) {
              break;
            }
          }
          __n128 result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_216BBE848(a1, v6, a4, (uint64_t)&v20);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }
  size_t v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *unint64_t v20 = *v18;
    *size_t v18 = v20;
  }
  else
  {
    *unint64_t v20 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v20)
    {
      unint64_t v19 = *(void *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v20;
    }
  }
  __n128 result = v20;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_216BBE824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_216BBDB3C((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

double sub_216BBE848@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)uint8x8_t v8 = 0;
  *((void *)v8 + 1) = a2;
  *((void *)v8 + 2) = **a3;
  sub_2168BD80C((uint64_t *)v8 + 2);
  *((void *)v8 + 7) = 0;
  double result = 0.0;
  *(_OWORD *)(v8 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216BBE8CC(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_216BBDB3C(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_216BBE8E8(void *a1, unsigned int *a2)
{
  if (!a1[3]) {
    return 0;
  }
  for (double result = *(void **)(*a1
                            + 8
                            * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & a1[4]));
        result;
        double result = (void *)result[4])
  {
    if (*result == *(void *)a2) {
      break;
    }
  }
  return result;
}

unint64_t sub_216BBE950(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  for (uint64_t i = *(void *)(*(void *)a1 + 48); ; uint64_t i = *(void *)(result + 48))
  {
    unint64_t result = i & 0xFFFFFFFFFFFFFFF8;
    if ((i & 7) != 0 && result != 0) {
      break;
    }
    if (result) {
      BOOL v4 = (i & 7) == 0;
    }
    else {
      BOOL v4 = 0;
    }
    if (!v4) {
      return 0;
    }
  }
  return result;
}

void sub_216BBE98C(void *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int **)(a2 + 40);
  if (v2)
  {
    sub_216BBEB34(a1, *(void *)(a2 + 40));
    sub_216BBEA7C(a1, v2);
  }
}

void *sub_216BBE9E0(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unint64_t result = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  if (*(void *)a2 != *result)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v6);
    int v5 = sub_216BBE8E8(a1, &v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
    sub_21697C414(&v6);
    return (void *)sub_216BBEBAC((uint64_t)v5, (uint64_t)a2);
  }
  return result;
}

void sub_216BBEA68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void sub_216BBEA7C(void *a1, unsigned int *a2)
{
  uint64_t v3 = a2 + 1;
  BOOL v4 = (void *)(*a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & a1[4]));
  do
  {
    int v5 = v4;
    unsigned int v6 = (unsigned int *)*v4;
    BOOL v4 = (void *)(*v4 + 32);
  }
  while (v6 != a2);
  --a1[3];
  void *v5 = *((void *)a2 + 4);
  uint8x8_t v8 = (void **)(a2 + 2);
  sub_216981168(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  int v7 = sub_21697C414(a2);
  operator delete(v7);
}

void sub_216BBEB34(void *a1, uint64_t a2)
{
  ((void (*)(void))sub_216BBE98C)();
  uint64_t v4 = *(void *)(a2 + 48);
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 7) != 0 && v5 != 0)
  {
    do
    {
      uint64_t v7 = *(void *)(v5 + 48);
      if ((v7 & 7) != 0) {
        unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      }
      else {
        unint64_t v8 = 0;
      }
      sub_216BBE98C(a1, v5);
      sub_216BBEA7C(a1, (unsigned int *)v5);
      unint64_t v5 = v8;
    }
    while (v8);
  }
}

uint64_t sub_216BBEBAC(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 40);
  if (v2 == a2)
  {
    uint64_t v5 = *(void *)(a2 + 48);
    if ((v5 & 7) != 0) {
      unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(result + 4sub_2168EBBB8(&a9, 0) = v6;
  }
  else
  {
    do
    {
      unint64_t v3 = v2;
      uint64_t v4 = *(void *)(v2 + 48);
      if ((v4 & 7) != 0) {
        unint64_t v2 = v4 & 0xFFFFFFFFFFFFFFF8;
      }
      else {
        unint64_t v2 = 0;
      }
    }
    while (v2 != a2);
    *(void *)(v3 + 48) = *(void *)(a2 + 48);
  }
  return result;
}

uint64_t *sub_216BBEBF8(void *a1, void *a2)
{
  unint64_t result = sub_2168503EC(a1, a2);
  if (result)
  {
    sub_216BBEC30(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t sub_216BBEC30(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_216851DB0(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  std::string __p = 0;
  if (v3) {
    sub_216BBDB3C((uint64_t)&v6, v3);
  }
  return v2;
}

uint64_t sub_216BBEC7C(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_216851DB0(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  std::string __p = 0;
  if (v3)
  {
    if (v7)
    {
      uint64_t v4 = v3[2];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    operator delete(v3);
  }
  return v2;
}

void sub_216BBECE0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_2168CB05C(a2 + 48, *(void **)(a2 + 56));
    sub_2168CB05C(a2 + 24, *(void **)(a2 + 32));
    unint64_t v3 = (void **)a2;
    sub_216932280(&v3);
    operator delete((void *)a2);
  }
}

uint64_t sub_216BBED3C(uint64_t a1)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = 0;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)(a1 + 40), 0.0, 1.0);
  return a1;
}

void sub_216BBED78(_Unwind_Exception *a1)
{
  sub_216BBED8C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216BBED8C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 > 2)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 32) = v2 - 1;
    if (v2)
    {
      unint64_t v3 = (_DWORD *)a1;
      do
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3 + 3);
        sub_21697C414(v3 + 2);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3 + 1);
        sub_21697C414(v3);
        v3 += 4;
        int v4 = *(_DWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 32) = v4 - 1;
      }
      while (v4);
    }
  }
  return a1;
}

_DWORD *sub_216BBEE18(_DWORD *a1, uint64_t a2)
{
  int v2 = (_DWORD *)a2;
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(a2 + 32);
  a1[8] = v4;
  *((unsigned char *)a1 + 36) = *(unsigned char *)(a2 + 36);
  if (v4 > 2)
  {
    uint64_t v8 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *((void *)a1 + 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v5 = *(int *)(a2 + 32);
    if (v5)
    {
      uint64_t v6 = 16 * v5;
      do
      {
        char v7 = sub_216A8FD38(a1, v2);
        v2 += 4;
        a1 = v7 + 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  return v3;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BBEEA4(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

uint64_t sub_216BBEED4(uint64_t a1)
{
  sub_216BBEF10(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216BBEF10(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      unint64_t v3 = *(void **)v2;
      sub_216BBDB9C((uint64_t *)v2 + 3);
      sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v2 + 2);
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_216BBEF68(uint64_t a1)
{
  sub_216BBEFA4(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216BBEFA4(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_216BBEFE8((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_216BBEFE8(uint64_t a1)
{
  unint64_t v3 = (void **)(a1 + 8);
  sub_216BC1290(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_21697C414((_DWORD *)a1);
}

uint64_t sub_216BBF034(uint64_t a1)
{
  sub_216BBF070(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216BBF070(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_216BBF0B4((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_216BBF0B4(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v2 = (void *)(a1 + 8);
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    sub_216BBECE0((uint64_t)v2, v3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

uint64_t sub_216BBF104(uint64_t a1)
{
  sub_216BBF140(a1, *(_DWORD **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216BBF140(uint64_t a1, _DWORD *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      uint64_t v3 = *(_DWORD **)v2;
      sub_216BBF184(v2 + 4);
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_216BBF184(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::~PcpExpressionVariablesDependencyData((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)(a1 + 2));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

uint64_t sub_216BBF1CC(uint64_t a1)
{
  sub_216BBF208(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216BBF208(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216BBF24C((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

atomic_uint *sub_216BBF24C(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 16);
  sub_216981168(&v3);
  unint64_t result = *(atomic_uint **)(a1 + 8);
  if (result)
  {
    if (atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void *sub_216BBF2C4(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = v6;
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = v6 & (v7 - 1);
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(void *)a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_216BBF534(a1, v6, a4, (uint64_t)v21);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }
  size_t v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *(void *)v21[0] = *v18;
    *size_t v18 = v21[0];
  }
  else
  {
    *(void *)v21[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v21[0])
    {
      unint64_t v19 = *(void *)(*(void *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v21[0];
    }
  }
  uint64_t v10 = (void *)v21[0];
  v21[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216BBF5AC((uint64_t)v21, 0);
  return v10;
}

void sub_216BBF51C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BBF5AC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_216BBF534@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  void *v8 = 0;
  v8[1] = a2;
  uint64_t v9 = *a3;
  sub_216981010((_DWORD *)v8 + 4, v9);
  unint64_t result = sub_21698105C((_DWORD *)v8 + 5, v9 + 1);
  void v8[3] = 0;
  void v8[4] = 0;
  void v8[5] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216BBF5AC(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216BBEFE8((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_216BBF604(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 88;
        sub_216BBF674((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BBF674(uint64_t a1, uint64_t a2)
{
  sub_216BBED8C(a2 + 32);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 28));
  sub_21697C414((_DWORD *)(a2 + 24));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_21697C414((_DWORD *)(a2 + 16));

  return sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a2 + 8));
}

uint64_t sub_216BBF6D8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - a2) >> 3) >= a5)
      {
        uint64_t v21 = a3 + 88 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = sub_216BBFA48(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_216BBF8E8((uint64_t)a1, v5, v12, v5 + 88 * a5);
      sub_216BBFD64((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x2E8BA2E8BA2E8BALL) {
        sub_21677CB10();
      }
      uint64_t v15 = 0x2E8BA2E8BA2E8BA3 * ((a2 - v13) >> 3);
      unint64_t v16 = 0x2E8BA2E8BA2E8BA3 * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x1745D1745D1745DLL) {
        unint64_t v18 = 0x2E8BA2E8BA2E8BALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        unint64_t v19 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)sub_2168C32AC(v9, v18);
      }
      else {
        unint64_t v19 = 0;
      }
      int v22 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v19 + 88 * v15);
      v26[0] = v19;
      v26[1] = v22;
      uint64_t v27 = v22;
      uint64_t v28 = (char *)v19 + 88 * v18;
      uint64_t v23 = 88 * a5;
      int v24 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v22 + 88 * a5);
      do
      {
        sub_216BBFAF4(v29, (uint64_t)v22, v7);
        int v22 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v22 + 88);
        v7 += 88;
        v23 -= 88;
      }
      while (v23);
      uint64_t v27 = v24;
      uint64_t v5 = sub_216BBF994(a1, v26, v5);
      sub_216BC00E8(v26);
    }
  }
  return v5;
}

void sub_216BBF8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216BBF8E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      sub_216BBFAF4(a1 + 16, v8, v10);
      v10 += 88;
      v8 += 88;
    }
    while (v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_216BBFC7C((uint64_t)&v12, a2, v7, v6);
}

void sub_216BBF98C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_216BBF994(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_216BBFE34((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_216BBFEF0(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_216BBFA48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216BBFAF4(a1, v4, v6);
      v6 += 88;
      uint64_t v4 = v12 + 88;
      v12 += 88;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_216BBFBF0((uint64_t)v9);
  return v4;
}

void sub_216BBFAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_216BBFAF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(void *)(a2 + 8) = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  sub_21697D878((_DWORD *)(a2 + 16), (_DWORD *)(a3 + 16));
  sub_21697D8B4((_DWORD *)(a2 + 20), (_DWORD *)(a3 + 20));
  sub_21697D878((_DWORD *)(a2 + 24), (_DWORD *)(a3 + 24));
  sub_21697D8B4((_DWORD *)(a2 + 28), (_DWORD *)(a3 + 28));
  sub_216BBFB70((_DWORD *)(a2 + 32), a3 + 32);
  __n128 result = *(__n128 *)(a3 + 72);
  *(__n128 *)(a2 + 72) = result;
  return result;
}

_DWORD *sub_216BBFB70(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = (_DWORD *)a2;
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(a2 + 32);
  a1[8] = v4;
  *((unsigned char *)a1 + 36) = *(unsigned char *)(a2 + 36);
  if (v4 > 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    uint64_t v5 = *(int *)(a2 + 32);
    if (v5)
    {
      uint64_t v6 = 16 * v5;
      do
      {
        uint64_t v7 = sub_2169DC194(a1, v2);
        v2 += 4;
        a1 = v7 + 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  return v3;
}

uint64_t sub_216BBFBF0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216BBFC28((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216BBFC28(uint64_t *result)
{
  uint64_t v2 = (uint64_t *)result[1];
  uint64_t v1 = (uint64_t *)result[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 88;
      __n128 result = (uint64_t *)sub_216BBF674(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_216BBFC7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      uint64_t v9 = a3 + v7;
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a4 + v7 - 80);
      char v10 = *v11;
      *((_DWORD *)v11 - 2) = *(_DWORD *)(a3 + v7 - 88);
      int *v11 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a3 + v7 - 80);
      *(void *)(a3 + v7 - 8sub_2168EBBB8(&a9, 0) = 0;
      sub_2168BD378(a4 + v7 - 80, v10);
      sub_21697DE94((int *)(a4 + v7 - 72), (int *)(a3 + v7 - 72));
      sub_21697DEEC((int *)(a4 + v7 - 68), (int *)(a3 + v7 - 68));
      sub_21697DE94((int *)(a4 + v7 - 64), (int *)(a3 + v7 - 64));
      sub_21697DEEC((int *)(a4 + v7 - 60), (int *)(a3 + v7 - 60));
      if (a3 != a4)
      {
        uint64_t v12 = (_DWORD *)sub_216BBED8C(v8 - 56);
        sub_216BBFB70(v12, v9 - 56);
      }
      *(_OWORD *)(v8 - 16) = *(_OWORD *)(v9 - 16);
      v7 -= 88;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_216BBFD64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a2 + 32;
  do
  {
    uint64_t v7 = v6 - 32;
    *(_DWORD *)a4 = *(_DWORD *)(v6 - 32);
    uint64_t v8 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a4 + 8);
    *(void *)(a4 + 8) = *(void *)(v6 - 24);
    *(void *)(v6 - 24) = 0;
    sub_2168BD378(a4 + 8, v8);
    sub_21697DE94((int *)(a4 + 16), (int *)(v6 - 16));
    sub_21697DEEC((int *)(a4 + 20), (int *)(v6 - 12));
    sub_21697DE94((int *)(a4 + 24), (int *)(v6 - 8));
    sub_21697DEEC((int *)(a4 + 28), (int *)(v6 - 4));
    if (a4 != v6 - 32)
    {
      uint64_t v9 = (_DWORD *)sub_216BBED8C(a4 + 32);
      sub_216BBFB70(v9, v6);
    }
    *(_OWORD *)(a4 + 72) = *(_OWORD *)(v6 + 40);
    a4 += 88;
    v6 += 88;
  }
  while (v7 + 88 != v5);
  return v5;
}

uint64_t sub_216BBFE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 88;
      sub_216BBFF94(v7 - 88, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 88;
      *((void *)&v15 + 1) -= 88;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216BC005C((uint64_t)v12);
  return v10;
}

void sub_216BBFEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216BBFEF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216BBFF94(v4, v6);
      v6 += 88;
      uint64_t v4 = v11 + 88;
      v11 += 88;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_216BBFBF0((uint64_t)v8);
  return v4;
}

void sub_216BBFF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216BBFF94(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = (_DWORD *)(a1 + 20);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  sub_2168BD80C((uint64_t *)(a1 + 8));
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21698105C(v4, (_DWORD *)(a2 + 20));
  sub_216981010((_DWORD *)(a1 + 24), (_DWORD *)(a2 + 24));
  sub_21698105C((_DWORD *)(a1 + 28), (_DWORD *)(a2 + 28));
  sub_216BBEE18((_DWORD *)(a1 + 32), a2 + 32);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

void sub_216BC0038(_Unwind_Exception *a1)
{
  sub_21697B754(v3);
  sub_21697B754(v2);
  sub_216BBEEA4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216BC005C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216BC0094((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216BC0094(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      __n128 result = (uint64_t *)sub_216BBF674(v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BC00E8(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BC011C(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **result)
{
  uint64_t v2 = result[1];
  uint64_t v1 = result[2];
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = (uint64_t)v3[4];
      uint64_t v3[2] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v1 - 88);
      __n128 result = sub_216BBF674(v4, (uint64_t)v1 - 88);
      uint64_t v1 = v3[2];
    }
    while (v1 != v2);
  }
  return result;
}

void *sub_216BC0164(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = v6;
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = v6 & (v7 - 1);
    }
    char v9 = *(void **)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(void *)a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_216AE5C30(a1, v6, a4, (uint64_t)v21);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }
  unint64_t v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *(void *)v21[0] = *v18;
    *unint64_t v18 = v21[0];
  }
  else
  {
    *(void *)v21[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v21[0])
    {
      unint64_t v19 = *(void *)(*(void *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v21[0];
    }
  }
  uint64_t v10 = (void *)v21[0];
  v21[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216BC03D4((uint64_t)v21, 0);
  return v10;
}

void sub_216BC03BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BC03D4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_216BC03D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216BBF0B4((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_216BC042C(void *a1, void *a2)
{
  uint64_t v3 = *a1 + 248;
  char v9 = a2;
  unint64_t v4 = sub_216BC04C0(v3, (uint64_t)a2, (uint64_t)&unk_2174BFD90, &v9);
  uint64_t v5 = v4;
  unint64_t v6 = (_DWORD *)a1[1];
  unint64_t v7 = v4[5];
  if (v7 >= v4[6])
  {
    uint64_t result = sub_216981B30(v4 + 4, v6);
  }
  else
  {
    sub_216981010((_DWORD *)v4[5], v6);
    sub_21698105C((_DWORD *)(v7 + 4), v6 + 1);
    uint64_t result = v7 + 8;
  }
  v5[5] = result;
  return result;
}

void *sub_216BC04C0(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * sub_216851B24(a2));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    float v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      float v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            uint64_t v15 = sub_216851B24((uint64_t)(v13 + 2));
            if (v15 == sub_216851B24(a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          float v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  unint64_t v16 = operator new(0x38uLL);
  v28[0] = v16;
  v28[1] = a1 + 16;
  *unint64_t v16 = 0;
  v16[1] = v8;
  size_t v17 = *a4;
  v16[2] = **a4;
  uint64_t v18 = v17[1];
  v16[3] = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 + 8), 1u, memory_order_relaxed);
  }
  void v16[4] = 0;
  v16[5] = 0;
  void v16[6] = 0;
  char v29 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_21678A04C(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  int v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)v28[0] = *v25;
    void *v25 = v28[0];
  }
  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v28[0])
    {
      unint64_t v26 = *(void *)(*(void *)v28[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v26 >= v9) {
          v26 %= v9;
        }
      }
      else
      {
        v26 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v28[0];
    }
  }
  float v13 = (void *)v28[0];
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216BC077C((uint64_t)v28, 0);
  return v13;
}

void sub_216BC0764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BC077C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_216BC077C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216BBF24C((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *sub_216BC07D4(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = v6;
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = v6 & (v7 - 1);
    }
    unint64_t v9 = *(void **)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      uint8x8_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(void *)a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4) {
              break;
            }
          }
          uint8x8_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_216BC0A44(a1, v6, a4, (uint64_t)v21);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *(void *)v21[0] = *v18;
    *uint64_t v18 = v21[0];
  }
  else
  {
    *(void *)v21[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v21[0])
    {
      unint64_t v19 = *(void *)(*(void *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v21[0];
    }
  }
  uint8x8_t v10 = (void *)v21[0];
  v21[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216BC0B20((uint64_t)v21, 0);
  return v10;
}

void sub_216BC0A2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BC0B20((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216BC0A44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = operator new(0x20uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_216BC0AB4((uint64_t)(v8 + 2), *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216BC0A9C(_Unwind_Exception *a1)
{
  sub_216BC0B20(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216BC0AB4(uint64_t a1, _DWORD *a2)
{
  unint64_t v4 = sub_216981010((_DWORD *)a1, a2);
  sub_21698105C(v4 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::PcpExpressionVariablesDependencyData((void *)(a1 + 8));
  return a1;
}

void sub_216BC0B00(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414(v1);
  _Unwind_Resume(a1);
}

void sub_216BC0B20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216BBF184(v2 + 4);
    }
    operator delete(v2);
  }
}

void sub_216BC0B78(void **a1, uint64_t a2)
{
  uint64_t v3 = *a1 + 31;
  unint64_t v4 = sub_216851C48(v3, a2);
  if (v4
    || (v6[0] = "pcp/dependencies.cpp",
        v6[1] = "operator()",
        _OWORD v6[2] = 386,
        void v6[3] = "auto pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Remove(const PcpPrimIndex &, PcpLifeboat *)::(a"
                "nonymous class)::operator()(const PcpLayerStackPtr &, const std::unordered_set<std::string> &) const",
        char v7 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "layerStackIt != _layerStackExprVarsMap.end()", 0) & 1) != 0))
  {
    uint64_t v5 = sub_216AD6900((int *)v4[4], (int *)v4[5], a1[1]);
    sub_216AD6870((uint64_t)(v4 + 4), v5, (int *)v4[5]);
    if (v4[4] == v4[5])
    {
      sub_216851DB0(v3, v4, (uint64_t)v6);
      sub_216BC077C((uint64_t)v6, 0);
    }
  }
}

void sub_216BC0C4C(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_216BBEF10(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_216BC0CA4(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_216BBEFA4(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_216BC0CFC(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_216BBF070(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_216BC0D54(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_216BBF140(a1, *(_DWORD **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_216BC0DAC(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_216BBF208(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t *sub_216BC0E04(uint64_t **a1, void *a2, uint64_t *a3)
{
  sub_216BC0EB8((uint64_t)a1, a3, (uint64_t)&__p);
  uint64_t v5 = (uint64_t **)sub_216BC0F40(a1, a2, &v10, &v9, (uint64_t)__p + 32);
  unint64_t v6 = *v5;
  if (*v5)
  {
    char v7 = __p;
    std::string __p = 0;
    if (v7) {
      sub_216BC1118((uint64_t)&v12, v7);
    }
  }
  else
  {
    sub_21677B358(a1, v10, v5, (uint64_t *)__p);
    return (uint64_t *)__p;
  }
  return v6;
}

void sub_216BC0E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    sub_216BC1118((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216BC0EB8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (uint64_t *)operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_216ABBA60(v6 + 4, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216BC0F24(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_216BC1118(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_216BC0F40(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = a1 + 1;
  if (a1 + 1 != a2)
  {
    unint64_t v11 = sub_216851B24(a5);
    if (v11 >= sub_216851B24((uint64_t)(a2 + 4)))
    {
      unint64_t v14 = sub_216851B24((uint64_t)(a2 + 4));
      if (v14 >= sub_216851B24(a5))
      {
        *a3 = a2;
        *a4 = (uint64_t)a2;
        return a4;
      }
      a4 = a2 + 1;
      uint64_t v15 = a2[1];
      if (v15)
      {
        unint64_t v16 = (void *)a2[1];
        do
        {
          size_t v17 = v16;
          unint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        BOOL v21 = a2;
        do
        {
          size_t v17 = (void *)v21[2];
          BOOL v19 = *v17 == (void)v21;
          BOOL v21 = v17;
        }
        while (!v19);
      }
      if (v17 != v9)
      {
        unint64_t v22 = sub_216851B24(a5);
        if (v22 >= sub_216851B24((uint64_t)(v17 + 4))) {
          goto LABEL_28;
        }
        uint64_t v15 = *a4;
      }
      if (v15)
      {
        *a3 = v17;
        return v17;
      }
      else
      {
        *a3 = a2;
      }
      return a4;
    }
  }
  if ((void *)*a1 == a2)
  {
    float v13 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v13;
      return v13 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v12 = (void *)*a2;
  if (*a2)
  {
    do
    {
      float v13 = v12;
      uint64_t v12 = (void *)v12[1];
    }
    while (v12);
  }
  else
  {
    uint64_t v18 = a2;
    do
    {
      float v13 = (void *)v18[2];
      BOOL v19 = *v13 == (void)v18;
      uint64_t v18 = v13;
    }
    while (v19);
  }
  unint64_t v20 = sub_216851B24((uint64_t)(v13 + 4));
  if (v20 < sub_216851B24(a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return sub_21699DB58((uint64_t)a1, a3, a5);
}

void sub_216BC1118(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (atomic_uint *)__p[5];
    if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t *sub_216BC11A8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_21685203C((unint64_t *)(v3 + 16), &v7);
    unint64_t v4 = (atomic_uint *)a1[1];
    a1[1] = v7;
    uint64_t v7 = 0;
    if (v4)
    {
      if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
      }
      uint64_t v5 = v7;
      if (v7 && atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
    }
  }
  return a1;
}

void sub_216BC1278(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_217324208(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BC1290(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        sub_216BBF674((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_216BC1328(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_216851B24(a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * v4);
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v6;
    if (v6 >= *(void *)&v5) {
      unint64_t v9 = v6 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = v6 & (*(void *)&v5 - 1);
  }
  uint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v6 == v12)
      {
        uint64_t v13 = sub_216851B24((uint64_t)(v11 + 2));
        if (v13 == sub_216851B24(a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(void *)&v5) {
            v12 %= *(void *)&v5;
          }
        }
        else
        {
          v12 &= *(void *)&v5 - 1;
        }
        if (v12 != v9) {
          return 0;
        }
      }
      unint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t sub_216BC1444(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2E8BA2E8BA2E8BALL) {
    sub_21677CB10();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL) {
    unint64_t v6 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v14 = a1 + 2;
  if (v6) {
    uint8x8_t v7 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)sub_2168C32AC((uint64_t)(a1 + 2), v6);
  }
  else {
    uint8x8_t v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = (uint64_t)v7 + 88 * v3;
  uint64_t v13 = (char *)v7 + 88 * v6;
  sub_216BBFAF4((uint64_t)(a1 + 2), v11, a2);
  uint64_t v12 = v11 + 88;
  sub_216BC156C(a1, &v10);
  uint64_t v8 = a1[1];
  sub_216BC00E8(&v10);
  return v8;
}

void sub_216BC1558(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BC00E8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BC156C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216BBFE34((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

std::string *pxrInternal__aapl__pxrReserved__::Pcp_Dump@<X0>(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, unsigned int a5@<W4>, std::string *a6@<X8>)
{
  uint64_t ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a1);
  uint64_t v200 = v9;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  a6->__r_.__value_.__r.__words[0] = 0;
  int v176 = a1;
  uint64_t v10 = sub_216BC812C(a2, a1);
  uint64_t v13 = (void *)(a2 + 8);
  if ((void *)(a2 + 8) == v10) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *((unsigned int *)v10 + 12);
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Node %d:\n", v11, v12, v14);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a6, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (ParentNode) {
    BOOL v19 = v200 + 1 == 0;
  }
  else {
    BOOL v19 = 1;
  }
  int v20 = !v19;
  if (v19)
  {
    unint64_t v23 = "NONE";
  }
  else
  {
    BOOL v21 = sub_216BC812C(a2, &ParentNode);
    if (v13 == v21) {
      int v22 = 0;
    }
    else {
      int v22 = *((_DWORD *)v21 + 12);
    }
    LODWORD(v196.__r_.__value_.__l.__data_) = v22;
    sub_216997470();
    if (v198 >= 0) {
      unint64_t v23 = (const char *)&v197;
    }
    else {
      unint64_t v23 = v197;
    }
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Parent node:              %s\n", v17, v18, v23);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v24 = &__p;
  }
  else {
    size_t v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a6, (const std::string::value_type *)v24, v25);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v20) {
      goto LABEL_38;
    }
  }
  else if (!v20)
  {
    goto LABEL_38;
  }
  if (v198 < 0) {
    operator delete(v197);
  }
LABEL_38:
  Arcuint64_t Type = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(v176);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C75BAC8, ArcType, (uint64_t)&v196);
  if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v29 = &v196;
  }
  else {
    char v29 = (std::string *)v196.__r_.__value_.__r.__words[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Type:                     %s\n", v27, v28, v29);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v30 = &__p;
  }
  else {
    unint64_t v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v31 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a6, (const std::string::value_type *)v30, v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v196.__r_.__value_.__l.__data_);
  }
  std::string::append(a6, "    DependencyType:           ");
  int v33 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::PcpClassifyNodeDependency(v176, v32);
  pxrInternal__aapl__pxrReserved__::PcpDependencyFlagsToString(v33, &v196);
  int v34 = std::string::append(&v196, "\n");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v36 = &__p;
  }
  else {
    uint64_t v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v37 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v37 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a6, (const std::string::value_type *)v36, v37);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v196.__r_.__value_.__l.__data_);
  }
  Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(v176);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(Path);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Source path:              <%s>\n", v40, v41, Text);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v42 = &__p;
  }
  else {
    uint64_t v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v43 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a6, (const std::string::value_type *)v42, v43);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LayerStacuint64_t k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(v176);
  sub_216BC26E0(LayerStack);
  if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v47 = &v196;
  }
  else {
    uint64_t v47 = (std::string *)v196.__r_.__value_.__r.__words[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Source layer stack:       %s\n", v45, v46, v47);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v48 = &__p;
  }
  else {
    char v48 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v49 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v49 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a6, (const std::string::value_type *)v48, v49);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v196.__r_.__value_.__l.__data_);
  }
  unint64_t v52 = "NONE";
  if (ParentNode && v200 != (const char *)-1)
  {
    uint64_t v53 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&ParentNode);
    unint64_t v52 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v53);
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Target path:              <%s>\n", v50, v51, v52);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v54 = &__p;
  }
  else {
    uint64_t v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v55 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v55 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a6, (const std::string::value_type *)v54, v55);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (ParentNode) {
    BOOL v58 = v200 + 1 == 0;
  }
  else {
    BOOL v58 = 1;
  }
  int v59 = !v58;
  if (v58)
  {
    size_t v61 = (std::string *)"NONE";
  }
  else
  {
    BOOL v60 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&ParentNode);
    sub_216BC26E0(v60);
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v61 = &v196;
    }
    else {
      size_t v61 = (std::string *)v196.__r_.__value_.__r.__words[0];
    }
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Target layer stack:       %s\n", v56, v57, v61);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v62 = &__p;
  }
  else {
    int v62 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v63 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v63 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a6, (const std::string::value_type *)v62, v63);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v59) {
      goto LABEL_116;
    }
  }
  else if (!v59)
  {
    goto LABEL_116;
  }
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v196.__r_.__value_.__l.__data_);
  }
LABEL_116:
  uint64_t OriginNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(v176);
  v195[0] = OriginNode;
  v195[1] = v65;
  if (v65 != v200 || ParentNode != OriginNode)
  {
    uint64_t v67 = sub_216BC812C(a2, v195);
    if (v13 == v67) {
      uint64_t v70 = 0;
    }
    else {
      uint64_t v70 = *((unsigned int *)v67 + 12);
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Origin node:              %d\n", v68, v69, v70);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v71 = &__p;
    }
    else {
      uint64_t v71 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v72 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v72 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a6, (const std::string::value_type *)v71, v72);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    SiblingNumAtOrigiuint64_t n = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSiblingNumAtOrigin(v176);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Sibling # at origin:      %d\n", v74, v75, SiblingNumAtOrigin);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v76 = &__p;
    }
    else {
      char v76 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v77 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v77 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a6, (const std::string::value_type *)v76, v77);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (a5)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Map to parent:\n", v65, v66);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v78 = &__p;
    }
    else {
      uint64_t v78 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v79 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v79 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a6, (const std::string::value_type *)v78, v79);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    MapToParent = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(v176);
    char v83 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v81, v82);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetString(v83, &v193);
    sub_216779094(v191, "\n");
    sub_216779094(v189, "\n        ");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)&v193.__r_.__value_.__l.__data_, (unsigned __int8 *)v191, (unsigned __int8 *)v189, &v194);
    if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v86 = &v194;
    }
    else {
      uint64_t v86 = (std::string *)v194.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"        %s\n", v84, v85, v86);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v87 = &__p;
    }
    else {
      uint64_t v87 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v88 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v88 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a6, (const std::string::value_type *)v87, v88);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v194.__r_.__value_.__l.__data_);
    }
    if (v190 < 0) {
      operator delete(v189[0]);
    }
    if ((char)v192 < 0) {
      operator delete(v191[0]);
    }
    if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v193.__r_.__value_.__l.__data_);
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Map to root:\n", v89, v90);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v91 = &__p;
    }
    else {
      uint64_t v91 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v92 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v92 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a6, (const std::string::value_type *)v91, v92);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(v176);
    v96 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v94, v95);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetString(v96, &v193);
    sub_216779094(v191, "\n");
    sub_216779094(v189, "\n        ");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)&v193.__r_.__value_.__l.__data_, (unsigned __int8 *)v191, (unsigned __int8 *)v189, &v194);
    if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v99 = &v194;
    }
    else {
      uint64_t v99 = (std::string *)v194.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"        %s\n", v97, v98, v99);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v100 = &__p;
    }
    else {
      char v100 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v101 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v101 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a6, (const std::string::value_type *)v100, v101);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v194.__r_.__value_.__l.__data_);
    }
    if (v190 < 0) {
      operator delete(v189[0]);
    }
    if ((char)v192 < 0) {
      operator delete(v191[0]);
    }
    if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v193.__r_.__value_.__l.__data_);
    }
  }
  uint64_t NamespaceDepth = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth(v176);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Namespace depth:          %d\n", v103, v104, NamespaceDepth);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v105 = &__p;
  }
  else {
    uint64_t v105 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v106 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v106 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a6, (const std::string::value_type *)v105, v106);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  DepthBelowIntroductiouint64_t n = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction(v176, v107);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Depth below introduction: %d\n", v109, v110, DepthBelowIntroduction);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v111 = &__p;
  }
  else {
    uint64_t v111 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v112 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v112 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a6, (const std::string::value_type *)v111, v112);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unsigned int Permission = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPermission(v176);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&stru_26C759D20, Permission, (uint64_t)&v194);
  if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v116 = &v194;
  }
  else {
    size_t v116 = (std::string *)v194.__r_.__value_.__r.__words[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Permission:               %s\n", v114, v115, v116);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v117 = &__p;
  }
  else {
    uint64_t v117 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v118 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v118 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a6, (const std::string::value_type *)v117, v118);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v194.__r_.__value_.__l.__data_);
  }
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRestricted(v176)) {
    BOOL v121 = "TRUE";
  }
  else {
    BOOL v121 = "FALSE";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Is restricted:            %s\n", v119, v120, v121);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v122 = &__p;
  }
  else {
    uint64_t v122 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v123 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v123 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a6, (const std::string::value_type *)v122, v123);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert(v176)) {
    int v126 = "TRUE";
  }
  else {
    int v126 = "FALSE";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Is inert:                 %s\n", v124, v125, v126);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v127 = &__p;
  }
  else {
    size_t v127 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v128 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v128 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a6, (const std::string::value_type *)v127, v128);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs(v176)) {
    size_t v131 = "TRUE";
  }
  else {
    size_t v131 = "FALSE";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Contribute specs:         %s\n", v129, v130, v131);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v132 = &__p;
  }
  else {
    BOOL v132 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v133 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v133 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a6, (const std::string::value_type *)v132, v133);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t SpecContributionRestrictedDepth = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSpecContributionRestrictedDepth(v176);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"        Restricted at depth:  %zu\n", v135, v136, SpecContributionRestrictedDepth);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v137 = &__p;
  }
  else {
    int v137 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v138 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v138 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a6, (const std::string::value_type *)v137, v138);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs(v176)) {
    int v141 = "TRUE";
  }
  else {
    int v141 = "FALSE";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Has specs:                %s\n", v139, v140, v141);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v142 = &__p;
  }
  else {
    size_t v142 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v143 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v143 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a6, (const std::string::value_type *)v142, v143);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSymmetry(v176)) {
    uint64_t v146 = "TRUE";
  }
  else {
    uint64_t v146 = "FALSE";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Has symmetry:             %s\n", v144, v145, v146);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v147 = &__p;
  }
  else {
    int v147 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v148 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v148 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a6, (const std::string::value_type *)v147, v148);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  size_t v151 = sub_216BC812C(a3, v176);
  if ((void *)(a3 + 8) != v151)
  {
    std::string::append(a6, "    Prim stack:\n");
    *(_OWORD *)v189 = *((_OWORD *)v151 + 3);
    while (v189[0] != v189[1])
    {
      uint64_t v152 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216A8E870((uint64_t *)v189, v149, v150);
      memset(&__p, 0, sizeof(__p));
      *(_OWORD *)&v194.__r_.__value_.__r.__words[1] = 0uLL;
      v194.__r_.__value_.__r.__words[0] = (std::string::size_type)&v194.__r_.__value_.__l.__size_;
      size_t v153 = (uint64_t **)sub_216A663FC(v152);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v153, (uint64_t *)&v193);
      BOOL v154 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v193);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v154);
      pxrInternal__aapl__pxrReserved__::SdfLayer::SplitIdentifier(Identifier, &__p, &v194);
      std::string::size_type v156 = v193.__r_.__value_.__l.__size_;
      if (v193.__r_.__value_.__l.__size_
        && atomic_fetch_add_explicit((atomic_uint *volatile)(v193.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(std::string::size_type))(*(void *)v156 + 8))(v156);
      }
      pxrInternal__aapl__pxrReserved__::TfGetBaseName(&__p, &v193);
      uint64_t v157 = sub_216A663FC(v152);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v157, &v187);
      int v158 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v187);
      if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v159 = &v193;
      }
      else {
        int v159 = (std::string *)v193.__r_.__value_.__r.__words[0];
      }
      size_t v160 = (uint64_t **)sub_216A663FC(v152);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v160, &v185);
      unint64_t v161 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v185);
      uint64_t v162 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v161);
      if (*(char *)(v162 + 23) >= 0) {
        uint64_t v165 = v162;
      }
      else {
        uint64_t v165 = *(void *)v162;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"      <%s> %s - @%s@\n", v163, v164, v158, v159, v165);
      if ((v192 & 0x80u) == 0) {
        uint64_t v166 = v191;
      }
      else {
        uint64_t v166 = (void **)v191[0];
      }
      if ((v192 & 0x80u) == 0) {
        std::string::size_type v167 = v192;
      }
      else {
        std::string::size_type v167 = (std::string::size_type)v191[1];
      }
      std::string::append(a6, (const std::string::value_type *)v166, v167);
      if ((char)v192 < 0) {
        operator delete(v191[0]);
      }
      uint64_t v168 = v186;
      if (v186 && atomic_fetch_add_explicit((atomic_uint *volatile)(v186 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v168 + 8))(v168);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v188);
      sub_21697C414(&v187);
      if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v193.__r_.__value_.__l.__data_);
      }
      sub_2167877AC((uint64_t)&v194, (void *)v194.__r_.__value_.__l.__size_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_216A8E8F0(v189);
    }
  }
  uint64_t v169 = *((void *)v176 + 1);
  std::string::size_type v183 = *(void *)v176;
  uint64_t v184 = v169;
  std::string::size_type v170 = **(void **)(v183 + 16);
  std::string::size_type v171 = *(unsigned __int16 *)(v170 + 48 * v169 + 28);
  __p.__r_.__value_.__r.__words[0] = v183;
  __p.__r_.__value_.__l.__size_ = v171;
  __p.__r_.__value_.__r.__words[2] = v170;
  *(void *)&long long v181 = v183;
  *((void *)&v181 + 1) = 0xFFFFLL;
  std::string::size_type v182 = v170;
  while (*(_OWORD *)&__p.__r_.__value_.__l.__data_ != v181)
  {
    uint64_t v172 = sub_216BC2828(&__p, v149, v150);
    pxrInternal__aapl__pxrReserved__::Pcp_Dump(&v194, v172, a2, a3, a4, a5);
    if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v173 = &v194;
    }
    else {
      uint64_t v173 = (std::string *)v194.__r_.__value_.__r.__words[0];
    }
    if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v174 = HIBYTE(v194.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v174 = v194.__r_.__value_.__l.__size_;
    }
    std::string::append(a6, (const std::string::value_type *)v173, v174);
    if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v194.__r_.__value_.__l.__data_);
    }
    sub_216BC28B8(&__p);
  }
  return std::string::append(a6, "\n");
}

void sub_216BC23C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v51 - 169) < 0) {
    operator delete(*(void **)(v51 - 192));
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (*(char *)(v50 + 23) < 0) {
    operator delete(*(void **)v50);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216BC26E0(uint64_t *a1)
{
  sub_21677B834((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216BC2814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216BC2828(void *result, uint64_t a2, char *a3)
{
  if (result[1] == result[4] && *result == result[3])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator*";
    uint64_t v3[2] = 271;
    void v3[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::PcpNodeRef_PrivateC"
            "hildrenConstRange>::operator*() [T = pxrInternal__aapl__pxrReserved__::PcpNodeRef_PrivateChildrenConstRange,"
            " Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216BC28B8(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2 == a1[4] && *a1 == a1[3])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    void v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::PcpNo"
            "deRef_PrivateChildrenConstRange>::operator++() [T = pxrInternal__aapl__pxrReserved__::PcpNodeRef_PrivateChil"
            "drenConstRange, Reverse = false]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    a1[1] = *(unsigned __int16 *)(a1[2] + 48 * v2 + 34);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpDump(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2@<X1>, unsigned int a3@<W2>, std::string *a4@<X8>)
{
  if (*(void *)this) {
    BOOL v5 = *((void *)this + 1) == -1;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    unsigned int v7 = a2;
    v12[0] = 0;
    v12[1] = 0;
    uint64_t v11 = (uint64_t *)v12;
    LODWORD(v9) = 0;
    sub_216BC60BC(&v11, (uint64_t *)this, &v9);
    v10[0] = 0;
    v10[1] = 0;
    unint64_t v9 = v10;
    pxrInternal__aapl__pxrReserved__::Pcp_Dump(this, (uint64_t)&v11, (uint64_t)&v9, v7, a3, a4);
    sub_216BC8234((uint64_t)&v9, v10[0]);
    sub_2167FB780((uint64_t)&v11, v12[0]);
  }
}

void sub_216BC2A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, char a12, void *a13)
{
}

void pxrInternal__aapl__pxrReserved__::PcpDump(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2@<X1>, unsigned int a3@<W2>, std::string *a4@<X8>)
{
  unsigned int v24 = a2;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(this);
  if (!v7 || v6 == -1)
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    v37[0] = 0;
    v37[1] = 0;
    uint64_t v36 = (uint64_t *)v37;
    v35[0] = 0;
    v35[1] = 0;
    int v34 = v35;
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)this, 6u, (uint64_t *)&v30);
    uint64_t v8 = v30;
    uint64_t v9 = v31;
    uint64_t v10 = v32;
    if (v30 != v32 || v31 != v33)
    {
      uint64_t v11 = 0;
      uint64_t v12 = ~v31 + v33;
      do
      {
        do
        {
          uint64_t v13 = v11;
          *(void *)&long long v27 = v8;
          *((void *)&v27 + 1) = v9 + v11;
          v38[0] = &v27;
          *((_DWORD *)sub_216BC81A8(&v36, &v27, (uint64_t)&unk_2174BFD90, v38) + 12) = v11;
          uint64_t v11 = v13 + 1;
        }
        while (v8 != v10);
      }
      while (v12 != v13);
    }
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPrimRange((uint64_t *)this, 6u, &v27);
    sub_216BC8294((uint64_t)&v30, &v27);
    while (!pxrInternal__aapl__pxrReserved__::PcpPrimIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v30, (const pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v32))
    {
      sub_216BC2D20((uint64_t)&v30, (uint64_t)&v27);
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v27);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v28, &v26);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v29);
      sub_21697C414(&v28);
      uint64_t v15 = *((void *)&v27 + 1);
      if (*((void *)&v27 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
      *(void *)&long long v27 = pxrInternal__aapl__pxrReserved__::PcpPrimIterator::GetNode(&v30);
      *((void *)&v27 + 1) = v16;
      v38[0] = &v27;
      size_t v17 = sub_216BC82D8((uint64_t **)&v34, &v27, (uint64_t)&unk_2174BFD90, v38);
      uint64_t v18 = v17;
      BOOL v19 = (void *)*((void *)v17 + 7);
      if ((unint64_t)v19 >= *((void *)v17 + 8))
      {
        BOOL v21 = sub_216A8E01C((atomic_uint ***)v17 + 6, &v26);
      }
      else
      {
        int v20 = v26;
        void *v19 = v26;
        if (v20) {
          atomic_fetch_add(v20, 1u);
        }
        BOOL v21 = (char *)(v19 + 1);
      }
      *((void *)v18 + 7) = v21;
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v26);
      sub_216BC2E20((uint64_t)&v30);
    }
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(this);
    unint64_t v30 = v22;
    uint64_t v31 = v23;
    pxrInternal__aapl__pxrReserved__::Pcp_Dump((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v30, (uint64_t)&v36, (uint64_t)&v34, v24, a3, a4);
    sub_216BC8234((uint64_t)&v34, v35[0]);
    sub_2167FB780((uint64_t)&v36, v37[0]);
  }
}

void sub_216BC2CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,char *a25)
{
  sub_216BC8234((uint64_t)&a24, a25);
  sub_2167FB780(v25 - 128, *(void **)(v25 - 120));
  _Unwind_Resume(a1);
}

uint64_t sub_216BC2D20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::PcpPrimIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)a1, (const pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)(a1 + 16)))
  {
    v6[0] = "tf/iterator.h";
    v6[1] = "operator*";
    _OWORD v6[2] = 271;
    void v6[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::pair<pxrInternal__aapl__pxrReserved__::PcpPrimIt"
            "erator, pxrInternal__aapl__pxrReserved__::PcpPrimIterator>>::operator*() [T = std::pair<pxrInternal__aapl__p"
            "xrReserved__::PcpPrimIterator, pxrInternal__aapl__pxrReserved__::PcpPrimIterator>, Reverse = false]";
    char v7 = 0;
    int v8 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v4);
  }
  return pxrInternal__aapl__pxrReserved__::PcpPrimIterator::dereference((uint64_t **)a1, a2);
}

uint64_t sub_216BC2DA8(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t sub_216BC2E20(uint64_t a1)
{
  if (pxrInternal__aapl__pxrReserved__::PcpPrimIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)a1, (const pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)(a1 + 16)))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    uint64_t v3[2] = 250;
    void v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::pair<pxrInternal__aapl__pxrReserve"
            "d__::PcpPrimIterator, pxrInternal__aapl__pxrReserved__::PcpPrimIterator>>::operator++() [T = std::pair<pxrIn"
            "ternal__aapl__pxrReserved__::PcpPrimIterator, pxrInternal__aapl__pxrReserved__::PcpPrimIterator>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::PcpPrimIterator::increment((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)a1);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::PcpNodeRef *pxrInternal__aapl__pxrReserved__::PcpDumpDotGraph(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2, const char *a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(this);
  v10[0] = v7;
  v10[1] = v8;
  return pxrInternal__aapl__pxrReserved__::PcpDumpDotGraph((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v10, a2, a3, a4);
}

pxrInternal__aapl__pxrReserved__::PcpNodeRef *pxrInternal__aapl__pxrReserved__::PcpDumpDotGraph(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, const char *a3, uint64_t a4)
{
  v16[19] = *MEMORY[0x263EF8340];
  if (*(void *)this) {
    BOOL v4 = *((void *)this + 1) == -1;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v8 = this;
    sub_21681B4C8(&v14);
    if ((v15[*(void *)(v14 - 24) + 24] & 5) != 0)
    {
      uint64_t v9 = "pcp/diagnostic.cpp";
      uint64_t v10 = "PcpDumpDotGraph";
      uint64_t v11 = 424;
      uint64_t v12 = "void pxrInternal__aapl__pxrReserved__::PcpDumpDotGraph(const PcpNodeRef &, const char *, BOOL, BOOL)";
      char v13 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 3, (pxrInternal__aapl__pxrReserved__ *)"Could not write to %s\n", (const char *)a2);
    }
    else
    {
      sub_216779180(&v14, (uint64_t)"digraph PcpPrimIndex {\n", 23);
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v9 = (char *)&v10;
      sub_216BC3130(&v14, v8, (uint64_t)a3, a4, (uint64_t)&v9, 0);
      sub_2167FB780((uint64_t)&v9, v10);
      sub_216779180(&v14, (uint64_t)"}\n", 2);
    }
    uint64_t v14 = *MEMORY[0x263F8C2B0];
    *(void *)&v15[*(void *)(v14 - 24) - 8] = *(void *)(MEMORY[0x263F8C2B0] + 24);
    MEMORY[0x21D447910](v15);
    std::ostream::~ostream();
    return (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)MEMORY[0x21D447E60](v16);
  }
  return this;
}

void sub_216BC30FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  BOOL v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_2167FB780((uint64_t)va, v5);
  sub_216AB4A88((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216BC3130(void *a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v159 = *MEMORY[0x263EF8340];
  if (*(void *)a2) {
    BOOL v7 = *((void *)a2 + 1) == -1;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    sub_216779180(a1, (uint64_t)"\t0 [label=\"...\",shape=box,style=dotted];\n", 41);
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs(a2))
  {
    LayerStacuint64_t k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a2);
    Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(a2);
    int HasPrimSpecs = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasPrimSpecs(LayerStack, Path);
  }
  else
  {
    int HasPrimSpecs = 0;
  }
  int v147 = 0;
  std::string::size_type v148 = 0;
  unint64_t v149 = 0;
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRestricted(a2))
  {
    sub_216779094(&__p, "permission denied");
    uint64_t v18 = v148;
    if ((unint64_t)v148 >= v149)
    {
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v148 - (char *)v147) >> 3);
      unint64_t v21 = v20 + 1;
      if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      if (0x5555555555555556 * ((uint64_t)(v149 - (void)v147) >> 3) > v21) {
        unint64_t v21 = 0x5555555555555556 * ((uint64_t)(v149 - (void)v147) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v149 - (void)v147) >> 3) >= 0x555555555555555) {
        unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v22 = v21;
      }
      *((void *)&v151 + 1) = &v149;
      if (v22) {
        uint64_t v23 = (char *)sub_216782ED8((uint64_t)&v149, v22);
      }
      else {
        uint64_t v23 = 0;
      }
      std::string::size_type v24 = (std::string::size_type)&v23[24 * v20];
      v150.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
      v150.__r_.__value_.__l.__size_ = v24;
      *(void *)&long long v151 = &v23[24 * v22];
      long long v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v24 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)std::string::size_type v24 = v25;
      memset(&__p, 0, sizeof(__p));
      v150.__r_.__value_.__r.__words[2] = v24 + 24;
      sub_216790CCC((uint64_t *)&v147, &v150);
      unint64_t v26 = v148;
      sub_216790E64((uint64_t)&v150);
      std::string::size_type v148 = v26;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v148->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
      std::string::size_type v148 = v18 + 1;
    }
  }
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert(a2))
  {
    sub_216779094(&__p, "inert");
    long long v27 = v148;
    if ((unint64_t)v148 >= v149)
    {
      unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (((char *)v148 - (char *)v147) >> 3);
      unint64_t v30 = v29 + 1;
      if (v29 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      if (0x5555555555555556 * ((uint64_t)(v149 - (void)v147) >> 3) > v30) {
        unint64_t v30 = 0x5555555555555556 * ((uint64_t)(v149 - (void)v147) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v149 - (void)v147) >> 3) >= 0x555555555555555) {
        unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v31 = v30;
      }
      *((void *)&v151 + 1) = &v149;
      if (v31) {
        uint64_t v32 = (char *)sub_216782ED8((uint64_t)&v149, v31);
      }
      else {
        uint64_t v32 = 0;
      }
      std::string::size_type v33 = (std::string::size_type)&v32[24 * v29];
      v150.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
      v150.__r_.__value_.__l.__size_ = v33;
      *(void *)&long long v151 = &v32[24 * v31];
      long long v34 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v33 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)std::string::size_type v33 = v34;
      memset(&__p, 0, sizeof(__p));
      v150.__r_.__value_.__r.__words[2] = v33 + 24;
      sub_216790CCC((uint64_t *)&v147, &v150);
      long long v35 = v148;
      sub_216790E64((uint64_t)&v150);
      std::string::size_type v148 = v35;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v28 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v148->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
      std::string::size_type v148 = v27 + 1;
    }
  }
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled(a2))
  {
    sub_216779094(&__p, "culled");
    uint64_t v36 = v148;
    if ((unint64_t)v148 >= v149)
    {
      unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (((char *)v148 - (char *)v147) >> 3);
      unint64_t v39 = v38 + 1;
      if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      if (0x5555555555555556 * ((uint64_t)(v149 - (void)v147) >> 3) > v39) {
        unint64_t v39 = 0x5555555555555556 * ((uint64_t)(v149 - (void)v147) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v149 - (void)v147) >> 3) >= 0x555555555555555) {
        unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v40 = v39;
      }
      *((void *)&v151 + 1) = &v149;
      if (v40) {
        char v41 = (char *)sub_216782ED8((uint64_t)&v149, v40);
      }
      else {
        char v41 = 0;
      }
      std::string::size_type v42 = (std::string::size_type)&v41[24 * v38];
      v150.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
      v150.__r_.__value_.__l.__size_ = v42;
      *(void *)&long long v151 = &v41[24 * v40];
      long long v43 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v42 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)std::string::size_type v42 = v43;
      memset(&__p, 0, sizeof(__p));
      v150.__r_.__value_.__r.__words[2] = v42 + 24;
      sub_216790CCC((uint64_t *)&v147, &v150);
      uint64_t v44 = v148;
      sub_216790E64((uint64_t)&v150);
      std::string::size_type v148 = v44;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v37 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v148->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
      std::string::size_type v148 = v36 + 1;
    }
  }
  memset(&__p, 0, sizeof(__p));
  if (v147 != v148)
  {
    pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", &v147, &v150);
    uint64_t v45 = std::string::insert(&v150, 0, "\\n");
    std::string::size_type v46 = v45->__r_.__value_.__r.__words[0];
    v158.__r_.__value_.__r.__words[0] = v45->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v158.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v45->__r_.__value_.__r.__words[1] + 7);
    char v47 = HIBYTE(v45->__r_.__value_.__r.__words[2]);
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = v46;
    __p.__r_.__value_.__l.__size_ = v158.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v158.__r_.__value_.__r.__words + 7);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v47;
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v150.__r_.__value_.__l.__data_);
    }
  }
  if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs(a2) & 1) == 0) {
    std::string::append(&__p, "\\nCANNOT contribute specs");
  }
  uint64_t NamespaceDepth = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth(a2);
  DepthBelowIntroductiouint64_t n = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction(a2, v49);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\\ndepth (below intro): %i (%i)", v51, v52, NamespaceDepth, DepthBelowIntroduction);
  if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v53 = &v150;
  }
  else {
    uint64_t v53 = (std::string *)v150.__r_.__value_.__r.__words[0];
  }
  if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v150.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v150.__r_.__value_.__l.__size_;
  }
  std::string::append(&__p, (const std::string::value_type *)v53, size);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v150.__r_.__value_.__l.__data_);
  }
  if (HasPrimSpecs) {
    std::string::size_type v55 = "solid";
  }
  else {
    std::string::size_type v55 = "dotted";
  }
  sub_216779094(&v158, v55);
  if (sub_216BC618C(a5, a2)) {
    std::string::append(&v158, ", filled");
  }
  sub_21677B834((uint64_t)&v150);
  BOOL v56 = pxrInternal__aapl__pxrReserved__::PcpIdentifierFormatBaseName(&v150);
  int v57 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a2);
  BOOL v58 = pxrInternal__aapl__pxrReserved__::operator<<(v56, v57);
  int v59 = sub_216779180(v58, (uint64_t)"\\n", 2);
  BOOL v60 = sub_216779180(v59, (uint64_t)"<", 1);
  size_t v61 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(a2);
  int v62 = pxrInternal__aapl__pxrReserved__::operator<<(v60, v61);
  sub_216779180(v62, (uint64_t)">", 1);
  std::stringbuf::str();
  v150.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2C8];
  *(std::string::size_type *)((char *)v150.__r_.__value_.__r.__words
                            + *(void *)(v150.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8]
                                                                                               + 24);
  v150.__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
  if (v156 < 0) {
    operator delete(v155);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x21D447E60](&v157);
  Uniqueuint64_t Identifier = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetUniqueIdentifier(a2);
  int v66 = &v144;
  if (v145 < 0) {
    int v66 = v144;
  }
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v68 = &v158;
  if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v68 = (std::string *)v158.__r_.__value_.__r.__words[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\t%zu [label=\"%s (%i)\\n%s\", shape=\"box\", style=\"%s\"];\n",
    v64,
    v65,
    UniqueIdentifier,
    v66,
    a6,
    p_p,
    v68);
  if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v69 = &v150;
  }
  else {
    uint64_t v69 = (std::string *)v150.__r_.__value_.__r.__words[0];
  }
  if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v70 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v70 = v150.__r_.__value_.__l.__size_;
  }
  sub_216779180(a1, (uint64_t)v69, v70);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v150.__r_.__value_.__l.__data_);
  }
  memset(&v143, 0, sizeof(v143));
  if (a4)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n", v71, v72);
    if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v73 = &v150;
    }
    else {
      uint64_t v73 = (std::string *)v150.__r_.__value_.__r.__words[0];
    }
    if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v74 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v74 = v150.__r_.__value_.__l.__size_;
    }
    std::string::append(&v143, (const std::string::value_type *)v73, v74);
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v150.__r_.__value_.__l.__data_);
    }
    MapToParent = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(a2);
    uint64_t v78 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v76, v77);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetString(v78, &v141);
    std::string::size_type v79 = std::string::insert(&v141, 0, "-- mapToParent:\n");
    long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    v142.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v80;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    long long v81 = std::string::append(&v142, "\n");
    long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
    v150.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v82;
    v81->__r_.__value_.__l.__size_ = 0;
    v81->__r_.__value_.__r.__words[2] = 0;
    v81->__r_.__value_.__r.__words[0] = 0;
    if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v83 = &v150;
    }
    else {
      char v83 = (std::string *)v150.__r_.__value_.__r.__words[0];
    }
    if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v84 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v84 = v150.__r_.__value_.__l.__size_;
    }
    std::string::append(&v143, (const std::string::value_type *)v83, v84);
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v150.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v142.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v141.__r_.__value_.__l.__data_);
    }
    if (*(void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(a2))
    {
      MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(a2);
      std::string::size_type v88 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v86, v87);
      if (!pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity(v88))
      {
        unsigned int v89 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(a2);
        std::string::size_type v92 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v89, v90, v91);
        pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetString(v92, &v141);
        uint64_t v93 = std::string::insert(&v141, 0, "-- mapToRoot:\n");
        long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
        v142.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v94;
        v93->__r_.__value_.__l.__size_ = 0;
        v93->__r_.__value_.__r.__words[2] = 0;
        v93->__r_.__value_.__r.__words[0] = 0;
        int v95 = std::string::append(&v142, "\n");
        long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
        v150.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v96;
        v95->__r_.__value_.__l.__size_ = 0;
        v95->__r_.__value_.__r.__words[2] = 0;
        v95->__r_.__value_.__r.__words[0] = 0;
        if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v97 = &v150;
        }
        else {
          char v97 = (std::string *)v150.__r_.__value_.__r.__words[0];
        }
        if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v98 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v98 = v150.__r_.__value_.__l.__size_;
        }
        std::string::append(&v143, (const std::string::value_type *)v97, v98);
        if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v150.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v142.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v141.__r_.__value_.__l.__data_);
        }
      }
    }
    sub_216779094(&v142, "\n");
    sub_216779094(&v141, "\\l");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)&v143.__r_.__value_.__l.__data_, (unsigned __int8 *)&v142, (unsigned __int8 *)&v141, &v150);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v143.__r_.__value_.__l.__data_);
    }
    std::string v143 = v150;
    *((unsigned char *)&v150.__r_.__value_.__s + 23) = 0;
    v150.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v141.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v142.__r_.__value_.__l.__data_);
    }
  }
  memset(&v142, 0, sizeof(v142));
  switch(pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a2))
  {
    case 1u:
      std::string::size_type v101 = &v143;
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v101 = (std::string *)v143.__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"color=green, label=\"inherit%s\"", v99, v100, v101);
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v102 = &v150;
      }
      else {
        uint64_t v102 = (std::string *)v150.__r_.__value_.__r.__words[0];
      }
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v103 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v103 = v150.__r_.__value_.__l.__size_;
      }
      goto LABEL_176;
    case 2u:
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"color=orange, label=\"variant\"", v99, v100);
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v102 = &v150;
      }
      else {
        uint64_t v102 = (std::string *)v150.__r_.__value_.__r.__words[0];
      }
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v103 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v103 = v150.__r_.__value_.__l.__size_;
      }
      goto LABEL_176;
    case 3u:
      uint64_t v105 = &v143;
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v105 = (std::string *)v143.__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"color=purple, label=\"relocate%s\"", v99, v100, v105);
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v102 = &v150;
      }
      else {
        uint64_t v102 = (std::string *)v150.__r_.__value_.__r.__words[0];
      }
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v103 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v103 = v150.__r_.__value_.__l.__size_;
      }
      goto LABEL_176;
    case 4u:
      std::string::size_type v106 = &v143;
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v106 = (std::string *)v143.__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"color=red, label=\"reference%s\"", v99, v100, v106);
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v102 = &v150;
      }
      else {
        uint64_t v102 = (std::string *)v150.__r_.__value_.__r.__words[0];
      }
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v103 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v103 = v150.__r_.__value_.__l.__size_;
      }
      goto LABEL_176;
    case 5u:
      unsigned int v104 = &v143;
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unsigned int v104 = (std::string *)v143.__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"color=indigo, label=\"payload%s\"", v99, v100, v104);
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v102 = &v150;
      }
      else {
        uint64_t v102 = (std::string *)v150.__r_.__value_.__r.__words[0];
      }
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v103 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v103 = v150.__r_.__value_.__l.__size_;
      }
      goto LABEL_176;
    case 6u:
      int v107 = &v143;
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v107 = (std::string *)v143.__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"color=sienna, label=\"specialize%s\"", v99, v100, v107);
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v102 = &v150;
      }
      else {
        uint64_t v102 = (std::string *)v150.__r_.__value_.__r.__words[0];
      }
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v103 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v103 = v150.__r_.__value_.__l.__size_;
      }
LABEL_176:
      std::string::append(&v142, (const std::string::value_type *)v102, v103);
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v150.__r_.__value_.__l.__data_);
      }
      break;
    case 7u:
      v150.__r_.__value_.__r.__words[0] = (std::string::size_type)"pcp/diagnostic.cpp";
      v150.__r_.__value_.__l.__size_ = (std::string::size_type)"_WriteGraph";
      v150.__r_.__value_.__r.__words[2] = 345;
      *(void *)&long long v151 = "int pxrInternal__aapl__pxrReserved__::_WriteGraph(std::ostream &, const PcpNodeRef &, BOOL, boo"
                         "l, const Pcp_NodeSet &, int)";
      BYTE8(v151) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v150, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid arc type");
      break;
    default:
      break;
  }
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(a2))
  {
    if (v108 != -1)
    {
      uint64_t OriginNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(a2);
      uint64_t v111 = v110;
      uint64_t ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2);
      if (v111 != v113 || OriginNode != ParentNode)
      {
        std::string::size_type v114 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
        if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v114 = v142.__r_.__value_.__l.__size_;
        }
        if (v114) {
          std::string::append(&v142, ", ");
        }
        std::string::append(&v142, "style=dashed");
      }
    }
  }
  if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2) || v115 == -1) {
    goto LABEL_199;
  }
  v141.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2);
  v141.__r_.__value_.__l.__size_ = v117;
  uint64_t v118 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetUniqueIdentifier((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v141);
  uint64_t v119 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetUniqueIdentifier(a2);
  uint64_t v122 = &v142;
  if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v122 = (std::string *)v142.__r_.__value_.__r.__words[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\t%zu -> %zu [%s];\n",
    v120,
    v121,
    v118,
    v119,
    v122);
  std::string::size_type v123 = (v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v150
       : (std::string *)v150.__r_.__value_.__r.__words[0];
  uint64_t v124 = (v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(v150.__r_.__value_.__r.__words[2])
       : v150.__r_.__value_.__l.__size_;
  sub_216779180(a1, (uint64_t)v123, v124);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v150.__r_.__value_.__l.__data_);
    if (a3)
    {
LABEL_200:
      if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(a2))
      {
        if (v115 != -1)
        {
          uint64_t v125 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(a2);
          uint64_t v127 = v126;
          uint64_t v128 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2);
          if (v127 != v115 || v125 != v128)
          {
            uint64_t v129 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetUniqueIdentifier(a2);
            v141.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(a2);
            v141.__r_.__value_.__l.__size_ = v130;
            uint64_t v131 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetUniqueIdentifier((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v141);
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\t%zu -> %zu [style=dotted label=\"origin\" constraint=\"false\"];\n",
              v132,
              v133,
              v129,
              v131);
            uint64_t v134 = (v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? &v150
                 : (std::string *)v150.__r_.__value_.__r.__words[0];
            uint64_t v135 = (v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? HIBYTE(v150.__r_.__value_.__r.__words[2])
                 : v150.__r_.__value_.__l.__size_;
            sub_216779180(a1, (uint64_t)v134, v135);
            if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v150.__r_.__value_.__l.__data_);
            }
          }
        }
      }
    }
  }
  else
  {
LABEL_199:
    if (a3) {
      goto LABEL_200;
    }
  }
  uint64_t v8 = (a6 + 1);
  uint64_t v136 = *((void *)a2 + 1);
  std::string::size_type v153 = *(void *)a2;
  uint64_t v154 = v136;
  std::string::size_type v137 = **(void **)(v153 + 16);
  std::string::size_type v138 = *(unsigned __int16 *)(v137 + 48 * v136 + 28);
  v150.__r_.__value_.__r.__words[0] = v153;
  v150.__r_.__value_.__l.__size_ = v138;
  v150.__r_.__value_.__r.__words[2] = v137;
  *(void *)&long long v151 = v153;
  *((void *)&v151 + 1) = 0xFFFFLL;
  std::string::size_type v152 = v137;
  while (*(_OWORD *)&v150.__r_.__value_.__l.__data_ != v151)
  {
    v139 = sub_216BC2828(&v150, v115, v116);
    uint64_t v8 = sub_216BC3130(a1, v139, a3, a4, a5, v8);
    sub_216BC28B8(&v150);
  }
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v142.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v143.__r_.__value_.__l.__data_);
  }
  if (v145 < 0) {
    operator delete(v144);
  }
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v158.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v150.__r_.__value_.__r.__words[0] = (std::string::size_type)&v147;
  sub_216782F20((void ***)&v150);
  return v8;
}

void sub_216BC4018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (*(char *)(v53 - 105) < 0) {
    operator delete(*(void **)(v53 - 128));
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  a39 = &a45;
  sub_216782F20((void ***)&a39);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_FormatSite(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::PcpSite *a2)
{
  sub_21677B834((uint64_t)v5);
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::PcpIdentifierFormatBaseName(v5);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, (uint64_t *)this);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v5[1] = MEMORY[0x263F8C318] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v7);
}

void sub_216BC4384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_FormatSite(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *a2)
{
  sub_21677B834((uint64_t)v5);
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::PcpIdentifierFormatBaseName(v5);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, (uint64_t *)this);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v5[1] = MEMORY[0x263F8C318] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v7);
}

void sub_216BC44D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::Pcp_IndexingOutputManager(pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager *this)
{
  uint64_t v1 = (_OWORD *)((char *)this + 528);
  for (uint64_t i = 536; i != 584; i += 24)
    *(void *)((char *)this + i) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 20sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 44sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 36sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 28sub_2168EBBB8(&a9, 0) = 0u;
  __dmb(0xBu);
  *(void *)this = 0;
  __dmb(0xBu);
  *((void *)this + 65) = 0;
  _OWORD *v1 = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((void *)this + 1) = v1;
  __dmb(0xBu);
  *(void *)this = 1;
  return result;
}

{
  _OWORD *v1;
  uint64_t i;
  double result;

  uint64_t v1 = (_OWORD *)((char *)this + 528);
  for (uint64_t i = 536; i != 584; i += 24)
    *(void *)((char *)this + i) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 20sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 44sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 36sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 28sub_2168EBBB8(&a9, 0) = 0u;
  __dmb(0xBu);
  *(void *)this = 0;
  __dmb(0xBu);
  *((void *)this + 65) = 0;
  _OWORD *v1 = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((void *)this + 1) = v1;
  __dmb(0xBu);
  *(void *)this = 1;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::PushIndex(pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a3, const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *a4)
{
  size_t v17 = a3;
  char v6 = (uint64_t *)sub_216BC4774((uint64_t *)this, (uint64_t)a2);
  sub_216BC47E4(v6);
  unint64_t v7 = v6[1];
  if (v7 >= v6[2])
  {
    uint64_t v9 = sub_216BC8368(v6, &v17, (_DWORD *)a4 + 2);
  }
  else
  {
    *(void *)unint64_t v7 = a3;
    sub_216981010((_DWORD *)(v7 + 8), (_DWORD *)a4 + 2);
    sub_21698105C((_DWORD *)(v7 + 12), (_DWORD *)a4 + 3);
    *(_OWORD *)(v7 + 73) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    uint64_t v9 = v7 + 96;
  }
  v6[1] = v9;
  pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)v14, a4, v8);
  if (v15 >= 0) {
    uint64_t v12 = v14;
  }
  else {
    uint64_t v12 = (void **)v14[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Computing prim index for %s", v10, v11, v12);
  v13[0] = 0;
  v13[1] = -1;
  sub_216BC4834(v6, &__p, v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
}

void sub_216BC4740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216BC4774(uint64_t *a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v4 = 0;
  char v5 = 0;
  uint64_t v6 = 0;
  sub_216BC61F8(a1, (uint64_t)&v4, &v7);
  uint64_t v2 = v6 + 24;
  uint64_t v6 = 0;
  sub_21685C048(&v4);
  return v2;
}

void sub_216BC47CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  a12 = 0;
  sub_21685C048(&a10);
  _Unwind_Resume(a1);
}

void sub_216BC47E4(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 != v1)
  {
    if (*(unsigned char *)(v1 - 8))
    {
      sub_216BC6C60(a1);
      sub_216782F74((uint64_t *)(*(void *)(a1[1] - 24) - 24));
      *(unsigned char *)(a1[1] - 8) = 0;
    }
  }
}

void sub_216BC4834(uint64_t *a1, std::string *a2, void *a3)
{
  if (*a1 != a1[1]
    || (v8[0] = "pcp/diagnostic.cpp",
        v8[1] = "BeginPhase",
        v8[2] = 496,
        void v8[3] = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::BeginPhase(std::string &&,"
                " const PcpNodeRef &)",
        char v9 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v8, "!indexStack.empty()", 0) & 1) != 0))
  {
    sub_216BC7050(a1, a2);
    sub_216BC47E4(a1);
    sub_216BC73B0((uint64_t *)(a1[1] - 32), (long long *)a2);
    if (*a3)
    {
      if (a3[1] != -1)
      {
        uint64_t v6 = *(uint64_t ***)(a1[1] - 24);
        uint64_t v7 = *(v6 - 5);
        v6 -= 5;
        sub_2167FB780((uint64_t)(v6 - 1), v7);
        *(v6 - 1) = (uint64_t *)v6;
        *uint64_t v6 = 0;
        v6[1] = 0;
        sub_216BC77D4(v6 - 1, a3, a3);
        sub_216BC4BC0(a1);
      }
    }
    sub_216BC4E54((std::string::size_type *)a1);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::PopIndex(pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2)
{
  uint64_t v4 = (std::string::size_type *)sub_216BC4774((uint64_t *)this, (uint64_t)a2);
  std::string::size_type v5 = v4[1];
  if (*v4 == v5)
  {
    unint64_t v26 = "pcp/diagnostic.cpp";
    long long v27 = "PopIndex";
    uint64_t v28 = 797;
    unint64_t v29 = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::PopIndex(const PcpPrimIndex *)";
    LOBYTE(v3sub_2168EBBB8(&a9, 0) = 0;
    uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "!info->indexStack.empty()", 0);
    if (!result) {
      return result;
    }
    std::string::size_type v5 = v4[1];
  }
  if (*(void *)(v5 - 32) == *(void *)(v5 - 24))
  {
    __p[0] = "pcp/diagnostic.cpp";
    __p[1] = "PopIndex";
    uint64_t v23 = 798;
    std::string::size_type v24 = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::PopIndex(const PcpPrimIndex *)";
    char v25 = 0;
    uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!info->indexStack.back().phases.empty()", 0);
    if (!result) {
      return result;
    }
    std::string::size_type v5 = v4[1];
  }
  uint64_t v6 = *(void *)(v5 - 24);
  std::operator+<char>();
  unint64_t v7 = *(void *)(v6 - 16);
  unint64_t v8 = *(void *)(v6 - 8);
  if (v7 >= v8)
  {
    uint64_t v10 = *(void *)(v6 - 24);
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v10) >> 3);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v10) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x555555555555555) {
      unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v14 = v12;
    }
    uint64_t v30 = v6 - 8;
    if (v14) {
      char v15 = (char *)sub_216782ED8(v6 - 8, v14);
    }
    else {
      char v15 = 0;
    }
    uint64_t v16 = &v15[24 * v11];
    unint64_t v26 = v15;
    long long v27 = v16;
    unint64_t v29 = &v15[24 * v14];
    long long v17 = *(_OWORD *)__p;
    *((void *)v16 + 2) = v23;
    *(_OWORD *)uint64_t v16 = v17;
    __p[1] = 0;
    uint64_t v23 = 0;
    __p[0] = 0;
    uint64_t v28 = (uint64_t)(v16 + 24);
    sub_216790CCC((uint64_t *)(v6 - 24), &v26);
    uint64_t v18 = *(void *)(v6 - 16);
    sub_216790E64((uint64_t)&v26);
    int v19 = SHIBYTE(v23);
    *(void *)(v6 - 16) = v18;
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v9 = *(_OWORD *)__p;
    *(void *)(v7 + 16) = v23;
    *(_OWORD *)unint64_t v7 = v9;
    *(void *)(v6 - 16) = v7 + 24;
  }
  sub_216BC4BC0(v4);
  sub_216BC4E54(v4);
  sub_216BC546C((uint64_t *)v4);
  uint64_t v20 = v4[1] - 96;
  uint64_t result = (uint64_t)sub_216BC6AD4((uint64_t)(v4 + 2), v20);
  v4[1] = v20;
  if (*v4 == v20)
  {
    sub_216BC558C((uint64_t)v4);
    unint64_t v26 = (char *)a2;
    return sub_216BC7B78((uint64_t *)this, &v26);
  }
  return result;
}

void sub_216BC4B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216BC4BC0(void *a1)
{
  uint64_t result = sub_216BBBDFC(3);
  if (result)
  {
    uint64_t v3 = a1[1];
    if (*a1 == v3)
    {
      v11[0] = "pcp/diagnostic.cpp";
      v11[1] = "UpdateCurrentDotGraph";
      uint64_t v12 = 631;
      unint64_t v13 = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::UpdateCurrentDotGraph()";
      char v14 = 0;
      uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v11, "!indexStack.empty()", 0);
      if (!result) {
        return result;
      }
      uint64_t v3 = a1[1];
    }
    if (*(void *)(v3 - 32) == *(void *)(v3 - 24))
    {
      *(void *)&long long v18 = "pcp/diagnostic.cpp";
      *((void *)&v18 + 1) = "UpdateCurrentDotGraph";
      uint64_t v19 = 632;
      uint64_t v20 = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::UpdateCurrentDotGraph()";
      char v21 = 0;
      uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v18, "!indexStack.back().phases.empty()", 0);
      if (!result) {
        return result;
      }
      uint64_t v3 = a1[1];
    }
    uint64_t v4 = *(void *)(v3 - 24);
    sub_216778A5C((uint64_t)v11);
    BOOL v5 = sub_216BBBDFC(4);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(*(pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)(v3 - 96));
    *(void *)&long long v18 = v6;
    *((void *)&v18 + 1) = v7;
    sub_216BC3130(&v12, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v18, 1, v5, v4 - 48, 0);
    std::stringbuf::str();
    unint64_t v8 = (void **)(v3 - 80);
    if (*(char *)(v3 - 57) < 0) {
      operator delete(*v8);
    }
    long long v9 = v18;
    *(void *)(v3 - 64) = v19;
    *(_OWORD *)unint64_t v8 = v9;
    *(unsigned char *)(v3 - 8) = 1;
    v11[0] = *MEMORY[0x263F8C2B8];
    uint64_t v10 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v12 = v10;
    unint64_t v13 = (const char *)(MEMORY[0x263F8C318] + 16);
    if (v16 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x21D447E60](&v17);
  }
  return result;
}

void sub_216BC4E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216BC4E54(std::string::size_type *a1)
{
  if (sub_216BBBDFC(3))
  {
    std::string::size_type v2 = a1[1];
    if (*a1 == v2)
    {
      v52.__r_.__value_.__r.__words[0] = (std::string::size_type)"pcp/diagnostic.cpp";
      v52.__r_.__value_.__l.__size_ = (std::string::size_type)"UpdateCurrentDotGraphLabel";
      v52.__r_.__value_.__r.__words[2] = 662;
      uint64_t v53 = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::UpdateCurrentDotGraphLabel()";
      char v54 = 0;
      if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v52, "!indexStack.empty()", 0))return; {
      std::string::size_type v2 = a1[1];
      }
    }
    if (*(void *)(v2 - 32) == *(void *)(v2 - 24))
    {
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)"pcp/diagnostic.cpp";
      v49.__r_.__value_.__l.__size_ = (std::string::size_type)"UpdateCurrentDotGraphLabel";
      v49.__r_.__value_.__r.__words[2] = 663;
      uint64_t v50 = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::UpdateCurrentDotGraphLabel()";
      char v51 = 0;
      if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v49, "!indexStack.back().phases.empty()", 0))return; {
      std::string::size_type v2 = a1[1];
      }
    }
    uint64_t v3 = *(void *)(v2 - 24);
    uint64_t v4 = (uint64_t *)(v3 - 72);
    sub_216779094(v47, "\n<table cellborder=\"0\" border=\"0\">\n<tr><td balign=\"left\" align=\"left\">\n%s\n</td></tr>\n<tr><td bgcolor=\"black\" height=\"1\" cellpadding=\"0\">\n</td></tr>\n<tr><td balign=\"left\" align=\"left\">\nTasks:<br/>\n%s\n</td></tr>\n</table>");
    std::string::size_type v7 = *a1;
    std::string::size_type v8 = a1[1];
    if (*a1 == v8)
    {
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v9 = 0;
      do
      {
        v9 -= 0x71C71C71C71C71C7 * ((uint64_t)(*(void *)(v7 + 72) - *(void *)(v7 + 64)) >> 3);
        v7 += 96;
      }
      while (v7 != v8);
    }
    if (*(char *)(v3 - 49) < 0) {
      uint64_t v10 = *v4;
    }
    else {
      uint64_t v10 = v3 - 72;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%d. %s\n", v5, v6, v9, v10);
    uint64_t v13 = (v9 - 1);
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)(v3 - 24);
    while (v45.__r_.__value_.__r.__words[0] != v45.__r_.__value_.__l.__size_)
    {
      sub_2168E5C08((uint64_t *)&v45, v11, v12);
      std::operator+<char>();
      char v14 = std::string::append(&v49, "\n");
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v16 = &v52;
      }
      else {
        char v16 = (std::string *)v52.__r_.__value_.__r.__words[0];
      }
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v52.__r_.__value_.__l.__size_;
      }
      std::string::append(&v46, (const std::string::value_type *)v16, size);
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v52.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      sub_2168E5E20(&v45);
    }
    pxrInternal__aapl__pxrReserved__::TfGetXmlEscapedString((unsigned __int8 *)&v46, (uint64_t)&v49);
    sub_216779094(&v45, "\n");
    sub_216779094(__p, "<br/>\n");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)&v49.__r_.__value_.__l.__data_, (unsigned __int8 *)&v45, (unsigned __int8 *)__p, &v52);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    std::string v46 = v52;
    *((unsigned char *)&v52.__r_.__value_.__s + 23) = 0;
    v52.__r_.__value_.__s.__data_[0] = 0;
    if ((char)v44 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    memset(&v45, 0, sizeof(v45));
    std::string::size_type v20 = *a1;
    v52.__r_.__value_.__r.__words[0] = a1[1];
    v52.__r_.__value_.__l.__size_ = v52.__r_.__value_.__r.__words[0];
    v52.__r_.__value_.__r.__words[2] = v20;
    uint64_t v53 = (const char *)v20;
    int v21 = 5;
    while ((const char *)v52.__r_.__value_.__l.__size_ != v53 && v21 != 0)
    {
      uint64_t v25 = *(void *)(sub_216BC78EC((uint64_t)&v52, v18, v19) + 8);
      v49.__r_.__value_.__r.__words[0] = *(void *)(v25 - 24);
      v49.__r_.__value_.__l.__size_ = v49.__r_.__value_.__r.__words[0];
      v49.__r_.__value_.__r.__words[2] = *(void *)(v25 - 32);
      uint64_t v50 = (const char *)v49.__r_.__value_.__r.__words[2];
      while ((const char *)v49.__r_.__value_.__l.__size_ != v50)
      {
        if ((uint64_t *)sub_216BC796C((uint64_t)&v49, v23, v24) != v4)
        {
          uint64_t v30 = *(void *)(sub_216BC79F0((uint64_t)&v49, v26, v27) + 8);
          unint64_t v31 = (void *)(v30 - 72);
          if (*(char *)(v30 - 49) < 0) {
            unint64_t v31 = (void *)*v31;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%d. %s\n", v28, v29, v13, v31);
          if ((v44 & 0x80u) == 0) {
            uint64_t v32 = __p;
          }
          else {
            uint64_t v32 = (void **)__p[0];
          }
          if ((v44 & 0x80u) == 0) {
            std::string::size_type v33 = v44;
          }
          else {
            std::string::size_type v33 = (std::string::size_type)__p[1];
          }
          std::string::append(&v45, (const std::string::value_type *)v32, v33);
          if ((char)v44 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v13 = (v13 - 1);
          if (!--v21) {
            break;
          }
        }
        sub_216BC7A70((uint64_t)&v49);
      }
      sub_216BC7AF4((uint64_t)&v52);
    }
    pxrInternal__aapl__pxrReserved__::TfGetXmlEscapedString((unsigned __int8 *)&v45, (uint64_t)&v49);
    sub_216779094(__p, "\n");
    sub_216779094(v41, "<br/>\n");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)&v49.__r_.__value_.__l.__data_, (unsigned __int8 *)__p, (unsigned __int8 *)v41, &v52);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    std::string v45 = v52;
    *((unsigned char *)&v52.__r_.__value_.__s + 23) = 0;
    v52.__r_.__value_.__s.__data_[0] = 0;
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    if ((char)v44 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if (v48 >= 0) {
      uint64_t v36 = v47;
    }
    else {
      uint64_t v36 = (void **)v47[0];
    }
    long long v37 = &v46;
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v37 = (std::string *)v46.__r_.__value_.__r.__words[0];
    }
    unint64_t v38 = &v45;
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v38 = (std::string *)v45.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)v36, v34, v35, v37, v38);
    unint64_t v39 = (void **)(v2 - 56);
    if (*(char *)(v2 - 33) < 0) {
      operator delete(*v39);
    }
    long long v40 = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    *(void *)(v2 - 4sub_2168EBBB8(&a9, 0) = *((void *)&v52.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v39 = v40;
    *(unsigned char *)(v2 - 8) = 1;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (v48 < 0) {
      operator delete(v47[0]);
    }
  }
}

void sub_216BC534C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BC546C(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  if (*a1 == v2)
  {
    v7[0] = "pcp/diagnostic.cpp";
    v7[1] = "EndPhase";
    void v7[2] = 512;
    void v7[3] = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::EndPhase()";
    char v8 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "!indexStack.empty()", 0)) {
      return;
    }
    uint64_t v2 = a1[1];
  }
  if (*(void *)(v2 - 32) != *(void *)(v2 - 24)
    || (v5[0] = "pcp/diagnostic.cpp",
        v5[1] = "EndPhase",
        uint64_t v5[2] = 513,
        uint64_t v5[3] = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::EndPhase()",
        char v6 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "!indexStack.back().phases.empty()", 0) & 1) != 0))
  {
    sub_216BC47E4(a1);
    uint64_t v3 = a1[1];
    uint64_t v4 = *(void *)(v3 - 24) - 72;
    sub_216BC6BD8(v3 - 16, v4);
    *(void *)(v3 - 24) = v4;
    if (*(void *)(a1[1] - 32) != *(void *)(a1[1] - 24))
    {
      sub_216BC4BC0(a1);
      sub_216BC4E54((std::string::size_type *)a1);
      *(unsigned char *)(a1[1] - 8) = 0;
    }
  }
}

void sub_216BC558C(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798C5A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798C5A0))
  {
    __cxa_atexit(MEMORY[0x263F8C118], &stru_26798C560, &dword_216758000);
    __cxa_guard_release(&qword_26798C5A0);
  }
  std::mutex::lock(&stru_26798C560);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  while (v3 != v2)
  {
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg(v3);
    v3 += 24;
  }

  std::mutex::unlock(&stru_26798C560);
}

void sub_216BC5640(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::BeginPhase(uint64_t *a1, uint64_t a2, std::string *a3, void *a4)
{
  char v6 = (uint64_t *)sub_216BC4774(a1, a2);

  sub_216BC4834(v6, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::EndPhase(pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2)
{
  uint64_t v2 = (uint64_t *)sub_216BC4774((uint64_t *)this, (uint64_t)a2);

  sub_216BC546C(v2);
}

void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::Update(uint64_t *a1, uint64_t a2, long long *a3, const std::string *a4)
{
  char v6 = (uint64_t *)sub_216BC4774(a1, a2);

  sub_216BC5700(v6, a3, a4);
}

void sub_216BC5700(uint64_t *a1, long long *a2, const std::string *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[1];
  if (*a1 == v6)
  {
    *(void *)&long long v22 = "pcp/diagnostic.cpp";
    *((void *)&v22 + 1) = "Update";
    uint64_t v23 = 530;
    std::string::size_type v24 = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::Update(const PcpNodeRef &, std::string &&)";
    LOBYTE(v25) = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v22, "!indexStack.empty()", 0))return; {
    uint64_t v6 = a1[1];
    }
  }
  if (*(void *)(v6 - 32) != *(void *)(v6 - 24)
    || (v20[0] = "pcp/diagnostic.cpp",
        v20[1] = "Update",
        _OWORD v20[2] = 531,
        v20[3] = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::Update(const PcpNodeRef &"
                 ", std::string &&)",
        char v21 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v20, "!indexStack.back().phases.empty()", 0) & 1) != 0))
  {
    sub_216BC7050(a1, a3);
    sub_216BC47E4(a1);
    uint64_t v7 = *(void *)(a1[1] - 24);
    unint64_t v8 = *(void *)(v7 - 16);
    unint64_t v9 = *(void *)(v7 - 8);
    if (v8 >= v9)
    {
      uint64_t v12 = *(void *)(v7 - 24);
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v12) >> 3);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v12) >> 3);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x555555555555555) {
        unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v16 = v14;
      }
      uint64_t v25 = v7 - 8;
      if (v16) {
        uint64_t v17 = (char *)sub_216782ED8(v7 - 8, v16);
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = &v17[24 * v13];
      *(void *)&long long v22 = v17;
      *((void *)&v22 + 1) = v18;
      std::string::size_type v24 = &v17[24 * v16];
      long long v19 = *(_OWORD *)&a3->__r_.__value_.__l.__data_;
      *((void *)v18 + 2) = *((void *)&a3->__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v18 = v19;
      a3->__r_.__value_.__l.__size_ = 0;
      a3->__r_.__value_.__r.__words[2] = 0;
      a3->__r_.__value_.__r.__words[0] = 0;
      uint64_t v23 = (uint64_t)(v18 + 24);
      sub_216790CCC((uint64_t *)(v7 - 24), &v22);
      unint64_t v11 = *(void *)(v7 - 16);
      sub_216790E64((uint64_t)&v22);
    }
    else
    {
      long long v10 = *(_OWORD *)&a3->__r_.__value_.__l.__data_;
      *(void *)(v8 + 16) = *((void *)&a3->__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v8 = v10;
      a3->__r_.__value_.__l.__size_ = 0;
      a3->__r_.__value_.__r.__words[2] = 0;
      a3->__r_.__value_.__r.__words[0] = 0;
      unint64_t v11 = v8 + 24;
      *(void *)(v7 - 16) = v8 + 24;
    }
    *(void *)(v7 - 16) = v11;
    long long v22 = *a2;
    sub_216BC7D0C((uint64_t **)(v7 - 48), &v22, &v23);
    sub_216BC4BC0(a1);
    sub_216BC4E54((std::string::size_type *)a1);
    sub_216BC47E4(a1);
  }
}

void sub_216BC5960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216790E64((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::Msg(uint64_t *a1, uint64_t a2, const std::string *a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t *)sub_216BC4774(a1, a2);

  sub_216BC59BC(v6, a3, a4);
}

void sub_216BC59BC(uint64_t *a1, const std::string *a2, uint64_t a3)
{
  uint64_t v6 = a1[1];
  if (*a1 == v6)
  {
    unint64_t v29 = "pcp/diagnostic.cpp";
    uint64_t v30 = "Msg";
    uint64_t v31 = 548;
    uint64_t v32 = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::Msg(std::string &&, const Pcp_NodeSet &)";
    LOBYTE(v33) = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v29, "!indexStack.empty()", 0))return; {
    uint64_t v6 = a1[1];
    }
  }
  if (*(void *)(v6 - 32) != *(void *)(v6 - 24)
    || (v27[0] = "pcp/diagnostic.cpp",
        v27[1] = "Msg",
        v27[2] = 549,
        v27[3] = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::Msg(std::string &&, const Pcp_NodeSet &)",
        char v28 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v27, "!indexStack.back().phases.empty()", 0) & 1) != 0))
  {
    sub_216BC7050(a1, a2);
    uint64_t v7 = *(void *)(a1[1] - 24);
    if (*(void *)(v7 - 32) == *(void *)(a3 + 16))
    {
      unint64_t v8 = *(void **)(v7 - 48);
      if (v8 == (void *)(v7 - 40))
      {
LABEL_26:
        unint64_t v15 = *(void *)(v7 - 8);
        unint64_t v16 = *(void *)(v7 - 16);
        if (v16 >= v15)
        {
          uint64_t v19 = *(void *)(v7 - 24);
          unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v19) >> 3);
          unint64_t v21 = v20 + 1;
          if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v19) >> 3);
          if (2 * v22 > v21) {
            unint64_t v21 = 2 * v22;
          }
          if (v22 >= 0x555555555555555) {
            unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v23 = v21;
          }
          uint64_t v33 = v7 - 8;
          if (v23) {
            std::string::size_type v24 = (char *)sub_216782ED8(v7 - 8, v23);
          }
          else {
            std::string::size_type v24 = 0;
          }
          uint64_t v25 = &v24[24 * v20];
          unint64_t v29 = v24;
          uint64_t v30 = v25;
          uint64_t v32 = &v24[24 * v23];
          long long v26 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
          *((void *)v25 + 2) = *((void *)&a2->__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v25 = v26;
          a2->__r_.__value_.__l.__size_ = 0;
          a2->__r_.__value_.__r.__words[2] = 0;
          a2->__r_.__value_.__r.__words[0] = 0;
          uint64_t v31 = (uint64_t)(v25 + 24);
          sub_216790CCC((uint64_t *)(v7 - 24), &v29);
          unint64_t v18 = *(void *)(v7 - 16);
          sub_216790E64((uint64_t)&v29);
        }
        else
        {
          long long v17 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
          *(void *)(v16 + 16) = *((void *)&a2->__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v16 = v17;
          a2->__r_.__value_.__l.__size_ = 0;
          a2->__r_.__value_.__r.__words[2] = 0;
          a2->__r_.__value_.__r.__words[0] = 0;
          unint64_t v18 = v16 + 24;
          *(void *)(v7 - 16) = v16 + 24;
        }
        *(void *)(v7 - 16) = v18;
        sub_216BC4E54((std::string::size_type *)a1);
        return;
      }
      unint64_t v9 = *(void **)a3;
      while (1)
      {
        BOOL v10 = v8[5] == v9[5] && v8[4] == v9[4];
        if (!v10) {
          break;
        }
        unint64_t v11 = (void *)v8[1];
        uint64_t v12 = v8;
        if (v11)
        {
          do
          {
            unint64_t v8 = v11;
            unint64_t v11 = (void *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            unint64_t v8 = (void *)v12[2];
            BOOL v10 = *v8 == (void)v12;
            uint64_t v12 = v8;
          }
          while (!v10);
        }
        unint64_t v13 = (void *)v9[1];
        if (v13)
        {
          do
          {
            unint64_t v14 = v13;
            unint64_t v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            unint64_t v14 = (void *)v9[2];
            BOOL v10 = *v14 == (void)v9;
            unint64_t v9 = v14;
          }
          while (!v10);
        }
        unint64_t v9 = v14;
        if (v8 == (void *)(v7 - 40)) {
          goto LABEL_26;
        }
      }
    }
    sub_216BC47E4(a1);
    if (v7 - 48 != a3) {
      sub_216BC7E90((uint64_t **)(v7 - 48), *(void **)a3, (void *)(a3 + 8));
    }
    sub_216BC4BC0(a1);
    goto LABEL_26;
  }
}

void sub_216BC5C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216790E64((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexingDebug::_PushIndex(const pxrInternal__aapl__pxrReserved__::PcpPrimIndex **this, const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager *)atomic_load((unint64_t *)&qword_267B91358);
  if (!v4) {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager *)sub_216BC8768(&qword_267B91358);
  }
  uint64_t v6 = *this;
  BOOL v5 = this[1];

  pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::PushIndex(v4, v5, v6, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexingDebug::_PopIndex(pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexingDebug *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager *)atomic_load((unint64_t *)&qword_267B91358);
  if (!v2) {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager *)sub_216BC8768(&qword_267B91358);
  }
  uint64_t v3 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)*((void *)this + 1);

  return pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::PopIndex(v2, v3);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(uint64_t *a1, uint64_t a2, void *a3, std::string *a4)
{
  *a1 = a2;
  uint64_t v7 = (uint64_t *)atomic_load((unint64_t *)&qword_267B91358);
  if (!v7) {
    uint64_t v7 = (uint64_t *)sub_216BC8768(&qword_267B91358);
  }
  unint64_t v8 = (uint64_t *)sub_216BC4774(v7, *a1);
  sub_216BC4834(v8, a4, a3);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope(pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *this)
{
  uint64_t v2 = (uint64_t *)atomic_load((unint64_t *)&qword_267B91358);
  if (!v2) {
    uint64_t v2 = (uint64_t *)sub_216BC8768(&qword_267B91358);
  }
  uint64_t v3 = (uint64_t *)sub_216BC4774(v2, *(void *)this);

  sub_216BC546C(v3);
}

void pxrInternal__aapl__pxrReserved__::Pcp_IndexingUpdate(uint64_t a1, long long *a2, const std::string *a3)
{
  uint64_t v6 = (uint64_t *)atomic_load((unint64_t *)&qword_267B91358);
  if (!v6) {
    uint64_t v6 = (uint64_t *)sub_216BC8768(&qword_267B91358);
  }
  uint64_t v7 = (uint64_t *)sub_216BC4774(v6, a1);

  sub_216BC5700(v7, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3, const char *a4, ...)
{
  va_start(va, a4);
  uint64_t v13 = *MEMORY[0x263EF8340];
  va_copy(v11, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, a3, va, (char *)a3);
  long long v12 = *(_OWORD *)a2;
  sub_216BC89A8((uint64_t)v8, &v12, 1);
  uint64_t v6 = (uint64_t *)atomic_load((unint64_t *)&qword_267B91358);
  if (!v6) {
    uint64_t v6 = (uint64_t *)sub_216BC8768(&qword_267B91358);
  }
  uint64_t v7 = (uint64_t *)sub_216BC4774(v6, (uint64_t)this);
  sub_216BC59BC(v7, &__p, (uint64_t)v8);
  sub_2167FB780((uint64_t)v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216BC5F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a4, const char *a5, ...)
{
  va_start(va, a5);
  uint64_t v16 = *MEMORY[0x263EF8340];
  va_copy(v14, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, a4, va, (char *)a3);
  long long v8 = *(_OWORD *)a3;
  v15[0] = *(_OWORD *)a2;
  v15[1] = v8;
  sub_216BC89A8((uint64_t)v11, v15, 2);
  unint64_t v9 = (uint64_t *)atomic_load((unint64_t *)&qword_267B91358);
  if (!v9) {
    unint64_t v9 = (uint64_t *)sub_216BC8768(&qword_267B91358);
  }
  BOOL v10 = (uint64_t *)sub_216BC4774(v9, (uint64_t)this);
  sub_216BC59BC(v10, &__p, (uint64_t)v11);
  sub_2167FB780((uint64_t)v11, v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216BC6084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_216BC60BC(uint64_t **a1, uint64_t *a2, _DWORD *a3)
{
  int v6 = (*a3)++;
  unint64_t v15 = a2;
  uint64_t result = sub_216BC81A8(a1, a2, (uint64_t)&unk_2174BFD90, &v15);
  result[12] = v6;
  uint64_t v10 = a2[1];
  uint64_t v21 = *a2;
  uint64_t v22 = v10;
  uint64_t v11 = **(void **)(v21 + 16);
  uint64_t v12 = *(unsigned __int16 *)(v11 + 48 * v10 + 28);
  unint64_t v15 = (_OWORD *)v21;
  uint64_t v16 = v12;
  uint64_t v17 = v11;
  unint64_t v18 = (_OWORD *)v21;
  uint64_t v13 = 0xFFFFLL;
  uint64_t v19 = 0xFFFFLL;
  uint64_t v20 = v11;
  while (v12 != v13 || v15 != v18)
  {
    va_list v14 = sub_216BC2828(&v15, v8, v9);
    sub_216BC60BC(a1, v14, a3);
    uint64_t result = sub_216BC28B8(&v15);
    uint64_t v12 = v16;
    uint64_t v13 = v19;
  }
  return result;
}

uint64_t sub_216BC618C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = 1;
    do
    {
      if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(a2, v2 + 4))
      {
        if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(v2 + 4, a2)) {
          return v4;
        }
        ++v2;
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t sub_216BC61F8(uint64_t *a1, uint64_t a2, void *a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_216BC6278(a1, 1, a3, 0, a2, 1, (uint64_t (*)(uint64_t, void *, uint64_t))sub_216BC6570, 0);
}

uint64_t sub_216BC6278(uint64_t *a1, int a2, void *a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, void *, uint64_t), void *a8)
{
  unint64_t v29 = 0;
  uint64_t v13 = *a3 ^ (*a3 >> 3);
  uint64_t v14 = *a1;
  __dmb(0xBu);
  uint64_t v28 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_216BC67D8((uint64_t)&v31, (uint64_t)a1, v14 & v13, 0);
    unint64_t v15 = (void *)(v33 + 16);
    do
      unint64_t v15 = (void *)*v15;
    while ((unint64_t)v15 >= 0x40 && *a3 != v15[2]);
    if (a2) {
      break;
    }
    if (v15)
    {
      uint64_t v16 = 1;
LABEL_10:
      uint64_t v17 = (uint64_t)a8;
      if (!a5) {
        goto LABEL_46;
      }
      goto LABEL_11;
    }
    unint64_t v24 = *a1;
    __dmb(0xBu);
    if (v14 == v24 || !sub_21686CF40((uint64_t)a1, v13, v14, v24))
    {
      sub_21685C048(&v31);
      return 0;
    }
LABEL_31:
    sub_21685C048(&v31);
    uint64_t v14 = v24;
  }
  if (v15)
  {
LABEL_7:
    uint64_t v16 = 0;
    goto LABEL_10;
  }
  if (!a8) {
    a8 = (void *)a7(v28, a3, a4);
  }
  if (!v32)
  {
    char v32 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v31) & 1) == 0)
    {
      unint64_t v15 = (void *)(v33 + 16);
      while (1)
      {
        unint64_t v15 = (void *)*v15;
        if ((unint64_t)v15 < 0x40) {
          break;
        }
        if (*a3 == v15[2])
        {
          if (!v32) {
            goto LABEL_7;
          }
          uint64_t v16 = 0;
          atomic_fetch_add((atomic_ullong *volatile)v31, 3uLL);
          char v32 = 0;
          goto LABEL_10;
        }
      }
    }
  }
  unint64_t v24 = *a1;
  __dmb(0xBu);
  if (v14 != v24)
  {
    if (!sub_21686CF40((uint64_t)a1, v13, v14, v24)) {
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  unint64_t v24 = v14;
LABEL_33:
  unint64_t v29 = sub_21686C9CC((uint64_t)a1, v33, a8, v24);
  uint64_t v17 = 0;
  uint64_t v16 = 1;
  unint64_t v15 = a8;
  if (!a5)
  {
LABEL_46:
    sub_21685C048(&v31);
    goto LABEL_41;
  }
LABEL_11:
  if ((sub_21686CAA4(a5, v15 + 1, a6) & 1) == 0)
  {
    sched_yield();
    int v18 = 2;
    while ((sub_21686CAA4(a5, v15 + 1, a6) & 1) == 0)
    {
      sched_yield();
      BOOL v19 = v18 < 16;
      v18 *= 2;
      if (!v19)
      {
        uint64_t v20 = (atomic_ullong *)v31;
        uint64_t v31 = 0;
        if (v32)
        {
LABEL_16:
          atomic_ullong v21 = *v20;
          unint64_t v22 = *v20 & 0xFFFFFFFFFFFFFFFCLL;
          while (1)
          {
            atomic_ullong v23 = v21;
            atomic_compare_exchange_strong(v20, (unint64_t *)&v23, v22);
            if (v23 == v21) {
              break;
            }
            if (atomic_fetch_add_explicit(v20, 0, memory_order_relaxed) != v21)
            {
              sched_yield();
              goto LABEL_16;
            }
          }
        }
        else
        {
          atomic_fetch_add(v20, 0xFFFFFFFFFFFFFFFCLL);
        }
        sched_yield();
        unint64_t v24 = *a1;
        __dmb(0xBu);
        a8 = (void *)v17;
        goto LABEL_31;
      }
    }
  }
  sub_21685C048(&v31);
  *(void *)(a5 + 16) = v15;
  *(void *)(a5 + 24) = v13;
LABEL_41:
  if (v29) {
    sub_216BC65EC(a1, v29, v28, 0);
  }
  if (v17) {
    sub_216BC6784((uint64_t)a1, v17);
  }
  return v16;
}

void sub_216BC6550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BC6570(uint64_t a1, void *a2)
{
  uint64_t v4 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x50);
  v7[1] = a1;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(void *)(v4 + 16) = *a2;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)(v4 + 72) = 0;
  v7[0] = 0;
  sub_216BC6C2C(v7, v5);
  return v4;
}

void sub_216BC65EC(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  if (a2 < 8)
  {
    unint64_t v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    uint64_t v10 = v9;
    if (a4)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      uint64_t v14 = -6096;
      do
      {
        unint64_t v15 = &v9[v14];
        *((void *)v15 + 763) = 0;
        *((void *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    unint64_t v16 = 0;
    int64x2_t v17 = (int64x2_t)xmmword_217411D20;
    int v18 = v10 - 48;
    uint64x2_t v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    uint64x2_t v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    int8x16_t v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    int64x2_t v22 = vdupq_n_s64(2uLL);
    uint64_t v13 = 255;
    do
    {
      uint64x2_t v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_217411D30);
      int8x16_t v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if (vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0]) {
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      }
      if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1]) {
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      }
      v16 += 2;
      int64x2_t v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    uint64_t v7 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    uint64_t v8 = v7;
    if (a4)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      uint64_t v11 = 1 << a2;
      uint64_t v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        *uint64_t v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    uint64_t v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_216BC6774(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_216BC6784(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 24);
  int v6 = (void **)(a2 + 56);
  sub_216782F20(&v6);
  int v6 = v3;
  sub_216BC6A3C(&v6);
  return tbb::internal::deallocate_via_handler_v3(a2, v4);
}

uint64_t sub_216BC67D8(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  unint64_t v8 = sub_21686CD68(a2, a3);
  *(void *)(a1 + 16) = v8;
  uint64_t v9 = *(void *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (uint64_t v10 = (atomic_ullong *)(*(void *)(a1 + 16) + 8),
        *(unsigned char *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(void *)a1 = v10;
    uint64_t v11 = *(void *)(a1 + 16);
    if (*(void *)(v11 + 16) == 3) {
      sub_216BC68B4(a2, v11, a3);
    }
  }
  else
  {
    uint64_t v12 = (atomic_ullong *)(*(void *)(a1 + 16) + 8);
    *(unsigned char *)(a1 + 8) = a4;
    *(void *)a1 = v12;
    if (a4) {
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    }
    else {
      tbb::spin_rw_mutex_v3::internal_acquire_reader(v12);
    }
  }
  return a1;
}

void sub_216BC68A0(_Unwind_Exception *a1)
{
  sub_21685C048(v1);
  _Unwind_Resume(a1);
}

void *sub_216BC68B4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __dmb(0xBu);
  *(void *)(a2 + 16) = 0;
  if (a3)
  {
    unint64_t v5 = HIDWORD(a3);
    if (!HIDWORD(a3)) {
      unint64_t v5 = a3;
    }
    char v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      char v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    BOOL v7 = v5 >= 4;
    if (v5 >= 4) {
      LODWORD(v5) = v5 >> 2;
    }
    unsigned int v8 = (v5 >> 1) & 1;
    if (v7) {
      v6 += 2;
    }
    char v9 = v8 + v6;
  }
  else
  {
    char v9 = -1;
  }
  uint64_t v10 = ~(-1 << v9);
  sub_216BC67D8(&v15, a1, v10 & a3, 0);
  uint64_t v11 = (void *)(v17 + 16);
  uint64_t v12 = *(void **)(v17 + 16);
  __dmb(0xBu);
  if ((unint64_t)v12 >= 0x40)
  {
    int v13 = (2 * v10) | 1;
    while ((((v12[2] >> 3) ^ v12[2]) & v13) == a3)
    {
      if (v16 || (char v16 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v15) & 1) != 0))
      {
        void *v11 = *v12;
        *uint64_t v12 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v12;
LABEL_24:
        uint64_t v12 = (void *)*v11;
        if (*v11 <= 0x3FuLL) {
          return sub_21685C048(&v15);
        }
      }
      else
      {
        uint64_t v11 = (void *)(v17 + 16);
        uint64_t v12 = *(void **)(v17 + 16);
        __dmb(0xBu);
        if ((unint64_t)v12 < 0x40) {
          return sub_21685C048(&v15);
        }
      }
    }
    uint64_t v11 = v12;
    goto LABEL_24;
  }
  return sub_21685C048(&v15);
}

void sub_216BC6A28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216BC6A3C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        sub_216BC6AD4((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_216BC6AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void **)(a2 + 64);
  sub_216BC6B40(&v4);
  if (*(char *)(a2 + 63) < 0) {
    operator delete(*(void **)(a2 + 40));
  }
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 12));
  return sub_21697C414((_DWORD *)(a2 + 8));
}

void sub_216BC6B40(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        sub_216BC6BD8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216BC6BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 48);
  sub_216782F20(&v3);
  sub_2167FB780(a2 + 24, *(void **)(a2 + 32));
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

uint64_t *sub_216BC6C2C(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (v3) {
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  }
  return a1;
}

void sub_216BC6C60(uint64_t *a1)
{
  v31[19] = *MEMORY[0x263EF8340];
  if (sub_216BBBDFC(3))
  {
    uint64_t v2 = *a1;
    if (*a1 == a1[1])
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"pcp/diagnostic.cpp";
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"OutputGraph";
      __p.__r_.__value_.__r.__words[2] = 583;
      unint64_t v29 = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::OutputGraph() const";
      v30[0] = 0;
      if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "!indexStack.empty()", 0))return; {
      uint64_t v2 = *a1;
      }
    }
    Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(v2 + 8));
    sub_216779094(v20, "/");
    sub_216779094(v24, "_");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)Name, (unsigned __int8 *)v20, (unsigned __int8 *)v24, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"pcp.%s.%06d.dot", v4, v5, p_p, *((unsigned int *)a1 + 6));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v25 < 0) {
      operator delete(v24[0]);
    }
    if (SHIBYTE(v21) < 0) {
      operator delete(v20[0]);
    }
    sub_21681B4C8((uint64_t *)&__p);
    if ((v30[*(void *)(__p.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
    {
      v20[0] = "pcp/diagnostic.cpp";
      v20[1] = "OutputGraph";
      uint64_t v21 = 599;
      int64x2_t v22 = "void pxrInternal__aapl__pxrReserved__::Pcp_IndexingOutputManager::_DebugInfo::OutputGraph() const";
      char v23 = 0;
      BOOL v7 = (const char *)&v26;
      if (v27 < 0) {
        BOOL v7 = (const char *)v26;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Unable to open %s to write graph", v7);
    }
    else
    {
      ++*((_DWORD *)a1 + 6);
      sub_216779180(&__p, (uint64_t)"digraph PcpPrimIndex {\n", 23);
      uint64_t v8 = a1[1];
      char v9 = sub_216779180(&__p, (uint64_t)"\tlabel = <", 10);
      int v10 = *(char *)(v8 - 33);
      if (v10 >= 0) {
        uint64_t v11 = v8 - 56;
      }
      else {
        uint64_t v11 = *(void *)(v8 - 56);
      }
      if (v10 >= 0) {
        uint64_t v12 = *(unsigned __int8 *)(v8 - 33);
      }
      else {
        uint64_t v12 = *(void *)(v8 - 48);
      }
      int v13 = sub_216779180(v9, v11, v12);
      sub_216779180(v13, (uint64_t)">\n", 2);
      sub_216779180(&__p, (uint64_t)"\tlabelloc = b\n", 14);
      uint64_t v16 = *(void *)(v8 - 80);
      uint64_t v15 = v8 - 80;
      uint64_t v14 = v16;
      int v17 = *(char *)(v15 + 23);
      if (v17 >= 0) {
        uint64_t v18 = v15;
      }
      else {
        uint64_t v18 = v14;
      }
      if (v17 >= 0) {
        uint64_t v19 = *(unsigned __int8 *)(v15 + 23);
      }
      else {
        uint64_t v19 = *(void *)(v15 + 8);
      }
      sub_216779180(&__p, v18, v19);
      sub_216779180(&__p, (uint64_t)"}\n", 2);
    }
    __p.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2B0];
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                              + *(void *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2B0]
                                                                                                + 24);
    MEMORY[0x21D447910](&__p.__r_.__value_.__r.__words[1]);
    std::ostream::~ostream();
    MEMORY[0x21D447E60](v31);
    if (v27 < 0) {
      operator delete(v26);
    }
  }
}

void sub_216BC6FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216BC7050(uint64_t *a1, const std::string *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    do
    {
      v6 -= 0x71C71C71C71C71C7 * ((uint64_t)(*(void *)(v4 + 72) - *(void *)(v4 + 64)) >> 3);
      v4 += 96;
    }
    while (v4 != v5);
  }
  sub_2167794AC(__b, 4 * v6, 32);
  pxrInternal__aapl__pxrReserved__::TfStringTrim(" \n\t\r", a2, &v24);
  sub_216779094(&__p, "\n");
  std::operator+<char>();
  pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)&v24.__r_.__value_.__l.__data_, (unsigned __int8 *)&__p, (unsigned __int8 *)v27, &v21);
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)__b, (const void **)&v21.__r_.__value_.__l.__data_, (uint64_t)&__p);
  BOOL v7 = std::string::append(&__p, "\n");
  std::string::size_type v8 = v7->__r_.__value_.__r.__words[0];
  v27[0] = (void *)v7->__r_.__value_.__l.__size_;
  *(void **)((char *)v27 + 7) = *(void **)((char *)&v7->__r_.__value_.__r.__words[1] + 7);
  char v9 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  unint64_t v10 = a1[6];
  unint64_t v11 = a1[5];
  if (v11 >= v10)
  {
    uint64_t v13 = a1[4];
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v13) >> 3);
    unint64_t v15 = v14 + 1;
    if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v13) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x555555555555555) {
      unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v17 = v15;
    }
    long long v26 = a1 + 6;
    if (v17) {
      uint64_t v18 = (char *)sub_216782ED8((uint64_t)(a1 + 6), v17);
    }
    else {
      uint64_t v18 = 0;
    }
    std::string::size_type v19 = (std::string::size_type)&v18[24 * v14];
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    v24.__r_.__value_.__l.__size_ = v19;
    char v25 = &v18[24 * v17];
    *(void *)std::string::size_type v19 = v8;
    *(void **)(v19 + 8) = v27[0];
    *(void **)(v19 + 15) = *(void **)((char *)v27 + 7);
    *(unsigned char *)(v19 + 23) = v9;
    v24.__r_.__value_.__r.__words[2] = v19 + 24;
    sub_216790CCC(a1 + 4, &v24);
    unint64_t v12 = a1[5];
    sub_216790E64((uint64_t)&v24);
  }
  else
  {
    *(void *)unint64_t v11 = v8;
    *(void **)(v11 + 8) = v27[0];
    *(void **)(v11 + 15) = *(void **)((char *)v27 + 7);
    *(unsigned char *)(v11 + 23) = v9;
    unint64_t v12 = v11 + 24;
    a1[5] = v11 + 24;
  }
  a1[5] = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (v23 < 0) {
    operator delete(__b[0]);
  }
}

void sub_216BC72F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void *sub_216BC73B0(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  unint64_t v7 = *(v4 - 1);
  if (v7 >= v6)
  {
    unint64_t v11 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x38E38E38E38E38ELL) {
      sub_21677CB10();
    }
    unint64_t v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x1C71C71C71C71C7) {
      unint64_t v14 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v14 = v12;
    }
    v19[4] = v4;
    if (v14) {
      unint64_t v15 = (char *)sub_216815D10((uint64_t)v4, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    unint64_t v16 = &v15[72 * v11];
    v19[0] = v15;
    v19[1] = v16;
    void v19[3] = &v15[72 * v14];
    long long v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v16 = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *((void *)v16 + 4) = 0;
    v16 += 32;
    *((void *)v16 - 1) = v16;
    *((void *)v16 + 1) = 0;
    *((void *)v16 + 2) = 0;
    *((void *)v16 + 3) = 0;
    *((void *)v16 + 4) = 0;
    v19[2] = v16 + 40;
    sub_216BC7528(a1, v19);
    unint64_t v10 = (void *)a1[1];
    sub_216BC7758(v19);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(void *)(v7 + 32) = 0;
    char v9 = (void *)(v7 + 32);
    *(v9 - 1) = v9;
    v9[1] = 0;
    void v9[2] = 0;
    void v9[3] = 0;
    void v9[4] = 0;
    unint64_t v10 = v9 + 5;
    a1[1] = (uint64_t)(v9 + 5);
  }
  a1[1] = (uint64_t)v10;
  return v10 - 9;
}

void sub_216BC7514(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BC7758((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BC7528(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216BC75A0((uint64_t)(a1 + 2), a1[1], (long long *)a1[1], *a1, (long long *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216BC75A0(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    char v9 = a3;
    do
    {
      char v9 = (long long *)((char *)v9 - 72);
      sub_216BC7658(a1, v7 - 72, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 72;
      *((void *)&v16 + 1) -= 72;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216BC76CC((uint64_t)v13);
  return v11;
}

__n128 sub_216BC7658(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(void *)(a2 + 24) = *((void *)a3 + 3);
  uint64_t v4 = a3 + 2;
  uint64_t v5 = *((void *)a3 + 4);
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = a2 + 32;
  uint64_t v7 = *((void *)a3 + 5);
  *(void *)(a2 + 4sub_2168EBBB8(&a9, 0) = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    *((void *)a3 + 3) = v4;
    void *v4 = 0;
    *((void *)a3 + 5) = 0;
  }
  else
  {
    *(void *)(a2 + 24) = v6;
  }
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  __n128 result = (__n128)a3[3];
  *(__n128 *)(a2 + 48) = result;
  *(void *)(a2 + 64) = *((void *)a3 + 8);
  *((void *)a3 + 6) = 0;
  *((void *)a3 + 7) = 0;
  *((void *)a3 + 8) = 0;
  return result;
}

uint64_t sub_216BC76CC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216BC7704((uint64_t *)a1);
  }
  return a1;
}

void sub_216BC7704(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_216BC6BD8(v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void **sub_216BC7758(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216BC778C(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 72;
    sub_216BC6BD8(v4, i - 72);
  }
}

uint64_t *sub_216BC77D4(uint64_t **a1, void *a2, _OWORD *a3)
{
  uint64_t v5 = (void **)sub_216BC7858((uint64_t)a1, &v9, a2);
  uint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    sub_21677B358(a1, v9, v7, v6);
  }
  return v6;
}

void *sub_216BC7858(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(a3, v4 + 4)) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_216BC78EC(uint64_t result, uint64_t a2, char *a3)
{
  if (*(void *)(result + 8) == *(void *)(result + 24))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    uint64_t v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::Pcp_Ind"
            "exingOutputManager::_IndexInfo>, true>::operator->() [T = std::vector<pxrInternal__aapl__pxrReserved__::Pcp_"
            "IndexingOutputManager::_IndexInfo>, Reverse = true]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_216BC796C(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 == *(void *)(a1 + 24))
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    uint64_t v5[2] = 271;
    uint64_t v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::Pcp_Ind"
            "exingOutputManager::_Phase>, true>::operator*() [T = std::vector<pxrInternal__aapl__pxrReserved__::Pcp_Index"
            "ingOutputManager::_Phase>, Reverse = true]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return v3 - 72;
}

void sub_216BC79E8()
{
}

uint64_t sub_216BC79F0(uint64_t result, uint64_t a2, char *a3)
{
  if (*(void *)(result + 8) == *(void *)(result + 24))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    uint64_t v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::Pcp_Ind"
            "exingOutputManager::_Phase>, true>::operator->() [T = std::vector<pxrInternal__aapl__pxrReserved__::Pcp_Inde"
            "xingOutputManager::_Phase>, Reverse = true]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_216BC7A70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)(a1 + 24))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    void v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::Pcp_IndexingOutputManager::_Phase>, true>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserv"
            "ed__::Pcp_IndexingOutputManager::_Phase>, Reverse = true]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(void *)(a1 + 8) = v2 - 72;
  }
  return a1;
}

uint64_t sub_216BC7AF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)(a1 + 24))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    void v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::Pcp_IndexingOutputManager::_IndexInfo>, true>::operator++() [T = std::vector<pxrInternal__aapl__pxrRe"
            "served__::Pcp_IndexingOutputManager::_IndexInfo>, Reverse = true]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(void *)(a1 + 8) = v2 - 96;
  }
  return a1;
}

uint64_t sub_216BC7B78(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a2 ^ (*a2 >> 3);
  uint64_t v5 = *a1;
  __dmb(0xBu);
  while (2)
  {
    sub_216BC67D8((uint64_t)&v12, (uint64_t)a1, v5 & v4, 0);
    while (1)
    {
      char v6 = (void *)(v14 + 16);
      while (1)
      {
        int v7 = v6;
        char v6 = (void *)*v6;
        if ((unint64_t)v6 < 0x40) {
          break;
        }
        if (*a2 == v6[2]) {
          goto LABEL_8;
        }
      }
      if (!v6) {
        break;
      }
LABEL_8:
      if (v13 || (char v13 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v12) & 1) != 0))
      {
        void *v7 = *v6;
        atomic_fetch_add(a1 + 65, 0xFFFFFFFFFFFFFFFFLL);
        sub_21685C048(&v12);
        uint64_t v10 = 1;
        char v13 = 1;
        unint64_t v12 = (tbb::spin_rw_mutex_v3 *)(v6 + 1);
        tbb::spin_rw_mutex_v3::internal_acquire_writer(v6 + 1);
        sub_21685C048(&v12);
        sub_216BC6784((uint64_t)a1, (uint64_t)v6);
        return v10;
      }
      uint64_t v8 = *a1;
      __dmb(0xBu);
      if (v5 != v8)
      {
        BOOL v9 = sub_21686CF40((uint64_t)a1, v4, v5, v8);
        uint64_t v5 = v8;
        if (v9) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v8 = *a1;
    __dmb(0xBu);
    if (v5 != v8 && sub_21686CF40((uint64_t)a1, v4, v5, v8))
    {
LABEL_15:
      sub_21685C048(&v12);
      uint64_t v5 = v8;
      continue;
    }
    break;
  }
  sub_21685C048(&v12);
  return 0;
}

void sub_216BC7CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_216BC7D0C(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    char v6 = *result;
    int v7 = result[1];
    *__n128 result = (uint64_t *)(result + 1);
    uint64_t v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v10 = result;
    uint64_t v11 = v8;
    unint64_t v12 = v8;
    if (v8)
    {
      uint64_t v11 = sub_216799E28((uint64_t)v8);
      while (a2 != a3)
      {
        sub_216BC7E14(v5, a2, (uint64_t)v8);
        if (v9)
        {
          uint64_t v8 = v11;
          unint64_t v12 = v11;
          if (!v11)
          {
            a2 += 2;
            break;
          }
          uint64_t v11 = sub_216799E28((uint64_t)v11);
        }
        else
        {
          uint64_t v8 = v12;
        }
        a2 += 2;
        if (!v8) {
          break;
        }
      }
    }
    __n128 result = (uint64_t **)sub_2167FF3FC((uint64_t)&v10);
  }
  while (a2 != a3)
  {
    __n128 result = (uint64_t **)sub_216BC77D4(v5, a2, a2);
    a2 += 2;
  }
  return result;
}

void sub_216BC7E00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2167FF3FC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216BC7E14(uint64_t **a1, void *a2, uint64_t a3)
{
  char v6 = (uint64_t **)sub_216BC7858((uint64_t)a1, &v8, a2);
  if (*v6) {
    return *v6;
  }
  *(_OWORD *)(a3 + 32) = *(_OWORD *)a2;
  sub_21677B358(a1, v8, v6, (uint64_t *)a3);
  return (uint64_t *)a3;
}

uint64_t **sub_216BC7E90(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    char v6 = *result;
    int v7 = result[1];
    *__n128 result = (uint64_t *)(result + 1);
    uint64_t v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v14 = result;
    long long v15 = v8;
    long long v16 = v8;
    if (v8)
    {
      long long v15 = sub_216799E28((uint64_t)v8);
      if (a2 != a3)
      {
        char v9 = a2;
        do
        {
          *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
          sub_216BC7FF4(v5, v8);
          uint64_t v8 = v15;
          long long v16 = v15;
          if (v15) {
            long long v15 = sub_216799E28((uint64_t)v15);
          }
          uint64_t v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              char v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          char v9 = a2;
        }
        while (a2 != a3);
      }
    }
    __n128 result = (uint64_t **)sub_2167FF3FC((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      __n128 result = (uint64_t **)sub_216BC807C(v5, (_OWORD *)a2 + 2);
      unint64_t v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          char v13 = v12;
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          char v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_216BC7FE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2167FF3FC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216BC7FF4(uint64_t **a1, uint64_t *a2)
{
  uint64_t v5 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = (uint64_t **)v4;
        if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(a2 + 4, v4 + 4)) {
          break;
        }
        uint64_t v4 = *v5;
        char v6 = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    char v6 = v5 + 1;
  }
  else
  {
    char v6 = a1 + 1;
  }
LABEL_8:
  sub_21677B358(a1, (uint64_t)v5, v6, a2);
  return a2;
}

uint64_t *sub_216BC807C(uint64_t **a1, _OWORD *a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x30uLL);
  *((_OWORD *)v4 + 2) = *a2;
  char v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    do
    {
      while (1)
      {
        char v6 = (uint64_t **)v5;
        if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(v4 + 4, v5 + 4)) {
          break;
        }
        uint64_t v5 = *v6;
        int v7 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v5 = v6[1];
    }
    while (v5);
    int v7 = v6 + 1;
  }
  else
  {
    int v7 = a1 + 1;
  }
LABEL_8:
  sub_21677B358(a1, (uint64_t)v6, v7, v4);
  return v4;
}

void sub_216BC8118(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216BC812C(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(v3 + 4, a2);
    int v7 = v3 + 1;
    if (!v6)
    {
      int v7 = v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(a2, v5 + 4)) {
    return v2;
  }
  return v5;
}

_OWORD *sub_216BC81A8(uint64_t **a1, void *a2, uint64_t a3, _OWORD **a4)
{
  BOOL v6 = (void **)sub_216BC7858((uint64_t)a1, &v10, a2);
  int v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    int v7 = operator new(0x38uLL);
    uint64_t v7[2] = **a4;
    *((_DWORD *)v7 + 12) = 0;
    sub_21677B358(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_216BC8234(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_216BC8234(a1, *(void *)a2);
    sub_216BC8234(a1, *((void *)a2 + 1));
    uint64_t v4 = (void **)(a2 + 48);
    sub_216991094(&v4);
    operator delete(a2);
  }
}

uint64_t sub_216BC8294(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator((void *)a1);
  pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(v4 + 2);
  long long v5 = a2[1];
  *(_OWORD *)(a1 + 32) = *a2;
  *(_OWORD *)(a1 + 48) = v5;
  long long v6 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a1 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = v6;
  return a1;
}

_OWORD *sub_216BC82D8(uint64_t **a1, void *a2, uint64_t a3, _OWORD **a4)
{
  long long v6 = (void **)sub_216BC7858((uint64_t)a1, &v10, a2);
  int v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    int v7 = operator new(0x48uLL);
    uint64_t v7[2] = **a4;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 6) = 0;
    sub_21677B358(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t sub_216BC8368(uint64_t *a1, void *a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 5);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x155555555555555) {
    unint64_t v11 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v11 = v6;
  }
  void v16[4] = a1 + 2;
  if (v11) {
    unint64_t v12 = (char *)sub_21682B950(v9, v11);
  }
  else {
    unint64_t v12 = 0;
  }
  char v13 = &v12[96 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v16[3] = &v12[96 * v11];
  *(void *)char v13 = *a2;
  sub_216981010((_DWORD *)v13 + 2, a3);
  sub_21698105C((_DWORD *)v13 + 3, a3 + 1);
  *((_OWORD *)v13 + 1) = 0u;
  *((_OWORD *)v13 + 2) = 0u;
  *(_OWORD *)(v13 + 73) = 0u;
  *((_OWORD *)v13 + 3) = 0u;
  *((_OWORD *)v13 + 4) = 0u;
  v16[2] = v13 + 96;
  sub_216BC8494(a1, v16);
  uint64_t v14 = a1[1];
  sub_216BC86EC(v16);
  return v14;
}

void sub_216BC8480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BC86EC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BC8494(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216BC850C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216BC850C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 96;
      sub_216BC85C4(a1, v7 - 96, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 96;
      *((void *)&v16 + 1) -= 96;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216BC8660((uint64_t)v13);
  return v11;
}

__n128 sub_216BC85C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = *(void *)a3;
  sub_21697D878((_DWORD *)(a2 + 8), (_DWORD *)(a3 + 8));
  sub_21697D8B4((_DWORD *)(a2 + 12), (_DWORD *)(a3 + 12));
  long long v5 = *(_OWORD *)(a3 + 16);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = v5;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  long long v6 = *(_OWORD *)(a3 + 40);
  *(void *)(a2 + 56) = *(void *)(a3 + 56);
  *(_OWORD *)(a2 + 4sub_2168EBBB8(&a9, 0) = v6;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 4sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 8sub_2168EBBB8(&a9, 0) = 0;
  __n128 result = *(__n128 *)(a3 + 64);
  *(__n128 *)(a2 + 64) = result;
  *(void *)(a2 + 8sub_2168EBBB8(&a9, 0) = *(void *)(a3 + 80);
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 8sub_2168EBBB8(&a9, 0) = 0;
  *(unsigned char *)(a2 + 88) = *(unsigned char *)(a3 + 88);
  return result;
}

uint64_t sub_216BC8660(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216BC8698((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216BC8698(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      __n128 result = (uint64_t *)sub_216BC6AD4(v3, v1);
      v1 += 96;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_216BC86EC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

_DWORD *sub_216BC8720(_DWORD *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2) = v1 - 96;
      __n128 result = sub_216BC6AD4(v4, v1 - 96);
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

unint64_t sub_216BC8768(atomic_ullong *a1)
{
  sub_216BC87C4();
  uint64_t v3 = v2;
  uint64_t v4 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v4, (unint64_t)v2);
  if (v4)
  {
    if (v2)
    {
      sub_216BC8888(v2);
      operator delete(v3);
    }
    return atomic_load((unint64_t *)a1);
  }
  return (unint64_t)v3;
}

double sub_216BC87C4()
{
  uint64_t v0 = (char *)operator new(0x248uLL);
  uint64_t v1 = v0 + 528;
  for (uint64_t i = 536; i != 584; i += 24)
    *(void *)&v0[i] = 0;
  double result = 0.0;
  *(_OWORD *)(v0 + 248) = 0u;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 216) = 0u;
  *(_OWORD *)(v0 + 20sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 168) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 488) = 0u;
  *(_OWORD *)(v0 + 504) = 0u;
  *(_OWORD *)(v0 + 456) = 0u;
  *(_OWORD *)(v0 + 472) = 0u;
  *(_OWORD *)(v0 + 424) = 0u;
  *(_OWORD *)(v0 + 44sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(v0 + 392) = 0u;
  *(_OWORD *)(v0 + 408) = 0u;
  *(_OWORD *)(v0 + 36sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(v0 + 376) = 0u;
  *(_OWORD *)(v0 + 328) = 0u;
  *(_OWORD *)(v0 + 344) = 0u;
  *(_OWORD *)(v0 + 296) = 0u;
  *(_OWORD *)(v0 + 312) = 0u;
  *(_OWORD *)(v0 + 264) = 0u;
  *(_OWORD *)(v0 + 28sub_2168EBBB8(&a9, 0) = 0u;
  __dmb(0xBu);
  *(void *)uint64_t v0 = 0;
  __dmb(0xBu);
  *((void *)v0 + 65) = 0;
  _OWORD *v1 = 0u;
  *((_OWORD *)v0 + 34) = 0u;
  *((_OWORD *)v0 + 35) = 0u;
  *((void *)v0 + 1) = v1;
  __dmb(0xBu);
  *(void *)uint64_t v0 = 1;
  return result;
}

uint64_t sub_216BC8888(unint64_t *a1)
{
  unint64_t v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  unint64_t v3 = sub_216851020(v2);
  do
  {
    unint64_t v4 = 0;
    unint64_t v5 = v3;
    unint64_t v6 = a1[v3 + 1];
    if (v3-- > 1) {
      char v8 = v5;
    }
    else {
      char v8 = 1;
    }
    do
    {
      unint64_t v9 = v6 + 24 * v4;
      unint64_t v12 = *(void *)(v9 + 16);
      uint64_t v11 = (void *)(v9 + 16);
      unint64_t v10 = (void *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          void *v11 = *v10;
          sub_216BC6784((uint64_t)a1, (uint64_t)v10);
          unint64_t v10 = (void *)*v11;
        }
        while (*v11 > 0x3FuLL);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    uint64_t result = sub_216BC8958((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

uint64_t sub_216BC8958(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 + 8 * a2;
  uint64_t v5 = *(void *)(v2 + 8);
  unint64_t v4 = (void *)(v2 + 8);
  uint64_t result = v5;
  if (a2 < 8)
  {
    if (!a2) {
      return result;
    }
    if (a2 == 1) {
      uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
    }
  }
  else
  {
    uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  void *v4 = 0;
  return result;
}

uint64_t sub_216BC89A8(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      sub_216BC8A28((uint64_t **)a1, v4, a2, a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_216BC8A10(_Unwind_Exception *a1)
{
  sub_2167FB780(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_216BC8A28(uint64_t **a1, void *a2, void *a3, _OWORD *a4)
{
  uint64_t v6 = sub_216BC8AB0(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    char v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_21677B358(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_216BC8AB0(void *a1, void *a2, void *a3, uint64_t *a4, void *a5)
{
  unint64_t v9 = a1 + 1;
  if (a1 + 1 != a2 && !pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(a5, a2 + 4))
  {
    if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(a2 + 4, a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      char v14 = (void *)a2[1];
      do
      {
        long long v15 = v14;
        char v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = a2;
      do
      {
        long long v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    unint64_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      unint64_t v12 = v11;
      uint64_t v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    long long v16 = a2;
    do
    {
      unint64_t v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      long long v16 = v12;
    }
    while (v17);
  }
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return sub_216BC7858((uint64_t)a1, a3, a5);
}

void sub_216BC8C48()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_OVERRIDE_INSTANCEABLE)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>();
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexIsInstanceable(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91368, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91368))
  {
    uint64_t v29 = (int *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_OVERRIDE_INSTANCEABLE);
    if (!v29) {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>();
    }
    dword_267B91360 = *v29;
    __cxa_guard_release(&qword_267B91368);
  }
  if (!dword_267B91360
    || (pxrInternal__aapl__pxrReserved__::PcpPrimIndex::IsUsd(this) & 1) == 0 && dword_267B91360 == -1)
  {
    return 0;
  }
  char v42 = 0;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(this);
  std::string v49 = v5;
  uint64_t v50 = v3;
  uint64_t v6 = *v5[2];
  uint64_t v7 = *(unsigned __int16 *)(v6 + 48 * v3 + 28);
  long long v43 = v5;
  uint64_t v44 = v7;
  uint64_t v45 = v6;
  std::string v46 = v5;
  uint64_t v8 = 0xFFFFLL;
  uint64_t v47 = 0xFFFFLL;
  uint64_t v48 = v6;
  while (v7 != v8 || v43 != v46)
  {
    unint64_t v9 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_216BC2828(&v43, v3, v4);
    sub_216BC9280(v9, &v42, 0);
    sub_216BC28B8(&v43);
    uint64_t v7 = v44;
    uint64_t v8 = v47;
  }
  if (!v42) {
    return 0;
  }
  char v41 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91378, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91378))
  {
    uint64_t v30 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v30) {
      uint64_t v30 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v31 = *((void *)v30 + 25);
    qword_267B91370 = v31;
    if ((v31 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      qword_267B91370 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B91370, &dword_216758000);
    __cxa_guard_release(&qword_267B91378);
  }
  uint64_t v51 = 0x4000000000;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(this);
  v32.n128_u64[0] = v10;
  v32.n128_u64[1] = v11;
  sub_216BC9368((uint64_t)&v43, &v32);
  unsigned int v12 = v51;
  if (v51)
  {
    uint64_t v13 = MEMORY[0x263F8C230];
    do
    {
      char v14 = &v43;
      if (HIDWORD(v51) >= 0x41) {
        char v14 = v43;
      }
      long long v40 = v14[v12 - 1];
      LODWORD(v51) = v12 - 1;
      if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v40))
      {
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v40, (uint64_t)&v37);
        BOOL v17 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8((uint64_t *)&v37);
        uint64_t Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v17);
        std::string::size_type v19 = *(uint64_t **)Layers;
        uint64x2_t v20 = *(uint64_t **)(Layers + 8);
        if (*(uint64_t **)Layers == v20)
        {
          int v23 = 0;
        }
        else
        {
          do
          {
            std::string v21 = (void *)sub_216AA5ECC(v19);
            v32.n128_u64[1] = (unint64_t)&v41;
            uint64_t v33 = v13;
            LOWORD(v34) = 0;
            v32.n128_u64[0] = (unint64_t)&unk_26C75BAE8;
            int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v21, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v38, (const pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B91370, &v32);
            if ((_BYTE)v34) {
              int v23 = 0;
            }
            else {
              int v23 = HasField;
            }
            if (v23) {
              break;
            }
            ++v19;
          }
          while (v19 != v20);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
        sub_21697C414(&v38);
        sub_216BBEEA4(&v37);
        if (v23) {
          break;
        }
      }
      long long v36 = v40;
      uint64_t v24 = **(void **)(v40 + 16);
      unint64_t v25 = *(unsigned __int16 *)(v24 + 48 * *((void *)&v40 + 1) + 30);
      v32.n128_u64[0] = v40;
      v32.n128_u64[1] = v25;
      uint64_t v33 = v24;
      *(void *)&long long v34 = v40;
      *((void *)&v34 + 1) = 0xFFFFLL;
      uint64_t v35 = v24;
      while (*(_OWORD *)&v32 != v34)
      {
        long long v26 = (__n128 *)sub_216BC9150(&v32, v15, v16);
        sub_216BC9368((uint64_t)&v43, v26);
        sub_216BC91E0(&v32);
      }
      unsigned int v12 = v51;
    }
    while (v51);
  }
  BOOL v27 = v41 != 0;
  if (HIDWORD(v51) >= 0x41) {
    free(v43);
  }
  return v27;
}

void sub_216BC9070(_Unwind_Exception *a1)
{
}

void *sub_216BC90EC(void *result)
{
  if ((*result & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*result & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BC9108(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));

  return sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1);
}

void *sub_216BC9150(void *result, uint64_t a2, char *a3)
{
  if (result[1] == result[4] && *result == result[3])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator*";
    uint64_t v3[2] = 271;
    void v3[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::PcpNodeRef_PrivateC"
            "hildrenConstRange, true>::operator*() [T = pxrInternal__aapl__pxrReserved__::PcpNodeRef_PrivateChildrenConst"
            "Range, Reverse = true]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216BC91E0(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2 == a1[4] && *a1 == a1[3])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    void v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::PcpNo"
            "deRef_PrivateChildrenConstRange, true>::operator++() [T = pxrInternal__aapl__pxrReserved__::PcpNodeRef_Priva"
            "teChildrenConstRange, Reverse = true]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    a1[1] = *(unsigned __int16 *)(a1[2] + 48 * v2 + 32);
  }
  return a1;
}

uint64_t sub_216BC9280(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, unsigned char *a2, char a3)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled(a1);
  if (result) {
    return result;
  }
  if (a3)
  {
    uint64_t v7 = 1;
    goto LABEL_5;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor(a1);
  uint64_t v7 = result ^ 1;
  if ((result & 1) == 0)
  {
LABEL_5:
    uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs(a1);
    if (result)
    {
      *a2 = 1;
      return result;
    }
  }
  if (!*a2)
  {
    uint64_t v10 = *((void *)a1 + 1);
    uint64_t v21 = *(void *)a1;
    uint64_t v22 = v10;
    uint64_t v11 = **(void **)(v21 + 16);
    uint64_t v12 = *(unsigned __int16 *)(v11 + 48 * v10 + 28);
    uint64_t v15 = v21;
    uint64_t v16 = v12;
    uint64_t v17 = v11;
    uint64_t v18 = v21;
    uint64_t v13 = 0xFFFFLL;
    uint64_t v19 = 0xFFFFLL;
    uint64_t v20 = v11;
    while (v12 != v13 || v15 != v18)
    {
      char v14 = sub_216BC2828(&v15, v8, v9);
      sub_216BC9280(v14, a2, v7);
      uint64_t result = (uint64_t)sub_216BC28B8(&v15);
      uint64_t v12 = v16;
      uint64_t v13 = v19;
    }
  }
  return result;
}

__n128 sub_216BC9368(uint64_t a1, __n128 *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 1024);
  unsigned int v5 = *(_DWORD *)(a1 + 1028);
  if (v4 == v5)
  {
    sub_216BC93D8(a1, v4 + (v4 >> 1) + 1);
    unsigned int v5 = *(_DWORD *)(a1 + 1028);
  }
  uint64_t v6 = a1;
  if (v5 >= 0x41) {
    uint64_t v6 = *(void *)a1;
  }
  __n128 result = *a2;
  *(__n128 *)(v6 + 16 * (*(_DWORD *)(a1 + 1024))++) = *a2;
  return result;
}

void sub_216BC93D8(uint64_t a1, unsigned int a2)
{
  unsigned int v4 = malloc(16 * a2);
  unsigned int v5 = v4;
  unsigned int v6 = *(_DWORD *)(a1 + 1028);
  uint64_t v7 = (long long *)a1;
  if (v6 >= 0x41) {
    uint64_t v7 = *(long long **)a1;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 1024);
  if (v8)
  {
    uint64_t v9 = 16 * v8;
    uint64_t v10 = v4;
    do
    {
      long long v11 = *v7++;
      *v10++ = v11;
      v9 -= 16;
    }
    while (v9);
  }
  if (v6 >= 0x41) {
    free(*(void **)a1);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 1028) = a2;
}

uint64_t sub_216BC945C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  if (sub_216959490(a2))
  {
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    **(unsigned char **)(a1 + 8) = *(unsigned char *)v2;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(v2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216BC94E0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216959490(a2))
  {
    **(unsigned char **)(a1 + 8) = sub_216BC9548(a2);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

BOOL sub_216BC9548(void *a1)
{
  uint64_t v2 = sub_216B8C654(a1);
  int v3 = *v2;
  unsigned char *v2 = 0;
  uint64_t v4 = a1[1];
  if (v4) {
    BOOL v5 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return v3 != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::New@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x20uLL);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::Pcp_LayerStackRegistry((uint64_t)v8, a1, a2, a3);
  *a4 = v8;
  return result;
}

void sub_216BC9600(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::Pcp_LayerStackRegistry(uint64_t a1, uint64_t a2, long long *a3, char a4)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C75BB20;
  uint64_t v8 = operator new(0x188uLL);
  sub_216BCB370((uint64_t)v8, a2, a3, a4);
  *(void *)(a1 + 24) = v8;
  return a1;
}

void sub_216BC96A4(_Unwind_Exception *a1)
{
  operator delete(v3);
  sub_216859A88(v2, v5);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::~Pcp_LayerStackRegistry(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *this)
{
  *(void *)this = &unk_26C75BB20;
  uint64_t v2 = (uint64_t *)((char *)this + 16);
  sub_216BCBC04((uint64_t *)this + 3, 0);
  sub_216859A88(v2, v3);

  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::~Pcp_LayerStackRegistry(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::MuteAndUnmuteLayers(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
}

void pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers::MuteAndUnmuteLayers(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  long long v52 = 0uLL;
  unint64_t v53 = 0;
  long long v50 = 0uLL;
  unint64_t v51 = 0;
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  if (*a3 != v9)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers::_GetCanonicalLayerId((unsigned __int8 *)a1, a2, v8, __p);
      uint64_t v10 = (void *)HIBYTE(v49);
      char v11 = HIBYTE(v49);
      if (v49 < 0) {
        uint64_t v10 = __p[1];
      }
      if (!v10) {
        goto LABEL_29;
      }
      uint64_t v12 = *(const void ***)(a1 + 24);
      uint64_t v13 = *(const void ***)(a1 + 32);
      char v54 = 0;
      char v14 = sub_216BCDB44(v12, v13, (const void **)__p, (uint64_t)&v55);
      uint64_t v15 = (uint64_t)v14;
      if (*(const void ***)(a1 + 32) == v14) {
        goto LABEL_22;
      }
      uint64_t v16 = *((unsigned __int8 *)v14 + 23);
      if ((v16 & 0x80u) == 0) {
        uint64_t v17 = (void *)*((unsigned __int8 *)v14 + 23);
      }
      else {
        uint64_t v17 = (void *)v14[1];
      }
      uint64_t v18 = (void *)HIBYTE(v49);
      char v11 = HIBYTE(v49);
      if (v49 < 0) {
        uint64_t v18 = __p[1];
      }
      if (v17 != v18) {
        goto LABEL_22;
      }
      if (v49 >= 0) {
        uint64_t v19 = __p;
      }
      else {
        uint64_t v19 = (void **)__p[0];
      }
      if ((v16 & 0x80) != 0)
      {
        if (memcmp(*v14, v19, (size_t)v14[1])) {
          goto LABEL_22;
        }
      }
      else if (*((unsigned char *)v14 + 23))
      {
        uint64_t v20 = v14;
        while (*(unsigned __int8 *)v20 == *(unsigned __int8 *)v19)
        {
          uint64_t v20 = (const void **)((char *)v20 + 1);
          uint64_t v19 = (void **)((char *)v19 + 1);
          if (!--v16) {
            goto LABEL_29;
          }
        }
LABEL_22:
        sub_216BCB1FC((uint64_t *)(a1 + 24), v15, (long long *)__p);
        uint64_t v21 = (_OWORD *)*((void *)&v52 + 1);
        if (*((void *)&v52 + 1) >= v53)
        {
          uint64_t v23 = sub_2167E9A44((uint64_t *)&v52, (long long *)__p);
        }
        else
        {
          if (SHIBYTE(v49) < 0)
          {
            sub_216778F24(*((unsigned char **)&v52 + 1), __p[0], (unint64_t)__p[1]);
          }
          else
          {
            long long v22 = *(_OWORD *)__p;
            *(void *)(*((void *)&v52 + 1) + 16) = v49;
            _OWORD *v21 = v22;
          }
          uint64_t v23 = (uint64_t)v21 + 24;
        }
        *((void *)&v52 + 1) = v23;
        char v11 = HIBYTE(v49);
      }
LABEL_29:
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      v8 += 24;
    }
    while (v8 != v9);
  }
  uint64_t v24 = *a4;
  uint64_t v25 = a4[1];
  if (*a4 != v25)
  {
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers::_GetCanonicalLayerId((unsigned __int8 *)a1, a2, v24, __p);
      long long v26 = (void *)HIBYTE(v49);
      char v27 = HIBYTE(v49);
      if (v49 < 0) {
        long long v26 = __p[1];
      }
      if (!v26) {
        goto LABEL_65;
      }
      char v28 = *(const void ***)(a1 + 24);
      uint64_t v29 = *(const void ***)(a1 + 32);
      char v54 = 0;
      uint64_t v30 = sub_216BCDB44(v28, v29, (const void **)__p, (uint64_t)&v55);
      uint64_t v31 = (uint64_t)v30;
      __n128 v32 = *(long long **)(a1 + 32);
      uint64_t v33 = (void *)HIBYTE(v49);
      char v27 = HIBYTE(v49);
      if (v32 == (long long *)v30) {
        goto LABEL_65;
      }
      uint64_t v34 = *((unsigned __int8 *)v30 + 23);
      if ((v34 & 0x80u) == 0) {
        uint64_t v35 = (void *)*((unsigned __int8 *)v30 + 23);
      }
      else {
        uint64_t v35 = (void *)v30[1];
      }
      if (v49 < 0) {
        uint64_t v33 = __p[1];
      }
      if (v35 != v33) {
        goto LABEL_65;
      }
      long long v36 = v49 >= 0 ? __p : (void **)__p[0];
      if ((v34 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v30, v36, (size_t)v30[1])) {
        goto LABEL_53;
      }
LABEL_65:
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      v24 += 24;
      if (v24 == v25) {
        goto LABEL_68;
      }
    }
    if (*((unsigned char *)v30 + 23))
    {
      long long v37 = v30;
      while (*(unsigned __int8 *)v37 == *(unsigned __int8 *)v36)
      {
        long long v37 = (const void **)((char *)v37 + 1);
        long long v36 = (void **)((char *)v36 + 1);
        if (!--v34) {
          goto LABEL_53;
        }
      }
      goto LABEL_65;
    }
LABEL_53:
    sub_216A3104C((uint64_t)&v55, (long long *)(v31 + 24), v32, v31);
    uint64_t v39 = v38;
    for (uint64_t i = *(void *)(a1 + 32); i != v39; i -= 24)
    {
      if (*(char *)(i - 1) < 0) {
        operator delete(*(void **)(i - 24));
      }
    }
    *(void *)(a1 + 32) = v39;
    char v41 = (_OWORD *)*((void *)&v50 + 1);
    if (*((void *)&v50 + 1) >= v51)
    {
      uint64_t v43 = sub_2167E9A44((uint64_t *)&v50, (long long *)__p);
    }
    else
    {
      if (SHIBYTE(v49) < 0)
      {
        sub_216778F24(*((unsigned char **)&v50 + 1), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v42 = *(_OWORD *)__p;
        *(void *)(*((void *)&v50 + 1) + 16) = v49;
        _OWORD *v41 = v42;
      }
      uint64_t v43 = (uint64_t)v41 + 24;
    }
    *((void *)&v50 + 1) = v43;
    char v27 = HIBYTE(v49);
    goto LABEL_65;
  }
LABEL_68:
  long long v44 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v52;
  long long v52 = v44;
  uint64_t v45 = a3[2];
  a3[2] = v53;
  unint64_t v53 = v45;
  long long v46 = *(_OWORD *)a4;
  *(_OWORD *)a4 = v50;
  long long v50 = v46;
  uint64_t v47 = a4[2];
  a4[2] = v51;
  unint64_t v51 = v47;
  __p[0] = &v50;
  sub_216782F20((void ***)__p);
  *(void *)&long long v50 = &v52;
  sub_216782F20((void ***)&v50);
}

void sub_216BC9B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char **__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::string __p = &a16;
  sub_216782F20((void ***)&__p);
  a16 = &a20;
  sub_216782F20((void ***)&a16);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::GetMutedLayers(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *this)
{
  return *((void *)this + 3) + 360;
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers::GetMutedLayers(pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers *this)
{
  return (uint64_t)this + 24;
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::IsLayerMuted(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  return pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers::IsLayerMuted(*(void *)(a1 + 24) + 336, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers::IsLayerMuted(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  if (*(void *)(a1 + 24) == *(void *)(a1 + 32)) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers::_GetCanonicalLayerId((unsigned __int8 *)a1, a2, a3, __p);
  unsigned int v6 = (void *)HIBYTE(v15);
  if (v15 < 0) {
    unsigned int v6 = __p[1];
  }
  if (!v6
    || (uint64_t v7 = *(const void ***)(a1 + 24),
        uint64_t v8 = *(const void ***)(a1 + 32),
        v16[1] = 0,
        uint64_t v9 = sub_216BCDB44(v7, v8, (const void **)__p, (uint64_t)v16),
        v8 == v9)
    || sub_21677B108((uint64_t)v16, (const void **)__p, v9))
  {
    uint64_t v10 = 0;
  }
  else
  {
    if (a4)
    {
      uint64_t v12 = *((void *)a4 + 2);
      long long v13 = *a4;
      *a4 = *(_OWORD *)__p;
      *((void *)a4 + 2) = v15;
      *(_OWORD *)std::string __p = v13;
      uint64_t v15 = v12;
    }
    uint64_t v10 = 1;
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  return v10;
}

void sub_216BC9C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::FindAllUsingMutedLayer(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = (atomic_ullong *)(*(void *)(a1 + 24) + 384);
  v8[0] = 0;
  __int16 v9 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v8, v4, 0);
  BOOL v5 = sub_2168602D4((void *)(*(void *)(a1 + 24) + 120), a2);
  if (v5) {
    uint64_t v6 = (uint64_t)(v5 + 40);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 24) + 200;
  }
  sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)v8);
  return v6;
}

void sub_216BC9D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::FindOrCreate(const pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *a1@<X0>, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator BOOL(a2))
  {
    uint64_t v8 = (atomic_ullong *)(*((void *)a1 + 3) + 384);
    v32[0] = 0;
    *(_WORD *)((char *)&v33 + 1) = 0;
    tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v32, v8, 0);
    *a4 = 0;
    __int16 v9 = sub_216BCC6D0(*((void **)a1 + 3), (uint64_t)a2);
    if (v9)
    {
      uint64_t v10 = v9[13];
      *(void *)&v30[0] = v9[12];
      *((void *)&v30[0] + 1) = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 1u, memory_order_relaxed);
      }
    }
    else
    {
      v30[0] = 0uLL;
    }
    char v11 = sub_216BCA2D4(v30);
    if (v12 & 1 | (unint64_t)v11)
    {
      sub_216ABBA08((uint64_t)v30, (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v35);
      long long v13 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a4;
      *a4 = (uint64_t)v35;
      uint64_t v35 = 0;
      sub_2168BD378((int)a4, v13);
      sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v35);
    }
    uint64_t v14 = *((void *)&v30[0] + 1);
    if (*((void *)&v30[0] + 1)
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v30[0] + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    if (!*a4)
    {
      tbb::queuing_rw_mutex::scoped_lock::release((uint64_t)v32);
      uint64_t v15 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)operator new(0x1C8uLL);
      pxrInternal__aapl__pxrReserved__::PcpLayerStack::PcpLayerStack(v15, a2, a1);
      uint64_t v31 = v15;
      tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v32, (atomic_ullong *)(*((void *)a1 + 3) + 384), 1);
      uint64_t v16 = sub_216BCC6D0(*((void **)a1 + 3), (uint64_t)a2);
      if (v16)
      {
        uint64_t v17 = v16[13];
        *(void *)&v30[0] = v16[12];
        *((void *)&v30[0] + 1) = v17;
        if (v17) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v17 + 8), 1u, memory_order_relaxed);
        }
      }
      else
      {
        v30[0] = 0uLL;
      }
      uint64_t v18 = sub_216BCA2D4(v30);
      if (v19 & 1 | (unint64_t)v18)
      {
        sub_216ABBA08((uint64_t)v30, (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v35);
        uint64_t v20 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a4;
        *a4 = (uint64_t)v35;
        uint64_t v35 = 0;
        sub_2168BD378((int)a4, v20);
        sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v35);
      }
      uint64_t v21 = *((void *)&v30[0] + 1);
      if (*((void *)&v30[0] + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v30[0] + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
      if (!*a4)
      {
        *a4 = (uint64_t)v31;
        sub_2168BD80C((uint64_t *)&v31);
        sub_2168BD378((int)a4, 0);
        sub_216BC11A8((uint64_t *)v30, a4);
        uint64_t v22 = *((void *)a1 + 3);
        uint64_t v35 = (void **)a2;
        uint64_t v23 = sub_216BCBDB0(v22, (uint64_t)a2, (uint64_t)&unk_2174BFD90, (uint64_t *)&v35);
        uint64_t v24 = (atomic_uint *)v23[13];
        *((_OWORD *)v23 + 6) = v30[0];
        *((void *)&v30[0] + 1) = 0;
        if (v24)
        {
          if (atomic_fetch_add_explicit(v24 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v24 + 8))(v24);
          }
          uint64_t v25 = *((void *)&v30[0] + 1);
          *(void *)&v30[0] = 0;
          if (*((void *)&v30[0] + 1)
            && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v30[0] + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
          }
        }
        sub_216BCC1D0(v30, (uint64_t)a1);
        uint64_t v26 = sub_216BBBFA8(a4);
        char v27 = *(atomic_uint **)(v26 + 112);
        *(_OWORD *)(v26 + 104) = v30[0];
        *((void *)&v30[0] + 1) = 0;
        if (v27)
        {
          if (atomic_fetch_add_explicit(v27 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v27 + 8))(v27);
          }
          uint64_t v28 = *((void *)&v30[0] + 1);
          *(void *)&v30[0] = 0;
          if (*((void *)&v30[0] + 1))
          {
            if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v30[0] + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v28 + 8))(v28); {
          }
            }
        }
        pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_SetLayers(a1, (const pxrInternal__aapl__pxrReserved__::PcpLayerStack *)*a4);
        tbb::queuing_rw_mutex::scoped_lock::release((uint64_t)v32);
        uint64_t v29 = (void *)sub_216BBBFA8(a4);
        sub_216BCA858(v29, v30);
        sub_216BCC2B4((uint64_t *)a3, *(void **)(a3 + 8), *(uint64_t **)&v30[0], *((void **)&v30[0] + 1), (uint64_t)(*((void *)&v30[0] + 1) - *(void *)&v30[0]) >> 4);
        uint64_t v35 = (void **)v30;
        sub_216787968(&v35);
      }
      sub_216BBEEA4(&v31);
    }
    sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)v32);
  }
  else
  {
    v32[0] = "pcp/layerStackRegistry.cpp";
    v32[1] = "FindOrCreate";
    uint64_t v32[2] = 152;
    uint64_t v33 = "PcpLayerStackRefPtr pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::FindOrCreate(const PcpLayerStack"
          "Identifier &, PcpErrorVector *)";
    char v34 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot build layer stack with null rootLayer");
    *a4 = 0;
  }
}

void sub_216BCA15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a13, char a14)
{
  *(void *)(v15 - 56) = &a9;
  sub_216787968((void ***)(v15 - 56));
  sub_216BBEEA4(&a13);
  sub_216BBEEA4(v14);
  sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)&a14);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_Find@<X0>(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_216BCC6D0(*((void **)this + 3), (uint64_t)a2);
  if (result)
  {
    uint64_t v5 = result[13];
    *a3 = result[12];
    a3[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t (*sub_216BCA2D4(void *a1))(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14);
  if (*a1) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  else {
    return sub_216BCBD6C;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_SetLayers(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *this, const pxrInternal__aapl__pxrReserved__::PcpLayerStack *a2)
{
  sub_216BCC96C(&v54, (uint64_t)a2);
  uint64_t v4 = *((void *)this + 3) + 80;
  unint64_t v51 = &v54;
  BOOL v5 = sub_216BCCA50(v4, (uint64_t)&v54, (uint64_t)&unk_2174BFD90, (void **)&v51);
  uint64_t v7 = (long long *)v5[4];
  uint64_t v8 = (long long *)v5[5];
  for (uint64_t i = (uint64_t)(v5 + 4); v7 != v8; ++v7)
  {
    uint64_t v9 = *((void *)this + 3) + 40;
    unint64_t v51 = v7;
    uint64_t v10 = sub_216BCCA50(v9, (uint64_t)v7, (uint64_t)&unk_2174BFD90, (void **)&v51);
    char v11 = (atomic_uint *)(v10 + 4);
    uint64_t v12 = sub_216BCCD64(v10[4], v10[5], (uint64_t)&v54);
    uint64_t v13 = v10[5];
    if (v12 + 16 != v13)
    {
      do
      {
        uint64_t v14 = v12 + 16;
        sub_21697D0EC(v12, v12 + 16);
        uint64_t v15 = v12 + 32;
        v12 += 16;
      }
      while (v15 != v13);
      uint64_t v12 = v14;
    }
    sub_216850C48(v11, v12);
  }
  uint64_t Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(a2);
  uint64_t v17 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers == v17) {
    sub_216BCCDCC((void *)(*((void *)this + 3) + 80), (uint64_t)&v54);
  }
  else {
    sub_216BCCE1C(i, *(uint64_t **)Layers, v17, ((uint64_t)v17 - *(void *)Layers) >> 3);
  }
  uint64_t v18 = *(uint64_t **)Layers;
  char v19 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers != v19)
  {
    do
    {
      uint64_t v20 = *((void *)this + 3);
      sub_216ABBA60((uint64_t *)&v51, v18);
      char v55 = &v51;
      uint64_t v21 = sub_216BCD124(v20 + 40, (uint64_t)&v51, (uint64_t)&unk_2174BFD90, (_OWORD **)&v55);
      sub_216BCACC4(v21 + 4, &v54);
      uint64_t v22 = v52;
      if (v52 && atomic_fetch_add_explicit((atomic_uint *volatile)(v52 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      }
      ++v18;
    }
    while (v18 != v19);
  }
  uint64_t v23 = sub_216851C48((void *)(*((void *)this + 3) + 160), (uint64_t)&v54);
  uint64_t v24 = v23;
  if (v23)
  {
    uint64_t v25 = (void *)v23[4];
    uint64_t v26 = v23 + 5;
    if (v25 != v23 + 5)
    {
      do
      {
        uint64_t v27 = *((void *)this + 3) + 120;
        unint64_t v51 = (long long *)(v25 + 4);
        uint64_t v28 = sub_216BCD3CC(v27, (unsigned __int8 *)v25 + 32, (uint64_t)&unk_2174BFD90, &v51);
        uint64_t v29 = (atomic_uint *)(v28 + 40);
        uint64_t v30 = sub_216BCCD64(*((void *)v28 + 5), *((void *)v28 + 6), (uint64_t)&v54);
        uint64_t v31 = *((void *)v28 + 6);
        if (v30 + 16 != v31)
        {
          do
          {
            uint64_t v32 = v30 + 16;
            sub_21697D0EC(v30, v30 + 16);
            uint64_t v33 = v30 + 32;
            v30 += 16;
          }
          while (v33 != v31);
          uint64_t v30 = v32;
        }
        sub_216850C48(v29, v30);
        char v34 = (void *)v25[1];
        if (v34)
        {
          do
          {
            uint64_t v35 = v34;
            char v34 = (void *)*v34;
          }
          while (v34);
        }
        else
        {
          do
          {
            uint64_t v35 = (void *)v25[2];
            BOOL v36 = *v35 == (void)v25;
            uint64_t v25 = v35;
          }
          while (!v36);
        }
        uint64_t v25 = v35;
      }
      while (v35 != v26);
    }
  }
  Muteduint64_t Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetMutedLayers(a2);
  if (*(void *)(MutedLayers + 16))
  {
    if (v24)
    {
      uint64_t v38 = v24 + 4;
    }
    else
    {
      uint64_t v39 = *((void *)this + 3) + 160;
      unint64_t v51 = &v54;
      uint64_t v38 = sub_216BCD838(v39, (uint64_t)&v54, (uint64_t)&unk_2174BFD90, (void **)&v51) + 4;
    }
    sub_216BCDAF4((uint64_t *)&v51, *(const void ***)MutedLayers, (const void ***)(MutedLayers + 8));
    long long v40 = v38 + 1;
    sub_21678A498((uint64_t)v38, (char *)v38[1]);
    uint64_t v41 = v52;
    void *v38 = v51;
    v38[1] = v41;
    uint64_t v42 = v53;
    void v38[2] = v53;
    if (v42)
    {
      *(void *)(v41 + 16) = v40;
      unint64_t v51 = (long long *)&v52;
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      uint64_t v41 = 0;
    }
    else
    {
      void *v38 = v40;
    }
    sub_21678A498((uint64_t)&v51, (char *)v41);
  }
  else if (v24)
  {
    sub_216BCD790((void *)(*((void *)this + 3) + 160), (uint64_t)&v54);
  }
  uint64_t v45 = *(const void ***)MutedLayers;
  uint64_t v43 = (const void **)(MutedLayers + 8);
  long long v44 = v45;
  if (v45 != v43)
  {
    do
    {
      uint64_t v46 = *((void *)this + 3) + 120;
      unint64_t v51 = (long long *)(v44 + 4);
      uint64_t v47 = sub_216BCD3CC(v46, (unsigned __int8 *)v44 + 32, (uint64_t)&unk_2174BFD90, &v51);
      sub_216BCACC4((uint64_t *)v47 + 5, &v54);
      uint64_t v48 = (const void **)v44[1];
      if (v48)
      {
        do
        {
          uint64_t v49 = v48;
          uint64_t v48 = (const void **)*v48;
        }
        while (v48);
      }
      else
      {
        do
        {
          uint64_t v49 = (const void **)v44[2];
          BOOL v36 = *v49 == v44;
          long long v44 = v49;
        }
        while (!v36);
      }
      long long v44 = v49;
    }
    while (v49 != v43);
  }
  uint64_t result = *((void *)&v54 + 1);
  if (*((void *)&v54 + 1))
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v54 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result); {
  }
    }
  return result;
}

void sub_216BCA79C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14)
{
  if (a14)
  {
    if (atomic_fetch_add_explicit(a14 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a14 + 8))(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_216BCA810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, atomic_uint *a11)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  JUMPOUT(0x216BCA7C8);
}

void *sub_216BCA858@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (void **)result[29];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v2) {
    return sub_216BCBAB4(a2, *v2, v2[1], ((char *)v2[1] - (char *)*v2) >> 4);
  }
  return result;
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::Find@<X0>(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (atomic_ullong *)(*((void *)this + 3) + 384);
  v8[0] = 0;
  __int16 v9 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v8, v6, 0);
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_Find(this, a2, a3);
  return sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)v8);
}

void sub_216BCA8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::Contains(uint64_t a1, uint64_t *a2)
{
  if (!a2[1]) {
    return 0;
  }
  uint64_t v4 = sub_216850B68(a2 + 1);
  uint64_t v5 = *a2;
  if (!*(unsigned char *)(v4 + 14) || v5 == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(v5 + 112);
  if (v8)
  {
    if (*(unsigned char *)(sub_216850B68((uint64_t *)(v5 + 112)) + 14)) {
      uint64_t v8 = *(void *)(v5 + 104);
    }
    else {
      uint64_t v8 = 0;
    }
  }
  return v8 == a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::FindAllUsingLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (atomic_ullong *)(*(void *)(a1 + 24) + 384);
  v8[0] = 0;
  __int16 v9 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v8, v4, 0);
  uint64_t v5 = sub_216851C48((void *)(*(void *)(a1 + 24) + 40), a2);
  if (v5) {
    uint64_t v6 = (uint64_t)(v5 + 4);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 24) + 200;
  }
  sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)v8);
  return v6;
}

void sub_216BCA9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::GetAllLayerStacks@<X0>(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (atomic_ullong *)(*((void *)this + 3) + 384);
  v24[0] = 0;
  __int16 v25 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v24, v4, 0);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_216BCABB4(a2, *(void *)(*((void *)this + 3) + 24));
  uint64_t v22 = *(void *)(*((void *)this + 3) + 16);
  uint64_t v23 = 0;
  while (v22 != v23)
  {
    uint64_t v7 = sub_216BCAC48(&v22, v5, v6);
    uint64_t v8 = sub_216BCA2D4((void *)(*v7 + 96));
    if (!(v9 & 1 | (unint64_t)v8))
    {
      v20[0] = "pcp/layerStackRegistry.cpp";
      v20[1] = "GetAllLayerStacks";
      _OWORD v20[2] = 232;
      v20[3] = "std::vector<PcpLayerStackPtr> pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::GetAllLayerStacks() const";
      char v21 = 0;
      uint64_t v12 = sub_216BCAC48(&v22, v9, v10);
      sub_216BBBE60((uint64_t *)(*v12 + 16));
      if (v19 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      uint64_t v16 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Unexpected dead layer stack %s", v13, v14, p_p);
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v20, "i->second", v16);
      if (v19 < 0) {
        operator delete(__p);
      }
    }
    char v11 = sub_216BCAC48(&v22, v9, v10);
    sub_216BCACC4(a2, (long long *)(*v11 + 96));
    sub_216BCADE0((uint64_t)&v22);
  }
  return sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)v24);
}

void sub_216BCAB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_216850BF4((void ***)&__p);
  sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_216BCABB4(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_216787EE0(result, a2);
    v7[1] = v7[0] + v5;
    uint64_t v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 16 * v6;
    sub_216BCC7D8(a1, v7);
    return sub_216852520((uint64_t)v7);
  }
  return result;
}

void sub_216BCAC34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216852520((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216BCAC48(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    uint64_t v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::unordered_map<pxrInternal__aapl__pxrReserved__::"
            "PcpLayerStackIdentifier, pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PcpLa"
            "yerStack>, pxrInternal__aapl__pxrReserved__::TfHash>>::operator->() [T = std::unordered_map<pxrInternal__aap"
            "l__pxrReserved__::PcpLayerStackIdentifier, pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__px"
            "rReserved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_216BCACC4(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)sub_216787EE0(result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v17 + 1) + 8), 1u, memory_order_relaxed);
    }
    void v18[2] = v15 + 16;
    sub_216BCC7D8(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = sub_216852520((uint64_t)v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_216BCADCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216852520((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BCADE0(uint64_t a1)
{
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    uint64_t v3[2] = 250;
    void v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::unordered_map<pxrInternal__aapl__p"
            "xrReserved__::PcpLayerStackIdentifier, pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrRes"
            "erved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::TfHash>>::operator++() [T = std::unordered_map<px"
            "rInternal__aapl__pxrReserved__::PcpLayerStackIdentifier, pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInte"
            "rnal__aapl__pxrReserved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(void *)a1 = **(void **)a1;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::ForEachLayerStack(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::GetAllLayerStacks(a1, v5);
  uint64_t v3 = v5[0];
  uint64_t v4 = v5[1];
  while (v3 != v4)
  {
    (*(void (**)(void, uint64_t))(a2 + 8))(*(void *)a2, v3);
    v3 += 16;
  }
  unint64_t v6 = (void **)v5;
  sub_216850BF4(&v6);
}

void sub_216BCAEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216850BF4(&a12);
  _Unwind_Resume(a1);
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_SetLayersAndRemove(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *this, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a2, const pxrInternal__aapl__pxrReserved__::PcpLayerStack *a3)
{
  unint64_t v6 = (atomic_ullong *)(*((void *)this + 3) + 384);
  v9[0] = 0;
  __int16 v10 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v9, v6, 1);
  uint64_t v7 = sub_216BCC6D0(*((void **)this + 3), (uint64_t)a2);
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_SetLayers(this, a3);
  if (v7 && (const pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(v7 + 12) == a3) {
    sub_216BCC91C(*((void **)this + 3), (uint64_t)a2);
  }
  return sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)v9);
}

void sub_216BCAF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_GetRootLayerStackIdentifier(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *this)
{
  return *((void *)this + 3) + 224;
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_GetFileFormatTarget(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *this)
{
  return *((void *)this + 3) + 304;
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_IsUsd(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *this)
{
  return *(unsigned __int8 *)(*((void *)this + 3) + 328);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_GetMutedLayers(pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *this)
{
  return *((void *)this + 3) + 336;
}

void pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers::_GetCanonicalLayerId(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v17 = 0;
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v14 = (uint64_t *)v15;
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::SplitIdentifier(a3, v16, &v14) & 1) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_13;
  }
  IsAnonymousLayeruint64_t Identifier = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::SdfLayer::IsAnonymousLayerIdentifier(v16);
  if (IsAnonymousLayerIdentifier)
  {
    if (SHIBYTE(v17) < 0)
    {
      sub_216778F24(__p, v16[0], (unint64_t)v16[1]);
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)v16;
      uint64_t v13 = v17;
    }
  }
  else
  {
    Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(IsAnonymousLayerIdentifier);
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetResolvedPath(v9);
    pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier((uint64_t)Resolver);
  }
  __int16 v10 = (void *)HIBYTE(v13);
  char v11 = HIBYTE(v13);
  if (v13 < 0) {
    __int16 v10 = __p[1];
  }
  if (v10)
  {
    pxrInternal__aapl__pxrReserved__::Pcp_StripFileFormatTarget(a1, &v14);
    pxrInternal__aapl__pxrReserved__::SdfLayer::CreateIdentifier(__p, &v14);
    if ((v13 & 0x8000000000000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (v11 < 0) {
LABEL_12:
  }
    operator delete(__p[0]);
LABEL_13:
  sub_2167877AC((uint64_t)&v14, v15[0]);
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[0]);
  }
}

void sub_216BCB108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, void *a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2167877AC((uint64_t)&a16, a17);
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers::Pcp_MutedLayers(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v3;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  return __dst;
}

{
  long long v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v3;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  return __dst;
}

long long *sub_216BCB1FC(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = (long long *)a2;
  unint64_t v6 = a1[1];
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if (v6 >= v9)
  {
    uint64_t v10 = *a1;
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v11 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v10) >> 3);
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v10) >> 3);
    unint64_t v14 = 2 * v13;
    if (2 * v13 <= v11) {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    }
    if (v13 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v22 = v7;
    if (v15) {
      uint64_t v16 = (char *)sub_216782ED8(v7, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v18 = v16;
    char v19 = &v16[24 * v12];
    uint64_t v20 = v19;
    char v21 = &v16[24 * v15];
    sub_216BCDBDC(&v18, a3);
    uint64_t v4 = (long long *)sub_21680F250((uint64_t)a1, &v18, v4);
    sub_216790E64((uint64_t)&v18);
  }
  else if (a2 == v6)
  {
    sub_2167E99E4(a1, a3);
  }
  else
  {
    sub_21680F12C((uint64_t)a1, a2, v6, a2 + 24);
    if (v4 <= a3) {
      a3 = (long long *)((char *)a3 + 24 * (a1[1] > (unint64_t)a3));
    }
    std::string::operator=((std::string *)v4, (const std::string *)a3);
  }
  return v4;
}

void sub_216BCB35C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216790E64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BCB370(uint64_t a1, uint64_t a2, long long *a3, char a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 8sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 16sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(void *)(a1 + 20sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a1 + 232) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
  }
  *(void *)(a1 + 24sub_2168EBBB8(&a9, 0) = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  *(void *)(a1 + 248) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
  }
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  sub_21695F340((void *)(a1 + 256), *(void **)(a2 + 32), *(void **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4);
  *(void *)(a1 + 28sub_2168EBBB8(&a9, 0) = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 64);
  *(void *)(a1 + 288) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 296) = *(void *)(a2 + 72);
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 304), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v11 = *a3;
    *(void *)(a1 + 32sub_2168EBBB8(&a9, 0) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 304) = v11;
  }
  *(unsigned char *)(a1 + 328) = a4;
  unint64_t v12 = (unsigned char *)(a1 + 336);
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(v12, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v13 = *a3;
    *(void *)(a1 + 352) = *((void *)a3 + 2);
    *(_OWORD *)unint64_t v12 = v13;
  }
  *(void *)(a1 + 36sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  __dmb(0xBu);
  *(void *)(a1 + 384) = 0;
  return a1;
}

void sub_216BCB51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (*(char *)(v3 + 327) < 0) {
    operator delete(*v8);
  }
  sub_216BCB5AC(v7);
  sub_216850BF4((void ***)va);
  sub_216BCB670(v6);
  sub_216BCB774(v5);
  sub_216BCB83C(v4);
  sub_216BCB83C(a3);
  sub_216BCB934(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_216BCB5AC(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 56));
  uint64_t v5 = (void **)(a1 + 32);
  sub_216787968(&v5);
  uint64_t v2 = *(atomic_uint **)(a1 + 24);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(atomic_uint **)(a1 + 8);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t sub_216BCB670(uint64_t a1)
{
  sub_216BCB6AC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216BCB6AC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216BCB6F0((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

atomic_uint *sub_216BCB6F0(uint64_t a1)
{
  sub_21678A498(a1 + 16, *(char **)(a1 + 24));
  uint64_t result = *(atomic_uint **)(a1 + 8);
  if (result && atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (atomic_uint *)v3();
  }
  return result;
}

uint64_t sub_216BCB774(uint64_t a1)
{
  sub_216BCB7B0(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216BCB7B0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216BCB7F4((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216BCB7F4(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  sub_216850BF4(&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t sub_216BCB83C(uint64_t a1)
{
  sub_216BCB878(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216BCB878(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216BCB8BC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

atomic_uint *sub_216BCB8BC(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 16);
  sub_216850BF4(&v3);
  uint64_t result = *(atomic_uint **)(a1 + 8);
  if (result)
  {
    if (atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t sub_216BCB934(uint64_t a1)
{
  sub_216BCB970(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216BCB970(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216BCB9B4((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

atomic_uint *sub_216BCB9B4(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 88);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 56));
  uint64_t v5 = (void **)(a1 + 32);
  sub_216787968(&v5);
  uint64_t v3 = *(atomic_uint **)(a1 + 24);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  uint64_t result = *(atomic_uint **)(a1 + 8);
  if (result)
  {
    if (atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void *sub_216BCBAB4(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_21682BF78(result, a4);
    uint64_t result = sub_216BCBB3C((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216BCBB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216787968(&a9);
  _Unwind_Resume(a1);
}

void *sub_216BCBB3C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  uint64_t v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_216BCBBCC((uint64_t)v7);
  return v4;
}

uint64_t sub_216BCBBCC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2168B84AC(a1);
  }
  return a1;
}

void sub_216BCBC04(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216BCBC44(v3);
    operator delete(v4);
  }
}

uint64_t sub_216BCBC44(uint64_t a1)
{
  uint64_t v5 = (void **)(a1 + 360);
  sub_216782F20(&v5);
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*(void **)(a1 + 336));
  }
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 280));
  uint64_t v5 = (void **)(a1 + 256);
  sub_216787968(&v5);
  uint64_t v2 = *(atomic_uint **)(a1 + 248);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(atomic_uint **)(a1 + 232);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v5 = (void **)(a1 + 200);
  sub_216850BF4(&v5);
  sub_216BCB670(a1 + 160);
  sub_216BCB774(a1 + 120);
  sub_216BCB83C(a1 + 80);
  sub_216BCB83C(a1 + 40);
  return sub_216BCB934(a1);
}

uint64_t sub_216BCBD6C(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  if (*(unsigned char *)(sub_216850B68(v2) + 14)) {
    return *a1;
  }
  return 0;
}

void *sub_216BCBDB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * *(void *)(a2 + 72));
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      long long v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v7)
          {
            if (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==((uint64_t)(v13 + 2), a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v8) {
                v14 %= v8;
              }
            }
            else
            {
              v14 &= v8 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          long long v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  sub_216BCC040(a1, v7, a4, (uint64_t)v24);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_21678A04C(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  char v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  long long v13 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216BCC178((uint64_t)v24, 0);
  return v13;
}

void sub_216BCC028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BCC178((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_216BCC040@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x70uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_216BCC0B0(v8 + 2, *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216BCC098(_Unwind_Exception *a1)
{
  sub_216BCC178(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_216BCC0B0(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  sub_21695F340(a1 + 4, *(void **)(a2 + 32), *(void **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4);
  uint64_t v6 = *(void *)(a2 + 64);
  a1[7] = *(void *)(a2 + 56);
  a1[8] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a2 + 72);
  a1[10] = 0;
  a1[11] = 0;
  a1[9] = v7;
  return a1;
}

void sub_216BCC158(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4) {
    sub_217324248(v4);
  }
  sub_217324A60(v2);
  _Unwind_Resume(a1);
}

void sub_216BCC178(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216BCB9B4((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *sub_216BCC1D0(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_21685203C((unint64_t *)(a2 + 16), &v6);
    uint64_t v3 = (atomic_uint *)a1[1];
    a1[1] = v6;
    uint64_t v6 = 0;
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
      }
      uint64_t v4 = v6;
      if (v6 && atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
  }
  return a1;
}

void sub_216BCC29C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_217324208(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216BCC2B4(uint64_t *a1, void *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 4;
      if (v20 >= a5)
      {
        char v21 = &a3[2 * a5];
      }
      else
      {
        char v21 = &a3[2 * v20];
        a1[1] = (uint64_t)sub_216BCBB3C((uint64_t)v9, v21, a4, (void *)*(v9 - 1));
        if (v19 < 1) {
          return v5;
        }
      }
      sub_216970260((uint64_t)a1, v5, v12, (uint64_t)&v5[2 * a5]);
      sub_216BCC514((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60) {
        sub_21677CB10();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      if (v16 >> 3 > v14) {
        unint64_t v14 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      v26[4] = v9;
      if (v17) {
        unint64_t v18 = (char *)sub_216787EE0((uint64_t)v9, v17);
      }
      else {
        unint64_t v18 = 0;
      }
      unint64_t v22 = (uint64_t *)&v18[16 * v15];
      v26[0] = v18;
      v26[1] = v22;
      _DWORD v26[3] = &v18[16 * v17];
      uint64_t v23 = &v22[2 * a5];
      do
      {
        *unint64_t v22 = *v7;
        uint64_t v24 = v7[1];
        v22[1] = v24;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        v22 += 2;
        v7 += 2;
      }
      while (v22 != v23);
      uint64_t v26[2] = v23;
      uint64_t v5 = (void *)sub_216BCC460(a1, v26, v5);
      sub_216788028(v26);
    }
  }
  return v5;
}

void sub_216BCC440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216BCC460(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_216BCC590((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_216BCC624(v7, (uint64_t)a3, a1[1], (_OWORD *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t *sub_216BCC514(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v8 = *v5;
    uint64_t v7 = v5[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (std::__shared_weak_count *)a4[1];
    *a4 = v8;
    a4[1] = v7;
    if (v9) {
      sub_216784EC4(v9);
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_216BCC590(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216BCC698((uint64_t)v12);
  return v10;
}

_OWORD *sub_216BCC624(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4 = a4;
  long long v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  _OWORD v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4++ = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      a2 += 16;
    }
    while (a2 != a3);
    long long v9 = v4;
  }
  char v7 = 1;
  sub_216BCBBCC((uint64_t)v6);
  return v4;
}

uint64_t sub_216BCC698(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216787FE4(a1);
  }
  return a1;
}

void *sub_216BCC6D0(void *a1, uint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * *(void *)(a2 + 72));
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  unint64_t v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v7 = v4;
    if (v4 >= *(void *)&v2) {
      unint64_t v7 = v4 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v2 - 1) & v4;
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  long long v9 = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = v9[1];
      if (v10 == v4)
      {
        if (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==((uint64_t)(v9 + 2), a2)) {
          return v9;
        }
      }
      else
      {
        if (v6 > 1)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      long long v9 = (void *)*v9;
    }
    while (v9);
  }
  return v9;
}

uint64_t sub_216BCC7D8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216BCC850((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216BCC850(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216BCC8E4((uint64_t)v12);
  return v10;
}

uint64_t sub_216BCC8E4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_21685249C(a1);
  }
  return a1;
}

uint64_t sub_216BCC91C(void *a1, uint64_t a2)
{
  uint64_t result = (uint64_t)sub_216BCC6D0(a1, a2);
  if (result)
  {
    sub_216851DB0(a1, (void *)result, (uint64_t)v4);
    sub_216BCC178((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

void *sub_216BCC96C(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_21685203C((unint64_t *)(a2 + 16), &v6);
    uint64_t v3 = (atomic_uint *)a1[1];
    a1[1] = v6;
    uint64_t v6 = 0;
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
      }
      uint64_t v4 = v6;
      if (v6 && atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
  }
  return a1;
}

void sub_216BCCA38(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_217324208(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216BCCA50(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * sub_216851B24(a2));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    unint64_t v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      char v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            uint64_t v15 = sub_216851B24((uint64_t)(v13 + 2));
            if (v15 == sub_216851B24(a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          char v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v16 = operator new(0x38uLL);
  v28[0] = v16;
  v28[1] = a1 + 16;
  *uint64_t v16 = 0;
  v16[1] = v8;
  unint64_t v17 = *a4;
  v16[2] = **a4;
  uint64_t v18 = v17[1];
  v16[3] = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 + 8), 1u, memory_order_relaxed);
  }
  void v16[4] = 0;
  v16[5] = 0;
  void v16[6] = 0;
  char v29 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_21678A04C(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  __int16 v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)v28[0] = *v25;
    void *v25 = v28[0];
  }
  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v28[0])
    {
      unint64_t v26 = *(void *)(*(void *)v28[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v26 >= v9) {
          v26 %= v9;
        }
      }
      else
      {
        v26 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v28[0];
    }
  }
  char v13 = (void *)v28[0];
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216BCCD0C((uint64_t)v28, 0);
  return v13;
}

void sub_216BCCCF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BCCD0C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_216BCCD0C(uint64_t a1, uint64_t a2)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216BCB8BC((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_216BCCD64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      uint64_t v6 = sub_216851B24(v3);
      if (v6 == sub_216851B24(a3)) {
        break;
      }
      v3 += 16;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

uint64_t sub_216BCCDCC(void *a1, uint64_t a2)
{
  uint64_t result = (uint64_t)sub_216851C48(a1, a2);
  if (result)
  {
    sub_216851DB0(a1, (void *)result, (uint64_t)v4);
    sub_216BCCD0C((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

uint64_t *sub_216BCCE1C(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void *)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    sub_2168EB3BC(a1);
    if (a4 >> 60) {
      sub_21677CB10();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_21682BF78((void *)a1, v12);
    uint64_t result = sub_216BCCF4C(v8, a2, a3, *(uint64_t **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (*(void *)(a1 + 8) - v9) >> 4;
  if (v14 < a4)
  {
    uint64_t v15 = &a2[v14];
    sub_216BCD02C((uint64_t)&v17, a2, v15, v9);
    uint64_t result = sub_216BCCF4C(v8, v15, a3, *(uint64_t **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  sub_216BCD02C((uint64_t)&v18, a2, a3, v9);
  return (uint64_t *)sub_216850C48((atomic_uint *)a1, v16);
}

void sub_216BCCF3C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216BCCF44(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *sub_216BCCF4C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216ABBA60(v4, v6++);
      unint64_t v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_216BCCFF4((uint64_t)v8);
  return v4;
}

void sub_216BCCFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216BCCFF4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2168E4A2C(a1);
  }
  return a1;
}

uint64_t *sub_216BCD02C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      sub_216ABBA60((uint64_t *)&v10, v5);
      uint64_t v7 = *(atomic_uint **)(a4 + 8);
      *(_OWORD *)a4 = v10;
      *((void *)&v10 + 1) = 0;
      if (v7)
      {
        if (atomic_fetch_add_explicit(v7 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v7 + 8))(v7);
        }
        uint64_t v8 = *((void *)&v10 + 1);
        *(void *)&long long v10 = 0;
        if (*((void *)&v10 + 1)
          && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void *sub_216BCD124(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * sub_216851B24(a2));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    unint64_t v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      char v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            uint64_t v15 = sub_216851B24((uint64_t)(v13 + 2));
            if (v15 == sub_216851B24(a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          char v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v16 = operator new(0x38uLL);
  v27[0] = v16;
  v27[1] = a1 + 16;
  *uint64_t v16 = 0;
  v16[1] = v8;
  char v17 = *a4;
  *((_OWORD *)v16 + 1) = **a4;
  *char v17 = 0;
  v17[1] = 0;
  v16[5] = 0;
  void v16[6] = 0;
  void v16[4] = 0;
  char v28 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_21678A04C(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  size_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    void *v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v25 >= v9) {
          v25 %= v9;
        }
      }
      else
      {
        v25 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  char v13 = (void *)v27[0];
  v27[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216BCCD0C((uint64_t)v27, 0);
  return v13;
}

void sub_216BCD3B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BCCD0C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_216BCD3CC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = a2;
  unint64_t v26 = 0;
  char v27 = 0;
  unint64_t v8 = (char *)*((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    unint64_t v9 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    unint64_t v9 = v8;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v26, (pxrInternal__aapl__pxrReserved__ *)a2, v9);
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * (void)v26);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_2168513F8(a1 + 32, i + 16, v6)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_216BCD694(a1, v10, a4, (uint64_t)&v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  size_t v23 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)unint64_t v26 = *v23;
    uint64_t *v23 = v26;
  }
  else
  {
    *(void *)unint64_t v26 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26)
    {
      unint64_t v24 = *(void *)(*(void *)v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26;
    }
  }
  uint64_t i = v26;
  unint64_t v26 = 0;
  ++*(void *)(a1 + 24);
  sub_216BCD738((uint64_t)&v26, 0);
  return i;
}

void sub_216BCD67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216BCD738((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned char *sub_216BCD694@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  uint64_t result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    void v8[4] = *((void *)v10 + 2);
    *(_OWORD *)uint64_t result = v11;
  }
  void v8[5] = 0;
  v8[6] = 0;
  void v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216BCD720(_Unwind_Exception *a1)
{
  sub_216BCD738(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216BCD738(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216BCB7F4((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_216BCD790(void *a1, uint64_t a2)
{
  uint64_t result = (uint64_t)sub_216851C48(a1, a2);
  if (result)
  {
    sub_216851DB0(a1, (void *)result, (uint64_t)v4);
    sub_216BCD7E0((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

void sub_216BCD7E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216BCB6F0((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *sub_216BCD838(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * sub_216851B24(a2));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    uint8x8_t v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            uint64_t v15 = sub_216851B24((uint64_t)(v13 + 2));
            if (v15 == sub_216851B24(a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  unint64_t v16 = operator new(0x38uLL);
  v28[0] = v16;
  v28[1] = a1 + 16;
  *unint64_t v16 = 0;
  v16[1] = v8;
  float v17 = *a4;
  v16[2] = **a4;
  uint64_t v18 = v17[1];
  v16[3] = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 + 8), 1u, memory_order_relaxed);
  }
  v16[5] = 0;
  void v16[6] = 0;
  void v16[4] = v16 + 5;
  char v29 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_21678A04C(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  unint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)v28[0] = *v25;
    void *v25 = v28[0];
  }
  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v28[0])
    {
      unint64_t v26 = *(void *)(*(void *)v28[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v26 >= v9) {
          v26 %= v9;
        }
      }
      else
      {
        v26 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v28[0];
    }
  }
  unint64_t v13 = (void *)v28[0];
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216BCD7E0((uint64_t)v28, 0);
  return v13;
}

void sub_216BCDADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BCD7E0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_216BCDAF4(uint64_t *a1, const void **a2, const void ***a3)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_216ABD298(a1, a2, a3);
  return a1;
}

void sub_216BCDB2C(_Unwind_Exception *a1)
{
  sub_21678A498(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

const void **sub_216BCDB44(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  unint64_t v4 = a1;
  if (a2 != a1)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
    do
    {
      unint64_t v8 = &v4[3 * (v7 >> 1)];
      BOOL v9 = sub_21677B108(a4, v8, a3);
      if (v9) {
        v7 += ~(v7 >> 1);
      }
      else {
        v7 >>= 1;
      }
      if (v9) {
        unint64_t v4 = v8 + 3;
      }
    }
    while (v7);
  }
  return v4;
}

void *sub_216BCDBDC(void *result, long long *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (v4 == result[3])
  {
    uint64_t v5 = (long long *)result[1];
    if ((unint64_t)v5 <= *result)
    {
      uint64_t v11 = v4 - *result;
      BOOL v10 = v11 == 0;
      uint64_t v12 = 0x5555555555555556 * (v11 >> 3);
      if (v10) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v13 >> 2;
      uint64_t v15 = result[4];
      uint64_t v32 = v3[4];
      unint64_t v16 = (char *)sub_216782ED8(v15, v13);
      uint64_t v18 = &v16[24 * v14];
      unint64_t v19 = v3[1];
      int64_t v20 = v3[2] - v19;
      if (v20)
      {
        uint64_t v21 = v20 / 24;
        unint64_t v22 = &v18[24 * v21];
        uint64_t v23 = 24 * v21;
        size_t v24 = &v16[24 * v14];
        do
        {
          long long v25 = *(_OWORD *)v19;
          *((void *)v24 + 2) = *(void *)(v19 + 16);
          *(_OWORD *)size_t v24 = v25;
          v24 += 24;
          *(void *)(v19 + 8) = 0;
          *(void *)(v19 + 16) = 0;
          *(void *)unint64_t v19 = 0;
          v19 += 24;
          v23 -= 24;
        }
        while (v23);
        int64x2_t v26 = *(int64x2_t *)(v3 + 1);
      }
      else
      {
        int64x2_t v26 = vdupq_n_s64(v19);
        unint64_t v22 = &v16[24 * v14];
      }
      uint64_t v29 = *v3;
      void *v3 = v16;
      v3[1] = v18;
      int64x2_t v30 = v26;
      uint64_t v27 = v3[3];
      uint64_t v3[2] = v22;
      void v3[3] = &v16[24 * v17];
      uint64_t v31 = v27;
      uint64_t result = (void *)sub_216790E64((uint64_t)&v29);
      uint64_t v4 = v3[2];
    }
    else
    {
      int64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *result) >> 3);
      if (v6 >= -1) {
        uint64_t v7 = v6 + 1;
      }
      else {
        uint64_t v7 = v6 + 2;
      }
      uint64_t v8 = -3 * (v7 >> 1);
      uint64_t result = sub_216A3104C((uint64_t)&v29, v5, (long long *)v4, (uint64_t)v5 - 24 * (v7 >> 1));
      uint64_t v4 = v9;
      v3[1] += 8 * v8;
      uint64_t v3[2] = v9;
    }
  }
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_216778F24((unsigned char *)v4, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v28 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v28;
  }
  v3[2] += 24;
  return result;
}

atomic_uint **pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_Node::SetArc(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 48) >= 0x10000u)
  {
    uint64_t v17 = (atomic_uint *)"pcp/primIndex_Graph.cpp";
    uint64_t v18 = "SetArc";
    uint64_t v19 = 91;
    int64_t v20 = "void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_Node::SetArc(const PcpArc &)";
    char v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "static_cast<size_t>(arc.siblingNumAtOrigin) <= ((1lu << _nodeIndexSize) - 1)", 0);
  }
  if (*(_DWORD *)(a2 + 52) >= 0x10000u)
  {
    uint64_t v17 = (atomic_uint *)"pcp/primIndex_Graph.cpp";
    uint64_t v18 = "SetArc";
    uint64_t v19 = 93;
    int64_t v20 = "void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_Node::SetArc(const PcpArc &)";
    char v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "static_cast<size_t>(arc.namespaceDepth) <= ((1lu << _depthSize) - 1)", 0);
  }
  if ((unint64_t)(*(void *)(a2 + 16) + 1) >= 0x10000)
  {
    uint64_t v17 = (atomic_uint *)"pcp/primIndex_Graph.cpp";
    uint64_t v18 = "SetArc";
    uint64_t v19 = 95;
    int64_t v20 = "void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_Node::SetArc(const PcpArc &)";
    char v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "arc.parent._GetNodeIndex() + 1 <= _invalidNodeIndex", 0);
  }
  if ((unint64_t)(*(void *)(a2 + 32) + 1) >= 0x10000)
  {
    uint64_t v17 = (atomic_uint *)"pcp/primIndex_Graph.cpp";
    uint64_t v18 = "SetArc";
    uint64_t v19 = 96;
    int64_t v20 = "void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_Node::SetArc(const PcpArc &)";
    char v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "arc.origin._GetNodeIndex() + 1 <= _invalidNodeIndex", 0);
  }
  *(unsigned char *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(_DWORD *)a2;
  *(_WORD *)(a1 + 36) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 38) = *(_DWORD *)(a2 + 52);
  uint64_t v4 = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 26) = *(void *)(a2 + 32);
  if (!*(void *)(a2 + 8) || v4 == -1)
  {
    pxrInternal__aapl__pxrReserved__::PcpMapExpression::Identity(&v16);
    uint64_t v11 = v16;
    unint64_t v13 = *(atomic_uint **)(a1 + 8);
    uint64_t v12 = a1 + 8;
    unint64_t v16 = 0;
    uint64_t v17 = v13;
    *(void *)uint64_t v12 = v11;
    sub_216BD0624(&v17, v14);
    sub_216BD05D4((atomic_uint **)(v12 + 8), (uint64_t *)v12);
  }
  else
  {
    sub_216BD05D4((atomic_uint **)(a1 + 16), (uint64_t *)(a2 + 40));
    MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(a2 + 8));
    pxrInternal__aapl__pxrReserved__::PcpMapExpression::Compose(MapToRoot, (const pxrInternal__aapl__pxrReserved__::PcpMapExpression *)(a1 + 16), v6, (uint64_t *)&v16);
    uint64_t v7 = v16;
    uint64_t v8 = *(atomic_uint **)(a1 + 8);
    unint64_t v16 = 0;
    uint64_t v17 = v8;
    *(void *)(a1 + 8) = v7;
    sub_216BD0624(&v17, v9);
  }
  return sub_216BD0624(&v16, v10);
}

void sub_216BCDF84(_Unwind_Exception *a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, atomic_uint *a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::New@<X0>(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *a2@<X1>, pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **a3@<X8>)
{
  int v3 = (int)a2;
  sub_216851EE4((uint64_t)&v9, "Pcp", "PcpPrimIndex_Graph");
  int64_t v6 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)operator new(0x40uLL);
  uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::PcpPrimIndex_Graph(v6, this, v3);
  *a3 = v6;
  while (v10--)
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v9);
  return result;
}

void sub_216BCE020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  operator delete(v9);
  sub_21684E6B8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::New@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  sub_216851EE4((uint64_t)&v7, "Pcp", "PcpPrimIndex_Graph");
  uint64_t v4 = operator new(0x40uLL);
  uint64_t result = sub_216BD0658((uint64_t)v4, *a1);
  *a2 = v4;
  while (v8--)
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return result;
}

void sub_216BCE0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  operator delete(v9);
  sub_21684E6B8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::PcpPrimIndex_Graph(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this, const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *a2, int a3)
{
  *((_DWORD *)this + 2) = 1;
  *(void *)this = &unk_26C75BB78;
  int64_t v6 = operator new(0x30uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int64_t v6 = &unk_26C75BBB0;
  void v6[4] = 0;
  v6[5] = 0;
  void v6[3] = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = v6 + 3;
  *((void *)this + 3) = v6;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  if (a3) {
    char v7 = 8;
  }
  else {
    char v7 = 0;
  }
  *((unsigned char *)this + 56) = *((unsigned char *)this + 56) & 0xF0 | v7;
  uint64_t v15 = 0;
  uint64_t v16 = -1;
  uint64_t v17 = 0;
  uint64_t v18 = -1;
  int v14 = 0;
  v19[0] = 0;
  v19[1] = 0;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::Identity(&v13);
  int v8 = v13;
  unint64_t v13 = 0;
  int64_t v20 = v19[0];
  v19[0] = v8;
  sub_216BD0624(&v20, v9);
  sub_216BD0624(&v13, v10);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_CreateNode((uint64_t)this, (uint64_t *)a2, (uint64_t)&v14);
  sub_216BD0624(v19, v11);
  return this;
}

void sub_216BCE214(_Unwind_Exception *a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216BD0624(v5, a2);
  sub_216BD0960((void ***)va);
  char v7 = (std::__shared_weak_count *)*((void *)v4 + 3);
  if (v7) {
    sub_216784EC4(v7);
  }
  pxrInternal__aapl__pxrReserved__::TfSimpleRefBase::~TfSimpleRefBase(v4);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_CreateNode(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int64_t v6 = a2 + 1;
  unint64_t v7 = *(void *)(a1 + 40);
  if (v7 >= *(void *)(a1 + 48))
  {
    uint64_t v8 = sub_216BD18E0((uint64_t *)(a1 + 32), v6);
  }
  else
  {
    sub_216BD19E8(*(void *)(a1 + 40), v6);
    uint64_t v8 = v7 + 12;
    *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = v7 + 12;
  }
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = v8;
  sub_216BD0120(*(uint64_t **)(a1 + 16));
  *(unsigned char *)(a1 + 56) &= ~4u;
  uint64_t v9 = *(uint64_t **)(*(void *)(a1 + 16) + 8);
  int v10 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*(v9 - 6);
  v9 -= 6;
  *uint64_t v9 = *a2;
  sub_2168BD80C(a2);
  sub_2168BD378((int)v9, v10);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_Node::SetArc((uint64_t)v9, a3);
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a1 + 16) + 8) - **(void **)(a1 + 16)) >> 4) - 1;
}

void sub_216BCE324(_Unwind_Exception *a1)
{
  *(void *)(v1 + 4sub_2168EBBB8(&a9, 0) = v2;
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::SetHasPayloads(uint64_t this, char a2)
{
  *(unsigned char *)(this + 56) = *(unsigned char *)(this + 56) & 0xFE | a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::HasPayloads(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this)
{
  return *((unsigned char *)this + 56) & 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::SetIsInstanceable(uint64_t this, int a2)
{
  if (a2) {
    char v2 = 2;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(this + 56) = *(unsigned char *)(this + 56) & 0xFD | v2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::IsInstanceable(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this)
{
  return (*((unsigned __int8 *)this + 56) >> 1) & 1;
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetRootNode(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetNodeUsingSite(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = **(void **)(result + 16);
  uint64_t v3 = *(void *)(*(void *)(result + 16) + 8);
  uint64_t v4 = v3 - v2;
  if (v3 == v2) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = v4 / 48;
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  while (1)
  {
    if ((*(unsigned char *)(v2 + 42) & 2) == 0)
    {
      uint64_t v11 = *(void *)(result + 32) + v6;
      if ((*(unsigned char *)(v11 + 10) & 2) == 0 && *(void *)v2 == v10 && *(void *)v11 == v9) {
        break;
      }
    }
    ++v7;
    v2 += 48;
    v6 += 12;
    if (v8 == v7) {
      return 0;
    }
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetNodeIndexesForRange(uint64_t a1, unsigned int a2)
{
  if ((*(unsigned char *)(a1 + 56) & 4) == 0)
  {
    uint64_t v18 = "pcp/primIndex_Graph.cpp";
    uint64_t v19 = "GetNodeIndexesForRange";
    uint64_t v20 = 253;
    char v21 = "std::pair<size_t, size_t> pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetNodeIndexesForRange(PcpRangeType) const";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v18, "_finalized", 0);
  }
  uint64_t v4 = **(void **)(a1 + 16);
  uint64_t v5 = (*(void *)(*(void *)(a1 + 16) + 8) - v4) >> 4;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * v5;
  unint64_t v7 = a2;
  switch(a2)
  {
    case 0u:
      return v7;
    case 6u:
      return 0;
    case 7u:
      return 1;
    case 8u:
      unsigned int v12 = *(unsigned __int16 *)(v4 + 28);
      if (v12 == 0xFFFF) {
        return 0;
      }
      while (*(unsigned char *)(v4 + 48 * v12 + 40) != 5)
      {
        unsigned int v12 = *(unsigned __int16 *)(v4 + 48 * v12 + 34);
        if (v12 == 0xFFFF) {
          return 0;
        }
      }
      return 0;
    case 9u:
      uint64_t v18 = "pcp/primIndex_Graph.cpp";
      uint64_t v19 = "GetNodeIndexesForRange";
      uint64_t v20 = 259;
      char v21 = "std::pair<size_t, size_t> pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetNodeIndexesForRange(PcpRangeType) const";
      char v22 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid range type specified");
      return v6;
    default:
      unsigned int v8 = *(unsigned __int16 *)(v4 + 28);
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * v5;
      if (v8 == 0xFFFF) {
        return v7;
      }
      break;
  }
  while (1)
  {
    int v9 = *(unsigned __int8 *)(v4 + 48 * v8 + 40);
    if (a2 >= 6)
    {
      uint64_t v18 = "pcp/primIndex_Graph.cpp";
      uint64_t v19 = "_GetArcTypeForRangeType";
      uint64_t v20 = 241;
      char v21 = "PcpArcType pxrInternal__aapl__pxrReserved__::_GetArcTypeForRangeType(const PcpRangeType)";
      char v22 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Unhandled range type");
      int v10 = 0;
    }
    else
    {
      int v10 = dword_21747A8BC[a2];
    }
    unint64_t v7 = v8;
    uint64_t v11 = *(uint64_t **)(a1 + 16);
    if (v10 == v9) {
      break;
    }
    uint64_t v4 = *v11;
    unsigned int v8 = *(unsigned __int16 *)(*v11 + 48 * v8 + 34);
    if (v8 == 0xFFFF) {
      return 0xAAAAAAAAAAAAAAABLL * ((v11[1] - v4) >> 4);
    }
  }
  uint64_t v14 = *v11;
  for (unsigned int i = *(unsigned __int16 *)(*v11 + 48 * v8 + 34); i != 0xFFFF; unsigned int i = *(unsigned __int16 *)(v14 + 48 * i + 34))
  {
    int v16 = *(unsigned __int8 *)(v14 + 48 * i + 40);
    if (a2 >= 6)
    {
      uint64_t v18 = "pcp/primIndex_Graph.cpp";
      uint64_t v19 = "_GetArcTypeForRangeType";
      uint64_t v20 = 241;
      char v21 = "PcpArcType pxrInternal__aapl__pxrReserved__::_GetArcTypeForRangeType(const PcpRangeType)";
      char v22 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Unhandled range type");
      int v17 = 0;
    }
    else
    {
      int v17 = dword_21747A8BC[a2];
    }
    if (v17 != v16) {
      break;
    }
    uint64_t v14 = **(void **)(a1 + 16);
  }
  return v7;
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetNodeIndexForNode(uint64_t a1, void *a2)
{
  if (*a2 == a1) {
    return a2[1];
  }
  else {
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a1 + 16) + 8) - **(void **)(a1 + 16)) >> 4);
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetNodeIndexesForSubtreeRange(uint64_t a1, void *a2)
{
  if (*a2 != a1) {
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a1 + 16) + 8) - **(void **)(a1 + 16)) >> 4);
  }
  unint64_t result = a2[1];
  uint64_t v4 = **(void **)(a1 + 16);
  unint64_t v5 = result;
  do
    unint64_t v5 = *(unsigned __int16 *)(v4 + 48 * v5 + 30);
  while (v5 != 0xFFFF);
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::Finalize(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this)
{
  if ((*((unsigned char *)this + 56) & 4) == 0)
  {
    unint64_t v7 = 0;
    unsigned int v8 = 0;
    uint64_t v9 = 0;
    if ((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ComputeStrengthOrderIndexMapping((uint64_t)this, (uint64_t *)&v7) & 1) == 0)pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ApplyNodeIndexMapping(this, (char **)&v7, v2); {
    std::string __p = 0;
    }
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    if (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ComputeEraseCulledNodeIndexMapping(this, &__p)) {
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ApplyNodeIndexMapping(this, (char **)&__p, v3);
    }
    *((unsigned char *)this + 56) |= 4u;
    if (__p)
    {
      unint64_t v5 = __p;
      operator delete(__p);
    }
    if (v7)
    {
      unsigned int v8 = v7;
      operator delete(v7);
    }
  }
}

void sub_216BCE874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ComputeStrengthOrderIndexMapping(uint64_t a1, uint64_t *a2)
{
  sub_21679A004((uint64_t)a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a1 + 16) + 8) - **(void **)(a1 + 16)) >> 4));
  uint64_t v5 = 0;
  return pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ComputeStrengthOrderIndexMappingRecursively(a1, 0, &v5, a2);
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ApplyNodeIndexMapping(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *a1, char **a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_DetachSharedNodePool(a1, (uint64_t)a2, a3);
  std::string::size_type v74 = (uint64_t *)*((void *)a1 + 2);
  BOOL v75 = a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v74[1] - *v74) >> 4);
  if (v5 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a1 + 5) - *((void *)a1 + 4)) >> 2))
  {
    *(void *)&long long v78 = "pcp/primIndex_Graph.cpp";
    *((void *)&v78 + 1)  = "_ApplyNodeIndexMapping";
    uint64_t v79 = 376;
    long long v80 = "void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ApplyNodeIndexMapping(const std::vector<size_t> &)";
    char v81 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v78, "oldNodes.size() == oldUnshared.size()", 0);
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v74[1] - *v74) >> 4);
  }
  unint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v5 != (v6 - *a2) >> 3)
  {
    *(void *)&long long v78 = "pcp/primIndex_Graph.cpp";
    *((void *)&v78 + 1)  = "_ApplyNodeIndexMapping";
    uint64_t v79 = 377;
    long long v80 = "void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ApplyNodeIndexMapping(const std::vector<size_t> &)";
    char v81 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v78, "nodeIndexMap.size() == oldNodes.size()", 0);
    unint64_t v7 = *a2;
    uint64_t v6 = a2[1];
  }
  if (v7 == v6)
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v74[1] - *v74) >> 4);
    unint64_t v13 = v14;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = v7;
    do
    {
      uint64_t v10 = *(void *)v9;
      v9 += 8;
      if (v10 == 0xFFFF) {
        ++v8;
      }
    }
    while (v9 != v6);
    uint64_t v12 = *v74;
    uint64_t v11 = v74[1];
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - *v74) >> 4);
    unint64_t v14 = v13 - v8;
    if (v13 < v8)
    {
      *(void *)&long long v78 = "pcp/primIndex_Graph.cpp";
      *((void *)&v78 + 1)  = "_ApplyNodeIndexMapping";
      uint64_t v79 = 385;
      long long v80 = "void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ApplyNodeIndexMapping(const std::vector<size_t> &)";
      char v81 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v78, "newNumNodes <= oldNumNodes", 0);
      unint64_t v7 = *a2;
      uint64_t v6 = a2[1];
      unint64_t v8 = 1;
    }
    uint64_t v15 = v6 - v7;
    if (v15)
    {
      uint64_t v16 = 0;
      uint64_t v17 = v15 >> 3;
      do
      {
        unint64_t v18 = *(void *)&(*a2)[8 * v16];
        if (v18 >= v14 && v18 != 0xFFFF)
        {
          *(void *)&long long v78 = "pcp/primIndex_Graph.cpp";
          *((void *)&v78 + 1)  = "_ConvertOldToNewIndex";
          uint64_t v79 = 393;
          long long v80 = "pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ApplyNodeIndexMapping(const std::vector<size_t> &"
                ")::_ConvertOldToNewIndex::_ConvertOldToNewIndex(const std::vector<size_t> &, size_t)";
          char v81 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v78, "_table[i] < numNewNodes || _table[i] == _Node::_invalidNodeIndex", 0);
        }
        ++v16;
      }
      while (v17 != v16);
    }
    if (v8)
    {
      if (v11 != v12)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        char v22 = (uint64_t *)*((void *)v75 + 2);
        while (1)
        {
          if (v21 == 0xFFFF)
          {
            uint64_t v23 = *v22;
          }
          else
          {
            uint64_t v23 = *v22;
            if (*(void *)&(*a2)[8 * v21] != 0xFFFFLL)
            {
              uint64_t v34 = *(unsigned __int16 *)(v23 + v20 + 24);
              if (v34 != 0xFFFF && *(void *)&(*a2)[8 * v34] == 0xFFFFLL)
              {
                *(void *)&long long v78 = "pcp/primIndex_Graph.cpp";
                *((void *)&v78 + 1)  = "_ApplyNodeIndexMapping";
                uint64_t v79 = 431;
                long long v80 = "void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ApplyNodeIndexMapping(const std::vector<size_t> &)";
                char v81 = 0;
                pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v78, "!parentWillBeErased", 0);
              }
              goto LABEL_37;
            }
          }
          size_t v24 = (unsigned __int16 *)(v23 + v20);
          uint64_t v25 = *(unsigned __int16 *)(v23 + v20 + 32);
          if (v25 != 0xFFFF) {
            *(_WORD *)(v23 + 48 * *(unsigned __int16 *)(v23 + v20 + 32) + 34)  = v24[17];
          }
          uint64_t v26 = v24[17];
          if (v26 != 0xFFFF) {
            *(_WORD *)(v23 + 48 * v24[17] + 32)  = v25;
          }
          unsigned int v27 = v24[12];
          uint64_t v28 = v23 + 48 * v24[12];
          int v30 = *(unsigned __int16 *)(v28 + 28);
          uint64_t v29 = (_WORD *)(v28 + 28);
          if (v21 == v30) {
            _WORD *v29 = v26;
          }
          uint64_t v31 = v23 + 48 * v27;
          int v33 = *(unsigned __int16 *)(v31 + 30);
          uint64_t v32 = (_WORD *)(v31 + 30);
          if (v21 == v33) {
            _WORD *v32 = v24[16];
          }
LABEL_37:
          ++v21;
          v20 += 48;
          if (v13 == v21) {
            goto LABEL_41;
          }
        }
      }
      unint64_t v13 = 0;
    }
  }
LABEL_41:
  sub_216BD0A8C(&v78, v14);
  sub_216BD0BE0(&v76, v14);
  if (v13)
  {
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    for (uint64_t i = 0; i != v13; ++i)
    {
      if (i != 0xFFFF)
      {
        uint64_t v38 = *(void *)&(*a2)[8 * i];
        if (v38 != 0xFFFF)
        {
          uint64_t v39 = v78;
          uint64_t v40 = v78 + 48 * v38;
          sub_216BCF240((uint64_t *)v40, (uint64_t *)(*v74 + v36));
          unsigned int v43 = *(unsigned __int16 *)(v40 + 24);
          uint64_t v42 = (_WORD *)(v40 + 24);
          uint64_t v41 = v43;
          LOWORD(v44)  = -1;
          if (v43 != 0xFFFFLL) {
            uint64_t v44 = *(void *)&(*a2)[8 * v41];
          }
          *uint64_t v42 = v44;
          uint64_t v45 = v39 + 48 * v38;
          unsigned int v48 = *(unsigned __int16 *)(v45 + 26);
          uint64_t v46 = (_WORD *)(v45 + 26);
          uint64_t v47 = v48;
          LOWORD(v49)  = -1;
          if (v48 != 0xFFFFLL) {
            uint64_t v49 = *(void *)&(*a2)[8 * v47];
          }
          *uint64_t v46 = v49;
          uint64_t v50 = v39 + 48 * v38;
          unsigned int v53 = *(unsigned __int16 *)(v50 + 28);
          unint64_t v51 = (_WORD *)(v50 + 28);
          uint64_t v52 = v53;
          LOWORD(v49)  = -1;
          if (v53 != 0xFFFFLL) {
            uint64_t v49 = *(void *)&(*a2)[8 * v52];
          }
          *unint64_t v51 = v49;
          uint64_t v54 = v39 + 48 * v38;
          unsigned int v57 = *(unsigned __int16 *)(v54 + 30);
          char v55 = (_WORD *)(v54 + 30);
          uint64_t v56 = v57;
          LOWORD(v49)  = -1;
          if (v57 != 0xFFFFLL) {
            uint64_t v49 = *(void *)&(*a2)[8 * v56];
          }
          _WORD *v55 = v49;
          uint64_t v58 = v39 + 48 * v38;
          unsigned int v61 = *(unsigned __int16 *)(v58 + 32);
          int v59 = (_WORD *)(v58 + 32);
          uint64_t v60 = v61;
          LOWORD(v49)  = -1;
          if (v61 != 0xFFFFLL) {
            uint64_t v49 = *(void *)&(*a2)[8 * v60];
          }
          *int v59 = v49;
          uint64_t v62 = v39 + 48 * v38;
          unsigned int v65 = *(unsigned __int16 *)(v62 + 34);
          std::string::size_type v63 = (_WORD *)(v62 + 34);
          uint64_t v64 = v65;
          LOWORD(v49)  = -1;
          if (v65 != 0xFFFFLL) {
            uint64_t v49 = *(void *)&(*a2)[8 * v64];
          }
          _WORD *v63 = v49;
          uint64_t v66 = *((void *)v75 + 4) + v35;
          uint64_t v67 = v76 + 12 * v38;
          sub_2169C487C((int *)v67, (_DWORD *)v66);
          sub_2169C48D4((int *)(v67 + 4), (_DWORD *)(v66 + 4));
          char v68 = *(unsigned char *)(v66 + 10);
          *(_WORD *)(v67 + 8)  = *(_WORD *)(v66 + 8);
          *(unsigned char *)(v67 + 1sub_2168EBBB8(&a9, 0) = v68;
        }
      }
      v36 += 48;
      v35 += 12;
    }
  }
  uint64_t v69 = (long long *)*((void *)v75 + 2);
  long long v70 = *v69;
  *uint64_t v69 = v78;
  long long v78 = v70;
  uint64_t v71 = *((void *)v69 + 2);
  *((void *)v69 + 2)  = v79;
  uint64_t v79 = v71;
  long long v72 = *((_OWORD *)v75 + 2);
  *((_OWORD *)v75 + 2)  = v76;
  long long v76 = v72;
  uint64_t v73 = *((void *)v75 + 6);
  *((void *)v75 + 6)  = v77;
  uint64_t v77 = v73;
  long long v82 = (void **)&v76;
  sub_216BD0960(&v82);
  *(void *)&long long v76 = &v78;
  sub_216BD0B28((void ***)&v76);
}

void sub_216BCEEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216BD0B28((void ***)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ComputeEraseCulledNodeIndexMapping(void *a1, void *a2)
{
  uint64_t v4 = (uint64_t *)a1[2];
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  uint64_t v7 = (unsigned __int128)((v5 - *v4) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  sub_216BD2264(&__p, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[5] - a1[4]) >> 2));
  uint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v10 = v8 - v9;
  if (v8 != v9)
  {
    unint64_t v11 = 0;
    uint64_t v12 = v10 / 12;
    unint64_t v13 = __p;
    unint64_t v14 = (char *)(v9 + 10);
    do
    {
      char v15 = *v14;
      v14 += 12;
      unint64_t v16 = v11 >> 6;
      uint64_t v17 = 1 << v11;
      if ((v15 & 2) != 0) {
        uint64_t v18 = v13[v16] | v17;
      }
      else {
        uint64_t v18 = v13[v16] & ~v17;
      }
      v13[v16]  = v18;
      ++v11;
    }
    while (v12 != v11);
  }
  unint64_t v19 = (v7 >> 3) + ((unint64_t)v7 >> 63);
  uint64_t v20 = __p;
  if (v5 != v6)
  {
    unint64_t v21 = 0;
    uint64_t v22 = *(void *)a1[2];
    if (v19 <= 1) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = v19;
    }
    do
    {
      if (*(__int16 *)(v22 + 48 * v21 + 26) != -1)
      {
        uint64_t v24 = 0;
        unint64_t v25 = v21;
        do
        {
          uint64_t v26 = (1 << v25) & *(void *)((char *)v20 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8));
          uint64_t v27 = (v26 == 0) | v24;
          if (v26 && (v24 & 1) != 0)
          {
            if (v25 != 0xFFFF)
            {
              for (unint64_t i = v25; i != 0xFFFF; unint64_t i = *(unsigned __int16 *)(v22 + 48 * i + 24))
              {
                uint64_t v29 = v20[i >> 6];
                if ((v29 & (1 << i)) == 0) {
                  break;
                }
                v20[i >> 6]  = v29 & ~(1 << i);
              }
            }
            uint64_t v27 = v24;
          }
          uint64_t v30 = v22 + 48 * v25;
          unint64_t v25 = *(unsigned __int16 *)(v30 + 26);
          int v31 = *(unsigned __int16 *)(v30 + 24);
          uint64_t v24 = v27;
        }
        while (v25 != v31);
      }
      ++v21;
    }
    while (v21 != v23);
    uint64_t v20 = __p;
  }
  char v38 = 1;
  unsigned int v43 = v20;
  int v44 = 0;
  uint64_t v41 = (char *)&v20[v40 >> 6];
  int v42 = v40 & 0x3F;
  uint64_t v32 = sub_216BD230C((uint64_t *)&v43, (uint64_t)&v41, &v38);
  if (v32)
  {
    sub_21679A004((uint64_t)a2, v19);
    int v33 = (char *)__p;
    if (v5 != v6)
    {
      unint64_t v34 = 0;
      uint64_t v35 = 0;
      if (v19 <= 1) {
        uint64_t v36 = 1;
      }
      else {
        uint64_t v36 = v19;
      }
      do
      {
        if ((*(void *)&v33[(v34 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v34))
        {
          *(void *)(*a2 + 8 * v34)  = 0xFFFFLL;
          ++v35;
        }
        else
        {
          *(void *)(*a2 + 8 * v34)  = v34 - v35;
        }
        ++v34;
      }
      while (v36 != v34);
      goto LABEL_35;
    }
  }
  else
  {
    int v33 = (char *)__p;
  }
  if (v33) {
LABEL_35:
  }
    operator delete(v33);
  return v32 != 0;
}

void sub_216BCF13C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_DetachSharedNodePool(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this, uint64_t a2, char *a3)
{
  uint64_t v4 = *((void *)this + 3);
  if (!v4 || *(void *)(v4 + 8))
  {
    unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
    if (v5)
    {
      uint64_t v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_DetachSharedNodePool", 0, a3);
      BOOL v7 = v6 != 0;
    }
    else
    {
      uint64_t v6 = 0;
      BOOL v7 = 0;
    }
    unint64_t v11 = v6;
    int v12 = v7;
    sub_216BD0CC4(*((uint64_t **)this + 2), &v10);
    long long v8 = v10;
    long long v10 = 0uLL;
    uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 3);
    *((_OWORD *)this + 1)  = v8;
    if (v9)
    {
      sub_216784EC4(v9);
      if (*((void *)&v10 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v10 + 1));
      }
    }
    int v12 = v7 - 1;
    if (v7) {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v6);
    }
  }
}

void sub_216BCF22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21684E6B8((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BCF240(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1  = 0;
  *a1  = *a2;
  *a2  = v4;
  unint64_t v11 = 0;
  sub_2168BD378((int)a2, 0);
  unint64_t result = sub_216BBEEA4(&v11);
  uint64_t v6 = a1[1];
  a1[1]  = a2[1];
  a2[1]  = v6;
  uint64_t v7 = a1[2];
  a1[2]  = a2[2];
  a2[2]  = v7;
  LODWORD(v7)  = *((_DWORD *)a1 + 8);
  uint64_t v8 = a1[3];
  int v9 = *((_DWORD *)a2 + 8);
  a1[3]  = a2[3];
  *((_DWORD *)a1 + 8)  = v9;
  a2[3]  = v8;
  *((_DWORD *)a2 + 8)  = v7;
  uint64_t v10 = *(uint64_t *)((char *)a1 + 36);
  *(uint64_t *)((char *)a1 + 36)  = *(uint64_t *)((char *)a2 + 36);
  *(uint64_t *)((char *)a2 + 36)  = v10;
  return result;
}

void sub_216BCF2E8(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  sub_21675DB74(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::AppendChildNameToAllSites(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v10);
  uint64_t v4 = (int *)*((void *)this + 4);
  for (unint64_t i = (int *)*((void *)this + 5); v4 != i; v4 += 3)
  {
    if (*(void *)v4 == v10)
    {
      sub_2169C487C(v4, a2);
      sub_2169C48D4(v4 + 1, (_DWORD *)a2 + 1);
    }
    else
    {
      NameTokeuint64_t n = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v4, NameToken, &v8);
      sub_21697DE94(v4, &v8);
      sub_21697DEEC(v4 + 1, &v9);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
      sub_21697C414(&v8);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
  return sub_21697C414(&v10);
}

void sub_216BCF3F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::InsertChildNode(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *a1, void *a2, uint64_t *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *inserted)
{
  sub_216851EE4((uint64_t)&v21, "Pcp", "PcpPrimIndex_Graph");
  if (!*(_DWORD *)a4)
  {
    *(void *)&long long v17 = "pcp/primIndex_Graph.cpp";
    *((void *)&v17 + 1)  = "InsertChildNode";
    uint64_t v18 = 512;
    unint64_t v19 = "PcpNodeRef pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::InsertChildNode(const PcpNodeRef &, const Pcp"
          "LayerStackSite &, const PcpArc &, PcpErrorBasePtr *)";
    char v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "arc.type != PcpArcTypeRoot", 0);
  }
  if (*(void *)(a4 + 16) != a2[1] || *(void *)(a4 + 8) != *a2)
  {
    *(void *)&long long v17 = "pcp/primIndex_Graph.cpp";
    *((void *)&v17 + 1)  = "InsertChildNode";
    uint64_t v18 = 513;
    unint64_t v19 = "PcpNodeRef pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::InsertChildNode(const PcpNodeRef &, const Pcp"
          "LayerStackSite &, const PcpArc &, PcpErrorBasePtr *)";
    char v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "arc.parent == parent", 0);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*((void *)a1 + 2) + 8) - **((void **)a1 + 2)) >> 4) >= 0xFFFF)
  {
    if (!inserted) {
      goto LABEL_17;
    }
    pxrInternal__aapl__pxrReserved__::PcpErrorCapacityExceeded::New(2, &v17);
    goto LABEL_11;
  }
  if (*(int *)(a4 + 52) < 0x10000)
  {
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_DetachSharedNodePoolForNewNodes(a1, -1, v10);
    unint64_t v13 = a2[1];
    Node  = pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_CreateNode((uint64_t)a1, a3, a4);
    uint64_t inserted = pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_InsertChildInStrengthOrder(a1, v13, Node);
    goto LABEL_17;
  }
  if (inserted)
  {
    pxrInternal__aapl__pxrReserved__::PcpErrorCapacityExceeded::New(4, &v17);
LABEL_11:
    long long v11 = v17;
    long long v17 = 0uLL;
    int v12 = (std::__shared_weak_count *)*((void *)inserted + 1);
    *(_OWORD *)uint64_t inserted = v11;
    if (v12)
    {
      sub_216784EC4(v12);
      if (*((void *)&v17 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v17 + 1));
      }
    }
    uint64_t inserted = 0;
  }
LABEL_17:
  while (v22--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v21);
  return inserted;
}

void sub_216BCF5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_21684E6B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_DetachSharedNodePoolForNewNodes(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this, uint64_t a2, char *a3)
{
  uint64_t v5 = *((void *)this + 3);
  if (!v5 || *(void *)(v5 + 8))
  {
    unsigned __int8 v6 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
    if (v6)
    {
      uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_DetachSharedNodePoolForNewNodes", 0, a3);
      BOOL v8 = v7 != 0;
    }
    else
    {
      uint64_t v7 = 0;
      BOOL v8 = 0;
    }
    int v9 = (uint64_t *)*((void *)this + 2);
    uint64_t v11 = *v9;
    uint64_t v10 = v9[1];
    int v12 = operator new(0x30uLL);
    unint64_t v13 = (std::__shared_weak_count *)v12;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 4);
    v12[1]  = 0;
    v12[2]  = 0;
    *int v12 = &unk_26C75BBB0;
    void v12[3] = 0;
    char v15 = v12 + 3;
    void v12[4] = 0;
    v12[5]  = 0;
    uint64_t v16 = v14 >> 2;
    if (v14 >> 2 <= 1) {
      uint64_t v16 = 1;
    }
    if (a2 != -1) {
      uint64_t v16 = a2;
    }
    sub_216BD006C(v12 + 3, v16 + v14);
    sub_216BD13A8(v15, *v15, **((void **)this + 2), *(void *)(*((void *)this + 2) + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*((void *)this + 2) + 8) - **((void **)this + 2)) >> 4));
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v17 = (std::__shared_weak_count *)*((void *)this + 3);
    *((void *)this + 2)  = v15;
    *((void *)this + 3)  = v13;
    if (v17) {
      sub_216784EC4(v17);
    }
    sub_216784EC4(v13);
    if (v8) {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v7);
    }
  }
}

void sub_216BCF778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_216784EC4(v9);
  sub_21684E6B8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_InsertChildInStrengthOrder(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this, unint64_t a2, unint64_t a3)
{
  unsigned __int8 v6 = (uint64_t *)*((void *)this + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 4) <= a2)
  {
    long long v37 = "pcp/primIndex_Graph.cpp";
    char v38 = "_InsertChildInStrengthOrder";
    uint64_t v39 = 577;
    unint64_t v40 = "PcpNodeRef pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_InsertChildInStrengthOrder(size_t, size_t)";
    char v41 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v37, "parentNodeIdx < _GetNumNodes()", 0);
    unsigned __int8 v6 = (uint64_t *)*((void *)this + 2);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 4) <= a3)
  {
    long long v37 = "pcp/primIndex_Graph.cpp";
    char v38 = "_InsertChildInStrengthOrder";
    uint64_t v39 = 578;
    unint64_t v40 = "PcpNodeRef pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_InsertChildInStrengthOrder(size_t, size_t)";
    char v41 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v37, "childNodeIdx < _GetNumNodes()", 0);
    unsigned __int8 v6 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v7 = *v6;
  uint64_t v36 = this;
  uint64_t v8 = v7 + 48 * a2;
  unsigned int v11 = *(unsigned __int16 *)(v8 + 28);
  uint64_t v10 = (_WORD *)(v8 + 28);
  int v9 = (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v11;
  if (v11 == 0xFFFFLL)
  {
    uint64_t v19 = v7 + 48 * a2;
    int v21 = *(__int16 *)(v19 + 30);
    char v20 = (_WORD *)(v19 + 30);
    if (v21 != -1)
    {
      long long v37 = "pcp/primIndex_Graph.cpp";
      char v38 = "_InsertChildInStrengthOrder";
      uint64_t v39 = 588;
      unint64_t v40 = "PcpNodeRef pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_InsertChildInStrengthOrder(size_t, size_t)";
      char v41 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v37, "LAST_CHILD(parentNode) == _Node::_invalidNodeIndex", 0);
    }
    *char v20 = a3;
    goto LABEL_13;
  }
  BOOL v12 = sub_216BCFF98(&v36, a3, v9);
  uint64_t v13 = v7 + 48 * a2;
  unsigned int v16 = *(unsigned __int16 *)(v13 + 30);
  char v15 = (_WORD *)(v13 + 30);
  unint64_t v14 = (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v16;
  if (v12)
  {
    if (v14 == 0xFFFF)
    {
      long long v37 = "pcp/primIndex_Graph.cpp";
      char v38 = "_InsertChildInStrengthOrder";
      uint64_t v39 = 595;
      unint64_t v40 = "PcpNodeRef pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_InsertChildInStrengthOrder(size_t, size_t)";
      char v41 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v37, "LAST_CHILD(parentNode) != _Node::_invalidNodeIndex", 0);
    }
    unsigned int v17 = (unsigned __int16)*v10;
    uint64_t v18 = *v6;
    *(_WORD *)(v7 + 48 * a3 + 34)  = v17;
    *(_WORD *)(v18 + 48 * v17 + 32)  = a3;
LABEL_13:
    *uint64_t v10 = a3;
    return this;
  }
  if (sub_216BCFF98(&v36, a3, v14))
  {
    unsigned int v23 = (unsigned __int16)*v10;
    if (v23 != 0xFFFF)
    {
      while (1)
      {
        unsigned int v24 = v23;
        BOOL v25 = sub_216BCFF98(&v36, a3, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v23);
        uint64_t v26 = *v6;
        if (v25) {
          break;
        }
        unsigned int v23 = *(unsigned __int16 *)(v26 + 48 * v24 + 34);
        if (v23 == 0xFFFF) {
          return this;
        }
      }
      uint64_t v29 = v26 + 48 * v24;
      unsigned int v32 = *(unsigned __int16 *)(v29 + 32);
      uint64_t v30 = (unsigned __int16 *)(v29 + 32);
      unsigned int v31 = v32;
      if (v32 == 0xFFFF)
      {
        long long v37 = "pcp/primIndex_Graph.cpp";
        char v38 = "_InsertChildInStrengthOrder";
        uint64_t v39 = 616;
        unint64_t v40 = "PcpNodeRef pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_InsertChildInStrengthOrder(size_t, size_t)";
        char v41 = 0;
        uint64_t v35 = v30;
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v37, "PREV_SIBLING(nextNode) != _Node::_invalidNodeIndex", 0);
        uint64_t v30 = v35;
        unsigned int v31 = *v35;
      }
      uint64_t v33 = *v6;
      uint64_t v34 = v7 + 48 * a3;
      *(_WORD *)(v34 + 32)  = v31;
      *(_WORD *)(v34 + 34)  = v24;
      unsigned __int16 *v30 = a3;
      *(_WORD *)(v33 + 48 * v31 + 34)  = a3;
    }
  }
  else
  {
    unsigned int v27 = (unsigned __int16)*v15;
    uint64_t v28 = *v6;
    *(_WORD *)(v7 + 48 * a3 + 32)  = v27;
    *(_WORD *)(v28 + 48 * v27 + 34)  = a3;
    _WORD *v15 = a3;
  }
  return this;
}

pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::InsertChildSubgraph(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  sub_216851EE4((uint64_t)&v27, "Pcp", "PcpPrimIndex_Graph");
  if (!*(_DWORD *)a4)
  {
    *(void *)&long long v23 = "pcp/primIndex_Graph.cpp";
    *((void *)&v23 + 1)  = "InsertChildSubgraph";
    uint64_t v24 = 549;
    BOOL v25 = "PcpNodeRef pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::InsertChildSubgraph(const PcpNodeRef &, const"
          " PcpPrimIndex_GraphRefPtr &, const PcpArc &, PcpErrorBasePtr *)";
    char v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v23, "arc.type != PcpArcTypeRoot", 0);
  }
  if (*(void *)(a4 + 16) != a2[1] || *(void *)(a4 + 8) != *a2)
  {
    *(void *)&long long v23 = "pcp/primIndex_Graph.cpp";
    *((void *)&v23 + 1)  = "InsertChildSubgraph";
    uint64_t v24 = 550;
    BOOL v25 = "PcpNodeRef pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::InsertChildSubgraph(const PcpNodeRef &, const"
          " PcpPrimIndex_GraphRefPtr &, const PcpArc &, PcpErrorBasePtr *)";
    char v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v23, "arc.parent == parent", 0);
  }
  uint64_t v10 = (uint64_t *)*((void *)a1 + 2);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v13 = sub_216BCFCE4(a3);
  if (0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 4)
     - 0x5555555555555555 * ((uint64_t)(*(void *)(*(void *)(v13 + 16) + 8) - **(void **)(v13 + 16)) >> 4) < 0xFFFF)
  {
    uint64_t v18 = *a3;
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_DetachSharedNodePoolForNewNodes(a1, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(*a3 + 16) + 8) - **(void **)(*a3 + 16)) >> 4), v14);
    unint64_t v19 = a2[1];
    NodesForSubgraph  = pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_CreateNodesForSubgraph((uint64_t)a1, v18, a4);
    uint64_t inserted = pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_InsertChildInStrengthOrder(a1, v19, NodesForSubgraph);
  }
  else
  {
    if (a5)
    {
      pxrInternal__aapl__pxrReserved__::PcpErrorCapacityExceeded::New(2, &v23);
      long long v15 = v23;
      long long v23 = 0uLL;
      unsigned int v16 = *(std::__shared_weak_count **)(a5 + 8);
      *(_OWORD *)a5  = v15;
      if (v16)
      {
        sub_216784EC4(v16);
        if (*((void *)&v23 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v23 + 1));
        }
      }
    }
    uint64_t inserted = 0;
  }
  while (v28--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v27);
  return inserted;
}

void sub_216BCFCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_21684E6B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BCFCE4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0]  = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1]  = "operator->";
    uint64_t v3[2] = 953;
    void v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph>::operato"
            "r->() const [U  = pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000021747A872 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_CreateNodesForSubgraph(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v32[0]  = (atomic_uint *)a2;
  v32[1]  = 0;
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v32)
    && v6 != -1
    || (v31[0]  = (atomic_uint *)a2,
        v31[1]  = 0,
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v31))
    && v7 != -1)
  {
    char v26 = "pcp/primIndex_Graph.cpp";
    uint64_t v27 = "_CreateNodesForSubgraph";
    uint64_t v28 = 687;
    uint64_t v29 = "size_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_CreateNodesForSubgraph(const PcpPrimIndex_Graph "
          "&, const PcpArc &)";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "!subgraph.GetRootNode().GetParentNode() && !subgraph.GetRootNode().GetOriginNode()", 0);
  }
  uint64_t v8 = *(uint64_t **)(a1 + 16);
  unint64_t v9 = (v8[1] - *v8) / 48;
  *(unsigned char *)(a1 + 56) &= ~4u;
  sub_216BD13A8(v8, v8[1], **(void **)(a2 + 16), *(void *)(*(void *)(a2 + 16) + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a2 + 16) + 8) - **(void **)(a2 + 16)) >> 4));
  sub_216BD1CC0((uint64_t *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a2 + 32), *(void *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2));
  uint64_t v10 = *(uint64_t **)(a1 + 16);
  uint64_t v11 = *v10;
  unint64_t v12 = (v10[1] - *v10) / 48;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_Node::SetArc(*v10 + 48 * v9, a3);
  char v26 = (char *)v9;
  uint64_t v27 = (const char *)v12;
  BOOL v14 = v9 >= v12;
  unint64_t v15 = v9 - v12;
  if (!v14)
  {
    uint64_t v16 = 0;
    unsigned int v17 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression *)(v11 + 48 * v9 + 8);
    uint64_t v18 = 48 * v9 + 24;
    do
    {
      uint64_t v19 = *v10;
      if (v16)
      {
        char v20 = (_WORD *)(v19 + v18);
        pxrInternal__aapl__pxrReserved__::PcpMapExpression::Compose(v17, (const pxrInternal__aapl__pxrReserved__::PcpMapExpression *)(v19 + v18 - 16), v13, (uint64_t *)v31);
        int v21 = v31[0];
        v31[0]  = 0;
        v32[0]  = *(atomic_uint **)(v19 + v18 - 16);
        *((void *)v20 - 2)  = v21;
        sub_216BD0624(v32, v22);
        sub_216BD0624(v31, v23);
        *char v20 = sub_216BD024C(&v26, *(unsigned __int16 *)(v19 + v18));
        v20[1]  = sub_216BD024C(&v26, *(unsigned __int16 *)(v19 + v18 + 2));
      }
      uint64_t v24 = (_WORD *)(v19 + v18);
      uint64_t v24[2] = sub_216BD024C(&v26, (unsigned __int16)v24[2]);
      void v24[3] = sub_216BD024C(&v26, (unsigned __int16)v24[3]);
      v24[4]  = sub_216BD024C(&v26, (unsigned __int16)v24[4]);
      v24[5]  = sub_216BD024C(&v26, (unsigned __int16)v24[5]);
      --v16;
      v18 += 48;
    }
    while (v15 != v16);
  }
  return v9;
}

BOOL sub_216BCFF98(void *a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3)
{
  v16[0]  = *a1;
  v16[1]  = a2;
  v15[0]  = v16[0];
  v15[1]  = a3;
  int v4 = pxrInternal__aapl__pxrReserved__::PcpCompareSiblingNodeStrength((pxrInternal__aapl__pxrReserved__ *)v16, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v15, a3);
  if (v4) {
    return v4 == -1;
  }
  v13[0]  = "pcp/primIndex_Graph.cpp";
  v13[1]  = "operator()";
  void v13[2] = 54;
  void v13[3] = "BOOL pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ArcStrengthOrder::operator()(size_t, size_t) const";
  char v14 = 0;
  v12[0]  = *a1;
  v12[1]  = 0;
  Path  = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v12);
  String  = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(Path);
  uint64_t v10 = *((char *)String + 23) >= 0 ? String : (uint64_t *)*String;
  uint64_t v11 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Redundant nodes in prim index for <%s>", v8, v9, v10);
  if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v13, "result != 0", v11)) {
    return v4 == -1;
  }
  else {
    return pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(v16, v15);
  }
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BD006C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)result;
    v7[0]  = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)sub_2168073F4((uint64_t)result, a2);
    v7[1]  = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v7[0] + v5);
    uint64_t v7[2] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v7[0] + v5);
    void v7[3] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v7[0] + 48 * v6);
    sub_216BD1018(a1, v7);
    return sub_216BD130C(v7);
  }
  return result;
}

void sub_216BD010C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BD130C((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BD0120(uint64_t *a1)
{
  unint64_t v4 = a1[2];
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)(a1 + 2);
  unint64_t v3 = v4;
  unint64_t v5 = *((void *)v2 - 1);
  if (v5 >= v4)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0x555555555555555) {
      sub_21677CB10();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *a1) >> 4);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v10 = 0x555555555555555;
    }
    else {
      unint64_t v10 = v8;
    }
    v14[4]  = v2;
    if (v10) {
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)sub_2168073F4((uint64_t)v2, v10);
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v12 = (char *)v11 + 48 * v7;
    v14[0]  = v11;
    v14[1]  = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v12;
    void v14[3] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v11 + 48 * v10);
    *(void *)(v12 + 36)  = 0;
    *(void *)unint64_t v12 = 0;
    *((void *)v12 + 1)  = 0;
    *((void *)v12 + 2)  = 0;
    *((void *)v12 + 3)  = -1;
    *((_DWORD *)v12 + 8)  = -1;
    void v14[2] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)(v12 + 48);
    sub_216BD1018(a1, v14);
    uint64_t v6 = a1[1];
    sub_216BD130C(v14);
  }
  else
  {
    *(void *)(v5 + 36)  = 0;
    *(void *)unint64_t v5 = 0;
    *(void *)(v5 + 8)  = 0;
    *(void *)(v5 + 16)  = 0;
    *(void *)(v5 + 24)  = -1;
    *(_DWORD *)(v5 + 32)  = -1;
    uint64_t v6 = v5 + 48;
    a1[1]  = v5 + 48;
  }
  a1[1]  = v6;
  return v6 - 48;
}

void sub_216BD0238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BD130C((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

unint64_t sub_216BD024C(void *a1, uint64_t a2)
{
  unint64_t result = 0xFFFFLL;
  if (a2 != 0xFFFF)
  {
    unint64_t result = *a1 + a2;
    if (result >= a1[1])
    {
      v5[0]  = "pcp/primIndex_Graph.cpp";
      v5[1]  = "operator()";
      uint64_t v5[2] = 719;
      uint64_t v5[3] = "size_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_CreateNodesForSubgraph(const PcpPrimIndex_Gr"
              "aph &, const PcpArc &)::_ConvertOldToNewIndex::operator()(size_t) const";
      char v6 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "oldIndex + _base < _numNewNodes", 0);
      return *a1 + a2;
    }
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_GetWriteableNode(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this, unint64_t a2, char *a3)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*((void *)this + 2) + 8) - **((void **)this + 2)) >> 4) <= a2)
  {
    v6[0]  = "pcp/primIndex_Graph.cpp";
    v6[1]  = "_GetWriteableNode";
    _OWORD v6[2] = 761;
    void v6[3] = "PcpPrimIndex_Graph::_Node &pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_GetWriteableNode(size_t)";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "idx < _GetNumNodes()", 0);
  }
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_DetachSharedNodePool(this, a2, a3);
  return **((void **)this + 2) + 48 * a2;
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_GetWriteableNode(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *this, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, char *a3)
{
  unint64_t v4 = *((void *)a2 + 1);
  if (v4 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*((void *)this + 2) + 8) - **((void **)this + 2)) >> 4))
  {
    v6[0]  = "pcp/primIndex_Graph.cpp";
    v6[1]  = "_GetWriteableNode";
    _OWORD v6[2] = 770;
    void v6[3] = "PcpPrimIndex_Graph::_Node &pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_GetWriteableNode(const PcpNodeRef &)";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "idx < _GetNumNodes()", 0);
  }
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_DetachSharedNodePool(this, (uint64_t)a2, a3);
  return **((void **)this + 2) + 48 * v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ComputeStrengthOrderIndexMappingRecursively(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = *a3;
  uint64_t v9 = *a4;
  for (int i = 1; ; i &= v12)
  {
    *(void *)(v9 + 8 * a2)  = v8;
    uint64_t v11 = *a3;
    BOOL v12 = *a3 == a2;
    uint64_t v13 = **(void **)(a1 + 16);
    uint64_t v14 = *(unsigned __int16 *)(v13 + 48 * a2 + 28);
    if (v14 != 0xFFFF)
    {
      *a3  = v11 + 1;
      int v15 = pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_ComputeStrengthOrderIndexMappingRecursively(a1, v14, a3, a4);
      if (v11 == a2) {
        BOOL v12 = v15;
      }
      else {
        BOOL v12 = 0;
      }
      uint64_t v9 = *a4;
    }
    a2  = *(unsigned __int16 *)(v13 + 48 * a2 + 34);
    if (a2 == 0xFFFF) {
      break;
    }
    uint64_t v8 = *a3 + 1;
    *a3  = v8;
  }
  return i & v12;
}

void sub_216BD0500(uint64_t a1)
{
  *(void *)a1  = &unk_26C75BB78;
  unint64_t v3 = (void **)(a1 + 32);
  sub_216BD0960(&v3);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::TfSimpleRefBase::~TfSimpleRefBase((pxrInternal__aapl__pxrReserved__::TfSimpleRefBase *)a1);
}

void sub_216BD0568(uint64_t a1)
{
  *(void *)a1  = &unk_26C75BB78;
  unint64_t v4 = (void **)(a1 + 32);
  sub_216BD0960(&v4);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::TfSimpleRefBase::~TfSimpleRefBase((pxrInternal__aapl__pxrReserved__::TfSimpleRefBase *)a1);
  operator delete(v3);
}

atomic_uint **sub_216BD05D4(atomic_uint **a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_add_ref(*a2);
  }
  unint64_t v5 = *a1;
  *a1  = (atomic_uint *)v3;
  sub_216BD0624(&v5, (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)a2);
  return a1;
}

atomic_uint **sub_216BD0624(atomic_uint **a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2)
{
  uint64_t v3 = *a1;
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3, a2);
  }
  return a1;
}

uint64_t sub_216BD0658(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8)  = 1;
  *(void *)a1  = &unk_26C75BB78;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(void *)(a1 + 24)  = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 32)  = 0;
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 48)  = 0;
  sub_216BD070C((void *)(a1 + 32), *(void *)(a2 + 32), *(void *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2));
  *(unsigned char *)(a1 + 56)  = *(unsigned char *)(a2 + 56);
  return a1;
}

void sub_216BD06EC(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 3);
  if (v3) {
    sub_216784EC4(v3);
  }
  pxrInternal__aapl__pxrReserved__::TfSimpleRefBase::~TfSimpleRefBase(v1);
  _Unwind_Resume(a1);
}

void *sub_216BD070C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    sub_216BD0794(result, a4);
    unint64_t result = (void *)sub_216BD07E8((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1]  = result;
  }
  return result;
}

void sub_216BD0774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8)  = v10;
  sub_216BD0960(&a9);
  _Unwind_Resume(a1);
}

char *sub_216BD0794(void *a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    sub_21677CB10();
  }
  unint64_t result = (char *)sub_216B0D05C((uint64_t)(a1 + 2), a2);
  *a1  = result;
  a1[1]  = result;
  a1[2]  = &result[12 * v4];
  return result;
}

uint64_t sub_216BD07E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0]  = a1;
  v9[1]  = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216981010((_DWORD *)v4, (_DWORD *)v6);
      sub_21698105C((_DWORD *)(v4 + 4), (_DWORD *)(v6 + 4));
      __int16 v7 = *(_WORD *)(v6 + 8);
      *(unsigned char *)(v4 + 1sub_2168EBBB8(&a9, 0) = *(unsigned char *)(v6 + 10);
      *(_WORD *)(v4 + 8)  = v7;
      uint64_t v4 = v12 + 12;
      v12 += 12;
      v6 += 12;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_216BD0894((uint64_t)v9);
  return v4;
}

uint64_t sub_216BD0894(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216BD08CC((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216BD08CC(uint64_t *result)
{
  uint64_t v2 = (void *)result[1];
  uint64_t v1 = (_DWORD **)result[2];
  uint64_t v3 = *v1;
  uint64_t v4 = (_DWORD *)*v2;
  if (*v1 != (_DWORD *)*v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 3;
      unint64_t result = (uint64_t *)sub_216BD0920(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

_DWORD *sub_216BD0920(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 1);

  return sub_21697C414(a2);
}

void sub_216BD0960(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        sub_216BD0920((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1]  = v2;
    operator delete(v5);
  }
}

void sub_216BD09F8(std::__shared_weak_count *this)
{
  this->__vftable  = (std::__shared_weak_count_vtbl *)&unk_26C75BBB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_216BD0A18(std::__shared_weak_count *a1)
{
  a1->__vftable  = (std::__shared_weak_count_vtbl *)&unk_26C75BBB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_216BD0A5C(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  sub_216BD0B28(&v1);
}

void *sub_216BD0A8C(void *a1, unint64_t a2)
{
  *a1  = 0;
  a1[1]  = 0;
  a1[2]  = 0;
  if (a2)
  {
    sub_2169D8290(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 48 * a2;
    uint64_t v6 = 48 * a2;
    uint64_t v7 = v4 + 24;
    do
    {
      *(void *)(v7 + 12)  = 0;
      *(void *)(v7 - 16)  = 0;
      *(void *)(v7 - 8)  = 0;
      *(void *)(v7 - 24)  = 0;
      *(void *)uint64_t v7 = -1;
      *(_DWORD *)(v7 + 8)  = -1;
      v7 += 48;
      v6 -= 48;
    }
    while (v6);
    a1[1]  = v5;
  }
  return a1;
}

void sub_216BD0B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_216BD0B28(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_216BD0B7C((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v2, (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)*v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BD0B7C(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **result, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2)
{
  uint64_t v3 = result;
  for (int i = result[1]; i != a2; int i = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)((char *)i - 48))
  {
    sub_216BD0624((atomic_uint **)i - 4, a2);
    sub_216BD0624((atomic_uint **)i - 5, v5);
    unint64_t result = sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)i - 6);
  }
  v3[1]  = a2;
  return result;
}

void *sub_216BD0BE0(void *a1, unint64_t a2)
{
  *a1  = 0;
  a1[1]  = 0;
  a1[2]  = 0;
  if (a2)
  {
    sub_216BD0794(a1, a2);
    sub_216BD0C4C(a1, a2);
  }
  return a1;
}

void sub_216BD0C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

_DWORD *sub_216BD0C4C(_DWORD *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((void *)result + 1);
  if (a2)
  {
    uint64_t v4 = v3 + 12 * a2;
    uint64_t v5 = 12 * a2;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v3);
      unint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(v3 + 4));
      *(unsigned char *)(v3 + 10) &= 0xF8u;
      v3 += 12;
      v5 -= 12;
    }
    while (v5);
    uint64_t v3 = v4;
  }
  *((void *)v2 + 1)  = v3;
  return result;
}

uint64_t sub_216BD0CC4@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x30uLL);
  uint64_t result = sub_216BD0D20((uint64_t)v4, a1);
  *a2  = v4 + 24;
  a2[1]  = v4;
  return result;
}

void sub_216BD0D0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216BD0D20(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)(a1 + 8)  = 0u;
  *(void *)a1  = &unk_26C75BBB0;
  *(_OWORD *)(a1 + 32)  = 0u;
  *(void *)(a1 + 24)  = 0;
  sub_216BD0DA4((void *)(a1 + 24), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
  return a1;
}

void sub_216BD0D90(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *sub_216BD0DA4(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_2169D8290(result, a4);
    uint64_t result = (void *)sub_216BD0E2C((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1]  = result;
  }
  return result;
}

void sub_216BD0E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8)  = v10;
  sub_216BD0B28(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216BD0E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0]  = a1;
  v9[1]  = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216BD0ED8(a1, v4, v6);
      v6 += 48;
      uint64_t v4 = v12 + 48;
      v12 += 48;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_216BD0F6C((uint64_t)v9);
  return v4;
}

void sub_216BD0EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_216BD0ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2  = *(void *)a3;
  sub_2168BD80C((uint64_t *)a2);
  uint64_t v5 = *(void *)(a3 + 8);
  *(void *)(a2 + 8)  = v5;
  if (v5) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_add_ref(v5);
  }
  uint64_t v6 = *(void *)(a3 + 16);
  *(void *)(a2 + 16)  = v6;
  if (v6) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_add_ref(v6);
  }
  __n128 result = *(__n128 *)(a3 + 24);
  *(_DWORD *)(a2 + 4sub_2168EBBB8(&a9, 0) = *(_DWORD *)(a3 + 40);
  *(__n128 *)(a2 + 24)  = result;
  return result;
}

void sub_216BD0F48(_Unwind_Exception *a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2)
{
  sub_216BD0624(v3, a2);
  sub_216BBEEA4(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_216BD0F6C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216BD0FB8(*(void *)a1, **(pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node ***)(a1 + 16), **(void **)(a1 + 16), **(void **)(a1 + 8), **(void **)(a1 + 8));
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BD0FB8(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    uint64_t v6 = a3;
    do
    {
      sub_216BD0624((atomic_uint **)(v6 - 32), a2);
      sub_216BD0624((atomic_uint **)(v6 - 40), v7);
      __n128 result = sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v6 - 48));
      v6 -= 48;
    }
    while (v6 != a5);
  }
  return result;
}

uint64_t sub_216BD1018(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216BD1090((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

uint64_t sub_216BD1090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1)  = a7;
  long long v15 = v16;
  v13[0]  = a1;
  v13[1]  = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 48;
      sub_216BD115C(a1, v7 - 48, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 48;
      *((void *)&v16 + 1) -= 48;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216BD11F0((uint64_t)v13);
  return v11;
}

void sub_216BD1148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_216BD115C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2  = *(void *)a3;
  sub_2168BD80C((uint64_t *)a2);
  uint64_t v5 = *(void *)(a3 + 8);
  *(void *)(a2 + 8)  = v5;
  if (v5) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_add_ref(v5);
  }
  uint64_t v6 = *(void *)(a3 + 16);
  *(void *)(a2 + 16)  = v6;
  if (v6) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_add_ref(v6);
  }
  __n128 result = *(__n128 *)(a3 + 24);
  *(_DWORD *)(a2 + 4sub_2168EBBB8(&a9, 0) = *(_DWORD *)(a3 + 40);
  *(__n128 *)(a2 + 24)  = result;
  return result;
}

void sub_216BD11CC(_Unwind_Exception *a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2)
{
  sub_216BD0624(v3, a2);
  sub_216BBEEA4(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_216BD11F0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216BD1228((uint64_t *)a1);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BD1228(uint64_t *a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v15 = v3;
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v18 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  return sub_216BD12A0(v4, (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)v14, (uint64_t)v9);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BD12A0(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2, uint64_t a3)
{
  for (uint64_t i = *((void *)a2 + 4); i != *(void *)(a3 + 32); *((void *)a2 + 4) = i)
  {
    sub_216BD0624((atomic_uint **)(i + 16), a2);
    sub_216BD0624((atomic_uint **)(i + 8), v6);
    __n128 result = sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)i);
    uint64_t i = *((void *)a2 + 4) + 48;
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BD130C(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BD1344(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **result, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      v4[2]  = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)((char *)v2 - 48);
      sub_216BD0624((atomic_uint **)v2 - 4, a2);
      sub_216BD0624((atomic_uint **)v2 - 5, v5);
      __n128 result = sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v2 - 6);
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t sub_216BD13A8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - a2) >> 4)) >= a5)
      {
        uint64_t v21 = a3 + 48 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 16 * ((uint64_t)(v12 - a2) >> 4);
        a1[1]  = sub_216BD0E2C(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_216BD159C((uint64_t)a1, v5, v12, v5 + 48 * a5);
      sub_216BD1794((uint64_t)v27, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0x555555555555555) {
        sub_21677CB10();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v13) >> 4);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 4);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v18 = 0x555555555555555;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v30 = v9;
      if (v18) {
        uint64_t v19 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)sub_2168073F4(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      int v22 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v19 + 48 * v15);
      v27[0]  = v19;
      v27[1]  = v22;
      uint64_t v28 = v22;
      uint64_t v29 = (char *)v19 + 48 * v18;
      uint64_t v23 = 3 * a5;
      uint64_t v24 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v22 + 48 * a5);
      uint64_t v25 = 16 * v23;
      do
      {
        sub_216BD0ED8(v30, (uint64_t)v22, v7);
        int v22 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v22 + 48);
        v7 += 48;
        v25 -= 48;
      }
      while (v25);
      uint64_t v28 = v24;
      uint64_t v5 = sub_216BD1624(a1, v27, v5);
      sub_216BD130C(v27);
    }
  }
  return v5;
}

void sub_216BD1570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8)  = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216BD159C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(void *)unint64_t v9 = 0;
      *(void *)(v9 + 8)  = 0;
      *(void *)(v8 + 16)  = *(void *)(v9 + 16);
      *(void *)(v9 + 16)  = 0;
      long long v10 = *(_OWORD *)(v9 + 24);
      *(_DWORD *)(v8 + 4sub_2168EBBB8(&a9, 0) = *(_DWORD *)(v9 + 40);
      *(_OWORD *)(v8 + 24)  = v10;
      v8 += 48;
      v9 += 48;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8)  = v8;
  return sub_216BD16D8((uint64_t)&v12, a2, v7, v6);
}

uint64_t sub_216BD1624(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_216BD1090((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1]  = v8;
  a2[2]  = sub_216BD1834(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1  = a2[1];
  a2[1]  = v9;
  uint64_t v10 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v10;
  uint64_t v11 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v11;
  *a2  = a2[1];
  return v6;
}

uint64_t sub_216BD16D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v6 = a4 - 48;
    uint64_t v7 = a3;
    do
    {
      uint64_t v8 = *(void *)(v7 - 48);
      v7 -= 48;
      uint64_t v9 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v6;
      *(void *)uint64_t v6 = v8;
      *(void *)uint64_t v7 = 0;
      sub_2168BD378(v6, v9);
      uint64_t v10 = *(void *)(v7 + 8);
      *(void *)(v7 + 8)  = 0;
      unint64_t v16 = *(atomic_uint **)(v6 + 8);
      *(void *)(v6 + 8)  = v10;
      sub_216BD0624(&v16, v11);
      uint64_t v12 = *(void *)(v7 + 16);
      *(void *)(v7 + 16)  = 0;
      unint64_t v16 = *(atomic_uint **)(v6 + 16);
      *(void *)(v6 + 16)  = v12;
      sub_216BD0624(&v16, v13);
      long long v14 = *(_OWORD *)(v7 + 24);
      *(_DWORD *)(v6 + 4sub_2168EBBB8(&a9, 0) = *(_DWORD *)(v7 + 40);
      *(_OWORD *)(v6 + 24)  = v14;
      v6 -= 48;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_216BD1794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v7 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a4;
    *(void *)a4  = *(void *)v5;
    sub_2168BD80C((uint64_t *)v5);
    sub_2168BD378(a4, v7);
    sub_216BD05D4((atomic_uint **)(a4 + 8), (uint64_t *)(v5 + 8));
    sub_216BD05D4((atomic_uint **)(a4 + 16), (uint64_t *)(v5 + 16));
    int v8 = *(_DWORD *)(v5 + 40);
    *(_OWORD *)(a4 + 24)  = *(_OWORD *)(v5 + 24);
    *(_DWORD *)(a4 + 4sub_2168EBBB8(&a9, 0) = v8;
    a4 += 48;
    v5 += 48;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_216BD1834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0]  = a1;
  v9[1]  = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216BD115C(a1, v4, v6);
      v6 += 48;
      uint64_t v4 = v12 + 48;
      v12 += 48;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_216BD0F6C((uint64_t)v9);
  return v4;
}

void sub_216BD18CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216BD18E0(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x1555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    char v10 = (char *)sub_216B0D05C(v7, v9);
  }
  else {
    char v10 = 0;
  }
  uint64_t v13 = v10;
  long long v14 = &v10[12 * v4];
  unint64_t v16 = &v10[12 * v9];
  sub_216BD19E8((uint64_t)v14, a2);
  unint64_t v15 = v14 + 12;
  sub_216BD1A78(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216BD1C44(&v13);
  return v11;
}

void sub_216BD19D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BD1C44((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BD19E8(uint64_t a1, _DWORD *a2)
{
  sub_216981010(&v5, a2);
  sub_21698105C(&v6, a2 + 1);
  sub_21697D878((_DWORD *)a1, &v5);
  sub_21697D8B4((_DWORD *)(a1 + 4), &v6);
  *(_WORD *)(a1 + 8)  = 0;
  *(unsigned char *)(a1 + 10) &= 0xF8u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  return a1;
}

uint64_t sub_216BD1A78(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216BD1AF0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

uint64_t sub_216BD1AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1)  = a7;
  long long v15 = v16;
  v13[0]  = a1;
  v13[1]  = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      sub_21697D878((_DWORD *)(v7 - 12), (_DWORD *)(v9 - 12));
      sub_21697D8B4((_DWORD *)(v7 - 8), (_DWORD *)(v9 - 8));
      __int16 v10 = *(_WORD *)(v9 - 4);
      *(unsigned char *)(v7 - 2)  = *(unsigned char *)(v9 - 2);
      *(_WORD *)(v7 - 4)  = v10;
      uint64_t v7 = *((void *)&v16 + 1) - 12;
      *((void *)&v16 + 1) -= 12;
      v9 -= 12;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216BD1BB8((uint64_t)v13);
  return v11;
}

uint64_t sub_216BD1BB8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216BD1BF0((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216BD1BF0(uint64_t *result)
{
  uint64_t v1 = *(_DWORD **)(result[2] + 8);
  uint64_t v2 = *(_DWORD **)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_216BD0920(v3, v1);
      v1 += 3;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_216BD1C44(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

_DWORD *sub_216BD1C78(_DWORD *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2)  = v1 - 12;
      uint64_t result = sub_216BD0920(v4, (_DWORD *)(v1 - 12));
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_216BD1CC0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 2)) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - a2) >> 2)) >= a5)
      {
        uint64_t v21 = a3 + 12 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 4 * ((uint64_t)(v12 - a2) >> 2);
        a1[1]  = sub_216BD07E8(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_216BD1E88((uint64_t)a1, v5, v12, v5 + 12 * a5);
      sub_216BD2138((uint64_t)&v23, a3, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 2);
      if (v14 > 0x1555555555555555) {
        sub_21677CB10();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v13) >> 2);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 2);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v18 = 0x1555555555555555;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v27 = v9;
      if (v18) {
        uint64_t v19 = (char *)sub_216B0D05C(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v23 = v19;
      uint64_t v24 = &v19[12 * v15];
      uint64_t v25 = v24;
      char v26 = &v19[12 * v18];
      sub_216BD1F60(&v23, a3, a5);
      uint64_t v5 = sub_216BD1FF4(a1, &v23, v5);
      sub_216BD1C44(&v23);
    }
  }
  return v5;
}

void sub_216BD1E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8)  = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216BD1E88(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    uint64_t v10 = a2 + 4 * ((v6 - a4) >> 2) + 4;
    uint64_t v11 = v6 + 4;
    do
    {
      sub_21697D878((_DWORD *)(v11 - 4), (_DWORD *)(v10 - 4));
      sub_21697D8B4((_DWORD *)v11, (_DWORD *)v10);
      __int16 v12 = *(_WORD *)(v10 + 4);
      *(unsigned char *)(v11 + 6)  = *(unsigned char *)(v10 + 6);
      *(_WORD *)(v11 + 4)  = v12;
      unint64_t v13 = v10 + 8;
      v10 += 12;
      v11 += 12;
    }
    while (v13 < a3);
    uint64_t v8 = v11 - 4;
  }
  *(void *)(a1 + 8)  = v8;
  return sub_216BD20A8((uint64_t)&v15, a2, v7, v6);
}

_DWORD *sub_216BD1F60(_DWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 2);
  if (a3)
  {
    uint64_t v5 = v4 + 12 * a3;
    uint64_t v6 = v4 + 4;
    uint64_t v7 = 12 * a3;
    uint64_t v8 = a2 + 4;
    do
    {
      sub_216981010((_DWORD *)(v6 - 4), (_DWORD *)(v8 - 4));
      uint64_t result = sub_21698105C((_DWORD *)v6, (_DWORD *)v8);
      __int16 v9 = *(_WORD *)(v8 + 4);
      *(unsigned char *)(v6 + 6)  = *(unsigned char *)(v8 + 6);
      *(_WORD *)(v6 + 4)  = v9;
      v6 += 12;
      v8 += 12;
      v7 -= 12;
    }
    while (v7);
  }
  else
  {
    uint64_t v5 = *((void *)result + 2);
  }
  *((void *)v3 + 2)  = v5;
  return result;
}

uint64_t sub_216BD1FF4(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_216BD1AF0((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1]  = v8;
  a2[2]  = sub_216BD21B8(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1  = a2[1];
  a2[1]  = v9;
  uint64_t v10 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v10;
  uint64_t v11 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v11;
  *a2  = a2[1];
  return v6;
}

uint64_t sub_216BD20A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      sub_21697DE94((int *)(a4 + v7 - 12), (int *)(a3 + v7 - 12));
      sub_21697DEEC((int *)(a4 + v7 - 8), (int *)(a3 + v7 - 8));
      char v9 = *(unsigned char *)(a3 + v7 - 2);
      *(_WORD *)(v8 - 4)  = *(_WORD *)(a3 + v7 - 4);
      *(unsigned char *)(v8 - 2)  = v9;
      v7 -= 12;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_216BD2138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    sub_2169C487C((int *)a4, (_DWORD *)v5);
    sub_2169C48D4((int *)(a4 + 4), (_DWORD *)(v5 + 4));
    char v7 = *(unsigned char *)(v5 + 10);
    *(_WORD *)(a4 + 8)  = *(_WORD *)(v5 + 8);
    *(unsigned char *)(a4 + 1sub_2168EBBB8(&a9, 0) = v7;
    a4 += 12;
    v5 += 12;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_216BD21B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0]  = a1;
  v9[1]  = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_21697D878((_DWORD *)v4, (_DWORD *)v6);
      sub_21697D8B4((_DWORD *)(v4 + 4), (_DWORD *)(v6 + 4));
      __int16 v7 = *(_WORD *)(v6 + 8);
      *(unsigned char *)(v4 + 1sub_2168EBBB8(&a9, 0) = *(unsigned char *)(v6 + 10);
      *(_WORD *)(v4 + 8)  = v7;
      uint64_t v4 = v12 + 12;
      v12 += 12;
      v6 += 12;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_216BD0894((uint64_t)v9);
  return v4;
}

void *sub_216BD2264(void *a1, unint64_t a2)
{
  *a1  = 0;
  a1[1]  = 0;
  a1[2]  = 0;
  if (a2)
  {
    sub_216805AB0(a1, a2);
    unint64_t v4 = a1[1];
    unint64_t v5 = v4 + a2;
    a1[1]  = v4 + a2;
    if (v4)
    {
      unint64_t v6 = v5 - 1;
      if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v10 = *a1 + 8 * (v4 >> 6);
        int v11 = v4 & 0x3F;
        sub_216805EE4((uint64_t)&v10, a2);
        return a1;
      }
    }
    else
    {
      unint64_t v6 = v5 - 1;
    }
    unint64_t v7 = v6 >> 6;
    if (v5 >= 0x41) {
      unint64_t v8 = v7;
    }
    else {
      unint64_t v8 = 0;
    }
    *(void *)(*a1 + 8 * v8)  = 0;
    goto LABEL_10;
  }
  return a1;
}

uint64_t sub_216BD230C(uint64_t *a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = *a1;
  if (*a3)
  {
    uint64_t v6 = *a1;
    return sub_216BD2388((uint64_t)&v6, *(unsigned int *)(a2 + 8) - (unint64_t)*((unsigned int *)a1 + 2) + 8 * (*(void *)a2 - v3));
  }
  else
  {
    uint64_t v5 = *a1;
    return sub_216BD2448((uint64_t)&v5, *(unsigned int *)(a2 + 8) - (unint64_t)*((unsigned int *)a1 + 2) + 8 * (*(void *)a2 - v3));
  }
}

uint64_t sub_216BD2388(uint64_t a1, unint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    if ((64 - v2) >= a2) {
      unint64_t v3 = a2;
    }
    else {
      unint64_t v3 = (64 - v2);
    }
    uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - v2 - v3)) & (-1 << v2) & **(void **)a1));
    v4.i16[0]  = vaddlv_u8(v4);
    uint64_t v5 = v4.u32[0];
    a2 -= v3;
    *(void *)a1 += 8;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (a2 >= 0x40)
  {
    uint64_t v6 = *(int8x8_t **)a1;
    do
    {
      int8x8_t v7 = *v6++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0]  = vaddlv_u8(v8);
      v5 += v8.u32[0];
      a2 -= 64;
    }
    while (a2 > 0x3F);
    *(void *)a1  = v6;
  }
  if (a2)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)(**(void **)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a2)));
    v9.i16[0]  = vaddlv_u8(v9);
    v5 += v9.u32[0];
  }
  return v5;
}

uint64_t sub_216BD2448(uint64_t a1, unint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    if ((64 - v2) >= a2) {
      unint64_t v3 = a2;
    }
    else {
      unint64_t v3 = (64 - v2);
    }
    uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - v2 - v3)) & (-1 << v2) & ~**(void **)a1));
    v4.i16[0]  = vaddlv_u8(v4);
    uint64_t v5 = v4.u32[0];
    a2 -= v3;
    *(void *)a1 += 8;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (a2 >= 0x40)
  {
    uint64_t v6 = *(uint64_t **)a1;
    do
    {
      uint64_t v7 = *v6++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)~v7);
      v8.i16[0]  = vaddlv_u8(v8);
      v5 += v8.u32[0];
      a2 -= 64;
    }
    while (a2 > 0x3F);
    *(void *)a1  = v6;
  }
  if (a2)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> -(char)a2) & ~**(void **)a1));
    v9.i16[0]  = vaddlv_u8(v9);
    v5 += v9.u32[0];
  }
  return v5;
}

void sub_216BD2514(uint64_t *a1, void *a2)
{
  memset(v109, 0, sizeof(v109));
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  uint64_t v108 = v109;
  uint64_t v110 = 0;
  uint64_t v111 = v112;
  memset(v112, 0, sizeof(v112));
  uint64_t v113 = 0;
  uint64_t v114 = 0;
  uint64_t v115 = v116;
  memset(v116, 0, sizeof(v116));
  memset(v119, 0, sizeof(v119));
  uint64_t v117 = 0;
  uint64_t v118 = v119;
  v121[0]  = 0;
  v121[1]  = 0;
  uint64_t v120 = (std::locale::__imp *)v121;
  v123[0]  = 0;
  v123[1]  = 0;
  uint64_t v122 = (std::locale::__imp *)v123;
  sub_216BD39EC(a1, (uint64_t)&v105);
  unint64_t v3 = sub_216779180(a2, (uint64_t)"PcpCache Statistics", 19);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
  uint8x8_t v4 = std::locale::use_facet(&v102, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v5 = sub_216779180(v3, (uint64_t)"-------------------", 19);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  uint64_t v6 = std::locale::use_facet(&v102, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v7 = sub_216779180(a2, (uint64_t)"Entries: ", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
  uint8x8_t v8 = std::locale::use_facet(&v102, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  uint8x8_t v9 = sub_216779180(a2, (uint64_t)"  Prim indexes:                      ", 37);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd", v10, v11, v105);
  if ((v104 & 0x80u) == 0) {
    locale  = &v102;
  }
  else {
    locale  = v102.__locale_;
  }
  if ((v104 & 0x80u) == 0) {
    uint64_t v13 = v104;
  }
  else {
    uint64_t v13 = (uint64_t)v103;
  }
  unint64_t v14 = sub_216779180(v9, (uint64_t)locale, v13);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
  char v15 = std::locale::use_facet(&v124, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
  std::locale::~locale(&v124);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v104 < 0) {
    operator delete(v102.__locale_);
  }
  unint64_t v16 = sub_216779180(a2, (uint64_t)"  Property indexes:                  ", 37);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd", v17, v18, v106);
  if ((v104 & 0x80u) == 0) {
    uint64_t v19 = &v102;
  }
  else {
    uint64_t v19 = v102.__locale_;
  }
  if ((v104 & 0x80u) == 0) {
    uint64_t v20 = v104;
  }
  else {
    uint64_t v20 = (uint64_t)v103;
  }
  uint64_t v21 = sub_216779180(v16, (uint64_t)v19, v20);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
  int v22 = std::locale::use_facet(&v124, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale(&v124);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v104 < 0) {
    operator delete(v102.__locale_);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
  uint64_t v23 = std::locale::use_facet(&v102, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v24 = sub_216779180(a2, (uint64_t)"Prim graphs: ", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
  uint64_t v25 = std::locale::use_facet(&v102, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  sub_216BD3D6C(&v107, &v110, a2);
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
  char v26 = std::locale::use_facet(&v102, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v27 = sub_216779180(a2, (uint64_t)"Prim graphs (shared): ", 22);
  std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24)));
  uint64_t v28 = std::locale::use_facet(&v102, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v29 = sub_216779180(a2, (uint64_t)"  Graph instances:                   ", 37);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd", v30, v31, v113);
  if ((v104 & 0x80u) == 0) {
    unsigned int v32 = &v102;
  }
  else {
    unsigned int v32 = v102.__locale_;
  }
  if ((v104 & 0x80u) == 0) {
    uint64_t v33 = v104;
  }
  else {
    uint64_t v33 = (uint64_t)v103;
  }
  uint64_t v34 = sub_216779180(v29, (uint64_t)v32, v33);
  std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(*v34 - 24)));
  uint64_t v35 = std::locale::use_facet(&v124, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
  std::locale::~locale(&v124);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v104 < 0) {
    operator delete(v102.__locale_);
  }
  sub_216BD3D6C(&v114, &v117, a2);
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
  uint64_t v36 = std::locale::use_facet(&v102, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  long long v37 = sub_216779180(a2, (uint64_t)"Memory usage: ", 14);
  std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(void *)(*v37 - 24)));
  char v38 = std::locale::use_facet(&v102, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v39 = sub_216779180(a2, (uint64_t)"  sizeof(PcpMapFunction):            ", 37);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd B", v40, v41, 56);
  if ((v104 & 0x80u) == 0) {
    int v42 = &v102;
  }
  else {
    int v42 = v102.__locale_;
  }
  if ((v104 & 0x80u) == 0) {
    uint64_t v43 = v104;
  }
  else {
    uint64_t v43 = (uint64_t)v103;
  }
  int v44 = sub_216779180(v39, (uint64_t)v42, v43);
  std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(void *)(*v44 - 24)));
  uint64_t v45 = std::locale::use_facet(&v124, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
  std::locale::~locale(&v124);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v104 < 0) {
    operator delete(v102.__locale_);
  }
  uint64_t v46 = sub_216779180(a2, (uint64_t)"  sizeof(PcpLayerStackPtr):          ", 37);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd B", v47, v48, 16);
  if ((v104 & 0x80u) == 0) {
    uint64_t v49 = &v102;
  }
  else {
    uint64_t v49 = v102.__locale_;
  }
  if ((v104 & 0x80u) == 0) {
    uint64_t v50 = v104;
  }
  else {
    uint64_t v50 = (uint64_t)v103;
  }
  unint64_t v51 = sub_216779180(v46, (uint64_t)v49, v50);
  std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(void *)(*v51 - 24)));
  uint64_t v52 = std::locale::use_facet(&v124, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
  std::locale::~locale(&v124);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v104 < 0) {
    operator delete(v102.__locale_);
  }
  unsigned int v53 = sub_216779180(a2, (uint64_t)"  sizeof(PcpLayerStackSite):         ", 37);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd B", v54, v55, 16);
  if ((v104 & 0x80u) == 0) {
    uint64_t v56 = &v102;
  }
  else {
    uint64_t v56 = v102.__locale_;
  }
  if ((v104 & 0x80u) == 0) {
    uint64_t v57 = v104;
  }
  else {
    uint64_t v57 = (uint64_t)v103;
  }
  uint64_t v58 = sub_216779180(v53, (uint64_t)v56, v57);
  std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(void *)(*v58 - 24)));
  int v59 = std::locale::use_facet(&v124, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
  std::locale::~locale(&v124);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v104 < 0) {
    operator delete(v102.__locale_);
  }
  uint64_t v60 = sub_216779180(a2, (uint64_t)"  sizeof(PcpPrimIndex):              ", 37);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd B", v61, v62, 40);
  if ((v104 & 0x80u) == 0) {
    std::string::size_type v63 = &v102;
  }
  else {
    std::string::size_type v63 = v102.__locale_;
  }
  if ((v104 & 0x80u) == 0) {
    uint64_t v64 = v104;
  }
  else {
    uint64_t v64 = (uint64_t)v103;
  }
  unsigned int v65 = sub_216779180(v60, (uint64_t)v63, v64);
  std::ios_base::getloc((const std::ios_base *)((char *)v65 + *(void *)(*v65 - 24)));
  uint64_t v66 = std::locale::use_facet(&v124, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v66->__vftable[2].~facet_0)(v66, 10);
  std::locale::~locale(&v124);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v104 < 0) {
    operator delete(v102.__locale_);
  }
  uint64_t v67 = sub_216779180(a2, (uint64_t)"  sizeof(PcpPrimIndex_Graph):        ", 37);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd B", v68, v69, 64);
  if ((v104 & 0x80u) == 0) {
    long long v70 = &v102;
  }
  else {
    long long v70 = v102.__locale_;
  }
  if ((v104 & 0x80u) == 0) {
    uint64_t v71 = v104;
  }
  else {
    uint64_t v71 = (uint64_t)v103;
  }
  long long v72 = sub_216779180(v67, (uint64_t)v70, v71);
  std::ios_base::getloc((const std::ios_base *)((char *)v72 + *(void *)(*v72 - 24)));
  uint64_t v73 = std::locale::use_facet(&v124, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v73->__vftable[2].~facet_0)(v73, 10);
  std::locale::~locale(&v124);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v104 < 0) {
    operator delete(v102.__locale_);
  }
  std::string::size_type v74 = sub_216779180(a2, (uint64_t)"  sizeof(PcpPrimIndex_Graph::_Node): ", 37);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd B", v75, v76, 48);
  if ((v104 & 0x80u) == 0) {
    uint64_t v77 = &v102;
  }
  else {
    uint64_t v77 = v102.__locale_;
  }
  if ((v104 & 0x80u) == 0) {
    uint64_t v78 = v104;
  }
  else {
    uint64_t v78 = (uint64_t)v103;
  }
  uint64_t v79 = sub_216779180(v74, (uint64_t)v77, v78);
  std::ios_base::getloc((const std::ios_base *)((char *)v79 + *(void *)(*v79 - 24)));
  long long v80 = std::locale::use_facet(&v124, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v80->__vftable[2].~facet_0)(v80, 10);
  std::locale::~locale(&v124);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v104 < 0) {
    operator delete(v102.__locale_);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
  char v81 = std::locale::use_facet(&v102, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v81->__vftable[2].~facet_0)(v81, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  long long v82 = sub_216779180(a2, (uint64_t)"PcpMapFunction size histogram: ", 31);
  std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(void *)(*v82 - 24)));
  char v83 = std::locale::use_facet(&v102, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  std::string::size_type v84 = sub_216779180(a2, (uint64_t)"SIZE    COUNT", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v84 + *(void *)(*v84 - 24)));
  uint64_t v85 = std::locale::use_facet(&v102, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v85->__vftable[2].~facet_0)(v85, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  v102.__locale_  = v120;
  std::string::size_type v103 = (std::locale::__imp *)v121;
  while (v102.__locale_ != v103)
  {
    uint64_t v88 = *(void *)(*sub_216BD458C(&v102, v86, v87) + 32);
    uint64_t v91 = sub_216BD458C(&v102, v89, v90);
    printf("%zu   %zu\n", v88, *(void *)(*v91 + 40));
    sub_216BD4608(&v102);
  }
  std::string::size_type v92 = sub_216779180(a2, (uint64_t)"PcpLayerStack pathsWithRelocates size histogram: ", 49);
  std::ios_base::getloc((const std::ios_base *)((char *)v92 + *(void *)(*v92 - 24)));
  uint64_t v93 = std::locale::use_facet(&v102, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v93->__vftable[2].~facet_0)(v93, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  long long v94 = sub_216779180(a2, (uint64_t)"SIZE    COUNT", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v94 + *(void *)(*v94 - 24)));
  int v95 = std::locale::use_facet(&v102, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v95->__vftable[2].~facet_0)(v95, 10);
  std::locale::~locale(&v102);
  std::ostream::put();
  std::ostream::flush();
  v102.__locale_  = v122;
  std::string::size_type v103 = (std::locale::__imp *)v123;
  while (v102.__locale_ != v103)
  {
    uint64_t v98 = *(void *)(*sub_216BD458C(&v102, v96, v97) + 32);
    std::string::size_type v101 = sub_216BD458C(&v102, v99, v100);
    printf("%zu   %zu\n", v98, *(void *)(*v101 + 40));
    sub_216BD4608(&v102);
  }
  sub_2167FB780((uint64_t)&v122, v123[0]);
  sub_2167FB780((uint64_t)&v120, v121[0]);
  sub_2167FB780((uint64_t)&v118, v119[0]);
  sub_2167FB780((uint64_t)&v115, v116[0]);
  sub_2167FB780((uint64_t)&v111, v112[0]);
  sub_2167FB780((uint64_t)&v108, v109[0]);
}

void sub_216BD364C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17)
{
}

void sub_216BD373C(uint64_t *a1, void *a2)
{
  uint64_t v19 = v20;
  memset(v20, 0, sizeof(v20));
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  uint64_t v15 = 0;
  unint64_t v16 = v17;
  sub_216BD4798(a1, (uint64_t)&v18, 0);
  sub_216BD4798(a1, (uint64_t)&v15, 1);
  uint8x8_t v4 = sub_216779180(a2, (uint64_t)"PcpPrimIndex Statistics - ", 26);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)a1);
  v13.__locale_  = v5;
  uint64_t v14 = v6;
  Path  = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v13);
  uint8x8_t v8 = pxrInternal__aapl__pxrReserved__::operator<<(v4, Path);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
  uint8x8_t v9 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale(&v21);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v10 = sub_216779180(v8, (uint64_t)"-----------------------", 23);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
  int v11 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v21);
  std::ostream::put();
  std::ostream::flush();
  sub_216BD3D6C(&v18, &v15, a2);
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
  uint64_t v12 = std::locale::use_facet(&v13, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v13);
  std::ostream::put();
  std::ostream::flush();
  sub_2167FB780((uint64_t)&v16, v17[0]);
  sub_2167FB780((uint64_t)&v19, v20[0]);
}

void sub_216BD39A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  std::locale::~locale(&a10);
  sub_2167FB780(v20, a14);
  sub_2167FB780(v19, a19);
  _Unwind_Resume(a1);
}

void sub_216BD39EC(uint64_t *a1, uint64_t a2)
{
  v46[0]  = 0;
  v46[1]  = 0;
  uint64_t v45 = (uint64_t *)v46;
  long long v42 = 0u;
  long long v43 = 0u;
  int v44 = 1065353216;
  uint64_t v40 = (uint64_t)sub_216BD4BE4((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 26));
  char v41 = 0;
  while ((void **)v40 != v41)
  {
    uint64_t v6 = (uint64_t *)(*sub_216BD471C(&v40, v4, v5) + 8);
    if (*v6)
    {
      ++*(void *)a2;
      sub_216BD4798(v6, a2 + 16, 0);
      sub_216BD4798(v6, a2 + 56, 1);
      uint64_t v7 = sub_216BCFCE4(v6);
      sub_216BD4CA0(&v45, (unint64_t *)(v7 + 16), (uint64_t *)(v7 + 16));
      if (v8)
      {
        ++*(void *)(a2 + 96);
        sub_216BD4798(v6, a2 + 104, 0);
        sub_216BD4798(v6, a2 + 144, 1);
      }
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v6, 6u, (uint64_t *)&v36);
      uint64_t v10 = v36;
      uint8x8_t v9 = v37;
      int v11 = v38;
      if (v36 != v38 || v37 != v39)
      {
        uint64_t v12 = (uint64_t *)((char *)v39 - 1);
        do
        {
          do
          {
            std::locale v13 = v9;
            v35[0]  = v10;
            v35[1]  = v9;
            MapToParent  = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v35);
            uint64_t v17 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v15, v16);
            sub_216BD4D6C((uint64_t)&v42, v17, (uint64_t)v17);
            MapToRoot  = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v35);
            std::locale v21 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v19, v20);
            sub_216BD4D6C((uint64_t)&v42, v21, (uint64_t)v21);
            uint8x8_t v9 = (uint64_t *)((char *)v13 + 1);
          }
          while (v10 != v11);
        }
        while (v12 != v13);
      }
    }
    sub_216BD48C8((unint64_t *)&v40);
  }
  uint64_t v36 = sub_216BD50F8((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 31));
  long long v37 = 0;
  while (v36 != v37)
  {
    uint64_t v24 = sub_216BD4954(&v36, v22, v23);
    if (!pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::IsEmpty((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)(*v24 + 8))) {
      ++*(void *)(a2 + 8);
    }
    sub_216BD49D0((unint64_t *)&v36);
  }
  uint64_t v40 = v43;
  char v41 = 0;
  while ((void **)v40 != v41)
  {
    v35[0]  = 0;
    uint64_t v25 = sub_216BD4A5C(&v40, v22, v23);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetSourceToTargetMap((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)(*v25 + 16), &v36);
    char v26 = v38;
    sub_21698F21C((uint64_t)&v36, v37);
    v35[0]  = v26;
    uint64_t v36 = (uint64_t *)v35;
    uint64_t v27 = sub_216AE11E4((uint64_t **)(a2 + 184), (unint64_t *)v35, (uint64_t)&unk_2174BFD90, &v36);
    ++v27[5];
    sub_216BD4AD8((uint64_t)&v40);
  }
  uint64_t v28 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_216BD4B58(a1 + 25);
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::GetAllLayerStacks(v28, (uint64_t *)&v36);
  uint64_t v29 = v36;
  uint64_t v30 = v37;
  if (v36 != v37)
  {
    unsigned int v31 = (uint64_t **)(a2 + 208);
    do
    {
      uint64_t v40 = 0;
      unsigned int v32 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(v29);
      PathsToPrimsWithRelocates  = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetPathsToPrimsWithRelocates(v32);
      uint64_t v40 = (uint64_t)(PathsToPrimsWithRelocates[1] - *PathsToPrimsWithRelocates) >> 3;
      v35[0]  = &v40;
      uint64_t v34 = sub_216AE11E4(v31, (unint64_t *)&v40, (uint64_t)&unk_2174BFD90, v35);
      ++v34[5];
      v29 += 2;
    }
    while (v29 != v30);
  }
  uint64_t v40 = (uint64_t)&v36;
  sub_216850BF4((void ***)&v40);
  sub_216BD51F0((uint64_t)&v42);
  sub_216BD5270((uint64_t)&v45, v46[0]);
}

void sub_216BD3D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24)
{
}

void sub_216BD3D6C(void *a1, void *a2, void *a3)
{
  uint64_t v5 = sub_216779180(a3, (uint64_t)"  Total nodes:                       ", 37);
  unsigned int v61 = a1;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd", v6, v7, *a1);
  if ((v78 & 0x80u) == 0) {
    locale  = &v76;
  }
  else {
    locale  = v76.__locale_;
  }
  if ((v78 & 0x80u) == 0) {
    uint64_t v9 = v78;
  }
  else {
    uint64_t v9 = (uint64_t)v77;
  }
  uint64_t v10 = sub_216779180(v5, (uint64_t)locale, v9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
  int v11 = std::locale::use_facet(&v74, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v74);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v78 < 0) {
    operator delete(v76.__locale_);
  }
  uint64_t v12 = sub_216779180(a3, (uint64_t)"  Total culled* nodes:               ", 37);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd", v13, v14, *a2);
  if ((v78 & 0x80u) == 0) {
    uint64_t v15 = &v76;
  }
  else {
    uint64_t v15 = v76.__locale_;
  }
  if ((v78 & 0x80u) == 0) {
    uint64_t v16 = v78;
  }
  else {
    uint64_t v16 = (uint64_t)v77;
  }
  uint64_t v17 = sub_216779180(v12, (uint64_t)v15, v16);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  uint64_t v18 = std::locale::use_facet(&v74, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale(&v74);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v78 < 0) {
    operator delete(v76.__locale_);
  }
  uint64_t v19 = sub_216779180(a3, (uint64_t)"  By type (total / culled*):         ", 37);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  uint64_t v20 = std::locale::use_facet(&v76, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v76);
  std::ostream::put();
  std::ostream::flush();
  sub_216BD52D0((uint64_t *)&v76, (uint64_t)(a1 + 1));
  sub_216BD52D0((uint64_t *)&v74, (uint64_t)(a2 + 1));
  unsigned int v21 = 0;
  unsigned int v73 = 0;
  uint64_t v22 = (std::locale::id *)MEMORY[0x263F8C108];
  do
  {
    pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C75BAC8, v21, (uint64_t)&v70);
    uint64_t v23 = sub_216779180(a3, (uint64_t)"    ", 4);
    if ((v72 & 0x80u) == 0) {
      uint64_t v24 = &v70;
    }
    else {
      uint64_t v24 = v70.__locale_;
    }
    if ((v72 & 0x80u) == 0) {
      uint64_t v25 = v72;
    }
    else {
      uint64_t v25 = v71;
    }
    char v26 = sub_216779180(v23, (uint64_t)v24, v25);
    uint64_t v27 = sub_216779180(v26, (uint64_t)": ", 2);
    if ((v72 & 0x80u) == 0) {
      int v28 = v72;
    }
    else {
      int v28 = v71;
    }
    v63[0]  = &v73;
    uint64_t v29 = sub_216ADE9D4((uint64_t **)&v76, (int *)&v73, (uint64_t)&unk_2174BFD90, (_DWORD **)v63);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd", v30, v31, v29[5]);
    if (v66 >= 0) {
      unsigned int v32 = v65;
    }
    else {
      unsigned int v32 = (void **)v65[0];
    }
    v79.__locale_  = (std::locale::__imp *)&v73;
    uint64_t v33 = sub_216ADE9D4((uint64_t **)&v74, (int *)&v73, (uint64_t)&unk_2174BFD90, &v79);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd", v34, v35, v33[5]);
    char v38 = v63;
    if (v64 < 0) {
      char v38 = (void **)v63[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%*s%s / %s", v36, v37, (31 - v28), "", v32, v38);
    if ((v69 & 0x80u) == 0) {
      p_p  = &__p;
    }
    else {
      p_p  = __p;
    }
    if ((v69 & 0x80u) == 0) {
      uint64_t v40 = v69;
    }
    else {
      uint64_t v40 = v68;
    }
    char v41 = sub_216779180(v27, (uint64_t)p_p, v40);
    std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24)));
    long long v42 = std::locale::use_facet(&v79, v22);
    ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
    std::locale::~locale(&v79);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v69 < 0) {
      operator delete(__p);
    }
    if (v64 < 0) {
      operator delete(v63[0]);
    }
    if (v66 < 0) {
      operator delete(v65[0]);
    }
    if (v73 == 1)
    {
      long long v43 = sub_216779180(a3, (uint64_t)"      implied inherits: ", 24);
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd", v44, v45, v61[4]);
      int v46 = v66;
      uint64_t v47 = (void **)v65[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zd", v48, v49, a2[4]);
      uint64_t v52 = v65;
      if (v46 < 0) {
        uint64_t v52 = v47;
      }
      unsigned int v53 = v63;
      if (v64 < 0) {
        unsigned int v53 = (void **)v63[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%*s%s / %s", v50, v51, 13, "", v52, v53);
      if ((v69 & 0x80u) == 0) {
        uint64_t v54 = &__p;
      }
      else {
        uint64_t v54 = __p;
      }
      if ((v69 & 0x80u) == 0) {
        uint64_t v55 = v69;
      }
      else {
        uint64_t v55 = v68;
      }
      uint64_t v56 = sub_216779180(v43, (uint64_t)v54, v55);
      std::ios_base::getloc((const std::ios_base *)((char *)v56 + *(void *)(*v56 - 24)));
      uint64_t v57 = std::locale::use_facet(&v79, v22);
      ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
      std::locale::~locale(&v79);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v69 < 0) {
        operator delete(__p);
      }
      if (v64 < 0) {
        operator delete(v63[0]);
      }
      if (v66 < 0) {
        operator delete(v65[0]);
      }
    }
    if ((char)v72 < 0) {
      operator delete(v70.__locale_);
    }
    unsigned int v21 = v73 + 1;
    unsigned int v73 = v21;
  }
  while (v21 != 7);
  uint64_t v58 = sub_216779180(a3, (uint64_t)"  (*) This does not include culled nodes that were erased ", 58);
  int v59 = sub_216779180(v58, (uint64_t)"from the graph", 14);
  std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(void *)(*v59 - 24)));
  uint64_t v60 = std::locale::use_facet(&v70, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
  std::locale::~locale(&v70);
  std::ostream::put();
  std::ostream::flush();
  sub_2167FB780((uint64_t)&v74, v75);
  sub_2167FB780((uint64_t)&v76, v77);
}

void sub_216BD4484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,std::locale a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,std::locale a40,uint64_t a41)
{
  sub_2167FB780(v41 - 128, *(void **)(v41 - 120));
  _Unwind_Resume(a1);
}

void *sub_216BD458C(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0]  = "tf/iterator.h";
    v3[1]  = "operator->";
    uint64_t v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<unsigned long, unsigned long>>::operator->()"
            " [T  = std::map<unsigned long, unsigned long>, Reverse  = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216BD4608(void *a1)
{
  int v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0]  = "tf/iterator.h";
    v7[1]  = "operator++";
    uint64_t v7[2] = 250;
    void v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<unsigned long, unsigned long>>"
            "::operator++() [T  = std::map<unsigned long, unsigned long>, Reverse  = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    unint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        char v4 = v3;
        unint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        char v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        int v2 = v4;
      }
      while (!v5);
    }
    *a1  = v4;
  }
  return a1;
}

void **sub_216BD46B0(void **a1)
{
  return a1;
}

void *sub_216BD471C(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0]  = "tf/iterator.h";
    v3[1]  = "operator->";
    uint64_t v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::SdfPathTable<"
            "pxrInternal__aapl__pxrReserved__::PcpPrimIndex>>::operator->() [T  = const pxrInternal__aapl__pxrReserved__::"
            "SdfPathTable<pxrInternal__aapl__pxrReserved__::PcpPrimIndex>, Reverse  = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t *sub_216BD4798(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(a1, 6u, &v19);
  uint64_t v7 = v19;
  uint64_t v6 = v20;
  uint64_t v8 = v21;
  if (v19 != v21 || v20 != v22)
  {
    uint64_t v10 = v22 - 1;
    do
    {
      uint64_t v11 = v6;
      v18[0]  = v7;
      v18[1]  = v6;
      if (!a3
        || (uint64_t result = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v18),
            result))
      {
        ++*(void *)a2;
        Arcuint64_t Type = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v18);
        p_Arcuint64_t Type = &ArcType;
        uint64_t v12 = sub_216ADE9D4((uint64_t **)(a2 + 8), &ArcType, (uint64_t)&unk_2174BFD90, &p_ArcType);
        v12[5]  = (uint64_t *)((char *)v12[5] + 1);
        uint64_t OriginNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v18);
        uint64_t v15 = v14;
        uint64_t result = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v18);
        if (v15 != v16 || (uint64_t *)OriginNode != result)
        {
          uint64_t result = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v18);
          if (result == 1) {
            ++*(void *)(a2 + 32);
          }
        }
      }
      uint64_t v6 = v11 + 1;
    }
    while (v7 != v8 || v10 != v11);
  }
  return result;
}

unint64_t *sub_216BD48C8(unint64_t *a1)
{
  if (*a1 == a1[1])
  {
    v4[0]  = "tf/iterator.h";
    v4[1]  = "operator++";
    v4[2]  = 250;
    void v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":SdfPathTable<pxrInternal__aapl__pxrReserved__::PcpPrimIndex>>::operator++() [T  = const pxrInternal__aapl__p"
            "xrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::PcpPrimIndex>, Reverse  = false]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    unint64_t v2 = *(void *)(*a1 + 56);
    if (!v2) {
      unint64_t v2 = sub_216BD50BC((uint64_t)a1);
    }
    *a1  = v2;
  }
  return a1;
}

void *sub_216BD4954(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0]  = "tf/iterator.h";
    v3[1]  = "operator->";
    uint64_t v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::SdfPathTable<"
            "pxrInternal__aapl__pxrReserved__::PcpPropertyIndex>>::operator->() [T  = const pxrInternal__aapl__pxrReserved"
            "__::SdfPathTable<pxrInternal__aapl__pxrReserved__::PcpPropertyIndex>, Reverse  = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

unint64_t *sub_216BD49D0(unint64_t *a1)
{
  if (*a1 == a1[1])
  {
    v4[0]  = "tf/iterator.h";
    v4[1]  = "operator++";
    v4[2]  = 250;
    void v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":SdfPathTable<pxrInternal__aapl__pxrReserved__::PcpPropertyIndex>>::operator++() [T  = const pxrInternal__aap"
            "l__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::PcpPropertyIndex>, Reverse  = false]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    unint64_t v2 = *(void *)(*a1 + 48);
    if (!v2) {
      unint64_t v2 = sub_216BD51B4((uint64_t)a1);
    }
    *a1  = v2;
  }
  return a1;
}

void *sub_216BD4A5C(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0]  = "tf/iterator.h";
    v3[1]  = "operator->";
    uint64_t v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrIntern"
            "al__aapl__pxrReserved__::PcpMapFunction, pxrInternal__aapl__pxrReserved__::Pcp_Statistics::MapFuncHash>>::op"
            "erator->() [T  = pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::PcpMapFunction"
            ", pxrInternal__aapl__pxrReserved__::Pcp_Statistics::MapFuncHash>, Reverse  = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_216BD4AD8(uint64_t a1)
{
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    v3[0]  = "tf/iterator.h";
    v3[1]  = "operator++";
    uint64_t v3[2] = 250;
    void v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHas"
            "hSet<pxrInternal__aapl__pxrReserved__::PcpMapFunction, pxrInternal__aapl__pxrReserved__::Pcp_Statistics::Map"
            "FuncHash>>::operator++() [T  = pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::"
            "PcpMapFunction, pxrInternal__aapl__pxrReserved__::Pcp_Statistics::MapFuncHash>, Reverse  = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(void *)a1  = **(void **)a1;
  }
  return a1;
}

uint64_t sub_216BD4B58(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    unint64_t v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0]  = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1]  = "operator->";
    uint64_t v3[2] = 953;
    void v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry>::ope"
            "rator->() const [U  = pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000021747A8D4 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

void *sub_216BD4BE4(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  if (!*((void *)a1 + 3)) {
    return 0;
  }
  unint64_t v2 = (unsigned int *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);

  return sub_216BD4C38(a1, v2);
}

void *sub_216BD4C38(void *a1, unsigned int *a2)
{
  if (!a1[3]) {
    return 0;
  }
  for (uint64_t result = *(void **)(*a1
                            + 8
                            * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & a1[4]));
        result;
        uint64_t result = (void *)result[6])
  {
    if (*result == *(void *)a2) {
      break;
    }
  }
  return result;
}

uint64_t *sub_216BD4CA0(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        return (uint64_t *)v8;
      }
      int v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x30uLL);
    uint64_t v11 = a3[1];
    v10[4]  = *a3;
    void v10[5] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    sub_21677B358(a1, (uint64_t)v8, v6, v10);
  }
  return v10;
}

void *sub_216BD4D6C(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpMapFunction *this, uint64_t a3)
{
  unint64_t v7 = pxrInternal__aapl__pxrReserved__::PcpMapFunction::Hash(this);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0]  = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      std::locale v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            if (pxrInternal__aapl__pxrReserved__::PcpMapFunction::operator==((uint64_t)(v13 + 2), (uint64_t)this)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          std::locale v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  sub_216BD4FDC(a1, v8, a3, (uint64_t)v24);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_21678A04C(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *(void *)v24[0]  = *v21;
    void *v21 = v24[0];
  }
  else
  {
    *(void *)v24[0]  = *(void *)(a1 + 16);
    *(void *)(a1 + 16)  = v24[0];
    *(void *)(*(void *)a1 + 8 * v3)  = a1 + 16;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9) {
          v22 %= v9;
        }
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22)  = v24[0];
    }
  }
  std::locale v13 = (void *)v24[0];
  v24[0]  = 0;
  ++*(void *)(a1 + 24);
  sub_216BD5064((uint64_t)v24, 0);
  return v13;
}

void sub_216BD4FC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BD5064((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

__n128 sub_216BD4FDC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x48uLL);
  *(void *)a4  = v8;
  *(void *)(a4 + 8)  = v7;
  *(unsigned char *)(a4 + 16)  = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1)  = a2;
  sub_216BBEE18((_DWORD *)v8 + 4, a3);
  __n128 result = *(__n128 *)(a3 + 40);
  *(__n128 *)(v8 + 56)  = result;
  *(unsigned char *)(a4 + 16)  = 1;
  return result;
}

void sub_216BD504C(_Unwind_Exception *a1)
{
  sub_216BD5064(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216BD5064(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1  = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216BBED8C((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

unint64_t sub_216BD50BC(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  for (uint64_t i = *(void *)(*(void *)a1 + 64); ; uint64_t i = *(void *)(result + 64))
  {
    unint64_t result = i & 0xFFFFFFFFFFFFFFF8;
    if ((i & 7) != 0 && result != 0) {
      break;
    }
    if (result) {
      BOOL v4 = (i & 7) == 0;
    }
    else {
      BOOL v4 = 0;
    }
    if (!v4) {
      return 0;
    }
  }
  return result;
}

void *sub_216BD50F8(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  if (!*((void *)a1 + 3)) {
    return 0;
  }
  unint64_t v2 = (unsigned int *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);

  return sub_216BD514C(a1, v2);
}

void *sub_216BD514C(void *a1, unsigned int *a2)
{
  if (!a1[3]) {
    return 0;
  }
  for (unint64_t result = *(void **)(*a1
                            + 8
                            * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & a1[4]));
        result;
        unint64_t result = (void *)result[5])
  {
    if (*result == *(void *)a2) {
      break;
    }
  }
  return result;
}

unint64_t sub_216BD51B4(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  for (uint64_t i = *(void *)(*(void *)a1 + 56); ; uint64_t i = *(void *)(result + 56))
  {
    unint64_t result = i & 0xFFFFFFFFFFFFFFF8;
    if ((i & 7) != 0 && result != 0) {
      break;
    }
    if (result) {
      BOOL v4 = (i & 7) == 0;
    }
    else {
      BOOL v4 = 0;
    }
    if (!v4) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_216BD51F0(uint64_t a1)
{
  sub_216BD522C(a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1  = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216BD522C(uint64_t a1, void *a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_216BBED8C((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216BD5270(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216BD5270(a1, *a2);
    sub_216BD5270(a1, a2[1]);
    BOOL v4 = (std::__shared_weak_count *)a2[5];
    if (v4) {
      sub_216784EC4(v4);
    }
    operator delete(a2);
  }
}

uint64_t *sub_216BD52D0(uint64_t *a1, uint64_t a2)
{
  a1[2]  = 0;
  a1[1]  = 0;
  *a1  = (uint64_t)(a1 + 1);
  sub_216BD5328(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_216BD5310(_Unwind_Exception *a1)
{
  sub_2167FB780(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_216BD5328(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    BOOL v4 = a2;
    int v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      unint64_t result = sub_216BD53B4(v5, v6, v4 + 8, (_OWORD *)v4 + 2);
      uint64_t v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          BOOL v4 = v8;
        }
        while (!v9);
      }
      BOOL v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_216BD53B4(uint64_t **a1, uint64_t *a2, int *a3, _OWORD *a4)
{
  uint64_t v6 = sub_216BD543C(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2)  = *a4;
    sub_21677B358(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_216BD543C(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  int v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    unint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3  = v10;
        return v10 + 1;
      }
      else
      {
        *a3  = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      std::locale v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        std::locale v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          BOOL v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          int v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        int v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      BOOL v17 = a1 + 1;
    }
LABEL_29:
    *a3  = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3  = a2;
    *a4  = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4  = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    unint64_t v19 = a2;
    do
    {
      a4  = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      unint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          int v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        int v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3  = v21;
    return v5;
  }
  if (v11)
  {
    *a3  = a4;
  }
  else
  {
    *a3  = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_EvaluateVariableExpression@<X0>(const std::string *a1@<X0>, uint64_t a2@<X1>, const std::string *a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfVariableExpression::SdfVariableExpression(&v38, a1);
  sub_216BD5918((pxrInternal__aapl__pxrReserved__::SdfVariableExpression *)&v38, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(a2 + 16), &v41);
  pxrInternal__aapl__pxrReserved__::SdfVariableExpression::~SdfVariableExpression((pxrInternal__aapl__pxrReserved__::SdfVariableExpression *)&v38);
  if (a6)
  {
    for (uint64_t i = v46; i; uint64_t i = *(unsigned __int8 **)i)
      sub_216A38350(a6, i + 16, (uint64_t)(i + 16));
  }
  if (a7 && v43 != v44)
  {
    pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError::New(&v37);
    std::string::operator=((std::string *)(v37 + 104), a1);
    sub_216881C38("; ", v43, v44, &v38);
    uint64_t v17 = v37;
    int v18 = (void **)(v37 + 128);
    if (*(char *)(v37 + 151) < 0)
    {
      operator delete(*v18);
      uint64_t v17 = v37;
    }
    *(std::string *)int v18 = v38;
    std::string::operator=((std::string *)(v17 + 152), a3);
    uint64_t v19 = v37;
    *(void *)(v37 + 176)  = *(void *)a4;
    sub_2168CD2FC((atomic_uint **)(v19 + 184), (atomic_uint **)(a4 + 8));
    uint64_t v20 = v37;
    sub_2169C487C((int *)(v37 + 192), a5);
    sub_2169C48D4((int *)(v20 + 196), a5 + 1);
    long long v21 = v37;
    long long v37 = 0uLL;
    unint64_t v22 = a7[2];
    uint64_t v23 = (_OWORD *)a7[1];
    if ((unint64_t)v23 >= v22)
    {
      long long v36 = v21;
      uint64_t v24 = ((uint64_t)v23 - *a7) >> 4;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 60) {
        sub_21677CB10();
      }
      uint64_t v26 = v22 - *a7;
      if (v26 >> 3 > v25) {
        unint64_t v25 = v26 >> 3;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      uint64_t v40 = a7 + 2;
      int v28 = (char *)sub_216787EE0((uint64_t)(a7 + 2), v27);
      uint64_t v29 = &v28[16 * v24];
      v38.__r_.__value_.__r.__words[0]  = (std::string::size_type)v28;
      v38.__r_.__value_.__l.__size_  = (std::string::size_type)v29;
      uint64_t v39 = &v28[16 * v30];
      *(_OWORD *)uint64_t v29 = v36;
      v38.__r_.__value_.__r.__words[2]  = (std::string::size_type)(v29 + 16);
      sub_216BD6608(a7, &v38);
      uint64_t v31 = a7[1];
      sub_216788028((void **)&v38.__r_.__value_.__l.__data_);
      unsigned int v32 = (std::__shared_weak_count *)*((void *)&v37 + 1);
      a7[1]  = v31;
      if (v32) {
        sub_216784EC4(v32);
      }
    }
    else
    {
      _OWORD *v23 = v21;
      a7[1]  = (uint64_t)(v23 + 1);
    }
  }
  if (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)&v41))
  {
    if ((v42 & 4) != 0) {
      uint64_t v33 = (*(uint64_t (**)(uint64_t *))((v42 & 0xFFFFFFFFFFFFFFF8) + 168))(&v41);
    }
    else {
      uint64_t v33 = v41;
    }
    if (*(char *)(v33 + 23) < 0)
    {
      sub_216778F24((unsigned char *)a8, *(void **)v33, *(void *)(v33 + 8));
    }
    else
    {
      long long v34 = *(_OWORD *)v33;
      *(void *)(a8 + 16)  = *(void *)(v33 + 16);
      *(_OWORD *)a8  = v34;
    }
  }
  else
  {
    *(void *)a8  = 0;
    *(void *)(a8 + 8)  = 0;
    *(void *)(a8 + 16)  = 0;
  }
  sub_216850298((uint64_t)&v45);
  v38.__r_.__value_.__r.__words[0]  = (std::string::size_type)&v43;
  sub_216782F20((void ***)&v38);
  return sub_2168EE084((uint64_t)&v41);
}

void sub_216BD58A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  int v7 = va_arg(va1, void *);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  sub_216788028((void **)va);
  if (a5) {
    sub_216784EC4(a5);
  }
  sub_216BD5B64((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_216BD5918(pxrInternal__aapl__pxrReserved__::SdfVariableExpression *a1@<X0>, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfVariableExpression::Evaluate(a1, a2, (uint64_t)a3);
  if (a3[1] && (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)a3) & 1) == 0)
  {
    v18[0]  = 0;
    v18[1]  = 0;
    uint64_t v19 = 0;
    v22.__type_name  = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_26C750BB8;
    sub_21691B31C((unsigned int **)&v22, (uint64_t)v18);
    pxrInternal__aapl__pxrReserved__::SdfVariableExpression::_FormatUnexpectedTypeError((pxrInternal__aapl__pxrReserved__::SdfVariableExpression *)a3, &v22, v4);
    unint64_t v5 = a3[4];
    unint64_t v6 = a3[3];
    if (v6 >= v5)
    {
      uint64_t v8 = a3[2];
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v8) >> 3);
      unint64_t v10 = v9 + 1;
      if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v8) >> 3);
      if (2 * v11 > v10) {
        unint64_t v10 = 2 * v11;
      }
      if (v11 >= 0x555555555555555) {
        unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v12 = v10;
      }
      unint64_t v27 = a3 + 4;
      if (v12) {
        uint64_t v13 = (char *)sub_216782ED8((uint64_t)(a3 + 4), v12);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = &v13[24 * v9];
      uint64_t v23 = v13;
      uint64_t v24 = v14;
      uint64_t v26 = &v13[24 * v12];
      long long v15 = *(_OWORD *)__p;
      *((void *)v14 + 2)  = v21;
      *(_OWORD *)uint64_t v14 = v15;
      __p[1]  = 0;
      uint64_t v21 = 0;
      __p[0]  = 0;
      unint64_t v25 = v14 + 24;
      sub_216790CCC(a3 + 2, &v23);
      uint64_t v16 = a3[3];
      sub_216790E64((uint64_t)&v23);
      int v17 = SHIBYTE(v21);
      a3[3]  = v16;
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v7 = *(_OWORD *)__p;
      *(void *)(v6 + 16)  = v21;
      *(_OWORD *)unint64_t v6 = v7;
      __p[1]  = 0;
      uint64_t v21 = 0;
      __p[0]  = 0;
      a3[3]  = v6 + 24;
    }
    sub_2168EE084((uint64_t)&v22);
    if (SHIBYTE(v19) < 0) {
      operator delete(v18[0]);
    }
    uint64_t v24 = 0;
    sub_2168ED33C(a3, &v23);
    sub_2168EE084((uint64_t)&v23);
  }
}

void sub_216BD5B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  sub_216790E64((uint64_t)&a23);
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_2168EE084((uint64_t)&a21);
  if (a14 < 0) {
    operator delete(a9);
  }
  sub_216BD5B64(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_216BD5B64(uint64_t a1)
{
  sub_216850298(a1 + 40);
  unint64_t v3 = (void **)(a1 + 16);
  sub_216782F20(&v3);
  return sub_2168EE084(a1);
}

void pxrInternal__aapl__pxrReserved__::Pcp_EvaluateVariableExpression(const std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  memset(&__p, 0, sizeof(__p));
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v7 + 1);
  pxrInternal__aapl__pxrReserved__::Pcp_EvaluateVariableExpression(a1, a2, &__p, (uint64_t)&v8, &v7, 0, 0, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v7 + 1);
  sub_21697C414(&v7);
  uint64_t v6 = v9;
  if (v9 && atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216BD5C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a11) {
    sub_217323F90(a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_GetArgumentsForFileFormatTarget@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 16)  = 0;
  *(void *)(a3 + 8)  = 0;
  *(void *)a3  = a3 + 8;
  return pxrInternal__aapl__pxrReserved__::Pcp_GetArgumentsForFileFormatTarget(a1, a2, (uint64_t **)a3);
}

void sub_216BD5D04(_Unwind_Exception *a1)
{
  sub_2167877AC(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_GetArgumentsForFileFormatTarget(uint64_t result, uint64_t a2, uint64_t **a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    unint64_t result = sub_216BD5DCC(result);
    if ((result & 1) == 0)
    {
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
      if (!v6) {
        uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216AA11E8(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
      }
      if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString  = (uint64_t *)((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString  = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      }
      uint64_t v9 = (long long *)EmptyString;
      uint64_t v8 = sub_21677B174(a3, (const void **)EmptyString, (uint64_t)&unk_2174BFD90, &v9);
      return (uint64_t)std::string::operator=((std::string *)(v8 + 7), (const std::string *)a2);
    }
  }
  return result;
}

BOOL sub_216BD5DCC(uint64_t a1)
{
  __p[0]  = 0;
  __p[1]  = 0;
  uint64_t v8 = 0;
  v6[0]  = 0;
  v6[1]  = 0;
  unint64_t v5 = v6;
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::SplitIdentifier(a1, __p, &v5))
  {
    uint64_t v1 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
    if (!v1) {
      uint64_t v1 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216AA11E8(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
    }
    if ((*(void *)v1 & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString  = (uint64_t *)((*(void *)v1 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString  = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v1);
    }
    BOOL v3 = v6 != (void **)sub_21678C2D8((uint64_t)&v5, (const void **)EmptyString);
  }
  else
  {
    BOOL v3 = 0;
  }
  sub_2167877AC((uint64_t)&v5, v6[0]);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_216BD5E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Pcp_GetArgumentsForFileFormatTarget(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3)
  {
    unint64_t v5 = (void *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
    if (!v5) {
      unint64_t v5 = (void *)sub_216AA11E8(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
    }
    sub_216BD655C((pxrInternal__aapl__pxrReserved__::TfToken *)__dst, v5, (long long *)a1);
    sub_216ABB984((uint64_t)a2, (const void **)__dst, 1);
    if (v9 < 0) {
      operator delete(__p);
    }
    if (v7 < 0) {
      operator delete(__dst[0]);
    }
  }
  else
  {
    a2[2]  = 0;
    a2[1]  = 0;
    *a2  = a2 + 1;
  }
}

void sub_216BD5FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21682E578((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **pxrInternal__aapl__pxrReserved__::Pcp_GetArgumentsForFileFormatTarget(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  if (!sub_216BD5DCC(a1)) {
    return (uint64_t **)a2;
  }
  if (a3 != (uint64_t **)a2) {
    sub_216799C1C(a3, *(long long **)a2, (long long *)(a2 + 8));
  }
  unint64_t v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
  if (!v5) {
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216AA11E8(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
  }
  if ((*(void *)v5 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString  = (uint64_t *)((*(void *)v5 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString  = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  }
  sub_216839AC4(a3, (const void **)EmptyString);
  return a3;
}

void pxrInternal__aapl__pxrReserved__::Pcp_StripFileFormatTarget(unsigned __int8 *a1, uint64_t **a2)
{
  BOOL v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
  if (!v4) {
    BOOL v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216AA11E8(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
  }
  if ((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString  = (uint64_t *)((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString  = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  }
  uint64_t v6 = sub_21678C2D8((uint64_t)a2, (const void **)EmptyString);
  if (a2 + 1 == (uint64_t **)v6) {
    return;
  }
  char v7 = (uint64_t *)v6;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 79);
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = *(unsigned __int8 *)(v6 + 79);
  }
  else {
    uint64_t v9 = *(void *)(v6 + 64);
  }
  uint64_t v10 = a1[23];
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *((void *)a1 + 1);
  }
  if (v9 != v10) {
    return;
  }
  unint64_t v12 = (const void **)(v6 + 56);
  if (v11 >= 0) {
    uint64_t v13 = a1;
  }
  else {
    uint64_t v13 = *(unsigned __int8 **)a1;
  }
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(*v12, v13, *(void *)(v6 + 64))) {
      return;
    }
    goto LABEL_23;
  }
  if (!*(unsigned char *)(v6 + 79))
  {
LABEL_23:
    sub_2167AE00C(a2, v7);
    sub_21677B5A0((uint64_t)(v7 + 4));
    operator delete(v7);
    return;
  }
  while (*(unsigned __int8 *)v12 == *v13)
  {
    unint64_t v12 = (const void **)((char *)v12 + 1);
    ++v13;
    if (!--v8) {
      goto LABEL_23;
    }
  }
}

double pxrInternal__aapl__pxrReserved__::Pcp_FindStartingNodeOfClassHierarchy@<D0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, uint64_t a2@<X8>)
{
  Arcuint64_t Type = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this);
  if (ArcType != 1 && ArcType != 6)
  {
    int v17 = "pcp/utils.cpp";
    int v18 = "Pcp_FindStartingNodeOfClassHierarchy";
    uint64_t v19 = 164;
    uint64_t v20 = "std::pair<PcpNodeRef, PcpNodeRef> pxrInternal__aapl__pxrReserved__::Pcp_FindStartingNodeOfClassHierarchy(const PcpNodeRef &)";
    char v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "PcpIsClassBasedArc(n.GetArcType())", 0);
  }
  DepthBelowIntroductiouint64_t n = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction(this, v6);
  double v8 = 0.0;
  *(_OWORD *)uint64_t v16 = *(_OWORD *)this;
  uint64_t v9 = -1;
  while (1)
  {
    int v10 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v16);
    BOOL v12 = v10 == 6 || v10 == 1;
    if (!v12
      || pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v16, v11) != DepthBelowIntroduction)
    {
      break;
    }
    if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v16)
      || v13 == -1)
    {
      int v17 = "pcp/utils.cpp";
      int v18 = "Pcp_FindStartingNodeOfClassHierarchy";
      uint64_t v19 = 172;
      uint64_t v20 = "std::pair<PcpNodeRef, PcpNodeRef> pxrInternal__aapl__pxrReserved__::Pcp_FindStartingNodeOfClassHierarchy(con"
            "st PcpNodeRef &)";
      char v21 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "instanceNode.GetParentNode()", 0);
    }
    uint64_t v9 = *(void *)&v16[1];
    double v8 = v16[0];
    *(void *)&v16[0]  = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v16);
    v16[1]  = v14;
  }
  double result = v16[0];
  *(_OWORD *)a2  = *(_OWORD *)v16;
  *(double *)(a2 + 16)  = v8;
  *(void *)(a2 + 24)  = v9;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Pcp_TranslatePathFromNodeToRootOrClosestNode@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2@<X1>, uint64_t a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode(this))
  {
    sub_216981010((_DWORD *)a3, a2);
    double result = sub_21698105C((_DWORD *)(a3 + 4), (_DWORD *)a2 + 1);
    *(_OWORD *)(a3 + 8)  = *(_OWORD *)this;
  }
  else
  {
    long long v27 = *(_OWORD *)this;
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(a2, &v25);
    MapToRoot  = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(this);
    int v11 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v9, v10);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v11, a2, &v23);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v23))
    {
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)this);
      *(void *)&long long v27 = v12;
      *((void *)&v27 + 1)  = v13;
      sub_21697DE94(&v25, &v23);
      sub_21697DEEC(&v26, &v24);
    }
    else
    {
      do
      {
        if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v27)) {
          break;
        }
        MapToParent  = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v27);
        int v17 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v15, v16);
        pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, &v22);
        BOOL v18 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
        if (v18)
        {
          *(void *)&long long v27 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v27);
          *((void *)&v27 + 1)  = v19;
          sub_21697DE94(&v25, (int *)&v22);
          sub_21697DEEC(&v26, (int *)&v22 + 1);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
        sub_21697C414(&v22);
      }
      while (v18);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
    sub_21697C414(&v23);
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v27, &v23);
    if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23))
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, &v20);
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v22, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, 1);
      sub_21697DE94(&v25, (int *)&v22);
      sub_21697DEEC(&v26, (int *)&v22 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
      sub_21697C414(&v22);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
      sub_21697C414(&v20);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
    sub_21697C414(&v23);
    sub_216981010((_DWORD *)a3, &v25);
    sub_21698105C((_DWORD *)(a3 + 4), &v26);
    *(_OWORD *)(a3 + 8)  = v27;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
    return sub_21697C414(&v25);
  }
  return result;
}

void sub_216BD64F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11, int a12, int a13)
{
}

pxrInternal__aapl__pxrReserved__::TfToken *sub_216BD655C(pxrInternal__aapl__pxrReserved__::TfToken *__dst, void *a2, long long *a3)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString  = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString  = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(__dst);
  }
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_216778F24(__dst, (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    long long v6 = *(_OWORD *)EmptyString;
    *((void *)__dst + 2)  = EmptyString[2];
    *(_OWORD *)std::string __dst = v6;
  }
  char v7 = (char *)__dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(v7, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *((void *)__dst + 5)  = *((void *)a3 + 2);
    *(_OWORD *)char v7 = v8;
  }
  return __dst;
}

void sub_216BD65EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216BD6608(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216BCC590((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

void sub_216BD6680()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_CULLING)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::PcpCache(uint64_t a1, uint64_t *a2, long long *a3, char a4)
{
  uint64_t v8 = a2[1];
  if (v8)
  {
    if (*(unsigned char *)(sub_216850B68(a2 + 1) + 14)) {
      uint64_t v8 = *a2;
    }
    else {
      uint64_t v8 = 0;
    }
  }
  *(void *)a1  = v8;
  sub_2168BD80C((uint64_t *)a1);
  uint64_t v9 = a2[3];
  if (v9)
  {
    if (*(unsigned char *)(sub_216850B68(a2 + 3) + 14)) {
      uint64_t v9 = a2[2];
    }
    else {
      uint64_t v9 = 0;
    }
  }
  *(void *)(a1 + 8)  = v9;
  sub_2168BD80C((uint64_t *)(a1 + 8));
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  *(void *)(a1 + 24)  = v10;
  *(void *)(a1 + 16)  = v11;
  if (v10) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 1u, memory_order_relaxed);
  }
  *(void *)(a1 + 32)  = a2[2];
  uint64_t v12 = a2[3];
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 1u, memory_order_relaxed);
  }
  *(void *)(a1 + 48)  = 0;
  *(void *)(a1 + 56)  = 0;
  *(void *)(a1 + 64)  = 0;
  sub_21695F340((void *)(a1 + 48), (void *)a2[4], (void *)a2[5], (a2[5] - a2[4]) >> 4);
  *(void *)(a1 + 72)  = a2[7];
  uint64_t v13 = a2[8];
  *(void *)(a1 + 8sub_2168EBBB8(&a9, 0) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 88)  = a2[9];
  *(unsigned char *)(a1 + 96)  = a4;
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 104), *(void **)a3, *((void *)a3 + 1));
    a4  = *(unsigned char *)(a1 + 96) != 0;
  }
  else
  {
    long long v14 = *a3;
    *(void *)(a1 + 12sub_2168EBBB8(&a9, 0) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 104)  = v14;
  }
  *(_OWORD *)(a1 + 128)  = 0u;
  *(void *)(a1 + 16sub_2168EBBB8(&a9, 0) = 0;
  *(_OWORD *)(a1 + 144)  = 0u;
  *(void *)(a1 + 184)  = 0;
  *(_DWORD *)(a1 + 168)  = 1065353216;
  *(void *)(a1 + 176)  = a1 + 184;
  *(void *)(a1 + 192)  = 0;
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::New(a1 + 16, (long long *)(a1 + 104), a4, (void *)(a1 + 200));
  *(_OWORD *)(a1 + 208)  = 0u;
  *(_OWORD *)(a1 + 256)  = 0u;
  *(_OWORD *)(a1 + 272)  = 0u;
  *(_OWORD *)(a1 + 224)  = 0u;
  *(_OWORD *)(a1 + 24sub_2168EBBB8(&a9, 0) = 0u;
  long long v15 = (pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *)operator new(0x128uLL);
  pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Pcp_Dependencies(v15);
  *(void *)(a1 + 288)  = v15;
  *(void *)(a1 + 296)  = 0;
  return a1;
}

void sub_216BD68B0(_Unwind_Exception *a1)
{
  sub_216BCB5AC(v3);
  sub_216ABB798(v2);
  sub_216ABB798(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpCache::~PcpCache(pxrInternal__aapl__pxrReserved__::PcpCache *this)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)this + 128);
  v7[0]  = *((void ***)this + 16);
  *((void *)this + 16)  = 0;
  sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v7);
  uint64_t v6 = this;
  v7[0]  = (void **)&unk_26C75BC00;
  v7[1]  = (void **)&v6;
  tbb::interface7::internal::isolate_within_arena((uint64_t (***)(void))v7, 0);
  sub_216BD6B24((pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **)this + 36, 0);
  sub_216BD6B64((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)this + 25);
  uint64_t v3 = *((void *)this + 37);
  *((void *)this + 37)  = 0;
  if (v3) {
    sub_216BE2F14((uint64_t)this + 296, v3);
  }
  sub_216BD6B24((pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **)this + 36, 0);
  sub_216BE069C((uint64_t *)this + 31);
  sub_216BE0664((uint64_t *)this + 26);
  sub_216BE0558((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)this + 25);
  sub_216BE0608((uint64_t)this + 176, *((void **)this + 23));
  sub_216BE0588((uint64_t)this + 136);
  sub_216BBEEA4(v2);
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpCache *)((char *)this + 72));
  v7[0]  = (void **)((char *)this + 48);
  sub_216787968(v7);
  BOOL v4 = (atomic_uint *)*((void *)this + 5);
  if (v4 && atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (atomic_uint *)*((void *)this + 3);
  if (v5 && atomic_fetch_add_explicit(v5 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v5 + 8))(v5);
  }
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)this + 1);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)this);
}

void sub_216BD6B24(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **a1, pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *a2)
{
  uint64_t v3 = *a1;
  *a1  = a2;
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::~Pcp_Dependencies(v3);
    operator delete(v4);
  }
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BD6B64(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  uint64_t v1 = *a1;
  *a1  = 0;
  uint64_t v3 = 0;
  sub_2168BD378((int)a1, v1);
  return sub_216BE0558(&v3);
}

void sub_216BD6BA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BE0558((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(pxrInternal__aapl__pxrReserved__::PcpCache *this)
{
  return (uint64_t)this + 16;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack@<X0>(pxrInternal__aapl__pxrReserved__::PcpCache *this@<X0>, uint64_t *a2@<X8>)
{
  return sub_216BC11A8(a2, (uint64_t *)this + 16);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpCache::HasRootLayerStack(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  if (v3)
  {
    if (*(unsigned char *)(sub_216850B68(a2 + 1) + 14)) {
      uint64_t v3 = *a2;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  return v3 == *(void *)(a1 + 128);
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::PcpCache::FindLayerStack@<X0>(pxrInternal__aapl__pxrReserved__::PcpCache *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_216BD4B58((uint64_t *)this + 25);

  return pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::Find(v5, a2, a3);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpCache::UsesLayerStack(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_216BD4B58((uint64_t *)(a1 + 200));

  return pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::Contains(v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::FindAllLayerStacksUsingLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_216BD4B58((uint64_t *)(a1 + 200));

  return pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::FindAllUsingLayer(v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::IsUsd(pxrInternal__aapl__pxrReserved__::PcpCache *this)
{
  return *((unsigned __int8 *)this + 96);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::GetFileFormatTarget(pxrInternal__aapl__pxrReserved__::PcpCache *this)
{
  return (uint64_t)this + 104;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpCache::GetVariantFallbacks@<X0>(const void ***this@<X0>, uint64_t *a2@<X8>)
{
  return sub_216BE06D4(a2, this + 22);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::SetVariantFallbacks(uint64_t result, uint64_t a2, uint64_t **a3)
{
  uint64_t v5 = (uint64_t **)result;
  if (*(void *)(result + 192) == *(void *)(a2 + 16))
  {
    uint64_t v6 = *(unsigned __int8 **)(result + 176);
    uint64_t v7 = result + 184;
    if (v6 == (unsigned __int8 *)(result + 184)) {
      return result;
    }
    uint64_t v8 = *(long long **)a2;
    while (1)
    {
      uint64_t result = sub_216BE09A8((uint64_t)&v20, v6 + 32, (unsigned __int8 *)v8 + 32);
      if ((result & 1) == 0) {
        break;
      }
      uint64_t v9 = (unsigned __int8 *)*((void *)v6 + 1);
      uint64_t v10 = v6;
      if (v9)
      {
        do
        {
          uint64_t v6 = v9;
          uint64_t v9 = *(unsigned __int8 **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v6 = (unsigned __int8 *)*((void *)v10 + 2);
          BOOL v11 = *(void *)v6 == (void)v10;
          uint64_t v10 = v6;
        }
        while (!v11);
      }
      uint64_t v12 = (long long *)*((void *)v8 + 1);
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = *(long long **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (long long *)*((void *)v8 + 2);
          BOOL v11 = *(void *)v13 == (void)v8;
          uint64_t v8 = v13;
        }
        while (!v11);
      }
      uint64_t v8 = v13;
      if (v6 == (unsigned __int8 *)v7) {
        return result;
      }
    }
  }
  if (v5 + 22 != (uint64_t **)a2) {
    sub_216BE0AA8(v5 + 22, *(long long **)a2, (long long *)(a2 + 8));
  }
  int v20 = a3;
  long long v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpChanges::PcpChanges(v21);
  long long v15 = v20;
  uint64_t v16 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v14);
  if (v15) {
    int v17 = v15;
  }
  else {
    int v17 = (uint64_t **)v21;
  }
  pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(v17, (const pxrInternal__aapl__pxrReserved__::PcpCache *)v5, v16);
  return (uint64_t)sub_216BDCE10(&v20, v18, v19);
}

void sub_216BD6E2C(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL pxrInternal__aapl__pxrReserved__::PcpCache::IsPayloadIncluded(uint64_t a1, unsigned int *a2)
{
  return sub_216A9DB14((void *)(a1 + 136), a2) != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::GetIncludedPayloads(pxrInternal__aapl__pxrReserved__::PcpCache *this)
{
  return (uint64_t)this + 136;
}

void *pxrInternal__aapl__pxrReserved__::PcpCache::RequestPayloads(void *a1, void *a2, void *a3, uint64_t **a4)
{
  int v44 = a4;
  pxrInternal__aapl__pxrReserved__::PcpChanges::PcpChanges(v45);
  uint64_t v42 = (void *)*a2;
  long long v43 = a2 + 1;
  long long v36 = (pxrInternal__aapl__pxrReserved__::PcpCache *)a1;
  uint64_t v8 = a1 + 17;
  while (v42 != v43)
  {
    uint64_t v9 = sub_216BD70B0(&v42, v6, v7);
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v9 + 28)))
    {
      uint64_t v12 = (unsigned int *)sub_216BD712C(&v42, v10, v11);
      sub_216BE0D70((uint64_t)v8, v12, v12);
      if (v13)
      {
        long long v15 = v44;
        uint64_t v16 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216BD712C(&v42, v13, v14);
        if (v15) {
          int v17 = v15;
        }
        else {
          int v17 = (uint64_t **)v45;
        }
        pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(v17, v36, v16);
      }
    }
    else
    {
      long long v37 = "pcp/cache.cpp";
      std::string v38 = "RequestPayloads";
      uint64_t v39 = 257;
      uint64_t v40 = "void pxrInternal__aapl__pxrReserved__::PcpCache::RequestPayloads(const SdfPathSet &, const SdfPathSet &, PcpChanges *)";
      char v41 = 0;
      uint64_t v18 = sub_216BD70B0(&v42, v10, v11);
      Text  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v18 + 28));
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v37, 1, (pxrInternal__aapl__pxrReserved__ *)"Path <%s> must be a prim path", Text);
    }
    sub_216BD71AC(&v42);
  }
  uint64_t v42 = (void *)*a3;
  long long v43 = a3 + 1;
  while (v42 != v43)
  {
    int v20 = sub_216BD70B0(&v42, v6, v7);
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v20 + 28)))
    {
      int v23 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216BD712C(&v42, v21, v22);
      if (a2 + 1 == sub_21698EFF0((uint64_t)a2, v23))
      {
        int v26 = (unsigned int *)sub_216BD712C(&v42, v24, v25);
        if (sub_216BE10A4(v8, v26))
        {
          uint64_t v29 = v44;
          uint64_t v30 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216BD712C(&v42, v27, v28);
          if (v29) {
            uint64_t v31 = v29;
          }
          else {
            uint64_t v31 = (uint64_t **)v45;
          }
          pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(v31, v36, v30);
        }
      }
    }
    else
    {
      long long v37 = "pcp/cache.cpp";
      std::string v38 = "RequestPayloads";
      uint64_t v39 = 269;
      uint64_t v40 = "void pxrInternal__aapl__pxrReserved__::PcpCache::RequestPayloads(const SdfPathSet &, const SdfPathSet &, PcpChanges *)";
      char v41 = 0;
      unsigned int v32 = sub_216BD70B0(&v42, v21, v22);
      uint64_t v33 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v32 + 28));
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v37, 1, (pxrInternal__aapl__pxrReserved__ *)"Path <%s> must be a prim path", v33);
    }
    sub_216BD71AC(&v42);
  }
  return sub_216BDCE10(&v44, v6, v7);
}

void sub_216BD7088(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_216BDCE10((uint64_t *)va, a2, a3);
  _Unwind_Resume(a1);
}

void *sub_216BD70B0(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0]  = "tf/iterator.h";
    v3[1]  = "operator->";
    uint64_t v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::set<pxrInternal__aapl__pxrReserved__::SdfP"
            "ath>>::operator->() [T  = const std::set<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse  = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_216BD712C(void *a1, uint64_t a2, char *a3)
{
  if (*a1 == a1[1])
  {
    v4[0]  = "tf/iterator.h";
    v4[1]  = "operator*";
    v4[2]  = 271;
    void v4[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::set<pxrInternal__aapl__pxrReserved__::SdfP"
            "ath>>::operator*() [T  = const std::set<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse  = false]";
    char v5 = 0;
    int v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return *a1 + 28;
}

void sub_216BD71A4()
{
}

void *sub_216BD71AC(void *a1)
{
  unint64_t v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0]  = "tf/iterator.h";
    v7[1]  = "operator++";
    uint64_t v7[2] = 250;
    void v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::set<pxrInternal__aapl__pxrRe"
            "served__::SdfPath>>::operator++() [T  = const std::set<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse  = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        char v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        char v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        unint64_t v2 = v4;
      }
      while (!v5);
    }
    *a1  = v4;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpCache::RequestLayerMuting(uint64_t *a1, uint64_t *a2, uint64_t *a3, void **a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v55, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(a1 + 6));
  long long v52 = 0uLL;
  unint64_t v53 = 0;
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      if (*(char *)(v8 + 23) < 0)
      {
        if (*(void *)(v8 + 8))
        {
LABEL_6:
          int v46 = 0;
          uint64_t v47 = 0;
          uint64_t v45 = (void **)&v46;
          pxrInternal__aapl__pxrReserved__::SdfLayer::Find(v8, (uint64_t)&v45, (uint64_t *)&v50);
          BOOL v10 = sub_216ABA3A0((uint64_t *)&v50, a1);
          uint64_t v11 = *((void *)&v50 + 1);
          if (*((void *)&v50 + 1)
            && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v50 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
          }
          sub_2167877AC((uint64_t)&v45, v46);
          if (v10)
          {
            uint64_t v45 = (void **)"pcp/cache.cpp";
            int v46 = (atomic_uint *)"RequestLayerMuting";
            uint64_t v47 = 293;
            unsigned int v48 = "void pxrInternal__aapl__pxrReserved__::PcpCache::RequestLayerMuting(const std::vector<std::string> &, "
                  "const std::vector<std::string> &, PcpChanges *, std::vector<std::string> *, std::vector<std::string> *)";
            char v49 = 0;
            uint64_t v12 = (const char *)v8;
            if (*(char *)(v8 + 23) < 0) {
              uint64_t v12 = *(const char **)v8;
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v45, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot mute cache's root layer @%s@", v12);
          }
          else
          {
            uint64_t v13 = (long long *)*((void *)&v52 + 1);
            if (*((void *)&v52 + 1) >= v53)
            {
              uint64_t v15 = sub_2167E9A44((uint64_t *)&v52, (long long *)v8);
            }
            else
            {
              if (*(char *)(v8 + 23) < 0)
              {
                sub_216778F24(*((unsigned char **)&v52 + 1), *(void **)v8, *(void *)(v8 + 8));
              }
              else
              {
                long long v14 = *(_OWORD *)v8;
                *(void *)(*((void *)&v52 + 1) + 16)  = *(void *)(v8 + 16);
                *uint64_t v13 = v14;
              }
              uint64_t v15 = (uint64_t)v13 + 24;
            }
            *((void *)&v52 + 1)  = v15;
          }
        }
      }
      else if (*(unsigned char *)(v8 + 23))
      {
        goto LABEL_6;
      }
      v8 += 24;
    }
    while (v8 != v9);
  }
  long long v50 = 0uLL;
  unint64_t v51 = 0;
  uint64_t v17 = *a3;
  uint64_t v16 = a3[1];
  while (v17 != v16)
  {
    if (*(char *)(v17 + 23) < 0)
    {
      if (!*(void *)(v17 + 8)) {
        goto LABEL_35;
      }
    }
    else if (!*(unsigned char *)(v17 + 23))
    {
      goto LABEL_35;
    }
    if (sub_2169CAFD0(*a2, a2[1], (unsigned __int8 **)v17) == a2[1])
    {
      uint64_t v18 = (long long *)*((void *)&v50 + 1);
      if (*((void *)&v50 + 1) >= v51)
      {
        uint64_t v20 = sub_2167E9A44((uint64_t *)&v50, (long long *)v17);
      }
      else
      {
        if (*(char *)(v17 + 23) < 0)
        {
          sub_216778F24(*((unsigned char **)&v50 + 1), *(void **)v17, *(void *)(v17 + 8));
        }
        else
        {
          long long v19 = *(_OWORD *)v17;
          *(void *)(*((void *)&v50 + 1) + 16)  = *(void *)(v17 + 16);
          *uint64_t v18 = v19;
        }
        uint64_t v20 = (uint64_t)v18 + 24;
      }
      *((void *)&v50 + 1)  = v20;
    }
LABEL_35:
    v17 += 24;
  }
  if ((void)v52 != *((void *)&v52 + 1) || (void)v50 != *((void *)&v50 + 1))
  {
    uint64_t v21 = sub_216BD4B58(a1 + 25);
    sub_216ABBA60((uint64_t *)&v45, a1);
    pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::MuteAndUnmuteLayers(v21, (uint64_t *)&v45, (uint64_t *)&v52, (uint64_t *)&v50);
    uint64_t v22 = v46;
    if (v46 && atomic_fetch_add_explicit(v46 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v22 + 8))(v22);
    }
    uint64_t v45 = a4;
    pxrInternal__aapl__pxrReserved__::PcpChanges::PcpChanges(&v46);
    uint64_t v25 = *((void *)&v52 + 1);
    for (uint64_t i = v52; i != v25; i += 24)
    {
      if (v45) {
        uint64_t v27 = (uint64_t **)v45;
      }
      else {
        uint64_t v27 = (uint64_t **)&v46;
      }
      pxrInternal__aapl__pxrReserved__::PcpChanges::DidMuteLayer(v27, (pxrInternal__aapl__pxrReserved__::PcpCache *)a1, i);
    }
    uint64_t v28 = *((void *)&v50 + 1);
    uint64_t v29 = v50;
    if ((void)v50 != *((void *)&v50 + 1))
    {
      do
      {
        if (v45) {
          uint64_t v30 = (uint64_t **)v45;
        }
        else {
          uint64_t v30 = (uint64_t **)&v46;
        }
        pxrInternal__aapl__pxrReserved__::PcpChanges::DidUnmuteLayer(v30, a1, v29);
        v29 += 24;
      }
      while (v29 != v28);
      if ((void)v50 != *((void *)&v50 + 1))
      {
        unint64_t v31 = (unint64_t)sub_216BD4BE4((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 26));
        for (unint64_t j = v31; v31; unint64_t j = v31)
        {
          if (*(void *)(v31 + 8))
          {
            sub_216BD78E0((void *)(v31 + 8), v43);
            uint64_t v33 = v43[0];
            uint64_t v32 = v43[1];
            while (v33 != v32)
            {
              if (*(void *)v33)
              {
                if (v34)
                {
                  uint64_t v35 = v34;
                  long long v36 = *(std::__shared_weak_count **)(v33 + 8);
                  if (v36) {
                    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v37 = sub_2169CAFD0(v50, *((uint64_t *)&v50 + 1), v34 + 28);
                  if (v37 != *((void *)&v50 + 1))
                  {
                    if (v45) {
                      std::string v38 = (uint64_t **)v45;
                    }
                    else {
                      std::string v38 = (uint64_t **)&v46;
                    }
                    pxrInternal__aapl__pxrReserved__::PcpChanges::DidMaybeFixAsset(v38, (pxrInternal__aapl__pxrReserved__::PcpCache *)a1, (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)(v35 + 13), (uint64_t *)v35 + 31, (uint64_t)(v35 + 28));
                  }
                  if (v36) {
                    sub_216784EC4(v36);
                  }
                }
              }
              v33 += 16;
            }
            uint64_t v54 = (void **)v43;
            sub_216787968(&v54);
            unint64_t v31 = j;
          }
          unint64_t v31 = *(void *)(v31 + 56);
          if (!v31) {
            unint64_t v31 = sub_216BD50BC((uint64_t)&j);
          }
        }
      }
    }
    if (a5)
    {
      sub_21680F80C(a5);
      *(_OWORD *)a5  = v52;
      a5[2]  = v53;
      unint64_t v53 = 0;
      long long v52 = 0uLL;
    }
    if (a6)
    {
      sub_21680F80C(a6);
      *(_OWORD *)a6  = v50;
      a6[2]  = v51;
      unint64_t v51 = 0;
      long long v50 = 0uLL;
    }
    sub_216BDCE10(&v45, v23, v24);
  }
  uint64_t v45 = (void **)&v50;
  sub_216782F20(&v45);
  uint64_t v45 = (void **)&v52;
  sub_216782F20(&v45);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v55);
}

void sub_216BD778C(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_216BDCE10(&a19, a2, a3);
  a19  = (void **)&a35;
  sub_216782F20(&a19);
  a19  = (void **)(v35 - 176);
  sub_216782F20(&a19);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)(v35 - 144));
  _Unwind_Resume(a1);
}

void *sub_216BD78E0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  unint64_t v2 = (void **)result[4];
  a2[1]  = 0;
  a2[2]  = 0;
  *a2  = 0;
  if (v2) {
    return sub_216BCBAB4(a2, *v2, v2[1], ((char *)v2[1] - (char *)*v2) >> 4);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::GetMutedLayers(pxrInternal__aapl__pxrReserved__::PcpCache *this)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_216BD4B58((uint64_t *)this + 25);

  return pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::GetMutedLayers(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::IsLayerMuted(uint64_t *a1, uint64_t a2)
{
  sub_216ABBA60(&v8, a1);
  uint64_t v4 = sub_216BD4B58(a1 + 25);
  IsLayerMuted  = pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::IsLayerMuted(v4, &v8, a2, 0);
  uint64_t v6 = v9;
  if (v9 && atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return IsLayerMuted;
}

void sub_216BD79D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::IsLayerMuted(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v7 = sub_216BD4B58((uint64_t *)(a1 + 200));

  return pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::IsLayerMuted(v7, a2, a3, a4);
}

void *pxrInternal__aapl__pxrReserved__::PcpCache::GetPrimIndexInputs@<X0>(pxrInternal__aapl__pxrReserved__::PcpCache *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  long long v10 = 0u;
  memset(&__p, 0, sizeof(__p));
  __int16 v12 = 1;
  *(void *)&long long v7 = this;
  *((void *)&v7 + 1)  = (char *)this + 176;
  long long v8 = (unint64_t)this + 136;
  uint64_t v3 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_CULLING);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  LOBYTE(v12)  = *v3;
  std::string::operator=(&__p, (const std::string *)((char *)this + 104));
  *(_OWORD *)a2  = v7;
  *(_OWORD *)(a2 + 16)  = v8;
  sub_216BDCE50(a2 + 32, (uint64_t)v9);
  *(void *)(a2 + 64)  = *((void *)&v10 + 1);
  uint64_t v4 = (unsigned char *)(a2 + 72);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_216778F24(v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v5 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_WORD *)(a2 + 96)  = v12;
    if (v5 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a2 + 88)  = *((void *)&__p.__r_.__value_.__l + 2);
    *(_WORD *)(a2 + 96)  = v12;
  }
  return sub_216ABC260(v9);
}

void sub_216BD7B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_216ABC260(v9);
  sub_216BD7BA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216BD7BA0(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  sub_216ABC260((void *)(a1 + 32));
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpCache::ComputeLayerStack(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  long long v8 = (const pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_216BD4B58((uint64_t *)(a1 + 200));
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::FindOrCreate(v8, a2, a3, a4);
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 128);
  if (!*(void *)(a1 + 128))
  {
    if (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==((uint64_t)a2, a1 + 16))
    {
      long long v10 = *v9;
      *uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a4;
      sub_2168BD80C(a4);
      sub_2168BD378(a1 + 128, v10);
    }
  }
}

void sub_216BD7C64(_Unwind_Exception *a1)
{
  sub_216BBEEA4(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::PcpCache::FindPrimIndex(uint64_t a1, unsigned int *a2)
{
  unint64_t v2 = sub_216BD4C38((void *)(a1 + 208), a2);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = v2[1];
  uint64_t result = v2 + 1;
  if (!v4) {
    return 0;
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::PcpCache::_GetPrimIndex(uint64_t a1, unsigned int *a2)
{
  unint64_t v2 = sub_216BD4C38((void *)(a1 + 208), a2);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = v2[1];
  uint64_t result = v2 + 1;
  if (!v4) {
    return 0;
  }
  return result;
}

{
  void *v2;
  void *result;
  uint64_t v4;

  unint64_t v2 = sub_216BD4C38((void *)(a1 + 208), a2);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = v2[1];
  uint64_t result = v2 + 1;
  if (!v4) {
    return 0;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpCache::ComputeRelationshipTargetPaths(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t a3, int a4, void *a5, char a6, uint64_t a7, uint64_t a8)
{
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this))
  {
    char v31 = 0;
    memset(v30, 0, sizeof(v30));
    pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v22, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)(a1 + 16), this);
    uint64_t v16 = pxrInternal__aapl__pxrReserved__::PcpCache::ComputePropertyIndex((pxrInternal__aapl__pxrReserved__::PcpCache *)a1, this, a8);
    pxrInternal__aapl__pxrReserved__::PcpBuildFilteredTargetIndex((uint64_t)&v22, (pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)v16, 8, a4, a5, a6, a1, v30, a7, a8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
    sub_21697C414(&v28);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v27);
    uint64_t v32 = (void **)&v26;
    sub_216787968(&v32);
    uint64_t v17 = v25;
    if (v25 && atomic_fetch_add_explicit((atomic_uint *volatile)v25 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(const char *))(*(void *)v17 + 8))(v17);
    }
    uint64_t v18 = v23;
    if (v23)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)v23 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(const char *))(*(void *)v18 + 8))(v18);
      }
    }
    long long v19 = *(_OWORD *)a3;
    *(_OWORD *)a3  = v30[0];
    v30[0]  = v19;
    uint64_t v20 = *(void *)(a3 + 16);
    *(void *)(a3 + 16)  = *(void *)&v30[1];
    *(void *)&v30[1]  = v20;
    uint64_t v22 = (void **)&v30[1] + 1;
    sub_216787968(&v22);
    uint64_t v22 = (void **)v30;
    sub_216981168(&v22);
  }
  else
  {
    uint64_t v22 = (void **)"pcp/cache.cpp";
    uint64_t v23 = "ComputeRelationshipTargetPaths";
    uint64_t v24 = 437;
    uint64_t v25 = "void pxrInternal__aapl__pxrReserved__::PcpCache::ComputeRelationshipTargetPaths(const SdfPath &, SdfPathVector"
          " *, BOOL, const SdfSpecHandle &, BOOL, SdfPathVector *, PcpErrorVector *)";
    char v26 = 0;
    Text  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Path <%s> must be a relationship path", Text);
  }
}

void sub_216BD7ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_216BD815C((void **)va);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::PcpCache::ComputePropertyIndex(pxrInternal__aapl__pxrReserved__::PcpCache *a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B913A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B913A0))
  {
    pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::PcpPropertyIndex((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)&unk_267B91380);
    __cxa_atexit((void (*)(void *))sub_216BDB590, &unk_267B91380, &dword_216758000);
    __cxa_guard_release(&qword_267B913A0);
  }
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this) & 1) == 0)
  {
    long long v8 = "pcp/cache.cpp";
    uint64_t v9 = "ComputePropertyIndex";
    uint64_t v10 = 1763;
    uint64_t v11 = "const PcpPropertyIndex &pxrInternal__aapl__pxrReserved__::PcpCache::ComputePropertyIndex(const SdfPath &, PcpErrorVector *)";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Path <%s> must be a property path");
    return (char *)&unk_267B91380;
  }
  if (*((unsigned char *)a1 + 96))
  {
    long long v8 = "pcp/cache.cpp";
    uint64_t v9 = "ComputePropertyIndex";
    uint64_t v10 = 1776;
    uint64_t v11 = "const PcpPropertyIndex &pxrInternal__aapl__pxrReserved__::PcpCache::ComputePropertyIndex(const SdfPath &, PcpErrorVector *)";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v8, 1, (pxrInternal__aapl__pxrReserved__ *)"PcpCache will not compute a cached property index in USD mode; use PcpBuildPro"
                                          "pertyIndex() instead.  Path was <%s>");
    return (char *)&unk_267B91380;
  }
  uint64_t v6 = sub_216BDC394((uint64_t)a1 + 248, this);
  if (pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::IsEmpty((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)v6)) {
    pxrInternal__aapl__pxrReserved__::PcpBuildPropertyIndex(this, a1, (uint64_t)v6, a3);
  }
  return v6;
}

void sub_216BD806C(_Unwind_Exception *a1)
{
}

uint64_t sub_216BD8084(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 84));
  sub_21697C414((_DWORD *)(a1 + 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 56));
  int v5 = (void **)(a1 + 32);
  sub_216787968(&v5);
  unint64_t v2 = *(atomic_uint **)(a1 + 24);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(atomic_uint **)(a1 + 8);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void **sub_216BD815C(void **a1)
{
  uint64_t v3 = a1 + 3;
  sub_216787968(&v3);
  uint64_t v3 = a1;
  sub_216981168(&v3);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpCache::ComputeAttributeConnectionPaths(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t a3, int a4, void *a5, char a6, uint64_t a7, uint64_t a8)
{
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this))
  {
    char v31 = 0;
    memset(v30, 0, sizeof(v30));
    pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v22, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)(a1 + 16), this);
    uint64_t v16 = pxrInternal__aapl__pxrReserved__::PcpCache::ComputePropertyIndex((pxrInternal__aapl__pxrReserved__::PcpCache *)a1, this, a8);
    pxrInternal__aapl__pxrReserved__::PcpBuildFilteredTargetIndex((uint64_t)&v22, (pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)v16, 1, a4, a5, a6, a1, v30, a7, a8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
    sub_21697C414(&v28);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v27);
    uint64_t v32 = (void **)&v26;
    sub_216787968(&v32);
    uint64_t v17 = v25;
    if (v25 && atomic_fetch_add_explicit((atomic_uint *volatile)v25 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(const char *))(*(void *)v17 + 8))(v17);
    }
    uint64_t v18 = v23;
    if (v23)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)v23 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(const char *))(*(void *)v18 + 8))(v18);
      }
    }
    long long v19 = *(_OWORD *)a3;
    *(_OWORD *)a3  = v30[0];
    v30[0]  = v19;
    uint64_t v20 = *(void *)(a3 + 16);
    *(void *)(a3 + 16)  = *(void *)&v30[1];
    *(void *)&v30[1]  = v20;
    uint64_t v22 = (void **)&v30[1] + 1;
    sub_216787968(&v22);
    uint64_t v22 = (void **)v30;
    sub_216981168(&v22);
  }
  else
  {
    uint64_t v22 = (void **)"pcp/cache.cpp";
    uint64_t v23 = "ComputeAttributeConnectionPaths";
    uint64_t v24 = 464;
    uint64_t v25 = "void pxrInternal__aapl__pxrReserved__::PcpCache::ComputeAttributeConnectionPaths(const SdfPath &, SdfPathVecto"
          "r *, BOOL, const SdfSpecHandle &, BOOL, SdfPathVector *, PcpErrorVector *)";
    char v26 = 0;
    Text  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Path <%s> must be an attribute path", Text);
  }
}

void sub_216BD83AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_216BD815C((void **)va);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::PcpCache::_GetPropertyIndex(pxrInternal__aapl__pxrReserved__::PcpCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t result = sub_216BD514C((void *)this + 31, (unsigned int *)a2);
  if (result)
  {
    uint64_t v3 = result + 1;
    if (pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::IsEmpty((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)(result + 1))) {
      return 0;
    }
    else {
      return v3;
    }
  }
  return result;
}

{
  void *result;
  void *v3;

  uint64_t result = sub_216BD514C((void *)this + 31, (unsigned int *)a2);
  if (result)
  {
    uint64_t v3 = result + 1;
    if (pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::IsEmpty((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)(result + 1))) {
      return 0;
    }
    else {
      return v3;
    }
  }
  return result;
}

uint64_t **pxrInternal__aapl__pxrReserved__::PcpCache::GetUsedLayers@<X0>(pxrInternal__aapl__pxrReserved__::PcpCache *this@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = (uint64_t **)pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetUsedLayers(*((void *)this + 36), a2, a3, a4);
  uint64_t v8 = *((void *)this + 16);
  long long v7 = (uint64_t *)((char *)this + 128);
  if (v8)
  {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v7);
    uint64_t result = (uint64_t **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v9);
    uint64_t v10 = *result;
    uint64_t v11 = result[1];
    if (*result != v11)
    {
      do
        uint64_t result = (uint64_t **)sub_216BC0E04((uint64_t **)a4, (void *)(a4 + 8), v10++);
      while (v10 != v11);
    }
  }
  return result;
}

void sub_216BD8484(_Unwind_Exception *a1)
{
  sub_21699DA30(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::GetUsedLayersRevision(pxrInternal__aapl__pxrReserved__::PcpCache *this)
{
  return *(void *)(*((void *)this + 36) + 40);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::GetUsedRootLayers@<X0>(pxrInternal__aapl__pxrReserved__::PcpCache *this@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t **a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetUsedRootLayers(*((void *)this + 36), a2, a3, (uint64_t)a4);
  sub_216ABBA60(&v7, (uint64_t *)this);
  sub_216BE10F4(a4, (uint64_t)&v7, (uint64_t)&v7);
  uint64_t result = v8;
  if (v8)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216BD8540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  sub_21699DA30(v10, *(void **)(v10 + 8));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(void *a1@<X0>, uint64_t *a2@<X1>, int *a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  *a8  = 0;
  a8[1]  = 0;
  a8[2]  = 0;
  uint64_t v10 = sub_216BD4B58(a1 + 25);
  AllUsingLayer  = pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::FindAllUsingLayer(v10, (uint64_t)a2);
  char v12 = *(uint64_t **)AllUsingLayer;
  uint64_t v20 = *(uint64_t **)(AllUsingLayer + 8);
  if (*(uint64_t **)AllUsingLayer != v20)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(a1, v12, a3, a4, a5, a6, a7, v27);
      uint64_t v14 = v27[0];
      uint64_t v13 = v27[1];
      while (v14 != v13)
      {
        sub_216BD921C((uint64_t)&v30, v14);
        uint64_t v15 = (void *)sub_216BBCEA8(v12);
        LayerOffsetForLayer  = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayerOffsetForLayer(v15, a2);
        if (LayerOffsetForLayer)
        {
          pxrInternal__aapl__pxrReserved__::PcpMapFunction::ComposeOffset((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)v33, LayerOffsetForLayer, (uint64_t)v28);
          uint64_t v17 = (_DWORD *)sub_216BBED8C((uint64_t)v33);
          sub_216BBFB70(v17, (uint64_t)v28);
          *(_OWORD *)&unsigned char v33[40] = v29;
          sub_216BBED8C((uint64_t)v28);
        }
        unint64_t v18 = a8[1];
        if (v18 >= a8[2])
        {
          uint64_t v19 = sub_216BE1270(a8, (uint64_t)&v30);
        }
        else
        {
          sub_216BE1398((uint64_t)(a8 + 2), a8[1], (uint64_t)&v30);
          uint64_t v19 = v18 + 72;
          a8[1]  = v18 + 72;
        }
        a8[1]  = v19;
        sub_216BBED8C((uint64_t)v33);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
        sub_21697C414(&v31);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
        sub_21697C414(&v30);
        v14 += 72;
      }
      uint64_t v30 = (void **)v27;
      sub_216BE117C(&v30);
      v12 += 2;
    }
    while (v12 != v20);
  }
}

{
  uint64_t v15;
  unsigned __int8 *v16;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction *v17;
  uint64_t v18;
  void *v19;
  unsigned int *v20;
  char v21;
  void **v22;
  void *v23;
  void *v24;
  unint64_t v25;
  void **i;
  pxrInternal__aapl__pxrReserved__::SdfPath *v27;
  pxrInternal__aapl__pxrReserved__::SdfPath *v28;
  void *v29;
  pxrInternal__aapl__pxrReserved__::SdfPath *v30;
  pxrInternal__aapl__pxrReserved__::SdfPath *v31;
  void *v32;
  pxrInternal__aapl__pxrReserved__::SdfPath *v33;
  pxrInternal__aapl__pxrReserved__::SdfPath *v34;
  int64x2_t v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  int v39;
  void *v40;
  uint64_t v41;
  uint64_t *v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void **v51;
  uint64_t v52;
  uint64_t v53;
  int64x2_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void **v58;
  void **j;
  void **v60;
  int64x2_t v61;
  void v62[2];
  uint64_t *v63;
  long long v64;
  void v65[7];
  int *v66;
  int v67;
  int v68;
  void *v69;
  char v70;
  int v71;
  void **v72;
  const char *v73;
  uint64_t v74;
  const char *v75;
  char v76;
  long long v77;
  uint64_t v78;

  unsigned __int8 v78 = *MEMORY[0x263EF8340];
  uint64_t v71 = a4;
  a8[1]  = 0;
  a8[2]  = 0;
  *a8  = 0;
  if ((a4 & 0x30) != 0)
  {
    if ((a4 & 0xF) != 0)
    {
      if ((a4 & 0x21) == 1)
      {
        unsigned __int8 v72 = (void **)"pcp/cache.cpp";
        unsigned int v73 = "FindSiteDependencies";
        std::locale v74 = 650;
        BOOL v75 = "PcpDependencyVector pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(const PcpLayerStackPt"
              "r &, const SdfPath &, PcpDependencyFlags, BOOL, BOOL, BOOL) const";
        std::locale v76 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v72, 1, (pxrInternal__aapl__pxrReserved__ *)"depMask of PcpDependencyTypeRoot requires PcpDependencyTypeNonVirtual");
      }
      else
      {
        uint64_t v15 = sub_216BBCEA8(a2);
        if (sub_216ABA3A0((uint64_t *)(v15 + 104), a1 + 25))
        {
          unsigned __int8 v69 = a1;
          std::locale v70 = a7;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v67);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v68);
          char v66 = a3;
          uint64_t v16 = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
          if ((v16 & 1) == 0)
          {
            if (*(void *)a3 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v16))
            {
              sub_216981010(&v72, a3);
              sub_21698105C((_DWORD *)&v72 + 1, a3 + 1);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimOrPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, &v72);
            }
            sub_2169C487C(&v67, &v72);
            sub_2169C48D4(&v68, (_DWORD *)&v72 + 1);
            sub_21697B754(&v72);
            char v66 = &v67;
          }
          if ((v71 & 1) != 0
            && sub_216ABA3A0(a2, a1 + 16)
            && (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)a3) & 1) == 0
            && sub_216BD938C((uint64_t)&v69, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3))
          {
            sub_216981010(&v72, a3);
            sub_21698105C((_DWORD *)&v72 + 1, a3 + 1);
            sub_216981010(&v73, a3);
            uint64_t v17 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)sub_21698105C((_DWORD *)&v73 + 1, a3 + 1);
            unint64_t v18 = pxrInternal__aapl__pxrReserved__::PcpMapFunction::Identity(v17);
            sub_216BBEE18(&v74, v18);
            uint64_t v77 = *(_OWORD *)(v18 + 40);
            sub_216BD92D0(a8, (uint64_t)&v72);
            sub_216BD9330(&v72);
          }
          v65[0]  = &v66;
          v65[1]  = a3;
          v65[2]  = &v71;
          v65[3]  = &v69;
          v65[4]  = a8;
          v65[5]  = a2;
          v65[6]  = a1;
          uint64_t v19 = (void *)a1[36];
          uint64_t v20 = (unsigned int *)v66;
          uint64_t v21 = v71;
          uint64_t v22 = (void **)a2[1];
          if (v22)
          {
            if (*(unsigned char *)(sub_216850B68(a2 + 1) + 14)) {
              uint64_t v22 = (void **)*a2;
            }
            else {
              uint64_t v22 = 0;
            }
          }
          unsigned __int8 v72 = v22;
          sub_2168BD80C((uint64_t *)&v72);
          uint64_t v23 = sub_216877FD4(v19, &v72);
          sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v72);
          if (v23)
          {
            uint64_t v24 = v23 + 3;
            if (a5)
            {
              unsigned int v73 = 0;
              unsigned __int8 v72 = (void **)sub_216BBE8E8(v23 + 3, v20);
              uint64_t v25 = sub_216BBE950((uint64_t)&v72);
              for (uint64_t i = v72; i != (void **)v25; v72 = i)
              {
                uint64_t v27 = (pxrInternal__aapl__pxrReserved__::SdfPath *)i[1];
                int v28 = (pxrInternal__aapl__pxrReserved__::SdfPath *)i[2];
                if (v27 != v28)
                {
                  do
                  {
                    sub_216BE163C((uint64_t)v65, v27, (pxrInternal__aapl__pxrReserved__::SdfPath *)v72);
                    uint64_t v27 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v27 + 8);
                  }
                  while (v27 != v28);
                  uint64_t i = v72;
                }
                uint64_t i = (void **)i[5];
                if (!i) {
                  uint64_t i = (void **)sub_216BBE950((uint64_t)&v72);
                }
              }
            }
            else
            {
              long long v29 = sub_216BBE8E8(v23 + 3, v20);
              if (v29)
              {
                uint64_t v30 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v29[1];
                int v31 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v29[2];
                while (v30 != v31)
                {
                  sub_216BE163C((uint64_t)v65, v30, (pxrInternal__aapl__pxrReserved__::SdfPath *)v20);
                  uint64_t v30 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v30 + 8);
                }
              }
            }
            if ((v21 & 8) != 0)
            {
              pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v20, &v72);
              while (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v72))
              {
                int v32 = sub_216BBE8E8(v24, (unsigned int *)&v72);
                if (v32)
                {
                  uint64_t v33 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v32[1];
                  uint64_t v34 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v32[2];
                  while (v33 != v34)
                  {
                    sub_216BE163C((uint64_t)v65, v33, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v72);
                    uint64_t v33 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v33 + 8);
                  }
                }
                pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v72, &v63);
                sub_21697DE94((int *)&v72, (int *)&v63);
                sub_21697DEEC((int *)&v72 + 1, (int *)&v63 + 1);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v63 + 1);
                sub_21697C414(&v63);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v72 + 1);
              sub_21697C414(&v72);
            }
          }
          if (a6)
          {
            uint64_t v35 = 0uLL;
            char v64 = 0u;
            std::string::size_type v63 = (uint64_t *)&v64;
            v62[0]  = 0;
            unsigned int v61 = 0u;
            long long v36 = *a8;
            uint64_t v57 = a8[1];
            if (*a8 == v57)
            {
              uint64_t v55 = 0;
              uint64_t v54 = vdupq_n_s64(v36);
            }
            else
            {
              do
              {
                uint64_t v37 = (void *)v64;
                std::string v38 = (uint64_t *)&v64;
                if ((void)v64)
                {
                  std::string v38 = (uint64_t *)&v64;
                  do
                  {
                    uint64_t v39 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v37 + 28));
                    uint64_t v40 = v37 + 1;
                    if (v39)
                    {
                      uint64_t v40 = v37;
                      std::string v38 = v37;
                    }
                    uint64_t v37 = (void *)*v40;
                  }
                  while (*v40);
                }
                if (v38 == v63) {
                  goto LABEL_55;
                }
                char v41 = *v38;
                if (*v38)
                {
                  do
                  {
                    uint64_t v42 = (uint64_t *)v41;
                    char v41 = *(void *)(v41 + 8);
                  }
                  while (v41);
                }
                else
                {
                  do
                  {
                    uint64_t v42 = (uint64_t *)v38[2];
                    long long v43 = *v42 == (void)v38;
                    std::string v38 = v42;
                  }
                  while (v43);
                }
                if (!pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v42 + 28)))
                {
LABEL_55:
                  sub_216A5CF30(&v63, (pxrInternal__aapl__pxrReserved__::SdfPath *)v36, (_DWORD *)v36);
                  int v44 = v61.i64[1];
                  if (v61.i64[1] >= v62[0])
                  {
                    uint64_t v45 = sub_216BE2314(v61.i64, v36);
                  }
                  else
                  {
                    sub_216BD921C(v61.i64[1], v36);
                    uint64_t v45 = v44 + 72;
                  }
                  v61.i64[1]  = v45;
                  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v36))
                  {
                    unsigned int v73 = 0;
                    unsigned __int8 v72 = (void **)sub_216BD4C38(a1 + 26, (unsigned int *)v36);
                    int v46 = (void **)sub_216BD50BC((uint64_t)&v72);
                    unint64_t j = v72;
                    uint64_t v60 = v46;
                    if (v46 != v72)
                    {
                      uint64_t v47 = (void **)v72[7];
                      if (!v47)
                      {
                        uint64_t v47 = (void **)sub_216BD50BC((uint64_t)&j);
                        int v46 = v60;
                      }
                      uint64_t v58 = v47;
                      unint64_t j = v47;
                      if (v46 != v47)
                      {
                        do
                        {
                          if (v47[1])
                          {
                            sub_216981010(&v72, v47);
                            sub_21698105C((_DWORD *)&v72 + 1, (_DWORD *)v47 + 1);
                            pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v73, (pxrInternal__aapl__pxrReserved__::SdfPath *)v47, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v36 + 8), 1);
                            sub_216BBEE18(&v74, v36 + 16);
                            uint64_t v77 = *(_OWORD *)(v36 + 56);
                            unsigned int v48 = v61.i64[1];
                            if (v61.i64[1] >= v62[0])
                            {
                              char v49 = sub_216BE1270(v61.i64, (uint64_t)&v72);
                            }
                            else
                            {
                              sub_216BE1398((uint64_t)v62, v61.i64[1], (uint64_t)&v72);
                              char v49 = v48 + 72;
                            }
                            v61.i64[1]  = v49;
                            sub_216BBED8C((uint64_t)&v74);
                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v73 + 1);
                            sub_21697C414(&v73);
                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v72 + 1);
                            sub_21697C414(&v72);
                            uint64_t v47 = v58;
                          }
                          uint64_t v47 = (void **)v47[7];
                          if (!v47) {
                            uint64_t v47 = (void **)sub_216BD50BC((uint64_t)&v58);
                          }
                          uint64_t v58 = v47;
                        }
                        while (v60 != v47);
                      }
                    }
                  }
                  unsigned int v73 = 0;
                  unsigned __int8 v72 = (void **)sub_216BD514C(a1 + 31, (unsigned int *)v36);
                  long long v50 = sub_216BD51B4((uint64_t)&v72);
                  unint64_t v51 = v72;
                  for (unint64_t j = v72; v51 != (void **)v50; unint64_t j = v51)
                  {
                    if (!pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::IsEmpty((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)(v51 + 1)))
                    {
                      sub_216981010(&v72, v51);
                      sub_21698105C((_DWORD *)&v72 + 1, (_DWORD *)v51 + 1);
                      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v73, (pxrInternal__aapl__pxrReserved__::SdfPath *)v51, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v36 + 8), 1);
                      sub_216BBEE18(&v74, v36 + 16);
                      uint64_t v77 = *(_OWORD *)(v36 + 56);
                      long long v52 = v61.i64[1];
                      if (v61.i64[1] >= v62[0])
                      {
                        unint64_t v53 = sub_216BE1270(v61.i64, (uint64_t)&v72);
                      }
                      else
                      {
                        sub_216BE1398((uint64_t)v62, v61.i64[1], (uint64_t)&v72);
                        unint64_t v53 = v52 + 72;
                      }
                      v61.i64[1]  = v53;
                      sub_216BBED8C((uint64_t)&v74);
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v73 + 1);
                      sub_21697C414(&v73);
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v72 + 1);
                      sub_21697C414(&v72);
                    }
                    unint64_t v51 = (void **)j[6];
                    if (!v51) {
                      unint64_t v51 = (void **)sub_216BD51B4((uint64_t)&j);
                    }
                  }
                }
                v36 += 72;
              }
              while (v36 != v57);
              uint64_t v54 = *(int64x2_t *)a8;
              uint64_t v35 = v61;
              uint64_t v55 = v62[0];
            }
            *(int64x2_t *)a8  = v35;
            unsigned int v61 = v54;
            uint64_t v56 = a8[2];
            a8[2]  = v55;
            v62[0]  = v56;
            unsigned __int8 v72 = (void **)&v61;
            sub_216BE117C(&v72);
            sub_216981EE8((uint64_t)&v63, (void *)v64);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v68);
          sub_21697C414(&v67);
        }
        else
        {
          unsigned __int8 v72 = (void **)"pcp/cache.cpp";
          unsigned int v73 = "FindSiteDependencies";
          std::locale v74 = 654;
          BOOL v75 = "PcpDependencyVector pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(const PcpLayerStack"
                "Ptr &, const SdfPath &, PcpDependencyFlags, BOOL, BOOL, BOOL) const";
          std::locale v76 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v72, 1, (pxrInternal__aapl__pxrReserved__ *)"PcpLayerStack does not belong to this PcpCache");
        }
      }
    }
    else
    {
      unsigned __int8 v72 = (void **)"pcp/cache.cpp";
      unsigned int v73 = "FindSiteDependencies";
      std::locale v74 = 643;
      BOOL v75 = "PcpDependencyVector pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(const PcpLayerStackPtr "
            "&, const SdfPath &, PcpDependencyFlags, BOOL, BOOL, BOOL) const";
      std::locale v76 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v72, 1, (pxrInternal__aapl__pxrReserved__ *)"depMask must include at least one of {PcpDependencyTypeRoot, PcpDependencyTypePurelyDirect, PcpDependencyTypePartlyDirect, PcpDependencyTypeAncestral}");
    }
  }
  else
  {
    unsigned __int8 v72 = (void **)"pcp/cache.cpp";
    unsigned int v73 = "FindSiteDependencies";
    std::locale v74 = 634;
    BOOL v75 = "PcpDependencyVector pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(const PcpLayerStackPtr &,"
          " const SdfPath &, PcpDependencyFlags, BOOL, BOOL, BOOL) const";
    std::locale v76 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v72, 1, (pxrInternal__aapl__pxrReserved__ *)"depMask must include at least one of {PcpDependencyTypeVirtual, PcpDependencyTypeNonVirtual}");
  }
}

void sub_216BD8780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28)
{
}

void sub_216BD90AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28)
{
  sub_21697B754((_DWORD *)(v28 - 200));
  a28  = a11;
  sub_216BE117C(&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_216BD921C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_216981010((_DWORD *)a1, (_DWORD *)a2);
  sub_21698105C(v4 + 1, (_DWORD *)(a2 + 4));
  sub_216981010((_DWORD *)(a1 + 8), (_DWORD *)(a2 + 8));
  sub_21698105C((_DWORD *)(a1 + 12), (_DWORD *)(a2 + 12));
  sub_216BBEE18((_DWORD *)(a1 + 16), a2 + 16);
  *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
  return a1;
}

void sub_216BD929C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v4);
  sub_21697C414(v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216BD92D0(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  unint64_t v5 = *(void *)(v3 - 8);
  if (v5 >= v4)
  {
    uint64_t result = sub_216BE1270(a1, a2);
  }
  else
  {
    sub_216BE1398(v3, *(void *)(v3 - 8), a2);
    uint64_t result = v5 + 72;
    a1[1]  = v5 + 72;
  }
  a1[1]  = result;
  return result;
}

void sub_216BD9328(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8)  = v2;
  _Unwind_Resume(a1);
}

_DWORD *sub_216BD9330(_DWORD *a1)
{
  sub_216BBED8C((uint64_t)(a1 + 4));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 3);
  sub_21697C414(a1 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

uint64_t sub_216BD938C(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  if (!*(unsigned char *)(a1 + 8)) {
    return 1;
  }
  uint64_t v3 = *(pxrInternal__aapl__pxrReserved__::PcpCache **)a1;
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(this))
  {
    unint64_t v4 = sub_216BD4C38((void *)v3 + 26, (unsigned int *)this);
    return v4 && v4[1];
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this);
    if (result) {
      return pxrInternal__aapl__pxrReserved__::PcpCache::_GetPropertyIndex(v3, this) != 0;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::CanHaveOpinionForSite(uint64_t a1, unsigned int *a2, uint64_t *a3, int *a4)
{
  uint64_t result = (uint64_t)sub_216BD4C38((void *)(a1 + 208), a2);
  if (result)
  {
    uint64_t v8 = *(void *)(result + 8);
    uint64_t v7 = (uint64_t *)(result + 8);
    if (v8)
    {
      v31[0]  = 0;
      v31[1]  = 0;
      uint64_t v30 = (uint64_t *)v31;
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v7, 6u, &v26);
      uint64_t v9 = v26;
      uint64_t v10 = v27;
      uint64_t v11 = v28;
      uint64_t v12 = v29;
      if (v26 != v28 || v27 != v29)
      {
        do
        {
          v25[0]  = v9;
          v25[1]  = v10;
          if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v25))
          {
            LayerStacuint64_t k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v25);
            sub_216BC11A8(v24, LayerStack);
            sub_216BE10F4(&v30, (uint64_t)v24, (uint64_t)v24);
            char v16 = v15;
            uint64_t v17 = v24[1];
            if (v24[1]
              && atomic_fetch_add_explicit((atomic_uint *volatile)(v24[1] + 8), 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
            }
            if (v16)
            {
              unint64_t v18 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v25);
              uint64_t v19 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v18);
              *(_OWORD *)uint64_t v24 = *(_OWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v19);
              while (v24[0] != v24[1])
              {
                uint64_t v22 = (void *)sub_216BD9634(v24, v20, v21);
                if (sub_216ABA3A0(a3, v22))
                {
                  if (a4)
                  {
                    Path  = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v25);
                    sub_2169C487C(a4, Path);
                    sub_2169C48D4(a4 + 1, Path + 1);
                  }
                  sub_21699DA30((uint64_t)&v30, v31[0]);
                  return 1;
                }
                sub_216BD96B4(v24);
              }
            }
          }
          ++v10;
        }
        while (v9 != v11 || v10 != v12);
      }
      sub_21699DA30((uint64_t)&v30, v31[0]);
    }
    return 0;
  }
  return result;
}

void sub_216BD95C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

uint64_t sub_216BD9634(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0]  = "tf/iterator.h";
    v5[1]  = "operator*";
    uint64_t v5[2] = 271;
    uint64_t v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "fRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::operator*() [T  = const std::vector<pxrInternal__aapl_"
            "_pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse  = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216BD96AC()
{
}

void *sub_216BD96B4(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0]  = "tf/iterator.h";
    v3[1]  = "operator++";
    uint64_t v3[2] = 250;
    void v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::operator++() [T  = const std::vector<pxr"
            "Internal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse  = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpCache::GetInvalidSublayerIdentifiers(pxrInternal__aapl__pxrReserved__::PcpCache *this@<X0>, void *a2@<X8>)
{
  v18[0]  = 0;
  v18[1]  = 0;
  uint64_t v17 = v18;
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_216BD4B58((uint64_t *)this + 25);
  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::GetAllLayerStacks(v3, v16);
  for (long long i = *(_OWORD *)v16; (void)i != *((void *)&i + 1); sub_216BD9A9C(&i))
  {
    char v6 = (uint64_t *)sub_216BD991C((uint64_t *)&i, v4, v5);
    int v7 = (void *)sub_216BBCEA8(v6);
    sub_216BCA858(v7, v14);
    for (long long j = v14[0]; (void)j != *((void *)&j + 1); sub_216BD9A1C(&j))
    {
      uint64_t v10 = sub_216BD999C((uint64_t *)&j, v8, v9);
      if (*(void *)v10)
      {
        if (v11)
        {
          uint64_t v12 = *(std::__shared_weak_count **)(v10 + 8);
          if (v12) {
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21680EE0C((uint64_t **)&v17, v11 + 15, (uint64_t)(v11 + 15));
          if (v12) {
            sub_216784EC4(v12);
          }
        }
      }
    }
    *(void *)&long long j = v14;
    sub_216787968((void ***)&j);
  }
  sub_216BE2434(a2, v17, v18);
  *(void *)&v14[0]  = v16;
  sub_216850BF4((void ***)v14);
  sub_21678A498((uint64_t)&v17, v18[0]);
}

void sub_216BD98B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,char *a21)
{
  a11  = (void **)&a17;
  sub_216850BF4(&a11);
  sub_21678A498((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

uint64_t sub_216BD991C(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0]  = "tf/iterator.h";
    v5[1]  = "operator*";
    uint64_t v5[2] = 271;
    uint64_t v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::TfWeakP"
            "tr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>>>::operator*() [T  = std::vector<pxrInternal__aapl__pxrRe"
            "served__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>>, Reverse  = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216BD9994()
{
}

uint64_t sub_216BD999C(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0]  = "tf/iterator.h";
    v5[1]  = "operator*";
    uint64_t v5[2] = 271;
    uint64_t v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::shared_ptr<pxrInternal__aapl__pxrRes"
            "erved__::PcpErrorBase>>>::operator*() [T  = std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Pcp"
            "ErrorBase>>, Reverse  = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216BD9A14()
{
}

void *sub_216BD9A1C(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0]  = "tf/iterator.h";
    v3[1]  = "operator++";
    uint64_t v3[2] = 250;
    void v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::shared_ptr<pxrInternal"
            "__aapl__pxrReserved__::PcpErrorBase>>>::operator++() [T  = std::vector<std::shared_ptr<pxrInternal__aapl__pxr"
            "Reserved__::PcpErrorBase>>, Reverse  = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

void *sub_216BD9A9C(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0]  = "tf/iterator.h";
    v3[1]  = "operator++";
    uint64_t v3[2] = 250;
    void v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>>>::operator++() [T  = std::vector<pxrIntern"
            "al__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>>, Reverse  = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::PcpCache::IsInvalidSublayerIdentifier(pxrInternal__aapl__pxrReserved__::PcpCache *a1, unsigned __int8 **a2)
{
  pxrInternal__aapl__pxrReserved__::PcpCache::GetInvalidSublayerIdentifiers(a1, &v6);
  uint64_t v3 = sub_2169CAFD0(v6, v7, a2);
  BOOL v4 = v3 != v7;
  uint64_t v8 = (void **)&v6;
  sub_216782F20(&v8);
  return v4;
}

void *pxrInternal__aapl__pxrReserved__::PcpCache::GetInvalidAssetPaths@<X0>(pxrInternal__aapl__pxrReserved__::PcpCache *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16)  = 0;
  *(void *)(a2 + 8)  = 0;
  *(void *)a2  = a2 + 8;
  uint64_t result = sub_216BD4BE4((pxrInternal__aapl__pxrReserved__::PcpCache *)((char *)this + 208));
  uint64_t v23 = result;
  uint64_t v24 = 0;
  while (v23 != v24)
  {
    uint64_t v6 = (_DWORD *)*sub_216BD471C(&v23, v4, v5);
    uint64_t v9 = *sub_216BD471C(&v23, v7, v8);
    uint64_t v11 = *(void *)(v9 + 8);
    uint64_t v10 = (void *)(v9 + 8);
    if (v11)
    {
      sub_216BD78E0(v10, v22);
      uint64_t v12 = v22[0];
      uint64_t v13 = v22[1];
      while (v12 != v13)
      {
        if (*(void *)v12)
        {
          if (v14)
          {
            char v15 = v14;
            char v16 = *(std::__shared_weak_count **)(v12 + 8);
            if (v16) {
              atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v25 = v6;
            uint64_t v17 = sub_216BE25EC((uint64_t **)a2, (unint64_t *)v6, (uint64_t)&unk_2174BFD90, &v25);
            unint64_t v18 = (uint64_t *)(v17 + 5);
            uint64_t v19 = (long long *)(v15 + 224);
            uint64_t v20 = v17[6];
            if (v20 >= v17[7])
            {
              uint64_t v21 = sub_2167E9A44(v18, v19);
            }
            else
            {
              sub_2167E99E4(v18, v19);
              uint64_t v21 = (uint64_t)(v20 + 3);
            }
            v17[6]  = (uint64_t *)v21;
            if (v16) {
              sub_216784EC4(v16);
            }
          }
        }
        v12 += 16;
      }
      uint64_t v26 = (void **)v22;
      sub_216787968(&v26);
    }
    uint64_t result = sub_216BD48C8((unint64_t *)&v23);
  }
  return result;
}

void sub_216BD9D08(_Unwind_Exception *a1)
{
  sub_216BE2544(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpCache::IsInvalidAssetPath(pxrInternal__aapl__pxrReserved__::PcpCache *a1, unsigned __int8 *a2)
{
  pxrInternal__aapl__pxrReserved__::PcpCache::GetInvalidAssetPaths(a1, (uint64_t)&v19);
  uint64_t v17 = v19;
  unint64_t v18 = &v20;
  while (1)
  {
    unint64_t v5 = v17;
    uint64_t v6 = v18;
    if (v17 == v18) {
      break;
    }
    for (long long i = *(_OWORD *)(*sub_216BD9E94(&v17, v3, v4) + 40); (void)i != *((void *)&i + 1); sub_21686739C(&i))
    {
      uint64_t v9 = (unsigned __int8 *)sub_21686731C((uint64_t *)&i, v7, v8);
      uint64_t v10 = v9[23];
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = v9[23];
      }
      else {
        uint64_t v11 = *((void *)v9 + 1);
      }
      uint64_t v12 = a2[23];
      int v13 = (char)v12;
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *((void *)a2 + 1);
      }
      if (v11 == v12)
      {
        if (v13 >= 0) {
          uint64_t v14 = a2;
        }
        else {
          uint64_t v14 = *(unsigned __int8 **)a2;
        }
        if ((v10 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v9, v14, *((void *)v9 + 1))) {
            goto LABEL_22;
          }
        }
        else
        {
          if (!v9[23]) {
            goto LABEL_22;
          }
          while (*v9 == *v14)
          {
            ++v9;
            ++v14;
            if (!--v10) {
              goto LABEL_22;
            }
          }
        }
      }
    }
    sub_216BD9F10(&v17);
  }
LABEL_22:
  sub_216BE2544((uint64_t)&v19, v20);
  return v5 != v6;
}

void sub_216BD9E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

void *sub_216BD9E94(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0]  = "tf/iterator.h";
    v3[1]  = "operator->";
    uint64_t v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, s"
            "td::vector<std::string>, pxrInternal__aapl__pxrReserved__::SdfPath::FastLessThan>>::operator->() [T  = std::m"
            "ap<pxrInternal__aapl__pxrReserved__::SdfPath, std::vector<std::string>, pxrInternal__aapl__pxrReserved__::Sd"
            "fPath::FastLessThan>, Reverse  = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216BD9F10(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0]  = "tf/iterator.h";
    v7[1]  = "operator++";
    uint64_t v7[2] = 250;
    void v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved"
            "__::SdfPath, std::vector<std::string>, pxrInternal__aapl__pxrReserved__::SdfPath::FastLessThan>>::operator++"
            "() [T  = std::map<pxrInternal__aapl__pxrReserved__::SdfPath, std::vector<std::string>, pxrInternal__aapl__pxr"
            "Reserved__::SdfPath::FastLessThan>, Reverse  = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        char v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        char v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (!v5);
    }
    *a1  = v4;
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::PcpCache::HasAnyDynamicFileFormatArgumentFieldDependencies(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **this)
{
  return pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::HasAnyDynamicFileFormatArgumentFieldDependencies(this[36]);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpCache::HasAnyDynamicFileFormatArgumentAttributeDependencies(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **this)
{
  return pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::HasAnyDynamicFileFormatArgumentAttributeDependencies(this[36]);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpCache::IsPossibleDynamicFileFormatArgumentField(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::IsPossibleDynamicFileFormatArgumentField(this[36], a2);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpCache::IsPossibleDynamicFileFormatArgumentAttribute(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::IsPossibleDynamicFileFormatArgumentAttribute(this[36], a2);
}

void *pxrInternal__aapl__pxrReserved__::PcpCache::GetDynamicFileFormatArgumentDependencyData(uint64_t a1, unsigned int *a2)
{
  return pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetDynamicFileFormatArgumentDependencyData(*(void *)(a1 + 288), a2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpCache::GetPrimsUsingExpressionVariablesFromLayerStack(uint64_t a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetPrimsUsingExpressionVariablesFromLayerStack(*(void *)(a1 + 288), a2);
}

long long *pxrInternal__aapl__pxrReserved__::PcpCache::GetExpressionVariablesFromLayerStackUsedByPrim(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  return pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetExpressionVariablesFromLayerStackUsedByPrim(*(void *)(a1 + 288), a2, a3);
}

void pxrInternal__aapl__pxrReserved__::PcpCache::Apply(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::PcpLifeboat *a3)
{
  uint64_t v55 = a3;
  uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  if (sub_216BE2740(a2, v6))
  {
    sub_216BDA438((uint64_t *)(a1 + 208));
    sub_216BDA4E8((uint64_t *)(a1 + 248));
    pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::RemoveAll(*(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **)(a1 + 288), a3);
  }
  else
  {
    if (*(unsigned char *)(a2 + 120)) {
      ++*(void *)(*(void *)(a1 + 288) + 40);
    }
    uint64_t v56 = *(void ***)a2;
    uint64_t v57 = (void **)(a2 + 8);
    while (v56 != v57)
    {
      uint64_t v28 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216BD712C(&v56, v7, v8);
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v28)) {
        pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePrimAndPropertyCaches((pxrInternal__aapl__pxrReserved__::PcpCache *)a1, v28, v55);
      }
      else {
        pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePropertyCaches((pxrInternal__aapl__pxrReserved__::PcpCache *)a1, v28, v29);
      }
      sub_216BD71AC(&v56);
    }
    uint64_t v30 = *(void ***)(a2 + 48);
    int v31 = (void **)(a2 + 56);
    uint64_t v56 = v30;
    uint64_t v57 = (void **)(a2 + 56);
    while (v30 != v31)
    {
      int v32 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216BD712C(&v56, v7, v8);
      pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePrimCache((pxrInternal__aapl__pxrReserved__::PcpCache *)a1, v32, v55);
      uint64_t v35 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216BD712C(&v56, v33, v34);
      pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePropertyCaches((pxrInternal__aapl__pxrReserved__::PcpCache *)a1, v35, v36);
      sub_216BD71AC(&v56);
      uint64_t v30 = v56;
      int v31 = v57;
    }
    uint64_t v56 = (void **)a1;
    uint64_t v57 = (void **)&v55;
    uint64_t v37 = *(_DWORD **)(a2 + 24);
    std::string v38 = (_DWORD *)(a2 + 32);
    long long v52 = v37;
    unint64_t v53 = (_DWORD *)(a2 + 32);
    while (v37 != v38)
    {
      uint64_t v39 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216BD712C(&v52, v7, v8);
      sub_216BDA75C((uint64_t *)&v56, v39);
      sub_216BD71AC(&v52);
      uint64_t v37 = v52;
      std::string v38 = v53;
    }
    uint64_t v40 = *(_DWORD **)(a2 + 128);
    char v41 = (_DWORD *)(a2 + 136);
    long long v52 = v40;
    unint64_t v53 = (_DWORD *)(a2 + 136);
    while (v40 != v41)
    {
      uint64_t v42 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216BD712C(&v52, v7, v8);
      sub_216BDA75C((uint64_t *)&v56, v42);
      sub_216BD71AC(&v52);
      uint64_t v40 = v52;
      char v41 = v53;
    }
    long long v43 = *(_DWORD **)(a2 + 104);
    long long v52 = *(_DWORD **)(a2 + 96);
    unint64_t v53 = v43;
    if (v52 != v43)
    {
      do
      {
        int v44 = sub_216BDA8C8(&v52, v7, v8);
        if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(*v44 + 8)))
        {
          uint64_t v47 = sub_216BDA8C8(&v52, v45, v46);
          pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePrimAndPropertyCaches((pxrInternal__aapl__pxrReserved__::PcpCache *)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(*v47 + 8), v55);
        }
        sub_216BDA944(&v52);
      }
      while (v52 != v53);
      unsigned int v48 = *(_DWORD **)(a2 + 96);
      char v49 = *(_DWORD **)(a2 + 104);
      long long v52 = v48;
      unint64_t v53 = v49;
      while (v48 != v49)
      {
        long long v50 = (const pxrInternal__aapl__pxrReserved__::SdfPath **)sub_216BDA8C8(&v52, v7, v8);
        pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePrimAndPropertyCaches((pxrInternal__aapl__pxrReserved__::PcpCache *)a1, *v50, v55);
        sub_216BDA944(&v52);
        unsigned int v48 = v52;
        char v49 = v53;
      }
    }
  }
  long long v52 = 0;
  unint64_t v53 = 0;
  unint64_t v54 = 0;
  long long v51 = *(_OWORD *)(a2 + 96);
  uint64_t v9 = a1 + 136;
  while ((void)v51 != *((void *)&v51 + 1))
  {
    uint64_t v10 = *(void **)(a1 + 152);
    while (v10)
    {
      uint64_t v11 = (const pxrInternal__aapl__pxrReserved__::SdfPath **)sub_216BDA8C8(&v51, v7, v8);
      if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 2), *v11))
      {
        uint64_t v12 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)*sub_216BDA8C8(&v51, v7, v8);
        char v15 = sub_216BDA8C8(&v51, v13, v14);
        pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v56, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 2), v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(*v15 + 8), 0);
        char v16 = v53;
        if ((unint64_t)v53 >= v54)
        {
          uint64_t v17 = (_DWORD *)sub_216AE5CE4((uint64_t *)&v52, &v56);
        }
        else
        {
          sub_21697D878(v53, &v56);
          sub_21697D8B4(v16 + 1, (_DWORD *)&v56 + 1);
          uint64_t v17 = v16 + 2;
        }
        unint64_t v53 = v17;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
        sub_21697C414(&v56);
        unint64_t v18 = (void *)*v10;
        sub_216851DB0((void *)(a1 + 136), v10, (uint64_t)&v56);
        sub_216BE104C((uint64_t)&v56, 0);
        uint64_t v10 = v18;
      }
      else
      {
        uint64_t v10 = (void *)*v10;
      }
    }
    uint64_t v19 = v52;
    uint64_t v20 = v53;
    while (v19 != v20)
    {
      uint64_t v21 = (const pxrInternal__aapl__pxrReserved__::SdfPath **)sub_216BDA8C8(&v51, v7, v8);
      if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)v19, *v21))
      {
        uint64_t v22 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)*sub_216BDA8C8(&v51, v7, v8);
        uint64_t v25 = sub_216BDA8C8(&v51, v23, v24);
        pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v56, (pxrInternal__aapl__pxrReserved__::SdfPath *)v19, v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(*v25 + 8), 0);
        sub_21697DE94(v19, (int *)&v56);
        sub_21697DEEC(v19 + 1, (int *)&v56 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
        sub_21697C414(&v56);
      }
      v19 += 2;
    }
    sub_216BDA944(&v51);
  }
  uint64_t v26 = v52;
  uint64_t v27 = v53;
  while (v26 != v27)
  {
    sub_216BE0D70(v9, v26, v26);
    v26 += 2;
  }
  uint64_t v56 = (void **)&v52;
  sub_216981168(&v56);
}

void sub_216BDA3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16  = (void **)&a12;
  sub_216981168(&a16);
  _Unwind_Resume(a1);
}

void sub_216BDA438(uint64_t *a1)
{
  uint64_t v2 = a1[1] - *a1;
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v2 >> 3;
    do
    {
      uint64_t v5 = *a1;
      uint64_t v6 = *(void *)(*a1 + 8 * v3);
      if (v6)
      {
        do
        {
          uint64_t v7 = *(void *)(v6 + 48);
          sub_2168BBAAC((void ***)(v6 + 40), 0);
          char v8 = *(void **)(v6 + 16);
          if (v8)
          {
            *(void *)(v6 + 24)  = v8;
            operator delete(v8);
          }
          sub_216BDCEE8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v6 + 8));
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v6 + 4));
          uint64_t v9 = sub_21697C414((_DWORD *)v6);
          operator delete(v9);
          uint64_t v6 = v7;
        }
        while (v7);
        uint64_t v5 = *a1;
      }
      *(void *)(v5 + 8 * v3++)  = 0;
    }
    while (v3 != v4);
  }
  a1[3]  = 0;
}

void sub_216BDA4E8(uint64_t *a1)
{
  uint64_t v2 = a1[1] - *a1;
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v2 >> 3;
    do
    {
      uint64_t v5 = *a1;
      uint64_t v6 = *(void *)(*a1 + 8 * v3);
      if (v6)
      {
        do
        {
          uint64_t v7 = *(void *)(v6 + 40);
          sub_2168BBAAC((void ***)(v6 + 32), 0);
          uint64_t v9 = (void **)(v6 + 8);
          sub_216BDCF18(&v9);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v6 + 4));
          char v8 = sub_21697C414((_DWORD *)v6);
          operator delete(v8);
          uint64_t v6 = v7;
        }
        while (v7);
        uint64_t v5 = *a1;
      }
      *(void *)(v5 + 8 * v3++)  = 0;
    }
    while (v3 != v4);
  }
  a1[3]  = 0;
}

void pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePrimAndPropertyCaches(pxrInternal__aapl__pxrReserved__::PcpCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::PcpLifeboat *a3)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::PcpCache *)((char *)this + 208);
  unint64_t v12 = 0;
  uint64_t v11 = sub_216BD4C38((void *)this + 26, (unsigned int *)a2);
  unint64_t v8 = sub_216BD50BC((uint64_t)&v11);
  unint64_t v9 = (unint64_t)v11;
  unint64_t v12 = v8;
  uint64_t v10 = (uint64_t)v11;
  if ((void *)v8 != v11)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Remove(*((pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **)this + 36), (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)(v9 + 8), a3);
      unint64_t v9 = *(void *)(v10 + 56);
      if (!v9) {
        unint64_t v9 = sub_216BD50BC((uint64_t)&v10);
      }
      uint64_t v10 = v9;
    }
    while (v12 != v9);
    if (v11 != (void *)v9) {
      sub_216BDB4C8(v6, (uint64_t *)&v11);
    }
  }
  pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePropertyCaches(this, a2, v7);
}

void pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePropertyCaches(pxrInternal__aapl__pxrReserved__::PcpCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::PcpLifeboat *a3)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::PcpCache *)((char *)this + 248);
  unint64_t v5 = 0;
  uint64_t v4 = sub_216BD514C((void *)this + 31, (unsigned int *)a2);
  unint64_t v5 = sub_216BD51B4((uint64_t)&v4);
  if ((void *)v5 != v4) {
    sub_216BDB5D4(v3, (uint64_t *)&v4);
  }
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePrimCache(pxrInternal__aapl__pxrReserved__::PcpCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::PcpLifeboat *a3)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)sub_216BD4C38((void *)this + 26, (unsigned int *)a2);
  if (result)
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Pcp_Dependencies *)*((void *)this + 36);
    uint64_t v7 = (uint64_t *)(result + 1);
    pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Remove(v6, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)(result + 1), a3);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v8);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::Swap(v7, (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v8);
    sub_2168BBAAC(&v11, 0);
    if (__p)
    {
      uint64_t v10 = __p;
      operator delete(__p);
    }
    return sub_216BDCEE8(&v8);
  }
  return result;
}

void sub_216BDA748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BDB478((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216BDA75C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t v4 = *a1;
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(this))
  {
    unint64_t v5 = sub_216BD4C38((void *)(v4 + 208), (unsigned int *)this);
    if (v5)
    {
      uint64_t v6 = v5 + 1;
      if (v5[1])
      {
        pxrInternal__aapl__pxrReserved__::Pcp_RescanForSpecs((pxrInternal__aapl__pxrReserved__ *)(v5 + 1), (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)*(unsigned __int8 *)(v4 + 96), 1);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v6, 6u, &v15);
        uint64_t v8 = v15;
        uint64_t v7 = v16;
        uint64_t v9 = v17;
        if (v15 == v17 && v16 == v18)
        {
LABEL_10:
          pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePrimAndPropertyCaches((pxrInternal__aapl__pxrReserved__::PcpCache *)v4, this, *(pxrInternal__aapl__pxrReserved__::PcpLifeboat **)a1[1]);
        }
        else
        {
          uint64_t v10 = v18 - 1;
          while (1)
          {
            uint64_t v11 = v7;
            v14[0]  = v8;
            v14[1]  = v7;
            if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v14)) {
              break;
            }
            uint64_t v7 = v11 + 1;
            if (v8 == v9 && v10 == v11) {
              goto LABEL_10;
            }
          }
        }
      }
    }
  }
  else if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this))
  {
    pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePropertyCache((pxrInternal__aapl__pxrReserved__::PcpCache *)v4, this, v12);
  }
  else if (pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(this))
  {
    pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePropertyCaches((pxrInternal__aapl__pxrReserved__::PcpCache *)v4, this, v13);
  }
}

void *sub_216BDA8C8(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0]  = "tf/iterator.h";
    v3[1]  = "operator->";
    uint64_t v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::pair<pxrInternal__aapl__pxrRes"
            "erved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>>::operator->() [T  = const std::vector<std::pai"
            "r<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>, Reverse  = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216BDA944(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0]  = "tf/iterator.h";
    v3[1]  = "operator++";
    uint64_t v3[2] = 250;
    void v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::pair<pxrInternal"
            "__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>>::operator++() [T  = const std::v"
            "ector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>, Reverse  = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpCache::Reload(pxrInternal__aapl__pxrReserved__::PcpCache *this, uint64_t **a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v2 = (uint64_t *)((char *)this + 128);
  if (*((void *)this + 16))
  {
    pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v32, (pxrInternal__aapl__pxrReserved__::PcpCache *)((char *)this + 48));
    int v5 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_216BD4B58((uint64_t *)this + 25);
    pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::GetAllLayerStacks(v5, v30);
    for (long long i = *(_OWORD *)v30; (void)i != *((void *)&i + 1); sub_216BD9A9C(&i))
    {
      uint64_t v8 = (uint64_t *)sub_216BD991C((uint64_t *)&i, v6, v7);
      uint64_t v9 = (void *)sub_216BBCEA8(v8);
      sub_216BCA858(v9, &v28);
      uint64_t v10 = v28;
      uint64_t v11 = v29;
      while (v10 != v11)
      {
        if (*v10)
        {
          if (v12)
          {
            uint64_t v13 = (std::__shared_weak_count *)v10[1];
            if (v13) {
              atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            pxrInternal__aapl__pxrReserved__::PcpChanges::DidMaybeFixSublayer(a2, this, v12 + 13, (uint64_t)(v12 + 15));
            if (v13) {
              sub_216784EC4(v13);
            }
          }
        }
        v10 += 2;
      }
      p_long long i = (void **)&v28;
      sub_216787968(&p_i);
    }
    for (long long i = (unint64_t)sub_216BD4BE4((pxrInternal__aapl__pxrReserved__::PcpCache *)((char *)this + 208));
          (void)i != *((void *)&i + 1);
          sub_216BDADD0((unint64_t *)&i))
    {
      uint64_t v16 = *sub_216BDAD54(&i, v14, v15);
      uint64_t v18 = *(void *)(v16 + 8);
      uint64_t v17 = (void *)(v16 + 8);
      if (v18)
      {
        sub_216BD78E0(v17, &v28);
        uint64_t v19 = v28;
        uint64_t v20 = v29;
        while (v19 != v20)
        {
          if (*v19)
          {
            if (v21)
            {
              uint64_t v22 = (std::__shared_weak_count *)v19[1];
              if (v22) {
                atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              pxrInternal__aapl__pxrReserved__::PcpChanges::DidMaybeFixAsset(a2, this, (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)(v21 + 13), v21 + 31, (uint64_t)(v21 + 28));
              if (v22) {
                sub_216784EC4(v22);
              }
            }
          }
          v19 += 2;
        }
        p_long long i = (void **)&v28;
        sub_216787968(&p_i);
      }
    }
    pxrInternal__aapl__pxrReserved__::PcpCache::GetUsedLayers(this, v14, v15, (uint64_t)&v28);
    uint64_t v23 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v2);
    pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetSessionLayers(v23, (uint64_t *)&i);
    uint64_t v25 = *((void *)&i + 1);
    for (uint64_t j = i; j != v25; j += 16)
      sub_216BE2804(&v28, j);
    p_long long i = (void **)&i;
    sub_216850BF4(&p_i);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ReloadLayers((uint64_t)&v28, 0, v26);
    sub_21699DA30((uint64_t)&v28, v29);
    uint64_t v28 = v30;
    sub_216850BF4((void ***)&v28);
    pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v32);
  }
}

void sub_216BDACB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  int v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  sub_21699DA30((uint64_t)va, v7);
  va_copy((va_list)v5, va1);
  sub_216850BF4((void ***)va);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)va2);
  _Unwind_Resume(a1);
}

void *sub_216BDAD54(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0]  = "tf/iterator.h";
    v3[1]  = "operator->";
    uint64_t v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInt"
            "ernal__aapl__pxrReserved__::PcpPrimIndex>>::operator->() [T  = pxrInternal__aapl__pxrReserved__::SdfPathTable"
            "<pxrInternal__aapl__pxrReserved__::PcpPrimIndex>, Reverse  = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

unint64_t *sub_216BDADD0(unint64_t *a1)
{
  if (*a1 == a1[1])
  {
    v4[0]  = "tf/iterator.h";
    v4[1]  = "operator++";
    v4[2]  = 250;
    void v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::SdfPa"
            "thTable<pxrInternal__aapl__pxrReserved__::PcpPrimIndex>>::operator++() [T  = pxrInternal__aapl__pxrReserved__"
            "::SdfPathTable<pxrInternal__aapl__pxrReserved__::PcpPrimIndex>, Reverse  = false]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    unint64_t v2 = *(void *)(*a1 + 56);
    if (!v2) {
      unint64_t v2 = sub_216BD50BC((uint64_t)a1);
    }
    *a1  = v2;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpCache::ReloadReferences(pxrInternal__aapl__pxrReserved__::PcpCache *this, uint64_t **a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v55, (pxrInternal__aapl__pxrReserved__::PcpCache *)((char *)this + 48));
  v54[0]  = 0;
  v54[1]  = 0;
  unint64_t v53 = (uint64_t *)v54;
  uint64_t v47 = 0;
  int v46 = sub_216BD4C38((void *)this + 26, (unsigned int *)a3);
  uint64_t v7 = (uint64_t *)sub_216BD50BC((uint64_t)&v46);
  uint64_t v8 = v46;
  long long v52 = v46;
  if (v46 != v7)
  {
    uint64_t v39 = v7;
    do
    {
      uint64_t v9 = v8 + 1;
      if (v8[1])
      {
        sub_216BD78E0(v8 + 1, &v50);
        uint64_t v10 = v50;
        uint64_t v11 = (void **)v51;
        while (v10 != v11)
        {
          if (*v10)
          {
            if (v12)
            {
              uint64_t v13 = (std::__shared_weak_count *)v10[1];
              if (v13) {
                atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              pxrInternal__aapl__pxrReserved__::PcpChanges::DidMaybeFixAsset(a2, this, (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)(v12 + 13), v12 + 31, (uint64_t)(v12 + 28));
              if (v13) {
                sub_216784EC4(v13);
              }
            }
          }
          v10 += 2;
        }
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v9, 6u, (uint64_t *)&v46);
        uint64_t v15 = v46;
        uint64_t v14 = v47;
        uint64_t v16 = v48;
        BOOL v17 = v46 == v48 && v47 == v49;
        if (!v17)
        {
          uint64_t v18 = v49 - 1;
          do
          {
            uint64_t v19 = v14;
            v45[0]  = v15;
            v45[1]  = v14;
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v45, (uint64_t)&v40);
            sub_216BC11A8(&v43, (uint64_t *)&v40);
            sub_216BE10F4(&v53, (uint64_t)&v43, (uint64_t)&v43);
            uint64_t v20 = v44;
            if (v44
              && atomic_fetch_add_explicit((atomic_uint *volatile)(v44 + 8), 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
            sub_21697C414(&v41);
            sub_216BBEEA4(&v40);
            uint64_t v14 = v19 + 1;
          }
          while (v15 != v16 || v18 != v19);
        }
        int v46 = (uint64_t *)&v50;
        sub_216787968((void ***)&v46);
        uint64_t v8 = v52;
        uint64_t v7 = v39;
      }
      uint64_t v8 = (uint64_t *)v8[7];
      if (!v8) {
        uint64_t v8 = (uint64_t *)sub_216BD50BC((uint64_t)&v52);
      }
      long long v52 = v8;
    }
    while (v8 != v7);
  }
  uint64_t v21 = v53;
  if (v53 == (uint64_t *)v54)
  {
    uint64_t v47 = 0;
    unsigned int v48 = 0;
    int v46 = (uint64_t *)&v47;
  }
  else
  {
    do
    {
      uint64_t v22 = (void *)sub_216BBCEA8(v21 + 4);
      sub_216BCA858(v22, &v46);
      uint64_t v23 = v46;
      uint64_t v24 = (uint64_t *)v47;
      while (v23 != v24)
      {
        if (*v23)
        {
          if (v25)
          {
            uint64_t v26 = (std::__shared_weak_count *)v23[1];
            if (v26) {
              atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            pxrInternal__aapl__pxrReserved__::PcpChanges::DidMaybeFixSublayer(a2, this, v25 + 13, (uint64_t)(v25 + 15));
            if (v26) {
              sub_216784EC4(v26);
            }
          }
        }
        v23 += 2;
      }
      long long v50 = (void **)&v46;
      sub_216787968(&v50);
      uint64_t v27 = (uint64_t *)v21[1];
      if (v27)
      {
        do
        {
          uint64_t v28 = v27;
          uint64_t v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = (uint64_t *)v21[2];
          BOOL v17 = *v28 == (void)v21;
          uint64_t v21 = v28;
        }
        while (!v17);
      }
      uint64_t v21 = v28;
    }
    while (v28 != (uint64_t *)v54);
    uint64_t v29 = v53;
    uint64_t v47 = 0;
    unsigned int v48 = 0;
    int v46 = (uint64_t *)&v47;
    if (v53 != (uint64_t *)v54)
    {
      uint64_t v30 = (uint64_t *)((char *)this + 128);
      do
      {
        int v31 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(v29 + 4);
        uint64_t Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v31);
        uint64_t v33 = *(uint64_t **)Layers;
        uint64_t v34 = *(uint64_t **)(Layers + 8);
        while (v33 != v34)
        {
          uint64_t v35 = sub_216BBBFA8(v30);
          if (!pxrInternal__aapl__pxrReserved__::PcpLayerStack::HasLayer(v35, v33))
          {
            sub_216ABBA60((uint64_t *)&v50, v33);
            sub_216BE10F4(&v46, (uint64_t)&v50, (uint64_t)&v50);
            uint64_t v36 = v51;
            if (v51)
            {
              if (atomic_fetch_add_explicit((atomic_uint *volatile)(v51 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
                (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
              }
            }
          }
          ++v33;
        }
        uint64_t v37 = (uint64_t *)v29[1];
        if (v37)
        {
          do
          {
            std::string v38 = v37;
            uint64_t v37 = (uint64_t *)*v37;
          }
          while (v37);
        }
        else
        {
          do
          {
            std::string v38 = (uint64_t *)v29[2];
            BOOL v17 = *v38 == (void)v29;
            uint64_t v29 = v38;
          }
          while (!v17);
        }
        uint64_t v29 = v38;
      }
      while (v38 != (uint64_t *)v54);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfLayer::ReloadLayers((uint64_t)&v46, 0, v6);
  sub_21699DA30((uint64_t)&v46, v47);
  sub_21699DA30((uint64_t)&v53, v54[0]);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v55);
}

void sub_216BDB324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *a27)
{
  sub_21699DA30((uint64_t)&a18, a19);
  sub_21699DA30((uint64_t)&a26, a27);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)(v27 - 144));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BDB478(uint64_t a1)
{
  sub_2168BBAAC((void ***)(a1 + 32), 0);
  unint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16)  = v2;
    operator delete(v2);
  }

  return sub_216BDCEE8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1);
}

void sub_216BDB4C8(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*a2;
  sub_216BE2990(a1, *a2);
  sub_216BE29E4(a1, v3);

  sub_216BE2A80(a1, (unsigned int *)v3);
}

void pxrInternal__aapl__pxrReserved__::PcpCache::_RemovePropertyCache(pxrInternal__aapl__pxrReserved__::PcpCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::PcpLifeboat *a3)
{
  uint64_t v3 = sub_216BD514C((void *)this + 31, (unsigned int *)a2);
  if (v3)
  {
    char v4 = v3;
    pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::PcpPropertyIndex((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)v5);
    pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::Swap(v4 + 1, (pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)v5);
    sub_2168BBAAC(&v6, 0);
    uint64_t v7 = (void **)v5;
    sub_216BDCF18(&v7);
  }
}

void sub_216BDB57C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BDB590((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BDB590(uint64_t a1)
{
  sub_2168BBAAC((void ***)(a1 + 24), 0);
  uint64_t v3 = (void **)a1;
  sub_216BDCF18(&v3);
  return a1;
}

void sub_216BDB5D4(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*a2;
  sub_216BE2C20(a1, *a2);
  sub_216BE2C74(a1, v3);

  sub_216BE2D10(a1, (unsigned int *)v3);
}

void pxrInternal__aapl__pxrReserved__::PcpCache::_ForEachLayerStack(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_216BD4B58((uint64_t *)(a1 + 200));

  pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::ForEachLayerStack(v3, a2);
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpCache::_ForEachPrimIndex(uint64_t a1, uint64_t a2)
{
  unint64_t result = (unint64_t)sub_216BD4BE4((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 208));
  while (1)
  {
    unint64_t v4 = result;
    if (!result) {
      break;
    }
    if (*(void *)(result + 8))
    {
      (*(void (**)(void, unint64_t))(a2 + 8))(*(void *)a2, result + 8);
      unint64_t result = v4;
    }
    unint64_t result = *(void *)(result + 56);
    if (!result) {
      unint64_t result = sub_216BD50BC((uint64_t)&v4);
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpCache::_ComputePrimIndexesInParallel(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8, uint64_t a9)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v28 = a8;
  if (*(unsigned char *)(a1 + 96))
  {
    pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v47);
    sub_216BE2EA0((uint64_t)&v26, &v28, (char *)&a9);
    if (!*(void *)(a1 + 128))
    {
      pxrInternal__aapl__pxrReserved__::PcpCache::ComputeLayerStack(a1, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)(a1 + 16), a3, (uint64_t *)&v25);
      sub_216BBEEA4(&v25);
    }
    uint64_t v16 = *(uint64_t **)(a1 + 296);
    if (!v16)
    {
      BOOL v17 = operator new(0x258uLL);
      sub_216BC11A8((uint64_t *)&v40, (uint64_t *)(a1 + 128));
      sub_216BDCF9C((uint64_t)v17, a1, (uint64_t *)&v40);
      uint64_t v18 = *(void *)(a1 + 296);
      *(void *)(a1 + 296)  = v17;
      if (v18) {
        sub_216BE2F14(a1 + 296, v18);
      }
      uint64_t v19 = *((void *)&v40 + 1);
      if (*((void *)&v40 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v40 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
      uint64_t v16 = *(uint64_t **)(a1 + 296);
    }
    pxrInternal__aapl__pxrReserved__::PcpCache::GetPrimIndexInputs((pxrInternal__aapl__pxrReserved__::PcpCache *)a1, (uint64_t)v35);
    HIBYTE(v39)  = *(unsigned char *)(a1 + 96);
    v34[0]  = &unk_26C75BFB8;
    v34[1]  = a6;
    v34[2]  = a7;
    v34[3]  = v34;
    sub_216BDD980(v36, (uint64_t)v34);
    long long v40 = v35[0];
    long long v41 = v35[1];
    sub_216BDCE50((uint64_t)v42, (uint64_t)v36);
    uint64_t v43 = v36[4];
    if (SHIBYTE(v38) < 0)
    {
      sub_216778F24(&v44, (void *)__p, *((unint64_t *)&__p + 1));
    }
    else
    {
      long long v44 = __p;
      uint64_t v45 = v38;
    }
    __int16 v46 = v39;
    sub_216ABC260(v34);
    if (SHIBYTE(v38) < 0) {
      operator delete((void *)__p);
    }
    sub_216ABC260(v36);
    v29[0]  = v40;
    v29[1]  = v41;
    sub_216BDCE50((uint64_t)v30, (uint64_t)v42);
    v30[4]  = v43;
    if (SHIBYTE(v45) < 0)
    {
      sub_216778F24(&v31, (void *)v44, *((unint64_t *)&v44 + 1));
    }
    else
    {
      long long v31 = v44;
      uint64_t v32 = v45;
    }
    __int16 v33 = v46;
    sub_216BDBBC0((uint64_t)v16, a4, a5, (uint64_t)v29, a3, (uint64_t)v47, (uint64_t)v28, a9);
    if (SHIBYTE(v32) < 0) {
      operator delete((void *)v31);
    }
    uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216ABC260(v30);
    uint64_t v21 = *a2;
    uint64_t v22 = a2[1];
    if (*a2 != v22)
    {
      do
      {
        if (*(void *)v21 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v20))
        {
          uint64_t v23 = 0;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v21, v35);
          uint64_t v23 = pxrInternal__aapl__pxrReserved__::PcpCache::_ComputePrimIndexWithCompatibleInputs(a1, (unsigned int *)v35, (uint64_t)&v40, a3);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v35 + 1);
          sub_21697C414(v35);
        }
        uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216BDBF28(v16, (char *)v23, v21);
        uint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v21 + 8);
      }
      while (v21 != v22);
    }
    sub_216BDC068((uint64_t)v16);
    if (SHIBYTE(v45) < 0) {
      operator delete((void *)v44);
    }
    sub_216ABC260(v42);
    while (v27--)
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v26);
    pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v47);
  }
  else
  {
    *(void *)&long long v40 = "pcp/cache.cpp";
    *((void *)&v40 + 1)  = "_ComputePrimIndexesInParallel";
    *(void *)&long long v41 = 1630;
    *((void *)&v41 + 1)  = "void pxrInternal__aapl__pxrReserved__::PcpCache::_ComputePrimIndexesInParallel(const SdfPath"
                            "Vector &, PcpErrorVector *, _UntypedIndexingChildrenPredicate, _UntypedIndexingPayloadPredic"
                            "ate, const char *, const char *)";
    LOBYTE(v42[0])  = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Computing prim indexes in parallel only supported for USD caches.");
  }
}

void sub_216BDBAB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216ABC260(v2);
  sub_216BD7BA0(v3 - 224);
  sub_21684E6B8((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)(v3 - 120));
  _Unwind_Resume(a1);
}

void *sub_216BDBBC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a1 + 384)  = a2;
  *(void *)(a1 + 392)  = a3;
  long long v14 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 40sub_2168EBBB8(&a9, 0) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 416)  = v14;
  sub_216BDD980((void *)(a1 + 432), a4 + 32);
  *(void *)(a1 + 464)  = *(void *)(a4 + 64);
  unint64_t result = std::string::operator=((std::string *)(a1 + 472), (const std::string *)(a4 + 72));
  *(_WORD *)(a1 + 496)  = *(_WORD *)(a4 + 96);
  *(void *)(a1 + 424)  = a1 + 40;
  *(void *)(a1 + 504)  = a5;
  *(void *)(a1 + 52sub_2168EBBB8(&a9, 0) = a6;
  *(void *)(a1 + 528)  = a7;
  *(void *)(a1 + 536)  = a8;
  uint64_t v16 = *(void *)(a1 + 552);
  for (i = *(void *)(a1 + 544); v16 != i; unint64_t result = sub_216BDD908(a1 + 560, v16))
    v16 -= 16;
  *(void *)(a1 + 552)  = i;
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpCache::_ComputePrimIndexWithCompatibleInputs(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1 + 208;
  uint64_t v9 = sub_216BD4C38((void *)(a1 + 208), a2);
  if (!v9 || (uint64_t v10 = v9 + 1, !v9[1]))
  {
    if (!*(void *)(a1 + 128))
    {
      pxrInternal__aapl__pxrReserved__::PcpCache::ComputeLayerStack(a1, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)(a1 + 16), a4, (uint64_t *)&v28);
      sub_216BBEEA4(&v28);
    }
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v17);
    uint64_t v25 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v21 = 0;
    int v24 = 0;
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::PcpExpressionVariablesDependencyData(&v26);
    memset(v27, 0, sizeof(v27));
    sub_216BC11A8((uint64_t *)&v15, (uint64_t *)(a1 + 128));
    pxrInternal__aapl__pxrReserved__::PcpComputePrimIndex((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (uint64_t *)&v15, a3, (uint64_t *)&v17, 0);
    uint64_t v11 = v16;
    if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    sub_216BCC2B4((uint64_t *)a4, *(void **)(a4 + 8), v21, v22, (v22 - (char *)v21) >> 4);
    pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Add(*(void **)(a1 + 288), (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v17, v27, (pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *)&v25, &v26);
    int v12 = v24;
    if (v24 == 3)
    {
      sub_216BE0D70(a1 + 136, a2, a2);
      int v12 = v24;
    }
    if (v12 == 4) {
      sub_216BE10A4((void *)(a1 + 136), a2);
    }
    uint64_t v10 = (uint64_t *)sub_216BDC1B0(v8, a2);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::Swap(v10, (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v17);
    uint64_t v15 = (void **)v27;
    sub_216BC1290(&v15);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::~PcpExpressionVariablesDependencyData((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)&v26);
    uint64_t v13 = v25;
    uint64_t v25 = 0;
    if (v13) {
      sub_216BBECE0((uint64_t)&v25, v13);
    }
    uint64_t v15 = (void **)&v21;
    sub_216787968(&v15);
    sub_2168BBAAC(&v20, 0);
    if (__p)
    {
      uint64_t v19 = __p;
      operator delete(__p);
    }
    sub_216BDCEE8(&v17);
  }
  return v10;
}

void sub_216BDBE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216BDC2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216BDBF28(uint64_t *a1, char *a2, _DWORD *a3)
{
  if (!a2
    && *(void *)a3 != *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
  {
    uint64_t v10 = "pcp/cache.cpp";
    v11[0]  = "ComputeIndex";
    v11[1]  = 1396;
    void v11[2] = "void pxrInternal__aapl__pxrReserved__::PcpCache::_ParallelIndexer::ComputeIndex(const PcpPrimIndex *, const SdfPath &)";
    char v12 = 0;
    int v13 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v10, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v6, "parentIndex || path == SdfPath::AbsoluteRootPath()");
  }
  uint64_t v10 = a2;
  sub_216981010(v11, a3);
  sub_21698105C((_DWORD *)v11 + 1, a3 + 1);
  unint64_t v7 = a1[69];
  if (v7 >= a1[70])
  {
    uint64_t v8 = sub_216BDDC60(a1 + 68, (uint64_t)&v10);
  }
  else
  {
    *(void *)unint64_t v7 = v10;
    sub_21697D878((_DWORD *)(v7 + 8), v11);
    sub_21697D8B4((_DWORD *)(v7 + 12), (_DWORD *)v11 + 1);
    uint64_t v8 = v7 + 16;
  }
  a1[69]  = v8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v11 + 1);
  return sub_21697C414(v11);
}

void sub_216BDC050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216BDD948((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216BDC068(uint64_t a1)
{
  uint64_t v2 = a1;
  v3[0]  = (uint64_t (**)(void))&unk_26C75BEA0;
  v3[1]  = (uint64_t (**)(void))&v2;
  tbb::interface7::internal::isolate_within_arena(v3, 0);
  sub_216BDDF9C(a1, (pxrInternal__aapl__pxrReserved__ *)(a1 + 544), *(void *)(a1 + 552) - *(void *)(a1 + 544) > 0x3FF0uLL);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpCache::ComputePrimIndex(pxrInternal__aapl__pxrReserved__::PcpCache *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::PcpCache::GetPrimIndexInputs(a1, (uint64_t)v8);
  char v11 = *((unsigned char *)a1 + 96);
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::PcpCache::_ComputePrimIndexWithCompatibleInputs((uint64_t)a1, a2, (uint64_t)v8, a3);
  if (v10 < 0) {
    operator delete(v9[5]);
  }
  sub_216ABC260(v9);
  return v6;
}

void sub_216BDC194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_216BDC1B0(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)v8);
  sub_216981010(&v11, a2);
  sub_21698105C(&v12, a2 + 1);
  long long v4 = *(_OWORD *)v8;
  v8[0]  = 0;
  v8[1]  = 0;
  *(_OWORD *)long long __p = v4;
  long long v14 = v9;
  long long v9 = 0uLL;
  char v5 = v10;
  char v10 = 0;
  uint64_t v15 = v5;
  uint64_t v6 = sub_216BDF6E4(a1, &v11);
  sub_2168BBAAC(&v15, 0);
  if (__p[1])
  {
    *(void **)&long long v14 = __p[1];
    operator delete(__p[1]);
  }
  sub_216BDCEE8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  sub_2168BBAAC(&v10, 0);
  if (v8[1])
  {
    *(void **)&long long v9 = v8[1];
    operator delete(v8[1]);
  }
  sub_216BDCEE8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v8);
  return (char *)v6 + 8;
}

void sub_216BDC2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BDC2D0(uint64_t a1)
{
  char v5 = (void **)(a1 + 88);
  sub_216BC1290(&v5);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::~PcpExpressionVariablesDependencyData((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)(a1 + 80));
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72)  = 0;
  if (v2) {
    sub_216BBECE0(a1 + 72, v2);
  }
  char v5 = (void **)(a1 + 40);
  sub_216787968(&v5);
  sub_2168BBAAC((void ***)(a1 + 32), 0);
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16)  = v3;
    operator delete(v3);
  }
  return sub_216BDCEE8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1);
}

char *sub_216BDC394(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::PcpPropertyIndex((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)v6);
  sub_216BE35E4(&v8, a2, (const pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)v6);
  long long v4 = sub_216BE309C(a1, &v8);
  sub_2168BBAAC(&v11, 0);
  int v12 = (void **)&v10;
  sub_216BDCF18(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  sub_2168BBAAC(&v7, 0);
  int v12 = (void **)v6;
  sub_216BDCF18(&v12);
  return (char *)v4 + 8;
}

void sub_216BDC448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCache::PrintStatistics(pxrInternal__aapl__pxrReserved__::PcpCache *this)
{
  return pxrInternal__aapl__pxrReserved__::Pcp_PrintCacheStatistics(this, MEMORY[0x263F8C100]);
}

void sub_216BDC47C(uint64_t a1)
{
  v12[9]  = *MEMORY[0x263EF8340];
  uint64_t v1 = **(void **)(a1 + 8);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v10);
  uint64_t v8 = 0;
  uint64_t v9 = v11;
  uint64_t v2 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v8, 0x18uLL);
  *((unsigned char *)v2 - 11)  = 1;
  void *v2 = &unk_26C75BC40;
  v2[1]  = v1;
  v2[2]  = v12;
  (**(void (***)(void))*(v2 - 5))();
  uint64_t v8 = 0;
  uint64_t v9 = v11;
  uint64_t v3 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v8, 0x18uLL);
  *((unsigned char *)v3 - 11)  = 1;
  void *v3 = &unk_26C75BC88;
  v3[1]  = v1;
  uint64_t v3[2] = v12;
  (**(void (***)(void))*(v3 - 5))();
  uint64_t v8 = 0;
  uint64_t v9 = v11;
  long long v4 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v8, 0x18uLL);
  *((unsigned char *)v4 - 11)  = 1;
  void *v4 = &unk_26C75BCD0;
  v4[1]  = v1;
  v4[2]  = v12;
  (**(void (***)(void))*(v4 - 5))();
  uint64_t v8 = 0;
  uint64_t v9 = v11;
  char v5 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v8, 0x18uLL);
  *((unsigned char *)v5 - 11)  = 1;
  void *v5 = &unk_26C75BD18;
  v5[1]  = v1;
  uint64_t v5[2] = v12;
  (**(void (***)(void))*(v5 - 5))();
  uint64_t v8 = 0;
  uint64_t v9 = v11;
  uint64_t v6 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v8, 0x18uLL);
  *((unsigned char *)v6 - 11)  = 1;
  *uint64_t v6 = &unk_26C75BD60;
  v6[1]  = v1;
  _OWORD v6[2] = v12;
  (**(void (***)(void))*(v6 - 5))();
  uint64_t v8 = 0;
  uint64_t v9 = v11;
  unint64_t v7 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v8, 0x18uLL);
  *((unsigned char *)v7 - 11)  = 1;
  void *v7 = &unk_26C75BDA8;
  v7[1]  = v1;
  uint64_t v7[2] = v12;
  (**(void (***)(void))*(v7 - 5))();
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v10);
}

void sub_216BDC7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t sub_216BDC830(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216BDC8D4(*(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(a1 + 8));
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 16));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216BDC8C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BDC8D4(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  uint64_t v1 = *a1;
  *a1  = 0;
  unint64_t v3 = 0;
  sub_2168BD378((int)a1, v1);
  return sub_216ABB798(&v3);
}

void sub_216BDC910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BDC92C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216BDC8D4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(*(void *)(a1 + 8) + 8));
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 16));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216BDC9C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BDC9DC(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  uint64_t v2 = *(void *)(a1 + 8) + 136;
  memset(v8, 0, sizeof(v8));
  int v9 = 1065353216;
  sub_21698718C((uint64_t)v8, v2);
  sub_216BE0588((uint64_t)v8);
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v4 = v7;
  unint64_t v5 = atomic_load((unint64_t *)(v3 + 144));
  if (v4 < v5
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7, (atomic_ullong *)v3))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v7, *(void *)(a1 + 16));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  return 0;
}

void sub_216BDCA8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BDCAA8(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v13);
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = &v14;
  unint64_t v6 = *(void **)(v2 + 184);
  unint64_t v5 = (void *)(v2 + 184);
  unint64_t v4 = v6;
  uint64_t v14 = *(v5 - 1);
  v15[0]  = v6;
  uint64_t v7 = v5[1];
  void *v5 = 0;
  v5[1]  = 0;
  v15[1]  = v7;
  uint64_t v8 = v6 + 2;
  if (v7) {
    unint64_t v3 = v8;
  }
  uint64_t *v3 = (uint64_t)v15;
  *(v5 - 1)  = v5;
  sub_216BE0608((uint64_t)&v14, v4);
  unint64_t v9 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v10 = v13;
  unint64_t v11 = atomic_load((unint64_t *)(v9 + 144));
  if (v10 < v11
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v13, (atomic_ullong *)v9))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v13, *(void *)(a1 + 16));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v13);
  return 0;
}

void sub_216BDCB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216BDCB8C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  uint64_t v2 = *(void *)(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_VisitPathTableInParallel(*(pxrInternal__aapl__pxrReserved__ **)(v2 + 208), (uint64_t)(*(void *)(v2 + 216) - *(void *)(v2 + 208)) >> 3, (uint64_t)&v8, (void (*)(uint64_t))sub_216BDCC54);
  *(void *)(v2 + 232)  = 0;
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v4 = v7;
  unint64_t v5 = atomic_load((unint64_t *)(v3 + 144));
  if (v4 < v5
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7, (atomic_ullong *)v3))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v7, *(void *)(a1 + 16));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  return 0;
}

void sub_216BDCC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216BDCC54(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    do
    {
      uint64_t v4 = *(void *)(v3 + 48);
      sub_2168BBAAC((void ***)(v3 + 40), 0);
      unint64_t v5 = *(void **)(v3 + 16);
      if (v5)
      {
        *(void *)(v3 + 24)  = v5;
        operator delete(v5);
      }
      sub_216BDCEE8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v3 + 8));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v3 + 4));
      unint64_t v6 = sub_21697C414((_DWORD *)v3);
      operator delete(v6);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  *a2  = 0;
}

_DWORD *sub_216BDCCD0(uint64_t a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8);
  sub_2168BBAAC((void ***)(a1 + 40), 0);
  uint64_t v3 = *(void **)(a1 + 16);
  if (v3)
  {
    *(void *)(a1 + 24)  = v3;
    operator delete(v3);
  }
  sub_216BDCEE8(v2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

uint64_t sub_216BDCD40(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  uint64_t v2 = *(void *)(a1 + 8);
  long long v8 = *(_OWORD *)(v2 + 248);
  *(_OWORD *)(v2 + 248)  = 0u;
  uint64_t v9 = *(void *)(v2 + 264);
  *(void *)(v2 + 264)  = 0;
  long long v10 = *(_OWORD *)(v2 + 272);
  *(_OWORD *)(v2 + 272)  = 0u;
  sub_216BE069C((uint64_t *)&v8);
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v4 = v7;
  unint64_t v5 = atomic_load((unint64_t *)(v3 + 144));
  if (v4 < v5
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7, (atomic_ullong *)v3))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v7, *(void *)(a1 + 16));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  return 0;
}

void sub_216BDCDFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void *sub_216BDCE10(void *a1, uint64_t a2, char *a3)
{
  if (!*a1) {
    pxrInternal__aapl__pxrReserved__::PcpChanges::Apply((pxrInternal__aapl__pxrReserved__::PcpChanges *)(a1 + 1), a2, a3);
  }
  pxrInternal__aapl__pxrReserved__::PcpChanges::~PcpChanges((pxrInternal__aapl__pxrReserved__::PcpChanges *)(a1 + 1));
  return a1;
}

uint64_t sub_216BDCE50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24)  = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24)  = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24)  = 0;
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BDCEE8(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

void sub_216BDCF18(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v4 - 24));
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1]  = v2;
    operator delete(v5);
  }
}

uint64_t sub_216BDCF9C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *(void *)a1  = a2;
  *(void *)(a1 + 8)  = v5;
  *(void *)(a1 + 16)  = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
  }
  Resolver  = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)a1);
  *(void *)(a1 + 32)  = 0;
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 24)  = Resolver;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(a1 + 48));
  *(void *)(a1 + 488)  = 0;
  *(_OWORD *)(a1 + 472)  = 0u;
  *(_OWORD *)(a1 + 456)  = 0u;
  *(_OWORD *)(a1 + 384)  = 0u;
  *(_OWORD *)(a1 + 40sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 416)  = 0u;
  *(_WORD *)(a1 + 496)  = 1;
  *(unsigned char *)(a1 + 512)  = 0;
  *(void *)(a1 + 544)  = 0;
  *(void *)(a1 + 56sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 552)  = 0;
  *(void *)(a1 + 568)  = &unk_26C75BE60;
  long long v8 = (void *)tbb::internal::NFS_Allocate(1uLL, 704, 0, v7);
  *(void *)(a1 + 576)  = v8;
  bzero(v8, 0x2C0uLL);
  *(_OWORD *)(*(void *)(a1 + 576) + 256)  = xmmword_21747A920;
  *(void *)(a1 + 568)  = &unk_26C75BDF0;
  atomic_store(0, (unsigned __int8 *)(a1 + 592));
  return a1;
}

void sub_216BDD0B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BDD870((void ***)va);
  sub_216BD7BA0(v4);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher(v3);
  unint64_t v6 = *(atomic_uint **)(v2 + 16);
  if (v6)
  {
    if (atomic_fetch_add_explicit(v6 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v6 + 8))(v6);
    }
  }
  _Unwind_Resume(a1);
}

void sub_216BDD128(void *a1)
{
  uint64_t v1 = (void *)sub_216BDD200(a1);

  operator delete(v1);
}

uint64_t sub_216BDD150(void *a1)
{
  return (*(uint64_t (**)(void *, uint64_t))(*a1 + 32))(a1, 120 * *(void *)(a1[1] + 256) + 16);
}

uint64_t sub_216BDD184(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, 120 * *(void *)(a1[1] + 256) + 16);
}

uint64_t sub_216BDD1B8(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  uint64_t v4 = tbb::internal::NFS_Allocate((unint64_t)this, 1, 0, a4);
  if (!v4) {
    tbb::internal::throw_exception_v4(1);
  }
  return v4;
}

uint64_t sub_216BDD1F8(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

uint64_t sub_216BDD200(void *a1)
{
  *a1  = &unk_26C75BDF0;
  sub_216BDD260((uint64_t)a1);
  sub_2168D9E50((uint64_t)a1);

  return sub_216BDD2F4((uint64_t)a1, v2);
}

uint64_t sub_216BDD260(uint64_t a1)
{
  sub_216BDD340((uint64_t)v8);
  while (1)
  {
    uint64_t v2 = *(uint64_t **)(a1 + 8);
    uint64_t v3 = v2[16];
    __dmb(0xBu);
    uint64_t v4 = *v2;
    __dmb(0xBu);
    uint64_t v5 = v2[16];
    __dmb(0xBu);
    if (v3 == v5)
    {
      uint64_t v6 = v2[34];
      __dmb(0xBu);
      if (v3 == v6 + v4) {
        break;
      }
    }
    sub_216BDD484(a1, (uint64_t)v8);
  }
  return sub_216BDD7CC((uint64_t)v8);
}

void sub_216BDD2E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BDD7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BDD2F4(uint64_t a1, void *a2)
{
  *(void *)a1  = &unk_26C75BE60;
  tbb::internal::NFS_Free(*(tbb::internal **)(a1 + 8), a2);
  return a1;
}

uint64_t sub_216BDD340(uint64_t a1)
{
  *(void *)(a1 + 112)  = 0;
  *(_OWORD *)(a1 + 8sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 96)  = 0u;
  *(_OWORD *)(a1 + 48)  = 0u;
  *(_OWORD *)(a1 + 64)  = 0u;
  *(_OWORD *)(a1 + 16)  = 0u;
  *(_OWORD *)(a1 + 32)  = 0u;
  *(_OWORD *)a1  = 0u;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)(a1 + 8));
  *(void *)(a1 + 8sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 48)  = 0;
  *(void *)(a1 + 56)  = 0;
  *(void *)(a1 + 64)  = 0;
  *(_DWORD *)(a1 + 72)  = 0;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::PcpExpressionVariablesDependencyData((void *)(a1 + 88));
  *(void *)(a1 + 96)  = 0;
  *(void *)(a1 + 104)  = 0;
  *(void *)(a1 + 112)  = 0;
  return a1;
}

void sub_216BDD3B8(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;
  uint64_t v7 = *v5;
  uint64_t *v5 = 0;
  if (v7) {
    sub_216BBECE0((uint64_t)v5, v7);
  }
  sub_217324B00(v4, (uint64_t)v1, v2);
  uint64_t v8 = *v1;
  uint64_t *v1 = 0;
  if (v8) {
    sub_216BDD408((uint64_t)v1, v8);
  }
  _Unwind_Resume(a1);
}

void sub_216BDD408(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a2 + 8);
    sub_2168BBAAC((void ***)(a2 + 40), 0);
    uint64_t v4 = *(void **)(a2 + 16);
    if (v4)
    {
      *(void *)(a2 + 24)  = v4;
      operator delete(v4);
    }
    sub_216BDCEE8(v3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 4));
    uint64_t v5 = sub_21697C414((_DWORD *)a2);
    operator delete(v5);
  }
}

BOOL sub_216BDD484(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(atomic_ullong **)(a1 + 8);
  while (1)
  {
    unint64_t v5 = *v4;
    __dmb(0xBu);
    atomic_ullong v6 = v4[16];
    __dmb(0xBu);
    uint64_t v7 = v6 - v5;
    BOOL v8 = v7 > 0;
LABEL_3:
    if (v7 < 1) {
      return 0;
    }
    while (1)
    {
      unint64_t v9 = v5;
      atomic_compare_exchange_strong(v4, &v9, v5 + 1);
      if (v9 == v5) {
        break;
      }
      add_explicit  = atomic_fetch_add_explicit(v4, 0, memory_order_relaxed);
      if (add_explicit != v5)
      {
        atomic_ullong v11 = v4[16];
        __dmb(0xBu);
        uint64_t v7 = v11 - add_explicit;
        unint64_t v5 = add_explicit;
        goto LABEL_3;
      }
    }
    if (sub_216BDD544(&v4[5 * ((3 * v5) & 7) + 48], a2, v5, a1)) {
      return v8;
    }
  }
}

BOOL sub_216BDD544(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8 = a3 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = a1[1];
  __dmb(0xBu);
  if (v9 != (a3 & 0xFFFFFFFFFFFFFFF8))
  {
    while (1)
    {
      uint64_t v12 = a1[1];
      __dmb(0xBu);
      if (v12 == v8) {
        break;
      }
      sched_yield();
    }
  }
  uint64_t v10 = a1[3];
  __dmb(0xBu);
  if (v10 == v8)
  {
    while (1)
    {
      uint64_t v11 = a1[3];
      __dmb(0xBu);
      if (v11 != v8) {
        break;
      }
      sched_yield();
    }
  }
  uint64_t v13 = *a1;
  __dmb(0xBu);
  uint64_t v14 = *(void *)(a4 + 8);
  uint64_t v15 = *(void *)(v14 + 256) - 1;
  uint64_t v16 = v15 & (a3 >> 3);
  if (v16 == v15) {
    uint64_t v17 = v13;
  }
  else {
    uint64_t v17 = 0;
  }
  v20[0]  = v8 + 8;
  v20[1]  = (uint64_t)a1;
  _OWORD v20[2] = v17;
  v20[3]  = a4;
  uint64_t v18 = *(void *)(v13 + 8) & (1 << v16);
  if (v18) {
    sub_216BDD660((uint64_t)a1, a2, v13, v16);
  }
  else {
    atomic_fetch_add((atomic_ullong *volatile)(v14 + 272), 0xFFFFFFFFFFFFFFFFLL);
  }
  sub_2168DAB04(v20);
  return v18 != 0;
}

void sub_216BDD64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216BDD660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (uint64_t *)(a3 + 120 * a4 + 16);
  sub_216BDD6BC(a2, v4);

  return sub_216BDD7CC((uint64_t)v4);
}

void sub_216BDD6A8(_Unwind_Exception *a1)
{
  sub_216BDD7CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216BDD6BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2  = 0;
  uint64_t v5 = *(void *)a1;
  *(void *)a1  = v4;
  if (v5) {
    sub_216BDD408(a1, v5);
  }
  sub_216BDD770(a1 + 8, (uint64_t)(a2 + 1));
  sub_2167ADF8C((uint64_t *)(a1 + 48));
  *(_OWORD *)(a1 + 48)  = *((_OWORD *)a2 + 3);
  *(void *)(a1 + 64)  = a2[8];
  a2[7]  = 0;
  a2[8]  = 0;
  a2[6]  = 0;
  *(_DWORD *)(a1 + 72)  = *((_DWORD *)a2 + 18);
  uint64_t v6 = *(void *)(a1 + 80);
  *(void *)(a1 + 8sub_2168EBBB8(&a9, 0) = a2[10];
  a2[10]  = v6;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::operator=((uint64_t *)(a1 + 88), a2 + 11);
  sub_216BBF604((void **)(a1 + 96));
  *(_OWORD *)(a1 + 96)  = *((_OWORD *)a2 + 6);
  *(void *)(a1 + 112)  = a2[14];
  a2[12]  = 0;
  a2[13]  = 0;
  a2[14]  = 0;
  return a1;
}

uint64_t sub_216BDD770(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1;
  *(void *)a1  = *(void *)a2;
  *(void *)a2  = 0;
  sub_2168BD378(a1, v4);
  sub_216B08220(a1 + 8, (__n128 *)(a2 + 8));
  uint64_t v5 = *(void ***)(a2 + 32);
  *(void *)(a2 + 32)  = 0;
  sub_2168BBAAC((void ***)(a1 + 32), v5);
  return a1;
}

uint64_t sub_216BDD7CC(uint64_t a1)
{
  uint64_t v6 = (void **)(a1 + 96);
  sub_216BC1290(&v6);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::~PcpExpressionVariablesDependencyData((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)(a1 + 88));
  uint64_t v2 = *(void *)(a1 + 80);
  *(void *)(a1 + 8sub_2168EBBB8(&a9, 0) = 0;
  if (v2) {
    sub_216BBECE0(a1 + 80, v2);
  }
  uint64_t v6 = (void **)(a1 + 48);
  sub_216787968(&v6);
  sub_2168BBAAC((void ***)(a1 + 40), 0);
  uint64_t v3 = *(void **)(a1 + 16);
  if (v3)
  {
    *(void *)(a1 + 24)  = v3;
    operator delete(v3);
  }
  sub_216BDCEE8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8));
  uint64_t v4 = *(void *)a1;
  *(void *)a1  = 0;
  if (v4) {
    sub_216BDD408(a1, v4);
  }
  return a1;
}

void sub_216BDD870(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        sub_216BDD908((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1]  = v2;
    operator delete(v5);
  }
}

_DWORD *sub_216BDD908(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 12));

  return sub_21697C414((_DWORD *)(a2 + 8));
}

uint64_t sub_216BDD948(uint64_t a1)
{
  return a1;
}

void *sub_216BDD980(void *a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  sub_216BDCE50((uint64_t)v4, a2);
  sub_216BDD9F4(v4, a1);
  sub_216ABC260(v4);
  return a1;
}

void *sub_216BDD9F4(void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3]  = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        unint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        unint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3]  = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      unint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3]  = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3]  = v5;
      a2[3]  = v4;
    }
  }
  return result;
}

void sub_216BDDC54(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_21675DB74(a1);
}

uint64_t sub_216BDDC60(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216787EE0(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v14 = v10;
  uint64_t v15 = &v10[16 * v4];
  uint64_t v17 = &v10[16 * v9];
  uint64_t v11 = v15;
  *(void *)uint64_t v15 = *(void *)a2;
  sub_21697D878((_DWORD *)v11 + 2, (_DWORD *)(a2 + 8));
  sub_21697D8B4((_DWORD *)v11 + 3, (_DWORD *)(a2 + 12));
  uint64_t v16 = v11 + 16;
  sub_216BDDD5C(a1, &v14);
  uint64_t v12 = a1[1];
  sub_216BDDF20(&v14);
  return v12;
}

void sub_216BDDD48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BDDF20((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BDDD5C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216BDDDD4((uint64_t)(a1 + 2), a1[1], (_DWORD *)a1[1], *a1, (_DWORD *)*a1, a2[1], a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

uint64_t sub_216BDDDD4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1)  = a7;
  long long v15 = v16;
  v13[0]  = a1;
  v13[1]  = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    unint64_t v9 = a3 - 2;
    do
    {
      uint64_t v10 = v9 - 2;
      *(void *)(v7 - 16)  = *((void *)v9 - 1);
      sub_21697D878((_DWORD *)(v7 - 8), v9);
      sub_21697D8B4((_DWORD *)(v7 - 4), v9 + 1);
      uint64_t v7 = *((void *)&v16 + 1) - 16;
      *((void *)&v16 + 1) -= 16;
      v9 -= 4;
    }
    while (v10 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216BDDE94((uint64_t)v13);
  return v11;
}

uint64_t sub_216BDDE94(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216BDDECC((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216BDDECC(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_216BDD908(v3, v1);
      v1 += 16;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_216BDDF20(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

_DWORD *sub_216BDDF54(_DWORD *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2)  = v1 - 16;
      uint64_t result = sub_216BDD908(v4, v1 - 16);
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

void sub_216BDDF9C(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, int a3)
{
  if (a3)
  {
    sub_216BE01C4(a2);
  }
  else
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v4 = *((void *)a2 + 1);
    if (v4 != *(void *)a2)
    {
      do
      {
        v4 -= 16;
        sub_216BDD908((uint64_t)a2 + 16, v4);
      }
      while (v4 != v5);
    }
    *((void *)a2 + 1)  = v5;
  }
}

void sub_216BDE01C(uint64_t a1)
{
}

void sub_216BDE028(uint64_t *a1)
{
  uint64_t v1 = *a1;
  pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::ConcurrentPopulationContext::ConcurrentPopulationContext((pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::ConcurrentPopulationContext *)v12, *(pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **)(*(void *)*a1 + 288));
  for (long long i = *(_OWORD *)(v1 + 544); (void)i != *((void *)&i + 1); sub_216BDEA44(&i))
  {
    *(void *)&long long v10 = sub_216BDE228;
    *((void *)&v10 + 1)  = 0;
    uint64_t v9 = v1;
    uint64_t v4 = (uint64_t *)*sub_216BDE9C8(&i, v2, v3);
    uint64_t v7 = (_DWORD *)(*sub_216BDE9C8(&i, v5, v6) + 8);
    char v8 = 1;
    sub_216BDE118(v1 + 48, &v10, &v9, v4, v7, &v8);
  }
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(v1 + 48));
  sub_216BDEAC4((atomic_ullong *)v1);
  pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::ConcurrentPopulationContext::~ConcurrentPopulationContext((pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::ConcurrentPopulationContext *)v12);
}

void sub_216BDE0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::ConcurrentPopulationContext::~ConcurrentPopulationContext((pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::ConcurrentPopulationContext *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216BDE118(uint64_t a1, long long *a2, uint64_t *a3, uint64_t *a4, _DWORD *a5, char *a6)
{
  long long v15 = *a2;
  uint64_t v9 = *a4;
  uint64_t v16 = *a3;
  uint64_t v17 = v9;
  sub_216981010(&v18, a5);
  sub_21698105C(&v19, a5 + 1);
  char v20 = *a6;
  uint64_t v10 = *(void *)(a1 + 256);
  v21[0]  = 0;
  v21[1]  = v10;
  uint64_t v11 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v21, 0x40uLL);
  uint64_t v12 = *(void (****)(void, uint64_t, uint64_t, uint64_t))(sub_216BDEB70(v11, (uint64_t)&v15, a1 + 264) - 40);
  (**v12)(v12, v11, v11 - 8, v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  return sub_21697C414(&v18);
}

void sub_216BDE214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216BDE228(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, int a4)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  sub_216BE2EA0((uint64_t)&v51, (char **)(a1 + 528), (char *)(a1 + 536));
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v61, *(const pxrInternal__aapl__pxrReserved__::ArResolverScopedCache **)(a1 + 520));
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a3)) {
    goto LABEL_55;
  }
  if (!a4)
  {
    BOOL v32 = 0;
LABEL_8:
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v39);
    uint64_t v48 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    long long v44 = 0;
    int v47 = 0;
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::PcpExpressionVariablesDependencyData(&v49);
    memset(v50, 0, sizeof(v50));
    __int16 v33 = 0;
    long long v10 = *(_OWORD *)(a1 + 416);
    long long v54 = *(_OWORD *)(a1 + 400);
    long long v55 = v10;
    sub_216BDCE50((uint64_t)v56, a1 + 432);
    uint64_t v57 = *(void *)(a1 + 464);
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)&v58;
    if (*(char *)(a1 + 495) < 0)
    {
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216778F24(&v58, *(void **)(a1 + 472), *(void *)(a1 + 480));
    }
    else
    {
      long long v58 = *(_OWORD *)(a1 + 472);
      uint64_t v59 = *(void *)(a1 + 488);
    }
    __int16 v60 = *(_WORD *)(a1 + 496);
    uint64_t v57 = a2;
    if (!a2 && *(void *)a3 != *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v11))
    {
      uint64_t v36 = (void **)"pcp/cache.cpp";
      v37[0]  = "_ComputeIndex";
      v37[1]  = 1467;
      v37[2]  = "void pxrInternal__aapl__pxrReserved__::PcpCache::_ParallelIndexer::_ComputeIndex(const PcpPrimIndex *, SdfPath, BOOL)";
      char v38 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v36, "parentIndex || path == SdfPath::AbsoluteRootPath()", 0);
    }
    pxrInternal__aapl__pxrReserved__::PcpComputePrimIndex(a3, (uint64_t *)(a1 + 8), (uint64_t)&v54, (uint64_t *)&v39, *(uint64_t **)(a1 + 24));
    if (v44 != (uint64_t *)v45)
    {
      sub_21685036C((uint64_t)&v36, a1 + 512);
      sub_216BCC2B4(*(uint64_t **)(a1 + 504), *(void **)(*(void *)(a1 + 504) + 8), v44, v45, (v45 - (char *)v44) >> 4);
      uint64_t v12 = v36;
      if (v36)
      {
        __dmb(0xBu);
        *(unsigned char *)uint64_t v12 = 0;
      }
    }
    int v13 = v47;
    if ((v47 - 3) <= 1)
    {
      LOBYTE(v37[0])  = 1;
      uint64_t v36 = (void **)(a1 + 40);
      tbb::spin_rw_mutex_v3::internal_acquire_writer((atomic_ullong *)(a1 + 40));
      char v14 = (void *)(*(void *)a1 + 136);
      if (v13 == 3) {
        sub_216BE0D70((uint64_t)v14, (unsigned int *)a3, a3);
      }
      else {
        sub_216BE10A4(v14, (unsigned int *)a3);
      }
      sub_21685C048(&v36);
    }
    sub_216BDEE24(a3, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v39, &v36);
    long long v15 = (uint64_t *)v36;
    uint64_t v36 = 0;
    uint64_t v16 = v33;
    __int16 v33 = v15;
    if (v16)
    {
      sub_216BDD408((uint64_t)&v33, (uint64_t)v16);
      uint64_t v17 = v36;
      uint64_t v36 = 0;
      if (v17) {
        sub_216BDD408((uint64_t)&v36, (uint64_t)v17);
      }
    }
    if (v32)
    {
      sub_216BDF8D0(&v36, (uint64_t *)&v33, (uint64_t)&v39);
      uint64_t v9 = (uint64_t *)sub_216BDEEC0((atomic_ullong *)a1, (uint64_t)&v36, 1);
      sub_216BDD7CC((uint64_t)&v36);
    }
    else
    {
      int v18 = v33;
      sub_216BDF8D0(&v36, (uint64_t *)&v33, (uint64_t)&v39);
      uint64_t v19 = *(void *)(a1 + 576);
      add  = atomic_fetch_add((atomic_ullong *volatile)(v19 + 128), 1uLL);
      sub_216BDFA38((void *)(v19 + 40 * ((3 * (_BYTE)add) & 7) + 384), (uint64_t)&v36, add, (uint64_t *)(a1 + 568), (uint64_t (*)(void *, uint64_t))sub_216BDFA34);
      uint64_t v9 = v18 + 1;
      sub_216BDD7CC((uint64_t)&v36);
      if ((*(unsigned char *)(a1 + 592) & 1) == 0)
      {
        char v21 = 0;
        atomic_compare_exchange_strong((atomic_uchar *volatile)(a1 + 592), (unsigned __int8 *)&v21, 1u);
        if (!v21)
        {
          sub_216BDEAC4((atomic_ullong *)a1);
          atomic_store(0, (unsigned __int8 *)(a1 + 592));
        }
      }
    }
    if (SHIBYTE(v59) < 0) {
      operator delete((void *)v58);
    }
    sub_216ABC260(v56);
    uint64_t v22 = v33;
    __int16 v33 = 0;
    if (v22) {
      sub_216BDD408((uint64_t)&v33, (uint64_t)v22);
    }
    uint64_t v36 = (void **)v50;
    sub_216BC1290(&v36);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::~PcpExpressionVariablesDependencyData((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)&v49);
    uint64_t v23 = v48;
    uint64_t v48 = 0;
    if (v23) {
      sub_216BBECE0((uint64_t)&v48, v23);
    }
    uint64_t v36 = (void **)&v44;
    sub_216787968(&v36);
    sub_2168BBAAC(&v43, 0);
    if (__p)
    {
      long long v41 = __p;
      operator delete(__p);
    }
    sub_216BDCEE8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v39);
    goto LABEL_39;
  }
  LOBYTE(v37[0])  = 0;
  uint64_t v36 = (void **)(a1 + 32);
  tbb::spin_rw_mutex_v3::internal_acquire_reader((atomic_ullong *)(a1 + 32));
  char v8 = sub_216BD4C38((void *)(*(void *)a1 + 208), (unsigned int *)a3);
  BOOL v32 = v8 != 0;
  if (!v8 || (uint64_t v9 = v8 + 1, !v8[1]))
  {
    sub_21685C048(&v36);
    goto LABEL_8;
  }
  sub_21685C048(&v36);
  LOBYTE(v32)  = 1;
LABEL_39:
  long long v54 = 0uLL;
  *(void *)&long long v55 = 0;
  if ((*(unsigned int (**)(void, uint64_t *, long long *))(a1 + 392))(*(void *)(a1 + 384), v9, &v54))
  {
    __int16 v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    sub_216BDFC40((uint64_t)&v36, 0, 0.0, 0.5);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::ComputePrimChildNames(v9, &v33, (uint64_t *)&v36);
    uint64_t v25 = v33;
    for (long long i = v34; v25 != i; ++v25)
    {
      uint64_t v26 = (void *)v54;
      if ((void)v54 != *((void *)&v54 + 1))
      {
        while ((*v26 & 0xFFFFFFFFFFFFFFF8) != (*v25 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v26 == *((void **)&v54 + 1))
          {
            uint64_t v26 = (void *)*((void *)&v54 + 1);
            break;
          }
        }
        if (v26 == *((void **)&v54 + 1)) {
          continue;
        }
      }
      __int16 v39 = (void **)a1;
      long long __p = v9;
      sub_216981010(&v41, a3);
      sub_21698105C((_DWORD *)&v41 + 1, (_DWORD *)a3 + 1);
      uint64_t v27 = *v25;
      uint64_t v42 = v27;
      if ((v27 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v42 &= 0xFFFFFFFFFFFFFFF8;
      }
      LOBYTE(v43)  = v32;
      uint64_t v28 = *(void *)(a1 + 304);
      v53[0]  = 0;
      v53[1]  = v28;
      uint64_t v29 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v53, 0x38uLL);
      uint64_t v30 = sub_216BDFF3C(v29, (uint64_t)&v39, a1 + 312);
      (***(void (****)(void, uint64_t, uint64_t))(v30 - 40))(*(void *)(v30 - 40), v29, v29 - 8);
      if ((v42 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v41 + 1);
      sub_21697C414(&v41);
    }
    __int16 v39 = (void **)v37;
    sub_216BDFE6C(&v39);
    uint64_t v36 = (void **)&v33;
    sub_216889A04(&v36);
  }
  uint64_t v36 = (void **)&v54;
  sub_216889A04(&v36);
LABEL_55:
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v61);
  while (v52--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v51);
}

void sub_216BDE84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  sub_216BD7BA0(v42 - 224);
  uint64_t v44 = a10;
  a10  = 0;
  if (v44) {
    sub_216BDD408((uint64_t)&a10, v44);
  }
  sub_216BDC2D0((uint64_t)&a28);
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)(v42 - 120));
  sub_21684E6B8((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void *sub_216BDE9C8(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0]  = "tf/iterator.h";
    v3[1]  = "operator->";
    uint64_t v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::pair<const pxrInternal__aapl__pxrRes"
            "erved__::PcpPrimIndex *, pxrInternal__aapl__pxrReserved__::SdfPath>>>::operator->() [T  = std::vector<std::pa"
            "ir<const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *, pxrInternal__aapl__pxrReserved__::SdfPath>>, Reverse  = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216BDEA44(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0]  = "tf/iterator.h";
    v3[1]  = "operator++";
    uint64_t v3[2] = 250;
    void v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::pair<const pxrInternal"
            "__aapl__pxrReserved__::PcpPrimIndex *, pxrInternal__aapl__pxrReserved__::SdfPath>>>::operator++() [T  = std::"
            "vector<std::pair<const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *, pxrInternal__aapl__pxrReserved__::S"
            "dfPath>>, Reverse  = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

uint64_t sub_216BDEAC4(atomic_ullong *a1)
{
  sub_216BDD340((uint64_t)v3);
  while (sub_216BDD484((uint64_t)(a1 + 71), (uint64_t)v3))
    sub_216BDEEC0(a1, (uint64_t)v3, 0);
  return sub_216BDD7CC((uint64_t)v3);
}

void sub_216BDEB24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BDD7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BDEB38(uint64_t a1)
{
  return a1;
}

uint64_t sub_216BDEB70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 - 11)  = 1;
  *(void *)a1  = &unk_26C75BEE0;
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)a2;
  *(void *)(a1 + 24)  = *(void *)(a2 + 16);
  *(void *)(a1 + 32)  = *(void *)(a2 + 24);
  sub_21697D878((_DWORD *)(a1 + 40), (_DWORD *)(a2 + 32));
  sub_21697D8B4((_DWORD *)(a1 + 44), (_DWORD *)(a2 + 36));
  *(unsigned char *)(a1 + 48)  = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 56)  = a3;
  return a1;
}

uint64_t sub_216BDEC04(uint64_t a1)
{
  *(void *)a1  = &unk_26C75BEE0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 44));
  sub_21697C414((_DWORD *)(a1 + 40));
  return a1;
}

void sub_216BDEC54(_DWORD *a1)
{
  *(void *)a1  = &unk_26C75BEE0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 11);
  sub_21697C414(a1 + 10);

  operator delete(a1);
}

uint64_t sub_216BDECB4(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216BDED60(a1 + 8, (uint64_t *)(a1 + 24));
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 56));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216BDED4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD *sub_216BDED60(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v3 = a2 + 2;
  unint64_t v6 = *(void (**)(void *, uint64_t, int *, void))a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(v4 + (v5 >> 1));
  if (v5) {
    unint64_t v6 = *(void (**)(void *, uint64_t, int *, void))(*v7 + v6);
  }
  uint64_t v8 = a2[1];
  sub_216981010(&v10, v3);
  sub_21698105C(&v11, (_DWORD *)a2 + 5);
  v6(v7, v8, &v10, *((unsigned __int8 *)a2 + 24));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  return sub_21697C414(&v10);
}

void sub_216BDEE04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216BDEE24@<X0>(_DWORD *a1@<X0>, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2@<X1>, void *a3@<X8>)
{
  sub_216BDF174(&v5, a1, a2);
  sub_216BDF0BC((uint64_t)&v5, a3);
  sub_2168BBAAC(&v10, 0);
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
  sub_216BDCEE8(&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  return sub_21697C414(&v5);
}

void sub_216BDEEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

pxrInternal__aapl__pxrReserved__::PcpPrimIndex *sub_216BDEEC0(atomic_ullong *a1, uint64_t a2, int a3)
{
  char v24 = 1;
  uint64_t v23 = a1 + 4;
  tbb::spin_rw_mutex_v3::internal_acquire_writer(a1 + 4);
  int v6 = sub_216BDF1D8(*a1 + 208, (unsigned int **)a2);
  uint64_t v7 = v6;
  if (!v8)
  {
    if (!a3 || *((void *)v6 + 1))
    {
      v21[0]  = "pcp/cache.cpp";
      v21[1]  = "_PublishOneOutput";
      v21[2]  = 1569;
      void v21[3] = "const PcpPrimIndex *pxrInternal__aapl__pxrReserved__::PcpCache::_ParallelIndexer::_PublishOneOutput(std::"
               "pair<_PrimIndexCache::NodeHandle, PcpPrimIndexOutputs> &&, BOOL)";
      char v22 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(v6, (uint64_t)__p);
      if (v20 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      int v18 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"PrimIndex <%s> already exists in cache", v15, v16, v17);
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v21, "allowInvalid && !iresult.first->second.IsValid()", v18);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_216BDD770((uint64_t)v7 + 8, *(void *)a2 + 8);
  }
  uint64_t v9 = v23;
  uint64_t v23 = 0;
  if (v24)
  {
LABEL_6:
    atomic_ullong v10 = *v9;
    unint64_t v11 = *v9 & 0xFFFFFFFFFFFFFFFCLL;
    while (1)
    {
      atomic_ullong v12 = v10;
      atomic_compare_exchange_strong(v9, (unint64_t *)&v12, v11);
      if (v12 == v10) {
        break;
      }
      if (atomic_fetch_add_explicit(v9, 0, memory_order_relaxed) != v10)
      {
        sched_yield();
        goto LABEL_6;
      }
    }
  }
  else
  {
    atomic_fetch_add(v9, 0xFFFFFFFFFFFFFFFCLL);
  }
  int v13 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 8);
  pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::Add(*(void **)(*a1 + 288), v13, (uint64_t *)(a2 + 96), (pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *)(a2 + 80), (uint64_t *)(a2 + 88));
  sub_21685C048(&v23);
  return v13;
}

void sub_216BDF034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_21685C048((void *)(v16 - 48));
  _Unwind_Resume(a1);
}

uint64_t sub_216BDF06C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  return a1;
}

void *sub_216BDF0BC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2  = 0;
  uint64_t v4 = operator new(0x48uLL);
  uint64_t result = (void *)sub_216BDF108((uint64_t)v4, a1);
  result[6]  = 0;
  result[7]  = 0;
  result[8]  = 0;
  *a2  = result;
  return result;
}

void sub_216BDF100(_Unwind_Exception *a1)
{
  void *v1 = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_216BDF108(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21697D878((_DWORD *)a1, (_DWORD *)a2);
  sub_21697D8B4(v4 + 1, (_DWORD *)(a2 + 4));
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a2 + 8)  = 0;
  *(void *)(a1 + 32)  = 0;
  *(_OWORD *)(a1 + 16)  = 0u;
  *(_OWORD *)(a1 + 16)  = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(_OWORD *)(a2 + 16)  = 0u;
  *(_OWORD *)(a2 + 32)  = 0u;
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = v5;
  return a1;
}

_DWORD *sub_216BDF174(_DWORD *a1, _DWORD *a2, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a3)
{
  int v6 = sub_216981010(a1, a2);
  sub_21698105C(v6 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)(a1 + 2), a3);
  return a1;
}

void sub_216BDF1C4(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfPath *sub_216BDF1D8(uint64_t a1, unsigned int **a2)
{
  unint64_t v3 = *a2;
  uint64_t v7 = a2;
  uint64_t result = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216BDF3A4(a1, v3, (uint64_t)&v7);
  v6[0]  = result;
  v6[1]  = v5;
  if ((_BYTE)v5)
  {
    sub_216BDF230(a1, v6);
    return v6[0];
  }
  return result;
}

_DWORD *sub_216BDF230(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  unint64_t v3 = *a2;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(*a2, &v18);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v18))
  {
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)v10);
    sub_216981010(&v13, &v18);
    sub_21698105C(&v14, &v19);
    long long v4 = *(_OWORD *)v10;
    v10[0]  = 0;
    v10[1]  = 0;
    *(_OWORD *)long long __p = v4;
    long long v16 = v11;
    long long v11 = 0uLL;
    uint64_t v5 = v12;
    atomic_ullong v12 = 0;
    uint64_t v17 = v5;
    uint64_t v6 = sub_216BDF6E4(a1, &v13);
    sub_2168BBAAC(&v17, 0);
    if (__p[1])
    {
      *(void **)&long long v16 = __p[1];
      operator delete(__p[1]);
    }
    sub_216BDCEE8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
    sub_21697C414(&v13);
    sub_2168BBAAC(&v12, 0);
    if (v10[1])
    {
      *(void **)&long long v11 = v10[1];
      operator delete(v10[1]);
    }
    sub_216BDCEE8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v10);
    uint64_t v7 = *(void *)(v6 + 56);
    if (v7) {
      uint64_t v8 = v7 | 1;
    }
    else {
      uint64_t v8 = v6;
    }
    *((void *)v3 + 8)  = v8;
    *(void *)(v6 + 56)  = v3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  return sub_21697C414(&v18);
}

void sub_216BDF370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_216BDCCD0((uint64_t)&a14);
  sub_216BDB478((uint64_t)&a9);
  sub_21697B754((_DWORD *)(v14 - 56));
  _Unwind_Resume(a1);
}

void *sub_216BDF3A4(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6)
  {
    sub_216BDF4B4((void **)a1);
    uint64_t v6 = *(void *)(a1 + 32);
  }
  uint64_t v7 = (void *)(*(void *)a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & v6));
  uint64_t v8 = (void *)*v7;
  if (*v7)
  {
    uint64_t result = (void *)*v7;
    while (*result != *(void *)a2)
    {
      uint64_t result = (void *)result[6];
      if (!result) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    unint64_t v10 = *(void *)(a1 + 24);
    if (v10 > (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3)
    {
      sub_216BDF4B4((void **)a1);
      unint64_t v10 = *(void *)(a1 + 24);
      uint64_t v7 = (void *)(*(void *)a1
                    + 8
                    * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & *(void *)(a1 + 32)));
      uint64_t v8 = (void *)*v7;
    }
    long long v11 = *(void ***)a3;
    *(void *)(**(void **)a3 + 48)  = v8;
    uint64_t result = *v11;
    pxrInternal__aapl__pxrReserved__::SdfPath *v11 = 0;
    void *v7 = result;
    *(void *)(a1 + 24)  = v10 + 1;
  }
  return result;
}

void sub_216BDF4B4(void **a1)
{
  sub_216851EE4((uint64_t)&v21, "Sdf", "SdfPathTable::_Grow");
  unsigned __int8 v3 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v3)
  {
    long long v4 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("void pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::PcpPrimIndex>::_Grow() [MappedType = pxrInternal__aapl__pxrReserved__::PcpPrimIndex]", 0, v2);
    BOOL v5 = v4 != 0;
  }
  else
  {
    long long v4 = 0;
    BOOL v5 = 0;
  }
  int v19 = v4;
  unsigned int v20 = v5;
  unint64_t v6 = (2 * (void)a1[4]) | 1;
  if (v6 <= 7) {
    unint64_t v6 = 7;
  }
  a1[4]  = (void *)v6;
  sub_216BDF66C(&v17, v6 + 1);
  uint64_t v7 = a1[1];
  if (v7 != *a1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (v7 - (unsigned char *)*a1) >> 3;
    do
    {
      unint64_t v10 = (unsigned int *)*((void *)*a1 + v8);
      if (v10)
      {
        unint64_t v11 = (unint64_t)a1[4];
        do
        {
          atomic_ullong v12 = (unsigned int *)*((void *)v10 + 6);
          unint64_t v13 = bswap64(0x9E3779B97F4A7C55* (v10[1]+ ((v10[1]+ (unint64_t)*v10+ (v10[1] + (unint64_t)*v10) * (v10[1] + (unint64_t)*v10)) >> 1))) & v11;
          uint64_t v14 = v17;
          *((void *)v10 + 6)  = *(void *)(v17 + 8 * v13);
          *(void *)(v14 + 8 * v13)  = v10;
          unint64_t v10 = v12;
        }
        while (v12);
      }
      ++v8;
    }
    while (v8 != v9);
    uint64_t v7 = *a1;
  }
  *(_OWORD *)a1  = v17;
  long long v15 = a1[2];
  a1[2]  = v18;
  *(void *)&long long v17 = v7;
  int v18 = v15;
  if (v7)
  {
    *((void *)&v17 + 1)  = v7;
    operator delete(v7);
  }
  unsigned int v20 = v5 - 1;
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v4);
    unsigned int v20 = v5 | 0xFFFFFFFE;
  }
  while (v22--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v21);
}

void sub_216BDF640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_21684E6B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216BDF66C(void *a1, unint64_t a2)
{
  *a1  = 0;
  a1[1]  = 0;
  a1[2]  = 0;
  if (a2)
  {
    sub_21677CACC(a1, a2);
    long long v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1]  = &v4[8 * a2];
  }
  return a1;
}

void sub_216BDF6C8(_Unwind_Exception *exception_object)
{
  unsigned __int8 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8)  = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::SdfPath *sub_216BDF6E4(uint64_t a1, _DWORD *a2)
{
  unint64_t v6 = a2;
  uint64_t result = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216BDF734(a1, a2, &v6);
  v5[0]  = result;
  v5[1]  = v4;
  if ((_BYTE)v4)
  {
    sub_216BDF230(a1, v5);
    return v5[0];
  }
  return result;
}

void *sub_216BDF734(uint64_t a1, unsigned int *a2, _DWORD **a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6)
  {
    sub_216BDF4B4((void **)a1);
    uint64_t v6 = *(void *)(a1 + 32);
  }
  uint64_t v7 = (void *)(*(void *)a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & v6));
  uint64_t v8 = (void *)*v7;
  if (*v7)
  {
    uint64_t v9 = (void *)*v7;
    while (*v9 != *(void *)a2)
    {
      uint64_t v9 = (void *)v9[6];
      if (!v9) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    if (*(void *)(a1 + 24) > (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
    {
      sub_216BDF4B4((void **)a1);
      uint64_t v7 = (void *)(*(void *)a1
                    + 8
                    * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & *(void *)(a1 + 32)));
      uint64_t v8 = (void *)*v7;
    }
    uint64_t v9 = operator new(0x48uLL);
    sub_216BDF878(v9, *a3);
    v9[7]  = 0;
    v9[8]  = 0;
    void v9[6] = v8;
    void *v7 = v9;
    ++*(void *)(a1 + 24);
  }
  return v9;
}

void sub_216BDF864(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_216BDF878(_DWORD *a1, _DWORD *a2)
{
  long long v4 = sub_216981010(a1, a2);
  sub_21698105C(v4 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)(a1 + 2), (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)(a2 + 2));
  return a1;
}

void sub_216BDF8BC(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

void *sub_216BDF8D0(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2  = 0;
  *a1  = v4;
  sub_216BDF928((uint64_t)(a1 + 1), a3);
  return a1;
}

void sub_216BDF908(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    sub_216BDD408((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216BDF928(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(void *)a2  = 0;
  *(void *)(a1 + 24)  = 0;
  *(_OWORD *)(a1 + 8)  = 0u;
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(_OWORD *)(a2 + 8)  = 0u;
  uint64_t v4 = *(void *)(a2 + 32);
  *(_OWORD *)(a2 + 24)  = 0u;
  *(void *)(a1 + 32)  = v4;
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 48)  = 0;
  *(void *)(a1 + 56)  = 0;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  *(void *)(a2 + 48)  = 0;
  *(void *)(a2 + 56)  = 0;
  *(void *)(a2 + 4sub_2168EBBB8(&a9, 0) = 0;
  LODWORD(v4)  = *(_DWORD *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a2 + 72)  = 0;
  *(void *)(a1 + 72)  = v5;
  *(_DWORD *)(a1 + 64)  = v4;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::PcpExpressionVariablesDependencyData((void *)(a1 + 80), (uint64_t *)(a2 + 80));
  *(void *)(a1 + 88)  = 0;
  *(void *)(a1 + 96)  = 0;
  *(void *)(a1 + 104)  = 0;
  *(_OWORD *)(a1 + 88)  = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104)  = *(void *)(a2 + 104);
  *(void *)(a2 + 88)  = 0;
  *(void *)(a2 + 96)  = 0;
  *(void *)(a2 + 104)  = 0;
  return a1;
}

void sub_216BDFA00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = *v3;
  uint64_t *v3 = 0;
  if (v5) {
    sub_216BBECE0((uint64_t)v3, v5);
  }
  sub_216787968((void ***)va);
  sub_216BDB478(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_216BDFA38(void *a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t (*a5)(void *, uint64_t))
{
  unint64_t v9 = a3 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = (*(void *)(a4[1] + 256) - 1) & (a3 >> 3);
  if (v10)
  {
    unint64_t v11 = 0;
  }
  else
  {
    unint64_t v11 = (void *)(*(uint64_t (**)(uint64_t *))(*a4 + 16))(a4);
    void *v11 = 0;
    v11[1]  = 0;
  }
  uint64_t v12 = a1[3];
  __dmb(0xBu);
  if (v12 != v9) {
    sub_2168DAE14((uint64_t)a1, a1 + 3, v9, a4[1]);
  }
  if (v11)
  {
    sub_21685036C((uint64_t)&v16, (uint64_t)(a1 + 4));
    unint64_t v13 = (void *)a1[2];
    __dmb(0xBu);
    if ((unint64_t)v13 < 2)
    {
      __dmb(0xBu);
      *a1  = v11;
    }
    else
    {
      *unint64_t v13 = v11;
    }
    __dmb(0xBu);
    a1[2]  = v11;
    uint64_t v14 = v16;
    if (v16)
    {
      __dmb(0xBu);
      *uint64_t v14 = 0;
    }
  }
  else
  {
    unint64_t v11 = (void *)a1[2];
    __dmb(0xBu);
  }
  uint64_t result = a5(&v11[15 * v10 + 2], a2);
  v11[1] |= 1 << v10;
  atomic_fetch_add(a1 + 3, 8uLL);
  return result;
}

void sub_216BDFB80(void *a1)
{
  __cxa_begin_catch(a1);
  atomic_fetch_add((atomic_ullong *volatile)(*(void *)(v1 + 8) + 272), 1uLL);
  sub_2168DAD98(v2, v3);
}

void sub_216BDFBA0()
{
}

void sub_216BDFBA8(_Unwind_Exception *a1)
{
}

void *sub_216BDFBEC(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2  = 0;
  *a1  = v3;
  sub_216BDF928((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  return a1;
}

void sub_216BDFC20(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    sub_216BDD408((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216BDFC40(uint64_t a1, unint64_t a2, float a3, float a4)
{
  unint64_t v12 = a2;
  sub_21686EB98((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >> 60)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_216767B04(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_264293928, MEMORY[0x263F8C060]);
  }
  sub_216BDFDE4((void *)(a1 + 8), v12);
  uint64_t v7 = *(int **)(a1 + 8);
  if (v7 == *(int **)(a1 + 16)) {
    uint64_t v7 = sub_216BDFD60();
  }
  unint64_t v8 = v12;
  *(void *)(a1 + 32)  = v7;
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = v8;
  *(void *)(a1 + 48)  = 0;
  *(_WORD *)(a1 + 72)  = 0;
  if (v8) {
    *(unsigned char *)(*(void *)(a1 + 16) - 1sub_2168EBBB8(&a9, 0) = 1;
  }
  float v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64)  = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68)  = v9;
  *(void *)(a1 + 56)  = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_216BDFD4C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *sub_216BDFD60()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798C5F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798C5F8))
  {
    dword_26798C5E8  = 0;
    word_26798C5EC  = -1;
    byte_26798C5EE  = 1;
    __cxa_atexit((void (*)(void *))sub_216BDFF0C, &dword_26798C5E8, &dword_216758000);
    __cxa_guard_release(&qword_26798C5F8);
  }
  return &dword_26798C5E8;
}

void *sub_216BDFDE4(void *a1, unint64_t a2)
{
  *a1  = 0;
  a1[1]  = 0;
  a1[2]  = 0;
  if (a2)
  {
    sub_21682BF78(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 16 * a2;
    do
    {
      *(_DWORD *)uint64_t v4 = 0;
      *(_WORD *)(v4 + 4)  = -1;
      *(unsigned char *)(v4 + 6)  = 0;
      v4 += 16;
    }
    while (v4 != v5);
    a1[1]  = v5;
  }
  return a1;
}

void sub_216BDFE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_216BDFE6C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_216BDFEC0((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t *sub_216BDFEC0(uint64_t *result)
{
  uint64_t v1 = *result;
  uint64_t v2 = result[1];
  if (v2 != *result)
  {
    do
    {
      if (*(__int16 *)(v2 - 12) != -1)
      {
        uint64_t v3 = *(void *)(v2 - 8);
        if ((v3 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *(_WORD *)(v2 - 12)  = -1;
      }
      v2 -= 16;
    }
    while (v2 != v1);
  }
  result[1]  = v1;
  return result;
}

uint64_t sub_216BDFF0C(uint64_t result)
{
  if (*(__int16 *)(result + 4) != -1)
  {
    uint64_t v1 = *(void *)(result + 8);
    if ((v1 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(_WORD *)(result + 4)  = -1;
  }
  return result;
}

uint64_t sub_216BDFF3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 - 11)  = 1;
  *(void *)a1  = &unk_26C75BF28;
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)a2;
  sub_21697D878((_DWORD *)(a1 + 24), (_DWORD *)(a2 + 16));
  sub_21697D8B4((_DWORD *)(a1 + 28), (_DWORD *)(a2 + 20));
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(unsigned char *)(a1 + 4sub_2168EBBB8(&a9, 0) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 48)  = a3;
  return a1;
}

uint64_t sub_216BDFFE8(uint64_t a1)
{
  *(void *)a1  = &unk_26C75BF28;
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  return a1;
}

void sub_216BE0054(void *a1)
{
  *a1  = &unk_26C75BF28;
  uint64_t v2 = a1[4];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 7);
  sub_21697C414((_DWORD *)a1 + 6);

  operator delete(a1);
}

uint64_t sub_216BE00D0(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 24), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 32), &v9);
  sub_216BDE228(v2, v3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, *(unsigned __int8 *)(a1 + 40));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  unint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v5 = v8;
  unint64_t v6 = atomic_load((unint64_t *)(v4 + 144));
  if (v5 < v6
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v8, (atomic_ullong *)v4))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v8, *(void *)(a1 + 48));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v8);
  return 0;
}

void sub_216BE01A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
}

void sub_216BE01C4(pxrInternal__aapl__pxrReserved__ *a1)
{
  long long v1 = *(_OWORD *)a1;
  uint64_t v2 = *((void *)a1 + 2);
  *((void *)a1 + 1)  = 0;
  *((void *)a1 + 2)  = 0;
  *(void *)a1  = 0;
  if ((pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls(a1) & 1) == 0) {
    sub_216BE023C((pxrInternal__aapl__pxrReserved__ *)&v1);
  }
  uint64_t v3 = (void **)&v1;
  sub_216BDD870(&v3);
}

void sub_216BE0220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12  = (void **)&a9;
  sub_216BDD870(&a12);
  _Unwind_Resume(a1);
}

void sub_216BE023C(pxrInternal__aapl__pxrReserved__ *a1)
{
  long long v7 = *(_OWORD *)a1;
  uint64_t v8 = *((void *)a1 + 2);
  *((void *)a1 + 1)  = 0;
  *((void *)a1 + 2)  = 0;
  *(void *)a1  = 0;
  HasConcurrency  = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1);
  if (HasConcurrency)
  {
    DetachedDispatcher  = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    uint64_t v3 = *(void ***)(DetachedDispatcher + 256);
    v9[0]  = 0;
    v9[1]  = v3;
    uint64_t v4 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v9, 0x28uLL);
    *(unsigned char *)(v4 - 11)  = 1;
    *(void *)uint64_t v4 = &unk_26C75BF70;
    *(void *)(v4 + 16)  = 0;
    *(void *)(v4 + 24)  = 0;
    *(_OWORD *)(v4 + 8)  = v7;
    uint64_t v5 = v8;
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    *(void *)(v4 + 24)  = v5;
    *(void *)(v4 + 32)  = DetachedDispatcher + 264;
    unint64_t v6 = (pxrInternal__aapl__pxrReserved__ *)(***(uint64_t (****)(void, uint64_t, uint64_t))(v4 - 40))(*(void *)(v4 - 40), v4, v4 - 8);
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v6);
  }
  else
  {
    sub_216BE0360();
  }
  v9[0]  = (void **)&v7;
  sub_216BDD870(v9);
}

void sub_216BE0344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12  = (void **)&a9;
  sub_216BDD870(&a12);
  _Unwind_Resume(a1);
}

void sub_216BE0360()
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  uint64_t v0 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v0) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  long long v1 = sub_216862604(&v3, 0);
  char v4 = 0;
  uint64_t v2 = (void *)sub_2168520EC(v0 + 19, &v4);
  if (v2 != v1) {
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v0, v1, v2);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_216BE03EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216BE0400(uint64_t a1)
{
  *(void *)a1  = &unk_26C75BF70;
  unint64_t v3 = (void **)(a1 + 8);
  sub_216BDD870(&v3);
  return a1;
}

void sub_216BE0458(char *a1)
{
  *(void *)a1  = &unk_26C75BF70;
  uint64_t v2 = (void **)(a1 + 8);
  sub_216BDD870(&v2);
  operator delete(a1);
}

uint64_t sub_216BE04B4(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216BE0360();
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 32));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216BE0544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216BE0558(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

uint64_t sub_216BE0588(uint64_t a1)
{
  sub_216BE05C4(a1, *(_DWORD **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1  = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216BE05C4(uint64_t a1, _DWORD *a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    do
    {
      unint64_t v3 = *(_DWORD **)v2;
      sub_2169818D8(v2 + 4);
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216BE0608(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216BE0608(a1, *a2);
    sub_216BE0608(a1, a2[1]);
    sub_21685ED34((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_216BE0664(uint64_t *a1)
{
  sub_216BDA438(a1);
  unint64_t v2 = (void *)*a1;
  if (*a1)
  {
    a1[1]  = (uint64_t)v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t *sub_216BE069C(uint64_t *a1)
{
  sub_216BDA4E8(a1);
  unint64_t v2 = (void *)*a1;
  if (*a1)
  {
    a1[1]  = (uint64_t)v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t *sub_216BE06D4(uint64_t *a1, const void ***a2)
{
  a1[2]  = 0;
  a1[1]  = 0;
  *a1  = (uint64_t)(a1 + 1);
  sub_216BE072C(a1, *a2, a2 + 1);
  return a1;
}

void sub_216BE0714(_Unwind_Exception *a1)
{
  sub_216BE0608(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_216BE072C(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    unint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_216BE07B8(v5, v6, v4 + 4, (long long *)v4 + 2);
      long long v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          long long v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          unint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      unint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_216BE07B8(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  unint64_t v6 = sub_216789A4C(a1, a2, &v12, &v11, a3);
  long long v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    sub_216BE0850((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, (uint64_t)v12, v8, v10[0]);
    long long v7 = v10[0];
    v10[0]  = 0;
    sub_216BE0950((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_216BE0850@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x50uLL);
  *(void *)a3  = v6;
  *(void *)(a3 + 8)  = v5;
  *(unsigned char *)(a3 + 16)  = 0;
  uint64_t result = sub_216BE08BC(v6 + 32, a2);
  *(unsigned char *)(a3 + 16)  = 1;
  return result;
}

void sub_216BE08A4(_Unwind_Exception *a1)
{
  sub_216BE0950(v1, 0);
  _Unwind_Resume(a1);
}

unsigned char *sub_216BE08BC(unsigned char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2)  = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  *((void *)__dst + 3)  = 0;
  *((void *)__dst + 4)  = 0;
  *((void *)__dst + 5)  = 0;
  sub_216812BD8(__dst + 24, *((long long **)a2 + 3), *((long long **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  return __dst;
}

void sub_216BE0934(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BE0950(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1  = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21685ED34((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_216BE09A8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4 = a2[23];
  size_t v5 = *((void *)a2 + 1);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  uint64_t v7 = a3[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a3 + 1);
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    int v10 = a3;
  }
  else {
    int v10 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v10, v5)) {
      return 0;
    }
  }
  else if (v4)
  {
    uint64_t v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  uint64_t v14 = a2 + 24;
  unint64_t v12 = (unsigned __int8 *)*((void *)a2 + 3);
  unint64_t v13 = (unsigned __int8 *)*((void *)v14 + 1);
  long long v16 = a3 + 24;
  long long v15 = (unsigned __int8 *)*((void *)a3 + 3);
  if (v13 - v12 != *((void *)v16 + 1) - (void)v15) {
    return 0;
  }
  if (v12 == v13) {
    return 1;
  }
  do
  {
    uint64_t result = sub_2168513F8((uint64_t)&v18, v12, v15);
    if (!result) {
      break;
    }
    v12 += 24;
    v15 += 24;
  }
  while (v12 != v13);
  return result;
}

uint64_t **sub_216BE0AA8(uint64_t **result, long long *a2, long long *a3)
{
  size_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    uint64_t v7[2] = 0;
    result[1]  = 0;
    result[2]  = 0;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    long long v15 = result;
    long long v16 = v8;
    long long v17 = (const void **)v8;
    if (v8)
    {
      long long v16 = sub_216799E28((uint64_t)v8);
      if (a2 != a3)
      {
        BOOL v9 = a2;
        do
        {
          v18[0]  = (uint64_t)(v8 + 4);
          v18[1]  = (uint64_t)(v8 + 7);
          sub_216BE0C38((uint64_t)v18, (uint64_t)(v9 + 2));
          int v10 = (uint64_t **)sub_216799DAC((uint64_t)v5, v18, v17 + 4);
          sub_21677B358(v5, v18[0], v10, (uint64_t *)v17);
          long long v17 = (const void **)v16;
          if (v16) {
            long long v16 = sub_216799E28((uint64_t)v16);
          }
          uint64_t v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2  = v11;
              uint64_t v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2  = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              BOOL v9 = a2;
            }
            while (!v12);
          }
          int v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          BOOL v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)sub_216BE0C94((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_216BE0CEC(v5, a2 + 2);
      unint64_t v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          unint64_t v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2  = v14;
        }
        while (!v12);
      }
      a2  = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_216BE0C24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BE0C94((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BE0C38(uint64_t a1, uint64_t a2)
{
  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2 + 24) {
    sub_21680F694(v4, *(std::string **)(a2 + 24), *(long long **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  }
  return a1;
}

uint64_t sub_216BE0C94(uint64_t a1)
{
  sub_216BE0608(*(void *)a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    unint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        unint64_t v2 = v3;
        unint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8)  = v2;
    }
    sub_216BE0608(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *sub_216BE0CEC(uint64_t **a1, long long *a2)
{
  sub_216BE0850((uint64_t)a1, a2, (uint64_t)v7);
  unint64_t v3 = (uint64_t **)sub_216799DAC((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  sub_21677B358(a1, v6, v3, v7[0]);
  uint64_t v4 = v7[0];
  v7[0]  = 0;
  sub_216BE0950((uint64_t)v7, 0);
  return v4;
}

void sub_216BE0D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BE0950((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_216BE0D70(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0]  = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = v5;
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = v5 & (v6 - 1);
    }
    int v8 = *(void **)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      BOOL v9 = (void *)*v8;
      if (*v8)
      {
        do
        {
          unint64_t v10 = v9[1];
          if (v10 == v5)
          {
            if (v9[2] == *(void *)a2) {
              return v9;
            }
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6) {
                v10 %= v6;
              }
            }
            else
            {
              v10 &= v6 - 1;
            }
            if (v10 != v3) {
              break;
            }
          }
          BOOL v9 = (void *)*v9;
        }
        while (v9);
      }
    }
  }
  sub_216BE0FE0(a1, v5, a3, (uint64_t)v20);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    sub_21678A04C(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
  }
  long long v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *(void *)v20[0]  = *v17;
    *long long v17 = v20[0];
  }
  else
  {
    *(void *)v20[0]  = *(void *)(a1 + 16);
    *(void *)(a1 + 16)  = v20[0];
    *(void *)(*(void *)a1 + 8 * v3)  = a1 + 16;
    if (*(void *)v20[0])
    {
      unint64_t v18 = *(void *)(*(void *)v20[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v18)  = v20[0];
    }
  }
  BOOL v9 = (void *)v20[0];
  v20[0]  = 0;
  ++*(void *)(a1 + 24);
  sub_216BE104C((uint64_t)v20, 0);
  return v9;
}

void sub_216BE0FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BE104C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_216BE0FE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  int v8 = operator new(0x18uLL);
  *(void *)a4  = v8;
  *(void *)(a4 + 8)  = v7;
  void *v8 = 0;
  v8[1]  = a2;
  sub_216981010((_DWORD *)v8 + 4, a3);
  uint64_t result = sub_21698105C((_DWORD *)v8 + 5, a3 + 1);
  *(unsigned char *)(a4 + 16)  = 1;
  return result;
}

void sub_216BE104C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(_DWORD **)a1;
  *(void *)a1  = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2169818D8(v2 + 4);
    }
    operator delete(v2);
  }
}

uint64_t sub_216BE10A4(void *a1, unsigned int *a2)
{
  uint64_t result = (uint64_t)sub_216A62F60(a1, a2);
  if (result)
  {
    sub_216851DB0(a1, (void *)result, (uint64_t)v4);
    sub_216BE104C((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

uint64_t *sub_216BE10F4(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (void **)sub_21699DB58((uint64_t)a1, &v9, a2);
  unint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2)  = *(_OWORD *)a3;
    *(void *)a3  = 0;
    *(void *)(a3 + 8)  = 0;
    sub_21677B358(a1, v9, v7, v6);
  }
  return v6;
}

void sub_216BE117C(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 18;
        sub_216BE1214((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1]  = v2;
    operator delete(v5);
  }
}

_DWORD *sub_216BE1214(uint64_t a1, _DWORD *a2)
{
  sub_216BBED8C((uint64_t)(a2 + 4));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 3);
  sub_21697C414(a2 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 1);

  return sub_21697C414(a2);
}

uint64_t sub_216BE1270(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    sub_21677CB10();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_216815D10((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v10 = v7;
  float v11 = &v7[72 * v3];
  BOOL v13 = &v7[72 * v6];
  sub_216BE1398((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  float v12 = v11 + 72;
  sub_216BE1400(a1, &v10);
  uint64_t v8 = a1[1];
  sub_216BE15C0(&v10);
  return v8;
}

void sub_216BE1384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BE15C0((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_216BE1398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_21697D878((_DWORD *)a2, (_DWORD *)a3);
  sub_21697D8B4((_DWORD *)(a2 + 4), (_DWORD *)(a3 + 4));
  sub_21697D878((_DWORD *)(a2 + 8), (_DWORD *)(a3 + 8));
  sub_21697D8B4((_DWORD *)(a2 + 12), (_DWORD *)(a3 + 12));
  sub_216BBFB70((_DWORD *)(a2 + 16), a3 + 16);
  __n128 result = *(__n128 *)(a3 + 56);
  *(__n128 *)(a2 + 56)  = result;
  return result;
}

uint64_t sub_216BE1400(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216BE1478((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

uint64_t sub_216BE1478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1)  = a7;
  long long v14 = v15;
  v12[0]  = a1;
  v12[1]  = &v14;
  v12[2]  = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 72;
      sub_216BD921C(v7 - 72, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 72;
      *((void *)&v15 + 1) -= 72;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216BE1534((uint64_t)v12);
  return v10;
}

void sub_216BE1520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216BE1534(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216BE156C((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216BE156C(uint64_t *result)
{
  uint64_t v1 = *(_DWORD **)(result[2] + 8);
  unint64_t v2 = *(_DWORD **)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_216BE1214(v3, v1);
      v1 += 18;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_216BE15C0(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

_DWORD *sub_216BE15F4(_DWORD *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2)  = v1 - 72;
      uint64_t result = sub_216BE1214(v4, (_DWORD *)(v1 - 72));
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_216BE163C(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v95 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = **(const pxrInternal__aapl__pxrReserved__::SdfPath ***)a1;
  if (*(void *)a3 != *(void *)v7 && pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a3, v7))
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a3, *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 8));
    if (!result) {
      return result;
    }
  }
  uint64_t v9 = **(pxrInternal__aapl__pxrReserved__::SdfPath ***)a1;
  if (*(void *)a3 == *(void *)v9 || !pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(v9, a3)) {
    int v10 = **(_DWORD **)(a1 + 16);
  }
  else {
    int v10 = **(_DWORD **)(a1 + 16) | 6;
  }
  float v11 = **(const pxrInternal__aapl__pxrReserved__::SdfPath ***)a1;
  if (*(void *)a3 == *(void *)v11 || (float v12 = a3, !pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a3, v11))) {
    float v12 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 8);
  }
  sub_216981010(&v74, v12);
  sub_21698105C(&v75, (_DWORD *)v12 + 1);
  char v13 = *(uint64_t **)(a1 + 32);
  uint64_t v72 = *(void *)(a1 + 24);
  long long v14 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(a1 + 40);
  long long v15 = v14[1];
  if (v15)
  {
    if (*(unsigned char *)(sub_216850B68((uint64_t *)v14 + 1) + 14)) {
      long long v15 = *v14;
    }
    else {
      long long v15 = 0;
    }
  }
  unsigned int v73 = v15;
  sub_2168BD80C((uint64_t *)&v73);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v84);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v84 + 1);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath(a2, &ParentNode);
  sub_21697DE94((int *)&v84, (int *)&ParentNode);
  sub_21697DEEC((int *)&v84 + 1, (int *)&ParentNode + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&ParentNode + 1);
  uint64_t v71 = v13;
  sub_21697C414(&ParentNode);
  unsigned __int8 v69 = a2;
  uint64_t v70 = v6;
  while (1)
  {
    uint64_t ParentNode = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&ParentNode);
    size_t v16 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&ParentNode + 1);
    long long v17 = v84;
    unint64_t v18 = ParentNode;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v16);
    sub_21697C414(&ParentNode);
    if (v17 == v18)
    {
      char v20 = 0;
      goto LABEL_25;
    }
    int v19 = sub_216BD4C38((void *)(v6 + 208), (unsigned int *)&v84);
    if (v19)
    {
      if (v19[1]) {
        break;
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v84, &ParentNode);
    sub_21697DE94((int *)&v84, (int *)&ParentNode);
    sub_21697DEEC((int *)&v84 + 1, (int *)&ParentNode + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&ParentNode + 1);
    sub_21697C414(&ParentNode);
  }
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v19 + 1, 6u, (uint64_t *)&v80);
  uint64_t v23 = v80;
  int v22 = v81;
  char v24 = v82;
  if (v80 != v82 || v81 != v83)
  {
    char v25 = 0;
    uint64_t v35 = (int *)&v76 + 1;
    uint64_t v36 = (_DWORD *)&ParentNode + 1;
    uint64_t v37 = v83 - 1;
    while (1)
    {
      char v38 = v22;
      __p[0]  = v23;
      __p[1]  = v22;
      if (!pxrInternal__aapl__pxrReserved__::PcpNodeIntroducesDependency((pxrInternal__aapl__pxrReserved__ *)__p, v21))goto LABEL_79; {
      LayerStacuint64_t k = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__p);
      }
      if (*LayerStack != v73) {
        goto LABEL_79;
      }
      Path  = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__p);
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a3, Path)) {
        goto LABEL_79;
      }
      if (v10 == 63
        || (pxrInternal__aapl__pxrReserved__::PcpClassifyNodeDependency((pxrInternal__aapl__pxrReserved__ *)__p, v21) & ~v10) == 0)
      {
        break;
      }
LABEL_78:
      char v25 = 1;
LABEL_79:
      int v22 = v38 + 1;
      if (v23 == v24 && v37 == v38) {
        goto LABEL_24;
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v76);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v35);
    char v88 = 0;
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__p) == 3)
    {
      uint64_t ParentNode = (char *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__p);
      uint64_t v90 = v41;
      uint64_t v42 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__p);
      uint64_t v43 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&ParentNode);
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v85, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v74, v42, v43, 1);
      pxrInternal__aapl__pxrReserved__::PcpTranslatePathFromNodeToRoot((pxrInternal__aapl__pxrReserved__ *)&ParentNode, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v85, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v88, &v86);
      sub_21697DE94((int *)&v76, &v86);
      sub_21697DEEC(v35, &v87);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v87);
      sub_21697C414(&v86);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v85 + 1);
      p_uint64_t ParentNode = &v85;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::PcpTranslatePathFromNodeToRoot((pxrInternal__aapl__pxrReserved__ *)__p, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v74, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v88, &ParentNode);
      sub_21697DE94((int *)&v76, (int *)&ParentNode);
      sub_21697DEEC(v35, (int *)&ParentNode + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&ParentNode + 1);
      p_uint64_t ParentNode = (uint64_t *)&ParentNode;
    }
    sub_21697C414(p_ParentNode);
    if (!v88
      || !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v76)
      && (uint64_t ParentNode = "pcp/cache.cpp",
          uint64_t v90 = "_ProcessDependentNode",
          uint64_t v91 = 573,
          std::string::size_type v92 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ProcessDependentNode(const PcpNodeRef &, "
                "const SdfPath &, const CacheFilterFn &, PcpDependencyVector *) [CacheFilterFuint64_t n = (lambda at /Library/Cach"
                "es/com.apple.xbs/Sources/USDLib/USD/pxr/usd/pcp/cache.cpp:659:26)]",
          char v93 = 0,
          !pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&ParentNode, "!depIndexPath.IsEmpty()", 0)))
    {
LABEL_77:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v35);
      sub_21697C414(&v76);
      goto LABEL_78;
    }
    if (*(unsigned char *)(v72 + 8))
    {
      uint64_t v45 = *(pxrInternal__aapl__pxrReserved__::PcpCache **)v72;
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v76))
      {
        uint64_t v46 = sub_216BD4C38((void *)v45 + 26, (unsigned int *)&v76);
        if (!v46 || !v46[1]) {
          goto LABEL_77;
        }
      }
      else if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v76) {
             || !pxrInternal__aapl__pxrReserved__::PcpCache::_GetPropertyIndex(v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v76))
      }
      {
        goto LABEL_77;
      }
    }
    sub_216981010(&ParentNode, &v76);
    int v47 = v35;
    uint64_t v48 = v36;
    uint64_t v68 = v47;
    sub_21698105C(v36, v47);
    sub_216981010(&v90, &v74);
    sub_21698105C((_DWORD *)&v90 + 1, &v75);
    MapToRoot  = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__p);
    int v52 = (char *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v50, v51);
    sub_216BBEE18(&v91, (uint64_t)v52);
    long long v94 = *(_OWORD *)(v52 + 40);
    unint64_t v53 = v71[1];
    if (v53 >= v71[2])
    {
      uint64_t v54 = sub_216BE1270(v71, (uint64_t)&ParentNode);
      long long v55 = v71;
    }
    else
    {
      sub_216BE1398((uint64_t)(v71 + 2), v71[1], (uint64_t)&ParentNode);
      uint64_t v54 = v53 + 72;
      long long v55 = v71;
      v71[1]  = v53 + 72;
    }
    uint64_t v36 = v48;
    v55[1]  = v54;
    sub_216BBED8C((uint64_t)&v91);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v90 + 1);
    uint64_t v35 = v68;
    sub_21697C414(&v90);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v36);
    sub_21697C414(&ParentNode);
    goto LABEL_77;
  }
  char v25 = 0;
LABEL_24:
  char v20 = v25;
  a2  = v69;
  uint64_t v6 = v70;
LABEL_25:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v84 + 1);
  sub_21697C414(&v84);
  CulledDependencies  = pxrInternal__aapl__pxrReserved__::Pcp_Dependencies::GetCulledDependencies(v6, (unsigned int *)a2);
  uint64_t v27 = *CulledDependencies;
  uint64_t v28 = CulledDependencies[1];
  if (*CulledDependencies != v28)
  {
    while (1)
    {
      if (v73 != *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v27 + 8)
        || !pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v27 + 16)))
      {
        goto LABEL_48;
      }
      if (v10 == 63 || (*(_DWORD *)v27 & ~v10) == 0) {
        break;
      }
LABEL_47:
      char v20 = 1;
LABEL_48:
      v27 += 88;
      if (v27 == v28) {
        goto LABEL_52;
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v80);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v80 + 1);
    LOBYTE(v76)  = 0;
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v27 + 24)))
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v74, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v27 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v27 + 24), 1);
      pxrInternal__aapl__pxrReserved__::PcpTranslatePathFromNodeToRootUsingFunction((pxrInternal__aapl__pxrReserved__ *)(v27 + 32), (const pxrInternal__aapl__pxrReserved__::PcpMapFunction *)__p, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v76, &ParentNode);
      sub_21697DE94((int *)&v80, (int *)&ParentNode);
      sub_21697DEEC((int *)&v80 + 1, (int *)&ParentNode + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&ParentNode + 1);
      sub_21697C414(&ParentNode);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      uint64_t v29 = __p;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::PcpTranslatePathFromNodeToRootUsingFunction((pxrInternal__aapl__pxrReserved__ *)(v27 + 32), (const pxrInternal__aapl__pxrReserved__::PcpMapFunction *)&v74, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v76, &ParentNode);
      sub_21697DE94((int *)&v80, (int *)&ParentNode);
      sub_21697DEEC((int *)&v80 + 1, (int *)&ParentNode + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&ParentNode + 1);
      uint64_t v29 = (void **)&ParentNode;
    }
    sub_21697C414(v29);
    if (!(_BYTE)v76
      || !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v80)
      && (uint64_t ParentNode = "pcp/cache.cpp",
          uint64_t v90 = "_ProcessCulledDependency",
          uint64_t v91 = 604,
          std::string::size_type v92 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ProcessCulledDependency(const PcpCulledDe"
                "pendency &, const SdfPath &, const CacheFilterFn &, PcpDependencyVector *) [CacheFilterFuint64_t n = (lambda at /"
                "Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/pcp/cache.cpp:659:26)]",
          char v93 = 0,
          !pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&ParentNode, "!depIndexPath.IsEmpty()", 0)))
    {
LABEL_46:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v80 + 1);
      sub_21697C414(&v80);
      goto LABEL_47;
    }
    if (*(unsigned char *)(v72 + 8))
    {
      uint64_t v30 = *(pxrInternal__aapl__pxrReserved__::PcpCache **)v72;
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v80))
      {
        long long v31 = sub_216BD4C38((void *)v30 + 26, (unsigned int *)&v80);
        if (!v31 || !v31[1]) {
          goto LABEL_46;
        }
      }
      else if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v80) {
             || !pxrInternal__aapl__pxrReserved__::PcpCache::_GetPropertyIndex(v30, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v80))
      }
      {
        goto LABEL_46;
      }
    }
    sub_216981010(&ParentNode, &v80);
    sub_21698105C((_DWORD *)&ParentNode + 1, (_DWORD *)&v80 + 1);
    sub_216981010(&v90, &v74);
    sub_21698105C((_DWORD *)&v90 + 1, &v75);
    sub_216BBEE18(&v91, v27 + 32);
    long long v94 = *(_OWORD *)(v27 + 72);
    unint64_t v32 = v71[1];
    if (v32 >= v71[2])
    {
      uint64_t v33 = sub_216BE1270(v71, (uint64_t)&ParentNode);
      uint64_t v34 = v71;
    }
    else
    {
      sub_216BE1398((uint64_t)(v71 + 2), v71[1], (uint64_t)&ParentNode);
      uint64_t v33 = v32 + 72;
      uint64_t v34 = v71;
      v71[1]  = v32 + 72;
    }
    v34[1]  = v33;
    sub_216BBED8C((uint64_t)&v91);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v90 + 1);
    sub_21697C414(&v90);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&ParentNode + 1);
    sub_21697C414(&ParentNode);
    goto LABEL_46;
  }
LABEL_52:
  if ((v20 & 1) == 0)
  {
    uint64_t ParentNode = "pcp/dependencies.h";
    uint64_t v90 = "Pcp_ForEachDependentNode";
    uint64_t v91 = 424;
    std::string::size_type v92 = "void pxrInternal__aapl__pxrReserved__::Pcp_ForEachDependentNode(const SdfPath &, const PcpLayerStackRefPtr &, "
          "const SdfPath &, const PcpCache &, const NodeFn &, const CulledDepFn &) [NodeFuint64_t n = (lambda at /Library/Caches/c"
          "om.apple.xbs/Sources/USDLib/USD/pxr/usd/pcp/cache.cpp:724:28), CulledDepFuint64_t n = (lambda at /Library/Caches/com.ap"
          "ple.xbs/Sources/USDLib/USD/pxr/usd/pcp/cache.cpp:739:33)]";
    char v93 = 0;
    Text  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
    uint64_t v57 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8((uint64_t *)&v73);
    uint64_t Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v57);
    uint64_t v59 = &v80;
    sub_216BBBE60(Identifier);
    if (SHIBYTE(v82) < 0) {
      uint64_t v59 = v80;
    }
    __int16 v60 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v69);
    sub_216BC11A8(&v76, (uint64_t *)(v70 + 128));
    unsigned int v61 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(&v76);
    uint64_t v62 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v61);
    sub_216BBBE60(v62);
    if (v79 >= 0) {
      unsigned int v65 = __p;
    }
    else {
      unsigned int v65 = (void **)__p[0];
    }
    char v66 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Unable to find node that introduced dependency on site <%s>@%s@ for prim <%s> in %s", v63, v64, Text, v59, v60, v65);
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&ParentNode, "foundDep", v66);
    if (v79 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v67 = v77;
    if (v77 && atomic_fetch_add_explicit((atomic_uint *volatile)(v77 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
    }
    if (SHIBYTE(v82) < 0) {
      operator delete(v80);
    }
  }
  sub_216BBEEA4(&v73);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v75);
  return (uint64_t)sub_21697C414(&v74);
}

void sub_216BE2088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a27,int a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  sub_216BBEEA4(&a27);
  sub_21697B754(&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_216BE2314(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1C71C71C71C71C7) {
    unint64_t v9 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)sub_216815D10(v7, v9);
  }
  else {
    int v10 = 0;
  }
  char v13 = v10;
  long long v14 = &v10[72 * v4];
  size_t v16 = &v10[72 * v9];
  sub_216BD921C((uint64_t)v14, a2);
  long long v15 = v14 + 72;
  sub_216BE1400(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216BE15C0(&v13);
  return v11;
}

void sub_216BE2420(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BE15C0((void **)va);
  _Unwind_Resume(a1);
}

void *sub_216BE2434(void *a1, void *a2, void *a3)
{
  *a1  = 0;
  a1[1]  = 0;
  a1[2]  = 0;
  if (a2 == a3)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2;
    do
    {
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          unint64_t v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      unint64_t v5 = v7;
    }
    while (v7 != a3);
  }
  sub_216BE24BC(a1, a2, a3, v4);
  return a1;
}

void *sub_216BE24BC(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_216782E84(result, a4);
    uint64_t result = sub_21680F390((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1]  = result;
  }
  return result;
}

void sub_216BE2524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8)  = v10;
  sub_216782F20(&a9);
  _Unwind_Resume(a1);
}

void sub_216BE2544(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216BE2544(a1, *a2);
    sub_216BE2544(a1, a2[1]);
    sub_216BE25A0((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_DWORD *sub_216BE25A0(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 8);
  sub_216782F20(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_21697C414((_DWORD *)a1);
}

uint64_t **sub_216BE25EC(uint64_t **a1, unint64_t *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  BOOL v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (v6)
  {
    unint64_t v10 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v11 = v6[4];
        if (v10 >= v11) {
          break;
        }
        uint64_t v6 = *v9;
        BOOL v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        BOOL v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    float v12 = operator new(0x40uLL);
    v15[1]  = v7;
    char v13 = *a4;
    sub_216981010(v12 + 8, v13);
    sub_21698105C(v12 + 9, v13 + 1);
    *((void *)v12 + 5)  = 0;
    *((void *)v12 + 6)  = 0;
    *((void *)v12 + 7)  = 0;
    char v16 = 1;
    sub_21677B358(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v15[0]  = 0;
    sub_216BE26E8((uint64_t)v15, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void sub_216BE26E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1  = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216BE25A0((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_216BE2740(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = 1;
    do
    {
      if ((sub_2169817E8(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v2 + 28)) & 1) == 0)
      {
        if (!sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v2 + 28), a2)) {
          return v4;
        }
        ++v2;
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return 0;
}

_DWORD *sub_216BE27AC(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 8);
  sub_2168BBAAC((void ***)(a1 + 32), 0);
  uint64_t v4 = v2;
  sub_216BDCF18(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_21697C414((_DWORD *)a1);
}

uint64_t sub_216BE2804(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = sub_216BE284C((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  sub_216BE28B8(a1, v3);
  return 1;
}

void *sub_216BE284C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + 8);
  uint64_t v4 = sub_216BE292C(a1, a2, *(void **)(a1 + 8), (void *)(a1 + 8));
  if (v3 == v4) {
    return v3;
  }
  unint64_t v5 = v4;
  uint64_t v6 = (uint64_t)(v4 + 4);
  unint64_t v7 = sub_216851B24(a2);
  if (v7 < sub_216851B24(v6)) {
    return v3;
  }
  return v5;
}

uint64_t *sub_216BE28B8(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = sub_2167AE00C(a1, a2);
  uint64_t v4 = (atomic_uint *)a2[5];
  if (v4 && atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  }
  operator delete(a2);
  return v3;
}

void *sub_216BE292C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a3)
  {
    unint64_t v5 = a3;
    do
    {
      unint64_t v7 = sub_216851B24((uint64_t)(v5 + 4));
      unint64_t v8 = sub_216851B24(a2);
      uint64_t v9 = v5 + 1;
      if (v7 >= v8)
      {
        uint64_t v9 = v5;
        a4  = v5;
      }
      unint64_t v5 = (void *)*v9;
    }
    while (*v9);
  }
  return a4;
}

void sub_216BE2990(void *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int **)(a2 + 56);
  if (v2)
  {
    sub_216BE2B5C(a1, *(void *)(a2 + 56));
    sub_216BE2A80(a1, v2);
  }
}

void *sub_216BE29E4(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  if (*(void *)a2 != *result)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v6);
    unint64_t v5 = sub_216BD4C38(a1, &v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
    sub_21697C414(&v6);
    return (void *)sub_216BE2BD4((uint64_t)v5, (uint64_t)a2);
  }
  return result;
}

void sub_216BE2A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void sub_216BE2A80(void *a1, unsigned int *a2)
{
  uint64_t v3 = a2 + 1;
  uint64_t v4 = (void *)(*a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & a1[4]));
  do
  {
    unint64_t v5 = v4;
    unsigned int v6 = (unsigned int *)*v4;
    uint64_t v4 = (void *)(*v4 + 48);
  }
  while (v6 != a2);
  --a1[3];
  void *v5 = *((void *)a2 + 6);
  sub_2168BBAAC((void ***)a2 + 5, 0);
  int v7 = (void *)*((void *)a2 + 2);
  if (v7)
  {
    *((void *)a2 + 3)  = v7;
    operator delete(v7);
  }
  sub_216BDCEE8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  unint64_t v8 = sub_21697C414(a2);

  operator delete(v8);
}

void sub_216BE2B5C(void *a1, uint64_t a2)
{
  ((void (*)(void))sub_216BE2990)();
  uint64_t v4 = *(void *)(a2 + 64);
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 7) != 0 && v5 != 0)
  {
    do
    {
      uint64_t v7 = *(void *)(v5 + 64);
      if ((v7 & 7) != 0) {
        unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      }
      else {
        unint64_t v8 = 0;
      }
      sub_216BE2990(a1, v5);
      sub_216BE2A80(a1, (unsigned int *)v5);
      unint64_t v5 = v8;
    }
    while (v8);
  }
}

uint64_t sub_216BE2BD4(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 56);
  if (v2 == a2)
  {
    uint64_t v5 = *(void *)(a2 + 64);
    if ((v5 & 7) != 0) {
      unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(result + 56)  = v6;
  }
  else
  {
    do
    {
      unint64_t v3 = v2;
      uint64_t v4 = *(void *)(v2 + 64);
      if ((v4 & 7) != 0) {
        unint64_t v2 = v4 & 0xFFFFFFFFFFFFFFF8;
      }
      else {
        unint64_t v2 = 0;
      }
    }
    while (v2 != a2);
    *(void *)(v3 + 64)  = *(void *)(a2 + 64);
  }
  return result;
}

void sub_216BE2C20(void *a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int **)(a2 + 48);
  if (v2)
  {
    sub_216BE2DDC(a1, *(void *)(a2 + 48));
    sub_216BE2D10(a1, v2);
  }
}

void *sub_216BE2C74(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  if (*(void *)a2 != *result)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v6);
    uint64_t v5 = sub_216BD514C(a1, &v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
    sub_21697C414(&v6);
    return (void *)sub_216BE2E54((uint64_t)v5, (uint64_t)a2);
  }
  return result;
}

void sub_216BE2CFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void sub_216BE2D10(void *a1, unsigned int *a2)
{
  unint64_t v3 = a2 + 1;
  uint64_t v4 = (void *)(*a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & a1[4]));
  do
  {
    uint64_t v5 = v4;
    unsigned int v6 = (unsigned int *)*v4;
    uint64_t v4 = (void *)(*v4 + 40);
  }
  while (v6 != a2);
  --a1[3];
  void *v5 = *((void *)a2 + 5);
  sub_2168BBAAC((void ***)a2 + 4, 0);
  unint64_t v8 = (void **)(a2 + 2);
  sub_216BDCF18(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  int v7 = sub_21697C414(a2);
  operator delete(v7);
}

void sub_216BE2DDC(void *a1, uint64_t a2)
{
  ((void (*)(void))sub_216BE2C20)();
  uint64_t v4 = *(void *)(a2 + 56);
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 7) != 0 && v5 != 0)
  {
    do
    {
      uint64_t v7 = *(void *)(v5 + 56);
      if ((v7 & 7) != 0) {
        unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      }
      else {
        unint64_t v8 = 0;
      }
      sub_216BE2C20(a1, v5);
      sub_216BE2D10(a1, (unsigned int *)v5);
      unint64_t v5 = v8;
    }
    while (v8);
  }
}

uint64_t sub_216BE2E54(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 48);
  if (v2 == a2)
  {
    uint64_t v5 = *(void *)(a2 + 56);
    if ((v5 & 7) != 0) {
      unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(result + 48)  = v6;
  }
  else
  {
    do
    {
      unint64_t v3 = v2;
      uint64_t v4 = *(void *)(v2 + 56);
      if ((v4 & 7) != 0) {
        unint64_t v2 = v4 & 0xFFFFFFFFFFFFFFF8;
      }
      else {
        unint64_t v2 = 0;
      }
    }
    while (v2 != a2);
    *(void *)(v3 + 56)  = *(void *)(a2 + 56);
  }
  return result;
}

uint64_t sub_216BE2EA0(uint64_t a1, char **a2, char *a3)
{
  unsigned __int8 v4 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v4)
  {
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(*a2, 0, a3);
    *(void *)a1  = v7;
    if (v7)
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(*(char **)a3, v7, v8);
      int v5 = 2;
    }
    else
    {
      int v5 = 0;
    }
  }
  else
  {
    int v5 = 0;
    *(void *)a1  = 0;
  }
  *(_DWORD *)(a1 + 8)  = v5;
  return a1;
}

void sub_216BE2F14(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_216BDD200((void *)(a2 + 568));
    unsigned __int8 v4 = (void **)(a2 + 544);
    sub_216BDD870(&v4);
    if (*(char *)(a2 + 495) < 0) {
      operator delete(*(void **)(a2 + 472));
    }
    sub_216ABC260((void *)(a2 + 432));
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(a2 + 48));
    unint64_t v3 = *(atomic_uint **)(a2 + 16);
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
      }
    }
    operator delete((void *)a2);
  }
}

__n128 sub_216BE2FCC(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C75BFB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8)  = result;
  return result;
}

__n128 sub_216BE3018(uint64_t a1, uint64_t a2)
{
  *(void *)a2  = &unk_26C75BFB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8)  = result;
  return result;
}

uint64_t sub_216BE3048(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t sub_216BE3050(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75C018)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216BE3090()
{
  return &unk_26C75C018;
}

pxrInternal__aapl__pxrReserved__::SdfPath *sub_216BE309C(uint64_t a1, _DWORD *a2)
{
  unint64_t v6 = a2;
  __n128 result = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216BE3218(a1, a2, &v6);
  v5[0]  = result;
  v5[1]  = v4;
  if ((_BYTE)v4)
  {
    sub_216BE30EC(a1, v5);
    return v5[0];
  }
  return result;
}

_DWORD *sub_216BE30EC(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  unint64_t v3 = *a2;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(*a2, &v14);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v14))
  {
    pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::PcpPropertyIndex((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)v8);
    sub_216BE35E4(&v10, &v14, (const pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)v8);
    uint64_t v4 = sub_216BE309C(a1, &v10);
    sub_2168BBAAC(&v13, 0);
    char v16 = (void **)&v12;
    sub_216BDCF18(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_21697C414(&v10);
    sub_2168BBAAC(&v9, 0);
    char v16 = (void **)v8;
    sub_216BDCF18(&v16);
    uint64_t v5 = *(void *)(v4 + 48);
    if (v5) {
      uint64_t v6 = v5 | 1;
    }
    else {
      uint64_t v6 = v4;
    }
    *((void *)v3 + 7)  = v6;
    *(void *)(v4 + 48)  = v3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  return sub_21697C414(&v14);
}

void sub_216BE31DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_216BE27AC((uint64_t)va1);
  sub_216BDB590((uint64_t)va);
  sub_21697B754((_DWORD *)(v2 - 48));
  _Unwind_Resume(a1);
}

void *sub_216BE3218(uint64_t a1, unsigned int *a2, _DWORD **a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6)
  {
    sub_216BE335C((void **)a1);
    uint64_t v6 = *(void *)(a1 + 32);
  }
  uint64_t v7 = (void *)(*(void *)a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & v6));
  uint64_t v8 = (void *)*v7;
  if (*v7)
  {
    uint64_t v9 = (void *)*v7;
    while (*v9 != *(void *)a2)
    {
      uint64_t v9 = (void *)v9[5];
      if (!v9) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    if (*(void *)(a1 + 24) > (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
    {
      sub_216BE335C((void **)a1);
      uint64_t v7 = (void *)(*(void *)a1
                    + 8
                    * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & *(void *)(a1 + 32)));
      uint64_t v8 = (void *)*v7;
    }
    uint64_t v9 = operator new(0x40uLL);
    sub_216BE358C(v9, *a3);
    void v9[6] = 0;
    v9[7]  = 0;
    v9[5]  = v8;
    void *v7 = v9;
    ++*(void *)(a1 + 24);
  }
  return v9;
}

void sub_216BE3348(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216BE335C(void **a1)
{
  sub_216851EE4((uint64_t)&v21, "Sdf", "SdfPathTable::_Grow");
  unsigned __int8 v3 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v3)
  {
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("void pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::PcpPropertyIndex>::_Grow() [MappedType = pxrInternal__aapl__pxrReserved__::PcpPropertyIndex]", 0, v2);
    BOOL v5 = v4 != 0;
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v5 = 0;
  }
  int v19 = v4;
  unsigned int v20 = v5;
  unint64_t v6 = (2 * (void)a1[4]) | 1;
  if (v6 <= 7) {
    unint64_t v6 = 7;
  }
  a1[4]  = (void *)v6;
  sub_216BE3514(&v17, v6 + 1);
  uint64_t v7 = a1[1];
  if (v7 != *a1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (v7 - (unsigned char *)*a1) >> 3;
    do
    {
      int v10 = (unsigned int *)*((void *)*a1 + v8);
      if (v10)
      {
        unint64_t v11 = (unint64_t)a1[4];
        do
        {
          uint64_t v12 = (unsigned int *)*((void *)v10 + 5);
          unint64_t v13 = bswap64(0x9E3779B97F4A7C55* (v10[1]+ ((v10[1]+ (unint64_t)*v10+ (v10[1] + (unint64_t)*v10) * (v10[1] + (unint64_t)*v10)) >> 1))) & v11;
          uint64_t v14 = v17;
          *((void *)v10 + 5)  = *(void *)(v17 + 8 * v13);
          *(void *)(v14 + 8 * v13)  = v10;
          int v10 = v12;
        }
        while (v12);
      }
      ++v8;
    }
    while (v8 != v9);
    uint64_t v7 = *a1;
  }
  *(_OWORD *)a1  = v17;
  int v15 = a1[2];
  a1[2]  = v18;
  *(void *)&long long v17 = v7;
  unint64_t v18 = v15;
  if (v7)
  {
    *((void *)&v17 + 1)  = v7;
    operator delete(v7);
  }
  unsigned int v20 = v5 - 1;
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v4);
    unsigned int v20 = v5 | 0xFFFFFFFE;
  }
  while (v22--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v21);
}

void sub_216BE34E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_21684E6B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216BE3514(void *a1, unint64_t a2)
{
  *a1  = 0;
  a1[1]  = 0;
  a1[2]  = 0;
  if (a2)
  {
    sub_21677CACC(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1]  = &v4[8 * a2];
  }
  return a1;
}

void sub_216BE3570(_Unwind_Exception *exception_object)
{
  unsigned __int8 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8)  = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_216BE358C(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = sub_216981010(a1, a2);
  sub_21698105C(v4 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::PcpPropertyIndex((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)(a1 + 2), (const pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)(a2 + 2));
  return a1;
}

void sub_216BE35D0(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_216BE35E4(_DWORD *a1, _DWORD *a2, const pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *a3)
{
  unint64_t v6 = sub_216981010(a1, a2);
  sub_21698105C(v6 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::PcpPropertyIndex((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)(a1 + 2), a3);
  return a1;
}

void sub_216BE3634(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Pcp_SubsumeDescendants(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unsigned __int8 v3 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    unint64_t v6 = (uint64_t *)(a1 + 8);
    do
    {
      int v7 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28), a2);
      uint64_t v8 = v4 + 1;
      if (!v7)
      {
        uint64_t v8 = v4;
        unint64_t v6 = v4;
      }
      uint64_t v4 = (void *)*v8;
    }
    while (*v8);
    if (v6 != v3)
    {
      uint64_t v9 = v6;
      while (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 28), a2))
      {
        int v10 = (uint64_t *)v9[1];
        if (v10)
        {
          do
          {
            unint64_t v11 = v10;
            int v10 = (uint64_t *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            unint64_t v11 = (uint64_t *)v9[2];
            BOOL v12 = *v11 == (void)v9;
            uint64_t v9 = v11;
          }
          while (!v12);
        }
        uint64_t v9 = v11;
        if (v11 == v3) {
          goto LABEL_18;
        }
      }
      unsigned __int8 v3 = v9;
    }
  }
  else
  {
    unint64_t v6 = (uint64_t *)(a1 + 8);
  }
LABEL_18:

  return sub_216AF1D2C((uint64_t **)a1, v6, v3);
}

void *pxrInternal__aapl__pxrReserved__::PcpLifeboat::PcpLifeboat(void *this)
{
  this[1]  = 0;
  *this  = this + 1;
  this[5]  = 0;
  this[4]  = 0;
  this[2]  = 0;
  this[3]  = this + 4;
  return this;
}

{
  this[1]  = 0;
  *this  = this + 1;
  this[5]  = 0;
  this[4]  = 0;
  this[2]  = 0;
  this[3]  = this + 4;
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpLifeboat::~PcpLifeboat(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***this)
{
}

{
  sub_216BEC8B0((uint64_t)(this + 3), this[4]);
  sub_216BEC854((uint64_t)this, this[1]);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpLifeboat::Retain(uint64_t a1, unint64_t *a2)
{
  return sub_216BEC90C(a1, a2, a2);
}

{
  return sub_216BECA94(a1 + 24, a2, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLifeboat::GetLayerStacks(pxrInternal__aapl__pxrReserved__::PcpLifeboat *this)
{
  return (uint64_t)this + 24;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpLifeboat::Swap(pxrInternal__aapl__pxrReserved__::PcpLifeboat *this, pxrInternal__aapl__pxrReserved__::PcpLifeboat *a2)
{
  sub_2168A6B2C((uint64_t *)this, (uint64_t)a2);

  return sub_2168A6B2C((uint64_t *)this + 3, (uint64_t)a2 + 24);
}

void *pxrInternal__aapl__pxrReserved__::PcpChanges::PcpChanges(void *this)
{
  this[1]  = 0;
  *this  = this + 1;
  this[4]  = 0;
  this[2]  = 0;
  this[3]  = this + 4;
  this[7]  = 0;
  this[5]  = 0;
  this[6]  = this + 7;
  this[10]  = 0;
  this[8]  = 0;
  this[9]  = this + 10;
  this[14]  = 0;
  this[13]  = 0;
  this[11]  = 0;
  this[12]  = this + 13;
  return this;
}

{
  this[1]  = 0;
  *this  = this + 1;
  this[4]  = 0;
  this[2]  = 0;
  this[3]  = this + 4;
  this[7]  = 0;
  this[5]  = 0;
  this[6]  = this + 7;
  this[10]  = 0;
  this[8]  = 0;
  this[9]  = this + 10;
  this[14]  = 0;
  this[13]  = 0;
  this[11]  = 0;
  this[12]  = this + 13;
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::~PcpChanges(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***this)
{
  uint64_t v2 = (char *)(this + 9);
  sub_216BEC8B0((uint64_t)(this + 12), this[13]);
  sub_216BEC854((uint64_t)v2, this[10]);
  sub_216BECF04((uint64_t)(this + 6), this[7]);
  sub_216BECD44((uint64_t)(this + 3), this[4]);
  sub_216BECC1C((uint64_t)this, this[1]);
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::DidChange(uint64_t **a1, pxrInternal__aapl__pxrReserved__::PcpCache *a2, uint64_t *a3)
{
  v573  = 0;
  v574  = 0;
  v571  = 0;
  v572  = (uint64_t *)&v573;
  v569  = (uint64_t *)&v570;
  v570  = 0;
  v567  = 0;
  v568  = 0;
  v565  = 0;
  v566  = (uint64_t *)&v567;
  v563  = 0;
  v564  = 0;
  v560  = 0;
  v561  = 0;
  v562  = 0;
  v557  = 0;
  v558  = 0;
  v559  = 0;
  v555  = 0;
  v556  = 0;
  v553  = 0;
  v554  = (uint64_t *)&v555;
  v551  = 0;
  v552  = 0;
  v550[0]  = 0;
  v550[1]  = 0;
  v549  = (uint64_t *)v550;
  memset(&v548, 0, sizeof(v548));
  BOOL v5 = sub_216BBBDFC(0);
  BOOL v6 = v5;
  int v7 = &v548;
  if (!v5) {
    int v7 = 0;
  }
  v536  = v7;
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(a2, (uint64_t *)&v577);
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)&v577);
    uint64_t Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v8);
    sub_216BBBE60(Identifier);
    if ((v582 & 0x80u) == 0) {
      BOOL v12 = (uint64_t ***)&v580;
    }
    else {
      BOOL v12 = (uint64_t ***)v580;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Cache: %s\n", v10, v11, v12);
    if (SHIBYTE(v585) >= 0) {
      unint64_t v13 = (const std::string::value_type *)&v583;
    }
    else {
      unint64_t v13 = (const std::string::value_type *)v583;
    }
    if (SHIBYTE(v585) >= 0) {
      std::string::size_type v14 = HIBYTE(v585);
    }
    else {
      std::string::size_type v14 = (std::string::size_type)v584;
    }
    std::string::append(&v548, v13, v14);
    if (SHIBYTE(v585) < 0) {
      operator delete((void *)v583);
    }
    if ((char)v582 < 0) {
      operator delete((void *)v580);
    }
    uint64_t v15 = v578;
    if (v578 && atomic_fetch_add_explicit((atomic_uint *volatile)(v578 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  IsUsd  = pxrInternal__aapl__pxrReserved__::PcpCache::IsUsd(a2);
  v544  = v6;
  HasAnyDynamicFileFormatArgumentAttributeDependencies  = pxrInternal__aapl__pxrReserved__::PcpCache::HasAnyDynamicFileFormatArgumentAttributeDependencies((pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **)a2);
  uint64_t v18 = *a3;
  v533  = a3[1];
  if (*a3 == v533) {
    goto LABEL_853;
  }
  v542  = (pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **)a2;
  do
  {
    v541  = v18;
    v538  = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v18 + 16);
    if (HasAnyDynamicFileFormatArgumentAttributeDependencies)
    {
      int v19 = v551;
      for (long long i = v552; i != v19; sub_216BEC6BC(i))
        i -= 2;
      v552  = v19;
      uint64_t v21 = v538;
      if (*(_DWORD *)(v541 + 220) >= 2u) {
        uint64_t v21 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)v538;
      }
      unsigned int v22 = *(_DWORD *)(v541 + 216);
      if (v22)
      {
        uint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v21 + 200 * v22);
        do
        {
          v575  = a2;
          v545  = (uint64_t *)&v551;
          if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(v21))
          {
            v583  = (unint64_t)&v575;
            v584  = (uint64_t *)v541;
            v585  = &v545;
            __int16 v24 = *((_WORD *)v21 + 96);
            NameTokeuint64_t n = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v21);
            IsPossibleDynamicFileFormatArgumentAttribute  = pxrInternal__aapl__pxrReserved__::PcpCache::IsPossibleDynamicFileFormatArgumentAttribute((pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **)a2, NameToken);
            if ((v24 & 0x40) != 0)
            {
              if (IsPossibleDynamicFileFormatArgumentAttribute)
              {
                uint64_t v33 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v541);
                uint64_t v34 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if (!v34) {
                  uint64_t v34 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                }
                if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v33, v21, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v34 + 88), 0))
                {
                  sub_216BEC474((uint64_t)&v583, v21, 0);
                  if (v544)
                  {
                    uint64_t v35 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v541);
                    uint64_t v36 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v35);
                    uint64_t v37 = *(char *)(v36 + 23) >= 0 ? v36 : *(void *)v36;
                    Text  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v21);
                    LayerStackuint64_t Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(v575);
                    long long v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(LayerStackIdentifier);
                    uint64_t v41 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v40);
                    uint64_t v44 = *(char *)(v41 + 23) >= 0 ? v41 : *(void *)v41;
                    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Property renamed to @%s@<%s> may affect file format arguments in cache %s\n", v42, v43, v37, Text, v44);
                    uint64_t v45 = (v582 & 0x80u) == 0
                        ? (const std::string::value_type *)&v580
                        : (const std::string::value_type *)v580;
                    std::string::size_type v46 = (v582 & 0x80u) == 0 ? v582 : v581;
                    std::string::append(&v548, v45, v46);
                    if ((char)v582 < 0) {
                      operator delete((void *)v580);
                    }
                  }
                }
              }
              int v47 = (pxrInternal__aapl__pxrReserved__::Pcp_Dependencies **)v575;
              uint64_t v48 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v21 + 160));
              if (!pxrInternal__aapl__pxrReserved__::PcpCache::IsPossibleDynamicFileFormatArgumentAttribute(v47, v48)) {
                goto LABEL_129;
              }
              sub_216BEC474((uint64_t)&v583, (_DWORD *)v21 + 40, 0);
              if (!v544) {
                goto LABEL_129;
              }
              uint64_t v49 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v541);
              uint64_t v50 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v49);
              if (*(char *)(v50 + 23) >= 0) {
                uint64_t v51 = v50;
              }
              else {
                uint64_t v51 = *(void *)v50;
              }
              int v52 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v21 + 160));
              unint64_t v53 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(v575);
              uint64_t v54 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v53);
              uint64_t v55 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v54);
              if (*(char *)(v55 + 23) >= 0) {
                uint64_t v58 = v55;
              }
              else {
                uint64_t v58 = *(void *)v55;
              }
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Property renamed from @%s@<%s> may affect file format arguments in cache %s\n", v56, v57, v51, v52, v58);
              if ((v582 & 0x80u) == 0) {
                uint64_t v59 = (const std::string::value_type *)&v580;
              }
              else {
                uint64_t v59 = (const std::string::value_type *)v580;
              }
              if ((v582 & 0x80u) == 0) {
                std::string::size_type v60 = v582;
              }
              else {
                std::string::size_type v60 = v581;
              }
              goto LABEL_93;
            }
            if (IsPossibleDynamicFileFormatArgumentAttribute)
            {
              int v27 = *((unsigned __int16 *)v21 + 96) | (*((unsigned __int8 *)v21 + 194) << 16);
              if ((v27 & 0x200000) == 0)
              {
                if ((v27 & 0x800000) != 0)
                {
                  if (v544)
                  {
                    unsigned int v73 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v541);
                    uint64_t v74 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v73);
                    uint64_t v75 = *(char *)(v74 + 23) >= 0 ? v74 : *(void *)v74;
                    uint64_t v76 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v21);
                    uint64_t v77 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(v575);
                    unsigned __int8 v78 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v77);
                    uint64_t v79 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v78);
                    uint64_t v82 = *(char *)(v79 + 23) >= 0 ? v79 : *(void *)v79;
                    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Removed property @%s@<%s> may affect file format arguments in cache %s\n", v80, v81, v75, v76, v82);
                    char v83 = (v582 & 0x80u) == 0
                        ? (const std::string::value_type *)&v580
                        : (const std::string::value_type *)v580;
                    std::string::size_type v84 = (v582 & 0x80u) == 0 ? v582 : v581;
                    std::string::append(&v548, v83, v84);
                    if ((char)v582 < 0) {
                      operator delete((void *)v580);
                    }
                  }
                  sub_216BEC474((uint64_t)&v583, v21, 0);
                }
                else
                {
                  uint64_t v28 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                  if (!v28) {
                    uint64_t v28 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                  }
                  uint64_t v29 = (void *)((char *)v21 + 8);
                  uint64_t v30 = *((unsigned int *)v21 + 32);
                  if (*((_DWORD *)v21 + 33) >= 4u) {
                    uint64_t v29 = (void *)*((void *)v21 + 1);
                  }
                  if (v30)
                  {
                    uint64_t v31 = 40 * v30;
                    unint64_t v32 = v29;
                    while ((*v32 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v28 + 11) & 0xFFFFFFFFFFFFFFF8))
                    {
                      v32 += 5;
                      v31 -= 40;
                      if (!v31) {
                        goto LABEL_129;
                      }
                    }
                  }
                  else
                  {
                    unint64_t v32 = v29;
                  }
                  if (v32 != &v29[5 * v30])
                  {
                    if (v544)
                    {
                      uint64_t v85 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v541);
                      uint64_t v86 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v85);
                      uint64_t v87 = *(char *)(v86 + 23) >= 0 ? v86 : *(void *)v86;
                      char v88 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v21);
                      uint64_t v89 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(v575);
                      uint64_t v90 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v89);
                      uint64_t v91 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v90);
                      uint64_t v94 = *(char *)(v91 + 23) >= 0 ? v91 : *(void *)v91;
                      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Default value change for property @%s@<%s> may affect file format arguments in cache %s\n", v92, v93, v87, v88, v94);
                      uint64_t v95 = (v582 & 0x80u) == 0
                          ? (const std::string::value_type *)&v580
                          : (const std::string::value_type *)v580;
                      std::string::size_type v96 = (v582 & 0x80u) == 0 ? v582 : v581;
                      std::string::append(&v548, v95, v96);
                      if ((char)v582 < 0) {
                        operator delete((void *)v580);
                      }
                    }
                    sub_216BEC474((uint64_t)&v583, v21, (uint64_t)(v32 + 1));
                  }
                }
                goto LABEL_129;
              }
              unsigned int v61 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v541);
              uint64_t v62 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v62) {
                uint64_t v62 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              }
              if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v61, v21, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v62 + 88), 0))
              {
                sub_216BEC474((uint64_t)&v583, v21, 0);
                if (v544)
                {
                  std::string::size_type v63 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v541);
                  uint64_t v64 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v63);
                  if (*(char *)(v64 + 23) >= 0) {
                    uint64_t v65 = v64;
                  }
                  else {
                    uint64_t v65 = *(void *)v64;
                  }
                  char v66 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v21);
                  uint64_t v67 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(v575);
                  uint64_t v68 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v67);
                  uint64_t v69 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v68);
                  if (*(char *)(v69 + 23) >= 0) {
                    uint64_t v72 = v69;
                  }
                  else {
                    uint64_t v72 = *(void *)v69;
                  }
                  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Added property @%s@<%s> may affect file format arguments in cache %s\n", v70, v71, v65, v66, v72);
                  if ((v582 & 0x80u) == 0) {
                    uint64_t v59 = (const std::string::value_type *)&v580;
                  }
                  else {
                    uint64_t v59 = (const std::string::value_type *)v580;
                  }
                  if ((v582 & 0x80u) == 0) {
                    std::string::size_type v60 = v582;
                  }
                  else {
                    std::string::size_type v60 = v581;
                  }
LABEL_93:
                  std::string::append(&v548, v59, v60);
                  if ((char)v582 < 0) {
                    operator delete((void *)v580);
                  }
                }
              }
            }
          }
LABEL_129:
          uint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v21 + 200);
        }
        while (v21 != v23);
      }
    }
    if (IsUsd && v551 == v552)
    {
      unsigned int v97 = *(_DWORD *)(v541 + 220);
      uint64_t v98 = v538;
      if (v97 >= 2) {
        uint64_t v98 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)v538;
      }
      unsigned int v99 = *(_DWORD *)(v541 + 216);
      if (v99)
      {
        char v100 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v98 + 200 * v99);
        uint64_t v101 = 200 * v99;
        while (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v98 + 1))
        {
          uint64_t v98 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v98 + 200);
          v101 -= 200;
          if (!v101)
          {
            uint64_t v98 = v100;
            break;
          }
        }
        unsigned int v97 = *(_DWORD *)(v541 + 220);
      }
      std::locale v102 = v538;
      if (v97 >= 2) {
        std::locale v102 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)v538;
      }
      if (v98 == (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v102 + 200 * *(unsigned int *)(v541 + 216)))
      {
        if (v544)
        {
          v520  = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v541);
          v521  = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v520);
          v524  = *(char *)(v521 + 23) >= 0 ? v521 : *(void *)v521;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Layer @%s@ changed:  skipping non-prim changes\n", v522, v523, v524);
          v525  = SHIBYTE(v585) >= 0 ? (const std::string::value_type *)&v583 : (const std::string::value_type *)v583;
          v526  = SHIBYTE(v585) >= 0 ? HIBYTE(v585) : (std::string::size_type)v584;
          std::string::append(&v548, v525, v526);
          if (SHIBYTE(v585) < 0) {
            operator delete((void *)v583);
          }
        }
        goto LABEL_839;
      }
    }
    AllLayerStacksUsingLayer  = (void **)pxrInternal__aapl__pxrReserved__::PcpCache::FindAllLayerStacksUsingLayer((uint64_t)a2, v541);
    v545  = 0;
    v546  = 0;
    v547  = 0;
    sub_216BED000(&v545, *AllLayerStacksUsingLayer, AllLayerStacksUsingLayer[1], ((char *)AllLayerStacksUsingLayer[1] - (char *)*AllLayerStacksUsingLayer) >> 4);
    if (v545 == v546)
    {
      if (v544)
      {
        v513  = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v541);
        v514  = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v513);
        v517  = *(char *)(v514 + 23) >= 0 ? v514 : *(void *)v514;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Layer @%s@ changed:  unused\n", v515, v516, v517);
        v518  = SHIBYTE(v585) >= 0 ? (const std::string::value_type *)&v583 : (const std::string::value_type *)v583;
        v519  = SHIBYTE(v585) >= 0 ? HIBYTE(v585) : (std::string::size_type)v584;
        std::string::append(&v548, v518, v519);
        if (SHIBYTE(v585) < 0) {
          operator delete((void *)v583);
        }
      }
      goto LABEL_838;
    }
    if (v544)
    {
      unsigned __int8 v104 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v541);
      uint64_t v105 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v104);
      int v106 = *(char *)(v105 + 23);
      uint64_t v107 = *(void *)v105;
      sub_21697A584((uint64_t)v538);
      if (v106 >= 0) {
        uint64_t v110 = v105;
      }
      else {
        uint64_t v110 = v107;
      }
      uint64_t v111 = (uint64_t ***)&v580;
      if ((v582 & 0x80u) != 0) {
        uint64_t v111 = (uint64_t ***)v580;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Changes to layer %s:\n%s", v108, v109, v110, v111);
      if (SHIBYTE(v585) >= 0) {
        std::string::size_type v112 = (const std::string::value_type *)&v583;
      }
      else {
        std::string::size_type v112 = (const std::string::value_type *)v583;
      }
      if (SHIBYTE(v585) >= 0) {
        std::string::size_type v113 = HIBYTE(v585);
      }
      else {
        std::string::size_type v113 = (std::string::size_type)v584;
      }
      std::string::append(&v548, v112, v113);
      if (SHIBYTE(v585) < 0) {
        operator delete((void *)v583);
      }
      if ((char)v582 < 0) {
        operator delete((void *)v580);
      }
    }
    sub_216981EE8((uint64_t)&v572, v573);
    v573  = 0;
    v574  = 0;
    v572  = (uint64_t *)&v573;
    sub_216BECF64((uint64_t)&v569, v570);
    v570  = 0;
    v571  = 0;
    v569  = (uint64_t *)&v570;
    sub_216BECF64((uint64_t)&v566, v567);
    v567  = 0;
    v568  = 0;
    v566  = (uint64_t *)&v567;
    uint64_t v114 = v563;
    for (uint64_t j = v564; j != v114; sub_216981128((uint64_t)&v565, j))
      j -= 2;
    v564  = v114;
    size_t v116 = v560;
    for (uint64_t k = v561; k != v116; sub_216981128((uint64_t)&v562, k))
      k -= 2;
    v561  = v116;
    uint64_t v118 = v557;
    for (uint64_t m = v558; m != v118; sub_216981128((uint64_t)&v559, m))
      m -= 2;
    v558  = v118;
    sub_216981EE8((uint64_t)&v554, v555);
    v555  = 0;
    v556  = 0;
    v554  = (uint64_t *)&v555;
    BOOL v121 = v538;
    if (*(_DWORD *)(v541 + 220) >= 2u) {
      BOOL v121 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)v538;
    }
    unsigned int v122 = *(_DWORD *)(v541 + 216);
    if (v122)
    {
      int v123 = 0;
      int v124 = 0;
      uint64_t v125 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v121 + 200 * v122);
      while (1)
      {
        if ((*((unsigned __int16 *)v121 + 96) | (*((unsigned __int8 *)v121 + 194) << 16)) >= 0x10000u) {
          IsPropertyPath  = (uint64_t)sub_216A5CF30(&v554, v121, v121);
        }
        uint64_t v128 = (void **)((char *)v121 + 8);
        if (*(void *)v121 != *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)IsPropertyPath))
        {
          IsPropertyPath  = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath(v121);
          if (!IsPropertyPath)
          {
            if ((IsUsd & 1) == 0)
            {
              IsPropertyPath  = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(v121);
              if (IsPropertyPath)
              {
                if ((*((_WORD *)v121 + 96) & 0x40) != 0)
                {
                  size_t v140 = v561;
                  if ((unint64_t)v561 >= v562)
                  {
                    std::string v141 = (_DWORD *)sub_216981B30((uint64_t *)&v560, (_DWORD *)v121 + 40);
                  }
                  else
                  {
                    sub_216981010(v561, (_DWORD *)v121 + 40);
                    sub_21698105C(v140 + 1, (_DWORD *)v121 + 41);
                    std::string v141 = v140 + 2;
                  }
                  v561  = v141;
                  BOOL v210 = v558;
                  if ((unint64_t)v558 >= v559)
                  {
                    IsPropertyPath  = sub_216981B30((uint64_t *)&v557, v121);
                  }
                  else
                  {
                    sub_216981010(v558, v121);
                    sub_21698105C(v210 + 1, (_DWORD *)v121 + 1);
                    IsPropertyPath  = (uint64_t)(v210 + 2);
                  }
                  v558  = (_DWORD *)IsPropertyPath;
                  if (v544)
                  {
                    uint64_t v211 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v541);
                    uint64_t v212 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v211);
                    uint64_t v213 = *(char *)(v212 + 23) >= 0 ? v212 : *(void *)v212;
                    int v214 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v121 + 160));
                    int v215 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v121);
                    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Renamed @%s@<%s> to <%s>\n", v216, v217, v213, v214, v215);
                    size_t v218 = SHIBYTE(v585) >= 0
                         ? (const std::string::value_type *)&v583
                         : (const std::string::value_type *)v583;
                    std::string::size_type v219 = SHIBYTE(v585) >= 0 ? HIBYTE(v585) : (std::string::size_type)v584;
                    IsPropertyPath  = (uint64_t)std::string::append(&v548, v218, v219);
                    if (SHIBYTE(v585) < 0) {
                      operator delete((void *)v583);
                    }
                  }
                }
                int v220 = (*((unsigned __int8 *)v121 + 194) >> 5) & 2 | (*((unsigned __int8 *)v121 + 194) >> 4) & 1 | (*((unsigned __int8 *)v121 + 194) >> 3) & 4 | (*((unsigned __int8 *)v121 + 194) >> 4) & 8 | (*((unsigned __int16 *)v121 + 96) >> 9) & 0x10 | (*((unsigned __int16 *)v121 + 96) >> 7) & 0x20;
                if (v220)
                {
                  v583  = (unint64_t)v121;
                  IsPropertyPath  = (uint64_t)sub_216BED1EC(&v566, (unint64_t *)v121, (uint64_t)&unk_2174BFD90, (_DWORD **)&v583);
                  *(_DWORD *)(IsPropertyPath + 36) |= v220;
                }
                uint64_t v221 = *((unsigned int *)v121 + 32);
                if (*((_DWORD *)v121 + 33) >= 4u) {
                  v222  = (void *)*((void *)v121 + 1);
                }
                else {
                  v222  = (void *)((char *)v121 + 8);
                }
                if (v221)
                {
                  uint64_t v223 = 40 * v221;
                  while (1)
                  {
                    IsPropertyPath  = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                    if (!IsPropertyPath) {
                      IsPropertyPath  = (uint64_t)sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                    }
                    if ((*v222 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(IsPropertyPath + 248) & 0xFFFFFFFFFFFFFFF8)) {
                      break;
                    }
                    v222 += 5;
                    v223 -= 40;
                    if (!v223) {
                      goto LABEL_282;
                    }
                  }
                  IsPropertyPath  = (uint64_t)sub_216A5CF30(&v572, v121, v121);
                }
              }
              else
              {
                IsPropertyPath  = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(v121);
                if (IsPropertyPath)
                {
                  __int16 v192 = *((_WORD *)v121 + 96);
                  if ((v192 & 0x4000) != 0)
                  {
                    v583  = (unint64_t)v121;
                    IsPropertyPath  = (uint64_t)sub_216BED1EC(&v566, (unint64_t *)v121, (uint64_t)&unk_2174BFD90, (_DWORD **)&v583);
                    *(_DWORD *)(IsPropertyPath + 36) |= 1u;
                    __int16 v192 = *((_WORD *)v121 + 96);
                  }
                  if (v192 < 0)
                  {
                    v583  = (unint64_t)v121;
                    IsPropertyPath  = (uint64_t)sub_216BED1EC(&v566, (unint64_t *)v121, (uint64_t)&unk_2174BFD90, (_DWORD **)&v583);
                    *(_DWORD *)(IsPropertyPath + 36) |= 2u;
                  }
                }
              }
            }
            goto LABEL_282;
          }
          if ((*((_WORD *)v121 + 96) & 0x40) != 0)
          {
            std::string::size_type v138 = v561;
            if ((unint64_t)v561 >= v562)
            {
              v139  = (_DWORD *)sub_216981B30((uint64_t *)&v560, (_DWORD *)v121 + 40);
            }
            else
            {
              sub_216981010(v561, (_DWORD *)v121 + 40);
              sub_21698105C(v138 + 1, (_DWORD *)v121 + 41);
              v139  = v138 + 2;
            }
            v561  = v139;
            std::string::size_type v171 = v558;
            if ((unint64_t)v558 >= v559)
            {
              uint64_t v172 = (_DWORD *)sub_216981B30((uint64_t *)&v557, v121);
            }
            else
            {
              sub_216981010(v558, v121);
              sub_21698105C(v171 + 1, (_DWORD *)v121 + 1);
              uint64_t v172 = v171 + 2;
            }
            v558  = v172;
            if (v544)
            {
              uint64_t v173 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v541);
              uint64_t v174 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v173);
              uint64_t v175 = *(char *)(v174 + 23) >= 0 ? v174 : *(void *)v174;
              int v176 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v121 + 160));
              size_t v177 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v121);
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Renamed @%s@<%s> to <%s>\n", v178, v179, v175, v176, v177);
              uint64_t v180 = SHIBYTE(v585) >= 0 ? (const std::string::value_type *)&v583 : (const std::string::value_type *)v583;
              std::string::size_type v181 = SHIBYTE(v585) >= 0 ? HIBYTE(v585) : (std::string::size_type)v584;
              std::string::append(&v548, v180, v181);
              if (SHIBYTE(v585) < 0) {
                operator delete((void *)v583);
              }
            }
          }
          int v182 = (*((unsigned __int8 *)v121 + 194) >> 1) & 2 | *((unsigned char *)v121 + 194) & 1 | (4
                                                                                           * ((*((unsigned __int8 *)v121
                                                                                               + 194) >> 1) & 1)) | *((unsigned char *)v121 + 194) & 8;
          if (v182)
          {
            v583  = (unint64_t)v121;
            std::string::size_type v183 = sub_216BED1EC(&v566, (unint64_t *)v121, (uint64_t)&unk_2174BFD90, (_DWORD **)&v583);
            *((_DWORD *)v183 + 9) |= v182;
          }
          if ((*((_WORD *)v121 + 96) & 0x780) != 0)
          {
LABEL_277:
            sub_216A5CF30(&v572, v121, v121);
          }
          else
          {
            uint64_t v185 = *((unsigned int *)v121 + 32);
            if (*((_DWORD *)v121 + 33) >= 4u) {
              uint64_t v186 = (void *)*((void *)v121 + 1);
            }
            else {
              uint64_t v186 = (void *)((char *)v121 + 8);
            }
            if (v185)
            {
              uint64_t v187 = 40 * v185;
              do
              {
                int v188 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if (!v188) {
                  int v188 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                }
                if ((*v186 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v188 + 30) & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_277;
                }
                v189  = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if (!v189) {
                  v189  = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                }
                if ((*v186 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v189 + 31) & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_277;
                }
                char v190 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if (!v190) {
                  char v190 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                }
                if ((*v186 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v190 + 57) & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_277;
                }
                std::string::size_type v191 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if (!v191) {
                  std::string::size_type v191 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                }
                if ((*v186 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v191 + 25) & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_277;
                }
                v186 += 5;
                v187 -= 40;
              }
              while (v187);
            }
            if (pxrInternal__aapl__pxrReserved__::PcpCache::HasAnyDynamicFileFormatArgumentFieldDependencies(v542))
            {
              uint64_t v198 = *((unsigned int *)v121 + 32);
              unint64_t v199 = *((_DWORD *)v121 + 33) >= 4u
                   ? (const pxrInternal__aapl__pxrReserved__::TfToken *)*((void *)v121 + 1)
                   : (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v121 + 8);
              if (v198)
              {
                uint64_t v200 = 40 * v198;
                while (!pxrInternal__aapl__pxrReserved__::PcpCache::IsPossibleDynamicFileFormatArgumentField(v542, v199))
                {
                  unint64_t v199 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v199 + 40);
                  v200 -= 40;
                  if (!v200) {
                    goto LABEL_278;
                  }
                }
                if (v544)
                {
                  unint64_t v239 = *(void *)v199 & 0xFFFFFFFFFFFFFFF8;
                  if (v239)
                  {
                    int v240 = (const char *)(v239 + 16);
                    if (*(char *)(v239 + 39) < 0) {
                      int v240 = *(const char **)v240;
                    }
                  }
                  else
                  {
                    int v240 = "";
                  }
                  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Info change for field '%s' may affect dynamic file format arguments\n", v201, v202, v240);
                  if (SHIBYTE(v585) >= 0) {
                    size_t v241 = (const std::string::value_type *)&v583;
                  }
                  else {
                    size_t v241 = (const std::string::value_type *)v583;
                  }
                  if (SHIBYTE(v585) >= 0) {
                    std::string::size_type v242 = HIBYTE(v585);
                  }
                  else {
                    std::string::size_type v242 = (std::string::size_type)v584;
                  }
                  std::string::append(&v548, v241, v242);
                  if (SHIBYTE(v585) < 0) {
                    operator delete((void *)v583);
                  }
                  size_t v243 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v541);
                  v244  = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v243);
                  if (*(char *)(v244 + 23) >= 0) {
                    uint64_t v245 = v244;
                  }
                  else {
                    uint64_t v245 = *(void *)v244;
                  }
                  BOOL v246 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v121);
                  uint64_t v247 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier((pxrInternal__aapl__pxrReserved__::PcpCache *)v542);
                  uint64_t v248 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v247);
                  v249  = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v248);
                  if (*(char *)(v249 + 23) >= 0) {
                    uint64_t v252 = v249;
                  }
                  else {
                    uint64_t v252 = *(void *)v249;
                  }
                  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Info change on @%s@<%s> may affect file format arguments in cache '%s'\n", v250, v251, v245, v246, v252);
                  if (SHIBYTE(v585) >= 0) {
                    uint64_t v253 = (const std::string::value_type *)&v583;
                  }
                  else {
                    uint64_t v253 = (const std::string::value_type *)v583;
                  }
                  if (SHIBYTE(v585) >= 0) {
                    std::string::size_type v254 = HIBYTE(v585);
                  }
                  else {
                    std::string::size_type v254 = (std::string::size_type)v584;
                  }
                  std::string::append(&v548, v253, v254);
                  if (SHIBYTE(v585) < 0) {
                    operator delete((void *)v583);
                  }
                }
                int v255 = v564;
                if ((unint64_t)v564 >= v565)
                {
                  int v256 = (_DWORD *)sub_216981B30((uint64_t *)&v563, v121);
                }
                else
                {
                  sub_216981010(v564, v121);
                  sub_21698105C(v255 + 1, (_DWORD *)v121 + 1);
                  int v256 = v255 + 2;
                }
                v564  = v256;
              }
            }
          }
LABEL_278:
          uint64_t v184 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v184) {
            uint64_t v184 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          IsPropertyPath  = sub_216BE7A38((uint64_t *)v121 + 1, (void *)v184 + 36);
          if (IsPropertyPath) {
            v123 |= 4u;
          }
          goto LABEL_282;
        }
        if ((*((_WORD *)v121 + 96) & 4) != 0) {
          sub_216A5CF30(&v572, v121, v121);
        }
        uint64_t v129 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v129) {
          uint64_t v129 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        unsigned int v130 = *((_DWORD *)v121 + 33);
        uint64_t v131 = (void *)((char *)v121 + 8);
        if (v130 >= 4) {
          uint64_t v131 = *v128;
        }
        uint64_t v132 = *((unsigned int *)v121 + 32);
        if (v132)
        {
          std::string::size_type v133 = &v131[5 * v132];
          uint64_t v134 = 40 * v132;
          while ((*v131 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v129 + 12) & 0xFFFFFFFFFFFFFFF8))
          {
            v131 += 5;
            v134 -= 40;
            if (!v134)
            {
              uint64_t v131 = v133;
              break;
            }
          }
        }
        uint64_t v135 = (void *)((char *)v121 + 8);
        if (v130 >= 4) {
          uint64_t v135 = *v128;
        }
        if (v131 != &v135[5 * v132])
        {
          v580  = 0;
          uint64_t v136 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216BE6ED0((pxrInternal__aapl__pxrReserved__::VtValue *)(v131 + 1), (atomic_uint **)&v580, (atomic_uint **)&v583);
          if ((v580 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v580 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v583 & 0xFFFFFFFFFFFFFFF8) != 0) {
            EmptyString  = (uint64_t *)((v583 & 0xFFFFFFFFFFFFFFF8) + 16);
          }
          else {
            EmptyString  = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v136);
          }
          IsValiduint64_t Identifier = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier((uint64_t)EmptyString);
          if (IsValidIdentifier)
          {
            std::string v143 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(IsValidIdentifier);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v143, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v583, &v580);
          }
          else
          {
            BOOL v144 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(IsValidIdentifier);
            sub_216981010(&v580, v144);
            sub_21698105C((_DWORD *)&v580 + 1, v144 + 1);
          }
          sub_216A5CF30(&v572, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v580, &v580);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v580 + 1);
          sub_21697C414(&v580);
          v577  = 0;
          char v145 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216BE6ED0((pxrInternal__aapl__pxrReserved__::VtValue *)(v131 + 3), (atomic_uint **)&v577, (atomic_uint **)&v580);
          if ((v583 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v583 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          unint64_t v146 = v580;
          v583  = v580;
          v580  = 0;
          if ((v577 & 7) != 0)
          {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v577 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            unint64_t v146 = v583;
          }
          unint64_t v147 = v146 & 0xFFFFFFFFFFFFFFF8;
          if (v147) {
            std::string::size_type v148 = (uint64_t *)(v147 + 16);
          }
          else {
            std::string::size_type v148 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v145);
          }
          unint64_t v149 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier((uint64_t)v148);
          if (v149)
          {
            std::string v150 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v149);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v150, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v583, &v580);
          }
          else
          {
            long long v151 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v149);
            sub_216981010(&v580, v151);
            sub_21698105C((_DWORD *)&v580 + 1, v151 + 1);
          }
          sub_216A5CF30(&v572, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v580, &v580);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v580 + 1);
          sub_21697C414(&v580);
          if ((v583 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v583 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        if ((*((_WORD *)v121 + 96) & 5) != 0) {
          goto LABEL_218;
        }
        uint64_t v161 = *((unsigned int *)v121 + 32);
        uint64_t v162 = *((_DWORD *)v121 + 33) >= 4u
             ? (pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)v121 + 1)
             : (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v121 + 8);
        if (v161) {
          break;
        }
LABEL_250:
        std::string::size_type v167 = (uint64_t *)*((void *)v121 + 18);
        v583  = *((void *)v121 + 17);
        v584  = v167;
        if ((uint64_t *)v583 != v167)
        {
          do
          {
            if (!*(_DWORD *)(*sub_216A60A64(&v583, v126, v127) + 24)
              || *(_DWORD *)(*sub_216A60A64(&v583, v168, v169) + 24) == 1)
            {
              v123 |= 1u;
              uint64_t v204 = *((void *)v121 + 17);
              uint64_t v203 = *((void *)v121 + 18);
              while (v204 != v203)
              {
                v205  = *(_DWORD *)(v204 + 24);
                if (v205 <= 1)
                {
                  v583  = 0;
                  v584  = 0;
                  v585  = 0;
                  pxrInternal__aapl__pxrReserved__::PcpChanges::_DidAddOrRemoveSublayer(a1, (pxrInternal__aapl__pxrReserved__::PcpCache *)v542, (uint64_t *)&v545, (uint64_t *)v541, (uint64_t *)v204, v205 != 0, v536, (uint64_t)&v583);
                  if (v546 != v545)
                  {
                    uint64_t v206 = 0;
                    v207  = 0;
                    uint64_t v208 = ((char *)v546 - (char *)v545) >> 4;
                    do
                    {
                      if ((*(void *)(v583 + ((v207 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v207))
                      {
                        v580  = (unint64_t)&v545[v206];
                        int v209 = sub_216BED150(&v549, (uint64_t)&v545[v206], (uint64_t)&unk_2174BFD90, (uint64_t **)&v580);
                        *((_DWORD *)v209 + 12) |= 8u;
                      }
                      ++v207;
                      v206 += 2;
                    }
                    while (v208 != v207);
                  }
                  if (v583) {
                    operator delete((void *)v583);
                  }
                }
                v204 += 32;
              }
              goto LABEL_230;
            }
            sub_216A60AE0(&v583);
          }
          while ((uint64_t *)v583 != v584);
          for (uint64_t n = *((void *)v121 + 17); n != *((void *)v121 + 18); n += 32)
          {
            if (*(_DWORD *)(n + 24) == 2) {
              goto LABEL_378;
            }
          }
        }
        std::string v193 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v193) {
          std::string v193 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        std::string v194 = (char *)*((void *)v121 + 1);
        uint64_t v195 = *((unsigned int *)v121 + 32);
        if (*((_DWORD *)v121 + 33) < 4u) {
          std::string v194 = (char *)v121 + 8;
        }
        if (v195)
        {
          uint64_t v196 = 40 * v195;
          int64_t v197 = v194;
          while ((*(void *)v197 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v193 + 55) & 0xFFFFFFFFFFFFFFF8))
          {
            v197 += 40;
            v196 -= 40;
            if (!v196) {
              goto LABEL_230;
            }
          }
        }
        else
        {
          int64_t v197 = v194;
        }
        if (v197 == &v194[40 * v195]) {
          goto LABEL_230;
        }
        if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(v197 + 8), (std::type_info *)(v197 + 24), v127))
        {
          int v124 = 1;
        }
        else
        {
          if (!*((void *)v197 + 2))
          {
            uint64_t v224 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v541);
            Schema  = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetSchema(v224);
            uint64_t v226 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v226) {
              uint64_t v226 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v226 + 440));
            if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(Fallback, (std::type_info *)(v197 + 24), v228))goto LABEL_230; {
          }
            }
          if (!*((void *)v197 + 4))
          {
            int64_t v229 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v541);
            size_t v230 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetSchema(v229);
            v231  = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v231) {
              v231  = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            size_t v232 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v230, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v231 + 440));
            if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v232, (std::type_info *)(v197 + 8), v233))goto LABEL_230; {
          }
            }
LABEL_378:
          sub_216A5CF30(&v572, v121, v121);
          v123 |= 2u;
          if (v544)
          {
            size_t v234 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v541);
            uint64_t v235 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v234);
            if (*(char *)(v235 + 23) >= 0) {
              uint64_t v238 = v235;
            }
            else {
              uint64_t v238 = *(void *)v235;
            }
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Layer @%s@ changed:  layer offsets (significant)\n", v236, v237, v238);
            if (SHIBYTE(v585) >= 0) {
              uint64_t v157 = (const std::string::value_type *)&v583;
            }
            else {
              uint64_t v157 = (const std::string::value_type *)v583;
            }
            if (SHIBYTE(v585) >= 0) {
              std::string::size_type v158 = HIBYTE(v585);
            }
            else {
              std::string::size_type v158 = (std::string::size_type)v584;
            }
LABEL_228:
            std::string::append(&v548, v157, v158);
            if (SHIBYTE(v585) < 0) {
              operator delete((void *)v583);
            }
          }
        }
LABEL_230:
        int v159 = *((unsigned __int16 *)v121 + 96);
        size_t v160 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v160) {
          size_t v160 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        IsPropertyPath  = sub_216BE7A38((uint64_t *)v121 + 1, (void *)v160 + 19);
        if (IsPropertyPath) {
          v123 |= (8 * v159) & 0x10 | 0x20;
        }
        else {
          v123 |= (8 * v159) & 0x10;
        }
LABEL_282:
        BOOL v121 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v121 + 200);
        if (v121 == v125)
        {
          a2  = (pxrInternal__aapl__pxrReserved__::PcpCache *)v542;
          if (v124)
          {
            pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpCache *)v542, (uint64_t *)&v580);
            size_t v257 = sub_216BCA2D4(&v580);
            if (v258 & 1 | (unint64_t)v257
              && pxrInternal__aapl__pxrReserved__::Pcp_NeedToRecomputeLayerStackTimeCodesPerSecond((uint64_t *)&v580, v541))
            {
              if (v544)
              {
                size_t v259 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v541);
                v260  = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v259);
                uint64_t v263 = *(char *)(v260 + 23) >= 0 ? v260 : *(void *)v260;
                pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Layer @%s@ changed:  root layer stack TCPS (significant)\n", v261, v262, v263);
                uint64_t v264 = SHIBYTE(v585) >= 0
                     ? (const std::string::value_type *)&v583
                     : (const std::string::value_type *)v583;
                std::string::size_type v265 = SHIBYTE(v585) >= 0 ? HIBYTE(v585) : (std::string::size_type)v584;
                std::string::append(&v548, v264, v265);
                if (SHIBYTE(v585) < 0) {
                  operator delete((void *)v583);
                }
              }
              v583  = (unint64_t)&v580;
              uint64_t v266 = sub_216BED150(&v549, (uint64_t)&v580, (uint64_t)&unk_2174BFD90, (uint64_t **)&v583);
              *((_DWORD *)v266 + 12) |= 2u;
              uint64_t v267 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v266);
              pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, (const pxrInternal__aapl__pxrReserved__::PcpCache *)v542, v267);
            }
            std::string::size_type v268 = v581;
            if (v581
              && atomic_fetch_add_explicit((atomic_uint *volatile)(v581 + 8), 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(std::string::size_type))(*(void *)v268 + 8))(v268);
            }
          }
          if (v123)
          {
            int v270 = v545;
            int v269 = v546;
            while (v270 != v269)
            {
              v583  = (unint64_t)v270;
              size_t v271 = sub_216BED150(&v549, (uint64_t)v270, (uint64_t)&unk_2174BFD90, (uint64_t **)&v583);
              *((_DWORD *)v271 + 12) |= v123;
              v270 += 2;
            }
          }
          goto LABEL_442;
        }
      }
      v163  = 40 * v161;
      while (1)
      {
        size_t v164 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v164) {
          size_t v164 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if ((*(void *)v162 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v164 + 29) & 0xFFFFFFFFFFFFFFF8)) {
          break;
        }
        uint64_t v165 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v165) {
          uint64_t v165 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if ((*(void *)v162 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v165 + 37) & 0xFFFFFFFFFFFFFFF8)) {
          break;
        }
        uint64_t v166 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v166) {
          uint64_t v166 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if ((*(void *)v162 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v166 + 23) & 0xFFFFFFFFFFFFFFF8)) {
          break;
        }
        uint64_t v162 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v162 + 40);
        v163 -= 40;
        if (!v163) {
          goto LABEL_250;
        }
      }
LABEL_218:
      sub_216A5CF30(&v572, v121, v121);
      v123 |= 9u;
      if (v544)
      {
        std::string::size_type v152 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v541);
        uint64_t v153 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v152);
        if (*(char *)(v153 + 23) >= 0) {
          uint64_t v156 = v153;
        }
        else {
          uint64_t v156 = *(void *)v153;
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Layer @%s@ changed:  significant\n", v154, v155, v156);
        if (SHIBYTE(v585) >= 0) {
          uint64_t v157 = (const std::string::value_type *)&v583;
        }
        else {
          uint64_t v157 = (const std::string::value_type *)v583;
        }
        if (SHIBYTE(v585) >= 0) {
          std::string::size_type v158 = HIBYTE(v585);
        }
        else {
          std::string::size_type v158 = (std::string::size_type)v584;
        }
        goto LABEL_228;
      }
      goto LABEL_230;
    }
LABEL_442:
    std::string::size_type v272 = v566;
    ilong long i = v544;
    if (v566 != (uint64_t *)&v567)
    {
      while (1)
      {
        v274  = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v272 + 28));
        int v275 = *((_DWORD *)v272 + 9);
        if (!v274) {
          break;
        }
        if ((v275 & 0xC) != 0)
        {
          sub_216A5CF30(&v572, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v272 + 28), (_DWORD *)v272 + 7);
        }
        else if ((v275 & 3) != 0)
        {
          v583  = (unint64_t)v272 + 28;
          BOOL v276 = sub_216BED1EC(&v569, (unint64_t *)((char *)v272 + 28), (uint64_t)&unk_2174BFD90, (_DWORD **)&v583);
          int v277 = 1;
LABEL_456:
          *((_DWORD *)v276 + 9) |= v277;
        }
LABEL_457:
        int v281 = (uint64_t *)v272[1];
        if (v281)
        {
          do
          {
            size_t v282 = v281;
            int v281 = (uint64_t *)*v281;
          }
          while (v281);
        }
        else
        {
          do
          {
            size_t v282 = (uint64_t *)v272[2];
            BOOL v458 = *v282 == (void)v272;
            std::string::size_type v272 = v282;
          }
          while (!v458);
        }
        std::string::size_type v272 = v282;
        if (v282 == (uint64_t *)&v567) {
          goto LABEL_463;
        }
      }
      if ((v275 & 0xC) != 0)
      {
        sub_216A5CF30(&v572, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v272 + 28), (_DWORD *)v272 + 7);
      }
      else if ((v275 & 3) != 0)
      {
        v583  = (unint64_t)v272 + 28;
        uint64_t v278 = sub_216BED1EC(&v569, (unint64_t *)((char *)v272 + 28), (uint64_t)&unk_2174BFD90, (_DWORD **)&v583);
        *((_DWORD *)v278 + 9) |= 1u;
      }
      int v279 = *((_DWORD *)v272 + 9);
      if ((v279 & 0x10) != 0)
      {
        v583  = (unint64_t)v272 + 28;
        int v280 = sub_216BED1EC(&v569, (unint64_t *)((char *)v272 + 28), (uint64_t)&unk_2174BFD90, (_DWORD **)&v583);
        *((_DWORD *)v280 + 9) |= 2u;
        int v279 = *((_DWORD *)v272 + 9);
      }
      if ((v279 & 0x20) == 0) {
        goto LABEL_457;
      }
      v583  = (unint64_t)v272 + 28;
      BOOL v276 = sub_216BED1EC(&v569, (unint64_t *)((char *)v272 + 28), (uint64_t)&unk_2174BFD90, (_DWORD **)&v583);
      int v277 = 4;
      goto LABEL_456;
    }
LABEL_463:
    uint64_t v283 = v572;
    if (v572 != (uint64_t *)&v573)
    {
      do
      {
        size_t v284 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216BE2740((uint64_t)&v554, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v283 + 28));
        if (*(uint64_t *)((char *)v283 + 28) == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v284)) {
          int v285 = 1;
        }
        else {
          int v285 = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v283 + 28));
        }
        pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(a2, (uint64_t *)v541, (int *)v283 + 7, 63, v285, 0, v284 == 0, (uint64_t *)&v583);
        if (v544)
        {
          v288  = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
          uint64_t v289 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v288);
          uint64_t v290 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v289);
          if (*(char *)(v290 + 23) >= 0) {
            uint64_t v291 = v290;
          }
          else {
            uint64_t v291 = *(void *)v290;
          }
          if (v285) {
            uint64_t v292 = "recurse on prim descendants";
          }
          else {
            uint64_t v292 = "do not recurse on prim descendants";
          }
          int v293 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v541);
          uint64_t v294 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v293);
          int v295 = *(char *)(v294 + 23);
          uint64_t v296 = *(void *)v294;
          size_t v297 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v283 + 28));
          if (v295 >= 0) {
            uint64_t v300 = v294;
          }
          else {
            uint64_t v300 = v296;
          }
          uint64_t v301 = " (not restricted to existing caches)";
          if (!v284) {
            uint64_t v301 = " (restricted to existing caches)";
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"   Resync following in @%s@ %s due to Sdf site @%s@<%s>%s:\n", v298, v299, v291, v292, v300, v297, v301);
          if ((v582 & 0x80u) == 0) {
            uint64_t v302 = (const std::string::value_type *)&v580;
          }
          else {
            uint64_t v302 = (const std::string::value_type *)v580;
          }
          if ((v582 & 0x80u) == 0) {
            std::string::size_type v303 = v582;
          }
          else {
            std::string::size_type v303 = v581;
          }
          std::string::append(&v548, v302, v303);
          if ((char)v582 < 0) {
            operator delete((void *)v580);
          }
        }
        int v305 = (uint64_t *)v583;
        int v304 = v584;
        for (ilong long i = v544; v305 != v304; v305 += 9)
        {
          if (v544)
          {
            size_t v306 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v305);
            unint64_t v307 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v305 + 1));
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    <%s> depends on <%s>\n", v308, v309, v306, v307);
            size_t v310 = (v582 & 0x80u) == 0 ? (const std::string::value_type *)&v580 : (const std::string::value_type *)v580;
            std::string::size_type v311 = (v582 & 0x80u) == 0 ? v582 : v581;
            std::string::append(&v548, v310, v311);
            if ((char)v582 < 0) {
              operator delete((void *)v580);
            }
          }
          pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v305);
        }
        if (v544)
        {
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"   Resync end\n", v286, v287);
          unint64_t v312 = (v582 & 0x80u) == 0 ? (const std::string::value_type *)&v580 : (const std::string::value_type *)v580;
          std::string::size_type v313 = (v582 & 0x80u) == 0 ? v582 : v581;
          std::string::append(&v548, v312, v313);
          if ((char)v582 < 0) {
            operator delete((void *)v580);
          }
        }
        v580  = (unint64_t)&v583;
        sub_216BE117C((void ***)&v580);
        uint64_t v314 = (uint64_t *)v283[1];
        if (v314)
        {
          do
          {
            uint64_t v315 = v314;
            uint64_t v314 = (uint64_t *)*v314;
          }
          while (v314);
        }
        else
        {
          do
          {
            uint64_t v315 = (uint64_t *)v283[2];
            BOOL v458 = *v315 == (void)v283;
            uint64_t v283 = v315;
          }
          while (!v458);
        }
        uint64_t v283 = v315;
      }
      while (v315 != (uint64_t *)&v573);
    }
    uint64_t v317 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v563;
    uint64_t v316 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v564;
    v537  = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v564;
    while (v317 != v316)
    {
      uint64_t v318 = sub_216BE2740((uint64_t)&v554, v317);
      v539  = v317;
      Entry  = (unsigned int *)pxrInternal__aapl__pxrReserved__::SdfChangeList::GetEntry(v538, v317);
      if (*(void *)v317 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)Entry)) {
        v320  = 1;
      }
      else {
        v320  = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath(v317);
      }
      pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(a2, (uint64_t *)v541, (int *)v317, 63, v320, 0, v318 == 0, (uint64_t *)&v575);
      if (ii)
      {
        v323  = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
        unint64_t v324 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v323);
        v325  = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v324);
        if (*(char *)(v325 + 23) >= 0) {
          v326  = v325;
        }
        else {
          v326  = *(void *)v325;
        }
        if (v320) {
          v327  = "recurse on prim descendants";
        }
        else {
          v327  = "do not recurse on prim descendants";
        }
        uint64_t v328 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v541);
        v329  = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v328);
        int v330 = *(char *)(v329 + 23);
        uint64_t v331 = *(void *)v329;
        uint64_t v332 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v539);
        if (v330 >= 0) {
          v335  = v329;
        }
        else {
          v335  = v331;
        }
        uint64_t v336 = " (not restricted to existing caches)";
        if (!v318) {
          uint64_t v336 = " (restricted to existing caches)";
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"   Resync following in @%s@ %s due to Sdf site @%s@<%s>%s:\n", v333, v334, v326, v327, v335, v332, v336);
        if (SHIBYTE(v585) >= 0) {
          v337  = (const std::string::value_type *)&v583;
        }
        else {
          v337  = (const std::string::value_type *)v583;
        }
        if (SHIBYTE(v585) >= 0) {
          std::string::size_type v338 = HIBYTE(v585);
        }
        else {
          std::string::size_type v338 = (std::string::size_type)v584;
        }
        std::string::append(&v548, v337, v338);
        ilong long i = v544;
        if (SHIBYTE(v585) < 0) {
          operator delete((void *)v583);
        }
      }
      v339  = (uint64_t *)v575;
      v540  = (uint64_t *)v576;
      if (v575 != v576)
      {
        do
        {
          if (ii)
          {
            unint64_t v340 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v339);
            uint64_t v341 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v339 + 1));
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    <%s> depends on <%s>\n", v342, v343, v340, v341);
            if (SHIBYTE(v585) >= 0) {
              v344  = (const std::string::value_type *)&v583;
            }
            else {
              v344  = (const std::string::value_type *)v583;
            }
            if (SHIBYTE(v585) >= 0) {
              v345  = HIBYTE(v585);
            }
            else {
              v345  = (std::string::size_type)v584;
            }
            std::string::append(&v548, v344, v345);
            if (SHIBYTE(v585) < 0) {
              operator delete((void *)v583);
            }
            uint64_t v346 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
            v347  = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v346);
            v348  = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v347);
            v349  = *(char *)(v348 + 23);
            uint64_t v350 = *(void *)v348;
            v351  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v339);
            if (v349 >= 0) {
              v354  = v348;
            }
            else {
              v354  = v350;
            }
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Pcp_DoesInfoChangeAffectFileFormatArguments %s:%s?\n", v352, v353, v354, v351);
            if (SHIBYTE(v585) >= 0) {
              v355  = (const std::string::value_type *)&v583;
            }
            else {
              v355  = (const std::string::value_type *)v583;
            }
            if (SHIBYTE(v585) >= 0) {
              std::string::size_type v356 = HIBYTE(v585);
            }
            else {
              std::string::size_type v356 = (std::string::size_type)v584;
            }
            std::string::append(&v548, v355, v356);
            if (SHIBYTE(v585) < 0) {
              operator delete((void *)v583);
            }
            DynamicFileFormatArgumentDependencyData  = (pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *)pxrInternal__aapl__pxrReserved__::PcpCache::GetDynamicFileFormatArgumentDependencyData((uint64_t)v542, (unsigned int *)v339);
            if (*(void *)DynamicFileFormatArgumentDependencyData)
            {
LABEL_569:
              v360  = Entry[30];
              if (Entry[31] >= 4) {
                v361  = *(unsigned int **)Entry;
              }
              else {
                v361  = Entry;
              }
              if (v360)
              {
                v362  = 40 * v360;
                while (1)
                {
                  int v363 = pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::CanFieldChangeAffectFileFormatArguments(DynamicFileFormatArgumentDependencyData, (const pxrInternal__aapl__pxrReserved__::TfToken *)v361, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v361 + 2), (const pxrInternal__aapl__pxrReserved__::VtValue *)(v361 + 6));
                  if (ii)
                  {
                    v364  = *(void *)v361 & 0xFFFFFFFFFFFFFFF8;
                    if (v364)
                    {
                      v365  = (const char *)(v364 + 16);
                      if (*(char *)(v364 + 39) < 0) {
                        v365  = *(const char **)v365;
                      }
                    }
                    else
                    {
                      v365  = "";
                    }
                    sub_216928738((uint64_t)(v361 + 2));
                    if ((v582 & 0x80u) == 0) {
                      uint64_t v366 = (uint64_t ***)&v580;
                    }
                    else {
                      uint64_t v366 = (uint64_t ***)v580;
                    }
                    sub_216928738((uint64_t)(v361 + 6));
                    v367  = (char)v579;
                    v368  = v577;
                    v369  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v339);
                    v372  = &v577;
                    if (v367 < 0) {
                      v372  = (unint64_t *)v368;
                    }
                    v373  = "is NOT";
                    if (v363) {
                      v373  = "IS";
                    }
                    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Field '%s' change: %s -> %s %s relevant for prim index path '%s'\n", v370, v371, v365, v366, v372, v373, v369);
                    if (SHIBYTE(v585) >= 0) {
                      v374  = (const std::string::value_type *)&v583;
                    }
                    else {
                      v374  = (const std::string::value_type *)v583;
                    }
                    if (SHIBYTE(v585) >= 0) {
                      std::string::size_type v375 = HIBYTE(v585);
                    }
                    else {
                      std::string::size_type v375 = (std::string::size_type)v584;
                    }
                    std::string::append(&v548, v374, v375);
                    if (SHIBYTE(v585) < 0) {
                      operator delete((void *)v583);
                    }
                    ilong long i = v544;
                    if ((char)v579 < 0) {
                      operator delete((void *)v577);
                    }
                    if ((char)v582 < 0) {
                      operator delete((void *)v580);
                    }
                  }
                  if (v363) {
                    break;
                  }
                  v361 += 10;
                  v362 -= 40;
                  if (!v362) {
                    goto LABEL_602;
                  }
                }
                pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, (const pxrInternal__aapl__pxrReserved__::PcpCache *)v542, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v339);
              }
              goto LABEL_602;
            }
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Prim index has no dynamic file format dependencies\n", v321, v322);
            if (SHIBYTE(v585) >= 0) {
              v358  = (const std::string::value_type *)&v583;
            }
            else {
              v358  = (const std::string::value_type *)v583;
            }
            if (SHIBYTE(v585) >= 0) {
              v359  = HIBYTE(v585);
            }
            else {
              v359  = (std::string::size_type)v584;
            }
            std::string::append(&v548, v358, v359);
            if (SHIBYTE(v585) < 0) {
              operator delete((void *)v583);
            }
          }
          else
          {
            DynamicFileFormatArgumentDependencyData  = (pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *)pxrInternal__aapl__pxrReserved__::PcpCache::GetDynamicFileFormatArgumentDependencyData((uint64_t)a2, (unsigned int *)v339);
            if (*(void *)DynamicFileFormatArgumentDependencyData) {
              goto LABEL_569;
            }
          }
LABEL_602:
          v339 += 9;
          a2  = (pxrInternal__aapl__pxrReserved__::PcpCache *)v542;
        }
        while (v339 != v540);
      }
      if (ii)
      {
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"   Resync end\n", v321, v322);
        if (SHIBYTE(v585) >= 0) {
          int64x2_t v376 = (const std::string::value_type *)&v583;
        }
        else {
          int64x2_t v376 = (const std::string::value_type *)v583;
        }
        if (SHIBYTE(v585) >= 0) {
          v377  = HIBYTE(v585);
        }
        else {
          v377  = (std::string::size_type)v584;
        }
        std::string::append(&v548, v376, v377);
        if (SHIBYTE(v585) < 0) {
          operator delete((void *)v583);
        }
      }
      v583  = (unint64_t)&v575;
      sub_216BE117C((void ***)&v583);
      uint64_t v317 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v539 + 8);
      uint64_t v316 = v537;
    }
    uint64_t v378 = v551;
    v379  = v552;
LABEL_614:
    if (v378 != v379)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v378, &v583);
      v380  = sub_216BE2740((uint64_t)&v554, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v583);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v583 + 1);
      sub_21697C414(&v583);
      PrimPath  = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v378, &v586);
      v382  = (pxrInternal__aapl__pxrReserved__::PcpCache **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(PrimPath);
      if (v586 == *v382) {
        int v383 = 1;
      }
      else {
        int v383 = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v586);
      }
      pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(a2, (uint64_t *)v541, (int *)&v586, 63, v383, 0, v380 == 0, (uint64_t *)&v575);
      if (v544)
      {
        v386  = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
        uint64_t v387 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v386);
        uint64_t v388 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v387);
        if (*(char *)(v388 + 23) >= 0) {
          uint64_t v389 = v388;
        }
        else {
          uint64_t v389 = *(void *)v388;
        }
        if (v383) {
          v390  = "recurse on prim descendants";
        }
        else {
          v390  = "do not recurse on prim descendants";
        }
        uint64_t v391 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v541);
        v392  = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v391);
        int v393 = *(char *)(v392 + 23);
        v394  = *(void *)v392;
        uint64_t v395 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v586);
        if (v393 >= 0) {
          v398  = v392;
        }
        else {
          v398  = v394;
        }
        v399  = " (not restricted to existing caches)";
        if (!v380) {
          v399  = " (restricted to existing caches)";
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"   Resync following in @%s@ %s due to Sdf site @%s@<%s>%s:\n", v396, v397, v389, v390, v398, v395, v399);
        if (SHIBYTE(v585) >= 0) {
          uint64_t v400 = (const std::string::value_type *)&v583;
        }
        else {
          uint64_t v400 = (const std::string::value_type *)v583;
        }
        if (SHIBYTE(v585) >= 0) {
          v401  = HIBYTE(v585);
        }
        else {
          v401  = (std::string::size_type)v584;
        }
        std::string::append(&v548, v400, v401);
        if (SHIBYTE(v585) < 0) {
          operator delete((void *)v583);
        }
      }
      std::string::size_type v403 = (uint64_t *)v575;
      v402  = (uint64_t *)v576;
      while (1)
      {
        if (v403 == v402)
        {
          if (v544)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"   Resync end\n", v384, v385);
            int v445 = SHIBYTE(v585) >= 0 ? (const std::string::value_type *)&v583 : (const std::string::value_type *)v583;
            v446  = SHIBYTE(v585) >= 0 ? HIBYTE(v585) : (std::string::size_type)v584;
            std::string::append(&v548, v445, v446);
            if (SHIBYTE(v585) < 0) {
              operator delete((void *)v583);
            }
          }
          v583  = (unint64_t)&v575;
          sub_216BE117C((void ***)&v583);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v586 + 1);
          sub_21697C414(&v586);
          v378 += 2;
          goto LABEL_614;
        }
        if (v544)
        {
          v404  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v403);
          v405  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v403 + 1));
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    <%s> depends on <%s>\n", v406, v407, v404, v405);
          if (SHIBYTE(v585) >= 0) {
            v408  = (const std::string::value_type *)&v583;
          }
          else {
            v408  = (const std::string::value_type *)v583;
          }
          if (SHIBYTE(v585) >= 0) {
            v409  = HIBYTE(v585);
          }
          else {
            v409  = (std::string::size_type)v584;
          }
          std::string::append(&v548, v408, v409);
          if (SHIBYTE(v585) < 0) {
            operator delete((void *)v583);
          }
          uint64_t v410 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
          v411  = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v410);
          uint64_t v412 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v411);
          v413  = *(char *)(v412 + 23);
          v414  = *(void *)v412;
          v415  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v403);
          if (v413 >= 0) {
            v418  = v412;
          }
          else {
            v418  = v414;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Pcp_DoesAttributeChangeAffectFileFormatArguments %s:%s?\n", v416, v417, v418, v415);
          if (SHIBYTE(v585) >= 0) {
            v419  = (const std::string::value_type *)&v583;
          }
          else {
            v419  = (const std::string::value_type *)v583;
          }
          if (SHIBYTE(v585) >= 0) {
            v420  = HIBYTE(v585);
          }
          else {
            v420  = (std::string::size_type)v584;
          }
          std::string::append(&v548, v419, v420);
          if (SHIBYTE(v585) < 0) {
            operator delete((void *)v583);
          }
          v423  = (pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *)pxrInternal__aapl__pxrReserved__::PcpCache::GetDynamicFileFormatArgumentDependencyData((uint64_t)a2, (unsigned int *)v403);
          if (!*(void *)v423)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Prim index has no dynamic file format dependencies\n", v421, v422);
            if (SHIBYTE(v585) >= 0) {
              v424  = (const std::string::value_type *)&v583;
            }
            else {
              v424  = (const std::string::value_type *)v583;
            }
            if (SHIBYTE(v585) >= 0) {
              v425  = HIBYTE(v585);
            }
            else {
              v425  = (std::string::size_type)v584;
            }
            std::string::append(&v548, v424, v425);
            if (SHIBYTE(v585) < 0) {
              operator delete((void *)v583);
            }
            goto LABEL_707;
          }
        }
        else
        {
          v423  = (pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *)pxrInternal__aapl__pxrReserved__::PcpCache::GetDynamicFileFormatArgumentDependencyData((uint64_t)a2, (unsigned int *)v403);
          if (!*(void *)v423) {
            goto LABEL_707;
          }
        }
        v426  = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)v378);
        v427  = v378[1];
        if (v427)
        {
          int v428 = pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::CanAttributeDefaultValueChangeAffectFileFormatArguments(v423, v426, (const pxrInternal__aapl__pxrReserved__::VtValue *)v427, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v427 + 16));
          int v429 = v428;
          if (v544)
          {
            unint64_t v430 = *(void *)v426 & 0xFFFFFFFFFFFFFFF8;
            if (v430)
            {
              uint64_t v431 = (const char *)(v430 + 16);
              if (*(char *)(v430 + 39) < 0) {
                uint64_t v431 = *(const char **)v431;
              }
            }
            else
            {
              uint64_t v431 = "";
            }
            sub_216928738(v378[1]);
            if ((v582 & 0x80u) == 0) {
              v435  = (uint64_t ***)&v580;
            }
            else {
              v435  = (uint64_t ***)v580;
            }
            sub_216928738(v378[1] + 16);
            v436  = (char)v579;
            v437  = v577;
            v438  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v403);
            v441  = &v577;
            if (v436 < 0) {
              v441  = (unint64_t *)v437;
            }
            v442  = "is NOT";
            if (v429) {
              v442  = "IS";
            }
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Field '%s' change: %s -> %s %s relevant for prim index path '%s'\n", v439, v440, v431, v435, v441, v442, v438);
            if (SHIBYTE(v585) >= 0) {
              v443  = (const std::string::value_type *)&v583;
            }
            else {
              v443  = (const std::string::value_type *)v583;
            }
            if (SHIBYTE(v585) >= 0) {
              v444  = HIBYTE(v585);
            }
            else {
              v444  = (std::string::size_type)v584;
            }
            std::string::append(&v548, v443, v444);
            if (SHIBYTE(v585) < 0) {
              operator delete((void *)v583);
            }
            if ((char)v579 < 0) {
              operator delete((void *)v577);
            }
            if ((char)v582 < 0)
            {
              operator delete((void *)v580);
              if ((v429 & 1) == 0) {
                goto LABEL_707;
              }
            }
            else if ((v429 & 1) == 0)
            {
              goto LABEL_707;
            }
LABEL_706:
            pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v403);
            goto LABEL_707;
          }
          if (v428) {
            goto LABEL_706;
          }
        }
        else
        {
          uint64_t v432 = (void *)pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::GetRelevantAttributeNames(v423)[1];
          if (v432)
          {
            v433  = *(void *)v426 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v434  = v432[4] & 0xFFFFFFFFFFFFFFF8;
              if (v433 >= v434)
              {
                if (v434 >= v433) {
                  goto LABEL_706;
                }
                ++v432;
              }
              uint64_t v432 = (void *)*v432;
            }
            while (v432);
          }
        }
LABEL_707:
        v403 += 9;
      }
    }
    if ((IsUsd & 1) == 0)
    {
      int v447 = v566;
      if (v566 != (uint64_t *)&v567)
      {
        do
        {
          if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v447 + 28))
            && (*((unsigned char *)v447 + 36) & 4) != 0
            && sub_216BE7B0C((uint64_t *)v541, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v447 + 28)))
          {
            v448  = v545;
            char v449 = v546;
            while (v448 != v449)
            {
              v583  = (unint64_t)v448;
              v450  = sub_216BED150(&v549, (uint64_t)v448, (uint64_t)&unk_2174BFD90, (uint64_t **)&v583);
              *((_DWORD *)v450 + 12) |= 4u;
              v448 += 2;
            }
          }
          long long v451 = (uint64_t *)v447[1];
          if (v451)
          {
            do
            {
              int64_t v452 = v451;
              long long v451 = (uint64_t *)*v451;
            }
            while (v451);
          }
          else
          {
            do
            {
              int64_t v452 = (uint64_t *)v447[2];
              BOOL v458 = *v452 == (void)v447;
              int v447 = v452;
            }
            while (!v458);
          }
          int v447 = v452;
        }
        while (v452 != (uint64_t *)&v567);
      }
      if (v574)
      {
        int v454 = v545;
        int v453 = v546;
        while (v454 != v453)
        {
          v455  = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(v454);
          PathsToPrimsWithRelocates  = (pxrInternal__aapl__pxrReserved__::SdfPath **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetPathsToPrimsWithRelocates(v455);
          v457  = v572;
          BOOL v458 = *PathsToPrimsWithRelocates == PathsToPrimsWithRelocates[1] || v572 == (uint64_t *)&v573;
          if (!v458)
          {
            while (1)
            {
              v459  = *PathsToPrimsWithRelocates;
              v460  = PathsToPrimsWithRelocates[1];
              if (*PathsToPrimsWithRelocates != v460) {
                break;
              }
LABEL_742:
              v461  = (uint64_t *)v457[1];
              if (v461)
              {
                do
                {
                  v462  = v461;
                  v461  = (uint64_t *)*v461;
                }
                while (v461);
              }
              else
              {
                do
                {
                  v462  = (uint64_t *)v457[2];
                  BOOL v458 = *v462 == (void)v457;
                  v457  = v462;
                }
                while (!v458);
              }
              v457  = v462;
              if (v462 == (uint64_t *)&v573) {
                goto LABEL_750;
              }
            }
            while (!pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(v459, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v457 + 28)))
            {
              v459  = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v459 + 8);
              if (v459 == v460) {
                goto LABEL_742;
              }
            }
            v583  = (unint64_t)v454;
            uint64_t v463 = sub_216BED150(&v549, (uint64_t)v454, (uint64_t)&unk_2174BFD90, (uint64_t **)&v583);
            *((_DWORD *)v463 + 12) |= 4u;
          }
LABEL_750:
          v454 += 2;
        }
      }
    }
    char v464 = v569;
    if (v569 != (uint64_t *)&v570)
    {
      while (1)
      {
        v465  = *((_DWORD *)v464 + 9);
        pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(a2, (uint64_t *)v541, (int *)v464 + 7, 63, 0, 0, 0, (uint64_t *)&v583);
        if (v544)
        {
          v468  = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
          uint64_t v469 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v468);
          uint64_t v470 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v469);
          v471  = *(char *)(v470 + 23) >= 0 ? v470 : *(void *)v470;
          v472  = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v541);
          v473  = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v472);
          v474  = *(char *)(v473 + 23);
          v475  = *(void *)v473;
          v476  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v464 + 28));
          v479  = v474 >= 0 ? v473 : v475;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"   Resync following in @%s@ %s due to Sdf site @%s@<%s>%s:\n", v477, v478, v471, "do not recurse on prim descendants", v479, v476, " (not restricted to existing caches)");
          v480  = (v582 & 0x80u) == 0 ? (const std::string::value_type *)&v580 : (const std::string::value_type *)v580;
          v481  = (v582 & 0x80u) == 0 ? v582 : v581;
          std::string::append(&v548, v480, v481);
          if ((char)v582 < 0) {
            operator delete((void *)v580);
          }
        }
        v483  = (uint64_t *)v583;
        v482  = v584;
        if ((uint64_t *)v583 != v584) {
          break;
        }
LABEL_787:
        if (v544)
        {
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"   Resync end\n", v466, v467);
          v491  = (v582 & 0x80u) == 0 ? (const std::string::value_type *)&v580 : (const std::string::value_type *)v580;
          v492  = (v582 & 0x80u) == 0 ? v582 : v581;
          std::string::append(&v548, v491, v492);
          if ((char)v582 < 0) {
            operator delete((void *)v580);
          }
        }
        v580  = (unint64_t)&v583;
        sub_216BE117C((void ***)&v580);
        v493  = (uint64_t *)v464[1];
        if (v493)
        {
          do
          {
            v494  = v493;
            v493  = (uint64_t *)*v493;
          }
          while (v493);
        }
        else
        {
          do
          {
            v494  = (uint64_t *)v464[2];
            BOOL v458 = *v494 == (void)v464;
            char v464 = v494;
          }
          while (!v458);
        }
        char v464 = v494;
        if (v494 == (uint64_t *)&v570) {
          goto LABEL_802;
        }
      }
      v484  = v465 & 0xFFFFFFF9;
      while (2)
      {
        if (v544
          && ((v485  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v483),
               v486  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v483 + 1)),
               pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    <%s> depends on <%s>\n", v487, v488, v485, v486), (v582 & 0x80u) == 0)? (v489  = (const std::string::value_type *)&v580): (v489  = (const std::string::value_type *)v580), (v582 & 0x80u) == 0 ? (v490  = v582) : (v490  = v581), std::string::append(&v548, v489, v490), (char)v582 < 0))
        {
          operator delete((void *)v580);
          if (v484) {
LABEL_778:
          }
            pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSpecs(a1, a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)v483, (uint64_t *)v541, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v483 + 1));
        }
        else if (v484)
        {
          goto LABEL_778;
        }
        if ((v465 & 2) != 0) {
          pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeTargets((uint64_t)a1, (unint64_t)a2, v483, 2);
        }
        if ((v465 & 4) != 0) {
          pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeTargets((uint64_t)a1, (unint64_t)a2, v483, 1);
        }
        v483 += 9;
        if (v483 == v482) {
          goto LABEL_787;
        }
        continue;
      }
    }
LABEL_802:
    if (v560 != v561)
    {
      v583  = 0;
      v584  = 0;
      v585  = 0;
      v586  = a2;
      v575  = (pxrInternal__aapl__pxrReserved__::PcpCache *)&v586;
      v495  = sub_216BEDBD4(a1 + 6, (unint64_t *)&v586, (uint64_t)&unk_2174BFD90, (uint64_t **)&v575);
      if (v561 != v560)
      {
        v496  = 0;
        v497  = (uint64_t **)(v495 + 5);
        v498  = ((char *)v561 - (char *)v560) >> 3;
        do
        {
          v499  = v560;
          v500  = &v557[2 * v496];
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v500))
          {
            pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(a2, (uint64_t *)v541, v500, 47, 0, 0, 1, (uint64_t *)&v580);
            v501  = (uint64_t *)v580;
            v502  = (uint64_t *)v581;
            while (v501 != v502)
            {
              v577  = 0;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v577);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v577 + 1);
              v575  = (pxrInternal__aapl__pxrReserved__::PcpCache *)v501;
              v503  = sub_216A9AA80(v497, (pxrInternal__aapl__pxrReserved__::SdfPath *)v501, (uint64_t)&unk_2174BFD90, (_DWORD **)&v575);
              sub_21697DE94((int *)v503 + 9, (int *)&v577);
              sub_21697DEEC((int *)v503 + 10, (int *)&v577 + 1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v577 + 1);
              sub_21697C414(&v577);
              v501 += 9;
            }
            v577  = (unint64_t)&v580;
            sub_216BE117C((void ***)&v577);
            a2  = (pxrInternal__aapl__pxrReserved__::PcpCache *)v542;
          }
          pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(a2, (uint64_t *)v541, &v499[2 * v496], 47, 0, 0, 1, (uint64_t *)&v580);
          v504  = (uint64_t *)v580;
          v505  = (uint64_t *)v581;
          while (v504 != v505)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v586);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v586 + 1);
            if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v500))
            {
              pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)(v504 + 2), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v500, &v577);
              sub_21697DE94((int *)&v586, (int *)&v577);
              sub_21697DEEC((int *)&v586 + 1, (int *)&v577 + 1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v577 + 1);
              sub_21697C414(&v577);
            }
            v575  = (pxrInternal__aapl__pxrReserved__::PcpCache *)v504;
            v506  = sub_216A9AA80(v497, (pxrInternal__aapl__pxrReserved__::SdfPath *)v504, (uint64_t)&unk_2174BFD90, (_DWORD **)&v575);
            sub_2169C487C((int *)v506 + 9, &v586);
            sub_2169C48D4((int *)v506 + 10, (_DWORD *)&v586 + 1);
            if (v544)
            {
              v507  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v504);
              v508  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v586);
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  renameChanges <%s> to <%s>\n", v509, v510, v507, v508);
              v511  = (v579 & 0x80u) == 0
                   ? (const std::string::value_type *)&v577
                   : (const std::string::value_type *)v577;
              v512  = (v579 & 0x80u) == 0 ? v579 : v578;
              std::string::append(&v548, v511, v512);
              if ((char)v579 < 0) {
                operator delete((void *)v577);
              }
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v586 + 1);
            sub_21697C414(&v586);
            v504 += 9;
          }
          v577  = (unint64_t)&v580;
          sub_216BE117C((void ***)&v577);
          ++v496;
          a2  = (pxrInternal__aapl__pxrReserved__::PcpCache *)v542;
        }
        while (v496 != v498);
      }
      v580  = (unint64_t)&v583;
      sub_216981168((void ***)&v580);
    }
LABEL_838:
    v583  = (unint64_t)&v545;
    sub_216850BF4((void ***)&v583);
LABEL_839:
    uint64_t v18 = v541 + 232;
  }
  while (v541 + 232 != v533);
LABEL_853:
  v527  = v549;
  if (v549 != (uint64_t *)v550)
  {
    do
    {
      v528  = *((_DWORD *)v527 + 12);
      if ((v528 & 0x10) != 0)
      {
        v529  = pxrInternal__aapl__pxrReserved__::Pcp_NeedToRecomputeDueToAssetPathChange(v527 + 4);
        pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStackResolvedPath(a1, a2, v527 + 4, v529, v536);
        if (v529) {
          v528 |= 9u;
        }
      }
      if ((v528 & 4) != 0) {
        pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStackRelocations(a1, a2, v527 + 4, v536);
      }
      if ((v528 & 0x20) != 0) {
        pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStackExpressionVariables(a1, a2, (long long *)v527 + 2, v536);
      }
      pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStack(a1, (uint64_t)a2, v527 + 4, v528 & 1, (v528 & 2) != 0, (v528 >> 3) & 1);
      v530  = (uint64_t *)v527[1];
      if (v530)
      {
        do
        {
          v531  = v530;
          v530  = (uint64_t *)*v530;
        }
        while (v530);
      }
      else
      {
        do
        {
          v531  = (uint64_t *)v527[2];
          BOOL v458 = *v531 == (void)v527;
          v527  = v531;
        }
        while (!v458);
      }
      v527  = v531;
    }
    while (v531 != (uint64_t *)v550);
  }
  if (v544)
  {
    if (SHIBYTE(v548.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v548.__r_.__value_.__l.__size_)
      {
        v532  = (std::string *)v548.__r_.__value_.__r.__words[0];
LABEL_873:
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"PcpChanges::DidChange\n%s\n", v16, v17, v532);
      }
    }
    else if (*((unsigned char *)&v548.__r_.__value_.__s + 23))
    {
      v532  = &v548;
      goto LABEL_873;
    }
  }
  if (SHIBYTE(v548.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v548.__r_.__value_.__l.__data_);
  }
  sub_21699DA30((uint64_t)&v549, v550[0]);
  sub_216BE9024(&v551);
  sub_216981EE8((uint64_t)&v554, v555);
  v583  = (unint64_t)&v557;
  sub_216981168((void ***)&v583);
  v583  = (unint64_t)&v560;
  sub_216981168((void ***)&v583);
  v583  = (unint64_t)&v563;
  sub_216981168((void ***)&v583);
  sub_216BECF64((uint64_t)&v566, v567);
  sub_216BECF64((uint64_t)&v569, v570);
  sub_216981EE8((uint64_t)&v572, v573);
}

void sub_216BE6950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  *(void *)(v69 - 176)  = &a41;
  sub_216850BF4((void ***)(v69 - 176));
  if (a49 < 0) {
    operator delete(__p);
  }
  sub_21699DA30((uint64_t)&a50, (void *)a51);
  sub_216BE9024(&a53);
  sub_216981EE8((uint64_t)&a56, (void *)a57);
  *(void *)(v69 - 176)  = &a59;
  sub_216981168((void ***)(v69 - 176));
  *(void *)(v69 - 176)  = &a62;
  sub_216981168((void ***)(v69 - 176));
  *(void *)(v69 - 176)  = &a65;
  sub_216981168((void ***)(v69 - 176));
  sub_216BECF64((uint64_t)&a68, (void *)a69);
  sub_216BECF64(v69 - 248, *(void **)(v69 - 240));
  sub_216981EE8(v69 - 224, *(void **)(v69 - 216));
  _Unwind_Resume(a1);
}

uint64_t sub_216BE6ED0@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, atomic_uint **a2@<X1>, atomic_uint **a3@<X8>)
{
  uint64_t result = sub_21695DC44(a1);
  if (result)
  {
    uint64_t v7 = *((void *)a1 + 1);
    if ((v7 & 4) != 0)
    {
      uint64_t result = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      a2  = (atomic_uint **)result;
    }
    else
    {
      a2  = (atomic_uint **)a1;
    }
  }
  uint64_t v8 = *a2;
  *a3  = *a2;
  if ((v8 & 7) != 0)
  {
    uint64_t v9 = (atomic_uint *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v9, 2u, memory_order_relaxed) & 1) == 0) {
      *a3  = v9;
    }
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::PcpChanges::_DidAddOrRemoveSublayer(uint64_t **a1, pxrInternal__aapl__pxrReserved__::PcpCache *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, int a6, std::string *a7, uint64_t a8)
{
  uint64_t v9 = a7;
  if (a7)
  {
    uint64_t v15 = sub_21697CF14(a4);
    if (v16 & 1 | (unint64_t)v15)
    {
      uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a4);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v18);
      unsigned int v20 = *(char *)(Identifier + 23) >= 0 ? (const char *)Identifier : *(const char **)Identifier;
    }
    else
    {
      unsigned int v20 = "invalid";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Layer @%s@ changed sublayers\n", v16, v17, v20);
    uint64_t v21 = (v95 & 0x80u) == 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
    std::string::size_type v22 = (v95 & 0x80u) == 0 ? v95 : v94;
    std::string::append(v9, v21, v22);
    if ((char)v95 < 0) {
      operator delete(__p);
    }
  }
  if (pxrInternal__aapl__pxrReserved__::Pcp_IsVariableExpression(a5))
  {
    uint64_t v86 = (uint64_t *)a8;
    long long v100 = 0u;
    long long v101 = 0u;
    v102[0]  = 1.0;
    LayerStackuint64_t Identifier = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer::PcpExpressionVariableCachingComposer((pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer *)&__p, LayerStackIdentifier);
    uint64_t v24 = a3[1];
    if (v24 != *a3)
    {
      uint64_t v87 = a4;
      char v88 = a2;
      std::string::size_type v84 = a1;
      uint64_t v85 = v9;
      uint64_t v25 = 0;
      uint64_t v90 = (v24 - *a3) >> 4;
      uint64_t v91 = (const std::string *)a5;
      uint64_t v26 = a3;
      while (1)
      {
        int v27 = (long long *)(*v26 + 16 * v25);
        if (a6)
        {
          uint64_t v28 = *(const char ***)(sub_216BBCEA8((uint64_t *)(*v26 + 16 * v25)) + 392);
        }
        else
        {
          uint64_t v29 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)(*v26 + 16 * v25));
          uint64_t v30 = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v29);
          uint64_t v28 = pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer::ComputeExpressionVariables((pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer *)&__p, v30);
        }
        pxrInternal__aapl__pxrReserved__::Pcp_EvaluateVariableExpression(v91, (uint64_t)v28, (uint64_t)&__str);
        char v31 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        unint64_t v32 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? (char *)HIBYTE(__str.__r_.__value_.__r.__words[2])
            : (char *)__str.__r_.__value_.__l.__size_;
        if (v32) {
          break;
        }
LABEL_125:
        if (v31 < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (++v25 == v90)
        {
          uint64_t v24 = *v26;
          uint64_t v75 = v26[1];
          a1  = v84;
          uint64_t v9 = v85;
          a2  = v88;
          goto LABEL_143;
        }
      }
      std::string::size_type v103 = 0;
      LOBYTE(v104)  = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str  = &__str;
      }
      else {
        p_str  = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v103, (pxrInternal__aapl__pxrReserved__ *)p_str, v32);
      unint64_t v34 = bswap64(0x9E3779B97F4A7C55 * (void)v103);
      unint64_t v35 = *((void *)&v100 + 1);
      if (*((void *)&v100 + 1))
      {
        uint8x8_t v36 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v100 + 8));
        v36.i16[0]  = vaddlv_u8(v36);
        unint64_t v37 = v36.u32[0];
        if (v36.u32[0] > 1uLL)
        {
          a8  = v34;
          if (v34 >= *((void *)&v100 + 1)) {
            a8  = v34 % *((void *)&v100 + 1);
          }
        }
        else
        {
          a8  = (*((void *)&v100 + 1) - 1) & v34;
        }
        char v38 = *(void ****)(v100 + 8 * a8);
        if (v38)
        {
          __int16 v39 = *v38;
          if (*v38)
          {
            while (1)
            {
              unint64_t v40 = (unint64_t)v39[1];
              if (v40 == v34)
              {
                if (sub_2168513F8((uint64_t)v102, (unsigned __int8 *)v39 + 16, (unsigned __int8 *)&__str))
                {
                  uint64_t v26 = a3;
                  goto LABEL_103;
                }
              }
              else
              {
                if (v37 > 1)
                {
                  if (v40 >= v35) {
                    v40 %= v35;
                  }
                }
                else
                {
                  v40 &= v35 - 1;
                }
                if (v40 != a8)
                {
LABEL_44:
                  uint64_t v26 = a3;
                  break;
                }
              }
              __int16 v39 = (void **)*v39;
              if (!v39) {
                goto LABEL_44;
              }
            }
          }
        }
      }
      uint64_t v41 = (char *)operator new(0x78uLL);
      std::string::size_type v103 = (void **)v41;
      unsigned __int8 v104 = (atomic_uint *)&v101;
      char v105 = 0;
      *(void *)uint64_t v41 = 0;
      *((void *)v41 + 1)  = v34;
      uint64_t v42 = v41 + 16;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_216778F24(v42, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)uint64_t v42 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *((void *)v41 + 4)  = *((void *)&__str.__r_.__value_.__l + 2);
      }
      *(_OWORD *)(v41 + 104)  = 0u;
      *(_OWORD *)(v41 + 88)  = 0u;
      *(_OWORD *)(v41 + 72)  = 0u;
      *(_OWORD *)(v41 + 56)  = 0u;
      *(_OWORD *)(v41 + 4sub_2168EBBB8(&a9, 0) = 0u;
      char v105 = 1;
      float v43 = (float)(unint64_t)(*((void *)&v101 + 1) + 1);
      if (v35 && (float)(v102[0] * (float)v35) >= v43)
      {
LABEL_94:
        uint64_t v59 = *(void ***)(v100 + 8 * a8);
        if (v59)
        {
          std::locale::__imp *v103 = *v59;
          *uint64_t v59 = v103;
        }
        else
        {
          std::locale::__imp *v103 = (void *)v101;
          *(void *)&long long v101 = v103;
          *(void *)(v100 + 8 * a8)  = &v101;
          if (*v103)
          {
            unint64_t v60 = *((void *)*v103 + 1);
            if ((v35 & (v35 - 1)) != 0)
            {
              if (v60 >= v35) {
                v60 %= v35;
              }
            }
            else
            {
              v60 &= v35 - 1;
            }
            *(void *)(v100 + 8 * v6sub_2168EBBB8(&a9, 0) = v103;
          }
        }
        __int16 v39 = v103;
        std::string::size_type v103 = 0;
        ++*((void *)&v101 + 1);
        sub_216BEDD10((uint64_t)&v103);
LABEL_103:
        if (*((char *)v39 + 63) < 0)
        {
          if (!v39[6])
          {
LABEL_107:
            pxrInternal__aapl__pxrReserved__::PcpChanges::_LoadSublayerForChange(v88, v87, (uint64_t)&__str, a6, (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v103);
            unsigned int v61 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v39[8];
            v39[8]  = v103;
            std::string::size_type v103 = 0;
            sub_2168BD378(v39 + 64, v61);
            sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v103);
            std::string::operator=((std::string *)(v39 + 5), &__str);
          }
        }
        else if (!*((unsigned char *)v39 + 63))
        {
          goto LABEL_107;
        }
        sub_216BCACC4((uint64_t *)v39 + 9, v27);
        uint64_t v62 = (char *)v39[14];
        std::string::size_type v63 = (char *)v39[13];
        if (v63 >= v62)
        {
          uint64_t v64 = (char *)v39[12];
          uint64_t v65 = (v63 - v64) >> 3;
          if ((unint64_t)(v65 + 1) >> 61) {
            sub_21677CB10();
          }
          unint64_t v66 = v62 - v64;
          unint64_t v67 = (v62 - v64) >> 2;
          if (v67 <= v65 + 1) {
            unint64_t v67 = v65 + 1;
          }
          if (v66 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v68 = v67;
          }
          if (v68)
          {
            uint64_t v69 = (char *)sub_21677CB28((uint64_t)(v39 + 14), v68);
            uint64_t v64 = (char *)v39[12];
            std::string::size_type v63 = (char *)v39[13];
          }
          else
          {
            uint64_t v69 = 0;
          }
          uint64_t v70 = &v69[8 * v65];
          *(void *)uint64_t v70 = v25;
          a8  = (uint64_t)(v70 + 8);
          while (v63 != v64)
          {
            uint64_t v71 = *((void *)v63 - 1);
            v63 -= 8;
            *((void *)v70 - 1)  = v71;
            v70 -= 8;
          }
          v39[12]  = v70;
          v39[13]  = (void *)a8;
          v39[14]  = &v69[8 * v68];
          if (v64) {
            operator delete(v64);
          }
        }
        else
        {
          *(void *)std::string::size_type v63 = v25;
          a8  = (uint64_t)(v63 + 8);
        }
        v39[13]  = (void *)a8;
        char v31 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        goto LABEL_125;
      }
      BOOL v44 = (v35 & (v35 - 1)) == 0;
      if (v35 < 3) {
        BOOL v44 = 0;
      }
      unint64_t v45 = (2 * v35) | !v44;
      unint64_t v46 = vcvtps_u32_f32(v43 / v102[0]);
      if (v45 <= v46) {
        prime  = (int8x8_t)v46;
      }
      else {
        prime  = (int8x8_t)v45;
      }
      if (*(void *)&prime == 1)
      {
        prime  = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        prime  = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v35 = *((void *)&v100 + 1);
      if (*(void *)&prime > *((void *)&v100 + 1)) {
        goto LABEL_60;
      }
      if (*(void *)&prime < *((void *)&v100 + 1))
      {
        unint64_t v54 = vcvtps_u32_f32((float)*((unint64_t *)&v101 + 1) / v102[0]);
        if (*((void *)&v100 + 1) < 3uLL
          || (uint8x8_t v55 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v100 + 8)), v55.i16[0] = vaddlv_u8(v55), v55.u32[0] > 1uLL))
        {
          unint64_t v54 = std::__next_prime(v54);
        }
        else
        {
          uint64_t v56 = 1 << -(char)__clz(v54 - 1);
          if (v54 >= 2) {
            unint64_t v54 = v56;
          }
        }
        if (*(void *)&prime <= v54) {
          prime  = (int8x8_t)v54;
        }
        if (*(void *)&prime >= v35)
        {
          unint64_t v35 = *((void *)&v100 + 1);
        }
        else
        {
          if (prime)
          {
LABEL_60:
            if (*(void *)&prime >> 61) {
              sub_21677CA1C();
            }
            uint64_t v48 = operator new(8 * *(void *)&prime);
            uint64_t v49 = (void *)v100;
            *(void *)&long long v100 = v48;
            if (v49) {
              operator delete(v49);
            }
            uint64_t v50 = 0;
            *((int8x8_t *)&v100 + 1)  = prime;
            do
              *(void *)(v100 + 8 * v50++)  = 0;
            while (*(void *)&prime != v50);
            uint64_t v51 = (void **)v101;
            if ((void)v101)
            {
              unint64_t v52 = *(void *)(v101 + 8);
              uint8x8_t v53 = (uint8x8_t)vcnt_s8(prime);
              v53.i16[0]  = vaddlv_u8(v53);
              if (v53.u32[0] > 1uLL)
              {
                if (v52 >= *(void *)&prime) {
                  v52 %= *(void *)&prime;
                }
              }
              else
              {
                v52 &= *(void *)&prime - 1;
              }
              *(void *)(v100 + 8 * v52)  = &v101;
              for (long long i = *v51; i; v52 = v58)
              {
                unint64_t v58 = i[1];
                if (v53.u32[0] > 1uLL)
                {
                  if (v58 >= *(void *)&prime) {
                    v58 %= *(void *)&prime;
                  }
                }
                else
                {
                  v58 &= *(void *)&prime - 1;
                }
                if (v58 != v52)
                {
                  if (!*(void *)(v100 + 8 * v58))
                  {
                    *(void *)(v100 + 8 * v58)  = v51;
                    goto LABEL_85;
                  }
                  *uint64_t v51 = (void *)*i;
                  *long long i = **(void **)(v100 + 8 * v58);
                  **(void **)(v100 + 8 * v58)  = i;
                  long long i = v51;
                }
                unint64_t v58 = v52;
LABEL_85:
                uint64_t v51 = (void **)i;
                long long i = (void *)*i;
              }
            }
            unint64_t v35 = (unint64_t)prime;
            goto LABEL_89;
          }
          uint64_t v72 = (void *)v100;
          *(void *)&long long v100 = 0;
          if (v72) {
            operator delete(v72);
          }
          unint64_t v35 = 0;
          *((void *)&v100 + 1)  = 0;
        }
      }
LABEL_89:
      if ((v35 & (v35 - 1)) != 0)
      {
        if (v34 >= v35) {
          a8  = v34 % v35;
        }
        else {
          a8  = v34;
        }
      }
      else
      {
        a8  = (v35 - 1) & v34;
      }
      goto LABEL_94;
    }
    uint64_t v75 = a3[1];
LABEL_143:
    LOBYTE(v103)  = 0;
    sub_216BEBB34((uint64_t)v86, (v75 - v24) >> 4, &v103);
    for (uint64_t j = (void *)v101; j; uint64_t j = (void *)*j)
    {
      __str.__r_.__value_.__s.__data_[0]  = 0;
      sub_216ABBA60((uint64_t *)&v103, j + 8);
      pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeSublayer(a1, a2, j + 9, j + 5, (uint64_t *)&v103, a6, v9, &__str);
      uint64_t v77 = v104;
      if (v104 && atomic_fetch_add_explicit(v104 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v77 + 8))(v77);
      }
      if (__str.__r_.__value_.__s.__data_[0])
      {
        unsigned __int8 v78 = (unint64_t *)j[12];
        uint64_t v79 = (unint64_t *)j[13];
        if (v78 != v79)
        {
          uint64_t v80 = *v86;
          do
          {
            unint64_t v81 = *v78++;
            *(void *)(v80 + ((v81 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v81;
          }
          while (v78 != v79);
        }
      }
    }
    sub_216BEC6FC((uint64_t)&v99);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v98);
    std::string::size_type v103 = (void **)&v97;
    sub_216787968(&v103);
    uint64_t v82 = v96;
    if (v96 && atomic_fetch_add_explicit((atomic_uint *volatile)(v96 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v82 + 8))(v82);
    }
    uint64_t v83 = v94;
    if (v94)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v94 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v83 + 8))(v83);
      }
    }
    return (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)sub_216BEBD14((uint64_t)&v100);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::PcpChanges::_LoadSublayerForChange(a2, a4, (uint64_t)a5, a6, (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v100);
    LOBYTE(v103)  = 0;
    sub_216ABBA60((uint64_t *)&__p, (uint64_t *)&v100);
    pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeSublayer(a1, a2, a3, a5, (uint64_t *)&__p, a6, v9, &v103);
    uint64_t v73 = v94;
    if (v94 && atomic_fetch_add_explicit((atomic_uint *volatile)(v94 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v73 + 8))(v73);
    }
    sub_216BEBB34(a8, (a3[1] - *a3) >> 4, &v103);
    return sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v100);
  }
}

void sub_216BE7904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_216BEBC48((uint64_t)&__p);
  sub_216BEBD14(v30 - 160);
  _Unwind_Resume(a1);
}

BOOL sub_216BE7A38(uint64_t *a1, void *a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 31);
  unsigned __int8 v3 = a1;
  if (v2 >= 4) {
    unsigned __int8 v3 = (uint64_t *)*a1;
  }
  uint64_t v4 = *((unsigned int *)a1 + 30);
  if (v4)
  {
    BOOL v5 = &v3[5 * v4];
    uint64_t v6 = 40 * v4;
    while ((*v3 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      v3 += 5;
      v6 -= 40;
      if (!v6)
      {
        unsigned __int8 v3 = v5;
        break;
      }
    }
  }
  if (v2 >= 4) {
    a1  = (uint64_t *)*a1;
  }
  return v3 != &a1[5 * v4];
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(uint64_t **this, const pxrInternal__aapl__pxrReserved__::PcpCache *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v6 = a2;
  uint64_t v7 = &v6;
  uint64_t v4 = sub_216BEDA38(this + 3, (unint64_t *)&v6, (uint64_t)&unk_2174BFD90, (uint64_t **)&v7);
  return sub_216A5CF30(v4 + 5, a3, a3);
}

uint64_t sub_216BE7B0C(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  BOOL v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5) {
    BOOL v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 288), 0))return 1; {
  uint64_t v15 = 0;
  }
  char v16 = 0;
  uint64_t v17 = 0;
  uint64_t v7 = (void *)sub_2169791E0(a1);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v8) {
    uint64_t v8 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  v18[1]  = (void **)&v15;
  uint64_t v18[2] = (void **)&stru_26C74C2D0;
  __int16 v19 = 0;
  v18[0]  = (void **)&unk_26C759208;
  int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v7, a2, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v8 + 32), (uint64_t (***)(void, uint64_t))v18);
  if ((_BYTE)v19) {
    int v10 = 0;
  }
  else {
    int v10 = HasField;
  }
  if (v10 != 1 || (unint64_t v11 = v15, v12 = v16, v15 == v16))
  {
    uint64_t v6 = 0;
  }
  else
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a2, v11, v18);
      uint64_t v6 = sub_216BE7B0C(a1, v18);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v18 + 1);
      sub_21697C414(v18);
      unint64_t v11 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v11 + 8);
      if (v11 == v12) {
        char v13 = 1;
      }
      else {
        char v13 = v6;
      }
    }
    while ((v13 & 1) == 0);
  }
  v18[0]  = (void **)&v15;
  sub_216889A04(v18);
  return v6;
}

void sub_216BE7C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16  = (void **)&a9;
  sub_216889A04(&a16);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpChanges::_GetRenameChanges(uint64_t **this, const pxrInternal__aapl__pxrReserved__::PcpCache *a2)
{
  unsigned __int8 v3 = a2;
  uint64_t v4 = &v3;
  return sub_216BEDBD4(this + 6, (unint64_t *)&v3, (uint64_t)&unk_2174BFD90, (uint64_t **)&v4) + 5;
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStackResolvedPath(uint64_t **a1, pxrInternal__aapl__pxrReserved__::PcpCache *a2, uint64_t *a3, int a4, std::string *a5)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  int v10 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(a3);
  uint64_t Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v10);
  BOOL v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v46, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(Identifier + 32));
  long long v39 = 0uLL;
  uint64_t v40 = 0;
  if (a4)
  {
    char v13 = (int *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v12);
    pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(a2, a3, v13, 63, 1, 0, 1, (uint64_t *)__p);
    sub_216BEDD58(&v39);
    long long v39 = *(_OWORD *)__p;
    uint64_t v40 = v42;
    __p[1]  = 0;
    uint64_t v42 = 0;
    __p[0]  = 0;
    unint64_t v45 = __p;
    sub_216BE117C(&v45);
    goto LABEL_27;
  }
  std::string::size_type v14 = (int *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v12);
  pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(a2, a3, v14, 63, 1, 1, 1, (uint64_t *)__p);
  sub_216BEDD58(&v39);
  long long v39 = *(_OWORD *)__p;
  uint64_t v40 = v42;
  __p[1]  = 0;
  uint64_t v42 = 0;
  __p[0]  = 0;
  unint64_t v45 = __p;
  sub_216BE117C(&v45);
  char v16 = (unsigned int *)*((void *)&v39 + 1);
  uint64_t v15 = (unsigned int *)v39;
  if ((void)v39 == *((void *)&v39 + 1)) {
    goto LABEL_25;
  }
  uint64_t v17 = *((void *)&v39 + 1);
  while (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v15))
  {
    PrimIndex  = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::PcpCache::FindPrimIndex((uint64_t)a2, v15);
    if (PrimIndex
      || (__p[0]  = "pcp/changes.cpp",
          __p[1]  = "operator()",
          uint64_t v42 = 2346,
          float v43 = "auto pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStackResolvedPath(const PcpCache *, co"
                "nst PcpLayerStackPtr &, BOOL, std::string *)::(anonymous class)::operator()(const PcpDependency &) const",
          char v44 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "primIndex", 0) & 1) != 0))
    {
      if (!pxrInternal__aapl__pxrReserved__::Pcp_NeedToRecomputeDueToAssetPathChange(PrimIndex, v18)) {
        break;
      }
    }
    v15 += 18;
    if (v15 == v16) {
      goto LABEL_26;
    }
  }
  if (v15 == v16) {
    goto LABEL_26;
  }
  unsigned int v20 = v15 + 18;
  if (v15 + 18 == v16)
  {
LABEL_25:
    uint64_t v17 = (uint64_t)v15;
  }
  else
  {
    uint64_t v17 = (uint64_t)v15;
    do
    {
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v20))
      {
        if ((std::string::size_type v22 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::PcpCache::FindPrimIndex((uint64_t)a2, v20)) == 0&& (__p[0] = "pcp/changes.cpp", __p[1] = "operator()", v42 = 2346, v43 = "auto pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStackResolvedPath(const PcpCache *, const PcpLayerStackPtr &, BOOL, std::string *)::(anonymous class)::operator()(const PcpDependency &) const", v44 = 0, (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "primIndex", 0) & 1) == 0)|| pxrInternal__aapl__pxrReserved__::Pcp_NeedToRecomputeDueToAssetPathChange(v22, v21))
        {
          sub_21697DE94((int *)v17, (int *)v20);
          sub_21697DEEC((int *)(v17 + 4), (int *)v20 + 1);
          sub_21697DE94((int *)(v17 + 8), (int *)v20 + 2);
          sub_21697DEEC((int *)(v17 + 12), (int *)v20 + 3);
          if (v20 != (unsigned int *)v17)
          {
            uint64_t v23 = (_DWORD *)sub_216BBED8C(v17 + 16);
            sub_216BBFB70(v23, (uint64_t)(v20 + 4));
          }
          *(_OWORD *)(v17 + 56)  = *(_OWORD *)(v20 + 14);
          v17 += 72;
        }
      }
      v20 += 18;
    }
    while (v20 != v16);
  }
LABEL_26:
  sub_216BEC01C((uint64_t)&v39, v17, *((uint64_t *)&v39 + 1));
LABEL_27:
  uint64_t v25 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)&v39 + 1);
  uint64_t v24 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v39;
  if ((void)v39 != *((void *)&v39 + 1))
  {
    if (a5)
    {
      LayerStackuint64_t Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
      int v27 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(LayerStackIdentifier);
      uint64_t v28 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v27);
      if (*(char *)(v28 + 23) >= 0) {
        uint64_t v31 = v28;
      }
      else {
        uint64_t v31 = *(void *)v28;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"   Resync following in @%s@ significant due to layer resolved path change:\n", v29, v30, v31);
      if (v42 >= 0) {
        unint64_t v32 = __p;
      }
      else {
        unint64_t v32 = (void **)__p[0];
      }
      if (v42 >= 0) {
        std::string::size_type v33 = HIBYTE(v42);
      }
      else {
        std::string::size_type v33 = (std::string::size_type)__p[1];
      }
      std::string::append(a5, (const std::string::value_type *)v32, v33);
      if (SHIBYTE(v42) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v25 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)&v39 + 1);
      uint64_t v24 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v39;
    }
    for (; v24 != v25; uint64_t v24 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v24 + 72))
    {
      if (a5)
      {
        Text  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v24);
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    <%s>\n", v35, v36, Text);
        if (v42 >= 0) {
          unint64_t v37 = __p;
        }
        else {
          unint64_t v37 = (void **)__p[0];
        }
        if (v42 >= 0) {
          std::string::size_type v38 = HIBYTE(v42);
        }
        else {
          std::string::size_type v38 = (std::string::size_type)__p[1];
        }
        std::string::append(a5, (const std::string::value_type *)v37, v38);
        if (SHIBYTE(v42) < 0) {
          operator delete(__p[0]);
        }
      }
      pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, a2, v24);
    }
  }
  __p[0]  = &v39;
  sub_216BE117C((void ***)__p);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v46);
}

void sub_216BE810C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char *a23,char a24)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  a23  = &a11;
  sub_216BE117C((void ***)&a23);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)&a24);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStackRelocations(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::PcpCache *a2, void *a3, std::string *a4)
{
  long long __p = a3;
  uint64_t v8 = sub_216BED728(a1, (uint64_t)a3, (uint64_t)&unk_2174BFD90, (void **)&__p);
  if (*((unsigned char *)v8 + 50)) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v87 = a1;
  *((unsigned char *)v8 + 5sub_2168EBBB8(&a9, 0) = 1;
  int v10 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)a3);
  uint64_t Layers = (atomic_uint ****)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v10);
  pxrInternal__aapl__pxrReserved__::Pcp_ComputeRelocationsForLayerStack(Layers, (uint64_t **)v9 + 10, (char *)v9 + 56, (uint64_t **)v9 + 13, (uint64_t **)v9 + 16);
  BOOL v12 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)a3);
  RelocatesSourceToTarget  = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetRelocatesSourceToTarget(v12);
  long long __p = *(void **)RelocatesSourceToTarget;
  uint64_t v94 = (void *)(RelocatesSourceToTarget + 8);
  if (__p != (void *)(RelocatesSourceToTarget + 8))
  {
    while (1)
    {
      char v16 = sub_216996180(&__p, v13, v14);
      uint64_t v17 = sub_21698EFF0((uint64_t)(v9 + 10), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(*v16 + 28));
      if (v9 + 11 == v17) {
        break;
      }
      unsigned int v20 = v17;
      uint64_t v21 = sub_216996180(&__p, v18, v19);
      uint64_t v25 = *(uint64_t *)((char *)v20 + 36);
      uint64_t v24 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v20 + 36);
      if (v25 != *(void *)(*v21 + 36))
      {
        uint64_t v26 = sub_216996180(&__p, v22, v23);
        sub_216A5CF30((uint64_t **)v9 + 22, (pxrInternal__aapl__pxrReserved__::SdfPath *)(*v26 + 28), (_DWORD *)(*v26 + 28));
        uint64_t v29 = sub_216996180(&__p, v27, v28);
        sub_216A5CF30((uint64_t **)v9 + 22, (pxrInternal__aapl__pxrReserved__::SdfPath *)(*v29 + 36), (_DWORD *)(*v29 + 36));
        uint64_t v30 = (uint64_t **)(v9 + 22);
        uint64_t v31 = v24;
        unint64_t v32 = v24;
LABEL_7:
        sub_216A5CF30(v30, v31, v32);
      }
      sub_2169961FC(&__p);
      if (__p == v94) {
        goto LABEL_9;
      }
    }
    std::string::size_type v33 = sub_216996180(&__p, v18, v19);
    sub_216A5CF30((uint64_t **)v9 + 22, (pxrInternal__aapl__pxrReserved__::SdfPath *)(*v33 + 28), (_DWORD *)(*v33 + 28));
    uint64_t v31 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*sub_216996180(&__p, v34, v35) + 36);
    uint64_t v30 = (uint64_t **)(v9 + 22);
    unint64_t v32 = v31;
    goto LABEL_7;
  }
LABEL_9:
  uint8x8_t v36 = (void *)v9[10];
  unint64_t v37 = v9 + 11;
  long long __p = v36;
  uint64_t v94 = v9 + 11;
  while (v36 != v37)
  {
    std::string::size_type v38 = sub_216996180(&__p, v13, v14);
    long long v39 = sub_21698EFF0(RelocatesSourceToTarget, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(*v38 + 28));
    if ((void *)(RelocatesSourceToTarget + 8) == v39)
    {
      uint8x8_t v55 = sub_216996180(&__p, v40, v41);
      sub_216A5CF30((uint64_t **)v9 + 22, (pxrInternal__aapl__pxrReserved__::SdfPath *)(*v55 + 28), (_DWORD *)(*v55 + 28));
      uint8x8_t v53 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*sub_216996180(&__p, v56, v57) + 36);
      unint64_t v52 = (uint64_t **)(v9 + 22);
      unint64_t v54 = v53;
    }
    else
    {
      uint64_t v42 = v39;
      float v43 = sub_216996180(&__p, v40, v41);
      uint64_t v47 = *(void *)((char *)v42 + 36);
      unint64_t v46 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v42 + 36);
      if (v47 == *(void *)(*v43 + 36)) {
        goto LABEL_16;
      }
      uint64_t v48 = sub_216996180(&__p, v44, v45);
      sub_216A5CF30((uint64_t **)v9 + 22, (pxrInternal__aapl__pxrReserved__::SdfPath *)(*v48 + 28), (_DWORD *)(*v48 + 28));
      uint64_t v51 = sub_216996180(&__p, v49, v50);
      sub_216A5CF30((uint64_t **)v9 + 22, (pxrInternal__aapl__pxrReserved__::SdfPath *)(*v51 + 36), (_DWORD *)(*v51 + 36));
      unint64_t v52 = (uint64_t **)(v9 + 22);
      uint8x8_t v53 = v46;
      unint64_t v54 = v46;
    }
    sub_216A5CF30(v52, v53, v54);
LABEL_16:
    sub_2169961FC(&__p);
    uint8x8_t v36 = __p;
    unint64_t v37 = v94;
  }
  if (a4 && v9[24])
  {
    sub_216BEBED4((uint64_t *)a3);
    if ((v92 & 0x80u) == 0) {
      unint64_t v60 = &v90;
    }
    else {
      unint64_t v60 = v90;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Relocation change in %s affects:\n", v58, v59, v60);
    if (v95 >= 0) {
      p_p  = (const std::string::value_type *)&__p;
    }
    else {
      p_p  = (const std::string::value_type *)__p;
    }
    if (v95 >= 0) {
      std::string::size_type v62 = HIBYTE(v95);
    }
    else {
      std::string::size_type v62 = (std::string::size_type)v94;
    }
    std::string::append(a4, p_p, v62);
    if (SHIBYTE(v95) < 0) {
      operator delete(__p);
    }
    if ((char)v92 < 0) {
      operator delete(v90);
    }
  }
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  long long __p = &v94;
  std::string::size_type v63 = (int *)v9[22];
  if (v63 != (int *)(v9 + 23))
  {
    do
    {
      if (a4)
      {
        Text  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v63 + 7));
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    <%s>\n", v65, v66, Text);
        unint64_t v67 = (v92 & 0x80u) == 0 ? (const std::string::value_type *)&v90 : (const std::string::value_type *)v90;
        std::string::size_type v68 = (v92 & 0x80u) == 0 ? v92 : v91;
        std::string::append(a4, v67, v68);
        if ((char)v92 < 0) {
          operator delete(v90);
        }
      }
      pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(a2, (uint64_t *)a3, v63 + 7, 63, 1, 1, 0, (uint64_t *)&v90);
      uint64_t v70 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v90;
      uint64_t v69 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v91;
      while (v70 != v69)
      {
        sub_216A5CF30((uint64_t **)&__p, v70, v70);
        uint64_t v70 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v70 + 72);
      }
      v88[0]  = &v90;
      sub_216BE117C((void ***)v88);
      uint64_t v71 = (int *)*((void *)v63 + 1);
      if (v71)
      {
        do
        {
          uint64_t v72 = v71;
          uint64_t v71 = *(int **)v71;
        }
        while (v71);
      }
      else
      {
        do
        {
          uint64_t v72 = (int *)*((void *)v63 + 2);
          BOOL v73 = *(void *)v72 == (void)v63;
          std::string::size_type v63 = v72;
        }
        while (!v73);
      }
      std::string::size_type v63 = v72;
    }
    while (v72 != (int *)(v9 + 23));
    if (a4 && v95)
    {
      sub_216BEBED4((uint64_t *)a3);
      if (v89 >= 0) {
        uint64_t v76 = v88;
      }
      else {
        uint64_t v76 = (void **)v88[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  and dependent paths in %s\n", v74, v75, v76);
      if ((v92 & 0x80u) == 0) {
        uint64_t v77 = (const std::string::value_type *)&v90;
      }
      else {
        uint64_t v77 = (const std::string::value_type *)v90;
      }
      if ((v92 & 0x80u) == 0) {
        std::string::size_type v78 = v92;
      }
      else {
        std::string::size_type v78 = v91;
      }
      std::string::append(a4, v77, v78);
      if ((char)v92 < 0) {
        operator delete(v90);
      }
      if (v89 < 0) {
        operator delete(v88[0]);
      }
    }
  }
  uint64_t v79 = __p;
  if (__p != &v94)
  {
    do
    {
      if (a4)
      {
        uint64_t v80 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v79 + 28));
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"      <%s>\n", v81, v82, v80);
        uint64_t v83 = (v92 & 0x80u) == 0 ? (const std::string::value_type *)&v90 : (const std::string::value_type *)v90;
        std::string::size_type v84 = (v92 & 0x80u) == 0 ? v92 : v91;
        std::string::append(a4, v83, v84);
        if ((char)v92 < 0) {
          operator delete(v90);
        }
      }
      pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(v87, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v79 + 28));
      uint64_t v85 = (void *)v79[1];
      if (v85)
      {
        do
        {
          uint64_t v86 = (void **)v85;
          uint64_t v85 = (void *)*v85;
        }
        while (v85);
      }
      else
      {
        do
        {
          uint64_t v86 = (void **)v79[2];
          BOOL v73 = *v86 == v79;
          uint64_t v79 = v86;
        }
        while (!v73);
      }
      uint64_t v79 = v86;
    }
    while (v86 != &v94);
  }
  sub_216981EE8((uint64_t)&__p, v94);
}

void sub_216BE86D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,void *a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  sub_216981EE8((uint64_t)&a24, a25);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStackExpressionVariables(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::PcpCache *a2, long long *a3, std::string *a4)
{
  unsigned __int8 v104 = a4;
  char v105 = a2;
  v103[0]  = a1;
  v103[1]  = a2;
  v103[2]  = a4;
  long long v102 = 0u;
  memset(v101, 0, sizeof(v101));
  sub_216BEC0AC(v101, a3);
  LayerStackuint64_t Identifier = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer::PcpExpressionVariableCachingComposer((pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer *)v95, LayerStackIdentifier);
  while (*((void *)&v102 + 1))
  {
    uint64_t v6 = (uint64_t *)(*(void *)(v101[0].i64[1] + (((unint64_t)v102 >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * v102);
    uint64_t v7 = *(uint64_t **)(sub_216BBCEA8(v6) + 392);
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(v6);
    uint64_t Identifier = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v8);
    int v10 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer::ComputeExpressionVariables((pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer *)v95, Identifier);
    unint64_t v11 = v7 + 2;
    BOOL v12 = (const void ****)(v10 + 2);
    int v14 = pxrInternal__aapl__pxrReserved__::operator!=((void **)v7 + 2, v10 + 2, v13);
    int v15 = pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::operator!=(v7, v10);
    if ((v14 | v15))
    {
      if (v104)
      {
        char v16 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(v6);
        uint64_t v17 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v16);
        uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v17);
        uint64_t v19 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v18);
        uint64_t v22 = *(char *)(v19 + 23) >= 0 ? v19 : *(void *)v19;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Expression variables changed for layer stack @%s@\n", v20, v21, v22);
        uint64_t v23 = SHIBYTE(v89) >= 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
        std::string::size_type v24 = SHIBYTE(v89) >= 0 ? HIBYTE(v89) : (std::string::size_type)v88;
        std::string::append(v104, v23, v24);
        if (SHIBYTE(v89) < 0) {
          operator delete(__p);
        }
      }
      long long __p = v6;
      uint64_t v27 = sub_216BED728(a1, (uint64_t)v6, (uint64_t)&unk_2174BFD90, (void **)&__p);
      if (v14)
      {
        if (v104)
        {
          sub_216BEC14C((void **)v7 + 2);
          int v28 = v94;
          uint64_t v29 = (void **)v93[0];
          sub_216BEC14C(v12);
          unint64_t v32 = v93;
          if (v28 < 0) {
            unint64_t v32 = v29;
          }
          std::string::size_type v33 = &v91;
          if (v92 < 0) {
            std::string::size_type v33 = v91;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    old: %s\n    new: %s\n", v30, v31, v32, v33);
          if (SHIBYTE(v89) >= 0) {
            p_p  = (const std::string::value_type *)&__p;
          }
          else {
            p_p  = (const std::string::value_type *)__p;
          }
          if (SHIBYTE(v89) >= 0) {
            std::string::size_type v35 = HIBYTE(v89);
          }
          else {
            std::string::size_type v35 = (std::string::size_type)v88;
          }
          std::string::append(v104, p_p, v35);
          if (SHIBYTE(v89) < 0) {
            operator delete(__p);
          }
          if (v92 < 0) {
            operator delete(v91);
          }
          if (v94 < 0) {
            operator delete(v93[0]);
          }
        }
        *((unsigned char *)v27 + 51)  = 1;
        pxrInternal__aapl__pxrReserved__::VtDictionary::operator=((const void ****)v27 + 25, v12);
      }
      if (v15)
      {
        if (v104)
        {
          uint8x8_t v36 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::ResolveLayerStackIdentifier((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v7, v105);
          unint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v36);
          uint64_t v38 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v37);
          uint64_t v39 = *(char *)(v38 + 23) >= 0 ? v38 : *(void *)v38;
          uint64_t v40 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::ResolveLayerStackIdentifier((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v10, v105);
          uint64_t v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v40);
          uint64_t v42 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v41);
          uint64_t v45 = *(char *)(v42 + 23) >= 0 ? v42 : *(void *)v42;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    old source: @%s@\n    new source: @%s@\n", v43, v44, v39, v45);
          unint64_t v46 = SHIBYTE(v89) >= 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
          std::string::size_type v47 = SHIBYTE(v89) >= 0 ? HIBYTE(v89) : (std::string::size_type)v88;
          std::string::append(v104, v46, v47);
          if (SHIBYTE(v89) < 0) {
            operator delete(__p);
          }
        }
        *((unsigned char *)v27 + 208)  = 1;
        uint64_t v49 = *v10;
        uint64_t v48 = v10[1];
        if (v48) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v50 = (std::__shared_weak_count *)v27[28];
        std::string v27[27] = v49;
        v27[28]  = v48;
        if (v50) {
          sub_216784EC4(v50);
        }
        if (v104)
        {
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Resync all prims using layer stack because expression variable source has changed.\n", v25, v26);
          if (SHIBYTE(v89) >= 0) {
            uint64_t v51 = (const std::string::value_type *)&__p;
          }
          else {
            uint64_t v51 = (const std::string::value_type *)__p;
          }
          if (SHIBYTE(v89) >= 0) {
            std::string::size_type v52 = HIBYTE(v89);
          }
          else {
            std::string::size_type v52 = (std::string::size_type)v88;
          }
          std::string::append(v104, v51, v52);
          if (SHIBYTE(v89) < 0) {
            operator delete(__p);
          }
        }
LABEL_115:
        sub_216BEC294((uint64_t)v103, v6);
        goto LABEL_116;
      }
      std::string::size_type v62 = *(const void ***)(sub_216BBCEA8(v6) + 424);
      if (v62)
      {
        while (1)
        {
          std::string::size_type v63 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2169F3CFC(v11, v62 + 2);
          uint64_t v64 = (std::type_info *)sub_2169F3CFC((uint64_t *)v12, v62 + 2);
          if ((v63 != 0) != (v64 != 0)
            || v63
            && v64
            && !pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v63, v64, v65))
          {
            break;
          }
          std::string::size_type v62 = (const void **)*v62;
          if (!v62) {
            goto LABEL_83;
          }
        }
        pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStack(a1, (uint64_t)v105, v6, 1, 0, 1);
        if (v104)
        {
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Resync all prims using layer stack because an expression variable used for sublayers changed.\n", v79, v80);
          unint64_t v81 = SHIBYTE(v89) >= 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
          std::string::size_type v82 = SHIBYTE(v89) >= 0 ? HIBYTE(v89) : (std::string::size_type)v88;
          std::string::append(v104, v81, v82);
          if (SHIBYTE(v89) < 0) {
            operator delete(__p);
          }
        }
        goto LABEL_115;
      }
LABEL_83:
      PrimsUsingExpressionVariablesFromLayerStacuint64_t k = pxrInternal__aapl__pxrReserved__::PcpCache::GetPrimsUsingExpressionVariablesFromLayerStack((uint64_t)v105, (uint64_t)v6);
      unint64_t v67 = (unsigned int *)*PrimsUsingExpressionVariablesFromLayerStack;
      std::string::size_type v68 = (unsigned int *)PrimsUsingExpressionVariablesFromLayerStack[1];
      while (v67 != v68)
      {
        uint64_t v69 = (uint64_t *)*((void *)pxrInternal__aapl__pxrReserved__::PcpCache::GetExpressionVariablesFromLayerStackUsedByPrim((uint64_t)v105, v67, (uint64_t)v6)+ 2);
        if (v69)
        {
          while (1)
          {
            uint64_t v70 = v69 + 2;
            uint64_t v71 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2169F3CFC(v11, (const void **)v69 + 2);
            uint64_t v72 = (std::type_info *)sub_2169F3CFC((uint64_t *)v12, (const void **)v69 + 2);
            if ((v71 != 0) != (v72 != 0)
              || v71
              && v72
              && (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v71, v72, v73) & 1) == 0)
            {
              break;
            }
            uint64_t v69 = (uint64_t *)*v69;
            if (!v69) {
              goto LABEL_104;
            }
          }
          if (v104)
          {
            Text  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v67);
            if (*((char *)v69 + 39) < 0) {
              uint64_t v70 = (void *)*v70;
            }
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Resync <%s> because expression variable '%s' has changed\n", v75, v76, Text, v70);
            if (SHIBYTE(v89) >= 0) {
              uint64_t v77 = (const std::string::value_type *)&__p;
            }
            else {
              uint64_t v77 = (const std::string::value_type *)__p;
            }
            if (SHIBYTE(v89) >= 0) {
              std::string::size_type v78 = HIBYTE(v89);
            }
            else {
              std::string::size_type v78 = (std::string::size_type)v88;
            }
            std::string::append(v104, v77, v78);
            if (SHIBYTE(v89) < 0) {
              operator delete(__p);
            }
          }
          pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, v105, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v67);
        }
LABEL_104:
        v67 += 2;
      }
      long long __p = v6;
      char v88 = &v105;
      char v89 = &v104;
      uint64_t v90 = v101;
      v93[0]  = &__p;
      v93[1]  = sub_216BEE1EC;
      pxrInternal__aapl__pxrReserved__::PcpCache::_ForEachLayerStack((uint64_t)v105, (uint64_t)v93);
    }
    else if (v104)
    {
      uint8x8_t v53 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(v6);
      unint64_t v54 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v53);
      uint8x8_t v55 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v54);
      uint64_t v56 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v55);
      uint64_t v59 = *(char *)(v56 + 23) >= 0 ? v56 : *(void *)v56;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Expression variables unchanged for layer stack @%s@\n", v57, v58, v59);
      unint64_t v60 = SHIBYTE(v89) >= 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
      std::string::size_type v61 = SHIBYTE(v89) >= 0 ? HIBYTE(v89) : (std::string::size_type)v88;
      std::string::append(v104, v60, v61);
      if (SHIBYTE(v89) < 0) {
        operator delete(__p);
      }
    }
LABEL_116:
    sub_216BEC3D0(v101);
  }
  sub_216BEC6FC((uint64_t)&v100);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v99);
  long long __p = &v98;
  sub_216787968((void ***)&__p);
  uint64_t v83 = v97;
  if (v97 && atomic_fetch_add_explicit((atomic_uint *volatile)(v97 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v83 + 8))(v83);
  }
  uint64_t v84 = v96;
  if (v96 && atomic_fetch_add_explicit((atomic_uint *volatile)(v96 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v84 + 8))(v84);
  }
  return sub_2168BD438(v101);
}

void sub_216BE8E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  sub_2168BD438((void *)(v31 - 192));
  _Unwind_Resume(a1);
}

unsigned char *pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStack(uint64_t **a1, uint64_t a2, uint64_t *a3, char a4, char a5, int a6)
{
  int v15 = (unint64_t *)a3;
  uint64_t result = sub_216BED728(a1, (uint64_t)a3, (uint64_t)&unk_2174BFD90, &v15);
  char v13 = result[48] | a4;
  result[48]  = v13;
  result[49] |= a5;
  result[52] |= a6;
  if (v13) {
    result[49]  = 0;
  }
  if ((a4 & 1) != 0 || a6)
  {
    uint64_t result = (unsigned char *)pxrInternal__aapl__pxrReserved__::PcpCache::UsesLayerStack(a2, a3);
    if (result)
    {
      unint64_t v14 = a2;
      int v15 = &v14;
      uint64_t result = sub_216BEDA38(a1 + 3, &v14, (uint64_t)&unk_2174BFD90, (uint64_t **)&v15);
      result[160]  = 1;
    }
  }
  return result;
}

void *sub_216BE9024(void *a1)
{
  unsigned int v2 = (_DWORD *)*a1;
  if (*a1)
  {
    unsigned __int8 v3 = (_DWORD *)a1[1];
    uint64_t v4 = (_DWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v3 -= 4;
        sub_216BEC6BC(v3);
      }
      while (v3 != v2);
      uint64_t v4 = (_DWORD *)*a1;
    }
    a1[1]  = v2;
    operator delete(v4);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::DidMuteLayer(uint64_t **a1, pxrInternal__aapl__pxrReserved__::PcpCache *a2, uint64_t a3)
{
  memset(&v22, 0, sizeof(v22));
  BOOL v6 = sub_216BBBDFC(0);
  if (v6) {
    uint64_t v7 = &v22;
  }
  else {
    uint64_t v7 = 0;
  }
  pxrInternal__aapl__pxrReserved__::PcpChanges::_LoadSublayerForChange(a2, a3, 1, &v21);
  sub_216ABBA60((uint64_t *)&__p, (uint64_t *)&v21);
  AllLayerStacksUsingLayer  = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::FindAllLayerStacksUsingLayer((uint64_t)a2, (uint64_t)&__p);
  uint64_t v11 = v19;
  if (v19 && atomic_fetch_add_explicit((atomic_uint *volatile)(v19 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  if (v6)
  {
    uint64_t v12 = *(char *)(a3 + 23) >= 0 ? a3 : *(void *)a3;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Did mute layer @%s@\n", v8, v9, v12);
    char v13 = (v20 & 0x80u) == 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
    std::string::size_type v14 = (v20 & 0x80u) == 0 ? v20 : v19;
    std::string::append(&v22, v13, v14);
    if ((char)v20 < 0) {
      operator delete(__p);
    }
  }
  if (*AllLayerStacksUsingLayer != AllLayerStacksUsingLayer[1])
  {
    sub_216ABBA60((uint64_t *)&__p, (uint64_t *)&v21);
    pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeSublayerAndLayerStacks(a1, a2, AllLayerStacksUsingLayer, (uint64_t *)a3, (uint64_t *)&__p, 1, v7);
    uint64_t v15 = v19;
    if (v19)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
    }
  }
  if (v6)
  {
    std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v22.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      uint64_t v17 = (std::string *)v22.__r_.__value_.__r.__words[0];
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v17 = &v22;
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"PcpChanges::DidMuteLayer\n%s", v8, v9, v17);
    }
  }
  sub_216ABB798(&v21);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_216BE928C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216BE9320()
{
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::_LoadSublayerForChange(pxrInternal__aapl__pxrReserved__::PcpCache *this@<X1>, uint64_t a2@<X2>, int a3@<W3>, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a4@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  LayerStackuint64_t Identifier = pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(this);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v18, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(LayerStackIdentifier + 32));
  *a4  = 0;
  FileFormatTarget  = pxrInternal__aapl__pxrReserved__::PcpCache::GetFileFormatTarget(this);
  pxrInternal__aapl__pxrReserved__::Pcp_GetArgumentsForFileFormatTarget(a2, FileFormatTarget, (uint64_t)v17);
  if (a3)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::Find(a2, (uint64_t)v17, (uint64_t *)&v14);
    int v10 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v15;
    if (v15)
    {
      if (*(unsigned char *)(sub_216850B68((uint64_t *)&v15) + 14)) {
        int v10 = v14;
      }
      else {
        int v10 = 0;
      }
    }
    char v16 = v10;
    sub_2168BD80C((uint64_t *)&v16);
    uint64_t v11 = *a4;
    *a4  = v16;
    char v16 = 0;
    sub_2168BD378((int)a4, v11);
    sub_216ABB798(&v16);
    uint64_t v12 = (uint64_t)v15;
    if (v15 && atomic_fetch_add_explicit(v15 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen(a2, v17, &v14);
    char v13 = *a4;
    *a4  = v14;
    std::string::size_type v14 = 0;
    sub_2168BD378((int)a4, v13);
    sub_216ABB798(&v14);
  }
  sub_2167877AC((uint64_t)v17, (void *)v17[1]);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v18);
}

void sub_216BE94AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  int v10 = va_arg(va2, void *);
  uint64_t v11 = va_arg(va2, void);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  sub_2167877AC((uint64_t)va1, v10);
  sub_216ABB798(v2);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)va2);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeSublayerAndLayerStacks(uint64_t **a1, pxrInternal__aapl__pxrReserved__::PcpCache *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, int a6, std::string *a7)
{
  unsigned __int8 v16 = 0;
  pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeSublayer(a1, a2, a3, a4, a5, a6, a7, &v16);
  unint64_t result = (unint64_t)sub_21697CF14(a5);
  if (v12 & 1 | result)
  {
    char v13 = (uint64_t *)*a3;
    std::string::size_type v14 = (uint64_t *)a3[1];
    if (v13 != v14)
    {
      int v15 = v16;
      do
      {
        unint64_t result = (unint64_t)pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStack(a1, (uint64_t)a2, v13, 1, 0, v15 != 0);
        v13 += 2;
      }
      while (v13 != v14);
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::DidUnmuteLayer(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  memset(&v22, 0, sizeof(v22));
  BOOL v6 = sub_216BBBDFC(0);
  if (v6) {
    uint64_t v7 = &v22;
  }
  else {
    uint64_t v7 = 0;
  }
  pxrInternal__aapl__pxrReserved__::PcpChanges::_LoadSublayerForChange((pxrInternal__aapl__pxrReserved__::PcpCache *)a2, a3, 0, &v21);
  uint64_t v8 = sub_216BD4B58(a2 + 25);
  AllUsingMutedLayer  = (uint64_t *)pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::FindAllUsingMutedLayer(v8, (unsigned __int8 *)a3);
  if (v6)
  {
    uint64_t v12 = *(char *)(a3 + 23) >= 0 ? a3 : *(void *)a3;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Did unmute layer @%s@\n", v9, v10, v12);
    char v13 = (v20 & 0x80u) == 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
    std::string::size_type v14 = (v20 & 0x80u) == 0 ? v20 : v19;
    std::string::append(&v22, v13, v14);
    if ((char)v20 < 0) {
      operator delete(__p);
    }
  }
  if (*AllUsingMutedLayer != AllUsingMutedLayer[1])
  {
    sub_216ABBA60((uint64_t *)&__p, (uint64_t *)&v21);
    pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeSublayerAndLayerStacks(a1, (pxrInternal__aapl__pxrReserved__::PcpCache *)a2, AllUsingMutedLayer, (uint64_t *)a3, (uint64_t *)&__p, 0, v7);
    uint64_t v15 = v19;
    if (v19)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
    }
  }
  if (v6)
  {
    std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v22.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      uint64_t v17 = (std::string *)v22.__r_.__value_.__r.__words[0];
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v17 = &v22;
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"PcpChanges::DidUnmuteLayer\n%s", v9, v10, v17);
    }
  }
  sub_216ABB798(&v21);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_216BE97A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::DidMaybeFixSublayer(uint64_t **a1, pxrInternal__aapl__pxrReserved__::PcpCache *a2, uint64_t *a3, uint64_t a4)
{
  memset(&v29, 0, sizeof(v29));
  BOOL v8 = sub_216BBBDFC(0);
  if (v8) {
    uint64_t v9 = &v29;
  }
  else {
    uint64_t v9 = 0;
  }
  pxrInternal__aapl__pxrReserved__::PcpChanges::_LoadSublayerForChange(a2, a3, a4, 0, &v28);
  AllLayerStacksUsingLayer  = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::FindAllLayerStacksUsingLayer((uint64_t)a2, (uint64_t)a3);
  if (v8)
  {
    uint64_t v11 = sub_21697CF14(a3);
    if (v12 & 1 | (unint64_t)v11)
    {
      std::string::size_type v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a3);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v14);
      unsigned __int8 v16 = *(char *)(Identifier + 23) >= 0 ? (const char *)Identifier : *(const char **)Identifier;
    }
    else
    {
      unsigned __int8 v16 = "invalid";
    }
    uint64_t v17 = *(char *)(a4 + 23) >= 0 ? a4 : *(void *)a4;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Layer @%s@ changed sublayer @%s@\n", v12, v13, v16, v17);
    uint64_t v18 = (v27 & 0x80u) == 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
    std::string::size_type v19 = (v27 & 0x80u) == 0 ? v27 : v26;
    std::string::append(&v29, v18, v19);
    if ((char)v27 < 0) {
      operator delete(__p);
    }
  }
  sub_216ABBA60((uint64_t *)&__p, (uint64_t *)&v28);
  pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeSublayerAndLayerStacks(a1, a2, AllLayerStacksUsingLayer, (uint64_t *)a4, (uint64_t *)&__p, 0, v9);
  uint64_t v22 = v26;
  if (v26 && atomic_fetch_add_explicit((atomic_uint *volatile)(v26 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  if (v8)
  {
    std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v29.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      std::string::size_type v24 = (std::string *)v29.__r_.__value_.__r.__words[0];
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v24 = &v29;
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"PcpChanges::DidMaybeFixSublayer\n%s", v20, v21, v24);
    }
  }
  sub_216ABB798(&v28);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
}

void sub_216BE9A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::_LoadSublayerForChange(pxrInternal__aapl__pxrReserved__::PcpCache *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, int a4@<W4>, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a5@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v10 = sub_21697CF14(a2);
  if (!(v11 & 1 | (unint64_t)v10))
  {
    *a5  = 0;
    return;
  }
  LayerStackuint64_t Identifier = pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a1);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v25, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(LayerStackIdentifier + 32));
  *a5  = 0;
  FileFormatTarget  = pxrInternal__aapl__pxrReserved__::PcpCache::GetFileFormatTarget(a1);
  pxrInternal__aapl__pxrReserved__::Pcp_GetArgumentsForFileFormatTarget(a3, FileFormatTarget, (uint64_t)v24);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsAnonymousLayerIdentifier(a3))
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::Find(a3, (uint64_t)v24, (uint64_t *)&v21);
    std::string::size_type v14 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v22;
    if (v22)
    {
      if (*(unsigned char *)(sub_216850B68((uint64_t *)&v22) + 14)) {
        std::string::size_type v14 = v21;
      }
      else {
        std::string::size_type v14 = 0;
      }
    }
  }
  else
  {
    if (!a4)
    {
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v21);
      pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpenRelativeToLayer(a2, a3, v24, &v23);
      uint64_t v17 = *a5;
      *a5  = v23;
      uint64_t v23 = 0;
      sub_2168BD378((int)a5, v17);
      sub_216ABB798(&v23);
      uint64_t v18 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v18) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      std::string::size_type v19 = sub_216862604((unint64_t *)&v21, 0);
      LOBYTE(v23)  = 0;
      unsigned __int8 v20 = (void *)sub_2168520EC(v18 + 19, &v23);
      if (v20 != v19) {
        pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v18, v19, v20);
      }
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v21);
      goto LABEL_22;
    }
    pxrInternal__aapl__pxrReserved__::SdfLayer::FindRelativeToLayer(a2, a3, (uint64_t)v24, (uint64_t *)&v21);
    std::string::size_type v14 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v22;
    if (v22)
    {
      if (*(unsigned char *)(sub_216850B68((uint64_t *)&v22) + 14)) {
        std::string::size_type v14 = v21;
      }
      else {
        std::string::size_type v14 = 0;
      }
    }
  }
  uint64_t v23 = v14;
  sub_2168BD80C((uint64_t *)&v23);
  uint64_t v15 = *a5;
  *a5  = v23;
  uint64_t v23 = 0;
  sub_2168BD378((int)a5, v15);
  sub_216ABB798(&v23);
  uint64_t v16 = (uint64_t)v22;
  if (v22)
  {
    if (atomic_fetch_add_explicit(v22 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
LABEL_22:
  sub_2167877AC((uint64_t)v24, (void *)v24[1]);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v25);
}

void sub_216BE9D48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *);
  va_copy(va3, va2);
  uint64_t v9 = va_arg(va3, void);
  char v11 = va_arg(va3, void *);
  uint64_t v12 = va_arg(va3, void);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va1);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  sub_2167877AC((uint64_t)va2, v11);
  sub_216ABB798(v2);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)va3);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeSublayer(uint64_t **a1, pxrInternal__aapl__pxrReserved__::PcpCache *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, int a6, std::string *a7, unsigned char *a8)
{
  uint64_t v16 = sub_21697CF14(a5);
  if (v17 & 1 | (unint64_t)v16)
  {
    uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a5);
    pxrInternal__aapl__pxrReserved__::SdfLayer::IsEmpty(v18);
  }
  *a8  = 0;
  if (a7)
  {
    std::string::size_type v19 = sub_21697CF14(a5);
    if (v20 & 1 | (unint64_t)v19)
    {
      if (*a8) {
        uint64_t v22 = "significant";
      }
      else {
        uint64_t v22 = "insignificant";
      }
    }
    else
    {
      uint64_t v22 = "invalid";
    }
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v23 = a4;
    }
    else {
      uint64_t v23 = (uint64_t *)*a4;
    }
    std::string::size_type v24 = "removed";
    if (!a6) {
      std::string::size_type v24 = "added";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  %s sublayer @%s@ %s\n", v20, v21, v22, v23, v24);
    if ((v64 & 0x80u) == 0) {
      p_p  = (const std::string::value_type *)&__p;
    }
    else {
      p_p  = (const std::string::value_type *)__p;
    }
    if ((v64 & 0x80u) == 0) {
      std::string::size_type v26 = v64;
    }
    else {
      std::string::size_type v26 = v63;
    }
    std::string::append(a7, p_p, v26);
    if ((char)v64 < 0) {
      operator delete(__p);
    }
  }
  uint64_t result = (uint64_t)sub_21697CF14(a5);
  if (v28 & 1 | (unint64_t)result)
  {
    if (*a8 || (uint64_t result = pxrInternal__aapl__pxrReserved__::PcpCache::IsUsd(a2), (result & 1) == 0))
    {
      std::string v29 = (void *)a5[1];
      if (v29)
      {
        if (*(unsigned char *)(sub_216850B68(a5 + 1) + 14)) {
          std::string v29 = (void *)*a5;
        }
        else {
          std::string v29 = 0;
        }
      }
      uint64_t v56 = a5;
      long long __p = v29;
      sub_2168BD80C((uint64_t *)&__p);
      sub_216BEC90C((uint64_t)(a1 + 9), (unint64_t *)&__p, &__p);
      uint64_t result = (uint64_t)sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&__p);
      uint64_t v32 = a3[1];
      uint64_t v60 = *a3;
      uint64_t v61 = v32;
      if (v60 != v32)
      {
        char v33 = 0;
        do
        {
          uint64_t v34 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216BEBD74(&v60, v30, v31);
          std::string::size_type v35 = (int *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v34);
          pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(a2, (uint64_t *)v34, v35, 63, 1, 1, 1, (uint64_t *)&__p);
          uint8x8_t v36 = (pxrInternal__aapl__pxrReserved__::SdfPath *)__p;
          unint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v63;
          while (v36 != v37)
          {
            if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(v36)) {
              goto LABEL_69;
            }
            if (!((a7 == 0) | v33 & 1))
            {
              if (*a8) {
                uint64_t v38 = "Resync";
              }
              else {
                uint64_t v38 = "Spec changes";
              }
              LayerStackuint64_t Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
              uint64_t v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(LayerStackIdentifier);
              uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v40);
              if (*(char *)(Identifier + 23) >= 0) {
                uint64_t v42 = Identifier;
              }
              else {
                uint64_t v42 = *(void *)Identifier;
              }
              if (*a8) {
                float v43 = "significant";
              }
              else {
                float v43 = "insignificant";
              }
              uint64_t v44 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v56);
              uint64_t v45 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v44);
              if (*(char *)(v45 + 23) >= 0) {
                uint64_t v48 = v45;
              }
              else {
                uint64_t v48 = *(void *)v45;
              }
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  %s following in @%s@ due to %s reload in sublayer @%s@:\n", v46, v47, v38, v42, v43, v48);
              if ((v59 & 0x80u) == 0) {
                uint64_t v49 = (const std::string::value_type *)&v57;
              }
              else {
                uint64_t v49 = (const std::string::value_type *)v57;
              }
              if ((v59 & 0x80u) == 0) {
                std::string::size_type v50 = v59;
              }
              else {
                std::string::size_type v50 = v58;
              }
              std::string::append(a7, v49, v50);
              if ((char)v59 < 0) {
                operator delete(v57);
              }
LABEL_57:
              Text  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v36);
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    <%s>\n", v52, v53, Text);
              if ((v59 & 0x80u) == 0) {
                unint64_t v54 = (const std::string::value_type *)&v57;
              }
              else {
                unint64_t v54 = (const std::string::value_type *)v57;
              }
              if ((v59 & 0x80u) == 0) {
                std::string::size_type v55 = v59;
              }
              else {
                std::string::size_type v55 = v58;
              }
              std::string::append(a7, v54, v55);
              if ((char)v59 < 0) {
                operator delete(v57);
              }
              goto LABEL_65;
            }
            if (a7) {
              goto LABEL_57;
            }
LABEL_65:
            if (*a8) {
              pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, a2, v36);
            }
            else {
              pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeSpecStackInternal(a1, a2, v36);
            }
            char v33 = 1;
LABEL_69:
            uint8x8_t v36 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v36 + 72);
          }
          uint64_t v57 = &__p;
          sub_216BE117C((void ***)&v57);
          uint64_t result = (uint64_t)sub_216BEBE54(&v60);
        }
        while (v60 != v61);
      }
    }
  }
  return result;
}

void sub_216BEA1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpChanges::DidMaybeFixAsset(uint64_t **a1, pxrInternal__aapl__pxrReserved__::PcpCache *this, pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a3, uint64_t *a4, uint64_t a5)
{
  pxrInternal__aapl__pxrReserved__::PcpCache::FindLayerStack(this, a3, &v62);
  int v10 = sub_216BCA2D4(&v62);
  if (v11 & 1 | (unint64_t)v10)
  {
    memset(&v61, 0, sizeof(v61));
    BOOL v12 = sub_216BBBDFC(0);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v60);
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    long long __p = &v57;
    pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpenRelativeToLayer(a4, a5, &__p, &v59);
    sub_2167877AC((uint64_t)&__p, v57);
    char v13 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v13) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    std::string::size_type v14 = (char *)sub_216862604(&v60, 0);
    LOBYTE(__p)  = 0;
    uint64_t v16 = (char *)sub_2168520EC(v13 + 19, &__p);
    if (v16 != v14) {
      pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v13, v14, v16);
    }
    if (v12)
    {
      if (*(char *)(a5 + 23) < 0) {
        a5  = *(void *)a5;
      }
      if (v59)
      {
        char v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v59);
        pxrInternal__aapl__pxrReserved__::SdfLayer::IsEmpty(v17);
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Asset @%s@ %s\n", v15, v16, a5, "invalid");
      if (v58 >= 0) {
        p_p  = (const std::string::value_type *)&__p;
      }
      else {
        p_p  = (const std::string::value_type *)__p;
      }
      if (v58 >= 0) {
        std::string::size_type v19 = HIBYTE(v58);
      }
      else {
        std::string::size_type v19 = (std::string::size_type)v57;
      }
      std::string::append(&v61, p_p, v19);
      if (SHIBYTE(v58) < 0) {
        operator delete(__p);
      }
    }
    if (v59)
    {
      sub_216BEC90C((uint64_t)(a1 + 9), (unint64_t *)&v59, &v59);
      if (v12)
      {
        LayerStackuint64_t Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(this);
        uint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(LayerStackIdentifier);
        uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v21);
        uint64_t v23 = *(char *)(Identifier + 23) >= 0 ? Identifier : *(void *)Identifier;
        std::string::size_type v24 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(&v62);
        uint64_t v25 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v24);
        std::string::size_type v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v25);
        uint64_t v27 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v26);
        int v28 = *(char *)(v27 + 23);
        uint64_t v29 = *(void *)v27;
        Text  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)((char *)a3 + 80));
        uint64_t v33 = v28 >= 0 ? v27 : v29;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Resync following in @%s@ significantly due to loading asset used by @%s@<%s>:\n", v31, v32, v23, v33, Text);
        uint64_t v34 = v58 >= 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
        std::string::size_type v35 = v58 >= 0 ? (atomic_uint *)HIBYTE(v58) : v57;
        std::string::append(&v61, v34, (std::string::size_type)v35);
        if (SHIBYTE(v58) < 0) {
          operator delete(__p);
        }
      }
      pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(this, (uint64_t *)&__p);
      uint64_t v36 = sub_216851B24((uint64_t)&v62);
      uint64_t v37 = sub_216851B24((uint64_t)&__p);
      uint64_t v38 = v57;
      if (v57 && atomic_fetch_add_explicit(v57 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v38 + 8))(v38);
      }
      if (v36 == v37)
      {
        if (v12)
        {
          uint64_t v39 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)((char *)a3 + 80));
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    <%s>\n", v40, v41, v39);
          uint64_t v42 = v58 >= 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
          float v43 = v58 >= 0 ? (atomic_uint *)HIBYTE(v58) : v57;
          std::string::append(&v61, v42, (std::string::size_type)v43);
          if (SHIBYTE(v58) < 0) {
            operator delete(__p);
          }
        }
        pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, this, (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)((char *)a3 + 80));
      }
      pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(this, &v62, (int *)a3 + 20, 63, 1, 1, 1, (uint64_t *)&__p);
      uint64_t v44 = (pxrInternal__aapl__pxrReserved__::SdfPath *)__p;
      uint64_t v45 = v57;
      if (__p != v57)
      {
        do
        {
          if (v12)
          {
            unint64_t v46 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v44);
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    <%s>\n", v47, v48, v46);
            uint64_t v49 = (v55 & 0x80u) == 0 ? (const std::string::value_type *)v54 : (const std::string::value_type *)v54[0];
            std::string::size_type v50 = (v55 & 0x80u) == 0 ? (void *)v55 : v54[1];
            std::string::append(&v61, v49, (std::string::size_type)v50);
            if ((char)v55 < 0) {
              operator delete(v54[0]);
            }
          }
          pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, this, v44);
          uint64_t v44 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v44 + 72);
        }
        while (v44 != (pxrInternal__aapl__pxrReserved__::SdfPath *)v45);
      }
      v54[0]  = &__p;
      sub_216BE117C((void ***)v54);
    }
    if (v12)
    {
      std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v61.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        std::string::size_type v52 = (std::string *)v61.__r_.__value_.__r.__words[0];
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v52 = &v61;
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"PcpChanges::DidMaybeFixAsset\n%s", v15, v16, v52);
      }
    }
    sub_216ABB798(&v59);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v60);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
  }
  uint64_t result = v63;
  if (v63)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v63 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216BEA68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_216ABB798(&a24);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a25);
  if (a33 < 0) {
    operator delete(a28);
  }
  std::string::size_type v35 = *(atomic_uint **)(v33 - 72);
  if (v35)
  {
    if (atomic_fetch_add_explicit(v35 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v35 + 8))(v35);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t **pxrInternal__aapl__pxrReserved__::PcpChanges::_GetCacheChanges(uint64_t **this, const pxrInternal__aapl__pxrReserved__::PcpCache *a2)
{
  unsigned __int8 v3 = a2;
  uint64_t v4 = &v3;
  return sub_216BEDA38(this + 3, (unint64_t *)&v3, (uint64_t)&unk_2174BFD90, (uint64_t **)&v4) + 5;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSpecs(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::PcpCache *a2, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t *a4, pxrInternal__aapl__pxrReserved__::SdfPath *a5)
{
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(this)) {
    return pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSpecStack(a1, a2, this);
  }
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath(a5) & 1) == 0)
  {
    NodeProvidingSpec  = "pcp/changes.cpp";
    std::string::size_type v26 = "DidChangeSpecs";
    uint64_t v27 = 1590;
    int v28 = "void pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSpecs(const PcpCache *, const SdfPath &, const Sdf"
          "LayerHandle &, const SdfPath &)";
    char v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&NodeProvidingSpec, "changedPath.IsPrimOrPrimVariantSelectionPath()", 0);
  }
  int v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a4);
  HasSpec  = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v10, a5);
  PrimIndex  = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::PcpCache::FindPrimIndex((uint64_t)a2, (unsigned int *)this);
  if (PrimIndex
    && (char v13 = (uint64_t *)PrimIndex, pxrInternal__aapl__pxrReserved__::PcpPrimIndex::HasSpecs(PrimIndex)))
  {
    if ((HasSpec & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v13, 6u, (uint64_t *)&NodeProvidingSpec);
      uint64_t v15 = (uint64_t *)NodeProvidingSpec;
      std::string::size_type v14 = (uint64_t *)v26;
      uint64_t v16 = (uint64_t *)v27;
      if (NodeProvidingSpec == (char *)v27 && v26 == v28) {
        return pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, a2, this);
      }
      int v23 = HasSpec;
      std::string::size_type v24 = v28 - 1;
      while (1)
      {
        char v17 = v14;
        v30[0]  = v15;
        v30[1]  = v14;
        LayerStacuint64_t k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v30);
        Path  = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v30);
        if (pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasPrimSpecs(LayerStack, Path)) {
          break;
        }
        std::string::size_type v14 = (uint64_t *)((char *)v17 + 1);
        if (v15 == v16 && v24 == (const char *)v17) {
          return pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, a2, this);
        }
      }
      HasSpec  = v23;
    }
    NodeProvidingSpec  = (char *)pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeProvidingSpec(v13, a4, a5);
    std::string::size_type v26 = v21;
    if (NodeProvidingSpec && v21 != (const char *)-1)
    {
      if (!pxrInternal__aapl__pxrReserved__::PcpPrimIndex::IsInstanceable((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)v13)
        || !sub_216BEAA24((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&NodeProvidingSpec))
      {
        return pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSpecStack(a1, a2, this);
      }
      return pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, a2, this);
    }
    if (HasSpec)
    {
      uint64_t v31 = a2;
      v30[0]  = (uint64_t *)&v31;
      uint64_t v22 = sub_216BEDA38(a1 + 3, (unint64_t *)&v31, (uint64_t)&unk_2174BFD90, v30);
      return sub_216A5CF30(v22 + 11, this, this);
    }
  }
  else if (HasSpec)
  {
    return pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(a1, a2, this);
  }
  return pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSpecStack(a1, a2, this);
}

uint64_t sub_216BEAA24(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1)
{
  if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode(a1)
    && pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor(a1))
  {
    uint64_t ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a1);
    uint64_t v8 = v2;
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&ParentNode)) {
      return 0;
    }
    while ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&ParentNode) & 1) != 0)
    {
      uint64_t ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&ParentNode);
      uint64_t v8 = v3;
      if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&ParentNode)) {
        return 0;
      }
    }
  }
  LayerStacuint64_t k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a1);
  Path  = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(a1);
  LODWORD(LayerStack)  = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasPrimSpecs(LayerStack, Path);
  return LayerStack ^ pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSpecStack(uint64_t **this, const pxrInternal__aapl__pxrReserved__::PcpCache *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v6 = a2;
  uint64_t v7 = &v6;
  uint64_t v4 = sub_216BEDA38(this + 3, (unint64_t *)&v6, (uint64_t)&unk_2174BFD90, (uint64_t **)&v7);
  return sub_216A5CF30(v4 + 8, a3, a3);
}

uint64_t **pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeTargets(uint64_t a1, unint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v8 = a2;
  uint64_t v9 = &v8;
  uint64_t v6 = sub_216BEDA38((uint64_t **)(a1 + 24), &v8, (uint64_t)&unk_2174BFD90, (uint64_t **)&v9);
  uint64_t v9 = (unint64_t *)a3;
  uint64_t result = sub_216BED1EC(v6 + 14, (unint64_t *)a3, (uint64_t)&unk_2174BFD90, (_DWORD **)&v9);
  *((_DWORD *)result + 9) |= a4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangePaths(uint64_t **this, const pxrInternal__aapl__pxrReserved__::PcpCache *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  if (sub_216BBBDFC(0))
  {
    LayerStackuint64_t Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(LayerStackIdentifier);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v9);
    if (*(char *)(Identifier + 23) >= 0) {
      uint64_t v11 = Identifier;
    }
    else {
      uint64_t v11 = *(void *)Identifier;
    }
    Text  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
    char v13 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a4);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"PcpChanges::DidChangePaths: @%s@<%s> to <%s>\n", v14, v15, v11, Text, v13);
  }
  uint64_t v18 = a2;
  std::string::size_type v19 = &v18;
  uint64_t v16 = sub_216BEDA38(this + 3, (unint64_t *)&v18, (uint64_t)&unk_2174BFD90, (uint64_t **)&v19);
  return sub_216BEAC8C((uint64_t *)v16 + 17, a3, a4);
}

uint64_t sub_216BEAC8C(uint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void *)(v6 - 8);
  if (v9 >= v8)
  {
    uint64_t v11 = (uint64_t)(v9 - *a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v12 = v7 - *a1;
    uint64_t v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    uint64_t v21 = v6;
    if (v14) {
      uint64_t v15 = (char *)sub_216787EE0(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    char v17 = v15;
    uint64_t v18 = &v15[16 * v11];
    unsigned __int8 v20 = &v15[16 * v14];
    sub_2169D36F0(v18, a2, a3);
    std::string::size_type v19 = v18 + 16;
    sub_216BED33C(a1, &v17);
    uint64_t v10 = a1[1];
    sub_216BED4E8(&v17);
  }
  else
  {
    sub_2169D36F0(*(_DWORD **)(v6 - 8), a2, a3);
    uint64_t v10 = v9 + 16;
    a1[1]  = v9 + 16;
  }
  a1[1]  = v10;
  return v10 - 16;
}

void sub_216BEAD8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BED4E8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpChanges::DidDestroyCache(pxrInternal__aapl__pxrReserved__::PcpChanges *this, const pxrInternal__aapl__pxrReserved__::PcpCache *a2)
{
  BOOL v5 = a2;
  sub_216BED564((uint64_t)this + 24, (unint64_t *)&v5);
  BOOL v5 = a2;
  return sub_216BED5EC((uint64_t)this + 48, (unint64_t *)&v5);
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeAssetResolver(pxrInternal__aapl__pxrReserved__::PcpChanges *this, const pxrInternal__aapl__pxrReserved__::PcpCache *a2)
{
  unsigned __int8 v20 = a2;
  if (sub_216BBBDFC(0)) {
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"PcpChanges::DidChangeAssetResolver\n", v4, v5);
  }
  long long __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  BOOL v6 = sub_216BBBDFC(0);
  p_p  = &__p;
  if (!v6) {
    p_p  = 0;
  }
  v16[0]  = this;
  v16[1]  = &v20;
  v16[2]  = p_p;
  v21[0]  = v16;
  v21[1]  = sub_216BED694;
  pxrInternal__aapl__pxrReserved__::PcpCache::_ForEachLayerStack((uint64_t)a2, (uint64_t)v21);
  if (v6)
  {
    uint64_t v8 = HIBYTE(v19);
    if (v19 < 0) {
      uint64_t v8 = v18;
    }
    if (v8)
    {
      LayerStackuint64_t Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(v20);
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(LayerStackIdentifier);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v10);
      if (*(char *)(Identifier + 23) >= 0) {
        uint64_t v14 = Identifier;
      }
      else {
        uint64_t v14 = *(void *)Identifier;
      }
      uint64_t v15 = &__p;
      if (v19 < 0) {
        uint64_t v15 = __p;
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"   Resync following in @%s@ significant due to layer resolved path change:\n%s", v12, v13, v14, v15);
    }
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
}

void sub_216BEAEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpChanges::Swap(pxrInternal__aapl__pxrReserved__::PcpChanges *this, pxrInternal__aapl__pxrReserved__::PcpChanges *a2)
{
  sub_2168A6B2C((uint64_t *)this, (uint64_t)a2);
  sub_2168A6B2C((uint64_t *)this + 3, (uint64_t)a2 + 24);
  sub_2168A6B2C((uint64_t *)this + 6, (uint64_t)a2 + 48);
  sub_2168A6B2C((uint64_t *)this + 9, (uint64_t)a2 + 72);

  return sub_2168A6B2C((uint64_t *)this + 12, (uint64_t)a2 + 96);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpChanges::IsEmpty(pxrInternal__aapl__pxrReserved__::PcpChanges *this)
{
  return !*((void *)this + 2) && !*((void *)this + 5) && *((void *)this + 8) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpChanges::GetCacheChanges(pxrInternal__aapl__pxrReserved__::PcpChanges *this, uint64_t a2, char *a3)
{
  return (uint64_t)this + 24;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpChanges::GetLifeboat(pxrInternal__aapl__pxrReserved__::PcpChanges *this)
{
  return (uint64_t)this + 72;
}

void *pxrInternal__aapl__pxrReserved__::PcpChanges::Apply(pxrInternal__aapl__pxrReserved__::PcpChanges *this, uint64_t a2, char *a3)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::PcpChanges::_Optimize(this, a2, a3);
  uint64_t v21 = *(pxrInternal__aapl__pxrReserved__::PcpChanges **)this;
  for (i = (pxrInternal__aapl__pxrReserved__::PcpChanges *)((char *)this + 8); v21 != i; uint64_t result = sub_216BEB168(&v21))
  {
    unint64_t v7 = sub_216BEB0EC(&v21, v5, v6);
    uint64_t v8 = sub_216BCA2D4((void *)(*v7 + 32));
    if (v9 & 1 | (unint64_t)v8)
    {
      uint64_t v11 = sub_216BEB0EC(&v21, v9, v10);
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)(*v11 + 32));
      uint64_t v15 = sub_216BEB0EC(&v21, v13, v14);
      pxrInternal__aapl__pxrReserved__::PcpLayerStack::Apply(v12, (unsigned __int8 *)(*v15 + 48), (char *)this + 72);
    }
  }
  uint64_t v21 = (pxrInternal__aapl__pxrReserved__::PcpChanges *)*((void *)this + 3);
  long long i = (pxrInternal__aapl__pxrReserved__::PcpChanges *)((char *)this + 32);
  if (v21 != (pxrInternal__aapl__pxrReserved__::PcpChanges *)((char *)this + 32))
  {
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::PcpChanges *)((char *)this + 72);
    do
    {
      uint64_t v17 = *(void *)(*sub_216BEB210(&v21, v5, v6) + 32);
      unsigned __int8 v20 = sub_216BEB210(&v21, v18, v19);
      pxrInternal__aapl__pxrReserved__::PcpCache::Apply(v17, *v20 + 40, v16);
      uint64_t result = sub_216BEB28C(&v21);
    }
    while (v21 != i);
  }
  return result;
}

void *sub_216BEB0EC(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0]  = "tf/iterator.h";
    v3[1]  = "operator->";
    uint64_t v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<pxrInternal__aapl__pxrReserved__::TfWe"
            "akPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::PcpLayerStackChang"
            "es>>::operator->() [T  = const std::map<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrRes"
            "erved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::PcpLayerStackChanges>, Reverse  = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216BEB168(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0]  = "tf/iterator.h";
    v7[1]  = "operator++";
    uint64_t v7[2] = 250;
    void v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<pxrInternal__aapl__pxrRe"
            "served__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::PcpL"
            "ayerStackChanges>>::operator++() [T  = const std::map<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal"
            "__aapl__pxrReserved__::PcpLayerStack>, pxrInternal__aapl__pxrReserved__::PcpLayerStackChanges>, Reverse  = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        char v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        char v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (!v5);
    }
    *a1  = v4;
  }
  return a1;
}

void *sub_216BEB210(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0]  = "tf/iterator.h";
    v3[1]  = "operator->";
    uint64_t v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<pxrInternal__aapl__pxrReserved__::PcpC"
            "ache *, pxrInternal__aapl__pxrReserved__::PcpCacheChanges>>::operator->() [T  = const std::map<pxrInternal__a"
            "apl__pxrReserved__::PcpCache *, pxrInternal__aapl__pxrReserved__::PcpCacheChanges>, Reverse  = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216BEB28C(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0]  = "tf/iterator.h";
    v7[1]  = "operator++";
    uint64_t v7[2] = 250;
    void v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<pxrInternal__aapl__pxrRe"
            "served__::PcpCache *, pxrInternal__aapl__pxrReserved__::PcpCacheChanges>>::operator++() [T  = const std::map<"
            "pxrInternal__aapl__pxrReserved__::PcpCache *, pxrInternal__aapl__pxrReserved__::PcpCacheChanges>, Reverse  = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        char v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        char v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (!v5);
    }
    *a1  = v4;
  }
  return a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpChanges::_GetLayerStackChanges(uint64_t **a1, void *a2)
{
  uint64_t v3 = a2;
  return sub_216BED728(a1, (uint64_t)a2, (uint64_t)&unk_2174BFD90, &v3) + 6;
}

void *pxrInternal__aapl__pxrReserved__::PcpChanges::_Optimize(void *this, uint64_t a2, char *a3)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v15 = (void *)this[6];
  for (long long i = this + 7; v15 != i; this = sub_216BEB76C(&v15))
  {
    char v4 = *(pxrInternal__aapl__pxrReserved__::PcpCache **)(*sub_216BEB6F0(&v15, a2, a3) + 32);
    uint64_t v17 = (unint64_t *)(*sub_216BEB6F0(&v15, v5, v6) + 32);
    unint64_t v7 = sub_216BEDA38((uint64_t **)(v3 + 24), v17, (uint64_t)&unk_2174BFD90, (uint64_t **)&v17) + 5;
    uint64_t v10 = sub_216BEB6F0(&v15, v8, v9);
    pxrInternal__aapl__pxrReserved__::PcpChanges::_OptimizePathChanges((uint64_t)v10, v4, (uint64_t)v7, *v10 + 40);
  }
  uint64_t v11 = *(void **)(v3 + 24);
  uint64_t v12 = v3 + 32;
  uint64_t v15 = v11;
  long long i = (void *)(v3 + 32);
  while (v11 != (void *)v12)
  {
    uint64_t v13 = sub_216BEBA10(&v15, a2, a3);
    pxrInternal__aapl__pxrReserved__::PcpChanges::_Optimize((uint64_t)v13, *v13 + 40, v14);
    this  = sub_216BEBA8C(&v15);
    uint64_t v11 = v15;
    uint64_t v12 = (uint64_t)i;
  }
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::_OptimizePathChanges(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpCache *a2, uint64_t a3, uint64_t a4)
{
  sub_216A9A8E8((uint64_t *)&v32, a4);
  BOOL v6 = *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 96);
  for (long long i = *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 104);
        v6 != i;
        BOOL v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 16))
  {
    uint64_t v8 = sub_21698EFF0((uint64_t)&v32, v6);
    uint64_t v9 = v8;
    if (v33 != (void **)v8 && *(uint64_t *)((char *)v8 + 36) == *((void *)v6 + 1))
    {
      sub_2167AE00C(&v32, v8);
      sub_21698F1C8((_DWORD *)v9 + 7);
      operator delete(v9);
    }
  }
  memset(&v31, 0, sizeof(v31));
  BOOL v12 = sub_216BBBDFC(0);
  uint64_t v13 = v32;
  if (v32 != (uint64_t *)v33)
  {
    do
    {
      if (v12)
      {
        LayerStackuint64_t Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
        uint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(LayerStackIdentifier);
        uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v15);
        uint64_t v17 = *(char *)(Identifier + 23) >= 0 ? Identifier : *(void *)Identifier;
        Text  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 28));
        uint64_t v19 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 36));
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  Sd only path change @%s@<%s> to <%s>\n", v20, v21, v17, Text, v19);
        uint64_t v22 = (v30 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
        int v23 = (v30 & 0x80u) == 0 ? (void *)v30 : __p[1];
        std::string::append(&v31, v22, (std::string::size_type)v23);
        if ((char)v30 < 0) {
          operator delete(__p[0]);
        }
      }
      sub_216A5CF30((uint64_t **)a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 28), (_DWORD *)v13 + 7);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v13 + 9)) {
        sub_216A5CF30((uint64_t **)a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 36), (_DWORD *)v13 + 9);
      }
      std::string::size_type v24 = (uint64_t *)v13[1];
      if (v24)
      {
        do
        {
          uint64_t v25 = v24;
          std::string::size_type v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          uint64_t v25 = (uint64_t *)v13[2];
          BOOL v26 = *v25 == (void)v13;
          uint64_t v13 = v25;
        }
        while (!v26);
      }
      uint64_t v13 = v25;
    }
    while (v25 != (uint64_t *)v33);
  }
  if (v12)
  {
    std::string::size_type size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v31.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      int v28 = (std::string *)v31.__r_.__value_.__r.__words[0];
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v28 = &v31;
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"PcpChanges::_Optimize:\n%s", v10, v11, v28);
    }
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  sub_21698F21C((uint64_t)&v32, v33[0]);
}

void sub_216BEB698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_21698F21C((uint64_t)&a24, a25);
  _Unwind_Resume(a1);
}

void *sub_216BEB6F0(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0]  = "tf/iterator.h";
    v3[1]  = "operator->";
    uint64_t v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved__::PcpCache *"
            ", std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>>::operator"
            "->() [T  = std::map<pxrInternal__aapl__pxrReserved__::PcpCache *, std::map<pxrInternal__aapl__pxrReserved__::"
            "SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>, Reverse  = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216BEB76C(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0]  = "tf/iterator.h";
    v7[1]  = "operator++";
    uint64_t v7[2] = 250;
    void v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved"
            "__::PcpCache *, std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPat"
            "h>>>::operator++() [T  = std::map<pxrInternal__aapl__pxrReserved__::PcpCache *, std::map<pxrInternal__aapl__p"
            "xrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>, Reverse  = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        char v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        char v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (!v5);
    }
    *a1  = v4;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpChanges::_Optimize(uint64_t a1, uint64_t a2, char *a3)
{
  char v4 = (uint64_t *)(a2 + 8);
  for (long long i = *(uint64_t **)a2; i != v4; sub_216AF1D2C((uint64_t **)a2, v8, i))
  {
    BOOL v6 = (uint64_t *)i[1];
    unint64_t v7 = i;
    if (v6)
    {
      do
      {
        char v8 = v6;
        BOOL v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        char v8 = (uint64_t *)v7[2];
        BOOL v9 = *v8 == (void)v7;
        unint64_t v7 = v8;
      }
      while (!v9);
    }
    if (v8 == v4)
    {
LABEL_19:
      sub_216AF1D2C((uint64_t **)a2, v8, v4);
      break;
    }
    uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)i + 28);
    long long i = v8;
    while (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)i + 28), v10))
    {
      uint64_t v11 = (uint64_t *)i[1];
      if (v11)
      {
        do
        {
          BOOL v12 = v11;
          uint64_t v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          BOOL v12 = (uint64_t *)i[2];
          BOOL v9 = *v12 == (void)i;
          long long i = v12;
        }
        while (!v9);
      }
      long long i = v12;
      if (v12 == v4) {
        goto LABEL_19;
      }
    }
  }
  BOOL v26 = *(uint64_t **)a2;
  uint64_t v27 = v4;
  while (v26 != v27)
  {
    uint64_t v13 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216AB6830(&v26, a2, a3);
    pxrInternal__aapl__pxrReserved__::Pcp_SubsumeDescendants(a2 + 48, v13);
    uint64_t v16 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216AB6830(&v26, v14, v15);
    pxrInternal__aapl__pxrReserved__::Pcp_SubsumeDescendants(a2 + 24, v16);
    uint64_t v19 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216AB6830(&v26, v17, v18);
    pxrInternal__aapl__pxrReserved__::Pcp_SubsumeDescendants(a2 + 128, v19);
    sub_216AB69E4(&v26);
  }
  BOOL v26 = *(uint64_t **)(a2 + 48);
  uint64_t v27 = (uint64_t *)(a2 + 56);
  while (v26 != v27)
  {
    unsigned __int8 v20 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216AB6830(&v26, a2, a3);
    sub_216AF1BE4((uint64_t **)(a2 + 24), v20);
    int v23 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216AB6830(&v26, v21, v22);
    sub_216AF1BE4((uint64_t **)(a2 + 128), v23);
    sub_216AB69E4(&v26);
  }
  BOOL v26 = *(uint64_t **)(a2 + 24);
  uint64_t v27 = (uint64_t *)(a2 + 32);
  if (v26 != (uint64_t *)(a2 + 32))
  {
    std::string::size_type v24 = (uint64_t **)(a2 + 128);
    do
    {
      uint64_t v25 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216AB6830(&v26, a2, a3);
      sub_216AF1BE4(v24, v25);
      sub_216AB69E4(&v26);
    }
    while (v26 != v27);
  }
}

void *sub_216BEBA10(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0]  = "tf/iterator.h";
    v3[1]  = "operator->";
    uint64_t v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved__::PcpCache *"
            ", pxrInternal__aapl__pxrReserved__::PcpCacheChanges>>::operator->() [T  = std::map<pxrInternal__aapl__pxrRese"
            "rved__::PcpCache *, pxrInternal__aapl__pxrReserved__::PcpCacheChanges>, Reverse  = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216BEBA8C(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0]  = "tf/iterator.h";
    v7[1]  = "operator++";
    uint64_t v7[2] = 250;
    void v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved"
            "__::PcpCache *, pxrInternal__aapl__pxrReserved__::PcpCacheChanges>>::operator++() [T  = std::map<pxrInternal_"
            "_aapl__pxrReserved__::PcpCache *, pxrInternal__aapl__pxrReserved__::PcpCacheChanges>, Reverse  = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        char v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        char v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (!v5);
    }
    *a1  = v4;
  }
  return a1;
}

void sub_216BEBB34(uint64_t a1, unint64_t a2, unsigned char *a3)
{
  *(void *)(a1 + 8)  = 0;
  if (a2)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    unint64_t v7 = v6 << 6;
    if (v6 << 6 >= a2)
    {
      *(void *)(a1 + 8)  = a2;
    }
    else
    {
      uint64_t v14 = 0;
      long long v15 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0) {
        sub_21677CB10();
      }
      unint64_t v8 = v6 << 7;
      if (v8 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v8 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (v7 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
      }
      sub_2168059F0(&v14, v9);
      uint64_t v11 = v14;
      uint64_t v12 = *((void *)&v15 + 1);
      uint64_t v14 = *(char **)a1;
      uint64_t v10 = v14;
      long long v13 = *(_OWORD *)(a1 + 8);
      *(void *)a1  = v11;
      *(void *)(a1 + 8)  = a2;
      *(void *)(a1 + 16)  = v12;
      long long v15 = v13;
      if (v10) {
        operator delete(v10);
      }
    }
    if (*a3)
    {
      uint64_t v14 = *(char **)a1;
      LODWORD(v15)  = 0;
      sub_216805E30(&v14, a2);
    }
    else
    {
      uint64_t v14 = *(char **)a1;
      LODWORD(v15)  = 0;
      sub_216805EE4((uint64_t)&v14, a2);
    }
  }
}

void sub_216BEBC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216BEBC48(uint64_t a1)
{
  sub_216BEC6FC(a1 + 80);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 56));
  BOOL v5 = (void **)(a1 + 32);
  sub_216787968(&v5);
  uint64_t v2 = *(atomic_uint **)(a1 + 24);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(atomic_uint **)(a1 + 8);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t sub_216BEBD14(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216BEDCA0((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  char v4 = *(void **)a1;
  *(void *)a1  = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_216BEBD74(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0]  = "tf/iterator.h";
    v5[1]  = "operator*";
    uint64_t v5[2] = 271;
    uint64_t v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "fWeakPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>>>::operator*() [T  = const std::vector<pxrInternal_"
            "_aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>>, Reverse  = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216BEBDEC()
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeSpecStackInternal(uint64_t **this, const pxrInternal__aapl__pxrReserved__::PcpCache *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  char v6 = a2;
  int v7 = &v6;
  char v4 = sub_216BEDA38(this + 3, (unint64_t *)&v6, (uint64_t)&unk_2174BFD90, (uint64_t **)&v7);
  return sub_216A5CF30(v4 + 21, a3, a3);
}

void *sub_216BEBE54(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0]  = "tf/iterator.h";
    v3[1]  = "operator++";
    uint64_t v3[2] = 250;
    void v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>>>::operator++() [T  = const std::vect"
            "or<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PcpLayerStack>>, Reverse  = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

uint64_t sub_216BEBED4(uint64_t *a1)
{
  sub_21677B834((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0]  = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24))  = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1]  = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216BEC008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BEC01C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_216BEDDC8((uint64_t)&v9, a3, *(void *)(a1 + 8), a2);
    char v6 = v5;
    int v7 = *(_DWORD **)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 18;
        sub_216BE1214(a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8)  = v6;
  }
  return a2;
}

void sub_216BEC0AC(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 32 * (v4 - v5) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_216BEDE74(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = v7 + a1[4];
  }
  long long v9 = *a2;
  *(_OWORD *)(*(void *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8)  = *a2;
  if (*((void *)&v9 + 1))
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v9 + 1) + 8), 1u, memory_order_relaxed);
    uint64_t v7 = a1[5];
  }
  a1[5]  = v7 + 1;
}

uint64_t sub_216BEC14C(void **a1)
{
  sub_21677B834((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0]  = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24))  = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1]  = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216BEC280(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216BEC294(uint64_t a1, uint64_t *a2)
{
  char v4 = *(uint64_t ***)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v6 = (int *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(v5, a2, v6, 39, 1, 0, 1, (uint64_t *)&v16);
  uint64_t v7 = v16;
  for (i = v17; v7 != i; uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 72))
  {
    if (*(void *)(a1 + 16))
    {
      Text  = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v7);
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    <%s>\n", v10, v11, Text);
      if ((v15 & 0x80u) == 0) {
        uint64_t v12 = __p;
      }
      else {
        uint64_t v12 = (void **)__p[0];
      }
      if ((v15 & 0x80u) == 0) {
        std::string::size_type v13 = v15;
      }
      else {
        std::string::size_type v13 = (std::string::size_type)__p[1];
      }
      std::string::append(*(std::string **)(a1 + 16), (const std::string::value_type *)v12, v13);
      if ((char)v15 < 0) {
        operator delete(__p[0]);
      }
    }
    pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(v4, *(const pxrInternal__aapl__pxrReserved__::PcpCache **)(a1 + 8), v7);
  }
  __p[0]  = &v16;
  sub_216BE117C((void ***)__p);
}

void sub_216BEC398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  long long __p = &a17;
  sub_216BE117C((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_216BEC3D0(int64x2_t *a1)
{
  uint64_t v2 = *(atomic_uint **)(*(void *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * a1[2].i64[0]
                       + 8);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  a1[2]  = vaddq_s64(a1[2], (int64x2_t)xmmword_21746C150);

  return sub_216BEE18C((uint64_t)a1, 1);
}

void *sub_216BEC474(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::PcpCache::FindAllLayerStacksUsingLayer(**(void **)a1, *(void *)(a1 + 8));
  if (*result != result[1])
  {
    uint64_t v7 = **(void ****)(a1 + 16);
    sub_216981010(&v22, a2);
    sub_21698105C(&v23, a2 + 1);
    uint64_t v24 = a3;
    long long v9 = (char *)v7[1];
    unint64_t v8 = (char *)v7[2];
    if (v9 >= v8)
    {
      uint64_t v11 = (v9 - (unsigned char *)*v7) >> 4;
      if ((unint64_t)(v11 + 1) >> 60) {
        sub_21677CB10();
      }
      uint64_t v12 = v8 - (unsigned char *)*v7;
      uint64_t v13 = v12 >> 3;
      if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
        uint64_t v13 = v11 + 1;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14)
      {
        if (v14 >> 60) {
          sub_21677CA1C();
        }
        unsigned __int8 v15 = (char *)operator new(16 * v14);
      }
      else
      {
        unsigned __int8 v15 = 0;
      }
      uint64_t v16 = &v15[16 * v11];
      uint64_t v17 = &v15[16 * v14];
      sub_21697D878(v16, &v22);
      sub_21697D8B4((_DWORD *)v16 + 1, &v23);
      *((void *)v16 + 1)  = v24;
      uint64_t v10 = v16 + 16;
      uint64_t v19 = (char *)*v7;
      uint64_t v18 = (char *)v7[1];
      if (v18 == *v7)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath *v7 = v16;
        v7[1]  = v10;
        uint64_t v7[2] = v17;
      }
      else
      {
        uint64_t v20 = 0;
        do
        {
          sub_21697D878(&v16[v20 - 16], &v18[v20 - 16]);
          sub_21697D8B4(&v16[v20 - 12], &v18[v20 - 12]);
          *(void *)&v16[v20 - 8]  = *(void *)&v18[v20 - 8];
          v20 -= 16;
        }
        while (&v18[v20] != v19);
        uint64_t v18 = (char *)*v7;
        uint64_t v21 = (char *)v7[1];
        pxrInternal__aapl__pxrReserved__::SdfPath *v7 = &v16[v20];
        v7[1]  = v10;
        uint64_t v7[2] = v17;
        while (v21 != v18)
        {
          v21 -= 16;
          sub_216BEC6BC(v21);
        }
      }
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      sub_21697D878(v7[1], &v22);
      sub_21697D8B4((_DWORD *)v9 + 1, &v23);
      *((void *)v9 + 1)  = v24;
      uint64_t v10 = v9 + 16;
    }
    v7[1]  = v10;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
    return sub_21697C414(&v22);
  }
  return result;
}

void sub_216BEC668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

_DWORD *sub_216BEC67C(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

_DWORD *sub_216BEC6BC(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

uint64_t sub_216BEC6FC(uint64_t a1)
{
  sub_216BEC738(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1  = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216BEC738(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216BEC77C((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

atomic_uint *sub_216BEC77C(uint64_t a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 80);
  sub_2168EBBB8((void ***)(a1 + 96), 0);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 56));
  uint64_t v5 = (void **)(a1 + 32);
  sub_216787968(&v5);
  uint64_t v3 = *(atomic_uint **)(a1 + 24);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  uint64_t result = *(atomic_uint **)(a1 + 8);
  if (result)
  {
    if (atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216BEC854(uint64_t a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2)
{
  if (a2)
  {
    sub_216BEC854(a1, *a2);
    sub_216BEC854(a1, a2[1]);
    sub_216ABB798(a2 + 4);
    operator delete(a2);
  }
}

void sub_216BEC8B0(uint64_t a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2)
{
  if (a2)
  {
    sub_216BEC8B0(a1, *a2);
    sub_216BEC8B0(a1, a2[1]);
    sub_216BBEEA4(a2 + 4);
    operator delete(a2);
  }
}

uint64_t *sub_216BEC90C(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t v5 = (uint64_t **)(a1 + 8);
  char v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    unint64_t v6 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v7 = v4;
        unint64_t v8 = v4[4];
        if (v6 >= v8) {
          break;
        }
        char v4 = (uint64_t *)*v7;
        uint64_t v5 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      if (v8 >= v6) {
        break;
      }
      char v4 = (uint64_t *)v7[1];
      if (!v4)
      {
        uint64_t v5 = (uint64_t **)(v7 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t *)(a1 + 8);
LABEL_10:
    sub_216BEC9D0(a1, a3, (uint64_t)v10);
    sub_21677B358((uint64_t **)a1, (uint64_t)v7, v5, v10[0]);
    uint64_t v7 = v10[0];
    v10[0]  = 0;
    sub_216BECA3C((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t sub_216BEC9D0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x28uLL);
  *(void *)a3  = v6;
  *(void *)(a3 + 8)  = v5;
  *(unsigned char *)(a3 + 16)  = 0;
  void v6[4] = *a2;
  uint64_t result = sub_2168BD80C(v6 + 4);
  *(unsigned char *)(a3 + 16)  = 1;
  return result;
}

void sub_216BECA24(_Unwind_Exception *a1)
{
  sub_216BECA3C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216BECA3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)a1;
  *(void *)a1  = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216ABB798(v2 + 4);
    }
    operator delete(v2);
  }
}

uint64_t *sub_216BECA94(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t v5 = (uint64_t **)(a1 + 8);
  char v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    unint64_t v6 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v7 = v4;
        unint64_t v8 = v4[4];
        if (v6 >= v8) {
          break;
        }
        char v4 = (uint64_t *)*v7;
        uint64_t v5 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      if (v8 >= v6) {
        break;
      }
      char v4 = (uint64_t *)v7[1];
      if (!v4)
      {
        uint64_t v5 = (uint64_t **)(v7 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t *)(a1 + 8);
LABEL_10:
    sub_216BECB58(a1, a3, (uint64_t)v10);
    sub_21677B358((uint64_t **)a1, (uint64_t)v7, v5, v10[0]);
    uint64_t v7 = v10[0];
    v10[0]  = 0;
    sub_216BECBC4((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t sub_216BECB58@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x28uLL);
  *(void *)a3  = v6;
  *(void *)(a3 + 8)  = v5;
  *(unsigned char *)(a3 + 16)  = 0;
  void v6[4] = *a2;
  uint64_t result = sub_2168BD80C(v6 + 4);
  *(unsigned char *)(a3 + 16)  = 1;
  return result;
}

void sub_216BECBAC(_Unwind_Exception *a1)
{
  sub_216BECBC4(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216BECBC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)a1;
  *(void *)a1  = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216BBEEA4(v2 + 4);
    }
    operator delete(v2);
  }
}

void sub_216BECC1C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216BECC1C(a1, *a2);
    sub_216BECC1C(a1, a2[1]);
    sub_216BECC78((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_216BECC78(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 184));
  sub_2168EBBB8((void ***)(a1 + 168), 0);
  sub_216981EE8(a1 + 144, *(void **)(a1 + 152));
  char v4 = (void **)(a1 + 120);
  sub_216981168(&v4);
  sub_21698F21C(a1 + 96, *(void **)(a1 + 104));
  sub_21698F21C(a1 + 72, *(void **)(a1 + 80));
  sub_21698F21C(a1 + 48, *(void **)(a1 + 56));
  sub_21698F21C(a1 + 24, *(void **)(a1 + 32));
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_216BECD44(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216BECD44(a1, *a2);
    sub_216BECD44(a1, a2[1]);
    sub_216BECDA0((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_216BECDA0(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  sub_216981EE8(a1 + 136, *(void **)(a1 + 144));
  uint64_t v3 = (void **)(a1 + 104);
  sub_216BECE18(&v3);
  sub_216BECF64(a1 + 80, *(void **)(a1 + 88));
  sub_216981EE8(a1 + 56, *(void **)(a1 + 64));
  sub_216981EE8(a1 + 32, *(void **)(a1 + 40));
  sub_216981EE8(v2, *(void **)(a1 + 16));
}

void sub_216BECE18(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    char v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        sub_216BECEB0((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1]  = v2;
    operator delete(v5);
  }
}

_DWORD *sub_216BECEB0(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 3);
  sub_21697C414(a2 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 1);

  return sub_21697C414(a2);
}

void sub_216BECF04(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216BECF04(a1, *a2);
    sub_216BECF04(a1, a2[1]);
    sub_21698F21C((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }
}

void sub_216BECF64(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216BECF64(a1, *a2);
    sub_216BECF64(a1, a2[1]);
    sub_216BECFC0((_DWORD *)a2 + 7);
    operator delete(a2);
  }
}

_DWORD *sub_216BECFC0(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

void *sub_216BED000(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_21682BF78(result, a4);
    uint64_t result = sub_216BED088((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1]  = result;
  }
  return result;
}

void sub_216BED068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8)  = v10;
  sub_216850BF4(&a9);
  _Unwind_Resume(a1);
}

void *sub_216BED088(uint64_t a1, void *a2, void *a3, void *a4)
{
  char v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0]  = a1;
  v7[1]  = &v9;
  uint64_t v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1]  = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_216BED118((uint64_t)v7);
  return v4;
}

uint64_t sub_216BED118(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2168E4A2C(a1);
  }
  return a1;
}

uint64_t *sub_216BED150(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v6 = (uint64_t **)sub_21699DB58((uint64_t)a1, &v12, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    char v8 = v6;
    uint64_t v9 = (uint64_t *)operator new(0x38uLL);
    uint64_t v7 = v9;
    uint64_t v10 = (*a4)[1];
    void v9[4] = **a4;
    v9[5]  = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 1u, memory_order_relaxed);
    }
    *((_DWORD *)v9 + 12)  = 0;
    sub_21677B358(a1, v12, v8, v9);
  }
  return v7;
}

uint64_t **sub_216BED1EC(uint64_t **a1, unint64_t *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  char v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (v6)
  {
    unint64_t v10 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v11 = *(uint64_t *)((char *)v6 + 28);
        if (v10 >= v11) {
          break;
        }
        unint64_t v6 = *v9;
        char v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        char v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v12 = (uint64_t *)operator new(0x28uLL);
    v15[1]  = v7;
    uint64_t v13 = *a4;
    sub_216981010((_DWORD *)v12 + 7, v13);
    sub_21698105C((_DWORD *)v12 + 8, v13 + 1);
    *((_DWORD *)v12 + 9)  = 0;
    char v16 = 1;
    sub_21677B358(a1, (uint64_t)v9, v8, v12);
    v15[0]  = 0;
    sub_216BED2E4((uint64_t)v15, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void sub_216BED2E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)a1;
  *(void *)a1  = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216BECFC0(v2 + 7);
    }
    operator delete(v2);
  }
}

uint64_t sub_216BED33C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216BED3B4((uint64_t)(a1 + 2), a1[1], (_DWORD *)a1[1], *a1, (_DWORD *)*a1, a2[1], a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

uint64_t sub_216BED3B4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1)  = a7;
  long long v14 = v15;
  v12[0]  = a1;
  v12[1]  = &v14;
  v12[2]  = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 4;
      sub_2169DC194((_DWORD *)(v7 - 16), v9);
      uint64_t v7 = *((void *)&v15 + 1) - 16;
      *((void *)&v15 + 1) -= 16;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216BED45C((uint64_t)v12);
  return v10;
}

uint64_t sub_216BED45C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216BED494((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216BED494(uint64_t *result)
{
  uint64_t v1 = *(_DWORD **)(result[2] + 8);
  uint64_t v2 = *(_DWORD **)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_216BECEB0(v3, v1);
      v1 += 4;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_216BED4E8(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

_DWORD *sub_216BED51C(_DWORD *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2)  = v1 - 16;
      uint64_t result = sub_216BECEB0(v4, (_DWORD *)(v1 - 16));
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_216BED564(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = v2;
    }
    else {
      uint64_t v7 = v2 + 1;
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  sub_2167AE00C((uint64_t **)a1, v4);
  sub_216BECDA0((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t sub_216BED5EC(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = v2;
    }
    else {
      uint64_t v7 = v2 + 1;
    }
    if (v6) {
      uint64_t v4 = (uint64_t)v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(void *)(v4 + 32)) {
    return 0;
  }
  sub_216BED654((uint64_t **)a1, v4);
  return 1;
}

uint64_t *sub_216BED654(uint64_t **a1, uint64_t a2)
{
  unint64_t v3 = sub_2167AE00C(a1, (uint64_t *)a2);
  sub_21698F21C(a2 + 40, *(void **)(a2 + 48));
  operator delete((void *)a2);
  return v3;
}

void sub_216BED694(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(uint64_t ***)a1;
  int v5 = pxrInternal__aapl__pxrReserved__::Pcp_NeedToRecomputeDueToAssetPathChange(a2);
  pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStackResolvedPath(v4, **(pxrInternal__aapl__pxrReserved__::PcpCache ***)(a1 + 8), a2, v5, *(std::string **)(a1 + 16));
  if (v5)
  {
    uint64_t v6 = **(void **)(a1 + 8);
    pxrInternal__aapl__pxrReserved__::PcpChanges::_DidChangeLayerStack(v4, v6, a2, 1, 0, 1);
  }
}

uint64_t *sub_216BED728(uint64_t **a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v6 = (uint64_t **)sub_21699DB58((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_216BED7D4((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0]  = 0;
    sub_216BED9E0((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_216BED7D4@<X0>(uint64_t a1@<X0>, void **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0xE8uLL);
  *(void *)a3  = v6;
  *(void *)(a3 + 8)  = v5;
  *(unsigned char *)(a3 + 16)  = 0;
  uint64_t result = sub_216BED840(v6 + 4, *a2);
  *(unsigned char *)(a3 + 16)  = 1;
  return result;
}

void sub_216BED828(_Unwind_Exception *a1)
{
  sub_216BED9E0(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_216BED840(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1  = *a2;
  a1[1]  = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
  }
  sub_216BED89C((uint64_t)(a1 + 2));
  return a1;
}

void sub_216BED884(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3) {
    sub_217324328(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216BED89C(uint64_t a1)
{
  *(void *)(a1 + 16)  = 0;
  *(void *)(a1 + 8)  = a1 + 16;
  *(void *)(a1 + 24)  = 0;
  *(_DWORD *)a1  = 0;
  *(unsigned char *)(a1 + 4)  = 0;
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 32)  = a1 + 40;
  *(void *)(a1 + 48)  = 0;
  *(void *)(a1 + 64)  = 0;
  *(void *)(a1 + 56)  = a1 + 64;
  *(void *)(a1 + 88)  = 0;
  *(void *)(a1 + 8sub_2168EBBB8(&a9, 0) = a1 + 88;
  *(void *)(a1 + 72)  = 0;
  *(void *)(a1 + 96)  = 0;
  *(void *)(a1 + 104)  = 0;
  *(void *)(a1 + 112)  = 0;
  *(void *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 136)  = 0;
  *(void *)(a1 + 144)  = 0;
  *(void *)(a1 + 128)  = a1 + 136;
  *(void *)(a1 + 152)  = 0;
  *(unsigned char *)(a1 + 16sub_2168EBBB8(&a9, 0) = 0;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource((void *)(a1 + 168));
  return a1;
}

void sub_216BED980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2168EBBB8(v4, 0);
  sub_216981EE8(a2, *v8);
  sub_216981168((void ***)va);
  sub_21698F21C(v6, *v7);
  sub_21698F21C(v5, *v11);
  sub_21698F21C(a3, *v10);
  sub_21698F21C(a4, *v9);
  _Unwind_Resume(a1);
}

void sub_216BED9E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1  = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216BECC78((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t **sub_216BEDA38(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (v6)
  {
    unint64_t v10 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v11 = v6[4];
        if (v10 >= v11) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v12 = operator new(0xC0uLL);
    v15[1]  = v7;
    uint64_t v13 = **a4;
    void v12[4] = 0u;
    v12[5]  = 0u;
    v12[7]  = 0u;
    v12[8]  = 0u;
    *((void *)v12 + 22)  = 0;
    *((void *)v12 + 2sub_2168EBBB8(&a9, 0) = 0;
    v12[6]  = 0u;
    void v12[3] = 0u;
    v12[9]  = 0u;
    *((void *)v12 + 4)  = v13;
    *((void *)v12 + 5)  = v12 + 3;
    *((void *)v12 + 9)  = 0;
    *((void *)v12 + 8)  = (char *)v12 + 72;
    *((void *)v12 + 12)  = 0;
    *((void *)v12 + 1sub_2168EBBB8(&a9, 0) = 0;
    *((void *)v12 + 11)  = v12 + 6;
    *((void *)v12 + 15)  = 0;
    *((void *)v12 + 13)  = 0;
    *((void *)v12 + 14)  = (char *)v12 + 120;
    *((void *)v12 + 23)  = 0;
    *((void *)v12 + 16)  = 0;
    *((void *)v12 + 17)  = 0;
    *((unsigned char *)v12 + 16sub_2168EBBB8(&a9, 0) = 0;
    *((void *)v12 + 18)  = 0;
    *((void *)v12 + 19)  = 0;
    *((void *)v12 + 21)  = v12 + 11;
    char v16 = 1;
    sub_21677B358(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v15[0]  = 0;
    sub_216BEDB7C((uint64_t)v15, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void sub_216BEDB7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1  = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216BECDA0((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *sub_216BEDBD4(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = **a4;
    v11[7]  = 0;
    v11[6]  = 0;
    v11[4]  = v12;
    v11[5]  = (uint64_t)(v11 + 6);
    sub_21677B358(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_216BEDCA0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88)  = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)(a1 + 56);
  sub_216850BF4(&v3);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t sub_216BEDD10(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1  = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216BEDCA0((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_216BEDD58(void *a1)
{
  uint64_t v1 = (_DWORD *)*a1;
  if (*a1)
  {
    uint64_t v3 = (_DWORD *)a1[1];
    uint64_t v4 = (_DWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 18;
        sub_216BE1214((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v1);
      uint64_t v4 = (_DWORD *)*a1;
    }
    a1[1]  = v1;
    operator delete(v4);
    *a1  = 0;
    a1[1]  = 0;
    a1[2]  = 0;
  }
}

uint64_t sub_216BEDDC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    sub_21697DE94((int *)a4, (int *)v5);
    sub_21697DEEC((int *)(a4 + 4), (int *)(v5 + 4));
    sub_21697DE94((int *)(a4 + 8), (int *)(v5 + 8));
    sub_21697DEEC((int *)(a4 + 12), (int *)(v5 + 12));
    if (a4 != v5)
    {
      uint64_t v7 = (_DWORD *)sub_216BBED8C(a4 + 16);
      sub_216BBFB70(v7, v5 + 16);
    }
    *(_OWORD *)(a4 + 56)  = *(_OWORD *)(v5 + 56);
    a4 += 72;
    v5 += 72;
  }
  while (v5 != v6);
  return v6;
}

void sub_216BEDE74(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4]  = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1]  = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_21677CB28(v5, v33);
      std::string::size_type v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1]  = &v9[8 * v17];
    a1[2]  = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_216832B24(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_216832C3C((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1]  = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_21677CB28((uint64_t)(a1 + 3), v46);
      std::string::size_type v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      float v43 = (char *)*a1;
      *a1  = v34;
      a1[1]  = v35;
      a1[2]  = v8;
      a1[3]  = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_21677CB28((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1)  = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1)  = v54 + 8 * v26;
  uint8x8_t v53 = operator new(0x1000uLL);
  sub_216832D5C(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_216832E74((uint64_t)&v54, v27);
  }
  char v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1)  = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1  = v30;
  *((_OWORD *)a1 + 1)  = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_216BEE140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216BEE18C(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x100) {
    a2  = 1;
  }
  if (v2 < 0x200) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 256;
  }
  return v4 ^ 1u;
}

void sub_216BEE1EC(uint64_t a1, uint64_t *a2)
{
  int v4 = *(uint64_t **)a1;
  uint64_t v5 = sub_216851B24((uint64_t)a2);
  if (v5 != sub_216851B24((uint64_t)v4))
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(a2);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v6);
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::ResolveLayerStackIdentifier((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(Identifier + 56), **(const pxrInternal__aapl__pxrReserved__::PcpCache ***)(a1 + 8));
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(*(uint64_t **)a1);
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v9);
    if (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==(v8, v10))
    {
      if (**(void **)(a1 + 16))
      {
        uint64_t v11 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(a2);
        uint64_t v12 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v11);
        uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v12);
        uint64_t v14 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v13);
        if (*(char *)(v14 + 23) >= 0) {
          uint64_t v17 = v14;
        }
        else {
          uint64_t v17 = *(void *)v14;
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"    Checking dependent layer stack @%s@\n", v15, v16, v17);
        if ((v21 & 0x80u) == 0) {
          uint64_t v18 = __p;
        }
        else {
          uint64_t v18 = (void **)__p[0];
        }
        if ((v21 & 0x80u) == 0) {
          std::string::size_type v19 = v21;
        }
        else {
          std::string::size_type v19 = (std::string::size_type)__p[1];
        }
        std::string::append(**(std::string ***)(a1 + 16), (const std::string::value_type *)v18, v19);
        if ((char)v21 < 0) {
          operator delete(__p[0]);
        }
      }
      sub_216BEC0AC(*(void **)(a1 + 24), (long long *)a2);
    }
  }
}

void sub_216BEE304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::PcpComposeSiteReferences(uint64_t *a1)
{
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
    sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL v3 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(a1);
  pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v3);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp();
}

void sub_216BEE6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,void *a32)
{
  *(void *)(v32 - 136)  = &a28;
  sub_2169CC68C((void ***)(v32 - 136));
  *(void *)(v32 - 136)  = &a25;
  sub_2169CC68C((void ***)(v32 - 136));
  *(void *)(v32 - 136)  = &a22;
  sub_2169CC68C((void ***)(v32 - 136));
  *(void *)(v32 - 136)  = &a19;
  sub_2169CC68C((void ***)(v32 - 136));
  *(void *)(v32 - 136)  = &a16;
  sub_2169CC68C((void ***)(v32 - 136));
  *(void *)(v32 - 136)  = &a13;
  sub_2169CC68C((void ***)(v32 - 136));
  sub_216BF26FC((uint64_t)&a31, a32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpComposeSitePayloads(uint64_t *a1)
{
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
    sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL v3 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(a1);
  pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v3);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp();
}

void sub_216BEEB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,void *a32)
{
  *(void *)(v32 - 136)  = &a28;
  sub_2169CC78C((void ***)(v32 - 136));
  *(void *)(v32 - 136)  = &a25;
  sub_2169CC78C((void ***)(v32 - 136));
  *(void *)(v32 - 136)  = &a22;
  sub_2169CC78C((void ***)(v32 - 136));
  *(void *)(v32 - 136)  = &a19;
  sub_2169CC78C((void ***)(v32 - 136));
  *(void *)(v32 - 136)  = &a16;
  sub_2169CC78C((void ***)(v32 - 136));
  *(void *)(v32 - 136)  = &a13;
  sub_2169CC78C((void ***)(v32 - 136));
  sub_216BF2F98((uint64_t)&a31, a32);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpComposeSitePermission(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unsigned int v12 = 0;
  BOOL v3 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(a1);
  uint64_t Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v3);
  uint64_t v5 = *(uint64_t **)Layers;
  uint64_t v6 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers == v6) {
    return 0;
  }
  do
  {
    uint64_t v7 = (void *)sub_216AA5ECC(v5);
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v8) {
      uint64_t v8 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    v13[1]  = (uint64_t (**)(void, uint64_t))&v12;
    void v13[2] = (uint64_t (**)(void, uint64_t))&stru_26C759D20;
    __int16 v14 = 0;
    v13[0]  = (uint64_t (**)(void, uint64_t))&unk_26C75C158;
    char HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v7, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v8 + 248), v13);
    if ((_BYTE)v14) {
      char v10 = 0;
    }
    else {
      char v10 = HasField;
    }
    if (v10) {
      break;
    }
    ++v5;
  }
  while (v5 != v6);
  return v12;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasPrimSpecs(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  BOOL v3 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(a1);
  uint64_t Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v3);
  uint64_t v5 = *(uint64_t **)Layers;
  uint64_t v6 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers == v6) {
    return 0;
  }
  do
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v5);
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v7, a2);
    if (result) {
      break;
    }
    ++v5;
  }
  while (v5 != v6);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasSymmetry(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  BOOL v3 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(a1);
  uint64_t Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v3);
  uint64_t v5 = *(uint64_t **)Layers;
  uint64_t v6 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers == v6) {
    return 0;
  }
  while (1)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v5);
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v8) {
      uint64_t v8 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v7, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v8 + 416), 0))break; {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v5);
    }
    char v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v10) {
      char v10 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v9, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v10 + 408), 0))break; {
    if (++v5 == v6)
    }
      return 0;
  }
  return 1;
}

uint64_t **pxrInternal__aapl__pxrReserved__::PcpComposeSitePrimSites(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(a1);
  uint64_t result = (uint64_t **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v5);
  uint64_t v7 = *result;
  uint64_t v8 = result[1];
  if (*result != v8)
  {
    do
    {
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v7);
      uint64_t result = (uint64_t **)pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v9, a2);
      if (result)
      {
        sub_216ABBA60(&v13, v7);
        sub_216BF1414((uint64_t)v15, &v13, a2);
        unint64_t v10 = a3[1];
        if (v10 >= a3[2])
        {
          uint64_t v11 = sub_216BF3224(a3, (uint64_t)v15);
        }
        else
        {
          sub_216BF31C8((uint64_t)a3, (uint64_t)v15);
          uint64_t v11 = v10 + 24;
        }
        a3[1]  = v11;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
        sub_21697C414(&v17);
        uint64_t v12 = v16;
        if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        }
        uint64_t result = (uint64_t **)v14;
        if (v14)
        {
          if (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
            uint64_t result = (uint64_t **)((uint64_t (*)(uint64_t **))(*result)[1])(result);
          }
        }
      }
      ++v7;
    }
    while (v7 != v8);
  }
  return result;
}

void sub_216BEEFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, atomic_uint *a4, ...)
{
  va_start(va, a4);
  sub_216BC2DA8((uint64_t)va);
  if (a4)
  {
    if (atomic_fetch_add_explicit(a4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a4 + 8))(a4);
    }
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpComposeSiteRelocates(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t **a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B913B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B913B0))
  {
    unsigned __int8 v21 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v21) {
      unsigned __int8 v21 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v22 = *((void *)v21 + 36);
    qword_267B913A8  = v22;
    if ((v22 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      qword_267B913A8 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B913A8, &dword_216758000);
    __cxa_guard_release(&qword_267B913B0);
  }
  v32[0]  = 0;
  v32[1]  = 0;
  long long v31 = (uint64_t (**)(void, uint64_t))v32;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(a1);
  uint64_t Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v6);
  uint64_t v27 = Layers[1];
  uint64_t v28 = v27;
  uint64_t v29 = *Layers;
  uint64_t v30 = v29;
  while (v28 != v30)
  {
    unint64_t v10 = (uint64_t *)sub_216BEF334((uint64_t)&v27, v8, v9);
    uint64_t v11 = (void *)sub_216AA5ECC(v10);
    uint64_t v34 = &v31;
    std::string::size_type v35 = &stru_26C758458;
    __int16 v36 = 0;
    unint64_t v33 = (uint64_t (**)(void, uint64_t))&unk_26C758478;
    int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v11, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B913A8, &v33);
    if ((_BYTE)v36) {
      int v15 = 0;
    }
    else {
      int v15 = HasField;
    }
    if (v15 == 1)
    {
      unint64_t v33 = v31;
      uint64_t v34 = v32;
      while (v33 != v34)
      {
        uint64_t v16 = sub_216BEF3B8(&v33, v13, v14);
        pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v16 + 28), a2, &v25);
        std::string::size_type v19 = sub_216BEF3B8(&v33, v17, v18);
        pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v19 + 36), a2, &v23);
        uint64_t v37 = &v25;
        int64_t v20 = sub_216A9AA80(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, (uint64_t)&unk_2174BFD90, &v37);
        sub_2169C487C((int *)v20 + 9, &v23);
        sub_2169C48D4((int *)v20 + 10, &v24);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
        sub_21697C414(&v23);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
        sub_21697C414(&v25);
        sub_216BEF434(&v33);
      }
    }
    sub_216BEF4DC((uint64_t)&v27);
  }
  sub_21698F21C((uint64_t)&v31, v32[0]);
}

void sub_216BEF2D4(_Unwind_Exception *a1)
{
}

uint64_t sub_216BEF334(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 == *(void *)(a1 + 24))
  {
    v5[0]  = "tf/iterator.h";
    v5[1]  = "operator*";
    uint64_t v5[2] = 271;
    uint64_t v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "fRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, true>::operator*() [T  = const std::vector<pxrInternal_"
            "_aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse  = true]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return v3 - 8;
}