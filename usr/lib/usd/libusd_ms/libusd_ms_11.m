void sub_216C66F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  sub_21684E6B8((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Open(uint64_t a1@<X0>, long long *a2@<X1>, char *a3@<X2>, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a4@<X8>)
{
  int v4 = (int)a3;
  unsigned __int8 v8 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v8)
  {
    v9 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("Usd_CrateFile::CrateFile::Open", 0, a3);
    BOOL v10 = v9 != 0;
  }
  else
  {
    v9 = 0;
    BOOL v10 = 0;
  }
  v34 = v9;
  int v35 = v10;
  *a4 = 0;
  long long v33 = 0uLL;
  v11 = *(void **)a2;
  if (v4)
  {
    if (!v11)
    {
LABEL_10:
      __p[0] = "usd/crateFile.cpp";
      __p[1] = "Open";
      uint64_t v30 = 2470;
      v31 = "static std::unique_ptr<CrateFile> pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Open(const str"
            "ing &, const ArAssetSharedPtr &, BOOL)";
      char v32 = 0;
      if (*(char *)(a1 + 23) >= 0) {
        v13 = (const char *)a1;
      }
      else {
        v13 = *(const char **)a1;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to open asset '%s'", v13);
      goto LABEL_22;
    }
    (*(void (**)(void **__return_ptr))(*(void *)v11 + 48))(__p);
    long long v33 = *(_OWORD *)__p;
    v11 = __p[0];
    a2 = &v33;
  }
  if (!v11) {
    goto LABEL_10;
  }
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(a1))
  {
    v12 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)operator new(0x19B0uLL);
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CrateFile((uint64_t)v12, (long long *)a1, a2, v4);
  }
  else
  {
    v14 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_USE_ASSET);
    if (!v14) {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
    }
    if (!*v14)
    {
      v19 = (FILE *)(*(uint64_t (**)(void))(**(void **)a2 + 40))();
      if (v19)
      {
        v20 = v18;
        sub_216779094(__p, "USDC_USE_PREAD");
        BOOL v21 = pxrInternal__aapl__pxrReserved__::TfGetenvBool((const char *)__p, 0);
        if (SHIBYTE(v30) < 0) {
          operator delete(__p[0]);
        }
        if (v21)
        {
          v22 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)operator new(0x19B0uLL);
          pxrInternal__aapl__pxrReserved__::ArchGetFileName(v19, v27);
          uint64_t v23 = (*(uint64_t (**)(void))(**(void **)a2 + 16))();
          __p[0] = v19;
          __p[1] = v20;
          if (v23 == -1) {
            uint64_t v23 = pxrInternal__aapl__pxrReserved__::ArchGetFileLength(v19, v24) - (void)v20;
          }
          uint64_t v30 = v23;
          LOBYTE(v31) = 0;
          pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CrateFile((uint64_t)v22, (long long *)a1, (long long *)v27, (uint64_t)__p, a2);
          sub_216C658D4(a4, v22);
          if (__p[0] && (_BYTE)v31) {
            fclose((FILE *)__p[0]);
          }
          if (v28 < 0) {
            operator delete(v27[0]);
          }
        }
        else
        {
          if (*(char *)(a1 + 23) >= 0) {
            v25 = (const char *)a1;
          }
          else {
            v25 = *(const char **)a1;
          }
          pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_MmapAsset(v25, (uint64_t)a2, (atomic_ullong **)v27);
          v26 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)operator new(0x19B0uLL);
          pxrInternal__aapl__pxrReserved__::ArchGetFileName(v19, __p);
          pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CrateFile((uint64_t)v26, (long long *)a1, (long long *)__p, v27);
          sub_216C658D4(a4, v26);
          if (SHIBYTE(v30) < 0) {
            operator delete(__p[0]);
          }
          sub_216C77240((void ***)v27);
        }
      }
    }
    if (*a4) {
      goto LABEL_19;
    }
    v12 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)operator new(0x19B0uLL);
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CrateFile((uint64_t)v12, (long long *)a1, a2, v4);
  }
  sub_216C658D4(a4, v12);
LABEL_19:
  if ((*((char *)*a4 + 6535) & 0x80000000) == 0)
  {
    if (*((unsigned char *)*a4 + 6535)) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!*((void *)*a4 + 815)) {
LABEL_21:
  }
    sub_216C658D4(a4, 0);
LABEL_22:
  if (*((void *)&v33 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v33 + 1));
  }
  int v15 = v35--;
  if (v15)
  {
    uint64_t v16 = (uint64_t)v34;
    int v17 = v15 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v16);
      int v35 = v17--;
    }
    while (v17 != -2);
  }
}

void sub_216C6733C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  operator delete(v27);
  sub_216C77240((void ***)&a10);
  if (a26) {
    sub_216784EC4(a26);
  }
  sub_216C658D4(v26, 0);
  sub_21684E6B8(v28 - 80);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::GetSoftwareVersion(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  return 2560;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::GetSoftwareVersionToken(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B915E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B915E8))
  {
    v2 = operator new(8uLL);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%hhd.%hhd.%hhd", v3, v4, 0, 10, 0);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2);
    if (v6 < 0) {
      operator delete(__p);
    }
    qword_267B915E0 = (uint64_t)v2;
    __cxa_guard_release(&qword_267B915E8);
  }
  return qword_267B915E0;
}

void sub_216C674DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  operator delete(v17);
  __cxa_guard_abort(&qword_267B915E8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::GetFileVersion(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  return *((unsigned __int16 *)this + 3184) | (*((unsigned __int8 *)this + 6370) << 16);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::GetFileVersionToken(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this@<X0>, const char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%hhd.%hhd.%hhd", a2, a3, *((unsigned __int8 *)this + 6368), *((unsigned __int8 *)this + 6369), *((unsigned __int8 *)this + 6370));
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a4);
  if (v6 < 0) {
    operator delete(__p);
  }
}

void sub_216C675A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CrateFile(uint64_t a1, int a2)
{
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(void *)(a1 + 208) = 0;
  sub_216C806B0(a1 + 216, 0, 0.0, 0.5);
  for (uint64_t i = 320; i != 2176; i += 32)
    *(void *)(a1 + i) = 0;
  do
  {
    *(void *)(a1 + i) = 0;
    i += 32;
  }
  while (i != 4032);
  do
  {
    *(void *)(a1 + i) = 0;
    i += 32;
  }
  while (i != 5888);
  *(_OWORD *)(a1 + 6432) = 0u;
  *(_OWORD *)(a1 + 6416) = 0u;
  *(_OWORD *)(a1 + 6400) = 0u;
  *(_OWORD *)(a1 + 6384) = 0u;
  *(_OWORD *)(a1 + 6368) = 0u;
  *(_OWORD *)(a1 + 6328) = 0u;
  *(_OWORD *)(a1 + 6344) = 0u;
  *(void *)(a1 + 6360) = 0x434453552D525850;
  *(unsigned char *)(a1 + 6369) = 10;
  *(_OWORD *)(a1 + 6488) = 0u;
  *(_OWORD *)(a1 + 6448) = 0u;
  *(_OWORD *)(a1 + 6464) = 0u;
  *(unsigned char *)(a1 + 6480) = 0;
  *(unsigned char *)(a1 + 6504) = a2 == 2;
  *(_OWORD *)(a1 + 6512) = 0u;
  *(_OWORD *)(a1 + 6528) = 0u;
  *(_OWORD *)(a1 + 6544) = 0u;
  *(void *)(a1 + 6560) = 0;
  *(unsigned char *)(a1 + 6568) = a2 == 1;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_DoAllTypeRegistrations((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1, v4, v5);
  return a1;
}

void sub_216C67730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v16 = *(void **)(v10 + 6560);
  *(void *)(v10 + 6560) = 0;
  if (v16) {
    operator delete[](v16);
  }
  if ((char)v13[190] < 0) {
    operator delete(*(void **)(v10 + 6536));
  }
  if ((char)v13[166] < 0) {
    operator delete(*v14);
  }
  int v17 = *(std::__shared_weak_count **)(v10 + 6496);
  if (v17) {
    sub_216784EC4(v17);
  }
  v18 = *(FILE **)(v10 + 6456);
  if (v18 && v13[111]) {
    fclose(v18);
  }
  sub_216C77240(v12);
  v19 = *(void **)(v10 + 6336);
  if (v19)
  {
    *(void *)(v10 + 6344) = v19;
    operator delete(v19);
  }
  sub_216C6B52C(v11, 0);
  for (uint64_t i = 0; i != -1856; i -= 32)
    sub_216C808DC((void *)(v10 + 5832 + i));
  for (uint64_t j = 0; j != -1856; j -= 32)
    sub_216C808DC((void *)(v10 + 3976 + j));
  for (uint64_t k = 2120; k != 264; k -= 32)
    sub_216C808DC((void *)(v10 + k));
  a10 = (void **)(v10 + 224);
  sub_216C7727C(&a10);
  sub_216C80A50(v10 + 168);
  uint64_t v23 = *(void **)(v10 + 144);
  if (v23)
  {
    *(void *)(v10 + 152) = v23;
    operator delete(v23);
  }
  a10 = (void **)(v10 + 120);
  sub_216889A04(&a10);
  sub_216981168(&a10);
  v24 = *(void **)(v10 + 72);
  if (v24)
  {
    *(void *)(v10 + 80) = v24;
    operator delete(v24);
  }
  v25 = *(void **)(v10 + 48);
  if (v25)
  {
    *(void *)(v10 + 56) = v25;
    operator delete(v25);
  }
  a10 = (void **)(v10 + 24);
  sub_216C80960(&a10);
  v26 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BootStrap::_BootStrap(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BootStrap *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(void *)this = 0x434453552D525850;
  *((unsigned char *)this + 9) = 10;
  return result;
}

{
  double result;

  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(void *)this = 0x434453552D525850;
  *((unsigned char *)this + 9) = 10;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_DoAllTypeRegistrations(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this, uint64_t a2, char *a3)
{
  unsigned __int8 v4 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v4)
  {
    v5 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("Usd_CrateFile::CrateFile::_DoAllTypeRegistrations", 0, a3);
    BOOL v6 = v5 != 0;
  }
  else
  {
    v5 = 0;
    BOOL v6 = 0;
  }
  sub_216C7069C((uint64_t *)this);
  sub_216C70854((uint64_t *)this);
  sub_216C70A0C((uint64_t *)this);
  sub_216C70BC8((uint64_t *)this);
  sub_216C70D84((uint64_t *)this);
  sub_216C70F40((uint64_t *)this);
  sub_216C710FC((uint64_t *)this);
  sub_216C712BC((uint64_t *)this);
  sub_216C71478((uint64_t *)this);
  sub_216C71634((uint64_t *)this);
  sub_216C717F4((uint64_t *)this);
  sub_216C719B4((uint64_t *)this);
  sub_216C71B74((uint64_t *)this);
  sub_216C71D34((uint64_t *)this);
  sub_216C71EF4((uint64_t *)this);
  sub_216C720B4((uint64_t *)this);
  sub_216C72274((uint64_t *)this);
  sub_216C72434((uint64_t *)this);
  sub_216C725F4((uint64_t *)this);
  sub_216C727B4((uint64_t *)this);
  sub_216C72974((uint64_t *)this);
  sub_216C72B34((uint64_t *)this);
  sub_216C72CF4((uint64_t *)this);
  sub_216C72EB4((uint64_t *)this);
  sub_216C73074((uint64_t *)this);
  sub_216C73234((uint64_t *)this);
  sub_216C733F4((uint64_t *)this);
  sub_216C735B4((uint64_t *)this);
  sub_216C73774((uint64_t *)this);
  sub_216C73934((uint64_t *)this);
  sub_216C73AF4((uint64_t *)this);
  sub_216C73CB4((uint64_t *)this);
  sub_216C73E74((uint64_t *)this);
  sub_216C74034((uint64_t *)this);
  sub_216C741F4((uint64_t *)this);
  sub_216C743B4((uint64_t *)this);
  sub_216C74574((uint64_t *)this);
  sub_216C74734((uint64_t *)this);
  sub_216C748F4((uint64_t *)this);
  sub_216C74AB4((uint64_t *)this);
  sub_216C74C74((uint64_t *)this);
  sub_216C74E34((uint64_t *)this);
  sub_216C74FF4((uint64_t *)this);
  sub_216C751B4((uint64_t *)this);
  sub_216C75374((uint64_t *)this);
  sub_216C75534((uint64_t *)this);
  sub_216C756F4((uint64_t *)this);
  sub_216C758B4((uint64_t *)this);
  sub_216C75A74((uint64_t *)this);
  sub_216C75C34((uint64_t *)this);
  sub_216C75DF4((uint64_t *)this);
  sub_216C75FB4((uint64_t *)this);
  sub_216C76174((uint64_t *)this);
  sub_216C76334((uint64_t *)this);
  sub_216C764F4((uint64_t *)this);
  sub_216C766B4((uint64_t *)this);
  double result = sub_216C76874((uint64_t *)this);
  if (v6) {
    return (void *)pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v5);
  }
  return result;
}

void sub_216C67B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CrateFile(uint64_t a1, long long *a2, long long *a3, void *a4)
{
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(void *)(a1 + 208) = 0;
  sub_216C806B0(a1 + 216, 0, 0.0, 0.5);
  for (uint64_t i = 320; i != 2176; i += 32)
    *(void *)(a1 + i) = 0;
  do
  {
    *(void *)(a1 + i) = 0;
    i += 32;
  }
  while (i != 4032);
  do
  {
    *(void *)(a1 + i) = 0;
    i += 32;
  }
  while (i != 5888);
  *(_OWORD *)(a1 + 6432) = 0u;
  *(_OWORD *)(a1 + 6416) = 0u;
  *(_OWORD *)(a1 + 6400) = 0u;
  *(_OWORD *)(a1 + 6384) = 0u;
  *(_OWORD *)(a1 + 6368) = 0u;
  *(_OWORD *)(a1 + 6328) = 0u;
  *(_OWORD *)(a1 + 6344) = 0u;
  *(void *)(a1 + 6360) = 0x434453552D525850;
  *(unsigned char *)(a1 + 6369) = 10;
  *(void *)(a1 + 6448) = *a4;
  int v15 = 0;
  *a4 = 0;
  sub_216C771E4(&v15, v8);
  *(unsigned char *)(a1 + 6480) = 0;
  *(void *)(a1 + 6472) = 0;
  *(_OWORD *)(a1 + 6456) = 0u;
  *(_OWORD *)(a1 + 6488) = 0u;
  *(unsigned char *)(a1 + 6504) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 6512), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v12 = *a2;
    *(void *)(a1 + 6528) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 6512) = v12;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 6536), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v13 = *a3;
    *(void *)(a1 + 6552) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 6536) = v13;
  }
  *(void *)(a1 + 6560) = 0;
  *(unsigned char *)(a1 + 6568) = 1;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_DoAllTypeRegistrations((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1, v10, v11);
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_InitMMap((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1);
  return a1;
}

void sub_216C67D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(char *)(v13 + 166) < 0) {
    operator delete(*v12);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(v10 + 6496);
  if (v16) {
    sub_216784EC4(v16);
  }
  if (*v14 && *(unsigned char *)(v13 + 111)) {
    fclose(*v14);
  }
  sub_216C77240((void ***)(v10 + 6448));
  int v17 = *(void **)(v10 + 6336);
  if (v17)
  {
    *(void *)(v10 + 6344) = v17;
    operator delete(v17);
  }
  sub_216C6B52C(v11, 0);
  for (uint64_t i = 0; i != -1856; i -= 32)
    sub_216C808DC((void *)(v10 + 5832 + i));
  for (uint64_t j = 0; j != -1856; j -= 32)
    sub_216C808DC((void *)(v10 + 3976 + j));
  for (uint64_t k = 2120; k != 264; k -= 32)
    sub_216C808DC((void *)(v10 + k));
  a10 = (void **)(v10 + 224);
  sub_216C7727C(&a10);
  sub_216C80A50(v10 + 168);
  BOOL v21 = *(void **)(v10 + 144);
  if (v21)
  {
    *(void *)(v10 + 152) = v21;
    operator delete(v21);
  }
  a10 = (void **)(v10 + 120);
  sub_216889A04(&a10);
  sub_216981168(&a10);
  v22 = *(void **)(v10 + 72);
  if (v22)
  {
    *(void *)(v10 + 80) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *(void **)(v10 + 48);
  if (v23)
  {
    *(void *)(v10 + 56) = v23;
    operator delete(v23);
  }
  a10 = (void **)(v10 + 24);
  sub_216C80960(&a10);
  v24 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_InitMMap(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  v2 = (char *)this + 6512;
  uint64_t v3 = *((void *)this + 806);
  if (!v3)
  {
    if (*((char *)this + 6535) < 0)
    {
      **((unsigned char **)this + 814) = 0;
      *((void *)this + 815) = 0;
    }
    else
    {
      char *v2 = 0;
      *((unsigned char *)this + 6535) = 0;
    }
    if (*((char *)this + 6559) < 0)
    {
      **((unsigned char **)this + 817) = 0;
      *((void *)this + 818) = 0;
    }
    else
    {
      *((unsigned char *)this + 6536) = 0;
      *((unsigned char *)this + 6559) = 0;
    }
    return;
  }
  uint64_t v4 = *(void *)(v3 + 32);
  pxrInternal__aapl__pxrReserved__::ArchMemAdvise(*(void *)(v3 + 24), v4, 3);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91608, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91608))
  {
    sub_216779094(__p, "USDC_DUMP_PAGE_MAPS");
    sub_216779094(v23, "");
    pxrInternal__aapl__pxrReserved__::TfGetenv((const char *)__p, (uint64_t)v23, (uint64_t)&qword_267B915F0);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267B915F0, &dword_216758000);
    __cxa_guard_release(&qword_267B91608);
  }
  if (byte_267B91607 < 0)
  {
    if (!qword_267B915F8) {
      goto LABEL_20;
    }
    if (qword_267B915F8 != 1) {
      goto LABEL_16;
    }
    if (*(unsigned char *)qword_267B915F0 == 42) {
      goto LABEL_17;
    }
    if (qword_267B915F8 != 1) {
      goto LABEL_16;
    }
    int v5 = *(unsigned __int8 *)qword_267B915F0;
LABEL_15:
    if (v5 != 49) {
      goto LABEL_16;
    }
LABEL_17:
    uint64_t v7 = *(void *)(*((void *)this + 806) + 24);
    uint64_t v8 = v7 + v4;
    uint64_t v9 = sub_216C774E4() & v7;
    uint64_t v10 = ~v9 + v8 + sub_216C6628C();
    size_t v11 = v10 / sub_216C6628C();
    long long v12 = operator new[](v11);
    uint64_t v13 = (void *)*((void *)this + 820);
    *((void *)this + 820) = v12;
    if (v13)
    {
      operator delete[](v13);
      long long v12 = (void *)*((void *)this + 820);
    }
    bzero(v12, v11);
    goto LABEL_20;
  }
  if (!byte_267B91607) {
    goto LABEL_20;
  }
  if (byte_267B91607 == 1)
  {
    int v5 = qword_267B915F0;
    if (qword_267B915F0 == 42) {
      goto LABEL_17;
    }
    goto LABEL_15;
  }
LABEL_16:
  pxrInternal__aapl__pxrReserved__::ArchRegex::ArchRegex(__p, &qword_267B915F0, 2);
  unsigned int v6 = pxrInternal__aapl__pxrReserved__::ArchRegex::Match((uint64_t)__p, (const char *)this + 6512);
  pxrInternal__aapl__pxrReserved__::ArchRegex::~ArchRegex((pxrInternal__aapl__pxrReserved__::ArchRegex *)__p);
  if (v6) {
    goto LABEL_17;
  }
LABEL_20:
  uint64_t v14 = *((void *)this + 820);
  uint64_t v15 = *(void *)(*((void *)this + 806) + 24);
  sub_216C688BC();
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)__p);
  v19[0] = this;
  v19[1] = v15;
  v19[2] = (char *)this + 6448;
  v19[3] = v14;
  int v20 = 0;
  sub_216C681E0((uint64_t)this, (uint64_t)v19, v4);
  unint64_t v16 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v16) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  int v17 = __p[0];
  unint64_t v18 = atomic_load((unint64_t *)(v16 + 144));
  if ((unint64_t)v17 < v18
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)__p, (atomic_ullong *)v16))
  {
    if (v2[23] < 0)
    {
      **((unsigned char **)this + 814) = 0;
      *((void *)this + 815) = 0;
    }
    else
    {
      char *v2 = 0;
      v2[23] = 0;
    }
  }
  if (!sub_216C688BC()) {
    pxrInternal__aapl__pxrReserved__::ArchMemAdvise(*(void *)(*((void *)this + 806) + 24), v4, 0);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)__p);
}

void sub_216C68178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (*(char *)(v19 - 49) < 0) {
    operator delete(*(void **)(v19 - 72));
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267B91608);
  _Unwind_Resume(a1);
}

void sub_216C681E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78);
  long long v6 = *(_OWORD *)(a2 + 24);
  v77[0] = *(_OWORD *)(a2 + 8);
  v77[1] = v6;
  sub_216C80AD0((uint64_t)v77, a3, (uint64_t)&v79);
  *(void *)(a1 + 6440) = v84;
  long long v7 = v82;
  *(_OWORD *)(a1 + 6392) = v81;
  *(_OWORD *)(a1 + 6408) = v7;
  *(_OWORD *)(a1 + 6424) = v83;
  long long v8 = v80;
  *(_OWORD *)(a1 + 6360) = v79;
  *(_OWORD *)(a1 + 6376) = v8;
  unint64_t v9 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v10 = v78;
  unint64_t v11 = atomic_load((unint64_t *)(v9 + 144));
  if (v10 >= v11
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (atomic_ullong *)v9))
  {
    long long v12 = *(_OWORD *)(a2 + 16);
    v75[0] = *(_OWORD *)a2;
    v75[1] = v12;
    uint64_t v76 = *(void *)(a2 + 32);
    sub_216C80D30((uint64_t)v75, a1 + 6360, (uint64_t)&v79);
    uint64_t v13 = *(void **)(a1 + 6336);
    if (v13)
    {
      *(void *)(a1 + 6344) = v13;
      operator delete(v13);
      *(void *)(a1 + 6336) = 0;
      *(void *)(a1 + 6344) = 0;
      *(void *)(a1 + 6352) = 0;
    }
    *(_OWORD *)(a1 + 6336) = v79;
    *(void *)(a1 + 6352) = v80;
  }
  unint64_t v14 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v14) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v15 = v78;
  unint64_t v16 = atomic_load((unint64_t *)(v14 + 144));
  if (v15 >= v16
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (atomic_ullong *)v14))
  {
    long long v18 = *(_OWORD *)(a2 + 16);
    v73[0] = *(_OWORD *)a2;
    v73[1] = v18;
    uint64_t v74 = *(void *)(a2 + 32);
    sub_216C80DD0(a1, (uint64_t)v73);
  }
  unint64_t v19 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v19) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v20 = v78;
  unint64_t v21 = atomic_load((unint64_t *)(v19 + 144));
  if (v20 >= v21
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (atomic_ullong *)v19))
  {
    long long v22 = *(_OWORD *)(a2 + 16);
    v71[0] = *(_OWORD *)a2;
    v71[1] = v22;
    uint64_t v72 = *(void *)(a2 + 32);
    sub_216C80E48(a1, (uint64_t)v71, v17);
  }
  unint64_t v23 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v23) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v24 = v78;
  unint64_t v25 = atomic_load((unint64_t *)(v23 + 144));
  if (v24 >= v25
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (atomic_ullong *)v23))
  {
    long long v26 = *(_OWORD *)(a2 + 16);
    v69[0] = *(_OWORD *)a2;
    v69[1] = v26;
    uint64_t v70 = *(void *)(a2 + 32);
    sub_216C81578(a1, (uint64_t)v69, v17);
  }
  unint64_t v27 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v27) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v28 = v78;
  unint64_t v29 = atomic_load((unint64_t *)(v27 + 144));
  if (v28 >= v29
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (atomic_ullong *)v27))
  {
    long long v30 = *(_OWORD *)(a2 + 16);
    v67[0] = *(_OWORD *)a2;
    v67[1] = v30;
    uint64_t v68 = *(void *)(a2 + 32);
    sub_216C81650(a1, (uint64_t)v67, v17);
  }
  unint64_t v31 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v31) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v32 = v78;
  unint64_t v33 = atomic_load((unint64_t *)(v31 + 144));
  if (v32 >= v33
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (atomic_ullong *)v31))
  {
    long long v34 = *(_OWORD *)(a2 + 16);
    v65[0] = *(_OWORD *)a2;
    v65[1] = v34;
    uint64_t v66 = *(void *)(a2 + 32);
    sub_216C81A04(a1, (uint64_t)v65, v17);
  }
  unint64_t v35 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v35) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v36 = v78;
  unint64_t v37 = atomic_load((unint64_t *)(v35 + 144));
  if (v36 >= v37
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (atomic_ullong *)v35))
  {
    long long v38 = *(_OWORD *)(a2 + 16);
    v63[0] = *(_OWORD *)a2;
    v63[1] = v38;
    uint64_t v64 = *(void *)(a2 + 32);
    sub_216C81CD0(a1, (uint64_t)v63, v17);
  }
  unint64_t v39 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v39) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v40 = v78;
  unint64_t v41 = atomic_load((unint64_t *)(v39 + 144));
  if (v40 >= v41
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (atomic_ullong *)v39))
  {
    long long v42 = *(_OWORD *)(a2 + 16);
    v61[0] = *(_OWORD *)a2;
    v61[1] = v42;
    uint64_t v62 = *(void *)(a2 + 32);
    sub_216C820D8(a1, (uint64_t)v61, v17);
  }
  unint64_t v43 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v43) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v44 = v78;
  unint64_t v45 = atomic_load((unint64_t *)(v43 + 144));
  if (v44 >= v45
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (atomic_ullong *)v43))
  {
    uint64_t v46 = *(void *)(a1 + 48);
    uint64_t v47 = *(void *)(a1 + 56);
    if (v46 != v47)
    {
      uint64_t v48 = *(void *)(a1 + 48);
      while ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 3 > (unint64_t)*(unsigned int *)(v48 + 4))
      {
        v48 += 16;
        if (v48 == v47) {
          goto LABEL_51;
        }
      }
      *(void *)&long long v79 = "usd/crateFile.cpp";
      *((void *)&v79 + 1) = "operator()";
      *(void *)&long long v80 = 3551;
      *((void *)&v80 + 1) = "auto pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadStructuralSections(p"
                              "xrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrR"
                              "eserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::Cra"
                              "teFile::_FileMapping *>>, int64_t)::(anonymous class)::operator()() const";
      LOBYTE(v81) = 0;
      v60 = (const char *)(a1 + 6512);
      if (*(char *)(a1 + 6535) < 0) {
        v60 = *(const char **)v60;
      }
      goto LABEL_77;
    }
LABEL_51:
    v49 = *(unsigned int **)(a1 + 72);
    v50 = *(unsigned int **)(a1 + 80);
    if (v49 != v50)
    {
      unint64_t v51 = (v47 - v46) >> 4;
      v52 = *(unsigned int **)(a1 + 72);
      while (1)
      {
        unint64_t v53 = *v52;
        if (v53 != -1 && v51 <= v53) {
          break;
        }
        if (++v52 == v50) {
          goto LABEL_59;
        }
      }
      *(void *)&long long v79 = "usd/crateFile.cpp";
      *((void *)&v79 + 1) = "operator()";
      *(void *)&long long v80 = 3551;
      *((void *)&v80 + 1) = "auto pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadStructuralSections(p"
                              "xrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrR"
                              "eserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::Cra"
                              "teFile::_FileMapping *>>, int64_t)::(anonymous class)::operator()() const";
      LOBYTE(v81) = 0;
      v60 = (const char *)(a1 + 6512);
      if (*(char *)(a1 + 6535) < 0) {
        v60 = *(const char **)v60;
      }
      goto LABEL_77;
    }
LABEL_59:
    v55 = *(unsigned int **)a1;
    v56 = *(unsigned int **)(a1 + 8);
    if (*(unsigned int **)a1 != v56)
    {
      unint64_t v57 = v50 - v49;
      while ((uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3 > (unint64_t)*v55)
      {
        unint64_t v58 = v55[1];
        if (v57 <= v58 || v58 && v49[(v58 - 1)] != -1) {
          break;
        }
        int v59 = v55[2];
        if (!v59 || v59 >= 12) {
          break;
        }
        v55 += 3;
        if (v55 == v56) {
          goto LABEL_78;
        }
      }
      *(void *)&long long v79 = "usd/crateFile.cpp";
      *((void *)&v79 + 1) = "operator()";
      *(void *)&long long v80 = 3551;
      *((void *)&v80 + 1) = "auto pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadStructuralSections(p"
                              "xrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrR"
                              "eserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::Cra"
                              "teFile::_FileMapping *>>, int64_t)::(anonymous class)::operator()() const";
      LOBYTE(v81) = 0;
      v60 = (const char *)(a1 + 6512);
      if (*(char *)(a1 + 6535) < 0) {
        v60 = *(const char **)v60;
      }
LABEL_77:
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v79, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt asset @%s@", v60);
      *(void *)(a1 + 8) = *(void *)a1;
      *(void *)(a1 + 80) = *(void *)(a1 + 72);
      *(void *)(a1 + 56) = *(void *)(a1 + 48);
    }
  }
LABEL_78:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78);
}

void sub_216C687BC(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_216C688A0()
{
}

void sub_216C688AC(void *a1, int a2)
{
  if (a2) {
    sub_21675DB74(a1);
  }
  JUMPOUT(0x216C687E4);
}

uint64_t sub_216C688BC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91680, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91680))
  {
    dword_267B91678 = sub_216C7744C();
    __cxa_guard_release(&qword_267B91680);
  }
  return dword_267B91678;
}

void sub_216C68918(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CrateFile(uint64_t a1, long long *a2, long long *a3, uint64_t a4, void *a5)
{
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(void *)(a1 + 208) = 0;
  sub_216C806B0(a1 + 216, 0, 0.0, 0.5);
  for (uint64_t i = 320; i != 2176; i += 32)
    *(void *)(a1 + i) = 0;
  do
  {
    *(void *)(a1 + i) = 0;
    i += 32;
  }
  while (i != 4032);
  do
  {
    *(void *)(a1 + i) = 0;
    i += 32;
  }
  while (i != 5888);
  *(_OWORD *)(a1 + 6432) = 0u;
  *(_OWORD *)(a1 + 6416) = 0u;
  *(_OWORD *)(a1 + 6400) = 0u;
  *(_OWORD *)(a1 + 6384) = 0u;
  *(_OWORD *)(a1 + 6368) = 0u;
  *(_OWORD *)(a1 + 6328) = 0u;
  *(_OWORD *)(a1 + 6344) = 0u;
  *(void *)(a1 + 6360) = 0x434453552D525850;
  *(unsigned char *)(a1 + 6369) = 10;
  *(void *)(a1 + 6448) = 0;
  *(void *)(a1 + 6456) = *(void *)a4;
  *(_OWORD *)(a1 + 6464) = *(_OWORD *)(a4 + 8);
  *(unsigned char *)(a1 + 6480) = *(unsigned char *)(a4 + 24);
  *(void *)a4 = 0;
  *(void *)(a1 + 6488) = *a5;
  uint64_t v13 = a5[1];
  *(void *)(a1 + 6496) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 6504) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 6512), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v14 = *a2;
    *(void *)(a1 + 6528) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 6512) = v14;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 6536), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v15 = *a3;
    *(void *)(a1 + 6552) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 6536) = v15;
  }
  *(void *)(a1 + 6560) = 0;
  *(unsigned char *)(a1 + 6568) = 0;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_DoAllTypeRegistrations((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1, v10, v11);
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_InitPread((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1);
  return a1;
}

void sub_216C68B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(char *)(v13 + 166) < 0) {
    operator delete(*v12);
  }
  long long v15 = *(std::__shared_weak_count **)(v10 + 6496);
  if (v15) {
    sub_216784EC4(v15);
  }
  unint64_t v16 = *(FILE **)(v10 + 6456);
  if (v16 && *(unsigned char *)(v13 + 111)) {
    fclose(v16);
  }
  sub_216C77240((void ***)(v10 + 6448));
  int v17 = *(void **)(v10 + 6336);
  if (v17)
  {
    *(void *)(v10 + 6344) = v17;
    operator delete(v17);
  }
  sub_216C6B52C(v11, 0);
  for (uint64_t i = 0; i != -1856; i -= 32)
    sub_216C808DC((void *)(v10 + 5832 + i));
  for (uint64_t j = 0; j != -1856; j -= 32)
    sub_216C808DC((void *)(v10 + 3976 + j));
  for (uint64_t k = 2120; k != 264; k -= 32)
    sub_216C808DC((void *)(v10 + k));
  a10 = (void **)(v10 + 224);
  sub_216C7727C(&a10);
  sub_216C80A50(v10 + 168);
  unint64_t v21 = *(void **)(v10 + 144);
  if (v21)
  {
    *(void *)(v10 + 152) = v21;
    operator delete(v21);
  }
  a10 = (void **)(v10 + 120);
  sub_216889A04(&a10);
  sub_216981168(&a10);
  long long v22 = *(void **)(v10 + 72);
  if (v22)
  {
    *(void *)(v10 + 80) = v22;
    operator delete(v22);
  }
  unint64_t v23 = *(void **)(v10 + 48);
  if (v23)
  {
    *(void *)(v10 + 56) = v23;
    operator delete(v23);
  }
  a10 = (void **)(v10 + 24);
  sub_216C80960(&a10);
  unint64_t v24 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_InitPread(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  uint64_t v2 = *((void *)this + 809);
  pxrInternal__aapl__pxrReserved__::ArchFileAdvise(*((void *)this + 807), *((void *)this + 808), v2, 3);
  uint64_t v3 = *((void *)this + 808);
  uint64_t v4 = *((void *)this + 809);
  uint64_t v5 = *((void *)this + 807);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10);
  v9[0] = this;
  v9[1] = v3;
  v9[2] = 0;
  v9[3] = v4;
  v9[4] = v5;
  sub_216C68DC4((uint64_t)this, (uint64_t)v9, v2);
  unint64_t v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v7 = v10;
  unint64_t v8 = atomic_load((unint64_t *)(v6 + 144));
  if (v7 < v8
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10, (atomic_ullong *)v6))
  {
    if (*((char *)this + 6535) < 0)
    {
      **((unsigned char **)this + 814) = 0;
      *((void *)this + 815) = 0;
    }
    else
    {
      *((unsigned char *)this + 6512) = 0;
      *((unsigned char *)this + 6535) = 0;
    }
    if (*((char *)this + 6559) < 0)
    {
      **((unsigned char **)this + 817) = 0;
      *((void *)this + 818) = 0;
    }
    else
    {
      *((unsigned char *)this + 6536) = 0;
      *((unsigned char *)this + 6559) = 0;
    }
  }
  pxrInternal__aapl__pxrReserved__::ArchFileAdvise(*((void *)this + 807), *((void *)this + 808), v2, 0);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10);
}

void sub_216C68DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_216C68DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78);
  long long v6 = *(_OWORD *)(a2 + 24);
  v77[0] = *(_OWORD *)(a2 + 8);
  v77[1] = v6;
  sub_216C88D64((uint64_t)v77, a3, (uint64_t)&v79);
  *(void *)(a1 + 6440) = v84;
  long long v7 = v82;
  *(_OWORD *)(a1 + 6392) = v81;
  *(_OWORD *)(a1 + 6408) = v7;
  *(_OWORD *)(a1 + 6424) = v83;
  long long v8 = v80;
  *(_OWORD *)(a1 + 6360) = v79;
  *(_OWORD *)(a1 + 6376) = v8;
  unint64_t v9 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v10 = v78;
  unint64_t v11 = atomic_load((unint64_t *)(v9 + 144));
  if (v10 >= v11
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (atomic_ullong *)v9))
  {
    long long v12 = *(_OWORD *)(a2 + 16);
    v75[0] = *(_OWORD *)a2;
    v75[1] = v12;
    uint64_t v76 = *(void *)(a2 + 32);
    sub_216C88FD8((uint64_t)v75, a1 + 6360, (uint64_t)&v79);
    uint64_t v13 = *(void **)(a1 + 6336);
    if (v13)
    {
      *(void *)(a1 + 6344) = v13;
      operator delete(v13);
      *(void *)(a1 + 6336) = 0;
      *(void *)(a1 + 6344) = 0;
      *(void *)(a1 + 6352) = 0;
    }
    *(_OWORD *)(a1 + 6336) = v79;
    *(void *)(a1 + 6352) = v80;
  }
  unint64_t v14 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v14) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v15 = v78;
  unint64_t v16 = atomic_load((unint64_t *)(v14 + 144));
  if (v15 >= v16
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (atomic_ullong *)v14))
  {
    long long v18 = *(_OWORD *)(a2 + 16);
    v73[0] = *(_OWORD *)a2;
    v73[1] = v18;
    uint64_t v74 = *(void *)(a2 + 32);
    sub_216C89068(a1, (uint64_t)v73);
  }
  unint64_t v19 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v19) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v20 = v78;
  unint64_t v21 = atomic_load((unint64_t *)(v19 + 144));
  if (v20 >= v21
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (atomic_ullong *)v19))
  {
    long long v22 = *(_OWORD *)(a2 + 16);
    v71[0] = *(_OWORD *)a2;
    v71[1] = v22;
    uint64_t v72 = *(void *)(a2 + 32);
    sub_216C890D8(a1, (uint64_t)v71, v17);
  }
  unint64_t v23 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v23) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v24 = v78;
  unint64_t v25 = atomic_load((unint64_t *)(v23 + 144));
  if (v24 >= v25
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (atomic_ullong *)v23))
  {
    long long v26 = *(_OWORD *)(a2 + 16);
    v69[0] = *(_OWORD *)a2;
    v69[1] = v26;
    uint64_t v70 = *(void *)(a2 + 32);
    sub_216C897E0(a1, (uint64_t)v69, v17);
  }
  unint64_t v27 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v27) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v28 = v78;
  unint64_t v29 = atomic_load((unint64_t *)(v27 + 144));
  if (v28 >= v29
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (atomic_ullong *)v27))
  {
    long long v30 = *(_OWORD *)(a2 + 16);
    v67[0] = *(_OWORD *)a2;
    v67[1] = v30;
    uint64_t v68 = *(void *)(a2 + 32);
    sub_216C898A8(a1, (uint64_t)v67, v17);
  }
  unint64_t v31 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v31) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v32 = v78;
  unint64_t v33 = atomic_load((unint64_t *)(v31 + 144));
  if (v32 >= v33
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (atomic_ullong *)v31))
  {
    long long v34 = *(_OWORD *)(a2 + 16);
    v65[0] = *(_OWORD *)a2;
    v65[1] = v34;
    uint64_t v66 = *(void *)(a2 + 32);
    sub_216C89C40(a1, (uint64_t)v65, v17);
  }
  unint64_t v35 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v35) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v36 = v78;
  unint64_t v37 = atomic_load((unint64_t *)(v35 + 144));
  if (v36 >= v37
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (atomic_ullong *)v35))
  {
    long long v38 = *(_OWORD *)(a2 + 16);
    v63[0] = *(_OWORD *)a2;
    v63[1] = v38;
    uint64_t v64 = *(void *)(a2 + 32);
    sub_216C89EFC(a1, (uint64_t)v63, v17);
  }
  unint64_t v39 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v39) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v40 = v78;
  unint64_t v41 = atomic_load((unint64_t *)(v39 + 144));
  if (v40 >= v41
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (atomic_ullong *)v39))
  {
    long long v42 = *(_OWORD *)(a2 + 16);
    v61[0] = *(_OWORD *)a2;
    v61[1] = v42;
    uint64_t v62 = *(void *)(a2 + 32);
    sub_216C8A2E8(a1, (uint64_t)v61, v17);
  }
  unint64_t v43 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v43) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v44 = v78;
  unint64_t v45 = atomic_load((unint64_t *)(v43 + 144));
  if (v44 >= v45
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78, (atomic_ullong *)v43))
  {
    uint64_t v46 = *(void *)(a1 + 48);
    uint64_t v47 = *(void *)(a1 + 56);
    if (v46 != v47)
    {
      uint64_t v48 = *(void *)(a1 + 48);
      while ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 3 > (unint64_t)*(unsigned int *)(v48 + 4))
      {
        v48 += 16;
        if (v48 == v47) {
          goto LABEL_51;
        }
      }
      *(void *)&long long v79 = "usd/crateFile.cpp";
      *((void *)&v79 + 1) = "operator()";
      *(void *)&long long v80 = 3551;
      *((void *)&v80 + 1) = "auto pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadStructuralSections(p"
                              "xrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrR"
                              "eserved__::Usd_CrateFile::_PreadStream>, int64_t)::(anonymous class)::operator()() const";
      LOBYTE(v81) = 0;
      v60 = (const char *)(a1 + 6512);
      if (*(char *)(a1 + 6535) < 0) {
        v60 = *(const char **)v60;
      }
      goto LABEL_77;
    }
LABEL_51:
    v49 = *(unsigned int **)(a1 + 72);
    v50 = *(unsigned int **)(a1 + 80);
    if (v49 != v50)
    {
      unint64_t v51 = (v47 - v46) >> 4;
      v52 = *(unsigned int **)(a1 + 72);
      while (1)
      {
        unint64_t v53 = *v52;
        if (v53 != -1 && v51 <= v53) {
          break;
        }
        if (++v52 == v50) {
          goto LABEL_59;
        }
      }
      *(void *)&long long v79 = "usd/crateFile.cpp";
      *((void *)&v79 + 1) = "operator()";
      *(void *)&long long v80 = 3551;
      *((void *)&v80 + 1) = "auto pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadStructuralSections(p"
                              "xrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrR"
                              "eserved__::Usd_CrateFile::_PreadStream>, int64_t)::(anonymous class)::operator()() const";
      LOBYTE(v81) = 0;
      v60 = (const char *)(a1 + 6512);
      if (*(char *)(a1 + 6535) < 0) {
        v60 = *(const char **)v60;
      }
      goto LABEL_77;
    }
LABEL_59:
    v55 = *(unsigned int **)a1;
    v56 = *(unsigned int **)(a1 + 8);
    if (*(unsigned int **)a1 != v56)
    {
      unint64_t v57 = v50 - v49;
      while ((uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3 > (unint64_t)*v55)
      {
        unint64_t v58 = v55[1];
        if (v57 <= v58 || v58 && v49[(v58 - 1)] != -1) {
          break;
        }
        int v59 = v55[2];
        if (!v59 || v59 >= 12) {
          break;
        }
        v55 += 3;
        if (v55 == v56) {
          goto LABEL_78;
        }
      }
      *(void *)&long long v79 = "usd/crateFile.cpp";
      *((void *)&v79 + 1) = "operator()";
      *(void *)&long long v80 = 3551;
      *((void *)&v80 + 1) = "auto pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadStructuralSections(p"
                              "xrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrR"
                              "eserved__::Usd_CrateFile::_PreadStream>, int64_t)::(anonymous class)::operator()() const";
      LOBYTE(v81) = 0;
      v60 = (const char *)(a1 + 6512);
      if (*(char *)(a1 + 6535) < 0) {
        v60 = *(const char **)v60;
      }
LABEL_77:
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v79, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt asset @%s@", v60);
      *(void *)(a1 + 8) = *(void *)a1;
      *(void *)(a1 + 80) = *(void *)(a1 + 72);
      *(void *)(a1 + 56) = *(void *)(a1 + 48);
    }
  }
LABEL_78:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v78);
}

void sub_216C693A0(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_216C69484()
{
}

void sub_216C69490(void *a1, int a2)
{
  if (a2) {
    sub_21675DB74(a1);
  }
  JUMPOUT(0x216C693C8);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CrateFile(uint64_t a1, long long *a2, void *a3, char a4)
{
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(void *)(a1 + 208) = 0;
  sub_216C806B0(a1 + 216, 0, 0.0, 0.5);
  for (uint64_t i = 320; i != 2176; i += 32)
    *(void *)(a1 + i) = 0;
  do
  {
    *(void *)(a1 + i) = 0;
    i += 32;
  }
  while (i != 4032);
  do
  {
    *(void *)(a1 + i) = 0;
    i += 32;
  }
  while (i != 5888);
  *(_OWORD *)(a1 + 6432) = 0u;
  *(_OWORD *)(a1 + 6416) = 0u;
  *(_OWORD *)(a1 + 6400) = 0u;
  *(_OWORD *)(a1 + 6384) = 0u;
  *(_OWORD *)(a1 + 6368) = 0u;
  *(_OWORD *)(a1 + 6328) = 0u;
  *(_OWORD *)(a1 + 6344) = 0u;
  *(void *)(a1 + 6360) = 0x434453552D525850;
  *(unsigned char *)(a1 + 6369) = 10;
  *(_OWORD *)(a1 + 6448) = 0u;
  *(_OWORD *)(a1 + 6464) = 0u;
  *(unsigned char *)(a1 + 6480) = 0;
  *(void *)(a1 + 6488) = *a3;
  uint64_t v11 = a3[1];
  *(void *)(a1 + 6496) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 6504) = a4;
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 6512), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v12 = *a2;
    *(void *)(a1 + 6528) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 6512) = v12;
  }
  *(unsigned char *)(a1 + 6568) = 0;
  *(_OWORD *)(a1 + 6536) = 0u;
  *(_OWORD *)(a1 + 6552) = 0u;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_DoAllTypeRegistrations((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1, v8, v9);
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_InitAsset((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1);
  return a1;
}

void sub_216C69650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  unint64_t v15 = *(std::__shared_weak_count **)(v10 + 6496);
  if (v15) {
    sub_216784EC4(v15);
  }
  unint64_t v16 = *(FILE **)(v10 + 6456);
  if (v16 && *(unsigned char *)(v13 + 111)) {
    fclose(v16);
  }
  sub_216C77240(v12);
  int v17 = *(void **)(v10 + 6336);
  if (v17)
  {
    *(void *)(v10 + 6344) = v17;
    operator delete(v17);
  }
  sub_216C6B52C(v11, 0);
  for (uint64_t i = 0; i != -1856; i -= 32)
    sub_216C808DC((void *)(v10 + 5832 + i));
  for (uint64_t j = 0; j != -1856; j -= 32)
    sub_216C808DC((void *)(v10 + 3976 + j));
  for (uint64_t k = 2120; k != 264; k -= 32)
    sub_216C808DC((void *)(v10 + k));
  a10 = (void **)(v10 + 224);
  sub_216C7727C(&a10);
  sub_216C80A50(v10 + 168);
  unint64_t v21 = *(void **)(v10 + 144);
  if (v21)
  {
    *(void *)(v10 + 152) = v21;
    operator delete(v21);
  }
  a10 = (void **)(v10 + 120);
  sub_216889A04(&a10);
  sub_216981168(&a10);
  long long v22 = *(void **)(v10 + 72);
  if (v22)
  {
    *(void *)(v10 + 80) = v22;
    operator delete(v22);
  }
  unint64_t v23 = *(void **)(v10 + 48);
  if (v23)
  {
    *(void *)(v10 + 56) = v23;
    operator delete(v23);
  }
  a10 = (void **)(v10 + 24);
  sub_216C80960(&a10);
  unint64_t v24 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_InitAsset(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  uint64_t v2 = *((void *)this + 811);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 812);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v3);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v11);
  *(void *)&long long v8 = this;
  *((void *)&v8 + 1) = v2;
  unint64_t v9 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = 0;
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 811) + 16))(*((void *)this + 811));
  sub_216C6992C((uint64_t)this, &v8, v4);
  if (v9) {
    sub_216784EC4(v9);
  }
  unint64_t v5 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v6 = v11;
  unint64_t v7 = atomic_load((unint64_t *)(v5 + 144));
  if (v6 < v7
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v11, (atomic_ullong *)v5))
  {
    if (*((char *)this + 6535) < 0)
    {
      **((unsigned char **)this + 814) = 0;
      *((void *)this + 815) = 0;
    }
    else
    {
      *((unsigned char *)this + 6512) = 0;
      *((unsigned char *)this + 6535) = 0;
    }
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v11);
  if (v3) {
    sub_216784EC4(v3);
  }
}

void sub_216C698F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  if (v6) {
    sub_216784EC4(v6);
  }
  _Unwind_Resume(a1);
}

void sub_216C6992C(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v85);
  unint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
  uint64_t v82 = *((void *)a2 + 1);
  long long v83 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v84 = *((void *)a2 + 3);
  sub_216C667C0(&v82, a3, (uint64_t)&v86);
  *(void *)(a1 + 6440) = v91;
  long long v7 = v89;
  *(_OWORD *)(a1 + 6392) = v88;
  *(_OWORD *)(a1 + 6408) = v7;
  *(_OWORD *)(a1 + 6424) = v90;
  long long v8 = v87;
  *(_OWORD *)(a1 + 6360) = v86;
  *(_OWORD *)(a1 + 6376) = v8;
  if (v83) {
    sub_216784EC4(v83);
  }
  unint64_t v9 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v10 = v85;
  unint64_t v11 = atomic_load((unint64_t *)(v9 + 144));
  if (v10 >= v11
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v85, (atomic_ullong *)v9))
  {
    long long v79 = *a2;
    uint64_t v13 = (std::__shared_weak_count *)*((void *)a2 + 2);
    long long v80 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v81 = *((void *)a2 + 3);
    sub_216C8CED4((uint64_t)&v79, a1 + 6360, (uint64_t)&v86);
    unint64_t v14 = *(void **)(a1 + 6336);
    if (v14)
    {
      *(void *)(a1 + 6344) = v14;
      operator delete(v14);
      *(void *)(a1 + 6336) = 0;
      *(void *)(a1 + 6344) = 0;
      *(void *)(a1 + 6352) = 0;
    }
    *(_OWORD *)(a1 + 6336) = v86;
    *(void *)(a1 + 6352) = v87;
    *(void *)&long long v87 = 0;
    long long v86 = 0uLL;
    if (v80) {
      sub_216784EC4(v80);
    }
  }
  unint64_t v15 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v15) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v16 = v85;
  unint64_t v17 = atomic_load((unint64_t *)(v15 + 144));
  if (v16 >= v17
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v85, (atomic_ullong *)v15))
  {
    long long v18 = (std::__shared_weak_count *)*((void *)a2 + 2);
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v18);
    }
  }
  unint64_t v19 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v19) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v20 = v85;
  unint64_t v21 = atomic_load((unint64_t *)(v19 + 144));
  if (v20 >= v21
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v85, (atomic_ullong *)v19))
  {
    long long v76 = *a2;
    long long v22 = (std::__shared_weak_count *)*((void *)a2 + 2);
    v77 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v78 = *((void *)a2 + 3);
    sub_216C8CF64(a1, (uint64_t)&v76, v12);
    if (v77) {
      sub_216784EC4(v77);
    }
  }
  unint64_t v23 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v23) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v24 = v85;
  unint64_t v25 = atomic_load((unint64_t *)(v23 + 144));
  if (v24 >= v25
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v85, (atomic_ullong *)v23))
  {
    long long v73 = *a2;
    long long v26 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v74 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v75 = *((void *)a2 + 3);
    sub_216C8D768(a1, (uint64_t)&v73, v12);
    if (v74) {
      sub_216784EC4(v74);
    }
  }
  unint64_t v27 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v27) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v28 = v85;
  unint64_t v29 = atomic_load((unint64_t *)(v27 + 144));
  if (v28 >= v29
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v85, (atomic_ullong *)v27))
  {
    long long v70 = *a2;
    long long v30 = (std::__shared_weak_count *)*((void *)a2 + 2);
    v71 = v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v72 = *((void *)a2 + 3);
    sub_216C8D830(a1, (uint64_t)&v70, v12);
    if (v71) {
      sub_216784EC4(v71);
    }
  }
  unint64_t v31 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v31) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v32 = v85;
  unint64_t v33 = atomic_load((unint64_t *)(v31 + 144));
  if (v32 >= v33
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v85, (atomic_ullong *)v31))
  {
    long long v67 = *a2;
    long long v34 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v68 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v69 = *((void *)a2 + 3);
    sub_216C8DC1C(a1, (uint64_t)&v67, v12);
    if (v68) {
      sub_216784EC4(v68);
    }
  }
  unint64_t v35 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v35) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v36 = v85;
  unint64_t v37 = atomic_load((unint64_t *)(v35 + 144));
  if (v36 >= v37
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v85, (atomic_ullong *)v35))
  {
    long long v64 = *a2;
    long long v38 = (std::__shared_weak_count *)*((void *)a2 + 2);
    v65 = v38;
    if (v38) {
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v66 = *((void *)a2 + 3);
    sub_216C8DED8(a1, (uint64_t)&v64, v12);
    if (v65) {
      sub_216784EC4(v65);
    }
  }
  unint64_t v39 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v39) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v40 = v85;
  unint64_t v41 = atomic_load((unint64_t *)(v39 + 144));
  if (v40 >= v41
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v85, (atomic_ullong *)v39))
  {
    long long v61 = *a2;
    long long v42 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v62 = v42;
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v63 = *((void *)a2 + 3);
    sub_216C8E380(a1, (uint64_t)&v61, v12);
    if (v62) {
      sub_216784EC4(v62);
    }
  }
  unint64_t v43 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v43) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v44 = v85;
  unint64_t v45 = atomic_load((unint64_t *)(v43 + 144));
  if (v44 >= v45
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v85, (atomic_ullong *)v43))
  {
    uint64_t v46 = *(void *)(a1 + 48);
    uint64_t v47 = *(void *)(a1 + 56);
    if (v46 != v47)
    {
      uint64_t v48 = *(void *)(a1 + 48);
      while ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 3 > (unint64_t)*(unsigned int *)(v48 + 4))
      {
        v48 += 16;
        if (v48 == v47) {
          goto LABEL_77;
        }
      }
      *(void *)&long long v86 = "usd/crateFile.cpp";
      *((void *)&v86 + 1) = "operator()";
      *(void *)&long long v87 = 3551;
      *((void *)&v87 + 1) = "auto pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadStructuralSections(p"
                              "xrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrR"
                              "eserved__::Usd_CrateFile::_AssetStream>, int64_t)::(anonymous class)::operator()() const";
      LOBYTE(v88) = 0;
      v60 = (const char *)(a1 + 6512);
      if (*(char *)(a1 + 6535) < 0) {
        v60 = *(const char **)v60;
      }
      goto LABEL_103;
    }
LABEL_77:
    v49 = *(unsigned int **)(a1 + 72);
    v50 = *(unsigned int **)(a1 + 80);
    if (v49 != v50)
    {
      unint64_t v51 = (v47 - v46) >> 4;
      v52 = *(unsigned int **)(a1 + 72);
      while (1)
      {
        unint64_t v53 = *v52;
        if (v53 != -1 && v51 <= v53) {
          break;
        }
        if (++v52 == v50) {
          goto LABEL_85;
        }
      }
      *(void *)&long long v86 = "usd/crateFile.cpp";
      *((void *)&v86 + 1) = "operator()";
      *(void *)&long long v87 = 3551;
      *((void *)&v87 + 1) = "auto pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadStructuralSections(p"
                              "xrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrR"
                              "eserved__::Usd_CrateFile::_AssetStream>, int64_t)::(anonymous class)::operator()() const";
      LOBYTE(v88) = 0;
      v60 = (const char *)(a1 + 6512);
      if (*(char *)(a1 + 6535) < 0) {
        v60 = *(const char **)v60;
      }
      goto LABEL_103;
    }
LABEL_85:
    v55 = *(unsigned int **)a1;
    v56 = *(unsigned int **)(a1 + 8);
    if (*(unsigned int **)a1 != v56)
    {
      unint64_t v57 = v50 - v49;
      while ((uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3 > (unint64_t)*v55)
      {
        unint64_t v58 = v55[1];
        if (v57 <= v58 || v58 && v49[(v58 - 1)] != -1) {
          break;
        }
        int v59 = v55[2];
        if (!v59 || v59 >= 12) {
          break;
        }
        v55 += 3;
        if (v55 == v56) {
          goto LABEL_104;
        }
      }
      *(void *)&long long v86 = "usd/crateFile.cpp";
      *((void *)&v86 + 1) = "operator()";
      *(void *)&long long v87 = 3551;
      *((void *)&v87 + 1) = "auto pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadStructuralSections(p"
                              "xrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrR"
                              "eserved__::Usd_CrateFile::_AssetStream>, int64_t)::(anonymous class)::operator()() const";
      LOBYTE(v88) = 0;
      v60 = (const char *)(a1 + 6512);
      if (*(char *)(a1 + 6535) < 0) {
        v60 = *(const char **)v60;
      }
LABEL_103:
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v86, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt asset @%s@", v60);
      *(void *)(a1 + 8) = *(void *)a1;
      *(void *)(a1 + 80) = *(void *)(a1 + 72);
      *(void *)(a1 + 56) = *(void *)(a1 + 48);
    }
  }
LABEL_104:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v85);
}

void sub_216C6A028(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_216C6A0F4()
{
}

void sub_216C6A1AC()
{
}

void sub_216C6A1B8(void *a1, int a2)
{
  if (a2) {
    sub_21675DB74(a1);
  }
  JUMPOUT(0x216C6A0ECLL);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::~CrateFile(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  uint64_t v2 = (char *)this + 6480;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91610, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91610))
  {
    __cxa_atexit(MEMORY[0x263F8C118], &stru_26798C758, &dword_216758000);
    __cxa_guard_release(&qword_267B91610);
  }
  if (v2[88])
  {
    uint64_t v3 = *((void *)this + 806);
    if (v3)
    {
      uint64_t v4 = (char *)this + 6448;
      if (!*((void *)this + 820)) {
        goto LABEL_61;
      }
      unint64_t v5 = *(void *)(v3 + 24);
      unint64_t v6 = sub_216C6A5EC(v5);
      int64_t v7 = sub_216C6A5EC(v5 + *(void *)(*(void *)v4 + 32) - 1) - v6 + 1;
      long long v8 = (unsigned __int8 *)operator new[](v7);
      uint64_t v9 = sub_216C774E4();
      unsigned int v10 = sub_216C6628C();
      if (!pxrInternal__aapl__pxrReserved__::ArchQueryMappedMemoryResidency((pxrInternal__aapl__pxrReserved__ *)(v9 & v5), v7 * v10, (char *)v8, v11))
      {
        v37[0] = (void **)"usd/crateFile.cpp";
        v37[1] = (void **)"~CrateFile";
        v37[2] = (void **)2683;
        v37[3] = (void **)"pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::~CrateFile()";
        char v38 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v37, (pxrInternal__aapl__pxrReserved__ *)"failed to obtain memory residency information", v12);
        operator delete[](v8);
        goto LABEL_31;
      }
      if (v7)
      {
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        unint64_t v15 = (char *)*((void *)this + 820);
        unint64_t v16 = (char *)v8;
        int64_t v17 = v7;
        do
        {
          char v18 = *v15++;
          uint64_t v19 = *v16 & 1;
          uint64_t v20 = v18 & 1;
          v14 += v19;
          v13 += v20;
          BOOL v21 = v19 == 0;
          if (*v16) {
            char v22 = 45;
          }
          else {
            char v22 = 32;
          }
          if (v21) {
            char v23 = 33;
          }
          else {
            char v23 = 43;
          }
          if (v20) {
            char v22 = v23;
          }
          *v16++ = v22;
          --v17;
        }
        while (v17);
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v13 = 0;
      }
      std::mutex::lock(&stru_26798C758);
      unint64_t v24 = (char *)this + 6512;
      if (v2[55] < 0) {
        unint64_t v24 = *(const char **)v24;
      }
      printf(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\npage map for %s\n%lld pages, %lld used (%.1f%%), %lld in mem (%.1f%%)\nused %.1f%% of pages in mem\nlegend: '+': in mem & used,     '-': in mem & unused\n        '!': not in mem & used, ' ': not in mem & unused\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n", v24, v7, v13, (double)v13 * 100.0 / (double)v7, v14, (double)v14 * 100.0 / (double)v7, (double)v13 * 100.0 / (double)v14);
      if (v7)
      {
        int v25 = 0;
        long long v26 = v8;
        do
        {
          int v27 = *v26++;
          putchar(v27);
          if (v25 == 80)
          {
            putchar(10);
            int v25 = -1;
          }
          ++v25;
          --v7;
        }
        while (v7);
      }
      puts("\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
      std::mutex::unlock(&stru_26798C758);
      operator delete[](v8);
      if (v2[88])
      {
LABEL_61:
        if (*(void *)v4) {
          sub_216C66CB4((void ***)this + 806);
        }
      }
    }
  }
  sub_216C6A68C((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)((char *)this + 96));
  sub_216C6A704((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)((char *)this + 120));
  sub_216C6A77C((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)((char *)this + 144));
  sub_216C6A800((uint64_t *)this + 21);
  sub_216C6A85C((uint64_t)this + 216);
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_DeleteValueHandlers(this);
LABEL_31:
  unint64_t v28 = (void *)*((void *)this + 820);
  *((void *)this + 820) = 0;
  if (v28) {
    operator delete[](v28);
  }
  if (v2[79] < 0) {
    operator delete(*((void **)this + 817));
  }
  if (v2[55] < 0) {
    operator delete(*((void **)this + 814));
  }
  unint64_t v29 = (std::__shared_weak_count *)*((void *)this + 812);
  if (v29) {
    sub_216784EC4(v29);
  }
  long long v30 = (FILE *)*((void *)this + 807);
  if (v30 && *v2) {
    fclose(v30);
  }
  sub_216C77240((void ***)this + 806);
  unint64_t v31 = (void *)*((void *)this + 792);
  if (v31)
  {
    *((void *)this + 793) = v31;
    operator delete(v31);
  }
  sub_216C6B52C((uint64_t *)this + 791, 0);
  for (uint64_t i = 5832; i != 3976; i -= 32)
    sub_216C808DC((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)((char *)this + i));
  do
  {
    sub_216C808DC((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)((char *)this + i));
    i -= 32;
  }
  while (i != 2120);
  do
  {
    sub_216C808DC((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)((char *)this + i));
    i -= 32;
  }
  while (i != 264);
  v37[0] = (void **)((char *)this + 224);
  sub_216C7727C(v37);
  sub_216C80A50((uint64_t)this + 168);
  unint64_t v33 = (void *)*((void *)this + 18);
  if (v33)
  {
    *((void *)this + 19) = v33;
    operator delete(v33);
  }
  v37[0] = (void **)((char *)this + 120);
  sub_216889A04(v37);
  v37[0] = (void **)((char *)this + 96);
  sub_216981168(v37);
  long long v34 = (void *)*((void *)this + 9);
  if (v34)
  {
    *((void *)this + 10) = v34;
    operator delete(v34);
  }
  unint64_t v35 = (void *)*((void *)this + 6);
  if (v35)
  {
    *((void *)this + 7) = v35;
    operator delete(v35);
  }
  v37[0] = (void **)((char *)this + 24);
  sub_216C80960(v37);
  unint64_t v36 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v36;
    operator delete(v36);
  }
}

unint64_t sub_216C6A5EC(unint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B916B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B916B0))
  {
    qword_267B916A8 = sub_216C774E4();
    __cxa_guard_release(&qword_267B916B0);
  }
  char v2 = 0;
  unint64_t v3 = ~qword_267B916A8;
  qword_267B916A8 = ~qword_267B916A8;
  do
  {
    unint64_t v4 = v3;
    v3 >>= 1;
    ++v2;
  }
  while (v4 >= 2);
  qword_267B916A8 = v3;
  return a1 >> v2;
}

void sub_216C6A674(_Unwind_Exception *a1)
{
}

void sub_216C6A68C(pxrInternal__aapl__pxrReserved__ *a1)
{
  long long v1 = *(_OWORD *)a1;
  uint64_t v2 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  if ((pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls(a1) & 1) == 0) {
    sub_216C91204((pxrInternal__aapl__pxrReserved__ *)&v1);
  }
  unint64_t v3 = (void **)&v1;
  sub_216981168(&v3);
}

void sub_216C6A6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216981168(&a12);
  _Unwind_Resume(a1);
}

void sub_216C6A704(pxrInternal__aapl__pxrReserved__ *a1)
{
  long long v1 = *(_OWORD *)a1;
  uint64_t v2 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  if ((pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls(a1) & 1) == 0) {
    sub_216C91520((pxrInternal__aapl__pxrReserved__ *)&v1);
  }
  unint64_t v3 = (void **)&v1;
  sub_216889A04(&v3);
}

void sub_216C6A760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216889A04(&a12);
  _Unwind_Resume(a1);
}

void sub_216C6A77C(pxrInternal__aapl__pxrReserved__ *a1)
{
  *(_OWORD *)__p = *(_OWORD *)a1;
  unint64_t v3 = __p[0];
  uint64_t v5 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  char ShouldSynchronizeAsyncDestroyCalls = pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls(a1);
  uint64_t v2 = v3;
  if ((ShouldSynchronizeAsyncDestroyCalls & 1) == 0)
  {
    sub_216C9183C((pxrInternal__aapl__pxrReserved__ *)__p);
    uint64_t v2 = __p[0];
  }
  if (v2)
  {
    __p[1] = v2;
    operator delete(v2);
  }
}

void sub_216C6A7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C6A800(uint64_t *a1)
{
  long long v1 = (pxrInternal__aapl__pxrReserved__ *)sub_2168C06A4((uint64_t)v3, a1);
  if ((pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls(v1) & 1) == 0) {
    sub_216C91B50(v3);
  }
  return sub_216C80A50((uint64_t)v3);
}

void sub_216C6A848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C80A50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C6A85C(uint64_t a1)
{
  long long v1 = (pxrInternal__aapl__pxrReserved__ *)sub_216C91F08((uint64_t)v2, a1);
  if ((pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls(v1) & 1) == 0) {
    sub_216C91E50((uint64_t)v2);
  }
  unint64_t v4 = (void **)&v3;
  sub_216C7727C(&v4);
}

void sub_216C6A8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 - 24) = &a11;
  sub_216C7727C((void ***)(v11 - 24));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_DeleteValueHandlers(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 734);
  if (v2)
  {
    sub_216C7B1E0(v2 + 1, 0);
    sub_2168CAEA8(v2, 0);
    operator delete(v2);
  }
  uint64_t v3 = (uint64_t *)*((void *)this + 735);
  if (v3)
  {
    sub_216C7B2A0(v3 + 1, 0);
    sub_2168CAEA8(v3, 0);
    operator delete(v3);
  }
  unint64_t v4 = (uint64_t *)*((void *)this + 736);
  if (v4)
  {
    sub_216C7B360(v4 + 1, 0);
    sub_2168CAEA8(v4, 0);
    operator delete(v4);
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 737);
  if (v5)
  {
    sub_216C7B420(v5 + 1, 0);
    sub_2168CAEA8(v5, 0);
    operator delete(v5);
  }
  unint64_t v6 = (uint64_t *)*((void *)this + 738);
  if (v6)
  {
    sub_216C7B4E0(v6 + 1, 0);
    sub_2168CAEA8(v6, 0);
    operator delete(v6);
  }
  int64_t v7 = (uint64_t *)*((void *)this + 739);
  if (v7)
  {
    sub_216C7B5A0(v7 + 1, 0);
    sub_2168CAEA8(v7, 0);
    operator delete(v7);
  }
  long long v8 = (uint64_t *)*((void *)this + 740);
  if (v8)
  {
    sub_216C7B660(v8 + 1, 0);
    sub_2168CAEA8(v8, 0);
    operator delete(v8);
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 741);
  if (v9)
  {
    sub_216C7B720(v9 + 1, 0);
    sub_2168CAEA8(v9, 0);
    operator delete(v9);
  }
  unsigned int v10 = (uint64_t *)*((void *)this + 742);
  if (v10)
  {
    sub_216C7B7E0(v10 + 1, 0);
    sub_2168CAEA8(v10, 0);
    operator delete(v10);
  }
  uint64_t v11 = (uint64_t *)*((void *)this + 743);
  if (v11)
  {
    sub_216C7B8A0(v11 + 1, 0);
    sub_21688A830(v11, 0);
    operator delete(v11);
  }
  long long v12 = (uint64_t *)*((void *)this + 744);
  if (v12)
  {
    sub_216C7B960(v12 + 1, 0);
    sub_2168CAE68(v12, 0);
    operator delete(v12);
  }
  uint64_t v13 = (uint64_t *)*((void *)this + 745);
  if (v13)
  {
    sub_216C7BA20(v13 + 1, 0);
    sub_216C7BAE0(v13, 0);
    operator delete(v13);
  }
  uint64_t v14 = (uint64_t *)*((void *)this + 749);
  if (v14)
  {
    sub_216C7BBA0(v14 + 1, 0);
    sub_2168CAEA8(v14, 0);
    operator delete(v14);
  }
  unint64_t v15 = (uint64_t *)*((void *)this + 750);
  if (v15)
  {
    sub_216C7BC60(v15 + 1, 0);
    sub_2168CAEA8(v15, 0);
    operator delete(v15);
  }
  unint64_t v16 = (uint64_t *)*((void *)this + 751);
  if (v16)
  {
    sub_216C7BD20(v16 + 1, 0);
    sub_2168CAEA8(v16, 0);
    operator delete(v16);
  }
  int64_t v17 = (uint64_t *)*((void *)this + 752);
  if (v17)
  {
    sub_216C7BDE0(v17 + 1, 0);
    sub_2168CAEA8(v17, 0);
    operator delete(v17);
  }
  char v18 = (uint64_t *)*((void *)this + 753);
  if (v18)
  {
    sub_216C7BEA0(v18 + 1, 0);
    sub_2168CAEA8(v18, 0);
    operator delete(v18);
  }
  uint64_t v19 = (uint64_t *)*((void *)this + 754);
  if (v19)
  {
    sub_216C7BF60(v19 + 1, 0);
    sub_2168CAEA8(v19, 0);
    operator delete(v19);
  }
  uint64_t v20 = (uint64_t *)*((void *)this + 755);
  if (v20)
  {
    sub_216C7C020(v20 + 1, 0);
    sub_2168CAEA8(v20, 0);
    operator delete(v20);
  }
  BOOL v21 = (uint64_t *)*((void *)this + 756);
  if (v21)
  {
    sub_216C7C0E0(v21 + 1, 0);
    sub_2168CAEA8(v21, 0);
    operator delete(v21);
  }
  char v22 = (uint64_t *)*((void *)this + 757);
  if (v22)
  {
    sub_216C7C1A0(v22 + 1, 0);
    sub_2168CAEA8(v22, 0);
    operator delete(v22);
  }
  char v23 = (uint64_t *)*((void *)this + 758);
  if (v23)
  {
    sub_216C7C260(v23 + 1, 0);
    sub_2168CAEA8(v23, 0);
    operator delete(v23);
  }
  unint64_t v24 = (uint64_t *)*((void *)this + 759);
  if (v24)
  {
    sub_216C7C320(v24 + 1, 0);
    sub_2168CAEA8(v24, 0);
    operator delete(v24);
  }
  int v25 = (uint64_t *)*((void *)this + 760);
  if (v25)
  {
    sub_216C7C3E0(v25 + 1, 0);
    sub_2168CAEA8(v25, 0);
    operator delete(v25);
  }
  long long v26 = (uint64_t *)*((void *)this + 761);
  if (v26)
  {
    sub_216C7C4A0(v26 + 1, 0);
    sub_2168CAEA8(v26, 0);
    operator delete(v26);
  }
  int v27 = (uint64_t *)*((void *)this + 762);
  if (v27)
  {
    sub_216C7C560(v27 + 1, 0);
    sub_2168CAEA8(v27, 0);
    operator delete(v27);
  }
  unint64_t v28 = (uint64_t *)*((void *)this + 763);
  if (v28)
  {
    sub_216C7C620(v28 + 1, 0);
    sub_2168CAEA8(v28, 0);
    operator delete(v28);
  }
  unint64_t v29 = (uint64_t *)*((void *)this + 746);
  if (v29)
  {
    sub_216C7C6E0(v29 + 1, 0);
    sub_2168CAEA8(v29, 0);
    operator delete(v29);
  }
  long long v30 = (uint64_t *)*((void *)this + 747);
  if (v30)
  {
    sub_216C7C7A0(v30 + 1, 0);
    sub_2168CAEA8(v30, 0);
    operator delete(v30);
  }
  unint64_t v31 = (uint64_t *)*((void *)this + 748);
  if (v31)
  {
    sub_216C7C860(v31 + 1, 0);
    sub_2168CAEA8(v31, 0);
    operator delete(v31);
  }
  unint64_t v32 = (uint64_t *)*((void *)this + 764);
  if (v32)
  {
    sub_216C7C920(v32 + 1, 0);
    sub_216C7CA94(v32, 0);
    operator delete(v32);
  }
  unint64_t v33 = (uint64_t *)*((void *)this + 765);
  if (v33)
  {
    sub_216C7CB58(v33 + 1, 0);
    sub_216C7CD3C(v33, 0);
    operator delete(v33);
  }
  long long v34 = (uint64_t *)*((void *)this + 766);
  if (v34)
  {
    sub_216C7CE84(v34 + 1, 0);
    sub_216C7D068(v34, 0);
    operator delete(v34);
  }
  unint64_t v35 = (uint64_t *)*((void *)this + 767);
  if (v35)
  {
    sub_216C7D1B0(v35 + 1, 0);
    sub_216C7D394(v35, 0);
    operator delete(v35);
  }
  unint64_t v36 = (uint64_t *)*((void *)this + 768);
  if (v36)
  {
    sub_216C7D4DC(v36 + 1, 0);
    sub_216C7D6C0(v36, 0);
    operator delete(v36);
  }
  unint64_t v37 = (uint64_t *)*((void *)this + 769);
  if (v37)
  {
    sub_216C7D808(v37 + 1, 0);
    sub_216C7D9D8(v37, 0);
    operator delete(v37);
  }
  char v38 = (uint64_t *)*((void *)this + 770);
  if (v38)
  {
    sub_216C7DB30(v38 + 1, 0);
    sub_216C7D9D8(v38, 0);
    operator delete(v38);
  }
  unint64_t v39 = (uint64_t *)*((void *)this + 771);
  if (v39)
  {
    sub_216C7DBF0(v39 + 1, 0);
    sub_216C7D9D8(v39, 0);
    operator delete(v39);
  }
  unint64_t v40 = (uint64_t *)*((void *)this + 772);
  if (v40)
  {
    sub_216C7DCB0(v40 + 1, 0);
    sub_216C7D9D8(v40, 0);
    operator delete(v40);
  }
  unint64_t v41 = (uint64_t *)*((void *)this + 773);
  if (v41)
  {
    sub_216C7DD70(v41 + 1, 0);
    sub_216C7DEF0(v41, 0);
    operator delete(v41);
  }
  long long v42 = (uint64_t *)*((void *)this + 774);
  if (v42)
  {
    sub_216C7DFC0(v42 + 1, 0);
    sub_216C7E140(v42, 0);
    operator delete(v42);
  }
  unint64_t v43 = (uint64_t *)*((void *)this + 775);
  if (v43)
  {
    sub_216C7E210(v43 + 1, 0);
    sub_2168CAEA8(v43, 0);
    operator delete(v43);
  }
  unint64_t v44 = (uint64_t *)*((void *)this + 776);
  if (v44)
  {
    sub_216C7E2D0(v44 + 1, 0);
    sub_2168CAEA8(v44, 0);
    operator delete(v44);
  }
  unint64_t v45 = (uint64_t *)*((void *)this + 777);
  if (v45)
  {
    sub_216C7E390(v45 + 1, 0);
    sub_2168CAEA8(v45, 0);
    operator delete(v45);
  }
  uint64_t v46 = (uint64_t *)*((void *)this + 778);
  if (v46)
  {
    sub_216C7E450(v46 + 1, 0);
    sub_216C7E5C8(v46, 0);
    operator delete(v46);
  }
  uint64_t v47 = (uint64_t *)*((void *)this + 779);
  if (v47)
  {
    sub_216C7E68C(v47 + 1, 0);
    sub_216C7E818(v47, 0);
    operator delete(v47);
  }
  uint64_t v48 = (uint64_t *)*((void *)this + 780);
  if (v48)
  {
    sub_216C7E8F0(v48 + 1, 0);
    sub_216C7EA84(v48, 0);
    operator delete(v48);
  }
  v49 = (uint64_t *)*((void *)this + 781);
  if (v49)
  {
    sub_216C7EBA0(v49 + 1, 0);
    sub_216C7ED20(v49, 0);
    operator delete(v49);
  }
  v50 = (uint64_t *)*((void *)this + 782);
  if (v50)
  {
    sub_216C7ED60(v50 + 1, 0);
    sub_216C7ED20(v50, 0);
    operator delete(v50);
  }
  unint64_t v51 = (uint64_t *)*((void *)this + 783);
  if (v51)
  {
    sub_216C7EE20(v51 + 1, 0);
    sub_216C7EFA0(v51, 0);
    operator delete(v51);
  }
  v52 = (uint64_t *)*((void *)this + 784);
  if (v52)
  {
    sub_216C7F070(v52 + 1, 0);
    sub_2168CAEA8(v52, 0);
    operator delete(v52);
  }
  unint64_t v53 = (uint64_t *)*((void *)this + 785);
  if (v53)
  {
    sub_216C7F130(v53 + 1, 0);
    sub_216AE4064(v53, 0);
    operator delete(v53);
  }
  v54 = (uint64_t *)*((void *)this + 786);
  if (v54)
  {
    sub_216C7F29C(v54 + 1, 0);
    sub_216AE4064(v54, 0);
    operator delete(v54);
  }
  v55 = (uint64_t *)*((void *)this + 787);
  if (v55)
  {
    sub_216C7F35C(v55 + 1, 0);
    sub_216C7F540(v55, 0);
    operator delete(v55);
  }
  v56 = (uint64_t *)*((void *)this + 788);
  if (v56)
  {
    sub_216C7F688(v56 + 1, 0);
    sub_216C7F86C(v56, 0);
    operator delete(v56);
  }
  unint64_t v57 = (uint64_t *)*((void *)this + 789);
  if (v57)
  {
    sub_216C7F9B4(v57 + 1, 0);
    sub_2168CAEA8(v57, 0);
    operator delete(v57);
  }
  unint64_t v58 = (uint64_t *)*((void *)this + 790);
  if (v58)
  {
    sub_216C7FA74(v58 + 1, 0);
    sub_216C7FB34(v58, 0);
    operator delete(v58);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CanPackTo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 6535;
  if (*(char *)(a1 + 6535) < 0)
  {
    if (*(void *)(a1 + 6520)) {
      goto LABEL_3;
    }
    return 1;
  }
  if (!*(unsigned char *)(a1 + 6535)) {
    return 1;
  }
LABEL_3:
  if (*(char *)(a2 + 23) >= 0) {
    unint64_t v4 = (const char *)a2;
  }
  else {
    unint64_t v4 = *(const char **)a2;
  }
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::ArchOpenFile(v4, "rb");
  if (v5)
  {
    unint64_t v6 = v5;
    pxrInternal__aapl__pxrReserved__::ArchGetFileName(v5, &__s1);
    if ((v27 & 0x80u) == 0) {
      size_t v7 = v27;
    }
    else {
      size_t v7 = __n;
    }
    uint64_t v8 = *(unsigned __int8 *)(v3 + 24);
    int v9 = (char)v8;
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(a1 + 6544);
    }
    if (v7 == v8)
    {
      long long v12 = *(unsigned __int8 **)(v3 + 1);
      uint64_t v11 = (unsigned __int8 *)(v3 + 1);
      unsigned int v10 = v12;
      if (v9 >= 0) {
        uint64_t v13 = v11;
      }
      else {
        uint64_t v13 = v10;
      }
      if ((v27 & 0x80) != 0)
      {
        char v23 = __s1;
        BOOL v22 = memcmp(__s1, v13, __n) == 0;
        goto LABEL_32;
      }
      if (!v27)
      {
        BOOL v22 = 1;
        goto LABEL_34;
      }
      uint64_t v14 = v27 - 1;
      p_s1 = &__s1;
      do
      {
        int v17 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v16 = v17;
        int v19 = *v13++;
        int v18 = v19;
        BOOL v21 = v14-- != 0;
        BOOL v22 = v16 == v18;
      }
      while (v16 == v18 && v21);
    }
    else
    {
      BOOL v22 = 0;
    }
    if ((v27 & 0x80) == 0)
    {
LABEL_34:
      fclose(v6);
      return v22;
    }
    char v23 = __s1;
LABEL_32:
    operator delete(v23);
    goto LABEL_34;
  }
  return 0;
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::StartPacking(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)a1);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    uint64_t v11 = *(void *)(a2 + 16);
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAssetForWrite((uint64_t)Resolver);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  if (v14)
  {
    size_t v7 = operator new(0x2E0uLL);
    sub_216C77560((uint64_t)v7, (uint64_t)a1, &v14, (long long *)a2);
    sub_216C6B52C(a1 + 791, (uint64_t)v7);
    uint64_t v8 = (void *)*a1;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    if (v8) {
      operator delete(v8);
    }
    if (a1[15] == a1[16])
    {
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, ";-)");
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
      if (((uint64_t)__p[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
  }
  else
  {
    __p[0] = "usd/crateFile.cpp";
    __p[1] = "StartPacking";
    uint64_t v11 = 2776;
    long long v12 = "CrateFile::Packer pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::StartPacking(const string &)";
    char v13 = 0;
    if (*(char *)(a2 + 23) >= 0) {
      int v9 = (const char *)a2;
    }
    else {
      int v9 = *(const char **)a2;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Unable to open %s for write", v9);
  }
  *a3 = a1;
  if (v15) {
    sub_216784EC4(v15);
  }
}

void sub_216C6B4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unint64_t __p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if ((__p & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int v18 = *(std::__shared_weak_count **)(v16 - 40);
  if (v18) {
    sub_216784EC4(v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C6B52C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    unint64_t v4 = (void *)sub_216C92238(v3);
    operator delete(v4);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddToken(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4 = *((void *)this + 791);
  int v11 = -1;
  uint64_t v5 = sub_216BBE21C(v4, a2, (uint64_t *)a2, &v11);
  if (v6)
  {
    *((_DWORD *)v5 + 6) = (*((void *)this + 16) - *((void *)this + 15)) >> 3;
    size_t v7 = (void *)*((void *)this + 16);
    if ((unint64_t)v7 >= *((void *)this + 17))
    {
      int v9 = sub_216973984((char **)this + 15, (uint64_t *)a2);
    }
    else
    {
      uint64_t v8 = *(void *)a2;
      *size_t v7 = *(void *)a2;
      if ((v8 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v7 &= 0xFFFFFFFFFFFFFFF8;
      }
      int v9 = (char *)(v7 + 1);
    }
    *((void *)this + 16) = v9;
  }
  return *((unsigned int *)v5 + 6);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer::operator BOOL(uint64_t a1)
{
  return *(void *)a1 && *(void *)(*(void *)a1 + 6328) != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer::Close(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **this)
{
  uint64_t v2 = *this;
  if (!v2 || !*((void *)v2 + 791))
  {
    __p[0] = "usd/crateFile.cpp";
    __p[1] = "Close";
    uint64_t v32 = 2804;
    unint64_t v33 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer::Close()";
    char v34 = 0;
    uint64_t v10 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "_crate && _crate->_packCtx", 0))return v10; {
    uint64_t v2 = *this;
    }
  }
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Write(v2);
  uint64_t v3 = *(void *)(*((void *)*this + 791) + 720);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t v5 = *this;
  if (!v4)
  {
    sub_216C6B52C((uint64_t *)v5 + 791, 0);
    return 0;
  }
  std::string::operator=((std::string *)((char *)v5 + 6512), (const std::string *)(*((void *)v5 + 791) + 224));
  sub_216C6B52C((uint64_t *)*this + 791, 0);
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v6);
  uint64_t v8 = *this;
  if (*((char *)*this + 6535) < 0)
  {
    sub_216778F24(__p, *((void **)v8 + 814), *((void *)v8 + 815));
  }
  else
  {
    int v9 = (char *)v8 + 6512;
    *(_OWORD *)__p = *(_OWORD *)v9;
    uint64_t v32 = *((void *)v9 + 2);
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset((uint64_t)Resolver);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  if (!(void)v30) {
    goto LABEL_36;
  }
  if (*((unsigned char *)*this + 6504))
  {
    (*(void (**)(void **__return_ptr))(*(void *)v30 + 48))(__p);
    long long v11 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    long long v12 = (std::__shared_weak_count *)*((void *)&v30 + 1);
    long long v30 = v11;
    if (v12)
    {
      sub_216784EC4(v12);
      if (__p[1]) {
        sub_216784EC4((std::__shared_weak_count *)__p[1]);
      }
      if (!(void)v30) {
        goto LABEL_36;
      }
    }
    else if (!(void)v11)
    {
      goto LABEL_36;
    }
  }
  char v13 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_USE_ASSET);
  if (!v13) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  if (*v13 || (int v17 = (FILE *)(*(uint64_t (**)(void))(*(void *)v30 + 40))(v30), (v19 = v17) == 0))
  {
    sub_216C66CB4((void ***)*this + 806);
    uint64_t v14 = *this;
    uint64_t v15 = (uint64_t)*this + 6456;
    *((void *)*this + 809) = 0;
    *(unsigned char *)(v15 + 24) = 0;
    *(_OWORD *)uint64_t v15 = 0u;
    if (*((void *)&v30 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)v14 + 811) = v30;
    uint64_t v16 = (std::__shared_weak_count *)*((void *)v14 + 812);
    *((void *)v14 + 812) = *((void *)&v30 + 1);
    if (v16) {
      sub_216784EC4(v16);
    }
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_InitAsset(*this);
    goto LABEL_25;
  }
  uint64_t v20 = v18;
  pxrInternal__aapl__pxrReserved__::ArchGetFileName(v17, __p);
  uint64_t v21 = (uint64_t)*this + 6536;
  if (*((char *)*this + 6559) < 0) {
    operator delete(*(void **)v21);
  }
  *(_OWORD *)uint64_t v21 = *(_OWORD *)__p;
  *(void *)(v21 + 16) = v32;
  if (!*((unsigned char *)*this + 6568))
  {
    uint64_t v26 = (*(uint64_t (**)(void))(*(void *)v30 + 16))(v30);
    if (v26 == -1) {
      uint64_t v26 = pxrInternal__aapl__pxrReserved__::ArchGetFileLength(v19, v27) - v20;
    }
    unint64_t v28 = *this;
    *((void *)v28 + 807) = v19;
    *((void *)v28 + 808) = v20;
    *((void *)v28 + 809) = v26;
    *((unsigned char *)v28 + 6480) = 0;
    if (*((void *)&v30 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)v28 + 811) = v30;
    unint64_t v29 = (std::__shared_weak_count *)*((void *)v28 + 812);
    *((void *)v28 + 812) = *((void *)&v30 + 1);
    if (v29) {
      sub_216784EC4(v29);
    }
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_InitPread(*this);
    goto LABEL_25;
  }
  BOOL v22 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)((char *)*this + 6512);
  if (*((char *)*this + 6535) < 0) {
    BOOL v22 = *(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)v22;
  }
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_MmapFile(v22, (const char *)v19, (atomic_ullong **)__p);
  sub_216C6C438((void **)*this + 806, __p);
  sub_216C77240((void ***)__p);
  char v23 = *this;
  if (*((void *)*this + 806))
  {
    unint64_t v24 = (std::__shared_weak_count *)*((void *)v23 + 812);
    *(_OWORD *)((char *)v23 + 6488) = 0u;
    if (v24) {
      sub_216784EC4(v24);
    }
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_InitMMap(*this);
LABEL_25:
    uint64_t v10 = 1;
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v10 = 0;
LABEL_37:
  if (*((void *)&v30 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v30 + 1));
  }
  return v10;
}

void sub_216C6BA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Write(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddDeferredSpecs(this);
  uint64_t v2 = (void *)*((void *)this + 791);
  uint64_t v3 = v2 + 32;
  v113 = this;
  v114 = v2 + 32;
  __p = 0;
  v111 = 0;
  unint64_t v112 = 0;
  uint64_t v4 = v2[25];
  uint64_t v5 = v2[26];
  if (v4 == v5)
  {
    int v9 = 0;
    unint64_t v21 = 0;
    uint64_t v22 = *v3;
  }
  else
  {
    do
    {
      char v6 = (const char *)v4;
      if (*(char *)(v4 + 23) < 0) {
        char v6 = *(const char **)v4;
      }
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__src, v6, *v114, *(void *)(v4 + 32));
      sub_216C6D370((uint64_t)&v113, *(char **)(v4 + 24), *(int64_t *)&__src[24]);
      size_t v7 = v111;
      if ((unint64_t)v111 >= v112)
      {
        uint64_t v10 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p;
        int64_t v11 = (v111 - (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p) >> 5;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 59) {
          sub_21677CB10();
        }
        uint64_t v13 = v112 - (void)__p;
        if ((uint64_t)(v112 - (void)__p) >> 4 > v12) {
          unint64_t v12 = v13 >> 4;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_2168707F4((uint64_t)&v112, v14);
          uint64_t v10 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p;
          size_t v7 = v111;
        }
        else
        {
          uint64_t v15 = 0;
        }
        long long v16 = *(_OWORD *)&__src[16];
        int v17 = &v15[32 * v11];
        *(_OWORD *)int v17 = *(_OWORD *)__src;
        *((_OWORD *)v17 + 1) = v16;
        if (v7 == v10)
        {
          uint64_t v20 = &v15[32 * v11];
        }
        else
        {
          uint64_t v18 = &v15[32 * v11];
          do
          {
            long long v19 = *((_OWORD *)v7 - 1);
            uint64_t v20 = v18 - 32;
            *((_OWORD *)v18 - 2) = *((_OWORD *)v7 - 2);
            *((_OWORD *)v18 - 1) = v19;
            size_t v7 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v7 - 32);
            v18 -= 32;
          }
          while (v7 != v10);
        }
        int v9 = v17 + 32;
        __p = v20;
        v111 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)(v17 + 32);
        unint64_t v112 = (unint64_t)&v15[32 * v14];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        long long v8 = *(_OWORD *)&__src[16];
        *(_OWORD *)v111 = *(_OWORD *)__src;
        *((_OWORD *)v7 + 1) = v8;
        int v9 = (_OWORD *)((char *)v7 + 32);
      }
      v111 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)v9;
      v4 += 40;
    }
    while (v4 != v5);
    unint64_t v21 = v112;
    uint64_t v22 = *v114;
    if ((unint64_t)v9 < v112)
    {
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)v9, "TOKENS", *v114, 0);
      char v23 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)(v9 + 2);
      v111 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)(v9 + 2);
      goto LABEL_40;
    }
  }
  uint64_t v24 = ((char *)v9 - (unsigned char *)__p) >> 5;
  if ((unint64_t)(v24 + 1) >> 59) {
    goto LABEL_129;
  }
  uint64_t v25 = v21 - (void)__p;
  uint64_t v26 = v25 >> 4;
  if (v25 >> 4 <= (unint64_t)(v24 + 1)) {
    uint64_t v26 = v24 + 1;
  }
  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v27 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    unint64_t v28 = (char *)sub_2168707F4((uint64_t)&v112, v27);
    uint64_t v30 = v29;
  }
  else
  {
    unint64_t v28 = 0;
    uint64_t v30 = 0;
  }
  unint64_t v31 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)&v28[32 * v24], "TOKENS", v22, 0);
  char v23 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v31 + 32);
  unint64_t v33 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p;
  uint64_t v32 = v111;
  if (v111 != __p)
  {
    do
    {
      long long v34 = *((_OWORD *)v32 - 1);
      *((_OWORD *)v31 - 2) = *((_OWORD *)v32 - 2);
      *((_OWORD *)v31 - 1) = v34;
      unint64_t v31 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v31 - 32);
      uint64_t v32 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v32 - 32);
    }
    while (v32 != v33);
    uint64_t v32 = v33;
  }
  __p = v31;
  v111 = v23;
  unint64_t v112 = (unint64_t)&v28[32 * v30];
  if (v32) {
    operator delete(v32);
  }
LABEL_40:
  v111 = v23;
  sub_216C92D48(this, (uint64_t)&v113);
  uint64_t v35 = *v114;
  unint64_t v36 = v111;
  *((void *)v111 - 1) = *v114 - *((void *)v111 - 2);
  if ((unint64_t)v36 >= v112)
  {
    uint64_t v38 = (v36 - (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p) >> 5;
    if ((unint64_t)(v38 + 1) >> 59) {
      goto LABEL_129;
    }
    unint64_t v39 = (uint64_t)(v112 - (void)__p) >> 4;
    if (v39 <= v38 + 1) {
      unint64_t v39 = v38 + 1;
    }
    if (v112 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v40 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v40 = v39;
    }
    if (v40)
    {
      unint64_t v41 = (char *)sub_2168707F4((uint64_t)&v112, v40);
      uint64_t v43 = v42;
    }
    else
    {
      unint64_t v41 = 0;
      uint64_t v43 = 0;
    }
    unint64_t v44 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)&v41[32 * v38], "STRINGS", v35, 0);
    unint64_t v37 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v44 + 32);
    uint64_t v46 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p;
    unint64_t v45 = v111;
    if (v111 != __p)
    {
      do
      {
        long long v47 = *((_OWORD *)v45 - 1);
        *((_OWORD *)v44 - 2) = *((_OWORD *)v45 - 2);
        *((_OWORD *)v44 - 1) = v47;
        unint64_t v44 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v44 - 32);
        unint64_t v45 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v45 - 32);
      }
      while (v45 != v46);
      unint64_t v45 = v46;
    }
    __p = v44;
    v111 = v37;
    unint64_t v112 = (unint64_t)&v41[32 * v43];
    if (v45) {
      operator delete(v45);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section(v36, "STRINGS", v35, 0);
    unint64_t v37 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v36 + 32);
    v111 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v36 + 32);
  }
  v111 = v37;
  sub_216C6E920((uint64_t)&v113, (uint64_t)this + 144);
  uint64_t v48 = *v114;
  v49 = v111;
  *((void *)v111 - 1) = *v114 - *((void *)v111 - 2);
  if ((unint64_t)v49 >= v112)
  {
    uint64_t v51 = (v49 - (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p) >> 5;
    if ((unint64_t)(v51 + 1) >> 59) {
      goto LABEL_129;
    }
    unint64_t v52 = (uint64_t)(v112 - (void)__p) >> 4;
    if (v52 <= v51 + 1) {
      unint64_t v52 = v51 + 1;
    }
    if (v112 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v53 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v53 = v52;
    }
    if (v53)
    {
      v54 = (char *)sub_2168707F4((uint64_t)&v112, v53);
      uint64_t v56 = v55;
    }
    else
    {
      v54 = 0;
      uint64_t v56 = 0;
    }
    unint64_t v57 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)&v54[32 * v51], "FIELDS", v48, 0);
    v50 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v57 + 32);
    int v59 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p;
    unint64_t v58 = v111;
    if (v111 != __p)
    {
      do
      {
        long long v60 = *((_OWORD *)v58 - 1);
        *((_OWORD *)v57 - 2) = *((_OWORD *)v58 - 2);
        *((_OWORD *)v57 - 1) = v60;
        unint64_t v57 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v57 - 32);
        unint64_t v58 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v58 - 32);
      }
      while (v58 != v59);
      unint64_t v58 = v59;
    }
    __p = v57;
    v111 = v50;
    unint64_t v112 = (unint64_t)&v54[32 * v56];
    if (v58) {
      operator delete(v58);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section(v49, "FIELDS", v48, 0);
    v50 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v49 + 32);
    v111 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v49 + 32);
  }
  v111 = v50;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_WriteFields(this, (uint64_t)&v113);
  uint64_t v61 = *v114;
  uint64_t v62 = v111;
  *((void *)v111 - 1) = *v114 - *((void *)v111 - 2);
  if ((unint64_t)v62 >= v112)
  {
    uint64_t v64 = (v62 - (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p) >> 5;
    if ((unint64_t)(v64 + 1) >> 59) {
      goto LABEL_129;
    }
    unint64_t v65 = (uint64_t)(v112 - (void)__p) >> 4;
    if (v65 <= v64 + 1) {
      unint64_t v65 = v64 + 1;
    }
    if (v112 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v66 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v66 = v65;
    }
    if (v66)
    {
      long long v67 = (char *)sub_2168707F4((uint64_t)&v112, v66);
      uint64_t v69 = v68;
    }
    else
    {
      long long v67 = 0;
      uint64_t v69 = 0;
    }
    long long v70 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)&v67[32 * v64], "FIELDSETS", v61, 0);
    uint64_t v63 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v70 + 32);
    uint64_t v72 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p;
    v71 = v111;
    if (v111 != __p)
    {
      do
      {
        long long v73 = *((_OWORD *)v71 - 1);
        *((_OWORD *)v70 - 2) = *((_OWORD *)v71 - 2);
        *((_OWORD *)v70 - 1) = v73;
        long long v70 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v70 - 32);
        v71 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v71 - 32);
      }
      while (v71 != v72);
      v71 = v72;
    }
    __p = v70;
    v111 = v63;
    unint64_t v112 = (unint64_t)&v67[32 * v69];
    if (v71) {
      operator delete(v71);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section(v62, "FIELDSETS", v61, 0);
    uint64_t v63 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v62 + 32);
    v111 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v62 + 32);
  }
  v111 = v63;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_WriteFieldSets(this, (uint64_t)&v113);
  uint64_t v74 = *v114;
  uint64_t v75 = v111;
  *((void *)v111 - 1) = *v114 - *((void *)v111 - 2);
  if ((unint64_t)v75 >= v112)
  {
    uint64_t v77 = (v75 - (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p) >> 5;
    if ((unint64_t)(v77 + 1) >> 59) {
      goto LABEL_129;
    }
    unint64_t v78 = (uint64_t)(v112 - (void)__p) >> 4;
    if (v78 <= v77 + 1) {
      unint64_t v78 = v77 + 1;
    }
    if (v112 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v79 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v79 = v78;
    }
    if (v79)
    {
      long long v80 = (char *)sub_2168707F4((uint64_t)&v112, v79);
      uint64_t v82 = v81;
    }
    else
    {
      long long v80 = 0;
      uint64_t v82 = 0;
    }
    long long v83 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)&v80[32 * v77], "PATHS", v74, 0);
    long long v76 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v83 + 32);
    unint64_t v85 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p;
    uint64_t v84 = v111;
    if (v111 != __p)
    {
      do
      {
        long long v86 = *((_OWORD *)v84 - 1);
        *((_OWORD *)v83 - 2) = *((_OWORD *)v84 - 2);
        *((_OWORD *)v83 - 1) = v86;
        long long v83 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v83 - 32);
        uint64_t v84 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v84 - 32);
      }
      while (v84 != v85);
      uint64_t v84 = v85;
    }
    __p = v83;
    v111 = v76;
    unint64_t v112 = (unint64_t)&v80[32 * v82];
    if (v84) {
      operator delete(v84);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section(v75, "PATHS", v74, 0);
    long long v76 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v75 + 32);
    v111 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v75 + 32);
  }
  v111 = v76;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_WritePaths(this, (uint64_t)&v113);
  uint64_t v87 = *v114;
  long long v88 = v111;
  *((void *)v111 - 1) = *v114 - *((void *)v111 - 2);
  if ((unint64_t)v88 < v112)
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section(v88, "SPECS", v87, 0);
    long long v89 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v88 + 32);
    v111 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v88 + 32);
    goto LABEL_120;
  }
  uint64_t v90 = (v88 - (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p) >> 5;
  if ((unint64_t)(v90 + 1) >> 59) {
LABEL_129:
  }
    sub_21677CB10();
  unint64_t v91 = (uint64_t)(v112 - (void)__p) >> 4;
  if (v91 <= v90 + 1) {
    unint64_t v91 = v90 + 1;
  }
  if (v112 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v92 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v92 = v91;
  }
  if (v92)
  {
    v93 = (char *)sub_2168707F4((uint64_t)&v112, v92);
    uint64_t v95 = v94;
  }
  else
  {
    v93 = 0;
    uint64_t v95 = 0;
  }
  v96 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)&v93[32 * v90], "SPECS", v87, 0);
  v97 = &v93[32 * v95];
  long long v89 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v96 + 32);
  v99 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p;
  v98 = v111;
  if (v111 != __p)
  {
    do
    {
      long long v100 = *((_OWORD *)v98 - 1);
      *((_OWORD *)v96 - 2) = *((_OWORD *)v98 - 2);
      *((_OWORD *)v96 - 1) = v100;
      v96 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v96 - 32);
      v98 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)((char *)v98 - 32);
    }
    while (v98 != v99);
    v98 = v99;
  }
  __p = v96;
  v111 = v89;
  unint64_t v112 = (unint64_t)v97;
  if (v98) {
    operator delete(v98);
  }
LABEL_120:
  v111 = v89;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_WriteSpecs((uint64_t **)this, (uint64_t)&v113);
  uint64_t v101 = *v114;
  *((void *)v89 - 1) = *v114 - *((void *)v89 - 2);
  uint64_t v102 = *((void *)this + 791);
  memset(&__src[8], 0, 80);
  *(void *)__src = 0x434453552D525850;
  __src[8] = *(unsigned char *)(v102 + 248);
  *(_WORD *)&__src[9] = *(_WORD *)(v102 + 249);
  *(void *)&__src[16] = v101;
  sub_216C7AFD4((uint64_t)&v113, (uint64_t)&__p);
  v103 = v114;
  v105 = v114 + 2;
  uint64_t v104 = v114[2];
  if (v104 > 0 || v114[4] + v104 < 0)
  {
    sub_216C7A9E4((BOOL)v114);
    uint64_t *v103 = 0;
    v103 = v105;
  }
  uint64_t *v103 = 0;
  sub_216C6D464((uint64_t)&v113, __src);
  v106 = v114;
  sub_216C7A9E4((BOOL)v114);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(v106 + 11));
  if ((void **)((char *)this + 6336) != &__p) {
    sub_216C7B0D4((char *)this + 6336, (char *)__p, (uint64_t)v111, (v111 - (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p) >> 5);
  }
  *((void *)this + 805) = *(void *)&__src[80];
  long long v107 = *(_OWORD *)&__src[48];
  *(_OWORD *)((char *)this + 6392) = *(_OWORD *)&__src[32];
  *(_OWORD *)((char *)this + 6408) = v107;
  *(_OWORD *)((char *)this + 6424) = *(_OWORD *)&__src[64];
  long long v108 = *(_OWORD *)&__src[16];
  *(_OWORD *)((char *)this + 6360) = *(_OWORD *)__src;
  *(_OWORD *)((char *)this + 6376) = v108;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ClearValueHandlerDedupTables(this);
  if (__p)
  {
    v111 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *)__p;
    operator delete(__p);
  }
  return 1;
}

void sub_216C6C3BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **sub_216C6C438(void **a1, void **a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *a2;
    *a2 = 0;
    size_t v7 = *a1;
    *a1 = v4;
    sub_216C771E4(&v7, a2);
    size_t v7 = *a2;
    *a2 = 0;
    sub_216C771E4(&v7, v5);
  }
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer::Packer(void *result, void *a2)
{
  *double result = *a2;
  *a2 = 0;
  return result;
}

{
  *double result = *a2;
  *a2 = 0;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer::operator=(void *result, void *a2)
{
  *double result = *a2;
  *a2 = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer::~Packer(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer *this)
{
  if (*(void *)this) {
    sub_216C6B52C((uint64_t *)(*(void *)this + 6328), 0);
  }
}

{
  if (*(void *)this) {
    sub_216C6B52C((uint64_t *)(*(void *)this + 6328), 0);
  }
}

void *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::GetSectionsNameStartSize@<X0>(void *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = (void *)this[792];
  uint64_t v4 = (void *)this[793];
  if (v3 != v4)
  {
    uint64_t v5 = 0;
    char v6 = v3 + 3;
    do
    {
      size_t v7 = (char *)(v6 - 3);
      if ((unint64_t)v5 >= a2[2])
      {
        this = (void *)sub_216C922E4(a2, v7, v6 - 1, v6);
        uint64_t v5 = this;
      }
      else
      {
        this = sub_216779094(v5, v7);
        v5[3] = *(v6 - 1);
        v5[4] = *v6;
        v5 += 5;
        a2[1] = (uint64_t)v5;
      }
      a2[1] = (uint64_t)v5;
      long long v8 = v6 + 1;
      v6 += 4;
    }
    while (v8 != v4);
  }
  return this;
}

void sub_216C6C5F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216886328((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddDeferredSpecs(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  uint64_t v113 = *MEMORY[0x263EF8340];
  sub_216C92574((uint64_t)&v105, 0, 0.0, 0.5);
  uint64_t v2 = *((void *)this + 3);
  uint64_t v102 = this;
  uint64_t v98 = *((void *)this + 4);
  if (v2 != v98)
  {
    do
    {
      uint64_t v3 = *(void *)(v2 + 56);
      uint64_t v4 = *(void *)(v2 + 64);
      uint64_t v100 = v2;
      while (v3 != v4)
      {
        uint64_t v5 = *(void *)(v3 + 24);
        if (*(void *)(v3 + 32) != v5)
        {
          uint64_t v6 = 0;
          do
          {
            if ((sub_216C636CC((pxrInternal__aapl__pxrReserved__::VtValue *)(v5 + 16 * v6)) & 1) == 0)
            {
              __p = (void *)(**(void **)(v3 + 16) + 8 * v6);
              size_t v7 = sub_216C927A8(&v105, (double *)__p, (uint64_t)&unk_2174BFD90, (uint64_t **)&__p);
              uint64_t v8 = *(void *)(v3 + 24) + 16 * v6;
              int v9 = (uint64_t *)*((void *)v7 + 3);
              unint64_t v10 = *((void *)v7 + 4);
              if ((unint64_t)v9 >= v10)
              {
                uint64_t v12 = *((void *)v7 + 2);
                uint64_t v13 = ((uint64_t)v9 - v12) >> 3;
                if ((unint64_t)(v13 + 1) >> 61) {
                  sub_21677CB10();
                }
                uint64_t v14 = v10 - v12;
                uint64_t v15 = v14 >> 2;
                if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
                  uint64_t v15 = v13 + 1;
                }
                if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v16 = v15;
                }
                if (v16) {
                  int v17 = (char *)sub_21677CB28((uint64_t)(v7 + 16), v16);
                }
                else {
                  int v17 = 0;
                }
                uint64_t v18 = (uint64_t *)&v17[8 * v13];
                uint64_t *v18 = v8;
                int64_t v11 = v18 + 1;
                uint64_t v20 = (char *)*((void *)v7 + 2);
                long long v19 = (char *)*((void *)v7 + 3);
                if (v19 != v20)
                {
                  do
                  {
                    uint64_t v21 = *((void *)v19 - 1);
                    v19 -= 8;
                    *--uint64_t v18 = v21;
                  }
                  while (v19 != v20);
                  long long v19 = (char *)*((void *)v7 + 2);
                }
                *((void *)v7 + 2) = v18;
                *((void *)v7 + 3) = v11;
                *((void *)v7 + 4) = &v17[8 * v16];
                if (v19) {
                  operator delete(v19);
                }
              }
              else
              {
                uint64_t *v9 = v8;
                int64_t v11 = v9 + 1;
              }
              *((void *)v7 + 3) = v11;
            }
            ++v6;
            uint64_t v5 = *(void *)(v3 + 24);
          }
          while (v6 != (*(void *)(v3 + 32) - v5) >> 4);
        }
        v3 += 56;
      }
      uint64_t v2 = v100 + 80;
    }
    while (v100 + 80 != v98);
  }
  sub_21678275C(&__p, v109);
  uint64_t v22 = 0;
  if (v108)
  {
    char v23 = v107;
    uint64_t v24 = v102;
    while (1)
    {
      int v25 = *v23;
      v23 += 20;
      if (v25 != -1) {
        break;
      }
      if (v108 == ++v22) {
        goto LABEL_39;
      }
    }
  }
  else
  {
    uint64_t v24 = v102;
  }
  if (v22 != v108)
  {
    uint64_t v26 = &v107[20 * v108];
    unint64_t v27 = &v107[20 * v22];
    unint64_t v28 = __p;
    do
    {
      *unint64_t v28 = *((void *)v27 + 1);
      uint64_t v29 = v27 + 20;
      do
      {
        unint64_t v27 = v29;
        if (*((unsigned char *)v29 - 38)) {
          break;
        }
        v29 += 20;
      }
      while (*v27 == -1);
      ++v28;
    }
    while (v27 != v26);
  }
LABEL_39:
  std::__sort<std::__less<double,double> &,double *>();
  uint64_t v30 = (double *)__p;
  unint64_t v31 = v104;
  if (__p != v104)
  {
    do
    {
      double v32 = *v30;
      if (*v30 == 0.0) {
        double v33 = 0.0;
      }
      else {
        double v33 = *v30;
      }
      uint64_t v34 = *(void *)&v33 & v105;
      uint64_t v35 = &v107[20 * v34];
      if ((*v35 & 0x80000000) == 0)
      {
        if (*(double *)&v107[20 * v34 + 4] == v32) {
          goto LABEL_50;
        }
        LOWORD(v36) = 0;
        while (1)
        {
          int v36 = (__int16)(v36 + 1);
          uint64_t v34 = (v34 + 1) & v105;
          uint64_t v35 = &v107[20 * v34];
          if (v36 > *v35) {
            break;
          }
          if (*(double *)&v107[20 * v34 + 4] == v32) {
            goto LABEL_50;
          }
        }
      }
      uint64_t v35 = &v107[20 * v108];
LABEL_50:
      unint64_t v37 = (const pxrInternal__aapl__pxrReserved__::VtValue **)*((void *)v35 + 2);
      uint64_t v38 = (const pxrInternal__aapl__pxrReserved__::VtValue **)*((void *)v35 + 3);
      while (v37 != v38)
      {
        unint64_t v39 = *v37;
        uint64_t v40 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_PackValue(v24, *v37);
        uint64_t v41 = *((void *)v39 + 1);
        if (v41) {
          BOOL v42 = (*((void *)v39 + 1) & 3) == 3;
        }
        else {
          BOOL v42 = 1;
        }
        if (!v42) {
          (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v41 & 0xFFFFFFFFFFFFFFF8) + 32))(v39);
        }
        *(void *)unint64_t v39 = v40;
        *((void *)v39 + 1) = (char *)&off_26C75EC70 + 3;
        ++v37;
      }
      ++v30;
    }
    while (v30 != v31);
  }
  unint64_t v43 = *((void *)v24 + 3);
  uint64_t v101 = *((void *)v24 + 4);
  if (v43 == v101)
  {
    int64x2_t v97 = vdupq_n_s64(v43);
  }
  else
  {
    uint64_t v99 = (uint64_t)v24 + 16;
    do
    {
      uint64_t v44 = *(void *)(v43 + 32);
      uint64_t v45 = *(void *)(v43 + 40);
      if (v44 != v45)
      {
        uint64_t v46 = (char **)(v43 + 8);
        do
        {
          int v47 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddField((char **)v102, v44);
          int v48 = v47;
          v50 = *(_DWORD **)(v43 + 16);
          unint64_t v49 = *(void *)(v43 + 24);
          if ((unint64_t)v50 >= v49)
          {
            uint64_t v52 = ((char *)v50 - *v46) >> 2;
            if ((unint64_t)(v52 + 1) >> 62) {
              sub_21677CB10();
            }
            uint64_t v53 = v49 - (void)*v46;
            uint64_t v54 = v53 >> 1;
            if (v53 >> 1 <= (unint64_t)(v52 + 1)) {
              uint64_t v54 = v52 + 1;
            }
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v55 = v54;
            }
            if (v55) {
              uint64_t v56 = (char *)sub_21677EA28(v43 + 24, v55);
            }
            else {
              uint64_t v56 = 0;
            }
            unint64_t v57 = &v56[4 * v52];
            *(_DWORD *)unint64_t v57 = v48;
            uint64_t v51 = v57 + 4;
            int v59 = *(char **)(v43 + 8);
            unint64_t v58 = *(char **)(v43 + 16);
            if (v58 != v59)
            {
              do
              {
                int v60 = *((_DWORD *)v58 - 1);
                v58 -= 4;
                *((_DWORD *)v57 - 1) = v60;
                v57 -= 4;
              }
              while (v58 != v59);
              unint64_t v58 = *v46;
            }
            *(void *)(v43 + 8) = v57;
            *(void *)(v43 + 16) = v51;
            *(void *)(v43 + 24) = &v56[4 * v55];
            if (v58) {
              operator delete(v58);
            }
          }
          else
          {
            _DWORD *v50 = v47;
            uint64_t v51 = v50 + 1;
          }
          *(void *)(v43 + 16) = v51;
          v44 += 24;
        }
        while (v44 != v45);
      }
      uint64_t v61 = *(uint64_t **)(v43 + 56);
      uint64_t v62 = *(uint64_t **)(v43 + 64);
      if (v61 != v62)
      {
        uint64_t v63 = (char **)(v43 + 8);
        do
        {
          sub_216C64130(v61 + 1, (pxrInternal__aapl__pxrReserved__::VtValue *)v110);
          sub_216A94360(v111.i64, v61, v110);
          int v64 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddField((char **)v102, (uint64_t)&v111);
          int v65 = v64;
          long long v67 = *(_DWORD **)(v43 + 16);
          unint64_t v66 = *(void *)(v43 + 24);
          if ((unint64_t)v67 >= v66)
          {
            uint64_t v69 = ((char *)v67 - *v63) >> 2;
            if ((unint64_t)(v69 + 1) >> 62) {
              sub_21677CB10();
            }
            uint64_t v70 = v66 - (void)*v63;
            uint64_t v71 = v70 >> 1;
            if (v70 >> 1 <= (unint64_t)(v69 + 1)) {
              uint64_t v71 = v69 + 1;
            }
            if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v72 = v71;
            }
            if (v72) {
              long long v73 = (char *)sub_21677EA28(v43 + 24, v72);
            }
            else {
              long long v73 = 0;
            }
            uint64_t v74 = &v73[4 * v69];
            *(_DWORD *)uint64_t v74 = v65;
            uint64_t v68 = v74 + 4;
            long long v76 = *(char **)(v43 + 8);
            uint64_t v75 = *(char **)(v43 + 16);
            if (v75 != v76)
            {
              do
              {
                int v77 = *((_DWORD *)v75 - 1);
                v75 -= 4;
                *((_DWORD *)v74 - 1) = v77;
                v74 -= 4;
              }
              while (v75 != v76);
              uint64_t v75 = *v63;
            }
            *(void *)(v43 + 8) = v74;
            *(void *)(v43 + 16) = v68;
            *(void *)(v43 + 24) = &v73[4 * v72];
            if (v75) {
              operator delete(v75);
            }
          }
          else
          {
            *long long v67 = v64;
            uint64_t v68 = v67 + 1;
          }
          *(void *)(v43 + 16) = v68;
          sub_2168EE084((uint64_t)&v111.i64[1]);
          if ((v111.i8[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v111.i64[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          sub_2168EE084((uint64_t)v110);
          v61 += 7;
        }
        while (v61 != v62);
      }
      uint64_t v24 = v102;
      int v78 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddFieldSet(v102, (char **)(v43 + 8));
      int v79 = v78;
      long long v80 = (_DWORD *)*((void *)v102 + 1);
      unint64_t v81 = *((void *)v102 + 2);
      if ((unint64_t)v80 >= v81)
      {
        unint64_t v84 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v80 - *(void *)v102) >> 2);
        unint64_t v85 = v84 + 1;
        if (v84 + 1 > 0x1555555555555555) {
          sub_21677CB10();
        }
        unint64_t v86 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - *(void *)v102) >> 2);
        if (2 * v86 > v85) {
          unint64_t v85 = 2 * v86;
        }
        if (v86 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v87 = 0x1555555555555555;
        }
        else {
          unint64_t v87 = v85;
        }
        long long v88 = (char *)sub_216B0D05C(v99, v87);
        uint64_t v90 = &v88[12 * v84];
        int v91 = *(_DWORD *)(v43 + 4);
        *(_DWORD *)uint64_t v90 = *(_DWORD *)v43;
        *((_DWORD *)v90 + 1) = v79;
        *((_DWORD *)v90 + 2) = v91;
        v93 = *(char **)v102;
        unint64_t v92 = (char *)*((void *)v102 + 1);
        uint64_t v94 = v90;
        if (v92 != *(char **)v102)
        {
          do
          {
            uint64_t v95 = *(void *)(v92 - 12);
            v92 -= 12;
            int v96 = *((_DWORD *)v92 + 2);
            *(void *)(v94 - 12) = v95;
            v94 -= 12;
            *((_DWORD *)v94 + 2) = v96;
          }
          while (v92 != v93);
          unint64_t v92 = *(char **)v102;
        }
        long long v83 = v90 + 12;
        *(void *)uint64_t v102 = v94;
        *((void *)v102 + 1) = v90 + 12;
        *((void *)v102 + 2) = &v88[12 * v89];
        if (v92) {
          operator delete(v92);
        }
      }
      else
      {
        int v82 = *(_DWORD *)(v43 + 4);
        *long long v80 = *(_DWORD *)v43;
        v80[1] = v78;
        v80[2] = v82;
        long long v83 = v80 + 3;
      }
      *((void *)v102 + 1) = v83;
      v43 += 80;
    }
    while (v43 != v101);
    int64x2_t v97 = *(int64x2_t *)((char *)v102 + 24);
  }
  int64x2_t v111 = v97;
  *((void *)v24 + 3) = 0;
  *((void *)v24 + 4) = 0;
  uint64_t v112 = *((void *)v24 + 5);
  *((void *)v24 + 5) = 0;
  v110[0] = (void **)&v111;
  sub_216C80960(v110);
  if (__p)
  {
    uint64_t v104 = (double *)__p;
    operator delete(__p);
  }
  v111.i64[0] = (uint64_t)&v106;
  sub_216C7AEC0((void ***)&v111);
}

void sub_216C6CD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v25 - 128) = &a16;
  sub_216C7AEC0((void ***)(v25 - 128));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_PackValue(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (sub_216C636CC(a2))
  {
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    uint64_t v5 = *(void *)v2;
    if ((*(void *)v2 & 0xFF000000000000) == 0x2F000000000000
      && ((*((unsigned __int8 *)this + 6368) << 16) | (*((unsigned __int8 *)this + 6369) << 8)) <= 0x7FFu
      && ((*(unsigned __int8 *)(*((void *)this + 791) + 248) << 16) | (*(unsigned __int8 *)(*((void *)this + 791)
                                                                                              + 249) << 8)) >= 0x800u)
    {
      char v23 = 0;
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_UnpackValue((uint64_t)this, v5, (uint64_t)&__p);
      uint64_t v5 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_PackValue(this, (const pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
      sub_2168EE084((uint64_t)&__p);
    }
  }
  else if (!sub_216C63758(v2) {
         || ((uint64_t v6 = *((void *)v2 + 1), (v6 & 4) != 0)
  }
           ? (size_t v7 = (uint64_t *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(v2))
           : (size_t v7 = *(uint64_t **)v2),
             (uint64_t v5 = *v7) == 0))
  {
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(v2)) {
      uint64_t ElementTypeid = pxrInternal__aapl__pxrReserved__::VtValue::GetElementTypeid(v2);
    }
    else {
      uint64_t ElementTypeid = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(v2);
    }
    uint64_t v9 = ElementTypeid;
    sub_216779094(&__p, (char *)(*(void *)(ElementTypeid + 8) & 0x7FFFFFFFFFFFFFFFLL));
    unint64_t v10 = sub_216891D24((uint64_t)v20, (uint64_t)&__p);
    uint64_t v11 = sub_216C97360((void *)this + 27, (unsigned __int8 *)&__p, v10);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p);
    }
    if (*((void *)this + 31) + (*((void *)this + 32) << 6) == v11)
    {
      __p = "usd/crateFile.cpp";
      char v23 = "_PackValue";
      uint64_t v24 = 4574;
      uint64_t v25 = "ValueRep pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_PackValue(const VtValue &)";
      char v26 = 0;
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(v9 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v20);
      int v13 = v21;
      uint64_t v14 = (void **)v20[0];
      sub_216928738((uint64_t)v2);
      uint64_t v15 = v20;
      if (v13 < 0) {
        uint64_t v15 = v14;
      }
      if (v19 >= 0) {
        unint64_t v16 = (const char *)&v18;
      }
      else {
        unint64_t v16 = (const char *)v18;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempted to pack unsupported type '%s' (%s)", (const char *)v15, v16);
      if (v19 < 0) {
        operator delete(v18);
      }
      if (v21 < 0) {
        operator delete(v20[0]);
      }
      return 0;
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 56);
      if (!v12) {
        sub_21683A7CC();
      }
      return (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::VtValue *))(*(void *)v12 + 48))(v12, v2);
    }
  }
  return v5;
}

void sub_216C6D064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddField(char **a1, uint64_t a2)
{
  DWORD1(v23) = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)a2);
  *((void *)&v23 + 1) = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_PackValue((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 8));
  uint64_t v4 = (uint64_t)(a1[791] + 120);
  int v22 = -1;
  uint64_t v5 = sub_216C96D7C(v4, (uint64_t)&v23, &v23, &v22);
  uint64_t v6 = v5;
  if (v7)
  {
    uint64_t v8 = a1 + 6;
    *((_DWORD *)v5 + 8) = (unint64_t)(a1[7] - a1[6]) >> 4;
    uint64_t v9 = a1[7];
    unint64_t v10 = (unint64_t)a1[8];
    if ((unint64_t)v9 >= v10)
    {
      uint64_t v12 = (v9 - *v8) >> 4;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60) {
        sub_21677CB10();
      }
      uint64_t v14 = v10 - (void)*v8;
      if (v14 >> 3 > v13) {
        unint64_t v13 = v14 >> 3;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15) {
        unint64_t v16 = (char *)sub_216787EE0((uint64_t)(a1 + 8), v15);
      }
      else {
        unint64_t v16 = 0;
      }
      int v17 = &v16[16 * v12];
      uint64_t v18 = &v16[16 * v15];
      *(_OWORD *)int v17 = v23;
      uint64_t v11 = v17 + 16;
      uint64_t v20 = a1[6];
      char v19 = a1[7];
      if (v19 != v20)
      {
        do
        {
          *((_OWORD *)v17 - 1) = *((_OWORD *)v19 - 1);
          v17 -= 16;
          v19 -= 16;
        }
        while (v19 != v20);
        char v19 = *v8;
      }
      a1[6] = v17;
      a1[7] = v11;
      a1[8] = v18;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v9 = v23;
      uint64_t v11 = v9 + 16;
    }
    a1[7] = v11;
  }
  return *((unsigned int *)v6 + 8);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddFieldSet(void *a1, char **a2)
{
  uint64_t v4 = a1[791] + 160;
  int v23 = -1;
  uint64_t v5 = sub_216C96A34(v4, (uint64_t)a2, (uint64_t)a2, &v23);
  uint64_t v6 = v5;
  if (v7)
  {
    uint64_t v8 = (char **)(a1 + 9);
    *((_DWORD *)v5 + 10) = (a1[10] - a1[9]) >> 2;
    sub_216ADED1C((uint64_t)(a1 + 9), a1[10], *a2, a2[1], (a2[1] - *a2) >> 2);
    uint64_t v9 = (_DWORD *)a1[10];
    unint64_t v10 = a1[11];
    if ((unint64_t)v9 >= v10)
    {
      uint64_t v12 = ((char *)v9 - *v8) >> 2;
      if ((unint64_t)(v12 + 1) >> 62) {
        sub_21677CB10();
      }
      uint64_t v13 = v10 - (void)*v8;
      uint64_t v14 = v13 >> 1;
      if (v13 >> 1 <= (unint64_t)(v12 + 1)) {
        uint64_t v14 = v12 + 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15) {
        unint64_t v16 = (char *)sub_21677EA28((uint64_t)(a1 + 11), v15);
      }
      else {
        unint64_t v16 = 0;
      }
      int v17 = &v16[4 * v12];
      uint64_t v18 = &v16[4 * v15];
      *(_DWORD *)int v17 = -1;
      uint64_t v11 = v17 + 4;
      uint64_t v20 = (char *)a1[9];
      char v19 = (char *)a1[10];
      if (v19 != v20)
      {
        do
        {
          int v21 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *((_DWORD *)v17 - 1) = v21;
          v17 -= 4;
        }
        while (v19 != v20);
        char v19 = *v8;
      }
      a1[9] = v17;
      a1[10] = v11;
      a1[11] = v18;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      _DWORD *v9 = -1;
      uint64_t v11 = v9 + 1;
    }
    a1[10] = v11;
  }
  return *((unsigned int *)v6 + 10);
}

uint64_t sub_216C6D370(uint64_t result, char *__src, int64_t a3)
{
  if (a3)
  {
    int64_t v3 = a3;
    uint64_t v5 = *(void **)(result + 8);
    do
    {
      uint64_t v6 = v5[2];
      uint64_t v7 = v6 - *v5 + 0x80000;
      if (v3 >= v7) {
        size_t v8 = v6 - *v5 + 0x80000;
      }
      else {
        size_t v8 = v3;
      }
      uint64_t v9 = *v5 - v6;
      if ((int64_t)(v8 + v9) > v5[4]) {
        v5[4] = v8 + v9;
      }
      double result = (uint64_t)memcpy((void *)(v5[3] + v9), __src, v8);
      *v5 += v8;
      if (v7 <= v3) {
        double result = sub_216C7A9E4((BOOL)v5);
      }
      __src += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return result;
}

double pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BootStrap::_BootStrap(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BootStrap *this, const pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Version *a2)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = 0x434453552D525850;
  *((unsigned char *)this + 8) = *(unsigned char *)a2;
  *((unsigned char *)this + 9) = *((unsigned char *)a2 + 1);
  *((unsigned char *)this + 10) = *((unsigned char *)a2 + 2);
  return result;
}

{
  double result;

  double result = 0.0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = 0x434453552D525850;
  *((unsigned char *)this + 8) = *(unsigned char *)a2;
  *((unsigned char *)this + 9) = *((unsigned char *)a2 + 1);
  *((unsigned char *)this + 10) = *((unsigned char *)a2 + 2);
  return result;
}

uint64_t sub_216C6D464(uint64_t a1, char *__src)
{
  int64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = 88;
  do
  {
    uint64_t v5 = v3[2];
    uint64_t v6 = v5 - *v3 + 0x80000;
    if (v4 >= v6) {
      size_t v7 = v5 - *v3 + 0x80000;
    }
    else {
      size_t v7 = v4;
    }
    uint64_t v8 = *v3 - v5;
    if ((int64_t)(v7 + v8) > v3[4]) {
      v3[4] = v7 + v8;
    }
    uint64_t result = (uint64_t)memcpy((void *)(v3[3] + v8), __src, v7);
    *v3 += v7;
    if (v6 <= v4) {
      uint64_t result = sub_216C7A9E4((BOOL)v3);
    }
    __src += v7;
    v4 -= v7;
  }
  while (v4);
  return result;
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ClearValueHandlerDedupTables(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  sub_216C7B1E0((uint64_t *)(*((void *)this + 734) + 8), 0);
  sub_216C7B2A0((uint64_t *)(*((void *)this + 735) + 8), 0);
  sub_216C7B360((uint64_t *)(*((void *)this + 736) + 8), 0);
  sub_216C7B420((uint64_t *)(*((void *)this + 737) + 8), 0);
  uint64_t v2 = (uint64_t *)*((void *)this + 738);
  sub_2168CAEA8(v2, 0);
  sub_216C7B4E0(v2 + 1, 0);
  int64_t v3 = (uint64_t *)*((void *)this + 739);
  sub_2168CAEA8(v3, 0);
  sub_216C7B5A0(v3 + 1, 0);
  sub_216C7B660((uint64_t *)(*((void *)this + 740) + 8), 0);
  sub_216C7B720((uint64_t *)(*((void *)this + 741) + 8), 0);
  uint64_t v4 = (uint64_t *)*((void *)this + 742);
  sub_2168CAEA8(v4, 0);
  sub_216C7B7E0(v4 + 1, 0);
  sub_216C7B8A0((uint64_t *)(*((void *)this + 743) + 8), 0);
  sub_216C7B960((uint64_t *)(*((void *)this + 744) + 8), 0);
  sub_216C7BA20((uint64_t *)(*((void *)this + 745) + 8), 0);
  uint64_t v5 = (uint64_t *)*((void *)this + 749);
  sub_2168CAEA8(v5, 0);
  sub_216C7BBA0(v5 + 1, 0);
  uint64_t v6 = (uint64_t *)*((void *)this + 750);
  sub_2168CAEA8(v6, 0);
  sub_216C7BC60(v6 + 1, 0);
  size_t v7 = (uint64_t *)*((void *)this + 751);
  sub_2168CAEA8(v7, 0);
  sub_216C7BD20(v7 + 1, 0);
  uint64_t v8 = (uint64_t *)*((void *)this + 752);
  sub_2168CAEA8(v8, 0);
  sub_216C7BDE0(v8 + 1, 0);
  uint64_t v9 = (uint64_t *)*((void *)this + 753);
  sub_2168CAEA8(v9, 0);
  sub_216C7BEA0(v9 + 1, 0);
  sub_216C7BF60((uint64_t *)(*((void *)this + 754) + 8), 0);
  unint64_t v10 = (uint64_t *)*((void *)this + 755);
  sub_2168CAEA8(v10, 0);
  sub_216C7C020(v10 + 1, 0);
  uint64_t v11 = (uint64_t *)*((void *)this + 756);
  sub_2168CAEA8(v11, 0);
  sub_216C7C0E0(v11 + 1, 0);
  uint64_t v12 = (uint64_t *)*((void *)this + 757);
  sub_2168CAEA8(v12, 0);
  sub_216C7C1A0(v12 + 1, 0);
  uint64_t v13 = (uint64_t *)*((void *)this + 758);
  sub_2168CAEA8(v13, 0);
  sub_216C7C260(v13 + 1, 0);
  uint64_t v14 = (uint64_t *)*((void *)this + 759);
  sub_2168CAEA8(v14, 0);
  sub_216C7C320(v14 + 1, 0);
  unint64_t v15 = (uint64_t *)*((void *)this + 760);
  sub_2168CAEA8(v15, 0);
  sub_216C7C3E0(v15 + 1, 0);
  unint64_t v16 = (uint64_t *)*((void *)this + 761);
  sub_2168CAEA8(v16, 0);
  sub_216C7C4A0(v16 + 1, 0);
  int v17 = (uint64_t *)*((void *)this + 762);
  sub_2168CAEA8(v17, 0);
  sub_216C7C560(v17 + 1, 0);
  uint64_t v18 = (uint64_t *)*((void *)this + 763);
  sub_2168CAEA8(v18, 0);
  sub_216C7C620(v18 + 1, 0);
  char v19 = (uint64_t *)*((void *)this + 746);
  sub_2168CAEA8(v19, 0);
  sub_216C7C6E0(v19 + 1, 0);
  uint64_t v20 = (uint64_t *)*((void *)this + 747);
  sub_2168CAEA8(v20, 0);
  sub_216C7C7A0(v20 + 1, 0);
  int v21 = (uint64_t *)*((void *)this + 748);
  sub_2168CAEA8(v21, 0);
  sub_216C7C860(v21 + 1, 0);
  sub_216C7CA94(*((uint64_t **)this + 764), 0);
  sub_216C7CD3C(*((uint64_t **)this + 765), 0);
  sub_216C7D068(*((uint64_t **)this + 766), 0);
  sub_216C7D394(*((uint64_t **)this + 767), 0);
  sub_216C7D6C0(*((uint64_t **)this + 768), 0);
  sub_216C7D9D8(*((uint64_t **)this + 769), 0);
  sub_216C7D9D8(*((uint64_t **)this + 770), 0);
  sub_216C7D9D8(*((uint64_t **)this + 771), 0);
  sub_216C7D9D8(*((uint64_t **)this + 772), 0);
  sub_216C7DEF0(*((uint64_t **)this + 773), 0);
  sub_216C7E140(*((uint64_t **)this + 774), 0);
  sub_216C7E5C8(*((uint64_t **)this + 778), 0);
  sub_216C7E818(*((uint64_t **)this + 779), 0);
  sub_216C7EA84(*((uint64_t **)this + 780), 0);
  sub_216C7ED20(*((uint64_t **)this + 781), 0);
  sub_216C7ED20(*((uint64_t **)this + 782), 0);
  sub_216C7EFA0(*((uint64_t **)this + 783), 0);
  sub_216AE4064(*((uint64_t **)this + 785), 0);
  sub_216AE4064(*((uint64_t **)this + 786), 0);
  sub_216C7F540(*((uint64_t **)this + 787), 0);
  sub_216C7F86C(*((uint64_t **)this + 788), 0);
  int v22 = (uint64_t *)*((void *)this + 789);
  sub_2168CAEA8(v22, 0);
  sub_216C7F9B4(v22 + 1, 0);
  int v23 = (uint64_t *)*((void *)this + 790);
  sub_216C7FB34(v23, 0);

  sub_216C7FA74(v23 + 1, 0);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddSpec(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3, uint64_t **a4)
{
  int v62 = a3;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v61 = 0;
  __n128 v58 = 0uLL;
  unint64_t v59 = 0;
  long long v56 = 0uLL;
  unint64_t v57 = 0;
  sub_216C6DE7C(__p, 0xAAAAAAAAAAAAAAABLL * (a4[1] - *a4));
  size_t v7 = *a4;
  uint64_t v8 = a4[1];
  if (*a4 != v8)
  {
    do
    {
      uint64_t v9 = (uint64_t)(v7 + 1);
      if (sub_216C63758((pxrInternal__aapl__pxrReserved__::VtValue *)(v7 + 1))
        && ((uint64_t v10 = v7[2], (v10 & 4) != 0)
          ? (uint64_t v11 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(v7 + 1))
          : (uint64_t v11 = *(uint64_t **)v9),
            !*v11))
      {
        uint64_t v25 = v7[2];
        if ((v25 & 4) != 0) {
          char v26 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v25 & 0xFFFFFFFFFFFFFFF8) + 168))(v7 + 1);
        }
        else {
          char v26 = *(uint64_t **)v9;
        }
        unint64_t v27 = v58.n128_u64[1];
        if (v58.n128_u64[1] >= v59)
        {
          uint64_t v28 = sub_216C93228((uint64_t *)&v58, v7, v26);
        }
        else
        {
          sub_216C93350((uint64_t *)v58.n128_u64[1], v7, v26);
          uint64_t v28 = v27 + 56;
        }
        v58.n128_u64[1] = v28;
      }
      else
      {
        if (((*(unsigned __int8 *)(*(void *)(a1 + 6328) + 248) << 16) | (*(unsigned __int8 *)(*(void *)(a1 + 6328)
                                                                                                 + 249) << 8)) > 0x7FFu)
          goto LABEL_18;
        if (sub_216B6E1CC((pxrInternal__aapl__pxrReserved__::VtValue *)(v7 + 1)))
        {
          uint64_t v12 = v7[2];
          uint64_t v13 = (v12 & 4) != 0
              ? (*(uint64_t (**)(uint64_t *))((v12 & 0xFFFFFFFFFFFFFFF8) + 168))(v7 + 1)
              : *(void *)v9;
          if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(v13 + 32))) {
            goto LABEL_16;
          }
        }
        if (((*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8)) > 0x7FFu
          || !sub_216C636CC((pxrInternal__aapl__pxrReserved__::VtValue *)(v7 + 1)))
        {
          goto LABEL_18;
        }
        uint64_t v14 = v7[2];
        if ((v14 & 4) != 0) {
          uint64_t v9 = (*(uint64_t (**)(uint64_t *))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(v7 + 1);
        }
        if ((unint64_t)*(unsigned __int8 *)(v9 + 6) << 48 == 0x2F000000000000)
        {
LABEL_16:
          uint64_t v15 = *((void *)&v56 + 1);
          if (*((void *)&v56 + 1) >= v57)
          {
            uint64_t v16 = sub_216C93660((uint64_t *)&v56, v7);
          }
          else
          {
            sub_216A9D680(*((uint64_t **)&v56 + 1), v7);
            uint64_t v16 = v15 + 24;
          }
          *((void *)&v56 + 1) = v16;
        }
        else
        {
LABEL_18:
          int v17 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddField((char **)a1, (uint64_t)v7);
          int v18 = v17;
          char v19 = (char *)__p[1];
          if (__p[1] >= v61)
          {
            int64_t v21 = ((char *)__p[1] - (char *)__p[0]) >> 2;
            if ((unint64_t)(v21 + 1) >> 62) {
              sub_21677CB10();
            }
            unint64_t v22 = (v61 - (char *)__p[0]) >> 1;
            if (v22 <= v21 + 1) {
              unint64_t v22 = v21 + 1;
            }
            if ((unint64_t)(v61 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v23 = v22;
            }
            if (v23) {
              uint64_t v24 = (char *)sub_21677EA28((uint64_t)&v61, v23);
            }
            else {
              uint64_t v24 = 0;
            }
            uint64_t v29 = &v24[4 * v21];
            *(_DWORD *)uint64_t v29 = v18;
            uint64_t v20 = v29 + 4;
            unint64_t v31 = (char *)__p[0];
            uint64_t v30 = (char *)__p[1];
            if (__p[1] != __p[0])
            {
              do
              {
                int v32 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v29 - 1) = v32;
                v29 -= 4;
              }
              while (v30 != v31);
              uint64_t v30 = (char *)__p[0];
            }
            __p[0] = v29;
            __p[1] = v20;
            uint64_t v61 = &v24[4 * v23];
            if (v30) {
              operator delete(v30);
            }
          }
          else
          {
            *(_DWORD *)__p[1] = v17;
            uint64_t v20 = v19 + 4;
          }
          __p[1] = v20;
        }
      }
      v7 += 3;
    }
    while (v7 != v8);
  }
  if (v58.n128_u64[0] == v58.n128_u64[1] && (void)v56 == *((void *)&v56 + 1))
  {
    int v37 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddPath((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1, a2);
    int v38 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddFieldSet((void *)a1, (char **)__p);
    unint64_t v39 = *(void *)(a1 + 16);
    uint64_t v40 = *(_DWORD **)(a1 + 8);
    if ((unint64_t)v40 >= v39)
    {
      unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - *(void *)a1) >> 2);
      unint64_t v44 = v43 + 1;
      if (v43 + 1 > 0x1555555555555555) {
        sub_21677CB10();
      }
      unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *(void *)a1) >> 2);
      if (2 * v45 > v44) {
        unint64_t v44 = 2 * v45;
      }
      if (v45 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v46 = 0x1555555555555555;
      }
      else {
        unint64_t v46 = v44;
      }
      int v47 = (char *)sub_216B0D05C(a1 + 16, v46);
      int v48 = &v47[12 * v43];
      v50 = &v47[12 * v49];
      int v51 = v62;
      *(_DWORD *)int v48 = v37;
      *((_DWORD *)v48 + 1) = v38;
      *((_DWORD *)v48 + 2) = v51;
      BOOL v42 = v48 + 12;
      uint64_t v53 = *(char **)a1;
      uint64_t v52 = *(char **)(a1 + 8);
      if (v52 != *(char **)a1)
      {
        do
        {
          uint64_t v54 = *(void *)(v52 - 12);
          v52 -= 12;
          int v55 = *((_DWORD *)v52 + 2);
          *(void *)(v48 - 12) = v54;
          v48 -= 12;
          *((_DWORD *)v48 + 2) = v55;
        }
        while (v52 != v53);
        uint64_t v52 = *(char **)a1;
      }
      *(void *)a1 = v48;
      *(void *)(a1 + 8) = v42;
      *(void *)(a1 + 16) = v50;
      if (v52) {
        operator delete(v52);
      }
    }
    else
    {
      int v41 = v62;
      *uint64_t v40 = v37;
      v40[1] = v38;
      v40[2] = v41;
      BOOL v42 = v40 + 3;
    }
    *(void *)(a1 + 8) = v42;
  }
  else
  {
    int v33 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddPath((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1, a2);
    LODWORD(v63) = v33;
    unint64_t v34 = *(void *)(a1 + 32);
    if (v34 >= *(void *)(a1 + 40))
    {
      uint64_t v36 = sub_216C93768((uint64_t *)(a1 + 24), &v63, &v62, (uint64_t)__p, (uint64_t)&v56, &v58);
    }
    else
    {
      int v35 = v62;
      *(_DWORD *)unint64_t v34 = v33;
      *(_DWORD *)(v34 + 4) = v35;
      *(void *)(v34 + 16) = 0;
      *(void *)(v34 + 24) = 0;
      *(_OWORD *)(v34 + 8) = *(_OWORD *)__p;
      *(void *)(v34 + 24) = v61;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v61 = 0;
      *(_OWORD *)(v34 + 32) = v56;
      *(void *)(v34 + 48) = v57;
      long long v56 = 0uLL;
      unint64_t v57 = 0;
      *(__n128 *)(v34 + 56) = v58;
      *(void *)(v34 + 72) = v59;
      __n128 v58 = 0uLL;
      unint64_t v59 = 0;
      uint64_t v36 = v34 + 80;
      *(void *)(a1 + 32) = v34 + 80;
    }
    *(void *)(a1 + 32) = v36;
  }
  uint64_t v63 = (void **)&v56;
  sub_216A94530(&v63);
  *(void *)&long long v56 = &v58;
  sub_216C7FBF4((void ***)&v56);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_216C6DE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  *(void *)(v18 - 88) = &a9;
  sub_216A94530((void ***)(v18 - 88));
  a9 = &a13;
  sub_216C7FBF4((void ***)&a9);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216C6DE7C(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_21677CB10();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_21677EA28(v3, a2);
    size_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = &v6[4 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        int v13 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddPath(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4 = *((void *)this + 791) + 80;
  LODWORD(v13) = -1;
  int64_t v5 = sub_216C9665C(v4, (unsigned int *)a2, a2, &v13);
  if (v6)
  {
    IsTargetPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a2);
    if (IsTargetPath)
    {
      TargetPath = pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(a2);
      IsTargetPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddPath(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)TargetPath);
    }
    if (*(void *)a2 != *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(IsTargetPath))
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v13);
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddPath(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v13 + 1);
      sub_21697C414(&v13);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(a2))
    {
      unint64_t v9 = *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      unint64_t v13 = v9;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v13 &= 0xFFFFFFFFFFFFFFF8;
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetElementToken(a2, (atomic_uint **)&v13);
    }
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddToken(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v13);
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *((_DWORD *)v5 + 6) = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    unint64_t v10 = *((void *)this + 13);
    if (v10 >= *((void *)this + 14))
    {
      uint64_t v11 = sub_216C96944((uint64_t *)this + 12, a2);
    }
    else
    {
      sub_216981010(*((_DWORD **)this + 13), a2);
      sub_21698105C((_DWORD *)(v10 + 4), (_DWORD *)a2 + 1);
      uint64_t v11 = v10 + 8;
    }
    *((void *)this + 13) = v11;
  }
  return *((unsigned int *)v5 + 6);
}

void sub_216C6E0A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((uint64_t *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetTimeSampleValueImpl(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 40) + 8 * a3;
  if (*(unsigned char *)(a1 + 6568))
  {
    uint64_t v7 = *(void *)(a1 + 6560);
    uint64_t v18 = (std::__shared_weak_count *)(a1 + 6448);
    uint64_t v19 = v7;
    int v20 = sub_216C688BC();
    uint64_t v8 = *(void *)(*(void *)(a1 + 6448) + 24) + v6;
    uint64_t v16 = a1;
    uint64_t v17 = v8;
    if (sub_216C93BB8((uint64_t)&v17, &v15, 8uLL))
    {
      uint64_t v9 = v15;
LABEL_7:
      *a4 = v9;
      uint64_t v11 = (char *)&off_26C75EC70 + 3;
LABEL_9:
      a4[1] = v11;
      return;
    }
    goto LABEL_8;
  }
  unint64_t v10 = *(FILE **)(a1 + 6456);
  if (v10)
  {
    if (pxrInternal__aapl__pxrReserved__::ArchPRead(v10, (__sFILE *)&v16, (char *)8, *(void *)(a1 + 6464) + v6) != -1)
    {
      uint64_t v9 = v16;
      goto LABEL_7;
    }
LABEL_8:
    uint64_t v11 = 0;
    goto LABEL_9;
  }
  uint64_t v12 = *(void *)(a1 + 6488);
  unint64_t v13 = *(std::__shared_weak_count **)(a1 + 6496);
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v16 = a1;
    uint64_t v17 = v12;
    uint64_t v18 = v13;
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v19 = 0;
    sub_216784EC4(v13);
  }
  else
  {
    uint64_t v16 = a1;
    uint64_t v17 = v12;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
  }
  uint64_t v19 = v6;
  if (sub_216C804FC(&v17, (uint64_t)&v15, 8uLL))
  {
    *a4 = v15;
    uint64_t v14 = (char *)&off_26C75EC70 + 3;
  }
  else
  {
    uint64_t v14 = 0;
  }
  a4[1] = v14;
  if (v18) {
    sub_216784EC4(v18);
  }
}

void sub_216C6E24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_MakeTimeSampleValuesMutableImpl(uint64_t a1, void *a2)
{
  uint64_t v4 = a2 + 2;
  sub_21696C8F4(a2 + 2, (uint64_t)(*(void *)(a2[1] + 8) - *(void *)a2[1]) >> 3);
  if (*(unsigned char *)(a1 + 6568))
  {
    uint64_t v5 = *(void *)(a1 + 6560);
    uint64_t v40 = (std::__shared_weak_count *)(a1 + 6448);
    uint64_t v41 = v5;
    int v42 = sub_216C688BC();
    uint64_t v6 = *(void *)(*(void *)(a1 + 6448) + 24) + a2[5];
    uint64_t v38 = a1;
    uint64_t v39 = v6;
    uint64_t v7 = *(void *)(a2[1] + 8) - *(void *)a2[1];
    if (v7)
    {
      uint64_t v8 = 0;
      uint64_t v9 = v7 >> 3;
      while (sub_216C93BB8((uint64_t)&v39, &__dst, 8uLL))
      {
        uint64_t v10 = __dst;
        uint64_t v11 = (void *)(*v4 + v8);
        uint64_t v12 = v11[1];
        if (v12) {
          BOOL v13 = (v11[1] & 3) == 3;
        }
        else {
          BOOL v13 = 1;
        }
        if (!v13) {
          (*(void (**)(uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 32))(*v4 + v8);
        }
        void *v11 = v10;
        v11[1] = (char *)&off_26C75EC70 + 3;
        v8 += 16;
        if (!--v9) {
          goto LABEL_11;
        }
      }
      return;
    }
LABEL_11:
    uint64_t v36 = a2;
LABEL_12:
    *uint64_t v36 = 0;
    return;
  }
  uint64_t v14 = *(FILE **)(a1 + 6456);
  uint64_t v36 = a2;
  if (v14)
  {
    uint64_t v15 = *(void *)(a2[1] + 8) - *(void *)a2[1];
    if (!v15) {
      goto LABEL_12;
    }
    uint64_t v16 = 0;
    uint64_t v17 = *(void *)(a1 + 6464);
    uint64_t v18 = v15 >> 3;
    uint64_t v19 = a2[5];
    while (1)
    {
      ssize_t v20 = pxrInternal__aapl__pxrReserved__::ArchPRead(v14, (__sFILE *)&v38, (char *)8, v19 + v17);
      if (v20 == -1) {
        break;
      }
      ssize_t v21 = v20;
      uint64_t v22 = v38;
      unint64_t v23 = (void *)(*v4 + v16);
      uint64_t v24 = v23[1];
      if (v24) {
        BOOL v25 = (v23[1] & 3) == 3;
      }
      else {
        BOOL v25 = 1;
      }
      if (!v25) {
        (*(void (**)(uint64_t))((v24 & 0xFFFFFFFFFFFFFFF8) + 32))(*v4 + v16);
      }
      v19 += v21;
      *unint64_t v23 = v22;
      v23[1] = (char *)&off_26C75EC70 + 3;
      v16 += 16;
      if (!--v18) {
        goto LABEL_12;
      }
    }
  }
  else
  {
    uint64_t v26 = *(void *)(a1 + 6488);
    unint64_t v27 = *(std::__shared_weak_count **)(a1 + 6496);
    if (v27)
    {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v38 = a1;
      uint64_t v39 = v26;
      uint64_t v40 = v27;
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v27);
    }
    else
    {
      uint64_t v38 = a1;
      uint64_t v39 = v26;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
    }
    uint64_t v41 = a2[5];
    uint64_t v28 = *(void *)(a2[1] + 8) - *(void *)a2[1];
    if (v28)
    {
      uint64_t v29 = 0;
      uint64_t v30 = v28 >> 3;
      while ((sub_216C804FC(&v39, (uint64_t)&__dst, 8uLL) & 1) != 0)
      {
        uint64_t v31 = __dst;
        int v32 = (void *)(*v4 + v29);
        uint64_t v33 = v32[1];
        if (v33) {
          BOOL v34 = (v32[1] & 3) == 3;
        }
        else {
          BOOL v34 = 1;
        }
        if (!v34) {
          (*(void (**)(uint64_t))((v33 & 0xFFFFFFFFFFFFFFF8) + 32))(*v4 + v29);
        }
        *int v32 = v31;
        v32[1] = (char *)&off_26C75EC70 + 3;
        v29 += 16;
        if (!--v30) {
          goto LABEL_37;
        }
      }
      char v35 = 0;
    }
    else
    {
LABEL_37:
      char v35 = 1;
    }
    if (v40) {
      sub_216784EC4(v40);
    }
    if (v35) {
      goto LABEL_12;
    }
  }
}

void sub_216C6E518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_WriteFields(void *a1, uint64_t a2)
{
  if (((*(unsigned __int8 *)(a1[791] + 248) << 16) | (*(unsigned __int8 *)(a1[791] + 249) << 8)) > 0x3FFu)
  {
    __src = (void *)((uint64_t)(a1[7] - a1[6]) >> 4);
    sub_216C80458(a2, (char *)&__src);
    sub_2167813E0(&__src, (uint64_t)(a1[7] - a1[6]) >> 4);
    uint64_t v4 = a1[6];
    uint64_t v5 = a1[7];
    uint64_t v6 = __src;
    if (v4 != v5)
    {
      uint64_t v7 = __src;
      do
      {
        *v7++ = *(_DWORD *)(v4 + 4);
        v4 += 16;
      }
      while (v4 != v5);
    }
    size_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((v22 - v6) >> 2));
    uint64_t v9 = (char *)operator new[](CompressedBufferSize);
    uint64_t v11 = (void *)pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__src, (const unsigned int *)((v22 - (unsigned char *)__src) >> 2), v9, v10);
    __p = v11;
    sub_216C80458(a2, (char *)&__p);
    sub_216C6D370(a2, v9, (int64_t)v11);
    sub_2167819D4(&__p, (uint64_t)(a1[7] - a1[6]) >> 4);
    uint64_t v12 = a1[6];
    uint64_t v13 = a1[7];
    uint64_t v14 = __p;
    if (v12 != v13)
    {
      uint64_t v15 = __p;
      do
      {
        *v15++ = *(void *)(v12 + 8);
        v12 += 16;
      }
      while (v12 != v13);
    }
    size_t v16 = pxrInternal__aapl__pxrReserved__::TfFastCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::TfFastCompression *)(v20 - v14));
    uint64_t v17 = (char *)operator new[](v16);
    int64_t v18 = pxrInternal__aapl__pxrReserved__::TfFastCompression::CompressToBuffer((pxrInternal__aapl__pxrReserved__::TfFastCompression *)__p, v17, v20 - (unsigned char *)__p);
    int64_t v23 = v18;
    sub_216C80458(a2, (char *)&v23);
    sub_216C6D370(a2, v17, v18);
    operator delete[](v17);
    if (__p)
    {
      ssize_t v20 = __p;
      operator delete(__p);
    }
    operator delete[](v9);
    if (__src)
    {
      uint64_t v22 = __src;
      operator delete(__src);
    }
  }
  else
  {
    sub_216C6E760(a2, (uint64_t)(a1 + 6));
  }
}

void sub_216C6E708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  operator delete[](v14);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216C6E760(uint64_t a1, uint64_t a2)
{
  uint64_t __src = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4;
  sub_216C80458(a1, (char *)&__src);
  return sub_216C93DB8(a1, *(char **)a2, (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_WriteFieldSets(void *a1, uint64_t a2)
{
  if (((*(unsigned __int8 *)(a1[791] + 248) << 16) | (*(unsigned __int8 *)(a1[791] + 249) << 8)) > 0x3FFu)
  {
    sub_2167813E0(&__p, (uint64_t)(a1[10] - a1[9]) >> 2);
    uint64_t v4 = (int *)a1[9];
    uint64_t v5 = (int *)a1[10];
    uint64_t v6 = __p;
    if (v4 != v5)
    {
      uint64_t v7 = __p;
      do
      {
        int v8 = *v4++;
        *v7++ = v8;
      }
      while (v4 != v5);
    }
    size_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((v14 - v6) >> 2));
    uint64_t v10 = (char *)operator new[](CompressedBufferSize);
    uint64_t __src = (v14 - (unsigned char *)__p) >> 2;
    sub_216C80458(a2, (char *)&__src);
    int64_t v12 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__p, (const unsigned int *)((v14 - (unsigned char *)__p) >> 2), v10, v11);
    uint64_t __src = v12;
    sub_216C80458(a2, (char *)&__src);
    sub_216C6D370(a2, v10, v12);
    operator delete[](v10);
    if (__p)
    {
      uint64_t v14 = __p;
      operator delete(__p);
    }
  }
  else
  {
    sub_216C6E920(a2, (uint64_t)(a1 + 9));
  }
}

void sub_216C6E8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  operator delete[](v10);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216C6E920(uint64_t a1, uint64_t a2)
{
  uint64_t __src = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
  sub_216C80458(a1, (char *)&__src);
  return sub_216C93180(a1, *(char **)a2, (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_WritePaths(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a1, uint64_t a2)
{
  *(void *)&long long v15 = (uint64_t)(*((void *)a1 + 13) - *((void *)a1 + 12)) >> 3;
  sub_216C80458(a2, (char *)&v15);
  uint64_t v4 = *((void *)a1 + 791);
  if (((*(unsigned __int8 *)(v4 + 248) << 16) | (*(unsigned __int8 *)(v4 + 249) << 8)) > 0x3FFu)
  {
    long long v15 = 0uLL;
    *(void *)&long long v16 = 0;
    sub_216C6F0AC((uint64_t *)&v15, (uint64_t)(*((void *)a1 + 13) - *((void *)a1 + 12)) >> 3);
    uint64_t v7 = (_DWORD *)*((void *)a1 + 12);
    for (uint64_t i = (_DWORD *)*((void *)a1 + 13); v7 != i; v7 += 2)
    {
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v7))
      {
        uint64_t v9 = *((void *)a1 + 791) + 80;
        int64_t v18 = v7;
        uint64_t v10 = sub_216C80118(v9, v7, (uint64_t)&unk_2174BFD90, &v18) + 3;
        uint64_t v11 = *((void *)&v15 + 1);
        if (*((void *)&v15 + 1) >= (unint64_t)v16)
        {
          uint64_t v12 = sub_216C94D2C((uint64_t *)&v15, v7, v10);
        }
        else
        {
          sub_216981010(*((_DWORD **)&v15 + 1), v7);
          sub_21698105C((_DWORD *)(v11 + 4), v7 + 1);
          *(_DWORD *)(v11 + 8) = *v10;
          uint64_t v12 = v11 + 12;
        }
        *((void *)&v15 + 1) = v12;
      }
    }
    unint64_t v13 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v15 + 1) - v15) >> 2));
    if (*((void *)&v15 + 1) == (void)v15) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = v13;
    }
    sub_216C94E48(v15, *((int **)&v15 + 1), v14, 1);
    sub_216C6F160(a1, a2, (pxrInternal__aapl__pxrReserved__::SdfPath **)&v15);
    uint64_t v19 = (void **)&v15;
    sub_216C94A14(&v19);
  }
  else
  {
    uint64_t v17 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    for (uint64_t j = *(uint64_t **)(v4 + 96); j; uint64_t j = (uint64_t *)*j)
      *(_DWORD *)sub_216C6EB94((uint64_t)&v15, (_DWORD *)j + 4) = *((_DWORD *)j + 6);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216C6EFBC((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15);
    sub_216C6EC2C(a1, a2, v6, 0);
    sub_216C6F010(&v15);
    sub_216C93E60((uint64_t *)&v15);
  }
}

void sub_216C6EB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a9;
  sub_216C94A14(&a16);
  _Unwind_Resume(a1);
}

char *sub_216C6EB94(uint64_t a1, _DWORD *a2)
{
  sub_216981010(&v6, a2);
  sub_21698105C(v7, a2 + 1);
  v7[1] = -1;
  uint64_t v4 = sub_216C93F64(a1, &v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v7);
  sub_21697C414(&v6);
  return (char *)v4 + 8;
}

void sub_216C6EC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
}

pxrInternal__aapl__pxrReserved__::SdfPath *sub_216C6EC2C(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  uint64_t v4 = a4;
  int v37 = a3;
  for (uint64_t i = a3; i != v4; v37 = i)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216C94480((uint64_t)&v37);
    int v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)i + 3);
    if (!v8) {
      int v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216C94480((uint64_t)&i);
    }
    uint64_t i = v8;
    if (v8 == v7)
    {
      BOOL v11 = 0;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v8, &__src);
      int64_t v9 = __src;
      uint64_t v10 = *(void *)v37;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__src + 1);
      BOOL v11 = v9 == v10;
      sub_21697C414(&__src);
    }
    if (v7 == v4)
    {
      BOOL v12 = 0;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v7, &__src);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v37, &v36);
      BOOL v12 = __src == v36;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v36 + 1);
      sub_21697C414(&v36);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__src + 1);
      sub_21697C414(&__src);
    }
    int IsPrimPropertyPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(v37);
    if (IsPrimPropertyPath)
    {
      unint64_t v14 = *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v37);
      unint64_t v36 = v14;
      if ((v14 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v36 &= 0xFFFFFFFFFFFFFFF8;
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetElementToken(v37, (atomic_uint **)&v36);
    }
    if (((*(unsigned __int8 *)(*((void *)a1 + 791) + 248) << 16) | (*(unsigned __int8 *)(*((void *)a1 + 791)
                                                                                            + 249) << 8) | *(unsigned __int8 *)(*((void *)a1 + 791) + 250)) == 1)
    {
      int v15 = *((_DWORD *)v37 + 2);
      int IndexForToken = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetIndexForToken(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v36);
      if (v12) {
        char v17 = 2;
      }
      else {
        char v17 = 0;
      }
      char v18 = v17 | v11;
      if (IsPrimPropertyPath) {
        char v19 = 4;
      }
      else {
        char v19 = 0;
      }
      HIDWORD(__src) = v15;
      int v34 = IndexForToken;
      char v35 = v18 | v19;
      sub_216C944BC(a2, (char *)&__src);
    }
    else
    {
      unsigned int v20 = *((_DWORD *)v37 + 2);
      unsigned int v21 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetIndexForToken(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v36);
      if (v12) {
        char v22 = 2;
      }
      else {
        char v22 = 0;
      }
      char v23 = v22 | v11;
      if (IsPrimPropertyPath) {
        char v24 = 4;
      }
      else {
        char v24 = 0;
      }
      int64_t __src = __PAIR64__(v21, v20);
      LOBYTE(v34) = v23 | v24;
      sub_216C94560(a2, (char *)&__src);
    }
    int v25 = v12 && v11;
    if (v12 && v11)
    {
      uint64_t v26 = **(void **)(a2 + 8);
      int64_t __src = -1;
      sub_216C80458(a2, (char *)&__src);
      if (!v11) {
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v26 = -1;
      if (!v11)
      {
LABEL_32:
        if (!v25) {
          goto LABEL_43;
        }
        goto LABEL_36;
      }
    }
    uint64_t i = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216C6EC2C(a1, a2, i, v4);
    if (!v25) {
      goto LABEL_43;
    }
LABEL_36:
    int64_t __src = 0;
    unint64_t v27 = *(uint64_t **)(a2 + 8);
    int64_t __src = *v27;
    uint64_t v28 = v27[2];
    if (v28 > v26 || v27[4] + v28 < v26)
    {
      sub_216C7A9E4((BOOL)v27);
      uint64_t *v27 = v26;
      v27 += 2;
    }
    uint64_t *v27 = v26;
    sub_216C80458(a2, (char *)&__src);
    int64_t v29 = __src;
    uint64_t v30 = *(int64_t **)(a2 + 8);
    int64_t v31 = v30[2];
    if (v31 > __src || v30[4] + v31 < __src)
    {
      sub_216C7A9E4(*(void *)(a2 + 8));
      *uint64_t v30 = v29;
      v30 += 2;
    }
    *uint64_t v30 = v29;
LABEL_43:
    if ((v36 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (!v12) {
      return i;
    }
  }
  return v4;
}

void sub_216C6EF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C6EFBC(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  if (!*((void *)a1 + 3)) {
    return 0;
  }
  uint64_t v2 = (unsigned int *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);

  return sub_216C94418(a1, v2);
}

uint64_t *sub_216C6F010(long long *a1)
{
  long long v8 = 0uLL;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  long long v4 = 0uLL;
  uint64_t v11 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = 0;
  sub_216C946A4(&v4, a1);
  sub_216C946A4(a1, &v8);
  uint64_t v2 = sub_216C93E60((uint64_t *)&v8);
  if ((pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls((pxrInternal__aapl__pxrReserved__ *)v2) & 1) == 0) {
    sub_216C94604(&v4);
  }
  return sub_216C93E60((uint64_t *)&v4);
}

void sub_216C6F088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void **sub_216C6F0AC(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_216B0D05C((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    _DWORD v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 12 * v6;
    sub_216C94AEC(a1, v7);
    return sub_216C94CB0(v7);
  }
  return result;
}

void sub_216C6F14C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C94CB0((void **)va);
  _Unwind_Resume(a1);
}

void sub_216C6F160(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath **a3)
{
  int64_t __src = (void *)(0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 2));
  sub_216C80458(a2, (char *)&__src);
  int64_t __src = 0;
  char v22 = 0;
  uint64_t v23 = 0;
  char v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  __p = 0;
  long long v16 = 0;
  uint64_t v17 = 0;
  sub_21681C000((uint64_t)&__src, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 2));
  sub_21681C000((uint64_t)&v18, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 2));
  sub_21681C000((uint64_t)&__p, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 2));
  uint64_t v14 = 0;
  sub_216C96070(a1, &v14, *a3, a3[1], &__src, &v18, (uint64_t *)&__p);
  size_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)(0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 2)));
  uint64_t v7 = (char *)operator new[](CompressedBufferSize);
  int64_t v9 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__src, (const unsigned int *)((v22 - (unsigned char *)__src) >> 2), v7, v8);
  int64_t v24 = v9;
  sub_216C80458(a2, (char *)&v24);
  sub_216C6D370(a2, v7, v9);
  int64_t v11 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v18, (const int *)((v19 - (unsigned char *)v18) >> 2), v7, v10);
  int64_t v24 = v11;
  sub_216C80458(a2, (char *)&v24);
  sub_216C6D370(a2, v7, v11);
  int64_t v13 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__p, (const int *)((v16 - (unsigned char *)__p) >> 2), v7, v12);
  int64_t v24 = v13;
  sub_216C80458(a2, (char *)&v24);
  sub_216C6D370(a2, v7, v13);
  operator delete[](v7);
  if (__p)
  {
    long long v16 = __p;
    operator delete(__p);
  }
  if (v18)
  {
    char v19 = v18;
    operator delete(v18);
  }
  if (__src)
  {
    char v22 = __src;
    operator delete(__src);
  }
}

void sub_216C6F34C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_WriteSpecs(uint64_t **a1, uint64_t a2)
{
  unsigned int v4 = (*((unsigned __int8 *)a1[791] + 248) << 16) | (*((unsigned __int8 *)a1[791] + 249) << 8) | *((unsigned __int8 *)a1[791]
                                                                                                  + 250);
  if (v4 == 1)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)*a1) >> 2);
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    __p = 0;
    sub_216C9630C((char *)&__p, v5, v6, v7);
    sub_216C6E760(a2, (uint64_t)&__p);
    if (__p)
    {
      uint64_t v30 = __p;
      operator delete(__p);
    }
  }
  else if (v4 > 0x3FF)
  {
    size_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)(0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 2)));
    int64_t v9 = (char *)operator new[](CompressedBufferSize);
    sub_2167813E0(&__p, 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 2));
    unint64_t __src = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 2);
    sub_216C80458(a2, (char *)&__src);
    int64_t v11 = *a1;
    BOOL v12 = a1[1];
    int64_t v13 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__p;
    if (*a1 != v12)
    {
      uint64_t v14 = __p;
      do
      {
        int v15 = *(_DWORD *)v11;
        int64_t v11 = (uint64_t *)((char *)v11 + 12);
        *v14++ = v15;
      }
      while (v11 != v12);
    }
    int64_t v16 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(v13, (const unsigned int *)((v30 - (unsigned char *)v13) >> 2), v9, v10);
    unint64_t __src = v16;
    sub_216C80458(a2, (char *)&__src);
    sub_216C6D370(a2, v9, v16);
    char v18 = *a1;
    char v19 = a1[1];
    uint64_t v20 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__p;
    if (*a1 != v19)
    {
      unsigned int v21 = __p;
      do
      {
        *v21++ = *((_DWORD *)v18 + 1);
        char v18 = (uint64_t *)((char *)v18 + 12);
      }
      while (v18 != v19);
    }
    int64_t v22 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(v20, (const unsigned int *)((v30 - (unsigned char *)v20) >> 2), v9, v17);
    unint64_t __src = v22;
    sub_216C80458(a2, (char *)&__src);
    sub_216C6D370(a2, v9, v22);
    int64_t v24 = *a1;
    int v25 = a1[1];
    uint64_t v26 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__p;
    if (*a1 != v25)
    {
      unint64_t v27 = __p;
      do
      {
        *v27++ = *((_DWORD *)v24 + 2);
        int64_t v24 = (uint64_t *)((char *)v24 + 12);
      }
      while (v24 != v25);
    }
    int64_t v28 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(v26, (const unsigned int *)((v30 - (unsigned char *)v26) >> 2), v9, v23);
    unint64_t __src = v28;
    sub_216C80458(a2, (char *)&__src);
    sub_216C6D370(a2, v9, v28);
    if (__p)
    {
      uint64_t v30 = __p;
      operator delete(__p);
    }
    operator delete[](v9);
  }
  else
  {
    sub_216C6F65C(a2, (uint64_t)a1);
  }
}

void sub_216C6F60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete[](v10);
  _Unwind_Resume(a1);
}

uint64_t sub_216C6F65C(uint64_t a1, uint64_t a2)
{
  unint64_t __src = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  sub_216C80458(a1, (char *)&__src);
  return sub_216C9638C(a1, *(char **)a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BuildDecompressedPathsImpl(void *a1, void *a2, void *a3, void *a4, unint64_t a5, int *a6, uint64_t a7)
{
  BOOL v12 = a6 + 1;
  uint64_t v33 = a7 + 264;
  while (1)
  {
    if (a5 >= (uint64_t)(a2[1] - *a2) >> 2)
    {
      *(void *)&long long v36 = "usd/crateFile.cpp";
      *((void *)&v36 + 1) = "_BuildDecompressedPathsImpl";
      *(void *)&long long v37 = 4314;
      *((void *)&v37 + 1) = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BuildDecompressedPathsIm"
                              "pl(const vector<uint32_t> &, const vector<int32_t> &, const vector<int32_t> &, size_t, Sdf"
                              "Path, WorkDispatcher &)";
      LOBYTE(v38) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v36, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt paths encoding in crate file (index:%zu >= %zu)");
      return;
    }
    if (*(unsigned int *)(*a2 + 4 * a5) >= (unint64_t)((uint64_t)(a1[13] - a1[12]) >> 3))
    {
      *(void *)&long long v36 = "usd/crateFile.cpp";
      *((void *)&v36 + 1) = "_BuildDecompressedPathsImpl";
      *(void *)&long long v37 = 4394;
      *((void *)&v37 + 1) = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BuildDecompressedPathsIm"
                              "pl(const vector<uint32_t> &, const vector<int32_t> &, const vector<int32_t> &, size_t, Sdf"
                              "Path, WorkDispatcher &)";
      LOBYTE(v38) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v36, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to build paths, (pathIndex[%lu] == %d) > _paths.size().");
      return;
    }
    BOOL v13 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a6);
    if (v13) {
      break;
    }
    char v18 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v13);
    sub_2169C487C(a6, v18);
    sub_2169C48D4(v12, v18 + 1);
    char v19 = (char *)atomic_load((unint64_t *)&qword_267B91618);
    if (!v19) {
      char v19 = sub_2168E8DD8(&qword_267B91618);
    }
    std::mutex::lock((std::mutex *)v19);
    uint64_t v20 = (int *)(a1[12] + 8 * *(unsigned int *)(*a2 + 4 * a5));
    sub_2169C487C(v20, a6);
    sub_2169C48D4(v20 + 1, v12);
    std::mutex::unlock((std::mutex *)v19);
LABEL_19:
    if (a5 >= (uint64_t)(a4[1] - *a4) >> 2)
    {
      *(void *)&long long v36 = "usd/crateFile.cpp";
      *((void *)&v36 + 1) = "_BuildDecompressedPathsImpl";
      *(void *)&long long v37 = 4353;
      *((void *)&v37 + 1) = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BuildDecompressedPathsIm"
                              "pl(const vector<uint32_t> &, const vector<int32_t> &, const vector<int32_t> &, size_t, Sdf"
                              "Path, WorkDispatcher &)";
      LOBYTE(v38) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v36, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read _tokens, jumps index out of bounds");
      return;
    }
    uint64_t v23 = *(unsigned int *)(*a4 + 4 * a5);
    BOOL v24 = (int)v23 > 0;
    if ((int)v23 > 0)
    {
      if (a5 + v23 >= (uint64_t)(a2[1] - *a2) >> 2)
      {
        *(void *)&long long v36 = "usd/crateFile.cpp";
        *((void *)&v36 + 1) = "_BuildDecompressedPathsImpl";
        *(void *)&long long v37 = 4369;
        *((void *)&v37 + 1) = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BuildDecompressedPaths"
                                "Impl(const vector<uint32_t> &, const vector<int32_t> &, const vector<int32_t> &, size_t,"
                                " SdfPath, WorkDispatcher &)";
        LOBYTE(v38) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v36, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt paths jumps table in crate file (jump:%d + thisIndex:%zu >= %zu)");
        return;
      }
      *(void *)&long long v36 = a1;
      *((void *)&v36 + 1) = a2;
      *(void *)&long long v37 = a3;
      *((void *)&v37 + 1) = a4;
      *(void *)&long long v38 = a5 + v23;
      *((void *)&v38 + 1) = a7;
      sub_216981010(&v39, a6);
      sub_21698105C(&v40, v12);
      uint64_t v25 = *(void *)(a7 + 256);
      v41[0] = 0;
      v41[1] = v25;
      uint64_t v26 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v41, 0x48uLL);
      *(unsigned char *)(v26 - 11) = 1;
      *(void *)uint64_t v26 = &unk_26C75F790;
      long long v27 = v36;
      long long v28 = v37;
      *(_OWORD *)(v26 + 40) = v38;
      *(_OWORD *)(v26 + 24) = v28;
      *(_OWORD *)(v26 + 8) = v27;
      sub_21697D878((_DWORD *)(v26 + 56), &v39);
      sub_21697D8B4((_DWORD *)(v26 + 60), &v40);
      *(void *)(v26 + 64) = v33;
      (***(void (****)(void))(v26 - 40))();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v40);
      sub_21697C414(&v39);
LABEL_23:
      int64_t v29 = (char *)atomic_load((unint64_t *)&qword_267B91618);
      if (!v29) {
        int64_t v29 = sub_2168E8DD8(&qword_267B91618);
      }
      std::mutex::lock((std::mutex *)v29);
      uint64_t v30 = (_DWORD *)(a1[12] + 8 * *(unsigned int *)(*a2 + 4 * a5));
      sub_2169C487C(a6, v30);
      sub_2169C48D4(v12, v30 + 1);
      std::mutex::unlock((std::mutex *)v29);
      char v31 = 1;
      goto LABEL_28;
    }
    BOOL v32 = v23 == 0;
    if (v23 == -1) {
      goto LABEL_23;
    }
    char v31 = 0;
    BOOL v24 = v32;
LABEL_28:
    ++a5;
    if ((v31 & 1) == 0 && !v24) {
      return;
    }
  }
  if (a5 >= (uint64_t)(a3[1] - *a3) >> 2)
  {
    *(void *)&long long v36 = "usd/crateFile.cpp";
    *((void *)&v36 + 1) = "_BuildDecompressedPathsImpl";
    *(void *)&long long v37 = 4326;
    *((void *)&v37 + 1) = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BuildDecompressedPathsImpl"
                            "(const vector<uint32_t> &, const vector<int32_t> &, const vector<int32_t> &, size_t, SdfPath"
                            ", WorkDispatcher &)";
    LOBYTE(v38) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v36, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read _tokens, elementToken index out of bounds");
    return;
  }
  int v14 = *(_DWORD *)(*a3 + 4 * a5);
  if (v14 >= 0) {
    unint64_t v15 = v14;
  }
  else {
    unint64_t v15 = -v14;
  }
  uint64_t v16 = a1[15];
  if (v15 < (a1[16] - v16) >> 3)
  {
    uint64_t v17 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v16 + 8 * v15);
    if (v14 < 0) {
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)a6, v17, (int *)&v36);
    }
    else {
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken((pxrInternal__aapl__pxrReserved__::SdfPath *)a6, v17, (int *)&v36);
    }
    unsigned int v21 = (char *)atomic_load((unint64_t *)&qword_267B91618);
    if (!v21) {
      unsigned int v21 = sub_2168E8DD8(&qword_267B91618);
    }
    std::mutex::lock((std::mutex *)v21);
    int64_t v22 = (int *)(a1[12] + 8 * *(unsigned int *)(*a2 + 4 * a5));
    sub_2169C487C(v22, &v36);
    sub_2169C48D4(v22 + 1, (_DWORD *)&v36 + 1);
    std::mutex::unlock((std::mutex *)v21);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v36 + 1);
    sub_21697C414(&v36);
    goto LABEL_19;
  }
  *(void *)&long long v36 = "usd/crateFile.cpp";
  *((void *)&v36 + 1) = "_BuildDecompressedPathsImpl";
  *(void *)&long long v37 = 4335;
  *((void *)&v37 + 1) = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BuildDecompressedPathsImpl(c"
                          "onst vector<uint32_t> &, const vector<int32_t> &, const vector<int32_t> &, size_t, SdfPath, WorkDispatcher &)";
  LOBYTE(v38) = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v36, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read _tokens, tokenIndex out of bounds");
}

void sub_216C6FBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C6FBFC(uint64_t a1)
{
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadRawBytes(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this, uint64_t a2, char *a3, __sFILE *a4)
{
  if (*((unsigned char *)this + 6568))
  {
    uint64_t v8 = *((void *)this + 820);
    int v14 = (std::__shared_weak_count *)((char *)this + 6448);
    uint64_t v15 = v8;
    int v16 = sub_216C688BC();
    uint64_t v13 = *(void *)(*((void *)this + 806) + 24) + a2;
    sub_216C93BB8((uint64_t)&v13, a4, (size_t)a3);
  }
  else
  {
    int64_t v9 = (FILE *)*((void *)this + 807);
    if (v9)
    {
      off_t v10 = *((void *)this + 808) + a2;
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, a4, a3, v10);
    }
    else
    {
      uint64_t v11 = *((void *)this + 811);
      BOOL v12 = (std::__shared_weak_count *)*((void *)this + 812);
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v13 = v11;
        int v14 = v12;
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v15 = 0;
        sub_216784EC4(v12);
      }
      else
      {
        uint64_t v13 = *((void *)this + 811);
        int v14 = 0;
        uint64_t v15 = 0;
      }
      uint64_t v15 = a2;
      sub_216C804FC(&v13, (uint64_t)a4, (unint64_t)a3);
      if (v14) {
        sub_216784EC4(v14);
      }
    }
  }
}

void sub_216C6FD70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216C6FD88(uint64_t a1, __sFILE *a2, char *a3)
{
  ssize_t v4 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 32), a2, a3, *(void *)(a1 + 16) + *(void *)(a1 + 8));
  if (v4 != -1) {
    *(void *)(a1 + 16) += v4;
  }
  return v4 != -1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetIndexForToken(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v2 = sub_2168CB1F4(*((void **)this + 791), a2);
  if (v2) {
    return *((unsigned int *)v2 + 6);
  }
  v4[0] = "usd/crateFile.cpp";
  v4[1] = "_GetIndexForToken";
  v4[2] = 4492;
  v4[3] = "TokenIndex pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetIndexForToken(const TfToken &) const";
  char v5 = 0;
  if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v4, "iter != _packCtx->tokenToTokenIndex.end()", 0))return *((unsigned int *)v2 + 6); {
  else
  }
    return 0xFFFFFFFFLL;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddString(char **a1, unsigned __int8 *a2)
{
  uint64_t v3 = (uint64_t)(a1[791] + 40);
  int v24 = -1;
  ssize_t v4 = sub_216C96FEC(v3, a2, (uint64_t)a2, &v24);
  char v5 = v4;
  if (v6)
  {
    unint64_t v7 = a1 + 18;
    *((_DWORD *)v4 + 10) = (unint64_t)(a1[19] - a1[18]) >> 2;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v23);
    int v8 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v23);
    unint64_t v9 = (unint64_t)a1[20];
    off_t v10 = a1[19];
    if ((unint64_t)v10 >= v9)
    {
      uint64_t v12 = (v10 - *v7) >> 2;
      if ((unint64_t)(v12 + 1) >> 62) {
        sub_21677CB10();
      }
      uint64_t v13 = v9 - (void)*v7;
      uint64_t v14 = v13 >> 1;
      if (v13 >> 1 <= (unint64_t)(v12 + 1)) {
        uint64_t v14 = v12 + 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15) {
        int v16 = (char *)sub_21677EA28((uint64_t)(a1 + 20), v15);
      }
      else {
        int v16 = 0;
      }
      uint64_t v17 = &v16[4 * v12];
      char v18 = &v16[4 * v15];
      *(_DWORD *)uint64_t v17 = v8;
      uint64_t v11 = v17 + 4;
      uint64_t v20 = a1[18];
      char v19 = a1[19];
      if (v19 != v20)
      {
        do
        {
          int v21 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *((_DWORD *)v17 - 1) = v21;
          v17 -= 4;
        }
        while (v19 != v20);
        char v19 = *v7;
      }
      a1[18] = v17;
      a1[19] = v11;
      a1[20] = v18;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *(_DWORD *)off_t v10 = v8;
      uint64_t v11 = v10 + 4;
    }
    a1[19] = v11;
    if ((v23 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return *((unsigned int *)v5 + 10);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_UnpackValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (BYTE6(a2) - 58 > 0xFFFFFFC6)
  {
    if (*(unsigned char *)(a1 + 6568))
    {
      uint64_t v3 = a1 + 32 * BYTE6(a2) + 2152;
    }
    else
    {
      uint64_t v4 = a1 + 32 * BYTE6(a2);
      uint64_t v5 = v4 + 4008;
      uint64_t v6 = v4 + 296;
      if (*(void *)(a1 + 6456)) {
        uint64_t v3 = v6;
      }
      else {
        uint64_t v3 = v5;
      }
    }
    sub_216C70174(v3, a2, a3);
  }
  else
  {
    v7[0] = "usd/crateFile.cpp";
    v7[1] = "_UnpackValue";
    _DWORD v7[2] = 4635;
    v7[3] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_UnpackValue(ValueRep, VtValue *) const";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempted to unpack unsupported type enum value %d", BYTE6(a2));
  }
}

#error "216C70128: call analysis failed (funcsize=31)"

uint64_t sub_216C70174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

void *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::GetTypeid(uint64_t a1, uint64_t a2)
{
  uint64_t result = &unk_26C74DD70;
  switch(BYTE6(a2))
  {
    case 1:
      uint64_t v3 = (void *)MEMORY[0x263F8C230];
      uint64_t v4 = &unk_26C74E160;
      goto LABEL_59;
    case 2:
      uint64_t v3 = (void *)MEMORY[0x263F8C250];
      uint64_t v4 = &unk_26C74E190;
      goto LABEL_59;
    case 3:
      uint64_t v3 = (void *)MEMORY[0x263F8C258];
      uint64_t v4 = &unk_26C74E1D8;
      goto LABEL_59;
    case 4:
      uint64_t v3 = (void *)MEMORY[0x263F8C260];
      uint64_t v4 = &unk_26C74E1F0;
      goto LABEL_59;
    case 5:
      uint64_t v3 = (void *)MEMORY[0x263F8C290];
      uint64_t v4 = &unk_26C74E208;
      goto LABEL_59;
    case 6:
      uint64_t v3 = (void *)MEMORY[0x263F8C298];
      uint64_t v4 = &unk_26C74E220;
      goto LABEL_59;
    case 7:
      uint64_t v3 = &unk_26C74C510;
      uint64_t v4 = &unk_26C74E268;
      goto LABEL_59;
    case 8:
      uint64_t v3 = (void *)MEMORY[0x263F8C248];
      uint64_t v4 = &unk_26C74E250;
      goto LABEL_59;
    case 9:
      uint64_t v3 = (void *)MEMORY[0x263F8C240];
      uint64_t v4 = &unk_26C74E238;
      goto LABEL_59;
    case 0xA:
      uint64_t v3 = &unk_26C747090;
      uint64_t v4 = &unk_26C74E280;
      goto LABEL_59;
    case 0xB:
      uint64_t v3 = &unk_26C74C2C0;
      uint64_t v4 = &unk_26C74E298;
      goto LABEL_59;
    case 0xC:
      uint64_t v3 = &unk_26C755240;
      uint64_t v4 = &unk_26C755250;
      goto LABEL_59;
    case 0xD:
      uint64_t v3 = &unk_26C74C570;
      uint64_t v4 = &unk_26C74DFE0;
      goto LABEL_59;
    case 0xE:
      uint64_t v3 = &unk_26C74C5A0;
      uint64_t v4 = &unk_26C74DFC8;
      goto LABEL_59;
    case 0xF:
      uint64_t v3 = &unk_26C74C5C0;
      uint64_t v4 = &unk_26C74DFB0;
      goto LABEL_59;
    case 0x10:
      uint64_t v3 = &unk_26C74C5F0;
      uint64_t v4 = &unk_26C74E0E8;
      goto LABEL_59;
    case 0x11:
      uint64_t v3 = &unk_26C74C600;
      uint64_t v4 = &unk_26C74E0D0;
      goto LABEL_59;
    case 0x12:
      uint64_t v3 = &unk_26C74C610;
      uint64_t v4 = &unk_26C74E0B8;
      goto LABEL_59;
    case 0x13:
      uint64_t v3 = &unk_26C74C6F0;
      uint64_t v4 = &unk_26C74DF50;
      goto LABEL_59;
    case 0x14:
      uint64_t v3 = &unk_26C74C700;
      uint64_t v4 = &unk_26C74DF08;
      goto LABEL_59;
    case 0x15:
      uint64_t v3 = &unk_26C74C710;
      uint64_t v4 = &unk_26C74DEC0;
      goto LABEL_59;
    case 0x16:
      uint64_t v3 = &unk_26C74C720;
      uint64_t v4 = &unk_26C74DE78;
      goto LABEL_59;
    case 0x17:
      uint64_t v3 = &unk_26C74C730;
      uint64_t v4 = &unk_26C74DF38;
      goto LABEL_59;
    case 0x18:
      uint64_t v3 = &unk_26C74C740;
      uint64_t v4 = &unk_26C74DEF0;
      goto LABEL_59;
    case 0x19:
      uint64_t v3 = &unk_26C74C750;
      uint64_t v4 = &unk_26C74DEA8;
      goto LABEL_59;
    case 0x1A:
      uint64_t v3 = &unk_26C74C760;
      uint64_t v4 = &unk_26C74DE60;
      goto LABEL_59;
    case 0x1B:
      uint64_t v3 = &unk_26C74C770;
      uint64_t v4 = &unk_26C74DF20;
      goto LABEL_59;
    case 0x1C:
      uint64_t v3 = &unk_26C74C780;
      uint64_t v4 = &unk_26C74DED8;
      goto LABEL_59;
    case 0x1D:
      uint64_t v3 = &unk_26C74C790;
      uint64_t v4 = &unk_26C74DE90;
      goto LABEL_59;
    case 0x1E:
      uint64_t v3 = &unk_26C74C7A0;
      uint64_t v4 = &unk_26C74DE48;
      goto LABEL_59;
    case 0x1F:
      return result;
    case 0x20:
      return &unk_26C7551D0;
    case 0x21:
      return &unk_26C7551C0;
    case 0x22:
      return &unk_26C754E48;
    case 0x23:
      return &unk_26C755170;
    case 0x24:
      return &unk_26C755180;
    case 0x25:
      return &unk_26C755190;
    case 0x26:
      return &unk_26C7551A0;
    case 0x27:
      return &unk_26C7551B0;
    case 0x28:
      return &unk_26C756E40;
    case 0x29:
      return &unk_26C74C2D0;
    case 0x2A:
      return &unk_26C758108;
    case 0x2B:
      return &unk_26C759D20;
    case 0x2C:
      return &unk_26C756E50;
    case 0x2D:
      return &unk_26C756CC0;
    case 0x2E:
      return &unk_26C75EDC8;
    case 0x2F:
      return &unk_26C759CB0;
    case 0x30:
      return &unk_26C74C3E0;
    case 0x31:
      return &unk_26C754B90;
    case 0x32:
      return &unk_26C74C3F0;
    case 0x33:
      return &unk_26C757FD0;
    case 0x34:
      return &unk_26C750D28;
    case 0x35:
      return &unk_26C7551E0;
    case 0x36:
      return &unk_26C7551F0;
    case 0x37:
      return &unk_26C755160;
    case 0x38:
      uint64_t v3 = &unk_26C7557E0;
      uint64_t v4 = &unk_26C7558A8;
      goto LABEL_59;
    case 0x39:
      uint64_t v3 = &unk_26C755268;
      uint64_t v4 = &unk_26C755278;
LABEL_59:
      if (a2 >= 0) {
        uint64_t result = v3;
      }
      else {
        uint64_t result = v4;
      }
      break;
    default:
      uint64_t result = (void *)MEMORY[0x263F8C288];
      break;
  }
  return result;
}

void *sub_216C7069C(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[734] = (uint64_t)v2;
  sub_216779094(__p, (char *)(*(void *)(MEMORY[0x263F8C230] + 8) & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C75F7D8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C75F868;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 41);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C75F8F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 273);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C75F978;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 505);
  return sub_216C808DC(&v7);
}

void sub_216C70830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C70854(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[735] = (uint64_t)v2;
  sub_216779094(__p, (char *)(*(void *)(MEMORY[0x263F8C250] + 8) & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C75F9F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C75FA78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 45);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C75FAF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 277);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C75FB78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 509);
  return sub_216C808DC(&v7);
}

void sub_216C709E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C70A0C(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[736] = (uint64_t)v2;
  sub_216779094(__p, (char *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C75FBF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C75FC78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 49);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C75FCF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 281);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C75FD78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 513);
  return sub_216C808DC(&v7);
}

void sub_216C70BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C70BC8(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[737] = (uint64_t)v2;
  sub_216779094(__p, (char *)(*(void *)(MEMORY[0x263F8C260] + 8) & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C75FDF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C75FE78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 53);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C75FEF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 285);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C75FF78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 517);
  return sub_216C808DC(&v7);
}

void sub_216C70D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C70D84(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[738] = (uint64_t)v2;
  sub_216779094(__p, (char *)(*(void *)(MEMORY[0x263F8C290] + 8) & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C75FFF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C760078;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 57);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7600F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 289);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C760178;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 521);
  return sub_216C808DC(&v7);
}

void sub_216C70F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C70F40(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[739] = (uint64_t)v2;
  sub_216779094(__p, (char *)(*(void *)(MEMORY[0x263F8C298] + 8) & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7601F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C760278;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 61);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7602F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 293);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C760378;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 525);
  return sub_216C808DC(&v7);
}

void sub_216C710D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C710FC(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[740] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174E4222 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7603F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C760478;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 65);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7604F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 297);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C760578;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 529);
  return sub_216C808DC(&v7);
}

void sub_216C71298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C712BC(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[741] = (uint64_t)v2;
  sub_216779094(__p, (char *)(*(void *)(MEMORY[0x263F8C248] + 8) & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7605F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C760678;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 69);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7606F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 301);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C760778;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 533);
  return sub_216C808DC(&v7);
}

void sub_216C71454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C71478(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[742] = (uint64_t)v2;
  sub_216779094(__p, (char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7607F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C760878;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 73);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7608F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 305);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C760978;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 537);
  return sub_216C808DC(&v7);
}

void sub_216C71610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C71634(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[743] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174BFD94 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7609F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C760A78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 77);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C760AF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 309);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C760B78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 541);
  return sub_216C808DC(&v7);
}

void sub_216C717D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C717F4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[744] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x8000000217473E3CLL & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C760BF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C760C78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 81);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C760CF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 313);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C760D78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 545);
  return sub_216C808DC(&v7);
}

void sub_216C71990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C719B4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[745] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x800000021746880ALL & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C760DF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C760E78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 85);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C760EF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 317);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C760F78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 549);
  return sub_216C808DC(&v7);
}

void sub_216C71B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C71B74(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[749] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174E45A6 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C760FF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C761078;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 101);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7610F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 333);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C761178;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 565);
  return sub_216C808DC(&v7);
}

void sub_216C71D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C71D34(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[750] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174E4576 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7611F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C761278;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 105);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7612F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 337);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C761378;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 569);
  return sub_216C808DC(&v7);
}

void sub_216C71ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C71EF4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[751] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174E4546 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7613F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C761478;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 109);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7614F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 341);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C761578;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 573);
  return sub_216C808DC(&v7);
}

void sub_216C72090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C720B4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[752] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174E4336 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7615F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C761678;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 113);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7616F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 345);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C761778;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 577);
  return sub_216C808DC(&v7);
}

void sub_216C72250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C72274(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[753] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174C2ED4 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7617F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C761878;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 117);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7618F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 349);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C761978;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 581);
  return sub_216C808DC(&v7);
}

void sub_216C72410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C72434(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[754] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174E4366 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7619F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C761A78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 121);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C761AF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 353);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C761B78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 585);
  return sub_216C808DC(&v7);
}

void sub_216C725D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C725F4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[755] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174E4396 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C761BF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C761C78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 125);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C761CF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 357);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C761D78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 589);
  return sub_216C808DC(&v7);
}

void sub_216C72790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C727B4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[756] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174E43C6 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C761DF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C761E78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 129);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C761EF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 361);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C761F78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 593);
  return sub_216C808DC(&v7);
}

void sub_216C72950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C72974(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[757] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174E43F6 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C761FF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C762078;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 133);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7620F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 365);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C762178;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 597);
  return sub_216C808DC(&v7);
}

void sub_216C72B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C72B34(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[758] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174E4426 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7621F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C762278;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 137);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7622F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 369);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C762378;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 601);
  return sub_216C808DC(&v7);
}

void sub_216C72CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C72CF4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[759] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174E4456 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7623F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C762478;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 141);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7624F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 373);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C762578;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 605);
  return sub_216C808DC(&v7);
}

void sub_216C72E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C72EB4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[760] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174E4486 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7625F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C762678;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 145);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7626F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 377);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C762778;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 609);
  return sub_216C808DC(&v7);
}

void sub_216C73050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C73074(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[761] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174E44B6 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7627F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C762878;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 149);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7628F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 381);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C762978;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 613);
  return sub_216C808DC(&v7);
}

void sub_216C73210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C73234(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[762] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174E44E6 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7629F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C762A78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 153);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C762AF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 385);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C762B78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 617);
  return sub_216C808DC(&v7);
}

void sub_216C733D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C733F4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[763] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174E4516 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C762BF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C762C78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 157);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C762CF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 389);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C762D78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 621);
  return sub_216C808DC(&v7);
}

void sub_216C73590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C735B4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[746] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x8000000217452F88 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C762DF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C762E78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 89);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C762EF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 321);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C762F78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 553);
  return sub_216C808DC(&v7);
}

void sub_216C73750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C73774(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[747] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174E4256 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C762FF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C763078;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 93);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7630F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 325);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C763178;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 557);
  return sub_216C808DC(&v7);
}

void sub_216C73910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C73934(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[748] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174E42C6 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7631F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C763278;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 97);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7632F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 329);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C763378;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 561);
  return sub_216C808DC(&v7);
}

void sub_216C73AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C73AF4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[764] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x8000000217473E6ALL & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7633F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C763478;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 161);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7634F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 393);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C763578;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 625);
  return sub_216C808DC(&v7);
}

void sub_216C73C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C73CB4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[765] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x8000000217478DC2 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7635F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C763678;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 165);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7636F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 397);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C763778;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 629);
  return sub_216C808DC(&v7);
}

void sub_216C73E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C73E74(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[766] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x8000000217474036 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7637F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C763878;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 169);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7638F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 401);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C763978;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 633);
  return sub_216C808DC(&v7);
}

void sub_216C74010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C74034(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[767] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x8000000217469458 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7639F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C763A78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 173);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C763AF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 405);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C763B78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 637);
  return sub_216C808DC(&v7);
}

void sub_216C741D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C741F4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[768] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174750CCLL & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C763BF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C763C78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 177);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C763CF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 409);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C763D78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 641);
  return sub_216C808DC(&v7);
}

void sub_216C74390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C743B4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[769] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174686FFLL & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C763DF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C763E78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 181);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C763EF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 413);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C763F78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 645);
  return sub_216C808DC(&v7);
}

void sub_216C74550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C74574(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[770] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x8000000217478D2CLL & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C763FF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C764078;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 185);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7640F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 417);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C764178;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 649);
  return sub_216C808DC(&v7);
}

void sub_216C74710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C74734(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[771] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x8000000217469618 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7641F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C764278;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 189);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7642F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 421);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C764378;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 653);
  return sub_216C808DC(&v7);
}

void sub_216C748D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C748F4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[772] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x8000000217478D90 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7643F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C764478;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 193);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7644F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 425);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C764578;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 657);
  return sub_216C808DC(&v7);
}

void sub_216C74A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C74AB4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[773] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x800000021746952ELL & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7645F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C764678;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 197);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7646F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 429);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C764778;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 661);
  return sub_216C808DC(&v7);
}

void sub_216C74C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C74C74(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[774] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174694DALL & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7647F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C764878;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 201);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7648F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 433);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C764978;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 665);
  return sub_216C808DC(&v7);
}

void sub_216C74E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C74E34(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[775] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x800000021746C160 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7649F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C764A78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 205);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C764AF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 437);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C764B78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 669);
  return sub_216C808DC(&v7);
}

void sub_216C74FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C74FF4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[776] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x8000000217478FF4 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C764BF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C764C78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 209);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C764CF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 441);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C764D78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 673);
  return sub_216C808DC(&v7);
}

void sub_216C75190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C751B4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[777] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x8000000217469580 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C764DF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C764E78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 213);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C764EF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 445);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C764F78;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 677);
  return sub_216C808DC(&v7);
}

void sub_216C75350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C75374(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[778] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x8000000217478E4CLL & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C764FF8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C765078;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 217);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7650F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 449);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C765178;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 681);
  return sub_216C808DC(&v7);
}

void sub_216C75510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C75534(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[779] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x8000000217481E6ALL & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7651F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C765278;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 221);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7652F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 453);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C765378;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 685);
  return sub_216C808DC(&v7);
}

void sub_216C756D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C756F4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[780] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x800000021747579ELL & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7653F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C765478;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 225);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7654F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 457);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C765578;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 689);
  return sub_216C808DC(&v7);
}

void sub_216C75890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C758B4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[781] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x800000021741274FLL & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7655F8;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C765678;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 229);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7657B0;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 461);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C765830;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 693);
  return sub_216C808DC(&v7);
}

void sub_216C75A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C75A74(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[782] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x8000000217478F98 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7658B0;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C765930;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 233);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7659B0;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 465);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C765A30;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 697);
  return sub_216C808DC(&v7);
}

void sub_216C75C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C75C34(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[783] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x8000000217478F42 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C765AB0;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C765B30;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 237);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C765BB0;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 469);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C765C30;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 701);
  return sub_216C808DC(&v7);
}

void sub_216C75DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C75DF4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[784] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174C2EA0 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C765CB0;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C765D30;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 241);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C765DB0;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 473);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C765E30;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 705);
  return sub_216C808DC(&v7);
}

void sub_216C75F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C75FB4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[785] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174574E5 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C765EB0;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C765F30;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 245);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C765FB0;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 477);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C766030;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 709);
  return sub_216C808DC(&v7);
}

void sub_216C76150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C76174(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[786] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x80000002174693E0 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7660B0;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C766130;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 249);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7661B0;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 481);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C766230;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 713);
  return sub_216C808DC(&v7);
}

void sub_216C76310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C76334(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[787] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x8000000217478E00 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7662B0;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C766330;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 253);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7663B0;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 485);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C766430;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 717);
  return sub_216C808DC(&v7);
}

void sub_216C764D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C764F4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[788] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x8000000217469498 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7664B0;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C766530;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 257);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7665B0;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 489);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C766630;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 721);
  return sub_216C808DC(&v7);
}

void sub_216C76690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C766B4(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[789] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x8000000217468BA7 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7666B0;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C766730;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 261);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7667B0;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 493);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C766830;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 725);
  return sub_216C808DC(&v7);
}

void sub_216C76850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C76874(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = 0;
  v2[1] = 0;
  a1[790] = (uint64_t)v2;
  sub_216779094(__p, (char *)(0x8000000217478EC2 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v7 = __p;
  uint64_t v3 = sub_216C973FC(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v7);
  unint64_t v7 = (void **)&unk_26C7668B0;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C979D8(&v7, (void *)(v3 + 32));
  sub_216C773C8(&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (void **)&unk_26C766930;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 265);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C7669B0;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 497);
  sub_216C808DC(&v7);
  unint64_t v7 = (void **)&unk_26C766A30;
  char v8 = a1;
  uint64_t v9 = v2;
  off_t v10 = &v7;
  sub_216C98994(&v7, a1 + 729);
  return sub_216C808DC(&v7);
}

void sub_216C76A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_IsKnownSection(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this, const char *a2)
{
  uint64_t v3 = 0;
  do
  {
    int v4 = strcmp((&off_2642945E0)[v3], (const char *)this);
    if (!v4) {
      break;
    }
    BOOL v5 = v3 == 10;
    v3 += 2;
  }
  while (!v5);
  return v4 == 0;
}

void *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyField(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91630, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91630))
  {
    dword_267B91624 = -1;
    __cxa_guard_release(&qword_267B91630);
  }
  return &unk_267B91620;
}

uint64_t *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91650, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91650))
  {
    qword_267B91638 = 0;
    unk_267B91640 = 0;
    qword_267B91648 = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267B91638, &dword_216758000);
    __cxa_guard_release(&qword_267B91650);
  }
  return &qword_267B91638;
}

uint64_t *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91660, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91660))
  {
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B91658, &dword_216758000);
    __cxa_guard_release(&qword_267B91660);
  }
  return &qword_267B91658;
}

double pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Spec::Spec(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12);
  double result = *(double *)(a2 + 4);
  *(double *)a1 = result;
  *(_DWORD *)(a1 + 8) = v2;
  return result;
}

{
  int v2;
  double result;

  int v2 = *(_DWORD *)(a2 + 12);
  double result = *(double *)(a2 + 4);
  *(double *)a1 = result;
  *(_DWORD *)(a1 + 8) = v2;
  return result;
}

double pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Spec_0_0_1::Spec_0_0_1(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  double result = *(double *)a2;
  *(void *)(a1 + 4) = *(void *)a2;
  *(_DWORD *)(a1 + 12) = v2;
  return result;
}

{
  int v2;
  double result;

  int v2 = *(_DWORD *)(a2 + 8);
  double result = *(double *)a2;
  *(void *)(a1 + 4) = *(void *)a2;
  *(_DWORD *)(a1 + 12) = v2;
  return result;
}

pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *this, const char *__s, uint64_t a3, uint64_t a4)
{
  *((void *)this + 2) = a3;
  *((void *)this + 3) = a4;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  if (strlen(__s) < 0x10
    || (v7[0] = "usd/crateFile.cpp",
        v7[1] = "_Section",
        _DWORD v7[2] = 4800,
        v7[3] = "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section(const char *, int64_t, int64_t)",
        char v8 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "strlen(inName) <= _SectionNameMaxLength", 0) & 1) != 0))
  {
    strcpy((char *)this, __s);
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::operator<<(void *a1, uint64_t a2)
{
  sub_216779180(a1, (uint64_t)"ValueRep enum=", 14);
  std::ostream::operator<<();
  if (a2 < 0) {
    sub_216779180(a1, (uint64_t)" (array)", 8);
  }
  sub_216779180(a1, (uint64_t)" payload=", 9);

  return std::ostream::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::operator<<(void *a1)
{
  sub_216779180(a1, (uint64_t)"TimeSamples with ", 17);
  long long v1 = (void *)std::ostream::operator<<();

  return sub_216779180(v1, (uint64_t)" samples", 8);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::operator<<()
{
  return std::ostream::operator<<();
}

uint64_t *sub_216C76E1C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  BOOL v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C75EDC8, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C75EDC8, (char *)0x30, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    char v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216C76EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_216C76F20(uint64_t a1, void *a2)
{
  sub_21691B58C(a1, a2);
  sub_216C76F54(a1 + 16, v3);
  return a1;
}

uint64_t sub_216C76F54(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 16);
  char v4 = (void *)*v3;
  void *v3 = 0;
  if (v4)
  {
    do
    {
      uint64_t v5 = (uint64_t)v4;
      char v4 = (void *)*v4;
      tbb::internal::deallocate_via_handler_v3(v5, a2);
    }
    while (v4);
    uint64_t v3 = *(void **)(a1 + 16);
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  tbb::internal::deallocate_via_handler_v3((uint64_t)v3, a2);
  return a1;
}

atomic_ullong **sub_216C76FAC(atomic_ullong **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = operator new(0x258uLL);
  int v9 = sub_216C7700C(v8, a2, a3, a4);
  *a1 = v9;
  atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
  return a1;
}

void *sub_216C7700C(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  *a1 = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  *a2 = 0;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v5 + a3;
  if (a4 == -1) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = a4;
  }
  a1[4] = v7;
  sub_216C7708C((uint64_t)(a1 + 5), 8uLL, &v9);
  return a1;
}

void sub_216C77074(_Unwind_Exception *a1)
{
  sub_2168351F0(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216C7708C(uint64_t a1, unint64_t a2, _WORD *a3)
{
  *(_WORD *)a1 = *a3;
  *(void *)(a1 + 24) = 0;
  uint64_t v5 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x38);
  v5[6] = 0;
  void *v5 = 0;
  *(void *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 44) = 1082130432;
  if (a2 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = a2;
  }
  unint64_t v7 = 2 * v6 - 1;
  BOOL v8 = HIDWORD(v7) != 0;
  __dmb(0xBu);
  if (HIDWORD(v7)) {
    v7 >>= 32;
  }
  char v9 = 32 * v8;
  if (v7 >= 0x10000)
  {
    v7 >>= 16;
    char v9 = (32 * v8) | 0x10;
  }
  if (v7 >= 0x100)
  {
    v7 >>= 8;
    v9 |= 8u;
  }
  if (v7 >= 0x10)
  {
    v7 >>= 4;
    v9 |= 4u;
  }
  if (v7 >= 4)
  {
    v7 >>= 2;
    v9 += 2;
  }
  *(void *)(a1 + 8) = 1 << (((v7 & 2) != 0) + v9);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v11 = *(void *)(a1 + 32);
  sub_216912714(a1, 0, &v11);
  return a1;
}

void sub_216C771D0(_Unwind_Exception *a1, void *a2)
{
  sub_216C76F54(v2 + 16, a2);
  _Unwind_Resume(a1);
}

void **sub_216C771E4(void **a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_216C76F20((uint64_t)v3 + 40, a2);
    sub_2168351F0((uint64_t)v3 + 8, 0);
    operator delete(v3);
  }
  return a1;
}

void **sub_216C77240(void ***a1)
{
  sub_216C66CB4(a1);

  return sub_216C771E4((void **)a1, v2);
}

void sub_216C7727C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_216C772D0((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_216C772D0(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = v2 - 64;
    do
    {
      if (*(__int16 *)(v4 + 4) != -1)
      {
        sub_216C77378(v4);
        *(_WORD *)(v4 + 4) = -1;
      }
      BOOL v5 = v4 == v3;
      v4 -= 64;
    }
    while (!v5);
  }
  a1[1] = v3;
}

uint64_t sub_216C77338(uint64_t a1)
{
  if (*(__int16 *)(a1 + 4) != -1)
  {
    sub_216C77378(a1);
    *(_WORD *)(a1 + 4) = -1;
  }
  return a1;
}

void sub_216C77378(uint64_t a1)
{
  sub_216C773C8((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

void *sub_216C773C8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

unint64_t sub_216C7744C()
{
  v0 = (int *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_MMAP_PREFETCH_KB);
  if (!v0) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>();
  }
  int v1 = *v0;
  unint64_t v2 = sub_216C6628C() + (v1 << 10) - 1;
  unint64_t v3 = (sub_216C774E4() & v2) >> 10;
  if (v1 != v3) {
    fprintf((FILE *)*MEMORY[0x263EF8348], "Rounded USDC_MMAP_PREFETCH_KB value %d to %d", v1, v3);
  }
  return v3;
}

uint64_t sub_216C774E4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91690, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91690))
  {
    qword_267B91688 = ~(unint64_t)(sub_216C6628C() - 1);
    __cxa_guard_release(&qword_267B91690);
  }
  return qword_267B91688;
}

void sub_216C77548(_Unwind_Exception *a1)
{
}

uint64_t sub_216C77560(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4)
{
  v30[9] = *MEMORY[0x263EF8340];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  if (*((char *)a4 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 224), *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v7 = *a4;
    *(void *)(a1 + 240) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 224) = v7;
  }
  if (*(char *)(a2 + 6535) < 0)
  {
    if (*(void *)(a2 + 6520)) {
      goto LABEL_6;
    }
  }
  else if (*(unsigned char *)(a2 + 6535))
  {
LABEL_6:
    char v8 = *(unsigned char *)(a2 + 6370);
    *(_WORD *)(a1 + 248) = *(_WORD *)(a2 + 6368);
    *(unsigned char *)(a1 + 250) = v8;
    goto LABEL_10;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B916A0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v23 = __cxa_guard_acquire(&qword_267B916A0);
    if (v23)
    {
      uint64_t v25 = sub_216C77BA8(v23, v24);
      word_267B91698 = v25;
      byte_267B9169A = BYTE2(v25);
      __cxa_guard_release(&qword_267B916A0);
    }
  }
  __int16 v9 = word_267B91698;
  *(unsigned char *)(a1 + 250) = byte_267B9169A;
  *(_WORD *)(a1 + 248) = v9;
LABEL_10:
  off_t v10 = (uint64_t *)(a1 + 256);
  sub_216C77D38((void *)(a1 + 256), *a3);
  *(_OWORD *)(a1 + 720) = *(_OWORD *)a3;
  *a3 = 0;
  a3[1] = 0;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v28);
  uint64_t v26 = 0;
  uint64_t v27 = v29;
  uint64_t v11 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v26, 0x20uLL);
  *((unsigned char *)v11 - 11) = 1;
  void *v11 = &unk_26C75F160;
  v11[1] = a1;
  v11[2] = a2;
  v11[3] = v30;
  (**(void (***)(void))*(v11 - 5))();
  uint64_t v26 = 0;
  uint64_t v27 = v29;
  uint64_t v12 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v26, 0x20uLL);
  *((unsigned char *)v12 - 11) = 1;
  void *v12 = &unk_26C75F1A8;
  v12[1] = a1;
  v12[2] = a2;
  v12[3] = v30;
  (**(void (***)(void))*(v12 - 5))();
  uint64_t v26 = 0;
  uint64_t v27 = v29;
  uint64_t v13 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v26, 0x20uLL);
  *((unsigned char *)v13 - 11) = 1;
  void *v13 = &unk_26C75F1F0;
  v13[1] = a1;
  v13[2] = a2;
  v13[3] = v30;
  (**(void (***)(void))*(v13 - 5))();
  uint64_t v26 = 0;
  uint64_t v27 = v29;
  uint64_t v14 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v26, 0x20uLL);
  *((unsigned char *)v14 - 11) = 1;
  void *v14 = &unk_26C75F238;
  v14[1] = a1;
  v14[2] = a2 + 72;
  v14[3] = v30;
  (**(void (***)(void))*(v14 - 5))();
  uint64_t v26 = 0;
  uint64_t v27 = v29;
  unint64_t v15 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v26, 0x20uLL);
  *((unsigned char *)v15 - 11) = 1;
  *unint64_t v15 = &unk_26C75F280;
  v15[1] = a1;
  v15[2] = a2;
  v15[3] = v30;
  (**(void (***)(void))*(v15 - 5))();
  uint64_t v26 = 0;
  uint64_t v27 = v29;
  uint64_t v16 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v26, 0x20uLL);
  *((unsigned char *)v16 - 11) = 1;
  *uint64_t v16 = &unk_26C75F2C8;
  v16[1] = a1;
  v16[2] = a2;
  v16[3] = v30;
  (**(void (***)(void))*(v16 - 5))();
  uint64_t v17 = *(void *)(a2 + 6336);
  uint64_t v18 = *(void *)(a2 + 6344);
  if (v17 != v18)
  {
    for (uint64_t i = v17 + 32; i != v18; i += 32)
    {
      if (*(void *)(i + 16) < *(void *)(v17 + 16)) {
        uint64_t v17 = i;
      }
    }
  }
  if (v17 == v18) {
    uint64_t v20 = 88;
  }
  else {
    uint64_t v20 = *(void *)(v17 + 16);
  }
  uint64_t v21 = *(void *)(a1 + 272);
  if (v21 > v20 || *(void *)(a1 + 288) + v21 < v20)
  {
    sub_216C7A9E4(a1 + 256);
    *off_t v10 = v20;
    off_t v10 = (uint64_t *)(a1 + 272);
  }
  *off_t v10 = v20;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v28);
  return a1;
}

void sub_216C77AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  __cxa_guard_abort(&qword_267B916A0);
  if (*(char *)(v3 + 247) < 0) {
    operator delete(*v8);
  }
  sub_216C7ACE0((void ***)va);
  sub_216C7AD78(v7);
  sub_216850320(v6);
  sub_216C7AE00(v5);
  sub_216850298(v4);
  sub_2168C08A0(v3);
  _Unwind_Resume(a1);
}

void *sub_216C77B54(void *a1)
{
  sub_216C7894C(a1 + 53);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(a1 + 11));
  sub_216C789D0(a1 + 8);
  sub_216C78B28(a1 + 5);
  unint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

uint64_t sub_216C77BA8(uint64_t a1, const char *a2)
{
  unint64_t v2 = atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_WRITE_NEW_USDC_FILES_AS_VERSION);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>();
  }
  if (*(char *)(v2 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)v2, *(void *)(v2 + 8));
  }
  else
  {
    long long v3 = *(_OWORD *)v2;
    uint64_t v19 = *(void *)(v2 + 16);
    *(_OWORD *)__p = v3;
  }
  if (v19 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  int v5 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Version::FromString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Version *)v4, a2);
  if ((_BYTE)v5) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = (v5 & 0xFF00 | (v5 << 16) & 0xFFFFFF | BYTE2(v5)) == 0;
  }
  if (v7) {
    goto LABEL_18;
  }
  int v8 = BYTE1(v5);
  int v9 = BYTE2(v5);
  if (BYTE1(v5) < 0xAu)
  {
    unsigned __int8 v10 = 0;
    goto LABEL_22;
  }
  if (BYTE1(v5) != 10 || BYTE2(v5) != 0)
  {
LABEL_18:
    v16[0] = "usd/crateFile.cpp";
    v16[1] = "_GetVersionForNewlyCreatedFiles";
    v16[2] = 400;
    v16[3] = "CrateFile::Version pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_GetVersionForNewlyCreatedFiles()";
    char v17 = 0;
    if (v19 >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v16, (pxrInternal__aapl__pxrReserved__ *)"Invalid value '%s' for USD_WRITE_NEW_USDC_FILES_AS_VERSION - falling back to default '%s'", v6, v12, "0.9.0");
    uint64_t v14 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Version::FromString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Version *)"0.9.0", v13);
    unsigned __int8 v10 = v14;
    int v8 = BYTE1(v14);
    int v9 = BYTE2(v14);
    goto LABEL_22;
  }
  int v9 = 0;
  unsigned __int8 v10 = 0;
  int v8 = 10;
LABEL_22:
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  return (v9 << 16) | (v8 << 8) | v10;
}

void sub_216C77D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C77D38(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = a2;
  a1[2] = 0;
  a1[3] = operator new[](0x80000uLL);
  a1[4] = 0;
  a1[5] = &unk_26C75EF98;
  uint64_t v4 = (void *)tbb::internal::NFS_Allocate(1uLL, 704, 0, v3);
  a1[6] = v4;
  bzero(v4, 0x2C0uLL);
  *(int64x2_t *)(a1[6] + 256) = vdupq_n_s64(0x10uLL);
  a1[5] = &unk_26C75EF28;
  a1[8] = &unk_26C75F048;
  uint64_t v6 = (void *)tbb::internal::NFS_Allocate(1uLL, 704, 0, v5);
  a1[9] = v6;
  bzero(v6, 0x2C0uLL);
  *(_OWORD *)(a1[9] + 256) = xmmword_217481FF0;
  a1[8] = &unk_26C75EFD8;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(a1 + 11));
  a1[56] = 0;
  BOOL v7 = operator new(0x20uLL);
  *BOOL v7 = &unk_26C75F088;
  v7[1] = a1 + 11;
  _DWORD v7[2] = a1;
  a1[56] = v7;
  a1[57] = 0;
  int v8 = 7;
  do
  {
    __p[0] = operator new[](0x80000uLL);
    __p[1] = 0;
    uint64_t v9 = a1[6];
    unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(v9 + 128), 1uLL);
    sub_2168DABE8((void *)(v9 + 40 * ((3 * (_BYTE)add) & 7) + 384), (uint64_t)__p, add, a1 + 5, (uint64_t (*)(void *, uint64_t))sub_216C7893C);
    uint64_t v11 = __p[0];
    __p[0] = 0;
    if (v11) {
      operator delete[](v11);
    }
    --v8;
  }
  while (v8);
  return a1;
}

void sub_216C77F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher(v12);
  sub_216C789D0(v11);
  sub_216C78B28(v10);
  uint64_t v14 = *(void **)(v9 + 24);
  *(void *)(v9 + 24) = 0;
  if (v14) {
    operator delete[](v14);
  }
  _Unwind_Resume(a1);
}

void sub_216C77F84(void *a1)
{
  int v1 = (void *)sub_216C78B28(a1);

  operator delete(v1);
}

uint64_t sub_216C77FAC(void *a1)
{
  return (*(uint64_t (**)(void *, uint64_t))(*a1 + 32))(a1, 16 * *(void *)(a1[1] + 256) + 16);
}

uint64_t sub_216C77FDC(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, 16 * *(void *)(a1[1] + 256) + 16);
}

uint64_t sub_216C7800C(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  uint64_t v4 = tbb::internal::NFS_Allocate((unint64_t)this, 1, 0, a4);
  if (!v4) {
    tbb::internal::throw_exception_v4(1);
  }
  return v4;
}

uint64_t sub_216C7804C(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void sub_216C78054(void *a1)
{
  int v1 = (void *)sub_216C789D0(a1);

  operator delete(v1);
}

uint64_t sub_216C7807C(void *a1)
{
  return (*(uint64_t (**)(void *, uint64_t))(*a1 + 32))(a1, 24 * *(void *)(a1[1] + 256) + 16);
}

uint64_t sub_216C780B0(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, 24 * *(void *)(a1[1] + 256) + 16);
}

uint64_t sub_216C780E4(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  uint64_t v4 = tbb::internal::NFS_Allocate((unint64_t)this, 1, 0, a4);
  if (!v4) {
    tbb::internal::throw_exception_v4(1);
  }
  return v4;
}

uint64_t sub_216C78124(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

__n128 sub_216C78134(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = &unk_26C75F088;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216C78188(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75F088;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216C781C0(uint64_t a1, uint64_t a2)
{
  return sub_216C78214((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_216C781C8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75F140)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C78208()
{
  return &unk_26C75F140;
}

uint64_t sub_216C78214(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 256);
  v8[0] = 0;
  v8[1] = v5;
  uint64_t v6 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v8, 0x20uLL);
  *((unsigned char *)v6 - 11) = 1;
  *uint64_t v6 = &unk_26C75F108;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = v4 + 264;
  return (**(uint64_t (***)(void))*(v6 - 5))();
}

uint64_t sub_216C782D8(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v11);
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = atomic_load(*(unint64_t **)(a1 + 16));
  sub_216C783C4(*(void **)(v2 + 8));
  unint64_t v4 = v3;
  atomic_compare_exchange_strong(*(atomic_ullong *volatile *)(a1 + 16), &v4, 0);
  if (v4 != v3)
  {
    do
    {
      sub_216C783C4(*(void **)(v2 + 8));
      unint64_t v5 = v4;
      atomic_compare_exchange_strong(*(atomic_ullong *volatile *)(a1 + 16), &v5, 0);
      BOOL v6 = v5 == v4;
      unint64_t v4 = v5;
    }
    while (!v6);
  }
  unint64_t v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v8 = v11;
  unint64_t v9 = atomic_load((unint64_t *)(v7 + 144));
  if (v8 < v9
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v11, (atomic_ullong *)v7))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v11, *(void *)(a1 + 24));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v11);
  return 0;
}

void sub_216C783AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_216C783C4(void *a1)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  for (uint64_t i = operator new[](0x80000uLL);
        sub_216C786F0((uint64_t)(a1 + 8), (uint64_t)&i);
        sub_2168DABE8((void *)(v6 + 40 * ((3 * (_BYTE)add) & 7) + 384), (uint64_t)&i, add, a1 + 5, (uint64_t (*)(void *, uint64_t))sub_216C7893C))
  {
    uint64_t v2 = a1[1];
    unint64_t v4 = i;
    uint64_t v3 = v18;
    uint64_t v5 = v19;
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v27);
    if ((*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v2 + 24))(v2, v4, v3, v5) != v3)
    {
      memset(&v26, 0, sizeof(v26));
      if (!sub_216975F44((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v27))
      {
        uint64_t v20 = 0;
        uint64_t __dst = 0;
        unint64_t v22 = 0;
        unint64_t v8 = sub_216862604(&v27, 0);
        uint64_t v9 = sub_216878D10();
        if (v8 != (void *)v9)
        {
          unint64_t v10 = (unint64_t)__dst;
          do
          {
            unint64_t v11 = (long long *)(v8 + 7);
            if (v10 >= v22)
            {
              unint64_t v10 = sub_2167E9A44((uint64_t *)&v20, v11);
            }
            else
            {
              if (*((char *)v8 + 79) < 0)
              {
                sub_216778F24((unsigned char *)v10, (void *)v8[7], v8[8]);
              }
              else
              {
                long long v12 = *v11;
                *(void *)(v10 + 16) = v8[9];
                *(_OWORD *)unint64_t v10 = v12;
              }
              v10 += 24;
            }
            uint64_t __dst = (void *)v10;
            unint64_t v8 = (void *)v8[1];
          }
          while (v8 != (void *)v9);
        }
        MEMORY[0x21D4477E0](&v26, ": ");
        pxrInternal__aapl__pxrReserved__::TfStringJoin("; ", &v20, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(&v26, (const std::string::value_type *)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
        sub_216782F20((void ***)&__p);
      }
      uint64_t v20 = (std::string *)"usd/crateFile.cpp";
      uint64_t __dst = "WriteToAsset";
      unint64_t v22 = 194;
      uint64_t v23 = "int64_t pxrInternal__aapl__pxrReserved__::WriteToAsset(ArWritableAsset *, const void *, int64_t, int64_t)";
      char v24 = 0;
      unint64_t v15 = &v26;
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unint64_t v15 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed writing usdc data%s", (const char *)v15);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v27);
    uint64_t v18 = 0;
    uint64_t v6 = a1[6];
    unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(v6 + 128), 1uLL);
  }
  uint64_t v16 = i;
  uint64_t i = 0;
  if (v16) {
    operator delete[](v16);
  }
}

void sub_216C7865C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::string __p = &a13;
  sub_216782F20((void ***)&__p);
  if (a29 < 0) {
    operator delete(a24);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)(v29 - 88));
  if (a10) {
    operator delete[](a10);
  }
  _Unwind_Resume(a1);
}

BOOL sub_216C786F0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(atomic_ullong **)(a1 + 8);
  while (1)
  {
    unint64_t v5 = *v4;
    __dmb(0xBu);
    atomic_ullong v6 = v4[16];
    __dmb(0xBu);
    uint64_t v7 = v6 - v5;
    BOOL v8 = v7 > 0;
LABEL_3:
    if (v7 < 1) {
      return 0;
    }
    while (1)
    {
      unint64_t v9 = v5;
      atomic_compare_exchange_strong(v4, &v9, v5 + 1);
      if (v9 == v5) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v4, 0, memory_order_relaxed);
      if (add_explicit != v5)
      {
        atomic_ullong v11 = v4[16];
        __dmb(0xBu);
        uint64_t v7 = v11 - add_explicit;
        unint64_t v5 = add_explicit;
        goto LABEL_3;
      }
    }
    if (sub_216C787B0(&v4[5 * ((3 * v5) & 7) + 48], a2, v5, a1)) {
      return v8;
    }
  }
}

BOOL sub_216C787B0(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8 = a3 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = a1[1];
  __dmb(0xBu);
  if (v9 != (a3 & 0xFFFFFFFFFFFFFFF8))
  {
    while (1)
    {
      uint64_t v12 = a1[1];
      __dmb(0xBu);
      if (v12 == v8) {
        break;
      }
      sched_yield();
    }
  }
  uint64_t v10 = a1[3];
  __dmb(0xBu);
  if (v10 == v8)
  {
    while (1)
    {
      uint64_t v11 = a1[3];
      __dmb(0xBu);
      if (v11 != v8) {
        break;
      }
      sched_yield();
    }
  }
  uint64_t v13 = *a1;
  __dmb(0xBu);
  uint64_t v14 = *(void *)(a4 + 8);
  uint64_t v15 = *(void *)(v14 + 256) - 1;
  uint64_t v16 = v15 & (a3 >> 3);
  if (v16 == v15) {
    uint64_t v17 = v13;
  }
  else {
    uint64_t v17 = 0;
  }
  v20[0] = v8 + 8;
  v20[1] = (uint64_t)a1;
  v20[2] = v17;
  v20[3] = a4;
  uint64_t v18 = *(void *)(v13 + 8) & (1 << v16);
  if (v18) {
    sub_216C788CC((uint64_t)a1, a2, v13, v16);
  }
  else {
    atomic_fetch_add((atomic_ullong *volatile)(v14 + 272), 0xFFFFFFFFFFFFFFFFLL);
  }
  sub_2168DAB04(v20);
  return v18 != 0;
}

void sub_216C788B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216C788CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 + 24 * a4;
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v6 = v5 + 16;
  *(void *)uint64_t v6 = 0;
  unint64_t v8 = *(void **)a2;
  *(void *)a2 = v7;
  if (v8) {
    operator delete[](v8);
  }
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v6 + 8);
  uint64_t v9 = *(void **)v6;
  *(void *)uint64_t v6 = 0;
  if (v9)
  {
    operator delete[](v9);
  }
}

void *sub_216C7893C(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  *a2 = 0;
  *__n128 result = v2;
  result[1] = v3;
  return result;
}

void *sub_216C7894C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_216C789D0(void *a1)
{
  *a1 = &unk_26C75EFD8;
  sub_216C78A30((uint64_t)a1);
  sub_2168D9E50((uint64_t)a1);

  return sub_216C78ADC((uint64_t)a1, v2);
}

void sub_216C78A30(uint64_t a1)
{
  __p[1] = 0;
  __p[2] = 0;
  __p[0] = operator new[](0x80000uLL);
  while (1)
  {
    uint64_t v2 = *(uint64_t **)(a1 + 8);
    uint64_t v3 = v2[16];
    __dmb(0xBu);
    uint64_t v4 = *v2;
    __dmb(0xBu);
    uint64_t v5 = v2[16];
    __dmb(0xBu);
    if (v3 == v5)
    {
      uint64_t v6 = v2[34];
      __dmb(0xBu);
      if (v3 == v6 + v4) {
        break;
      }
    }
    sub_216C786F0(a1, (uint64_t)__p);
  }
  uint64_t v7 = __p[0];
  __p[0] = 0;
  if (v7) {
    operator delete[](v7);
  }
}

void sub_216C78AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete[](__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C78ADC(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26C75F048;
  tbb::internal::NFS_Free(*(tbb::internal **)(a1 + 8), a2);
  return a1;
}

uint64_t sub_216C78B28(void *a1)
{
  *a1 = &unk_26C75EF28;
  sub_216C78B88((uint64_t)a1);
  sub_2168D9E50((uint64_t)a1);

  return sub_216C78C30((uint64_t)a1, v2);
}

void sub_216C78B88(uint64_t a1)
{
  __p[0] = operator new[](0x80000uLL);
  __p[1] = 0;
  while (1)
  {
    uint64_t v2 = *(uint64_t **)(a1 + 8);
    uint64_t v3 = v2[16];
    __dmb(0xBu);
    uint64_t v4 = *v2;
    __dmb(0xBu);
    uint64_t v5 = v2[16];
    __dmb(0xBu);
    if (v3 == v5)
    {
      uint64_t v6 = v2[34];
      __dmb(0xBu);
      if (v3 == v6 + v4) {
        break;
      }
    }
    sub_216C78C7C(a1, (uint64_t)__p);
  }
  uint64_t v7 = __p[0];
  __p[0] = 0;
  if (v7) {
    operator delete[](v7);
  }
}

void sub_216C78C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete[](__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C78C30(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26C75EF98;
  tbb::internal::NFS_Free(*(tbb::internal **)(a1 + 8), a2);
  return a1;
}

BOOL sub_216C78C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(atomic_ullong **)(a1 + 8);
  while (1)
  {
    unint64_t v5 = *v4;
    __dmb(0xBu);
    atomic_ullong v6 = v4[16];
    __dmb(0xBu);
    uint64_t v7 = v6 - v5;
    BOOL v8 = v7 > 0;
LABEL_3:
    if (v7 < 1) {
      return 0;
    }
    while (1)
    {
      unint64_t v9 = v5;
      atomic_compare_exchange_strong(v4, &v9, v5 + 1);
      if (v9 == v5) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v4, 0, memory_order_relaxed);
      if (add_explicit != v5)
      {
        atomic_ullong v11 = v4[16];
        __dmb(0xBu);
        uint64_t v7 = v11 - add_explicit;
        unint64_t v5 = add_explicit;
        goto LABEL_3;
      }
    }
    if (sub_216C78D3C(&v4[5 * ((3 * v5) & 7) + 48], a2, v5, a1)) {
      return v8;
    }
  }
}

BOOL sub_216C78D3C(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8 = a3 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = a1[1];
  __dmb(0xBu);
  if (v9 != (a3 & 0xFFFFFFFFFFFFFFF8))
  {
    while (1)
    {
      uint64_t v12 = a1[1];
      __dmb(0xBu);
      if (v12 == v8) {
        break;
      }
      sched_yield();
    }
  }
  uint64_t v10 = a1[3];
  __dmb(0xBu);
  if (v10 == v8)
  {
    while (1)
    {
      uint64_t v11 = a1[3];
      __dmb(0xBu);
      if (v11 != v8) {
        break;
      }
      sched_yield();
    }
  }
  uint64_t v13 = *a1;
  __dmb(0xBu);
  uint64_t v14 = *(void *)(a4 + 8);
  uint64_t v15 = *(void *)(v14 + 256) - 1;
  uint64_t v16 = v15 & (a3 >> 3);
  if (v16 == v15) {
    uint64_t v17 = v13;
  }
  else {
    uint64_t v17 = 0;
  }
  v20[0] = v8 + 8;
  v20[1] = (uint64_t)a1;
  v20[2] = v17;
  v20[3] = a4;
  uint64_t v18 = *(void *)(v13 + 8) & (1 << v16);
  if (v18) {
    sub_216C78E58((uint64_t)a1, a2, v13, v16);
  }
  else {
    atomic_fetch_add((atomic_ullong *volatile)(v14 + 272), 0xFFFFFFFFFFFFFFFFLL);
  }
  sub_2168DAB04(v20);
  return v18 != 0;
}

void sub_216C78E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216C78E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = (void **)(a3 + 16 + 16 * a4);
  atomic_ullong v6 = *v5;
  void *v5 = 0;
  uint64_t v7 = *(void **)a2;
  *(void *)a2 = v6;
  if (v7) {
    operator delete[](v7);
  }
  unint64_t v8 = *v5;
  *(void *)(a2 + 8) = v5[1];
  void *v5 = 0;
  if (v8)
  {
    operator delete[](v8);
  }
}

uint64_t sub_216C78ECC(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216C78F70((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)(a1 + 8));
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 24));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216C78F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_216C78F70(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a1)
{
  int v1 = a1[1];
  uint64_t v2 = *((void *)v1 + 792);
  uint64_t v3 = *((void *)v1 + 793);
  if (v2 != v3)
  {
    unint64_t v5 = *a1;
    unint64_t v6 = (uint64_t *)((char *)*a1 + 200);
    do
    {
      uint64_t v7 = 0;
      do
      {
        int v8 = strcmp((&off_2642945E0)[v7], (const char *)v2);
        if (!v8) {
          break;
        }
        BOOL v9 = v7 == 10;
        v7 += 2;
      }
      while (!v9);
      if (v8)
      {
        sub_216C790A4(v2, a1[1], (__sFILE **)&__p);
        unint64_t v10 = *((void *)v5 + 26);
        if (v10 >= *((void *)v5 + 27))
        {
          uint64_t v12 = sub_216C7911C(v6, (char *)v2, (uint64_t *)&__p, (void *)(v2 + 24));
          uint64_t v13 = __p;
          *((void *)v5 + 26) = v12;
          std::string __p = 0;
          if (v13) {
            operator delete[](v13);
          }
        }
        else
        {
          sub_216779094(*((void **)v5 + 26), (char *)v2);
          uint64_t v11 = *(void *)(v2 + 24);
          *(void *)(v10 + 24) = __p;
          *(void *)(v10 + 32) = v11;
          *((void *)v5 + 26) = v10 + 40;
        }
      }
      v2 += 32;
    }
    while (v2 != v3);
  }
}

void sub_216C7907C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete[](__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C790A4(uint64_t a1@<X1>, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a2@<X2>, __sFILE **a3@<X8>)
{
  unint64_t v6 = *(char **)(a1 + 24);
  uint64_t v7 = (__sFILE *)operator new[]((size_t)v6);
  *a3 = v7;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadRawBytes(a2, *(void *)(a1 + 16), v6, v7);
}

void sub_216C79104(_Unwind_Exception *a1)
{
  *int v1 = 0;
  operator delete[](v2);
  _Unwind_Resume(a1);
}

uint64_t sub_216C7911C(uint64_t *a1, char *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = *a1;
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666) {
    sub_21677CB10();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x333333333333333) {
    unint64_t v13 = 0x666666666666666;
  }
  else {
    unint64_t v13 = v7;
  }
  uint64_t v23 = a1 + 2;
  if (v13) {
    uint64_t v14 = (char *)sub_2168720A4(v11, v13);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v19 = v14;
  uint64_t v20 = &v14[40 * v6];
  uint64_t v21 = v20;
  unint64_t v22 = &v14[40 * v13];
  uint64_t v15 = sub_216779094(v20, a2);
  uint64_t v16 = *a3;
  *a3 = 0;
  v15[3] = v16;
  v15[4] = *a4;
  v21 += 40;
  sub_216C79248(a1, &v19);
  uint64_t v17 = a1[1];
  sub_216C79464(&v19);
  return v17;
}

void sub_216C79234(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C79464((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C79248(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216C792C0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216C792C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      long long v10 = *(_OWORD *)(a3 + v7 - 40);
      *(void *)(v8 - 24) = *(void *)(a3 + v7 - 24);
      *(_OWORD *)(v8 - 40) = v10;
      *(void *)(v9 - 40) = 0;
      *(void *)(v9 - 32) = 0;
      uint64_t v11 = *(void *)(a3 + v7 - 16);
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v8 - 16) = v11;
      *(void *)(v8 - 8) = *(void *)(a3 + v7 - 8);
      *((void *)&v17 + 1) = a7 + v7 - 40;
      v7 -= 40;
    }
    while (a3 + v7 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  sub_216C79380((uint64_t)v14);
  return v12;
}

uint64_t sub_216C79380(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216C793B8((uint64_t *)a1);
  }
  return a1;
}

void sub_216C793B8(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_216C7940C(v3, v1);
      v1 += 40;
    }
    while (v1 != v2);
  }
}

void sub_216C7940C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  if (v3) {
    operator delete[](v3);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    unint64_t v4 = *(void **)a2;
    operator delete(v4);
  }
}

void **sub_216C79464(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216C79498(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 40;
    sub_216C7940C(v4, i - 40);
  }
}

uint64_t sub_216C794E8(void *a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10);
  uint64_t v2 = *(void *)(a1[2] + 96);
  if (*(void *)(a1[2] + 104) != v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = a1[1] + 80;
    do
    {
      uint64_t v11 = (_DWORD *)(v2 + v3);
      *((_DWORD *)sub_216C80118(v5, (unsigned int *)(v2 + v3), (uint64_t)&unk_2174BFD90, &v11) + 6) = v4++;
      uint64_t v2 = *(void *)(a1[2] + 96);
      v3 += 8;
    }
    while (v4 != (*(void *)(a1[2] + 104) - v2) >> 3);
  }
  unint64_t v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v7 = v10;
  unint64_t v8 = atomic_load((unint64_t *)(v6 + 144));
  if (v7 < v8
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10, (atomic_ullong *)v6))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v10, a1[3]);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10);
  return 0;
}

void sub_216C795E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C79604(void *a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10);
  uint64_t v2 = *(void *)(a1[2] + 48);
  if (*(void *)(a1[2] + 56) != v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = a1[1] + 120;
    do
    {
      uint64_t v11 = (_OWORD *)(v2 + v3);
      *((_DWORD *)sub_216C79718(v5, v2 + v3, (uint64_t)&unk_2174BFD90, &v11) + 8) = v4++;
      uint64_t v2 = *(void *)(a1[2] + 48);
      v3 += 16;
    }
    while (v4 != (*(void *)(a1[2] + 56) - v2) >> 4);
  }
  unint64_t v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v7 = v10;
  unint64_t v8 = atomic_load((unint64_t *)(v6 + 144));
  if (v7 < v8
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10, (atomic_ullong *)v6))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v10, a1[3]);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10);
  return 0;
}

void sub_216C79700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void *sub_216C79718(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = *(unsigned int *)(a2 + 4);
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * v7);
  uint64_t v9 = *(void *)(a2 + 8);
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (v9 + ((v8 + v9 + (v8 + v9) * (v8 + v9)) >> 1))));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 5) == v7 && v14[3] == v9) {
              return v14;
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11) {
                v15 %= v11;
              }
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  uint64_t v14 = operator new(0x28uLL);
  void *v14 = 0;
  v14[1] = v10;
  *((_OWORD *)v14 + 1) = **a4;
  *((_DWORD *)v14 + 8) = -1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  char v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    void *v14 = *v24;
LABEL_42:
    void *v24 = v14;
    goto LABEL_43;
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    unint64_t v25 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    char v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_216C7996C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C79988(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216C79A2C((void *)(a1 + 8));
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 24));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216C79A18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_216C79A2C(void *a1)
{
  std::string __p = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v1 = (char **)a1[1];
  unint64_t v3 = *v1;
  unint64_t v2 = v1[1];
  if (v3 != v2)
  {
    uint64_t v5 = v3;
    while (*(_DWORD *)v5 != -1)
    {
      v5 += 4;
      if (v5 == v2)
      {
        uint64_t v5 = v2;
        break;
      }
    }
    if (v3 != v2)
    {
      uint64_t v6 = *a1 + 160;
      do
      {
        sub_216C79B70((char *)&__p, v3, (uint64_t)v5, (v5 - v3) >> 2);
        uint64_t v7 = *(void *)a1[1];
        p_p = &__p;
        *((_DWORD *)sub_216C79C80(v6, (uint64_t)&__p, (uint64_t)&unk_2174BFD90, (uint64_t *)&p_p) + 10) = (unint64_t)&v3[-v7] >> 2;
        unint64_t v3 = v5 + 4;
        unint64_t v8 = *(char **)(a1[1] + 8);
        if (v5 + 4 == v8) {
          break;
        }
        v5 += 4;
        while (*(_DWORD *)v5 != -1)
        {
          v5 += 4;
          if (v5 == v8)
          {
            uint64_t v5 = *(char **)(a1[1] + 8);
            break;
          }
        }
      }
      while (v3 != v8);
      if (__p)
      {
        unint64_t v10 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_216C79B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216C79B70(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if (a4 >> 62) {
      sub_21677CB10();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_216781458(v7, v11);
    unint64_t v13 = (char *)v7[1];
    uint8x8_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      float v18 = v9;
      BOOL v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint8x8_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, 4 * v15);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    float v18 = v9;
    BOOL v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  pxrInternal__aapl__pxrReserved__::WorkDispatcher *v12 = &v9[v17];
  return result;
}

void *sub_216C79C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v8 = sub_216C79FC8((uint64_t)v26, (unsigned int **)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    uint8x8_t v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      uint64_t result = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = result[1];
          if (v14 == v9)
          {
            long long v16 = (char *)result[2];
            unint64_t v15 = (char *)result[3];
            if (v15 - v16 == *(void *)(a2 + 8) - *(void *)a2)
            {
              if (v16 == v15) {
                return result;
              }
              for (uint64_t i = *(unsigned int **)a2; *(_DWORD *)v16 == *i; ++i)
              {
                v16 += 4;
                if (v16 == v15) {
                  return result;
                }
              }
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_216C79F24(a1, v9, a4, (uint64_t)v26);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_21678A04C(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  char v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v26[0] = *v24;
    void *v24 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v25 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v25 >= v10) {
          v25 %= v10;
        }
      }
      else
      {
        v25 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v26[0];
    }
  }
  uint64_t result = (void *)v26[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_216C79F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_216C7A0A8((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C79F24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint64_t v9 = *a3;
  v8[3] = 0;
  v8[4] = 0;
  void v8[2] = 0;
  uint64_t result = sub_216C7A02C(v8 + 2, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 2);
  *((_DWORD *)v8 + 10) = -1;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216C79FAC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_216C7A0A8(v3, v2);
  _Unwind_Resume(a1);
}

unint64_t sub_216C79FC8(uint64_t a1, unsigned int **a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = (char *)v3 - (char *)*a2;
  if (v3 == *a2)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    int v6 = 0;
    uint64_t v7 = v4 >> 2;
    do
    {
      unsigned int v9 = *v2++;
      uint64_t v8 = v9;
      if (v6) {
        v8 += (unint64_t)(v5 + v8 + (v5 + v8) * (v5 + v8)) >> 1;
      }
      else {
        int v6 = 1;
      }
      uint64_t v5 = v8;
      --v7;
    }
    while (v7);
  }
  return bswap64(0x9E3779B97F4A7C55 * v8);
}

void *sub_216C7A02C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = sub_216781458(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216C7A08C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C7A0A8(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (void *)__p[2];
    if (v3)
    {
      __p[3] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_216C7A110(void *a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10);
  uint64_t v2 = *(void *)(a1[2] + 120);
  if (*(void *)(a1[2] + 128) != v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = a1[1];
    do
    {
      uint8x8_t v11 = (uint64_t *)(v2 + v3);
      *((_DWORD *)sub_216C7A220(v5, (void *)(v2 + v3), (uint64_t)&unk_2174BFD90, &v11) + 6) = v4++;
      uint64_t v2 = *(void *)(a1[2] + 120);
      v3 += 8;
    }
    while (v4 != (*(void *)(a1[2] + 128) - v2) >> 3);
  }
  unint64_t v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v7 = v10;
  unint64_t v8 = atomic_load((unint64_t *)(v6 + 144));
  if (v7 < v8
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10, (atomic_ullong *)v6))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v10, a1[3]);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10);
  return 0;
}

void sub_216C7A208(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void *sub_216C7A220(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    unint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t result = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return result;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_216C7A46C(a1, v7, a4, (uint64_t)&v21);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  float v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *unint64_t v21 = *v19;
    void *v19 = v21;
  }
  else
  {
    *unint64_t v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      unint64_t v20 = *(void *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v21;
    }
  }
  uint64_t result = v21;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_216C7A454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168BE6D4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_216C7A46C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t result = operator new(0x20uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *uint64_t result = 0;
  result[1] = a2;
  uint64_t v9 = **a3;
  result[2] = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_DWORD *)result + 6) = -1;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

uint64_t sub_216C7A4F8(void *a1)
{
  EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18);
  uint64_t v3 = (void *)a1[2];
  uint64_t v4 = v3[18];
  uint64_t v5 = v3[19];
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a1[1] + 40;
    do
    {
      if (v6 >= (unint64_t)((v5 - v4) >> 2))
      {
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
        EmptyString = &qword_267B91638;
      }
      else
      {
        unint64_t v8 = *(unsigned int *)(v4 + 4 * v6);
        unint64_t v10 = v3 + 15;
        uint64_t v9 = v3[15];
        if (v8 >= (v10[1] - v9) >> 3)
        {
          EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
          uint8x8_t v11 = &qword_267B91658;
        }
        else
        {
          uint8x8_t v11 = (uint64_t *)(v9 + 8 * v8);
        }
        unint64_t v12 = *v11 & 0xFFFFFFFFFFFFFFF8;
        if (v12) {
          EmptyString = (uint64_t *)(v12 + 16);
        }
        else {
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
        }
      }
      float v19 = (long long *)EmptyString;
      EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_216C7A670(v7, (unsigned __int8 *)EmptyString, (uint64_t)&unk_2174BFD90, &v19);
      *((_DWORD *)EmptyToken + 10) = v6++;
      uint64_t v3 = (void *)a1[2];
      uint64_t v4 = v3[18];
      uint64_t v5 = v3[19];
    }
    while (v6 != (v5 - v4) >> 2);
  }
  unint64_t v14 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v14) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v15 = v18;
  unint64_t v16 = atomic_load((unint64_t *)(v14 + 144));
  if (v15 < v16
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18, (atomic_ullong *)v14))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v18, a1[3]);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18);
  return 0;
}

void sub_216C7A658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_216C7A670(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = a2;
  std::string v26 = 0;
  char v27 = 0;
  unint64_t v8 = (char *)*((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    uint64_t v9 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    uint64_t v9 = v8;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v26, (pxrInternal__aapl__pxrReserved__ *)a2, v9);
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * (void)v26);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_2168513F8(a1 + 32, i + 16, v6)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_216C7A934(a1, v10, a4, (uint64_t)&v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  size_t v23 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)std::string v26 = *v23;
    *size_t v23 = v26;
  }
  else
  {
    *(void *)std::string v26 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26)
    {
      unint64_t v24 = *(void *)(*(void *)v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26;
    }
  }
  uint64_t i = v26;
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216C7A910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    sub_2168517F0((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_216C7A934@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = v8 + 16;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t result = v11;
  }
  *((_DWORD *)v8 + 10) = -1;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216C7A9C8(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_2168517F0(v3, v2);
  _Unwind_Resume(a1);
}

BOOL sub_216C7A9E4(BOOL result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = *(void **)(result + 32);
  if (v2)
  {
    uint64_t v3 = *(void **)(result + 16);
    unint64_t v4 = *(void **)(result + 24);
    *(void *)(result + 24) = 0;
    __p[0] = v4;
    __p[1] = v2;
    __p[2] = v3;
    uint64_t v5 = *(void *)(result + 72);
    unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(v5 + 128), 1uLL);
    sub_216C7AB2C((void *)(v5 + 40 * ((3 * (_BYTE)add) & 7) + 384), (uint64_t)__p, add, (uint64_t *)(result + 64), (uint64_t (*)(void *, uint64_t))sub_216C7AB14);
    uint64_t v7 = __p[0];
    __p[0] = 0;
    if (v7) {
      operator delete[](v7);
    }
    if (!atomic_fetch_add(v1 + 57, 1uLL))
    {
      uint64_t v8 = v1[56];
      if (!v8) {
        sub_21683A7CC();
      }
      (*(void (**)(uint64_t))(*(void *)v8 + 48))(v8);
    }
    for (uint64_t result = sub_216C78C7C((uint64_t)(v1 + 5), (uint64_t)(v1 + 3));
          !result;
          uint64_t result = sub_216C78C7C((uint64_t)(v1 + 5), (uint64_t)(v1 + 3)))
    {
      pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(v1 + 11));
    }
  }
  v1[2] = *v1;
  return result;
}

void sub_216C7AAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete[](__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216C7AB14(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)a1 = v2;
  __n128 result = *(__n128 *)(a2 + 1);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t sub_216C7AB2C(void *a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t (*a5)(void *, uint64_t))
{
  unint64_t v9 = a3 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = (*(void *)(a4[1] + 256) - 1) & (a3 >> 3);
  if (v10)
  {
    long long v11 = 0;
  }
  else
  {
    long long v11 = (void *)(*(uint64_t (**)(uint64_t *))(*a4 + 16))(a4);
    void *v11 = 0;
    v11[1] = 0;
  }
  uint64_t v12 = a1[3];
  __dmb(0xBu);
  if (v12 != v9) {
    sub_2168DAE14((uint64_t)a1, a1 + 3, v9, a4[1]);
  }
  if (v11)
  {
    sub_21685036C((uint64_t)&v16, (uint64_t)(a1 + 4));
    unint64_t v13 = (void *)a1[2];
    __dmb(0xBu);
    if ((unint64_t)v13 < 2)
    {
      __dmb(0xBu);
      *a1 = v11;
    }
    else
    {
      void *v13 = v11;
    }
    __dmb(0xBu);
    a1[2] = v11;
    unint64_t v14 = v16;
    if (v16)
    {
      __dmb(0xBu);
      unsigned char *v14 = 0;
    }
  }
  else
  {
    long long v11 = (void *)a1[2];
    __dmb(0xBu);
  }
  uint64_t result = a5(&v11[3 * v10 + 2], a2);
  v11[1] |= 1 << v10;
  atomic_fetch_add(a1 + 3, 8uLL);
  return result;
}

void sub_216C7AC74(void *a1)
{
  __cxa_begin_catch(a1);
  atomic_fetch_add((atomic_ullong *volatile)(*(void *)(v1 + 8) + 272), 1uLL);
  sub_2168DAD98(v2, v3);
}

void sub_216C7AC94()
{
}

void sub_216C7AC9C(_Unwind_Exception *a1)
{
}

void sub_216C7ACE0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        sub_216C7940C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216C7AD78(uint64_t a1)
{
  sub_216C7ADB4(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7ADB4(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (void *)v2[2];
      if (v4)
      {
        v2[3] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_216C7AE00(uint64_t a1)
{
  sub_216C7AE3C(a1, *(_DWORD **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7AE3C(uint64_t a1, _DWORD *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(_DWORD **)v2;
      sub_216C7AE80(v2 + 4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_216C7AE80(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

void sub_216C7AEC0(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_216C7AF14((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_216C7AF14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    do
    {
      int v6 = *(__int16 *)(v5 - 40);
      v5 -= 40;
      if (v6 != -1)
      {
        uint64_t v7 = *(void **)(v4 - 24);
        if (v7)
        {
          *(void *)(v4 - 16) = v7;
          operator delete(v7);
        }
        *(_WORD *)(v4 - 40) = -1;
      }
      uint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

__int16 *sub_216C7AF8C(__int16 *a1)
{
  if (*a1 != -1)
  {
    uint64_t v2 = (void *)*((void *)a1 + 2);
    if (v2)
    {
      *((void *)a1 + 3) = v2;
      operator delete(v2);
    }
    *a1 = -1;
  }
  return a1;
}

uint64_t sub_216C7AFD4(uint64_t a1, uint64_t a2)
{
  uint64_t __src = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5;
  sub_216C80458(a1, (char *)&__src);
  return sub_216C7B02C(a1, *(char **)a2, (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
}

uint64_t sub_216C7B02C(uint64_t result, char *__src, uint64_t a3)
{
  uint64_t v3 = 32 * a3;
  if (32 * a3)
  {
    uint64_t v5 = *(void **)(result + 8);
    do
    {
      uint64_t v6 = v5[2];
      uint64_t v7 = v6 - *v5 + 0x80000;
      if (v3 >= v7) {
        size_t v8 = v6 - *v5 + 0x80000;
      }
      else {
        size_t v8 = v3;
      }
      uint64_t v9 = *v5 - v6;
      if ((int64_t)(v8 + v9) > v5[4]) {
        v5[4] = v8 + v9;
      }
      uint64_t result = (uint64_t)memcpy((void *)(v5[3] + v9), __src, v8);
      *v5 += v8;
      if (v7 <= v3) {
        uint64_t result = sub_216C7A9E4((BOOL)v5);
      }
      __src += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return result;
}

char *sub_216C7B0D4(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 5)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if (a4 >> 59) {
      sub_21677CB10();
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_2168C5234(v7, v11);
    unint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      float v18 = v9;
      BOOL v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 5;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    float v18 = v9;
    BOOL v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  void *v12 = &v9[v17];
  return result;
}

void sub_216C7B1E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7B220(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7B220(uint64_t a1)
{
  sub_216C7B25C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7B25C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7B2A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7B2E0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7B2E0(uint64_t a1)
{
  sub_216C7B31C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7B31C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7B360(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7B3A0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7B3A0(uint64_t a1)
{
  sub_216C7B3DC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7B3DC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7B420(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7B460(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7B460(uint64_t a1)
{
  sub_216C7B49C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7B49C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7B4E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7B520(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7B520(uint64_t a1)
{
  sub_216C7B55C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7B55C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7B5A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7B5E0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7B5E0(uint64_t a1)
{
  sub_216C7B61C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7B61C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7B660(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7B6A0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7B6A0(uint64_t a1)
{
  sub_216C7B6DC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7B6DC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7B720(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7B760(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7B760(uint64_t a1)
{
  sub_216C7B79C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7B79C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7B7E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7B820(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7B820(uint64_t a1)
{
  sub_216C7B85C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7B85C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7B8A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7B8E0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7B8E0(uint64_t a1)
{
  sub_216C7B91C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7B91C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2169B1EE4(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7B960(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7B9A0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7B9A0(uint64_t a1)
{
  sub_216C7B9DC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7B9DC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2169B2E0C(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7BA20(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7BA60(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7BA60(uint64_t a1)
{
  sub_216C7BA9C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7BA9C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2169B4408(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7BAE0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7BB20(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7BB20(uint64_t a1)
{
  sub_216C7BB5C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7BB5C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_21677B5A0((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7BBA0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7BBE0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7BBE0(uint64_t a1)
{
  sub_216C7BC1C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7BC1C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7BC60(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7BCA0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7BCA0(uint64_t a1)
{
  sub_216C7BCDC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7BCDC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7BD20(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7BD60(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7BD60(uint64_t a1)
{
  sub_216C7BD9C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7BD9C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7BDE0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7BE20(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7BE20(uint64_t a1)
{
  sub_216C7BE5C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7BE5C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7BEA0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7BEE0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7BEE0(uint64_t a1)
{
  sub_216C7BF1C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7BF1C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7BF60(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7BFA0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7BFA0(uint64_t a1)
{
  sub_216C7BFDC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7BFDC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7C020(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7C060(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7C060(uint64_t a1)
{
  sub_216C7C09C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7C09C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7C0E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7C120(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7C120(uint64_t a1)
{
  sub_216C7C15C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7C15C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7C1A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7C1E0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7C1E0(uint64_t a1)
{
  sub_216C7C21C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7C21C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7C260(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7C2A0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7C2A0(uint64_t a1)
{
  sub_216C7C2DC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7C2DC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7C320(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7C360(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7C360(uint64_t a1)
{
  sub_216C7C39C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7C39C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7C3E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7C420(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7C420(uint64_t a1)
{
  sub_216C7C45C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7C45C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7C4A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7C4E0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7C4E0(uint64_t a1)
{
  sub_216C7C51C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7C51C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7C560(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7C5A0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7C5A0(uint64_t a1)
{
  sub_216C7C5DC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7C5DC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7C620(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7C660(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7C660(uint64_t a1)
{
  sub_216C7C69C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7C69C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7C6E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7C720(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7C720(uint64_t a1)
{
  sub_216C7C75C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7C75C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7C7A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7C7E0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7C7E0(uint64_t a1)
{
  sub_216C7C81C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7C81C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7C860(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7C8A0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7C8A0(uint64_t a1)
{
  sub_216C7C8DC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7C8DC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7C920(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7C960(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7C960(uint64_t a1)
{
  sub_216C7C99C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7C99C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C7C9E0(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7C9E0(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    uint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v7 = *(void (**)(void))(*v4 + 8);
        if (v7) {
          v7();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = (void ***)a1[4];
      if (*a1)
      {
        uint64_t v6 = 8 * *a1;
        do
        {
          sub_2168EBBB8(v5++, 0);
          v6 -= 8;
        }
        while (v6);
        uint64_t v5 = (void ***)a1[4];
      }
      operator delete(v5 - 2);
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

void sub_216C7CA94(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7CAD4(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7CAD4(uint64_t a1)
{
  sub_216C7CB10(a1, *(void ****)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7CB10(uint64_t a1, void ***a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *v2;
      sub_2168EBBB8(v2 + 2, 0);
      operator delete(v2);
      uint64_t v2 = (void ***)v3;
    }
    while (v3);
  }
}

void sub_216C7CB58(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7CB98(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7CB98(uint64_t a1)
{
  sub_216C7CBD4(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7CBD4(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C7CC18(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7CC18(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    uint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v8 = *(void (**)(void))(*v4 + 8);
        if (v8) {
          v8();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 0;
        uint64_t v7 = 152 * *a1;
        do
        {
          uint64_t v9 = (void **)(v5 + v6 + 128);
          sub_216889A04(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 104);
          sub_216889A04(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 80);
          sub_216889A04(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 56);
          sub_216889A04(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 32);
          sub_216889A04(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 8);
          sub_216889A04(&v9);
          v6 += 152;
        }
        while (v7 != v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

void sub_216C7CD3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7CD7C(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7CD7C(uint64_t a1)
{
  sub_216C7CDB8(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7CDB8(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void **)*v2;
      sub_216C7CDFC(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7CDFC(void **a1)
{
  uint64_t v2 = a1 + 16;
  sub_216889A04(&v2);
  uint64_t v2 = a1 + 13;
  sub_216889A04(&v2);
  uint64_t v2 = a1 + 10;
  sub_216889A04(&v2);
  uint64_t v2 = a1 + 7;
  sub_216889A04(&v2);
  uint64_t v2 = a1 + 4;
  sub_216889A04(&v2);
  uint64_t v2 = a1 + 1;
  sub_216889A04(&v2);
}

void sub_216C7CE84(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7CEC4(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7CEC4(uint64_t a1)
{
  sub_216C7CF00(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7CF00(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C7CF44(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7CF44(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    uint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v8 = *(void (**)(void))(*v4 + 8);
        if (v8) {
          v8();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 0;
        uint64_t v7 = 152 * *a1;
        do
        {
          uint64_t v9 = (void **)(v5 + v6 + 128);
          sub_216782F20(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 104);
          sub_216782F20(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 80);
          sub_216782F20(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 56);
          sub_216782F20(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 32);
          sub_216782F20(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 8);
          sub_216782F20(&v9);
          v6 += 152;
        }
        while (v7 != v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

void sub_216C7D068(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7D0A8(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7D0A8(uint64_t a1)
{
  sub_216C7D0E4(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7D0E4(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void **)*v2;
      sub_216C7D128(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7D128(void **a1)
{
  uint64_t v2 = a1 + 16;
  sub_216782F20(&v2);
  uint64_t v2 = a1 + 13;
  sub_216782F20(&v2);
  uint64_t v2 = a1 + 10;
  sub_216782F20(&v2);
  uint64_t v2 = a1 + 7;
  sub_216782F20(&v2);
  uint64_t v2 = a1 + 4;
  sub_216782F20(&v2);
  uint64_t v2 = a1 + 1;
  sub_216782F20(&v2);
}

void sub_216C7D1B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7D1F0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7D1F0(uint64_t a1)
{
  sub_216C7D22C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7D22C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C7D270(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7D270(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    uint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v8 = *(void (**)(void))(*v4 + 8);
        if (v8) {
          v8();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 0;
        uint64_t v7 = 152 * *a1;
        do
        {
          uint64_t v9 = (void **)(v5 + v6 + 128);
          sub_216981168(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 104);
          sub_216981168(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 80);
          sub_216981168(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 56);
          sub_216981168(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 32);
          sub_216981168(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 8);
          sub_216981168(&v9);
          v6 += 152;
        }
        while (v7 != v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

void sub_216C7D394(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7D3D4(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7D3D4(uint64_t a1)
{
  sub_216C7D410(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7D410(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void **)*v2;
      sub_216C7D454(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7D454(void **a1)
{
  uint64_t v2 = a1 + 16;
  sub_216981168(&v2);
  uint64_t v2 = a1 + 13;
  sub_216981168(&v2);
  uint64_t v2 = a1 + 10;
  sub_216981168(&v2);
  uint64_t v2 = a1 + 7;
  sub_216981168(&v2);
  uint64_t v2 = a1 + 4;
  sub_216981168(&v2);
  uint64_t v2 = a1 + 1;
  sub_216981168(&v2);
}

void sub_216C7D4DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7D51C(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7D51C(uint64_t a1)
{
  sub_216C7D558(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7D558(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C7D59C(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7D59C(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    uint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v8 = *(void (**)(void))(*v4 + 8);
        if (v8) {
          v8();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 0;
        uint64_t v7 = 152 * *a1;
        do
        {
          uint64_t v9 = (void **)(v5 + v6 + 128);
          sub_2169CC68C(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 104);
          sub_2169CC68C(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 80);
          sub_2169CC68C(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 56);
          sub_2169CC68C(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 32);
          sub_2169CC68C(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 8);
          sub_2169CC68C(&v9);
          v6 += 152;
        }
        while (v7 != v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

void sub_216C7D6C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7D700(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7D700(uint64_t a1)
{
  sub_216C7D73C(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7D73C(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void **)*v2;
      sub_216C7D780(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7D780(void **a1)
{
  uint64_t v2 = a1 + 16;
  sub_2169CC68C(&v2);
  uint64_t v2 = a1 + 13;
  sub_2169CC68C(&v2);
  uint64_t v2 = a1 + 10;
  sub_2169CC68C(&v2);
  uint64_t v2 = a1 + 7;
  sub_2169CC68C(&v2);
  uint64_t v2 = a1 + 4;
  sub_2169CC68C(&v2);
  uint64_t v2 = a1 + 1;
  sub_2169CC68C(&v2);
}

void sub_216C7D808(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7D848(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7D848(uint64_t a1)
{
  sub_216C7D884(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7D884(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C7D8C8(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7D8C8(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    uint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        unint64_t v14 = *(void (**)(void))(*v4 + 8);
        if (v14) {
          v14();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 152 * *a1;
        uint64_t v7 = v5 + 80;
        do
        {
          uint64_t v8 = *(void **)(v7 + 48);
          if (v8)
          {
            *(void *)(v7 + 56) = v8;
            operator delete(v8);
          }
          uint64_t v9 = *(void **)(v7 + 24);
          if (v9)
          {
            *(void *)(v7 + 32) = v9;
            operator delete(v9);
          }
          uint64_t v10 = *(void **)v7;
          if (*(void *)v7)
          {
            *(void *)(v7 + 8) = v10;
            operator delete(v10);
          }
          unint64_t v11 = *(void **)(v7 - 24);
          if (v11)
          {
            *(void *)(v7 - 16) = v11;
            operator delete(v11);
          }
          uint64_t v12 = *(void **)(v7 - 48);
          if (v12)
          {
            *(void *)(v7 - 40) = v12;
            operator delete(v12);
          }
          unint64_t v13 = *(void **)(v7 - 72);
          if (v13)
          {
            *(void *)(v7 - 64) = v13;
            operator delete(v13);
          }
          v7 += 152;
          v6 -= 152;
        }
        while (v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

void sub_216C7D9D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7DA18(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7DA18(uint64_t a1)
{
  sub_216C7DA54(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7DA54(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C7DA98(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7DA98(void *a1)
{
  uint64_t v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[10];
  if (v4)
  {
    a1[11] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[1];
  if (v7)
  {
    a1[2] = v7;
    operator delete(v7);
  }
}

void sub_216C7DB30(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7DB70(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7DB70(uint64_t a1)
{
  sub_216C7DBAC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7DBAC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C7D8C8(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7DBF0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7DC30(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7DC30(uint64_t a1)
{
  sub_216C7DC6C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7DC6C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C7D8C8(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7DCB0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7DCF0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7DCF0(uint64_t a1)
{
  sub_216C7DD2C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7DD2C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C7D8C8(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7DD70(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7DDB0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7DDB0(uint64_t a1)
{
  sub_216C7DDEC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7DDEC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C7DE30(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7DE30(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    uint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v7 = *(void (**)(void))(*v4 + 8);
        if (v7) {
          v7();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = (void **)a1[4];
      if (*a1)
      {
        uint64_t v6 = 24 * *a1;
        do
        {
          uint64_t v8 = v5;
          sub_216981168(&v8);
          v5 += 3;
          v6 -= 24;
        }
        while (v6);
        uint64_t v5 = (void **)a1[4];
      }
      operator delete(v5 - 2);
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

void sub_216C7DEF0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7DF30(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7DF30(uint64_t a1)
{
  sub_216C7DF6C(a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7DF6C(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(char **)v2;
      uint64_t v4 = (void **)(v2 + 16);
      sub_216981168(&v4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7DFC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7E000(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7E000(uint64_t a1)
{
  sub_216C7E03C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7E03C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C7E080(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7E080(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    uint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v7 = *(void (**)(void))(*v4 + 8);
        if (v7) {
          v7();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = (void **)a1[4];
      if (*a1)
      {
        uint64_t v6 = 24 * *a1;
        do
        {
          uint64_t v8 = v5;
          sub_216889A04(&v8);
          v5 += 3;
          v6 -= 24;
        }
        while (v6);
        uint64_t v5 = (void **)a1[4];
      }
      operator delete(v5 - 2);
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

void sub_216C7E140(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7E180(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7E180(uint64_t a1)
{
  sub_216C7E1BC(a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7E1BC(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(char **)v2;
      uint64_t v4 = (void **)(v2 + 16);
      sub_216889A04(&v4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7E210(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7E250(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7E250(uint64_t a1)
{
  sub_216C7E28C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7E28C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7E2D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7E310(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7E310(uint64_t a1)
{
  sub_216C7E34C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7E34C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7E390(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7E3D0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7E3D0(uint64_t a1)
{
  sub_216C7E40C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7E40C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7E450(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7E490(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7E490(uint64_t a1)
{
  sub_216C7E4CC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7E4CC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C7E510(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7E510(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    uint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v7 = *(void (**)(void))(*v4 + 8);
        if (v7) {
          v7();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 24 * *a1;
        do
        {
          sub_2167877AC(v5, *(void **)(v5 + 8));
          v5 += 24;
          v6 -= 24;
        }
        while (v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

void sub_216C7E5C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7E608(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7E608(uint64_t a1)
{
  sub_216C7E644(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7E644(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *v2;
      sub_2167877AC((uint64_t)(v2 + 2), v2[3]);
      operator delete(v2);
      uint64_t v2 = (void **)v3;
    }
    while (v3);
  }
}

void sub_216C7E68C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7E6CC(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7E6CC(uint64_t a1)
{
  sub_216C7E708(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7E708(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C7E74C(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7E74C(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    uint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v8 = *(void (**)(void))(*v4 + 8);
        if (v8) {
          v8();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 48 * *a1;
        uint64_t v7 = (void **)(v5 + 16);
        do
        {
          uint64_t v9 = v7;
          sub_216932118(&v9);
          sub_2169CB1D8((atomic_uint **)v7 - 1);
          v7 += 6;
          v6 -= 48;
        }
        while (v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

void sub_216C7E818(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7E858(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7E858(uint64_t a1)
{
  sub_216C7E894(a1, *(atomic_uint **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7E894(uint64_t a1, atomic_uint *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(atomic_uint **)v2;
      uint64_t v4 = (void **)(v2 + 8);
      sub_216932118(&v4);
      sub_2169CB1D8((atomic_uint **)v2 + 3);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7E8F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7E930(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7E930(uint64_t a1)
{
  sub_216C7E96C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7E96C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C7E9B0(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7E9B0(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    uint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v8 = *(void (**)(void))(*v4 + 8);
        if (v8) {
          v8();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 48 * *a1;
        uint64_t v7 = (_DWORD *)(v5 + 28);
        do
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v7);
          sub_21697C414(v7 - 1);
          if (*((char *)v7 - 5) < 0) {
            operator delete(*(void **)(v7 - 7));
          }
          v7 += 12;
          v6 -= 48;
        }
        while (v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

void sub_216C7EA84(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7EAC4(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7EAC4(uint64_t a1)
{
  sub_216C7EB00(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7EB00(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C7EB44((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7EB44(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_216C7EBA0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7EBE0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7EBE0(uint64_t a1)
{
  sub_216C7EC1C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7EC1C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C7EC60(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7EC60(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    uint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v9 = *(void (**)(void))(*v4 + 8);
        if (v9) {
          v9();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 24 * *a1;
        uint64_t v7 = (void *)(v5 + 8);
        do
        {
          uint64_t v8 = (void *)*(v7 - 1);
          if (v8)
          {
            *uint64_t v7 = v8;
            operator delete(v8);
          }
          v7 += 3;
          v6 -= 24;
        }
        while (v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

void sub_216C7ED20(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7AD78(v3);
    operator delete(v4);
  }
}

void sub_216C7ED60(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7EDA0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7EDA0(uint64_t a1)
{
  sub_216C7EDDC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7EDDC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C7EC60(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7EE20(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7EE60(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7EE60(uint64_t a1)
{
  sub_216C7EE9C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7EE9C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C7EEE0(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7EEE0(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    uint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v7 = *(void (**)(void))(*v4 + 8);
        if (v7) {
          v7();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = (void **)a1[4];
      if (*a1)
      {
        uint64_t v6 = 24 * *a1;
        do
        {
          uint64_t v8 = v5;
          sub_216782F20(&v8);
          v5 += 3;
          v6 -= 24;
        }
        while (v6);
        uint64_t v5 = (void **)a1[4];
      }
      operator delete(v5 - 2);
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

void sub_216C7EFA0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7EFE0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7EFE0(uint64_t a1)
{
  sub_216C7F01C(a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7F01C(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(char **)v2;
      uint64_t v4 = (void **)(v2 + 16);
      sub_216782F20(&v4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7F070(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7F0B0(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7F0B0(uint64_t a1)
{
  sub_216C7F0EC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7F0EC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7F130(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7F170(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7F170(uint64_t a1)
{
  sub_216C7F1AC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7F1AC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C7F1F0(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7F1F0(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    uint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v7 = *(void (**)(void))(*v4 + 8);
        if (v7) {
          v7();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 16 * *a1;
        do
        {
          uint64_t v5 = sub_2168EE084(v5) + 16;
          v6 -= 16;
        }
        while (v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

void sub_216C7F29C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7F2DC(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7F2DC(uint64_t a1)
{
  sub_216C7F318(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7F318(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C7F1F0(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7F35C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7F39C(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7F39C(uint64_t a1)
{
  sub_216C7F3D8(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7F3D8(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C7F41C(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7F41C(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    uint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v8 = *(void (**)(void))(*v4 + 8);
        if (v8) {
          v8();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 0;
        uint64_t v7 = 152 * *a1;
        do
        {
          uint64_t v9 = (void **)(v5 + v6 + 128);
          sub_216932118(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 104);
          sub_216932118(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 80);
          sub_216932118(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 56);
          sub_216932118(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 32);
          sub_216932118(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 8);
          sub_216932118(&v9);
          v6 += 152;
        }
        while (v7 != v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

void sub_216C7F540(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7F580(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7F580(uint64_t a1)
{
  sub_216C7F5BC(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7F5BC(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void **)*v2;
      sub_216C7F600(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7F600(void **a1)
{
  uint64_t v2 = a1 + 16;
  sub_216932118(&v2);
  uint64_t v2 = a1 + 13;
  sub_216932118(&v2);
  uint64_t v2 = a1 + 10;
  sub_216932118(&v2);
  uint64_t v2 = a1 + 7;
  sub_216932118(&v2);
  uint64_t v2 = a1 + 4;
  sub_216932118(&v2);
  uint64_t v2 = a1 + 1;
  sub_216932118(&v2);
}

void sub_216C7F688(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7F6C8(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7F6C8(uint64_t a1)
{
  sub_216C7F704(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7F704(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C7F748(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7F748(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    uint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v8 = *(void (**)(void))(*v4 + 8);
        if (v8) {
          v8();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 0;
        uint64_t v7 = 152 * *a1;
        do
        {
          uint64_t v9 = (void **)(v5 + v6 + 128);
          sub_2169CC78C(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 104);
          sub_2169CC78C(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 80);
          sub_2169CC78C(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 56);
          sub_2169CC78C(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 32);
          sub_2169CC78C(&v9);
          uint64_t v9 = (void **)(v5 + v6 + 8);
          sub_2169CC78C(&v9);
          v6 += 152;
        }
        while (v7 != v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

void sub_216C7F86C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7F8AC(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7F8AC(uint64_t a1)
{
  sub_216C7F8E8(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7F8E8(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void **)*v2;
      sub_216C7F92C(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7F92C(void **a1)
{
  uint64_t v2 = a1 + 16;
  sub_2169CC78C(&v2);
  uint64_t v2 = a1 + 13;
  sub_2169CC78C(&v2);
  uint64_t v2 = a1 + 10;
  sub_2169CC78C(&v2);
  uint64_t v2 = a1 + 7;
  sub_2169CC78C(&v2);
  uint64_t v2 = a1 + 4;
  sub_2169CC78C(&v2);
  uint64_t v2 = a1 + 1;
  sub_2169CC78C(&v2);
}

void sub_216C7F9B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7F9F4(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7F9F4(uint64_t a1)
{
  sub_216C7FA30(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7FA30(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168F83DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7FA74(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7FAB4(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7FAB4(uint64_t a1)
{
  sub_216C7FAF0(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7FAF0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2169B88CC(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7FB34(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C7FB74(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C7FB74(uint64_t a1)
{
  sub_216C7FBB0(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C7FBB0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2169B8D9C((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216C7FBF4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_216C7FC8C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

atomic_uint **sub_216C7FC8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void **)(a2 + 24);
  sub_216932118(&v4);
  uint64_t result = sub_2169CB1D8((atomic_uint **)(a2 + 16));
  if ((*(void *)a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216C7FCE4(uint64_t a1@<X0>, uint64_t a2@<X1>, atomic_ullong **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55* (*(void *)(a2 + 32)+ ((*(void *)(a2 + 32)+ *(void *)(a2 + 24)+ (*(void *)(a2 + 32) + *(void *)(a2 + 24)) * (*(void *)(a2 + 32) + *(void *)(a2 + 24))) >> 1)));
  uint64_t v24 = 0;
  unint64_t v25 = (atomic_ullong *)v8;
  uint64_t v9 = &v25;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v11 = *(unsigned __int8 *)v9;
    uint64_t v9 = (atomic_ullong **)((char *)v9 + 1);
    *((unsigned char *)&v24 + i) = byte_217457512[v11];
  }
  unint64_t v12 = v24 | 1;
  sub_216C7FEDC(a1, v8, &v25);
  uint64_t v14 = a1 + 16;
  if (a3)
  {
    a3[6] = (atomic_ullong *)v12;
    *a3 = 0;
  }
  while (1)
  {
    unint64_t v15 = v25;
    unint64_t v16 = (atomic_ullong *)*v25;
    if (*v25)
    {
      unint64_t v17 = v16[6];
      while (1)
      {
        float v18 = v16;
        if (v17 > v12) {
          break;
        }
        if (v17 == v12
          && v16[3] == *(void *)(v5 + 16)
          && v16[4] == *(void *)(v5 + 24)
          && v16[5] == *(void *)(v5 + 32))
        {
          if (a3) {
            tbb::internal::deallocate_via_handler_v3((uint64_t)a3, v13);
          }
          *(void *)a4 = v18;
          *(void *)(a4 + 8) = v14;
          *(unsigned char *)(a4 + 16) = 0;
          return;
        }
        unint64_t v25 = v16;
        unint64_t v16 = (atomic_ullong *)*v16;
        if (!*v18)
        {
          unint64_t v15 = v18;
          break;
        }
        unint64_t v17 = v16[6];
        unint64_t v15 = v18;
      }
    }
    if (!a3) {
      uint64_t v5 = 8;
    }
    *a3 = v16;
    while (1)
    {
      BOOL v19 = v16;
      atomic_compare_exchange_strong(v15, (unint64_t *)&v19, (unint64_t)a3);
      if (v19 == v16) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v15, 0, memory_order_relaxed);
      if ((atomic_ullong *)add_explicit != v16) {
        goto LABEL_22;
      }
    }
    unint64_t add_explicit = (unint64_t)v16;
LABEL_22:
    if (v16 == (atomic_ullong *)add_explicit || (atomic_ullong **)add_explicit == a3) {
      break;
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = v14;
    *(unsigned char *)(a4 + 16) = 0;
  }
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(a1 + 24), 1uLL);
  *(void *)a4 = a3;
  *(void *)(a4 + 8) = v14;
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t v22 = *(void *)(a1 + 8);
  __dmb(0xBu);
  if ((float)((float)add / (float)v22) > *(float *)(a1 + 44))
  {
    do
    {
      unint64_t v23 = v22;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 8), &v23, 2 * v22);
    }
    while (v23 != v22 && atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 8), 0, memory_order_relaxed) == v22);
  }
}

void sub_216C7FEDC(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = *(void *)(a1 + 8);
  __dmb(0xBu);
  unint64_t v6 = a2 % v5;
  unint64_t v7 = sub_216851020(a2 % v5);
  unint64_t v8 = v6 - ((1 << v7) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v9 = a1 + 8 * v7;
  uint64_t v11 = *(void *)(v9 + 48);
  uint64_t v10 = (uint64_t *)(v9 + 48);
  __dmb(0xBu);
  if (!v11 || (uint64_t v12 = *v10, __dmb(0xBu), !*(void *)(v12 + 8 * v8))) {
    sub_216C7FF74(a1, (atomic_ullong *)v6);
  }
  uint64_t v13 = *v10;
  __dmb(0xBu);
  *a3 = *(void *)(v13 + 8 * v8);
}

void sub_216C7FF74(uint64_t a1, atomic_ullong *a2)
{
  unint64_t v4 = sub_21691BC60(a1, (unint64_t)a2);
  if (!sub_21691BCEC(a1, v4)) {
    sub_216C7FF74(a1, v4);
  }
  unint64_t v5 = sub_216851020(v4);
  uint64_t v6 = *(void *)(a1 + 8 * v5 + 48);
  __dmb(0xBu);
  uint64_t v11 = *(atomic_ullong **)(v6 + 8 * (v4 - ((1 << v5) & 0x1FFFFFFFFFFFFFFELL)));
  uint64_t v12 = 0;
  uint64_t v13 = a2;
  unint64_t v7 = &v13;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v9 = *(unsigned __int8 *)v7;
    unint64_t v7 = (atomic_ullong **)((char *)v7 + 1);
    *((unsigned char *)&v12 + i) = byte_217457512[v9];
  }
  sub_216C80058(&v11, v12 & 0xFFFFFFFFFFFFFFFELL, &v13);
  uint64_t v10 = v13;
  sub_216912714(a1, (unint64_t)a2, &v10);
}

atomic_ullong *sub_216C80058@<X0>(atomic_ullong **a1@<X1>, unint64_t a2@<X2>, atomic_ullong **a3@<X8>)
{
  uint64_t i = (atomic_ullong *)**a1;
  uint64_t result = (atomic_ullong *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x38);
  result[6] = a2;
  *uint64_t result = 0;
  if (i) {
    goto LABEL_2;
  }
LABEL_3:
  while (1)
  {
    uint64_t v10 = *a1;
    *uint64_t result = (atomic_ullong)i;
    while (1)
    {
      uint64_t v11 = i;
      atomic_compare_exchange_strong(v10, (unint64_t *)&v11, (unint64_t)result);
      if (v11 == i) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v10, 0, memory_order_relaxed);
      if ((atomic_ullong *)add_explicit != i) {
        goto LABEL_8;
      }
    }
    unint64_t add_explicit = (unint64_t)i;
LABEL_8:
    if (i == (atomic_ullong *)add_explicit || result == (atomic_ullong *)add_explicit) {
      break;
    }
    for (uint64_t i = *a1; ; *a1 = i)
    {
      uint64_t i = (atomic_ullong *)*i;
      if (!i) {
        break;
      }
LABEL_2:
      unint64_t v9 = i[6];
      if (v9 > a2) {
        goto LABEL_3;
      }
      if (v9 == a2)
      {
        uint64_t result = (atomic_ullong *)tbb::internal::deallocate_via_handler_v3((uint64_t)result, v8);
        goto LABEL_17;
      }
    }
  }
  uint64_t i = result;
LABEL_17:
  *a3 = i;
  return result;
}

void *sub_216C80118(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = v6;
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = v6 & (v7 - 1);
    }
    unint64_t v9 = *(void **)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(void *)a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_216C80388(a1, v6, a4, (uint64_t)v21);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }
  float v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *(void *)v21[0] = *v18;
    void *v18 = v21[0];
  }
  else
  {
    *(void *)v21[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v21[0])
    {
      unint64_t v19 = *(void *)(*(void *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v21[0];
    }
  }
  uint64_t v10 = (void *)v21[0];
  v21[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216C80400((uint64_t)v21, 0);
  return v10;
}

void sub_216C80370(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C80400((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_216C80388@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = operator new(0x20uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *uint8x8_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = *a3;
  sub_216981010((_DWORD *)v8 + 4, v9);
  uint64_t result = sub_21698105C((_DWORD *)v8 + 5, v9 + 1);
  *((_DWORD *)v8 + 6) = -1;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216C80400(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216C7AE80(v2 + 4);
    }
    operator delete(v2);
  }
}

uint64_t sub_216C80458(uint64_t a1, char *__src)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = 8;
  do
  {
    uint64_t v5 = v3[2];
    uint64_t v6 = v5 - *v3 + 0x80000;
    if (v4 >= v6) {
      size_t v7 = v5 - *v3 + 0x80000;
    }
    else {
      size_t v7 = v4;
    }
    uint64_t v8 = *v3 - v5;
    if ((int64_t)(v7 + v8) > v3[4]) {
      v3[4] = v7 + v8;
    }
    uint64_t result = (uint64_t)memcpy((void *)(v3[3] + v8), __src, v7);
    *v3 += v7;
    if (v6 <= v4) {
      uint64_t result = sub_216C7A9E4((BOOL)v3);
    }
    __src += v7;
    v4 -= v7;
  }
  while (v4);
  return result;
}

uint64_t sub_216C804FC(void *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a1 + 16))(*a1);
  uint64_t v7 = a1[2];
  if (v7 < 0 || v7 + a3 > v6)
  {
    unint64_t v11 = "usd/crateFile.cpp";
    float v12 = "Read";
    uint64_t v13 = 770;
    BOOL v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd");
    return 0;
  }
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)*a1 + 16))();
  uint64_t v9 = a1[2];
  if (v8 - v9 < a3 || ((v8 - v9) | v9) < 0)
  {
    unint64_t v11 = "usd/crateFile.cpp";
    float v12 = "Read";
    uint64_t v13 = 779;
    BOOL v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
    char v15 = 0;
    (*(void (**)(void))(*(void *)*a1 + 16))();
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld");
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t, unint64_t))(*(void *)*a1 + 32))(*a1, a2, a3);
  if (result == -1) {
    return 0;
  }
  if (!a3 || result)
  {
    a1[2] += result;
    return 1;
  }
  return result;
}

uint64_t sub_216C806B0(uint64_t a1, unint64_t a2, float a3, float a4)
{
  unint64_t v12 = a2;
  sub_21686EB98((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >> 58)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_216767B04(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_264293928, MEMORY[0x263F8C060]);
  }
  sub_216C80854((void *)(a1 + 8), v12);
  uint64_t v7 = *(int **)(a1 + 8);
  if (v7 == *(int **)(a1 + 16)) {
    uint64_t v7 = sub_216C807D0();
  }
  unint64_t v8 = v12;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8) {
    *(unsigned char *)(*(void *)(a1 + 16) - 58) = 1;
  }
  float v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(void *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_216C807BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *sub_216C807D0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798C7D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798C7D8))
  {
    dword_26798C798 = 0;
    word_26798C79C = -1;
    byte_26798C79E = 1;
    __cxa_atexit((void (*)(void *))sub_216C77338, &dword_26798C798, &dword_216758000);
    __cxa_guard_release(&qword_26798C7D8);
  }
  return &dword_26798C798;
}

void *sub_216C80854(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2169B75D8(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + (a2 << 6);
    do
    {
      *(_DWORD *)uint64_t v4 = 0;
      *(_WORD *)(v4 + 4) = -1;
      *(unsigned char *)(v4 + 6) = 0;
      v4 += 64;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_216C808C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_216C808DC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_216C80960(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_216C809F8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216C809F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void **)(a2 + 56);
  sub_216C7FBF4(&v4);
  uint64_t v4 = (void **)(a2 + 32);
  sub_216A94530(&v4);
  uint64_t v3 = *(void **)(a2 + 8);
  if (v3)
  {
    *(void *)(a2 + 16) = v3;
    operator delete(v3);
  }
}

uint64_t sub_216C80A50(uint64_t a1)
{
  sub_216C80A8C(a1, *(atomic_uint ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C80A8C(uint64_t a1, atomic_uint **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *v2;
      sub_2169CB1D8(v2 + 3);
      operator delete(v2);
      uint64_t v2 = (atomic_uint **)v3;
    }
    while (v3);
  }
}

void sub_216C80AD0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(void *)a3 = 0x434453552D525850;
  *(unsigned char *)(a3 + 9) = 10;
  if (a2 > 87)
  {
    *(void *)a1 = *(void *)(**(void **)(a1 + 8) + 24);
    sub_216C82F78(a1, (void *)a3, 0x58uLL);
    if (*(void *)a3 == 0x434453552D525850)
    {
      uint64_t v7 = *(unsigned __int8 *)(a3 + 8);
      uint64_t v8 = *(unsigned __int8 *)(a3 + 9);
      if (*(unsigned char *)(a3 + 8) || v8 >= 0xB)
      {
        size_t v17 = "usd/crateFile.cpp";
        float v18 = "_ReadBootStrap";
        uint64_t v19 = 3617;
        unint64_t v20 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(By"
              "teStream, int64_t) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal_"
              "_aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>]";
        char v21 = 0;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%hhd.%hhd.%hhd", v5, v6, v7, v8, *(unsigned __int8 *)(a3 + 10));
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%hhd.%hhd.%hhd", v9, v10, 0, 10, 0);
        if (v16 >= 0) {
          unint64_t v11 = (const char *)&v15;
        }
        else {
          unint64_t v11 = (const char *)v15;
        }
        if (v14 >= 0) {
          p_p = (const char *)&__p;
        }
        else {
          p_p = (const char *)__p;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file version mismatch -- file is %s, software supports %s", v11, p_p);
        if (v14 < 0) {
          operator delete(__p);
        }
        if (v16 < 0) {
          operator delete(v15);
        }
      }
      else if (*(void *)(a3 + 16) >= a2)
      {
        size_t v17 = "usd/crateFile.cpp";
        float v18 = "_ReadBootStrap";
        uint64_t v19 = 3625;
        unint64_t v20 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(By"
              "teStream, int64_t) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal_"
              "_aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>]";
        char v21 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file corrupt, possibly truncated: table of contents at offset %lld but file size is %lld");
      }
    }
    else
    {
      size_t v17 = "usd/crateFile.cpp";
      float v18 = "_ReadBootStrap";
      uint64_t v19 = 3610;
      unint64_t v20 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(Byte"
            "Stream, int64_t) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aap"
            "l__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>]";
      char v21 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate bootstrap section corrupt");
    }
  }
  else
  {
    size_t v17 = "usd/crateFile.cpp";
    float v18 = "_ReadBootStrap";
    uint64_t v19 = 3603;
    unint64_t v20 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(ByteSt"
          "ream, int64_t) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__p"
          "xrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>]";
    char v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"File too small to contain bootstrap structure");
  }
}

void sub_216C80CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C80D30(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)(a1 + 8) = *(void *)(**(void **)(a1 + 16) + 24) + *(void *)(a2 + 16);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v5 = 0;
  if (sub_216C83178(a1, __p))
  {
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(void *)(a3 + 16) = v5;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_216C80DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C80DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 6336);
  uint64_t v3 = *(void *)(a1 + 6344);
  if (v2 != v3)
  {
    uint64_t v4 = -1;
    uint64_t v5 = -1;
    do
    {
      uint64_t v6 = *(void *)(v2 + 16);
      if (v6 < v4 || v4 == -1) {
        uint64_t v4 = *(void *)(v2 + 16);
      }
      uint64_t v8 = *(void *)(v2 + 24) + v6;
      if (v8 > v5 || v5 == -1) {
        uint64_t v5 = v8;
      }
      v2 += 32;
    }
    while (v2 != v3);
    if (v4 != -1 && v5 != -1) {
      pxrInternal__aapl__pxrReserved__::ArchMemAdvise(*(void *)(**(void **)(a2 + 16) + 24) + v4, v5 - v4, 1);
    }
  }
}

void sub_216C80E48(uint64_t a1, uint64_t a2, char *a3)
{
  v54[9] = *MEMORY[0x263EF8340];
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    uint64_t v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadTokens", 0, a3);
    BOOL v7 = v6 != 0;
  }
  else
  {
    uint64_t v6 = 0;
    BOOL v7 = 0;
  }
  unint64_t v46 = v6;
  int v47 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "TOKENS");
  if (Section)
  {
    uint64_t v9 = **(void **)(a2 + 16);
    uint64_t v10 = *(void *)(v9 + 32);
    uint64_t v11 = *((void *)Section + 2);
    if (v10 > v11 && (v11 & 0x8000000000000000) == 0)
    {
      uint64_t v12 = a2 + 8;
      *(void *)(a2 + 8) = *(void *)(v9 + 24) + v11;
      size_t __dst = 0;
      if ((sub_216C82F78(a2 + 8, &__dst, 8uLL) & 1) == 0) {
        goto LABEL_47;
      }
      std::string __p = 0;
      if (((*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8)) > 0x3FFu)
      {
        size_t __sz = 0;
        if ((sub_216C82F78(a2 + 8, &__sz, 8uLL) & 1) == 0) {
          goto LABEL_46;
        }
        unint64_t v43 = 0;
        if ((sub_216C82F78(a2 + 8, &v43, 8uLL) & 1) == 0) {
          goto LABEL_46;
        }
        if (!__sz || !v43)
        {
          int v48 = "usd/crateFile.cpp";
          uint64_t v49 = "_ReadTokens";
          uint64_t v50 = 4008;
          int v51 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrIntern"
                "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                "le::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
          char v52 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file corrupt, tokens section is empty");
          goto LABEL_46;
        }
        uint64_t v29 = *(void *)(**(void **)(a2 + 16) + 32);
        uint64_t v30 = *(void *)(a2 + 8) - *(void *)(**(void **)(a2 + 16) + 24);
        unint64_t v31 = v29 - v30;
        if (v30 < 0 || (v31 & 0x8000000000000000) != 0 || (unint64_t)v43 > v31)
        {
          int v48 = "usd/crateFile.cpp";
          uint64_t v49 = "_ReadTokens";
          uint64_t v50 = 4014;
          int v51 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrIntern"
                "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                "le::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
          char v52 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens size %llu with remaining file size is %lld of %lld", v43, v31, v29);
          goto LABEL_46;
        }
        unint64_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::TfFastCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::TfFastCompression *)__sz);
        uint64_t v33 = v43;
        if (!CompressedBufferSize || CompressedBufferSize < (unint64_t)v43)
        {
          int v48 = "usd/crateFile.cpp";
          uint64_t v49 = "_ReadTokens";
          uint64_t v50 = 4021;
          int v51 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrIntern"
                "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                "le::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
          char v52 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens. Corrupt compression data. Compressed size %llu, uncompressed size %llu", v43, __sz);
          goto LABEL_46;
        }
        size_t v34 = __sz;
        size_t v17 = (char *)operator new[](__sz);
        std::string __p = v17;
        char v35 = operator new[]((size_t)v33);
        sub_216C82F78(v12, v35, (size_t)v33);
        pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer((pxrInternal__aapl__pxrReserved__::TfFastCompression *)v35, v17, v43, __sz);
        float v18 = &v17[v34];
        size_t v19 = __sz;
        operator delete[](v35);
      }
      else
      {
        size_t __sz = 0;
        if ((sub_216C82F78(a2 + 8, &__sz, 8uLL) & 1) == 0) {
          goto LABEL_46;
        }
        uint64_t v13 = *(void *)(**(void **)(a2 + 16) + 32);
        uint64_t v14 = *(void *)(a2 + 8) - *(void *)(**(void **)(a2 + 16) + 24);
        size_t v15 = v13 - v14;
        size_t v16 = __sz;
        if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || __sz > v15)
        {
          int v48 = "usd/crateFile.cpp";
          uint64_t v49 = "_ReadTokens";
          uint64_t v50 = 3992;
          int v51 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrIntern"
                "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                "le::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
          char v52 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens size %llu with remaining file size being %lld of %lld", __sz, v15, v13);
          goto LABEL_46;
        }
        size_t v17 = (char *)operator new[](__sz);
        std::string __p = v17;
        sub_216C82F78(v12, v17, v16);
        float v18 = &v17[v16];
        size_t v19 = __sz;
      }
      if (v17 != v18 && *(v18 - 1))
      {
        int v48 = "usd/crateFile.cpp";
        uint64_t v49 = "_ReadTokens";
        uint64_t v50 = 4036;
        int v51 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrInternal"
              "__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::"
              "_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
        char v52 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 3, (pxrInternal__aapl__pxrReserved__ *)"Tokens section not null-terminated in crate file");
        *(v18 - 1) = 0;
      }
      unint64_t v20 = __dst;
      if (__dst - 1 >= v19)
      {
        int v48 = "usd/crateFile.cpp";
        uint64_t v49 = "_ReadTokens";
        uint64_t v50 = 4046;
        int v51 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrInternal"
              "__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::"
              "_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
        char v52 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens. Corrupt data. Data size %llu, num tokens %llu", v19, __dst);
        std::string __p = 0;
      }
      else
      {
        uint64_t v21 = *(void *)(a1 + 120);
        uint64_t v22 = *(void *)(a1 + 128);
        uint64_t v23 = a1 + 120;
        if (v22 != v21)
        {
          do
          {
            uint64_t v25 = *(void *)(v22 - 8);
            v22 -= 8;
            uint64_t v24 = v25;
            if ((v25 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
          while (v22 != v21);
          unint64_t v20 = __dst;
        }
        *(void *)(a1 + 128) = v21;
        sub_216A9C5B8(a1 + 120, v20);
        v17[v19 - 1] = 0;
        pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v48);
        uint64_t v26 = 0;
        if (v17 < v18 && __dst)
        {
          uint64_t v26 = 0;
          char v27 = __p;
          while (v17 - v27 < v19)
          {
            size_t __sz = 0;
            int v39 = v53;
            long long v28 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&__sz, 0x28uLL);
            *((unsigned char *)v28 - 11) = 1;
            *long long v28 = &unk_26C75F310;
            v28[1] = v23;
            v28[2] = v26;
            v28[3] = v17;
            v28[4] = v54;
            (**(void (***)(void))*(v28 - 5))();
            v17 += strlen(v17) + 1;
            ++v26;
            if (v17 >= v18 || v26 == __dst) {
              goto LABEL_29;
            }
          }
          size_t __sz = (size_t)"usd/crateFile.cpp";
          int v39 = "_ReadTokens";
          uint64_t v40 = 4079;
          uint64_t v41 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrIntern"
                "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                "le::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
          char v42 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__sz, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed read tokens, buffer overflow.");
        }
        else
        {
LABEL_29:
          pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v48);
          if (v26 != __dst)
          {
            size_t __sz = (size_t)"usd/crateFile.cpp";
            int v39 = "_ReadTokens";
            uint64_t v40 = 4089;
            uint64_t v41 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrInte"
                  "rnal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Cra"
                  "teFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
            char v42 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__sz, 3, (pxrInternal__aapl__pxrReserved__ *)"Crate file claims %zu tokens, found %zu", __dst, v26);
          }
          sub_216C83328((pxrInternal__aapl__pxrReserved__ *)&__p);
        }
        pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v48);
        size_t v17 = (char *)__p;
        std::string __p = 0;
        if (!v17) {
          goto LABEL_46;
        }
      }
      operator delete[](v17);
LABEL_46:
      BOOL v7 = v47;
      goto LABEL_47;
    }
    int v48 = "usd/crateFile.cpp";
    uint64_t v49 = "_ReadTokens";
    uint64_t v50 = 3966;
    int v51 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrInternal__aa"
          "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStr"
          "eam<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
    char v52 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file corrupt, tokens section is possibly truncatedat offset %lld but file size is %lld", v11, v10);
  }
LABEL_47:
  int v47 = v7 - 1;
  if (v7)
  {
    uint64_t v36 = (uint64_t)v46;
    int v37 = v7 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v36);
      int v47 = v37--;
    }
    while (v37 != -2);
  }
}

void sub_216C814D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, char a20,uint64_t a21,char a22)
{
  if (__p) {
    operator delete[](__p);
  }
  sub_21684E6B8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_216C81578(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    uint64_t v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadStrings", 0, a3);
    BOOL v7 = v6 != 0;
  }
  else
  {
    uint64_t v6 = 0;
    BOOL v7 = 0;
  }
  uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "STRINGS");
  if (result)
  {
    *(void *)(a2 + 8) = *(void *)(**(void **)(a2 + 16) + 24) + *(void *)(result + 16);
    uint64_t result = sub_216C837BC(a2, (void **)(a1 + 144));
  }
  if (v7) {
    return pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v6);
  }
  return result;
}

void sub_216C8163C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216C81650(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadFields", 0, a3);
    BOOL v7 = v6 != 0;
  }
  else
  {
    uint64_t v6 = 0;
    BOOL v7 = 0;
  }
  __dst[1] = v6;
  unsigned int v35 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "FIELDS");
  if (!Section) {
    goto LABEL_32;
  }
  *(void *)(a2 + 8) = *(void *)(**(void **)(a2 + 16) + 24) + *((void *)Section + 2);
  uint64_t v9 = a2 + 8;
  if (((*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8)) <= 0x3FFu)
  {
    sub_216C83A14(a2, (void **)(a1 + 48));
    goto LABEL_32;
  }
  __dst[0] = 0;
  if (sub_216C82F78(a2 + 8, __dst, 8uLL))
  {
    uint64_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(__dst[0]);
    unint64_t DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(__dst[0]);
    if (CompressedBufferSize && DecompressionWorkingSpaceSize)
    {
      uint64_t v12 = (void *)(a1 + 48);
      sub_216C83970((uint64_t)v12, (unint64_t)__dst[0]);
      sub_2167813E0(&v29, (unint64_t)__dst[0]);
      *(_OWORD *)unint64_t v31 = 0u;
      *(_OWORD *)std::string __p = 0u;
      int v13 = sub_216C83CFC((uint64_t)v31, a2, v29, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((v30 - (unsigned char *)v29) >> 2));
      uint64_t v14 = __p[0];
      __p[0] = 0;
      if (v14) {
        operator delete[](v14);
      }
      size_t v15 = v31[0];
      v31[0] = 0;
      if (v15) {
        operator delete[](v15);
      }
      if (!v13) {
        goto LABEL_30;
      }
      size_t v16 = __dst[0];
      if (__dst[0])
      {
        size_t v17 = (int *)v29;
        float v18 = (_DWORD *)(*v12 + 4);
        do
        {
          int v19 = *v17++;
          _DWORD *v18 = v19;
          v18 += 4;
          size_t v16 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v16 - 1);
        }
        while (v16);
      }
      size_t __sz = 0;
      if ((sub_216C82F78(a2 + 8, &__sz, 8uLL) & 1) == 0) {
        goto LABEL_30;
      }
      uint64_t v20 = *(void *)(**(void **)(a2 + 16) + 32);
      uint64_t v21 = *(void *)(a2 + 8) - *(void *)(**(void **)(a2 + 16) + 24);
      size_t v22 = v20 - v21;
      size_t v23 = __sz;
      if (v21 < 0 || (v22 & 0x8000000000000000) != 0 || __sz > v22)
      {
        v31[0] = "usd/crateFile.cpp";
        v31[1] = "_ReadFields";
        __p[0] = (void *)3739;
        __p[1] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadFields(Reader) [Reader = pxrInter"
                 "nal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Crate"
                 "File::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
        char v33 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v31, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fields of size %llu with remaining file size is %lld of %lld", __sz, v22, v20);
LABEL_30:
        if (v29)
        {
          uint64_t v30 = v29;
          operator delete(v29);
        }
        goto LABEL_32;
      }
      uint64_t v24 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[](__sz);
      if (sub_216C82F78(v9, v24, v23))
      {
        v31[0] = 0;
        v31[1] = 0;
        __p[0] = 0;
        sub_21679A004((uint64_t)v31, (unint64_t)__dst[0]);
        pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(v24, (char *)v31[0], (char *)__sz, (char *)v31[1] - (char *)v31[0]);
        uint64_t v25 = v31[0];
        if (__dst[0])
        {
          uint64_t v26 = 0;
          char v27 = (void *)(*v12 + 8);
          do
          {
            void *v27 = v25[(void)v26];
            v27 += 2;
            uint64_t v26 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v26 + 1);
          }
          while (v26 != __dst[0]);
          goto LABEL_28;
        }
        if (v31[0])
        {
LABEL_28:
          v31[1] = v25;
          operator delete(v25);
        }
      }
      operator delete[](v24);
      goto LABEL_30;
    }
    if (__dst[0])
    {
      v31[0] = "usd/crateFile.cpp";
      v31[1] = "_ReadFields";
      __p[0] = (void *)3720;
      __p[1] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadFields(Reader) [Reader = pxrInterna"
               "l__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
               "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
      char v33 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v31, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed read compressed fields of size %llu.", __dst[0]);
    }
  }
LABEL_32:
  unsigned int v35 = v7 - 1;
  if (v7)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v6);
    unsigned int v35 = v7 | 0xFFFFFFFE;
  }
}

void sub_216C81980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  sub_21684E6B8(v18 - 64);
  _Unwind_Resume(a1);
}

void sub_216C81A04(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadFieldSets", 0, a3);
    BOOL v7 = v6 != 0;
  }
  else
  {
    uint64_t v6 = 0;
    BOOL v7 = 0;
  }
  __dst[1] = v6;
  int v24 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "FIELDSETS");
  if (!Section) {
    goto LABEL_27;
  }
  *(void *)(a2 + 8) = *(void *)(**(void **)(a2 + 16) + 24) + *((void *)Section + 2);
  if (((*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8)) > 0x3FFu)
  {
    __dst[0] = 0;
    if ((sub_216C82F78(a2 + 8, __dst, 8uLL) & 1) == 0) {
      goto LABEL_27;
    }
    uint64_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(__dst[0]);
    unint64_t DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(__dst[0]);
    if (!CompressedBufferSize || !DecompressionWorkingSpaceSize)
    {
      v20[0] = "usd/crateFile.cpp";
      v20[1] = "_ReadFieldSets";
      __p[0] = (void *)3679;
      __p[1] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadFieldSets(Reader) [Reader = pxrInte"
               "rnal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateF"
               "ile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
      char v22 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed fieldSets of size %llu", __dst[0]);
      goto LABEL_27;
    }
    sub_216C83F34(a1 + 72, (unint64_t)__dst[0]);
    sub_2167813E0(v19, (unint64_t)__dst[0]);
    *(_OWORD *)uint64_t v20 = 0u;
    *(_OWORD *)std::string __p = 0u;
    char v12 = sub_216C83CFC((uint64_t)v20, a2, (_DWORD *)v19[0], __dst[0]);
    int v13 = __p[0];
    __p[0] = 0;
    if (v13) {
      operator delete[](v13);
    }
    uint64_t v14 = v20[0];
    v20[0] = 0;
    if (v14) {
      operator delete[](v14);
    }
    if (v12)
    {
      size_t v15 = __dst[0];
      size_t v16 = v19[0];
      if (__dst[0])
      {
        size_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 72);
        do
        {
          *(_DWORD *)(v18 + 4 * (void)v17) = v16[(void)v17];
          size_t v17 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v17 + 1);
        }
        while (v15 != v17);
LABEL_25:
        v19[1] = v16;
        operator delete(v16);
LABEL_26:
        if ((v12 & 1) == 0) {
          goto LABEL_27;
        }
        goto LABEL_7;
      }
    }
    else
    {
      size_t v16 = v19[0];
    }
    if (!v16) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if ((sub_216C83F64(a2, (void **)(a1 + 72)) & 1) == 0) {
    goto LABEL_27;
  }
LABEL_7:
  uint64_t v9 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 72) != v9 && *(_DWORD *)(v9 - 4) != -1)
  {
    v20[0] = "usd/crateFile.cpp";
    v20[1] = "_ReadFieldSets";
    __p[0] = (void *)3693;
    __p[1] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadFieldSets(Reader) [Reader = pxrIntern"
             "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile:"
             ":_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt field sets in crate file");
    *(_DWORD *)(*(void *)(a1 + 80) - 4) = -1;
  }
LABEL_27:
  int v24 = v7 - 1;
  if (v7) {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v6);
  }
}

void sub_216C81C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  sub_216C83E54((uint64_t)&a13);
  if (__p) {
    operator delete(__p);
  }
  sub_21684E6B8(v13 - 64);
  _Unwind_Resume(a1);
}

void sub_216C81CD0(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    uint64_t v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadPaths", 0, a3);
    BOOL v7 = v6 != 0;
  }
  else
  {
    uint64_t v6 = 0;
    BOOL v7 = 0;
  }
  char v33 = v6;
  int v34 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "PATHS");
  if (Section)
  {
    *(void *)(a2 + 8) = *(void *)(**(void **)(a2 + 16) + 24) + *((void *)Section + 2);
    unint64_t __dst = 0;
    if (sub_216C82F78(a2 + 8, &__dst, 8uLL))
    {
      pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v35);
      unsigned int v9 = (*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8) | *(unsigned __int8 *)(a1 + 6370);
      if (v9 == 1)
      {
        sub_216AF4CFC((uint64_t *)(a1 + 96), __dst);
        uint64_t v10 = *(int **)(a1 + 96);
        uint64_t v11 = *(void *)(a1 + 104);
        v27[0] = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v27);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v27 + 1);
        if (v11 - (uint64_t)v10 >= 1)
        {
          unint64_t v12 = ((unint64_t)(v11 - (void)v10) >> 3) + 1;
          do
          {
            sub_2169C487C(v10, v27);
            sub_2169C48D4(v10 + 1, (_DWORD *)v27 + 1);
            --v12;
            v10 += 2;
          }
          while (v12 > 1);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v27 + 1);
        sub_21697C414(v27);
        long long v13 = *(_OWORD *)(a2 + 16);
        v30[0] = *(_OWORD *)a2;
        v30[1] = v13;
        uint64_t v31 = *(void *)(a2 + 32);
        uint64_t v29 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v29);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v29 + 1);
        sub_216C84240((char *)a1, v30, (uint64_t)v35, (int *)&v29);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v29 + 1);
        uint64_t v14 = &v29;
      }
      else
      {
        if (v9 > 0x3FF)
        {
          long long v19 = *(_OWORD *)(a2 + 16);
          v22[0] = *(_OWORD *)a2;
          v22[1] = v19;
          uint64_t v23 = *(void *)(a2 + 32);
          sub_216C84808((void *)a1, (uint64_t)v22, (pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v35, __dst);
          goto LABEL_19;
        }
        if (__dst > *(void *)(**(void **)(a2 + 16) + 32)
                   - *(void *)(a2 + 8)
                   + *(void *)(**(void **)(a2 + 16) + 24))
        {
          v27[0] = "usd/crateFile.cpp";
          v27[1] = "_ReadPaths";
          v27[2] = 4126;
          v27[3] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadPaths(Reader) [Reader = pxrInte"
                   "rnal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Cr"
                   "ateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
          char v28 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v27, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid number of paths in file.");
          goto LABEL_19;
        }
        sub_216AF4CFC((uint64_t *)(a1 + 96), __dst);
        size_t v15 = *(int **)(a1 + 96);
        uint64_t v16 = *(void *)(a1 + 104);
        v27[0] = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v27);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v27 + 1);
        if (v16 - (uint64_t)v15 >= 1)
        {
          unint64_t v17 = ((unint64_t)(v16 - (void)v15) >> 3) + 1;
          do
          {
            sub_2169C487C(v15, v27);
            sub_2169C48D4(v15 + 1, (_DWORD *)v27 + 1);
            --v17;
            v15 += 2;
          }
          while (v17 > 1);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v27 + 1);
        sub_21697C414(v27);
        long long v18 = *(_OWORD *)(a2 + 16);
        v25[0] = *(_OWORD *)a2;
        v25[1] = v18;
        uint64_t v26 = *(void *)(a2 + 32);
        uint64_t v24 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v24);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v24 + 1);
        sub_216C84524((char *)a1, v25, (uint64_t)v35, (int *)&v24);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
        uint64_t v14 = &v24;
      }
      sub_21697C414(v14);
LABEL_19:
      pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v35);
      BOOL v7 = v34;
    }
  }
  int v34 = v7 - 1;
  if (v7)
  {
    uint64_t v20 = (uint64_t)v33;
    int v21 = v7 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v20);
      int v34 = v21--;
    }
    while (v21 != -2);
  }
}

void sub_216C82064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
}

void sub_216C820D8(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    uint64_t v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadSpecs", 0, a3);
    BOOL v7 = v6 != 0;
  }
  else
  {
    uint64_t v6 = 0;
    BOOL v7 = 0;
  }
  v122 = v6;
  int v123 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "SPECS");
  uint64_t v9 = a1 + 6368;
  if (Section)
  {
    *(void *)(a2 + 8) = *(void *)(**(void **)(a2 + 16) + 24) + *((void *)Section + 2);
    unsigned int v10 = (*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8) | *(unsigned __int8 *)(a1 + 6370);
    if (v10 == 1)
    {
      std::string __p = 0;
      v118 = 0;
      uint64_t v119 = 0;
      if ((sub_216C85598(a2, &__p) & 1) == 0)
      {
        if (__p)
        {
          v118 = (const char *)__p;
          operator delete(__p);
        }
        goto LABEL_146;
      }
      sub_216C8555C(a1, (v118 - (unsigned char *)__p) >> 4);
      uint64_t v11 = (char *)__p;
      unint64_t v12 = v118;
      if (__p != v118)
      {
        long long v13 = *(_DWORD **)a1;
        do
        {
          int v14 = *((_DWORD *)v11 + 3);
          *(void *)long long v13 = *(void *)(v11 + 4);
          v13[2] = v14;
          v11 += 16;
          v13 += 3;
        }
        while (v11 != v12);
        uint64_t v11 = (char *)__p;
      }
      if (v11)
      {
        v118 = v11;
        operator delete(v11);
      }
      goto LABEL_15;
    }
    if (v10 <= 0x3FF)
    {
      if ((sub_216C858B4(a2, (void **)a1) & 1) == 0) {
        goto LABEL_146;
      }
      goto LABEL_15;
    }
    unint64_t __dst = 0;
    if ((sub_216C82F78(a2 + 8, &__dst, 8uLL) & 1) == 0) {
      goto LABEL_146;
    }
    size_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(__dst);
    unint64_t DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(__dst);
    if (!CompressedBufferSize || (size_t v69 = DecompressionWorkingSpaceSize) == 0)
    {
      std::string __p = "usd/crateFile.cpp";
      v118 = "_ReadSpecs";
      uint64_t v119 = 3784;
      v120 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrInternal__"
             "aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_Mm"
             "apStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
      char v121 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read specs of size %llu", __dst);
      goto LABEL_146;
    }
    v113.__r_.__value_.__r.__words[0] = 0;
    if ((sub_216C82F78(a2 + 8, &v113, 8uLL) & 1) == 0) {
      goto LABEL_146;
    }
    uint64_t v70 = *(void *)(**(void **)(a2 + 16) + 32);
    uint64_t v71 = *(void *)(a2 + 8) - *(void *)(**(void **)(a2 + 16) + 24);
    std::string::size_type v72 = v70 - v71;
    size_t v73 = v113.__r_.__value_.__r.__words[0];
    if (v71 < 0 || (v72 & 0x8000000000000000) != 0 || v113.__r_.__value_.__r.__words[0] > v72)
    {
      std::string __p = "usd/crateFile.cpp";
      v118 = "_ReadSpecs";
      uint64_t v119 = 3795;
      v120 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrInternal__"
             "aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_Mm"
             "apStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
      char v121 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fields of size %llu with remaining file size is %lld of %lld", v113.__r_.__value_.__r.__words[0], v72, v70);
      goto LABEL_146;
    }
    uint64_t v74 = operator new[](CompressedBufferSize);
    uint64_t v75 = (char *)operator new[](v69);
    p_dst = 0;
    v125 = 0;
    uint64_t v126 = 0;
    if (v73 - 1 >= CompressedBufferSize)
    {
      std::string __p = "usd/crateFile.cpp";
      v118 = "_ReadSpecs";
      uint64_t v119 = 3817;
      v120 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrInternal__"
             "aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_Mm"
             "apStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
      char v121 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read pathIndexes, size > compressedBufferSize.");
    }
    else
    {
      sub_216C82F78(a2 + 8, v74, v73);
      sub_21681C000((uint64_t)&p_dst, (unint64_t)__dst);
      pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v74, v113.__r_.__value_.__l.__data_, p_dst, (int64_t)__dst, v75, v76);
      sub_216C8555C(a1, (unint64_t)__dst);
      int v77 = __dst;
      if (__dst)
      {
        int v78 = p_dst;
        int v79 = *(_DWORD **)a1;
        do
        {
          int v80 = *(_DWORD *)v78;
          int v78 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)((char *)v78 + 4);
          *int v79 = v80;
          v79 += 3;
          int v77 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v77 - 1);
        }
        while (v77);
      }
      __n[0] = 0;
      if (sub_216C82F78(a2 + 8, __n, 8uLL))
      {
        uint64_t v81 = *(void *)(**(void **)(a2 + 16) + 32);
        uint64_t v82 = *(void *)(a2 + 8) - *(void *)(**(void **)(a2 + 16) + 24);
        size_t v83 = v81 - v82;
        if (v82 < 0 || (v83 & 0x8000000000000000) != 0 || __n[0] > v83)
        {
          std::string __p = "usd/crateFile.cpp";
          v118 = "_ReadSpecs";
          uint64_t v119 = 3827;
          v120 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrIntern"
                 "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateF"
                 "ile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
          char v121 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fields of size %llu with remaining file size is %lld of %lld", __n[0], v83, v81);
        }
        else if (__n[0] - 1 >= CompressedBufferSize)
        {
          std::string __p = "usd/crateFile.cpp";
          v118 = "_ReadSpecs";
          uint64_t v119 = 3841;
          v120 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrIntern"
                 "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateF"
                 "ile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
          char v121 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fsetIndexes, size > compressedBufferSize.");
        }
        else
        {
          sub_216C82F78(a2 + 8, v74, __n[0]);
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v74, (char *)__n[0], p_dst, (int64_t)__dst, v75, v84);
          unint64_t v85 = __dst;
          if (__dst)
          {
            unint64_t v86 = p_dst;
            unint64_t v87 = (_DWORD *)(*(void *)a1 + 4);
            do
            {
              int v88 = *(_DWORD *)v86;
              unint64_t v86 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)((char *)v86 + 4);
              *unint64_t v87 = v88;
              v87 += 3;
              unint64_t v85 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v85 - 1);
            }
            while (v85);
          }
          v109[0] = 0;
          if (sub_216C82F78(a2 + 8, v109, 8uLL))
          {
            uint64_t v89 = *(void *)(**(void **)(a2 + 16) + 32);
            uint64_t v90 = *(void *)(a2 + 8) - *(void *)(**(void **)(a2 + 16) + 24);
            size_t v91 = v89 - v90;
            if (v90 < 0 || (v91 & 0x8000000000000000) != 0 || v109[0] > v91)
            {
              std::string __p = "usd/crateFile.cpp";
              v118 = "_ReadSpecs";
              uint64_t v119 = 3852;
              v120 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrIn"
                     "ternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Us"
                     "d_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
              char v121 = 0;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read spec types of size %llu with remaining file size is %lld of %lld", v109[0], v91, v89);
            }
            else
            {
              if (v109[0] - 1 < CompressedBufferSize)
              {
                sub_216C82F78(a2 + 8, v74, v109[0]);
                pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v74, (char *)v109[0], p_dst, (int64_t)__dst, v75, v92);
                v93 = __dst;
                if (__dst)
                {
                  uint64_t v94 = 0;
                  uint64_t v95 = 8;
                  do
                  {
                    uint64_t v96 = *((unsigned int *)p_dst + (void)v94);
                    if (v96 >= 0xC)
                    {
                      std::string __p = "usd/crateFile.cpp";
                      v118 = "_ReadSpecs";
                      uint64_t v119 = 3864;
                      v120 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader"
                             " = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__p"
                             "xrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::C"
                             "rateFile::_FileMapping *>>]";
                      char v121 = 0;
                      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid spec type %zu", v96);
                      *(_DWORD *)(*(void *)a1 + v95) = 0;
                      v93 = __dst;
                    }
                    else
                    {
                      *(_DWORD *)(*(void *)a1 + v95) = v96;
                    }
                    uint64_t v94 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v94 + 1);
                    v95 += 12;
                  }
                  while (v94 != v93);
                  int v106 = 0;
                  uint64_t v9 = a1 + 6368;
                }
                else
                {
                  int v106 = 0;
                }
LABEL_153:
                if (p_dst)
                {
                  v125 = (const char *)p_dst;
                  operator delete(p_dst);
                }
                operator delete[](v75);
                operator delete[](v74);
                if (v106) {
                  goto LABEL_146;
                }
                goto LABEL_15;
              }
              std::string __p = "usd/crateFile.cpp";
              v118 = "_ReadSpecs";
              uint64_t v119 = 3871;
              v120 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrIn"
                     "ternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Us"
                     "d_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
              char v121 = 0;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read spectypes, size > compressedBufferSize.");
            }
          }
        }
      }
    }
    int v106 = 1;
    goto LABEL_153;
  }
LABEL_15:
  BOOL v108 = v7;
  size_t v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216C85BB4((uint64_t)&__p, 0, 0.0, 0.5);
  unint64_t __dst = 0;
  v115 = 0;
  unint64_t v116 = 0;
  unint64_t v17 = *(char **)a1;
  uint64_t v16 = *(unsigned int **)(a1 + 8);
  if (*(unsigned int **)a1 == v16) {
    goto LABEL_145;
  }
  uint64_t v107 = v9;
  long long v18 = (unsigned int *)(v17 + 8);
  long long v19 = *(char **)a1;
  do
  {
    unint64_t v20 = *(v18 - 2);
    uint64_t v21 = *(void *)(a1 + 96);
    if (v20 >= (*(void *)(a1 + 104) - v21) >> 3) {
      char v22 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v15);
    }
    else {
      char v22 = (uint64_t *)(v21 + 8 * v20);
    }
    if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v22))
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"spec at index %zu has empty path", v23, v24, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v17[-*(void *)a1] >> 2));
      BOOL v32 = v115;
      if ((unint64_t)v115 >= v116)
      {
        unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((v115 - __dst) >> 3);
        unint64_t v40 = v39 + 1;
        if (v39 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        if (0x5555555555555556 * ((uint64_t)(v116 - (void)__dst) >> 3) > v40) {
          unint64_t v40 = 0x5555555555555556 * ((uint64_t)(v116 - (void)__dst) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v116 - (void)__dst) >> 3) >= 0x555555555555555) {
          unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v41 = v40;
        }
        v128 = &v116;
        if (v41) {
          char v42 = (void **)sub_216782ED8((uint64_t)&v116, v41);
        }
        else {
          char v42 = 0;
        }
        uint64_t v49 = &v42[3 * v39];
        p_dst = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)v42;
        v125 = (const char *)v49;
        v127 = (const char *)&v42[3 * v41];
        long long v50 = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
        v49[2] = (void *)v113.__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v49 = v50;
        memset(&v113, 0, sizeof(v113));
        uint64_t v126 = (uint64_t)(v49 + 3);
        sub_216790CCC((uint64_t *)&__dst, &p_dst);
        int v51 = (long long *)v115;
        size_t v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216790E64((uint64_t)&p_dst);
        v115 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v51;
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v113.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v33 = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
        *((void *)v115 + 2) = *((void *)&v113.__r_.__value_.__l + 2);
        *(_OWORD *)BOOL v32 = v33;
        v115 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v32 + 24);
      }
      uint64_t v25 = v18;
      goto LABEL_81;
    }
    uint64_t v25 = (unsigned int *)(v19 + 8);
    if (*v18 && (int)*v18 < 12)
    {
      size_t v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216C85F24((uint64_t *)&__p, (unsigned int *)v22, v22);
      if (v26) {
        goto LABEL_82;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)v22, (uint64_t)__n);
      uint64_t v29 = __n;
      if (v112 < 0) {
        uint64_t v29 = (size_t *)__n[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"spec <%s> repeated", v27, v28, v29);
      uint64_t v30 = v115;
      if ((unint64_t)v115 < v116)
      {
        long long v31 = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
        *((void *)v115 + 2) = *((void *)&v113.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v30 = v31;
        memset(&v113, 0, sizeof(v113));
        v115 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v30 + 24);
        goto LABEL_79;
      }
      unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((v115 - __dst) >> 3);
      unint64_t v53 = v52 + 1;
      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      if (0x5555555555555556 * ((uint64_t)(v116 - (void)__dst) >> 3) > v53) {
        unint64_t v53 = 0x5555555555555556 * ((uint64_t)(v116 - (void)__dst) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v116 - (void)__dst) >> 3) >= 0x555555555555555) {
        unint64_t v54 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v54 = v53;
      }
      v128 = &v116;
      if (v54) {
        int v55 = (void **)sub_216782ED8((uint64_t)&v116, v54);
      }
      else {
        int v55 = 0;
      }
      int v60 = &v55[3 * v52];
      p_dst = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)v55;
      v125 = (const char *)v60;
      v127 = (const char *)&v55[3 * v54];
      long long v61 = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
      v60[2] = (void *)v113.__r_.__value_.__r.__words[2];
      *(_OWORD *)int v60 = v61;
      memset(&v113, 0, sizeof(v113));
      uint64_t v126 = (uint64_t)(v60 + 3);
      sub_216790CCC((uint64_t *)&__dst, &p_dst);
      int v62 = (long long *)v115;
      size_t v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216790E64((uint64_t)&p_dst);
      v115 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v62;
      if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_79;
      }
      unint64_t v59 = (void *)v113.__r_.__value_.__r.__words[0];
      goto LABEL_78;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)v22, (uint64_t)__n);
    if (v112 >= 0) {
      uint64_t v36 = __n;
    }
    else {
      uint64_t v36 = (size_t *)__n[0];
    }
    unsigned int v37 = *v18;
    if (*v18)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"invalid spec type value %d", v34, v35, *v18);
      long long v38 = v109;
      if (v110 < 0) {
        long long v38 = (size_t *)v109[0];
      }
    }
    else
    {
      long long v38 = (size_t *)"unknown spec type";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"spec <%s> has %s", v34, v35, v36, v38);
    unint64_t v43 = v115;
    if ((unint64_t)v115 >= v116)
    {
      unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((v115 - __dst) >> 3);
      unint64_t v46 = v45 + 1;
      if (v45 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      if (0x5555555555555556 * ((uint64_t)(v116 - (void)__dst) >> 3) > v46) {
        unint64_t v46 = 0x5555555555555556 * ((uint64_t)(v116 - (void)__dst) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v116 - (void)__dst) >> 3) >= 0x555555555555555) {
        unint64_t v47 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v47 = v46;
      }
      v128 = &v116;
      if (v47) {
        int v48 = (void **)sub_216782ED8((uint64_t)&v116, v47);
      }
      else {
        int v48 = 0;
      }
      long long v56 = &v48[3 * v45];
      p_dst = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)v48;
      v125 = (const char *)v56;
      v127 = (const char *)&v48[3 * v47];
      long long v57 = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
      v56[2] = (void *)v113.__r_.__value_.__r.__words[2];
      *(_OWORD *)long long v56 = v57;
      memset(&v113, 0, sizeof(v113));
      uint64_t v126 = (uint64_t)(v56 + 3);
      sub_216790CCC((uint64_t *)&__dst, &p_dst);
      __n128 v58 = (long long *)v115;
      size_t v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216790E64((uint64_t)&p_dst);
      v115 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v58;
      if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (!v37) {
          goto LABEL_79;
        }
LABEL_71:
        if ((v110 & 0x80000000) == 0) {
          goto LABEL_79;
        }
        unint64_t v59 = (void *)v109[0];
LABEL_78:
        operator delete(v59);
        goto LABEL_79;
      }
      operator delete(v113.__r_.__value_.__l.__data_);
      if (v37) {
        goto LABEL_71;
      }
    }
    else
    {
      long long v44 = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
      *((void *)v115 + 2) = *((void *)&v113.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v43 = v44;
      memset(&v113, 0, sizeof(v113));
      v115 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v43 + 24);
      if (v37) {
        goto LABEL_71;
      }
    }
LABEL_79:
    if (v112 < 0) {
      operator delete((void *)__n[0]);
    }
LABEL_81:
    unsigned int *v25 = 0;
LABEL_82:
    v19 += 12;
    uint64_t v63 = v18 + 1;
    v18 += 3;
    v17 += 12;
  }
  while (v63 != v16);
  BOOL v7 = v108;
  if (__dst != v115)
  {
    uint64_t v64 = *(void *)(a1 + 8);
    if (*(void *)a1 != v64)
    {
      uint64_t v65 = *(void *)a1 + 12;
      while (*(_DWORD *)(v65 - 4))
      {
        BOOL v66 = v65 == v64;
        v65 += 12;
        if (v66) {
          goto LABEL_134;
        }
      }
      uint64_t v97 = v65 - 12;
      if (v65 - 12 != v64 && v65 != v64)
      {
        do
        {
          if (*(_DWORD *)(v65 + 8))
          {
            uint64_t v98 = *(void *)v65;
            *(_DWORD *)(v97 + 8) = *(_DWORD *)(v65 + 8);
            *(void *)uint64_t v97 = v98;
            v97 += 12;
          }
          v65 += 12;
        }
        while (v65 != v64);
        uint64_t v64 = *(void *)(a1 + 8);
      }
      if (v97 != v64) {
        *(void *)(a1 + 8) = v97;
      }
    }
LABEL_134:
    unint64_t v99 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v115 - __dst) >> 3));
    if (v115 == __dst) {
      uint64_t v100 = 0;
    }
    else {
      uint64_t v100 = v99;
    }
    sub_216C8653C((uint64_t)__dst, (unint64_t)v115, (uint64_t)&p_dst, v100, 1);
    uint64_t v101 = sub_216ABCE20((unsigned __int8 *)__dst, (unsigned __int8 *)v115, (uint64_t)&p_dst);
    sub_216AB1AAC((uint64_t)&__dst, (uint64_t)v101, (long long *)v115);
    p_dst = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)"usd/crateFile.cpp";
    v125 = "_ReadSpecs";
    uint64_t v126 = 3935;
    v127 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrInternal__aa"
           "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapSt"
           "ream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
    LOBYTE(v128) = 0;
    uint64_t v102 = (const char *)(a1 + 6512);
    if (*(char *)(v107 + 167) < 0) {
      uint64_t v102 = *(const char **)v102;
    }
    pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", (std::string **)&__dst, &v113);
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v103 = &v113;
    }
    else {
      v103 = (std::string *)v113.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&p_dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt asset @%s@ - ignoring invalid specs: %s.", v102, (const char *)v103);
    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v113.__r_.__value_.__l.__data_);
    }
    BOOL v7 = v123;
  }
LABEL_145:
  p_dst = &__dst;
  sub_216782F20((void ***)&p_dst);
  p_dst = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)&v118;
  sub_216C85DE8((void ***)&p_dst);
LABEL_146:
  int v123 = v7 - 1;
  if (v7)
  {
    uint64_t v104 = (uint64_t)v122;
    int v105 = v7 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v104);
      int v123 = v105--;
    }
    while (v105 != -2);
  }
}

void sub_216C82DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  unint64_t v41 = *(void **)(v39 - 128);
  if (v41)
  {
    *(void *)(v39 - 120) = v41;
    operator delete(v41);
  }
  operator delete[](v38);
  operator delete[](v37);
  sub_21684E6B8(v39 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_216C82F78(uint64_t a1, void *__dst, size_t __n)
{
  unsigned __int8 v5 = *(const void **)a1;
  uint64_t v6 = **(void **)(a1 + 8);
  unint64_t v8 = *(void *)(v6 + 24);
  uint64_t v7 = *(void *)(v6 + 32);
  if (v8 > *(void *)a1 || *(void *)a1 + __n > v8 + v7)
  {
    char v22 = "usd/crateFile.cpp";
    uint64_t v23 = "Read";
    uint64_t v24 = 613;
    uint64_t v25 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateF"
          "ile::CrateFile::_FileMapping *>::Read(void *, size_t) [FileMappingPtr = pxrInternal__aapl__pxrReserved__::Usd_"
          "CrateFile::CrateFile::_FileMapping *]";
    char v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", __n, (ptrdiff_t)v5 - v8, v7);
    memset(__dst, 153, __n);
    return 0;
  }
  if (*(void *)(a1 + 16))
  {
    unint64_t v18 = sub_216C6A5EC(v8);
    unint64_t v19 = sub_216C6A5EC(*(void *)a1);
    unint64_t v20 = sub_216C6A5EC(*(void *)a1 + __n - 1);
    memset((void *)(*(void *)(a1 + 16) + v19 - v18), 1, v20 - v19 + 1);
    unsigned __int8 v5 = *(const void **)a1;
    uint64_t v21 = **(void **)(a1 + 8);
    unint64_t v8 = *(void *)(v21 + 24);
    uint64_t v7 = *(void *)(v21 + 32);
  }
  size_t v11 = v7 - ((unint64_t)v5 - v8);
  if (v11 < __n || ((v11 | ((size_t)v5 - v8)) & 0x8000000000000000) != 0)
  {
    char v22 = "usd/crateFile.cpp";
    uint64_t v23 = "Read";
    uint64_t v24 = 631;
    uint64_t v25 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateF"
          "ile::CrateFile::_FileMapping *>::Read(void *, size_t) [FileMappingPtr = pxrInternal__aapl__pxrReserved__::Usd_"
          "CrateFile::CrateFile::_FileMapping *]";
    char v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", __n, v7 - ((unint64_t)v5 - v8), v7);
    return 0;
  }
  if (*(_DWORD *)(a1 + 24))
  {
    uint64_t v12 = sub_216C774E4() & v8;
    uint64_t v13 = *(int *)(a1 + 24);
    uint64_t v14 = *(void *)a1 - v12;
    uint64_t v15 = v12 + v14 / (v13 << 10) * (v13 << 10);
    size_t v16 = (v13 << 10) * ((v14 + __n) / (v13 << 10)) + (v13 << 10);
    if (v16 >= v8 - v12 + *(void *)(**(void **)(a1 + 8) + 32)) {
      size_t v16 = v8 - v12 + *(void *)(**(void **)(a1 + 8) + 32);
    }
    pxrInternal__aapl__pxrReserved__::ArchMemAdvise(v15, v12 + v16 - v15, 1);
    unsigned __int8 v5 = *(const void **)a1;
  }
  memcpy(__dst, v5, __n);
  *(void *)a1 += __n;
  return 1;
}

uint64_t sub_216C83178(uint64_t a1, void **a2)
{
  unint64_t __dst = 0;
  uint64_t v4 = a1 + 8;
  if (!sub_216C82F78(a1 + 8, &__dst, 8uLL)) {
    return 0;
  }
  uint64_t v5 = *(void *)(**(void **)(a1 + 16) + 32);
  uint64_t v6 = *(void *)(a1 + 8) - *(void *)(**(void **)(a1 + 16) + 24);
  unint64_t v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    std::string __p = "usd/crateFile.cpp";
    uint64_t v13 = "_Read";
    uint64_t v14 = 1189;
    uint64_t v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::Crat"
          "eFile::_Section]";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_216C832B0(&__p, __dst);
  uint64_t v8 = sub_216C82F78(v4, __p, 32 * __dst);
  uint64_t v9 = v8;
  if (&__p == a2) {
    char v10 = 0;
  }
  else {
    char v10 = v8;
  }
  if (v10) {
    sub_216C7B0D4((char *)a2, (char *)__p, (uint64_t)v13, (v13 - (unsigned char *)__p) >> 5);
  }
  if (__p)
  {
    uint64_t v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_216C83294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C832B0(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2168C5234(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_216C8330C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C83328(pxrInternal__aapl__pxrReserved__ *a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if ((pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls(a1) & 1) == 0)
  {
    sub_216C834CC((pxrInternal__aapl__pxrReserved__ *)&v2);
    uint64_t v1 = v2;
  }
  uint64_t v2 = 0;
  if (v1) {
    operator delete[](v1);
  }
}

void sub_216C8337C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete[](__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C833A0(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216C83444(a1 + 8);
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 32));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216C83430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C83444(uint64_t a1)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v4, *(const char **)(a1 + 16));
  unint64_t v3 = (uint64_t *)(**(void **)a1 + 8 * *(void *)(a1 + 8));
  if (&v4 == v3)
  {
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if ((*v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t *v3 = v4;
  }
  return result;
}

void sub_216C834CC(pxrInternal__aapl__pxrReserved__ *a1)
{
  uint64_t v1 = *(void **)a1;
  std::string __p = *(void **)a1;
  *(void *)a1 = 0;
  BOOL HasConcurrency = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1);
  if (HasConcurrency)
  {
    uint64_t DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    uint64_t v4 = *(void *)(DetachedDispatcher + 256);
    v8[0] = 0;
    v8[1] = v4;
    uint64_t v5 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v8, 0x18uLL);
    *((unsigned char *)v5 - 11) = 1;
    void *v5 = &unk_26C75F358;
    v5[1] = v1;
    v5[2] = DetachedDispatcher + 264;
    unint64_t v6 = (pxrInternal__aapl__pxrReserved__ *)(**(uint64_t (***)(void))*(v5 - 5))();
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v6);
  }
  else
  {
    sub_216C835D0();
    if (__p) {
      operator delete[](__p);
    }
  }
}

void sub_216C835B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete[](__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C835D0()
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  v0 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v0) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  uint64_t v1 = sub_216862604(&v3, 0);
  char v4 = 0;
  unint64_t v2 = (void *)sub_2168520EC(v0 + 19, &v4);
  if (v2 != v1) {
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v0, v1, v2);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_216C8365C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216C83670(void *a1)
{
  unint64_t v2 = (void *)a1[1];
  *a1 = &unk_26C75F358;
  a1[1] = 0;
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_216C836BC(void *__p)
{
  unint64_t v2 = (void *)__p[1];
  void *__p = &unk_26C75F358;
  __p[1] = 0;
  if (v2) {
    operator delete[](v2);
  }

  operator delete(__p);
}

uint64_t sub_216C83718(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216C835D0();
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 16));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216C837A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C837BC(uint64_t a1, void **a2)
{
  unint64_t __dst = 0;
  uint64_t v4 = a1 + 8;
  if (!sub_216C82F78(a1 + 8, &__dst, 8uLL)) {
    return 0;
  }
  uint64_t v5 = *(void *)(**(void **)(a1 + 16) + 32);
  uint64_t v6 = *(void *)(a1 + 8) - *(void *)(**(void **)(a1 + 16) + 24);
  unint64_t v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    std::string __p = "usd/crateFile.cpp";
    uint64_t v13 = "_Read";
    uint64_t v14 = 1189;
    uint64_t v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::TokenIndex]";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_216C838F4(&__p, __dst);
  uint64_t v8 = sub_216C82F78(v4, __p, 4 * __dst);
  uint64_t v9 = v8;
  if (&__p == a2) {
    char v10 = 0;
  }
  else {
    char v10 = v8;
  }
  if (v10) {
    sub_216825D78((char *)a2, (char *)__p, (uint64_t)v13, (v13 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    uint64_t v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_216C838D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C838F4(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216781458(a1, a2);
    uint64_t v4 = (char *)a1[1];
    memset(v4, 255, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_216C83954(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C83970(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    sub_216C83BC8((void **)a1, a2 - v2);
  }
}

void sub_216C839A0(uint64_t a1, _DWORD *a2, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *a3)
{
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)std::string __p = 0u;
  sub_216C83CFC((uint64_t)v5, a1, a2, a3);
  unint64_t v3 = __p[0];
  __p[0] = 0;
  if (v3) {
    operator delete[](v3);
  }
  uint64_t v4 = v5[0];
  v5[0] = 0;
  if (v4) {
    operator delete[](v4);
  }
}

void sub_216C83A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C83A14(uint64_t a1, void **a2)
{
  unint64_t __dst = 0;
  uint64_t v4 = a1 + 8;
  if (!sub_216C82F78(a1 + 8, &__dst, 8uLL)) {
    return 0;
  }
  uint64_t v5 = *(void *)(**(void **)(a1 + 16) + 32);
  uint64_t v6 = *(void *)(a1 + 8) - *(void *)(**(void **)(a1 + 16) + 24);
  unint64_t v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    std::string __p = "usd/crateFile.cpp";
    uint64_t v13 = "_Read";
    uint64_t v14 = 1189;
    uint64_t v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Field]";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_216C83B4C(&__p, __dst);
  uint64_t v8 = sub_216C82F78(v4, __p, 16 * __dst);
  uint64_t v9 = v8;
  if (&__p == a2) {
    char v10 = 0;
  }
  else {
    char v10 = v8;
  }
  if (v10) {
    sub_216893FD4((char *)a2, (char *)__p, (uint64_t)v13, (v13 - (unsigned char *)__p) >> 4);
  }
  if (__p)
  {
    uint64_t v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_216C83B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C83B4C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21682BF78(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 16 * a2;
    uint64_t v6 = 16 * a2;
    unint64_t v7 = (_DWORD *)(v4 + 4);
    do
    {
      *unint64_t v7 = -1;
      v7 += 4;
      v6 -= 16;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_216C83BAC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C83BC8(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(_DWORD **)(v4 - 8);
  if (a2 <= (v6 - (unsigned char *)v7) >> 4)
  {
    if (a2)
    {
      uint64_t v14 = 16 * a2;
      uint64_t v15 = v7 + 1;
      v7 += 4 * a2;
      do
      {
        *uint64_t v15 = -1;
        v15 += 4;
        v14 -= 16;
      }
      while (v14);
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = (char *)v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_21677CB10();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_216787EE0(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    char v16 = &v13[16 * v10];
    unint64_t v17 = &v16[16 * a2];
    uint64_t v18 = 16 * a2;
    unint64_t v19 = v16 + 4;
    do
    {
      _DWORD *v19 = -1;
      v19 += 4;
      v18 -= 16;
    }
    while (v18);
    unint64_t v20 = &v13[16 * v12];
    char v22 = (char *)*a1;
    uint64_t v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v21 - 1);
        v16 -= 16;
        v21 -= 16;
      }
      while (v21 != v22);
      uint64_t v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v20;
    if (v21)
    {
      operator delete(v21);
    }
  }
}

uint64_t sub_216C83CFC(uint64_t a1, uint64_t a2, _DWORD *a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this)
{
  sub_216C83E98(a1, this);
  unint64_t __dst = 0;
  uint64_t result = sub_216C82F78(a2 + 8, &__dst, 8uLL);
  if (result)
  {
    uint64_t v9 = *(void *)(**(void **)(a2 + 16) + 32);
    uint64_t v10 = *(void *)(a2 + 8) - *(void *)(**(void **)(a2 + 16) + 24);
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v12 = __dst;
    if (v11 < (unint64_t)__dst) {
      unint64_t v12 = *(char **)(a1 + 8);
    }
    if (v9 - v10 >= (unint64_t)v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = (char *)(v9 - v10);
    }
    unint64_t __dst = v13;
    if (v11 && *(void *)(a1 + 24))
    {
      if ((v10 & 0x8000000000000000) == 0)
      {
        uint64_t result = sub_216C82F78(a2 + 8, *(void **)a1, (size_t)v13);
        if (result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a1, __dst, a3, (int64_t)this, *(char **)(a1 + 16), v14);
          return 1;
        }
        return result;
      }
      uint64_t v15 = "usd/crateFile.cpp";
      char v16 = "Read";
      uint64_t v17 = 2158;
      uint64_t v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, "
            "Int = unsigned int]";
      char v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      uint64_t v15 = "usd/crateFile.cpp";
      char v16 = "Read";
      uint64_t v17 = 2153;
      uint64_t v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, "
            "Int = unsigned int]";
      char v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

uint64_t sub_216C83E54(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    operator delete[](v2);
  }
  unint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete[](v3);
  }
  return a1;
}

void sub_216C83E98(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this)
{
  size_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(this);
  size_t DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(this);
  if (CompressedBufferSize > *(void *)(a1 + 8))
  {
    uint64_t v6 = operator new[](CompressedBufferSize);
    unint64_t v7 = *(void **)a1;
    *(void *)a1 = v6;
    if (v7) {
      operator delete[](v7);
    }
    *(void *)(a1 + 8) = CompressedBufferSize;
  }
  if (DecompressionWorkingSpaceSize > *(void *)(a1 + 24))
  {
    uint64_t v8 = operator new[](DecompressionWorkingSpaceSize);
    uint64_t v9 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v8;
    if (v9) {
      operator delete[](v9);
    }
    *(void *)(a1 + 24) = DecompressionWorkingSpaceSize;
  }
}

void sub_216C83F34(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    sub_216C84118((char **)a1, a2 - v2);
  }
}

uint64_t sub_216C83F64(uint64_t a1, void **a2)
{
  unint64_t __dst = 0;
  uint64_t v4 = a1 + 8;
  if (!sub_216C82F78(a1 + 8, &__dst, 8uLL)) {
    return 0;
  }
  uint64_t v5 = *(void *)(**(void **)(a1 + 16) + 32);
  uint64_t v6 = *(void *)(a1 + 8) - *(void *)(**(void **)(a1 + 16) + 24);
  unint64_t v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    std::string __p = "usd/crateFile.cpp";
    uint64_t v13 = "_Read";
    uint64_t v14 = 1189;
    uint64_t v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::FieldIndex]";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_216C8409C(&__p, __dst);
  uint64_t v8 = sub_216C82F78(v4, __p, 4 * __dst);
  uint64_t v9 = v8;
  if (&__p == a2) {
    char v10 = 0;
  }
  else {
    char v10 = v8;
  }
  if (v10) {
    sub_216825D78((char *)a2, (char *)__p, (uint64_t)v13, (v13 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    uint64_t v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_216C84080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C8409C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216781458(a1, a2);
    uint64_t v4 = (char *)a1[1];
    memset(v4, 255, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_216C840FC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C84118(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      memset(*(void **)(v4 - 8), 255, 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      sub_21677CB10();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)sub_21677EA28(v4, v13);
      uint64_t v8 = *a1;
      unint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    char v16 = &v14[4 * v13];
    memset(v15, 255, 4 * a2);
    uint64_t v17 = &v15[4 * a2];
    if (v7 != v8)
    {
      do
      {
        int v18 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v15 - 1) = v18;
        v15 -= 4;
      }
      while (v7 != v8);
      uint64_t v8 = *a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_216C84240(char *a1, long long *a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t)a2 + 8;
  uint64_t v8 = a4 + 1;
  do
  {
    uint64_t v33 = -1;
    if (!sub_216C82F78(v7, __dst, 0x10uLL)) {
      break;
    }
    BOOL v9 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4);
    if (v9)
    {
      uint64_t v10 = *((void *)a1 + 15);
      if (HIDWORD(v33) >= (unint64_t)((*((void *)a1 + 16) - v10) >> 3)
        || v33 >= (unint64_t)((uint64_t)(*((void *)a1 + 13) - *((void *)a1 + 12)) >> 3))
      {
        uint64_t v23 = "usd/crateFile.cpp";
        *(void *)&long long v24 = "_ReadPathsImpl";
        uint64_t v21 = 4159;
LABEL_23:
        *((void *)&v24 + 1) = v21;
        *(void *)&long long v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadPathsImpl(Reader, WorkDi"
                          "spatcher &, SdfPath) [Header = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PathItemHeade"
                          "r_0_0_1, Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInter"
                          "nal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_Cra"
                          "teFile::CrateFile::_FileMapping *>>]";
        BYTE8(v25) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid paths header causing OOB access.", a3);
        return;
      }
      uint64_t v11 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v10 + 8 * HIDWORD(v33));
      if ((v34 & 4) != 0) {
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v11, (int *)&v23);
      }
      else {
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v11, (int *)&v23);
      }
      uint64_t v15 = (int *)(*((void *)a1 + 12) + 8 * v33);
      sub_21697DE94(v15, (int *)&v23);
      sub_21697DEEC(v15 + 1, (int *)&v23 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
      sub_21697C414(&v23);
    }
    else
    {
      uint64_t v12 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
      sub_2169C487C(a4, v12);
      sub_2169C48D4(v8, v12 + 1);
      uint64_t v13 = *((void *)a1 + 12);
      if (v33 >= (unint64_t)((*((void *)a1 + 13) - v13) >> 3))
      {
        uint64_t v23 = "usd/crateFile.cpp";
        *(void *)&long long v24 = "_ReadPathsImpl";
        uint64_t v21 = 4152;
        goto LABEL_23;
      }
      uint64_t v14 = (int *)(v13 + 8 * v33);
      sub_2169C487C(v14, a4);
      sub_2169C48D4(v14 + 1, v8);
    }
    char v16 = v34;
    if (v34)
    {
      if ((v34 & 2) != 0)
      {
        uint64_t v31 = 0;
        if (!sub_216C82F78(v7, &v31, 8uLL)) {
          return;
        }
        long long v17 = a2[1];
        long long v24 = *a2;
        long long v25 = v17;
        uint64_t v26 = *((void *)a2 + 4);
        uint64_t v23 = a1;
        uint64_t v27 = v31;
        uint64_t v28 = a3;
        sub_216981010(&v29, a4);
        sub_21698105C(&v30, v8);
        uint64_t v18 = sub_216C84CCC(a3, (uint64_t)&v23);
        (***(void (****)(void, uint64_t, uint64_t))(v18 - 40))(*(void *)(v18 - 40), v18, v18 - 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
        sub_21697C414(&v29);
      }
      uint64_t v19 = *((void *)a1 + 12);
      if (v33 >= (unint64_t)((*((void *)a1 + 13) - v19) >> 3))
      {
        uint64_t v23 = "usd/crateFile.cpp";
        *(void *)&long long v24 = "_ReadPathsImpl";
        uint64_t v21 = 4195;
        goto LABEL_23;
      }
      unint64_t v20 = (_DWORD *)(v19 + 8 * v33);
      sub_2169C487C(a4, v20);
      sub_2169C48D4(v8, v20 + 1);
    }
  }
  while ((v16 & 3) != 0);
}

void sub_216C84508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216C84C94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C84524(char *a1, long long *a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t)a2 + 8;
  uint64_t v8 = a4 + 1;
  do
  {
    uint64_t __dst = -1;
    if (!sub_216C82F78(v7, &__dst, 0xCuLL)) {
      break;
    }
    BOOL v9 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4);
    if (v9)
    {
      uint64_t v10 = *((void *)a1 + 15);
      if (HIDWORD(__dst) >= (unint64_t)((*((void *)a1 + 16) - v10) >> 3)
        || __dst >= (unint64_t)((uint64_t)(*((void *)a1 + 13) - *((void *)a1 + 12)) >> 3))
      {
        uint64_t v23 = "usd/crateFile.cpp";
        *(void *)&long long v24 = "_ReadPathsImpl";
        uint64_t v21 = 4159;
LABEL_23:
        *((void *)&v24 + 1) = v21;
        *(void *)&long long v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadPathsImpl(Reader, WorkDi"
                          "spatcher &, SdfPath) [Header = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PathItemHeade"
                          "r, Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__a"
                          "apl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                          "::CrateFile::_FileMapping *>>]";
        BYTE8(v25) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid paths header causing OOB access.", a3);
        return;
      }
      uint64_t v11 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v10 + 8 * HIDWORD(__dst));
      if ((v33 & 4) != 0) {
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v11, (int *)&v23);
      }
      else {
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v11, (int *)&v23);
      }
      uint64_t v15 = (int *)(*((void *)a1 + 12) + 8 * __dst);
      sub_21697DE94(v15, (int *)&v23);
      sub_21697DEEC(v15 + 1, (int *)&v23 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
      sub_21697C414(&v23);
    }
    else
    {
      uint64_t v12 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
      sub_2169C487C(a4, v12);
      sub_2169C48D4(v8, v12 + 1);
      uint64_t v13 = *((void *)a1 + 12);
      if (__dst >= (unint64_t)((*((void *)a1 + 13) - v13) >> 3))
      {
        uint64_t v23 = "usd/crateFile.cpp";
        *(void *)&long long v24 = "_ReadPathsImpl";
        uint64_t v21 = 4152;
        goto LABEL_23;
      }
      uint64_t v14 = (int *)(v13 + 8 * __dst);
      sub_2169C487C(v14, a4);
      sub_2169C48D4(v14 + 1, v8);
    }
    char v16 = v33;
    if (v33)
    {
      if ((v33 & 2) != 0)
      {
        uint64_t v31 = 0;
        if (!sub_216C82F78(v7, &v31, 8uLL)) {
          return;
        }
        long long v17 = a2[1];
        long long v24 = *a2;
        long long v25 = v17;
        uint64_t v26 = *((void *)a2 + 4);
        uint64_t v23 = a1;
        uint64_t v27 = v31;
        uint64_t v28 = a3;
        sub_216981010(&v29, a4);
        sub_21698105C(&v30, v8);
        uint64_t v18 = sub_216C850F8(a3, (uint64_t)&v23);
        (***(void (****)(void, uint64_t, uint64_t))(v18 - 40))(*(void *)(v18 - 40), v18, v18 - 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
        sub_21697C414(&v29);
      }
      uint64_t v19 = *((void *)a1 + 12);
      if (__dst >= (unint64_t)((*((void *)a1 + 13) - v19) >> 3))
      {
        uint64_t v23 = "usd/crateFile.cpp";
        *(void *)&long long v24 = "_ReadPathsImpl";
        uint64_t v21 = 4195;
        goto LABEL_23;
      }
      unint64_t v20 = (_DWORD *)(v19 + 8 * __dst);
      sub_2169C487C(a4, v20);
      sub_2169C48D4(v8, v20 + 1);
    }
  }
  while ((v16 & 3) != 0);
}

void sub_216C847EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216C850C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C84808(void *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::WorkDispatcher *a3, unint64_t a4)
{
  uint64_t v36 = 0;
  unsigned int v37 = 0;
  uint64_t v38 = 0;
  char v33 = 0;
  char v34 = 0;
  uint64_t v35 = 0;
  int v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t __dst = 0;
  if (sub_216C82F78(a2 + 8, &__dst, 8uLL))
  {
    *(_OWORD *)uint64_t v27 = 0u;
    *(_OWORD *)std::string __p = 0u;
    uint64_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(__dst);
    unint64_t DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(__dst);
    if (CompressedBufferSize && DecompressionWorkingSpaceSize)
    {
      sub_21681C000((uint64_t)&v36, (unint64_t)__dst);
      if (sub_216C83CFC((uint64_t)v27, a2, v36, __dst))
      {
        uint64_t v10 = v36;
        if (v36 == v37)
        {
          unint64_t v11 = 0;
LABEL_13:
          if (v11 + 1 < a4)
          {
            char v22 = "usd/crateFile.cpp";
            uint64_t v23 = "_ReadCompressedPaths";
            uint64_t v24 = 4253;
            long long v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDisp"
                  "atcher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrI"
                  "nternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                  "le::CrateFile::_FileMapping *>>]";
            char v26 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed paths. numPaths = %llu too large for max index = %llu", a4, v11);
          }
          else if ((unint64_t)__dst > a4)
          {
            char v22 = "usd/crateFile.cpp";
            uint64_t v23 = "_ReadCompressedPaths";
            uint64_t v24 = 4259;
            long long v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDisp"
                  "atcher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrI"
                  "nternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                  "le::CrateFile::_FileMapping *>>]";
            char v26 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed paths. numEncodedPaths %llu > numPaths = %llu", __dst, a4);
          }
          else
          {
            sub_216AF4CFC(a1 + 12, a4);
            uint64_t v13 = (int *)a1[12];
            uint64_t v14 = a1[13];
            char v22 = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v22);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v22 + 1);
            if (v14 - (uint64_t)v13 >= 1)
            {
              unint64_t v15 = ((unint64_t)(v14 - (void)v13) >> 3) + 1;
              do
              {
                sub_2169C487C(v13, &v22);
                sub_2169C48D4(v13 + 1, (_DWORD *)&v22 + 1);
                --v15;
                v13 += 2;
              }
              while (v15 > 1);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
            sub_21697C414(&v22);
            sub_21681C000((uint64_t)&v33, (unint64_t)__dst);
            if (sub_216C85404((uint64_t)v27, a2, v33, __dst))
            {
              char v16 = v33;
              if (v33 == v34)
              {
LABEL_26:
                sub_21681C000((uint64_t)&v30, (unint64_t)__dst);
                if (sub_216C85404((uint64_t)v27, a2, v30, __dst))
                {
                  uint64_t v21 = 0;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v21);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v21 + 1);
                  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BuildDecompressedPathsImpl(a1, &v36, &v33, &v30, 0, (int *)&v21, (uint64_t)a3);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
                  sub_21697C414(&v21);
                  pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait(a3);
                }
              }
              else
              {
                unint64_t v17 = (uint64_t)(a1[16] - a1[15]) >> 3;
                while (1)
                {
                  LODWORD(v18) = *v16;
                  unint64_t v18 = (int)*v16 >= 0 ? v18 : -(int)v18;
                  if (v17 <= v18) {
                    break;
                  }
                  if (++v16 == v34) {
                    goto LABEL_26;
                  }
                }
                char v22 = "usd/crateFile.cpp";
                uint64_t v23 = "_ReadCompressedPaths";
                uint64_t v24 = 4280;
                long long v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, Work"
                      "Dispatcher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Rea"
                      "der<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__:"
                      ":Usd_CrateFile::CrateFile::_FileMapping *>>]";
                char v26 = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt path element token index in crate file (%d >= %zu)", v18, v17);
              }
            }
          }
        }
        else
        {
          unint64_t v11 = 0;
          while (1)
          {
            unint64_t v12 = *v10;
            if (v12 >= a4) {
              break;
            }
            if (v11 <= v12) {
              unint64_t v11 = *v10;
            }
            if (++v10 == v37) {
              goto LABEL_13;
            }
          }
          char v22 = "usd/crateFile.cpp";
          uint64_t v23 = "_ReadCompressedPaths";
          uint64_t v24 = 4243;
          long long v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDispat"
                "cher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInter"
                "nal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::Cr"
                "ateFile::_FileMapping *>>]";
          char v26 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt path index in crate file (%u >= %zu)", v12, a4);
        }
      }
    }
    else
    {
      char v22 = "usd/crateFile.cpp";
      uint64_t v23 = "_ReadCompressedPaths";
      uint64_t v24 = 4230;
      long long v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDispatcher"
            " &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aap"
            "l__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
      char v26 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed paths of size %llu", __dst);
    }
    uint64_t v19 = __p[0];
    __p[0] = 0;
    if (v19) {
      operator delete[](v19);
    }
    unint64_t v20 = v27[0];
    v27[0] = 0;
    if (v20) {
      operator delete[](v20);
    }
    if (v30)
    {
      uint64_t v31 = v30;
      operator delete(v30);
    }
  }
  if (v33)
  {
    char v34 = v33;
    operator delete(v33);
  }
  if (v36)
  {
    unsigned int v37 = v36;
    operator delete(v36);
  }
}

void sub_216C84C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  sub_216C83E54((uint64_t)&a17);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  long long v25 = *(void **)(v23 - 96);
  if (v25)
  {
    *(void *)(v23 - 88) = v25;
    operator delete(v25);
  }
  char v26 = *(void **)(v23 - 72);
  if (v26)
  {
    *(void *)(v23 - 64) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216C84C94(uint64_t a1)
{
  return a1;
}

uint64_t sub_216C84CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 256);
  v10[0] = 0;
  v10[1] = v4;
  uint64_t v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v10, 0x58uLL);
  *(unsigned char *)(v5 - 11) = 1;
  *(void *)uint64_t v5 = &unk_26C75F3A0;
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 56) = v7;
  *(_OWORD *)(v5 + 40) = v6;
  *(_OWORD *)(v5 + 24) = v8;
  sub_21697D878((_DWORD *)(v5 + 72), (_DWORD *)(a2 + 64));
  sub_21697D8B4((_DWORD *)(v5 + 76), (_DWORD *)(a2 + 68));
  *(void *)(v5 + 80) = a1 + 264;
  return v5;
}

uint64_t sub_216C84D78(uint64_t a1)
{
  *(void *)a1 = &unk_26C75F3A0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 76));
  sub_21697C414((_DWORD *)(a1 + 72));
  return a1;
}

void sub_216C84DC8(_DWORD *a1)
{
  *(void *)a1 = &unk_26C75F3A0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 19);
  sub_21697C414(a1 + 18);

  operator delete(a1);
}

uint64_t sub_216C84E28(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216C84ECC(a1 + 8);
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 80));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216C84EB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C84ECC(uint64_t a1)
{
  unint64_t v2 = *(char **)a1;
  sub_216C84FD8((uint64_t)&v12, "Usd", "Usd_CrateDataImpl::Open", "Usd_CrateFile::CrateFile::Open", "_ReadPaths");
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 16) = *(void *)(**(void **)(a1 + 24) + 24) + *(void *)(a1 + 48);
  long long v4 = *(_OWORD *)(a1 + 24);
  uint64_t v11 = v3;
  v10[0] = *(_OWORD *)(a1 + 8);
  v10[1] = v4;
  uint64_t v5 = *(void *)(a1 + 56);
  sub_216981010(&v8, (_DWORD *)(a1 + 64));
  sub_21698105C(&v9, (_DWORD *)(a1 + 68));
  sub_216C84240(v2, v10, v5, &v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  for (uint64_t result = (uint64_t)sub_21697C414(&v8); v13--; uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v12))
    ;
  return result;
}

void sub_216C84FB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  sub_21684E6B8(v2 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_216C84FD8(uint64_t a1, char *a2, char *a3, char *a4, char *a5)
{
  unsigned __int8 v6 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v6)
  {
    uint64_t v11 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a2, 0, a3);
    *(void *)a1 = v11;
    if (v11) {
      int v7 = sub_216C85064((_DWORD **)a1, a3, a4, a5) + 1;
    }
    else {
      int v7 = 0;
    }
  }
  else
  {
    int v7 = 0;
    *(void *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = v7;
  return a1;
}

uint64_t sub_216C85064(_DWORD **a1, char *a2, char *a3, char *a4)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a2, *a1, a3);
  pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a3, *a1, v7);
  pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a4, *a1, v8);
  return 3;
}

uint64_t sub_216C850C0(uint64_t a1)
{
  return a1;
}

uint64_t sub_216C850F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 256);
  v10[0] = 0;
  v10[1] = v4;
  uint64_t v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v10, 0x58uLL);
  *(unsigned char *)(v5 - 11) = 1;
  *(void *)uint64_t v5 = &unk_26C75F3E8;
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 56) = v7;
  *(_OWORD *)(v5 + 40) = v6;
  *(_OWORD *)(v5 + 24) = v8;
  sub_21697D878((_DWORD *)(v5 + 72), (_DWORD *)(a2 + 64));
  sub_21697D8B4((_DWORD *)(v5 + 76), (_DWORD *)(a2 + 68));
  *(void *)(v5 + 80) = a1 + 264;
  return v5;
}

uint64_t sub_216C851A4(uint64_t a1)
{
  *(void *)a1 = &unk_26C75F3E8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 76));
  sub_21697C414((_DWORD *)(a1 + 72));
  return a1;
}

void sub_216C851F4(_DWORD *a1)
{
  *(void *)a1 = &unk_26C75F3E8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 19);
  sub_21697C414(a1 + 18);

  operator delete(a1);
}

uint64_t sub_216C85254(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216C852F8(a1 + 8);
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 80));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216C852E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C852F8(uint64_t a1)
{
  unint64_t v2 = *(char **)a1;
  sub_216C84FD8((uint64_t)&v12, "Usd", "Usd_CrateDataImpl::Open", "Usd_CrateFile::CrateFile::Open", "_ReadPaths");
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 16) = *(void *)(**(void **)(a1 + 24) + 24) + *(void *)(a1 + 48);
  long long v4 = *(_OWORD *)(a1 + 24);
  uint64_t v11 = v3;
  v10[0] = *(_OWORD *)(a1 + 8);
  v10[1] = v4;
  uint64_t v5 = *(void *)(a1 + 56);
  sub_216981010(&v8, (_DWORD *)(a1 + 64));
  sub_21698105C(&v9, (_DWORD *)(a1 + 68));
  sub_216C84524(v2, v10, v5, &v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  for (uint64_t result = (uint64_t)sub_21697C414(&v8); v13--; uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v12))
    ;
  return result;
}

void sub_216C853E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  sub_21684E6B8(v2 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_216C85404(uint64_t a1, uint64_t a2, _DWORD *a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this)
{
  sub_216C83E98(a1, this);
  uint64_t __dst = 0;
  uint64_t result = sub_216C82F78(a2 + 8, &__dst, 8uLL);
  if (result)
  {
    uint64_t v9 = *(void *)(**(void **)(a2 + 16) + 32);
    uint64_t v10 = *(void *)(a2 + 8) - *(void *)(**(void **)(a2 + 16) + 24);
    unint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = __dst;
    if (v11 < (unint64_t)__dst) {
      uint64_t v12 = *(char **)(a1 + 8);
    }
    if (v9 - v10 >= (unint64_t)v12) {
      int v13 = v12;
    }
    else {
      int v13 = (char *)(v9 - v10);
    }
    uint64_t __dst = v13;
    if (v11 && *(void *)(a1 + 24))
    {
      if ((v10 & 0x8000000000000000) == 0)
      {
        uint64_t result = sub_216C82F78(a2 + 8, *(void **)a1, (size_t)v13);
        if (result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a1, __dst, a3, (int64_t)this, *(char **)(a1 + 16), v14);
          return 1;
        }
        return result;
      }
      unint64_t v15 = "usd/crateFile.cpp";
      char v16 = "Read";
      uint64_t v17 = 2158;
      unint64_t v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, Int = int]";
      char v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      unint64_t v15 = "usd/crateFile.cpp";
      char v16 = "Read";
      uint64_t v17 = 2153;
      unint64_t v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, Int = int]";
      char v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

void sub_216C8555C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_216C8574C((char **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 12 * a2;
  }
}

uint64_t sub_216C85598(uint64_t a1, void **a2)
{
  unint64_t __dst = 0;
  uint64_t v4 = a1 + 8;
  if (!sub_216C82F78(a1 + 8, &__dst, 8uLL)) {
    return 0;
  }
  uint64_t v5 = *(void *)(**(void **)(a1 + 16) + 32);
  uint64_t v6 = *(void *)(a1 + 8) - *(void *)(**(void **)(a1 + 16) + 24);
  unint64_t v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    std::string __p = "usd/crateFile.cpp";
    int v13 = "_Read";
    uint64_t v14 = 1189;
    unint64_t v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::Crat"
          "eFile::Spec_0_0_1]";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_216C856D0(&__p, __dst);
  uint64_t v8 = sub_216C82F78(v4, __p, 16 * __dst);
  uint64_t v9 = v8;
  if (&__p == a2) {
    char v10 = 0;
  }
  else {
    char v10 = v8;
  }
  if (v10) {
    sub_216893FD4((char *)a2, (char *)__p, (uint64_t)v13, (v13 - (unsigned char *)__p) >> 4);
  }
  if (__p)
  {
    int v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_216C856B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C856D0(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21682BF78(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 16 * a2;
    uint64_t v6 = 16 * a2;
    unint64_t v7 = (void *)(v4 + 4);
    do
    {
      *unint64_t v7 = -1;
      v7 += 2;
      v6 -= 16;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_216C85730(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C8574C(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(void **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (char *)v7) >> 2) >= a2)
  {
    if (a2)
    {
      int v13 = (void *)((char *)v7 + 12 * a2);
      uint64_t v14 = 12 * a2;
      do
      {
        *unint64_t v7 = -1;
        unint64_t v7 = (void *)((char *)v7 + 12);
        v14 -= 12;
      }
      while (v14);
      unint64_t v7 = v13;
    }
    a1[1] = (char *)v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - *a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1555555555555555) {
      sub_21677CB10();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x1555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)sub_216B0D05C(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v15 = &v12[12 * v8];
    char v16 = &v15[12 * a2];
    uint64_t v17 = 12 * a2;
    unint64_t v18 = v15;
    do
    {
      void *v18 = -1;
      unint64_t v18 = (void *)((char *)v18 + 12);
      v17 -= 12;
    }
    while (v17);
    char v19 = &v12[12 * v11];
    uint64_t v21 = *a1;
    unint64_t v20 = a1[1];
    if (v20 != *a1)
    {
      do
      {
        uint64_t v22 = *(void *)(v20 - 12);
        v20 -= 12;
        int v23 = *((_DWORD *)v20 + 2);
        *(void *)(v15 - 12) = v22;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v23;
      }
      while (v20 != v21);
      unint64_t v20 = *a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v19;
    if (v20)
    {
      operator delete(v20);
    }
  }
}

uint64_t sub_216C858B4(uint64_t a1, void **a2)
{
  unint64_t __dst = 0;
  uint64_t v4 = a1 + 8;
  if (!sub_216C82F78(a1 + 8, &__dst, 8uLL)) {
    return 0;
  }
  uint64_t v5 = *(void *)(**(void **)(a1 + 16) + 32);
  uint64_t v6 = *(void *)(a1 + 8) - *(void *)(**(void **)(a1 + 16) + 24);
  unint64_t v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    std::string __p = "usd/crateFile.cpp";
    int v13 = "_Read";
    uint64_t v14 = 1189;
    unint64_t v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Spec]";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_216C859FC(&__p, __dst);
  uint64_t v8 = sub_216C82F78(v4, __p, 12 * __dst);
  uint64_t v9 = v8;
  if (&__p == a2) {
    char v10 = 0;
  }
  else {
    char v10 = v8;
  }
  if (v10) {
    sub_216C85A78((char *)a2, (char *)__p, (uint64_t)v13, 0xAAAAAAAAAAAAAAABLL * ((v13 - (unsigned char *)__p) >> 2));
  }
  if (__p)
  {
    int v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_216C859E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C859FC(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216BD0794(a1, a2);
    uint64_t v4 = (void *)a1[1];
    uint64_t v5 = (char *)v4 + 12 * a2;
    uint64_t v6 = 12 * a2;
    do
    {
      *uint64_t v4 = -1;
      uint64_t v4 = (void *)((char *)v4 + 12);
      v6 -= 12;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_216C85A5C(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216C85A78(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if (a4 > 0x1555555555555555) {
      sub_21677CB10();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x1555555555555555;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = sub_216BD0794(v7, v12);
    uint64_t v14 = (char *)v7[1];
    int v13 = (void **)(v7 + 1);
    uint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      char v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  int v13 = (void **)(result + 8);
  unint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 2) >= a4) {
    goto LABEL_16;
  }
  char v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    uint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    char v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  const char *v13 = &v9[v17];
  return result;
}

uint64_t sub_216C85BB4(uint64_t a1, unint64_t a2, float a3, float a4)
{
  unint64_t v12 = a2;
  sub_21686EB98((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >= 0x1555555555555556)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_216767B04(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_264293928, MEMORY[0x263F8C060]);
  }
  sub_216C85D60((void *)(a1 + 8), v12);
  unint64_t v7 = *(__int16 **)(a1 + 8);
  if (v7 == *(__int16 **)(a1 + 16)) {
    unint64_t v7 = sub_216C85CE0();
  }
  unint64_t v8 = v12;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8) {
    *(unsigned char *)(*(void *)(a1 + 16) - 10) = 1;
  }
  float v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(void *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_216C85CCC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__int16 *sub_216C85CE0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798C7F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798C7F0))
  {
    word_26798C7E0 = -1;
    byte_26798C7E2 = 1;
    __cxa_atexit((void (*)(void *))sub_216C85EA4, &word_26798C7E0, &dword_216758000);
    __cxa_guard_release(&qword_26798C7F0);
  }
  return &word_26798C7E0;
}

void *sub_216C85D60(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216BD0794(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 12 * a2;
    do
    {
      *(_WORD *)uint64_t v4 = -1;
      *(unsigned char *)(v4 + 2) = 0;
      v4 += 12;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_216C85DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_216C85DE8(void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    sub_216C85E3C((__int16 **)v2);
    BOOL v3 = **a1;
    operator delete(v3);
  }
}

__int16 **sub_216C85E3C(__int16 **result)
{
  uint64_t v1 = result;
  BOOL v3 = *result;
  unint64_t v2 = result[1];
  if (v2 != *result)
  {
    uint64_t v4 = v2 - 6;
    do
    {
      if (*v4 != -1)
      {
        uint64_t result = (__int16 **)sub_216C85EE4((uint64_t)v4);
        *uint64_t v4 = -1;
      }
      BOOL v5 = v4 == v3;
      v4 -= 6;
    }
    while (!v5);
  }
  v1[1] = v3;
  return result;
}

__int16 *sub_216C85EA4(__int16 *a1)
{
  if (*a1 != -1)
  {
    sub_216C85EE4((uint64_t)a1);
    *a1 = -1;
  }
  return a1;
}

_DWORD *sub_216C85EE4(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 8));

  return sub_21697C414((_DWORD *)(a1 + 4));
}

__int16 *sub_216C85F24(uint64_t *a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  uint64_t v6 = *a1;
  uint64_t v7 = a1[4];
  uint64_t v8 = v5 & *a1;
  uint64_t result = (__int16 *)(v7 + 12 * v8);
  if (*result < 0)
  {
    LOWORD(v10) = 0;
  }
  else
  {
    if (*(void *)(v7 + 12 * v8 + 4) == *(void *)a2) {
      return result;
    }
    LOWORD(v10) = 0;
    while (1)
    {
      int v10 = (__int16)(v10 + 1);
      uint64_t v8 = (v8 + 1) & v6;
      uint64_t result = (__int16 *)(v7 + 12 * v8);
      if (v10 > *result) {
        break;
      }
      if (*(void *)(v7 + 12 * v8 + 4) == *(void *)a2) {
        return result;
      }
    }
  }
  char v11 = sub_216C860D0((uint64_t)a1);
  uint64_t v12 = a1[4];
  if (v11)
  {
    uint64_t v8 = v5 & *a1;
    if (*(__int16 *)(v12 + 12 * v8) < 0)
    {
      LOWORD(v10) = 0;
      int v13 = *(unsigned __int16 *)(v12 + 12 * v8);
    }
    else
    {
      LOWORD(v10) = 0;
      do
      {
        int v10 = (__int16)(v10 + 1);
        uint64_t v8 = (v8 + 1) & *a1;
      }
      while (v10 <= *(__int16 *)(v12 + 12 * v8));
      int v13 = *(unsigned __int16 *)(v12 + 12 * v8);
    }
  }
  else
  {
    int v13 = *(unsigned __int16 *)(v12 + 12 * v8);
  }
  if (v13 == 0xFFFF)
  {
    uint64_t v14 = v12 + 12 * v8;
    sub_216981010((_DWORD *)(v14 + 4), a3);
    sub_21698105C((_DWORD *)(v14 + 8), a3 + 1);
    *(_WORD *)uint64_t v14 = v10;
  }
  else
  {
    sub_216C86198(a1, v8, v10, v5, a3);
  }
  ++a1[6];
  return (__int16 *)(a1[4] + 12 * v8);
}

uint64_t sub_216C860D0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72) || (unint64_t v2 = *(void *)(a1 + 48), v2 >= *(void *)(a1 + 56)))
  {
    unint64_t v6 = sub_21686E8DC((void *)a1);
    sub_216C86240(a1, v6);
    *(unsigned char *)(a1 + 72) = 0;
    return 1;
  }
  if (*(unsigned char *)(a1 + 73))
  {
    *(unsigned char *)(a1 + 73) = 0;
    float v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      unint64_t v4 = *(void *)(a1 + 40);
      float v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        float v8 = *(float *)(a1 + 68);
        unint64_t v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        unint64_t v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9) {
          unint64_t v11 = v9;
        }
        else {
          unint64_t v11 = v10;
        }
        sub_216C86240(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

_DWORD *sub_216C86198(uint64_t *a1, uint64_t a2, __int16 a3, uint64_t a4, _DWORD *a5)
{
  sub_216981010(&v11, a5);
  sub_21698105C(&v12, a5 + 1);
  sub_216C86408(a1, a2, a3, a4, &v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  return sub_21697C414(&v11);
}

void sub_216C8622C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void sub_216C86240(uint64_t a1, unint64_t a2)
{
  sub_216C85BB4((uint64_t)&v8, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(unsigned int **)(a1 + 16);
  if ((unsigned int *)v3 != v4)
  {
    float v5 = (int *)(v3 + 4);
    do
    {
      if (*((__int16 *)v5 - 2) != -1)
      {
        uint64_t v6 = bswap64(0x9E3779B97F4A7C55* (v5[1]+ ((v5[1]+ (unint64_t)*v5+ (v5[1] + (unint64_t)*v5)* (v5[1] + (unint64_t)*v5)) >> 1)));
        sub_216C86344(&v8, v6 & v8, 0, v6, v5);
      }
      uint64_t v7 = (unsigned int *)(v5 + 2);
      v5 += 3;
    }
    while (v7 != v4);
  }
  void v9[5] = *(void *)(a1 + 48);
  sub_21686E9D4(&v8, (uint64_t *)a1);
  unint64_t v10 = (void **)v9;
  sub_216C85DE8(&v10);
}

void sub_216C86324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 - 56) = &a11;
  sub_216C85DE8((void ***)(v11 - 56));
  _Unwind_Resume(a1);
}

_DWORD *sub_216C86344(void *a1, uint64_t a2, __int16 a3, uint64_t a4, int *a5)
{
  unint64_t v9 = a5 + 1;
  while (1)
  {
    uint64_t v10 = a1[4];
    uint64_t v11 = (__int16 *)(v10 + 12 * a2);
    int v12 = *v11;
    if (v12 >= a3) {
      goto LABEL_5;
    }
    uint64_t v13 = v10 + 12 * a2;
    uint64_t v14 = (int *)(v13 + 8);
    if (v12 == -1) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a5, (int *)(v13 + 4));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v9, v14);
    __int16 v15 = *v11;
    __int16 *v11 = a3;
    a3 = v15;
LABEL_5:
    ++a3;
    a2 = *a1 & (a2 + 1);
  }
  sub_21697D878((_DWORD *)(v13 + 4), a5);
  uint64_t result = sub_21697D8B4(v14, v9);
  __int16 *v11 = a3;
  return result;
}

_DWORD *sub_216C86408(uint64_t *a1, uint64_t a2, __int16 a3, uint64_t a4, int *a5)
{
  uint64_t v9 = a1[4] + 12 * a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a5, (int *)(v9 + 4));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a5 + 1, (int *)(v9 + 8));
  __int16 v10 = *(_WORD *)v9;
  *(_WORD *)uint64_t v9 = a3;
  uint64_t v11 = *a1;
  uint64_t v12 = *a1 & (a2 + 1);
  __int16 v13 = v10 + 1;
  uint64_t v14 = a1[4];
  __int16 v15 = (unsigned __int16 *)(v14 + 12 * v12);
  for (int i = *v15; i != 0xFFFF; int i = *v15)
  {
    if (v13 > (__int16)i)
    {
      if (v13 >= 4096) {
        *((unsigned char *)a1 + 72) = 1;
      }
      uint64_t v17 = v14 + 12 * v12;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a5, (int *)(v17 + 4));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a5 + 1, (int *)(v17 + 8));
      __int16 v18 = *v15;
      *__int16 v15 = v13;
      uint64_t v11 = *a1;
      uint64_t v14 = a1[4];
      __int16 v13 = v18;
    }
    uint64_t v12 = v11 & (v12 + 1);
    ++v13;
    __int16 v15 = (unsigned __int16 *)(v14 + 12 * v12);
  }
  uint64_t v19 = v14 + 12 * v12;
  sub_21697D878((_DWORD *)(v19 + 4), a5);
  uint64_t result = sub_21697D8B4((_DWORD *)(v19 + 8), a5 + 1);
  *__int16 v15 = v13;
  return result;
}

void sub_216C8653C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
void sub_216C86A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return;
  }
  char v5 = (char *)(a1 + 24);
  if (a1 + 24 == a2) {
    return;
  }
  uint64_t v7 = 0;
  uint64_t v8 = a1;
  do
  {
    uint64_t v9 = v8;
    uint64_t v8 = (uint64_t)v5;
    if (*(char *)(v9 + 47) < 0) {
      char v5 = *(char **)(v9 + 24);
    }
    int v10 = *v5;
    if (*(char *)(v9 + 23) >= 0) {
      unint64_t v11 = (char *)v9;
    }
    else {
      unint64_t v11 = *(char **)v9;
    }
    if (v10 < 0
      || (int v12 = *v11, v12 < 0)
      || ((unsigned int v13 = v10,
           unsigned int v14 = v12,
           unsigned int v15 = (v12 ^ v13) & 0xFFFFFFDF,
           v13 >= 0x40)
        ? (BOOL v16 = v15 == 0)
        : (BOOL v16 = 1),
          v16 || v14 < 0x40))
    {
      if (!pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v8, v9)) {
        goto LABEL_41;
      }
    }
    else if ((((_BYTE)v13 + 5) & 0x1Fu) >= (((_BYTE)v14 + 5) & 0x1Fu))
    {
      goto LABEL_41;
    }
    long long v29 = *(_OWORD *)v8;
    uint64_t v30 = *(void *)(v8 + 16);
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
    *(void *)uint64_t v8 = 0;
    for (uint64_t i = v7; ; i -= 24)
    {
      uint64_t v18 = a1 + i;
      uint64_t v19 = (void **)(a1 + i + 24);
      if (*(char *)(a1 + i + 47) < 0) {
        operator delete(*v19);
      }
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v18;
      *(void *)(a1 + i + 40) = *(void *)(v18 + 16);
      *(unsigned char *)(v18 + 23) = 0;
      *(unsigned char *)uint64_t v18 = 0;
      if (!i)
      {
        uint64_t v28 = a1;
        goto LABEL_40;
      }
      uint64_t v20 = *(char **)(a1 + i - 24);
      if (v30 >= 0) {
        uint64_t v21 = (char *)&v29;
      }
      else {
        uint64_t v21 = (char *)v29;
      }
      int v22 = *v21;
      if (*(char *)(a1 + i - 1) >= 0) {
        uint64_t v20 = (char *)(a1 + i - 24);
      }
      if (v22 < 0) {
        break;
      }
      int v23 = *v20;
      if (v23 < 0) {
        break;
      }
      unsigned int v24 = v22;
      unsigned int v25 = v23;
      unsigned int v26 = (v23 ^ v24) & 0xFFFFFFDF;
      BOOL v27 = v24 < 0x40 || v26 == 0;
      if (v27 || v25 < 0x40) {
        break;
      }
      if ((((_BYTE)v24 + 5) & 0x1Fu) >= (((_BYTE)v25 + 5) & 0x1Fu))
      {
        uint64_t v28 = a1 + i;
        goto LABEL_40;
      }
LABEL_34:
      ;
    }
    if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, (uint64_t)&v29, a1 + i - 24)) {
      goto LABEL_34;
    }
    uint64_t v28 = a1 + i;
    if (*(char *)(v28 + 23) < 0) {
      operator delete(*(void **)v28);
    }
LABEL_40:
    *(_OWORD *)uint64_t v28 = v29;
    *(void *)(v28 + 16) = v30;
LABEL_41:
    char v5 = (char *)(v8 + 24);
    v7 += 24;
  }
  while (v8 + 24 != a2);
}

void sub_216C86C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C86C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return;
  }
  uint64_t v4 = a1;
  char v5 = (char *)(a1 + 24);
  if (a1 + 24 == a2) {
    return;
  }
  uint64_t v7 = a1 - 24;
  do
  {
    uint64_t v8 = v4;
    uint64_t v4 = (uint64_t)v5;
    if (*(char *)(v8 + 47) < 0) {
      char v5 = *(char **)(v8 + 24);
    }
    int v9 = *v5;
    if (*(char *)(v8 + 23) >= 0) {
      int v10 = (char *)v8;
    }
    else {
      int v10 = *(char **)v8;
    }
    if (v9 < 0
      || (int v11 = *v10, v11 < 0)
      || ((unsigned int v12 = v9,
           unsigned int v13 = v11,
           unsigned int v14 = (v11 ^ v12) & 0xFFFFFFDF,
           v12 >= 0x40)
        ? (BOOL v15 = v14 == 0)
        : (BOOL v15 = 1),
          v15 || v13 < 0x40))
    {
      if (!pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v4, v8)) {
        goto LABEL_39;
      }
    }
    else if ((((_BYTE)v12 + 5) & 0x1Fu) >= (((_BYTE)v13 + 5) & 0x1Fu))
    {
      goto LABEL_39;
    }
    long long v26 = *(_OWORD *)v4;
    uint64_t v27 = *(void *)(v4 + 16);
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
    *(void *)uint64_t v4 = 0;
    for (uint64_t i = v7; ; i -= 24)
    {
      uint64_t v17 = (void **)(i + 48);
      if (*(char *)(i + 71) < 0) {
        operator delete(*v17);
      }
      *(_OWORD *)uint64_t v17 = *(_OWORD *)(i + 24);
      *(void *)(i + 64) = *(void *)(i + 40);
      *(unsigned char *)(i + 47) = 0;
      *(unsigned char *)(i + 24) = 0;
      uint64_t v18 = v27 >= 0 ? (char *)&v26 : (char *)v26;
      int v19 = *v18;
      uint64_t v20 = *(char *)(i + 23) >= 0 ? (char *)i : *(char **)i;
      if (v19 < 0) {
        break;
      }
      int v21 = *v20;
      if (v21 < 0) {
        break;
      }
      unsigned int v22 = v19;
      unsigned int v23 = v21;
      unsigned int v24 = (v21 ^ v22) & 0xFFFFFFDF;
      BOOL v25 = v22 < 0x40 || v24 == 0;
      if (v25 || v23 < 0x40) {
        break;
      }
      if ((((_BYTE)v22 + 5) & 0x1Fu) >= (((_BYTE)v23 + 5) & 0x1Fu)) {
        goto LABEL_38;
      }
LABEL_34:
      ;
    }
    if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, (uint64_t)&v26, i)) {
      goto LABEL_34;
    }
    if (*(char *)(i + 47) < 0) {
      operator delete(*(void **)(i + 24));
    }
LABEL_38:
    *(_OWORD *)(i + 24) = v26;
    *(void *)(i + 40) = v27;
LABEL_39:
    char v5 = (char *)(v4 + 24);
    v7 += 24;
  }
  while (v4 + 24 != a2);
}

void sub_216C86E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C86E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(char *)(a2 + 23);
  int v9 = *(char **)a2;
  if (v8 >= 0) {
    int v10 = (char *)a2;
  }
  else {
    int v10 = *(char **)a2;
  }
  int v11 = *v10;
  if (*(char *)(a1 + 23) >= 0) {
    unsigned int v12 = (char *)a1;
  }
  else {
    unsigned int v12 = *(char **)a1;
  }
  if (v11 < 0
    || (int v13 = *v12, v13 < 0)
    || ((unsigned int v14 = v11,
         unsigned int v15 = v13,
         unsigned int v16 = (v13 ^ v14) & 0xFFFFFFDF,
         v14 >= 0x40)
      ? (BOOL v17 = v16 == 0)
      : (BOOL v17 = 1),
        v17 || v15 < 0x40))
  {
    char v27 = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, a2, a1);
    LOBYTE(v8) = *(unsigned char *)(a2 + 23);
    int v9 = *(char **)a2;
    if (v27) {
      goto LABEL_15;
    }
  }
  else if ((((_BYTE)v14 + 5) & 0x1Fu) < (((_BYTE)v15 + 5) & 0x1Fu))
  {
LABEL_15:
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v18 = (char *)a3;
    }
    else {
      uint64_t v18 = *(char **)a3;
    }
    int v19 = *v18;
    if ((v8 & 0x80u) == 0) {
      int v9 = (char *)a2;
    }
    if (v19 < 0
      || (int v20 = *v9, v20 < 0)
      || ((unsigned int v21 = v19, v22 = (v20 ^ v19) & 0xFFFFFFDF, v21 >= 0x40)
        ? (BOOL v23 = v22 == 0)
        : (BOOL v23 = 1),
          v23 || v20 < 0x40u))
    {
      if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, a3, a2)) {
        goto LABEL_28;
      }
    }
    else if ((((_BYTE)v21 + 5) & 0x1Fu) < (((_BYTE)v20 + 5) & 0x1Fu))
    {
LABEL_28:
      uint64_t v24 = *(void *)(a1 + 16);
      long long v25 = *(_OWORD *)a1;
      uint64_t v26 = *(void *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(void *)(a1 + 16) = v26;
      *(_OWORD *)a3 = v25;
      *(void *)(a3 + 16) = v24;
      return 1;
    }
    uint64_t v45 = *(void *)(a1 + 16);
    long long v46 = *(_OWORD *)a1;
    uint64_t v47 = *(void *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v47;
    *(_OWORD *)a2 = v46;
    *(void *)(a2 + 16) = v45;
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v48 = (char *)a3;
    }
    else {
      uint64_t v48 = *(char **)a3;
    }
    int v49 = *v48;
    if (*(char *)(a2 + 23) >= 0) {
      long long v50 = (char *)a2;
    }
    else {
      long long v50 = *(char **)a2;
    }
    if (v49 < 0
      || (int v51 = *v50, v51 < 0)
      || v49 < 0x40u
      || ((v51 ^ v49) & 0xFFFFFFDF) == 0
      || v51 < 0x40u)
    {
      if (!pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, a3, a2)) {
        return 1;
      }
    }
    else if ((((_BYTE)v49 + 5) & 0x1Fu) >= (((_BYTE)v51 + 5) & 0x1Fu))
    {
      return 1;
    }
    uint64_t v52 = *(void *)(a2 + 16);
    long long v53 = *(_OWORD *)a2;
    uint64_t v54 = *(void *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(void *)(a2 + 16) = v54;
    *(_OWORD *)a3 = v53;
    *(void *)(a3 + 16) = v52;
    return 2;
  }
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v28 = (char *)a3;
  }
  else {
    uint64_t v28 = *(char **)a3;
  }
  int v29 = *v28;
  if ((v8 & 0x80u) == 0) {
    int v9 = (char *)a2;
  }
  if ((v29 & 0x80000000) == 0)
  {
    int v30 = *v9;
    if ((v30 & 0x80000000) == 0)
    {
      unsigned int v31 = v29;
      unsigned int v32 = (v30 ^ v29) & 0xFFFFFFDF;
      BOOL v33 = v31 < 0x40 || v32 == 0;
      if (!v33 && v30 >= 0x40u)
      {
        if ((((_BYTE)v31 + 5) & 0x1Fu) >= (((_BYTE)v30 + 5) & 0x1Fu)) {
          return 0;
        }
        goto LABEL_43;
      }
    }
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, a3, a2);
  if (result)
  {
LABEL_43:
    uint64_t v34 = *(void *)(a2 + 16);
    long long v35 = *(_OWORD *)a2;
    uint64_t v36 = *(void *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(void *)(a2 + 16) = v36;
    *(_OWORD *)a3 = v35;
    *(void *)(a3 + 16) = v34;
    if (*(char *)(a2 + 23) >= 0) {
      int v37 = (char *)a2;
    }
    else {
      int v37 = *(char **)a2;
    }
    int v38 = *v37;
    if (*(char *)(a1 + 23) >= 0) {
      int v39 = (char *)a1;
    }
    else {
      int v39 = *(char **)a1;
    }
    if (v38 < 0
      || (int v40 = *v39, v40 < 0)
      || v38 < 0x40u
      || ((v40 ^ v38) & 0xFFFFFFDF) == 0
      || v40 < 0x40u)
    {
      if (!pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, a2, a1)) {
        return 1;
      }
    }
    else if ((((_BYTE)v38 + 5) & 0x1Fu) >= (((_BYTE)v40 + 5) & 0x1Fu))
    {
      return 1;
    }
    uint64_t v41 = *(void *)(a1 + 16);
    long long v42 = *(_OWORD *)a1;
    uint64_t v43 = *(void *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v43;
    *(_OWORD *)a2 = v42;
    *(void *)(a2 + 16) = v41;
    return 2;
  }
  return result;
}

unint64_t sub_216C87204(long long *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  uint64_t v67 = *((void *)a1 + 2);
  long long v66 = *a1;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  char v6 = *(char **)(a2 - 24);
  uint64_t v7 = (char *)&v66;
  if (v67 < 0) {
    uint64_t v7 = (char *)v66;
  }
  int v8 = *v7;
  if (*(char *)(a2 - 1) >= 0) {
    char v6 = (char *)(a2 - 24);
  }
  if (v8 < 0
    || (int v9 = *v6, v9 < 0)
    || ((unsigned int v10 = v8,
         unsigned int v11 = v9,
         unsigned int v12 = (v9 ^ v10) & 0xFFFFFFDF,
         v10 >= 0x40)
      ? (BOOL v13 = v12 == 0)
      : (BOOL v13 = 1),
        v13 || v11 < 0x40))
  {
    if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, (uint64_t)&v66, a2 - 24))
    {
LABEL_13:
      unint64_t v14 = (unint64_t)a1 + 24;
      do
      {
        while (1)
        {
          unint64_t i = v14;
          unsigned int v16 = v67 >= 0 ? (char *)&v66 : (char *)v66;
          int v17 = *v16;
          uint64_t v18 = *(char *)(v14 + 23) >= 0 ? (char *)v14 : *(char **)v14;
          v14 += 24;
          if (v17 < 0) {
            break;
          }
          int v19 = *v18;
          if (v19 < 0) {
            break;
          }
          unsigned int v20 = v17;
          unsigned int v21 = v19;
          unsigned int v22 = (v19 ^ v20) & 0xFFFFFFDF;
          BOOL v23 = v20 < 0x40 || v22 == 0;
          if (v23 || v21 < 0x40) {
            break;
          }
          if ((((_BYTE)v20 + 5) & 0x1Fu) < (((_BYTE)v21 + 5) & 0x1Fu)) {
            goto LABEL_50;
          }
        }
      }
      while ((pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, (uint64_t)&v66, i) & 1) == 0);
      goto LABEL_50;
    }
  }
  else if ((((_BYTE)v10 + 5) & 0x1Fu) < (((_BYTE)v11 + 5) & 0x1Fu))
  {
    goto LABEL_13;
  }
  for (unint64_t i = (unint64_t)a1 + 24; i < v4; i += 24)
  {
    if (v67 >= 0) {
      uint64_t v24 = (char *)&v66;
    }
    else {
      uint64_t v24 = (char *)v66;
    }
    int v25 = *v24;
    if (*(char *)(i + 23) >= 0) {
      uint64_t v26 = (char *)i;
    }
    else {
      uint64_t v26 = *(char **)i;
    }
    if (v25 < 0
      || (int v27 = *v26, v27 < 0)
      || ((unsigned int v28 = v25,
           unsigned int v29 = v27,
           unsigned int v30 = (v27 ^ v28) & 0xFFFFFFDF,
           v28 >= 0x40)
        ? (BOOL v31 = v30 == 0)
        : (BOOL v31 = 1),
          v31 || v29 < 0x40))
    {
      if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, (uint64_t)&v66, i)) {
        break;
      }
    }
    else if ((((_BYTE)v28 + 5) & 0x1Fu) < (((_BYTE)v29 + 5) & 0x1Fu))
    {
      break;
    }
  }
LABEL_50:
  if (i < v4)
  {
    unint64_t v32 = v4 - 24;
    do
    {
      while (1)
      {
        unint64_t v4 = v32;
        BOOL v33 = v67 >= 0 ? (char *)&v66 : (char *)v66;
        int v34 = *v33;
        long long v35 = *(char *)(v32 + 23) >= 0 ? (char *)v32 : *(char **)v32;
        v32 -= 24;
        if (v34 < 0) {
          break;
        }
        int v36 = *v35;
        if (v36 < 0) {
          break;
        }
        unsigned int v37 = v34;
        unsigned int v38 = v36;
        unsigned int v39 = (v36 ^ v37) & 0xFFFFFFDF;
        BOOL v40 = v37 < 0x40 || v39 == 0;
        if (v40 || v38 < 0x40) {
          break;
        }
        if ((((_BYTE)v37 + 5) & 0x1Fu) >= (((_BYTE)v38 + 5) & 0x1Fu)) {
          goto LABEL_68;
        }
      }
    }
    while ((pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, (uint64_t)&v66, v4) & 1) != 0);
  }
LABEL_68:
  while (i < v4)
  {
    long long v41 = *(_OWORD *)i;
    uint64_t v69 = *(void *)(i + 16);
    long long v68 = v41;
    long long v42 = *(_OWORD *)v4;
    *(void *)(i + 16) = *(void *)(v4 + 16);
    *(_OWORD *)unint64_t i = v42;
    long long v43 = v68;
    *(void *)(v4 + 16) = v69;
    *(_OWORD *)unint64_t v4 = v43;
    unint64_t v44 = i + 24;
    do
    {
      while (1)
      {
        unint64_t i = v44;
        uint64_t v45 = v67 >= 0 ? (char *)&v66 : (char *)v66;
        int v46 = *v45;
        uint64_t v47 = *(char *)(v44 + 23) >= 0 ? (char *)v44 : *(char **)v44;
        v44 += 24;
        if (v46 < 0) {
          break;
        }
        int v48 = *v47;
        if (v48 < 0) {
          break;
        }
        unsigned int v49 = v46;
        unsigned int v50 = v48;
        unsigned int v51 = (v48 ^ v49) & 0xFFFFFFDF;
        BOOL v52 = v49 < 0x40 || v51 == 0;
        if (v52 || v50 < 0x40) {
          break;
        }
        if ((((_BYTE)v49 + 5) & 0x1Fu) < (((_BYTE)v50 + 5) & 0x1Fu)) {
          goto LABEL_86;
        }
      }
    }
    while (!pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, (uint64_t)&v66, i));
LABEL_86:
    unint64_t v53 = v4 - 24;
    do
    {
      while (1)
      {
        unint64_t v4 = v53;
        uint64_t v54 = v67 >= 0 ? (char *)&v66 : (char *)v66;
        int v55 = *v54;
        long long v56 = *(char *)(v53 + 23) >= 0 ? (char *)v53 : *(char **)v53;
        v53 -= 24;
        if (v55 < 0) {
          break;
        }
        int v57 = *v56;
        if (v57 < 0) {
          break;
        }
        unsigned int v58 = v55;
        unsigned int v59 = v57;
        unsigned int v60 = (v57 ^ v58) & 0xFFFFFFDF;
        BOOL v61 = v58 < 0x40 || v60 == 0;
        if (v61 || v59 < 0x40) {
          break;
        }
        if ((((_BYTE)v58 + 5) & 0x1Fu) >= (((_BYTE)v59 + 5) & 0x1Fu)) {
          goto LABEL_103;
        }
      }
    }
    while ((pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, (uint64_t)&v66, v4) & 1) != 0);
LABEL_103:
    ;
  }
  int v62 = (void **)(i - 24);
  if ((long long *)(i - 24) == a1)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*v62);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v63 = *(_OWORD *)v62;
    *((void *)a1 + 2) = *(void *)(i - 8);
    *a1 = v63;
    *(unsigned char *)(i - 1) = 0;
    *(unsigned char *)(i - 24) = 0;
  }
  long long v64 = v66;
  *(void *)(i - 8) = v67;
  *(_OWORD *)int v62 = v64;
  return i;
}

void sub_216C87674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_216C876A4(long long *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  long long v63 = *a1;
  uint64_t v64 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  while (1)
  {
    uint64_t v7 = *(char **)((char *)a1 + v6 + 24);
    if (*((char *)a1 + v6 + 47) >= 0) {
      uint64_t v7 = (char *)a1 + v6 + 24;
    }
    int v8 = *v7;
    int v9 = v64 >= 0 ? (char *)&v63 : (char *)v63;
    if (v8 < 0) {
      break;
    }
    int v10 = *v9;
    if (v10 < 0) {
      break;
    }
    unsigned int v11 = v8;
    unsigned int v12 = v10;
    unsigned int v13 = (v10 ^ v11) & 0xFFFFFFDF;
    BOOL v14 = v11 < 0x40 || v13 == 0;
    if (v14 || v12 < 0x40) {
      break;
    }
    if ((((_BYTE)v11 + 5) & 0x1Fu) >= (((_BYTE)v12 + 5) & 0x1Fu)) {
      goto LABEL_17;
    }
LABEL_15:
    v6 += 24;
  }
  if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, (uint64_t)a1 + v6 + 24, (uint64_t)&v63))goto LABEL_15; {
LABEL_17:
  }
  unint64_t v15 = (unint64_t)a1 + v6 + 24;
  if (v6)
  {
    unint64_t v16 = a2 - 24;
    do
    {
      while (1)
      {
        a2 = v16;
        int v17 = *(char *)(v16 + 23) >= 0 ? (char *)v16 : *(char **)v16;
        int v18 = *v17;
        int v19 = v64 >= 0 ? (char *)&v63 : (char *)v63;
        v16 -= 24;
        if (v18 < 0) {
          break;
        }
        int v20 = *v19;
        if (v20 < 0) {
          break;
        }
        unsigned int v21 = v18;
        unsigned int v22 = v20;
        unsigned int v23 = (v20 ^ v21) & 0xFFFFFFDF;
        BOOL v24 = v21 < 0x40 || v23 == 0;
        if (v24 || v22 < 0x40) {
          break;
        }
        if ((((_BYTE)v21 + 5) & 0x1Fu) < (((_BYTE)v22 + 5) & 0x1Fu)) {
          goto LABEL_60;
        }
      }
    }
    while (!pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, a2, (uint64_t)&v63));
  }
  else if (v15 < a2)
  {
    for (a2 -= 24; ; a2 -= 24)
    {
      if (*(char *)(a2 + 23) >= 0) {
        int v25 = (char *)a2;
      }
      else {
        int v25 = *(char **)a2;
      }
      int v26 = *v25;
      if (v64 >= 0) {
        int v27 = (char *)&v63;
      }
      else {
        int v27 = (char *)v63;
      }
      if (v26 < 0
        || (int v28 = *v27, v28 < 0)
        || ((unsigned int v29 = v26,
             unsigned int v30 = v28,
             unsigned int v31 = (v28 ^ v29) & 0xFFFFFFDF,
             v29 >= 0x40)
          ? (BOOL v32 = v31 == 0)
          : (BOOL v32 = 1),
            v32 || v30 < 0x40))
      {
        char v34 = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, a2, (uint64_t)&v63);
        if (v15 >= a2) {
          char v35 = 1;
        }
        else {
          char v35 = v34;
        }
        if (v35) {
          break;
        }
      }
      else if ((((_BYTE)v29 + 5) & 0x1Fu) < (((_BYTE)v30 + 5) & 0x1Fu) || v15 >= a2)
      {
        break;
      }
    }
  }
LABEL_60:
  if (v15 >= a2)
  {
    unint64_t v36 = (unint64_t)a1 + v6 + 24;
  }
  else
  {
    unint64_t v36 = (unint64_t)a1 + v6 + 24;
    unint64_t v37 = a2;
    do
    {
      long long v38 = *(_OWORD *)v36;
      uint64_t v66 = *(void *)(v36 + 16);
      long long v65 = v38;
      long long v39 = *(_OWORD *)v37;
      *(void *)(v36 + 16) = *(void *)(v37 + 16);
      *(_OWORD *)unint64_t v36 = v39;
      long long v40 = v65;
      *(void *)(v37 + 16) = v66;
      *(_OWORD *)unint64_t v37 = v40;
      unint64_t v41 = v36 + 24;
      do
      {
        while (1)
        {
          unint64_t v36 = v41;
          long long v42 = *(char *)(v41 + 23) >= 0 ? (char *)v41 : *(char **)v41;
          int v43 = *v42;
          unint64_t v44 = v64 >= 0 ? (char *)&v63 : (char *)v63;
          v41 += 24;
          if (v43 < 0) {
            break;
          }
          int v45 = *v44;
          if (v45 < 0) {
            break;
          }
          unsigned int v46 = v43;
          unsigned int v47 = v45;
          unsigned int v48 = (v45 ^ v46) & 0xFFFFFFDF;
          BOOL v49 = v46 < 0x40 || v48 == 0;
          if (v49 || v47 < 0x40) {
            break;
          }
          if ((((_BYTE)v46 + 5) & 0x1Fu) >= (((_BYTE)v47 + 5) & 0x1Fu)) {
            goto LABEL_79;
          }
        }
      }
      while ((pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v36, (uint64_t)&v63) & 1) != 0);
LABEL_79:
      unint64_t v50 = v37 - 24;
      do
      {
        while (1)
        {
          unint64_t v37 = v50;
          unsigned int v51 = *(char *)(v50 + 23) >= 0 ? (char *)v50 : *(char **)v50;
          int v52 = *v51;
          unint64_t v53 = v64 >= 0 ? (char *)&v63 : (char *)v63;
          v50 -= 24;
          if (v52 < 0) {
            break;
          }
          int v54 = *v53;
          if (v54 < 0) {
            break;
          }
          unsigned int v55 = v52;
          unsigned int v56 = v54;
          unsigned int v57 = (v54 ^ v55) & 0xFFFFFFDF;
          BOOL v58 = v55 < 0x40 || v57 == 0;
          if (v58 || v56 < 0x40) {
            break;
          }
          if ((((_BYTE)v55 + 5) & 0x1Fu) < (((_BYTE)v56 + 5) & 0x1Fu)) {
            goto LABEL_96;
          }
        }
      }
      while (!pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v37, (uint64_t)&v63));
LABEL_96:
      ;
    }
    while (v36 < v37);
  }
  unsigned int v59 = (void **)(v36 - 24);
  if ((long long *)(v36 - 24) == a1)
  {
    if (*(char *)(v36 - 1) < 0) {
      operator delete(*v59);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v60 = *(_OWORD *)v59;
    *((void *)a1 + 2) = *(void *)(v36 - 8);
    *a1 = v60;
    *(unsigned char *)(v36 - 1) = 0;
    *(unsigned char *)(v36 - 24) = 0;
  }
  long long v61 = v63;
  *(void *)(v36 - 8) = v64;
  *(_OWORD *)unsigned int v59 = v61;
  return v36 - 24;
}

void sub_216C87AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216C87AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v9 = a2 - 24;
      int v8 = *(char **)(a2 - 24);
      if (*(char *)(a2 - 1) >= 0) {
        int v8 = (char *)(a2 - 24);
      }
      int v10 = *v8;
      if (*(char *)(a1 + 23) >= 0) {
        unsigned int v11 = (char *)a1;
      }
      else {
        unsigned int v11 = *(char **)a1;
      }
      if (v10 < 0
        || (int v12 = *v11, v12 < 0)
        || ((unsigned int v13 = v10,
             unsigned int v14 = v12,
             unsigned int v15 = (v12 ^ v13) & 0xFFFFFFDF,
             v13 >= 0x40)
          ? (BOOL v16 = v15 == 0)
          : (BOOL v16 = 1),
            v16 || v14 < 0x40))
      {
        if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, a2 - 24, a1)) {
          goto LABEL_15;
        }
        return 1;
      }
      else if ((((_BYTE)v13 + 5) & 0x1Fu) < (((_BYTE)v14 + 5) & 0x1Fu))
      {
LABEL_15:
        uint64_t v17 = *(void *)(a1 + 16);
        long long v18 = *(_OWORD *)a1;
        uint64_t v19 = *(void *)(v9 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *(void *)(a1 + 16) = v19;
        *(_OWORD *)uint64_t v9 = v18;
        *(void *)(v9 + 16) = v17;
        return 1;
      }
      return result;
    case 3uLL:
      sub_216C86E84(a1, a1 + 24, a2 - 24, a3);
      return 1;
    case 4uLL:
      sub_216C87EAC(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      sub_216C880E4(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      uint64_t v20 = a1 + 48;
      sub_216C86E84(a1, a1 + 24, a1 + 48, a3);
      uint64_t v21 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v22 = 0;
      int v23 = 0;
      while (2)
      {
        if (*(char *)(v21 + 23) >= 0) {
          BOOL v24 = (char *)v21;
        }
        else {
          BOOL v24 = *(char **)v21;
        }
        int v25 = *v24;
        if (*(char *)(v20 + 23) >= 0) {
          int v26 = (char *)v20;
        }
        else {
          int v26 = *(char **)v20;
        }
        if (v25 < 0
          || (int v27 = *v26, v27 < 0)
          || ((unsigned int v28 = v25,
               unsigned int v29 = v27,
               unsigned int v30 = (v27 ^ v28) & 0xFFFFFFDF,
               v28 >= 0x40)
            ? (BOOL v31 = v30 == 0)
            : (BOOL v31 = 1),
              v31 || v29 < 0x40))
        {
          if (!pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v21, v20)) {
            goto LABEL_57;
          }
        }
        else if ((((_BYTE)v28 + 5) & 0x1Fu) >= (((_BYTE)v29 + 5) & 0x1Fu))
        {
          goto LABEL_57;
        }
        LOBYTE(v32) = 0;
        long long v46 = *(_OWORD *)v21;
        uint64_t v47 = *(void *)(v21 + 16);
        *(void *)(v21 + 8) = 0;
        *(void *)(v21 + 16) = 0;
        *(void *)uint64_t v21 = 0;
        uint64_t v33 = v22;
        while (2)
        {
          uint64_t v34 = a1 + v33;
          char v35 = (void **)(a1 + v33 + 72);
          if ((v32 & 0x80) != 0) {
            operator delete(*v35);
          }
          *(_OWORD *)char v35 = *(_OWORD *)(v34 + 48);
          *(void *)(a1 + v33 + 88) = *(void *)(v34 + 64);
          *(unsigned char *)(v34 + 71) = 0;
          *(unsigned char *)(v34 + 48) = 0;
          if (v33 == -48)
          {
            uint64_t v45 = a1;
            goto LABEL_56;
          }
          unint64_t v36 = *(char **)(a1 + v33 + 24);
          if (v47 >= 0) {
            unint64_t v37 = (char *)&v46;
          }
          else {
            unint64_t v37 = (char *)v46;
          }
          int v38 = *v37;
          if (*(char *)(a1 + v33 + 47) >= 0) {
            unint64_t v36 = (char *)(a1 + v33 + 24);
          }
          if ((v38 & 0x80000000) == 0)
          {
            int v39 = *v36;
            if ((v39 & 0x80000000) == 0)
            {
              unsigned int v40 = v38;
              unsigned int v41 = v39;
              unsigned int v42 = (v39 ^ v40) & 0xFFFFFFDF;
              BOOL v43 = v40 < 0x40 || v42 == 0;
              if (!v43 && v41 >= 0x40)
              {
                if ((((_BYTE)v40 + 5) & 0x1Fu) >= (((_BYTE)v41 + 5) & 0x1Fu))
                {
                  uint64_t v45 = a1 + v33 + 48;
                  goto LABEL_56;
                }
                LOBYTE(v32) = 0;
                goto LABEL_50;
              }
            }
          }
          int v44 = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, (uint64_t)&v46, a1 + v33 + 24);
          int v32 = *(char *)(v34 + 71);
          if (v44)
          {
LABEL_50:
            v33 -= 24;
            continue;
          }
          break;
        }
        uint64_t v45 = a1 + v33 + 48;
        if (v32 < 0) {
          operator delete(*(void **)v45);
        }
LABEL_56:
        *(_OWORD *)uint64_t v45 = v46;
        *(void *)(v45 + 16) = v47;
        if (++v23 != 8)
        {
LABEL_57:
          uint64_t v20 = v21;
          v22 += 24;
          v21 += 24;
          if (v21 == a2) {
            return 1;
          }
          continue;
        }
        return v21 + 24 == a2;
      }
  }
}

void sub_216C87E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C87EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_216C86E84(a1, a2, a3, a5);
  if (*(char *)(a4 + 23) >= 0) {
    unsigned int v11 = (unsigned __int8 *)a4;
  }
  else {
    unsigned int v11 = *(unsigned __int8 **)a4;
  }
  unsigned int v12 = *v11;
  if (*(char *)(a3 + 23) >= 0) {
    unsigned int v13 = (char *)a3;
  }
  else {
    unsigned int v13 = *(char **)a3;
  }
  if ((v12 & 0x80) != 0
    || (int v14 = *v13, v14 < 0)
    || (v12 >= 0x40 ? (BOOL v15 = ((v14 ^ v12) & 0xFFFFFFDF) == 0) : (BOOL v15 = 1),
        v15 || v14 < 0x40u))
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a5, a4, a3);
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v12 + 5) & 0x1Fu) >= (((_BYTE)v14 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v16 = *(void *)(a3 + 16);
  long long v17 = *(_OWORD *)a3;
  uint64_t v18 = *(void *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(void *)(a3 + 16) = v18;
  *(_OWORD *)a4 = v17;
  *(void *)(a4 + 16) = v16;
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v19 = (char *)a3;
  }
  else {
    uint64_t v19 = *(char **)a3;
  }
  int v20 = *v19;
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v21 = (char *)a2;
  }
  else {
    uint64_t v21 = *(char **)a2;
  }
  if (v20 < 0
    || (int v22 = *v21, v22 < 0)
    || ((unsigned int v23 = v20,
         unsigned int v24 = v22,
         unsigned int v25 = (v22 ^ v23) & 0xFFFFFFDF,
         v23 >= 0x40)
      ? (BOOL v26 = v25 == 0)
      : (BOOL v26 = 1),
        v26 || v24 < 0x40))
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a5, a3, a2);
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v23 + 5) & 0x1Fu) >= (((_BYTE)v24 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v27 = *(void *)(a2 + 16);
  long long v28 = *(_OWORD *)a2;
  uint64_t v29 = *(void *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v29;
  *(_OWORD *)a3 = v28;
  *(void *)(a3 + 16) = v27;
  if (*(char *)(a2 + 23) >= 0) {
    unsigned int v30 = (char *)a2;
  }
  else {
    unsigned int v30 = *(char **)a2;
  }
  int v31 = *v30;
  if (*(char *)(a1 + 23) >= 0) {
    int v32 = (char *)a1;
  }
  else {
    int v32 = *(char **)a1;
  }
  if (v31 < 0
    || (int v33 = *v32, v33 < 0)
    || v31 < 0x40u
    || ((v33 ^ v31) & 0xFFFFFFDF) == 0
    || v33 < 0x40u)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a5, a2, a1);
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v31 + 5) & 0x1Fu) >= (((_BYTE)v33 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v34 = *(void *)(a1 + 16);
  long long v35 = *(_OWORD *)a1;
  uint64_t v36 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v36;
  *(_OWORD *)a2 = v35;
  *(void *)(a2 + 16) = v34;
  return result;
}

uint64_t sub_216C880E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = sub_216C87EAC(a1, a2, a3, a4, a6);
  if (*(char *)(a5 + 23) >= 0) {
    unsigned int v13 = (char *)a5;
  }
  else {
    unsigned int v13 = *(char **)a5;
  }
  int v14 = *v13;
  if (*(char *)(a4 + 23) >= 0) {
    BOOL v15 = (char *)a4;
  }
  else {
    BOOL v15 = *(char **)a4;
  }
  if (v14 < 0
    || (int v16 = *v15, v16 < 0)
    || ((unsigned int v17 = v14,
         unsigned int v18 = v16,
         unsigned int v19 = (v16 ^ v17) & 0xFFFFFFDF,
         v17 >= 0x40)
      ? (BOOL v20 = v19 == 0)
      : (BOOL v20 = 1),
        v20 || v18 < 0x40))
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a6, a5, a4);
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v17 + 5) & 0x1Fu) >= (((_BYTE)v18 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v21 = *(void *)(a4 + 16);
  long long v22 = *(_OWORD *)a4;
  uint64_t v23 = *(void *)(a5 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(void *)(a4 + 16) = v23;
  *(_OWORD *)a5 = v22;
  *(void *)(a5 + 16) = v21;
  if (*(char *)(a4 + 23) >= 0) {
    unsigned int v24 = (char *)a4;
  }
  else {
    unsigned int v24 = *(char **)a4;
  }
  int v25 = *v24;
  if (*(char *)(a3 + 23) >= 0) {
    BOOL v26 = (char *)a3;
  }
  else {
    BOOL v26 = *(char **)a3;
  }
  if (v25 < 0
    || (int v27 = *v26, v27 < 0)
    || ((unsigned int v28 = v25,
         unsigned int v29 = v27,
         unsigned int v30 = (v27 ^ v28) & 0xFFFFFFDF,
         v28 >= 0x40)
      ? (BOOL v31 = v30 == 0)
      : (BOOL v31 = 1),
        v31 || v29 < 0x40))
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a6, a4, a3);
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v28 + 5) & 0x1Fu) >= (((_BYTE)v29 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v32 = *(void *)(a3 + 16);
  long long v33 = *(_OWORD *)a3;
  uint64_t v34 = *(void *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(void *)(a3 + 16) = v34;
  *(_OWORD *)a4 = v33;
  *(void *)(a4 + 16) = v32;
  if (*(char *)(a3 + 23) >= 0) {
    long long v35 = (char *)a3;
  }
  else {
    long long v35 = *(char **)a3;
  }
  int v36 = *v35;
  if (*(char *)(a2 + 23) >= 0) {
    unint64_t v37 = (char *)a2;
  }
  else {
    unint64_t v37 = *(char **)a2;
  }
  if (v36 < 0
    || (int v38 = *v37, v38 < 0)
    || v36 < 0x40u
    || ((v38 ^ v36) & 0xFFFFFFDF) == 0
    || v38 < 0x40u)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a6, a3, a2);
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v36 + 5) & 0x1Fu) >= (((_BYTE)v38 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v39 = *(void *)(a2 + 16);
  long long v40 = *(_OWORD *)a2;
  uint64_t v41 = *(void *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v41;
  *(_OWORD *)a3 = v40;
  *(void *)(a3 + 16) = v39;
  if (*(char *)(a2 + 23) >= 0) {
    unsigned int v42 = (char *)a2;
  }
  else {
    unsigned int v42 = *(char **)a2;
  }
  int v43 = *v42;
  if (*(char *)(a1 + 23) >= 0) {
    int v44 = (char *)a1;
  }
  else {
    int v44 = *(char **)a1;
  }
  if (v43 < 0
    || (int v45 = *v44, v45 < 0)
    || v43 < 0x40u
    || ((v45 ^ v43) & 0xFFFFFFDF) == 0
    || v45 < 0x40u)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a6, a2, a1);
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v43 + 5) & 0x1Fu) >= (((_BYTE)v45 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v46 = *(void *)(a1 + 16);
  long long v47 = *(_OWORD *)a1;
  uint64_t v48 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v48;
  *(_OWORD *)a2 = v47;
  *(void *)(a2 + 16) = v46;
  return result;
}

uint64_t sub_216C883C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 24;
    if (a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 24 * v10;
      do
      {
        sub_216C88688(a1, a4, v9, v12);
        v12 -= 24;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      while (1)
      {
        BOOL v15 = *(char *)(v14 + 23) >= 0 ? (char *)v14 : *(char **)v14;
        int v16 = *v15;
        unsigned int v17 = *(char *)(a1 + 23) >= 0 ? (char *)a1 : *(char **)a1;
        if (v16 < 0) {
          break;
        }
        int v18 = *v17;
        if (v18 < 0) {
          break;
        }
        unsigned int v19 = v16;
        unsigned int v20 = v18;
        unsigned int v21 = (v18 ^ v19) & 0xFFFFFFDF;
        BOOL v22 = v19 < 0x40 || v21 == 0;
        if (v22 || v20 < 0x40) {
          break;
        }
        if ((((_BYTE)v19 + 5) & 0x1Fu) < (((_BYTE)v20 + 5) & 0x1Fu)) {
          goto LABEL_21;
        }
LABEL_22:
        v14 += 24;
        if (v14 == a3)
        {
          uint64_t v13 = a3;
          goto LABEL_26;
        }
      }
      if (!pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, v14, a1)) {
        goto LABEL_22;
      }
LABEL_21:
      uint64_t v23 = *(void *)(v14 + 16);
      long long v24 = *(_OWORD *)v14;
      uint64_t v25 = *(void *)(a1 + 16);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
      *(void *)(v14 + 16) = v25;
      *(_OWORD *)a1 = v24;
      *(void *)(a1 + 16) = v23;
      sub_216C88688(a1, a4, v9, a1);
      goto LABEL_22;
    }
LABEL_26:
    if (v8 >= 25)
    {
      int64_t v26 = v8 / 0x18uLL;
      uint64_t v27 = a2 - 24;
      do
      {
        uint64_t v28 = *(void *)a1;
        *(void *)int v36 = *(void *)(a1 + 8);
        *(void *)&v36[7] = *(void *)(a1 + 15);
        char v29 = *(unsigned char *)(a1 + 23);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v30 = sub_216C88A10(a1, a4, v26);
        uint64_t v31 = v30;
        int v32 = *(char *)(v30 + 23);
        if (v27 == v30)
        {
          if (v32 < 0) {
            operator delete(*(void **)v30);
          }
          *(void *)uint64_t v31 = v28;
          *(void *)(v31 + 8) = *(void *)v36;
          *(void *)(v31 + 15) = *(void *)&v36[7];
          *(unsigned char *)(v31 + 23) = v29;
        }
        else
        {
          if (v32 < 0) {
            operator delete(*(void **)v30);
          }
          long long v33 = *(_OWORD *)v27;
          *(void *)(v31 + 16) = *(void *)(v27 + 16);
          *(_OWORD *)uint64_t v31 = v33;
          *(void *)uint64_t v27 = v28;
          *(void *)(v27 + 8) = *(void *)v36;
          *(void *)(v27 + 15) = *(void *)&v36[7];
          *(unsigned char *)(v27 + 23) = v29;
          sub_216C88B60(a1, v31 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v31 + 24 - a1) >> 3));
        }
        v27 -= 24;
      }
      while (v26-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_216C88670(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C88688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return;
  }
  uint64_t v5 = a4;
  uint64_t v7 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 3))) {
    return;
  }
  uint64_t v10 = (0x5555555555555556 * ((a4 - a1) >> 3)) | 1;
  uint64_t v11 = a1 + 24 * v10;
  uint64_t v12 = 0x5555555555555556 * ((a4 - a1) >> 3) + 2;
  if (v12 < a3)
  {
    uint64_t v13 = *(char **)(v11 + 24);
    if (*(char *)(v11 + 23) >= 0) {
      uint64_t v14 = (char *)(a1 + 24 * v10);
    }
    else {
      uint64_t v14 = *(char **)v11;
    }
    int v15 = *v14;
    if (*(char *)(v11 + 47) >= 0) {
      uint64_t v13 = (char *)(v11 + 24);
    }
    if (v15 < 0
      || (int v16 = *v13, v16 < 0)
      || ((unsigned int v17 = v15,
           unsigned int v18 = v16,
           unsigned int v19 = (v16 ^ v17) & 0xFFFFFFDF,
           v17 >= 0x40)
        ? (BOOL v20 = v19 == 0)
        : (BOOL v20 = 1),
          v20 || v18 < 0x40))
    {
      if (!pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a2, a1 + 24 * v10, v11 + 24)) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    if ((((_BYTE)v17 + 5) & 0x1Fu) < (((_BYTE)v18 + 5) & 0x1Fu))
    {
LABEL_17:
      v11 += 24;
      uint64_t v10 = v12;
    }
  }
LABEL_18:
  if (*(char *)(v11 + 23) >= 0) {
    unsigned int v21 = (char *)v11;
  }
  else {
    unsigned int v21 = *(char **)v11;
  }
  int v22 = *v21;
  if (*(char *)(v5 + 23) >= 0) {
    uint64_t v23 = (char *)v5;
  }
  else {
    uint64_t v23 = *(char **)v5;
  }
  if ((v22 & 0x80000000) == 0)
  {
    int v24 = *v23;
    if ((v24 & 0x80000000) == 0)
    {
      unsigned int v25 = v22;
      unsigned int v26 = v24;
      unsigned int v27 = (v24 ^ v25) & 0xFFFFFFDF;
      BOOL v28 = v25 < 0x40 || v27 == 0;
      if (!v28 && v26 >= 0x40)
      {
        if ((((_BYTE)v25 + 5) & 0x1Fu) < (((_BYTE)v26 + 5) & 0x1Fu)) {
          return;
        }
        goto LABEL_32;
      }
    }
  }
  if ((pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a2, v11, v5) & 1) == 0)
  {
LABEL_32:
    long long v51 = *(_OWORD *)v5;
    uint64_t v52 = *(void *)(v5 + 16);
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
    *(void *)uint64_t v5 = 0;
    while (1)
    {
      long long v29 = *(_OWORD *)v11;
      *(void *)(v5 + 16) = *(void *)(v11 + 16);
      *(_OWORD *)uint64_t v5 = v29;
      *(unsigned char *)(v11 + 23) = 0;
      *(unsigned char *)uint64_t v11 = 0;
      if (v7 < v10)
      {
LABEL_71:
        long long v50 = v51;
        *(void *)(v11 + 16) = v52;
        *(_OWORD *)uint64_t v11 = v50;
        return;
      }
      uint64_t v30 = 2 * v10;
      uint64_t v10 = (2 * v10) | 1;
      uint64_t v31 = a1 + 24 * v10;
      uint64_t v32 = v30 + 2;
      if (v30 + 2 < a3)
      {
        long long v33 = *(char **)(v31 + 24);
        if (*(char *)(v31 + 23) >= 0) {
          uint64_t v34 = (char *)(a1 + 24 * v10);
        }
        else {
          uint64_t v34 = *(char **)v31;
        }
        int v35 = *v34;
        if (*(char *)(v31 + 47) >= 0) {
          long long v33 = (char *)(v31 + 24);
        }
        if ((v35 & 0x80000000) == 0)
        {
          int v36 = *v33;
          if ((v36 & 0x80000000) == 0)
          {
            unsigned int v37 = v35;
            unsigned int v38 = v36;
            unsigned int v39 = (v36 ^ v37) & 0xFFFFFFDF;
            BOOL v40 = v37 < 0x40 || v39 == 0;
            if (!v40 && v38 >= 0x40)
            {
              if ((((_BYTE)v37 + 5) & 0x1Fu) >= (((_BYTE)v38 + 5) & 0x1Fu)) {
                goto LABEL_49;
              }
LABEL_48:
              v31 += 24;
              uint64_t v10 = v32;
              goto LABEL_49;
            }
          }
        }
        if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a2, a1 + 24 * v10, v31 + 24))goto LABEL_48; {
      }
        }
LABEL_49:
      if (*(char *)(v31 + 23) >= 0) {
        uint64_t v41 = (char *)v31;
      }
      else {
        uint64_t v41 = *(char **)v31;
      }
      int v42 = *v41;
      if (v52 >= 0) {
        int v43 = (char *)&v51;
      }
      else {
        int v43 = (char *)v51;
      }
      if (v42 < 0
        || (int v44 = *v43, v44 < 0)
        || ((unsigned int v45 = v42,
             unsigned int v46 = v44,
             unsigned int v47 = (v44 ^ v45) & 0xFFFFFFDF,
             v45 >= 0x40)
          ? (BOOL v48 = v47 == 0)
          : (BOOL v48 = 1),
            v48 || v46 < 0x40))
      {
        if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a2, v31, (uint64_t)&v51))
        {
LABEL_69:
          if (*(char *)(v11 + 23) < 0) {
            operator delete(*(void **)v11);
          }
          goto LABEL_71;
        }
      }
      else if ((((_BYTE)v45 + 5) & 0x1Fu) < (((_BYTE)v46 + 5) & 0x1Fu))
      {
        goto LABEL_69;
      }
      char v49 = *(unsigned char *)(v11 + 23);
      uint64_t v5 = v11;
      uint64_t v11 = v31;
      if (v49 < 0) {
        operator delete(*(void **)v5);
      }
    }
  }
}

void sub_216C889F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C88A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 24 * v6 + 24;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 >= a3) {
      goto LABEL_19;
    }
    uint64_t v12 = *(char **)(v9 + 24);
    if (*(char *)(v9 + 23) >= 0) {
      uint64_t v13 = (char *)v9;
    }
    else {
      uint64_t v13 = *(char **)v9;
    }
    int v14 = *v13;
    if (*(char *)(v9 + 47) >= 0) {
      uint64_t v12 = (char *)(v9 + 24);
    }
    if ((v14 & 0x80000000) == 0)
    {
      int v15 = *v12;
      if ((v15 & 0x80000000) == 0)
      {
        unsigned int v16 = v14;
        unsigned int v17 = v15;
        unsigned int v18 = (v15 ^ v16) & 0xFFFFFFDF;
        BOOL v19 = v16 < 0x40 || v18 == 0;
        if (!v19 && v17 >= 0x40)
        {
          if ((((_BYTE)v16 + 5) & 0x1Fu) >= (((_BYTE)v17 + 5) & 0x1Fu)) {
            goto LABEL_19;
          }
LABEL_18:
          v9 += 24;
          uint64_t v6 = v11;
          goto LABEL_19;
        }
      }
    }
    if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a2, v9, v9 + 24)) {
      goto LABEL_18;
    }
LABEL_19:
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v20 = *(_OWORD *)v9;
    *(void *)(a1 + 16) = *(void *)(v9 + 16);
    *(_OWORD *)a1 = v20;
    *(unsigned char *)(v9 + 23) = 0;
    *(unsigned char *)uint64_t v9 = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

void sub_216C88B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = a1 + 24 * (v4 >> 1);
    uint64_t v10 = a2 - 24;
    uint64_t v9 = *(char **)(a2 - 24);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v11 = (char *)(a1 + 24 * (v4 >> 1));
    }
    else {
      uint64_t v11 = *(char **)v8;
    }
    int v12 = *v11;
    if (*(char *)(a2 - 1) >= 0) {
      uint64_t v9 = (char *)(a2 - 24);
    }
    if (v12 < 0
      || (int v13 = *v9, v13 < 0)
      || ((unsigned int v14 = v12,
           unsigned int v15 = v13,
           unsigned int v16 = (v13 ^ v14) & 0xFFFFFFDF,
           v14 >= 0x40)
        ? (BOOL v17 = v16 == 0)
        : (BOOL v17 = 1),
          v17 || v15 < 0x40))
    {
      if (!pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v8, v10)) {
        return;
      }
    }
    else if ((((_BYTE)v14 + 5) & 0x1Fu) >= (((_BYTE)v15 + 5) & 0x1Fu))
    {
      return;
    }
    long long v28 = *(_OWORD *)v10;
    uint64_t v29 = *(void *)(v10 + 16);
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;
    *(void *)uint64_t v10 = 0;
    while (1)
    {
      uint64_t v18 = v8;
      if (*(char *)(v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      long long v19 = *(_OWORD *)v8;
      *(void *)(v10 + 16) = *(void *)(v8 + 16);
      *(_OWORD *)uint64_t v10 = v19;
      *(unsigned char *)(v8 + 23) = 0;
      *(unsigned char *)uint64_t v8 = 0;
      if (!v7) {
        break;
      }
      unint64_t v7 = (v7 - 1) >> 1;
      uint64_t v8 = a1 + 24 * v7;
      if (*(char *)(v8 + 23) >= 0) {
        long long v20 = (char *)(a1 + 24 * v7);
      }
      else {
        long long v20 = *(char **)v8;
      }
      int v21 = *v20;
      if (v29 >= 0) {
        int v22 = (char *)&v28;
      }
      else {
        int v22 = (char *)v28;
      }
      if (v21 < 0
        || (int v23 = *v22, v23 < 0)
        || ((unsigned int v24 = v21,
             unsigned int v25 = v23,
             unsigned int v26 = (v23 ^ v24) & 0xFFFFFFDF,
             v24 >= 0x40)
          ? (BOOL v27 = v26 == 0)
          : (BOOL v27 = 1),
            v27 || v25 < 0x40))
      {
        uint64_t v10 = v18;
        if ((pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, a1 + 24 * v7, (uint64_t)&v28) & 1) == 0)
        {
          if (*(char *)(v18 + 23) < 0) {
            operator delete(*(void **)v18);
          }
          break;
        }
      }
      else
      {
        uint64_t v10 = v18;
        if ((((_BYTE)v24 + 5) & 0x1Fu) >= (((_BYTE)v25 + 5) & 0x1Fu)) {
          break;
        }
      }
    }
    *(_OWORD *)uint64_t v18 = v28;
    *(void *)(v18 + 16) = v29;
  }
}

void sub_216C88D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C88D64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(void *)a3 = 0x434453552D525850;
  *(unsigned char *)(a3 + 9) = 10;
  if (a2 > 87)
  {
    *(void *)(a1 + 8) = 0;
    ssize_t v6 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 24), (__sFILE *)a3, (char *)0x58, *(void *)a1);
    if (v6 != -1) {
      *(void *)(a1 + 8) += v6;
    }
    if (*(void *)a3 == 0x434453552D525850)
    {
      uint64_t v9 = *(unsigned __int8 *)(a3 + 8);
      uint64_t v10 = *(unsigned __int8 *)(a3 + 9);
      if (*(unsigned char *)(a3 + 8) || v10 >= 0xB)
      {
        long long v19 = "usd/crateFile.cpp";
        long long v20 = "_ReadBootStrap";
        uint64_t v21 = 3617;
        int v22 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(By"
              "teStream, int64_t) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream]";
        char v23 = 0;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%hhd.%hhd.%hhd", v7, v8, v9, v10, *(unsigned __int8 *)(a3 + 10));
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%hhd.%hhd.%hhd", v11, v12, 0, 10, 0);
        if (v18 >= 0) {
          int v13 = (const char *)&v17;
        }
        else {
          int v13 = (const char *)v17;
        }
        if (v16 >= 0) {
          p_p = (const char *)&__p;
        }
        else {
          p_p = (const char *)__p;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file version mismatch -- file is %s, software supports %s", v13, p_p);
        if (v16 < 0) {
          operator delete(__p);
        }
        if (v18 < 0) {
          operator delete(v17);
        }
      }
      else if (*(void *)(a3 + 16) >= a2)
      {
        long long v19 = "usd/crateFile.cpp";
        long long v20 = "_ReadBootStrap";
        uint64_t v21 = 3625;
        int v22 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(By"
              "teStream, int64_t) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream]";
        char v23 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file corrupt, possibly truncated: table of contents at offset %lld but file size is %lld");
      }
    }
    else
    {
      long long v19 = "usd/crateFile.cpp";
      long long v20 = "_ReadBootStrap";
      uint64_t v21 = 3610;
      int v22 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(Byte"
            "Stream, int64_t) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream]";
      char v23 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate bootstrap section corrupt");
    }
  }
  else
  {
    long long v19 = "usd/crateFile.cpp";
    long long v20 = "_ReadBootStrap";
    uint64_t v21 = 3603;
    int v22 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(ByteSt"
          "ream, int64_t) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream]";
    char v23 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"File too small to contain bootstrap structure");
  }
}

void sub_216C88FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C88FD8(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v5 = 0;
  if (sub_216C8B154(a1, __p))
  {
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(void *)(a3 + 16) = v5;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_216C8904C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C89068(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 6336);
  uint64_t v3 = *(void *)(result + 6344);
  if (v2 != v3)
  {
    uint64_t v4 = -1;
    uint64_t v5 = -1;
    do
    {
      uint64_t v6 = *(void *)(v2 + 16);
      if (v6 < v4 || v4 == -1) {
        uint64_t v4 = *(void *)(v2 + 16);
      }
      uint64_t v8 = *(void *)(v2 + 24) + v6;
      if (v8 > v5 || v5 == -1) {
        uint64_t v5 = v8;
      }
      v2 += 32;
    }
    while (v2 != v3);
    if (v4 != -1 && v5 != -1) {
      return pxrInternal__aapl__pxrReserved__::ArchFileAdvise(*(void *)(a2 + 32), *(void *)(a2 + 8) + v4, v5 - v4, 1);
    }
  }
  return result;
}

void sub_216C890D8(uint64_t a1, uint64_t a2, char *a3)
{
  v43[9] = *MEMORY[0x263EF8340];
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    uint64_t v6 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadTokens", 0, a3);
    int size = v6 != 0;
  }
  else
  {
    uint64_t v6 = 0;
    int size = 0;
  }
  v41._bf._base = v6;
  v41._bf._int size = size;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "TOKENS");
  if (Section)
  {
    uint64_t v9 = *(void *)(a2 + 24);
    uint64_t v10 = *((void *)Section + 2);
    if (v9 > v10 && (v10 & 0x8000000000000000) == 0)
    {
      *(void *)(a2 + 16) = v10;
      *(void *)&v41._flags = 0;
      if (!sub_216C8B2C8(a2 + 8, 0, (__sFILE *)&v41._flags)) {
        goto LABEL_47;
      }
      *(void *)&v41._r = 0;
      if (((*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8)) > 0x3FFu)
      {
        size_t __sz = 0;
        if (!sub_216C8B2C8(a2 + 8, 0, (__sFILE *)&__sz)) {
          goto LABEL_46;
        }
        v41._p = 0;
        if (!sub_216C8B2C8(a2 + 8, 0, &v41)) {
          goto LABEL_46;
        }
        if (!__sz || !v41._p)
        {
          *(void *)&v41._lbfint size = "usd/crateFile.cpp";
          v41._cookie = "_ReadTokens";
          v41._close = (int (__cdecl *)(void *))4008;
          v41._read = (int (__cdecl *)(void *, char *, int))"void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateF"
                                                            "ile::_ReadTokens(Reader) [Reader = pxrInternal__aapl__pxrRes"
                                                            "erved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl"
                                                            "__pxrReserved__::Usd_CrateFile::_PreadStream>]";
          LOBYTE(v41._seek) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file corrupt, tokens section is empty");
          goto LABEL_46;
        }
        uint64_t v28 = *(void *)(a2 + 16);
        uint64_t v27 = *(void *)(a2 + 24);
        uint64_t v29 = (unsigned __int8 *)(v27 - v28);
        if (v28 < 0 || ((unint64_t)v29 & 0x8000000000000000) != 0 || v41._p > v29)
        {
          *(void *)&v41._lbfint size = "usd/crateFile.cpp";
          v41._cookie = "_ReadTokens";
          v41._close = (int (__cdecl *)(void *))4014;
          v41._read = (int (__cdecl *)(void *, char *, int))"void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateF"
                                                            "ile::_ReadTokens(Reader) [Reader = pxrInternal__aapl__pxrRes"
                                                            "erved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl"
                                                            "__pxrReserved__::Usd_CrateFile::_PreadStream>]";
          LOBYTE(v41._seek) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens size %llu with remaining file size is %lld of %lld", v41._p, v29, v27);
          goto LABEL_46;
        }
        uint64_t CompressedBufferSize = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfFastCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::TfFastCompression *)__sz);
        p = v41._p;
        if (!CompressedBufferSize || CompressedBufferSize < v41._p)
        {
          *(void *)&v41._lbfint size = "usd/crateFile.cpp";
          v41._cookie = "_ReadTokens";
          v41._close = (int (__cdecl *)(void *))4021;
          v41._read = (int (__cdecl *)(void *, char *, int))"void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateF"
                                                            "ile::_ReadTokens(Reader) [Reader = pxrInternal__aapl__pxrRes"
                                                            "erved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl"
                                                            "__pxrReserved__::Usd_CrateFile::_PreadStream>]";
          LOBYTE(v41._seek) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens. Corrupt compression data. Compressed size %llu, uncompressed size %llu", v41._p, __sz);
          goto LABEL_46;
        }
        size_t v32 = __sz;
        unsigned int v15 = (char *)operator new[](__sz);
        *(void *)&v41._r = v15;
        long long v33 = (__sFILE *)operator new[]((size_t)p);
        sub_216C6FD88(a2, v33, (char *)p);
        pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer((pxrInternal__aapl__pxrReserved__::TfFastCompression *)v33, v15, (char *)v41._p, __sz);
        char v16 = &v15[v32];
        size_t v17 = __sz;
        operator delete[](v33);
      }
      else
      {
        size_t __sz = 0;
        if (!sub_216C8B2C8(a2 + 8, 0, (__sFILE *)&__sz)) {
          goto LABEL_46;
        }
        uint64_t v12 = *(void *)(a2 + 16);
        uint64_t v11 = *(void *)(a2 + 24);
        size_t v13 = v11 - v12;
        unsigned int v14 = (char *)__sz;
        if (v12 < 0 || (v13 & 0x8000000000000000) != 0 || __sz > v13)
        {
          *(void *)&v41._lbfint size = "usd/crateFile.cpp";
          v41._cookie = "_ReadTokens";
          v41._close = (int (__cdecl *)(void *))3992;
          v41._read = (int (__cdecl *)(void *, char *, int))"void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateF"
                                                            "ile::_ReadTokens(Reader) [Reader = pxrInternal__aapl__pxrRes"
                                                            "erved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl"
                                                            "__pxrReserved__::Usd_CrateFile::_PreadStream>]";
          LOBYTE(v41._seek) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens size %llu with remaining file size being %lld of %lld", __sz, v13, v11);
          goto LABEL_46;
        }
        unsigned int v15 = (char *)operator new[](__sz);
        *(void *)&v41._r = v15;
        sub_216C6FD88(a2, (__sFILE *)v15, v14);
        char v16 = &v14[(void)v15];
        size_t v17 = __sz;
      }
      if (v15 != v16 && *(v16 - 1))
      {
        *(void *)&v41._lbfint size = "usd/crateFile.cpp";
        v41._cookie = "_ReadTokens";
        v41._close = (int (__cdecl *)(void *))4036;
        v41._read = (int (__cdecl *)(void *, char *, int))"void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                                                          "e::_ReadTokens(Reader) [Reader = pxrInternal__aapl__pxrReserve"
                                                          "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrR"
                                                          "eserved__::Usd_CrateFile::_PreadStream>]";
        LOBYTE(v41._seek) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Tokens section not null-terminated in crate file");
        *(v16 - 1) = 0;
      }
      unint64_t v18 = *(void *)&v41._flags;
      if (*(void *)&v41._flags - 1 >= v17)
      {
        *(void *)&v41._lbfint size = "usd/crateFile.cpp";
        v41._cookie = "_ReadTokens";
        v41._close = (int (__cdecl *)(void *))4046;
        v41._read = (int (__cdecl *)(void *, char *, int))"void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                                                          "e::_ReadTokens(Reader) [Reader = pxrInternal__aapl__pxrReserve"
                                                          "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrR"
                                                          "eserved__::Usd_CrateFile::_PreadStream>]";
        LOBYTE(v41._seek) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens. Corrupt data. Data size %llu, num tokens %llu", v17, *(void *)&v41._flags);
        *(void *)&v41._r = 0;
      }
      else
      {
        uint64_t v19 = *(void *)(a1 + 120);
        uint64_t v20 = *(void *)(a1 + 128);
        uint64_t v21 = a1 + 120;
        if (v20 != v19)
        {
          do
          {
            uint64_t v23 = *(void *)(v20 - 8);
            v20 -= 8;
            uint64_t v22 = v23;
            if ((v23 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
          while (v20 != v19);
          unint64_t v18 = *(void *)&v41._flags;
        }
        *(void *)(a1 + 128) = v19;
        sub_216A9C5B8(a1 + 120, v18);
        v15[v17 - 1] = 0;
        pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v41._lbfsize);
        uint64_t v24 = 0;
        if (v15 < v16 && *(void *)&v41._flags)
        {
          uint64_t v24 = 0;
          uint64_t v25 = *(void *)&v41._r;
          while ((unint64_t)&v15[-v25] < v17)
          {
            size_t __sz = 0;
            unsigned int v37 = v42;
            unsigned int v26 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&__sz, 0x28uLL);
            *((unsigned char *)v26 - 11) = 1;
            void *v26 = &unk_26C75F430;
            v26[1] = v21;
            v26[2] = v24;
            void v26[3] = v15;
            v26[4] = v43;
            (**(void (***)(void))*(v26 - 5))();
            v15 += strlen(v15) + 1;
            ++v24;
            if (v15 >= v16 || v24 == *(void *)&v41._flags) {
              goto LABEL_29;
            }
          }
          size_t __sz = (size_t)"usd/crateFile.cpp";
          unsigned int v37 = "_ReadTokens";
          uint64_t v38 = 4079;
          unsigned int v39 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrIntern"
                "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                "le::_PreadStream>]";
          char v40 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__sz, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed read tokens, buffer overflow.");
        }
        else
        {
LABEL_29:
          pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v41._lbfsize);
          if (v24 != *(void *)&v41._flags)
          {
            size_t __sz = (size_t)"usd/crateFile.cpp";
            unsigned int v37 = "_ReadTokens";
            uint64_t v38 = 4089;
            unsigned int v39 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrInte"
                  "rnal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Cra"
                  "teFile::_PreadStream>]";
            char v40 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__sz, 3, (pxrInternal__aapl__pxrReserved__ *)"Crate file claims %zu tokens, found %zu", *(size_t *)&v41._flags, v24);
          }
          sub_216C83328((pxrInternal__aapl__pxrReserved__ *)&v41._r);
        }
        pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v41._lbfsize);
        unsigned int v15 = *(char **)&v41._r;
        *(void *)&v41._r = 0;
        if (!v15) {
          goto LABEL_46;
        }
      }
      operator delete[](v15);
LABEL_46:
      int size = v41._bf._size;
      goto LABEL_47;
    }
    *(void *)&v41._lbfint size = "usd/crateFile.cpp";
    v41._cookie = "_ReadTokens";
    v41._close = (int (__cdecl *)(void *))3966;
    v41._read = (int (__cdecl *)(void *, char *, int))"void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_"
                                                      "ReadTokens(Reader) [Reader = pxrInternal__aapl__pxrReserved__::Usd"
                                                      "_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::U"
                                                      "sd_CrateFile::_PreadStream>]";
    LOBYTE(v41._seek) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file corrupt, tokens section is possibly truncatedat offset %lld but file size is %lld", v10, v9);
  }
LABEL_47:
  v41._bf._int size = size - 1;
  if (size)
  {
    base = v41._bf._base;
    int v35 = size - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)base);
      v41._bf._int size = v35--;
    }
    while (v35 != -2);
  }
}

void sub_216C89738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, char a20,uint64_t a21,char a22)
{
  if (__p) {
    operator delete[](__p);
  }
  sub_21684E6B8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

const char *sub_216C897E0(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    uint64_t v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadStrings", 0, a3);
    BOOL v7 = v6 != 0;
  }
  else
  {
    uint64_t v6 = 0;
    BOOL v7 = 0;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "STRINGS");
  if (result)
  {
    *(void *)(a2 + 16) = *((void *)result + 2);
    uint64_t result = (const char *)sub_216C8B3C8(a2, (void **)(a1 + 144));
  }
  if (v7) {
    return (const char *)pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v6);
  }
  return result;
}

void sub_216C89894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216C898A8(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    uint64_t v6 = (int (__cdecl *)(void *, const char *, int))pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadFields", 0, a3);
    BOOL v7 = v6 != 0;
  }
  else
  {
    uint64_t v6 = 0;
    BOOL v7 = 0;
  }
  __sz._write = v6;
  LODWORD(__sz._ub._base) = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "FIELDS");
  if (!Section) {
    goto LABEL_32;
  }
  *(void *)(a2 + 16) = *((void *)Section + 2);
  if (((*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8)) <= 0x3FFu)
  {
    sub_216C8B5B0(a2, (void **)(a1 + 48));
    goto LABEL_32;
  }
  __sz._seeuint64_t k = 0;
  if (sub_216C8B2C8(a2 + 8, 0, (__sFILE *)&__sz._seek))
  {
    uint64_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__sz._seek);
    unint64_t DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__sz._seek);
    if (CompressedBufferSize && DecompressionWorkingSpaceSize)
    {
      uint64_t v11 = (void *)(a1 + 48);
      sub_216C83970((uint64_t)v11, (unint64_t)__sz._seek);
      sub_2167813E0(&__sz._r, (unint64_t)__sz._seek);
      memset(&__sz._bf._size, 0, 32);
      BOOL v12 = sub_216C8B724((uint64_t)&__sz._bf._size, a2, *(_DWORD **)&__sz._r, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((uint64_t)(*(void *)&__sz._flags- *(void *)&__sz._r) >> 2));
      cookie = __sz._cookie;
      __sz._cookie = 0;
      if (cookie) {
        operator delete[](cookie);
      }
      unsigned int v14 = *(void **)&__sz._bf._size;
      *(void *)&__sz._bf._int size = 0;
      if (v14) {
        operator delete[](v14);
      }
      if (!v12) {
        goto LABEL_30;
      }
      seeuint64_t k = __sz._seek;
      if (__sz._seek)
      {
        char v16 = *(int **)&__sz._r;
        size_t v17 = (_DWORD *)(*v11 + 4);
        do
        {
          int v18 = *v16++;
          *size_t v17 = v18;
          v17 += 4;
          seeuint64_t k = (fpos_t (__cdecl *)(void *, fpos_t, int))((char *)seek - 1);
        }
        while (seek);
      }
      __sz._p = 0;
      if (!sub_216C8B2C8(a2 + 8, 0, &__sz)) {
        goto LABEL_30;
      }
      uint64_t v20 = *(void *)(a2 + 16);
      uint64_t v19 = *(void *)(a2 + 24);
      uint64_t v21 = (unsigned __int8 *)(v19 - v20);
      p = __sz._p;
      if (v20 < 0 || ((unint64_t)v21 & 0x8000000000000000) != 0 || __sz._p > v21)
      {
        *(void *)&__sz._bf._int size = "usd/crateFile.cpp";
        *(void *)&__sz._lbfint size = "_ReadFields";
        __sz._cookie = (void *)3739;
        __sz._close = (int (__cdecl *)(void *))"void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadFie"
                                               "lds(Reader) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::Cr"
                                               "ateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>]";
        LOBYTE(__sz._read) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__sz._bf._size, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fields of size %llu with remaining file size is %lld of %lld", __sz._p, v21, v19);
LABEL_30:
        if (*(void *)&__sz._r)
        {
          *(void *)&__sz._flags = *(void *)&__sz._r;
          operator delete(*(void **)&__sz._r);
        }
        goto LABEL_32;
      }
      uint64_t v23 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[]((size_t)__sz._p);
      if (sub_216C6FD88(a2, (__sFILE *)v23, (char *)p))
      {
        memset(&__sz._bf._size, 0, 24);
        sub_21679A004((uint64_t)&__sz._bf._size, (unint64_t)__sz._seek);
        pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(v23, *(char **)&__sz._bf._size, (char *)__sz._p, *(void *)&__sz._lbfsize - *(void *)&__sz._bf._size);
        uint64_t v24 = *(void **)&__sz._bf._size;
        if (__sz._seek)
        {
          uint64_t v25 = 0;
          unsigned int v26 = (void *)(*v11 + 8);
          do
          {
            void *v26 = v24[(void)v25];
            v26 += 2;
            uint64_t v25 = (fpos_t (__cdecl *)(void *, fpos_t, int))((char *)v25 + 1);
          }
          while (v25 != __sz._seek);
          goto LABEL_28;
        }
        if (*(void *)&__sz._bf._size)
        {
LABEL_28:
          *(void *)&__sz._lbfint size = v24;
          operator delete(v24);
        }
      }
      operator delete[](v23);
      goto LABEL_30;
    }
    if (__sz._seek)
    {
      *(void *)&__sz._bf._int size = "usd/crateFile.cpp";
      *(void *)&__sz._lbfint size = "_ReadFields";
      __sz._cookie = (void *)3720;
      __sz._close = (int (__cdecl *)(void *))"void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadField"
                                             "s(Reader) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateF"
                                             "ile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>]";
      LOBYTE(__sz._read) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__sz._bf._size, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed read compressed fields of size %llu.", __sz._seek);
    }
  }
LABEL_32:
  LODWORD(__sz._ub._base) = v7 - 1;
  if (v7)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v6);
    LODWORD(__sz._ub._base) = v7 | 0xFFFFFFFE;
  }
}

void sub_216C89BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  sub_21684E6B8(v18 - 64);
  _Unwind_Resume(a1);
}

void sub_216C89C40(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadFieldSets", 0, a3);
    BOOL v7 = v6 != 0;
  }
  else
  {
    uint64_t v6 = 0;
    BOOL v7 = 0;
  }
  v23[1] = v6;
  int v24 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "FIELDSETS");
  if (!Section) {
    goto LABEL_27;
  }
  *(void *)(a2 + 16) = *((void *)Section + 2);
  if (((*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8)) > 0x3FFu)
  {
    v23[0] = 0;
    if (!sub_216C8B2C8(a2 + 8, 0, (__sFILE *)v23)) {
      goto LABEL_27;
    }
    uint64_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(v23[0]);
    unint64_t DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(v23[0]);
    if (!CompressedBufferSize || !DecompressionWorkingSpaceSize)
    {
      v20[0] = "usd/crateFile.cpp";
      v20[1] = "_ReadFieldSets";
      __p[0] = (void *)3679;
      __p[1] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadFieldSets(Reader) [Reader = pxrInte"
               "rnal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateF"
               "ile::_PreadStream>]";
      char v22 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed fieldSets of size %llu", v23[0]);
      goto LABEL_27;
    }
    sub_216C83F34(a1 + 72, (unint64_t)v23[0]);
    sub_2167813E0(v19, (unint64_t)v23[0]);
    *(_OWORD *)uint64_t v20 = 0u;
    *(_OWORD *)std::string __p = 0u;
    BOOL v12 = sub_216C8B724((uint64_t)v20, a2, (_DWORD *)v19[0], v23[0]);
    size_t v13 = __p[0];
    __p[0] = 0;
    if (v13) {
      operator delete[](v13);
    }
    unsigned int v14 = v20[0];
    v20[0] = 0;
    if (v14) {
      operator delete[](v14);
    }
    if (v12)
    {
      unsigned int v15 = v23[0];
      char v16 = v19[0];
      if (v23[0])
      {
        size_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 72);
        do
        {
          *(_DWORD *)(v18 + 4 * (void)v17) = v16[(void)v17];
          size_t v17 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v17 + 1);
        }
        while (v15 != v17);
LABEL_25:
        v19[1] = v16;
        operator delete(v16);
LABEL_26:
        if (!v12) {
          goto LABEL_27;
        }
        goto LABEL_7;
      }
    }
    else
    {
      char v16 = v19[0];
    }
    if (!v16) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (!sub_216C8B864(a2, (void **)(a1 + 72))) {
    goto LABEL_27;
  }
LABEL_7:
  uint64_t v9 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 72) != v9 && *(_DWORD *)(v9 - 4) != -1)
  {
    v20[0] = "usd/crateFile.cpp";
    v20[1] = "_ReadFieldSets";
    __p[0] = (void *)3693;
    __p[1] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadFieldSets(Reader) [Reader = pxrIntern"
             "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>]";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt field sets in crate file");
    *(_DWORD *)(*(void *)(a1 + 80) - 4) = -1;
  }
LABEL_27:
  int v24 = v7 - 1;
  if (v7) {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v6);
  }
}

void sub_216C89EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  sub_216C83E54((uint64_t)&a13);
  if (__p) {
    operator delete(__p);
  }
  sub_21684E6B8(v13 - 64);
  _Unwind_Resume(a1);
}

void sub_216C89EFC(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    uint64_t v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadPaths", 0, a3);
    int v7 = v6 != 0;
  }
  else
  {
    uint64_t v6 = 0;
    int v7 = 0;
  }
  *(void *)&v32._r = v6;
  *(_DWORD *)&v32._flags = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "PATHS");
  if (Section)
  {
    *(void *)(a2 + 16) = *((void *)Section + 2);
    v32._p = 0;
    if (sub_216C8B2C8(a2 + 8, 0, &v32))
    {
      pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v32._bf);
      unsigned int v9 = (*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8) | *(unsigned __int8 *)(a1 + 6370);
      if (v9 == 1)
      {
        sub_216AF4CFC((uint64_t *)(a1 + 96), (unint64_t)v32._p);
        uint64_t v10 = *(int **)(a1 + 96);
        uint64_t v11 = *(void *)(a1 + 104);
        v27[0] = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v27);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v27 + 1);
        if (v11 - (uint64_t)v10 >= 1)
        {
          unint64_t v12 = ((unint64_t)(v11 - (void)v10) >> 3) + 1;
          do
          {
            sub_2169C487C(v10, v27);
            sub_2169C48D4(v10 + 1, (_DWORD *)v27 + 1);
            --v12;
            v10 += 2;
          }
          while (v12 > 1);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v27 + 1);
        sub_21697C414(v27);
        long long v13 = *(_OWORD *)(a2 + 16);
        v30[0] = *(_OWORD *)a2;
        v30[1] = v13;
        uint64_t v31 = *(void *)(a2 + 32);
        uint64_t v29 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v29);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v29 + 1);
        sub_216C8B988((char *)a1, v30, (uint64_t)&v32._bf, (int *)&v29);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v29 + 1);
        unsigned int v14 = &v29;
      }
      else
      {
        if (v9 > 0x3FF)
        {
          long long v19 = *(_OWORD *)(a2 + 16);
          v22[0] = *(_OWORD *)a2;
          v22[1] = v19;
          uint64_t v23 = *(void *)(a2 + 32);
          sub_216C8BF50((void *)a1, (uint64_t)v22, (pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v32._bf, (unint64_t)v32._p);
          goto LABEL_19;
        }
        if (v32._p > (unsigned __int8 *)(*(void *)(a2 + 24) - *(void *)(a2 + 16)))
        {
          v27[0] = "usd/crateFile.cpp";
          v27[1] = "_ReadPaths";
          v27[2] = 4126;
          v27[3] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadPaths(Reader) [Reader = pxrInte"
                   "rnal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Cr"
                   "ateFile::_PreadStream>]";
          char v28 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v27, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid number of paths in file.");
          goto LABEL_19;
        }
        sub_216AF4CFC((uint64_t *)(a1 + 96), (unint64_t)v32._p);
        unsigned int v15 = *(int **)(a1 + 96);
        uint64_t v16 = *(void *)(a1 + 104);
        v27[0] = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v27);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v27 + 1);
        if (v16 - (uint64_t)v15 >= 1)
        {
          unint64_t v17 = ((unint64_t)(v16 - (void)v15) >> 3) + 1;
          do
          {
            sub_2169C487C(v15, v27);
            sub_2169C48D4(v15 + 1, (_DWORD *)v27 + 1);
            --v17;
            v15 += 2;
          }
          while (v17 > 1);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v27 + 1);
        sub_21697C414(v27);
        long long v18 = *(_OWORD *)(a2 + 16);
        v25[0] = *(_OWORD *)a2;
        v25[1] = v18;
        uint64_t v26 = *(void *)(a2 + 32);
        uint64_t v24 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v24);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v24 + 1);
        sub_216C8BC6C((char *)a1, v25, (uint64_t)&v32._bf, (int *)&v24);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
        unsigned int v14 = &v24;
      }
      sub_21697C414(v14);
LABEL_19:
      pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v32._bf);
      int v7 = *(_DWORD *)&v32._flags;
    }
  }
  *(_DWORD *)&v32._flags = v7 - 1;
  if (v7)
  {
    uint64_t v20 = *(void *)&v32._r;
    int v21 = v7 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v20);
      *(_DWORD *)&v32._flags = v21--;
    }
    while (v21 != -2);
  }
}

void sub_216C8A274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
}

void sub_216C8A2E8(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    uint64_t v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadSpecs", 0, a3);
    BOOL v7 = v6 != 0;
  }
  else
  {
    uint64_t v6 = 0;
    BOOL v7 = 0;
  }
  char v110 = v6;
  int v111 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "SPECS");
  uint64_t v9 = a1 + 6368;
  if (Section)
  {
    *(void *)(a2 + 16) = *((void *)Section + 2);
    unsigned int v10 = (*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8) | *(unsigned __int8 *)(a1 + 6370);
    if (v10 == 1)
    {
      memset(&v109._ub._size, 0, 24);
      if (!sub_216C8CC2C(a2, (void **)&v109._ub._size))
      {
        if (*(void *)&v109._ub._size)
        {
          v109._extra = *(__sFILEX **)&v109._ub._size;
          operator delete(*(void **)&v109._ub._size);
        }
        goto LABEL_146;
      }
      sub_216C8555C(a1, ((uint64_t)v109._extra - *(void *)&v109._ub._size) >> 4);
      uint64_t v11 = *(void *)&v109._ub._size;
      extra = v109._extra;
      if (*(__sFILEX **)&v109._ub._size != v109._extra)
      {
        long long v13 = *(_DWORD **)a1;
        do
        {
          int v14 = *(_DWORD *)(v11 + 12);
          *(void *)long long v13 = *(void *)(v11 + 4);
          v13[2] = v14;
          v11 += 16;
          v13 += 3;
        }
        while ((__sFILEX *)v11 != extra);
        uint64_t v11 = *(void *)&v109._ub._size;
      }
      if (v11)
      {
        v109._extra = (__sFILEX *)v11;
        operator delete((void *)v11);
      }
      goto LABEL_15;
    }
    if (v10 <= 0x3FF)
    {
      if (!sub_216C8CD50(a2, (void **)a1)) {
        goto LABEL_146;
      }
      goto LABEL_15;
    }
    v109._seeuint64_t k = 0;
    if (!sub_216C8B2C8(a2 + 8, 0, (__sFILE *)&v109._seek)) {
      goto LABEL_146;
    }
    size_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v109._seek);
    unint64_t DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v109._seek);
    if (!CompressedBufferSize || (size_t v69 = DecompressionWorkingSpaceSize) == 0)
    {
      *(void *)&v109._ub._int size = "usd/crateFile.cpp";
      v109._extra = (__sFILEX *)"_ReadSpecs";
      *(void *)&v109._ur = 3784;
      v109._lb._base = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxr"
                       "Internal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__"
                       "::Usd_CrateFile::_PreadStream>]";
      LOBYTE(v109._lb._size) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109._ub._size, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read specs of size %llu", v109._seek);
      goto LABEL_146;
    }
    v109._cookie = 0;
    if (!sub_216C8B2C8(a2 + 8, 0, (__sFILE *)&v109._cookie)) {
      goto LABEL_146;
    }
    uint64_t v71 = *(void *)(a2 + 16);
    uint64_t v70 = *(void *)(a2 + 24);
    unint64_t v72 = v70 - v71;
    cookie = (char *)v109._cookie;
    if (v71 < 0 || (v72 & 0x8000000000000000) != 0 || v109._cookie > (void *)v72)
    {
      *(void *)&v109._ub._int size = "usd/crateFile.cpp";
      v109._extra = (__sFILEX *)"_ReadSpecs";
      *(void *)&v109._ur = 3795;
      v109._lb._base = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxr"
                       "Internal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__"
                       "::Usd_CrateFile::_PreadStream>]";
      LOBYTE(v109._lb._size) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109._ub._size, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fields of size %llu with remaining file size is %lld of %lld", v109._cookie, v72, v70);
      goto LABEL_146;
    }
    uint64_t v74 = (__sFILE *)operator new[](CompressedBufferSize);
    uint64_t v75 = (char *)operator new[](v69);
    p_seeuint64_t k = 0;
    std::string v113 = 0;
    uint64_t v114 = 0;
    if ((unint64_t)(cookie - 1) >= CompressedBufferSize)
    {
      *(void *)&v109._ub._int size = "usd/crateFile.cpp";
      v109._extra = (__sFILEX *)"_ReadSpecs";
      *(void *)&v109._ur = 3817;
      v109._lb._base = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxr"
                       "Internal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__"
                       "::Usd_CrateFile::_PreadStream>]";
      LOBYTE(v109._lb._size) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109._ub._size, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read pathIndexes, size > compressedBufferSize.");
    }
    else
    {
      sub_216C6FD88(a2, v74, cookie);
      sub_21681C000((uint64_t)&p_seek, (unint64_t)v109._seek);
      pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v74, (char *)v109._cookie, p_seek, (int64_t)v109._seek, v75, v76);
      sub_216C8555C(a1, (unint64_t)v109._seek);
      seeuint64_t k = v109._seek;
      if (v109._seek)
      {
        int v78 = p_seek;
        int v79 = *(_DWORD **)a1;
        do
        {
          int v80 = *(_DWORD *)v78;
          int v78 = (__sFILEX **)((char *)v78 + 4);
          *int v79 = v80;
          v79 += 3;
          seeuint64_t k = (fpos_t (__cdecl *)(void *, fpos_t, int))((char *)seek - 1);
        }
        while (seek);
      }
      v109._bf._base = 0;
      if (sub_216C8B2C8(a2 + 8, 0, (__sFILE *)&v109._bf))
      {
        uint64_t v82 = *(void *)(a2 + 16);
        uint64_t v81 = *(void *)(a2 + 24);
        size_t v83 = (unsigned __int8 *)(v81 - v82);
        if (v82 < 0 || ((unint64_t)v83 & 0x8000000000000000) != 0 || v109._bf._base > v83)
        {
          *(void *)&v109._ub._int size = "usd/crateFile.cpp";
          v109._extra = (__sFILEX *)"_ReadSpecs";
          *(void *)&v109._ur = 3827;
          v109._lb._base = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader ="
                           " pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRe"
                           "served__::Usd_CrateFile::_PreadStream>]";
          LOBYTE(v109._lb._size) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109._ub._size, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fields of size %llu with remaining file size is %lld of %lld", v109._bf._base, v83, v81);
        }
        else if (v109._bf._base - 1 >= (unsigned __int8 *)CompressedBufferSize)
        {
          *(void *)&v109._ub._int size = "usd/crateFile.cpp";
          v109._extra = (__sFILEX *)"_ReadSpecs";
          *(void *)&v109._ur = 3841;
          v109._lb._base = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader ="
                           " pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRe"
                           "served__::Usd_CrateFile::_PreadStream>]";
          LOBYTE(v109._lb._size) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109._ub._size, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fsetIndexes, size > compressedBufferSize.");
        }
        else
        {
          sub_216C6FD88(a2, v74, (char *)v109._bf._base);
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v74, (char *)v109._bf._base, p_seek, (int64_t)v109._seek, v75, v84);
          unint64_t v85 = v109._seek;
          if (v109._seek)
          {
            unint64_t v86 = p_seek;
            unint64_t v87 = (_DWORD *)(*(void *)a1 + 4);
            do
            {
              int v88 = *(_DWORD *)v86;
              unint64_t v86 = (__sFILEX **)((char *)v86 + 4);
              *unint64_t v87 = v88;
              v87 += 3;
              unint64_t v85 = (fpos_t (__cdecl *)(void *, fpos_t, int))((char *)v85 - 1);
            }
            while (v85);
          }
          v109._p = 0;
          if (sub_216C8B2C8(a2 + 8, 0, &v109))
          {
            uint64_t v90 = *(void *)(a2 + 16);
            uint64_t v89 = *(void *)(a2 + 24);
            size_t v91 = (unsigned __int8 *)(v89 - v90);
            if (v90 < 0 || ((unint64_t)v91 & 0x8000000000000000) != 0 || v109._p > v91)
            {
              *(void *)&v109._ub._int size = "usd/crateFile.cpp";
              v109._extra = (__sFILEX *)"_ReadSpecs";
              *(void *)&v109._ur = 3852;
              v109._lb._base = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Read"
                               "er = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aap"
                               "l__pxrReserved__::Usd_CrateFile::_PreadStream>]";
              LOBYTE(v109._lb._size) = 0;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109._ub._size, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read spec types of size %llu with remaining file size is %lld of %lld", v109._p, v91, v89);
            }
            else
            {
              if (v109._p - 1 < (unsigned __int8 *)CompressedBufferSize)
              {
                sub_216C6FD88(a2, v74, (char *)v109._p);
                pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v74, (char *)v109._p, p_seek, (int64_t)v109._seek, v75, v92);
                v93 = v109._seek;
                if (v109._seek)
                {
                  uint64_t v94 = 0;
                  uint64_t v95 = 8;
                  do
                  {
                    uint64_t v96 = *((unsigned int *)p_seek + (void)v94);
                    if (v96 >= 0xC)
                    {
                      *(void *)&v109._ub._int size = "usd/crateFile.cpp";
                      v109._extra = (__sFILEX *)"_ReadSpecs";
                      *(void *)&v109._ur = 3864;
                      v109._lb._base = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reade"
                                       "r) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<"
                                       "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>]";
                      LOBYTE(v109._lb._size) = 0;
                      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109._ub._size, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid spec type %zu", v96);
                      *(_DWORD *)(*(void *)a1 + v95) = 0;
                      v93 = v109._seek;
                    }
                    else
                    {
                      *(_DWORD *)(*(void *)a1 + v95) = v96;
                    }
                    uint64_t v94 = (fpos_t (__cdecl *)(void *, fpos_t, int))((char *)v94 + 1);
                    v95 += 12;
                  }
                  while (v94 != v93);
                  int v106 = 0;
                  uint64_t v9 = a1 + 6368;
                }
                else
                {
                  int v106 = 0;
                }
LABEL_153:
                if (p_seek)
                {
                  std::string v113 = (const char *)p_seek;
                  operator delete(p_seek);
                }
                operator delete[](v75);
                operator delete[](v74);
                if (v106) {
                  goto LABEL_146;
                }
                goto LABEL_15;
              }
              *(void *)&v109._ub._int size = "usd/crateFile.cpp";
              v109._extra = (__sFILEX *)"_ReadSpecs";
              *(void *)&v109._ur = 3871;
              v109._lb._base = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Read"
                               "er = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aap"
                               "l__pxrReserved__::Usd_CrateFile::_PreadStream>]";
              LOBYTE(v109._lb._size) = 0;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109._ub._size, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read spectypes, size > compressedBufferSize.");
            }
          }
        }
      }
    }
    int v106 = 1;
    goto LABEL_153;
  }
LABEL_15:
  BOOL v108 = v7;
  unsigned int v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216C85BB4((uint64_t)&v109._ub._size, 0, 0.0, 0.5);
  memset(&v109._seek, 0, 24);
  unint64_t v17 = *(char **)a1;
  uint64_t v16 = *(unsigned int **)(a1 + 8);
  if (*(unsigned int **)a1 == v16) {
    goto LABEL_145;
  }
  uint64_t v107 = v9;
  long long v18 = (unsigned int *)(v17 + 8);
  long long v19 = *(char **)a1;
  do
  {
    unint64_t v20 = *(v18 - 2);
    uint64_t v21 = *(void *)(a1 + 96);
    if (v20 >= (*(void *)(a1 + 104) - v21) >> 3) {
      char v22 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v15);
    }
    else {
      char v22 = (uint64_t *)(v21 + 8 * v20);
    }
    if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v22))
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"spec at index %zu has empty path", v23, v24, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v17[-*(void *)a1] >> 2));
      write = v109._write;
      if ((char *)v109._write >= (char *)v109._ub._base)
      {
        unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * (((char *)v109._write - (char *)v109._seek) >> 3);
        unint64_t v40 = v39 + 1;
        if (v39 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        if (0x5555555555555556 * ((v109._ub._base - (unsigned __int8 *)v109._seek) >> 3) > v40) {
          unint64_t v40 = 0x5555555555555556 * ((v109._ub._base - (unsigned __int8 *)v109._seek) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v109._ub._base - (unsigned __int8 *)v109._seek) >> 3) >= 0x555555555555555) {
          unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v41 = v40;
        }
        p_ub = &v109._ub;
        if (v41) {
          int v42 = (void **)sub_216782ED8((uint64_t)&v109._ub, v41);
        }
        else {
          int v42 = 0;
        }
        char v49 = &v42[3 * v39];
        p_seeuint64_t k = (__sFILEX **)v42;
        std::string v113 = (const char *)v49;
        v115 = (const char *)&v42[3 * v41];
        long long v50 = *(_OWORD *)&v109._cookie;
        v49[2] = v109._read;
        *(_OWORD *)char v49 = v50;
        memset(&v109._cookie, 0, 24);
        uint64_t v114 = (uint64_t)(v49 + 3);
        sub_216790CCC((uint64_t *)&v109._seek, &p_seek);
        long long v51 = v109._write;
        unsigned int v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216790E64((uint64_t)&p_seek);
        v109._write = v51;
        if (SHIBYTE(v109._read) < 0) {
          operator delete(v109._cookie);
        }
      }
      else
      {
        long long v33 = *(_OWORD *)&v109._cookie;
        *((void *)v109._write + 2) = v109._read;
        *(_OWORD *)write = v33;
        v109._write = (int (__cdecl *)(void *, const char *, int))((char *)write + 24);
      }
      uint64_t v25 = v18;
      goto LABEL_81;
    }
    uint64_t v25 = (unsigned int *)(v19 + 8);
    if (*v18 && (int)*v18 < 12)
    {
      unsigned int v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216C85F24((uint64_t *)&v109._ub._size, (unsigned int *)v22, v22);
      if (v26) {
        goto LABEL_82;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)v22, (uint64_t)&v109._bf);
      p_bf = &v109._bf;
      if (*((char *)&v109._lbfsize + 7) < 0) {
        p_bf = v109._bf._base;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"spec <%s> repeated", v27, v28, p_bf);
      uint64_t v30 = v109._write;
      if ((char *)v109._write < (char *)v109._ub._base)
      {
        long long v31 = *(_OWORD *)&v109._cookie;
        *((void *)v109._write + 2) = v109._read;
        *(_OWORD *)uint64_t v30 = v31;
        memset(&v109._cookie, 0, 24);
        v109._write = (int (__cdecl *)(void *, const char *, int))((char *)v30 + 24);
        goto LABEL_79;
      }
      unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * (((char *)v109._write - (char *)v109._seek) >> 3);
      unint64_t v53 = v52 + 1;
      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      if (0x5555555555555556 * ((v109._ub._base - (unsigned __int8 *)v109._seek) >> 3) > v53) {
        unint64_t v53 = 0x5555555555555556 * ((v109._ub._base - (unsigned __int8 *)v109._seek) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v109._ub._base - (unsigned __int8 *)v109._seek) >> 3) >= 0x555555555555555) {
        unint64_t v54 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v54 = v53;
      }
      p_ub = &v109._ub;
      if (v54) {
        unsigned int v55 = (void **)sub_216782ED8((uint64_t)&v109._ub, v54);
      }
      else {
        unsigned int v55 = 0;
      }
      long long v60 = &v55[3 * v52];
      p_seeuint64_t k = (__sFILEX **)v55;
      std::string v113 = (const char *)v60;
      v115 = (const char *)&v55[3 * v54];
      long long v61 = *(_OWORD *)&v109._cookie;
      v60[2] = v109._read;
      *(_OWORD *)long long v60 = v61;
      memset(&v109._cookie, 0, 24);
      uint64_t v114 = (uint64_t)(v60 + 3);
      sub_216790CCC((uint64_t *)&v109._seek, &p_seek);
      int v62 = v109._write;
      unsigned int v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216790E64((uint64_t)&p_seek);
      v109._write = v62;
      if ((SHIBYTE(v109._read) & 0x80000000) == 0) {
        goto LABEL_79;
      }
      unsigned int v59 = v109._cookie;
      goto LABEL_78;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)v22, (uint64_t)&v109._bf);
    if (*((char *)&v109._lbfsize + 7) >= 0) {
      base = &v109._bf;
    }
    else {
      base = v109._bf._base;
    }
    unsigned int v37 = *v18;
    if (*v18)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"invalid spec type value %d", v34, v35, *v18);
      p = (const char *)&v109;
      if (*((char *)&v109._file + 5) < 0) {
        p = (const char *)v109._p;
      }
    }
    else
    {
      p = "unknown spec type";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"spec <%s> has %s", v34, v35, base, p);
    int v43 = v109._write;
    if ((char *)v109._write >= (char *)v109._ub._base)
    {
      unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (((char *)v109._write - (char *)v109._seek) >> 3);
      unint64_t v46 = v45 + 1;
      if (v45 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      if (0x5555555555555556 * ((v109._ub._base - (unsigned __int8 *)v109._seek) >> 3) > v46) {
        unint64_t v46 = 0x5555555555555556 * ((v109._ub._base - (unsigned __int8 *)v109._seek) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v109._ub._base - (unsigned __int8 *)v109._seek) >> 3) >= 0x555555555555555) {
        unint64_t v47 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v47 = v46;
      }
      p_ub = &v109._ub;
      if (v47) {
        BOOL v48 = (void **)sub_216782ED8((uint64_t)&v109._ub, v47);
      }
      else {
        BOOL v48 = 0;
      }
      unsigned int v56 = &v48[3 * v45];
      p_seeuint64_t k = (__sFILEX **)v48;
      std::string v113 = (const char *)v56;
      v115 = (const char *)&v48[3 * v47];
      long long v57 = *(_OWORD *)&v109._cookie;
      v56[2] = v109._read;
      *(_OWORD *)unsigned int v56 = v57;
      memset(&v109._cookie, 0, 24);
      uint64_t v114 = (uint64_t)(v56 + 3);
      sub_216790CCC((uint64_t *)&v109._seek, &p_seek);
      BOOL v58 = v109._write;
      unsigned int v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216790E64((uint64_t)&p_seek);
      v109._write = v58;
      if ((SHIBYTE(v109._read) & 0x80000000) == 0)
      {
        if (!v37) {
          goto LABEL_79;
        }
LABEL_71:
        if ((*((char *)&v109._file + 5) & 0x80000000) == 0) {
          goto LABEL_79;
        }
        unsigned int v59 = v109._p;
LABEL_78:
        operator delete(v59);
        goto LABEL_79;
      }
      operator delete(v109._cookie);
      if (v37) {
        goto LABEL_71;
      }
    }
    else
    {
      long long v44 = *(_OWORD *)&v109._cookie;
      *((void *)v109._write + 2) = v109._read;
      *(_OWORD *)int v43 = v44;
      memset(&v109._cookie, 0, 24);
      v109._write = (int (__cdecl *)(void *, const char *, int))((char *)v43 + 24);
      if (v37) {
        goto LABEL_71;
      }
    }
LABEL_79:
    if (*((char *)&v109._lbfsize + 7) < 0) {
      operator delete(v109._bf._base);
    }
LABEL_81:
    unsigned int *v25 = 0;
LABEL_82:
    v19 += 12;
    long long v63 = v18 + 1;
    v18 += 3;
    v17 += 12;
  }
  while (v63 != v16);
  BOOL v7 = v108;
  if (v109._seek != (fpos_t (__cdecl *)(void *, fpos_t, int))v109._write)
  {
    uint64_t v64 = *(void *)(a1 + 8);
    if (*(void *)a1 != v64)
    {
      uint64_t v65 = *(void *)a1 + 12;
      while (*(_DWORD *)(v65 - 4))
      {
        BOOL v66 = v65 == v64;
        v65 += 12;
        if (v66) {
          goto LABEL_134;
        }
      }
      uint64_t v97 = v65 - 12;
      if (v65 - 12 != v64 && v65 != v64)
      {
        do
        {
          if (*(_DWORD *)(v65 + 8))
          {
            uint64_t v98 = *(void *)v65;
            *(_DWORD *)(v97 + 8) = *(_DWORD *)(v65 + 8);
            *(void *)uint64_t v97 = v98;
            v97 += 12;
          }
          v65 += 12;
        }
        while (v65 != v64);
        uint64_t v64 = *(void *)(a1 + 8);
      }
      if (v97 != v64) {
        *(void *)(a1 + 8) = v97;
      }
    }
LABEL_134:
    unint64_t v99 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v109._write - (char *)v109._seek) >> 3));
    if (v109._write == (int (__cdecl *)(void *, const char *, int))v109._seek) {
      uint64_t v100 = 0;
    }
    else {
      uint64_t v100 = v99;
    }
    sub_216C8653C((uint64_t)v109._seek, (unint64_t)v109._write, (uint64_t)&p_seek, v100, 1);
    uint64_t v101 = sub_216ABCE20((unsigned __int8 *)v109._seek, (unsigned __int8 *)v109._write, (uint64_t)&p_seek);
    sub_216AB1AAC((uint64_t)&v109._seek, (uint64_t)v101, (long long *)v109._write);
    p_seeuint64_t k = (__sFILEX **)"usd/crateFile.cpp";
    std::string v113 = "_ReadSpecs";
    uint64_t v114 = 3935;
    v115 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrInternal__aa"
           "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>]";
    LOBYTE(p_ub) = 0;
    uint64_t v102 = (const char *)(a1 + 6512);
    if (*(char *)(v107 + 167) < 0) {
      uint64_t v102 = *(const char **)v102;
    }
    pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", (std::string **)&v109._seek, (std::string *)&v109._cookie);
    if (SHIBYTE(v109._read) >= 0) {
      p_cookie = (const char *)&v109._cookie;
    }
    else {
      p_cookie = (const char *)v109._cookie;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&p_seek, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt asset @%s@ - ignoring invalid specs: %s.", v102, p_cookie);
    if (SHIBYTE(v109._read) < 0) {
      operator delete(v109._cookie);
    }
    BOOL v7 = v111;
  }
LABEL_145:
  p_seeuint64_t k = (__sFILEX **)&v109._seek;
  sub_216782F20((void ***)&p_seek);
  p_seeuint64_t k = &v109._extra;
  sub_216C85DE8((void ***)&p_seek);
LABEL_146:
  int v111 = v7 - 1;
  if (v7)
  {
    uint64_t v104 = (uint64_t)v110;
    int v105 = v7 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v104);
      int v111 = v105--;
    }
    while (v105 != -2);
  }
}

void sub_216C8AFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  unint64_t v41 = *(void **)(v39 - 128);
  if (v41)
  {
    *(void *)(v39 - 120) = v41;
    operator delete(v41);
  }
  operator delete[](v38);
  operator delete[](v37);
  sub_21684E6B8(v39 - 144);
  _Unwind_Resume(a1);
}

BOOL sub_216C8B154(uint64_t a1, void **a2)
{
  unint64_t v16 = 0;
  if (!sub_216C8B2C8(a1 + 8, 0, (__sFILE *)&v16)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    std::string __p = "usd/crateFile.cpp";
    unint64_t v12 = "_Read";
    uint64_t v13 = 1189;
    int v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section]";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_216C832B0(&__p, v16);
  BOOL v7 = sub_216C8B278(a1, (__sFILE *)__p, v16);
  BOOL v8 = v7;
  if (&__p != a2 && v7) {
    sub_216C7B0D4((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (unsigned char *)__p) >> 5);
  }
  if (__p)
  {
    unint64_t v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_216C8B25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216C8B278(uint64_t a1, __sFILE *a2, uint64_t a3)
{
  ssize_t v4 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 32), a2, (char *)(32 * a3), *(void *)(a1 + 16) + *(void *)(a1 + 8));
  if (v4 != -1) {
    *(void *)(a1 + 16) += v4;
  }
  return v4 != -1;
}

BOOL sub_216C8B2C8(uint64_t a1, int a2, __sFILE *a3)
{
  ssize_t v4 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 24), a3, (char *)8, *(void *)(a1 + 8) + *(void *)a1);
  if (v4 != -1) {
    *(void *)(a1 + 8) += v4;
  }
  return v4 != -1;
}

uint64_t sub_216C8B324(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216C83444(a1 + 8);
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 32));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216C8B3B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

BOOL sub_216C8B3C8(uint64_t a1, void **a2)
{
  unint64_t v16 = 0;
  if (!sub_216C8B2C8(a1 + 8, 0, (__sFILE *)&v16)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    std::string __p = "usd/crateFile.cpp";
    unint64_t v12 = "_Read";
    uint64_t v13 = 1189;
    int v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::TokenIndex]";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_216C838F4(&__p, v16);
  BOOL v7 = sub_216C8B4EC(a1, (__sFILE *)__p, v16);
  BOOL v8 = v7;
  if (&__p != a2 && v7) {
    sub_216825D78((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    unint64_t v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_216C8B4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216C8B4EC(uint64_t a1, __sFILE *a2, uint64_t a3)
{
  ssize_t v4 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 32), a2, (char *)(4 * a3), *(void *)(a1 + 16) + *(void *)(a1 + 8));
  if (v4 != -1) {
    *(void *)(a1 + 16) += v4;
  }
  return v4 != -1;
}

void sub_216C8B53C(uint64_t a1, _DWORD *a2, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *a3)
{
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)std::string __p = 0u;
  sub_216C8B724((uint64_t)v5, a1, a2, a3);
  unint64_t v3 = __p[0];
  __p[0] = 0;
  if (v3) {
    operator delete[](v3);
  }
  ssize_t v4 = v5[0];
  v5[0] = 0;
  if (v4) {
    operator delete[](v4);
  }
}

void sub_216C8B59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_216C8B5B0(uint64_t a1, void **a2)
{
  unint64_t v16 = 0;
  if (!sub_216C8B2C8(a1 + 8, 0, (__sFILE *)&v16)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    std::string __p = "usd/crateFile.cpp";
    unint64_t v12 = "_Read";
    uint64_t v13 = 1189;
    int v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Field]";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_216C83B4C(&__p, v16);
  BOOL v7 = sub_216C8B6D4(a1, (__sFILE *)__p, v16);
  BOOL v8 = v7;
  if (&__p != a2 && v7) {
    sub_216893FD4((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (unsigned char *)__p) >> 4);
  }
  if (__p)
  {
    unint64_t v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_216C8B6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216C8B6D4(uint64_t a1, __sFILE *a2, uint64_t a3)
{
  ssize_t v4 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 32), a2, (char *)(16 * a3), *(void *)(a1 + 16) + *(void *)(a1 + 8));
  if (v4 != -1) {
    *(void *)(a1 + 16) += v4;
  }
  return v4 != -1;
}

BOOL sub_216C8B724(uint64_t a1, uint64_t a2, _DWORD *a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *a4)
{
  sub_216C83E98(a1, a4);
  unint64_t v20 = 0;
  BOOL result = sub_216C8B2C8(a2 + 8, 0, (__sFILE *)&v20);
  if (result)
  {
    uint64_t v10 = *(void *)(a2 + 16);
    uint64_t v9 = *(void *)(a2 + 24);
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v12 = v20;
    if (v11 < (unint64_t)v20) {
      unint64_t v12 = *(char **)(a1 + 8);
    }
    if (v9 - v10 >= (unint64_t)v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = (char *)(v9 - v10);
    }
    unint64_t v20 = v13;
    if (v11 && *(void *)(a1 + 24))
    {
      if ((v10 & 0x8000000000000000) == 0)
      {
        BOOL result = sub_216C6FD88(a2, *(__sFILE **)a1, v13);
        if (result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a1, v20, a3, (int64_t)a4, *(char **)(a1 + 16), v14);
          return 1;
        }
        return result;
      }
      char v15 = "usd/crateFile.cpp";
      unint64_t v16 = "Read";
      uint64_t v17 = 2158;
      long long v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_PreadStream>, Int = unsigned int]";
      char v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      char v15 = "usd/crateFile.cpp";
      unint64_t v16 = "Read";
      uint64_t v17 = 2153;
      long long v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_PreadStream>, Int = unsigned int]";
      char v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

BOOL sub_216C8B864(uint64_t a1, void **a2)
{
  unint64_t v16 = 0;
  if (!sub_216C8B2C8(a1 + 8, 0, (__sFILE *)&v16)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    std::string __p = "usd/crateFile.cpp";
    unint64_t v12 = "_Read";
    uint64_t v13 = 1189;
    int v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::FieldIndex]";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_216C8409C(&__p, v16);
  BOOL v7 = sub_216C8B4EC(a1, (__sFILE *)__p, v16);
  BOOL v8 = v7;
  if (&__p != a2 && v7) {
    sub_216825D78((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    unint64_t v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_216C8B96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C8B988(char *a1, long long *a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t)a2 + 8;
  BOOL v8 = a4 + 1;
  do
  {
    *(void *)&v32[1] = -1;
    if (!sub_216C8C414(v7, 0, (__sFILE *)v32)) {
      break;
    }
    BOOL v9 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4);
    if (v9)
    {
      uint64_t v10 = *((void *)a1 + 15);
      if (v32[2] >= (unint64_t)((*((void *)a1 + 16) - v10) >> 3)
        || v32[1] >= (unint64_t)((uint64_t)(*((void *)a1 + 13) - *((void *)a1 + 12)) >> 3))
      {
        uint64_t v23 = "usd/crateFile.cpp";
        *(void *)&long long v24 = "_ReadPathsImpl";
        uint64_t v21 = 4159;
LABEL_23:
        *((void *)&v24 + 1) = v21;
        *(void *)&long long v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadPathsImpl(Reader, WorkDi"
                          "spatcher &, SdfPath) [Header = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PathItemHeade"
                          "r_0_0_1, Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInter"
                          "nal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>]";
        BYTE8(v25) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid paths header causing OOB access.", a3);
        return;
      }
      unint64_t v11 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v10 + 8 * v32[2]);
      if ((v33 & 4) != 0) {
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v11, (int *)&v23);
      }
      else {
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v11, (int *)&v23);
      }
      char v15 = (int *)(*((void *)a1 + 12) + 8 * v32[1]);
      sub_21697DE94(v15, (int *)&v23);
      sub_21697DEEC(v15 + 1, (int *)&v23 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
      sub_21697C414(&v23);
    }
    else
    {
      unint64_t v12 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
      sub_2169C487C(a4, v12);
      sub_2169C48D4(v8, v12 + 1);
      uint64_t v13 = *((void *)a1 + 12);
      if (v32[1] >= (unint64_t)((*((void *)a1 + 13) - v13) >> 3))
      {
        uint64_t v23 = "usd/crateFile.cpp";
        *(void *)&long long v24 = "_ReadPathsImpl";
        uint64_t v21 = 4152;
        goto LABEL_23;
      }
      int v14 = (int *)(v13 + 8 * v32[1]);
      sub_2169C487C(v14, a4);
      sub_2169C48D4(v14 + 1, v8);
    }
    char v16 = v33;
    if (v33)
    {
      if ((v33 & 2) != 0)
      {
        uint64_t v31 = 0;
        if (!sub_216C8B2C8(v7, 0, (__sFILE *)&v31)) {
          return;
        }
        long long v17 = a2[1];
        long long v24 = *a2;
        long long v25 = v17;
        uint64_t v26 = *((void *)a2 + 4);
        uint64_t v23 = a1;
        uint64_t v27 = v31;
        uint64_t v28 = a3;
        sub_216981010(&v29, a4);
        sub_21698105C(&v30, v8);
        uint64_t v18 = sub_216C8C468(a3, (uint64_t)&v23);
        (***(void (****)(void, uint64_t, uint64_t))(v18 - 40))(*(void *)(v18 - 40), v18, v18 - 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
        sub_21697C414(&v29);
      }
      uint64_t v19 = *((void *)a1 + 12);
      if (v32[1] >= (unint64_t)((*((void *)a1 + 13) - v19) >> 3))
      {
        uint64_t v23 = "usd/crateFile.cpp";
        *(void *)&long long v24 = "_ReadPathsImpl";
        uint64_t v21 = 4195;
        goto LABEL_23;
      }
      unint64_t v20 = (_DWORD *)(v19 + 8 * v32[1]);
      sub_2169C487C(a4, v20);
      sub_2169C48D4(v8, v20 + 1);
    }
  }
  while ((v16 & 3) != 0);
}

void sub_216C8BC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216C8C3DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C8BC6C(char *a1, long long *a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t)a2 + 8;
  BOOL v8 = a4 + 1;
  do
  {
    uint64_t v32 = -1;
    if (!sub_216C8C79C(v7, 0, (__sFILE *)&v32)) {
      break;
    }
    BOOL v9 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4);
    if (v9)
    {
      uint64_t v10 = *((void *)a1 + 15);
      if (HIDWORD(v32) >= (unint64_t)((*((void *)a1 + 16) - v10) >> 3)
        || v32 >= (unint64_t)((uint64_t)(*((void *)a1 + 13) - *((void *)a1 + 12)) >> 3))
      {
        uint64_t v23 = "usd/crateFile.cpp";
        *(void *)&long long v24 = "_ReadPathsImpl";
        uint64_t v21 = 4159;
LABEL_23:
        *((void *)&v24 + 1) = v21;
        *(void *)&long long v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadPathsImpl(Reader, WorkDi"
                          "spatcher &, SdfPath) [Header = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PathItemHeade"
                          "r, Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__a"
                          "apl__pxrReserved__::Usd_CrateFile::_PreadStream>]";
        BYTE8(v25) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid paths header causing OOB access.", a3);
        return;
      }
      unint64_t v11 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v10 + 8 * HIDWORD(v32));
      if ((v33 & 4) != 0) {
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v11, (int *)&v23);
      }
      else {
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v11, (int *)&v23);
      }
      char v15 = (int *)(*((void *)a1 + 12) + 8 * v32);
      sub_21697DE94(v15, (int *)&v23);
      sub_21697DEEC(v15 + 1, (int *)&v23 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
      sub_21697C414(&v23);
    }
    else
    {
      unint64_t v12 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
      sub_2169C487C(a4, v12);
      sub_2169C48D4(v8, v12 + 1);
      uint64_t v13 = *((void *)a1 + 12);
      if (v32 >= (unint64_t)((*((void *)a1 + 13) - v13) >> 3))
      {
        uint64_t v23 = "usd/crateFile.cpp";
        *(void *)&long long v24 = "_ReadPathsImpl";
        uint64_t v21 = 4152;
        goto LABEL_23;
      }
      int v14 = (int *)(v13 + 8 * v32);
      sub_2169C487C(v14, a4);
      sub_2169C48D4(v14 + 1, v8);
    }
    char v16 = v33;
    if (v33)
    {
      if ((v33 & 2) != 0)
      {
        uint64_t v31 = 0;
        if (!sub_216C8B2C8(v7, 0, (__sFILE *)&v31)) {
          return;
        }
        long long v17 = a2[1];
        long long v24 = *a2;
        long long v25 = v17;
        uint64_t v26 = *((void *)a2 + 4);
        uint64_t v23 = a1;
        uint64_t v27 = v31;
        uint64_t v28 = a3;
        sub_216981010(&v29, a4);
        sub_21698105C(&v30, v8);
        uint64_t v18 = sub_216C8C7F0(a3, (uint64_t)&v23);
        (***(void (****)(void, uint64_t, uint64_t))(v18 - 40))(*(void *)(v18 - 40), v18, v18 - 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
        sub_21697C414(&v29);
      }
      uint64_t v19 = *((void *)a1 + 12);
      if (v32 >= (unint64_t)((*((void *)a1 + 13) - v19) >> 3))
      {
        uint64_t v23 = "usd/crateFile.cpp";
        *(void *)&long long v24 = "_ReadPathsImpl";
        uint64_t v21 = 4195;
        goto LABEL_23;
      }
      unint64_t v20 = (_DWORD *)(v19 + 8 * v32);
      sub_2169C487C(a4, v20);
      sub_2169C48D4(v8, v20 + 1);
    }
  }
  while ((v16 & 3) != 0);
}

void sub_216C8BF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216C8C764((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C8BF50(void *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::WorkDispatcher *a3, unint64_t a4)
{
  int v36 = 0;
  unsigned int v37 = 0;
  uint64_t v38 = 0;
  char v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  int v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  int v29 = 0;
  if (sub_216C8B2C8(a2 + 8, 0, (__sFILE *)&v29))
  {
    *(_OWORD *)uint64_t v27 = 0u;
    *(_OWORD *)std::string __p = 0u;
    uint64_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(v29);
    unint64_t DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(v29);
    if (CompressedBufferSize && DecompressionWorkingSpaceSize)
    {
      sub_21681C000((uint64_t)&v36, (unint64_t)v29);
      if (sub_216C8B724((uint64_t)v27, a2, v36, v29))
      {
        uint64_t v10 = v36;
        if (v36 == v37)
        {
          unint64_t v11 = 0;
LABEL_13:
          if (v11 + 1 < a4)
          {
            char v22 = "usd/crateFile.cpp";
            uint64_t v23 = "_ReadCompressedPaths";
            uint64_t v24 = 4253;
            long long v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDisp"
                  "atcher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrI"
                  "nternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>]";
            char v26 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed paths. numPaths = %llu too large for max index = %llu", a4, v11);
          }
          else if ((unint64_t)v29 > a4)
          {
            char v22 = "usd/crateFile.cpp";
            uint64_t v23 = "_ReadCompressedPaths";
            uint64_t v24 = 4259;
            long long v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDisp"
                  "atcher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrI"
                  "nternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>]";
            char v26 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed paths. numEncodedPaths %llu > numPaths = %llu", v29, a4);
          }
          else
          {
            sub_216AF4CFC(a1 + 12, a4);
            uint64_t v13 = (int *)a1[12];
            uint64_t v14 = a1[13];
            char v22 = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v22);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v22 + 1);
            if (v14 - (uint64_t)v13 >= 1)
            {
              unint64_t v15 = ((unint64_t)(v14 - (void)v13) >> 3) + 1;
              do
              {
                sub_2169C487C(v13, &v22);
                sub_2169C48D4(v13 + 1, (_DWORD *)&v22 + 1);
                --v15;
                v13 += 2;
              }
              while (v15 > 1);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
            sub_21697C414(&v22);
            sub_21681C000((uint64_t)&v33, (unint64_t)v29);
            if (sub_216C8CAEC((uint64_t)v27, a2, v33, v29))
            {
              char v16 = v33;
              if (v33 == v34)
              {
LABEL_26:
                sub_21681C000((uint64_t)&v30, (unint64_t)v29);
                if (sub_216C8CAEC((uint64_t)v27, a2, v30, v29))
                {
                  uint64_t v21 = 0;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v21);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v21 + 1);
                  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BuildDecompressedPathsImpl(a1, &v36, &v33, &v30, 0, (int *)&v21, (uint64_t)a3);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
                  sub_21697C414(&v21);
                  pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait(a3);
                }
              }
              else
              {
                unint64_t v17 = (uint64_t)(a1[16] - a1[15]) >> 3;
                while (1)
                {
                  LODWORD(v18) = *v16;
                  unint64_t v18 = (int)*v16 >= 0 ? v18 : -(int)v18;
                  if (v17 <= v18) {
                    break;
                  }
                  if (++v16 == v34) {
                    goto LABEL_26;
                  }
                }
                char v22 = "usd/crateFile.cpp";
                uint64_t v23 = "_ReadCompressedPaths";
                uint64_t v24 = 4280;
                long long v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, Work"
                      "Dispatcher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Rea"
                      "der<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>]";
                char v26 = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt path element token index in crate file (%d >= %zu)", v18, v17);
              }
            }
          }
        }
        else
        {
          unint64_t v11 = 0;
          while (1)
          {
            unint64_t v12 = *v10;
            if (v12 >= a4) {
              break;
            }
            if (v11 <= v12) {
              unint64_t v11 = *v10;
            }
            if (++v10 == v37) {
              goto LABEL_13;
            }
          }
          char v22 = "usd/crateFile.cpp";
          uint64_t v23 = "_ReadCompressedPaths";
          uint64_t v24 = 4243;
          long long v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDispat"
                "cher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInter"
                "nal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>]";
          char v26 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt path index in crate file (%u >= %zu)", v12, a4);
        }
      }
    }
    else
    {
      char v22 = "usd/crateFile.cpp";
      uint64_t v23 = "_ReadCompressedPaths";
      uint64_t v24 = 4230;
      long long v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDispatcher"
            " &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aap"
            "l__pxrReserved__::Usd_CrateFile::_PreadStream>]";
      char v26 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed paths of size %llu", v29);
    }
    uint64_t v19 = __p[0];
    __p[0] = 0;
    if (v19) {
      operator delete[](v19);
    }
    unint64_t v20 = v27[0];
    v27[0] = 0;
    if (v20) {
      operator delete[](v20);
    }
    if (v30)
    {
      uint64_t v31 = v30;
      operator delete(v30);
    }
  }
  if (v33)
  {
    uint64_t v34 = v33;
    operator delete(v33);
  }
  if (v36)
  {
    unsigned int v37 = v36;
    operator delete(v36);
  }
}

void sub_216C8C35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  sub_216C83E54((uint64_t)&a17);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  long long v25 = *(void **)(v23 - 96);
  if (v25)
  {
    *(void *)(v23 - 88) = v25;
    operator delete(v25);
  }
  char v26 = *(void **)(v23 - 72);
  if (v26)
  {
    *(void *)(v23 - 64) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216C8C3DC(uint64_t a1)
{
  return a1;
}

BOOL sub_216C8C414(uint64_t a1, int a2, __sFILE *a3)
{
  ssize_t v4 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 24), a3, (char *)0x10, *(void *)(a1 + 8) + *(void *)a1);
  if (v4 != -1) {
    *(void *)(a1 + 8) += v4;
  }
  return v4 != -1;
}

uint64_t sub_216C8C468(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 256);
  v10[0] = 0;
  v10[1] = v4;
  uint64_t v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v10, 0x58uLL);
  *(unsigned char *)(v5 - 11) = 1;
  *(void *)uint64_t v5 = &unk_26C75F478;
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 56) = v7;
  *(_OWORD *)(v5 + 40) = v6;
  *(_OWORD *)(v5 + 24) = v8;
  sub_21697D878((_DWORD *)(v5 + 72), (_DWORD *)(a2 + 64));
  sub_21697D8B4((_DWORD *)(v5 + 76), (_DWORD *)(a2 + 68));
  *(void *)(v5 + 80) = a1 + 264;
  return v5;
}

uint64_t sub_216C8C514(uint64_t a1)
{
  *(void *)a1 = &unk_26C75F478;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 76));
  sub_21697C414((_DWORD *)(a1 + 72));
  return a1;
}

void sub_216C8C564(_DWORD *a1)
{
  *(void *)a1 = &unk_26C75F478;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 19);
  sub_21697C414(a1 + 18);

  operator delete(a1);
}

uint64_t sub_216C8C5C4(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216C8C668(a1 + 8);
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 80));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216C8C654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C8C668(uint64_t a1)
{
  unint64_t v2 = *(char **)a1;
  sub_216C84FD8((uint64_t)&v13, "Usd", "Usd_CrateDataImpl::Open", "Usd_CrateFile::CrateFile::Open", "_ReadPaths");
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 24) = *(void *)(a1 + 48);
  long long v4 = *(_OWORD *)(a1 + 8);
  uint64_t v12 = v3;
  long long v5 = *(_OWORD *)(a1 + 24);
  v11[0] = v4;
  v11[1] = v5;
  uint64_t v6 = *(void *)(a1 + 56);
  sub_216981010(&v9, (_DWORD *)(a1 + 64));
  sub_21698105C(&v10, (_DWORD *)(a1 + 68));
  sub_216C8B988(v2, v11, v6, &v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  for (uint64_t result = (uint64_t)sub_21697C414(&v9); v14--; uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v13))
    ;
  return result;
}

void sub_216C8C744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  sub_21684E6B8(v2 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_216C8C764(uint64_t a1)
{
  return a1;
}

BOOL sub_216C8C79C(uint64_t a1, int a2, __sFILE *a3)
{
  ssize_t v4 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 24), a3, (char *)0xC, *(void *)(a1 + 8) + *(void *)a1);
  if (v4 != -1) {
    *(void *)(a1 + 8) += v4;
  }
  return v4 != -1;
}

uint64_t sub_216C8C7F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 256);
  v10[0] = 0;
  v10[1] = v4;
  uint64_t v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v10, 0x58uLL);
  *(unsigned char *)(v5 - 11) = 1;
  *(void *)uint64_t v5 = &unk_26C75F4C0;
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 56) = v7;
  *(_OWORD *)(v5 + 40) = v6;
  *(_OWORD *)(v5 + 24) = v8;
  sub_21697D878((_DWORD *)(v5 + 72), (_DWORD *)(a2 + 64));
  sub_21697D8B4((_DWORD *)(v5 + 76), (_DWORD *)(a2 + 68));
  *(void *)(v5 + 80) = a1 + 264;
  return v5;
}

uint64_t sub_216C8C89C(uint64_t a1)
{
  *(void *)a1 = &unk_26C75F4C0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 76));
  sub_21697C414((_DWORD *)(a1 + 72));
  return a1;
}

void sub_216C8C8EC(_DWORD *a1)
{
  *(void *)a1 = &unk_26C75F4C0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 19);
  sub_21697C414(a1 + 18);

  operator delete(a1);
}

uint64_t sub_216C8C94C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216C8C9F0(a1 + 8);
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 80));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216C8C9DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C8C9F0(uint64_t a1)
{
  unint64_t v2 = *(char **)a1;
  sub_216C84FD8((uint64_t)&v13, "Usd", "Usd_CrateDataImpl::Open", "Usd_CrateFile::CrateFile::Open", "_ReadPaths");
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 24) = *(void *)(a1 + 48);
  long long v4 = *(_OWORD *)(a1 + 8);
  uint64_t v12 = v3;
  long long v5 = *(_OWORD *)(a1 + 24);
  v11[0] = v4;
  v11[1] = v5;
  uint64_t v6 = *(void *)(a1 + 56);
  sub_216981010(&v9, (_DWORD *)(a1 + 64));
  sub_21698105C(&v10, (_DWORD *)(a1 + 68));
  sub_216C8BC6C(v2, v11, v6, &v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  for (uint64_t result = (uint64_t)sub_21697C414(&v9); v14--; uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v13))
    ;
  return result;
}

void sub_216C8CACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  sub_21684E6B8(v2 - 48);
  _Unwind_Resume(a1);
}

BOOL sub_216C8CAEC(uint64_t a1, uint64_t a2, _DWORD *a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *a4)
{
  sub_216C83E98(a1, a4);
  unint64_t v20 = 0;
  BOOL result = sub_216C8B2C8(a2 + 8, 0, (__sFILE *)&v20);
  if (result)
  {
    uint64_t v10 = *(void *)(a2 + 16);
    uint64_t v9 = *(void *)(a2 + 24);
    unint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = v20;
    if (v11 < (unint64_t)v20) {
      uint64_t v12 = *(char **)(a1 + 8);
    }
    if (v9 - v10 >= (unint64_t)v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = (char *)(v9 - v10);
    }
    unint64_t v20 = v13;
    if (v11 && *(void *)(a1 + 24))
    {
      if ((v10 & 0x8000000000000000) == 0)
      {
        BOOL result = sub_216C6FD88(a2, *(__sFILE **)a1, v13);
        if (result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a1, v20, a3, (int64_t)a4, *(char **)(a1 + 16), v14);
          return 1;
        }
        return result;
      }
      unint64_t v15 = "usd/crateFile.cpp";
      char v16 = "Read";
      uint64_t v17 = 2158;
      unint64_t v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_PreadStream>, Int = int]";
      char v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      unint64_t v15 = "usd/crateFile.cpp";
      char v16 = "Read";
      uint64_t v17 = 2153;
      unint64_t v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_PreadStream>, Int = int]";
      char v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

BOOL sub_216C8CC2C(uint64_t a1, void **a2)
{
  unint64_t v16 = 0;
  if (!sub_216C8B2C8(a1 + 8, 0, (__sFILE *)&v16)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    std::string __p = "usd/crateFile.cpp";
    uint64_t v12 = "_Read";
    uint64_t v13 = 1189;
    int v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Spec_0_0_1]";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_216C856D0(&__p, v16);
  BOOL v7 = sub_216C8B6D4(a1, (__sFILE *)__p, v16);
  BOOL v8 = v7;
  if (&__p != a2 && v7) {
    sub_216893FD4((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (unsigned char *)__p) >> 4);
  }
  if (__p)
  {
    uint64_t v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_216C8CD34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216C8CD50(uint64_t a1, void **a2)
{
  unint64_t v16 = 0;
  if (!sub_216C8B2C8(a1 + 8, 0, (__sFILE *)&v16)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    std::string __p = "usd/crateFile.cpp";
    uint64_t v12 = "_Read";
    uint64_t v13 = 1189;
    int v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Spec]";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_216C859FC(&__p, v16);
  BOOL v7 = sub_216C8CE80(a1, (__sFILE *)__p, v16);
  BOOL v8 = v7;
  if (&__p != a2 && v7) {
    sub_216C85A78((char *)a2, (char *)__p, (uint64_t)v12, 0xAAAAAAAAAAAAAAABLL * ((v12 - (unsigned char *)__p) >> 2));
  }
  if (__p)
  {
    uint64_t v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_216C8CE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216C8CE80(uint64_t a1, __sFILE *a2, uint64_t a3)
{
  ssize_t v4 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 32), a2, (char *)(12 * a3), *(void *)(a1 + 16) + *(void *)(a1 + 8));
  if (v4 != -1) {
    *(void *)(a1 + 16) += v4;
  }
  return v4 != -1;
}

void sub_216C8CED4(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)(a1 + 24) = *(void *)(a2 + 16);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v5 = 0;
  if (sub_216C8F2D8(a1, __p))
  {
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(void *)(a3 + 16) = v5;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_216C8CF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C8CF64(uint64_t a1, uint64_t a2, char *a3)
{
  v57[9] = *MEMORY[0x263EF8340];
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    unint64_t v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadTokens", 0, a3);
    BOOL v7 = v6 != 0;
  }
  else
  {
    unint64_t v6 = 0;
    BOOL v7 = 0;
  }
  char v49 = v6;
  int v50 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "TOKENS");
  if (Section)
  {
    uint64_t v9 = (void *)(a2 + 8);
    uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8));
    uint64_t v11 = *((void *)Section + 2);
    if (v10 > v11 && (v11 & 0x8000000000000000) == 0)
    {
      *(void *)(a2 + 24) = v11;
      size_t v48 = 0;
      if ((sub_216C804FC((void *)(a2 + 8), (uint64_t)&v48, 8uLL) & 1) == 0) {
        goto LABEL_47;
      }
      std::string __p = 0;
      if (((*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8)) > 0x3FFu)
      {
        size_t __sz = 0;
        if ((sub_216C804FC((void *)(a2 + 8), (uint64_t)&__sz, 8uLL) & 1) == 0) {
          goto LABEL_46;
        }
        unint64_t v46 = 0;
        if ((sub_216C804FC((void *)(a2 + 8), (uint64_t)&v46, 8uLL) & 1) == 0) {
          goto LABEL_46;
        }
        if (!__sz || !v46)
        {
          long long v51 = "usd/crateFile.cpp";
          unint64_t v52 = "_ReadTokens";
          uint64_t v53 = 4008;
          unint64_t v54 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrIntern"
                "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                "le::_AssetStream>]";
          char v55 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file corrupt, tokens section is empty");
          goto LABEL_46;
        }
        uint64_t v28 = (*(uint64_t (**)(void))(*(void *)*v9 + 16))();
        uint64_t v29 = *(void *)(a2 + 24);
        unint64_t v30 = v28 - v29;
        uint64_t v31 = v46;
        if (v29 < 0 || (v30 & 0x8000000000000000) != 0 || (unint64_t)v46 > v30)
        {
          long long v51 = "usd/crateFile.cpp";
          unint64_t v52 = "_ReadTokens";
          uint64_t v53 = 4014;
          unint64_t v54 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrIntern"
                "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                "le::_AssetStream>]";
          char v55 = 0;
          uint64_t v40 = (*(uint64_t (**)(void))(*(void *)*v9 + 16))();
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens size %llu with remaining file size is %lld of %lld", v31, v30, v40);
          goto LABEL_46;
        }
        unint64_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::TfFastCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::TfFastCompression *)__sz);
        char v33 = v46;
        if (!CompressedBufferSize || CompressedBufferSize < (unint64_t)v46)
        {
          long long v51 = "usd/crateFile.cpp";
          unint64_t v52 = "_ReadTokens";
          uint64_t v53 = 4021;
          unint64_t v54 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrIntern"
                "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                "le::_AssetStream>]";
          char v55 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens. Corrupt compression data. Compressed size %llu, uncompressed size %llu", v46, __sz);
          goto LABEL_46;
        }
        size_t v34 = __sz;
        unint64_t v16 = (char *)operator new[](__sz);
        std::string __p = v16;
        uint64_t v35 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[]((size_t)v33);
        sub_216C804FC(v9, (uint64_t)v35, (unint64_t)v33);
        pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(v35, v16, v46, __sz);
        uint64_t v17 = &v16[v34];
        size_t v18 = __sz;
        operator delete[](v35);
      }
      else
      {
        size_t __sz = 0;
        if ((sub_216C804FC((void *)(a2 + 8), (uint64_t)&__sz, 8uLL) & 1) == 0) {
          goto LABEL_46;
        }
        uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*v9 + 16))();
        uint64_t v13 = *(void *)(a2 + 24);
        size_t v14 = v12 - v13;
        size_t v15 = __sz;
        if (v13 < 0 || (v14 & 0x8000000000000000) != 0 || __sz > v14)
        {
          long long v51 = "usd/crateFile.cpp";
          unint64_t v52 = "_ReadTokens";
          uint64_t v53 = 3992;
          unint64_t v54 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrIntern"
                "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                "le::_AssetStream>]";
          char v55 = 0;
          uint64_t v39 = (*(uint64_t (**)(void))(*(void *)*v9 + 16))();
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens size %llu with remaining file size being %lld of %lld", v15, v14, v39);
          goto LABEL_46;
        }
        unint64_t v16 = (char *)operator new[](__sz);
        std::string __p = v16;
        sub_216C804FC(v9, (uint64_t)v16, v15);
        uint64_t v17 = &v16[v15];
        size_t v18 = __sz;
      }
      if (v16 != v17 && *(v17 - 1))
      {
        long long v51 = "usd/crateFile.cpp";
        unint64_t v52 = "_ReadTokens";
        uint64_t v53 = 4036;
        unint64_t v54 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrInternal"
              "__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
        char v55 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 3, (pxrInternal__aapl__pxrReserved__ *)"Tokens section not null-terminated in crate file");
        *(v17 - 1) = 0;
      }
      unint64_t v19 = v48;
      if (v48 - 1 >= v18)
      {
        long long v51 = "usd/crateFile.cpp";
        unint64_t v52 = "_ReadTokens";
        uint64_t v53 = 4046;
        unint64_t v54 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrInternal"
              "__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
        char v55 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens. Corrupt data. Data size %llu, num tokens %llu", v18, v48);
        std::string __p = 0;
      }
      else
      {
        uint64_t v20 = *(void *)(a1 + 120);
        uint64_t v21 = *(void *)(a1 + 128);
        uint64_t v22 = a1 + 120;
        if (v21 != v20)
        {
          do
          {
            uint64_t v24 = *(void *)(v21 - 8);
            v21 -= 8;
            uint64_t v23 = v24;
            if ((v24 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
          while (v21 != v20);
          unint64_t v19 = v48;
        }
        *(void *)(a1 + 128) = v20;
        sub_216A9C5B8(a1 + 120, v19);
        v16[v18 - 1] = 0;
        pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v51);
        uint64_t v25 = 0;
        if (v16 < v17 && v48)
        {
          uint64_t v25 = 0;
          char v26 = __p;
          while (v16 - v26 < v18)
          {
            size_t __sz = 0;
            int v42 = v56;
            uint64_t v27 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&__sz, 0x28uLL);
            *((unsigned char *)v27 - 11) = 1;
            void *v27 = &unk_26C75F508;
            v27[1] = v22;
            v27[2] = v25;
            v27[3] = v16;
            void v27[4] = v57;
            (**(void (***)(void))*(v27 - 5))();
            v16 += strlen(v16) + 1;
            ++v25;
            if (v16 >= v17 || v25 == v48) {
              goto LABEL_29;
            }
          }
          size_t __sz = (size_t)"usd/crateFile.cpp";
          int v42 = "_ReadTokens";
          uint64_t v43 = 4079;
          long long v44 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrIntern"
                "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                "le::_AssetStream>]";
          char v45 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__sz, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed read tokens, buffer overflow.");
        }
        else
        {
LABEL_29:
          pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v51);
          if (v25 != v48)
          {
            size_t __sz = (size_t)"usd/crateFile.cpp";
            int v42 = "_ReadTokens";
            uint64_t v43 = 4089;
            long long v44 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrInte"
                  "rnal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Cra"
                  "teFile::_AssetStream>]";
            char v45 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__sz, 3, (pxrInternal__aapl__pxrReserved__ *)"Crate file claims %zu tokens, found %zu", v48, v25);
          }
          sub_216C83328((pxrInternal__aapl__pxrReserved__ *)&__p);
        }
        pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v51);
        unint64_t v16 = (char *)__p;
        std::string __p = 0;
        if (!v16) {
          goto LABEL_46;
        }
      }
      operator delete[](v16);
LABEL_46:
      BOOL v7 = v50;
      goto LABEL_47;
    }
    long long v51 = "usd/crateFile.cpp";
    unint64_t v52 = "_ReadTokens";
    uint64_t v53 = 3966;
    unint64_t v54 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrInternal__aa"
          "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
    char v55 = 0;
    uint64_t v38 = (*(uint64_t (**)(void))(*(void *)*v9 + 16))();
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file corrupt, tokens section is possibly truncatedat offset %lld but file size is %lld", v11, v38);
  }
LABEL_47:
  int v50 = v7 - 1;
  if (v7)
  {
    uint64_t v36 = (uint64_t)v49;
    int v37 = v7 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v36);
      int v50 = v37--;
    }
    while (v37 != -2);
  }
}

void sub_216C8D6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, char a20,uint64_t a21,char a22)
{
  if (__p) {
    operator delete[](__p);
  }
  sub_21684E6B8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_216C8D768(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    unint64_t v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadStrings", 0, a3);
    BOOL v7 = v6 != 0;
  }
  else
  {
    unint64_t v6 = 0;
    BOOL v7 = 0;
  }
  uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "STRINGS");
  if (result)
  {
    *(void *)(a2 + 24) = *(void *)(result + 16);
    uint64_t result = sub_216C8F504(a2, (void **)(a1 + 144));
  }
  if (v7) {
    return pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v6);
  }
  return result;
}

void sub_216C8D81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216C8D830(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    unint64_t v6 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadFields", 0, a3);
    BOOL v7 = v6 != 0;
  }
  else
  {
    unint64_t v6 = 0;
    BOOL v7 = 0;
  }
  v35[1] = v6;
  unsigned int v36 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "FIELDS");
  if (!Section) {
    goto LABEL_32;
  }
  *(void *)(a2 + 24) = *((void *)Section + 2);
  if (((*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8)) <= 0x3FFu)
  {
    sub_216C8F6F8(a2, (void **)(a1 + 48));
    goto LABEL_32;
  }
  v35[0] = 0;
  uint64_t v9 = (void *)(a2 + 8);
  if (sub_216C804FC((void *)(a2 + 8), (uint64_t)v35, 8uLL))
  {
    uint64_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(v35[0]);
    unint64_t DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(v35[0]);
    if (CompressedBufferSize && DecompressionWorkingSpaceSize)
    {
      uint64_t v12 = (void *)(a1 + 48);
      sub_216C83970((uint64_t)v12, (unint64_t)v35[0]);
      sub_2167813E0(&v30, (unint64_t)v35[0]);
      *(_OWORD *)uint64_t v32 = 0u;
      *(_OWORD *)std::string __p = 0u;
      int v13 = sub_216C8F878((uint64_t)v32, a2, v30, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((v31 - (unsigned char *)v30) >> 2));
      size_t v14 = __p[0];
      __p[0] = 0;
      if (v14) {
        operator delete[](v14);
      }
      size_t v15 = v32[0];
      v32[0] = 0;
      if (v15) {
        operator delete[](v15);
      }
      if (!v13) {
        goto LABEL_30;
      }
      unint64_t v16 = v35[0];
      if (v35[0])
      {
        uint64_t v17 = (int *)v30;
        size_t v18 = (_DWORD *)(*v12 + 4);
        do
        {
          int v19 = *v17++;
          _DWORD *v18 = v19;
          v18 += 4;
          unint64_t v16 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v16 - 1);
        }
        while (v16);
      }
      size_t __sz = 0;
      if ((sub_216C804FC((void *)(a2 + 8), (uint64_t)&__sz, 8uLL) & 1) == 0) {
        goto LABEL_30;
      }
      uint64_t v20 = (*(uint64_t (**)(void))(*(void *)*v9 + 16))();
      uint64_t v21 = *(void *)(a2 + 24);
      size_t v22 = v20 - v21;
      size_t v23 = __sz;
      if (v21 < 0 || (v22 & 0x8000000000000000) != 0 || __sz > v22)
      {
        v32[0] = "usd/crateFile.cpp";
        v32[1] = "_ReadFields";
        __p[0] = (void *)3739;
        __p[1] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadFields(Reader) [Reader = pxrInter"
                 "nal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Crate"
                 "File::_AssetStream>]";
        char v34 = 0;
        uint64_t v28 = (*(uint64_t (**)(void))(*(void *)*v9 + 16))();
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v32, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fields of size %llu with remaining file size is %lld of %lld", v23, v22, v28);
LABEL_30:
        if (v30)
        {
          uint64_t v31 = v30;
          operator delete(v30);
        }
        goto LABEL_32;
      }
      uint64_t v24 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[](__sz);
      if (sub_216C804FC(v9, (uint64_t)v24, v23))
      {
        v32[0] = 0;
        v32[1] = 0;
        __p[0] = 0;
        sub_21679A004((uint64_t)v32, (unint64_t)v35[0]);
        pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(v24, (char *)v32[0], (char *)__sz, (char *)v32[1] - (char *)v32[0]);
        uint64_t v25 = v32[0];
        if (v35[0])
        {
          char v26 = 0;
          uint64_t v27 = (void *)(*v12 + 8);
          do
          {
            void *v27 = v25[(void)v26];
            v27 += 2;
            char v26 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v26 + 1);
          }
          while (v26 != v35[0]);
          goto LABEL_28;
        }
        if (v32[0])
        {
LABEL_28:
          v32[1] = v25;
          operator delete(v25);
        }
      }
      operator delete[](v24);
      goto LABEL_30;
    }
    if (v35[0])
    {
      v32[0] = "usd/crateFile.cpp";
      v32[1] = "_ReadFields";
      __p[0] = (void *)3720;
      __p[1] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadFields(Reader) [Reader = pxrInterna"
               "l__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
               "::_AssetStream>]";
      char v34 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v32, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed read compressed fields of size %llu.", v35[0]);
    }
  }
LABEL_32:
  unsigned int v36 = v7 - 1;
  if (v7)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v6);
    unsigned int v36 = v7 | 0xFFFFFFFE;
  }
}

void sub_216C8DB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  sub_21684E6B8(v18 - 64);
  _Unwind_Resume(a1);
}

void sub_216C8DC1C(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    unint64_t v6 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadFieldSets", 0, a3);
    BOOL v7 = v6 != 0;
  }
  else
  {
    unint64_t v6 = 0;
    BOOL v7 = 0;
  }
  v23[1] = v6;
  int v24 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "FIELDSETS");
  if (!Section) {
    goto LABEL_27;
  }
  *(void *)(a2 + 24) = *((void *)Section + 2);
  if (((*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8)) > 0x3FFu)
  {
    v23[0] = 0;
    if ((sub_216C804FC((void *)(a2 + 8), (uint64_t)v23, 8uLL) & 1) == 0) {
      goto LABEL_27;
    }
    uint64_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(v23[0]);
    unint64_t DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(v23[0]);
    if (!CompressedBufferSize || !DecompressionWorkingSpaceSize)
    {
      v20[0] = "usd/crateFile.cpp";
      v20[1] = "_ReadFieldSets";
      __p[0] = (void *)3679;
      __p[1] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadFieldSets(Reader) [Reader = pxrInte"
               "rnal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateF"
               "ile::_AssetStream>]";
      char v22 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed fieldSets of size %llu", v23[0]);
      goto LABEL_27;
    }
    sub_216C83F34(a1 + 72, (unint64_t)v23[0]);
    sub_2167813E0(v19, (unint64_t)v23[0]);
    *(_OWORD *)uint64_t v20 = 0u;
    *(_OWORD *)std::string __p = 0u;
    char v12 = sub_216C8F878((uint64_t)v20, a2, (_DWORD *)v19[0], v23[0]);
    int v13 = __p[0];
    __p[0] = 0;
    if (v13) {
      operator delete[](v13);
    }
    size_t v14 = v20[0];
    v20[0] = 0;
    if (v14) {
      operator delete[](v14);
    }
    if (v12)
    {
      size_t v15 = v23[0];
      unint64_t v16 = v19[0];
      if (v23[0])
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 72);
        do
        {
          *(_DWORD *)(v18 + 4 * (void)v17) = v16[(void)v17];
          uint64_t v17 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v17 + 1);
        }
        while (v15 != v17);
LABEL_25:
        v19[1] = v16;
        operator delete(v16);
LABEL_26:
        if ((v12 & 1) == 0) {
          goto LABEL_27;
        }
        goto LABEL_7;
      }
    }
    else
    {
      unint64_t v16 = v19[0];
    }
    if (!v16) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if ((sub_216C8FA18(a2, (void **)(a1 + 72)) & 1) == 0) {
    goto LABEL_27;
  }
LABEL_7:
  uint64_t v9 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 72) != v9 && *(_DWORD *)(v9 - 4) != -1)
  {
    v20[0] = "usd/crateFile.cpp";
    v20[1] = "_ReadFieldSets";
    __p[0] = (void *)3693;
    __p[1] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadFieldSets(Reader) [Reader = pxrIntern"
             "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt field sets in crate file");
    *(_DWORD *)(*(void *)(a1 + 80) - 4) = -1;
  }
LABEL_27:
  int v24 = v7 - 1;
  if (v7) {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v6);
  }
}

void sub_216C8DE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  sub_216C83E54((uint64_t)&a13);
  if (__p) {
    operator delete(__p);
  }
  sub_21684E6B8(v13 - 64);
  _Unwind_Resume(a1);
}

void sub_216C8DED8(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    unint64_t v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadPaths", 0, a3);
    BOOL v7 = v6 != 0;
  }
  else
  {
    unint64_t v6 = 0;
    BOOL v7 = 0;
  }
  unsigned int v36 = v6;
  int v37 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "PATHS");
  if (Section)
  {
    *(void *)(a2 + 24) = *((void *)Section + 2);
    unint64_t v35 = 0;
    if (sub_216C804FC((void *)(a2 + 8), (uint64_t)&v35, 8uLL))
    {
      pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v38);
      unsigned int v9 = (*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8) | *(unsigned __int8 *)(a1 + 6370);
      if (v9 == 1)
      {
        sub_216AF4CFC((uint64_t *)(a1 + 96), v35);
        uint64_t v10 = *(int **)(a1 + 96);
        uint64_t v11 = *(void *)(a1 + 104);
        v29[0] = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v29);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v29 + 1);
        if (v11 - (uint64_t)v10 >= 1)
        {
          unint64_t v12 = ((unint64_t)(v11 - (void)v10) >> 3) + 1;
          do
          {
            sub_2169C487C(v10, v29);
            sub_2169C48D4(v10 + 1, (_DWORD *)v29 + 1);
            --v12;
            v10 += 2;
          }
          while (v12 > 1);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v29 + 1);
        sub_21697C414(v29);
        long long v32 = *(_OWORD *)a2;
        uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
        char v33 = v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v34 = *(void *)(a2 + 24);
        uint64_t v31 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v31);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v31 + 1);
        sub_216C8FB98((char *)a1, &v32, (uint64_t)v38, (int *)&v31);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
        sub_21697C414(&v31);
        size_t v14 = v33;
        if (!v33) {
          goto LABEL_27;
        }
      }
      else if (v9 > 0x3FF)
      {
        long long v22 = *(_OWORD *)a2;
        int v19 = *(std::__shared_weak_count **)(a2 + 16);
        size_t v23 = v19;
        if (v19) {
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v24 = *(void *)(a2 + 24);
        sub_216C901E0((void *)a1, (uint64_t)&v22, (pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v38, v35);
        size_t v14 = v23;
        if (!v23) {
          goto LABEL_27;
        }
      }
      else
      {
        if (v35 > (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 16))() - *(void *)(a2 + 24))
        {
          v29[0] = "usd/crateFile.cpp";
          v29[1] = "_ReadPaths";
          v29[2] = 4126;
          v29[3] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadPaths(Reader) [Reader = pxrInte"
                   "rnal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Cr"
                   "ateFile::_AssetStream>]";
          char v30 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v29, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid number of paths in file.");
          goto LABEL_27;
        }
        sub_216AF4CFC((uint64_t *)(a1 + 96), v35);
        size_t v15 = *(int **)(a1 + 96);
        uint64_t v16 = *(void *)(a1 + 104);
        v29[0] = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v29);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v29 + 1);
        if (v16 - (uint64_t)v15 >= 1)
        {
          unint64_t v17 = ((unint64_t)(v16 - (void)v15) >> 3) + 1;
          do
          {
            sub_2169C487C(v15, v29);
            sub_2169C48D4(v15 + 1, (_DWORD *)v29 + 1);
            --v17;
            v15 += 2;
          }
          while (v17 > 1);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v29 + 1);
        sub_21697C414(v29);
        long long v26 = *(_OWORD *)a2;
        uint64_t v18 = *(std::__shared_weak_count **)(a2 + 16);
        uint64_t v27 = v18;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v28 = *(void *)(a2 + 24);
        uint64_t v25 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v25);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v25 + 1);
        sub_216C8FEBC((char *)a1, &v26, (uint64_t)v38, (int *)&v25);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
        sub_21697C414(&v25);
        size_t v14 = v27;
        if (!v27) {
          goto LABEL_27;
        }
      }
      sub_216784EC4(v14);
LABEL_27:
      pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v38);
      BOOL v7 = v37;
    }
  }
  int v37 = v7 - 1;
  if (v7)
  {
    uint64_t v20 = (uint64_t)v36;
    int v21 = v7 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v20);
      int v37 = v21--;
    }
    while (v21 != -2);
  }
}

void sub_216C8E2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
}

void sub_216C8E380(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    unint64_t v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadSpecs", 0, a3);
    BOOL v7 = v6 != 0;
  }
  else
  {
    unint64_t v6 = 0;
    BOOL v7 = 0;
  }
  v127 = v6;
  int v128 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "SPECS");
  if (Section)
  {
    *(void *)(a2 + 24) = *((void *)Section + 2);
    unsigned int v9 = (*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8) | *(unsigned __int8 *)(a1 + 6370);
    if (v9 == 1)
    {
      std::string __p = 0;
      int v123 = 0;
      uint64_t v124 = 0;
      if ((sub_216C90EF4(a2, &__p) & 1) == 0)
      {
        if (__p)
        {
          int v123 = (const char *)__p;
          operator delete(__p);
        }
        goto LABEL_146;
      }
      sub_216C8555C(a1, (v123 - (unsigned char *)__p) >> 4);
      uint64_t v10 = (char *)__p;
      uint64_t v11 = v123;
      if (__p != v123)
      {
        unint64_t v12 = *(_DWORD **)a1;
        do
        {
          int v13 = *((_DWORD *)v10 + 3);
          *(void *)unint64_t v12 = *(void *)(v10 + 4);
          v12[2] = v13;
          v10 += 16;
          v12 += 3;
        }
        while (v10 != v11);
        uint64_t v10 = (char *)__p;
      }
      if (v10)
      {
        int v123 = v10;
        operator delete(v10);
      }
      goto LABEL_15;
    }
    if (v9 <= 0x3FF)
    {
      if ((sub_216C91074(a2, (void **)a1) & 1) == 0) {
        goto LABEL_146;
      }
      goto LABEL_15;
    }
    uint64_t v119 = 0;
    BOOL v66 = (void *)(a2 + 8);
    if ((sub_216C804FC((void *)(a2 + 8), (uint64_t)&v119, 8uLL) & 1) == 0) {
      goto LABEL_146;
    }
    size_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(v119);
    unint64_t DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(v119);
    if (!CompressedBufferSize || (size_t v69 = DecompressionWorkingSpaceSize) == 0)
    {
      std::string __p = "usd/crateFile.cpp";
      int v123 = "_ReadSpecs";
      uint64_t v124 = 3784;
      v125 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrInternal__"
             "aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
      char v126 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read specs of size %llu", v119);
      goto LABEL_146;
    }
    v118.__r_.__value_.__r.__words[0] = 0;
    if ((sub_216C804FC((void *)(a2 + 8), (uint64_t)&v118, 8uLL) & 1) == 0) {
      goto LABEL_146;
    }
    uint64_t v70 = (*(uint64_t (**)(void))(*(void *)*v66 + 16))();
    uint64_t v71 = *(void *)(a2 + 24);
    std::string::size_type v72 = v70 - v71;
    unint64_t v73 = v118.__r_.__value_.__r.__words[0];
    if (v71 < 0 || (v72 & 0x8000000000000000) != 0 || v118.__r_.__value_.__r.__words[0] > v72)
    {
      std::string __p = "usd/crateFile.cpp";
      int v123 = "_ReadSpecs";
      uint64_t v124 = 3795;
      v125 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrInternal__"
             "aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
      char v126 = 0;
      uint64_t v109 = (*(uint64_t (**)(void))(*(void *)*v66 + 16))();
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fields of size %llu with remaining file size is %lld of %lld", v73, v72, v109);
      goto LABEL_146;
    }
    uint64_t v74 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)operator new[](CompressedBufferSize);
    uint64_t v75 = (char *)operator new[](v69);
    v129 = 0;
    v130 = 0;
    uint64_t v131 = 0;
    if (v73 - 1 >= CompressedBufferSize)
    {
      std::string __p = "usd/crateFile.cpp";
      int v123 = "_ReadSpecs";
      uint64_t v124 = 3817;
      v125 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrInternal__"
             "aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
      char v126 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read pathIndexes, size > compressedBufferSize.");
    }
    else
    {
      sub_216C804FC((void *)(a2 + 8), (uint64_t)v74, v73);
      sub_21681C000((uint64_t)&v129, (unint64_t)v119);
      pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer(v74, v118.__r_.__value_.__l.__data_, v129, (int64_t)v119, v75, v76);
      sub_216C8555C(a1, (unint64_t)v119);
      int v77 = v119;
      if (v119)
      {
        int v78 = v129;
        int v79 = *(_DWORD **)a1;
        do
        {
          int v80 = *(_DWORD *)v78;
          int v78 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)((char *)v78 + 4);
          *int v79 = v80;
          v79 += 3;
          int v77 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v77 - 1);
        }
        while (v77);
      }
      v116[0] = 0;
      if (sub_216C804FC((void *)(a2 + 8), (uint64_t)v116, 8uLL))
      {
        uint64_t v81 = (*(uint64_t (**)(void))(*(void *)*v66 + 16))();
        uint64_t v82 = *(void *)(a2 + 24);
        size_t v83 = (char *)(v81 - v82);
        unint64_t v84 = v116[0];
        if (v82 < 0 || ((unint64_t)v83 & 0x8000000000000000) != 0 || v116[0] > v83)
        {
          std::string __p = "usd/crateFile.cpp";
          int v123 = "_ReadSpecs";
          uint64_t v124 = 3827;
          v125 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrIntern"
                 "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateF"
                 "ile::_AssetStream>]";
          char v126 = 0;
          uint64_t v110 = (*(uint64_t (**)(void))(*(void *)*v66 + 16))();
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fields of size %llu with remaining file size is %lld of %lld", v84, v83, v110);
        }
        else if (v116[0] - 1 >= (char *)CompressedBufferSize)
        {
          std::string __p = "usd/crateFile.cpp";
          int v123 = "_ReadSpecs";
          uint64_t v124 = 3841;
          v125 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrIntern"
                 "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateF"
                 "ile::_AssetStream>]";
          char v126 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fsetIndexes, size > compressedBufferSize.");
        }
        else
        {
          sub_216C804FC((void *)(a2 + 8), (uint64_t)v74, (unint64_t)v116[0]);
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer(v74, v116[0], v129, (int64_t)v119, v75, v85);
          unint64_t v86 = v119;
          if (v119)
          {
            unint64_t v87 = v129;
            int v88 = (_DWORD *)(*(void *)a1 + 4);
            do
            {
              int v89 = *(_DWORD *)v87;
              unint64_t v87 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)((char *)v87 + 4);
              *int v88 = v89;
              v88 += 3;
              unint64_t v86 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v86 - 1);
            }
            while (v86);
          }
          v114[0] = 0;
          if (sub_216C804FC((void *)(a2 + 8), (uint64_t)v114, 8uLL))
          {
            uint64_t v90 = (*(uint64_t (**)(void))(*(void *)*v66 + 16))();
            uint64_t v91 = *(void *)(a2 + 24);
            unint64_t v92 = (char *)(v90 - v91);
            v93 = v114[0];
            if (v91 < 0 || ((unint64_t)v92 & 0x8000000000000000) != 0 || v114[0] > v92)
            {
              std::string __p = "usd/crateFile.cpp";
              int v123 = "_ReadSpecs";
              uint64_t v124 = 3852;
              v125 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrIn"
                     "ternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Us"
                     "d_CrateFile::_AssetStream>]";
              char v126 = 0;
              uint64_t v111 = (*(uint64_t (**)(void))(*(void *)*v66 + 16))();
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read spec types of size %llu with remaining file size is %lld of %lld", v93, v92, v111);
            }
            else
            {
              if (v114[0] - 1 < (char *)CompressedBufferSize)
              {
                sub_216C804FC(v66, (uint64_t)v74, (unint64_t)v114[0]);
                pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer(v74, v114[0], v129, (int64_t)v119, v75, v94);
                uint64_t v95 = v119;
                if (v119)
                {
                  uint64_t v96 = 0;
                  uint64_t v97 = 8;
                  do
                  {
                    uint64_t v98 = *((unsigned int *)v129 + (void)v96);
                    if (v98 >= 0xC)
                    {
                      std::string __p = "usd/crateFile.cpp";
                      int v123 = "_ReadSpecs";
                      uint64_t v124 = 3864;
                      v125 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader"
                             " = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__p"
                             "xrReserved__::Usd_CrateFile::_AssetStream>]";
                      char v126 = 0;
                      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid spec type %zu", v98);
                      *(_DWORD *)(*(void *)a1 + v97) = 0;
                      uint64_t v95 = v119;
                    }
                    else
                    {
                      *(_DWORD *)(*(void *)a1 + v97) = v98;
                    }
                    uint64_t v96 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v96 + 1);
                    v97 += 12;
                  }
                  while (v96 != v95);
                }
                int v108 = 0;
LABEL_153:
                if (v129)
                {
                  v130 = (const char *)v129;
                  operator delete(v129);
                }
                operator delete[](v75);
                operator delete[](v74);
                if (v108) {
                  goto LABEL_146;
                }
                goto LABEL_15;
              }
              std::string __p = "usd/crateFile.cpp";
              int v123 = "_ReadSpecs";
              uint64_t v124 = 3871;
              v125 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrIn"
                     "ternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Us"
                     "d_CrateFile::_AssetStream>]";
              char v126 = 0;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read spectypes, size > compressedBufferSize.");
            }
          }
        }
      }
    }
    int v108 = 1;
    goto LABEL_153;
  }
LABEL_15:
  BOOL v113 = v7;
  size_t v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216C85BB4((uint64_t)&__p, 0, 0.0, 0.5);
  uint64_t v119 = 0;
  v120 = 0;
  unint64_t v121 = 0;
  uint64_t v16 = *(char **)a1;
  size_t v15 = *(unsigned int **)(a1 + 8);
  if (*(unsigned int **)a1 == v15) {
    goto LABEL_145;
  }
  uint64_t v112 = a1 + 6368;
  unint64_t v17 = (unsigned int *)(v16 + 8);
  uint64_t v18 = *(char **)a1;
  do
  {
    unint64_t v19 = *(v17 - 2);
    uint64_t v20 = *(void *)(a1 + 96);
    if (v19 >= (*(void *)(a1 + 104) - v20) >> 3) {
      int v21 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v14);
    }
    else {
      int v21 = (uint64_t *)(v20 + 8 * v19);
    }
    if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v21))
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"spec at index %zu has empty path", v22, v23, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v16[-*(void *)a1] >> 2));
      uint64_t v31 = v120;
      if ((unint64_t)v120 >= v121)
      {
        unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((v120 - v119) >> 3);
        unint64_t v39 = v38 + 1;
        if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        if (0x5555555555555556 * ((uint64_t)(v121 - (void)v119) >> 3) > v39) {
          unint64_t v39 = 0x5555555555555556 * ((uint64_t)(v121 - (void)v119) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v121 - (void)v119) >> 3) >= 0x555555555555555) {
          unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v40 = v39;
        }
        v133 = &v121;
        if (v40) {
          unint64_t v41 = (void **)sub_216782ED8((uint64_t)&v121, v40);
        }
        else {
          unint64_t v41 = 0;
        }
        size_t v48 = &v41[3 * v38];
        v129 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)v41;
        v130 = (const char *)v48;
        v132 = (const char *)&v41[3 * v40];
        long long v49 = *(_OWORD *)&v118.__r_.__value_.__l.__data_;
        v48[2] = (void *)v118.__r_.__value_.__r.__words[2];
        *(_OWORD *)size_t v48 = v49;
        memset(&v118, 0, sizeof(v118));
        uint64_t v131 = (uint64_t)(v48 + 3);
        sub_216790CCC((uint64_t *)&v119, &v129);
        int v50 = (long long *)v120;
        size_t v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216790E64((uint64_t)&v129);
        v120 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v50;
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v118.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v32 = *(_OWORD *)&v118.__r_.__value_.__l.__data_;
        *((void *)v120 + 2) = *((void *)&v118.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v31 = v32;
        v120 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v31 + 24);
      }
      uint64_t v24 = v17;
      goto LABEL_81;
    }
    uint64_t v24 = (unsigned int *)(v18 + 8);
    if (*v17 && (int)*v17 < 12)
    {
      size_t v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216C85F24((uint64_t *)&__p, (unsigned int *)v21, v21);
      if (v25) {
        goto LABEL_82;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)v21, (uint64_t)v116);
      uint64_t v28 = v116;
      if (v117 < 0) {
        uint64_t v28 = (char **)v116[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"spec <%s> repeated", v26, v27, v28);
      uint64_t v29 = v120;
      if ((unint64_t)v120 < v121)
      {
        long long v30 = *(_OWORD *)&v118.__r_.__value_.__l.__data_;
        *((void *)v120 + 2) = *((void *)&v118.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v29 = v30;
        memset(&v118, 0, sizeof(v118));
        v120 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v29 + 24);
        goto LABEL_79;
      }
      unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((v120 - v119) >> 3);
      unint64_t v52 = v51 + 1;
      if (v51 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      if (0x5555555555555556 * ((uint64_t)(v121 - (void)v119) >> 3) > v52) {
        unint64_t v52 = 0x5555555555555556 * ((uint64_t)(v121 - (void)v119) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v121 - (void)v119) >> 3) >= 0x555555555555555) {
        unint64_t v53 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v53 = v52;
      }
      v133 = &v121;
      if (v53) {
        unint64_t v54 = (void **)sub_216782ED8((uint64_t)&v121, v53);
      }
      else {
        unint64_t v54 = 0;
      }
      unsigned int v59 = &v54[3 * v51];
      v129 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)v54;
      v130 = (const char *)v59;
      v132 = (const char *)&v54[3 * v53];
      long long v60 = *(_OWORD *)&v118.__r_.__value_.__l.__data_;
      v59[2] = (void *)v118.__r_.__value_.__r.__words[2];
      *(_OWORD *)unsigned int v59 = v60;
      memset(&v118, 0, sizeof(v118));
      uint64_t v131 = (uint64_t)(v59 + 3);
      sub_216790CCC((uint64_t *)&v119, &v129);
      long long v61 = (long long *)v120;
      size_t v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216790E64((uint64_t)&v129);
      v120 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v61;
      if ((SHIBYTE(v118.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_79;
      }
      BOOL v58 = (char *)v118.__r_.__value_.__r.__words[0];
      goto LABEL_78;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)v21, (uint64_t)v116);
    if (v117 >= 0) {
      unint64_t v35 = v116;
    }
    else {
      unint64_t v35 = (char **)v116[0];
    }
    unsigned int v36 = *v17;
    if (*v17)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"invalid spec type value %d", v33, v34, *v17);
      int v37 = (const char *)v114;
      if (v115 < 0) {
        int v37 = v114[0];
      }
    }
    else
    {
      int v37 = "unknown spec type";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"spec <%s> has %s", v33, v34, v35, v37);
    int v42 = v120;
    if ((unint64_t)v120 >= v121)
    {
      unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((v120 - v119) >> 3);
      unint64_t v45 = v44 + 1;
      if (v44 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      if (0x5555555555555556 * ((uint64_t)(v121 - (void)v119) >> 3) > v45) {
        unint64_t v45 = 0x5555555555555556 * ((uint64_t)(v121 - (void)v119) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v121 - (void)v119) >> 3) >= 0x555555555555555) {
        unint64_t v46 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v46 = v45;
      }
      v133 = &v121;
      if (v46) {
        unint64_t v47 = (void **)sub_216782ED8((uint64_t)&v121, v46);
      }
      else {
        unint64_t v47 = 0;
      }
      char v55 = &v47[3 * v44];
      v129 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)v47;
      v130 = (const char *)v55;
      v132 = (const char *)&v47[3 * v46];
      long long v56 = *(_OWORD *)&v118.__r_.__value_.__l.__data_;
      v55[2] = (void *)v118.__r_.__value_.__r.__words[2];
      *(_OWORD *)char v55 = v56;
      memset(&v118, 0, sizeof(v118));
      uint64_t v131 = (uint64_t)(v55 + 3);
      sub_216790CCC((uint64_t *)&v119, &v129);
      long long v57 = (long long *)v120;
      size_t v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216790E64((uint64_t)&v129);
      v120 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v57;
      if ((SHIBYTE(v118.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (!v36) {
          goto LABEL_79;
        }
LABEL_71:
        if ((v115 & 0x80000000) == 0) {
          goto LABEL_79;
        }
        BOOL v58 = v114[0];
LABEL_78:
        operator delete(v58);
        goto LABEL_79;
      }
      operator delete(v118.__r_.__value_.__l.__data_);
      if (v36) {
        goto LABEL_71;
      }
    }
    else
    {
      long long v43 = *(_OWORD *)&v118.__r_.__value_.__l.__data_;
      *((void *)v120 + 2) = *((void *)&v118.__r_.__value_.__l + 2);
      *(_OWORD *)int v42 = v43;
      memset(&v118, 0, sizeof(v118));
      v120 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v42 + 24);
      if (v36) {
        goto LABEL_71;
      }
    }
LABEL_79:
    if (v117 < 0) {
      operator delete(v116[0]);
    }
LABEL_81:
    unsigned int *v24 = 0;
LABEL_82:
    v18 += 12;
    int v62 = v17 + 1;
    v17 += 3;
    v16 += 12;
  }
  while (v62 != v15);
  BOOL v7 = v113;
  if (v119 != v120)
  {
    uint64_t v63 = *(void *)(a1 + 8);
    if (*(void *)a1 != v63)
    {
      uint64_t v64 = *(void *)a1 + 12;
      while (*(_DWORD *)(v64 - 4))
      {
        BOOL v65 = v64 == v63;
        v64 += 12;
        if (v65) {
          goto LABEL_134;
        }
      }
      uint64_t v99 = v64 - 12;
      if (v64 - 12 != v63 && v64 != v63)
      {
        do
        {
          if (*(_DWORD *)(v64 + 8))
          {
            uint64_t v100 = *(void *)v64;
            *(_DWORD *)(v99 + 8) = *(_DWORD *)(v64 + 8);
            *(void *)uint64_t v99 = v100;
            v99 += 12;
          }
          v64 += 12;
        }
        while (v64 != v63);
        uint64_t v63 = *(void *)(a1 + 8);
      }
      if (v99 != v63) {
        *(void *)(a1 + 8) = v99;
      }
    }
LABEL_134:
    unint64_t v101 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v120 - v119) >> 3));
    if (v120 == v119) {
      uint64_t v102 = 0;
    }
    else {
      uint64_t v102 = v101;
    }
    sub_216C8653C((uint64_t)v119, (unint64_t)v120, (uint64_t)&v129, v102, 1);
    v103 = sub_216ABCE20((unsigned __int8 *)v119, (unsigned __int8 *)v120, (uint64_t)&v129);
    sub_216AB1AAC((uint64_t)&v119, (uint64_t)v103, (long long *)v120);
    v129 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)"usd/crateFile.cpp";
    v130 = "_ReadSpecs";
    uint64_t v131 = 3935;
    v132 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrInternal__aa"
           "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
    LOBYTE(v133) = 0;
    uint64_t v104 = (const char *)(a1 + 6512);
    if (*(char *)(v112 + 167) < 0) {
      uint64_t v104 = *(const char **)v104;
    }
    pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", (std::string **)&v119, &v118);
    if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v105 = &v118;
    }
    else {
      int v105 = (std::string *)v118.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v129, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt asset @%s@ - ignoring invalid specs: %s.", v104, (const char *)v105);
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v118.__r_.__value_.__l.__data_);
    }
    BOOL v7 = v128;
  }
LABEL_145:
  v129 = &v119;
  sub_216782F20((void ***)&v129);
  v129 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)&v123;
  sub_216C85DE8((void ***)&v129);
LABEL_146:
  int v128 = v7 - 1;
  if (v7)
  {
    uint64_t v106 = (uint64_t)v127;
    int v107 = v7 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v106);
      int v128 = v107--;
    }
    while (v107 != -2);
  }
}

void sub_216C8F12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  unint64_t v41 = *(void **)(v39 - 128);
  if (v41)
  {
    *(void *)(v39 - 120) = v41;
    operator delete(v41);
  }
  operator delete[](v38);
  operator delete[](v37);
  sub_21684E6B8(v39 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_216C8F2D8(uint64_t a1, void **a2)
{
  unint64_t v19 = 0;
  ssize_t v4 = (void *)(a1 + 8);
  if (!sub_216C804FC((void *)(a1 + 8), (uint64_t)&v19, 8uLL)) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = v5 - v6;
  unint64_t v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    std::string __p = "usd/crateFile.cpp";
    size_t v15 = "_Read";
    uint64_t v16 = 1189;
    unint64_t v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section]";
    char v18 = 0;
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*v4 + 16))();
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_216C832B0(&__p, v19);
  uint64_t v9 = sub_216C804FC(v4, (uint64_t)__p, 32 * v19);
  uint64_t v10 = v9;
  if (&__p == a2) {
    char v11 = 0;
  }
  else {
    char v11 = v9;
  }
  if (v11) {
    sub_216C7B0D4((char *)a2, (char *)__p, (uint64_t)v15, (v15 - (unsigned char *)__p) >> 5);
  }
  if (__p)
  {
    size_t v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_216C8F43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C8F460(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216C83444(a1 + 8);
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 32));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216C8F4F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C8F504(uint64_t a1, void **a2)
{
  unint64_t v19 = 0;
  unint64_t v4 = (void *)(a1 + 8);
  if (!sub_216C804FC((void *)(a1 + 8), (uint64_t)&v19, 8uLL)) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = v5 - v6;
  unint64_t v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    std::string __p = "usd/crateFile.cpp";
    size_t v15 = "_Read";
    uint64_t v16 = 1189;
    unint64_t v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::TokenIndex]";
    char v18 = 0;
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*v4 + 16))();
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_216C838F4(&__p, v19);
  uint64_t v9 = sub_216C804FC(v4, (uint64_t)__p, 4 * v19);
  uint64_t v10 = v9;
  if (&__p == a2) {
    char v11 = 0;
  }
  else {
    char v11 = v9;
  }
  if (v11) {
    sub_216825D78((char *)a2, (char *)__p, (uint64_t)v15, (v15 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    size_t v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_216C8F668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C8F684(uint64_t a1, _DWORD *a2, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *a3)
{
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)std::string __p = 0u;
  sub_216C8F878((uint64_t)v5, a1, a2, a3);
  unint64_t v3 = __p[0];
  __p[0] = 0;
  if (v3) {
    operator delete[](v3);
  }
  unint64_t v4 = v5[0];
  v5[0] = 0;
  if (v4) {
    operator delete[](v4);
  }
}

void sub_216C8F6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C8F6F8(uint64_t a1, void **a2)
{
  unint64_t v19 = 0;
  unint64_t v4 = (void *)(a1 + 8);
  if (!sub_216C804FC((void *)(a1 + 8), (uint64_t)&v19, 8uLL)) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = v5 - v6;
  unint64_t v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    std::string __p = "usd/crateFile.cpp";
    size_t v15 = "_Read";
    uint64_t v16 = 1189;
    unint64_t v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Field]";
    char v18 = 0;
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*v4 + 16))();
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_216C83B4C(&__p, v19);
  uint64_t v9 = sub_216C804FC(v4, (uint64_t)__p, 16 * v19);
  uint64_t v10 = v9;
  if (&__p == a2) {
    char v11 = 0;
  }
  else {
    char v11 = v9;
  }
  if (v11) {
    sub_216893FD4((char *)a2, (char *)__p, (uint64_t)v15, (v15 - (unsigned char *)__p) >> 4);
  }
  if (__p)
  {
    size_t v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_216C8F85C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C8F878(uint64_t a1, uint64_t a2, _DWORD *a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this)
{
  sub_216C83E98(a1, this);
  int v21 = 0;
  unint64_t v8 = (void *)(a2 + 8);
  uint64_t result = sub_216C804FC((void *)(a2 + 8), (uint64_t)&v21, 8uLL);
  if (result)
  {
    uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8));
    uint64_t v11 = *(void *)(a2 + 24);
    unint64_t v12 = *(void *)(a1 + 8);
    int v13 = v21;
    if (v12 < (unint64_t)v21) {
      int v13 = *(char **)(a1 + 8);
    }
    if (v10 - v11 >= (unint64_t)v13) {
      size_t v14 = v13;
    }
    else {
      size_t v14 = (char *)(v10 - v11);
    }
    int v21 = v14;
    if (v12 && *(void *)(a1 + 24))
    {
      if ((v11 & 0x8000000000000000) == 0)
      {
        uint64_t result = sub_216C804FC(v8, *(void *)a1, (unint64_t)v14);
        if (result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a1, v21, a3, (int64_t)this, *(char **)(a1 + 16), v15);
          return 1;
        }
        return result;
      }
      uint64_t v16 = "usd/crateFile.cpp";
      unint64_t v17 = "Read";
      uint64_t v18 = 2158;
      unint64_t v19 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_AssetStream>, Int = unsigned int]";
      char v20 = 0;
      (*(void (**)(void))(*(void *)*v8 + 16))();
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      uint64_t v16 = "usd/crateFile.cpp";
      unint64_t v17 = "Read";
      uint64_t v18 = 2153;
      unint64_t v19 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_AssetStream>, Int = unsigned int]";
      char v20 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

uint64_t sub_216C8FA18(uint64_t a1, void **a2)
{
  unint64_t v19 = 0;
  unint64_t v4 = (void *)(a1 + 8);
  if (!sub_216C804FC((void *)(a1 + 8), (uint64_t)&v19, 8uLL)) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = v5 - v6;
  unint64_t v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    std::string __p = "usd/crateFile.cpp";
    size_t v15 = "_Read";
    uint64_t v16 = 1189;
    unint64_t v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::FieldIndex]";
    char v18 = 0;
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*v4 + 16))();
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_216C8409C(&__p, v19);
  uint64_t v9 = sub_216C804FC(v4, (uint64_t)__p, 4 * v19);
  uint64_t v10 = v9;
  if (&__p == a2) {
    char v11 = 0;
  }
  else {
    char v11 = v9;
  }
  if (v11) {
    sub_216825D78((char *)a2, (char *)__p, (uint64_t)v15, (v15 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    size_t v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_216C8FB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C8FB98(char *a1, long long *a2, uint64_t a3, int *a4)
{
  unint64_t v8 = (void *)a2 + 1;
  uint64_t v9 = a4 + 1;
  uint64_t v25 = a3 + 264;
  do
  {
    uint64_t v36 = -1;
    if (!sub_216C804FC(v8, (uint64_t)v35, 0x10uLL)) {
      break;
    }
    BOOL v10 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4);
    if (v10)
    {
      uint64_t v11 = *((void *)a1 + 15);
      if (HIDWORD(v36) >= (unint64_t)((*((void *)a1 + 16) - v11) >> 3)
        || v36 >= (unint64_t)((uint64_t)(*((void *)a1 + 13) - *((void *)a1 + 12)) >> 3))
      {
        long long v26 = "usd/crateFile.cpp";
        *(void *)&long long v27 = "_ReadPathsImpl";
        uint64_t v24 = 4159;
LABEL_26:
        *((void *)&v27 + 1) = v24;
        uint64_t v28 = (std::__shared_weak_count *)"void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadPathsImp"
                                          "l(Reader, WorkDispatcher &, SdfPath) [Header = pxrInternal__aapl__pxrReserved_"
                                          "_::Usd_CrateFile::_PathItemHeader_0_0_1, Reader = pxrInternal__aapl__pxrReserv"
                                          "ed__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_"
                                          "CrateFile::_AssetStream>]";
        LOBYTE(v29) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid paths header causing OOB access.");
        return;
      }
      uint64_t v12 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v11 + 8 * HIDWORD(v36));
      if ((v37 & 4) != 0) {
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v12, (int *)&v26);
      }
      else {
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v12, (int *)&v26);
      }
      uint64_t v16 = (int *)(*((void *)a1 + 12) + 8 * v36);
      sub_21697DE94(v16, (int *)&v26);
      sub_21697DEEC(v16 + 1, (int *)&v26 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
      sub_21697C414(&v26);
    }
    else
    {
      int v13 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v10);
      sub_2169C487C(a4, v13);
      sub_2169C48D4(v9, v13 + 1);
      uint64_t v14 = *((void *)a1 + 12);
      if (v36 >= (unint64_t)((*((void *)a1 + 13) - v14) >> 3))
      {
        long long v26 = "usd/crateFile.cpp";
        *(void *)&long long v27 = "_ReadPathsImpl";
        uint64_t v24 = 4152;
        goto LABEL_26;
      }
      size_t v15 = (int *)(v14 + 8 * v36);
      sub_2169C487C(v15, a4);
      sub_2169C48D4(v15 + 1, v9);
    }
    char v17 = v37;
    if (v37)
    {
      if ((v37 & 2) != 0)
      {
        uint64_t v34 = 0;
        if (!sub_216C804FC(v8, (uint64_t)&v34, 8uLL)) {
          return;
        }
        long long v26 = a1;
        long long v27 = *a2;
        char v18 = (std::__shared_weak_count *)*((void *)a2 + 2);
        uint64_t v28 = v18;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v29 = *((void *)a2 + 3);
        uint64_t v30 = v34;
        uint64_t v31 = a3;
        sub_216981010(&v32, a4);
        sub_21698105C(&v33, v9);
        uint64_t v19 = *(void *)(a3 + 256);
        v38[0] = 0;
        v38[1] = v19;
        uint64_t v20 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v38, 0x50uLL);
        uint64_t v21 = sub_216C906B0(v20, (uint64_t)&v26, v25);
        (***(void (****)(void, uint64_t, uint64_t))(v21 - 40))(*(void *)(v21 - 40), v20, v20 - 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
        sub_21697C414(&v32);
        if (v28) {
          sub_216784EC4(v28);
        }
      }
      uint64_t v22 = *((void *)a1 + 12);
      if (v36 >= (unint64_t)((*((void *)a1 + 13) - v22) >> 3))
      {
        long long v26 = "usd/crateFile.cpp";
        *(void *)&long long v27 = "_ReadPathsImpl";
        uint64_t v24 = 4195;
        goto LABEL_26;
      }
      size_t v23 = (_DWORD *)(v22 + 8 * v36);
      sub_2169C487C(a4, v23);
      sub_2169C48D4(v9, v23 + 1);
    }
  }
  while ((v17 & 3) != 0);
}

void sub_216C8FEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216C9066C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C8FEBC(char *a1, long long *a2, uint64_t a3, int *a4)
{
  unint64_t v8 = (void *)a2 + 1;
  uint64_t v9 = a4 + 1;
  uint64_t v25 = a3 + 264;
  do
  {
    uint64_t v35 = -1;
    if (!sub_216C804FC(v8, (uint64_t)&v35, 0xCuLL)) {
      break;
    }
    BOOL v10 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4);
    if (v10)
    {
      uint64_t v11 = *((void *)a1 + 15);
      if (HIDWORD(v35) >= (unint64_t)((*((void *)a1 + 16) - v11) >> 3)
        || v35 >= (unint64_t)((uint64_t)(*((void *)a1 + 13) - *((void *)a1 + 12)) >> 3))
      {
        long long v26 = "usd/crateFile.cpp";
        *(void *)&long long v27 = "_ReadPathsImpl";
        uint64_t v24 = 4159;
LABEL_26:
        *((void *)&v27 + 1) = v24;
        uint64_t v28 = (std::__shared_weak_count *)"void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadPathsImp"
                                          "l(Reader, WorkDispatcher &, SdfPath) [Header = pxrInternal__aapl__pxrReserved_"
                                          "_::Usd_CrateFile::_PathItemHeader, Reader = pxrInternal__aapl__pxrReserved__::"
                                          "Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateF"
                                          "ile::_AssetStream>]";
        LOBYTE(v29) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid paths header causing OOB access.");
        return;
      }
      uint64_t v12 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v11 + 8 * HIDWORD(v35));
      if ((v36 & 4) != 0) {
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v12, (int *)&v26);
      }
      else {
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v12, (int *)&v26);
      }
      uint64_t v16 = (int *)(*((void *)a1 + 12) + 8 * v35);
      sub_21697DE94(v16, (int *)&v26);
      sub_21697DEEC(v16 + 1, (int *)&v26 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
      sub_21697C414(&v26);
    }
    else
    {
      int v13 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v10);
      sub_2169C487C(a4, v13);
      sub_2169C48D4(v9, v13 + 1);
      uint64_t v14 = *((void *)a1 + 12);
      if (v35 >= (unint64_t)((*((void *)a1 + 13) - v14) >> 3))
      {
        long long v26 = "usd/crateFile.cpp";
        *(void *)&long long v27 = "_ReadPathsImpl";
        uint64_t v24 = 4152;
        goto LABEL_26;
      }
      size_t v15 = (int *)(v14 + 8 * v35);
      sub_2169C487C(v15, a4);
      sub_2169C48D4(v15 + 1, v9);
    }
    char v17 = v36;
    if (v36)
    {
      if ((v36 & 2) != 0)
      {
        uint64_t v34 = 0;
        if (!sub_216C804FC(v8, (uint64_t)&v34, 8uLL)) {
          return;
        }
        long long v26 = a1;
        long long v27 = *a2;
        char v18 = (std::__shared_weak_count *)*((void *)a2 + 2);
        uint64_t v28 = v18;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v29 = *((void *)a2 + 3);
        uint64_t v30 = v34;
        uint64_t v31 = a3;
        sub_216981010(&v32, a4);
        sub_21698105C(&v33, v9);
        uint64_t v19 = *(void *)(a3 + 256);
        v37[0] = 0;
        v37[1] = v19;
        uint64_t v20 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v37, 0x50uLL);
        uint64_t v21 = sub_216C90A24(v20, (uint64_t)&v26, v25);
        (***(void (****)(void, uint64_t, uint64_t))(v21 - 40))(*(void *)(v21 - 40), v20, v20 - 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
        sub_21697C414(&v32);
        if (v28) {
          sub_216784EC4(v28);
        }
      }
      uint64_t v22 = *((void *)a1 + 12);
      if (v35 >= (unint64_t)((*((void *)a1 + 13) - v22) >> 3))
      {
        long long v26 = "usd/crateFile.cpp";
        *(void *)&long long v27 = "_ReadPathsImpl";
        uint64_t v24 = 4195;
        goto LABEL_26;
      }
      size_t v23 = (_DWORD *)(v22 + 8 * v35);
      sub_2169C487C(a4, v23);
      sub_2169C48D4(v9, v23 + 1);
    }
  }
  while ((v17 & 3) != 0);
}

void sub_216C901C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216C909E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C901E0(void *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::WorkDispatcher *a3, unint64_t a4)
{
  char v36 = 0;
  char v37 = 0;
  uint64_t v38 = 0;
  int v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v29 = 0;
  if (sub_216C804FC((void *)(a2 + 8), (uint64_t)&v29, 8uLL))
  {
    *(_OWORD *)long long v27 = 0u;
    *(_OWORD *)std::string __p = 0u;
    uint64_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(v29);
    unint64_t DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(v29);
    if (CompressedBufferSize && DecompressionWorkingSpaceSize)
    {
      sub_21681C000((uint64_t)&v36, (unint64_t)v29);
      if (sub_216C8F878((uint64_t)v27, a2, v36, v29))
      {
        BOOL v10 = v36;
        if (v36 == v37)
        {
          unint64_t v11 = 0;
LABEL_13:
          if (v11 + 1 < a4)
          {
            uint64_t v22 = "usd/crateFile.cpp";
            size_t v23 = "_ReadCompressedPaths";
            uint64_t v24 = 4253;
            uint64_t v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDisp"
                  "atcher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrI"
                  "nternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
            char v26 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed paths. numPaths = %llu too large for max index = %llu", a4, v11);
          }
          else if ((unint64_t)v29 > a4)
          {
            uint64_t v22 = "usd/crateFile.cpp";
            size_t v23 = "_ReadCompressedPaths";
            uint64_t v24 = 4259;
            uint64_t v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDisp"
                  "atcher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrI"
                  "nternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
            char v26 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed paths. numEncodedPaths %llu > numPaths = %llu", v29, a4);
          }
          else
          {
            sub_216AF4CFC(a1 + 12, a4);
            int v13 = (int *)a1[12];
            uint64_t v14 = a1[13];
            uint64_t v22 = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v22);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v22 + 1);
            if (v14 - (uint64_t)v13 >= 1)
            {
              unint64_t v15 = ((unint64_t)(v14 - (void)v13) >> 3) + 1;
              do
              {
                sub_2169C487C(v13, &v22);
                sub_2169C48D4(v13 + 1, (_DWORD *)&v22 + 1);
                --v15;
                v13 += 2;
              }
              while (v15 > 1);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
            sub_21697C414(&v22);
            sub_21681C000((uint64_t)&v33, (unint64_t)v29);
            if (sub_216C90D54((uint64_t)v27, a2, v33, v29))
            {
              uint64_t v16 = v33;
              if (v33 == v34)
              {
LABEL_26:
                sub_21681C000((uint64_t)&v30, (unint64_t)v29);
                if (sub_216C90D54((uint64_t)v27, a2, v30, v29))
                {
                  uint64_t v21 = 0;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v21);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v21 + 1);
                  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BuildDecompressedPathsImpl(a1, &v36, &v33, &v30, 0, (int *)&v21, (uint64_t)a3);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
                  sub_21697C414(&v21);
                  pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait(a3);
                }
              }
              else
              {
                unint64_t v17 = (uint64_t)(a1[16] - a1[15]) >> 3;
                while (1)
                {
                  LODWORD(v18) = *v16;
                  unint64_t v18 = (int)*v16 >= 0 ? v18 : -(int)v18;
                  if (v17 <= v18) {
                    break;
                  }
                  if (++v16 == v34) {
                    goto LABEL_26;
                  }
                }
                uint64_t v22 = "usd/crateFile.cpp";
                size_t v23 = "_ReadCompressedPaths";
                uint64_t v24 = 4280;
                uint64_t v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, Work"
                      "Dispatcher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Rea"
                      "der<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
                char v26 = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt path element token index in crate file (%d >= %zu)", v18, v17);
              }
            }
          }
        }
        else
        {
          unint64_t v11 = 0;
          while (1)
          {
            unint64_t v12 = *v10;
            if (v12 >= a4) {
              break;
            }
            if (v11 <= v12) {
              unint64_t v11 = *v10;
            }
            if (++v10 == v37) {
              goto LABEL_13;
            }
          }
          uint64_t v22 = "usd/crateFile.cpp";
          size_t v23 = "_ReadCompressedPaths";
          uint64_t v24 = 4243;
          uint64_t v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDispat"
                "cher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInter"
                "nal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
          char v26 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt path index in crate file (%u >= %zu)", v12, a4);
        }
      }
    }
    else
    {
      uint64_t v22 = "usd/crateFile.cpp";
      size_t v23 = "_ReadCompressedPaths";
      uint64_t v24 = 4230;
      uint64_t v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDispatcher"
            " &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aap"
            "l__pxrReserved__::Usd_CrateFile::_AssetStream>]";
      char v26 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed paths of size %llu", v29);
    }
    uint64_t v19 = __p[0];
    __p[0] = 0;
    if (v19) {
      operator delete[](v19);
    }
    uint64_t v20 = v27[0];
    v27[0] = 0;
    if (v20) {
      operator delete[](v20);
    }
    if (v30)
    {
      uint64_t v31 = v30;
      operator delete(v30);
    }
  }
  if (v33)
  {
    uint64_t v34 = v33;
    operator delete(v33);
  }
  if (v36)
  {
    char v37 = v36;
    operator delete(v36);
  }
}

void sub_216C905EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  sub_216C83E54((uint64_t)&a17);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  uint64_t v25 = *(void **)(v23 - 96);
  if (v25)
  {
    *(void *)(v23 - 88) = v25;
    operator delete(v25);
  }
  char v26 = *(void **)(v23 - 72);
  if (v26)
  {
    *(void *)(v23 - 64) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216C9066C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 60));
  sub_21697C414((_DWORD *)(a1 + 56));
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_216784EC4(v2);
  }
  return a1;
}

uint64_t sub_216C906B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 - 11) = 1;
  *(void *)a1 = &unk_26C75F550;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 40);
  sub_21697D878((_DWORD *)(a1 + 64), (_DWORD *)(a2 + 56));
  sub_21697D8B4((_DWORD *)(a1 + 68), (_DWORD *)(a2 + 60));
  *(void *)(a1 + 72) = a3;
  return a1;
}

uint64_t sub_216C90748(uint64_t a1)
{
  *(void *)a1 = &unk_26C75F550;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 68));
  sub_21697C414((_DWORD *)(a1 + 64));
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_216784EC4(v2);
  }
  return a1;
}

void sub_216C907A4(void *a1)
{
  *(void *)a1 = &unk_26C75F550;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 17);
  sub_21697C414((_DWORD *)a1 + 16);
  unint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 4);
  if (v2) {
    sub_216784EC4(v2);
  }

  operator delete(a1);
}

uint64_t sub_216C90810(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216C908B4(a1 + 8);
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 72));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216C908A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_216C908B4(uint64_t a1)
{
  unint64_t v2 = *(char **)a1;
  sub_216C84FD8((uint64_t)&v12, "Usd", "Usd_CrateDataImpl::Open", "Usd_CrateFile::CrateFile::Open", "_ReadPaths");
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v3;
  long long v9 = *(_OWORD *)(a1 + 8);
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
  BOOL v10 = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v3 = *(void *)(a1 + 32);
  }
  uint64_t v11 = v3;
  uint64_t v5 = *(void *)(a1 + 48);
  sub_216981010(&v7, (_DWORD *)(a1 + 56));
  sub_21698105C(&v8, (_DWORD *)(a1 + 60));
  sub_216C8FB98(v2, &v9, v5, &v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v10) {
    sub_216784EC4(v10);
  }
  while (v13--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v12);
}

void sub_216C909B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  int v7 = va_arg(va1, std::__shared_weak_count *);
  uint64_t v8 = va_arg(va1, void);
  sub_21697B754((uint64_t *)va);
  if (v7) {
    sub_216784EC4(v7);
  }
  sub_21684E6B8((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C909E0(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 60));
  sub_21697C414((_DWORD *)(a1 + 56));
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_216784EC4(v2);
  }
  return a1;
}

uint64_t sub_216C90A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 - 11) = 1;
  *(void *)a1 = &unk_26C75F598;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 40);
  sub_21697D878((_DWORD *)(a1 + 64), (_DWORD *)(a2 + 56));
  sub_21697D8B4((_DWORD *)(a1 + 68), (_DWORD *)(a2 + 60));
  *(void *)(a1 + 72) = a3;
  return a1;
}

uint64_t sub_216C90ABC(uint64_t a1)
{
  *(void *)a1 = &unk_26C75F598;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 68));
  sub_21697C414((_DWORD *)(a1 + 64));
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_216784EC4(v2);
  }
  return a1;
}

void sub_216C90B18(void *a1)
{
  *(void *)a1 = &unk_26C75F598;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 17);
  sub_21697C414((_DWORD *)a1 + 16);
  unint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 4);
  if (v2) {
    sub_216784EC4(v2);
  }

  operator delete(a1);
}

uint64_t sub_216C90B84(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216C90C28(a1 + 8);
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 72));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216C90C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_216C90C28(uint64_t a1)
{
  unint64_t v2 = *(char **)a1;
  sub_216C84FD8((uint64_t)&v12, "Usd", "Usd_CrateDataImpl::Open", "Usd_CrateFile::CrateFile::Open", "_ReadPaths");
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v3;
  long long v9 = *(_OWORD *)(a1 + 8);
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
  BOOL v10 = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v3 = *(void *)(a1 + 32);
  }
  uint64_t v11 = v3;
  uint64_t v5 = *(void *)(a1 + 48);
  sub_216981010(&v7, (_DWORD *)(a1 + 56));
  sub_21698105C(&v8, (_DWORD *)(a1 + 60));
  sub_216C8FEBC(v2, &v9, v5, &v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v10) {
    sub_216784EC4(v10);
  }
  while (v13--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v12);
}

void sub_216C90D28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  int v7 = va_arg(va1, std::__shared_weak_count *);
  uint64_t v8 = va_arg(va1, void);
  sub_21697B754((uint64_t *)va);
  if (v7) {
    sub_216784EC4(v7);
  }
  sub_21684E6B8((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C90D54(uint64_t a1, uint64_t a2, _DWORD *a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this)
{
  sub_216C83E98(a1, this);
  uint64_t v21 = 0;
  uint64_t v8 = (void *)(a2 + 8);
  uint64_t result = sub_216C804FC((void *)(a2 + 8), (uint64_t)&v21, 8uLL);
  if (result)
  {
    uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8));
    uint64_t v11 = *(void *)(a2 + 24);
    unint64_t v12 = *(void *)(a1 + 8);
    int v13 = v21;
    if (v12 < (unint64_t)v21) {
      int v13 = *(char **)(a1 + 8);
    }
    if (v10 - v11 >= (unint64_t)v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = (char *)(v10 - v11);
    }
    uint64_t v21 = v14;
    if (v12 && *(void *)(a1 + 24))
    {
      if ((v11 & 0x8000000000000000) == 0)
      {
        uint64_t result = sub_216C804FC(v8, *(void *)a1, (unint64_t)v14);
        if (result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a1, v21, a3, (int64_t)this, *(char **)(a1 + 16), v15);
          return 1;
        }
        return result;
      }
      uint64_t v16 = "usd/crateFile.cpp";
      unint64_t v17 = "Read";
      uint64_t v18 = 2158;
      uint64_t v19 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_AssetStream>, Int = int]";
      char v20 = 0;
      (*(void (**)(void))(*(void *)*v8 + 16))();
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      uint64_t v16 = "usd/crateFile.cpp";
      unint64_t v17 = "Read";
      uint64_t v18 = 2153;
      uint64_t v19 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_AssetStream>, Int = int]";
      char v20 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

uint64_t sub_216C90EF4(uint64_t a1, void **a2)
{
  unint64_t v19 = 0;
  unint64_t v4 = (void *)(a1 + 8);
  if (!sub_216C804FC((void *)(a1 + 8), (uint64_t)&v19, 8uLL)) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = v5 - v6;
  unint64_t v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    std::string __p = "usd/crateFile.cpp";
    unint64_t v15 = "_Read";
    uint64_t v16 = 1189;
    unint64_t v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Spec_0_0_1]";
    char v18 = 0;
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*v4 + 16))();
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_216C856D0(&__p, v19);
  uint64_t v9 = sub_216C804FC(v4, (uint64_t)__p, 16 * v19);
  uint64_t v10 = v9;
  if (&__p == a2) {
    char v11 = 0;
  }
  else {
    char v11 = v9;
  }
  if (v11) {
    sub_216893FD4((char *)a2, (char *)__p, (uint64_t)v15, (v15 - (unsigned char *)__p) >> 4);
  }
  if (__p)
  {
    unint64_t v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_216C91058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C91074(uint64_t a1, void **a2)
{
  unint64_t v19 = 0;
  unint64_t v4 = (void *)(a1 + 8);
  if (!sub_216C804FC((void *)(a1 + 8), (uint64_t)&v19, 8uLL)) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = v5 - v6;
  unint64_t v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    std::string __p = "usd/crateFile.cpp";
    unint64_t v15 = "_Read";
    uint64_t v16 = 1189;
    unint64_t v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Spec]";
    char v18 = 0;
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*v4 + 16))();
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_216C859FC(&__p, v19);
  uint64_t v9 = sub_216C804FC(v4, (uint64_t)__p, 12 * v19);
  uint64_t v10 = v9;
  if (&__p == a2) {
    char v11 = 0;
  }
  else {
    char v11 = v9;
  }
  if (v11) {
    sub_216C85A78((char *)a2, (char *)__p, (uint64_t)v15, 0xAAAAAAAAAAAAAAABLL * ((v15 - (unsigned char *)__p) >> 2));
  }
  if (__p)
  {
    unint64_t v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_216C911E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C91204(pxrInternal__aapl__pxrReserved__ *a1)
{
  long long v7 = *(_OWORD *)a1;
  uint64_t v8 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  BOOL HasConcurrency = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1);
  if (HasConcurrency)
  {
    uint64_t DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    uint64_t v3 = *(void ***)(DetachedDispatcher + 256);
    v9[0] = 0;
    v9[1] = v3;
    uint64_t v4 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v9, 0x28uLL);
    *(unsigned char *)(v4 - 11) = 1;
    *(void *)uint64_t v4 = &unk_26C75F5E0;
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + 24) = 0;
    *(_OWORD *)(v4 + 8) = v7;
    uint64_t v5 = v8;
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    *(void *)(v4 + 24) = v5;
    *(void *)(v4 + 32) = DetachedDispatcher + 264;
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__ *)(***(uint64_t (****)(void, uint64_t, uint64_t))(v4 - 40))(*(void *)(v4 - 40), v4, v4 - 8);
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v6);
  }
  else
  {
    sub_216C91328();
  }
  v9[0] = (void **)&v7;
  sub_216981168(v9);
}

void sub_216C9130C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216981168(&a12);
  _Unwind_Resume(a1);
}

void sub_216C91328()
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  v0 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v0) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  uint64_t v1 = sub_216862604(&v3, 0);
  char v4 = 0;
  unint64_t v2 = (void *)sub_2168520EC(v0 + 19, &v4);
  if (v2 != v1) {
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v0, v1, v2);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_216C913B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C913C8(uint64_t a1)
{
  *(void *)a1 = &unk_26C75F5E0;
  unint64_t v3 = (void **)(a1 + 8);
  sub_216981168(&v3);
  return a1;
}

void sub_216C91420(char *a1)
{
  *(void *)a1 = &unk_26C75F5E0;
  unint64_t v2 = (void **)(a1 + 8);
  sub_216981168(&v2);
  operator delete(a1);
}

uint64_t sub_216C9147C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216C91328();
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 32));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216C9150C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_216C91520(pxrInternal__aapl__pxrReserved__ *a1)
{
  long long v7 = *(_OWORD *)a1;
  uint64_t v8 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  BOOL HasConcurrency = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1);
  if (HasConcurrency)
  {
    uint64_t DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    unint64_t v3 = *(void ***)(DetachedDispatcher + 256);
    v9[0] = 0;
    v9[1] = v3;
    uint64_t v4 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v9, 0x28uLL);
    *(unsigned char *)(v4 - 11) = 1;
    *(void *)uint64_t v4 = &unk_26C75F628;
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + 24) = 0;
    *(_OWORD *)(v4 + 8) = v7;
    uint64_t v5 = v8;
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    *(void *)(v4 + 24) = v5;
    *(void *)(v4 + 32) = DetachedDispatcher + 264;
    unint64_t v6 = (pxrInternal__aapl__pxrReserved__ *)(***(uint64_t (****)(void, uint64_t, uint64_t))(v4 - 40))(*(void *)(v4 - 40), v4, v4 - 8);
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v6);
  }
  else
  {
    sub_216C91644();
  }
  v9[0] = (void **)&v7;
  sub_216889A04(v9);
}

void sub_216C91628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216889A04(&a12);
  _Unwind_Resume(a1);
}

void sub_216C91644()
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  v0 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v0) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  uint64_t v1 = sub_216862604(&v3, 0);
  char v4 = 0;
  unint64_t v2 = (void *)sub_2168520EC(v0 + 19, &v4);
  if (v2 != v1) {
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v0, v1, v2);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_216C916D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C916E4(uint64_t a1)
{
  *(void *)a1 = &unk_26C75F628;
  unint64_t v3 = (void **)(a1 + 8);
  sub_216889A04(&v3);
  return a1;
}

void sub_216C9173C(char *a1)
{
  *(void *)a1 = &unk_26C75F628;
  unint64_t v2 = (void **)(a1 + 8);
  sub_216889A04(&v2);
  operator delete(a1);
}

uint64_t sub_216C91798(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216C91644();
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 32));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216C91828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_216C9183C(pxrInternal__aapl__pxrReserved__ *a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *((void *)a1 + 1);
  std::string __p = *(void **)a1;
  uint64_t v3 = *((void *)a1 + 2);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  BOOL HasConcurrency = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1);
  if (HasConcurrency)
  {
    uint64_t DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    uint64_t v6 = *(void *)(DetachedDispatcher + 256);
    v10[0] = 0;
    v10[1] = v6;
    long long v7 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v10, 0x28uLL);
    *((unsigned char *)v7 - 11) = 1;
    *long long v7 = &unk_26C75F670;
    v7[1] = v1;
    _DWORD v7[2] = v2;
    v7[3] = v3;
    void v7[4] = DetachedDispatcher + 264;
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__ *)(**(uint64_t (***)(void))*(v7 - 5))();
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v8);
  }
  else
  {
    sub_216C9195C();
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_216C91940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C9195C()
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  v0 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v0) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  uint64_t v1 = sub_216862604(&v3, 0);
  char v4 = 0;
  uint64_t v2 = (void *)sub_2168520EC(v0 + 19, &v4);
  if (v2 != v1) {
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v0, v1, v2);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_216C919E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216C919FC(void *a1)
{
  *a1 = &unk_26C75F670;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_216C91A4C(void *__p)
{
  void *__p = &unk_26C75F670;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t sub_216C91AAC(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216C9195C();
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 32));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216C91B3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C91B50(uint64_t *a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__ *)sub_2168C06A4((uint64_t)v7, a1);
  BOOL HasConcurrency = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v1);
  if (HasConcurrency)
  {
    uint64_t DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    unint64_t v4 = sub_216C91C90(DetachedDispatcher, v7);
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__ *)(**(uint64_t (***)(void, void *, uint64_t))*(v4 - 5))(*(v4 - 5), v4, (uint64_t)(v4 - 1));
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v5);
  }
  else
  {
    sub_216C91BF0();
  }
  return sub_216C80A50((uint64_t)v7);
}

void sub_216C91BDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C80A50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C91BF0()
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  v0 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v0) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  uint64_t v1 = sub_216862604(&v3, 0);
  char v4 = 0;
  unint64_t v2 = (void *)sub_2168520EC(v0 + 19, &v4);
  if (v2 != v1) {
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v0, v1, v2);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_216C91C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216C91C90(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 256);
  v7[0] = 0;
  v7[1] = v4;
  uint64_t v5 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0x38uLL);
  *((unsigned char *)v5 - 11) = 1;
  void *v5 = &unk_26C75F6B8;
  sub_2168C06A4((uint64_t)(v5 + 1), a2);
  v5[6] = a1 + 264;
  return v5;
}

void *sub_216C91D14(void *a1)
{
  *a1 = &unk_26C75F6B8;
  sub_216C80A50((uint64_t)(a1 + 1));
  return a1;
}

void sub_216C91D58(void *a1)
{
  *a1 = &unk_26C75F6B8;
  sub_216C80A50((uint64_t)(a1 + 1));

  operator delete(a1);
}

uint64_t sub_216C91DAC(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216C91BF0();
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 48));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216C91E3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_216C91E50(uint64_t a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__ *)sub_216C91F08((uint64_t)v6, a1);
  BOOL HasConcurrency = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v1);
  if (HasConcurrency)
  {
    uint64_t DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    unint64_t v4 = sub_216C9205C(DetachedDispatcher, (uint64_t)v6);
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__ *)(**(uint64_t (***)(void, void *, uint64_t))*(v4 - 5))(*(v4 - 5), v4, (uint64_t)(v4 - 1));
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v5);
  }
  else
  {
    sub_216C91FBC();
  }
  uint64_t v8 = (void **)&v7;
  sub_216C7727C(&v8);
}

void sub_216C91EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 - 24) = &a11;
  sub_216C7727C((void ***)(v11 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_216C91F08(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  unint64_t v4 = (uint64_t *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v5 = *(int **)(a1 + 8);
  if (v5 == *(int **)(a1 + 16)) {
    uint64_t v5 = sub_216C807D0();
  }
  *(void *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(void *)a2 = 0;
  sub_216C772D0(v4);
  unint64_t v6 = sub_216C807D0();
  *(_WORD *)(a2 + 72) = 0;
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return a1;
}

void sub_216C91FBC()
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  v0 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v0) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  uint64_t v1 = sub_216862604(&v3, 0);
  char v4 = 0;
  unint64_t v2 = (void *)sub_2168520EC(v0 + 19, &v4);
  if (v2 != v1) {
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v0, v1, v2);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_216C92048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216C9205C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 256);
  v7[0] = 0;
  v7[1] = v4;
  uint64_t v5 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0x60uLL);
  *((unsigned char *)v5 - 11) = 1;
  void *v5 = &unk_26C75F700;
  sub_216C91F08((uint64_t)(v5 + 1), a2);
  v5[11] = a1 + 264;
  return v5;
}

uint64_t sub_216C920E0(uint64_t a1)
{
  *(void *)a1 = &unk_26C75F700;
  unint64_t v3 = (void **)(a1 + 16);
  sub_216C7727C(&v3);
  return a1;
}

void sub_216C92138(char *a1)
{
  *(void *)a1 = &unk_26C75F700;
  unint64_t v2 = (void **)(a1 + 16);
  sub_216C7727C(&v2);
  operator delete(a1);
}

uint64_t sub_216C92194(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216C91FBC();
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 88));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216C92224(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C92238(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 728);
  if (v2) {
    sub_216784EC4(v2);
  }
  sub_216C7894C((void *)(a1 + 680));
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(a1 + 344));
  sub_216C789D0((void *)(a1 + 320));
  sub_216C78B28((void *)(a1 + 296));
  unint64_t v3 = *(void **)(a1 + 280);
  *(void *)(a1 + 280) = 0;
  if (v3) {
    operator delete[](v3);
  }
  if (*(char *)(a1 + 247) < 0) {
    operator delete(*(void **)(a1 + 224));
  }
  uint64_t v5 = (void **)(a1 + 200);
  sub_216C7ACE0(&v5);
  sub_216C7AD78(a1 + 160);
  sub_216850320(a1 + 120);
  sub_216C7AE00(a1 + 80);
  sub_216850298(a1 + 40);
  return sub_2168C08A0(a1);
}

uint64_t sub_216C922E4(uint64_t *a1, char *a2, void *a3, void *a4)
{
  uint64_t v5 = *a1;
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666) {
    sub_21677CB10();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x333333333333333) {
    unint64_t v13 = 0x666666666666666;
  }
  else {
    unint64_t v13 = v7;
  }
  uint64_t v22 = a1 + 2;
  if (v13) {
    uint64_t v14 = (char *)sub_2168720A4(v11, v13);
  }
  else {
    uint64_t v14 = 0;
  }
  char v18 = v14;
  unint64_t v19 = &v14[40 * v6];
  char v20 = v19;
  uint64_t v21 = &v14[40 * v13];
  unint64_t v15 = sub_216779094(v19, a2);
  v15[3] = *a3;
  v15[4] = *a4;
  v20 += 40;
  sub_216C9240C(a1, &v18);
  uint64_t v16 = a1[1];
  sub_2168867A0((uint64_t)&v18);
  return v16;
}

void sub_216C923F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168867A0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C9240C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216C92484((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216C92484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 40);
      *(void *)(v8 - 24) = *(void *)(a3 - 24);
      *(_OWORD *)(v8 - 40) = v9;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 40) = 0;
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(void *)(v8 - 8) = *(void *)(a3 - 8);
      v8 -= 40;
      v7 -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216C9253C((uint64_t)v12);
  return v10;
}

uint64_t sub_216C9253C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216886758(a1);
  }
  return a1;
}

uint64_t sub_216C92574(uint64_t a1, unint64_t a2, float a3, float a4)
{
  unint64_t v12 = a2;
  sub_21686EB98((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >= 0x666666666666667)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_216767B04(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_264293928, MEMORY[0x263F8C060]);
  }
  sub_216C92720((void *)(a1 + 8), v12);
  uint64_t v7 = *(__int16 **)(a1 + 8);
  if (v7 == *(__int16 **)(a1 + 16)) {
    uint64_t v7 = sub_216C926A0();
  }
  unint64_t v8 = v12;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8) {
    *(unsigned char *)(*(void *)(a1 + 16) - 38) = 1;
  }
  float v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(void *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_216C9268C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__int16 *sub_216C926A0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798C820, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798C820))
  {
    word_26798C7F8 = -1;
    byte_26798C7FA = 1;
    __cxa_atexit((void (*)(void *))sub_216C7AF8C, &word_26798C7F8, &dword_216758000);
    __cxa_guard_release(&qword_26798C820);
  }
  return &word_26798C7F8;
}

void *sub_216C92720(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2168724E8(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 40 * a2;
    do
    {
      *(_WORD *)uint64_t v4 = -1;
      *(unsigned char *)(v4 + 2) = 0;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_216C92794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

__int16 *sub_216C927A8(uint64_t *a1, double *a2, uint64_t a3, uint64_t **a4)
{
  double v7 = *a2;
  if (*a2 == 0.0) {
    double v8 = 0.0;
  }
  else {
    double v8 = *a2;
  }
  uint64_t v9 = *a1;
  uint64_t v10 = a1[4];
  uint64_t v11 = *(void *)&v8 & *a1;
  uint64_t result = (__int16 *)(v10 + 40 * v11);
  if (*result < 0)
  {
    LOWORD(v13) = 0;
  }
  else
  {
    if (*(double *)(v10 + 40 * v11 + 8) == v7) {
      return result;
    }
    LOWORD(v13) = 0;
    while (1)
    {
      int v13 = (__int16)(v13 + 1);
      uint64_t v11 = (v11 + 1) & v9;
      uint64_t result = (__int16 *)(v10 + 40 * v11);
      if (v13 > *result) {
        break;
      }
      if (*(double *)(v10 + 40 * v11 + 8) == v7) {
        return result;
      }
    }
  }
  char v14 = sub_216C9294C((uint64_t)a1);
  uint64_t v15 = a1[4];
  if (v14)
  {
    uint64_t v11 = *(void *)&v8 & *a1;
    if (*(__int16 *)(v15 + 40 * v11) < 0)
    {
      LOWORD(v13) = 0;
      int v16 = *(unsigned __int16 *)(v15 + 40 * v11);
    }
    else
    {
      LOWORD(v13) = 0;
      do
      {
        int v13 = (__int16)(v13 + 1);
        uint64_t v11 = (v11 + 1) & *a1;
      }
      while (v13 <= *(__int16 *)(v15 + 40 * v11));
      int v16 = *(unsigned __int16 *)(v15 + 40 * v11);
    }
  }
  else
  {
    int v16 = *(unsigned __int16 *)(v15 + 40 * v11);
  }
  if (v16 == 0xFFFF)
  {
    uint64_t v17 = v15 + 40 * v11;
    *(void *)(v17 + 8) = **a4;
    *(void *)(v17 + 24) = 0;
    *(void *)(v17 + 32) = 0;
    *(void *)(v17 + 16) = 0;
    *(_WORD *)uint64_t v17 = v13;
  }
  else
  {
    sub_216C92A14(a1, v11, v13, *(uint64_t *)&v8, a3, a4);
  }
  ++a1[6];
  return (__int16 *)(a1[4] + 40 * v11);
}

uint64_t sub_216C9294C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72) || (unint64_t v2 = *(void *)(a1 + 48), v2 >= *(void *)(a1 + 56)))
  {
    unint64_t v6 = sub_21686E8DC((void *)a1);
    sub_216C92A5C(a1, v6);
    *(unsigned char *)(a1 + 72) = 0;
    return 1;
  }
  if (*(unsigned char *)(a1 + 73))
  {
    *(unsigned char *)(a1 + 73) = 0;
    float v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      unint64_t v4 = *(void *)(a1 + 40);
      float v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        float v8 = *(float *)(a1 + 68);
        unint64_t v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        unint64_t v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9) {
          unint64_t v11 = v9;
        }
        else {
          unint64_t v11 = v10;
        }
        sub_216C92A5C(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

void sub_216C92A14(uint64_t *a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, uint64_t **a6)
{
  uint64_t v6 = **a6;
  float v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  sub_216C92C00(a1, a2, a3, a4, &v6);
  if (__p)
  {
    float v8 = __p;
    operator delete(__p);
  }
}

void sub_216C92A5C(uint64_t a1, unint64_t a2)
{
  sub_216C92574((uint64_t)&v8, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  float v3 = *(void **)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 16);
  if (v3 != v4)
  {
    float v5 = v3 + 1;
    do
    {
      if (*((__int16 *)v5 - 4) != -1)
      {
        if (*(double *)v5 == 0.0) {
          uint64_t v6 = 0;
        }
        else {
          uint64_t v6 = *v5;
        }
        sub_216C92B40(&v8, v6 & v8, 0, v6, v5);
      }
      double v7 = v5 + 4;
      v5 += 5;
    }
    while (v7 != v4);
  }
  void v9[5] = *(void *)(a1 + 48);
  sub_21686E9D4(&v8, (uint64_t *)a1);
  unint64_t v10 = (void **)v9;
  sub_216C7AEC0(&v10);
}

void sub_216C92B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 - 40) = &a11;
  sub_216C7AEC0((void ***)(v11 - 40));
  _Unwind_Resume(a1);
}

__n128 sub_216C92B40(void *a1, uint64_t a2, __int16 a3, uint64_t a4, void *a5)
{
  while (1)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = (__int16 *)(v5 + 40 * a2);
    int v7 = *v6;
    if (v7 >= a3) {
      goto LABEL_4;
    }
    uint64_t v8 = (void *)(v5 + 40 * a2 + 8);
    uint64_t v9 = *a5;
    if (v7 == -1) {
      break;
    }
    *a5 = *v8;
    *uint64_t v8 = v9;
    unint64_t v10 = (void *)(v5 + 40 * a2);
    uint64_t v11 = a5[1];
    a5[1] = v10[2];
    void v10[2] = v11;
    uint64_t v12 = a5[2];
    a5[2] = v10[3];
    v10[3] = v12;
    uint64_t v13 = a5[3];
    a5[3] = v10[4];
    v10[4] = v13;
    *uint64_t v6 = a3;
    a3 = v7;
LABEL_4:
    ++a3;
    a2 = *a1 & (a2 + 1);
  }
  *uint64_t v8 = v9;
  char v14 = (__n128 *)(v5 + 40 * a2);
  v14[1].n128_u64[1] = 0;
  v14[2].n128_u64[0] = 0;
  v14[1].n128_u64[0] = 0;
  __n128 result = *(__n128 *)(a5 + 1);
  v14[1] = result;
  v14[2].n128_u64[0] = a5[3];
  a5[1] = 0;
  a5[2] = 0;
  a5[3] = 0;
  *uint64_t v6 = a3;
  return result;
}

__n128 sub_216C92C00(uint64_t *a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, void *a5)
{
  uint64_t v5 = (unsigned __int16 *)(a1[4] + 40 * a2);
  unint64_t v6 = *a5;
  *a5 = *((void *)v5 + 1);
  *((void *)v5 + 1) = v6;
  uint64_t v7 = a5[1];
  a5[1] = *((void *)v5 + 2);
  *((void *)v5 + 2) = v7;
  uint64_t v8 = a5[2];
  a5[2] = *((void *)v5 + 3);
  *((void *)v5 + 3) = v8;
  uint64_t v9 = a5[3];
  a5[3] = *((void *)v5 + 4);
  *((void *)v5 + 4) = v9;
  int v10 = *v5;
  unsigned __int16 *v5 = a3;
  uint64_t v11 = *a1;
  uint64_t v12 = (a2 + 1) & *a1;
  int v13 = v10 + 1;
  uint64_t v14 = a1[4];
  uint64_t v15 = (_WORD *)(v14 + 40 * v12);
  for (int i = (unsigned __int16)*v15; i != 0xFFFF; int i = (unsigned __int16)*v15)
  {
    if ((__int16)v13 <= (__int16)i)
    {
      int i = v13;
    }
    else
    {
      if ((__int16)v13 >= 4096) {
        *((unsigned char *)a1 + 72) = 1;
      }
      uint64_t v17 = (void *)(v14 + 40 * v12);
      unint64_t v18 = *a5;
      *a5 = v17[1];
      v17[1] = v18;
      uint64_t v19 = a5[1];
      a5[1] = v17[2];
      v17[2] = v19;
      uint64_t v20 = a5[2];
      a5[2] = v17[3];
      v17[3] = v20;
      uint64_t v21 = a5[3];
      a5[3] = v17[4];
      v17[4] = v21;
      *uint64_t v15 = v13;
      uint64_t v14 = a1[4];
    }
    uint64_t v12 = (v12 + 1) & v11;
    int v13 = i + 1;
    uint64_t v15 = (_WORD *)(v14 + 40 * v12);
  }
  uint64_t v22 = (__n128 *)(v14 + 40 * v12);
  v22->n128_u64[1] = *a5;
  v22[1].n128_u64[1] = 0;
  v22[2].n128_u64[0] = 0;
  v22[1].n128_u64[0] = 0;
  __n128 result = *(__n128 *)(a5 + 1);
  v22[1] = result;
  v22[2].n128_u64[0] = a5[3];
  a5[1] = 0;
  a5[2] = 0;
  a5[3] = 0;
  *uint64_t v15 = v13;
  return result;
}

void sub_216C92D48(void *a1, uint64_t a2)
{
  std::string __p = (void *)((uint64_t)(a1[16] - a1[15]) >> 3);
  unint64_t v4 = sub_216C80458(a2, (char *)&__p);
  if (((*(unsigned __int8 *)(a1[791] + 248) << 16) | (*(unsigned __int8 *)(a1[791] + 249) << 8)) > 0x3FFu)
  {
    std::string __p = 0;
    unint64_t __dst = 0;
    uint64_t v26 = 0;
    int v10 = (void *)a1[15];
    uint64_t v9 = (void *)a1[16];
    if (v10 == v9)
    {
      int64_t v14 = 0;
    }
    else
    {
      do
      {
        if ((*v10 & 0xFFFFFFFFFFFFFFF8) != 0) {
          EmptyString = (uint64_t *)((*v10 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v4);
        }
        if (*((char *)EmptyString + 23) < 0)
        {
          int v13 = EmptyString;
          EmptyString = (uint64_t *)*EmptyString;
          uint64_t v12 = v13[1];
        }
        else
        {
          uint64_t v12 = *((unsigned __int8 *)EmptyString + 23);
        }
        unint64_t v4 = (unint64_t)sub_216C92F94((uint64_t)&__p, (char *)__dst, (char *)EmptyString, (char *)EmptyString + v12 + 1, v12 + 1);
        ++v10;
      }
      while (v10 != v9);
      int64_t v14 = (unsigned char *)__dst - (unsigned char *)__p;
    }
    int64_t __src = v14;
    sub_216C80458(a2, (char *)&__src);
    size_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::TfFastCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::TfFastCompression *)((unsigned char *)__dst - (unsigned char *)__p));
    uint64_t v22 = (char *)operator new[](CompressedBufferSize);
    int64_t v23 = pxrInternal__aapl__pxrReserved__::TfFastCompression::CompressToBuffer((pxrInternal__aapl__pxrReserved__::TfFastCompression *)__p, v22, (unsigned char *)__dst - (unsigned char *)__p);
    int64_t __src = v23;
    sub_216C80458(a2, (char *)&__src);
    sub_216C6D370(a2, v22, v23);
    operator delete[](v22);
    if (__p)
    {
      unint64_t __dst = __p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v5 = (void *)a1[15];
    unint64_t v6 = (void *)a1[16];
    if (v5 == v6)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = 0;
      do
      {
        if ((*v5 & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t v4 = (*v5 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t v4 = (unint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v4);
        }
        if (*(char *)(v4 + 23) < 0) {
          uint64_t v8 = *(void *)(v4 + 8);
        }
        else {
          uint64_t v8 = *(unsigned __int8 *)(v4 + 23);
        }
        v7 += v8 + 1;
        ++v5;
      }
      while (v5 != v6);
    }
    std::string __p = v7;
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216C80458(a2, (char *)&__p);
    uint64_t v17 = (void *)a1[15];
    int v16 = (void *)a1[16];
    while (v17 != v16)
    {
      if ((*v17 & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t v18 = (uint64_t *)((*v17 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        unint64_t v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
      }
      if (*((char *)v18 + 23) < 0)
      {
        uint64_t v20 = v18;
        unint64_t v18 = (uint64_t *)*v18;
        uint64_t v19 = v20[1];
      }
      else
      {
        uint64_t v19 = *((unsigned __int8 *)v18 + 23);
      }
      uint64_t v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216C6D370(a2, (char *)v18, v19 + 1);
      ++v17;
    }
  }
}

void sub_216C92F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216C92F94(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  int v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      sub_21677CB10();
    }
    int v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      uint64_t v17 = (char *)operator new(v15);
    }
    else
    {
      size_t v16 = 0;
      uint64_t v17 = 0;
    }
    long long v27 = &v13[(void)v17];
    memcpy(&v13[(void)v17], __src, a5);
    uint64_t v28 = &v13[(void)v17];
    size_t v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(void)v17 - 1] = v13[(void)(v11 - 1)];
        --v13;
      }
      while (v13);
      int v10 = *(char **)(a1 + 8);
      uint64_t v28 = v17;
    }
    uint64_t v30 = &v27[a5];
    uint64_t v31 = &v17[v29];
    if (v10 != v5) {
      memmove(v30, v5, v10 - v5);
    }
    uint64_t v32 = *(char **)a1;
    *(void *)a1 = v28;
    *(void *)(a1 + 8) = &v30[v10 - v5];
    *(void *)(a1 + 16) = v31;
    if (v32) {
      operator delete(v32);
    }
    return v27;
  }
  uint64_t v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    uint64_t v19 = &__src[a5];
    uint64_t v21 = *(char **)(a1 + 8);
LABEL_17:
    uint64_t v22 = &v5[a5];
    int64_t v23 = &v21[-a5];
    uint64_t v24 = v21;
    if (&v21[-a5] < v10)
    {
      int64_t v25 = &v10[a5] - v21;
      uint64_t v24 = v21;
      do
      {
        char v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(void *)(a1 + 8) = v24;
    if (v21 != v22) {
      memmove(&v5[a5], v5, v21 - v22);
    }
    if (v19 != __src) {
      memmove(v5, __src, v19 - __src);
    }
    return v5;
  }
  uint64_t v19 = &__src[v18];
  int64_t v20 = a4 - &__src[v18];
  if (a4 != &__src[v18]) {
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  }
  uint64_t v21 = &v10[v20];
  *(void *)(a1 + 8) = &v10[v20];
  if (v18 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

uint64_t sub_216C93180(uint64_t result, char *__src, uint64_t a3)
{
  uint64_t v3 = 4 * a3;
  if (4 * a3)
  {
    uint64_t v5 = *(void **)(result + 8);
    do
    {
      uint64_t v6 = v5[2];
      uint64_t v7 = v6 - *v5 + 0x80000;
      if (v3 >= v7) {
        size_t v8 = v6 - *v5 + 0x80000;
      }
      else {
        size_t v8 = v3;
      }
      uint64_t v9 = *v5 - v6;
      if ((int64_t)(v8 + v9) > v5[4]) {
        v5[4] = v8 + v9;
      }
      __n128 result = (uint64_t)memcpy((void *)(v5[3] + v9), __src, v8);
      *v5 += v8;
      if (v7 <= v3) {
        __n128 result = sub_216C7A9E4((BOOL)v5);
      }
      __src += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_216C93228(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x492492492492492) {
    sub_21677CB10();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x249249249249249) {
    unint64_t v11 = 0x492492492492492;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    uint64_t v12 = (atomic_uint *)sub_2167B421C(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  size_t v15 = v12;
  size_t v16 = (uint64_t *)&v12[14 * v5];
  uint64_t v18 = &v12[14 * v11];
  sub_216C93350(v16, a2, a3);
  uint64_t v17 = v16 + 7;
  sub_216C9341C(a1, &v15);
  uint64_t v13 = a1[1];
  sub_216C935E4(&v15);
  return v13;
}

void sub_216C9333C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C935E4((atomic_uint **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216C93350(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  a1[2] = v6;
  a1[1] = v7;
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 24), 1u, memory_order_relaxed);
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_21696C2C8(a1 + 3, a3[2], a3[3], (a3[3] - a3[2]) >> 4);
  a1[6] = a3[5];
  return a1;
}

void sub_216C933F0(_Unwind_Exception *a1)
{
  sub_2169CB1D8(v2);
  if ((*v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216C9341C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216C93494((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216C93494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  long long v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 56);
      a3 -= 56;
      *(_OWORD *)(v7 - 56) = v8;
      *(void *)a3 = 0;
      *(void *)(v7 - 40) = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 + 24);
      *(void *)(v7 - 16) = *(void *)(a3 + 40);
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(v7 - 8) = *(void *)(a3 + 48);
      uint64_t v7 = *((void *)&v14 + 1) - 56;
      *((void *)&v14 + 1) -= 56;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_216C93558((uint64_t)v11);
  return v9;
}

uint64_t sub_216C93558(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216C93590((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216C93590(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_216C7FC8C(v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
  return result;
}

atomic_uint **sub_216C935E4(atomic_uint **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

atomic_uint **sub_216C93618(atomic_uint **result)
{
  uint64_t v2 = result[1];
  uint64_t v1 = result[2];
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = (uint64_t)v3[4];
      v3[2] = v1 - 14;
      uint64_t result = sub_216C7FC8C(v4, (uint64_t)(v1 - 14));
      uint64_t v1 = v3[2];
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_216C93660(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_216782ED8(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  long long v13 = v10;
  long long v14 = (uint64_t *)&v10[24 * v4];
  size_t v16 = &v10[24 * v9];
  sub_216A9D680(v14, a2);
  size_t v15 = v14 + 3;
  sub_216A94BDC(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216A94DA0((uint64_t)&v13);
  return v11;
}

void sub_216C93754(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216A94DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C93768(uint64_t *a1, _DWORD *a2, int *a3, uint64_t a4, uint64_t a5, __n128 *a6)
{
  unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x333333333333333) {
    sub_21677CB10();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v8) {
    unint64_t v8 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v14 = 0x333333333333333;
  }
  else {
    unint64_t v14 = v8;
  }
  uint64_t v22 = a1 + 2;
  if (v14) {
    size_t v15 = (char *)sub_216814BD8((uint64_t)(a1 + 2), v14);
  }
  else {
    size_t v15 = 0;
  }
  uint64_t v18 = v15;
  uint64_t v19 = &v15[80 * v7];
  uint64_t v21 = &v15[80 * v14];
  sub_216C938A8((uint64_t)(a1 + 2), (uint64_t)v19, a2, a3, a4, a5, a6);
  int64_t v20 = v19 + 80;
  sub_216C93918(a1, &v18);
  uint64_t v16 = a1[1];
  sub_216C93B3C(&v18);
  return v16;
}

void sub_216C93894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C93B3C((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_216C938A8(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4, uint64_t a5, uint64_t a6, __n128 *a7)
{
  int v7 = *a4;
  *(_DWORD *)a2 = *a3;
  *(_DWORD *)(a2 + 4) = v7;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)a5;
  *(void *)(a2 + 24) = *(void *)(a5 + 16);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)a6;
  *(void *)(a2 + 48) = *(void *)(a6 + 16);
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  __n128 result = *a7;
  *(__n128 *)(a2 + 56) = *a7;
  *(void *)(a2 + 72) = a7[1].n128_u64[0];
  a7->n128_u64[0] = 0;
  a7->n128_u64[1] = 0;
  a7[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_216C93918(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216C93990((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216C93990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 80;
      sub_216C93A48(a1, (void *)(v7 - 80), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 80;
      *((void *)&v16 + 1) -= 80;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216C93AB0((uint64_t)v13);
  return v11;
}

__n128 sub_216C93A48(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = *(void *)a3;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 8);
  a2[3] = *(void *)(a3 + 24);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  a2[4] = 0;
  a2[5] = 0;
  a2[6] = 0;
  *((_OWORD *)a2 + 2) = *(_OWORD *)(a3 + 32);
  a2[6] = *(void *)(a3 + 48);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  a2[7] = 0;
  a2[8] = 0;
  a2[9] = 0;
  __n128 result = *(__n128 *)(a3 + 56);
  *(__n128 *)(a2 + 7) = result;
  a2[9] = *(void *)(a3 + 72);
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  return result;
}

uint64_t sub_216C93AB0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216C93AE8((uint64_t *)a1);
  }
  return a1;
}

void sub_216C93AE8(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_216C809F8(v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void **sub_216C93B3C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216C93B70(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 80;
    sub_216C809F8(v4, i - 80);
  }
}

uint64_t sub_216C93BB8(uint64_t a1, void *__dst, size_t __n)
{
  uint64_t v5 = *(const void **)a1;
  uint64_t v6 = **(void **)(a1 + 8);
  unint64_t v8 = *(void *)(v6 + 24);
  uint64_t v7 = *(void *)(v6 + 32);
  if (v8 > *(void *)a1 || *(void *)a1 + __n > v8 + v7)
  {
    uint64_t v22 = "usd/crateFile.cpp";
    int64_t v23 = "Read";
    uint64_t v24 = 613;
    int64_t v25 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<const pxrInternal__aapl__pxrReserved__::Usd_"
          "CrateFile::CrateFile::_FileMapping *>::Read(void *, size_t) [FileMappingPtr = const pxrInternal__aapl__pxrRese"
          "rved__::Usd_CrateFile::CrateFile::_FileMapping *]";
    char v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", __n, (ptrdiff_t)v5 - v8, v7);
    memset(__dst, 153, __n);
    return 0;
  }
  if (*(void *)(a1 + 16))
  {
    unint64_t v18 = sub_216C6A5EC(v8);
    unint64_t v19 = sub_216C6A5EC(*(void *)a1);
    unint64_t v20 = sub_216C6A5EC(*(void *)a1 + __n - 1);
    memset((void *)(*(void *)(a1 + 16) + v19 - v18), 1, v20 - v19 + 1);
    uint64_t v5 = *(const void **)a1;
    uint64_t v21 = **(void **)(a1 + 8);
    unint64_t v8 = *(void *)(v21 + 24);
    uint64_t v7 = *(void *)(v21 + 32);
  }
  size_t v11 = v7 - ((unint64_t)v5 - v8);
  if (v11 < __n || ((v11 | ((size_t)v5 - v8)) & 0x8000000000000000) != 0)
  {
    uint64_t v22 = "usd/crateFile.cpp";
    int64_t v23 = "Read";
    uint64_t v24 = 631;
    int64_t v25 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<const pxrInternal__aapl__pxrReserved__::Usd_"
          "CrateFile::CrateFile::_FileMapping *>::Read(void *, size_t) [FileMappingPtr = const pxrInternal__aapl__pxrRese"
          "rved__::Usd_CrateFile::CrateFile::_FileMapping *]";
    char v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", __n, v7 - ((unint64_t)v5 - v8), v7);
    return 0;
  }
  if (*(_DWORD *)(a1 + 24))
  {
    uint64_t v12 = sub_216C774E4() & v8;
    uint64_t v13 = *(int *)(a1 + 24);
    uint64_t v14 = *(void *)a1 - v12;
    uint64_t v15 = v12 + v14 / (v13 << 10) * (v13 << 10);
    size_t v16 = (v13 << 10) * ((v14 + __n) / (v13 << 10)) + (v13 << 10);
    if (v16 >= v8 - v12 + *(void *)(**(void **)(a1 + 8) + 32)) {
      size_t v16 = v8 - v12 + *(void *)(**(void **)(a1 + 8) + 32);
    }
    pxrInternal__aapl__pxrReserved__::ArchMemAdvise(v15, v12 + v16 - v15, 1);
    uint64_t v5 = *(const void **)a1;
  }
  memcpy(__dst, v5, __n);
  *(void *)a1 += __n;
  return 1;
}

uint64_t sub_216C93DB8(uint64_t result, char *__src, uint64_t a3)
{
  uint64_t v3 = 16 * a3;
  if (16 * a3)
  {
    uint64_t v5 = *(void **)(result + 8);
    do
    {
      uint64_t v6 = v5[2];
      uint64_t v7 = v6 - *v5 + 0x80000;
      if (v3 >= v7) {
        size_t v8 = v6 - *v5 + 0x80000;
      }
      else {
        size_t v8 = v3;
      }
      uint64_t v9 = *v5 - v6;
      if ((int64_t)(v8 + v9) > v5[4]) {
        v5[4] = v8 + v9;
      }
      __n128 result = (uint64_t)memcpy((void *)(v5[3] + v9), __src, v8);
      *v5 += v8;
      if (v7 <= v3) {
        __n128 result = sub_216C7A9E4((BOOL)v5);
      }
      __src += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return result;
}

uint64_t *sub_216C93E60(uint64_t *a1)
{
  sub_216C93E98(a1);
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    a1[1] = (uint64_t)v2;
    operator delete(v2);
  }
  return a1;
}

void sub_216C93E98(uint64_t *a1)
{
  uint64_t v2 = a1[1] - *a1;
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v2 >> 3;
    do
    {
      uint64_t v5 = *a1;
      uint64_t v6 = *(void *)(*a1 + 8 * v3);
      if (v6)
      {
        do
        {
          uint64_t v7 = *(void *)(v6 + 16);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v6 + 4));
          size_t v8 = sub_21697C414((_DWORD *)v6);
          operator delete(v8);
          uint64_t v6 = v7;
        }
        while (v7);
        uint64_t v5 = *a1;
      }
      *(void *)(v5 + 8 * v3++) = 0;
    }
    while (v3 != v4);
  }
  a1[3] = 0;
}

_DWORD *sub_216C93F24(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

pxrInternal__aapl__pxrReserved__::SdfPath *sub_216C93F64(uint64_t a1, _DWORD *a2)
{
  uint64_t v6 = a2;
  __n128 result = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216C940A0(a1, a2, &v6);
  v5[0] = result;
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    sub_216C93FB4(a1, v5);
    return v5[0];
  }
  return result;
}

_DWORD *sub_216C93FB4(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  uint64_t v3 = *a2;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(*a2, &v10);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v10))
  {
    sub_216981010(&v8, &v10);
    sub_21698105C(v9, &v11);
    v9[1] = -1;
    uint64_t v4 = sub_216C93F64(a1, &v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v9);
    sub_21697C414(&v8);
    uint64_t v5 = *(void *)(v4 + 24);
    if (v5) {
      uint64_t v6 = v5 | 1;
    }
    else {
      uint64_t v6 = v4;
    }
    *((void *)v3 + 4) = v6;
    *(void *)(v4 + 24) = v3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  return sub_21697C414(&v10);
}

void sub_216C9407C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, int a13)
{
}

void *sub_216C940A0(uint64_t a1, unsigned int *a2, _DWORD **a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6)
  {
    sub_216C941E8((void **)a1);
    uint64_t v6 = *(void *)(a1 + 32);
  }
  uint64_t v7 = (void *)(*(void *)a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & v6));
  int v8 = (void *)*v7;
  if (*v7)
  {
    uint64_t v9 = (void *)*v7;
    while (*v9 != *(void *)a2)
    {
      uint64_t v9 = (void *)v9[2];
      if (!v9) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    if (*(void *)(a1 + 24) > (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
    {
      sub_216C941E8((void **)a1);
      uint64_t v7 = (void *)(*(void *)a1
                    + 8
                    * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & *(void *)(a1 + 32)));
      int v8 = (void *)*v7;
    }
    uint64_t v9 = operator new(0x28uLL);
    int v10 = *a3;
    int v11 = sub_216981010(v9, v10);
    sub_21698105C(v11 + 1, v10 + 1);
    *((_DWORD *)v9 + 2) = v10[2];
    v9[3] = 0;
    v9[4] = 0;
    _DWORD v9[2] = v8;
    *uint64_t v7 = v9;
    ++*(void *)(a1 + 24);
  }
  return v9;
}

void sub_216C941E8(void **a1)
{
  sub_216851EE4((uint64_t)&v21, "Sdf", "SdfPathTable::_Grow");
  unsigned __int8 v3 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v3)
  {
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("void pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::PathIndex>::_Grow() [MappedType = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::PathIndex]", 0, v2);
    BOOL v5 = v4 != 0;
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v5 = 0;
  }
  unint64_t v19 = v4;
  unsigned int v20 = v5;
  unint64_t v6 = (2 * (void)a1[4]) | 1;
  if (v6 <= 7) {
    unint64_t v6 = 7;
  }
  a1[4] = (void *)v6;
  sub_216C943A0(&v17, v6 + 1);
  uint64_t v7 = a1[1];
  if (v7 != *a1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (v7 - (unsigned char *)*a1) >> 3;
    do
    {
      int v10 = (unsigned int *)*((void *)*a1 + v8);
      if (v10)
      {
        unint64_t v11 = (unint64_t)a1[4];
        do
        {
          uint64_t v12 = (unsigned int *)*((void *)v10 + 2);
          unint64_t v13 = bswap64(0x9E3779B97F4A7C55* (v10[1]+ ((v10[1]+ (unint64_t)*v10+ (v10[1] + (unint64_t)*v10) * (v10[1] + (unint64_t)*v10)) >> 1))) & v11;
          uint64_t v14 = v17;
          *((void *)v10 + 2) = *(void *)(v17 + 8 * v13);
          *(void *)(v14 + 8 * v13) = v10;
          int v10 = v12;
        }
        while (v12);
      }
      ++v8;
    }
    while (v8 != v9);
    uint64_t v7 = *a1;
  }
  *(_OWORD *)a1 = v17;
  uint64_t v15 = a1[2];
  a1[2] = v18;
  *(void *)&long long v17 = v7;
  unint64_t v18 = v15;
  if (v7)
  {
    *((void *)&v17 + 1) = v7;
    operator delete(v7);
  }
  unsigned int v20 = v5 - 1;
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v4);
    unsigned int v20 = v5 | 0xFFFFFFFE;
  }
  while (v22--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v21);
}

void sub_216C94374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_21684E6B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216C943A0(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21677CACC(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_216C943FC(_Unwind_Exception *exception_object)
{
  unsigned __int8 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C94418(void *a1, unsigned int *a2)
{
  if (!a1[3]) {
    return 0;
  }
  for (__n128 result = *(void **)(*a1
                            + 8
                            * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & a1[4]));
        result;
        __n128 result = (void *)result[2])
  {
    if (*result == *(void *)a2) {
      break;
    }
  }
  return result;
}

unint64_t sub_216C94480(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  for (uint64_t i = *(void *)(*(void *)a1 + 32); ; uint64_t i = *(void *)(result + 32))
  {
    unint64_t result = i & 0xFFFFFFFFFFFFFFF8;
    if ((i & 7) != 0 && result != 0) {
      break;
    }
    if (result) {
      BOOL v4 = (i & 7) == 0;
    }
    else {
      BOOL v4 = 0;
    }
    if (!v4) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_216C944BC(uint64_t a1, char *__src)
{
  unsigned __int8 v3 = *(void **)(a1 + 8);
  uint64_t v4 = 16;
  do
  {
    uint64_t v5 = v3[2];
    uint64_t v6 = v5 - *v3 + 0x80000;
    if (v4 >= v6) {
      size_t v7 = v5 - *v3 + 0x80000;
    }
    else {
      size_t v7 = v4;
    }
    uint64_t v8 = *v3 - v5;
    if ((int64_t)(v7 + v8) > v3[4]) {
      v3[4] = v7 + v8;
    }
    uint64_t result = (uint64_t)memcpy((void *)(v3[3] + v8), __src, v7);
    *v3 += v7;
    if (v6 <= v4) {
      uint64_t result = sub_216C7A9E4((BOOL)v3);
    }
    __src += v7;
    v4 -= v7;
  }
  while (v4);
  return result;
}

uint64_t sub_216C94560(uint64_t a1, char *__src)
{
  unsigned __int8 v3 = *(void **)(a1 + 8);
  uint64_t v4 = 12;
  do
  {
    uint64_t v5 = v3[2];
    uint64_t v6 = v5 - *v3 + 0x80000;
    if (v4 >= v6) {
      size_t v7 = v5 - *v3 + 0x80000;
    }
    else {
      size_t v7 = v4;
    }
    uint64_t v8 = *v3 - v5;
    if ((int64_t)(v7 + v8) > v3[4]) {
      v3[4] = v7 + v8;
    }
    uint64_t result = (uint64_t)memcpy((void *)(v3[3] + v8), __src, v7);
    *v3 += v7;
    if (v6 <= v4) {
      uint64_t result = sub_216C7A9E4((BOOL)v3);
    }
    __src += v7;
    v4 -= v7;
  }
  while (v4);
  return result;
}

uint64_t *sub_216C94604(long long *a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__ *)sub_216C947BC((uint64_t)v7, a1);
  BOOL HasConcurrency = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v1);
  if (HasConcurrency)
  {
    uint64_t DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    uint64_t v4 = sub_216C94838(DetachedDispatcher, v7);
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__ *)(**(uint64_t (***)(void, void *, uint64_t))*(v4 - 5))(*(v4 - 5), v4, (uint64_t)(v4 - 1));
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v5);
  }
  else
  {
    sub_216C9471C();
  }
  return sub_216C93E60((uint64_t *)v7);
}

void sub_216C94690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C93E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

long long *sub_216C946A4(long long *a1, long long *a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *((void *)a2 + 2);
    long long v4 = *a2;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    *((void *)a2 + 4) = 0;
    long long v7 = *a1;
    *a1 = v4;
    uint64_t v8 = *((void *)a1 + 2);
    *((void *)a1 + 2) = v3;
    long long v9 = *(long long *)((char *)a1 + 24);
    *(long long *)((char *)a1 + 24) = v5;
    sub_216C93E60((uint64_t *)&v7);
  }
  return a1;
}

void sub_216C9471C()
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  v0 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v0) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  uint64_t v1 = sub_216862604(&v3, 0);
  char v4 = 0;
  uint64_t v2 = (void *)sub_2168520EC(v0 + 19, &v4);
  if (v2 != v1) {
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v0, v1, v2);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_216C947A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C947BC(uint64_t a1, long long *a2)
{
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  sub_216C946A4((long long *)a1, a2);
  sub_216C946A4(a2, &v5);
  sub_216C93E60((uint64_t *)&v5);
  return a1;
}

void sub_216C9481C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C93E60((uint64_t *)va);
  sub_216C93E60(v2);
  _Unwind_Resume(a1);
}

void *sub_216C94838(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 256);
  v7[0] = 0;
  v7[1] = v4;
  long long v5 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0x38uLL);
  *((unsigned char *)v5 - 11) = 1;
  void *v5 = &unk_26C75F748;
  sub_216C947BC((uint64_t)(v5 + 1), a2);
  v5[6] = a1 + 264;
  return v5;
}

void sub_216C948BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  tbb::internal::allocate_additional_child_of_proxy::free((tbb::internal::allocate_additional_child_of_proxy *)&a9, v9);
  _Unwind_Resume(a1);
}

void *sub_216C948D8(void *a1)
{
  *a1 = &unk_26C75F748;
  sub_216C93E60(a1 + 1);
  return a1;
}

void sub_216C9491C(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26C75F748;
  sub_216C93E60(a1 + 1);

  operator delete(a1);
}

uint64_t sub_216C94970(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216C9471C();
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 48));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216C94A00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_216C94A14(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    unint64_t v4 = v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        sub_216C94AAC((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_216C94AAC(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 1);

  return sub_21697C414(a2);
}

uint64_t sub_216C94AEC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216C94B64((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216C94B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      sub_21697D878((_DWORD *)(v7 - 12), (_DWORD *)(v9 - 12));
      sub_21697D8B4((_DWORD *)(v7 - 8), (_DWORD *)(v9 - 8));
      *(_DWORD *)(v7 - 4) = *(_DWORD *)(v9 - 4);
      uint64_t v7 = *((void *)&v15 + 1) - 12;
      *((void *)&v15 + 1) -= 12;
      v9 -= 12;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216C94C24((uint64_t)v12);
  return v10;
}

uint64_t sub_216C94C24(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216C94C5C((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216C94C5C(uint64_t *result)
{
  uint64_t v1 = *(_DWORD **)(result[2] + 8);
  unint64_t v2 = *(_DWORD **)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_216C94AAC(v3, v1);
      v1 += 3;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_216C94CB0(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

_DWORD *sub_216C94CE4(_DWORD *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2) = v1 - 12;
      uint64_t result = sub_216C94AAC(v4, (_DWORD *)(v1 - 12));
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_216C94D2C(uint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x1555555555555555) {
    sub_21677CB10();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 2);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v11 = 0x1555555555555555;
  }
  else {
    unint64_t v11 = v6;
  }
  void v16[4] = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)sub_216B0D05C(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  char v13 = &v12[12 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v16[3] = &v12[12 * v11];
  sub_216981010(v13, a2);
  sub_21698105C((_DWORD *)v13 + 1, a2 + 1);
  *((_DWORD *)v13 + 2) = *a3;
  v16[2] = v13 + 12;
  sub_216C94AEC(a1, v16);
  uint64_t v14 = a1[1];
  sub_216C94CB0(v16);
  return v14;
}

void sub_216C94E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C94CB0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C94E48(uint64_t result, int *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (int *)result;
  while (2)
  {
    unint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 3);
    uint64_t v63 = a2 - 9;
    BOOL v65 = a2 - 6;
    unint64_t v11 = v9;
    uint64_t v67 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (a2 - v11);
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t result = sub_2169817E8(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
                if (result)
                {
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v9, (int *)v10);
                  uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v9 + 1, a2 - 2);
                  int v28 = v9[2];
                  _DWORD v9[2] = *(a2 - 1);
                  *(a2 - 1) = v28;
                }
                break;
              case 3uLL:
                uint64_t result = sub_216C95BB8(v9, v9 + 3, (int *)v10);
                break;
              case 4uLL:
                uint64_t result = sub_216C95F80(v9, v9 + 3, v9 + 6, (int *)v10);
                break;
              case 5uLL:
                uint64_t result = sub_216C95A88(v9, v9 + 3, v9 + 6, v9 + 9, (int *)v10);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 287)
          {
            if (a4)
            {
              if (v9 != a2)
              {
                size_t v29 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 3);
                if (v9 + 3 != a2)
                {
                  uint64_t v30 = 0;
                  uint64_t v31 = v9;
                  do
                  {
                    uint64_t v32 = v29;
                    uint64_t result = sub_2169817E8(v29, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v31);
                    if (result)
                    {
                      int v71 = *(_DWORD *)v32;
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v32);
                      int v72 = v31[4];
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v31 + 4);
                      int v73 = v31[5];
                      uint64_t v33 = v30;
                      while (1)
                      {
                        uint64_t v34 = (int *)((char *)v9 + v33);
                        sub_21697DE94((int *)((char *)v9 + v33 + 12), (int *)((char *)v9 + v33));
                        uint64_t v35 = (int *)((char *)v9 + v33 + 4);
                        sub_21697DEEC(v34 + 4, v34 + 1);
                        v34[5] = v34[2];
                        if (!v33) {
                          break;
                        }
                        v33 -= 12;
                        if ((sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v71, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v34 - 3)) & 1) == 0)
                        {
                          char v36 = (int *)((char *)v9 + v33 + 12);
                          goto LABEL_69;
                        }
                      }
                      char v36 = v9;
LABEL_69:
                      sub_21697DE94(v36, &v71);
                      sub_21697DEEC(v35, &v72);
                      v36[2] = v73;
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v72);
                      a2 = v67;
                      uint64_t result = (uint64_t)sub_21697C414(&v71);
                    }
                    size_t v29 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v32 + 12);
                    v30 += 12;
                    uint64_t v31 = (int *)v32;
                  }
                  while ((int *)((char *)v32 + 12) != a2);
                }
              }
            }
            else if (v9 != a2)
            {
              BOOL v58 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 3);
              if (v9 + 3 != a2)
              {
                unsigned int v59 = v9 + 5;
                do
                {
                  long long v60 = (int *)v58;
                  uint64_t result = sub_2169817E8(v58, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
                  if (result)
                  {
                    int v71 = *v60;
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v60);
                    int v72 = v9[4];
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v9 + 4);
                    int v73 = v9[5];
                    long long v61 = v59;
                    do
                    {
                      sub_21697DE94(v61 - 2, v61 - 5);
                      sub_21697DEEC(v61 - 1, v61 - 4);
                      *long long v61 = *(v61 - 3);
                      char v62 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v71, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v61 - 8));
                      v61 -= 3;
                    }
                    while ((v62 & 1) != 0);
                    sub_21697DE94(v61 - 2, &v71);
                    sub_21697DEEC(v61 - 1, &v72);
                    *long long v61 = v73;
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v72);
                    uint64_t result = (uint64_t)sub_21697C414(&v71);
                  }
                  BOOL v58 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v60 + 3);
                  v59 += 3;
                  uint64_t v9 = v60;
                }
                while (v60 + 3 != a2);
              }
            }
            return result;
          }
          if (!a3)
          {
            if (v9 != a2)
            {
              int64_t v66 = (v13 - 2) >> 1;
              int64_t v37 = v66;
              do
              {
                int64_t v38 = v37;
                if (v66 >= v37)
                {
                  uint64_t v39 = (2 * v37) | 1;
                  unint64_t v40 = &v9[3 * v39];
                  if (2 * v37 + 2 < (uint64_t)v13
                    && sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v9[3 * v39], (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v40 + 3)))
                  {
                    v40 += 3;
                    uint64_t v39 = 2 * v38 + 2;
                  }
                  unint64_t v41 = &v9[3 * v38];
                  if ((sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v41) & 1) == 0)
                  {
                    int v71 = *v41;
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(&v9[3 * v38]);
                    int v72 = v41[1];
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v41 + 1);
                    int v73 = v9[3 * v38 + 2];
                    do
                    {
                      int v42 = v40;
                      sub_21697DE94(v41, v40);
                      long long v43 = v40 + 1;
                      sub_21697DEEC(v41 + 1, v40 + 1);
                      void v41[2] = v40[2];
                      if (v66 < v39) {
                        break;
                      }
                      uint64_t v44 = (2 * v39) | 1;
                      unint64_t v40 = &v9[3 * v44];
                      uint64_t v39 = 2 * v39 + 2;
                      if (v39 < (uint64_t)v13)
                      {
                        if (sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v9[3 * v44], (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v40 + 3)))v40 += 3; {
                        else
                        }
                          uint64_t v39 = v44;
                      }
                      else
                      {
                        uint64_t v39 = v44;
                      }
                      unint64_t v41 = v42;
                    }
                    while (!sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v71));
                    sub_21697DE94(v42, &v71);
                    sub_21697DEEC(v43, &v72);
                    v42[2] = v73;
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v72);
                    sub_21697C414(&v71);
                  }
                }
                int64_t v37 = v38 - 1;
              }
              while (v38);
              int64_t v45 = v12 / 0xCuLL;
              uint64_t v64 = v9 + 1;
              unint64_t v46 = v67;
              do
              {
                int v68 = *v9;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v9);
                int v69 = *v64;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v64);
                uint64_t v47 = 0;
                int v70 = v9[2];
                size_t v48 = v9;
                do
                {
                  long long v49 = &v48[3 * v47 + 3];
                  uint64_t v50 = (2 * v47) | 1;
                  uint64_t v51 = 2 * v47 + 2;
                  if (v51 < v45
                    && sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48[3 * v47 + 3], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v48[3 * v47 + 6]))
                  {
                    v49 += 3;
                    uint64_t v50 = v51;
                  }
                  sub_21697DE94(v48, v49);
                  sub_21697DEEC(v48 + 1, v49 + 1);
                  v48[2] = v49[2];
                  size_t v48 = v49;
                  uint64_t v47 = v50;
                }
                while (v50 <= (uint64_t)((unint64_t)(v45 - 2) >> 1));
                if (v49 == v46 - 3)
                {
                  sub_21697DE94(v49, &v68);
                  sub_21697DEEC(v49 + 1, &v69);
                  v49[2] = v70;
                }
                else
                {
                  sub_21697DE94(v49, v46 - 3);
                  sub_21697DEEC(v49 + 1, v46 - 2);
                  v49[2] = *(v46 - 1);
                  sub_21697DE94(v46 - 3, &v68);
                  sub_21697DEEC(v46 - 2, &v69);
                  *(v46 - 1) = v70;
                  uint64_t v52 = (char *)v49 - (char *)v9 + 12;
                  if (v52 >= 13)
                  {
                    unint64_t v53 = (v52 / 0xCuLL - 2) >> 1;
                    unint64_t v54 = &v9[3 * v53];
                    if (sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)v54, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v49))
                    {
                      int v71 = *v49;
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v49);
                      int v72 = v49[1];
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v49 + 1);
                      int v73 = v49[2];
                      do
                      {
                        char v55 = v54;
                        sub_21697DE94(v49, v54);
                        long long v56 = v54 + 1;
                        sub_21697DEEC(v49 + 1, v54 + 1);
                        v49[2] = v54[2];
                        if (!v53) {
                          break;
                        }
                        unint64_t v53 = (v53 - 1) >> 1;
                        unint64_t v54 = &v9[3 * v53];
                        long long v49 = v55;
                      }
                      while ((sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)v54, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v71) & 1) != 0);
                      sub_21697DE94(v55, &v71);
                      sub_21697DEEC(v56, &v72);
                      v55[2] = v73;
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v72);
                      sub_21697C414(&v71);
                    }
                  }
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v69);
                uint64_t result = (uint64_t)sub_21697C414(&v68);
                v46 -= 3;
              }
              while (v45-- > 2);
            }
            return result;
          }
          uint64_t v14 = &v9[3 * (v13 >> 1)];
          if ((unint64_t)v12 >= 0x601)
          {
            sub_216C95BB8(v9, &v9[3 * (v13 >> 1)], (int *)v10);
            long long v15 = &v9[3 * (v13 >> 1)];
            sub_216C95BB8(v9 + 3, v15 - 3, v65);
            sub_216C95BB8(v9 + 6, &v9[3 * (v13 >> 1) + 3], v63);
            sub_216C95BB8(v15 - 3, v14, &v9[3 * (v13 >> 1) + 3]);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v9, v14);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v9 + 1, v14 + 1);
            int v16 = v9[2];
            _DWORD v9[2] = v15[2];
            v15[2] = v16;
          }
          else
          {
            sub_216C95BB8(&v9[3 * (v13 >> 1)], v9, (int *)v10);
          }
          --a3;
          a2 = v67;
          if ((a4 & 1) != 0
            || (sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 - 3), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v9) & 1) != 0)
          {
            break;
          }
          int v71 = *v9;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v9);
          int v72 = v9[1];
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v9 + 1);
          int v73 = v9[2];
          if (sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v71, v10))
          {
            unint64_t v11 = v9;
            do
              v11 += 3;
            while ((sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v71, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v11) & 1) == 0);
          }
          else
          {
            uint64_t v24 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 3);
            do
            {
              unint64_t v11 = (int *)v24;
              if (v24 >= (const pxrInternal__aapl__pxrReserved__::SdfPath *)v67) {
                break;
              }
              int v25 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v71, v24);
              uint64_t v24 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 3);
            }
            while (!v25);
          }
          char v26 = v67;
          if (v11 < v67)
          {
            char v26 = v67;
            do
              v26 -= 3;
            while ((sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v71, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v26) & 1) != 0);
          }
          while (v11 < v26)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v11, v26);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v11 + 1, v26 + 1);
            int v27 = v11[2];
            long long v11[2] = v26[2];
            v26[2] = v27;
            do
              v11 += 3;
            while (!sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v71, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v11));
            do
              v26 -= 3;
            while ((sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v71, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v26) & 1) != 0);
          }
          if (v11 - 3 != v9)
          {
            sub_21697DE94(v9, v11 - 3);
            sub_21697DEEC(v9 + 1, v11 - 2);
            _DWORD v9[2] = *(v11 - 1);
          }
          sub_21697DE94(v11 - 3, &v71);
          sub_21697DEEC(v11 - 2, &v72);
          *(v11 - 1) = v73;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v72);
          uint64_t result = (uint64_t)sub_21697C414(&v71);
          a4 = 0;
        }
        int v71 = *v9;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v9);
        int v72 = v9[1];
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v9 + 1);
        uint64_t v17 = 0;
        int v73 = v9[2];
        do
        {
          char v18 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v9[v17 + 3], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v71);
          v17 += 3;
        }
        while ((v18 & 1) != 0);
        unint64_t v19 = &v9[v17];
        unsigned int v20 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v67;
        if (v17 == 3)
        {
          unsigned int v20 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v67;
          do
          {
            if (v19 >= (int *)v20) {
              break;
            }
            unsigned int v20 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v20 - 12);
          }
          while ((sub_2169817E8(v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v71) & 1) == 0);
        }
        else
        {
          do
            unsigned int v20 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v20 - 12);
          while (!sub_2169817E8(v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v71));
        }
        unint64_t v11 = &v9[v17];
        if (v19 < (int *)v20)
        {
          uint64_t v21 = (int *)v20;
          do
          {
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v11, v21);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v11 + 1, v21 + 1);
            int v22 = v11[2];
            long long v11[2] = v21[2];
            v21[2] = v22;
            do
              v11 += 3;
            while ((sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v71) & 1) != 0);
            do
              v21 -= 3;
            while (!sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)v21, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v71));
          }
          while (v11 < v21);
        }
        if (v11 - 3 != v9)
        {
          sub_21697DE94(v9, v11 - 3);
          sub_21697DEEC(v9 + 1, v11 - 2);
          _DWORD v9[2] = *(v11 - 1);
        }
        sub_21697DE94(v11 - 3, &v71);
        sub_21697DEEC(v11 - 2, &v72);
        *(v11 - 1) = v73;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v72);
        sub_21697C414(&v71);
        BOOL v4 = v19 >= (int *)v20;
        a2 = v67;
        if (v4) {
          break;
        }
LABEL_32:
        uint64_t result = sub_216C94E48(v9, v11 - 3, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v23 = sub_216C95D04(v9, v11 - 3);
      uint64_t result = sub_216C95D04(v11, v67);
      if (result) {
        break;
      }
      if (!v23) {
        goto LABEL_32;
      }
    }
    a2 = v11 - 3;
    if (!v23) {
      continue;
    }
    return result;
  }
}

void sub_216C95954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v16);
  sub_21697C414(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_216C95A88(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  sub_216C95F80(a1, a2, a3, a4);
  uint64_t result = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a4);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a4, a5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a4 + 1, a5 + 1);
    int v11 = a4[2];
    a4[2] = a5[2];
    a5[2] = v11;
    uint64_t result = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a3, a4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a3 + 1, a4 + 1);
      int v12 = a3[2];
      a3[2] = a4[2];
      a4[2] = v12;
      uint64_t result = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
      if (result)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a2 + 1, a3 + 1);
        int v13 = a2[2];
        a2[2] = a3[2];
        a3[2] = v13;
        uint64_t result = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
        if (result)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
          uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 + 1);
          int v14 = a1[2];
          a1[2] = a2[2];
          a2[2] = v14;
        }
      }
    }
  }
  return result;
}

uint64_t sub_216C95BB8(int *a1, int *a2, int *a3)
{
  char v6 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  uint64_t result = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
  if (v6)
  {
    if (result)
    {
      uint64_t v8 = a1 + 2;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a3);
      uint64_t v9 = a3 + 1;
      unint64_t v10 = a1 + 1;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 + 1);
      uint64_t v8 = a2 + 2;
      int v13 = a1[2];
      a1[2] = a2[2];
      a2[2] = v13;
      uint64_t result = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
      if (!result) {
        return result;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
      uint64_t v9 = a3 + 1;
      unint64_t v10 = a2 + 1;
    }
    uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v10, v9);
    int v12 = a3 + 2;
    goto LABEL_10;
  }
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a2 + 1, a3 + 1);
    int v12 = a2 + 2;
    int v11 = a2[2];
    a2[2] = a3[2];
    a3[2] = v11;
    uint64_t result = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
      uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 + 1);
      uint64_t v8 = a1 + 2;
LABEL_10:
      int v14 = *v8;
      *uint64_t v8 = *v12;
      int *v12 = v14;
    }
  }
  return result;
}

BOOL sub_216C95D04(int *a1, int *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 3), (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2 - 3);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 - 2);
        int v6 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v6;
      }
      return 1;
    case 3uLL:
      sub_216C95BB8(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      sub_216C95F80(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_216C95A88(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      uint64_t v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 6);
      sub_216C95BB8(a1, a1 + 3, a1 + 6);
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 9);
      if (a1 + 9 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (sub_2169817E8(v8, v7))
    {
      int v14 = *(_DWORD *)v8;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v8);
      int v15 = *((_DWORD *)v8 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v8 + 1);
      int v16 = *((_DWORD *)v8 + 2);
      uint64_t v11 = v9;
      while (1)
      {
        int v12 = (int *)((char *)a1 + v11);
        sub_21697DE94((int *)((char *)a1 + v11 + 36), (int *)((char *)a1 + v11 + 24));
        sub_21697DEEC(v12 + 10, v12 + 7);
        v12[11] = v12[8];
        if (v11 == -24) {
          break;
        }
        v11 -= 12;
        if ((sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 3)) & 1) == 0)
        {
          int v13 = (int *)((char *)a1 + v11 + 36);
          goto LABEL_12;
        }
      }
      int v13 = a1;
LABEL_12:
      sub_21697DE94(v13, &v14);
      sub_21697DEEC(v12 + 7, &v15);
      v13[2] = v16;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
      ++v10;
      sub_21697C414(&v14);
      if (v10 == 8) {
        return (int *)((char *)v8 + 12) == a2;
      }
    }
    uint64_t v7 = v8;
    v9 += 12;
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 12);
    if (v8 == (pxrInternal__aapl__pxrReserved__::SdfPath *)a2) {
      return 1;
    }
  }
}

void sub_216C95F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
}

uint64_t sub_216C95F80(int *a1, int *a2, int *a3, int *a4)
{
  sub_216C95BB8(a1, a2, a3);
  uint64_t result = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a3, a4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a3 + 1, a4 + 1);
    int v9 = a3[2];
    a3[2] = a4[2];
    a4[2] = v9;
    uint64_t result = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a2 + 1, a3 + 1);
      int v10 = a2[2];
      a2[2] = a3[2];
      a3[2] = v10;
      uint64_t result = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
      if (result)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
        uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 + 1);
        int v11 = a1[2];
        a1[2] = a2[2];
        a2[2] = v11;
      }
    }
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfPath *sub_216C96070(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a1, void *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, void *a5, void *a6, uint64_t *a7)
{
  while (a3 != a4)
  {
    int v12 = a3;
    while (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(v12, a3))
    {
      int v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 + 12);
      if (v12 == a4)
      {
        int v12 = a4;
        break;
      }
    }
    if ((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a3 + 12) == v12)
    {
      BOOL v15 = 0;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a3 + 12), &v27);
      unint64_t v13 = v27;
      uint64_t v14 = *(void *)a3;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
      BOOL v15 = v13 == v14;
      sub_21697C414(&v27);
    }
    if (v12 == a4)
    {
      BOOL v16 = 0;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v12, &v27);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3, &v26);
      BOOL v16 = v27 == (void)v26;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
      sub_21697C414(&v26);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
      sub_21697C414(&v27);
    }
    int IsPrimPropertyPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(a3);
    if (IsPrimPropertyPath)
    {
      unint64_t v18 = *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a3);
      unint64_t v27 = v18;
      if ((v18 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v27 &= 0xFFFFFFFFFFFFFFF8;
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetElementToken(a3, (atomic_uint **)&v27);
    }
    uint64_t v19 = (*a2)++;
    *(_DWORD *)(*a5 + 4 * v19) = *((_DWORD *)a3 + 2);
    int IndexForToken = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetIndexForToken(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v27);
    if (IsPrimPropertyPath) {
      int v21 = -IndexForToken;
    }
    else {
      int v21 = IndexForToken;
    }
    *(_DWORD *)(*a6 + 4 * v19) = v21;
    if (v15)
    {
      a3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216C96070(a1, a2, (char *)a3 + 12, a4, a5);
      if (v16) {
        *(_DWORD *)(*a7 + 4 * v19) = *(_DWORD *)a2 - v19;
      }
      else {
        *(_DWORD *)(*a7 + 4 * v19) = -1;
      }
    }
    else
    {
      uint64_t v22 = *a7;
      if (v16) {
        *(_DWORD *)(v22 + 4 * v19) = 0;
      }
      else {
        *(_DWORD *)(v22 + 4 * v19) = -2;
      }
      a3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a3 + 12);
    }
    if ((v27 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (!v16) {
      return a3;
    }
  }
  return a4;
}

void sub_216C962C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216C9630C(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = sub_21682BF78(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      int v8 = *((_DWORD *)a2 + 2);
      uint64_t v9 = *a2;
      a2 = (uint64_t *)((char *)a2 + 12);
      *(void *)(v7 + 4) = v9;
      *(_DWORD *)(v7 + 12) = v8;
      v7 += 16;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_216C96370(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C9638C(uint64_t result, char *__src, uint64_t a3)
{
  uint64_t v3 = 12 * a3;
  if (12 * a3)
  {
    char v5 = *(void **)(result + 8);
    do
    {
      uint64_t v6 = v5[2];
      uint64_t v7 = v6 - *v5 + 0x80000;
      if (v3 >= v7) {
        size_t v8 = v6 - *v5 + 0x80000;
      }
      else {
        size_t v8 = v3;
      }
      uint64_t v9 = *v5 - v6;
      if ((int64_t)(v8 + v9) > v5[4]) {
        v5[4] = v8 + v9;
      }
      uint64_t result = (uint64_t)memcpy((void *)(v5[3] + v9), __src, v8);
      *v5 += v8;
      if (v7 <= v3) {
        uint64_t result = sub_216C7A9E4((BOOL)v5);
      }
      __src += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_216C96438(uint64_t a1)
{
  *(void *)a1 = &unk_26C75F790;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 60));
  sub_21697C414((_DWORD *)(a1 + 56));
  return a1;
}

void sub_216C96488(_DWORD *a1)
{
  *(void *)a1 = &unk_26C75F790;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 15);
  sub_21697C414(a1 + 14);

  operator delete(a1);
}

uint64_t sub_216C964E8(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12);
  uint64_t v2 = *(void **)(a1 + 8);
  sub_216C84FD8((uint64_t)&v15, "Usd", "Usd_CrateDataImpl::Open", "Usd_CrateFile::CrateFile::Open", "_ReadPaths");
  uint64_t v3 = *(void **)(a1 + 16);
  uint64_t v4 = *(void **)(a1 + 24);
  char v5 = *(void **)(a1 + 32);
  unint64_t v6 = *(void *)(a1 + 40);
  sub_216981010(&v13, (_DWORD *)(a1 + 56));
  sub_21698105C(&v14, (_DWORD *)(a1 + 60));
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BuildDecompressedPathsImpl(v2, v3, v4, v5, v6, &v13, *(void *)(a1 + 48));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  while (v16--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
  unint64_t v8 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v9 = v12;
  unint64_t v10 = atomic_load((unint64_t *)(v8 + 144));
  if (v9 < v10
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12, (atomic_ullong *)v8))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v12, *(void *)(a1 + 64));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12);
  return 0;
}

void sub_216C9662C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, char a12)
{
}

void *sub_216C9665C(uint64_t a1, unsigned int *a2, _DWORD *a3, _DWORD *a4)
{
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = v6;
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = v6 & (v7 - 1);
    }
    unint64_t v9 = *(void **)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      unint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(void *)a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_216C968CC(a1, v6, a3, a4, (uint64_t)v21);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }
  unint64_t v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *(void *)v21[0] = *v18;
    void *v18 = v21[0];
  }
  else
  {
    *(void *)v21[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v21[0])
    {
      unint64_t v19 = *(void *)(*(void *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v21[0];
    }
  }
  unint64_t v10 = (void *)v21[0];
  v21[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216C80400((uint64_t)v21, 0);
  return v10;
}

void sub_216C968B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C80400((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_216C968CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x20uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *unint64_t v10 = 0;
  v10[1] = a2;
  sub_216981010((_DWORD *)v10 + 4, a3);
  uint64_t result = sub_21698105C((_DWORD *)v10 + 5, a3 + 1);
  *((_DWORD *)v10 + 6) = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

uint64_t sub_216C96944(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  size_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_21677CB28(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  float v13 = v10;
  BOOL v14 = &v10[8 * v4];
  unint64_t v16 = &v10[8 * v9];
  sub_216981010(v14, a2);
  sub_21698105C((_DWORD *)v14 + 1, a2 + 1);
  unint64_t v15 = v14 + 8;
  sub_216981C20(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216981DDC(&v13);
  return v11;
}

void sub_216C96A20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216981DDC((void **)va);
  _Unwind_Resume(a1);
}

void *sub_216C96A34(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v9 = sub_216C79FC8((uint64_t)v27, (unsigned int **)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    float v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t result = (void *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = result[1];
          if (v15 == v10)
          {
            size_t v17 = (char *)result[2];
            unint64_t v16 = (char *)result[3];
            if (v16 - v17 == *(void *)(a2 + 8) - *(void *)a2)
            {
              if (v17 == v16) {
                return result;
              }
              for (uint64_t i = *(unsigned int **)a2; *(_DWORD *)v17 == *i; ++i)
              {
                v17 += 4;
                if (v17 == v16) {
                  return result;
                }
              }
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11) {
                v15 %= v11;
              }
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_216C96CD0(a1, v10, a3, a4, (uint64_t)v27);
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_21678A04C(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  int v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)v27[0] = *v25;
    void *v25 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v26 = *(void *)(*(void *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11) {
          v26 %= v11;
        }
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v27[0];
    }
  }
  uint64_t result = (void *)v27[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_216C96CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_216C7A0A8((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C96CD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x30uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *unint64_t v10 = 0;
  v10[1] = a2;
  v10[3] = 0;
  v10[4] = 0;
  void v10[2] = 0;
  uint64_t result = sub_216C7A02C(v10 + 2, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  *((_DWORD *)v10 + 10) = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216C96D60(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_216C7A0A8(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_216C96D7C(uint64_t a1, uint64_t a2, _OWORD *a3, _DWORD *a4)
{
  uint64_t v8 = *(unsigned int *)(a2 + 4);
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * v8);
  uint64_t v10 = *(void *)(a2 + 8);
  unint64_t v11 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (v10 + ((v9 + v10 + (v9 + v10) * (v9 + v10)) >> 1))));
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
    }
    else
    {
      unint64_t v4 = v11 & (v12 - 1);
    }
    BOOL v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      unint64_t v15 = *v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v11)
          {
            if (*((_DWORD *)v15 + 5) == v8 && v15[3] == v10) {
              return v15;
            }
          }
          else
          {
            if (v13.u32[0] > 1uLL)
            {
              if (v16 >= v12) {
                v16 %= v12;
              }
            }
            else
            {
              v16 &= v12 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          unint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  unint64_t v15 = operator new(0x28uLL);
  *unint64_t v15 = 0;
  v15[1] = v11;
  *((_OWORD *)v15 + 1) = *a3;
  *((_DWORD *)v15 + 8) = *a4;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_21678A04C(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v24 = *(void *)a1;
  int v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *unint64_t v15 = *v25;
LABEL_42:
    void *v25 = v15;
    goto LABEL_43;
  }
  *unint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v24 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    unint64_t v26 = *(void *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v26 >= v12) {
        v26 %= v12;
      }
    }
    else
    {
      v26 &= v12 - 1;
    }
    int v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_216C96FD8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_216C96FEC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v7 = a2;
  unint64_t v27 = 0;
  char v28 = 0;
  unint64_t v9 = (char *)*((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    uint64_t v10 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    uint64_t v10 = v9;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v27, (pxrInternal__aapl__pxrReserved__ *)a2, v10);
  unint64_t v11 = bswap64(0x9E3779B97F4A7C55 * (void)v27);
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
    unint64_t v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (sub_2168513F8(a1 + 32, i + 16, v7)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_216C972A8(a1, v11, a3, a4, (uint64_t)&v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_21678A04C(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v24 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)unint64_t v27 = *v24;
    const pxrInternal__aapl__pxrReserved__::SdfPath *v24 = v27;
  }
  else
  {
    *(void *)unint64_t v27 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27)
    {
      unint64_t v25 = *(void *)(*(void *)v27 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27;
    }
  }
  uint64_t i = v27;
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216C97284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_2168517F0((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_216C972A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint64_t v10 = (char *)operator new(0x30uLL);
  *(void *)(a5 + 8) = v9;
  *(void *)a5 = v10;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = a2;
  uint64_t result = v10 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a3;
    *((void *)v10 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v10 + 10) = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216C97344(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_2168517F0(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_216C97360(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *a1 & a3;
  uint64_t v5 = a1[4];
  if (*(__int16 *)(v5 + (v4 << 6) + 4) < 0) {
    return v5 + (a1[5] << 6);
  }
  LOWORD(v7) = 0;
  while (!sub_2168513F8((uint64_t)a1, (unsigned __int8 *)(v5 + (v4 << 6) + 8), a2))
  {
    uint64_t v4 = *a1 & (v4 + 1);
    int v7 = (__int16)(v7 + 1);
    uint64_t v5 = a1[4];
    if (v7 > *(__int16 *)(v5 + (v4 << 6) + 4)) {
      return v5 + (a1[5] << 6);
    }
  }
  return a1[4] + (v4 << 6);
}

uint64_t sub_216C973FC(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = sub_216891D24((uint64_t)&v20, (uint64_t)a2);
  uint64_t v9 = *a1 & v8;
  uint64_t v10 = a1[4];
  if (*(__int16 *)(v10 + (v9 << 6) + 4) < 0)
  {
    LOWORD(v11) = 0;
LABEL_7:
    char v12 = sub_216C97598((uint64_t)a1);
    uint64_t v13 = a1[4];
    if (v12)
    {
      uint64_t v9 = v8 & *a1;
      int v14 = *(__int16 *)(v13 + (v9 << 6) + 4);
      if (v14 < 0)
      {
        LOWORD(v11) = 0;
      }
      else
      {
        LOWORD(v11) = 0;
        do
        {
          int v11 = (__int16)(v11 + 1);
          uint64_t v9 = (v9 + 1) & *a1;
          int v14 = *(__int16 *)(v13 + (v9 << 6) + 4);
        }
        while (v11 <= v14);
      }
      int v15 = (unsigned __int16)v14;
    }
    else
    {
      int v15 = *(unsigned __int16 *)(v13 + (v9 << 6) + 4);
    }
    if (v15 == 0xFFFF)
    {
      unint64_t v16 = *a4;
      uint64_t v17 = v13 + (v9 << 6);
      long long v18 = **a4;
      *(void *)(v17 + 24) = *((void *)*a4 + 2);
      *(_OWORD *)(v17 + 8) = v18;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = 0;
      *(void *)unint64_t v16 = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)uint64_t v17 = v8;
      *(_WORD *)(v17 + 4) = v11;
    }
    else
    {
      sub_216C97660(a1, v9, v11, v8, a3, a4);
    }
    ++a1[6];
  }
  else
  {
    LOWORD(v11) = 0;
    while ((sub_2168513F8((uint64_t)a1, (unsigned __int8 *)(v10 + (v9 << 6) + 8), a2) & 1) == 0)
    {
      uint64_t v9 = *a1 & (v9 + 1);
      int v11 = (__int16)(v11 + 1);
      uint64_t v10 = a1[4];
      if (v11 > *(__int16 *)(v10 + (v9 << 6) + 4)) {
        goto LABEL_7;
      }
    }
  }
  return a1[4] + (v9 << 6);
}

uint64_t sub_216C97598(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72) || (unint64_t v2 = *(void *)(a1 + 48), v2 >= *(void *)(a1 + 56)))
  {
    unint64_t v6 = sub_21686E8DC((void *)a1);
    sub_216C976F8(a1, v6);
    *(unsigned char *)(a1 + 72) = 0;
    return 1;
  }
  if (*(unsigned char *)(a1 + 73))
  {
    *(unsigned char *)(a1 + 73) = 0;
    float v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      unint64_t v4 = *(void *)(a1 + 40);
      float v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        float v8 = *(float *)(a1 + 68);
        unint64_t v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        unint64_t v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9) {
          unint64_t v11 = v9;
        }
        else {
          unint64_t v11 = v10;
        }
        sub_216C976F8(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

void sub_216C97660(uint64_t *a1, uint64_t a2, __int16 a3, int a4, uint64_t a5, _OWORD **a6)
{
  v10[4] = *MEMORY[0x263EF8340];
  unint64_t v6 = *a6;
  uint64_t v7 = *((void *)*a6 + 2);
  *(_OWORD *)std::string __p = **a6;
  uint64_t v9 = v7;
  v6[1] = 0;
  v6[2] = 0;
  *unint64_t v6 = 0;
  v10[3] = 0;
  sub_216C97C44(a1, a2, a3, a4, (uint64_t *)__p);
  sub_216C773C8(v10);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216C976F8(uint64_t a1, unint64_t a2)
{
  sub_216C806B0((uint64_t)&v7, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  float v3 = *(uint64_t **)(a1 + 8);
  unint64_t v4 = *(unsigned int **)(a1 + 16);
  if (v3 != (uint64_t *)v4)
  {
    unint64_t v5 = (unint64_t)(v8[4] - 1) >> 32;
    do
    {
      if (*((__int16 *)v3 + 2) != -1)
      {
        if (v5) {
          unint64_t v6 = sub_216891D24((uint64_t)&v9, (uint64_t)(v3 + 1));
        }
        else {
          unint64_t v6 = *(unsigned int *)v3;
        }
        sub_216C977F4(&v7, v7 & v6, 0, v6, v3 + 1);
      }
      v3 += 8;
    }
    while (v3 != (uint64_t *)v4);
  }
  v8[5] = *(void *)(a1 + 48);
  sub_21686E9D4(&v7, (uint64_t *)a1);
  uint64_t v9 = (void **)v8;
  sub_216C7727C(&v9);
}

void sub_216C977D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 - 56) = &a11;
  sub_216C7727C((void ***)(v11 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_216C977F4(void *a1, uint64_t a2, __int16 a3, int a4, uint64_t *a5)
{
  unint64_t v10 = a5 + 1;
  uint64_t v11 = a5 + 3;
  while (1)
  {
    uint64_t v12 = a1[4];
    uint64_t v13 = (int *)(v12 + (a2 << 6));
    int v15 = (__int16 *)(v13 + 1);
    int v14 = *((__int16 *)v13 + 2);
    if (v14 >= a3) {
      goto LABEL_5;
    }
    unint64_t v16 = v13 + 2;
    if (v14 == -1) {
      break;
    }
    uint64_t v17 = *a5;
    *(void *)&long long v25 = *v10;
    *(void *)((char *)&v25 + 7) = *(void *)((char *)v10 + 7);
    char v18 = *((unsigned char *)a5 + 23);
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    uint64_t v19 = v12 + (a2 << 6);
    uint64_t v20 = *((void *)v13 + 3);
    *(_OWORD *)a5 = *v16;
    a5[2] = v20;
    *(void *)unint64_t v16 = v17;
    *(void *)(v19 + 23) = *(void *)((char *)&v25 + 7);
    *(void *)(v19 + 16) = v25;
    *(unsigned char *)(v19 + 31) = v18;
    sub_216C979D8(v11, (void *)(v19 + 32));
    __int16 v21 = *v15;
    *int v15 = a3;
    int v22 = *v13;
    int *v13 = a4;
    a3 = v21;
    a4 = v22;
LABEL_5:
    ++a3;
    a2 = *a1 & (a2 + 1);
  }
  long long v23 = *(_OWORD *)a5;
  *((void *)v13 + 3) = a5[2];
  *unint64_t v16 = v23;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  uint64_t result = sub_216C97958(v12 + (a2 << 6) + 32, (uint64_t)v11);
  int *v13 = a4;
  *int v15 = a3;
  return result;
}

uint64_t sub_216C97958(uint64_t a1, uint64_t a2)
{
  float v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    float v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *sub_216C979D8(void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    float v3 = result;
    uint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_216C97C38(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_21675DB74(a1);
}

uint64_t sub_216C97C44(uint64_t *a1, uint64_t a2, __int16 a3, int a4, uint64_t *a5)
{
  unint64_t v10 = (int *)(a1[4] + (a2 << 6));
  uint64_t v11 = *a5;
  uint64_t v12 = a5 + 1;
  *(void *)&long long v34 = a5[1];
  *(void *)((char *)&v34 + 7) = *(uint64_t *)((char *)a5 + 15);
  char v13 = *((unsigned char *)a5 + 23);
  a5[2] = 0;
  a5[1] = 0;
  *a5 = 0;
  uint64_t v14 = *((void *)v10 + 3);
  *(_OWORD *)a5 = *(_OWORD *)(v10 + 2);
  a5[2] = v14;
  *(void *)((char *)v10 + 23) = *(void *)((char *)&v34 + 7);
  *((void *)v10 + 1) = v11;
  *((void *)v10 + 2) = v34;
  *((unsigned char *)v10 + 31) = v13;
  int v15 = a5 + 3;
  sub_216C979D8(a5 + 3, (void *)v10 + 4);
  __int16 v16 = *((_WORD *)v10 + 2);
  *((_WORD *)v10 + 2) = a3;
  int v17 = *v10;
  *unint64_t v10 = a4;
  uint64_t v18 = *a1;
  uint64_t v19 = *a1 & (a2 + 1);
  __int16 v20 = v16 + 1;
  uint64_t v21 = a1[4];
  int v22 = (int *)(v21 + (v19 << 6));
  uint64_t v24 = (__int16 *)(v22 + 1);
  for (int i = *((unsigned __int16 *)v22 + 2); i != 0xFFFF; int i = *((unsigned __int16 *)v22 + 2))
  {
    if (v20 > (__int16)i)
    {
      if (v20 >= 4096) {
        *((unsigned char *)a1 + 72) = 1;
      }
      uint64_t v25 = v21 + (v19 << 6);
      uint64_t v26 = *a5;
      *(void *)&long long v35 = *v12;
      *(void *)((char *)&v35 + 7) = *(void *)((char *)v12 + 7);
      char v27 = *((unsigned char *)a5 + 23);
      a5[1] = 0;
      a5[2] = 0;
      *a5 = 0;
      long long v28 = *(_OWORD *)(v25 + 8);
      a5[2] = *(void *)(v25 + 24);
      *(_OWORD *)a5 = v28;
      *(void *)(v25 + 8) = v26;
      *(void *)(v25 + 23) = *(void *)((char *)&v35 + 7);
      *(void *)(v25 + 16) = v35;
      *(unsigned char *)(v25 + 31) = v27;
      sub_216C979D8(v15, (void *)(v25 + 32));
      __int16 v29 = *v24;
      __int16 *v24 = v20;
      int v30 = *v22;
      int *v22 = v17;
      uint64_t v18 = *a1;
      uint64_t v21 = a1[4];
      __int16 v20 = v29;
      int v17 = v30;
    }
    uint64_t v19 = v18 & (v19 + 1);
    ++v20;
    int v22 = (int *)(v21 + (v19 << 6));
    uint64_t v24 = (__int16 *)(v22 + 1);
  }
  long long v31 = *(_OWORD *)a5;
  uint64_t v32 = v21 + (v19 << 6);
  *(void *)(v32 + 24) = a5[2];
  *(_OWORD *)(v32 + 8) = v31;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  uint64_t result = sub_216C97958(v32 + 32, (uint64_t)v15);
  int *v22 = v17;
  __int16 *v24 = v20;
  return result;
}

__n128 sub_216C97E50(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C75F7D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216C97E9C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75F7D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216C97ECC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return sub_216C97F2C(*(void *)(a1 + 16), *(void *)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 6328) + 256, this);
}

uint64_t sub_216C97EE0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75F848)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C97F20()
{
  return &unk_26C75F848;
}

unint64_t sub_216C97F2C(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v4 = (uint64_t *)this;
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = v4[1];
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      uint64_t v10 = *v4;
    }
    return sub_216C97FE4(a1, a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      uint64_t v4 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    return *(unsigned __int8 *)v4 | 0x4001000000000000;
  }
}

unint64_t sub_216C97FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a2;
  v19[1] = a3;
  unint64_t result = 0x8001000000000000;
  unint64_t v18 = 0x8001000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      uint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7B1E0(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    char v13 = sub_216C981E4(v9, a4, a4, &v18);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        uint64_t v17 = sub_216C98168((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          int64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(void *)a4;
          sub_216C984FC((uint64_t)v20, (char *)&__src);
        }
        sub_216C6D370((uint64_t)v20, *(char **)(a4 + 32), *(void *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8001000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(void *)a4;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        sub_216C6D370((uint64_t)v19, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

uint64_t sub_216C98168(uint64_t a1, int a2)
{
  unint64_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = (*v2 + a2 - 1) & -a2;
  uint64_t v4 = v2[2];
  if (v4 > v3 || (v5 = v2[4] + v4, unint64_t v6 = *(uint64_t **)(a1 + 8), v5 < v3))
  {
    sub_216C7A9E4(*(void *)(a1 + 8));
    uint64_t *v2 = v3;
    unint64_t v6 = v2 + 2;
  }
  *unint64_t v6 = v3;
  return *v2;
}

void *sub_216C981E4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = *(char **)a2;
  LOBYTE(v33) = 1;
  uint64_t v32 = v9;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v32, *(pxrInternal__aapl__pxrReserved__ **)(a2 + 32), v9);
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * (void)v32);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_216908A98((uint64_t)(i + 2), a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  unint64_t v18 = operator new(0x40uLL);
  int i = v18;
  uint64_t v33 = a1 + 16;
  *(void *)unint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    uint64_t v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      uint64_t v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  __int16 v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *__int16 v29 = i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    __int16 v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216C98488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216C984A4(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216C984A4(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t sub_216C984FC(uint64_t a1, char *__src)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = 4;
  do
  {
    uint64_t v5 = v3[2];
    uint64_t v6 = v5 - *v3 + 0x80000;
    if (v4 >= v6) {
      size_t v7 = v5 - *v3 + 0x80000;
    }
    else {
      size_t v7 = v4;
    }
    uint64_t v8 = *v3 - v5;
    if ((int64_t)(v7 + v8) > v3[4]) {
      v3[4] = v7 + v8;
    }
    uint64_t result = (uint64_t)memcpy((void *)(v3[3] + v8), __src, v7);
    *v3 += v7;
    if (v6 <= v4) {
      uint64_t result = sub_216C7A9E4((BOOL)v3);
    }
    __src += v7;
    v4 -= v7;
  }
  while (v4);
  return result;
}

__n128 sub_216C985A8(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C75F868;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216C985F4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75F868;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216C98624(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  void v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_216C986BC(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_216C98670(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75F8D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C986B0()
{
  return &unk_26C75F8D8;
}

void sub_216C986BC(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    long long v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a2 + 32);
    sub_216C98758(a1, v6, a3, (uint64_t)v8);
    sub_216B8C59C(a4, v8);
    sub_2168F83DC((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u8[0] = a3 & 1;
    sub_216B8C520(a4, v8);
  }
}

void sub_216C98740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C98758(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      uint64_t v8 = a2[1];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
      unint64_t v21 = 0;
      if (v7 > 0x6FF)
      {
        ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v21, (char *)8, v5 + v8);
        if (v12 == -1) {
          return;
        }
        unint64_t v13 = v21;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v18) = 0;
      if (!sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v18)) {
        return;
      }
      uint64_t v8 = a2[1];
      uint64_t v5 = a2[2];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
    }
    LODWORD(v18) = 0;
    ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v18, (char *)4, v5 + v8);
    if (v12 == -1) {
      return;
    }
    unint64_t v13 = v18;
    unint64_t v21 = v18;
LABEL_13:
    ssize_t v14 = v12 + v5;
    unint64_t v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || v13 > v15)
    {
      *(void *)&long long v18 = "usd/crateFile.cpp";
      *((void *)&v18 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v19 = 2053;
      *((void *)&v19 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>, T = BOOL]";
      LOBYTE(v20) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, v13, v10 - v14, v10);
    }
    else
    {
      char v22 = 0;
      *(void *)&long long v18 = &v22;
      sub_2169AAD2C((unint64_t *)a4, v13, (unsigned char **)&v18);
      sub_2169AAF5C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v16, v17);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), *(char **)a4, v14 + v8);
    }
    return;
  }
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  if (&v18 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v11 = v19;
    *(_OWORD *)a4 = v18;
    *(_OWORD *)(a4 + 16) = v11;
    long long v18 = 0u;
    long long v19 = 0u;
    *(void *)(a4 + 32) = v20;
    uint64_t v20 = 0;
  }
  sub_2168F83DC((uint64_t)&v18);
}

void sub_216C98924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_216C98940(uint64_t a1, int a2, __sFILE *a3)
{
  ssize_t v4 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 24), a3, (char *)4, *(void *)(a1 + 8) + *(void *)a1);
  if (v4 != -1) {
    *(void *)(a1 + 8) += v4;
  }
  return v4 != -1;
}

void *sub_216C98994(void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    ssize_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_216C98BF4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_21675DB74(a1);
}

__n128 sub_216C98C08(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C75F8F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216C98C54(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75F8F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216C98C84(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216C98C8C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75F958)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C98CCC()
{
  return &unk_26C75F958;
}

void sub_216C98CD8(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  ssize_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  _DWORD v9[2] = v6;
  v9[3] = v7;
  int v10 = sub_216C688BC();
  sub_216C98D58(v5, (uint64_t)v9, v3, v4);
}

void sub_216C98D58(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    long long v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a2 + 32);
    sub_216C98DF4(a1, v6, a3, (uint64_t)v8);
    sub_216B8C59C(a4, v8);
    sub_2168F83DC((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u8[0] = a3 & 1;
    sub_216B8C520(a4, v8);
  }
}

void sub_216C98DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C98DF4(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      long long v7 = a2[1];
      long long v19 = *a2;
      long long v20 = v7;
      uint64_t v21 = *((void *)a2 + 4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B916C0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B916C0))
      {
        long long v18 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v18) {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
        }
        byte_267B916B8 = *v18;
        __cxa_guard_release(&qword_267B916C0);
      }
      unint64_t v25 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v19 + 8, &v25, 8uLL)) {
          return;
        }
        unint64_t v8 = v25;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_216C82F78((uint64_t)&v19 + 8, &__dst, 4uLL) & 1) == 0) {
          return;
        }
        unint64_t v8 = __dst;
        unint64_t v25 = __dst;
      }
      if (byte_267B916B8 && v8 >= 0x800)
      {
        uint64_t v10 = *((void *)&v19 + 1);
        uint64_t v11 = sub_216C99144((uint64_t)&v19 + 8, *((char **)&v19 + 1), v8, v8);
        if (v11)
        {
          *(void *)&long long v23 = 0;
          *((void *)&v23 + 1) = v11;
          uint64_t v24 = v10;
          long long __dst = v25;
          if (&__dst != (long long *)a4)
          {
            sub_2168F83DC(a4);
            long long v12 = v23;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v12;
            long long __dst = 0u;
            long long v23 = 0u;
            *(void *)(a4 + 32) = v24;
            uint64_t v24 = 0;
          }
          sub_2168F83DC((uint64_t)&__dst);
        }
        else
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v23 = 2109;
          *((void *)&v23 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = BOOL]";
          LOBYTE(v24) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v8);
          sub_2168F845C((void *)a4);
        }
      }
      else
      {
        uint64_t v13 = *(void *)(*(void *)v20 + 32);
        uint64_t v14 = *((void *)&v19 + 1) - *(void *)(*(void *)v20 + 24);
        unint64_t v15 = v13 - v14;
        if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || v8 > v15)
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v23 = 2117;
          *((void *)&v23 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = BOOL]";
          LOBYTE(v24) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v8, v8, v15, v13);
        }
        else
        {
          char v26 = 0;
          *(void *)&long long __dst = &v26;
          sub_2169AAD2C((unint64_t *)a4, v8, (unsigned char **)&__dst);
          sub_2169AAF5C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v16, v17);
          sub_216C82F78((uint64_t)&v19 + 8, *(void **)(a4 + 32), *(void *)a4);
        }
      }
    }
  }
  else
  {
    uint64_t v24 = 0;
    long long __dst = 0u;
    long long v23 = 0u;
    if (&__dst != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v9 = v23;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v9;
      long long __dst = 0u;
      long long v23 = 0u;
      *(void *)(a4 + 32) = v24;
      uint64_t v24 = 0;
    }
    sub_2168F83DC((uint64_t)&__dst);
  }
}

void sub_216C990FC(_Unwind_Exception *a1)
{
}

uint64_t sub_216C99144(uint64_t a1, char *a2, unint64_t a3, unint64_t a4)
{
  ssize_t v4 = **(atomic_ullong ***)(a1 + 8);
  unint64_t v6 = v4[3];
  unint64_t v5 = v4[4];
  long long v7 = &a2[a3];
  unint64_t v8 = (char *)(v6 + v5);
  long long v9 = &a2[a4];
  if (v6 <= (unint64_t)a2 && v5 >= a4 && v5 >= a3)
  {
    BOOL v12 = v7 >= v8;
    BOOL v13 = v7 == v8;
  }
  else
  {
    BOOL v12 = 1;
    BOOL v13 = 0;
  }
  if (!v13 && v12)
  {
    BOOL v14 = 1;
    BOOL v15 = 0;
  }
  else
  {
    BOOL v14 = v9 >= v8;
    BOOL v15 = v9 == v8;
  }
  if (!v15 && v14)
  {
    v17[0] = "usd/crateFile.cpp";
    v17[1] = "CreateZeroCopyDataSource";
    v17[2] = 687;
    v17[3] = "Vt_ArrayForeignDataSource *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__"
             "pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>::CreateZeroCopyDataSource(const void *, size_t, ui"
             "nt64_t) [FileMappingPtr = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *]";
    char v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Zero-copy data range out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", a3, (ptrdiff_t)&a2[-v6], v5);
    return 0;
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl::_AddRangeReference(v4, a2, a3);
  }
}

__n128 sub_216C99200(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C75F978;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216C9924C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75F978;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216C9927C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216C99284(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75F9D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C992C4()
{
  return &unk_26C75F9D8;
}

void sub_216C992D0(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  unint64_t v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216C9937C(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216C99358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C9937C(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  char v5 = a3;
  if (a3 < 0)
  {
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    long long v8 = *a2;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)a2 + 2);
    long long v9 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *((void *)a2 + 3);
    sub_216C99470(a1, &v8, a3, (uint64_t)v11);
    if (v9) {
      sub_216784EC4(v9);
    }
    sub_216B8C59C(a4, v11);
    sub_2168F83DC((uint64_t)v11);
  }
  else
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v6);
    }
    v11[0].n128_u8[0] = v5 & 1;
    sub_216B8C520(a4, v11);
  }
}

void sub_216C99444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C99470(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v20) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v20, 4uLL)) {
        return;
      }
    }
    uint64_t v7 = a2[1];
    long long v8 = (std::__shared_weak_count *)a2[2];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = a2[3];
      uint64_t v17 = v7;
      char v18 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = a2[3];
      uint64_t v17 = a2[1];
      char v18 = 0;
    }
    uint64_t v19 = v9;
    unint64_t v23 = 0;
    if (v6 > 0x6FF)
    {
      if (!sub_216C804FC(&v17, (uint64_t)&v23, 8uLL)) {
        goto LABEL_18;
      }
    }
    else
    {
      LODWORD(v20) = 0;
      if (!sub_216C804FC(&v17, (uint64_t)&v20, 4uLL)) {
        goto LABEL_18;
      }
      unint64_t v23 = v20;
    }
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17);
    unint64_t v12 = v11 - v19;
    unint64_t v13 = v23;
    if (v19 < 0 || (v12 & 0x8000000000000000) != 0 || v23 > v12)
    {
      *(void *)&long long v20 = "usd/crateFile.cpp";
      *((void *)&v20 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v21 = 2053;
      *((void *)&v21 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = BOOL]";
      LOBYTE(v22) = 0;
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, v13, v12, v16);
    }
    else
    {
      char v24 = 0;
      *(void *)&long long v20 = &v24;
      sub_2169AAD2C((unint64_t *)a4, v23, (unsigned char **)&v20);
      sub_2169AAF5C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v14, v15);
      sub_216C804FC(&v17, *(void *)(a4 + 32), *(void *)a4);
    }
LABEL_18:
    if (v18) {
      sub_216784EC4(v18);
    }
    if (v8) {
      sub_216784EC4(v8);
    }
    return;
  }
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  if (&v20 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v10 = v21;
    *(_OWORD *)a4 = v20;
    *(_OWORD *)(a4 + 16) = v10;
    long long v20 = 0u;
    long long v21 = 0u;
    *(void *)(a4 + 32) = v22;
    uint64_t v22 = 0;
  }
  sub_2168F83DC((uint64_t)&v20);
}

void sub_216C996CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216C99710(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C75F9F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216C9975C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75F9F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216C9978C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return sub_216C997EC(*(void *)(a1 + 16), *(void *)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 6328) + 256, this);
}

uint64_t sub_216C997A0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75FA58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C997E0()
{
  return &unk_26C75FA58;
}

unint64_t sub_216C997EC(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v4 = (uint64_t *)this;
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = v4[1];
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      uint64_t v10 = *v4;
    }
    return sub_216C998A4(a1, a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      uint64_t v4 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    return *(unsigned __int8 *)v4 | 0x4002000000000000;
  }
}

unint64_t sub_216C998A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a2;
  v19[1] = a3;
  unint64_t result = 0x8002000000000000;
  unint64_t v18 = 0x8002000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      unint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7B2A0(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    unint64_t v13 = sub_216C99A28(v9, a4, a4, &v18);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        uint64_t v17 = sub_216C98168((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          int64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(void *)a4;
          sub_216C984FC((uint64_t)v20, (char *)&__src);
        }
        sub_216C6D370((uint64_t)v20, *(char **)(a4 + 32), *(void *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8002000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(void *)a4;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        sub_216C6D370((uint64_t)v19, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void *sub_216C99A28(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = *(char **)a2;
  LOBYTE(v33) = 1;
  uint64_t v32 = v9;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v32, *(pxrInternal__aapl__pxrReserved__ **)(a2 + 32), v9);
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * (void)v32);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_216908A98((uint64_t)(i + 2), a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  unint64_t v18 = operator new(0x40uLL);
  int i = v18;
  uint64_t v33 = a1 + 16;
  *(void *)unint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    long long v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      long long v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  __int16 v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *__int16 v29 = i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    __int16 v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216C99CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216C99CE8(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216C99CE8(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

__n128 sub_216C99D48(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C75FA78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216C99D94(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75FA78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216C99DC4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  unsigned int v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  void v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_216C99E5C(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_216C99E10(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75FAD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C99E50()
{
  return &unk_26C75FAD8;
}

void sub_216C99E5C(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    long long v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a2 + 32);
    sub_216C99EF4(a1, v6, a3, (uint64_t)v8);
    sub_2169086B8(a4, v8);
    sub_2168F83DC((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u8[0] = a3;
    sub_216B8C72C(a4, v8);
  }
}

void sub_216C99EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C99EF4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      uint64_t v8 = a2[1];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
      unint64_t v21 = 0;
      if (v7 > 0x6FF)
      {
        ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v21, (char *)8, v5 + v8);
        if (v12 == -1) {
          return;
        }
        unint64_t v13 = v21;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v18) = 0;
      if (!sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v18)) {
        return;
      }
      uint64_t v8 = a2[1];
      uint64_t v5 = a2[2];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
    }
    LODWORD(v18) = 0;
    ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v18, (char *)4, v5 + v8);
    if (v12 == -1) {
      return;
    }
    unint64_t v13 = v18;
    unint64_t v21 = v18;
LABEL_13:
    ssize_t v14 = v12 + v5;
    unint64_t v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || v13 > v15)
    {
      *(void *)&long long v18 = "usd/crateFile.cpp";
      *((void *)&v18 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v19 = 2053;
      *((void *)&v19 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = unsigned char]";
      LOBYTE(v20) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, v13, v10 - v14, v10);
    }
    else
    {
      char v22 = 0;
      *(void *)&long long v18 = &v22;
      sub_2169083F4((unint64_t *)a4, v13, (unsigned char **)&v18);
      sub_216908624((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v16, v17);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), *(char **)a4, v14 + v8);
    }
    return;
  }
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  if (&v18 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v11 = v19;
    *(_OWORD *)a4 = v18;
    *(_OWORD *)(a4 + 16) = v11;
    long long v18 = 0u;
    long long v19 = 0u;
    *(void *)(a4 + 32) = v20;
    uint64_t v20 = 0;
  }
  sub_2168F83DC((uint64_t)&v18);
}

void sub_216C9A0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216C9A0E4(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C75FAF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216C9A130(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75FAF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216C9A160(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216C9A168(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75FB58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C9A1A8()
{
  return &unk_26C75FB58;
}

void sub_216C9A1B4(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  _DWORD v9[2] = v6;
  v9[3] = v7;
  int v10 = sub_216C688BC();
  sub_216C9A234(v5, (uint64_t)v9, v3, v4);
}

void sub_216C9A234(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    long long v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a2 + 32);
    sub_216C9A2CC(a1, v6, a3, (uint64_t)v8);
    sub_2169086B8(a4, v8);
    sub_2168F83DC((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u8[0] = a3;
    sub_216B8C72C(a4, v8);
  }
}

void sub_216C9A2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C9A2CC(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      long long v7 = a2[1];
      long long v19 = *a2;
      long long v20 = v7;
      uint64_t v21 = *((void *)a2 + 4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B916D0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B916D0))
      {
        long long v18 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v18) {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
        }
        byte_267B916C8 = *v18;
        __cxa_guard_release(&qword_267B916D0);
      }
      unint64_t v25 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v19 + 8, &v25, 8uLL)) {
          return;
        }
        unint64_t v8 = v25;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_216C82F78((uint64_t)&v19 + 8, &__dst, 4uLL) & 1) == 0) {
          return;
        }
        unint64_t v8 = __dst;
        unint64_t v25 = __dst;
      }
      if (byte_267B916C8 && v8 >= 0x800)
      {
        uint64_t v10 = *((void *)&v19 + 1);
        uint64_t v11 = sub_216C99144((uint64_t)&v19 + 8, *((char **)&v19 + 1), v8, v8);
        if (v11)
        {
          *(void *)&long long v23 = 0;
          *((void *)&v23 + 1) = v11;
          uint64_t v24 = v10;
          long long __dst = v25;
          if (&__dst != (long long *)a4)
          {
            sub_2168F83DC(a4);
            long long v12 = v23;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v12;
            long long __dst = 0u;
            long long v23 = 0u;
            *(void *)(a4 + 32) = v24;
            uint64_t v24 = 0;
          }
          sub_2168F83DC((uint64_t)&__dst);
        }
        else
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v23 = 2109;
          *((void *)&v23 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = unsigned char]";
          LOBYTE(v24) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v8);
          sub_2168F845C((void *)a4);
        }
      }
      else
      {
        uint64_t v13 = *(void *)(*(void *)v20 + 32);
        uint64_t v14 = *((void *)&v19 + 1) - *(void *)(*(void *)v20 + 24);
        unint64_t v15 = v13 - v14;
        if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || v8 > v15)
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v23 = 2117;
          *((void *)&v23 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = unsigned char]";
          LOBYTE(v24) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v8, v8, v15, v13);
        }
        else
        {
          char v26 = 0;
          *(void *)&long long __dst = &v26;
          sub_2169083F4((unint64_t *)a4, v8, (unsigned char **)&__dst);
          sub_216908624((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v16, v17);
          sub_216C82F78((uint64_t)&v19 + 8, *(void **)(a4 + 32), *(void *)a4);
        }
      }
    }
  }
  else
  {
    uint64_t v24 = 0;
    long long __dst = 0u;
    long long v23 = 0u;
    if (&__dst != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v9 = v23;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v9;
      long long __dst = 0u;
      long long v23 = 0u;
      *(void *)(a4 + 32) = v24;
      uint64_t v24 = 0;
    }
    sub_2168F83DC((uint64_t)&__dst);
  }
}

void sub_216C9A5D4(_Unwind_Exception *a1)
{
}

__n128 sub_216C9A624(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C75FB78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216C9A670(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75FB78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216C9A6A0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216C9A6A8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75FBD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C9A6E8()
{
  return &unk_26C75FBD8;
}

void sub_216C9A6F4(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216C9A7A0(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216C9A77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C9A7A0(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  unsigned __int8 v5 = a3;
  if (a3 < 0)
  {
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    long long v8 = *a2;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)a2 + 2);
    long long v9 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *((void *)a2 + 3);
    sub_216C9A890(a1, &v8, a3, (uint64_t)v11);
    if (v9) {
      sub_216784EC4(v9);
    }
    sub_2169086B8(a4, v11);
    sub_2168F83DC((uint64_t)v11);
  }
  else
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v6);
    }
    v11[0].n128_u8[0] = v5;
    sub_216B8C72C(a4, v11);
  }
}

void sub_216C9A864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C9A890(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v20) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v20, 4uLL)) {
        return;
      }
    }
    uint64_t v7 = a2[1];
    long long v8 = (std::__shared_weak_count *)a2[2];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = a2[3];
      uint64_t v17 = v7;
      long long v18 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = a2[3];
      uint64_t v17 = a2[1];
      long long v18 = 0;
    }
    uint64_t v19 = v9;
    unint64_t v23 = 0;
    if (v6 > 0x6FF)
    {
      if (!sub_216C804FC(&v17, (uint64_t)&v23, 8uLL)) {
        goto LABEL_18;
      }
    }
    else
    {
      LODWORD(v20) = 0;
      if (!sub_216C804FC(&v17, (uint64_t)&v20, 4uLL)) {
        goto LABEL_18;
      }
      unint64_t v23 = v20;
    }
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17);
    unint64_t v12 = v11 - v19;
    unint64_t v13 = v23;
    if (v19 < 0 || (v12 & 0x8000000000000000) != 0 || v23 > v12)
    {
      *(void *)&long long v20 = "usd/crateFile.cpp";
      *((void *)&v20 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v21 = 2053;
      *((void *)&v21 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream"
                              ">, T = unsigned char]";
      LOBYTE(v22) = 0;
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, v13, v12, v16);
    }
    else
    {
      char v24 = 0;
      *(void *)&long long v20 = &v24;
      sub_2169083F4((unint64_t *)a4, v23, (unsigned char **)&v20);
      sub_216908624((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v14, v15);
      sub_216C804FC(&v17, *(void *)(a4 + 32), *(void *)a4);
    }
LABEL_18:
    if (v18) {
      sub_216784EC4(v18);
    }
    if (v8) {
      sub_216784EC4(v8);
    }
    return;
  }
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  if (&v20 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v10 = v21;
    *(_OWORD *)a4 = v20;
    *(_OWORD *)(a4 + 16) = v10;
    long long v20 = 0u;
    long long v21 = 0u;
    *(void *)(a4 + 32) = v22;
    uint64_t v22 = 0;
  }
  sub_2168F83DC((uint64_t)&v20);
}

void sub_216C9AAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216C9AB30(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C75FBF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216C9AB7C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75FBF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216C9ABAC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_216C9AC0C(*(void *)(a1 + 16), *(void *)(a1 + 8), (uint64_t *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_216C9ABC0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75FC58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C9AC00()
{
  return &unk_26C75FC58;
}

unint64_t sub_216C9AC0C(uint64_t a1, uint64_t a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v4 = (uint64_t *)this;
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = v4[1];
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      uint64_t v10 = *v4;
    }
    return sub_216C9ACC4(a1, a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      uint64_t v4 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    return *(unsigned int *)v4 | 0x4003000000000000;
  }
}

unint64_t sub_216C9ACC4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v26[0] = a2;
  v26[1] = a3;
  unint64_t result = 0x8003000000000000;
  unint64_t v25 = 0x8003000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      unint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7B360(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    unint64_t v13 = sub_216C9AEC4(v9, a4, a4, &v25);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        *(void *)&long long v27 = a2;
        *((void *)&v27 + 1) = a3;
        uint64_t v17 = *a3;
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          *(void *)int64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)&v27, __src);
        }
        else
        {
          *(_DWORD *)int64_t __src = *(void *)a4;
          sub_216C984FC((uint64_t)&v27, __src);
        }
        long long v18 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4;
        uint64_t v19 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)(a4 + 32);
        if (*(void *)a4 > 0xFuLL)
        {
          *(_OWORD *)int64_t __src = v27;
          size_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(v18);
          uint64_t v22 = (char *)operator new[](CompressedBufferSize);
          int64_t v24 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(v19, (const int *)v18, v22, v23);
          int64_t v29 = v24;
          sub_216C80458((uint64_t)__src, (char *)&v29);
          sub_216C6D370((uint64_t)__src, v22, v24);
          operator delete[](v22);
          unint64_t v20 = v17 & 0xFFFFFFFFFFFFLL | 0xA003000000000000;
        }
        else
        {
          unint64_t v20 = v17 & 0xFFFFFFFFFFFFLL | 0x8003000000000000;
          sub_216C93180((uint64_t)&v27, (char *)v19, (uint64_t)v18);
        }
        v13[7] = v20;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v26, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        *(_DWORD *)int64_t __src = 1;
        sub_216C984FC((uint64_t)v26, __src);
        *(_DWORD *)int64_t __src = *(void *)a4;
        sub_216C984FC((uint64_t)v26, __src);
        sub_216C93180((uint64_t)v26, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void sub_216C9AEB0(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_216C9AEC4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = *(void *)a2;
  LOBYTE(v33) = 1;
  uint64_t v32 = v9;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v32, *(pxrInternal__aapl__pxrReserved__ **)(a2 + 32), (char *)(4 * v9));
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * v32);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(i + 2), a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  long long v18 = operator new(0x40uLL);
  int i = v18;
  uint64_t v33 = a1 + 16;
  *(void *)long long v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    long long v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      long long v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  int64_t v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *int64_t v29 = i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    int64_t v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216C9B16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216C9B188(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216C9B188(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

__n128 sub_216C9B1E8(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C75FC78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216C9B234(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75FC78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216C9B264(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  unsigned int v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  void v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_216C9B2FC(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_216C9B2B0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75FCD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C9B2F0()
{
  return &unk_26C75FCD8;
}

void sub_216C9B2FC(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    long long v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a2 + 32);
    sub_216C9B394(a1, v6, a3, (uint64_t)v8);
    sub_216907D0C(a4, v8);
    sub_2168F83DC((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u32[0] = a3;
    sub_216B8C90C(a4, v8);
  }
}

void sub_216C9B37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C9B394(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = a3 & 0xFFFFFFFFFFFFLL;
    int v7 = *(unsigned __int8 *)(*a2 + 6369);
    int v8 = *(unsigned __int8 *)(*a2 + 6370);
    int v9 = *(unsigned __int8 *)(*a2 + 6368) << 16;
    unsigned int v10 = v9 | (v7 << 8);
    if (v10 > 0x4FF || (LODWORD(v41) = 0, sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v41)))
    {
      long long v11 = *((_OWORD *)a2 + 1);
      long long v38 = *(_OWORD *)a2;
      long long v39 = v11;
      unint64_t v40 = (pxrInternal__aapl__pxrReserved__ *)a2[4];
      if ((a3 & 0x2000000000000000) == 0 || (unsigned int v12 = v9 | v8 | (v7 << 8), v12 <= 0x4FF))
      {
        unint64_t v13 = (FILE *)v40;
        unint64_t v44 = 0;
        if (v10 > 0x6FF)
        {
          ssize_t v19 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v44, (char *)8, v39 + *((void *)&v38 + 1));
          if (v19 == -1) {
            return;
          }
          unint64_t v20 = v44;
        }
        else
        {
          LODWORD(v41) = 0;
          ssize_t v19 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v41, (char *)4, v39 + *((void *)&v38 + 1));
          if (v19 == -1) {
            return;
          }
          unint64_t v20 = v41;
          unint64_t v44 = v41;
        }
        ssize_t v28 = v19 + v39;
        unint64_t v29 = *((void *)&v39 + 1) - (v19 + v39);
        if (v19 + (void)v39 < 0 || (v29 & 0x8000000000000000) != 0 || v20 > v29 || 4 * v20 > v29)
        {
          *(void *)&long long v41 = "usd/crateFile.cpp";
          *((void *)&v41 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v42 = 2053;
          *((void *)&v42 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_PreadStream>, T = int]";
          LOBYTE(v43) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld");
          return;
        }
        _8C[0] = 0;
        *(void *)&long long v41 = _8C;
        sub_216907A0C((unint64_t *)a4, v20, (_DWORD **)&v41);
        sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v30, v31);
        unint64_t v25 = *(__sFILE **)(a4 + 32);
        unint64_t v26 = (char *)(4 * *(void *)a4);
        off_t v27 = v28 + *((void *)&v38 + 1);
        goto LABEL_30;
      }
      unint64_t v44 = 0;
      if (v12 > 0x6FF)
      {
        unint64_t v13 = (FILE *)v40;
        uint64_t v14 = *((void *)&v38 + 1);
        ssize_t v21 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v44, (char *)8, v39 + *((void *)&v38 + 1));
        if (v21 == -1) {
          return;
        }
        ssize_t v16 = v39 + v21;
        *(void *)&long long v39 = v39 + v21;
        unint64_t v17 = v44;
      }
      else
      {
        LODWORD(v41) = 0;
        unint64_t v13 = (FILE *)v40;
        uint64_t v14 = *((void *)&v38 + 1);
        ssize_t v15 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v41, (char *)4, v39 + *((void *)&v38 + 1));
        if (v15 == -1) {
          return;
        }
        ssize_t v16 = v39 + v15;
        *(void *)&long long v39 = v39 + v15;
        unint64_t v17 = v41;
        unint64_t v44 = v41;
      }
      if (v17 <= 0xF)
      {
        unint64_t v22 = *((void *)&v39 + 1) - v16;
        if (v16 < 0 || (v22 & 0x8000000000000000) != 0 || v17 > v22 || 4 * v17 > v22)
        {
          *(void *)&long long v41 = "usd/crateFile.cpp";
          *((void *)&v41 + 1) = "_ReadPossiblyCompressedArray";
          *(void *)&long long v42 = 2241;
          *((void *)&v42 + 1) = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::"
                                  "value || std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type px"
                                  "rInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, Va"
                                  "lueRep, VtArray<T> *, CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_PreadStream>, T = int]";
          LOBYTE(v43) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
          return;
        }
        _8C[0] = 0;
        *(void *)&long long v41 = _8C;
        sub_216907A0C((unint64_t *)a4, v17, (_DWORD **)&v41);
        sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v23, v24);
        unint64_t v25 = *(__sFILE **)(a4 + 32);
        unint64_t v26 = (char *)(4 * *(void *)a4);
        off_t v27 = v16 + v14;
LABEL_30:
        pxrInternal__aapl__pxrReserved__::ArchPRead(v13, v25, v26, v27);
        return;
      }
      if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v17)
        && pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v17))
      {
        _8C[0] = 0;
        *(void *)&long long v41 = _8C;
        sub_216907A0C((unint64_t *)a4, v44, (_DWORD **)&v41);
        sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v32, v33);
        char v34 = *(_DWORD **)(a4 + 32);
        long long v35 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4;
        long long v41 = 0u;
        long long v42 = 0u;
        sub_216C8CAEC((uint64_t)&v41, (uint64_t)&v38, v34, v35);
        char v36 = (void *)v42;
        *(void *)&long long v42 = 0;
        if (v36) {
          operator delete[](v36);
        }
        int64_t v37 = (void *)v41;
        *(void *)&long long v41 = 0;
        if (v37) {
          operator delete[](v37);
        }
      }
      else
      {
        *(void *)&long long v41 = "usd/crateFile.cpp";
        *((void *)&v41 + 1) = "_ReadPossiblyCompressedArray";
        *(void *)&long long v42 = 2249;
        *((void *)&v42 + 1) = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::va"
                                "lue || std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInt"
                                "ernal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep"
                                ", VtArray<T> *, CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd"
                                "_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>, T = int]";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values");
      }
    }
  }
  else
  {
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    if (&v41 != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v18 = v42;
      *(_OWORD *)a4 = v41;
      *(_OWORD *)(a4 + 16) = v18;
      long long v41 = 0u;
      long long v42 = 0u;
      *(void *)(a4 + 32) = v43;
      uint64_t v43 = 0;
    }
    sub_2168F83DC((uint64_t)&v41);
  }
}

void sub_216C9B770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_216C83E54((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C9B79C(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *a1)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(a1);
  if (result) {
    return pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(a1) != 0;
  }
  return result;
}

void sub_216C9B7D4(uint64_t a1, _DWORD *a2, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *a3)
{
  *(_OWORD *)long long v5 = 0u;
  *(_OWORD *)std::string __p = 0u;
  sub_216C8CAEC((uint64_t)v5, a1, a2, a3);
  uint64_t v3 = __p[0];
  __p[0] = 0;
  if (v3) {
    operator delete[](v3);
  }
  unint64_t v4 = v5[0];
  v5[0] = 0;
  if (v4) {
    operator delete[](v4);
  }
}

void sub_216C9B834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_216C9B850(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C75FCF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216C9B89C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75FCF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216C9B8CC(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216C9B8D4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75FD58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C9B914()
{
  return &unk_26C75FD58;
}

void sub_216C9B920(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  _DWORD v9[2] = v6;
  v9[3] = v7;
  int v10 = sub_216C688BC();
  sub_216C9B9A0(v5, (uint64_t)v9, v3, v4);
}

void sub_216C9B9A0(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    long long v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a2 + 32);
    sub_216C9BA38(a1, v6, a3, (uint64_t)v8);
    sub_216907D0C(a4, v8);
    sub_2168F83DC((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u32[0] = a3;
    sub_216B8C90C(a4, v8);
  }
}

void sub_216C9BA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C9BA38(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    int v7 = *(unsigned __int8 *)(*(void *)a2 + 6369);
    int v8 = *(unsigned __int8 *)(*(void *)a2 + 6370);
    int v9 = *(unsigned __int8 *)(*(void *)a2 + 6368) << 16;
    unsigned int v10 = v9 | (v7 << 8);
    if (v10 > 0x4FF || (LODWORD(__dst[0]) = 0, sub_216C82F78((uint64_t)a2 + 8, __dst, 4uLL)))
    {
      long long v11 = a2[1];
      long long v39 = *a2;
      long long v40 = v11;
      uint64_t v41 = *((void *)a2 + 4);
      if ((a3 & 0x2000000000000000) != 0 && (unsigned int v12 = v9 | v8 | (v7 << 8), v12 > 0x4FF))
      {
        *(void *)&long long v42 = 0;
        if (v12 > 0x6FF)
        {
          if (!sub_216C82F78((uint64_t)&v39 + 8, &v42, 8uLL)) {
            return;
          }
          unint64_t v13 = v42;
        }
        else
        {
          LODWORD(__dst[0]) = 0;
          if (!sub_216C82F78((uint64_t)&v39 + 8, __dst, 4uLL)) {
            return;
          }
          unint64_t v13 = LODWORD(__dst[0]);
          *(void *)&long long v42 = LODWORD(__dst[0]);
        }
        if (v13 > 0xF)
        {
          if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v13)
            && pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v13))
          {
            LODWORD(v48) = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)&v48;
            sub_216907A0C((unint64_t *)a4, v42, (_DWORD **)__dst);
            sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v32, v33);
            char v34 = *(_DWORD **)(a4 + 32);
            long long v35 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4;
            *(_OWORD *)long long __dst = 0u;
            *(_OWORD *)std::string __p = 0u;
            sub_216C85404((uint64_t)__dst, (uint64_t)&v39, v34, v35);
            char v36 = __p[0];
            __p[0] = 0;
            if (v36) {
              operator delete[](v36);
            }
            int64_t v37 = __dst[0];
            __dst[0] = 0;
            if (v37) {
              operator delete[](v37);
            }
          }
          else
          {
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"usd/crateFile.cpp";
            __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"_ReadPossiblyCompressedArray";
            __p[0] = (void *)2249;
            __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value || std:"
                     ":is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aapl__pxrReserv"
                     "ed__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Versio"
                     "n, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__"
                     "aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::Cr"
                     "ateFile::_FileMapping *>>, T = int]";
            LOBYTE(v47) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values");
          }
        }
        else
        {
          uint64_t v22 = *((void *)&v39 + 1) - *(void *)(*(void *)v40 + 24);
          unint64_t v23 = *(void *)(*(void *)v40 + 32) - v22;
          if ((v22 & 0x8000000000000000) == 0 && (v23 & 0x8000000000000000) == 0 && v13 <= v23 && 4 * v13 <= v23)
          {
            long long v18 = (char *)&v39 + 8;
            LODWORD(v48) = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)&v48;
            unint64_t v25 = (unint64_t *)a4;
            unint64_t v26 = v13;
LABEL_42:
            sub_216907A0C(v25, v26, (_DWORD **)__dst);
            sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v30, v31);
            sub_216C82F78((uint64_t)v18, *(void **)(a4 + 32), 4 * *(void *)a4);
            return;
          }
          __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"usd/crateFile.cpp";
          __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"_ReadPossiblyCompressedArray";
          __p[0] = (void *)2241;
          __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value || std::i"
                   "s_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aapl__pxrReserved__"
                   "::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int"
                   ") [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__px"
                   "rReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_"
                   "FileMapping *>>, T = int]";
          LOBYTE(v47) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
        }
      }
      else
      {
        long long v15 = a2[1];
        long long v42 = *a2;
        long long v43 = v15;
        uint64_t v44 = *((void *)a2 + 4);
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B916E0, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_267B916E0))
        {
          long long v38 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          if (!v38) {
            pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
          }
          byte_267B916D8 = *v38;
          __cxa_guard_release(&qword_267B916E0);
        }
        size_t v48 = 0;
        if (v10 > 0x6FF)
        {
          if (!sub_216C82F78((uint64_t)&v42 + 8, &v48, 8uLL)) {
            return;
          }
          unint64_t v16 = (unint64_t)v48;
        }
        else
        {
          LODWORD(__dst[0]) = 0;
          if ((sub_216C82F78((uint64_t)&v42 + 8, __dst, 4uLL) & 1) == 0) {
            return;
          }
          unint64_t v16 = LODWORD(__dst[0]);
          size_t v48 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)LODWORD(__dst[0]);
        }
        unint64_t v17 = 4 * v16;
        long long v18 = (char *)&v42 + 8;
        uint64_t v19 = *((void *)&v42 + 1);
        if (!byte_267B916D8 || v17 < 0x800 || (BYTE8(v42) & 3) != 0)
        {
          uint64_t v27 = *((void *)&v42 + 1) - *(void *)(*(void *)v43 + 24);
          unint64_t v28 = *(void *)(*(void *)v43 + 32) - v27;
          if ((v27 & 0x8000000000000000) == 0 && (v28 & 0x8000000000000000) == 0 && v16 <= v28 && v17 <= v28)
          {
            int v49 = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)&v49;
            unint64_t v25 = (unint64_t *)a4;
            unint64_t v26 = v16;
            goto LABEL_42;
          }
          __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"usd/crateFile.cpp";
          __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"_ReadUncompressedArray";
          __p[0] = (void *)2117;
          __p[1] = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>::type pxrInt"
                   "ernal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray<T> *, Cra"
                   "teFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInt"
                   "ernal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFil"
                   "e::CrateFile::_FileMapping *>>, T = int]";
          LOBYTE(v47) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld");
        }
        else
        {
          unint64_t v20 = (void *)sub_216C99144((uint64_t)&v42 + 8, *((char **)&v42 + 1), 4 * v16, v16);
          if (v20)
          {
            __p[0] = 0;
            __p[1] = v20;
            uint64_t v47 = v19;
            __dst[0] = v48;
            __dst[1] = 0;
            if (__dst != (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4)
            {
              sub_2168F83DC(a4);
              long long v21 = *(_OWORD *)__p;
              *(_OWORD *)a4 = *(_OWORD *)__dst;
              *(_OWORD *)(a4 + 16) = v21;
              *(_OWORD *)long long __dst = 0u;
              *(_OWORD *)std::string __p = 0u;
              *(void *)(a4 + 32) = v47;
              uint64_t v47 = 0;
            }
            sub_2168F83DC((uint64_t)__dst);
          }
          else
          {
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"usd/crateFile.cpp";
            __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"_ReadUncompressedArray";
            __p[0] = (void *)2109;
            __p[1] = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>::type pxrI"
                     "nternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray<T> *,"
                     " CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<"
                     "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_"
                     "CrateFile::CrateFile::_FileMapping *>>, T = int]";
            LOBYTE(v47) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v17);
            sub_2168F845C((void *)a4);
          }
        }
      }
    }
  }
  else
  {
    uint64_t v47 = 0;
    *(_OWORD *)long long __dst = 0u;
    *(_OWORD *)std::string __p = 0u;
    if (__dst != (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4)
    {
      sub_2168F83DC(a4);
      long long v14 = *(_OWORD *)__p;
      *(_OWORD *)a4 = *(_OWORD *)__dst;
      *(_OWORD *)(a4 + 16) = v14;
      *(_OWORD *)long long __dst = 0u;
      *(_OWORD *)std::string __p = 0u;
      *(void *)(a4 + 32) = v47;
      uint64_t v47 = 0;
    }
    sub_2168F83DC((uint64_t)__dst);
  }
}

void sub_216C9BF30(_Unwind_Exception *a1)
{
}

void sub_216C9BF88(uint64_t a1, _DWORD *a2, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this)
{
  *(_OWORD *)long long v5 = 0u;
  *(_OWORD *)std::string __p = 0u;
  sub_216C85404((uint64_t)v5, a1, a2, this);
  uint64_t v3 = __p[0];
  __p[0] = 0;
  if (v3) {
    operator delete[](v3);
  }
  unint64_t v4 = v5[0];
  v5[0] = 0;
  if (v4) {
    operator delete[](v4);
  }
}

void sub_216C9BFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_216C9C004(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C75FD78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216C9C050(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75FD78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216C9C080(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216C9C088(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75FDD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C9C0C8()
{
  return &unk_26C75FDD8;
}

void sub_216C9C0D4(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  int v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    long long v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    long long v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216C9C180(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216C9C15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C9C180(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  unsigned __int32 v5 = a3;
  if (a3 < 0)
  {
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    long long v8 = *a2;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)a2 + 2);
    int v9 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *((void *)a2 + 3);
    sub_216C9C270(a1, (unint64_t *)&v8, a3, (uint64_t)v11);
    if (v9) {
      sub_216784EC4(v9);
    }
    sub_216907D0C(a4, v11);
    sub_2168F83DC((uint64_t)v11);
  }
  else
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v6);
    }
    v11[0].n128_u32[0] = v5;
    sub_216B8C90C(a4, v11);
  }
}

void sub_216C9C244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C9C270(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    unint64_t v7 = *a2;
    int v8 = *(unsigned __int8 *)(*a2 + 6369);
    int v9 = *(unsigned __int8 *)(*a2 + 6370);
    int v10 = *(unsigned __int8 *)(*a2 + 6368) << 16;
    unsigned int v11 = v10 | (v8 << 8);
    if (v11 <= 0x4FF)
    {
      LODWORD(v49[0]) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)v49, 4uLL)) {
        return;
      }
      unint64_t v7 = *a2;
    }
    unint64_t v13 = a2[1];
    uint64_t v12 = (std::__shared_weak_count *)a2[2];
    unint64_t v41 = v7;
    unint64_t v42 = v13;
    long long v43 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v14 = a2[3];
    unint64_t v44 = v14;
    if ((a3 & 0x2000000000000000) != 0)
    {
      unsigned int v15 = v10 | v9 | (v8 << 8);
      if (v15 > 0x4FF)
      {
        unint64_t v45 = 0;
        if (v15 > 0x6FF)
        {
          if (sub_216C804FC(&v42, (uint64_t)&v45, 8uLL))
          {
            unint64_t v16 = v45;
LABEL_22:
            if (v16 <= 0xF)
            {
              uint64_t v18 = (*(uint64_t (**)(unint64_t))(*(void *)v42 + 16))(v42);
              unint64_t v19 = v45;
              unint64_t v20 = v18 - v44;
              unint64_t v21 = 4 * v45;
              if ((v44 & 0x8000000000000000) != 0
                || (v20 & 0x8000000000000000) != 0
                || (v45 <= v20 ? (BOOL v22 = v21 > v20) : (BOOL v22 = 1), v22))
              {
                v49[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"usd/crateFile.cpp";
                v49[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"_ReadPossiblyCompressedArray";
                __p[0] = (void *)2241;
                __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value || "
                         "std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aapl__p"
                         "xrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, Crate"
                         "File::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Read"
                         "er<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = int]";
                LOBYTE(v51) = 0;
                uint64_t v40 = (*(uint64_t (**)(unint64_t))(*(void *)v42 + 16))(v42);
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v49, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld", v19, v21, v20, v40);
              }
              else
              {
                LODWORD(v52) = 0;
                v49[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)&v52;
                sub_216907A0C((unint64_t *)a4, v45, (_DWORD **)v49);
                sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v23, v24);
                sub_216C804FC(&v42, *(void *)(a4 + 32), 4 * *(void *)a4);
              }
              goto LABEL_40;
            }
            long long v31 = v43;
            if (v43) {
              atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v16))
            {
              BOOL v32 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v16) != 0;
              if (!v31) {
                goto LABEL_48;
              }
            }
            else
            {
              BOOL v32 = 0;
              if (!v31)
              {
LABEL_48:
                if (v32)
                {
                  LODWORD(v52) = 0;
                  v49[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)&v52;
                  sub_216907A0C((unint64_t *)a4, v45, (_DWORD **)v49);
                  sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v33, v34);
                  long long v35 = *(_DWORD **)(a4 + 32);
                  char v36 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4;
                  *(_OWORD *)int v49 = 0u;
                  *(_OWORD *)std::string __p = 0u;
                  sub_216C90D54((uint64_t)v49, (uint64_t)&v41, v35, v36);
                  int64_t v37 = __p[0];
                  __p[0] = 0;
                  if (v37) {
                    operator delete[](v37);
                  }
                  long long v38 = v49[0];
                  v49[0] = 0;
                  if (v38) {
                    operator delete[](v38);
                  }
                }
                else
                {
                  v49[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"usd/crateFile.cpp";
                  v49[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"_ReadPossiblyCompressedArray";
                  __p[0] = (void *)2249;
                  __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value |"
                           "| std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aap"
                           "l__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *,"
                           " CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                           "e::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = int]";
                  LOBYTE(v51) = 0;
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v49, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values", v45);
                }
                goto LABEL_40;
              }
            }
            sub_216784EC4(v31);
            goto LABEL_48;
          }
        }
        else
        {
          LODWORD(v49[0]) = 0;
          if (sub_216C804FC(&v42, (uint64_t)v49, 4uLL))
          {
            unint64_t v16 = LODWORD(v49[0]);
            unint64_t v45 = LODWORD(v49[0]);
            goto LABEL_22;
          }
        }
LABEL_40:
        if (v43) {
          sub_216784EC4(v43);
        }
        return;
      }
    }
    unint64_t v45 = v7;
    unint64_t v46 = v42;
    uint64_t v47 = v43;
    if (v43)
    {
      atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v14 = v44;
    }
    unint64_t v48 = v14;
    unint64_t v52 = 0;
    if (v11 > 0x6FF)
    {
      if (!sub_216C804FC(&v46, (uint64_t)&v52, 8uLL)) {
        goto LABEL_38;
      }
    }
    else
    {
      LODWORD(v49[0]) = 0;
      if (!sub_216C804FC(&v46, (uint64_t)v49, 4uLL)) {
        goto LABEL_38;
      }
      unint64_t v52 = LODWORD(v49[0]);
    }
    uint64_t v25 = (*(uint64_t (**)(unint64_t))(*(void *)v46 + 16))(v46);
    unint64_t v26 = v25 - v48;
    unint64_t v27 = v52;
    if ((v48 & 0x8000000000000000) != 0
      || (v26 & 0x8000000000000000) != 0
      || (v52 <= v26 ? (BOOL v28 = 4 * v52 > v26) : (BOOL v28 = 1), v28))
    {
      v49[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"usd/crateFile.cpp";
      v49[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"_ReadUncompressedArray";
      __p[0] = (void *)2053;
      __p[1] = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>::type pxrInter"
               "nal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile"
               "::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aap"
               "l__pxrReserved__::Usd_CrateFile::_AssetStream>, T = int]";
      LOBYTE(v51) = 0;
      uint64_t v39 = (*(uint64_t (**)(unint64_t))(*(void *)v46 + 16))(v46);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v49, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v27, 4 * v27, v26, v39);
    }
    else
    {
      int v53 = 0;
      v49[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)&v53;
      sub_216907A0C((unint64_t *)a4, v52, (_DWORD **)v49);
      sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v29, v30);
      sub_216C804FC(&v46, *(void *)(a4 + 32), 4 * *(void *)a4);
    }
LABEL_38:
    if (v47) {
      sub_216784EC4(v47);
    }
    goto LABEL_40;
  }
  uint64_t v51 = 0;
  *(_OWORD *)int v49 = 0u;
  *(_OWORD *)std::string __p = 0u;
  if (v49 != (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4)
  {
    sub_2168F83DC(a4);
    long long v17 = *(_OWORD *)__p;
    *(_OWORD *)a4 = *(_OWORD *)v49;
    *(_OWORD *)(a4 + 16) = v17;
    *(_OWORD *)int v49 = 0u;
    *(_OWORD *)std::string __p = 0u;
    *(void *)(a4 + 32) = v51;
    uint64_t v51 = 0;
  }
  sub_2168F83DC((uint64_t)v49);
}

void sub_216C9C750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::__shared_weak_count *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_216C83E54((uint64_t)va);
  if (a8) {
    sub_216784EC4(a8);
  }
  _Unwind_Resume(a1);
}

void sub_216C9C7B4(uint64_t a1, _DWORD *a2, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this)
{
  *(_OWORD *)unsigned __int32 v5 = 0u;
  *(_OWORD *)std::string __p = 0u;
  sub_216C90D54((uint64_t)v5, a1, a2, this);
  uint64_t v3 = __p[0];
  __p[0] = 0;
  if (v3) {
    operator delete[](v3);
  }
  uint64_t v4 = v5[0];
  v5[0] = 0;
  if (v4) {
    operator delete[](v4);
  }
}

void sub_216C9C814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_216C9C830(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C75FDF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216C9C87C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75FDF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216C9C8AC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_216C9C90C(*(void *)(a1 + 16), *(void *)(a1 + 8), (uint64_t *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_216C9C8C0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75FE58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C9C900()
{
  return &unk_26C75FE58;
}

unint64_t sub_216C9C90C(uint64_t a1, uint64_t a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v4 = (uint64_t *)this;
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = v4[1];
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      uint64_t v10 = *v4;
    }
    return sub_216C9C9C4(a1, a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      uint64_t v4 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    return *(unsigned int *)v4 | 0x4004000000000000;
  }
}

unint64_t sub_216C9C9C4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v26[0] = a2;
  v26[1] = a3;
  unint64_t result = 0x8004000000000000;
  unint64_t v25 = 0x8004000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      uint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7B420(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    unint64_t v13 = sub_216C9CBC4(v9, a4, a4, &v25);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        *(void *)&long long v27 = a2;
        *((void *)&v27 + 1) = a3;
        uint64_t v17 = *a3;
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          *(void *)int64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)&v27, __src);
        }
        else
        {
          *(_DWORD *)int64_t __src = *(void *)a4;
          sub_216C984FC((uint64_t)&v27, __src);
        }
        uint64_t v18 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4;
        unint64_t v19 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)(a4 + 32);
        if (*(void *)a4 > 0xFuLL)
        {
          *(_OWORD *)int64_t __src = v27;
          size_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(v18);
          BOOL v22 = (char *)operator new[](CompressedBufferSize);
          int64_t v24 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(v19, (const unsigned int *)v18, v22, v23);
          int64_t v29 = v24;
          sub_216C80458((uint64_t)__src, (char *)&v29);
          sub_216C6D370((uint64_t)__src, v22, v24);
          operator delete[](v22);
          unint64_t v20 = v17 & 0xFFFFFFFFFFFFLL | 0xA004000000000000;
        }
        else
        {
          unint64_t v20 = v17 & 0xFFFFFFFFFFFFLL | 0x8004000000000000;
          sub_216C93180((uint64_t)&v27, (char *)v19, (uint64_t)v18);
        }
        v13[7] = v20;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v26, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        *(_DWORD *)int64_t __src = 1;
        sub_216C984FC((uint64_t)v26, __src);
        *(_DWORD *)int64_t __src = *(void *)a4;
        sub_216C984FC((uint64_t)v26, __src);
        sub_216C93180((uint64_t)v26, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void sub_216C9CBB0(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_216C9CBC4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = *(void *)a2;
  LOBYTE(v33) = 1;
  uint64_t v32 = v9;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v32, *(pxrInternal__aapl__pxrReserved__ **)(a2 + 32), (char *)(4 * v9));
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * v32);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(i + 2), a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  uint64_t v18 = operator new(0x40uLL);
  int i = v18;
  uint64_t v33 = a1 + 16;
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    unint64_t v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      unint64_t v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  int64_t v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *int64_t v29 = i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    int64_t v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216C9CE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216C9CE88(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216C9CE88(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

__n128 sub_216C9CEE8(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C75FE78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216C9CF34(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75FE78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216C9CF64(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  void v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_216C9CFFC(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_216C9CFB0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75FED8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C9CFF0()
{
  return &unk_26C75FED8;
}

void sub_216C9CFFC(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    long long v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a2 + 32);
    sub_216C9D094(a1, v6, a3, (uint64_t)v8);
    sub_216907130(a4, v8);
    sub_2168F83DC((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u32[0] = a3;
    sub_216B8CA60(a4, v8);
  }
}

void sub_216C9D07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C9D094(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = a3 & 0xFFFFFFFFFFFFLL;
    int v7 = *(unsigned __int8 *)(*a2 + 6369);
    int v8 = *(unsigned __int8 *)(*a2 + 6370);
    int v9 = *(unsigned __int8 *)(*a2 + 6368) << 16;
    unsigned int v10 = v9 | (v7 << 8);
    if (v10 > 0x4FF || (LODWORD(v41) = 0, sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v41)))
    {
      long long v11 = *((_OWORD *)a2 + 1);
      long long v38 = *(_OWORD *)a2;
      long long v39 = v11;
      uint64_t v40 = (pxrInternal__aapl__pxrReserved__ *)a2[4];
      if ((a3 & 0x2000000000000000) == 0 || (unsigned int v12 = v9 | v8 | (v7 << 8), v12 <= 0x4FF))
      {
        unint64_t v13 = (FILE *)v40;
        unint64_t v44 = 0;
        if (v10 > 0x6FF)
        {
          ssize_t v19 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v44, (char *)8, v39 + *((void *)&v38 + 1));
          if (v19 == -1) {
            return;
          }
          unint64_t v20 = v44;
        }
        else
        {
          LODWORD(v41) = 0;
          ssize_t v19 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v41, (char *)4, v39 + *((void *)&v38 + 1));
          if (v19 == -1) {
            return;
          }
          unint64_t v20 = v41;
          unint64_t v44 = v41;
        }
        ssize_t v28 = v19 + v39;
        unint64_t v29 = *((void *)&v39 + 1) - (v19 + v39);
        if (v19 + (void)v39 < 0 || (v29 & 0x8000000000000000) != 0 || v20 > v29 || 4 * v20 > v29)
        {
          *(void *)&long long v41 = "usd/crateFile.cpp";
          *((void *)&v41 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v42 = 2053;
          *((void *)&v42 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_PreadStream>, T = unsigned int]";
          LOBYTE(v43) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld");
          return;
        }
        _8C[0] = 0;
        *(void *)&long long v41 = _8C;
        sub_216906E30((unint64_t *)a4, v20, (_DWORD **)&v41);
        sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v30, v31);
        unint64_t v25 = *(__sFILE **)(a4 + 32);
        unint64_t v26 = (char *)(4 * *(void *)a4);
        off_t v27 = v28 + *((void *)&v38 + 1);
        goto LABEL_30;
      }
      unint64_t v44 = 0;
      if (v12 > 0x6FF)
      {
        unint64_t v13 = (FILE *)v40;
        uint64_t v14 = *((void *)&v38 + 1);
        ssize_t v21 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v44, (char *)8, v39 + *((void *)&v38 + 1));
        if (v21 == -1) {
          return;
        }
        ssize_t v16 = v39 + v21;
        *(void *)&long long v39 = v39 + v21;
        unint64_t v17 = v44;
      }
      else
      {
        LODWORD(v41) = 0;
        unint64_t v13 = (FILE *)v40;
        uint64_t v14 = *((void *)&v38 + 1);
        ssize_t v15 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v41, (char *)4, v39 + *((void *)&v38 + 1));
        if (v15 == -1) {
          return;
        }
        ssize_t v16 = v39 + v15;
        *(void *)&long long v39 = v39 + v15;
        unint64_t v17 = v41;
        unint64_t v44 = v41;
      }
      if (v17 <= 0xF)
      {
        unint64_t v22 = *((void *)&v39 + 1) - v16;
        if (v16 < 0 || (v22 & 0x8000000000000000) != 0 || v17 > v22 || 4 * v17 > v22)
        {
          *(void *)&long long v41 = "usd/crateFile.cpp";
          *((void *)&v41 + 1) = "_ReadPossiblyCompressedArray";
          *(void *)&long long v42 = 2241;
          *((void *)&v42 + 1) = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::"
                                  "value || std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type px"
                                  "rInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, Va"
                                  "lueRep, VtArray<T> *, CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_PreadStream>, T = unsigned int]";
          LOBYTE(v43) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
          return;
        }
        _8C[0] = 0;
        *(void *)&long long v41 = _8C;
        sub_216906E30((unint64_t *)a4, v17, (_DWORD **)&v41);
        sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v23, v24);
        unint64_t v25 = *(__sFILE **)(a4 + 32);
        unint64_t v26 = (char *)(4 * *(void *)a4);
        off_t v27 = v16 + v14;
LABEL_30:
        pxrInternal__aapl__pxrReserved__::ArchPRead(v13, v25, v26, v27);
        return;
      }
      if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v17)
        && pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v17))
      {
        _8C[0] = 0;
        *(void *)&long long v41 = _8C;
        sub_216906E30((unint64_t *)a4, v44, (_DWORD **)&v41);
        sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v32, v33);
        char v34 = *(_DWORD **)(a4 + 32);
        long long v35 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4;
        long long v41 = 0u;
        long long v42 = 0u;
        sub_216C8B724((uint64_t)&v41, (uint64_t)&v38, v34, v35);
        char v36 = (void *)v42;
        *(void *)&long long v42 = 0;
        if (v36) {
          operator delete[](v36);
        }
        int64_t v37 = (void *)v41;
        *(void *)&long long v41 = 0;
        if (v37) {
          operator delete[](v37);
        }
      }
      else
      {
        *(void *)&long long v41 = "usd/crateFile.cpp";
        *((void *)&v41 + 1) = "_ReadPossiblyCompressedArray";
        *(void *)&long long v42 = 2249;
        *((void *)&v42 + 1) = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::va"
                                "lue || std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInt"
                                "ernal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep"
                                ", VtArray<T> *, CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd"
                                "_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadSt"
                                "ream>, T = unsigned int]";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values");
      }
    }
  }
  else
  {
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    if (&v41 != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v18 = v42;
      *(_OWORD *)a4 = v41;
      *(_OWORD *)(a4 + 16) = v18;
      long long v41 = 0u;
      long long v42 = 0u;
      *(void *)(a4 + 32) = v43;
      uint64_t v43 = 0;
    }
    sub_2168F83DC((uint64_t)&v41);
  }
}

void sub_216C9D470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_216C83E54((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216C9D4A4(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C75FEF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216C9D4F0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75FEF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216C9D520(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216C9D528(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75FF58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C9D568()
{
  return &unk_26C75FF58;
}

void sub_216C9D574(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  _DWORD v9[2] = v6;
  v9[3] = v7;
  int v10 = sub_216C688BC();
  sub_216C9D5F4(v5, (uint64_t)v9, v3, v4);
}

void sub_216C9D5F4(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    long long v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a2 + 32);
    sub_216C9D68C(a1, v6, a3, (uint64_t)v8);
    sub_216907130(a4, v8);
    sub_2168F83DC((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u32[0] = a3;
    sub_216B8CA60(a4, v8);
  }
}

void sub_216C9D674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C9D68C(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    int v7 = *(unsigned __int8 *)(*(void *)a2 + 6369);
    int v8 = *(unsigned __int8 *)(*(void *)a2 + 6370);
    int v9 = *(unsigned __int8 *)(*(void *)a2 + 6368) << 16;
    unsigned int v10 = v9 | (v7 << 8);
    if (v10 > 0x4FF || (LODWORD(__dst[0]) = 0, sub_216C82F78((uint64_t)a2 + 8, __dst, 4uLL)))
    {
      long long v11 = a2[1];
      long long v39 = *a2;
      long long v40 = v11;
      uint64_t v41 = *((void *)a2 + 4);
      if ((a3 & 0x2000000000000000) != 0 && (unsigned int v12 = v9 | v8 | (v7 << 8), v12 > 0x4FF))
      {
        *(void *)&long long v42 = 0;
        if (v12 > 0x6FF)
        {
          if (!sub_216C82F78((uint64_t)&v39 + 8, &v42, 8uLL)) {
            return;
          }
          unint64_t v13 = v42;
        }
        else
        {
          LODWORD(__dst[0]) = 0;
          if (!sub_216C82F78((uint64_t)&v39 + 8, __dst, 4uLL)) {
            return;
          }
          unint64_t v13 = LODWORD(__dst[0]);
          *(void *)&long long v42 = LODWORD(__dst[0]);
        }
        if (v13 > 0xF)
        {
          if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v13)
            && pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v13))
          {
            LODWORD(v48) = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)&v48;
            sub_216906E30((unint64_t *)a4, v42, (_DWORD **)__dst);
            sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v32, v33);
            char v34 = *(_DWORD **)(a4 + 32);
            long long v35 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4;
            *(_OWORD *)long long __dst = 0u;
            *(_OWORD *)std::string __p = 0u;
            sub_216C83CFC((uint64_t)__dst, (uint64_t)&v39, v34, v35);
            char v36 = __p[0];
            __p[0] = 0;
            if (v36) {
              operator delete[](v36);
            }
            int64_t v37 = __dst[0];
            __dst[0] = 0;
            if (v37) {
              operator delete[](v37);
            }
          }
          else
          {
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"usd/crateFile.cpp";
            __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"_ReadPossiblyCompressedArray";
            __p[0] = (void *)2249;
            __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value || std:"
                     ":is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aapl__pxrReserv"
                     "ed__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Versio"
                     "n, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__"
                     "aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::Cr"
                     "ateFile::_FileMapping *>>, T = unsigned int]";
            LOBYTE(v47) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values");
          }
        }
        else
        {
          uint64_t v22 = *((void *)&v39 + 1) - *(void *)(*(void *)v40 + 24);
          unint64_t v23 = *(void *)(*(void *)v40 + 32) - v22;
          if ((v22 & 0x8000000000000000) == 0 && (v23 & 0x8000000000000000) == 0 && v13 <= v23 && 4 * v13 <= v23)
          {
            long long v18 = (char *)&v39 + 8;
            LODWORD(v48) = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)&v48;
            unint64_t v25 = (unint64_t *)a4;
            unint64_t v26 = v13;
LABEL_42:
            sub_216906E30(v25, v26, (_DWORD **)__dst);
            sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v30, v31);
            sub_216C82F78((uint64_t)v18, *(void **)(a4 + 32), 4 * *(void *)a4);
            return;
          }
          __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"usd/crateFile.cpp";
          __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"_ReadPossiblyCompressedArray";
          __p[0] = (void *)2241;
          __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value || std::i"
                   "s_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aapl__pxrReserved__"
                   "::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int"
                   ") [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__px"
                   "rReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_"
                   "FileMapping *>>, T = unsigned int]";
          LOBYTE(v47) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
        }
      }
      else
      {
        long long v15 = a2[1];
        long long v42 = *a2;
        long long v43 = v15;
        uint64_t v44 = *((void *)a2 + 4);
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B916F0, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_267B916F0))
        {
          long long v38 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          if (!v38) {
            pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
          }
          byte_267B916E8 = *v38;
          __cxa_guard_release(&qword_267B916F0);
        }
        unint64_t v48 = 0;
        if (v10 > 0x6FF)
        {
          if (!sub_216C82F78((uint64_t)&v42 + 8, &v48, 8uLL)) {
            return;
          }
          unint64_t v16 = (unint64_t)v48;
        }
        else
        {
          LODWORD(__dst[0]) = 0;
          if ((sub_216C82F78((uint64_t)&v42 + 8, __dst, 4uLL) & 1) == 0) {
            return;
          }
          unint64_t v16 = LODWORD(__dst[0]);
          unint64_t v48 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)LODWORD(__dst[0]);
        }
        unint64_t v17 = 4 * v16;
        long long v18 = (char *)&v42 + 8;
        uint64_t v19 = *((void *)&v42 + 1);
        if (!byte_267B916E8 || v17 < 0x800 || (BYTE8(v42) & 3) != 0)
        {
          uint64_t v27 = *((void *)&v42 + 1) - *(void *)(*(void *)v43 + 24);
          unint64_t v28 = *(void *)(*(void *)v43 + 32) - v27;
          if ((v27 & 0x8000000000000000) == 0 && (v28 & 0x8000000000000000) == 0 && v16 <= v28 && v17 <= v28)
          {
            int v49 = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)&v49;
            unint64_t v25 = (unint64_t *)a4;
            unint64_t v26 = v16;
            goto LABEL_42;
          }
          __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"usd/crateFile.cpp";
          __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"_ReadUncompressedArray";
          __p[0] = (void *)2117;
          __p[1] = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>::type pxrInt"
                   "ernal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray<T> *, Cra"
                   "teFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInt"
                   "ernal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFil"
                   "e::CrateFile::_FileMapping *>>, T = unsigned int]";
          LOBYTE(v47) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld");
        }
        else
        {
          unint64_t v20 = (void *)sub_216C99144((uint64_t)&v42 + 8, *((char **)&v42 + 1), 4 * v16, v16);
          if (v20)
          {
            __p[0] = 0;
            __p[1] = v20;
            uint64_t v47 = v19;
            __dst[0] = v48;
            __dst[1] = 0;
            if (__dst != (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4)
            {
              sub_2168F83DC(a4);
              long long v21 = *(_OWORD *)__p;
              *(_OWORD *)a4 = *(_OWORD *)__dst;
              *(_OWORD *)(a4 + 16) = v21;
              *(_OWORD *)long long __dst = 0u;
              *(_OWORD *)std::string __p = 0u;
              *(void *)(a4 + 32) = v47;
              uint64_t v47 = 0;
            }
            sub_2168F83DC((uint64_t)__dst);
          }
          else
          {
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"usd/crateFile.cpp";
            __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"_ReadUncompressedArray";
            __p[0] = (void *)2109;
            __p[1] = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>::type pxrI"
                     "nternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray<T> *,"
                     " CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<"
                     "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_"
                     "CrateFile::CrateFile::_FileMapping *>>, T = unsigned int]";
            LOBYTE(v47) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v17);
            sub_2168F845C((void *)a4);
          }
        }
      }
    }
  }
  else
  {
    uint64_t v47 = 0;
    *(_OWORD *)long long __dst = 0u;
    *(_OWORD *)std::string __p = 0u;
    if (__dst != (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4)
    {
      sub_2168F83DC(a4);
      long long v14 = *(_OWORD *)__p;
      *(_OWORD *)a4 = *(_OWORD *)__dst;
      *(_OWORD *)(a4 + 16) = v14;
      *(_OWORD *)long long __dst = 0u;
      *(_OWORD *)std::string __p = 0u;
      *(void *)(a4 + 32) = v47;
      uint64_t v47 = 0;
    }
    sub_2168F83DC((uint64_t)__dst);
  }
}

void sub_216C9DB84(_Unwind_Exception *a1)
{
}

__n128 sub_216C9DBE4(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C75FF78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216C9DC30(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75FF78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216C9DC60(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216C9DC68(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75FFD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C9DCA8()
{
  return &unk_26C75FFD8;
}

void sub_216C9DCB4(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  int v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    long long v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    long long v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216C9DD60(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216C9DD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C9DD60(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  unsigned __int32 v5 = a3;
  if (a3 < 0)
  {
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    long long v8 = *a2;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)a2 + 2);
    int v9 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *((void *)a2 + 3);
    sub_216C9DE50(a1, (unint64_t *)&v8, a3, (uint64_t)v11);
    if (v9) {
      sub_216784EC4(v9);
    }
    sub_216907130(a4, v11);
    sub_2168F83DC((uint64_t)v11);
  }
  else
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v6);
    }
    v11[0].n128_u32[0] = v5;
    sub_216B8CA60(a4, v11);
  }
}

void sub_216C9DE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C9DE50(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    unint64_t v7 = *a2;
    int v8 = *(unsigned __int8 *)(*a2 + 6369);
    int v9 = *(unsigned __int8 *)(*a2 + 6370);
    int v10 = *(unsigned __int8 *)(*a2 + 6368) << 16;
    unsigned int v11 = v10 | (v8 << 8);
    if (v11 <= 0x4FF)
    {
      LODWORD(v49[0]) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)v49, 4uLL)) {
        return;
      }
      unint64_t v7 = *a2;
    }
    unint64_t v13 = a2[1];
    uint64_t v12 = (std::__shared_weak_count *)a2[2];
    unint64_t v41 = v7;
    unint64_t v42 = v13;
    long long v43 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v14 = a2[3];
    unint64_t v44 = v14;
    if ((a3 & 0x2000000000000000) != 0)
    {
      unsigned int v15 = v10 | v9 | (v8 << 8);
      if (v15 > 0x4FF)
      {
        unint64_t v45 = 0;
        if (v15 > 0x6FF)
        {
          if (sub_216C804FC(&v42, (uint64_t)&v45, 8uLL))
          {
            unint64_t v16 = v45;
LABEL_22:
            if (v16 <= 0xF)
            {
              uint64_t v18 = (*(uint64_t (**)(unint64_t))(*(void *)v42 + 16))(v42);
              unint64_t v19 = v45;
              unint64_t v20 = v18 - v44;
              unint64_t v21 = 4 * v45;
              if ((v44 & 0x8000000000000000) != 0
                || (v20 & 0x8000000000000000) != 0
                || (v45 <= v20 ? (BOOL v22 = v21 > v20) : (BOOL v22 = 1), v22))
              {
                v49[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"usd/crateFile.cpp";
                v49[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"_ReadPossiblyCompressedArray";
                __p[0] = (void *)2241;
                __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value || "
                         "std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aapl__p"
                         "xrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, Crate"
                         "File::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Read"
                         "er<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = unsigned int]";
                LOBYTE(v51) = 0;
                uint64_t v40 = (*(uint64_t (**)(unint64_t))(*(void *)v42 + 16))(v42);
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v49, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld", v19, v21, v20, v40);
              }
              else
              {
                LODWORD(v52) = 0;
                v49[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)&v52;
                sub_216906E30((unint64_t *)a4, v45, (_DWORD **)v49);
                sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v23, v24);
                sub_216C804FC(&v42, *(void *)(a4 + 32), 4 * *(void *)a4);
              }
              goto LABEL_40;
            }
            long long v31 = v43;
            if (v43) {
              atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v16))
            {
              BOOL v32 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v16) != 0;
              if (!v31) {
                goto LABEL_48;
              }
            }
            else
            {
              BOOL v32 = 0;
              if (!v31)
              {
LABEL_48:
                if (v32)
                {
                  LODWORD(v52) = 0;
                  v49[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)&v52;
                  sub_216906E30((unint64_t *)a4, v45, (_DWORD **)v49);
                  sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v33, v34);
                  long long v35 = *(_DWORD **)(a4 + 32);
                  char v36 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4;
                  *(_OWORD *)int v49 = 0u;
                  *(_OWORD *)std::string __p = 0u;
                  sub_216C8F878((uint64_t)v49, (uint64_t)&v41, v35, v36);
                  int64_t v37 = __p[0];
                  __p[0] = 0;
                  if (v37) {
                    operator delete[](v37);
                  }
                  long long v38 = v49[0];
                  v49[0] = 0;
                  if (v38) {
                    operator delete[](v38);
                  }
                }
                else
                {
                  v49[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"usd/crateFile.cpp";
                  v49[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"_ReadPossiblyCompressedArray";
                  __p[0] = (void *)2249;
                  __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value |"
                           "| std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aap"
                           "l__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *,"
                           " CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                           "e::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = unsigned int]";
                  LOBYTE(v51) = 0;
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v49, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values", v45);
                }
                goto LABEL_40;
              }
            }
            sub_216784EC4(v31);
            goto LABEL_48;
          }
        }
        else
        {
          LODWORD(v49[0]) = 0;
          if (sub_216C804FC(&v42, (uint64_t)v49, 4uLL))
          {
            unint64_t v16 = LODWORD(v49[0]);
            unint64_t v45 = LODWORD(v49[0]);
            goto LABEL_22;
          }
        }
LABEL_40:
        if (v43) {
          sub_216784EC4(v43);
        }
        return;
      }
    }
    unint64_t v45 = v7;
    unint64_t v46 = v42;
    uint64_t v47 = v43;
    if (v43)
    {
      atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v14 = v44;
    }
    unint64_t v48 = v14;
    unint64_t v52 = 0;
    if (v11 > 0x6FF)
    {
      if (!sub_216C804FC(&v46, (uint64_t)&v52, 8uLL)) {
        goto LABEL_38;
      }
    }
    else
    {
      LODWORD(v49[0]) = 0;
      if (!sub_216C804FC(&v46, (uint64_t)v49, 4uLL)) {
        goto LABEL_38;
      }
      unint64_t v52 = LODWORD(v49[0]);
    }
    uint64_t v25 = (*(uint64_t (**)(unint64_t))(*(void *)v46 + 16))(v46);
    unint64_t v26 = v25 - v48;
    unint64_t v27 = v52;
    if ((v48 & 0x8000000000000000) != 0
      || (v26 & 0x8000000000000000) != 0
      || (v52 <= v26 ? (BOOL v28 = 4 * v52 > v26) : (BOOL v28 = 1), v28))
    {
      v49[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"usd/crateFile.cpp";
      v49[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"_ReadUncompressedArray";
      __p[0] = (void *)2053;
      __p[1] = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>::type pxrInter"
               "nal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile"
               "::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aap"
               "l__pxrReserved__::Usd_CrateFile::_AssetStream>, T = unsigned int]";
      LOBYTE(v51) = 0;
      uint64_t v39 = (*(uint64_t (**)(unint64_t))(*(void *)v46 + 16))(v46);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v49, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v27, 4 * v27, v26, v39);
    }
    else
    {
      int v53 = 0;
      v49[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)&v53;
      sub_216906E30((unint64_t *)a4, v52, (_DWORD **)v49);
      sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v29, v30);
      sub_216C804FC(&v46, *(void *)(a4 + 32), 4 * *(void *)a4);
    }
LABEL_38:
    if (v47) {
      sub_216784EC4(v47);
    }
    goto LABEL_40;
  }
  uint64_t v51 = 0;
  *(_OWORD *)int v49 = 0u;
  *(_OWORD *)std::string __p = 0u;
  if (v49 != (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4)
  {
    sub_2168F83DC(a4);
    long long v17 = *(_OWORD *)__p;
    *(_OWORD *)a4 = *(_OWORD *)v49;
    *(_OWORD *)(a4 + 16) = v17;
    *(_OWORD *)int v49 = 0u;
    *(_OWORD *)std::string __p = 0u;
    *(void *)(a4 + 32) = v51;
    uint64_t v51 = 0;
  }
  sub_2168F83DC((uint64_t)v49);
}

void sub_216C9E330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::__shared_weak_count *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_216C83E54((uint64_t)va);
  if (a8) {
    sub_216784EC4(a8);
  }
  _Unwind_Resume(a1);
}

__n128 sub_216C9E39C(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C75FFF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216C9E3E8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75FFF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216C9E418(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_216C9E478(*(uint64_t **)(a1 + 16), *(void *)(a1 + 8), (uint64_t *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_216C9E42C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C760058)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C9E46C()
{
  return &unk_26C760058;
}

unint64_t sub_216C9E478(uint64_t *a1, uint64_t a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v4 = this;
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)v4 + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      uint64_t v10 = *(void *)v4;
    }
    return sub_216C9E5BC((uint64_t)a1, a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    v18[0] = a2;
    v18[1] = a3;
    if (*(void *)v4 == (int)*(void *)v4)
    {
      return *(void *)v4 | 0x4005000000000000;
    }
    else
    {
      uint64_t v12 = *a1;
      if (!*a1)
      {
        unint64_t v13 = operator new(0x28uLL);
        _OWORD *v13 = 0u;
        v13[1] = 0u;
        *((_DWORD *)v13 + 8) = 1065353216;
        sub_2168CAEA8(a1, (uint64_t)v13);
        uint64_t v12 = *a1;
      }
      uint64_t v17 = 0;
      unint64_t v14 = sub_216C9EB80(v12, v4, v4, &v17);
      unsigned int v15 = v14;
      if (v16)
      {
        void v14[3] = *a3 & 0xFFFFFFFFFFFFLL | 0x5000000000000;
        sub_216C80458((uint64_t)v18, (char *)v4);
      }
      return v15[3];
    }
  }
}

unint64_t sub_216C9E5BC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v26[0] = a2;
  v26[1] = a3;
  unint64_t result = 0x8005000000000000;
  unint64_t v25 = 0x8005000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      uint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7B4E0(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    unint64_t v13 = sub_216C9E864(v9, a4, a4, &v25);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        *(void *)&long long v27 = a2;
        *((void *)&v27 + 1) = a3;
        uint64_t v17 = *a3;
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          *(void *)int64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)&v27, __src);
        }
        else
        {
          *(_DWORD *)int64_t __src = *(void *)a4;
          sub_216C984FC((uint64_t)&v27, __src);
        }
        uint64_t v18 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4;
        unint64_t v19 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)(a4 + 32);
        if (*(void *)a4 > 0xFuLL)
        {
          *(_OWORD *)int64_t __src = v27;
          size_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetCompressedBufferSize(v18);
          BOOL v22 = (char *)operator new[](CompressedBufferSize);
          int64_t v24 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::CompressToBuffer(v19, (const uint64_t *)v18, v22, v23);
          int64_t v29 = v24;
          sub_216C80458((uint64_t)__src, (char *)&v29);
          sub_216C6D370((uint64_t)__src, v22, v24);
          operator delete[](v22);
          unint64_t v20 = v17 & 0xFFFFFFFFFFFFLL | 0xA005000000000000;
        }
        else
        {
          unint64_t v20 = v17 & 0xFFFFFFFFFFFFLL | 0x8005000000000000;
          sub_216C9E7BC((uint64_t)&v27, (char *)v19, (uint64_t)v18);
        }
        v13[7] = v20;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v26, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        *(_DWORD *)int64_t __src = 1;
        sub_216C984FC((uint64_t)v26, __src);
        *(_DWORD *)int64_t __src = *(void *)a4;
        sub_216C984FC((uint64_t)v26, __src);
        sub_216C9E7BC((uint64_t)v26, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void sub_216C9E7A8(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C9E7BC(uint64_t result, char *__src, uint64_t a3)
{
  uint64_t v3 = 8 * a3;
  if (8 * a3)
  {
    unsigned __int32 v5 = *(void **)(result + 8);
    do
    {
      uint64_t v6 = v5[2];
      uint64_t v7 = v6 - *v5 + 0x80000;
      if (v3 >= v7) {
        size_t v8 = v6 - *v5 + 0x80000;
      }
      else {
        size_t v8 = v3;
      }
      uint64_t v9 = *v5 - v6;
      if ((int64_t)(v8 + v9) > v5[4]) {
        v5[4] = v8 + v9;
      }
      unint64_t result = (uint64_t)memcpy((void *)(v5[3] + v9), __src, v8);
      *v5 += v8;
      if (v7 <= v3) {
        unint64_t result = sub_216C7A9E4((BOOL)v5);
      }
      __src += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return result;
}

void *sub_216C9E864(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = *(void *)a2;
  LOBYTE(v33) = 1;
  uint64_t v32 = v9;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v32, *(pxrInternal__aapl__pxrReserved__ **)(a2 + 32), (char *)(8 * v9));
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * v32);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_2169ADC94((uint64_t)(i + 2), a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  uint64_t v18 = operator new(0x40uLL);
  int i = v18;
  uint64_t v33 = a1 + 16;
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    unint64_t v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      unint64_t v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  int64_t v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *int64_t v29 = i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    int64_t v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216C9EB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216C9EB28(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216C9EB28(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void *sub_216C9EB80(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * *a2);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (int i = *v11; i; int i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  int i = operator new(0x20uLL);
  *int i = 0;
  i[1] = v8;
  uint64_t v14 = *a4;
  i[2] = *a3;
  i[3] = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_21678A04C(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  float v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *int i = *v22;
LABEL_38:
    void *v22 = i;
    goto LABEL_39;
  }
  *int i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    float v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216C9EDB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216C9EDCC(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C760078;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216C9EE18(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C760078;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216C9EE48(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  void v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_216C9EEE0(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_216C9EE94(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7600D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C9EED4()
{
  return &unk_26C7600D8;
}

void sub_216C9EEE0(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    long long v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a2 + 32);
    sub_216C9EFA4(a1, v6, a3, (uint64_t)v8);
    sub_216B8CCF0(a4, v8);
    sub_2168F83DC((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u64[0] = 0;
    if ((a3 & 0x4000000000000000) != 0) {
      v8[0].n128_u64[0] = (int)a3;
    }
    else {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v8, (char *)8, *(void *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    sub_216B8CC78(a4, (uint64_t *)v8);
  }
}

void sub_216C9EF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C9EFA4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = a3 & 0xFFFFFFFFFFFFLL;
    int v7 = *(unsigned __int8 *)(*a2 + 6369);
    int v8 = *(unsigned __int8 *)(*a2 + 6370);
    int v9 = *(unsigned __int8 *)(*a2 + 6368) << 16;
    unsigned int v10 = v9 | (v7 << 8);
    if (v10 > 0x4FF || (LODWORD(v41) = 0, sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v41)))
    {
      long long v11 = *((_OWORD *)a2 + 1);
      long long v38 = *(_OWORD *)a2;
      long long v39 = v11;
      uint64_t v40 = (pxrInternal__aapl__pxrReserved__ *)a2[4];
      if ((a3 & 0x2000000000000000) == 0 || (unsigned int v12 = v9 | v8 | (v7 << 8), v12 <= 0x4FF))
      {
        unint64_t v13 = (FILE *)v40;
        unint64_t v44 = 0;
        if (v10 > 0x6FF)
        {
          ssize_t v19 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v44, (char *)8, v39 + *((void *)&v38 + 1));
          if (v19 == -1) {
            return;
          }
          unint64_t v20 = v44;
        }
        else
        {
          LODWORD(v41) = 0;
          ssize_t v19 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v41, (char *)4, v39 + *((void *)&v38 + 1));
          if (v19 == -1) {
            return;
          }
          unint64_t v20 = v41;
          unint64_t v44 = v41;
        }
        ssize_t v28 = v19 + v39;
        unint64_t v29 = *((void *)&v39 + 1) - (v19 + v39);
        if (v19 + (void)v39 < 0 || (v29 & 0x8000000000000000) != 0 || v20 > v29 || 8 * v20 > v29)
        {
          *(void *)&long long v41 = "usd/crateFile.cpp";
          *((void *)&v41 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v42 = 2053;
          *((void *)&v42 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_PreadStream>, T = long long]";
          LOBYTE(v43) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld");
          return;
        }
        _88[0] = 0;
        *(void *)&long long v41 = _88;
        sub_2169ADDD0((unint64_t *)a4, v20, (uint64_t **)&v41);
        sub_2169AE038((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v30, v31);
        unint64_t v25 = *(__sFILE **)(a4 + 32);
        unint64_t v26 = (char *)(8 * *(void *)a4);
        off_t v27 = v28 + *((void *)&v38 + 1);
        goto LABEL_30;
      }
      unint64_t v44 = 0;
      if (v12 > 0x6FF)
      {
        unint64_t v13 = (FILE *)v40;
        uint64_t v14 = *((void *)&v38 + 1);
        ssize_t v21 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v44, (char *)8, v39 + *((void *)&v38 + 1));
        if (v21 == -1) {
          return;
        }
        ssize_t v16 = v39 + v21;
        *(void *)&long long v39 = v39 + v21;
        unint64_t v17 = v44;
      }
      else
      {
        LODWORD(v41) = 0;
        unint64_t v13 = (FILE *)v40;
        uint64_t v14 = *((void *)&v38 + 1);
        ssize_t v15 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v41, (char *)4, v39 + *((void *)&v38 + 1));
        if (v15 == -1) {
          return;
        }
        ssize_t v16 = v39 + v15;
        *(void *)&long long v39 = v39 + v15;
        unint64_t v17 = v41;
        unint64_t v44 = v41;
      }
      if (v17 <= 0xF)
      {
        unint64_t v22 = *((void *)&v39 + 1) - v16;
        if (v16 < 0 || (v22 & 0x8000000000000000) != 0 || v17 > v22 || 8 * v17 > v22)
        {
          *(void *)&long long v41 = "usd/crateFile.cpp";
          *((void *)&v41 + 1) = "_ReadPossiblyCompressedArray";
          *(void *)&long long v42 = 2241;
          *((void *)&v42 + 1) = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::"
                                  "value || std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type px"
                                  "rInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, Va"
                                  "lueRep, VtArray<T> *, CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_PreadStream>, T = long long]";
          LOBYTE(v43) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
          return;
        }
        _88[0] = 0;
        *(void *)&long long v41 = _88;
        sub_2169ADDD0((unint64_t *)a4, v17, (uint64_t **)&v41);
        sub_2169AE038((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v23, v24);
        unint64_t v25 = *(__sFILE **)(a4 + 32);
        unint64_t v26 = (char *)(8 * *(void *)a4);
        off_t v27 = v16 + v14;
LABEL_30:
        pxrInternal__aapl__pxrReserved__::ArchPRead(v13, v25, v26, v27);
        return;
      }
      if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v17)
        && pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v17))
      {
        _88[0] = 0;
        *(void *)&long long v41 = _88;
        sub_2169ADDD0((unint64_t *)a4, v44, (uint64_t **)&v41);
        sub_2169AE038((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v32, v33);
        char v34 = *(void **)(a4 + 32);
        long long v35 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4;
        long long v41 = 0u;
        long long v42 = 0u;
        sub_216C9F3FC((uint64_t)&v41, (uint64_t)&v38, v34, v35);
        char v36 = (void *)v42;
        *(void *)&long long v42 = 0;
        if (v36) {
          operator delete[](v36);
        }
        int64_t v37 = (void *)v41;
        *(void *)&long long v41 = 0;
        if (v37) {
          operator delete[](v37);
        }
      }
      else
      {
        *(void *)&long long v41 = "usd/crateFile.cpp";
        *((void *)&v41 + 1) = "_ReadPossiblyCompressedArray";
        *(void *)&long long v42 = 2249;
        *((void *)&v42 + 1) = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::va"
                                "lue || std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInt"
                                "ernal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep"
                                ", VtArray<T> *, CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd"
                                "_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadSt"
                                "ream>, T = long long]";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values");
      }
    }
  }
  else
  {
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    if (&v41 != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v18 = v42;
      *(_OWORD *)a4 = v41;
      *(_OWORD *)(a4 + 16) = v18;
      long long v41 = 0u;
      long long v42 = 0u;
      *(void *)(a4 + 32) = v43;
      uint64_t v43 = 0;
    }
    sub_2168F83DC((uint64_t)&v41);
  }
}

void sub_216C9F380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_216C83E54((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_216C9F3AC(uint64_t a1, __sFILE *a2, uint64_t a3)
{
  ssize_t v4 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 32), a2, (char *)(8 * a3), *(void *)(a1 + 16) + *(void *)(a1 + 8));
  if (v4 != -1) {
    *(void *)(a1 + 16) += v4;
  }
  return v4 != -1;
}

BOOL sub_216C9F3FC(uint64_t a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *a4)
{
  sub_216C9F53C(a1, a4);
  unint64_t v20 = 0;
  BOOL result = sub_216C8B2C8(a2 + 8, 0, (__sFILE *)&v20);
  if (result)
  {
    uint64_t v10 = *(void *)(a2 + 16);
    uint64_t v9 = *(void *)(a2 + 24);
    unint64_t v11 = *(void *)(a1 + 8);
    unsigned int v12 = v20;
    if (v11 < (unint64_t)v20) {
      unsigned int v12 = *(char **)(a1 + 8);
    }
    if (v9 - v10 >= (unint64_t)v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = (char *)(v9 - v10);
    }
    unint64_t v20 = v13;
    if (v11 && *(void *)(a1 + 24))
    {
      if ((v10 & 0x8000000000000000) == 0)
      {
        BOOL result = sub_216C6FD88(a2, *(__sFILE **)a1, v13);
        if (result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a1, v20, a3, (int64_t)a4, *(char **)(a1 + 16), v14);
          return 1;
        }
        return result;
      }
      ssize_t v15 = "usd/crateFile.cpp";
      ssize_t v16 = "Read";
      uint64_t v17 = 2158;
      long long v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_PreadStream>, Int = long long]";
      char v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      ssize_t v15 = "usd/crateFile.cpp";
      ssize_t v16 = "Read";
      uint64_t v17 = 2153;
      long long v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_PreadStream>, Int = long long]";
      char v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

void sub_216C9F53C(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *this)
{
  size_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetCompressedBufferSize(this);
  size_t DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetDecompressionWorkingSpaceSize(this);
  if (CompressedBufferSize > *(void *)(a1 + 8))
  {
    uint64_t v6 = operator new[](CompressedBufferSize);
    int v7 = *(void **)a1;
    *(void *)a1 = v6;
    if (v7) {
      operator delete[](v7);
    }
    *(void *)(a1 + 8) = CompressedBufferSize;
  }
  if (DecompressionWorkingSpaceSize > *(void *)(a1 + 24))
  {
    int v8 = operator new[](DecompressionWorkingSpaceSize);
    uint64_t v9 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v8;
    if (v9) {
      operator delete[](v9);
    }
    *(void *)(a1 + 24) = DecompressionWorkingSpaceSize;
  }
}

__n128 sub_216C9F5E0(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C7600F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216C9F62C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7600F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216C9F65C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216C9F664(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C760158)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C9F6A4()
{
  return &unk_26C760158;
}

void sub_216C9F6B0(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  ssize_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  _DWORD v9[2] = v6;
  v9[3] = v7;
  int v10 = sub_216C688BC();
  sub_216C9F730(v5, (uint64_t)v9, v3, v4);
}

void sub_216C9F730(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v13 = 0;
    memset(__dst, 0, sizeof(__dst));
    long long v6 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v6;
    uint64_t v11 = *(void *)(a2 + 32);
    sub_216C9F814(a1, v10, a3, (uint64_t)__dst);
    sub_216B8CCF0(a4, __dst);
    sub_2168F83DC((uint64_t)__dst);
  }
  else
  {
    __dst[0].n128_u64[0] = 0;
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v7 = *(_OWORD *)a2;
    long long v8 = v5;
    uint64_t v9 = *(void *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      __dst[0].n128_u64[0] = (int)a3;
    }
    else
    {
      *((void *)&v7 + 1) = *(void *)(*(void *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_216C82F78((uint64_t)&v7 + 8, __dst, 8uLL);
    }
    sub_216B8CC78(a4, (uint64_t *)__dst);
  }
}

void sub_216C9F7FC(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_216C9F814(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    int v7 = *(unsigned __int8 *)(*(void *)a2 + 6369);
    int v8 = *(unsigned __int8 *)(*(void *)a2 + 6370);
    int v9 = *(unsigned __int8 *)(*(void *)a2 + 6368) << 16;
    unsigned int v10 = v9 | (v7 << 8);
    if (v10 > 0x4FF || (LODWORD(__dst[0]) = 0, sub_216C82F78((uint64_t)a2 + 8, __dst, 4uLL)))
    {
      long long v11 = a2[1];
      long long v39 = *a2;
      long long v40 = v11;
      uint64_t v41 = *((void *)a2 + 4);
      if ((a3 & 0x2000000000000000) != 0 && (unsigned int v12 = v9 | v8 | (v7 << 8), v12 > 0x4FF))
      {
        unint64_t v49 = 0;
        if (v12 > 0x6FF)
        {
          if (!sub_216C82F78((uint64_t)&v39 + 8, &v49, 8uLL)) {
            return;
          }
          unint64_t v13 = v49;
        }
        else
        {
          LODWORD(__dst[0]) = 0;
          if (!sub_216C82F78((uint64_t)&v39 + 8, __dst, 4uLL)) {
            return;
          }
          unint64_t v13 = LODWORD(__dst[0]);
          unint64_t v49 = LODWORD(__dst[0]);
        }
        if (v13 > 0xF)
        {
          if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v13)
            && pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v13))
          {
            *(void *)&long long v42 = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)&v42;
            sub_2169ADDD0((unint64_t *)a4, v49, (uint64_t **)__dst);
            sub_2169AE038((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v32, v33);
            char v34 = *(void **)(a4 + 32);
            long long v35 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4;
            *(_OWORD *)long long __dst = 0u;
            *(_OWORD *)std::string __p = 0u;
            sub_216C9FD64((uint64_t)__dst, (uint64_t)&v39, v34, v35);
            char v36 = __p[0];
            __p[0] = 0;
            if (v36) {
              operator delete[](v36);
            }
            int64_t v37 = __dst[0];
            __dst[0] = 0;
            if (v37) {
              operator delete[](v37);
            }
          }
          else
          {
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"usd/crateFile.cpp";
            __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"_ReadPossiblyCompressedArray";
            __p[0] = (void *)2249;
            __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value || std:"
                     ":is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aapl__pxrReserv"
                     "ed__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Versio"
                     "n, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__"
                     "aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::Cr"
                     "ateFile::_FileMapping *>>, T = long long]";
            LOBYTE(v47) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values");
          }
        }
        else
        {
          uint64_t v22 = *((void *)&v39 + 1) - *(void *)(*(void *)v40 + 24);
          unint64_t v23 = *(void *)(*(void *)v40 + 32) - v22;
          if ((v22 & 0x8000000000000000) == 0 && (v23 & 0x8000000000000000) == 0 && v13 <= v23 && 8 * v13 <= v23)
          {
            long long v18 = (char *)&v39 + 8;
            *(void *)&long long v42 = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)&v42;
            unint64_t v25 = (unint64_t *)a4;
            unint64_t v26 = v13;
LABEL_42:
            sub_2169ADDD0(v25, v26, (uint64_t **)__dst);
            sub_2169AE038((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v30, v31);
            sub_216C82F78((uint64_t)v18, *(void **)(a4 + 32), 8 * *(void *)a4);
            return;
          }
          __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"usd/crateFile.cpp";
          __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"_ReadPossiblyCompressedArray";
          __p[0] = (void *)2241;
          __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value || std::i"
                   "s_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aapl__pxrReserved__"
                   "::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int"
                   ") [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__px"
                   "rReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_"
                   "FileMapping *>>, T = long long]";
          LOBYTE(v47) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
        }
      }
      else
      {
        long long v15 = a2[1];
        long long v42 = *a2;
        long long v43 = v15;
        uint64_t v44 = *((void *)a2 + 4);
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91700, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_267B91700))
        {
          long long v38 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          if (!v38) {
            pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
          }
          byte_267B916F8 = *v38;
          __cxa_guard_release(&qword_267B91700);
        }
        unint64_t v48 = 0;
        if (v10 > 0x6FF)
        {
          if (!sub_216C82F78((uint64_t)&v42 + 8, &v48, 8uLL)) {
            return;
          }
          unint64_t v16 = (unint64_t)v48;
        }
        else
        {
          LODWORD(__dst[0]) = 0;
          if ((sub_216C82F78((uint64_t)&v42 + 8, __dst, 4uLL) & 1) == 0) {
            return;
          }
          unint64_t v16 = LODWORD(__dst[0]);
          unint64_t v48 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)LODWORD(__dst[0]);
        }
        unint64_t v17 = 8 * v16;
        long long v18 = (char *)&v42 + 8;
        uint64_t v19 = *((void *)&v42 + 1);
        if (!byte_267B916F8 || v17 < 0x800 || (BYTE8(v42) & 7) != 0)
        {
          uint64_t v27 = *((void *)&v42 + 1) - *(void *)(*(void *)v43 + 24);
          unint64_t v28 = *(void *)(*(void *)v43 + 32) - v27;
          if ((v27 & 0x8000000000000000) == 0 && (v28 & 0x8000000000000000) == 0 && v16 <= v28 && v17 <= v28)
          {
            unint64_t v49 = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)&v49;
            unint64_t v25 = (unint64_t *)a4;
            unint64_t v26 = v16;
            goto LABEL_42;
          }
          __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"usd/crateFile.cpp";
          __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"_ReadUncompressedArray";
          __p[0] = (void *)2117;
          __p[1] = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>::type pxrInt"
                   "ernal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray<T> *, Cra"
                   "teFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInt"
                   "ernal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFil"
                   "e::CrateFile::_FileMapping *>>, T = long long]";
          LOBYTE(v47) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld");
        }
        else
        {
          unint64_t v20 = (void *)sub_216C99144((uint64_t)&v42 + 8, *((char **)&v42 + 1), 8 * v16, v16);
          if (v20)
          {
            __p[0] = 0;
            __p[1] = v20;
            uint64_t v47 = v19;
            __dst[0] = v48;
            __dst[1] = 0;
            if (__dst != (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4)
            {
              sub_2168F83DC(a4);
              long long v21 = *(_OWORD *)__p;
              *(_OWORD *)a4 = *(_OWORD *)__dst;
              *(_OWORD *)(a4 + 16) = v21;
              *(_OWORD *)long long __dst = 0u;
              *(_OWORD *)std::string __p = 0u;
              *(void *)(a4 + 32) = v47;
              uint64_t v47 = 0;
            }
            sub_2168F83DC((uint64_t)__dst);
          }
          else
          {
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"usd/crateFile.cpp";
            __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"_ReadUncompressedArray";
            __p[0] = (void *)2109;
            __p[1] = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>::type pxrI"
                     "nternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray<T> *,"
                     " CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<"
                     "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_"
                     "CrateFile::CrateFile::_FileMapping *>>, T = long long]";
            LOBYTE(v47) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v17);
            sub_2168F845C((void *)a4);
          }
        }
      }
    }
  }
  else
  {
    uint64_t v47 = 0;
    *(_OWORD *)long long __dst = 0u;
    *(_OWORD *)std::string __p = 0u;
    if (__dst != (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4)
    {
      sub_2168F83DC(a4);
      long long v14 = *(_OWORD *)__p;
      *(_OWORD *)a4 = *(_OWORD *)__dst;
      *(_OWORD *)(a4 + 16) = v14;
      *(_OWORD *)long long __dst = 0u;
      *(_OWORD *)std::string __p = 0u;
      *(void *)(a4 + 32) = v47;
      uint64_t v47 = 0;
    }
    sub_2168F83DC((uint64_t)__dst);
  }
}

void sub_216C9FD0C(_Unwind_Exception *a1)
{
}

uint64_t sub_216C9FD64(uint64_t a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *this)
{
  sub_216C9F53C(a1, this);
  long long __dst = 0;
  uint64_t result = sub_216C82F78(a2 + 8, &__dst, 8uLL);
  if (result)
  {
    uint64_t v9 = *(void *)(**(void **)(a2 + 16) + 32);
    uint64_t v10 = *(void *)(a2 + 8) - *(void *)(**(void **)(a2 + 16) + 24);
    unint64_t v11 = *(void *)(a1 + 8);
    unsigned int v12 = __dst;
    if (v11 < (unint64_t)__dst) {
      unsigned int v12 = *(char **)(a1 + 8);
    }
    if (v9 - v10 >= (unint64_t)v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = (char *)(v9 - v10);
    }
    long long __dst = v13;
    if (v11 && *(void *)(a1 + 24))
    {
      if ((v10 & 0x8000000000000000) == 0)
      {
        uint64_t result = sub_216C82F78(a2 + 8, *(void **)a1, (size_t)v13);
        if (result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a1, __dst, a3, (int64_t)this, *(char **)(a1 + 16), v14);
          return 1;
        }
        return result;
      }
      long long v15 = "usd/crateFile.cpp";
      unint64_t v16 = "Read";
      uint64_t v17 = 2158;
      long long v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, "
            "Int = long long]";
      char v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      long long v15 = "usd/crateFile.cpp";
      unint64_t v16 = "Read";
      uint64_t v17 = 2153;
      long long v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, "
            "Int = long long]";
      char v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

__n128 sub_216C9FEC4(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C760178;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216C9FF10(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C760178;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216C9FF40(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216C9FF48(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7601D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C9FF88()
{
  return &unk_26C7601D8;
}

void sub_216C9FF94(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    unint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    unint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CA0040(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CA001C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CA0040(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if ((a3 & 0x8000000000000000) == 0)
  {
    v13[0].n128_u64[0] = 0;
    long long v7 = *a2;
    long long v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v8 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *((void *)a2 + 3);
    if ((a3 & 0x4000000000000000) != 0)
    {
      v13[0].n128_u64[0] = (int)a3;
      if (!v5)
      {
LABEL_14:
        sub_216B8CC78(a4, (uint64_t *)v13);
        return;
      }
    }
    else
    {
      uint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
      sub_216C804FC((void *)&v7 + 1, (uint64_t)v13, 8uLL);
      long long v5 = v8;
      if (!v8) {
        goto LABEL_14;
      }
    }
    sub_216784EC4(v5);
    goto LABEL_14;
  }
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  long long v10 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
  unint64_t v11 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *((void *)a2 + 3);
  sub_216CA0188(a1, &v10, a3, (uint64_t)v13);
  if (v11) {
    sub_216784EC4(v11);
  }
  sub_216B8CCF0(a4, v13);
  sub_2168F83DC((uint64_t)v13);
}

void sub_216CA0144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CA0188(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    uint64_t v7 = *a2;
    int v8 = *(unsigned __int8 *)(*a2 + 6369);
    int v9 = *(unsigned __int8 *)(*a2 + 6370);
    int v10 = *(unsigned __int8 *)(*a2 + 6368) << 16;
    unsigned int v11 = v10 | (v8 << 8);
    if (v11 <= 0x4FF)
    {
      LODWORD(v48[0]) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)v48, 4uLL)) {
        return;
      }
      uint64_t v7 = *a2;
    }
    uint64_t v13 = a2[1];
    uint64_t v12 = (std::__shared_weak_count *)a2[2];
    uint64_t v40 = v7;
    uint64_t v41 = v13;
    long long v42 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = a2[3];
    uint64_t v43 = v14;
    if ((a3 & 0x2000000000000000) != 0)
    {
      unsigned int v15 = v10 | v9 | (v8 << 8);
      if (v15 > 0x4FF)
      {
        unint64_t v52 = 0;
        if (v15 > 0x6FF)
        {
          if (sub_216C804FC(&v41, (uint64_t)&v52, 8uLL))
          {
            unint64_t v16 = v52;
LABEL_22:
            if (v16 <= 0xF)
            {
              uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 16))(v41);
              unint64_t v19 = v18 - v43;
              unint64_t v20 = v52;
              if (v43 < 0 || (v19 & 0x8000000000000000) != 0 || (v52 <= v19 ? (BOOL v21 = 8 * v52 > v19) : (BOOL v21 = 1), v21))
              {
                v48[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"usd/crateFile.cpp";
                v48[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"_ReadPossiblyCompressedArray";
                __p[0] = (void *)2241;
                __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value || "
                         "std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aapl__p"
                         "xrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, Crate"
                         "File::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Read"
                         "er<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = long long]";
                LOBYTE(v50) = 0;
                uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 16))(v41);
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v48, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld", v20, 8 * v20, v19, v39);
              }
              else
              {
                uint64_t v44 = 0;
                v48[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)&v44;
                sub_2169ADDD0((unint64_t *)a4, v52, (uint64_t **)v48);
                sub_2169AE038((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v22, v23);
                sub_216C804FC(&v41, *(void *)(a4 + 32), 8 * *(void *)a4);
              }
              goto LABEL_40;
            }
            uint64_t v30 = v42;
            if (v42) {
              atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v16))
            {
              BOOL v31 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v16) != 0;
              if (!v30) {
                goto LABEL_48;
              }
            }
            else
            {
              BOOL v31 = 0;
              if (!v30)
              {
LABEL_48:
                if (v31)
                {
                  uint64_t v44 = 0;
                  v48[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)&v44;
                  sub_2169ADDD0((unint64_t *)a4, v52, (uint64_t **)v48);
                  sub_2169AE038((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v32, v33);
                  char v34 = *(void **)(a4 + 32);
                  long long v35 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4;
                  *(_OWORD *)unint64_t v48 = 0u;
                  *(_OWORD *)std::string __p = 0u;
                  sub_216CA06D0((uint64_t)v48, (uint64_t)&v40, v34, v35);
                  char v36 = __p[0];
                  __p[0] = 0;
                  if (v36) {
                    operator delete[](v36);
                  }
                  int64_t v37 = v48[0];
                  v48[0] = 0;
                  if (v37) {
                    operator delete[](v37);
                  }
                }
                else
                {
                  v48[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"usd/crateFile.cpp";
                  v48[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"_ReadPossiblyCompressedArray";
                  __p[0] = (void *)2249;
                  __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value |"
                           "| std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aap"
                           "l__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *,"
                           " CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                           "e::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = long long]";
                  LOBYTE(v50) = 0;
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v48, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values", v52);
                }
                goto LABEL_40;
              }
            }
            sub_216784EC4(v30);
            goto LABEL_48;
          }
        }
        else
        {
          LODWORD(v48[0]) = 0;
          if (sub_216C804FC(&v41, (uint64_t)v48, 4uLL))
          {
            unint64_t v16 = LODWORD(v48[0]);
            unint64_t v52 = LODWORD(v48[0]);
            goto LABEL_22;
          }
        }
LABEL_40:
        if (v42) {
          sub_216784EC4(v42);
        }
        return;
      }
    }
    uint64_t v44 = v7;
    uint64_t v45 = v41;
    unint64_t v46 = v42;
    if (v42)
    {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v14 = v43;
    }
    uint64_t v47 = v14;
    unint64_t v51 = 0;
    if (v11 > 0x6FF)
    {
      if (!sub_216C804FC(&v45, (uint64_t)&v51, 8uLL)) {
        goto LABEL_38;
      }
    }
    else
    {
      LODWORD(v48[0]) = 0;
      if (!sub_216C804FC(&v45, (uint64_t)v48, 4uLL)) {
        goto LABEL_38;
      }
      unint64_t v51 = LODWORD(v48[0]);
    }
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 16))(v45);
    unint64_t v25 = v24 - v47;
    unint64_t v26 = v51;
    if (v47 < 0 || (v25 & 0x8000000000000000) != 0 || (v51 <= v25 ? (BOOL v27 = 8 * v51 > v25) : (BOOL v27 = 1), v27))
    {
      v48[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"usd/crateFile.cpp";
      v48[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"_ReadUncompressedArray";
      __p[0] = (void *)2053;
      __p[1] = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>::type pxrInter"
               "nal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile"
               "::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aap"
               "l__pxrReserved__::Usd_CrateFile::_AssetStream>, T = long long]";
      LOBYTE(v50) = 0;
      uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 16))(v45);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v48, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v26, 8 * v26, v25, v38);
    }
    else
    {
      unint64_t v52 = 0;
      v48[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)&v52;
      sub_2169ADDD0((unint64_t *)a4, v51, (uint64_t **)v48);
      sub_2169AE038((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v28, v29);
      sub_216C804FC(&v45, *(void *)(a4 + 32), 8 * *(void *)a4);
    }
LABEL_38:
    if (v46) {
      sub_216784EC4(v46);
    }
    goto LABEL_40;
  }
  uint64_t v50 = 0;
  *(_OWORD *)unint64_t v48 = 0u;
  *(_OWORD *)std::string __p = 0u;
  if (v48 != (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4)
  {
    sub_2168F83DC(a4);
    long long v17 = *(_OWORD *)__p;
    *(_OWORD *)a4 = *(_OWORD *)v48;
    *(_OWORD *)(a4 + 16) = v17;
    *(_OWORD *)unint64_t v48 = 0u;
    *(_OWORD *)std::string __p = 0u;
    *(void *)(a4 + 32) = v50;
    uint64_t v50 = 0;
  }
  sub_2168F83DC((uint64_t)v48);
}

void sub_216CA066C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::__shared_weak_count *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_216C83E54((uint64_t)va);
  if (a8) {
    sub_216784EC4(a8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216CA06D0(uint64_t a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *this)
{
  sub_216C9F53C(a1, this);
  BOOL v21 = 0;
  int v8 = (void *)(a2 + 8);
  uint64_t result = sub_216C804FC((void *)(a2 + 8), (uint64_t)&v21, 8uLL);
  if (result)
  {
    uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8));
    uint64_t v11 = *(void *)(a2 + 24);
    unint64_t v12 = *(void *)(a1 + 8);
    uint64_t v13 = v21;
    if (v12 < (unint64_t)v21) {
      uint64_t v13 = *(char **)(a1 + 8);
    }
    if (v10 - v11 >= (unint64_t)v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = (char *)(v10 - v11);
    }
    BOOL v21 = v14;
    if (v12 && *(void *)(a1 + 24))
    {
      if ((v11 & 0x8000000000000000) == 0)
      {
        uint64_t result = sub_216C804FC(v8, *(void *)a1, (unint64_t)v14);
        if (result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a1, v21, a3, (int64_t)this, *(char **)(a1 + 16), v15);
          return 1;
        }
        return result;
      }
      unint64_t v16 = "usd/crateFile.cpp";
      long long v17 = "Read";
      uint64_t v18 = 2158;
      unint64_t v19 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_AssetStream>, Int = long long]";
      char v20 = 0;
      (*(void (**)(void))(*(void *)*v8 + 16))();
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      unint64_t v16 = "usd/crateFile.cpp";
      long long v17 = "Read";
      uint64_t v18 = 2153;
      unint64_t v19 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_AssetStream>, Int = long long]";
      char v20 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

__n128 sub_216CA0878(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C7601F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CA08C4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7601F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CA08F4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_216CA0954(*(uint64_t **)(a1 + 16), *(void *)(a1 + 8), (uint64_t *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_216CA0908(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C760258)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CA0948()
{
  return &unk_26C760258;
}

unint64_t sub_216CA0954(uint64_t *a1, uint64_t a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v4 = this;
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)v4 + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      uint64_t v10 = *(void *)v4;
    }
    return sub_216CA0A98((uint64_t)a1, a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    v18[0] = a2;
    v18[1] = a3;
    if (HIDWORD(*(void *)v4))
    {
      uint64_t v12 = *a1;
      if (!*a1)
      {
        uint64_t v13 = operator new(0x28uLL);
        _OWORD *v13 = 0u;
        v13[1] = 0u;
        *((_DWORD *)v13 + 8) = 1065353216;
        sub_2168CAEA8(a1, (uint64_t)v13);
        uint64_t v12 = *a1;
      }
      uint64_t v17 = 0;
      uint64_t v14 = sub_216C9EB80(v12, v4, v4, &v17);
      unsigned int v15 = v14;
      if (v16)
      {
        void v14[3] = *a3 & 0xFFFFFFFFFFFFLL | 0x6000000000000;
        sub_216C80458((uint64_t)v18, (char *)v4);
      }
      return v15[3];
    }
    else
    {
      return *(void *)v4 | 0x4006000000000000;
    }
  }
}

unint64_t sub_216CA0A98(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v26[0] = a2;
  v26[1] = a3;
  unint64_t result = 0x8006000000000000;
  unint64_t v25 = 0x8006000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      uint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7B5A0(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    uint64_t v13 = sub_216CA0C98(v9, a4, a4, &v25);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        *(void *)&long long v27 = a2;
        *((void *)&v27 + 1) = a3;
        uint64_t v17 = *a3;
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          *(void *)int64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)&v27, __src);
        }
        else
        {
          *(_DWORD *)int64_t __src = *(void *)a4;
          sub_216C984FC((uint64_t)&v27, __src);
        }
        uint64_t v18 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4;
        unint64_t v19 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)(a4 + 32);
        if (*(void *)a4 > 0xFuLL)
        {
          *(_OWORD *)int64_t __src = v27;
          size_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetCompressedBufferSize(v18);
          uint64_t v22 = (char *)operator new[](CompressedBufferSize);
          int64_t v24 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::CompressToBuffer(v19, (const unint64_t *)v18, v22, v23);
          int64_t v29 = v24;
          sub_216C80458((uint64_t)__src, (char *)&v29);
          sub_216C6D370((uint64_t)__src, v22, v24);
          operator delete[](v22);
          unint64_t v20 = v17 & 0xFFFFFFFFFFFFLL | 0xA006000000000000;
        }
        else
        {
          unint64_t v20 = v17 & 0xFFFFFFFFFFFFLL | 0x8006000000000000;
          sub_216C9E7BC((uint64_t)&v27, (char *)v19, (uint64_t)v18);
        }
        v13[7] = v20;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v26, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        *(_DWORD *)int64_t __src = 1;
        sub_216C984FC((uint64_t)v26, __src);
        *(_DWORD *)int64_t __src = *(void *)a4;
        sub_216C984FC((uint64_t)v26, __src);
        sub_216C9E7BC((uint64_t)v26, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void sub_216CA0C84(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_216CA0C98(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = *(void *)a2;
  LOBYTE(v33) = 1;
  uint64_t v32 = v9;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v32, *(pxrInternal__aapl__pxrReserved__ **)(a2 + 32), (char *)(8 * v9));
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * v32);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_2169ADC94((uint64_t)(i + 2), a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  uint64_t v18 = operator new(0x40uLL);
  int i = v18;
  uint64_t v33 = a1 + 16;
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    BOOL v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      BOOL v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  int64_t v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *int64_t v29 = i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    int64_t v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CA0F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CA0F5C(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CA0F5C(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

__n128 sub_216CA0FBC(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C760278;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CA1008(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C760278;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CA1038(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  long long v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_216CA10D0(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_216CA1084(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7602D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CA10C4()
{
  return &unk_26C7602D8;
}

void sub_216CA10D0(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    long long v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a2 + 32);
    sub_216CA1194(a1, v6, a3, (uint64_t)v8);
    sub_216B8CF84(a4, v8);
    sub_2168F83DC((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u64[0] = 0;
    if ((a3 & 0x4000000000000000) != 0) {
      v8[0].n128_u64[0] = a3;
    }
    else {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v8, (char *)8, *(void *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    sub_216B8CF0C(a4, (uint64_t *)v8);
  }
}

void sub_216CA117C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CA1194(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = a3 & 0xFFFFFFFFFFFFLL;
    int v7 = *(unsigned __int8 *)(*a2 + 6369);
    int v8 = *(unsigned __int8 *)(*a2 + 6370);
    int v9 = *(unsigned __int8 *)(*a2 + 6368) << 16;
    unsigned int v10 = v9 | (v7 << 8);
    if (v10 > 0x4FF || (LODWORD(v41) = 0, sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v41)))
    {
      long long v11 = *((_OWORD *)a2 + 1);
      long long v38 = *(_OWORD *)a2;
      long long v39 = v11;
      uint64_t v40 = (pxrInternal__aapl__pxrReserved__ *)a2[4];
      if ((a3 & 0x2000000000000000) == 0 || (unsigned int v12 = v9 | v8 | (v7 << 8), v12 <= 0x4FF))
      {
        unint64_t v13 = (FILE *)v40;
        unint64_t v44 = 0;
        if (v10 > 0x6FF)
        {
          ssize_t v19 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v44, (char *)8, v39 + *((void *)&v38 + 1));
          if (v19 == -1) {
            return;
          }
          unint64_t v20 = v44;
        }
        else
        {
          LODWORD(v41) = 0;
          ssize_t v19 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v41, (char *)4, v39 + *((void *)&v38 + 1));
          if (v19 == -1) {
            return;
          }
          unint64_t v20 = v41;
          unint64_t v44 = v41;
        }
        ssize_t v28 = v19 + v39;
        unint64_t v29 = *((void *)&v39 + 1) - (v19 + v39);
        if (v19 + (void)v39 < 0 || (v29 & 0x8000000000000000) != 0 || v20 > v29 || 8 * v20 > v29)
        {
          *(void *)&long long v41 = "usd/crateFile.cpp";
          *((void *)&v41 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v42 = 2053;
          *((void *)&v42 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_PreadStream>, T = unsigned long long]";
          LOBYTE(v43) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld");
          return;
        }
        _88[0] = 0;
        *(void *)&long long v41 = _88;
        sub_2169AEE18((unint64_t *)a4, v20, (uint64_t **)&v41);
        sub_2169AF080((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v30, v31);
        unint64_t v25 = *(__sFILE **)(a4 + 32);
        unint64_t v26 = (char *)(8 * *(void *)a4);
        off_t v27 = v28 + *((void *)&v38 + 1);
        goto LABEL_30;
      }
      unint64_t v44 = 0;
      if (v12 > 0x6FF)
      {
        unint64_t v13 = (FILE *)v40;
        uint64_t v14 = *((void *)&v38 + 1);
        ssize_t v21 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v44, (char *)8, v39 + *((void *)&v38 + 1));
        if (v21 == -1) {
          return;
        }
        ssize_t v16 = v39 + v21;
        *(void *)&long long v39 = v39 + v21;
        unint64_t v17 = v44;
      }
      else
      {
        LODWORD(v41) = 0;
        unint64_t v13 = (FILE *)v40;
        uint64_t v14 = *((void *)&v38 + 1);
        ssize_t v15 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v41, (char *)4, v39 + *((void *)&v38 + 1));
        if (v15 == -1) {
          return;
        }
        ssize_t v16 = v39 + v15;
        *(void *)&long long v39 = v39 + v15;
        unint64_t v17 = v41;
        unint64_t v44 = v41;
      }
      if (v17 <= 0xF)
      {
        unint64_t v22 = *((void *)&v39 + 1) - v16;
        if (v16 < 0 || (v22 & 0x8000000000000000) != 0 || v17 > v22 || 8 * v17 > v22)
        {
          *(void *)&long long v41 = "usd/crateFile.cpp";
          *((void *)&v41 + 1) = "_ReadPossiblyCompressedArray";
          *(void *)&long long v42 = 2241;
          *((void *)&v42 + 1) = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::"
                                  "value || std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type px"
                                  "rInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, Va"
                                  "lueRep, VtArray<T> *, CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_PreadStream>, T = unsigned long long]";
          LOBYTE(v43) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
          return;
        }
        _88[0] = 0;
        *(void *)&long long v41 = _88;
        sub_2169AEE18((unint64_t *)a4, v17, (uint64_t **)&v41);
        sub_2169AF080((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v23, v24);
        unint64_t v25 = *(__sFILE **)(a4 + 32);
        unint64_t v26 = (char *)(8 * *(void *)a4);
        off_t v27 = v16 + v14;
LABEL_30:
        pxrInternal__aapl__pxrReserved__::ArchPRead(v13, v25, v26, v27);
        return;
      }
      if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v17)
        && pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v17))
      {
        _88[0] = 0;
        *(void *)&long long v41 = _88;
        sub_2169AEE18((unint64_t *)a4, v44, (uint64_t **)&v41);
        sub_2169AF080((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v32, v33);
        char v34 = *(void **)(a4 + 32);
        long long v35 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4;
        long long v41 = 0u;
        long long v42 = 0u;
        sub_216CA159C((uint64_t)&v41, (uint64_t)&v38, v34, v35);
        char v36 = (void *)v42;
        *(void *)&long long v42 = 0;
        if (v36) {
          operator delete[](v36);
        }
        int64_t v37 = (void *)v41;
        *(void *)&long long v41 = 0;
        if (v37) {
          operator delete[](v37);
        }
      }
      else
      {
        *(void *)&long long v41 = "usd/crateFile.cpp";
        *((void *)&v41 + 1) = "_ReadPossiblyCompressedArray";
        *(void *)&long long v42 = 2249;
        *((void *)&v42 + 1) = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::va"
                                "lue || std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInt"
                                "ernal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep"
                                ", VtArray<T> *, CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd"
                                "_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadSt"
                                "ream>, T = unsigned long long]";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values");
      }
    }
  }
  else
  {
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    if (&v41 != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v18 = v42;
      *(_OWORD *)a4 = v41;
      *(_OWORD *)(a4 + 16) = v18;
      long long v41 = 0u;
      long long v42 = 0u;
      *(void *)(a4 + 32) = v43;
      uint64_t v43 = 0;
    }
    sub_2168F83DC((uint64_t)&v41);
  }
}

void sub_216CA1570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_216C83E54((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_216CA159C(uint64_t a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *a4)
{
  sub_216C9F53C(a1, a4);
  unint64_t v20 = 0;
  BOOL result = sub_216C8B2C8(a2 + 8, 0, (__sFILE *)&v20);
  if (result)
  {
    uint64_t v10 = *(void *)(a2 + 16);
    uint64_t v9 = *(void *)(a2 + 24);
    unint64_t v11 = *(void *)(a1 + 8);
    unsigned int v12 = v20;
    if (v11 < (unint64_t)v20) {
      unsigned int v12 = *(char **)(a1 + 8);
    }
    if (v9 - v10 >= (unint64_t)v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = (char *)(v9 - v10);
    }
    unint64_t v20 = v13;
    if (v11 && *(void *)(a1 + 24))
    {
      if ((v10 & 0x8000000000000000) == 0)
      {
        BOOL result = sub_216C6FD88(a2, *(__sFILE **)a1, v13);
        if (result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a1, v20, a3, (int64_t)a4, *(char **)(a1 + 16), v14);
          return 1;
        }
        return result;
      }
      ssize_t v15 = "usd/crateFile.cpp";
      ssize_t v16 = "Read";
      uint64_t v17 = 2158;
      long long v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_PreadStream>, Int = unsigned long long]";
      char v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      ssize_t v15 = "usd/crateFile.cpp";
      ssize_t v16 = "Read";
      uint64_t v17 = 2153;
      long long v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_PreadStream>, Int = unsigned long long]";
      char v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

__n128 sub_216CA16E4(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C7602F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CA1730(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7602F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CA1760(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CA1768(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C760358)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CA17A8()
{
  return &unk_26C760358;
}

void sub_216CA17B4(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  _DWORD v9[2] = v6;
  v9[3] = v7;
  int v10 = sub_216C688BC();
  sub_216CA1834(v5, (uint64_t)v9, v3, v4);
}

void sub_216CA1834(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v13 = 0;
    memset(__dst, 0, sizeof(__dst));
    long long v6 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v6;
    uint64_t v11 = *(void *)(a2 + 32);
    sub_216CA1918(a1, v10, a3, (uint64_t)__dst);
    sub_216B8CF84(a4, __dst);
    sub_2168F83DC((uint64_t)__dst);
  }
  else
  {
    __dst[0].n128_u64[0] = 0;
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v7 = *(_OWORD *)a2;
    long long v8 = v5;
    uint64_t v9 = *(void *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      __dst[0].n128_u64[0] = a3;
    }
    else
    {
      *((void *)&v7 + 1) = *(void *)(*(void *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_216C82F78((uint64_t)&v7 + 8, __dst, 8uLL);
    }
    sub_216B8CF0C(a4, (uint64_t *)__dst);
  }
}

void sub_216CA1900(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_216CA1918(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    int v7 = *(unsigned __int8 *)(*(void *)a2 + 6369);
    int v8 = *(unsigned __int8 *)(*(void *)a2 + 6370);
    int v9 = *(unsigned __int8 *)(*(void *)a2 + 6368) << 16;
    unsigned int v10 = v9 | (v7 << 8);
    if (v10 > 0x4FF || (LODWORD(__dst[0]) = 0, sub_216C82F78((uint64_t)a2 + 8, __dst, 4uLL)))
    {
      long long v11 = a2[1];
      long long v39 = *a2;
      long long v40 = v11;
      uint64_t v41 = *((void *)a2 + 4);
      if ((a3 & 0x2000000000000000) != 0 && (unsigned int v12 = v9 | v8 | (v7 << 8), v12 > 0x4FF))
      {
        unint64_t v49 = 0;
        if (v12 > 0x6FF)
        {
          if (!sub_216C82F78((uint64_t)&v39 + 8, &v49, 8uLL)) {
            return;
          }
          unint64_t v13 = v49;
        }
        else
        {
          LODWORD(__dst[0]) = 0;
          if (!sub_216C82F78((uint64_t)&v39 + 8, __dst, 4uLL)) {
            return;
          }
          unint64_t v13 = LODWORD(__dst[0]);
          unint64_t v49 = LODWORD(__dst[0]);
        }
        if (v13 > 0xF)
        {
          if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v13)
            && pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v13))
          {
            *(void *)&long long v42 = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)&v42;
            sub_2169AEE18((unint64_t *)a4, v49, (uint64_t **)__dst);
            sub_2169AF080((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v32, v33);
            char v34 = *(void **)(a4 + 32);
            long long v35 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4;
            *(_OWORD *)long long __dst = 0u;
            *(_OWORD *)std::string __p = 0u;
            sub_216CA1E68((uint64_t)__dst, (uint64_t)&v39, v34, v35);
            char v36 = __p[0];
            __p[0] = 0;
            if (v36) {
              operator delete[](v36);
            }
            int64_t v37 = __dst[0];
            __dst[0] = 0;
            if (v37) {
              operator delete[](v37);
            }
          }
          else
          {
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"usd/crateFile.cpp";
            __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"_ReadPossiblyCompressedArray";
            __p[0] = (void *)2249;
            __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value || std:"
                     ":is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aapl__pxrReserv"
                     "ed__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Versio"
                     "n, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__"
                     "aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::Cr"
                     "ateFile::_FileMapping *>>, T = unsigned long long]";
            LOBYTE(v47) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values");
          }
        }
        else
        {
          uint64_t v22 = *((void *)&v39 + 1) - *(void *)(*(void *)v40 + 24);
          unint64_t v23 = *(void *)(*(void *)v40 + 32) - v22;
          if ((v22 & 0x8000000000000000) == 0 && (v23 & 0x8000000000000000) == 0 && v13 <= v23 && 8 * v13 <= v23)
          {
            long long v18 = (char *)&v39 + 8;
            *(void *)&long long v42 = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)&v42;
            unint64_t v25 = (unint64_t *)a4;
            unint64_t v26 = v13;
LABEL_42:
            sub_2169AEE18(v25, v26, (uint64_t **)__dst);
            sub_2169AF080((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v30, v31);
            sub_216C82F78((uint64_t)v18, *(void **)(a4 + 32), 8 * *(void *)a4);
            return;
          }
          __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"usd/crateFile.cpp";
          __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"_ReadPossiblyCompressedArray";
          __p[0] = (void *)2241;
          __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value || std::i"
                   "s_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aapl__pxrReserved__"
                   "::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int"
                   ") [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__px"
                   "rReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_"
                   "FileMapping *>>, T = unsigned long long]";
          LOBYTE(v47) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
        }
      }
      else
      {
        long long v15 = a2[1];
        long long v42 = *a2;
        long long v43 = v15;
        uint64_t v44 = *((void *)a2 + 4);
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91710, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_267B91710))
        {
          long long v38 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          if (!v38) {
            pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
          }
          byte_267B91708 = *v38;
          __cxa_guard_release(&qword_267B91710);
        }
        unint64_t v48 = 0;
        if (v10 > 0x6FF)
        {
          if (!sub_216C82F78((uint64_t)&v42 + 8, &v48, 8uLL)) {
            return;
          }
          unint64_t v16 = (unint64_t)v48;
        }
        else
        {
          LODWORD(__dst[0]) = 0;
          if ((sub_216C82F78((uint64_t)&v42 + 8, __dst, 4uLL) & 1) == 0) {
            return;
          }
          unint64_t v16 = LODWORD(__dst[0]);
          unint64_t v48 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)LODWORD(__dst[0]);
        }
        unint64_t v17 = 8 * v16;
        long long v18 = (char *)&v42 + 8;
        uint64_t v19 = *((void *)&v42 + 1);
        if (!byte_267B91708 || v17 < 0x800 || (BYTE8(v42) & 7) != 0)
        {
          uint64_t v27 = *((void *)&v42 + 1) - *(void *)(*(void *)v43 + 24);
          unint64_t v28 = *(void *)(*(void *)v43 + 32) - v27;
          if ((v27 & 0x8000000000000000) == 0 && (v28 & 0x8000000000000000) == 0 && v16 <= v28 && v17 <= v28)
          {
            unint64_t v49 = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)&v49;
            unint64_t v25 = (unint64_t *)a4;
            unint64_t v26 = v16;
            goto LABEL_42;
          }
          __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"usd/crateFile.cpp";
          __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"_ReadUncompressedArray";
          __p[0] = (void *)2117;
          __p[1] = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>::type pxrInt"
                   "ernal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray<T> *, Cra"
                   "teFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInt"
                   "ernal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFil"
                   "e::CrateFile::_FileMapping *>>, T = unsigned long long]";
          LOBYTE(v47) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld");
        }
        else
        {
          unint64_t v20 = (void *)sub_216C99144((uint64_t)&v42 + 8, *((char **)&v42 + 1), 8 * v16, v16);
          if (v20)
          {
            __p[0] = 0;
            __p[1] = v20;
            uint64_t v47 = v19;
            __dst[0] = v48;
            __dst[1] = 0;
            if (__dst != (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4)
            {
              sub_2168F83DC(a4);
              long long v21 = *(_OWORD *)__p;
              *(_OWORD *)a4 = *(_OWORD *)__dst;
              *(_OWORD *)(a4 + 16) = v21;
              *(_OWORD *)long long __dst = 0u;
              *(_OWORD *)std::string __p = 0u;
              *(void *)(a4 + 32) = v47;
              uint64_t v47 = 0;
            }
            sub_2168F83DC((uint64_t)__dst);
          }
          else
          {
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"usd/crateFile.cpp";
            __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"_ReadUncompressedArray";
            __p[0] = (void *)2109;
            __p[1] = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>::type pxrI"
                     "nternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray<T> *,"
                     " CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<"
                     "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_"
                     "CrateFile::CrateFile::_FileMapping *>>, T = unsigned long long]";
            LOBYTE(v47) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v17);
            sub_2168F845C((void *)a4);
          }
        }
      }
    }
  }
  else
  {
    uint64_t v47 = 0;
    *(_OWORD *)long long __dst = 0u;
    *(_OWORD *)std::string __p = 0u;
    if (__dst != (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4)
    {
      sub_2168F83DC(a4);
      long long v14 = *(_OWORD *)__p;
      *(_OWORD *)a4 = *(_OWORD *)__dst;
      *(_OWORD *)(a4 + 16) = v14;
      *(_OWORD *)long long __dst = 0u;
      *(_OWORD *)std::string __p = 0u;
      *(void *)(a4 + 32) = v47;
      uint64_t v47 = 0;
    }
    sub_2168F83DC((uint64_t)__dst);
  }
}

void sub_216CA1E10(_Unwind_Exception *a1)
{
}

uint64_t sub_216CA1E68(uint64_t a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *this)
{
  sub_216C9F53C(a1, this);
  long long __dst = 0;
  uint64_t result = sub_216C82F78(a2 + 8, &__dst, 8uLL);
  if (result)
  {
    uint64_t v9 = *(void *)(**(void **)(a2 + 16) + 32);
    uint64_t v10 = *(void *)(a2 + 8) - *(void *)(**(void **)(a2 + 16) + 24);
    unint64_t v11 = *(void *)(a1 + 8);
    unsigned int v12 = __dst;
    if (v11 < (unint64_t)__dst) {
      unsigned int v12 = *(char **)(a1 + 8);
    }
    if (v9 - v10 >= (unint64_t)v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = (char *)(v9 - v10);
    }
    long long __dst = v13;
    if (v11 && *(void *)(a1 + 24))
    {
      if ((v10 & 0x8000000000000000) == 0)
      {
        uint64_t result = sub_216C82F78(a2 + 8, *(void **)a1, (size_t)v13);
        if (result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a1, __dst, a3, (int64_t)this, *(char **)(a1 + 16), v14);
          return 1;
        }
        return result;
      }
      long long v15 = "usd/crateFile.cpp";
      unint64_t v16 = "Read";
      uint64_t v17 = 2158;
      long long v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, "
            "Int = unsigned long long]";
      char v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      long long v15 = "usd/crateFile.cpp";
      unint64_t v16 = "Read";
      uint64_t v17 = 2153;
      long long v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, "
            "Int = unsigned long long]";
      char v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

__n128 sub_216CA1FC8(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C760378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CA2014(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C760378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CA2044(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CA204C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7603D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CA208C()
{
  return &unk_26C7603D8;
}

void sub_216CA2098(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    unint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    unint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CA2144(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CA2120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CA2144(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if ((a3 & 0x8000000000000000) == 0)
  {
    v13[0].n128_u64[0] = 0;
    long long v7 = *a2;
    long long v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v8 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *((void *)a2 + 3);
    if ((a3 & 0x4000000000000000) != 0)
    {
      v13[0].n128_u64[0] = a3;
      if (!v5)
      {
LABEL_14:
        sub_216B8CF0C(a4, (uint64_t *)v13);
        return;
      }
    }
    else
    {
      uint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
      sub_216C804FC((void *)&v7 + 1, (uint64_t)v13, 8uLL);
      long long v5 = v8;
      if (!v8) {
        goto LABEL_14;
      }
    }
    sub_216784EC4(v5);
    goto LABEL_14;
  }
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  long long v10 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
  unint64_t v11 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *((void *)a2 + 3);
  sub_216CA228C(a1, &v10, a3, (uint64_t)v13);
  if (v11) {
    sub_216784EC4(v11);
  }
  sub_216B8CF84(a4, v13);
  sub_2168F83DC((uint64_t)v13);
}

void sub_216CA2248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CA228C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    uint64_t v7 = *a2;
    int v8 = *(unsigned __int8 *)(*a2 + 6369);
    int v9 = *(unsigned __int8 *)(*a2 + 6370);
    int v10 = *(unsigned __int8 *)(*a2 + 6368) << 16;
    unsigned int v11 = v10 | (v8 << 8);
    if (v11 <= 0x4FF)
    {
      LODWORD(v48[0]) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)v48, 4uLL)) {
        return;
      }
      uint64_t v7 = *a2;
    }
    uint64_t v13 = a2[1];
    uint64_t v12 = (std::__shared_weak_count *)a2[2];
    uint64_t v40 = v7;
    uint64_t v41 = v13;
    long long v42 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = a2[3];
    uint64_t v43 = v14;
    if ((a3 & 0x2000000000000000) != 0)
    {
      unsigned int v15 = v10 | v9 | (v8 << 8);
      if (v15 > 0x4FF)
      {
        unint64_t v52 = 0;
        if (v15 > 0x6FF)
        {
          if (sub_216C804FC(&v41, (uint64_t)&v52, 8uLL))
          {
            unint64_t v16 = v52;
LABEL_22:
            if (v16 <= 0xF)
            {
              uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 16))(v41);
              unint64_t v19 = v18 - v43;
              unint64_t v20 = v52;
              if (v43 < 0 || (v19 & 0x8000000000000000) != 0 || (v52 <= v19 ? (BOOL v21 = 8 * v52 > v19) : (BOOL v21 = 1), v21))
              {
                v48[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"usd/crateFile.cpp";
                v48[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"_ReadPossiblyCompressedArray";
                __p[0] = (void *)2241;
                __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value || "
                         "std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aapl__p"
                         "xrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, Crate"
                         "File::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Read"
                         "er<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = unsigned long long]";
                LOBYTE(v50) = 0;
                uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 16))(v41);
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v48, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld", v20, 8 * v20, v19, v39);
              }
              else
              {
                uint64_t v44 = 0;
                v48[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)&v44;
                sub_2169AEE18((unint64_t *)a4, v52, (uint64_t **)v48);
                sub_2169AF080((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v22, v23);
                sub_216C804FC(&v41, *(void *)(a4 + 32), 8 * *(void *)a4);
              }
              goto LABEL_40;
            }
            uint64_t v30 = v42;
            if (v42) {
              atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v16))
            {
              BOOL v31 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v16) != 0;
              if (!v30) {
                goto LABEL_48;
              }
            }
            else
            {
              BOOL v31 = 0;
              if (!v30)
              {
LABEL_48:
                if (v31)
                {
                  uint64_t v44 = 0;
                  v48[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)&v44;
                  sub_2169AEE18((unint64_t *)a4, v52, (uint64_t **)v48);
                  sub_2169AF080((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v32, v33);
                  char v34 = *(void **)(a4 + 32);
                  long long v35 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4;
                  *(_OWORD *)unint64_t v48 = 0u;
                  *(_OWORD *)std::string __p = 0u;
                  sub_216CA27D4((uint64_t)v48, (uint64_t)&v40, v34, v35);
                  char v36 = __p[0];
                  __p[0] = 0;
                  if (v36) {
                    operator delete[](v36);
                  }
                  int64_t v37 = v48[0];
                  v48[0] = 0;
                  if (v37) {
                    operator delete[](v37);
                  }
                }
                else
                {
                  v48[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"usd/crateFile.cpp";
                  v48[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"_ReadPossiblyCompressedArray";
                  __p[0] = (void *)2249;
                  __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value |"
                           "| std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aap"
                           "l__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *,"
                           " CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                           "e::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = unsigned long long]";
                  LOBYTE(v50) = 0;
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v48, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values", v52);
                }
                goto LABEL_40;
              }
            }
            sub_216784EC4(v30);
            goto LABEL_48;
          }
        }
        else
        {
          LODWORD(v48[0]) = 0;
          if (sub_216C804FC(&v41, (uint64_t)v48, 4uLL))
          {
            unint64_t v16 = LODWORD(v48[0]);
            unint64_t v52 = LODWORD(v48[0]);
            goto LABEL_22;
          }
        }
LABEL_40:
        if (v42) {
          sub_216784EC4(v42);
        }
        return;
      }
    }
    uint64_t v44 = v7;
    uint64_t v45 = v41;
    unint64_t v46 = v42;
    if (v42)
    {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v14 = v43;
    }
    uint64_t v47 = v14;
    unint64_t v51 = 0;
    if (v11 > 0x6FF)
    {
      if (!sub_216C804FC(&v45, (uint64_t)&v51, 8uLL)) {
        goto LABEL_38;
      }
    }
    else
    {
      LODWORD(v48[0]) = 0;
      if (!sub_216C804FC(&v45, (uint64_t)v48, 4uLL)) {
        goto LABEL_38;
      }
      unint64_t v51 = LODWORD(v48[0]);
    }
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 16))(v45);
    unint64_t v25 = v24 - v47;
    unint64_t v26 = v51;
    if (v47 < 0 || (v25 & 0x8000000000000000) != 0 || (v51 <= v25 ? (BOOL v27 = 8 * v51 > v25) : (BOOL v27 = 1), v27))
    {
      v48[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"usd/crateFile.cpp";
      v48[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"_ReadUncompressedArray";
      __p[0] = (void *)2053;
      __p[1] = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>::type pxrInter"
               "nal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile"
               "::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aap"
               "l__pxrReserved__::Usd_CrateFile::_AssetStream>, T = unsigned long long]";
      LOBYTE(v50) = 0;
      uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 16))(v45);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v48, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v26, 8 * v26, v25, v38);
    }
    else
    {
      unint64_t v52 = 0;
      v48[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)&v52;
      sub_2169AEE18((unint64_t *)a4, v51, (uint64_t **)v48);
      sub_2169AF080((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v28, v29);
      sub_216C804FC(&v45, *(void *)(a4 + 32), 8 * *(void *)a4);
    }
LABEL_38:
    if (v46) {
      sub_216784EC4(v46);
    }
    goto LABEL_40;
  }
  uint64_t v50 = 0;
  *(_OWORD *)unint64_t v48 = 0u;
  *(_OWORD *)std::string __p = 0u;
  if (v48 != (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4)
  {
    sub_2168F83DC(a4);
    long long v17 = *(_OWORD *)__p;
    *(_OWORD *)a4 = *(_OWORD *)v48;
    *(_OWORD *)(a4 + 16) = v17;
    *(_OWORD *)unint64_t v48 = 0u;
    *(_OWORD *)std::string __p = 0u;
    *(void *)(a4 + 32) = v50;
    uint64_t v50 = 0;
  }
  sub_2168F83DC((uint64_t)v48);
}

void sub_216CA2770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::__shared_weak_count *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_216C83E54((uint64_t)va);
  if (a8) {
    sub_216784EC4(a8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216CA27D4(uint64_t a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *this)
{
  sub_216C9F53C(a1, this);
  BOOL v21 = 0;
  int v8 = (void *)(a2 + 8);
  uint64_t result = sub_216C804FC((void *)(a2 + 8), (uint64_t)&v21, 8uLL);
  if (result)
  {
    uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8));
    uint64_t v11 = *(void *)(a2 + 24);
    unint64_t v12 = *(void *)(a1 + 8);
    uint64_t v13 = v21;
    if (v12 < (unint64_t)v21) {
      uint64_t v13 = *(char **)(a1 + 8);
    }
    if (v10 - v11 >= (unint64_t)v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = (char *)(v10 - v11);
    }
    BOOL v21 = v14;
    if (v12 && *(void *)(a1 + 24))
    {
      if ((v11 & 0x8000000000000000) == 0)
      {
        uint64_t result = sub_216C804FC(v8, *(void *)a1, (unint64_t)v14);
        if (result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a1, v21, a3, (int64_t)this, *(char **)(a1 + 16), v15);
          return 1;
        }
        return result;
      }
      unint64_t v16 = "usd/crateFile.cpp";
      long long v17 = "Read";
      uint64_t v18 = 2158;
      unint64_t v19 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_AssetStream>, Int = unsigned long long]";
      char v20 = 0;
      (*(void (**)(void))(*(void *)*v8 + 16))();
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      unint64_t v16 = "usd/crateFile.cpp";
      long long v17 = "Read";
      uint64_t v18 = 2153;
      unint64_t v19 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_AssetStream>, Int = unsigned long long]";
      char v20 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

__n128 sub_216CA297C(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C7603F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CA29C8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7603F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CA29F8(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_216CA2A58(*(void *)(a1 + 16), *(void **)(a1 + 8), (char *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_216CA2A0C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C760458)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CA2A4C()
{
  return &unk_26C760458;
}

unint64_t sub_216CA2A58(uint64_t a1, void *a2, char *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v4 = (uint64_t *)this;
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = v4[1];
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      uint64_t v10 = *v4;
    }
    return sub_216CA2B10(a1, a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      uint64_t v4 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    return *(unsigned __int16 *)v4 | 0x4007000000000000;
  }
}

unint64_t sub_216CA2B10(uint64_t a1, void *a2, char *a3, uint64_t a4)
{
  v80[0] = a2;
  v80[1] = a3;
  unint64_t result = 0x8007000000000000;
  unint64_t v79 = 0x8007000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      unint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7B660(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    uint64_t v13 = sub_216CA3314(v9, (unint64_t *)a4, a4, &v79);
    if (v14)
    {
      uint64_t v15 = a2[791];
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        unsigned int v16 = *(unsigned __int8 *)(v15 + 250) << 16;
        __int16 v17 = *(_WORD *)(v15 + 248);
        *(void *)&long long v86 = a2;
        *((void *)&v86 + 1) = a3;
        int v18 = v17 << 16;
        int v19 = v17 & 0xFF00;
        unsigned int v20 = v19 | HIWORD(v16) & 0xFF00FFFF | v18;
        if (v20 >= 0x600 && *(void *)a4 > 0xFuLL)
        {
          unint64_t v23 = *(unsigned __int16 **)(a4 + 32);
          uint64_t v24 = 2 * *(void *)a4;
          while (1)
          {
            uint64_t v25 = *v23;
            float v26 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v25];
            if (v26 < -2147500000.0 || v26 > 2147500000.0) {
              break;
            }
            uint64_t v28 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)(int)v26);
            if ((int)v26)
            {
              if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v28 >> 23])
              {
                unsigned int v29 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v28 >> 23]
                    + (((v28 & 0x7FFFFF) + ((v28 >> 13) & 1) + 4095) >> 13);
              }
              else
              {
                LOWORD(v29) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v28);
                float v26 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v25];
              }
            }
            else
            {
              unsigned int v29 = v28 >> 16;
            }
            if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)v29] != v26) {
              break;
            }
            ++v23;
            v24 -= 2;
            if (!v24)
            {
              uint64_t v30 = *(void *)a3;
              if (v20 > 0x6FF)
              {
                int64_t __src = *(void **)a4;
                sub_216C80458((uint64_t)&v86, (char *)&__src);
              }
              else
              {
                LODWORD(__src) = *(void *)a4;
                sub_216C984FC((uint64_t)&v86, (char *)&__src);
              }
              sub_2167816FC(&__src, *(void *)a4);
              if (*(void *)a4)
              {
                long long v60 = *(unsigned __int16 **)(a4 + 32);
                long long v61 = __src;
                uint64_t v62 = 2 * *(void *)a4;
                do
                {
                  int v63 = *v60++;
                  *v61++ = (int)pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v63];
                  v62 -= 2;
                }
                while (v62);
              }
              LOBYTE(__p[0]) = 105;
              sub_216CA3630((uint64_t)&v86, (char *)__p);
              uint64_t v64 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__src;
              uint64_t v65 = (v84 - (unsigned char *)__src) >> 2;
              *(_OWORD *)std::string __p = v86;
              size_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v65);
              uint64_t v67 = (char *)operator new[](CompressedBufferSize);
              int64_t v69 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(v64, (const int *)v65, v67, v68);
              *(void *)&long long v87 = v69;
              sub_216C80458((uint64_t)__p, (char *)&v87);
              sub_216C6D370((uint64_t)__p, v67, v69);
              unint64_t v22 = v30 & 0xFFFFFFFFFFFFLL | 0xA007000000000000;
              operator delete[](v67);
              goto LABEL_91;
            }
          }
          int64_t __src = 0;
          unint64_t v84 = 0;
          unint64_t v85 = 0;
          unint64_t v31 = *(void *)a4;
          unint64_t v32 = *(void *)a4 >> 2;
          if (v32 >= 0x400) {
            unint64_t v32 = 1024;
          }
          unint64_t v78 = v32;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v82 = 0;
          if (v31)
          {
            int v77 = v18;
            uint64_t v33 = 0;
            char v34 = *(unsigned __int16 **)(a4 + 32);
            long long v35 = &v34[v31];
            do
            {
              uint64_t v36 = *v34;
              if (__src != v33)
              {
                int64_t v37 = (unsigned __int16 *)__src;
                while (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v37] != pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v36])
                {
                  if (++v37 == v33) {
                    goto LABEL_40;
                  }
                }
                uint64_t v33 = v37;
              }
LABEL_40:
              unint64_t v38 = (char *)v33 - (unsigned char *)__src;
              unint64_t v39 = v38 >> 1;
              uint64_t v40 = (char *)__p[1];
              if (__p[1] >= v82)
              {
                long long v42 = (char *)__p[0];
                int64_t v43 = ((char *)__p[1] - (char *)__p[0]) >> 2;
                unint64_t v44 = v43 + 1;
                if ((unint64_t)(v43 + 1) >> 62) {
                  sub_21677CB10();
                }
                uint64_t v45 = v82 - (char *)__p[0];
                if ((v82 - (char *)__p[0]) >> 1 > v44) {
                  unint64_t v44 = v45 >> 1;
                }
                if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v46 = v44;
                }
                if (v46)
                {
                  uint64_t v47 = (char *)sub_21677EA28((uint64_t)&v82, v46);
                  long long v42 = (char *)__p[0];
                  uint64_t v40 = (char *)__p[1];
                }
                else
                {
                  uint64_t v47 = 0;
                }
                unint64_t v48 = &v47[4 * v43];
                *(_DWORD *)unint64_t v48 = v39;
                uint64_t v41 = v48 + 4;
                while (v40 != v42)
                {
                  int v49 = *((_DWORD *)v40 - 1);
                  v40 -= 4;
                  *((_DWORD *)v48 - 1) = v49;
                  v48 -= 4;
                }
                __p[0] = v48;
                __p[1] = v41;
                uint64_t v82 = &v47[4 * v46];
                if (v42) {
                  operator delete(v42);
                }
              }
              else
              {
                *(_DWORD *)__p[1] = v39;
                uint64_t v41 = v40 + 4;
              }
              __p[1] = v41;
              uint64_t v50 = (v38 >> 1);
              uint64_t v33 = (unsigned __int16 *)v84;
              if (v50 == (v84 - (unsigned char *)__src) >> 1)
              {
                if (v50 == v78)
                {
                  unint64_t v84 = (char *)__src;
                  __p[1] = __p[0];
                  int v18 = v77;
                  goto LABEL_83;
                }
                if (v84 >= v85)
                {
                  if (v84 - (unsigned char *)__src <= -3) {
                    sub_21677CB10();
                  }
                  if (v85 - (unsigned char *)__src <= (unint64_t)(v50 + 1)) {
                    uint64_t v51 = v50 + 1;
                  }
                  else {
                    uint64_t v51 = v85 - (unsigned char *)__src;
                  }
                  if ((unint64_t)(v85 - (unsigned char *)__src) >= 0x7FFFFFFFFFFFFFFELL) {
                    uint64_t v52 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    uint64_t v52 = v51;
                  }
                  unint64_t v54 = (char *)sub_216780E70((uint64_t)&v85, v52);
                  char v55 = (char *)__src;
                  long long v56 = v84;
                  long long v57 = (unsigned __int16 *)&v54[2 * v50];
                  *long long v57 = v36;
                  uint64_t v33 = v57 + 1;
                  while (v56 != v55)
                  {
                    unsigned __int16 v58 = *((_WORD *)v56 - 1);
                    v56 -= 2;
                    *--long long v57 = v58;
                  }
                  int64_t __src = v57;
                  unint64_t v84 = (char *)v33;
                  unint64_t v85 = &v54[2 * v53];
                  if (v55) {
                    operator delete(v55);
                  }
                }
                else
                {
                  *(_WORD *)unint64_t v84 = v36;
                  ++v33;
                }
                unint64_t v84 = (char *)v33;
              }
              ++v34;
            }
            while (v34 != v35);
            int v18 = v77;
            if (__src == v33) {
              goto LABEL_83;
            }
            uint64_t v59 = **((void **)&v86 + 1);
            if (v20 > 0x6FF)
            {
              *(void *)&long long v87 = *(void *)a4;
              sub_216C80458((uint64_t)&v86, (char *)&v87);
            }
            else
            {
              LODWORD(v87) = *(void *)a4;
              sub_216C984FC((uint64_t)&v86, (char *)&v87);
            }
            LOBYTE(v87) = 116;
            sub_216CA3630((uint64_t)&v86, (char *)&v87);
            LODWORD(v87) = (unint64_t)(v84 - (unsigned char *)__src) >> 1;
            sub_216C984FC((uint64_t)&v86, (char *)&v87);
            sub_216CA326C((uint64_t)&v86, (char *)__src, (v84 - (unsigned char *)__src) >> 1);
            int v71 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__p[0];
            int64_t v72 = ((char *)__p[1] - (char *)__p[0]) >> 2;
            long long v87 = v86;
            size_t v73 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v72);
            uint64_t v74 = (char *)operator new[](v73);
            int64_t v76 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(v71, (const unsigned int *)v72, v74, v75);
            *(void *)int v88 = v76;
            sub_216C80458((uint64_t)&v87, v88);
            sub_216C6D370((uint64_t)&v87, v74, v76);
            unint64_t v22 = v59 & 0xFFFFFFFFFFFFLL | 0xA007000000000000;
            operator delete[](v74);
          }
          else
          {
LABEL_83:
            long long v87 = v86;
            uint64_t v70 = sub_216C98168((uint64_t)&v87, 8);
            if ((v18 | v19) > 0x6FF)
            {
              *(void *)int v88 = *(void *)a4;
              sub_216C80458((uint64_t)&v87, v88);
            }
            else
            {
              *(_DWORD *)int v88 = *(void *)a4;
              sub_216C984FC((uint64_t)&v87, v88);
            }
            sub_216CA326C((uint64_t)&v87, *(char **)(a4 + 32), *(void *)a4);
            unint64_t v22 = v70 & 0xFFFFFFFFFFFFLL | 0x8007000000000000;
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
LABEL_91:
          if (__src)
          {
            unint64_t v84 = (char *)__src;
            operator delete(__src);
          }
        }
        else
        {
          int64_t __src = a2;
          unint64_t v84 = a3;
          uint64_t v21 = sub_216C98168((uint64_t)&__src, 8);
          if ((v18 | v19) > 0x6FF)
          {
            __p[0] = *(void **)a4;
            sub_216C80458((uint64_t)&__src, (char *)__p);
          }
          else
          {
            LODWORD(__p[0]) = *(void *)a4;
            sub_216C984FC((uint64_t)&__src, (char *)__p);
          }
          unint64_t v22 = v21 & 0xFFFFFFFFFFFFLL | 0x8007000000000000;
          sub_216CA326C((uint64_t)&__src, *(char **)(a4 + 32), *(void *)a4);
        }
        v13[7] = v22;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v80, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(__src) = 1;
        sub_216C984FC((uint64_t)v80, (char *)&__src);
        LODWORD(__src) = *(void *)a4;
        sub_216C984FC((uint64_t)v80, (char *)&__src);
        sub_216CA326C((uint64_t)v80, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void sub_216CA31FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216CA326C(uint64_t result, char *__src, uint64_t a3)
{
  uint64_t v3 = 2 * a3;
  if (2 * a3)
  {
    long long v5 = *(void **)(result + 8);
    do
    {
      uint64_t v6 = v5[2];
      uint64_t v7 = v6 - *v5 + 0x80000;
      if (v3 >= v7) {
        size_t v8 = v6 - *v5 + 0x80000;
      }
      else {
        size_t v8 = v3;
      }
      uint64_t v9 = *v5 - v6;
      if ((int64_t)(v8 + v9) > v5[4]) {
        v5[4] = v8 + v9;
      }
      unint64_t result = (uint64_t)memcpy((void *)(v5[3] + v9), __src, v8);
      *v5 += v8;
      if (v7 <= v3) {
        unint64_t result = sub_216C7A9E4((BOOL)v5);
      }
      __src += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return result;
}

void *sub_216CA3314(uint64_t a1, unint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = *a2;
  if (*a2)
  {
    uint64_t v10 = (unsigned __int16 *)a2[4];
    unint64_t v11 = *a2;
    do
    {
      unsigned int v12 = *v10++;
      unint64_t v9 = v12 + ((v9 + v12 + (v9 + v12) * (v9 + v12)) >> 1);
      --v11;
    }
    while (v11);
    v9 *= 0x9E3779B97F4A7C55;
  }
  unint64_t v13 = bswap64(v9);
  unint64_t v14 = *(void *)(a1 + 8);
  if (v14)
  {
    uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    unint64_t v16 = v15.u32[0];
    if (v15.u32[0] > 1uLL)
    {
      unint64_t v4 = v13;
      if (v13 >= v14) {
        unint64_t v4 = v13 % v14;
      }
    }
    else
    {
      unint64_t v4 = (v14 - 1) & v13;
    }
    __int16 v17 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v17)
    {
      for (int i = *v17; i; int i = (void *)*i)
      {
        unint64_t v19 = i[1];
        if (v19 == v13)
        {
          if (sub_2168F973C(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v16 > 1)
          {
            if (v19 >= v14) {
              v19 %= v14;
            }
          }
          else
          {
            v19 &= v14 - 1;
          }
          if (v19 != v4) {
            break;
          }
        }
      }
    }
  }
  unsigned int v20 = (void *)(a1 + 16);
  uint64_t v21 = operator new(0x40uLL);
  int i = v21;
  *(void *)uint64_t v21 = 0;
  *((void *)v21 + 1) = v13;
  long long v22 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v21 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v21 + 2) = v22;
  uint64_t v23 = *(void *)(a3 + 32);
  *((void *)v21 + 6) = v23;
  if (v23)
  {
    uint64_t v24 = (atomic_ullong *)(v23 - 16);
    if (*((void *)v21 + 5)) {
      uint64_t v24 = (atomic_ullong *)*((void *)v21 + 5);
    }
    atomic_fetch_add_explicit(v24, 1uLL, memory_order_relaxed);
  }
  *((void *)v21 + 7) = *a4;
  float v25 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v26 = *(float *)(a1 + 32);
  if (!v14 || (float)(v26 * (float)v14) < v25)
  {
    BOOL v27 = 1;
    if (v14 >= 3) {
      BOOL v27 = (v14 & (v14 - 1)) != 0;
    }
    unint64_t v28 = v27 | (2 * v14);
    unint64_t v29 = vcvtps_u32_f32(v25 / v26);
    if (v28 <= v29) {
      size_t v30 = v29;
    }
    else {
      size_t v30 = v28;
    }
    sub_21678A04C(a1, v30);
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        unint64_t v4 = v13 % v14;
      }
      else {
        unint64_t v4 = v13;
      }
    }
    else
    {
      unint64_t v4 = (v14 - 1) & v13;
    }
  }
  uint64_t v31 = *(void *)a1;
  unint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  if (v32)
  {
    *int i = *v32;
LABEL_46:
    *unint64_t v32 = i;
    goto LABEL_47;
  }
  *int i = *v20;
  void *v20 = i;
  *(void *)(v31 + 8 * v4) = v20;
  if (*i)
  {
    unint64_t v33 = *(void *)(*i + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v33 >= v14) {
        v33 %= v14;
      }
    }
    else
    {
      v33 &= v14 - 1;
    }
    unint64_t v32 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_46;
  }
LABEL_47:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CA35BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CA35D8(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CA35D8(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t sub_216CA3630(uint64_t a1, char *__src)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = 1;
  do
  {
    uint64_t v5 = v3[2];
    uint64_t v6 = v5 - *v3 + 0x80000;
    if (v4 >= v6) {
      size_t v7 = v5 - *v3 + 0x80000;
    }
    else {
      size_t v7 = v4;
    }
    uint64_t v8 = *v3 - v5;
    if ((int64_t)(v7 + v8) > v3[4]) {
      v3[4] = v7 + v8;
    }
    uint64_t result = (uint64_t)memcpy((void *)(v3[3] + v8), __src, v7);
    *v3 += v7;
    if (v6 <= v4) {
      uint64_t result = sub_216C7A9E4((BOOL)v3);
    }
    __src += v7;
    v4 -= v7;
  }
  while (v4);
  return result;
}

__n128 sub_216CA36DC(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C760478;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CA3728(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C760478;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CA3758(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  long long v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_216CA37F0(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_216CA37A4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7604D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CA37E4()
{
  return &unk_26C7604D8;
}

void sub_216CA37F0(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    long long v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a2 + 32);
    sub_216CA3888(a1, v6, a3, (uint64_t)v8);
    sub_2168F93A4(a4, v8);
    sub_2168F83DC((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u16[0] = a3;
    sub_216B8D33C(a4, v8);
  }
}

void sub_216CA3870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CA3888(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) == 0)
  {
    memset(&__p._lbfsize, 0, 40);
    if (&__p._lbfsize != (int *)a4)
    {
      sub_2168F83DC(a4);
      long long v16 = *(_OWORD *)&__p._close;
      *(_OWORD *)a4 = *(_OWORD *)&__p._lbfsize;
      *(_OWORD *)(a4 + 16) = v16;
      memset(&__p._lbfsize, 0, 32);
      *(void *)(a4 + 32) = __p._seek;
      __p._seeuint64_t k = 0;
    }
    sub_2168F83DC((uint64_t)&__p._lbfsize);
    return;
  }
  a2[2] = a3 & 0xFFFFFFFFFFFFLL;
  int v7 = *(unsigned __int8 *)(*a2 + 6369);
  int v8 = *(unsigned __int8 *)(*a2 + 6370);
  int v9 = *(unsigned __int8 *)(*a2 + 6368) << 16;
  unsigned int v10 = v9 | (v7 << 8);
  if (v10 > 0x4FF || (__p._lbfint size = 0, sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&__p._lbfsize)))
  {
    long long v11 = *((_OWORD *)a2 + 1);
    long long v50 = *(_OWORD *)a2;
    long long v51 = v11;
    uint64_t v52 = (pxrInternal__aapl__pxrReserved__ *)a2[4];
    unsigned int v12 = v9 | v8 | (v7 << 8);
    if (v12 < 0x600 || (a3 & 0x2000000000000000) == 0)
    {
      __p._unint64_t p = 0;
      if (v10 > 0x6FF)
      {
        ssize_t v14 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v52, &__p, (char *)8, v51 + *((void *)&v50 + 1));
        if (v14 == -1) {
          return;
        }
        unint64_t p = (unint64_t)__p._p;
      }
      else
      {
        __p._lbfint size = 0;
        ssize_t v14 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v52, (__sFILE *)&__p._lbfsize, (char *)4, v51 + *((void *)&v50 + 1));
        if (v14 == -1) {
          return;
        }
        unint64_t p = __p._lbfsize;
        __p._unint64_t p = (unsigned __int8 *)__p._lbfsize;
      }
      ssize_t v20 = v14 + v51;
      unint64_t v21 = *((void *)&v51 + 1) - (v14 + v51);
      if (v14 + (void)v51 < 0 || (v21 & 0x8000000000000000) != 0 || p > v21 || 2 * p > v21)
      {
        *(void *)&__p._lbfint size = "usd/crateFile.cpp";
        __p._cookie = "_ReadUncompressedArray";
        __p._close = (int (__cdecl *)(void *))2053;
        __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_I"
                                                          "sBitwiseReadWrite<T>::value>::type pxrInternal__aapl__pxrReser"
                                                          "ved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep,"
                                                          " VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl"
                                                          "__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal"
                                                          "__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>, T = pxrIn"
                                                          "ternal__aapl__pxrReserved__::pxr_half::half]";
        LOBYTE(__p._seek) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld");
        return;
      }
      LOWORD(v53) = 0;
      *(void *)&__p._lbfint size = &v53;
      sub_2168F90A4((unint64_t *)a4, p, (_WORD **)&__p._lbfsize);
      sub_2168F930C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v22, v23);
      uint64_t v24 = *(__sFILE **)(a4 + 32);
      float v25 = (char *)(2 * *(void *)a4);
      off_t v26 = v20 + *((void *)&v50 + 1);
      BOOL v27 = (FILE *)v52;
      goto LABEL_33;
    }
    *(void *)&__p._bf._int size = 0;
    if (v12 > 0x6FF)
    {
      ssize_t v28 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v52, (__sFILE *)&__p._bf._size, (char *)8, v51 + *((void *)&v50 + 1));
      if (v28 == -1) {
        return;
      }
      ssize_t v18 = v51 + v28;
      *(void *)&long long v51 = v51 + v28;
      lbfint size = *(void *)&__p._bf._size;
    }
    else
    {
      __p._lbfint size = 0;
      ssize_t v17 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v52, (__sFILE *)&__p._lbfsize, (char *)4, v51 + *((void *)&v50 + 1));
      if (v17 == -1) {
        return;
      }
      ssize_t v18 = v51 + v17;
      *(void *)&long long v51 = v51 + v17;
      lbfint size = __p._lbfsize;
      *(void *)&__p._bf._int size = __p._lbfsize;
    }
    if (lbfsize <= 0xF)
    {
      unint64_t v29 = *((void *)&v51 + 1) - v18;
      if (v18 < 0 || (v29 & 0x8000000000000000) != 0 || lbfsize > v29 || 2 * lbfsize > v29)
      {
        *(void *)&__p._lbfint size = "usd/crateFile.cpp";
        __p._cookie = "_ReadPossiblyCompressedArray";
        __p._close = (int (__cdecl *)(void *))2287;
        __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || std:"
                                                          ":is_same<T, float>::value || std::is_same<T, double>::value>::"
                                                          "type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPos"
                                                          "siblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile"
                                                          "::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Us"
                                                          "d_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved"
                                                          "__::Usd_CrateFile::_PreadStream>, T = pxrInternal__aapl__pxrRe"
                                                          "served__::pxr_half::half]";
        LOBYTE(__p._seek) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
        return;
      }
      LOWORD(__p._p) = 0;
      *(void *)&__p._lbfint size = &__p;
      sub_2168F90A4((unint64_t *)a4, lbfsize, (_WORD **)&__p._lbfsize);
      sub_2168F930C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v30, v31);
      uint64_t v24 = *(__sFILE **)(a4 + 32);
      float v25 = (char *)(2 * *(void *)&__p._bf._size);
      BOOL v27 = (FILE *)v52;
      off_t v26 = v51 + *((void *)&v50 + 1);
LABEL_33:
      pxrInternal__aapl__pxrReserved__::ArchPRead(v27, v24, v25, v26);
      return;
    }
    HIBYTE(__p._bf._base) = 0;
    ssize_t v32 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v52, (__sFILE *)((char *)&__p._bf._base + 7), (char *)1, v18 + *((void *)&v50 + 1));
    if (v32 != -1)
    {
      ssize_t v33 = v51 + v32;
      *(void *)&long long v51 = v51 + v32;
      if (HIBYTE(__p._bf._base) != 116)
      {
        if (HIBYTE(__p._bf._base) != 105)
        {
          *(void *)&__p._lbfint size = "usd/crateFile.cpp";
          __p._cookie = "_ReadPossiblyCompressedArray";
          __p._close = (int (__cdecl *)(void *))2351;
          __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || st"
                                                            "d::is_same<T, float>::value || std::is_same<T, double>::valu"
                                                            "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                                                            "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, C"
                                                            "rateFile::Version, int) [Reader = pxrInternal__aapl__pxrRese"
                                                            "rved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                                                            "_pxrReserved__::Usd_CrateFile::_PreadStream>, T = pxrInterna"
                                                            "l__aapl__pxrReserved__::pxr_half::half]";
          LOBYTE(__p._seek) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt data stream detected reading compressed array in <%s>");
          return;
        }
        if ((sub_216C9B79C(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)&__p._bf._size) & 1) == 0)
        {
          *(void *)&__p._lbfint size = "usd/crateFile.cpp";
          __p._cookie = "_ReadPossiblyCompressedArray";
          __p._close = (int (__cdecl *)(void *))2307;
          __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || st"
                                                            "d::is_same<T, float>::value || std::is_same<T, double>::valu"
                                                            "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                                                            "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, C"
                                                            "rateFile::Version, int) [Reader = pxrInternal__aapl__pxrRese"
                                                            "rved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                                                            "_pxrReserved__::Usd_CrateFile::_PreadStream>, T = pxrInterna"
                                                            "l__aapl__pxrReserved__::pxr_half::half]";
          LOBYTE(__p._seek) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed ints");
          return;
        }
        sub_2167816FC(&__p._lbfsize, *(unint64_t *)&__p._bf._size);
        LOWORD(v53) = 0;
        __p._unint64_t p = (unsigned __int8 *)&v53;
        sub_2168F90A4((unint64_t *)a4, *(unint64_t *)&__p._bf._size, &__p);
        sub_2168F930C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v34, v35);
        uint64_t v36 = *(_WORD **)(a4 + 32);
        sub_216C9B7D4((uint64_t)&v50, *(_DWORD **)&__p._lbfsize, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)(((uint64_t)__p._cookie - *(void *)&__p._lbfsize) >> 2));
        sub_216CA3F74((uint64_t)&__p, *(int **)&__p._lbfsize, (int *)__p._cookie, v36);
        int64_t v37 = *(unsigned __int8 **)&__p._lbfsize;
        if (*(void *)&__p._lbfsize)
        {
          __p._cookie = *(void **)&__p._lbfsize;
LABEL_60:
          operator delete(v37);
          return;
        }
        return;
      }
      LODWORD(__p._bf._base) = 0;
      ssize_t v38 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v52, (__sFILE *)&__p._bf, (char *)4, v33 + *((void *)&v50 + 1));
      if (v38 == -1) {
        return;
      }
      *(void *)&long long v51 = v51 + v38;
      unint64_t v39 = *((void *)&v51 + 1) - v51;
      if ((v51 & 0x8000000000000000) != 0
        || (v39 & 0x8000000000000000) != 0
        || (uint64_t)v39 < LODWORD(__p._bf._base)
        || 2 * (unint64_t)LODWORD(__p._bf._base) > v39)
      {
        *(void *)&__p._lbfint size = "usd/crateFile.cpp";
        __p._cookie = "_ReadPossiblyCompressedArray";
        __p._close = (int (__cdecl *)(void *))2325;
        __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || std:"
                                                          ":is_same<T, float>::value || std::is_same<T, double>::value>::"
                                                          "type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPos"
                                                          "siblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile"
                                                          "::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Us"
                                                          "d_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved"
                                                          "__::Usd_CrateFile::_PreadStream>, T = pxrInternal__aapl__pxrRe"
                                                          "served__::pxr_half::half]";
        LOBYTE(__p._seek) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %u elements for lut (%llu bytes), remaining file size is %lld of %lld");
        return;
      }
      sub_216CA4010(&__p, LODWORD(__p._bf._base));
      ssize_t v40 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v52, (__sFILE *)__p._p, (char *)(*(void *)&__p._r - (unint64_t)__p._p), v51 + *((void *)&v50 + 1));
      if (v40 != -1) {
        *(void *)&long long v51 = v51 + v40;
      }
      if (sub_216C9B79C(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)&__p._bf._size))
      {
        sub_2167813E0(&v53, *(unint64_t *)&__p._bf._size);
        sub_216C8B53C((uint64_t)&v50, v53, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)(v54 - v53));
        HIWORD(__p._write) = 0;
        *(void *)&__p._lbfint size = (char *)&__p._write + 6;
        sub_2168F90A4((unint64_t *)a4, *(unint64_t *)&__p._bf._size, (_WORD **)&__p._lbfsize);
        sub_2168F930C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v41, v42);
        int64_t v43 = v53;
        unint64_t v44 = v54;
        if (v53 == v54)
        {
LABEL_53:
          if (!v43) {
            goto LABEL_58;
          }
        }
        else
        {
          uint64_t v45 = *(_WORD **)(a4 + 32);
          unsigned int base = __p._bf._base;
          uint64_t v47 = v53;
          unint64_t v48 = __p._p;
          while (1)
          {
            uint64_t v49 = *v47;
            if (v49 >= base) {
              break;
            }
            *v45++ = *(_WORD *)&v48[2 * v49];
            if (++v47 == v44) {
              goto LABEL_53;
            }
          }
          *(void *)&__p._lbfint size = "usd/crateFile.cpp";
          __p._cookie = "_ReadPossiblyCompressedArray";
          __p._close = (int (__cdecl *)(void *))2343;
          __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || st"
                                                            "d::is_same<T, float>::value || std::is_same<T, double>::valu"
                                                            "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                                                            "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, C"
                                                            "rateFile::Version, int) [Reader = pxrInternal__aapl__pxrRese"
                                                            "rved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                                                            "_pxrReserved__::Usd_CrateFile::_PreadStream>, T = pxrInterna"
                                                            "l__aapl__pxrReserved__::pxr_half::half]";
          LOBYTE(__p._seek) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to index lut with index %u, out of bounds access", v49);
          int64_t v43 = v53;
          if (!v53)
          {
LABEL_58:
            int64_t v37 = __p._p;
            if (__p._p)
            {
              *(void *)&__p._r = __p._p;
              goto LABEL_60;
            }
            return;
          }
        }
        unint64_t v54 = v43;
        operator delete(v43);
        goto LABEL_58;
      }
      *(void *)&__p._lbfint size = "usd/crateFile.cpp";
      __p._cookie = "_ReadPossiblyCompressedArray";
      __p._close = (int (__cdecl *)(void *))2333;
      __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || std::i"
                                                        "s_same<T, float>::value || std::is_same<T, double>::value>::type"
                                                        " pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyC"
                                                        "ompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Versio"
                                                        "n, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFil"
                                                        "e::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Crat"
                                                        "eFile::_PreadStream>, T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
      LOBYTE(__p._seek) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed uints", *(void *)&__p._bf._size);
      goto LABEL_58;
    }
  }
}

void sub_216CA3F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

int *sub_216CA3F74(uint64_t a1, int *a2, int *a3, _WORD *a4)
{
  long long v5 = a2;
  if (a2 != a3)
  {
    do
    {
      int v7 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)*v5);
      if (*v5)
      {
        if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v7 >> 23]) {
          unsigned int v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v7 >> 23]
        }
             + (((v7 & 0x7FFFFF) + ((v7 >> 13) & 1) + 4095) >> 13);
        else {
          LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v7);
        }
      }
      else
      {
        unsigned int v8 = v7 >> 16;
      }
      *a4++ = v8;
      ++v5;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void *sub_216CA4010(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216780E30(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_216CA406C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CA4090(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C7604F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CA40DC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7604F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CA410C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CA4114(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C760558)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CA4154()
{
  return &unk_26C760558;
}

void sub_216CA4160(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  _DWORD v9[2] = v6;
  v9[3] = v7;
  int v10 = sub_216C688BC();
  sub_216CA41E0(v5, (uint64_t)v9, v3, v4);
}

void sub_216CA41E0(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    long long v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a2 + 32);
    sub_216CA4278(a1, v6, a3, (uint64_t)v8);
    sub_2168F93A4(a4, v8);
    sub_2168F83DC((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u16[0] = a3;
    sub_216B8D33C(a4, v8);
  }
}

void sub_216CA4260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CA4278(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) == 0)
  {
    uint64_t v64 = 0;
    long long __dst = 0u;
    long long v63 = 0u;
    if (&__dst != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v16 = v63;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v16;
      long long __dst = 0u;
      long long v63 = 0u;
      *(void *)(a4 + 32) = v64;
      uint64_t v64 = 0;
    }
    sub_2168F83DC((uint64_t)&__dst);
    return;
  }
  *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
  int v7 = *(unsigned __int8 *)(*(void *)a2 + 6369);
  int v8 = *(unsigned __int8 *)(*(void *)a2 + 6370);
  int v9 = *(unsigned __int8 *)(*(void *)a2 + 6368) << 16;
  unsigned int v10 = v9 | (v7 << 8);
  if (v10 <= 0x4FF)
  {
    LODWORD(__dst) = 0;
    if (!sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)) {
      return;
    }
  }
  long long v11 = a2[1];
  long long v51 = *a2;
  long long v52 = v11;
  uint64_t v53 = *((void *)a2 + 4);
  unsigned int v12 = v9 | v8 | (v7 << 8);
  if (v12 < 0x600 || (a3 & 0x2000000000000000) == 0)
  {
    long long v14 = a2[1];
    *(_OWORD *)__sFILE __p = *a2;
    long long v60 = v14;
    uint64_t v61 = *((void *)a2 + 4);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91720, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B91720))
    {
      long long v50 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
      if (!v50) {
        pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
      }
      byte_267B91718 = *v50;
      __cxa_guard_release(&qword_267B91720);
    }
    unint64_t v54 = 0;
    if (v10 > 0x6FF)
    {
      if (!sub_216C82F78((uint64_t)&__p[1], &v54, 8uLL)) {
        return;
      }
      unint64_t v15 = v54;
    }
    else
    {
      LODWORD(__dst) = 0;
      if ((sub_216C82F78((uint64_t)&__p[1], &__dst, 4uLL) & 1) == 0) {
        return;
      }
      unint64_t v15 = __dst;
      unint64_t v54 = __dst;
    }
    unint64_t v26 = 2 * v15;
    BOOL v27 = __p[1];
    if (!byte_267B91718 || v26 < 0x800 || ((uint64_t)__p[1] & 1) != 0)
    {
      unint64_t v30 = (unint64_t)__p[1] - *(void *)(*(void *)v60 + 24);
      unint64_t v31 = *(void *)(*(void *)v60 + 32) - v30;
      if ((v30 & 0x8000000000000000) == 0 && (v31 & 0x8000000000000000) == 0 && v15 <= v31 && v26 <= v31)
      {
        LOWORD(v58) = 0;
        *(void *)&long long __dst = &v58;
        sub_2168F90A4((unint64_t *)a4, v15, (_WORD **)&__dst);
        sub_2168F930C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v33, v34);
        uint64_t v23 = *(void **)(a4 + 32);
        size_t v24 = 2 * *(void *)a4;
        float v25 = &__p[1];
        goto LABEL_45;
      }
      *(void *)&long long __dst = "usd/crateFile.cpp";
      *((void *)&__dst + 1) = "_ReadUncompressedArray";
      *(void *)&long long v63 = 2117;
      *((void *)&v63 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>::"
                              "type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Value"
                              "Rep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_Cra"
                              "teFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<px"
                              "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = pxrInterna"
                              "l__aapl__pxrReserved__::pxr_half::half]";
      LOBYTE(v64) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld");
    }
    else
    {
      uint64_t v28 = sub_216C99144((uint64_t)&__p[1], (char *)__p[1], 2 * v15, v15);
      if (v28)
      {
        *(void *)&long long v63 = 0;
        *((void *)&v63 + 1) = v28;
        uint64_t v64 = v27;
        long long __dst = v54;
        if (&__dst != (long long *)a4)
        {
          sub_2168F83DC(a4);
          long long v29 = v63;
          *(_OWORD *)a4 = __dst;
          *(_OWORD *)(a4 + 16) = v29;
          long long __dst = 0u;
          long long v63 = 0u;
          *(void *)(a4 + 32) = v64;
          uint64_t v64 = 0;
        }
        sub_2168F83DC((uint64_t)&__dst);
      }
      else
      {
        *(void *)&long long __dst = "usd/crateFile.cpp";
        *((void *)&__dst + 1) = "_ReadUncompressedArray";
        *(void *)&long long v63 = 2109;
        *((void *)&v63 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>"
                                "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, V"
                                "alueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::U"
                                "sd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapS"
                                "tream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = "
                                "pxrInternal__aapl__pxrReserved__::pxr_half::half]";
        LOBYTE(v64) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v26);
        sub_2168F845C((void *)a4);
      }
    }
    return;
  }
  unint64_t v58 = 0;
  if (v12 > 0x6FF)
  {
    if (!sub_216C82F78((uint64_t)&v51 + 8, &v58, 8uLL)) {
      return;
    }
    unint64_t v17 = v58;
  }
  else
  {
    LODWORD(__dst) = 0;
    if (!sub_216C82F78((uint64_t)&v51 + 8, &__dst, 4uLL)) {
      return;
    }
    unint64_t v17 = __dst;
    unint64_t v58 = __dst;
  }
  if (v17 <= 0xF)
  {
    uint64_t v18 = *((void *)&v51 + 1) - *(void *)(*(void *)v52 + 24);
    unint64_t v19 = *(void *)(*(void *)v52 + 32) - v18;
    if ((v18 & 0x8000000000000000) == 0 && (v19 & 0x8000000000000000) == 0 && v17 <= v19 && 2 * v17 <= v19)
    {
      LOWORD(__p[0]) = 0;
      *(void *)&long long __dst = __p;
      sub_2168F90A4((unint64_t *)a4, v17, (_WORD **)&__dst);
      sub_2168F930C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v21, v22);
      uint64_t v23 = *(void **)(a4 + 32);
      size_t v24 = 2 * v58;
      float v25 = (void **)&v51 + 1;
LABEL_45:
      sub_216C82F78((uint64_t)v25, v23, v24);
      return;
    }
    *(void *)&long long __dst = "usd/crateFile.cpp";
    *((void *)&__dst + 1) = "_ReadPossiblyCompressedArray";
    *(void *)&long long v63 = 2287;
    *((void *)&v63 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || s"
                            "td::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadP"
                            "ossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = px"
                            "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRese"
                            "rved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                            "e::_FileMapping *>>, T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
    LOBYTE(v64) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
    return;
  }
  char v57 = 0;
  if (!sub_216C82F78((uint64_t)&v51 + 8, &v57, 1uLL)) {
    return;
  }
  if (v57 == 116)
  {
    unsigned int v56 = 0;
    if (!sub_216C82F78((uint64_t)&v51 + 8, &v56, 4uLL)) {
      return;
    }
    uint64_t v39 = *((void *)&v51 + 1) - *(void *)(*(void *)v52 + 24);
    unint64_t v40 = *(void *)(*(void *)v52 + 32) - v39;
    if (v39 < 0 || (v40 & 0x8000000000000000) != 0 || (uint64_t)v40 < v56 || 2 * (unint64_t)v56 > v40)
    {
      *(void *)&long long __dst = "usd/crateFile.cpp";
      *((void *)&__dst + 1) = "_ReadPossiblyCompressedArray";
      *(void *)&long long v63 = 2325;
      *((void *)&v63 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value ||"
                              " std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                              "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reade"
                              "r = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                              "_pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                              "::CrateFile::_FileMapping *>>, T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
      LOBYTE(v64) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %u elements for lut (%llu bytes), remaining file size is %lld of %lld");
      return;
    }
    sub_216CA4010(__p, v56);
    sub_216C82F78((uint64_t)&v51 + 8, __p[0], (char *)__p[1] - (char *)__p[0]);
    if ((sub_216C9B79C((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v58) & 1) == 0)
    {
      *(void *)&long long __dst = "usd/crateFile.cpp";
      *((void *)&__dst + 1) = "_ReadPossiblyCompressedArray";
      *(void *)&long long v63 = 2333;
      *((void *)&v63 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value ||"
                              " std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                              "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reade"
                              "r = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                              "_pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                              "::CrateFile::_FileMapping *>>, T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
      LOBYTE(v64) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed uints", v58);
      goto LABEL_68;
    }
    sub_2167813E0(&v54, v58);
    sub_216C839A0((uint64_t)&v51, (_DWORD *)v54, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((uint64_t)((uint64_t)v55 - v54) >> 2));
    __int16 v65 = 0;
    *(void *)&long long __dst = &v65;
    sub_2168F90A4((unint64_t *)a4, v58, (_WORD **)&__dst);
    sub_2168F930C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v41, v42);
    int64_t v43 = (unsigned int *)v54;
    unint64_t v44 = v55;
    if ((unsigned int *)v54 == v55)
    {
LABEL_63:
      if (!v43)
      {
LABEL_68:
        ssize_t v38 = __p[0];
        if (!__p[0]) {
          return;
        }
        __p[1] = __p[0];
        goto LABEL_70;
      }
    }
    else
    {
      uint64_t v45 = *(_WORD **)(a4 + 32);
      unsigned int v46 = v56;
      uint64_t v47 = (unsigned int *)v54;
      unint64_t v48 = __p[0];
      while (1)
      {
        uint64_t v49 = *v47;
        if (v49 >= v46) {
          break;
        }
        *v45++ = v48[v49];
        if (++v47 == v44) {
          goto LABEL_63;
        }
      }
      *(void *)&long long __dst = "usd/crateFile.cpp";
      *((void *)&__dst + 1) = "_ReadPossiblyCompressedArray";
      *(void *)&long long v63 = 2343;
      *((void *)&v63 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value ||"
                              " std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                              "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reade"
                              "r = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                              "_pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                              "::CrateFile::_FileMapping *>>, T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
      LOBYTE(v64) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to index lut with index %u, out of bounds access", v49);
      int64_t v43 = (unsigned int *)v54;
      if (!v54) {
        goto LABEL_68;
      }
    }
    char v55 = v43;
    operator delete(v43);
    goto LABEL_68;
  }
  if (v57 != 105)
  {
    *(void *)&long long __dst = "usd/crateFile.cpp";
    *((void *)&__dst + 1) = "_ReadPossiblyCompressedArray";
    *(void *)&long long v63 = 2351;
    *((void *)&v63 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || s"
                            "td::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadP"
                            "ossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = px"
                            "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRese"
                            "rved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                            "e::_FileMapping *>>, T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
    LOBYTE(v64) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt data stream detected reading compressed array in <%s>");
    return;
  }
  if ((sub_216C9B79C((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v58) & 1) == 0)
  {
    *(void *)&long long __dst = "usd/crateFile.cpp";
    *((void *)&__dst + 1) = "_ReadPossiblyCompressedArray";
    *(void *)&long long v63 = 2307;
    *((void *)&v63 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || s"
                            "td::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadP"
                            "ossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = px"
                            "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRese"
                            "rved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                            "e::_FileMapping *>>, T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
    LOBYTE(v64) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed ints");
    return;
  }
  sub_2167816FC(&__dst, v58);
  LOWORD(v54) = 0;
  __p[0] = &v54;
  sub_2168F90A4((unint64_t *)a4, v58, (_WORD **)__p);
  sub_2168F930C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v35, v36);
  int64_t v37 = *(_WORD **)(a4 + 32);
  sub_216C9BF88((uint64_t)&v51, (_DWORD *)__dst, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((uint64_t)(*((void *)&__dst + 1) - __dst) >> 2));
  sub_216CA3F74((uint64_t)__p, (int *)__dst, *((int **)&__dst + 1), v37);
  ssize_t v38 = (void *)__dst;
  if ((void)__dst)
  {
    *((void *)&__dst + 1) = __dst;
LABEL_70:
    operator delete(v38);
  }
}

void sub_216CA49E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
}

__n128 sub_216CA4A90(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C760578;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CA4ADC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C760578;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CA4B0C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CA4B14(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7605D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CA4B54()
{
  return &unk_26C7605D8;
}

void sub_216CA4B60(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  int v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    long long v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    long long v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CA4C0C(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CA4BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CA4C0C(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  unsigned __int16 v5 = a3;
  if (a3 < 0)
  {
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    long long v8 = *a2;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)a2 + 2);
    int v9 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *((void *)a2 + 3);
    sub_216CA4CFC(a1, (char **)&v8, a3, (uint64_t)v11);
    if (v9) {
      sub_216784EC4(v9);
    }
    sub_2168F93A4(a4, v11);
    sub_2168F83DC((uint64_t)v11);
  }
  else
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v6);
    }
    v11[0].n128_u16[0] = v5;
    sub_216B8D33C(a4, v11);
  }
}

void sub_216CA4CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CA4CFC(uint64_t a1, char **a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = (char *)(a3 & 0xFFFFFFFFFFFFLL);
    uint64_t v7 = *a2;
    int v8 = (*a2)[6369];
    int v9 = (*a2)[6370];
    int v10 = (*a2)[6368] << 16;
    unsigned int v11 = v10 | (v8 << 8);
    if (v11 <= 0x4FF)
    {
      LODWORD(v71) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v71, 4uLL)) {
        return;
      }
      uint64_t v7 = *a2;
    }
    unint64_t v13 = a2[1];
    uint64_t v12 = (std::__shared_weak_count *)a2[2];
    unint64_t v58 = v7;
    uint64_t v59 = v13;
    long long v60 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v14 = a2[3];
    uint64_t v61 = v14;
    unsigned int v15 = v10 | v9 | (v8 << 8);
    if (v15 >= 0x600 && (a3 & 0x2000000000000000) != 0)
    {
      unint64_t v66 = 0;
      if (v15 > 0x6FF)
      {
        if (!sub_216C804FC(&v59, (uint64_t)&v66, 8uLL)) {
          goto LABEL_77;
        }
        unint64_t v18 = v66;
      }
      else
      {
        LODWORD(v71) = 0;
        if (!sub_216C804FC(&v59, (uint64_t)&v71, 4uLL)) {
          goto LABEL_77;
        }
        unint64_t v18 = v71;
        unint64_t v66 = v71;
      }
      if (v18 <= 0xF)
      {
        uint64_t v26 = (*(uint64_t (**)(char *))(*(void *)v59 + 16))(v59);
        unint64_t v27 = v26 - (void)v61;
        uint64_t v28 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v66;
        unint64_t v29 = 2 * v66;
        if (((unint64_t)v61 & 0x8000000000000000) != 0
          || (v27 & 0x8000000000000000) != 0
          || (v66 <= v27 ? (BOOL v30 = v29 > v27) : (BOOL v30 = 1), v30))
        {
          *(void *)&long long v71 = "usd/crateFile.cpp";
          *((void *)&v71 + 1) = "_ReadPossiblyCompressedArray";
          *(void *)&long long v72 = 2287;
          *((void *)&v72 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::valu"
                                  "e || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_Crate"
                                  "File::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version,"
                                  " int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<px"
                                  "rInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aapl__p"
                                  "xrReserved__::pxr_half::half]";
          LOBYTE(v73) = 0;
          uint64_t v56 = (*(uint64_t (**)(char *))(*(void *)v59 + 16))(v59);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v71, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld", v28, v29, v27, v56);
        }
        else
        {
          LOWORD(__p) = 0;
          *(void *)&long long v71 = &__p;
          sub_2168F90A4((unint64_t *)a4, v66, (_WORD **)&v71);
          sub_2168F930C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v31, v32);
          sub_216C804FC(&v59, *(void *)(a4 + 32), 2 * v66);
        }
        goto LABEL_77;
      }
      char v65 = 0;
      if (sub_216C804FC(&v59, (uint64_t)&v65, 1uLL))
      {
        if (v65 != 116)
        {
          if (v65 != 105)
          {
            *(void *)&long long v71 = "usd/crateFile.cpp";
            *((void *)&v71 + 1) = "_ReadPossiblyCompressedArray";
            *(void *)&long long v72 = 2351;
            *((void *)&v72 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::va"
                                    "lue || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_C"
                                    "rateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Ve"
                                    "rsion, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_R"
                                    "eader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = pxrInterna"
                                    "l__aapl__pxrReserved__::pxr_half::half]";
            LOBYTE(v73) = 0;
            unint64_t v54 = v58 + 6512;
            if (v58[6535] < 0) {
              unint64_t v54 = *(const char **)v54;
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v71, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt data stream detected reading compressed array in <%s>", v54);
            goto LABEL_77;
          }
          uint64_t v33 = v60;
          if (v60) {
            atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          char v34 = sub_216C9B79C((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v66);
          if (v33) {
            sub_216784EC4(v33);
          }
          if ((v34 & 1) == 0)
          {
            *(void *)&long long v71 = "usd/crateFile.cpp";
            *((void *)&v71 + 1) = "_ReadPossiblyCompressedArray";
            *(void *)&long long v72 = 2307;
            *((void *)&v72 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::va"
                                    "lue || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_C"
                                    "rateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Ve"
                                    "rsion, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_R"
                                    "eader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = pxrInterna"
                                    "l__aapl__pxrReserved__::pxr_half::half]";
            LOBYTE(v73) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v71, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed ints", v66);
            goto LABEL_77;
          }
          sub_2167816FC(&v71, v66);
          LOWORD(v62) = 0;
          __sFILE __p = &v62;
          sub_2168F90A4((unint64_t *)a4, v66, (_WORD **)&__p);
          sub_2168F930C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v35, v36);
          int64_t v37 = *(_WORD **)(a4 + 32);
          sub_216C9C7B4((uint64_t)&v58, (_DWORD *)v71, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((uint64_t)(*((void *)&v71 + 1) - v71) >> 2));
          sub_216CA3F74((uint64_t)&__p, (int *)v71, *((int **)&v71 + 1), v37);
          ssize_t v38 = (void *)v71;
          if (!(void)v71) {
            goto LABEL_77;
          }
          *((void *)&v71 + 1) = v71;
LABEL_76:
          operator delete(v38);
          goto LABEL_77;
        }
        unsigned int v64 = 0;
        if (!sub_216C804FC(&v59, (uint64_t)&v64, 4uLL)) {
          goto LABEL_77;
        }
        uint64_t v39 = (*(uint64_t (**)(char *))(*(void *)v59 + 16))(v59);
        uint64_t v40 = v39 - (void)v61;
        unsigned int v41 = v64;
        unint64_t v42 = 2 * v64;
        if (((unint64_t)v61 & 0x8000000000000000) == 0
          && (v40 & 0x8000000000000000) == 0
          && v40 >= v64
          && v42 <= v40)
        {
          sub_216CA4010(&__p, v64);
          sub_216C804FC(&v59, (uint64_t)__p, v68 - (unsigned char *)__p);
          int64_t v43 = v60;
          if (v60) {
            atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          char v44 = sub_216C9B79C((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v66);
          if (v43) {
            sub_216784EC4(v43);
          }
          if ((v44 & 1) == 0)
          {
            *(void *)&long long v71 = "usd/crateFile.cpp";
            *((void *)&v71 + 1) = "_ReadPossiblyCompressedArray";
            *(void *)&long long v72 = 2333;
            *((void *)&v72 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::va"
                                    "lue || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_C"
                                    "rateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Ve"
                                    "rsion, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_R"
                                    "eader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = pxrInterna"
                                    "l__aapl__pxrReserved__::pxr_half::half]";
            LOBYTE(v73) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v71, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed uints", v66);
            goto LABEL_74;
          }
          sub_2167813E0(&v62, v66);
          sub_216C8F684((uint64_t)&v58, (_DWORD *)v62, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((uint64_t)((uint64_t)v63 - v62) >> 2));
          __int16 v74 = 0;
          *(void *)&long long v71 = &v74;
          sub_2168F90A4((unint64_t *)a4, v66, (_WORD **)&v71);
          sub_2168F930C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v45, v46);
          uint64_t v47 = (unsigned int *)v62;
          unint64_t v48 = v63;
          if ((unsigned int *)v62 == v63)
          {
LABEL_67:
            if (!v47)
            {
LABEL_74:
              ssize_t v38 = __p;
              if (!__p) {
                goto LABEL_77;
              }
              int v68 = __p;
              goto LABEL_76;
            }
          }
          else
          {
            uint64_t v49 = *(_WORD **)(a4 + 32);
            unsigned int v50 = v64;
            long long v51 = (unsigned int *)v62;
            long long v52 = __p;
            while (1)
            {
              uint64_t v53 = *v51;
              if (v53 >= v50) {
                break;
              }
              *v49++ = v52[v53];
              if (++v51 == v48) {
                goto LABEL_67;
              }
            }
            *(void *)&long long v71 = "usd/crateFile.cpp";
            *((void *)&v71 + 1) = "_ReadPossiblyCompressedArray";
            *(void *)&long long v72 = 2343;
            *((void *)&v72 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::va"
                                    "lue || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_C"
                                    "rateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Ve"
                                    "rsion, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_R"
                                    "eader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = pxrInterna"
                                    "l__aapl__pxrReserved__::pxr_half::half]";
            LOBYTE(v73) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v71, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to index lut with index %u, out of bounds access", v53);
            uint64_t v47 = (unsigned int *)v62;
            if (!v62) {
              goto LABEL_74;
            }
          }
          long long v63 = v47;
          operator delete(v47);
          goto LABEL_74;
        }
        *(void *)&long long v71 = "usd/crateFile.cpp";
        *((void *)&v71 + 1) = "_ReadPossiblyCompressedArray";
        *(void *)&long long v72 = 2325;
        *((void *)&v72 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value "
                                "|| std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                "::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) "
                                "[Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInterna"
                                "l__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aapl__pxrReserved"
                                "__::pxr_half::half]";
        LOBYTE(v73) = 0;
        uint64_t v57 = (*(uint64_t (**)(char *))(*(void *)v59 + 16))(v59);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v71, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %u elements for lut (%llu bytes), remaining file size is %lld of %lld", v41, v42, v40, v57);
      }
LABEL_77:
      if (v60) {
        sub_216784EC4(v60);
      }
      return;
    }
    __sFILE __p = v7;
    int v68 = v59;
    int64_t v69 = v60;
    if (v60)
    {
      atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v14 = v61;
    }
    uint64_t v70 = v14;
    unint64_t v62 = 0;
    if (v11 > 0x6FF)
    {
      if (!sub_216C804FC(&v68, (uint64_t)&v62, 8uLL)) {
        goto LABEL_31;
      }
    }
    else
    {
      LODWORD(v71) = 0;
      if (!sub_216C804FC(&v68, (uint64_t)&v71, 4uLL)) {
        goto LABEL_31;
      }
      unint64_t v62 = v71;
    }
    uint64_t v19 = (*(uint64_t (**)(unsigned char *))(*(void *)v68 + 16))(v68);
    unint64_t v20 = v19 - (void)v70;
    unint64_t v21 = v62;
    unint64_t v22 = 2 * v62;
    if (((unint64_t)v70 & 0x8000000000000000) != 0
      || (v20 & 0x8000000000000000) != 0
      || (v62 <= v20 ? (BOOL v23 = v22 > v20) : (BOOL v23 = 1), v23))
    {
      *(void *)&long long v71 = "usd/crateFile.cpp";
      *((void *)&v71 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v72 = 2053;
      *((void *)&v72 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
      LOBYTE(v73) = 0;
      uint64_t v55 = (*(uint64_t (**)(unsigned char *))(*(void *)v68 + 16))(v68);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v71, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v21, v22, v20, v55);
    }
    else
    {
      LOWORD(v66) = 0;
      *(void *)&long long v71 = &v66;
      sub_2168F90A4((unint64_t *)a4, v62, (_WORD **)&v71);
      sub_2168F930C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v24, v25);
      sub_216C804FC(&v68, *(void *)(a4 + 32), 2 * *(void *)a4);
    }
LABEL_31:
    if (v69) {
      sub_216784EC4(v69);
    }
    goto LABEL_77;
  }
  uint64_t v73 = 0;
  long long v71 = 0u;
  long long v72 = 0u;
  if (&v71 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v17 = v72;
    *(_OWORD *)a4 = v71;
    *(_OWORD *)(a4 + 16) = v17;
    long long v71 = 0u;
    long long v72 = 0u;
    *(void *)(a4 + 32) = v73;
    uint64_t v73 = 0;
  }
  sub_2168F83DC((uint64_t)&v71);
}

void sub_216CA54B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a16) {
    sub_216784EC4(a16);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CA5578(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C7605F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CA55C4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7605F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CA55F4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_216CA5654(*(void *)(a1 + 16), *(void **)(a1 + 8), (float *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_216CA5608(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C760658)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CA5648()
{
  return &unk_26C760658;
}

unint64_t sub_216CA5654(uint64_t a1, void *a2, float *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v4 = (uint64_t *)this;
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = v4[1];
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      uint64_t v10 = *v4;
    }
    return sub_216CA570C(a1, a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      uint64_t v4 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    return *(unsigned int *)v4 | 0x4008000000000000;
  }
}

unint64_t sub_216CA570C(uint64_t a1, void *a2, float *a3, uint64_t a4)
{
  v78[0] = a2;
  v78[1] = a3;
  unint64_t result = 0x8008000000000000;
  unint64_t v77 = 0x8008000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      uint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7B720(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    unint64_t v13 = sub_216CA5DCC(v9, (unint64_t *)a4, a4, &v77);
    if (v14)
    {
      uint64_t v15 = a2[791];
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        unsigned int v16 = *(unsigned __int8 *)(v15 + 250) << 16;
        __int16 v17 = *(_WORD *)(v15 + 248);
        *(void *)&long long v84 = a2;
        *((void *)&v84 + 1) = a3;
        int v18 = v17 << 16;
        int v19 = v17 & 0xFF00;
        unsigned int v20 = v19 | HIWORD(v16) & 0xFF00FFFF | v18;
        if (v20 >= 0x600 && (unint64_t v21 = *(void *)a4, *(void *)a4 > 0xFuLL))
        {
          uint64_t v24 = *(float **)(a4 + 32);
          float v25 = &v24[v21];
          uint64_t v26 = 4 * v21;
          unint64_t v27 = v24;
          while (1)
          {
            float v28 = *v27;
            BOOL v29 = *v27 < -2147500000.0 || v28 > 2147500000.0;
            if (v29 || v28 != (float)(int)v28) {
              break;
            }
            ++v27;
            v26 -= 4;
            if (!v26)
            {
              uint64_t v31 = *(void *)a3;
              if (v20 > 0x6FF)
              {
                uint64_t v81 = *(void **)a4;
                sub_216C80458((uint64_t)&v84, (char *)&v81);
              }
              else
              {
                LODWORD(v81) = *(void *)a4;
                sub_216C984FC((uint64_t)&v84, (char *)&v81);
              }
              sub_2167816FC(&v81, *(void *)a4);
              if (*(void *)a4)
              {
                long long v60 = *(float **)(a4 + 32);
                uint64_t v61 = v81;
                uint64_t v62 = 4 * *(void *)a4;
                do
                {
                  float v63 = *v60++;
                  *v61++ = (int)v63;
                  v62 -= 4;
                }
                while (v62);
              }
              LOBYTE(__p[0]) = 105;
              sub_216CA3630((uint64_t)&v84, (char *)__p);
              unsigned int v64 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v81;
              uint64_t v65 = ((char *)v82 - (unsigned char *)v81) >> 2;
              *(_OWORD *)__sFILE __p = v84;
              size_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v65);
              uint64_t v67 = (char *)operator new[](CompressedBufferSize);
              int64_t v69 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(v64, (const int *)v65, v67, v68);
              *(void *)&long long v85 = v69;
              sub_216C80458((uint64_t)__p, (char *)&v85);
              sub_216C6D370((uint64_t)__p, v67, v69);
              unint64_t v23 = v31 & 0xFFFFFFFFFFFFLL | 0xA008000000000000;
              operator delete[](v67);
              goto LABEL_87;
            }
          }
          int v76 = v18;
          ssize_t v32 = 0;
          uint64_t v81 = 0;
          uint64_t v82 = 0;
          size_t v83 = 0;
          unint64_t v33 = v21 >> 2;
          if (v33 >= 0x400) {
            uint64_t v34 = 1024;
          }
          else {
            uint64_t v34 = v33;
          }
          __p[0] = 0;
          __p[1] = 0;
          int v80 = 0;
          do
          {
            float v35 = *v24;
            if (v81 != v32)
            {
              uint64_t v36 = (float *)v81;
              while (*v36 != v35)
              {
                if (++v36 == v32) {
                  goto LABEL_38;
                }
              }
              ssize_t v32 = v36;
            }
LABEL_38:
            unint64_t v37 = (char *)v32 - (unsigned char *)v81;
            unint64_t v38 = v37 >> 2;
            uint64_t v39 = (char *)__p[1];
            if (__p[1] >= v80)
            {
              unsigned int v41 = (char *)__p[0];
              int64_t v42 = ((char *)__p[1] - (char *)__p[0]) >> 2;
              unint64_t v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62) {
                sub_21677CB10();
              }
              uint64_t v44 = v80 - (char *)__p[0];
              if ((v80 - (char *)__p[0]) >> 1 > v43) {
                unint64_t v43 = v44 >> 1;
              }
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v45 = v43;
              }
              if (v45)
              {
                unsigned int v46 = (char *)sub_21677EA28((uint64_t)&v80, v45);
                unsigned int v41 = (char *)__p[0];
                uint64_t v39 = (char *)__p[1];
              }
              else
              {
                unsigned int v46 = 0;
              }
              uint64_t v47 = &v46[4 * v42];
              *(_DWORD *)uint64_t v47 = v38;
              uint64_t v40 = v47 + 4;
              while (v39 != v41)
              {
                int v48 = *((_DWORD *)v39 - 1);
                v39 -= 4;
                *((_DWORD *)v47 - 1) = v48;
                v47 -= 4;
              }
              __p[0] = v47;
              __p[1] = v40;
              int v80 = &v46[4 * v45];
              if (v41) {
                operator delete(v41);
              }
            }
            else
            {
              *(_DWORD *)__p[1] = v38;
              uint64_t v40 = v39 + 4;
            }
            __p[1] = v40;
            uint64_t v49 = (v37 >> 2);
            ssize_t v32 = v82;
            if (v49 == ((char *)v82 - (unsigned char *)v81) >> 2)
            {
              if (v49 == v34)
              {
                uint64_t v82 = (float *)v81;
                __p[1] = __p[0];
                goto LABEL_74;
              }
              if (v82 >= v83)
              {
                unint64_t v50 = ((char *)v83 - (unsigned char *)v81) >> 1;
                if (v50 <= v49 + 1) {
                  unint64_t v50 = v49 + 1;
                }
                if ((unint64_t)((char *)v83 - (unsigned char *)v81) >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v51 = v50;
                }
                uint64_t v53 = (char *)sub_21677EA28((uint64_t)&v83, v51);
                unint64_t v54 = (float *)v81;
                uint64_t v55 = v82;
                uint64_t v56 = (float *)&v53[4 * v49];
                float *v56 = v35;
                ssize_t v32 = v56 + 1;
                while (v55 != v54)
                {
                  int v57 = *((_DWORD *)v55-- - 1);
                  *((_DWORD *)v56-- - 1) = v57;
                }
                uint64_t v81 = v56;
                uint64_t v82 = v32;
                size_t v83 = (float *)&v53[4 * v52];
                if (v54) {
                  operator delete(v54);
                }
              }
              else
              {
                *uint64_t v82 = v35;
                ++v32;
              }
              uint64_t v82 = v32;
            }
            ++v24;
          }
          while (v24 != v25);
          if (v81 != v32)
          {
            uint64_t v58 = **((void **)&v84 + 1);
            if (v20 > 0x6FF)
            {
              *(void *)&long long v85 = *(void *)a4;
              sub_216C80458((uint64_t)&v84, (char *)&v85);
            }
            else
            {
              LODWORD(v85) = *(void *)a4;
              sub_216C984FC((uint64_t)&v84, (char *)&v85);
            }
            LOBYTE(v85) = 116;
            sub_216CA3630((uint64_t)&v84, (char *)&v85);
            LODWORD(v85) = (unint64_t)((char *)v82 - (unsigned char *)v81) >> 2;
            sub_216C984FC((uint64_t)&v84, (char *)&v85);
            sub_216C93180((uint64_t)&v84, (char *)v81, ((char *)v82 - (unsigned char *)v81) >> 2);
            uint64_t v70 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__p[0];
            int64_t v71 = ((char *)__p[1] - (char *)__p[0]) >> 2;
            long long v85 = v84;
            size_t v72 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v71);
            uint64_t v73 = (char *)operator new[](v72);
            int64_t v75 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(v70, (const unsigned int *)v71, v73, v74);
            *(void *)int64_t __src = v75;
            sub_216C80458((uint64_t)&v85, __src);
            sub_216C6D370((uint64_t)&v85, v73, v75);
            unint64_t v23 = v58 & 0xFFFFFFFFFFFFLL | 0xA008000000000000;
            operator delete[](v73);
            goto LABEL_85;
          }
LABEL_74:
          long long v85 = v84;
          uint64_t v59 = sub_216C98168((uint64_t)&v85, 8);
          if ((v76 | v19) > 0x6FF)
          {
            *(void *)int64_t __src = *(void *)a4;
            sub_216C80458((uint64_t)&v85, __src);
          }
          else
          {
            *(_DWORD *)int64_t __src = *(void *)a4;
            sub_216C984FC((uint64_t)&v85, __src);
          }
          sub_216C93180((uint64_t)&v85, *(char **)(a4 + 32), *(void *)a4);
          unint64_t v23 = v59 & 0xFFFFFFFFFFFFLL | 0x8008000000000000;
LABEL_85:
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
LABEL_87:
          if (v81)
          {
            uint64_t v82 = (float *)v81;
            operator delete(v81);
          }
        }
        else
        {
          uint64_t v81 = a2;
          uint64_t v82 = a3;
          uint64_t v22 = sub_216C98168((uint64_t)&v81, 8);
          if ((v18 | v19) > 0x6FF)
          {
            __p[0] = *(void **)a4;
            sub_216C80458((uint64_t)&v81, (char *)__p);
          }
          else
          {
            LODWORD(__p[0]) = *(void *)a4;
            sub_216C984FC((uint64_t)&v81, (char *)__p);
          }
          unint64_t v23 = v22 & 0xFFFFFFFFFFFFLL | 0x8008000000000000;
          sub_216C93180((uint64_t)&v81, *(char **)(a4 + 32), *(void *)a4);
        }
        v13[7] = v23;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v78, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v81) = 1;
        sub_216C984FC((uint64_t)v78, (char *)&v81);
        LODWORD(v81) = *(void *)a4;
        sub_216C984FC((uint64_t)v78, (char *)&v81);
        sub_216C93180((uint64_t)v78, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void sub_216CA5D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216CA5DCC(uint64_t a1, unint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = *a2;
  if (*a2)
  {
    uint64_t v10 = (float *)a2[4];
    unint64_t v11 = *a2;
    do
    {
      float v12 = *v10++;
      float v13 = v12;
      if (v12 == 0.0) {
        float v13 = 0.0;
      }
      unint64_t v9 = LODWORD(v13) + ((v9 + LODWORD(v13) + (v9 + LODWORD(v13)) * (v9 + LODWORD(v13))) >> 1);
      --v11;
    }
    while (v11);
    v9 *= 0x9E3779B97F4A7C55;
  }
  unint64_t v14 = bswap64(v9);
  unint64_t v15 = *(void *)(a1 + 8);
  if (v15)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    unint64_t v17 = v16.u32[0];
    if (v16.u32[0] > 1uLL)
    {
      unint64_t v4 = v14;
      if (v14 >= v15) {
        unint64_t v4 = v14 % v15;
      }
    }
    else
    {
      unint64_t v4 = (v15 - 1) & v14;
    }
    int v18 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v18)
    {
      for (int i = *v18; i; int i = (void *)*i)
      {
        unint64_t v20 = i[1];
        if (v20 == v14)
        {
          if (sub_2168F8B8C(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v17 > 1)
          {
            if (v20 >= v15) {
              v20 %= v15;
            }
          }
          else
          {
            v20 &= v15 - 1;
          }
          if (v20 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t v21 = (void *)(a1 + 16);
  uint64_t v22 = operator new(0x40uLL);
  int i = v22;
  *(void *)uint64_t v22 = 0;
  *((void *)v22 + 1) = v14;
  long long v23 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v22 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v22 + 2) = v23;
  uint64_t v24 = *(void *)(a3 + 32);
  *((void *)v22 + 6) = v24;
  if (v24)
  {
    float v25 = (atomic_ullong *)(v24 - 16);
    if (*((void *)v22 + 5)) {
      float v25 = (atomic_ullong *)*((void *)v22 + 5);
    }
    atomic_fetch_add_explicit(v25, 1uLL, memory_order_relaxed);
  }
  *((void *)v22 + 7) = *a4;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (!v15 || (float)(v27 * (float)v15) < v26)
  {
    BOOL v28 = 1;
    if (v15 >= 3) {
      BOOL v28 = (v15 & (v15 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v15);
    unint64_t v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30) {
      size_t v31 = v30;
    }
    else {
      size_t v31 = v29;
    }
    sub_21678A04C(a1, v31);
    unint64_t v15 = *(void *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        unint64_t v4 = v14 % v15;
      }
      else {
        unint64_t v4 = v14;
      }
    }
    else
    {
      unint64_t v4 = (v15 - 1) & v14;
    }
  }
  uint64_t v32 = *(void *)a1;
  unint64_t v33 = *(void **)(*(void *)a1 + 8 * v4);
  if (v33)
  {
    *int i = *v33;
LABEL_48:
    *unint64_t v33 = i;
    goto LABEL_49;
  }
  *int i = *v21;
  *unint64_t v21 = i;
  *(void *)(v32 + 8 * v4) = v21;
  if (*i)
  {
    unint64_t v34 = *(void *)(*i + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v34 >= v15) {
        v34 %= v15;
      }
    }
    else
    {
      v34 &= v15 - 1;
    }
    unint64_t v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_48;
  }
LABEL_49:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CA6084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CA60A0(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CA60A0(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

__n128 sub_216CA6100(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C760678;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CA614C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C760678;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CA617C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  long long v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_216CA6214(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_216CA61C8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7606D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CA6208()
{
  return &unk_26C7606D8;
}

void sub_216CA6214(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    long long v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a2 + 32);
    sub_216CA62AC(a1, v6, a3, (uint64_t)v8);
    sub_2168F87A8(a4, v8);
    sub_2168F83DC((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u32[0] = a3;
    sub_216B8D554(a4, (float *)v8);
  }
}

void sub_216CA6294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CA62AC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) == 0)
  {
    memset(&__p._lbfsize, 0, 40);
    if (&__p._lbfsize != (int *)a4)
    {
      sub_2168F83DC(a4);
      long long v16 = *(_OWORD *)&__p._close;
      *(_OWORD *)a4 = *(_OWORD *)&__p._lbfsize;
      *(_OWORD *)(a4 + 16) = v16;
      memset(&__p._lbfsize, 0, 32);
      *(void *)(a4 + 32) = __p._seek;
      __p._seeuint64_t k = 0;
    }
    sub_2168F83DC((uint64_t)&__p._lbfsize);
    return;
  }
  a2[2] = a3 & 0xFFFFFFFFFFFFLL;
  int v7 = *(unsigned __int8 *)(*a2 + 6369);
  int v8 = *(unsigned __int8 *)(*a2 + 6370);
  int v9 = *(unsigned __int8 *)(*a2 + 6368) << 16;
  unsigned int v10 = v9 | (v7 << 8);
  if (v10 > 0x4FF || (__p._lbfint size = 0, sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&__p._lbfsize)))
  {
    long long v11 = *((_OWORD *)a2 + 1);
    long long v53 = *(_OWORD *)a2;
    long long v54 = v11;
    uint64_t v55 = (pxrInternal__aapl__pxrReserved__ *)a2[4];
    unsigned int v12 = v9 | v8 | (v7 << 8);
    if (v12 < 0x600 || (a3 & 0x2000000000000000) == 0)
    {
      __p._unint64_t p = 0;
      if (v10 > 0x6FF)
      {
        ssize_t v14 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, &__p, (char *)8, v54 + *((void *)&v53 + 1));
        if (v14 == -1) {
          return;
        }
        unint64_t p = (unint64_t)__p._p;
      }
      else
      {
        __p._lbfint size = 0;
        ssize_t v14 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)&__p._lbfsize, (char *)4, v54 + *((void *)&v53 + 1));
        if (v14 == -1) {
          return;
        }
        unint64_t p = __p._lbfsize;
        __p._unint64_t p = (unsigned __int8 *)__p._lbfsize;
      }
      ssize_t v20 = v14 + v54;
      unint64_t v21 = *((void *)&v54 + 1) - (v14 + v54);
      if (v14 + (void)v54 < 0 || (v21 & 0x8000000000000000) != 0 || p > v21 || 4 * p > v21)
      {
        *(void *)&__p._lbfint size = "usd/crateFile.cpp";
        __p._cookie = "_ReadUncompressedArray";
        __p._close = (int (__cdecl *)(void *))2053;
        __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_I"
                                                          "sBitwiseReadWrite<T>::value>::type pxrInternal__aapl__pxrReser"
                                                          "ved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep,"
                                                          " VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl"
                                                          "__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal"
                                                          "__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>, T = float]";
        LOBYTE(__p._seek) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld");
        return;
      }
      LODWORD(v56) = 0;
      *(void *)&__p._lbfint size = &v56;
      sub_2168F84A8((unint64_t *)a4, p, (_DWORD **)&__p._lbfsize);
      sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v22, v23);
      uint64_t v24 = *(__sFILE **)(a4 + 32);
      float v25 = (char *)(4 * *(void *)a4);
      off_t v26 = v20 + *((void *)&v53 + 1);
      float v27 = (FILE *)v55;
      goto LABEL_33;
    }
    *(void *)&__p._bf._int size = 0;
    if (v12 > 0x6FF)
    {
      ssize_t v28 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)&__p._bf._size, (char *)8, v54 + *((void *)&v53 + 1));
      if (v28 == -1) {
        return;
      }
      ssize_t v18 = v54 + v28;
      *(void *)&long long v54 = v54 + v28;
      lbfint size = *(void *)&__p._bf._size;
    }
    else
    {
      __p._lbfint size = 0;
      ssize_t v17 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)&__p._lbfsize, (char *)4, v54 + *((void *)&v53 + 1));
      if (v17 == -1) {
        return;
      }
      ssize_t v18 = v54 + v17;
      *(void *)&long long v54 = v54 + v17;
      lbfint size = __p._lbfsize;
      *(void *)&__p._bf._int size = __p._lbfsize;
    }
    if (lbfsize <= 0xF)
    {
      unint64_t v29 = *((void *)&v54 + 1) - v18;
      if (v18 < 0 || (v29 & 0x8000000000000000) != 0 || lbfsize > v29 || 4 * lbfsize > v29)
      {
        *(void *)&__p._lbfint size = "usd/crateFile.cpp";
        __p._cookie = "_ReadPossiblyCompressedArray";
        __p._close = (int (__cdecl *)(void *))2287;
        __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || std:"
                                                          ":is_same<T, float>::value || std::is_same<T, double>::value>::"
                                                          "type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPos"
                                                          "siblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile"
                                                          "::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Us"
                                                          "d_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved"
                                                          "__::Usd_CrateFile::_PreadStream>, T = float]";
        LOBYTE(__p._seek) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
        return;
      }
      LODWORD(__p._p) = 0;
      *(void *)&__p._lbfint size = &__p;
      sub_2168F84A8((unint64_t *)a4, lbfsize, (_DWORD **)&__p._lbfsize);
      sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v30, v31);
      uint64_t v24 = *(__sFILE **)(a4 + 32);
      float v25 = (char *)(4 * *(void *)&__p._bf._size);
      float v27 = (FILE *)v55;
      off_t v26 = v54 + *((void *)&v53 + 1);
LABEL_33:
      pxrInternal__aapl__pxrReserved__::ArchPRead(v27, v24, v25, v26);
      return;
    }
    HIBYTE(__p._bf._base) = 0;
    ssize_t v32 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)((char *)&__p._bf._base + 7), (char *)1, v18 + *((void *)&v53 + 1));
    if (v32 != -1)
    {
      ssize_t v33 = v54 + v32;
      *(void *)&long long v54 = v54 + v32;
      if (HIBYTE(__p._bf._base) != 116)
      {
        if (HIBYTE(__p._bf._base) != 105)
        {
          *(void *)&__p._lbfint size = "usd/crateFile.cpp";
          __p._cookie = "_ReadPossiblyCompressedArray";
          __p._close = (int (__cdecl *)(void *))2351;
          __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || st"
                                                            "d::is_same<T, float>::value || std::is_same<T, double>::valu"
                                                            "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                                                            "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, C"
                                                            "rateFile::Version, int) [Reader = pxrInternal__aapl__pxrRese"
                                                            "rved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                                                            "_pxrReserved__::Usd_CrateFile::_PreadStream>, T = float]";
          LOBYTE(__p._seek) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt data stream detected reading compressed array in <%s>");
          return;
        }
        if ((sub_216C9B79C(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)&__p._bf._size) & 1) == 0)
        {
          *(void *)&__p._lbfint size = "usd/crateFile.cpp";
          __p._cookie = "_ReadPossiblyCompressedArray";
          __p._close = (int (__cdecl *)(void *))2307;
          __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || st"
                                                            "d::is_same<T, float>::value || std::is_same<T, double>::valu"
                                                            "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                                                            "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, C"
                                                            "rateFile::Version, int) [Reader = pxrInternal__aapl__pxrRese"
                                                            "rved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                                                            "_pxrReserved__::Usd_CrateFile::_PreadStream>, T = float]";
          LOBYTE(__p._seek) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed ints");
          return;
        }
        sub_2167816FC(&__p._lbfsize, *(unint64_t *)&__p._bf._size);
        LODWORD(v56) = 0;
        __p._unint64_t p = (unsigned __int8 *)&v56;
        sub_2168F84A8((unint64_t *)a4, *(unint64_t *)&__p._bf._size, &__p);
        sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v34, v35);
        uint64_t v36 = *(float **)(a4 + 32);
        sub_216C9B7D4((uint64_t)&v53, *(_DWORD **)&__p._lbfsize, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)(((uint64_t)__p._cookie - *(void *)&__p._lbfsize) >> 2));
        unint64_t v37 = *(unsigned __int8 **)&__p._lbfsize;
        cookie = (int *)__p._cookie;
        if (*(void **)&__p._lbfsize != __p._cookie)
        {
          uint64_t v39 = *(int **)&__p._lbfsize;
          do
          {
            int v40 = *v39++;
            *v36++ = (float)v40;
          }
          while (v39 != cookie);
        }
        if (v37)
        {
          __p._cookie = v37;
LABEL_63:
          operator delete(v37);
          return;
        }
        return;
      }
      LODWORD(__p._bf._base) = 0;
      ssize_t v41 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)&__p._bf, (char *)4, v33 + *((void *)&v53 + 1));
      if (v41 == -1) {
        return;
      }
      *(void *)&long long v54 = v54 + v41;
      unint64_t v42 = *((void *)&v54 + 1) - v54;
      if ((v54 & 0x8000000000000000) != 0
        || (v42 & 0x8000000000000000) != 0
        || (uint64_t)v42 < LODWORD(__p._bf._base)
        || 4 * (unint64_t)LODWORD(__p._bf._base) > v42)
      {
        *(void *)&__p._lbfint size = "usd/crateFile.cpp";
        __p._cookie = "_ReadPossiblyCompressedArray";
        __p._close = (int (__cdecl *)(void *))2325;
        __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || std:"
                                                          ":is_same<T, float>::value || std::is_same<T, double>::value>::"
                                                          "type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPos"
                                                          "siblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile"
                                                          "::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Us"
                                                          "d_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved"
                                                          "__::Usd_CrateFile::_PreadStream>, T = float]";
        LOBYTE(__p._seek) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %u elements for lut (%llu bytes), remaining file size is %lld of %lld");
        return;
      }
      sub_21678247C(&__p, LODWORD(__p._bf._base));
      ssize_t v43 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)__p._p, (char *)(*(void *)&__p._r - (unint64_t)__p._p), v54 + *((void *)&v53 + 1));
      if (v43 != -1) {
        *(void *)&long long v54 = v54 + v43;
      }
      if (sub_216C9B79C(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)&__p._bf._size))
      {
        sub_2167813E0(&v56, *(unint64_t *)&__p._bf._size);
        sub_216C8B53C((uint64_t)&v53, v56, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)(v57 - v56));
        HIDWORD(__p._write) = 0;
        *(void *)&__p._lbfint size = (char *)&__p._write + 4;
        sub_2168F84A8((unint64_t *)a4, *(unint64_t *)&__p._bf._size, (_DWORD **)&__p._lbfsize);
        sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v44, v45);
        unsigned int v46 = v56;
        uint64_t v47 = v57;
        if (v56 == v57)
        {
LABEL_56:
          if (!v46) {
            goto LABEL_61;
          }
        }
        else
        {
          uint64_t v48 = 0;
          uint64_t v49 = *(void *)(a4 + 32);
          unsigned int base = __p._bf._base;
          unint64_t v51 = __p._p;
          while (1)
          {
            uint64_t v52 = v46[v48];
            if (v52 >= base) {
              break;
            }
            *(_DWORD *)(v49 + v48 * 4) = *(_DWORD *)&v51[4 * v52];
            if (&v46[++v48] == v47) {
              goto LABEL_56;
            }
          }
          *(void *)&__p._lbfint size = "usd/crateFile.cpp";
          __p._cookie = "_ReadPossiblyCompressedArray";
          __p._close = (int (__cdecl *)(void *))2343;
          __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || st"
                                                            "d::is_same<T, float>::value || std::is_same<T, double>::valu"
                                                            "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                                                            "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, C"
                                                            "rateFile::Version, int) [Reader = pxrInternal__aapl__pxrRese"
                                                            "rved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                                                            "_pxrReserved__::Usd_CrateFile::_PreadStream>, T = float]";
          LOBYTE(__p._seek) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to index lut with index %u, out of bounds access", v52);
          unsigned int v46 = v56;
          if (!v56)
          {
LABEL_61:
            unint64_t v37 = __p._p;
            if (__p._p)
            {
              *(void *)&__p._r = __p._p;
              goto LABEL_63;
            }
            return;
          }
        }
        int v57 = v46;
        operator delete(v46);
        goto LABEL_61;
      }
      *(void *)&__p._lbfint size = "usd/crateFile.cpp";
      __p._cookie = "_ReadPossiblyCompressedArray";
      __p._close = (int (__cdecl *)(void *))2333;
      __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || std::i"
                                                        "s_same<T, float>::value || std::is_same<T, double>::value>::type"
                                                        " pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyC"
                                                        "ompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Versio"
                                                        "n, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFil"
                                                        "e::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Crat"
                                                        "eFile::_PreadStream>, T = float]";
      LOBYTE(__p._seek) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed uints", *(void *)&__p._bf._size);
      goto LABEL_61;
    }
  }
}

void sub_216CA6938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CA69B4(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C7606F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CA6A00(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7606F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CA6A30(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CA6A38(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C760758)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CA6A78()
{
  return &unk_26C760758;
}

void sub_216CA6A84(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  _DWORD v9[2] = v6;
  v9[3] = v7;
  int v10 = sub_216C688BC();
  sub_216CA6B04(v5, (uint64_t)v9, v3, v4);
}

void sub_216CA6B04(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    long long v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a2 + 32);
    sub_216CA6B9C(a1, v6, a3, (uint64_t)v8);
    sub_2168F87A8(a4, v8);
    sub_2168F83DC((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u32[0] = a3;
    sub_216B8D554(a4, (float *)v8);
  }
}

void sub_216CA6B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CA6B9C(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) == 0)
  {
    uint64_t v67 = 0;
    long long __dst = 0u;
    long long v66 = 0u;
    if (&__dst != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v16 = v66;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v16;
      long long __dst = 0u;
      long long v66 = 0u;
      *(void *)(a4 + 32) = v67;
      uint64_t v67 = 0;
    }
    sub_2168F83DC((uint64_t)&__dst);
    return;
  }
  *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
  int v7 = *(unsigned __int8 *)(*(void *)a2 + 6369);
  int v8 = *(unsigned __int8 *)(*(void *)a2 + 6370);
  int v9 = *(unsigned __int8 *)(*(void *)a2 + 6368) << 16;
  unsigned int v10 = v9 | (v7 << 8);
  if (v10 <= 0x4FF)
  {
    LODWORD(__dst) = 0;
    if (!sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)) {
      return;
    }
  }
  long long v11 = a2[1];
  long long v54 = *a2;
  long long v55 = v11;
  uint64_t v56 = *((void *)a2 + 4);
  unsigned int v12 = v9 | v8 | (v7 << 8);
  if (v12 < 0x600 || (a3 & 0x2000000000000000) == 0)
  {
    long long v14 = a2[1];
    *(_OWORD *)__sFILE __p = *a2;
    long long v63 = v14;
    uint64_t v64 = *((void *)a2 + 4);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91730, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B91730))
    {
      long long v53 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
      if (!v53) {
        pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
      }
      byte_267B91728 = *v53;
      __cxa_guard_release(&qword_267B91730);
    }
    unint64_t v57 = 0;
    if (v10 > 0x6FF)
    {
      if (!sub_216C82F78((uint64_t)&__p[1], &v57, 8uLL)) {
        return;
      }
      unint64_t v15 = v57;
    }
    else
    {
      LODWORD(__dst) = 0;
      if ((sub_216C82F78((uint64_t)&__p[1], &__dst, 4uLL) & 1) == 0) {
        return;
      }
      unint64_t v15 = __dst;
      unint64_t v57 = __dst;
    }
    unint64_t v26 = 4 * v15;
    float v27 = __p[1];
    if (!byte_267B91728 || v26 < 0x800 || ((uint64_t)__p[1] & 3) != 0)
    {
      unint64_t v30 = (unint64_t)__p[1] - *(void *)(*(void *)v63 + 24);
      unint64_t v31 = *(void *)(*(void *)v63 + 32) - v30;
      if ((v30 & 0x8000000000000000) == 0 && (v31 & 0x8000000000000000) == 0 && v15 <= v31 && v26 <= v31)
      {
        LODWORD(v61) = 0;
        *(void *)&long long __dst = &v61;
        sub_2168F84A8((unint64_t *)a4, v15, (_DWORD **)&__dst);
        sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v33, v34);
        long long v23 = *(void **)(a4 + 32);
        size_t v24 = 4 * *(void *)a4;
        float v25 = &__p[1];
        goto LABEL_45;
      }
      *(void *)&long long __dst = "usd/crateFile.cpp";
      *((void *)&__dst + 1) = "_ReadUncompressedArray";
      *(void *)&long long v66 = 2117;
      *((void *)&v66 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>::"
                              "type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Value"
                              "Rep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_Cra"
                              "teFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<px"
                              "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = float]";
      LOBYTE(v67) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld");
    }
    else
    {
      uint64_t v28 = sub_216C99144((uint64_t)&__p[1], (char *)__p[1], 4 * v15, v15);
      if (v28)
      {
        *(void *)&long long v66 = 0;
        *((void *)&v66 + 1) = v28;
        uint64_t v67 = v27;
        long long __dst = v57;
        if (&__dst != (long long *)a4)
        {
          sub_2168F83DC(a4);
          long long v29 = v66;
          *(_OWORD *)a4 = __dst;
          *(_OWORD *)(a4 + 16) = v29;
          long long __dst = 0u;
          long long v66 = 0u;
          *(void *)(a4 + 32) = v67;
          uint64_t v67 = 0;
        }
        sub_2168F83DC((uint64_t)&__dst);
      }
      else
      {
        *(void *)&long long __dst = "usd/crateFile.cpp";
        *((void *)&__dst + 1) = "_ReadUncompressedArray";
        *(void *)&long long v66 = 2109;
        *((void *)&v66 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>"
                                "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, V"
                                "alueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::U"
                                "sd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapS"
                                "tream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = float]";
        LOBYTE(v67) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v26);
        sub_2168F845C((void *)a4);
      }
    }
    return;
  }
  unint64_t v61 = 0;
  if (v12 > 0x6FF)
  {
    if (!sub_216C82F78((uint64_t)&v54 + 8, &v61, 8uLL)) {
      return;
    }
    unint64_t v17 = v61;
  }
  else
  {
    LODWORD(__dst) = 0;
    if (!sub_216C82F78((uint64_t)&v54 + 8, &__dst, 4uLL)) {
      return;
    }
    unint64_t v17 = __dst;
    unint64_t v61 = __dst;
  }
  if (v17 <= 0xF)
  {
    uint64_t v18 = *((void *)&v54 + 1) - *(void *)(*(void *)v55 + 24);
    unint64_t v19 = *(void *)(*(void *)v55 + 32) - v18;
    if ((v18 & 0x8000000000000000) == 0 && (v19 & 0x8000000000000000) == 0 && v17 <= v19 && 4 * v17 <= v19)
    {
      LODWORD(__p[0]) = 0;
      *(void *)&long long __dst = __p;
      sub_2168F84A8((unint64_t *)a4, v17, (_DWORD **)&__dst);
      sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v21, v22);
      long long v23 = *(void **)(a4 + 32);
      size_t v24 = 4 * v61;
      float v25 = (void **)&v54 + 1;
LABEL_45:
      sub_216C82F78((uint64_t)v25, v23, v24);
      return;
    }
    *(void *)&long long __dst = "usd/crateFile.cpp";
    *((void *)&__dst + 1) = "_ReadPossiblyCompressedArray";
    *(void *)&long long v66 = 2287;
    *((void *)&v66 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || s"
                            "td::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadP"
                            "ossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = px"
                            "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRese"
                            "rved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                            "e::_FileMapping *>>, T = float]";
    LOBYTE(v67) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
    return;
  }
  char v60 = 0;
  if (!sub_216C82F78((uint64_t)&v54 + 8, &v60, 1uLL)) {
    return;
  }
  if (v60 == 116)
  {
    unsigned int v59 = 0;
    if (!sub_216C82F78((uint64_t)&v54 + 8, &v59, 4uLL)) {
      return;
    }
    uint64_t v42 = *((void *)&v54 + 1) - *(void *)(*(void *)v55 + 24);
    unint64_t v43 = *(void *)(*(void *)v55 + 32) - v42;
    if (v42 < 0 || (v43 & 0x8000000000000000) != 0 || (uint64_t)v43 < v59 || 4 * (unint64_t)v59 > v43)
    {
      *(void *)&long long __dst = "usd/crateFile.cpp";
      *((void *)&__dst + 1) = "_ReadPossiblyCompressedArray";
      *(void *)&long long v66 = 2325;
      *((void *)&v66 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value ||"
                              " std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                              "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reade"
                              "r = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                              "_pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                              "::CrateFile::_FileMapping *>>, T = float]";
      LOBYTE(v67) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %u elements for lut (%llu bytes), remaining file size is %lld of %lld");
      return;
    }
    sub_21678247C(__p, v59);
    sub_216C82F78((uint64_t)&v54 + 8, __p[0], (char *)__p[1] - (char *)__p[0]);
    if ((sub_216C9B79C((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v61) & 1) == 0)
    {
      *(void *)&long long __dst = "usd/crateFile.cpp";
      *((void *)&__dst + 1) = "_ReadPossiblyCompressedArray";
      *(void *)&long long v66 = 2333;
      *((void *)&v66 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value ||"
                              " std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                              "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reade"
                              "r = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                              "_pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                              "::CrateFile::_FileMapping *>>, T = float]";
      LOBYTE(v67) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed uints", v61);
      goto LABEL_71;
    }
    sub_2167813E0(&v57, v61);
    sub_216C839A0((uint64_t)&v54, (_DWORD *)v57, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((uint64_t)((uint64_t)v58 - v57) >> 2));
    int v68 = 0;
    *(void *)&long long __dst = &v68;
    sub_2168F84A8((unint64_t *)a4, v61, (_DWORD **)&__dst);
    sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v44, v45);
    unsigned int v46 = (_DWORD *)v57;
    uint64_t v47 = v58;
    if ((_DWORD *)v57 == v58)
    {
LABEL_66:
      if (!v46)
      {
LABEL_71:
        unint64_t v38 = __p[0];
        if (!__p[0]) {
          return;
        }
        __p[1] = __p[0];
        goto LABEL_73;
      }
    }
    else
    {
      uint64_t v48 = 0;
      uint64_t v49 = *(void *)(a4 + 32);
      unsigned int v50 = v59;
      unint64_t v51 = __p[0];
      while (1)
      {
        uint64_t v52 = v46[v48];
        if (v52 >= v50) {
          break;
        }
        *(_DWORD *)(v49 + v48 * 4) = v51[v52];
        if (&v46[++v48] == v47) {
          goto LABEL_66;
        }
      }
      *(void *)&long long __dst = "usd/crateFile.cpp";
      *((void *)&__dst + 1) = "_ReadPossiblyCompressedArray";
      *(void *)&long long v66 = 2343;
      *((void *)&v66 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value ||"
                              " std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                              "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reade"
                              "r = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                              "_pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                              "::CrateFile::_FileMapping *>>, T = float]";
      LOBYTE(v67) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to index lut with index %u, out of bounds access", v52);
      unsigned int v46 = (_DWORD *)v57;
      if (!v57) {
        goto LABEL_71;
      }
    }
    uint64_t v58 = v46;
    operator delete(v46);
    goto LABEL_71;
  }
  if (v60 != 105)
  {
    *(void *)&long long __dst = "usd/crateFile.cpp";
    *((void *)&__dst + 1) = "_ReadPossiblyCompressedArray";
    *(void *)&long long v66 = 2351;
    *((void *)&v66 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || s"
                            "td::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadP"
                            "ossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = px"
                            "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRese"
                            "rved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                            "e::_FileMapping *>>, T = float]";
    LOBYTE(v67) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt data stream detected reading compressed array in <%s>");
    return;
  }
  if ((sub_216C9B79C((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v61) & 1) == 0)
  {
    *(void *)&long long __dst = "usd/crateFile.cpp";
    *((void *)&__dst + 1) = "_ReadPossiblyCompressedArray";
    *(void *)&long long v66 = 2307;
    *((void *)&v66 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || s"
                            "td::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadP"
                            "ossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = px"
                            "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRese"
                            "rved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                            "e::_FileMapping *>>, T = float]";
    LOBYTE(v67) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed ints");
    return;
  }
  sub_2167816FC(&__dst, v61);
  LODWORD(v57) = 0;
  __p[0] = &v57;
  sub_2168F84A8((unint64_t *)a4, v61, (_DWORD **)__p);
  sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v35, v36);
  unint64_t v37 = *(float **)(a4 + 32);
  sub_216C9BF88((uint64_t)&v54, (_DWORD *)__dst, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((uint64_t)(*((void *)&__dst + 1) - __dst) >> 2));
  uint64_t v39 = (int *)*((void *)&__dst + 1);
  unint64_t v38 = (void *)__dst;
  if ((void)__dst != *((void *)&__dst + 1))
  {
    int v40 = (int *)__dst;
    do
    {
      int v41 = *v40++;
      *v37++ = (float)v41;
    }
    while (v40 != v39);
  }
  if (v38)
  {
    *((void *)&__dst + 1) = v38;
LABEL_73:
    operator delete(v38);
  }
}

void sub_216CA7324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
}

__n128 sub_216CA73CC(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C760778;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CA7418(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C760778;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CA7448(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CA7450(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7607D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CA7490()
{
  return &unk_26C7607D8;
}

void sub_216CA749C(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  int v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    long long v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    long long v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CA7548(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CA7524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CA7548(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  unsigned __int32 v5 = a3;
  if (a3 < 0)
  {
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    long long v8 = *a2;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)a2 + 2);
    int v9 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *((void *)a2 + 3);
    sub_216CA7638(a1, (char **)&v8, a3, (uint64_t)v11);
    if (v9) {
      sub_216784EC4(v9);
    }
    sub_2168F87A8(a4, v11);
    sub_2168F83DC((uint64_t)v11);
  }
  else
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v6);
    }
    v11[0].n128_u32[0] = v5;
    sub_216B8D554(a4, (float *)v11);
  }
}

void sub_216CA760C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CA7638(uint64_t a1, char **a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = (char *)(a3 & 0xFFFFFFFFFFFFLL);
    uint64_t v7 = *a2;
    int v8 = (*a2)[6369];
    int v9 = (*a2)[6370];
    int v10 = (*a2)[6368] << 16;
    unsigned int v11 = v10 | (v8 << 8);
    if (v11 <= 0x4FF)
    {
      LODWORD(v74) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v74, 4uLL)) {
        return;
      }
      uint64_t v7 = *a2;
    }
    float v13 = a2[1];
    uint64_t v12 = (std::__shared_weak_count *)a2[2];
    unint64_t v61 = v7;
    uint64_t v62 = v13;
    long long v63 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v14 = a2[3];
    uint64_t v64 = v14;
    unsigned int v15 = v10 | v9 | (v8 << 8);
    if (v15 >= 0x600 && (a3 & 0x2000000000000000) != 0)
    {
      unint64_t v69 = 0;
      if (v15 > 0x6FF)
      {
        if (!sub_216C804FC(&v62, (uint64_t)&v69, 8uLL)) {
          goto LABEL_80;
        }
        unint64_t v18 = v69;
      }
      else
      {
        LODWORD(v74) = 0;
        if (!sub_216C804FC(&v62, (uint64_t)&v74, 4uLL)) {
          goto LABEL_80;
        }
        unint64_t v18 = v74;
        unint64_t v69 = v74;
      }
      if (v18 <= 0xF)
      {
        uint64_t v26 = (*(uint64_t (**)(char *))(*(void *)v62 + 16))(v62);
        unint64_t v27 = v26 - (void)v64;
        uint64_t v28 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v69;
        unint64_t v29 = 4 * v69;
        if (((unint64_t)v64 & 0x8000000000000000) != 0
          || (v27 & 0x8000000000000000) != 0
          || (v69 <= v27 ? (BOOL v30 = v29 > v27) : (BOOL v30 = 1), v30))
        {
          *(void *)&long long v74 = "usd/crateFile.cpp";
          *((void *)&v74 + 1) = "_ReadPossiblyCompressedArray";
          *(void *)&long long v75 = 2287;
          *((void *)&v75 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::valu"
                                  "e || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_Crate"
                                  "File::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version,"
                                  " int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<px"
                                  "rInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = float]";
          LOBYTE(v76) = 0;
          uint64_t v59 = (*(uint64_t (**)(char *))(*(void *)v62 + 16))(v62);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v74, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld", v28, v29, v27, v59);
        }
        else
        {
          LODWORD(__p) = 0;
          *(void *)&long long v74 = &__p;
          sub_2168F84A8((unint64_t *)a4, v69, (_DWORD **)&v74);
          sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v31, v32);
          sub_216C804FC(&v62, *(void *)(a4 + 32), 4 * v69);
        }
        goto LABEL_80;
      }
      char v68 = 0;
      if (sub_216C804FC(&v62, (uint64_t)&v68, 1uLL))
      {
        if (v68 != 116)
        {
          if (v68 != 105)
          {
            *(void *)&long long v74 = "usd/crateFile.cpp";
            *((void *)&v74 + 1) = "_ReadPossiblyCompressedArray";
            *(void *)&long long v75 = 2351;
            *((void *)&v75 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::va"
                                    "lue || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_C"
                                    "rateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Ve"
                                    "rsion, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_R"
                                    "eader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = float]";
            LOBYTE(v76) = 0;
            unint64_t v57 = v61 + 6512;
            if (v61[6535] < 0) {
              unint64_t v57 = *(const char **)v57;
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v74, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt data stream detected reading compressed array in <%s>", v57);
            goto LABEL_80;
          }
          uint64_t v33 = v63;
          if (v63) {
            atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          char v34 = sub_216C9B79C((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v69);
          if (v33) {
            sub_216784EC4(v33);
          }
          if ((v34 & 1) == 0)
          {
            *(void *)&long long v74 = "usd/crateFile.cpp";
            *((void *)&v74 + 1) = "_ReadPossiblyCompressedArray";
            *(void *)&long long v75 = 2307;
            *((void *)&v75 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::va"
                                    "lue || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_C"
                                    "rateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Ve"
                                    "rsion, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_R"
                                    "eader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = float]";
            LOBYTE(v76) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v74, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed ints", v69);
            goto LABEL_80;
          }
          sub_2167816FC(&v74, v69);
          LODWORD(v65) = 0;
          __sFILE __p = &v65;
          sub_2168F84A8((unint64_t *)a4, v69, (_DWORD **)&__p);
          sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v35, v36);
          unint64_t v37 = *(float **)(a4 + 32);
          sub_216C9C7B4((uint64_t)&v61, (_DWORD *)v74, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((uint64_t)(*((void *)&v74 + 1) - v74) >> 2));
          uint64_t v39 = (int *)*((void *)&v74 + 1);
          unint64_t v38 = (void *)v74;
          if ((void)v74 != *((void *)&v74 + 1))
          {
            int v40 = (int *)v74;
            do
            {
              int v41 = *v40++;
              *v37++ = (float)v41;
            }
            while (v40 != v39);
          }
          if (!v38) {
            goto LABEL_80;
          }
          *((void *)&v74 + 1) = v38;
LABEL_79:
          operator delete(v38);
          goto LABEL_80;
        }
        unsigned int v67 = 0;
        if (!sub_216C804FC(&v62, (uint64_t)&v67, 4uLL)) {
          goto LABEL_80;
        }
        uint64_t v42 = (*(uint64_t (**)(char *))(*(void *)v62 + 16))(v62);
        uint64_t v43 = v42 - (void)v64;
        unsigned int v44 = v67;
        unint64_t v45 = 4 * v67;
        if (((unint64_t)v64 & 0x8000000000000000) == 0
          && (v43 & 0x8000000000000000) == 0
          && v43 >= v67
          && v45 <= v43)
        {
          sub_21678247C(&__p, v67);
          sub_216C804FC(&v62, (uint64_t)__p, v71 - (unsigned char *)__p);
          unsigned int v46 = v63;
          if (v63) {
            atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          char v47 = sub_216C9B79C((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v69);
          if (v46) {
            sub_216784EC4(v46);
          }
          if ((v47 & 1) == 0)
          {
            *(void *)&long long v74 = "usd/crateFile.cpp";
            *((void *)&v74 + 1) = "_ReadPossiblyCompressedArray";
            *(void *)&long long v75 = 2333;
            *((void *)&v75 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::va"
                                    "lue || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_C"
                                    "rateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Ve"
                                    "rsion, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_R"
                                    "eader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = float]";
            LOBYTE(v76) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v74, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed uints", v69);
            goto LABEL_77;
          }
          sub_2167813E0(&v65, v69);
          sub_216C8F684((uint64_t)&v61, (_DWORD *)v65, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((uint64_t)((uint64_t)v66 - v65) >> 2));
          int v77 = 0;
          *(void *)&long long v74 = &v77;
          sub_2168F84A8((unint64_t *)a4, v69, (_DWORD **)&v74);
          sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v48, v49);
          unsigned int v50 = (_DWORD *)v65;
          unint64_t v51 = v66;
          if ((_DWORD *)v65 == v66)
          {
LABEL_70:
            if (!v50)
            {
LABEL_77:
              unint64_t v38 = __p;
              if (!__p) {
                goto LABEL_80;
              }
              int64_t v71 = __p;
              goto LABEL_79;
            }
          }
          else
          {
            uint64_t v52 = 0;
            uint64_t v53 = *(void *)(a4 + 32);
            unsigned int v54 = v67;
            long long v55 = __p;
            while (1)
            {
              uint64_t v56 = v50[v52];
              if (v56 >= v54) {
                break;
              }
              *(_DWORD *)(v53 + v52 * 4) = v55[v56];
              if (&v50[++v52] == v51) {
                goto LABEL_70;
              }
            }
            *(void *)&long long v74 = "usd/crateFile.cpp";
            *((void *)&v74 + 1) = "_ReadPossiblyCompressedArray";
            *(void *)&long long v75 = 2343;
            *((void *)&v75 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::va"
                                    "lue || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_C"
                                    "rateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Ve"
                                    "rsion, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_R"
                                    "eader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = float]";
            LOBYTE(v76) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v74, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to index lut with index %u, out of bounds access", v56);
            unsigned int v50 = (_DWORD *)v65;
            if (!v65) {
              goto LABEL_77;
            }
          }
          long long v66 = v50;
          operator delete(v50);
          goto LABEL_77;
        }
        *(void *)&long long v74 = "usd/crateFile.cpp";
        *((void *)&v74 + 1) = "_ReadPossiblyCompressedArray";
        *(void *)&long long v75 = 2325;
        *((void *)&v75 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value "
                                "|| std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                "::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) "
                                "[Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInterna"
                                "l__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = float]";
        LOBYTE(v76) = 0;
        uint64_t v60 = (*(uint64_t (**)(char *))(*(void *)v62 + 16))(v62);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v74, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %u elements for lut (%llu bytes), remaining file size is %lld of %lld", v44, v45, v43, v60);
      }
LABEL_80:
      if (v63) {
        sub_216784EC4(v63);
      }
      return;
    }
    __sFILE __p = v7;
    int64_t v71 = v62;
    size_t v72 = v63;
    if (v63)
    {
      atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v14 = v64;
    }
    uint64_t v73 = v14;
    unint64_t v65 = 0;
    if (v11 > 0x6FF)
    {
      if (!sub_216C804FC(&v71, (uint64_t)&v65, 8uLL)) {
        goto LABEL_31;
      }
    }
    else
    {
      LODWORD(v74) = 0;
      if (!sub_216C804FC(&v71, (uint64_t)&v74, 4uLL)) {
        goto LABEL_31;
      }
      unint64_t v65 = v74;
    }
    uint64_t v19 = (*(uint64_t (**)(unsigned char *))(*(void *)v71 + 16))(v71);
    unint64_t v20 = v19 - (void)v73;
    unint64_t v21 = v65;
    unint64_t v22 = 4 * v65;
    if (((unint64_t)v73 & 0x8000000000000000) != 0
      || (v20 & 0x8000000000000000) != 0
      || (v65 <= v20 ? (BOOL v23 = v22 > v20) : (BOOL v23 = 1), v23))
    {
      *(void *)&long long v74 = "usd/crateFile.cpp";
      *((void *)&v74 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v75 = 2053;
      *((void *)&v75 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = float]";
      LOBYTE(v76) = 0;
      uint64_t v58 = (*(uint64_t (**)(unsigned char *))(*(void *)v71 + 16))(v71);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v74, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v21, v22, v20, v58);
    }
    else
    {
      LODWORD(v69) = 0;
      *(void *)&long long v74 = &v69;
      sub_2168F84A8((unint64_t *)a4, v65, (_DWORD **)&v74);
      sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v24, v25);
      sub_216C804FC(&v71, *(void *)(a4 + 32), 4 * *(void *)a4);
    }
LABEL_31:
    if (v72) {
      sub_216784EC4(v72);
    }
    goto LABEL_80;
  }
  uint64_t v76 = 0;
  long long v74 = 0u;
  long long v75 = 0u;
  if (&v74 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v17 = v75;
    *(_OWORD *)a4 = v74;
    *(_OWORD *)(a4 + 16) = v17;
    long long v74 = 0u;
    long long v75 = 0u;
    *(void *)(a4 + 32) = v76;
    uint64_t v76 = 0;
  }
  sub_2168F83DC((uint64_t)&v74);
}

void sub_216CA7E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a16) {
    sub_216784EC4(a16);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CA7EC8(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C7607F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CA7F14(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7607F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CA7F44(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_216CA7FA4(*(uint64_t **)(a1 + 16), *(void **)(a1 + 8), (double *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_216CA7F58(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C760858)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CA7F98()
{
  return &unk_26C760858;
}

unint64_t sub_216CA7FA4(uint64_t *a1, void *a2, double *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v4 = this;
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)v4 + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      double v10 = COERCE_DOUBLE((*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                                 + 168))(v4));
    else {
      double v10 = *(double *)v4;
    }
    return sub_216CA8110((uint64_t)a1, a2, a3, *(uint64_t *)&v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    v21[0] = a2;
    v21[1] = a3;
    double v12 = *(double *)v4;
    if (*(double *)v4 >= -3.40282347e38 && ((float v13 = v12, v12 <= 3.40282347e38) ? (v14 = v12 == v13) : (v14 = 0), v14))
    {
      return LODWORD(v13) | 0x4009000000000000;
    }
    else
    {
      uint64_t v15 = *a1;
      if (!*a1)
      {
        long long v16 = operator new(0x28uLL);
        *long long v16 = 0u;
        v16[1] = 0u;
        *((_DWORD *)v16 + 8) = 1065353216;
        sub_2168CAEA8(a1, (uint64_t)v16);
        uint64_t v15 = *a1;
      }
      uint64_t v20 = 0;
      long long v17 = sub_216CA8B0C(v15, (double *)v4, (double *)v4, (double *)&v20);
      unint64_t v18 = v17;
      if (v19)
      {
        *((void *)v17 + 3) = *(void *)a3 & 0xFFFFFFFFFFFFLL | 0x9000000000000;
        sub_216C80458((uint64_t)v21, (char *)v4);
      }
      return *((void *)v18 + 3);
    }
  }
}

unint64_t sub_216CA8110(uint64_t a1, void *a2, double *a3, uint64_t a4)
{
  v76[0] = a2;
  v76[1] = a3;
  unint64_t result = 0x8009000000000000;
  unint64_t v75 = 0x8009000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    double v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      double v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7B7E0(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    float v13 = sub_216CA87E0(v9, (unint64_t *)a4, a4, &v75);
    if (v14)
    {
      uint64_t v15 = a2[791];
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        unsigned int v16 = *(unsigned __int8 *)(v15 + 250) << 16;
        __int16 v17 = *(_WORD *)(v15 + 248);
        *(void *)&long long v82 = a2;
        *((void *)&v82 + 1) = a3;
        int v18 = v17 << 16;
        int v19 = v17 & 0xFF00;
        unsigned int v20 = v19 | HIWORD(v16) & 0xFF00FFFF | v18;
        if (v20 >= 0x600 && (unint64_t v21 = *(void *)a4, *(void *)a4 > 0xFuLL))
        {
          uint64_t v24 = *(double **)(a4 + 32);
          float v25 = &v24[v21];
          uint64_t v26 = 8 * v21;
          unint64_t v27 = v24;
          while (1)
          {
            double v28 = *v27;
            if (*v27 < -2147483650.0 || v28 > 2147483650.0 || v28 != (double)(int)v28) {
              break;
            }
            ++v27;
            v26 -= 8;
            if (!v26)
            {
              double v29 = *a3;
              if (v20 > 0x6FF)
              {
                unint64_t v79 = *(void **)a4;
                sub_216C80458((uint64_t)&v82, (char *)&v79);
              }
              else
              {
                LODWORD(v79) = *(void *)a4;
                sub_216C984FC((uint64_t)&v82, (char *)&v79);
              }
              sub_2167816FC(&v79, *(void *)a4);
              if (*(void *)a4)
              {
                uint64_t v58 = *(double **)(a4 + 32);
                uint64_t v59 = v79;
                uint64_t v60 = 8 * *(void *)a4;
                do
                {
                  double v61 = *v58++;
                  *v59++ = (int)v61;
                  v60 -= 8;
                }
                while (v60);
              }
              LOBYTE(__p[0]) = 105;
              sub_216CA3630((uint64_t)&v82, (char *)__p);
              uint64_t v62 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v79;
              uint64_t v63 = ((char *)v80 - (unsigned char *)v79) >> 2;
              *(_OWORD *)__sFILE __p = v82;
              size_t CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v63);
              unint64_t v65 = (char *)operator new[](CompressedBufferSize);
              int64_t v67 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(v62, (const int *)v63, v65, v66);
              *(void *)&long long v83 = v67;
              sub_216C80458((uint64_t)__p, (char *)&v83);
              sub_216C6D370((uint64_t)__p, v65, v67);
              unint64_t v23 = *(void *)&v29 & 0xFFFFFFFFFFFFLL | 0xA009000000000000;
              operator delete[](v65);
              goto LABEL_82;
            }
          }
          int v74 = v18;
          BOOL v30 = 0;
          unint64_t v79 = 0;
          int v80 = 0;
          unint64_t v31 = v21 >> 2;
          uint64_t v81 = 0;
          if (v31 >= 0x400) {
            uint64_t v32 = 1024;
          }
          else {
            uint64_t v32 = v31;
          }
          __p[0] = 0;
          __p[1] = 0;
          unint64_t v78 = 0;
          do
          {
            double v33 = *v24;
            if (v79 != v30)
            {
              char v34 = (double *)v79;
              while (*v34 != v33)
              {
                if (++v34 == v30) {
                  goto LABEL_33;
                }
              }
              BOOL v30 = v34;
            }
LABEL_33:
            unint64_t v35 = (char *)v30 - (unsigned char *)v79;
            unint64_t v36 = v35 >> 3;
            unint64_t v37 = (char *)__p[1];
            if (__p[1] >= v78)
            {
              uint64_t v39 = (char *)__p[0];
              int64_t v40 = ((char *)__p[1] - (char *)__p[0]) >> 2;
              unint64_t v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 62) {
                sub_21677CB10();
              }
              uint64_t v42 = v78 - (char *)__p[0];
              if ((v78 - (char *)__p[0]) >> 1 > v41) {
                unint64_t v41 = v42 >> 1;
              }
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v43 = v41;
              }
              if (v43)
              {
                unsigned int v44 = (char *)sub_21677EA28((uint64_t)&v78, v43);
                uint64_t v39 = (char *)__p[0];
                unint64_t v37 = (char *)__p[1];
              }
              else
              {
                unsigned int v44 = 0;
              }
              unint64_t v45 = &v44[4 * v40];
              *(_DWORD *)unint64_t v45 = v36;
              unint64_t v38 = v45 + 4;
              while (v37 != v39)
              {
                int v46 = *((_DWORD *)v37 - 1);
                v37 -= 4;
                *((_DWORD *)v45 - 1) = v46;
                v45 -= 4;
              }
              __p[0] = v45;
              __p[1] = v38;
              unint64_t v78 = &v44[4 * v43];
              if (v39) {
                operator delete(v39);
              }
            }
            else
            {
              *(_DWORD *)__p[1] = v36;
              unint64_t v38 = v37 + 4;
            }
            __p[1] = v38;
            uint64_t v47 = (v35 >> 3);
            BOOL v30 = v80;
            if (v47 == ((char *)v80 - (unsigned char *)v79) >> 3)
            {
              if (v47 == v32)
              {
                int v80 = (double *)v79;
                __p[1] = __p[0];
                goto LABEL_69;
              }
              if (v80 >= v81)
              {
                unint64_t v48 = ((char *)v81 - (unsigned char *)v79) >> 2;
                if (v48 <= v47 + 1) {
                  unint64_t v48 = v47 + 1;
                }
                if ((unint64_t)((char *)v81 - (unsigned char *)v79) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v49 = v48;
                }
                unint64_t v51 = (char *)sub_21677CB28((uint64_t)&v81, v49);
                uint64_t v52 = (double *)v79;
                uint64_t v53 = v80;
                unsigned int v54 = (double *)&v51[8 * v47];
                double *v54 = v33;
                BOOL v30 = v54 + 1;
                while (v53 != v52)
                {
                  uint64_t v55 = *((void *)v53-- - 1);
                  *((void *)v54-- - 1) = v55;
                }
                unint64_t v79 = v54;
                int v80 = v30;
                uint64_t v81 = (double *)&v51[8 * v50];
                if (v52) {
                  operator delete(v52);
                }
              }
              else
              {
                *int v80 = v33;
                ++v30;
              }
              int v80 = v30;
            }
            ++v24;
          }
          while (v24 != v25);
          if (v79 != v30)
          {
            uint64_t v56 = **((void **)&v82 + 1);
            if (v20 > 0x6FF)
            {
              *(void *)&long long v83 = *(void *)a4;
              sub_216C80458((uint64_t)&v82, (char *)&v83);
            }
            else
            {
              LODWORD(v83) = *(void *)a4;
              sub_216C984FC((uint64_t)&v82, (char *)&v83);
            }
            LOBYTE(v83) = 116;
            sub_216CA3630((uint64_t)&v82, (char *)&v83);
            LODWORD(v83) = (unint64_t)((char *)v80 - (unsigned char *)v79) >> 3;
            sub_216C984FC((uint64_t)&v82, (char *)&v83);
            sub_216C9E7BC((uint64_t)&v82, (char *)v79, ((char *)v80 - (unsigned char *)v79) >> 3);
            char v68 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__p[0];
            int64_t v69 = ((char *)__p[1] - (char *)__p[0]) >> 2;
            long long v83 = v82;
            size_t v70 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v69);
            int64_t v71 = (char *)operator new[](v70);
            int64_t v73 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(v68, (const unsigned int *)v69, v71, v72);
            *(void *)int64_t __src = v73;
            sub_216C80458((uint64_t)&v83, __src);
            sub_216C6D370((uint64_t)&v83, v71, v73);
            unint64_t v23 = v56 & 0xFFFFFFFFFFFFLL | 0xA009000000000000;
            operator delete[](v71);
            goto LABEL_80;
          }
LABEL_69:
          long long v83 = v82;
          uint64_t v57 = sub_216C98168((uint64_t)&v83, 8);
          if ((v74 | v19) > 0x6FF)
          {
            *(void *)int64_t __src = *(void *)a4;
            sub_216C80458((uint64_t)&v83, __src);
          }
          else
          {
            *(_DWORD *)int64_t __src = *(void *)a4;
            sub_216C984FC((uint64_t)&v83, __src);
          }
          sub_216C9E7BC((uint64_t)&v83, *(char **)(a4 + 32), *(void *)a4);
          unint64_t v23 = v57 & 0xFFFFFFFFFFFFLL | 0x8009000000000000;
LABEL_80:
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
LABEL_82:
          if (v79)
          {
            int v80 = (double *)v79;
            operator delete(v79);
          }
        }
        else
        {
          unint64_t v79 = a2;
          int v80 = a3;
          uint64_t v22 = sub_216C98168((uint64_t)&v79, 8);
          if ((v18 | v19) > 0x6FF)
          {
            __p[0] = *(void **)a4;
            sub_216C80458((uint64_t)&v79, (char *)__p);
          }
          else
          {
            LODWORD(__p[0]) = *(void *)a4;
            sub_216C984FC((uint64_t)&v79, (char *)__p);
          }
          unint64_t v23 = v22 & 0xFFFFFFFFFFFFLL | 0x8009000000000000;
          sub_216C9E7BC((uint64_t)&v79, *(char **)(a4 + 32), *(void *)a4);
        }
        v13[7] = v23;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v76, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v79) = 1;
        sub_216C984FC((uint64_t)v76, (char *)&v79);
        LODWORD(v79) = *(void *)a4;
        sub_216C984FC((uint64_t)v76, (char *)&v79);
        sub_216C9E7BC((uint64_t)v76, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void sub_216CA8770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216CA87E0(uint64_t a1, unint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = *a2;
  if (*a2)
  {
    double v10 = (double *)a2[4];
    unint64_t v11 = *a2;
    do
    {
      double v12 = *v10++;
      double v13 = v12;
      if (v12 == 0.0) {
        double v13 = 0.0;
      }
      unint64_t v9 = *(void *)&v13 + ((v9 + *(void *)&v13 + (v9 + *(void *)&v13) * (v9 + *(void *)&v13)) >> 1);
      --v11;
    }
    while (v11);
    v9 *= 0x9E3779B97F4A7C55;
  }
  unint64_t v14 = bswap64(v9);
  unint64_t v15 = *(void *)(a1 + 8);
  if (v15)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    unint64_t v17 = v16.u32[0];
    if (v16.u32[0] > 1uLL)
    {
      unint64_t v4 = v14;
      if (v14 >= v15) {
        unint64_t v4 = v14 % v15;
      }
    }
    else
    {
      unint64_t v4 = (v15 - 1) & v14;
    }
    int v18 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v18)
    {
      for (int i = *v18; i; int i = (void *)*i)
      {
        unint64_t v20 = i[1];
        if (v20 == v14)
        {
          if (sub_2168FA278(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v17 > 1)
          {
            if (v20 >= v15) {
              v20 %= v15;
            }
          }
          else
          {
            v20 &= v15 - 1;
          }
          if (v20 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t v21 = (void *)(a1 + 16);
  uint64_t v22 = operator new(0x40uLL);
  int i = v22;
  *(void *)uint64_t v22 = 0;
  *((void *)v22 + 1) = v14;
  long long v23 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v22 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v22 + 2) = v23;
  uint64_t v24 = *(void *)(a3 + 32);
  *((void *)v22 + 6) = v24;
  if (v24)
  {
    float v25 = (atomic_ullong *)(v24 - 16);
    if (*((void *)v22 + 5)) {
      float v25 = (atomic_ullong *)*((void *)v22 + 5);
    }
    atomic_fetch_add_explicit(v25, 1uLL, memory_order_relaxed);
  }
  *((void *)v22 + 7) = *a4;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (!v15 || (float)(v27 * (float)v15) < v26)
  {
    BOOL v28 = 1;
    if (v15 >= 3) {
      BOOL v28 = (v15 & (v15 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v15);
    unint64_t v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30) {
      size_t v31 = v30;
    }
    else {
      size_t v31 = v29;
    }
    sub_21678A04C(a1, v31);
    unint64_t v15 = *(void *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        unint64_t v4 = v14 % v15;
      }
      else {
        unint64_t v4 = v14;
      }
    }
    else
    {
      unint64_t v4 = (v15 - 1) & v14;
    }
  }
  uint64_t v32 = *(void *)a1;
  double v33 = *(void **)(*(void *)a1 + 8 * v4);
  if (v33)
  {
    *int i = *v33;
LABEL_48:
    *double v33 = i;
    goto LABEL_49;
  }
  *int i = *v21;
  *unint64_t v21 = i;
  *(void *)(v32 + 8 * v4) = v21;
  if (*i)
  {
    unint64_t v34 = *(void *)(*i + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v34 >= v15) {
        v34 %= v15;
      }
    }
    else
    {
      v34 &= v15 - 1;
    }
    double v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_48;
  }
LABEL_49:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CA8A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CA8AB4(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CA8AB4(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

double *sub_216CA8B0C(uint64_t a1, double *a2, double *a3, double *a4)
{
  double v8 = 0.0;
  if (*a2 != 0.0) {
    double v8 = *a2;
  }
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * *(void *)&v8);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    double v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      double v13 = (double *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v9)
          {
            if (v13[2] == *a2) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          double v13 = *(double **)v13;
        }
        while (v13);
      }
    }
  }
  double v13 = (double *)operator new(0x20uLL);
  double *v13 = 0.0;
  *((void *)v13 + 1) = v9;
  __n128 v13[2] = *a3;
  void v13[3] = *a4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_21678A04C(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(double ***)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)double v13 = *v22;
LABEL_40:
    void *v22 = v13;
    goto LABEL_41;
  }
  double *v13 = *(double *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*(void *)v13)
  {
    unint64_t v23 = *(void *)(*(void *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    uint64_t v22 = (double **)(*(void *)a1 + 8 * v23);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_216CA8D50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216CA8D6C(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C760878;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CA8DB8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C760878;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_216CA8DE8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v11[0] = v6;
  v11[1] = v7;
  __n128 v11[2] = 0;
  void v11[3] = v8;
  v11[4] = v9;
  return sub_216CA8E80(v5, (uint64_t)v11, v3, v4);
}

uint64_t sub_216CA8E34(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7608D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CA8E74()
{
  return &unk_26C7608D8;
}

double sub_216CA8E80(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v10 = 0;
    memset(v9, 0, sizeof(v9));
    long long v5 = *(_OWORD *)(a2 + 16);
    v7[0] = *(_OWORD *)a2;
    v7[1] = v5;
    uint64_t v8 = *(void *)(a2 + 32);
    sub_216CA8F48(a1, v7, a3, (uint64_t)v9);
    sub_2168F9E94(a4, v9);
    sub_2168F83DC((uint64_t)v9);
  }
  else
  {
    v9[0].n128_u64[0] = 0;
    if ((a3 & 0x4000000000000000) != 0) {
      v9[0].n128_f64[0] = *(float *)&a3;
    }
    else {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v9, (char *)8, *(void *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    return sub_216B8D618(a4, v9[0].n128_f64);
  }
  return result;
}

void sub_216CA8F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CA8F48(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) == 0)
  {
    memset(&v56._read, 0, 40);
    if (&v56._read != (int (__cdecl **)(void *, char *, int))a4)
    {
      sub_2168F83DC(a4);
      long long v16 = *(_OWORD *)&v56._write;
      *(_OWORD *)a4 = *(_OWORD *)&v56._read;
      *(_OWORD *)(a4 + 16) = v16;
      memset(&v56._read, 0, 32);
      *(void *)(a4 + 32) = *(void *)&v56._ub._size;
      *(void *)&v56._ub._int size = 0;
    }
    sub_2168F83DC((uint64_t)&v56._read);
    return;
  }
  a2[2] = a3 & 0xFFFFFFFFFFFFLL;
  int v7 = *(unsigned __int8 *)(*a2 + 6369);
  int v8 = *(unsigned __int8 *)(*a2 + 6370);
  int v9 = *(unsigned __int8 *)(*a2 + 6368) << 16;
  unsigned int v10 = v9 | (v7 << 8);
  if (v10 > 0x4FF || (LODWORD(v56._read) = 0, sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v56._read)))
  {
    long long v11 = *((_OWORD *)a2 + 1);
    long long v53 = *(_OWORD *)a2;
    long long v54 = v11;
    uint64_t v55 = (pxrInternal__aapl__pxrReserved__ *)a2[4];
    unsigned int v12 = v9 | v8 | (v7 << 8);
    if (v12 < 0x600 || (a3 & 0x2000000000000000) == 0)
    {
      v56._unint64_t p = 0;
      if (v10 > 0x6FF)
      {
        ssize_t v14 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, &v56, (char *)8, v54 + *((void *)&v53 + 1));
        if (v14 == -1) {
          return;
        }
        unint64_t p = (unint64_t)v56._p;
      }
      else
      {
        LODWORD(v56._read) = 0;
        ssize_t v14 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)&v56._read, (char *)4, v54 + *((void *)&v53 + 1));
        if (v14 == -1) {
          return;
        }
        unint64_t p = LODWORD(v56._read);
        v56._unint64_t p = (unsigned __int8 *)LODWORD(v56._read);
      }
      ssize_t v20 = v14 + v54;
      unint64_t v21 = *((void *)&v54 + 1) - (v14 + v54);
      if (v14 + (void)v54 < 0 || (v21 & 0x8000000000000000) != 0 || p > v21 || 8 * p > v21)
      {
        v56._read = (int (__cdecl *)(void *, char *, int))"usd/crateFile.cpp";
        v56._seeuint64_t k = (fpos_t (__cdecl *)(void *, fpos_t, int))"_ReadUncompressedArray";
        v56._write = (int (__cdecl *)(void *, const char *, int))2053;
        v56._ub._unsigned int base = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>::type"
                        " pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArr"
                        "ay<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                        "e::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>, T = double]";
        LOBYTE(v56._ub._size) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v56._read, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld");
        return;
      }
      v56._bf._unsigned int base = 0;
      v56._read = (int (__cdecl *)(void *, char *, int))&v56._bf;
      sub_2168F9B94((unint64_t *)a4, p, (uint64_t **)&v56._read);
      sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v22, v23);
      uint64_t v24 = *(__sFILE **)(a4 + 32);
      float v25 = (char *)(8 * *(void *)a4);
      off_t v26 = v20 + *((void *)&v53 + 1);
      float v27 = (FILE *)v55;
      goto LABEL_33;
    }
    v56._unint64_t close = 0;
    if (v12 > 0x6FF)
    {
      ssize_t v28 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)&v56._close, (char *)8, v54 + *((void *)&v53 + 1));
      if (v28 == -1) {
        return;
      }
      ssize_t v18 = v54 + v28;
      *(void *)&long long v54 = v54 + v28;
      unint64_t close = (unint64_t)v56._close;
    }
    else
    {
      LODWORD(v56._read) = 0;
      ssize_t v17 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)&v56._read, (char *)4, v54 + *((void *)&v53 + 1));
      if (v17 == -1) {
        return;
      }
      ssize_t v18 = v54 + v17;
      *(void *)&long long v54 = v54 + v17;
      unint64_t close = LODWORD(v56._read);
      v56._unint64_t close = (int (__cdecl *)(void *))LODWORD(v56._read);
    }
    if (close <= 0xF)
    {
      unint64_t v29 = *((void *)&v54 + 1) - v18;
      if (v18 < 0 || (v29 & 0x8000000000000000) != 0 || close > v29 || 8 * close > v29)
      {
        v56._read = (int (__cdecl *)(void *, char *, int))"usd/crateFile.cpp";
        v56._seeuint64_t k = (fpos_t (__cdecl *)(void *, fpos_t, int))"_ReadPossiblyCompressedArray";
        v56._write = (int (__cdecl *)(void *, const char *, int))2287;
        v56._ub._unsigned int base = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || std::"
                        "is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyC"
                        "ompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = pxrInternal__a"
                        "apl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Crat"
                        "eFile::_PreadStream>, T = double]";
        LOBYTE(v56._ub._size) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v56._read, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
        return;
      }
      v56._bf._unsigned int base = 0;
      v56._read = (int (__cdecl *)(void *, char *, int))&v56._bf;
      sub_2168F9B94((unint64_t *)a4, close, (uint64_t **)&v56._read);
      sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v30, v31);
      uint64_t v24 = *(__sFILE **)(a4 + 32);
      float v25 = (char *)(8 * (uint64_t)v56._close);
      float v27 = (FILE *)v55;
      off_t v26 = v54 + *((void *)&v53 + 1);
LABEL_33:
      pxrInternal__aapl__pxrReserved__::ArchPRead(v27, v24, v25, v26);
      return;
    }
    HIBYTE(v56._cookie) = 0;
    ssize_t v32 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)((char *)&v56._cookie + 7), (char *)1, v18 + *((void *)&v53 + 1));
    if (v32 != -1)
    {
      ssize_t v33 = v54 + v32;
      *(void *)&long long v54 = v54 + v32;
      if (HIBYTE(v56._cookie) != 116)
      {
        if (HIBYTE(v56._cookie) != 105)
        {
          v56._read = (int (__cdecl *)(void *, char *, int))"usd/crateFile.cpp";
          v56._seeuint64_t k = (fpos_t (__cdecl *)(void *, fpos_t, int))"_ReadPossiblyCompressedArray";
          v56._write = (int (__cdecl *)(void *, const char *, int))2351;
          v56._ub._unsigned int base = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || std"
                          "::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossi"
                          "blyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = pxrInter"
                          "nal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::"
                          "Usd_CrateFile::_PreadStream>, T = double]";
          LOBYTE(v56._ub._size) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v56._read, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt data stream detected reading compressed array in <%s>");
          return;
        }
        if ((sub_216C9B79C((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v56._close) & 1) == 0)
        {
          v56._read = (int (__cdecl *)(void *, char *, int))"usd/crateFile.cpp";
          v56._seeuint64_t k = (fpos_t (__cdecl *)(void *, fpos_t, int))"_ReadPossiblyCompressedArray";
          v56._write = (int (__cdecl *)(void *, const char *, int))2307;
          v56._ub._unsigned int base = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || std"
                          "::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossi"
                          "blyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = pxrInter"
                          "nal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::"
                          "Usd_CrateFile::_PreadStream>, T = double]";
          LOBYTE(v56._ub._size) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v56._read, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed ints");
          return;
        }
        sub_2167816FC(&v56._read, (unint64_t)v56._close);
        v56._unint64_t p = 0;
        v56._bf._unsigned int base = (unsigned __int8 *)&v56;
        sub_2168F9B94((unint64_t *)a4, (unint64_t)v56._close, (uint64_t **)&v56._bf);
        sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v34, v35);
        unint64_t v36 = *(double **)(a4 + 32);
        sub_216C9B7D4((uint64_t)&v53, (_DWORD *)v56._read, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)(((char *)v56._seek - (char *)v56._read) >> 2));
        read = (unsigned __int8 *)v56._read;
        seeuint64_t k = v56._seek;
        if (v56._read != (int (__cdecl *)(void *, char *, int))v56._seek)
        {
          uint64_t v39 = v56._read;
          do
          {
            int v40 = *(_DWORD *)v39;
            uint64_t v39 = (int (__cdecl *)(void *, char *, int))((char *)v39 + 4);
            *v36++ = (double)v40;
          }
          while ((char *)v39 != (char *)seek);
        }
        if (read)
        {
          v56._seeuint64_t k = (fpos_t (__cdecl *)(void *, fpos_t, int))read;
LABEL_63:
          operator delete(read);
          return;
        }
        return;
      }
      LODWORD(v56._cookie) = 0;
      ssize_t v41 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)&v56._cookie, (char *)4, v33 + *((void *)&v53 + 1));
      if (v41 == -1) {
        return;
      }
      *(void *)&long long v54 = v54 + v41;
      unint64_t v42 = *((void *)&v54 + 1) - v54;
      if ((v54 & 0x8000000000000000) != 0
        || (v42 & 0x8000000000000000) != 0
        || (uint64_t)v42 < LODWORD(v56._cookie)
        || 8 * (unint64_t)LODWORD(v56._cookie) > v42)
      {
        v56._read = (int (__cdecl *)(void *, char *, int))"usd/crateFile.cpp";
        v56._seeuint64_t k = (fpos_t (__cdecl *)(void *, fpos_t, int))"_ReadPossiblyCompressedArray";
        v56._write = (int (__cdecl *)(void *, const char *, int))2325;
        v56._ub._unsigned int base = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || std::"
                        "is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyC"
                        "ompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = pxrInternal__a"
                        "apl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Crat"
                        "eFile::_PreadStream>, T = double]";
        LOBYTE(v56._ub._size) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v56._read, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %u elements for lut (%llu bytes), remaining file size is %lld of %lld");
        return;
      }
      sub_21678275C(&v56._bf._base, LODWORD(v56._cookie));
      ssize_t v43 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)v56._bf._base, (char *)(*(void *)&v56._bf._size - (unint64_t)v56._bf._base), v54 + *((void *)&v53 + 1));
      if (v43 != -1) {
        *(void *)&long long v54 = v54 + v43;
      }
      if (sub_216C9B79C((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v56._close))
      {
        sub_2167813E0(&v56, (unint64_t)v56._close);
        sub_216C8B53C((uint64_t)&v53, v56._p, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((uint64_t)(*(void *)&v56._r- (unint64_t)v56._p) >> 2));
        v56._extra = 0;
        v56._read = (int (__cdecl *)(void *, char *, int))&v56._extra;
        sub_2168F9B94((unint64_t *)a4, (unint64_t)v56._close, (uint64_t **)&v56._read);
        sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v44, v45);
        int v46 = v56._p;
        uint64_t v47 = *(unsigned __int8 **)&v56._r;
        if (v56._p == *(unsigned __int8 **)&v56._r)
        {
LABEL_56:
          if (!v46) {
            goto LABEL_61;
          }
        }
        else
        {
          unint64_t v48 = *(void **)(a4 + 32);
          unsigned int cookie = v56._cookie;
          uint64_t v50 = v56._p;
          unsigned int base = v56._bf._base;
          while (1)
          {
            uint64_t v52 = *(unsigned int *)v50;
            if (v52 >= cookie) {
              break;
            }
            *v48++ = *(void *)&base[8 * v52];
            v50 += 4;
            if (v50 == v47) {
              goto LABEL_56;
            }
          }
          v56._read = (int (__cdecl *)(void *, char *, int))"usd/crateFile.cpp";
          v56._seeuint64_t k = (fpos_t (__cdecl *)(void *, fpos_t, int))"_ReadPossiblyCompressedArray";
          v56._write = (int (__cdecl *)(void *, const char *, int))2343;
          v56._ub._unsigned int base = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || std"
                          "::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossi"
                          "blyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = pxrInter"
                          "nal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::"
                          "Usd_CrateFile::_PreadStream>, T = double]";
          LOBYTE(v56._ub._size) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v56._read, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to index lut with index %u, out of bounds access", v52);
          int v46 = v56._p;
          if (!v56._p)
          {
LABEL_61:
            read = v56._bf._base;
            if (v56._bf._base)
            {
              *(void *)&v56._bf._int size = v56._bf._base;
              goto LABEL_63;
            }
            return;
          }
        }
        *(void *)&v56._r = v46;
        operator delete(v46);
        goto LABEL_61;
      }
      v56._read = (int (__cdecl *)(void *, char *, int))"usd/crateFile.cpp";
      v56._seeuint64_t k = (fpos_t (__cdecl *)(void *, fpos_t, int))"_ReadPossiblyCompressedArray";
      v56._write = (int (__cdecl *)(void *, const char *, int))2333;
      v56._ub._unsigned int base = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || std::is"
                      "_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompr"
                      "essedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = pxrInternal__aapl__p"
                      "xrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
                      "PreadStream>, T = double]";
      LOBYTE(v56._ub._size) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v56._read, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed uints", v56._close);
      goto LABEL_61;
    }
  }
}

void sub_216CA95D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CA964C(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C7608F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CA9698(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7608F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_216CA96C8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_216CA971C((void *)(a1 + 8), a2, a3);
}

uint64_t sub_216CA96D0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C760958)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CA9710()
{
  return &unk_26C760958;
}

double sub_216CA971C(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v10[0] = *a1;
  v10[1] = v8;
  long long v10[2] = v6;
  v10[3] = v7;
  int v11 = sub_216C688BC();
  return sub_216CA979C(v5, (uint64_t)v10, v3, v4);
}

double sub_216CA979C(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v14 = 0;
    memset(__dst, 0, sizeof(__dst));
    long long v6 = *(_OWORD *)(a2 + 16);
    v11[0] = *(_OWORD *)a2;
    v11[1] = v6;
    uint64_t v12 = *(void *)(a2 + 32);
    sub_216CA9884(a1, v11, a3, (uint64_t)__dst);
    sub_2168F9E94(a4, __dst);
    sub_2168F83DC((uint64_t)__dst);
  }
  else
  {
    __dst[0].n128_u64[0] = 0;
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v8 = *(_OWORD *)a2;
    long long v9 = v5;
    uint64_t v10 = *(void *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      __dst[0].n128_f64[0] = *(float *)&a3;
    }
    else
    {
      *((void *)&v8 + 1) = *(void *)(*(void *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_216C82F78((uint64_t)&v8 + 8, __dst, 8uLL);
    }
    return sub_216B8D618(a4, __dst[0].n128_f64);
  }
  return result;
}

void sub_216CA986C(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_216CA9884(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) == 0)
  {
    int64_t v67 = 0;
    long long __dst = 0u;
    long long v66 = 0u;
    if (&__dst != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v16 = v66;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v16;
      long long __dst = 0u;
      long long v66 = 0u;
      *(void *)(a4 + 32) = v67;
      int64_t v67 = 0;
    }
    sub_2168F83DC((uint64_t)&__dst);
    return;
  }
  *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
  int v7 = *(unsigned __int8 *)(*(void *)a2 + 6369);
  int v8 = *(unsigned __int8 *)(*(void *)a2 + 6370);
  int v9 = *(unsigned __int8 *)(*(void *)a2 + 6368) << 16;
  unsigned int v10 = v9 | (v7 << 8);
  if (v10 <= 0x4FF)
  {
    LODWORD(__dst) = 0;
    if (!sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)) {
      return;
    }
  }
  long long v11 = a2[1];
  long long v54 = *a2;
  long long v55 = v11;
  uint64_t v56 = *((void *)a2 + 4);
  unsigned int v12 = v9 | v8 | (v7 << 8);
  if (v12 < 0x600 || (a3 & 0x2000000000000000) == 0)
  {
    long long v14 = a2[1];
    *(_OWORD *)__sFILE __p = *a2;
    long long v63 = v14;
    uint64_t v64 = *((void *)a2 + 4);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91740, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B91740))
    {
      long long v53 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
      if (!v53) {
        pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
      }
      byte_267B91738 = *v53;
      __cxa_guard_release(&qword_267B91740);
    }
    unint64_t v68 = 0;
    if (v10 > 0x6FF)
    {
      if (!sub_216C82F78((uint64_t)&__p[1], &v68, 8uLL)) {
        return;
      }
      unint64_t v15 = v68;
    }
    else
    {
      LODWORD(__dst) = 0;
      if ((sub_216C82F78((uint64_t)&__p[1], &__dst, 4uLL) & 1) == 0) {
        return;
      }
      unint64_t v15 = __dst;
      unint64_t v68 = __dst;
    }
    unint64_t v26 = 8 * v15;
    float v27 = __p[1];
    if (!byte_267B91738 || v26 < 0x800 || ((uint64_t)__p[1] & 7) != 0)
    {
      unint64_t v30 = (unint64_t)__p[1] - *(void *)(*(void *)v63 + 24);
      unint64_t v31 = *(void *)(*(void *)v63 + 32) - v30;
      if ((v30 & 0x8000000000000000) == 0 && (v31 & 0x8000000000000000) == 0 && v15 <= v31 && v26 <= v31)
      {
        uint64_t v57 = 0;
        *(void *)&long long __dst = &v57;
        sub_2168F9B94((unint64_t *)a4, v15, (uint64_t **)&__dst);
        sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v33, v34);
        unint64_t v23 = *(void **)(a4 + 32);
        size_t v24 = 8 * *(void *)a4;
        float v25 = &__p[1];
        goto LABEL_45;
      }
      *(void *)&long long __dst = "usd/crateFile.cpp";
      *((void *)&__dst + 1) = "_ReadUncompressedArray";
      *(void *)&long long v66 = 2117;
      *((void *)&v66 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>::"
                              "type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Value"
                              "Rep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_Cra"
                              "teFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<px"
                              "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = double]";
      LOBYTE(v67) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld");
    }
    else
    {
      uint64_t v28 = sub_216C99144((uint64_t)&__p[1], (char *)__p[1], 8 * v15, v15);
      if (v28)
      {
        *(void *)&long long v66 = 0;
        *((void *)&v66 + 1) = v28;
        int64_t v67 = v27;
        long long __dst = v68;
        if (&__dst != (long long *)a4)
        {
          sub_2168F83DC(a4);
          long long v29 = v66;
          *(_OWORD *)a4 = __dst;
          *(_OWORD *)(a4 + 16) = v29;
          long long __dst = 0u;
          long long v66 = 0u;
          *(void *)(a4 + 32) = v67;
          int64_t v67 = 0;
        }
        sub_2168F83DC((uint64_t)&__dst);
      }
      else
      {
        *(void *)&long long __dst = "usd/crateFile.cpp";
        *((void *)&__dst + 1) = "_ReadUncompressedArray";
        *(void *)&long long v66 = 2109;
        *((void *)&v66 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>"
                                "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, V"
                                "alueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::U"
                                "sd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapS"
                                "tream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = double]";
        LOBYTE(v67) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v26);
        sub_2168F845C((void *)a4);
      }
    }
    return;
  }
  unint64_t v61 = 0;
  if (v12 > 0x6FF)
  {
    if (!sub_216C82F78((uint64_t)&v54 + 8, &v61, 8uLL)) {
      return;
    }
    unint64_t v17 = v61;
  }
  else
  {
    LODWORD(__dst) = 0;
    if (!sub_216C82F78((uint64_t)&v54 + 8, &__dst, 4uLL)) {
      return;
    }
    unint64_t v17 = __dst;
    unint64_t v61 = __dst;
  }
  if (v17 <= 0xF)
  {
    uint64_t v18 = *((void *)&v54 + 1) - *(void *)(*(void *)v55 + 24);
    unint64_t v19 = *(void *)(*(void *)v55 + 32) - v18;
    if ((v18 & 0x8000000000000000) == 0 && (v19 & 0x8000000000000000) == 0 && v17 <= v19 && 8 * v17 <= v19)
    {
      __p[0] = 0;
      *(void *)&long long __dst = __p;
      sub_2168F9B94((unint64_t *)a4, v17, (uint64_t **)&__dst);
      sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v21, v22);
      unint64_t v23 = *(void **)(a4 + 32);
      size_t v24 = 8 * v61;
      float v25 = (void **)&v54 + 1;
LABEL_45:
      sub_216C82F78((uint64_t)v25, v23, v24);
      return;
    }
    *(void *)&long long __dst = "usd/crateFile.cpp";
    *((void *)&__dst + 1) = "_ReadPossiblyCompressedArray";
    *(void *)&long long v66 = 2287;
    *((void *)&v66 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || s"
                            "td::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadP"
                            "ossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = px"
                            "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRese"
                            "rved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                            "e::_FileMapping *>>, T = double]";
    LOBYTE(v67) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
    return;
  }
  char v60 = 0;
  if (!sub_216C82F78((uint64_t)&v54 + 8, &v60, 1uLL)) {
    return;
  }
  if (v60 == 116)
  {
    unsigned int v59 = 0;
    if (!sub_216C82F78((uint64_t)&v54 + 8, &v59, 4uLL)) {
      return;
    }
    uint64_t v42 = *((void *)&v54 + 1) - *(void *)(*(void *)v55 + 24);
    unint64_t v43 = *(void *)(*(void *)v55 + 32) - v42;
    if (v42 < 0 || (v43 & 0x8000000000000000) != 0 || (uint64_t)v43 < v59 || 8 * (unint64_t)v59 > v43)
    {
      *(void *)&long long __dst = "usd/crateFile.cpp";
      *((void *)&__dst + 1) = "_ReadPossiblyCompressedArray";
      *(void *)&long long v66 = 2325;
      *((void *)&v66 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value ||"
                              " std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                              "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reade"
                              "r = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                              "_pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                              "::CrateFile::_FileMapping *>>, T = double]";
      LOBYTE(v67) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %u elements for lut (%llu bytes), remaining file size is %lld of %lld");
      return;
    }
    sub_21678275C(__p, v59);
    sub_216C82F78((uint64_t)&v54 + 8, __p[0], (char *)__p[1] - (char *)__p[0]);
    if ((sub_216C9B79C((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v61) & 1) == 0)
    {
      *(void *)&long long __dst = "usd/crateFile.cpp";
      *((void *)&__dst + 1) = "_ReadPossiblyCompressedArray";
      *(void *)&long long v66 = 2333;
      *((void *)&v66 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value ||"
                              " std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                              "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reade"
                              "r = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                              "_pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                              "::CrateFile::_FileMapping *>>, T = double]";
      LOBYTE(v67) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed uints", v61);
      goto LABEL_71;
    }
    sub_2167813E0(&v57, v61);
    sub_216C839A0((uint64_t)&v54, v57, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)(v58 - v57));
    unint64_t v68 = 0;
    *(void *)&long long __dst = &v68;
    sub_2168F9B94((unint64_t *)a4, v61, (uint64_t **)&__dst);
    sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v44, v45);
    int v46 = v57;
    uint64_t v47 = v58;
    if (v57 == v58)
    {
LABEL_66:
      if (!v46)
      {
LABEL_71:
        unint64_t v38 = __p[0];
        if (!__p[0]) {
          return;
        }
        __p[1] = __p[0];
        goto LABEL_73;
      }
    }
    else
    {
      unint64_t v48 = *(void **)(a4 + 32);
      unsigned int v49 = v59;
      uint64_t v50 = v57;
      unint64_t v51 = __p[0];
      while (1)
      {
        uint64_t v52 = *v50;
        if (v52 >= v49) {
          break;
        }
        *v48++ = v51[v52];
        if (++v50 == v47) {
          goto LABEL_66;
        }
      }
      *(void *)&long long __dst = "usd/crateFile.cpp";
      *((void *)&__dst + 1) = "_ReadPossiblyCompressedArray";
      *(void *)&long long v66 = 2343;
      *((void *)&v66 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value ||"
                              " std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                              "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reade"
                              "r = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                              "_pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                              "::CrateFile::_FileMapping *>>, T = double]";
      LOBYTE(v67) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to index lut with index %u, out of bounds access", v52);
      int v46 = v57;
      if (!v57) {
        goto LABEL_71;
      }
    }
    uint64_t v58 = v46;
    operator delete(v46);
    goto LABEL_71;
  }
  if (v60 != 105)
  {
    *(void *)&long long __dst = "usd/crateFile.cpp";
    *((void *)&__dst + 1) = "_ReadPossiblyCompressedArray";
    *(void *)&long long v66 = 2351;
    *((void *)&v66 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || s"
                            "td::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadP"
                            "ossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = px"
                            "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRese"
                            "rved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                            "e::_FileMapping *>>, T = double]";
    LOBYTE(v67) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt data stream detected reading compressed array in <%s>");
    return;
  }
  if ((sub_216C9B79C((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v61) & 1) == 0)
  {
    *(void *)&long long __dst = "usd/crateFile.cpp";
    *((void *)&__dst + 1) = "_ReadPossiblyCompressedArray";
    *(void *)&long long v66 = 2307;
    *((void *)&v66 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || s"
                            "td::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadP"
                            "ossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = px"
                            "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRese"
                            "rved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                            "e::_FileMapping *>>, T = double]";
    LOBYTE(v67) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed ints");
    return;
  }
  sub_2167816FC(&__dst, v61);
  uint64_t v57 = 0;
  __p[0] = &v57;
  sub_2168F9B94((unint64_t *)a4, v61, (uint64_t **)__p);
  sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v35, v36);
  unint64_t v37 = *(double **)(a4 + 32);
  sub_216C9BF88((uint64_t)&v54, (_DWORD *)__dst, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((uint64_t)(*((void *)&__dst + 1) - __dst) >> 2));
  uint64_t v39 = (int *)*((void *)&__dst + 1);
  unint64_t v38 = (void *)__dst;
  if ((void)__dst != *((void *)&__dst + 1))
  {
    int v40 = (int *)__dst;
    do
    {
      int v41 = *v40++;
      *v37++ = (double)v41;
    }
    while (v40 != v39);
  }
  if (v38)
  {
    *((void *)&__dst + 1) = v38;
LABEL_73:
    operator delete(v38);
  }
}

void sub_216CAA008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
}

__n128 sub_216CAA0B0(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C760978;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CAA0FC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C760978;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CAA12C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CAA134(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7609D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CAA174()
{
  return &unk_26C7609D8;
}

void sub_216CAA180(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  int v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    long long v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    long long v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CAA22C(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CAA208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

double sub_216CAA22C(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if ((a3 & 0x8000000000000000) == 0)
  {
    v14[0].n128_u64[0] = 0;
    long long v8 = *a2;
    long long v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
    int v9 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *((void *)a2 + 3);
    if ((a3 & 0x4000000000000000) != 0)
    {
      v14[0].n128_f64[0] = *(float *)&a3;
      if (!v5) {
        return sub_216B8D618(a4, v14[0].n128_f64);
      }
    }
    else
    {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
      sub_216C804FC((void *)&v8 + 1, (uint64_t)v14, 8uLL);
      long long v5 = v9;
      if (!v9) {
        return sub_216B8D618(a4, v14[0].n128_f64);
      }
    }
    sub_216784EC4(v5);
    return sub_216B8D618(a4, v14[0].n128_f64);
  }
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  long long v11 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
  uint64_t v12 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *((void *)a2 + 3);
  sub_216CAA378(a1, (char **)&v11, a3, (uint64_t)v14);
  if (v12) {
    sub_216784EC4(v12);
  }
  sub_2168F9E94(a4, v14);
  sub_2168F83DC((uint64_t)v14);
  return result;
}

void sub_216CAA334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CAA378(uint64_t a1, char **a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = (char *)(a3 & 0xFFFFFFFFFFFFLL);
    uint64_t v7 = *a2;
    int v8 = (*a2)[6369];
    int v9 = (*a2)[6370];
    int v10 = (*a2)[6368] << 16;
    unsigned int v11 = v10 | (v8 << 8);
    if (v11 <= 0x4FF)
    {
      LODWORD(v73) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v73, 4uLL)) {
        return;
      }
      uint64_t v7 = *a2;
    }
    uint64_t v13 = a2[1];
    uint64_t v12 = (std::__shared_weak_count *)a2[2];
    char v60 = v7;
    unint64_t v61 = v13;
    uint64_t v62 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v14 = a2[3];
    long long v63 = v14;
    unsigned int v15 = v10 | v9 | (v8 << 8);
    if (v15 >= 0x600 && (a3 & 0x2000000000000000) != 0)
    {
      unint64_t v68 = 0;
      if (v15 > 0x6FF)
      {
        if (!sub_216C804FC(&v61, (uint64_t)&v68, 8uLL)) {
          goto LABEL_80;
        }
        unint64_t v18 = v68;
      }
      else
      {
        LODWORD(v73) = 0;
        if (!sub_216C804FC(&v61, (uint64_t)&v73, 4uLL)) {
          goto LABEL_80;
        }
        unint64_t v18 = v73;
        unint64_t v68 = v73;
      }
      if (v18 <= 0xF)
      {
        uint64_t v25 = (*(uint64_t (**)(char *))(*(void *)v61 + 16))(v61);
        unint64_t v26 = v25 - (void)v63;
        float v27 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v68;
        unint64_t v28 = 8 * v68;
        if (((unint64_t)v63 & 0x8000000000000000) != 0
          || (v26 & 0x8000000000000000) != 0
          || (v68 <= v26 ? (BOOL v29 = v28 > v26) : (BOOL v29 = 1), v29))
        {
          *(void *)&long long v73 = "usd/crateFile.cpp";
          *((void *)&v73 + 1) = "_ReadPossiblyCompressedArray";
          *(void *)&long long v74 = 2287;
          *((void *)&v74 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::valu"
                                  "e || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_Crate"
                                  "File::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version,"
                                  " int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<px"
                                  "rInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = double]";
          LOBYTE(v75) = 0;
          uint64_t v58 = (*(uint64_t (**)(char *))(*(void *)v61 + 16))(v61);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v73, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld", v27, v28, v26, v58);
        }
        else
        {
          __sFILE __p = 0;
          *(void *)&long long v73 = &__p;
          sub_2168F9B94((unint64_t *)a4, v68, (uint64_t **)&v73);
          sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v30, v31);
          sub_216C804FC(&v61, *(void *)(a4 + 32), 8 * v68);
        }
        goto LABEL_80;
      }
      char v67 = 0;
      if (sub_216C804FC(&v61, (uint64_t)&v67, 1uLL))
      {
        if (v67 != 116)
        {
          if (v67 != 105)
          {
            *(void *)&long long v73 = "usd/crateFile.cpp";
            *((void *)&v73 + 1) = "_ReadPossiblyCompressedArray";
            *(void *)&long long v74 = 2351;
            *((void *)&v74 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::va"
                                    "lue || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_C"
                                    "rateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Ve"
                                    "rsion, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_R"
                                    "eader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = double]";
            LOBYTE(v75) = 0;
            uint64_t v56 = v60 + 6512;
            if (v60[6535] < 0) {
              uint64_t v56 = *(const char **)v56;
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v73, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt data stream detected reading compressed array in <%s>", v56);
            goto LABEL_80;
          }
          ssize_t v32 = v62;
          if (v62) {
            atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          char v33 = sub_216C9B79C((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v68);
          if (v32) {
            sub_216784EC4(v32);
          }
          if ((v33 & 1) == 0)
          {
            *(void *)&long long v73 = "usd/crateFile.cpp";
            *((void *)&v73 + 1) = "_ReadPossiblyCompressedArray";
            *(void *)&long long v74 = 2307;
            *((void *)&v74 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::va"
                                    "lue || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_C"
                                    "rateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Ve"
                                    "rsion, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_R"
                                    "eader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = double]";
            LOBYTE(v75) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v73, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed ints", v68);
            goto LABEL_80;
          }
          sub_2167816FC(&v73, v68);
          uint64_t v64 = 0;
          __sFILE __p = &v64;
          sub_2168F9B94((unint64_t *)a4, v68, (uint64_t **)&__p);
          sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v34, v35);
          unint64_t v36 = *(double **)(a4 + 32);
          sub_216C9C7B4((uint64_t)&v60, (_DWORD *)v73, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((uint64_t)(*((void *)&v73 + 1) - v73) >> 2));
          unint64_t v38 = (int *)*((void *)&v73 + 1);
          unint64_t v37 = (void *)v73;
          if ((void)v73 != *((void *)&v73 + 1))
          {
            uint64_t v39 = (int *)v73;
            do
            {
              int v40 = *v39++;
              *v36++ = (double)v40;
            }
            while (v39 != v38);
          }
          if (!v37) {
            goto LABEL_80;
          }
          *((void *)&v73 + 1) = v37;
LABEL_79:
          operator delete(v37);
          goto LABEL_80;
        }
        unsigned int v66 = 0;
        if (!sub_216C804FC(&v61, (uint64_t)&v66, 4uLL)) {
          goto LABEL_80;
        }
        uint64_t v41 = (*(uint64_t (**)(char *))(*(void *)v61 + 16))(v61);
        uint64_t v42 = v41 - (void)v63;
        unsigned int v43 = v66;
        unint64_t v44 = 8 * v66;
        if (((unint64_t)v63 & 0x8000000000000000) == 0
          && (v42 & 0x8000000000000000) == 0
          && v42 >= v66
          && v44 <= v42)
        {
          sub_21678275C(&__p, v66);
          sub_216C804FC(&v61, (uint64_t)__p, v70 - (unsigned char *)__p);
          unint64_t v45 = v62;
          if (v62) {
            atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          char v46 = sub_216C9B79C((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v68);
          if (v45) {
            sub_216784EC4(v45);
          }
          if ((v46 & 1) == 0)
          {
            *(void *)&long long v73 = "usd/crateFile.cpp";
            *((void *)&v73 + 1) = "_ReadPossiblyCompressedArray";
            *(void *)&long long v74 = 2333;
            *((void *)&v74 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::va"
                                    "lue || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_C"
                                    "rateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Ve"
                                    "rsion, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_R"
                                    "eader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = double]";
            LOBYTE(v75) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v73, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed uints", v68);
            goto LABEL_77;
          }
          sub_2167813E0(&v64, v68);
          sub_216C8F684((uint64_t)&v60, v64, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)(v65 - v64));
          unint64_t v76 = 0;
          *(void *)&long long v73 = &v76;
          sub_2168F9B94((unint64_t *)a4, v68, (uint64_t **)&v73);
          sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v47, v48);
          unsigned int v49 = v64;
          uint64_t v50 = v65;
          if (v64 == v65)
          {
LABEL_70:
            if (!v49)
            {
LABEL_77:
              unint64_t v37 = __p;
              if (!__p) {
                goto LABEL_80;
              }
              size_t v70 = __p;
              goto LABEL_79;
            }
          }
          else
          {
            unint64_t v51 = *(void **)(a4 + 32);
            unsigned int v52 = v66;
            long long v53 = v64;
            long long v54 = __p;
            while (1)
            {
              uint64_t v55 = *v53;
              if (v55 >= v52) {
                break;
              }
              *v51++ = v54[v55];
              if (++v53 == v50) {
                goto LABEL_70;
              }
            }
            *(void *)&long long v73 = "usd/crateFile.cpp";
            *((void *)&v73 + 1) = "_ReadPossiblyCompressedArray";
            *(void *)&long long v74 = 2343;
            *((void *)&v74 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::va"
                                    "lue || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_C"
                                    "rateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Ve"
                                    "rsion, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_R"
                                    "eader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = double]";
            LOBYTE(v75) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v73, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to index lut with index %u, out of bounds access", v55);
            unsigned int v49 = v64;
            if (!v64) {
              goto LABEL_77;
            }
          }
          unint64_t v65 = v49;
          operator delete(v49);
          goto LABEL_77;
        }
        *(void *)&long long v73 = "usd/crateFile.cpp";
        *((void *)&v73 + 1) = "_ReadPossiblyCompressedArray";
        *(void *)&long long v74 = 2325;
        *((void *)&v74 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value "
                                "|| std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                "::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) "
                                "[Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInterna"
                                "l__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = double]";
        LOBYTE(v75) = 0;
        uint64_t v59 = (*(uint64_t (**)(char *))(*(void *)v61 + 16))(v61);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v73, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %u elements for lut (%llu bytes), remaining file size is %lld of %lld", v43, v44, v42, v59);
      }
LABEL_80:
      if (v62) {
        sub_216784EC4(v62);
      }
      return;
    }
    __sFILE __p = v7;
    size_t v70 = v61;
    int64_t v71 = v62;
    if (v62)
    {
      atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v14 = v63;
    }
    size_t v72 = v14;
    unint64_t v76 = 0;
    if (v11 > 0x6FF)
    {
      if (!sub_216C804FC(&v70, (uint64_t)&v76, 8uLL)) {
        goto LABEL_31;
      }
    }
    else
    {
      LODWORD(v73) = 0;
      if (!sub_216C804FC(&v70, (uint64_t)&v73, 4uLL)) {
        goto LABEL_31;
      }
      unint64_t v76 = v73;
    }
    uint64_t v19 = (*(uint64_t (**)(unsigned char *))(*(void *)v70 + 16))(v70);
    unint64_t v20 = v19 - (void)v72;
    unint64_t v21 = v76;
    if (((unint64_t)v72 & 0x8000000000000000) != 0
      || (v20 & 0x8000000000000000) != 0
      || (v76 <= v20 ? (BOOL v22 = 8 * v76 > v20) : (BOOL v22 = 1), v22))
    {
      *(void *)&long long v73 = "usd/crateFile.cpp";
      *((void *)&v73 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v74 = 2053;
      *((void *)&v74 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = double]";
      LOBYTE(v75) = 0;
      uint64_t v57 = (*(uint64_t (**)(unsigned char *))(*(void *)v70 + 16))(v70);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v73, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v21, 8 * v21, v20, v57);
    }
    else
    {
      uint64_t v64 = 0;
      *(void *)&long long v73 = &v64;
      sub_2168F9B94((unint64_t *)a4, v76, (uint64_t **)&v73);
      sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v23, v24);
      sub_216C804FC(&v70, *(void *)(a4 + 32), 8 * *(void *)a4);
    }
LABEL_31:
    if (v71) {
      sub_216784EC4(v71);
    }
    goto LABEL_80;
  }
  uint64_t v75 = 0;
  long long v73 = 0u;
  long long v74 = 0u;
  if (&v73 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v17 = v74;
    *(_OWORD *)a4 = v73;
    *(_OWORD *)(a4 + 16) = v17;
    long long v73 = 0u;
    long long v74 = 0u;
    *(void *)(a4 + 32) = v75;
    uint64_t v75 = 0;
  }
  sub_2168F83DC((uint64_t)&v73);
}

void sub_216CAAB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a16) {
    sub_216784EC4(a16);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CAAC04(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C7609F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CAAC50(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7609F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CAAC80(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_216CAACE0(*(void *)(a1 + 16), *(char ***)(a1 + 8), (char **)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_216CAAC94(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C760A58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CAACD4()
{
  return &unk_26C760A58;
}

unint64_t sub_216CAACE0(uint64_t a1, char **a2, char **a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    }
    else {
      uint64_t v10 = *(void *)this;
    }
    return sub_216CAADA4(a1, (uint64_t)a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      uint64_t v12 = (unsigned __int8 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    }
    else {
      uint64_t v12 = *(unsigned __int8 **)this;
    }
    return pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddString(a2, v12) | 0x400A000000000000;
  }
}

unint64_t sub_216CAADA4(uint64_t a1, uint64_t a2, char **a3, uint64_t a4)
{
  v19[0] = (char **)a2;
  v19[1] = a3;
  unint64_t result = 0x800A000000000000;
  unint64_t v18 = 0x800A000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      uint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7B8A0(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    uint64_t v13 = sub_216CAAF38(v9, a4, a4, &v18);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = (char **)a2;
        v20[1] = a3;
        uint64_t v17 = sub_216C98168((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          uint64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(void *)a4;
          sub_216C984FC((uint64_t)v20, (char *)&__src);
        }
        sub_216CAB250(*(unsigned __int8 **)(a4 + 32), (unsigned __int8 *)(*(void *)(a4 + 32) + 24 * *(void *)a4), v20);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x800A000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(void *)a4;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        sub_216CAB250(*(unsigned __int8 **)(a4 + 32), (unsigned __int8 *)(*(void *)(a4 + 32) + 24 * *(void *)a4), v19);
      }
    }
    return v13[7];
  }
  return result;
}

uint64_t *sub_216CAAF38(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = *(void *)a2;
  LOBYTE(v33) = 1;
  uint64_t v32 = v9;
  sub_216960068((unint64_t)&v32, *(uint64_t **)(a2 + 32), v9);
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * v32);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (uint64_t *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_2169B1D58(i + 2, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (uint64_t *)(a1 + 16);
  unint64_t v18 = operator new(0x40uLL);
  int i = (uint64_t *)v18;
  uint64_t v33 = a1 + 16;
  *(void *)unint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    unint64_t v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      unint64_t v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  BOOL v29 = *(uint64_t **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *BOOL v29 = (uint64_t)i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = (uint64_t)i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    BOOL v29 = (uint64_t *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CAB1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CAB1F8(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CAB1F8(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2169B1EE4(__p + 2);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

char ***sub_216CAB250(unsigned __int8 *a1, unsigned __int8 *a2, char ***a3)
{
  if (a1 != a2)
  {
    long long v5 = a1;
    do
    {
      int __src = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddString(*a3, v5);
      sub_216C984FC((uint64_t)a3, (char *)&__src);
      v5 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

__n128 sub_216CAB2C4(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C760A78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CAB310(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C760A78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CAB340(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  long long v10[2] = 0;
  v10[3] = v8;
  void v10[4] = v9;
  sub_216CAB3D8(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_216CAB38C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C760AD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CAB3CC()
{
  return &unk_26C760AD8;
}

void sub_216CAB3D8(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v15 = 0;
    __n128 v13 = 0u;
    long long v14 = 0u;
    long long v6 = *(_OWORD *)(a2 + 16);
    v11[0] = *(_OWORD *)a2;
    v11[1] = v6;
    uint64_t v12 = *(void *)(a2 + 32);
    sub_216CAB4CC(a1, v11, a3, (uint64_t)&v13);
    sub_216B8DD08(a4, &v13);
    sub_2169B1EE4(&v13);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v10 = 0;
    long long v5 = *(_OWORD *)(a2 + 16);
    v7[0] = *(_OWORD *)a2;
    v7[1] = v5;
    uint64_t v8 = *(void *)(a2 + 32);
    sub_216CABB94((uint64_t *)v7, a3, (uint64_t)&v13);
    *(__n128 *)__sFILE __p = v13;
    uint64_t v10 = v14;
    sub_216B8DC6C(a4, (__n128 *)__p);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_216CAB49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_2169B1EE4((void *)(v20 - 64));
  _Unwind_Resume(a1);
}

void sub_216CAB4CC(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 2) = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF)
    {
      long long v9 = a2[1];
      long long v18 = *a2;
      long long v19 = v9;
      uint64_t v20 = (pxrInternal__aapl__pxrReserved__ *)*((void *)a2 + 4);
      unint64_t v24 = 0;
      if (v6 > 0x6FF)
      {
        ssize_t v13 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v20, (__sFILE *)&v24, (char *)8, v19 + *((void *)&v18 + 1));
        if (v13 == -1) {
          return;
        }
        ssize_t v11 = v13 + v19;
        *(void *)&long long v19 = v13 + v19;
        unint64_t v12 = v24;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v21) = 0;
      if (!sub_216C98940((uint64_t)a2 + 8, 0, (__sFILE *)&v21)) {
        return;
      }
      long long v7 = a2[1];
      long long v18 = *a2;
      long long v19 = v7;
      uint64_t v20 = (pxrInternal__aapl__pxrReserved__ *)*((void *)a2 + 4);
    }
    LODWORD(v21) = 0;
    ssize_t v10 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v20, (__sFILE *)&v21, (char *)4, v19 + *((void *)&v18 + 1));
    if (v10 == -1) {
      return;
    }
    ssize_t v11 = v10 + v19;
    *(void *)&long long v19 = v10 + v19;
    unint64_t v12 = v21;
    unint64_t v24 = v21;
LABEL_13:
    unint64_t v14 = *((void *)&v19 + 1) - v11;
    if (v11 < 0 || (v14 & 0x8000000000000000) != 0 || (v12 <= v14 ? (BOOL v15 = 24 * v12 > v14) : (BOOL v15 = 1), v15))
    {
      *(void *)&long long v21 = "usd/crateFile.cpp";
      *((void *)&v21 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v22 = 2053;
      *((void *)&v22 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = std::string]";
      LOBYTE(v23) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v12, 24 * v12, v14, *((void *)&v19 + 1));
    }
    else
    {
      sub_216CAB6C4((unint64_t *)a4, v12);
      sub_2169B23EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v16, v17);
      sub_216CAB728((uint64_t *)&v18, *(std::string **)(a4 + 32), *(void *)a4);
    }
    return;
  }
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  if (&v21 != (long long *)a4)
  {
    sub_2169B1EE4((void *)a4);
    long long v8 = v22;
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v8;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a4 + 32) = v23;
    uint64_t v23 = 0;
  }
  sub_2169B1EE4(&v21);
}

void sub_216CAB6A8(_Unwind_Exception *a1)
{
  sub_2169B1EE4((void *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_216CAB6C4(unint64_t *a1, unint64_t a2)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v3 = 0;
  unint64_t v4 = __p;
  sub_216CAB868(a1, a2, (long long **)&v4);
  if (SHIBYTE(v3) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216CAB70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216CAB728(uint64_t *a1, std::string *a2, unint64_t a3)
{
  if (!a3) {
    return (uint64_t *)1;
  }
  uint64_t v6 = (uint64_t)(a1 + 1);
  _C[0] = -1;
  __n128 result = (uint64_t *)sub_216C98940((uint64_t)(a1 + 1), 0, (__sFILE *)_C);
  if (result)
  {
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *a1;
      uint64_t v10 = *(void *)(*a1 + 144);
      if (_C[0] >= (unint64_t)((*(void *)(*a1 + 152) - v10) >> 2))
      {
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)result);
        uint64_t v16 = (const std::string *)&qword_267B91638;
      }
      else
      {
        unint64_t v11 = *(unsigned int *)(v10 + 4 * _C[0]);
        uint64_t v13 = v9 + 120;
        uint64_t v12 = *(void *)(v9 + 120);
        if (v11 >= (*(void *)(v13 + 8) - v12) >> 3)
        {
          __n128 result = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)result);
          unint64_t v14 = &qword_267B91658;
        }
        else
        {
          unint64_t v14 = (uint64_t *)(v12 + 8 * v11);
        }
        unint64_t v15 = *v14 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v16 = v15
            ? (const std::string *)(v15 + 16)
            : (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      }
      std::string::operator=(a2, v16);
      if (a3 - 1 == v8) {
        break;
      }
      ++a2;
      _C[0] = -1;
      __n128 result = (uint64_t *)sub_216C98940(v6, 0, (__sFILE *)_C);
      ++v8;
      if (!result) {
        return (uint64_t *)(v8 >= a3);
      }
    }
    return (uint64_t *)1;
  }
  return result;
}

void sub_216CAB868(unint64_t *a1, unint64_t a2, long long **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    long long v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 >= a2)
          {
            uint64_t v30 = 3 * a2;
            do
            {
              if (SHIBYTE(v7[v30 + 2]) < 0) {
                operator delete((void *)v7[v30]);
              }
              v30 += 3;
            }
            while (3 * v3 != v30);
          }
          else
          {
            uint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              long long v7 = sub_2169B21D0((uint64_t)a1, a2);
              sub_2169B232C(v9, v9 + 24 * v3, (uint64_t)v7);
            }
            unint64_t v10 = 0;
            uint64_t v11 = 3 * v3;
            uint64_t v12 = &v7[3 * v3];
            uint64_t v13 = *a3;
            uint64_t v14 = 24 * a2 - 8 * v11;
            do
            {
              unint64_t v15 = &v12[v10 / 8];
              if (*((char *)v13 + 23) < 0)
              {
                sub_216778F24(v15, *(void **)v13, *((void *)v13 + 1));
              }
              else
              {
                long long v16 = *v13;
                v15[2] = *((void *)v13 + 2);
                *(_OWORD *)unint64_t v15 = v16;
              }
              v10 += 24;
            }
            while (v14 != v10);
          }
          goto LABEL_40;
        }
        long long v7 = (void *)a1[4];
      }
      uint64_t v21 = (uint64_t)v7;
      if (v3 >= a2) {
        unint64_t v22 = a2;
      }
      else {
        unint64_t v22 = *a1;
      }
      long long v7 = sub_2169B21D0((uint64_t)a1, a2);
      sub_2169B232C(v21, v21 + 24 * v22, (uint64_t)v7);
      if (v3 < a2)
      {
        unint64_t v23 = 0;
        uint64_t v24 = 3 * v3;
        unint64_t v25 = &v7[3 * v3];
        unint64_t v26 = *a3;
        uint64_t v27 = 24 * a2 - 8 * v24;
        do
        {
          uint64_t v28 = &v25[v23 / 8];
          if (*((char *)v26 + 23) < 0)
          {
            sub_216778F24(v28, *(void **)v26, *((void *)v26 + 1));
          }
          else
          {
            long long v29 = *v26;
            v28[2] = *((void *)v26 + 2);
            *(_OWORD *)uint64_t v28 = v29;
          }
          v23 += 24;
        }
        while (v27 != v23);
      }
      goto LABEL_40;
    }
    if (a2 < 0xAAAAAAAAAAAAAABLL)
    {
      long long v7 = sub_2169B21D0((uint64_t)a1, a2);
      uint64_t v17 = 0;
      long long v18 = *a3;
      do
      {
        long long v19 = &v7[v17];
        if (*((char *)v18 + 23) < 0)
        {
          sub_216778F24(v19, *(void **)v18, *((void *)v18 + 1));
        }
        else
        {
          long long v20 = *v18;
          void v19[2] = *((void *)v18 + 2);
          *(_OWORD *)long long v19 = v20;
        }
        v17 += 3;
      }
      while (3 * a2 != v17);
LABEL_40:
      if (v7 != (void *)a1[4])
      {
        sub_2169B1EE4(a1);
        a1[4] = (unint64_t)v7;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2169B1FA0(a1);
}

void sub_216CABADC(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v1; v1 -= 24)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    v2 += 24;
  }
  __cxa_rethrow();
}

void sub_216CABB04()
{
}

void sub_216CABB80()
{
}

void sub_216CABB94(uint64_t *EmptyToken@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *EmptyToken;
  uint64_t v5 = *(void *)(*EmptyToken + 144);
  if (a2 >= (unint64_t)((*(void *)(*EmptyToken + 152) - v5) >> 2))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798C830, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26798C830))
    {
      uint64_t v17 = operator new(0x18uLL);
      sub_216779094(v17, "");
      off_26798C828 = v17;
      __cxa_guard_release(&qword_26798C830);
    }
    v18[0] = "usd/crateFile.cpp";
    v18[1] = "GetUninlinedValue";
    void v18[2] = 1223;
    v18[3] = "T pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
             "_CrateFile::_PreadStream>::GetUninlinedValue(uint32_t) const [ByteStream = pxrInternal__aapl__pxrReserved__"
             "::Usd_CrateFile::_PreadStream, T = std::string]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to get string for index %u", a2);
    if (*((char *)off_26798C828 + 23) < 0)
    {
      sub_216778F24((unsigned char *)a3, *(void **)off_26798C828, *((void *)off_26798C828 + 1));
      return;
    }
    long long v12 = *(_OWORD *)off_26798C828;
    uint64_t v13 = *((void *)off_26798C828 + 2);
    goto LABEL_9;
  }
  unint64_t v6 = *(unsigned int *)(v5 + 4 * a2);
  uint64_t v8 = v4 + 120;
  uint64_t v7 = *(void *)(v4 + 120);
  if (v6 >= (*(void *)(v8 + 8) - v7) >> 3)
  {
    EmptyToken = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
    uint64_t v9 = &qword_267B91658;
  }
  else
  {
    uint64_t v9 = (uint64_t *)(v7 + 8 * v6);
  }
  unint64_t v10 = *v9 & 0xFFFFFFFFFFFFFFF8;
  if (v10) {
    EmptyString = (uint64_t *)(v10 + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyToken);
  }
  if ((*((char *)EmptyString + 23) & 0x80000000) == 0)
  {
    long long v12 = *(_OWORD *)EmptyString;
    uint64_t v13 = EmptyString[2];
LABEL_9:
    *(void *)(a3 + 16) = v13;
    *(_OWORD *)a3 = v12;
    return;
  }
  uint64_t v14 = (void *)*EmptyString;
  unint64_t v15 = EmptyString[1];

  sub_216778F24((unsigned char *)a3, v14, v15);
}

void sub_216CABD1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  __cxa_guard_abort(&qword_26798C830);
  _Unwind_Resume(a1);
}

__n128 sub_216CABD4C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C760AF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CABD98(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C760AF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CABDC8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CABDD0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C760B58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CABE10()
{
  return &unk_26C760B58;
}

void sub_216CABE1C(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  __n128 v9[2] = v6;
  v9[3] = v7;
  int v10 = sub_216C688BC();
  sub_216CABE9C(v5, (uint64_t)v9, v3, v4);
}

void sub_216CABE9C(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v15 = 0;
    __n128 v13 = 0u;
    long long v14 = 0u;
    long long v6 = *(_OWORD *)(a2 + 16);
    v11[0] = *(_OWORD *)a2;
    v11[1] = v6;
    uint64_t v12 = *(void *)(a2 + 32);
    sub_216CABF90(a1, v11, a3, (uint64_t)&v13);
    sub_216B8DD08(a4, &v13);
    sub_2169B1EE4(&v13);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v10 = 0;
    long long v5 = *(_OWORD *)(a2 + 16);
    v7[0] = *(_OWORD *)a2;
    v7[1] = v5;
    uint64_t v8 = *(void *)(a2 + 32);
    sub_216CAC2C4((uint64_t *)v7, a3, (uint64_t)&v13);
    *(__n128 *)__sFILE __p = v13;
    uint64_t v10 = v14;
    sub_216B8DC6C(a4, (__n128 *)__p);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_216CABF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_2169B1EE4((void *)(v20 - 64));
  _Unwind_Resume(a1);
}

void sub_216CABF90(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF)
    {
      long long v9 = a2[1];
      long long v17 = *a2;
      long long v18 = v9;
      uint64_t v19 = *((void *)a2 + 4);
      unint64_t v23 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v17 + 8, &v23, 8uLL)) {
          return;
        }
        unint64_t v10 = v23;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(__dst) = 0;
      if (!sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)) {
        return;
      }
      long long v7 = a2[1];
      long long v17 = *a2;
      long long v18 = v7;
      uint64_t v19 = *((void *)a2 + 4);
    }
    LODWORD(__dst) = 0;
    if (!sub_216C82F78((uint64_t)&v17 + 8, &__dst, 4uLL)) {
      return;
    }
    unint64_t v10 = __dst;
    unint64_t v23 = __dst;
LABEL_13:
    uint64_t v11 = *(void *)(*(void *)v18 + 32);
    uint64_t v12 = *((void *)&v17 + 1) - *(void *)(*(void *)v18 + 24);
    unint64_t v13 = v11 - v12;
    if (v12 < 0 || (v13 & 0x8000000000000000) != 0 || (v10 <= v13 ? (BOOL v14 = 24 * v10 > v13) : (BOOL v14 = 1), v14))
    {
      *(void *)&long long __dst = "usd/crateFile.cpp";
      *((void *)&__dst + 1) = "_ReadUncompressedArray";
      *(void *)&long long v21 = 2053;
      *((void *)&v21 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<"
                              "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = std::string]";
      LOBYTE(v22) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v10, 24 * v10, v13, v11);
    }
    else
    {
      sub_216CAB6C4((unint64_t *)a4, v10);
      sub_2169B23EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
      sub_216CAC184((uint64_t *)&v17, *(std::string **)(a4 + 32), *(void *)a4);
    }
    return;
  }
  uint64_t v22 = 0;
  long long __dst = 0u;
  long long v21 = 0u;
  if (&__dst != (long long *)a4)
  {
    sub_2169B1EE4((void *)a4);
    long long v8 = v21;
    *(_OWORD *)a4 = __dst;
    *(_OWORD *)(a4 + 16) = v8;
    long long __dst = 0u;
    long long v21 = 0u;
    *(void *)(a4 + 32) = v22;
    uint64_t v22 = 0;
  }
  sub_2169B1EE4(&__dst);
}

void sub_216CAC168(_Unwind_Exception *a1)
{
  sub_2169B1EE4((void *)(v1 - 64));
  _Unwind_Resume(a1);
}

uint64_t sub_216CAC184(uint64_t *a1, std::string *a2, unint64_t a3)
{
  if (!a3) {
    return 1;
  }
  uint64_t v6 = (uint64_t)(a1 + 1);
  unsigned int __dst = -1;
  uint64_t result = sub_216C82F78((uint64_t)(a1 + 1), &__dst, 4uLL);
  if (result)
  {
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *a1;
      uint64_t v10 = *(void *)(*a1 + 144);
      if (__dst >= (unint64_t)((*(void *)(*a1 + 152) - v10) >> 2))
      {
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)result);
        long long v16 = (const std::string *)&qword_267B91638;
      }
      else
      {
        unint64_t v11 = *(unsigned int *)(v10 + 4 * __dst);
        uint64_t v13 = v9 + 120;
        uint64_t v12 = *(void *)(v9 + 120);
        if (v11 >= (*(void *)(v13 + 8) - v12) >> 3)
        {
          uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)result);
          BOOL v14 = &qword_267B91658;
        }
        else
        {
          BOOL v14 = (uint64_t *)(v12 + 8 * v11);
        }
        unint64_t v15 = *v14 & 0xFFFFFFFFFFFFFFF8;
        long long v16 = v15
            ? (const std::string *)(v15 + 16)
            : (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      }
      std::string::operator=(a2, v16);
      if (a3 - 1 == v8) {
        break;
      }
      ++a2;
      unsigned int __dst = -1;
      uint64_t result = sub_216C82F78(v6, &__dst, 4uLL);
      ++v8;
      if (!result) {
        return v8 >= a3;
      }
    }
    return 1;
  }
  return result;
}

void sub_216CAC2C4(uint64_t *EmptyToken@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *EmptyToken;
  uint64_t v5 = *(void *)(*EmptyToken + 144);
  if (a2 >= (unint64_t)((*(void *)(*EmptyToken + 152) - v5) >> 2))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798C840, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26798C840))
    {
      long long v17 = operator new(0x18uLL);
      sub_216779094(v17, "");
      off_26798C838 = v17;
      __cxa_guard_release(&qword_26798C840);
    }
    v18[0] = "usd/crateFile.cpp";
    v18[1] = "GetUninlinedValue";
    void v18[2] = 1223;
    v18[3] = "T pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
             "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::GetUn"
             "inlinedValue(uint32_t) const [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxr"
             "Internal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>, T = std::string]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to get string for index %u", a2);
    if (*((char *)off_26798C838 + 23) < 0)
    {
      sub_216778F24((unsigned char *)a3, *(void **)off_26798C838, *((void *)off_26798C838 + 1));
      return;
    }
    long long v12 = *(_OWORD *)off_26798C838;
    uint64_t v13 = *((void *)off_26798C838 + 2);
    goto LABEL_9;
  }
  unint64_t v6 = *(unsigned int *)(v5 + 4 * a2);
  uint64_t v8 = v4 + 120;
  uint64_t v7 = *(void *)(v4 + 120);
  if (v6 >= (*(void *)(v8 + 8) - v7) >> 3)
  {
    EmptyToken = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
    uint64_t v9 = &qword_267B91658;
  }
  else
  {
    uint64_t v9 = (uint64_t *)(v7 + 8 * v6);
  }
  unint64_t v10 = *v9 & 0xFFFFFFFFFFFFFFF8;
  if (v10) {
    EmptyString = (uint64_t *)(v10 + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyToken);
  }
  if ((*((char *)EmptyString + 23) & 0x80000000) == 0)
  {
    long long v12 = *(_OWORD *)EmptyString;
    uint64_t v13 = EmptyString[2];
LABEL_9:
    *(void *)(a3 + 16) = v13;
    *(_OWORD *)a3 = v12;
    return;
  }
  BOOL v14 = (void *)*EmptyString;
  unint64_t v15 = EmptyString[1];

  sub_216778F24((unsigned char *)a3, v14, v15);
}

void sub_216CAC44C(_Unwind_Exception *a1)
{
  operator delete(v1);
  __cxa_guard_abort(&qword_26798C840);
  _Unwind_Resume(a1);
}

__n128 sub_216CAC47C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C760B78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CAC4C8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C760B78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CAC4F8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CAC500(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C760BD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CAC540()
{
  return &unk_26C760BD8;
}

void sub_216CAC54C(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    unint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    unint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CAC5F8(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CAC5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CAC5F8(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v17 = 0;
    __n128 v15 = 0u;
    long long v16 = 0u;
    long long v12 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v13 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = *((void *)a2 + 3);
    sub_216CAC754(a1, &v12, a3, (uint64_t)&v15);
    if (v13) {
      sub_216784EC4(v13);
    }
    sub_216B8DD08(a4, &v15);
    sub_2169B1EE4(&v15);
  }
  else
  {
    long long v7 = *a2;
    uint64_t v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v8 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *((void *)a2 + 3);
    sub_216CACB20((uint64_t *)&v7, a3, (uint64_t)&v15);
    *(__n128 *)__sFILE __p = v15;
    uint64_t v11 = v16;
    if (v8) {
      sub_216784EC4(v8);
    }
    sub_216B8DC6C(a4, (__n128 *)__p);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_216CAC6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_2169B1EE4((void *)(v22 - 64));
  _Unwind_Resume(a1);
}

void sub_216CAC754(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    uint64_t v6 = *a2;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 <= 0x4FF)
    {
      LODWORD(v23) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v23, 4uLL)) {
        return;
      }
      uint64_t v6 = *a2;
    }
    uint64_t v8 = a2[1];
    uint64_t v9 = (std::__shared_weak_count *)a2[2];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v10 = a2[3];
      uint64_t v19 = v6;
      uint64_t v20 = v8;
      long long v21 = v9;
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v10 = a2[3];
      uint64_t v19 = v6;
      uint64_t v20 = v8;
      long long v21 = 0;
    }
    uint64_t v22 = v10;
    unint64_t v26 = 0;
    if (v7 > 0x6FF)
    {
      if (sub_216C804FC(&v20, (uint64_t)&v26, 8uLL))
      {
LABEL_15:
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
        unint64_t v13 = v12 - v22;
        unint64_t v14 = v26;
        if (v22 < 0 || (v13 & 0x8000000000000000) != 0 || (v26 <= v13 ? (BOOL v15 = 24 * v26 > v13) : (BOOL v15 = 1), v15))
        {
          *(void *)&long long v23 = "usd/crateFile.cpp";
          *((void *)&v23 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v24 = 2053;
          *((void *)&v24 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_AssetStream>, T = std::string]";
          LOBYTE(v25) = 0;
          uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v14, 24 * v14, v13, v18);
        }
        else
        {
          sub_216CAB6C4((unint64_t *)a4, v26);
          sub_2169B23EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v16, v17);
          sub_216CAC9E0(&v19, *(std::string **)(a4 + 32), *(void *)a4);
        }
      }
    }
    else
    {
      LODWORD(v23) = 0;
      if (sub_216C804FC(&v20, (uint64_t)&v23, 4uLL))
      {
        unint64_t v26 = v23;
        goto LABEL_15;
      }
    }
    if (v21) {
      sub_216784EC4(v21);
    }
    if (v9) {
      sub_216784EC4(v9);
    }
    return;
  }
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  if (&v23 != (long long *)a4)
  {
    sub_2169B1EE4((void *)a4);
    long long v11 = v24;
    *(_OWORD *)a4 = v23;
    *(_OWORD *)(a4 + 16) = v11;
    long long v23 = 0u;
    long long v24 = 0u;
    *(void *)(a4 + 32) = v25;
    uint64_t v25 = 0;
  }
  sub_2169B1EE4(&v23);
}

void sub_216CAC9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2169B1EE4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CAC9E0(void *a1, std::string *a2, unint64_t a3)
{
  if (!a3) {
    return 1;
  }
  uint64_t v6 = a1 + 1;
  unsigned int v17 = -1;
  uint64_t result = sub_216C804FC(a1 + 1, (uint64_t)&v17, 4uLL);
  if (result)
  {
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *a1;
      uint64_t v10 = *(void *)(*a1 + 144);
      if (v17 >= (unint64_t)((*(void *)(*a1 + 152) - v10) >> 2))
      {
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)result);
        uint64_t v16 = (const std::string *)&qword_267B91638;
      }
      else
      {
        unint64_t v11 = *(unsigned int *)(v10 + 4 * v17);
        uint64_t v13 = v9 + 120;
        uint64_t v12 = *(void *)(v9 + 120);
        if (v11 >= (*(void *)(v13 + 8) - v12) >> 3)
        {
          uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)result);
          unint64_t v14 = &qword_267B91658;
        }
        else
        {
          unint64_t v14 = (uint64_t *)(v12 + 8 * v11);
        }
        unint64_t v15 = *v14 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v16 = v15
            ? (const std::string *)(v15 + 16)
            : (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      }
      std::string::operator=(a2, v16);
      if (a3 - 1 == v8) {
        break;
      }
      ++a2;
      unsigned int v17 = -1;
      uint64_t result = sub_216C804FC(v6, (uint64_t)&v17, 4uLL);
      ++v8;
      if (!result) {
        return v8 >= a3;
      }
    }
    return 1;
  }
  return result;
}

void sub_216CACB20(uint64_t *EmptyToken@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *EmptyToken;
  uint64_t v5 = *(void *)(*EmptyToken + 144);
  if (a2 >= (unint64_t)((*(void *)(*EmptyToken + 152) - v5) >> 2))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798C850, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26798C850))
    {
      unsigned int v17 = operator new(0x18uLL);
      sub_216779094(v17, "");
      off_26798C848 = v17;
      __cxa_guard_release(&qword_26798C850);
    }
    v18[0] = "usd/crateFile.cpp";
    v18[1] = "GetUninlinedValue";
    void v18[2] = 1223;
    v18[3] = "T pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
             "_CrateFile::_AssetStream>::GetUninlinedValue(uint32_t) const [ByteStream = pxrInternal__aapl__pxrReserved__"
             "::Usd_CrateFile::_AssetStream, T = std::string]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to get string for index %u", a2);
    if (*((char *)off_26798C848 + 23) < 0)
    {
      sub_216778F24((unsigned char *)a3, *(void **)off_26798C848, *((void *)off_26798C848 + 1));
      return;
    }
    long long v12 = *(_OWORD *)off_26798C848;
    uint64_t v13 = *((void *)off_26798C848 + 2);
    goto LABEL_9;
  }
  unint64_t v6 = *(unsigned int *)(v5 + 4 * a2);
  uint64_t v8 = v4 + 120;
  uint64_t v7 = *(void *)(v4 + 120);
  if (v6 >= (*(void *)(v8 + 8) - v7) >> 3)
  {
    EmptyToken = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
    uint64_t v9 = &qword_267B91658;
  }
  else
  {
    uint64_t v9 = (uint64_t *)(v7 + 8 * v6);
  }
  unint64_t v10 = *v9 & 0xFFFFFFFFFFFFFFF8;
  if (v10) {
    EmptyString = (uint64_t *)(v10 + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyToken);
  }
  if ((*((char *)EmptyString + 23) & 0x80000000) == 0)
  {
    long long v12 = *(_OWORD *)EmptyString;
    uint64_t v13 = EmptyString[2];
LABEL_9:
    *(void *)(a3 + 16) = v13;
    *(_OWORD *)a3 = v12;
    return;
  }
  unint64_t v14 = (void *)*EmptyString;
  unint64_t v15 = EmptyString[1];

  sub_216778F24((unsigned char *)a3, v14, v15);
}

void sub_216CACCA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  __cxa_guard_abort(&qword_26798C850);
  _Unwind_Resume(a1);
}

__n128 sub_216CACCD8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C760BF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CACD24(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C760BF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CACD54(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return sub_216CACDB4(*(void *)(a1 + 16), *(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)(a1 + 8), (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)(*(void *)(*(void *)(a1 + 8) + 6328)+ 256), this);
}

uint64_t sub_216CACD68(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C760C58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CACDA8()
{
  return &unk_26C760C58;
}

unint64_t sub_216CACDB4(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a2, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v4 = this;
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)v4 + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      uint64_t v10 = *(void *)v4;
    }
    return sub_216CACE78(a1, a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    return pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddToken(a2, v4) | 0x400B000000000000;
  }
}

unint64_t sub_216CACE78(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a2, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a3, uint64_t a4)
{
  v19[0] = a2;
  v19[1] = a3;
  unint64_t result = 0x800B000000000000;
  unint64_t v18 = 0x800B000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      long long v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7B960(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    uint64_t v13 = sub_216CAD004(v9, (unint64_t *)a4, a4, &v18);
    if (v14)
    {
      uint64_t v15 = *((void *)a2 + 791);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        uint64_t v17 = sub_216C98168((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          unint64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(void *)a4;
          sub_216C984FC((uint64_t)v20, (char *)&__src);
        }
        sub_216CAD324(*(pxrInternal__aapl__pxrReserved__::TfToken **)(a4 + 32), (pxrInternal__aapl__pxrReserved__::TfToken *)(*(void *)(a4 + 32) + 8 * *(void *)a4), v20);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x800B000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(void *)a4;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        sub_216CAD324(*(pxrInternal__aapl__pxrReserved__::TfToken **)(a4 + 32), (pxrInternal__aapl__pxrReserved__::TfToken *)(*(void *)(a4 + 32) + 8 * *(void *)a4), v19);
      }
    }
    return v13[7];
  }
  return result;
}

void *sub_216CAD004(uint64_t a1, unint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = *a2;
  if (*a2)
  {
    uint64_t v10 = (uint64_t *)a2[4];
    unint64_t v11 = *a2;
    do
    {
      uint64_t v12 = *v10++;
      unint64_t v9 = (v12 & 0xFFFFFFFFFFFFFFF8)
         + (((v12 & 0xFFFFFFFFFFFFFFF8)
           + v9
           + ((v12 & 0xFFFFFFFFFFFFFFF8) + v9) * ((v12 & 0xFFFFFFFFFFFFFFF8) + v9)) >> 1);
      --v11;
    }
    while (v11);
    v9 *= 0x9E3779B97F4A7C55;
  }
  unint64_t v13 = bswap64(v9);
  unint64_t v14 = *(void *)(a1 + 8);
  if (v14)
  {
    uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    unint64_t v16 = v15.u32[0];
    if (v15.u32[0] > 1uLL)
    {
      unint64_t v4 = v13;
      if (v13 >= v14) {
        unint64_t v4 = v13 % v14;
      }
    }
    else
    {
      unint64_t v4 = (v14 - 1) & v13;
    }
    uint64_t v17 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v17)
    {
      for (int i = *v17; i; int i = (void *)*i)
      {
        unint64_t v19 = i[1];
        if (v19 == v13)
        {
          if (sub_2169B2CB0(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v16 > 1)
          {
            if (v19 >= v14) {
              v19 %= v14;
            }
          }
          else
          {
            v19 &= v14 - 1;
          }
          if (v19 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v20 = (void *)(a1 + 16);
  long long v21 = operator new(0x40uLL);
  int i = v21;
  *(void *)long long v21 = 0;
  *((void *)v21 + 1) = v13;
  long long v22 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v21 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v21 + 2) = v22;
  uint64_t v23 = *(void *)(a3 + 32);
  *((void *)v21 + 6) = v23;
  if (v23)
  {
    long long v24 = (atomic_ullong *)(v23 - 16);
    if (*((void *)v21 + 5)) {
      long long v24 = (atomic_ullong *)*((void *)v21 + 5);
    }
    atomic_fetch_add_explicit(v24, 1uLL, memory_order_relaxed);
  }
  *((void *)v21 + 7) = *a4;
  float v25 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v26 = *(float *)(a1 + 32);
  if (!v14 || (float)(v26 * (float)v14) < v25)
  {
    BOOL v27 = 1;
    if (v14 >= 3) {
      BOOL v27 = (v14 & (v14 - 1)) != 0;
    }
    unint64_t v28 = v27 | (2 * v14);
    unint64_t v29 = vcvtps_u32_f32(v25 / v26);
    if (v28 <= v29) {
      size_t v30 = v29;
    }
    else {
      size_t v30 = v28;
    }
    sub_21678A04C(a1, v30);
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        unint64_t v4 = v13 % v14;
      }
      else {
        unint64_t v4 = v13;
      }
    }
    else
    {
      unint64_t v4 = (v14 - 1) & v13;
    }
  }
  uint64_t v31 = *(void *)a1;
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  if (v32)
  {
    *int i = *v32;
LABEL_46:
    *uint64_t v32 = i;
    goto LABEL_47;
  }
  *int i = *v20;
  void *v20 = i;
  *(void *)(v31 + 8 * v4) = v20;
  if (*i)
  {
    unint64_t v33 = *(void *)(*i + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v33 >= v14) {
        v33 %= v14;
      }
    }
    else
    {
      v33 &= v14 - 1;
    }
    uint64_t v32 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_46;
  }
LABEL_47:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CAD2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CAD2CC(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CAD2CC(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2169B2E0C(__p + 2);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **sub_216CAD324(pxrInternal__aapl__pxrReserved__::TfToken *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      int __src = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddToken(*a3, v5);
      sub_216C984FC((uint64_t)a3, (char *)&__src);
      uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8);
    }
    while (v5 != a2);
  }
  return a3;
}

__n128 sub_216CAD398(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C760C78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CAD3E4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C760C78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CAD414(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  unint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  long long v10[2] = 0;
  v10[3] = v8;
  void v10[4] = v9;
  sub_216CAD4AC(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_216CAD460(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C760CD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CAD4A0()
{
  return &unk_26C760CD8;
}

void sub_216CAD4AC(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v13 = 0;
    memset(v12, 0, sizeof(v12));
    long long v6 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v6;
    uint64_t v11 = *(void *)(a2 + 32);
    sub_216CAD5A0(a1, v10, a3, (uint64_t)v12);
    sub_216B8DFFC(a4, v12);
    sub_2169B2E0C(v12);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    v7[0] = *(_OWORD *)a2;
    v7[1] = v5;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v9 = 0;
    sub_216CAD8C8((uint64_t)v7, a3, (atomic_uint **)v12);
    unint64_t v9 = v12[0].n128_u64[0];
    sub_216B8DF6C((uint64_t *)a4, (uint64_t *)&v9);
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_216CAD568(_Unwind_Exception *a1)
{
  sub_2169B2E0C((void *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_216CAD5A0(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 2) = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF)
    {
      long long v9 = a2[1];
      long long v18 = *a2;
      long long v19 = v9;
      uint64_t v20 = (pxrInternal__aapl__pxrReserved__ *)*((void *)a2 + 4);
      unint64_t v24 = 0;
      if (v6 > 0x6FF)
      {
        ssize_t v13 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v20, (__sFILE *)&v24, (char *)8, v19 + *((void *)&v18 + 1));
        if (v13 == -1) {
          return;
        }
        ssize_t v11 = v13 + v19;
        *(void *)&long long v19 = v13 + v19;
        unint64_t v12 = v24;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v21) = 0;
      if (!sub_216C98940((uint64_t)a2 + 8, 0, (__sFILE *)&v21)) {
        return;
      }
      long long v7 = a2[1];
      long long v18 = *a2;
      long long v19 = v7;
      uint64_t v20 = (pxrInternal__aapl__pxrReserved__ *)*((void *)a2 + 4);
    }
    LODWORD(v21) = 0;
    ssize_t v10 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v20, (__sFILE *)&v21, (char *)4, v19 + *((void *)&v18 + 1));
    if (v10 == -1) {
      return;
    }
    ssize_t v11 = v10 + v19;
    *(void *)&long long v19 = v10 + v19;
    unint64_t v12 = v21;
    unint64_t v24 = v21;
LABEL_13:
    unint64_t v14 = *((void *)&v19 + 1) - v11;
    if (v11 < 0 || (v14 & 0x8000000000000000) != 0 || (v12 <= v14 ? (BOOL v15 = 8 * v12 > v14) : (BOOL v15 = 1), v15))
    {
      *(void *)&long long v21 = "usd/crateFile.cpp";
      *((void *)&v21 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v22 = 2053;
      *((void *)&v22 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::TfToken]";
      LOBYTE(v23) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v12, 8 * v12, v14, *((void *)&v19 + 1));
    }
    else
    {
      sub_216CAD794((uint64_t *)a4, v12);
      sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v16, v17);
      sub_216CAD7F4((uint64_t)&v18, *(void **)(a4 + 32), *(void *)a4);
    }
    return;
  }
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  if (&v21 != (long long *)a4)
  {
    sub_2169B2E0C((void *)a4);
    long long v8 = v22;
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v8;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a4 + 32) = v23;
    uint64_t v23 = 0;
  }
  sub_2169B2E0C(&v21);
}

void sub_216CAD778(_Unwind_Exception *a1)
{
  sub_2169B2E0C((void *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_216CAD794(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = &v2;
  sub_2169B2F44(a1, a2, &v3);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

BOOL sub_216CAD7F4(uint64_t a1, void *a2, unint64_t a3)
{
  if (a3)
  {
    uint64_t v6 = a1 + 8;
    _C[0] = -1;
    BOOL v7 = 0;
    if (sub_216C98940(a1 + 8, 0, (__sFILE *)_C))
    {
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = *(void *)(*(void *)a1 + 120);
        if (_C[0] >= (unint64_t)((*(void *)(*(void *)a1 + 128) - v9) >> 3)) {
          break;
        }
        sub_2168D2318(a2, (void *)(v9 + 8 * _C[0]));
        if (a3 == v8) {
          return 1;
        }
        ++a2;
        BOOL v7 = v8 >= a3;
        _C[0] = -1;
        ++v8;
      }
      while (sub_216C98940(v6, 0, (__sFILE *)_C));
    }
  }
  else
  {
    return 1;
  }
  return v7;
}

void sub_216CAD8C8(uint64_t a1@<X0>, unsigned int a2@<W1>, atomic_uint **a3@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 120);
  if (a2 >= (unint64_t)((*(void *)(*(void *)a1 + 128) - v4) >> 3))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798C860, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26798C860))
    {
      unint64_t v8 = operator new(8uLL);
      *(void *)unint64_t v8 = 0;
      off_26798C858 = v8;
      __cxa_guard_release(&qword_26798C860);
    }
    v9[0] = "usd/crateFile.cpp";
    v9[1] = "GetUninlinedValue";
    __n128 v9[2] = 1234;
    v9[3] = "T pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_"
            "CrateFile::_PreadStream>::GetUninlinedValue(uint32_t) const [ByteStream = pxrInternal__aapl__pxrReserved__::"
            "Usd_CrateFile::_PreadStream, T = pxrInternal__aapl__pxrReserved__::TfToken]";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to get token for index %u", a2);
    long long v5 = *(atomic_uint **)off_26798C858;
  }
  else
  {
    long long v5 = *(atomic_uint **)(v4 + 8 * a2);
  }
  *a3 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      *a3 = v6;
    }
  }
}

void sub_216CAD9C8(_Unwind_Exception *a1)
{
}

__n128 sub_216CAD9E8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C760CF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CADA34(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C760CF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CADA64(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CADA6C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C760D58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CADAAC()
{
  return &unk_26C760D58;
}

void sub_216CADAB8(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  __n128 v9[2] = v6;
  v9[3] = v7;
  int v10 = sub_216C688BC();
  sub_216CADB38(v5, (uint64_t)v9, v3, v4);
}

void sub_216CADB38(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v13 = 0;
    memset(v12, 0, sizeof(v12));
    long long v6 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v6;
    uint64_t v11 = *(void *)(a2 + 32);
    sub_216CADC2C(a1, v10, a3, (uint64_t)v12);
    sub_216B8DFFC(a4, v12);
    sub_2169B2E0C(v12);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    v7[0] = *(_OWORD *)a2;
    v7[1] = v5;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v9 = 0;
    sub_216CADEF0((uint64_t)v7, a3, (atomic_uint **)v12);
    unint64_t v9 = v12[0].n128_u64[0];
    sub_216B8DF6C((uint64_t *)a4, (uint64_t *)&v9);
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_216CADBF4(_Unwind_Exception *a1)
{
  sub_2169B2E0C((void *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_216CADC2C(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF)
    {
      long long v9 = a2[1];
      long long v17 = *a2;
      long long v18 = v9;
      uint64_t v19 = *((void *)a2 + 4);
      unint64_t v23 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v17 + 8, &v23, 8uLL)) {
          return;
        }
        unint64_t v10 = v23;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(__dst) = 0;
      if (!sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)) {
        return;
      }
      long long v7 = a2[1];
      long long v17 = *a2;
      long long v18 = v7;
      uint64_t v19 = *((void *)a2 + 4);
    }
    LODWORD(__dst) = 0;
    if (!sub_216C82F78((uint64_t)&v17 + 8, &__dst, 4uLL)) {
      return;
    }
    unint64_t v10 = __dst;
    unint64_t v23 = __dst;
LABEL_13:
    uint64_t v11 = *(void *)(*(void *)v18 + 32);
    uint64_t v12 = *((void *)&v17 + 1) - *(void *)(*(void *)v18 + 24);
    unint64_t v13 = v11 - v12;
    if (v12 < 0 || (v13 & 0x8000000000000000) != 0 || (v10 <= v13 ? (BOOL v14 = 8 * v10 > v13) : (BOOL v14 = 1), v14))
    {
      *(void *)&long long __dst = "usd/crateFile.cpp";
      *((void *)&__dst + 1) = "_ReadUncompressedArray";
      *(void *)&long long v21 = 2053;
      *((void *)&v21 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<"
                              "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = pxrInter"
                              "nal__aapl__pxrReserved__::TfToken]";
      LOBYTE(v22) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v10, 8 * v10, v13, v11);
    }
    else
    {
      sub_216CAD794((uint64_t *)a4, v10);
      sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
      sub_216CADE1C((uint64_t)&v17, *(void **)(a4 + 32), *(void *)a4);
    }
    return;
  }
  uint64_t v22 = 0;
  long long __dst = 0u;
  long long v21 = 0u;
  if (&__dst != (long long *)a4)
  {
    sub_2169B2E0C((void *)a4);
    long long v8 = v21;
    *(_OWORD *)a4 = __dst;
    *(_OWORD *)(a4 + 16) = v8;
    long long __dst = 0u;
    long long v21 = 0u;
    *(void *)(a4 + 32) = v22;
    uint64_t v22 = 0;
  }
  sub_2169B2E0C(&__dst);
}

void sub_216CADE00(_Unwind_Exception *a1)
{
  sub_2169B2E0C((void *)(v1 - 64));
  _Unwind_Resume(a1);
}

BOOL sub_216CADE1C(uint64_t a1, void *a2, unint64_t a3)
{
  if (a3)
  {
    uint64_t v6 = a1 + 8;
    unsigned int __dst = -1;
    BOOL v7 = 0;
    if (sub_216C82F78(a1 + 8, &__dst, 4uLL))
    {
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = *(void *)(*(void *)a1 + 120);
        if (__dst >= (unint64_t)((*(void *)(*(void *)a1 + 128) - v9) >> 3)) {
          break;
        }
        sub_2168D2318(a2, (void *)(v9 + 8 * __dst));
        if (a3 == v8) {
          return 1;
        }
        ++a2;
        BOOL v7 = v8 >= a3;
        unsigned int __dst = -1;
        ++v8;
      }
      while (sub_216C82F78(v6, &__dst, 4uLL));
    }
  }
  else
  {
    return 1;
  }
  return v7;
}

void sub_216CADEF0(uint64_t a1@<X0>, unsigned int a2@<W1>, atomic_uint **a3@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 120);
  if (a2 >= (unint64_t)((*(void *)(*(void *)a1 + 128) - v4) >> 3))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798C870, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26798C870))
    {
      unint64_t v8 = operator new(8uLL);
      *(void *)unint64_t v8 = 0;
      off_26798C868 = v8;
      __cxa_guard_release(&qword_26798C870);
    }
    v9[0] = "usd/crateFile.cpp";
    v9[1] = "GetUninlinedValue";
    __n128 v9[2] = 1234;
    v9[3] = "T pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_"
            "CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::GetUnin"
            "linedValue(uint32_t) const [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInt"
            "ernal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::TfToken]";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to get token for index %u", a2);
    long long v5 = *(atomic_uint **)off_26798C868;
  }
  else
  {
    long long v5 = *(atomic_uint **)(v4 + 8 * a2);
  }
  *a3 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      *a3 = v6;
    }
  }
}

void sub_216CADFF0(_Unwind_Exception *a1)
{
}

__n128 sub_216CAE010(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C760D78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CAE05C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C760D78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CAE08C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CAE094(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C760DD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CAE0D4()
{
  return &unk_26C760DD8;
}

void sub_216CAE0E0(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CAE18C(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CAE168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CAE18C(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    long long v11 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v12 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *((void *)a2 + 3);
    sub_216CAE2F0(a1, &v11, a3, (uint64_t)v14);
    if (v12) {
      sub_216784EC4(v12);
    }
    sub_216B8DFFC(a4, v14);
    sub_2169B2E0C(v14);
  }
  else
  {
    long long v7 = *a2;
    long long v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v8 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *((void *)a2 + 3);
    sub_216CAE64C((uint64_t)&v7, a3, (atomic_uint **)v14);
    unint64_t v10 = v14[0].n128_u64[0];
    if (v8) {
      sub_216784EC4(v8);
    }
    sub_216B8DF6C((uint64_t *)a4, (uint64_t *)&v10);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_216CAE290(_Unwind_Exception *a1)
{
  sub_2169B2E0C((void *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_216CAE2F0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    uint64_t v6 = *a2;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 <= 0x4FF)
    {
      LODWORD(v23) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v23, 4uLL)) {
        return;
      }
      uint64_t v6 = *a2;
    }
    uint64_t v8 = a2[1];
    uint64_t v9 = (std::__shared_weak_count *)a2[2];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v10 = a2[3];
      uint64_t v19 = v6;
      uint64_t v20 = v8;
      long long v21 = v9;
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v10 = a2[3];
      uint64_t v19 = v6;
      uint64_t v20 = v8;
      long long v21 = 0;
    }
    uint64_t v22 = v10;
    unint64_t v26 = 0;
    if (v7 > 0x6FF)
    {
      if (sub_216C804FC(&v20, (uint64_t)&v26, 8uLL))
      {
LABEL_15:
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
        unint64_t v13 = v12 - v22;
        unint64_t v14 = v26;
        if (v22 < 0 || (v13 & 0x8000000000000000) != 0 || (v26 <= v13 ? (BOOL v15 = 8 * v26 > v13) : (BOOL v15 = 1), v15))
        {
          *(void *)&long long v23 = "usd/crateFile.cpp";
          *((void *)&v23 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v24 = 2053;
          *((void *)&v24 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::TfToken]";
          LOBYTE(v25) = 0;
          uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v14, 8 * v14, v13, v18);
        }
        else
        {
          sub_216CAD794((uint64_t *)a4, v26);
          sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v16, v17);
          sub_216CAE578(&v19, *(void **)(a4 + 32), *(void *)a4);
        }
      }
    }
    else
    {
      LODWORD(v23) = 0;
      if (sub_216C804FC(&v20, (uint64_t)&v23, 4uLL))
      {
        unint64_t v26 = v23;
        goto LABEL_15;
      }
    }
    if (v21) {
      sub_216784EC4(v21);
    }
    if (v9) {
      sub_216784EC4(v9);
    }
    return;
  }
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  if (&v23 != (long long *)a4)
  {
    sub_2169B2E0C((void *)a4);
    long long v11 = v24;
    *(_OWORD *)a4 = v23;
    *(_OWORD *)(a4 + 16) = v11;
    long long v23 = 0u;
    long long v24 = 0u;
    *(void *)(a4 + 32) = v25;
    uint64_t v25 = 0;
  }
  sub_2169B2E0C(&v23);
}

void sub_216CAE53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2169B2E0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_216CAE578(void *a1, void *a2, unint64_t a3)
{
  if (a3)
  {
    uint64_t v6 = a1 + 1;
    unsigned int v11 = -1;
    BOOL v7 = 0;
    if (sub_216C804FC(a1 + 1, (uint64_t)&v11, 4uLL))
    {
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = *(void *)(*a1 + 120);
        if (v11 >= (unint64_t)((*(void *)(*a1 + 128) - v9) >> 3)) {
          break;
        }
        sub_2168D2318(a2, (void *)(v9 + 8 * v11));
        if (a3 == v8) {
          return 1;
        }
        ++a2;
        BOOL v7 = v8 >= a3;
        unsigned int v11 = -1;
        ++v8;
      }
      while (sub_216C804FC(v6, (uint64_t)&v11, 4uLL));
    }
  }
  else
  {
    return 1;
  }
  return v7;
}

void sub_216CAE64C(uint64_t a1@<X0>, unsigned int a2@<W1>, atomic_uint **a3@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 120);
  if (a2 >= (unint64_t)((*(void *)(*(void *)a1 + 128) - v4) >> 3))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798C880, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26798C880))
    {
      unint64_t v8 = operator new(8uLL);
      *(void *)unint64_t v8 = 0;
      off_26798C878 = v8;
      __cxa_guard_release(&qword_26798C880);
    }
    v9[0] = "usd/crateFile.cpp";
    v9[1] = "GetUninlinedValue";
    __n128 v9[2] = 1234;
    v9[3] = "T pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_"
            "CrateFile::_AssetStream>::GetUninlinedValue(uint32_t) const [ByteStream = pxrInternal__aapl__pxrReserved__::"
            "Usd_CrateFile::_AssetStream, T = pxrInternal__aapl__pxrReserved__::TfToken]";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to get token for index %u", a2);
    long long v5 = *(atomic_uint **)off_26798C878;
  }
  else
  {
    long long v5 = *(atomic_uint **)(v4 + 8 * a2);
  }
  *a3 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      *a3 = v6;
    }
  }
}

void sub_216CAE74C(_Unwind_Exception *a1)
{
}

__n128 sub_216CAE76C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C760DF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CAE7B8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C760DF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CAE7E8(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_216CAE848(*(void *)(a1 + 16), *(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)(a1 + 8), (char **)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_216CAE7FC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C760E58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CAE83C()
{
  return &unk_26C760E58;
}

unint64_t sub_216CAE848(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a2, char **a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    }
    else {
      uint64_t v10 = *(void *)this;
    }
    return sub_216CAE91C(a1, (uint64_t)a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    }
    v12[0] = a2;
    v12[1] = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a3;
    return sub_216CAEE08(v12) | 0x400C000000000000;
  }
}

unint64_t sub_216CAE91C(uint64_t a1, uint64_t a2, char **a3, uint64_t a4)
{
  v19[0] = (char **)a2;
  v19[1] = a3;
  unint64_t result = 0x800C000000000000;
  unint64_t v18 = 0x800C000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      uint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7BA20(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    unint64_t v13 = sub_216CAEAB0(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = (char **)a2;
        v20[1] = a3;
        uint64_t v17 = sub_216C98168((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          uint64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(void *)a4;
          sub_216C984FC((uint64_t)v20, (char *)&__src);
        }
        sub_216CAED9C(*(unsigned __int8 **)(a4 + 32), (unsigned __int8 *)(*(void *)(a4 + 32) + 48 * *(void *)a4), v20);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x800C000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(void *)a4;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        sub_216CAED9C(*(unsigned __int8 **)(a4 + 32), (unsigned __int8 *)(*(void *)(a4 + 32) + 48 * *(void *)a4), v19);
      }
    }
    return v13[7];
  }
  return result;
}

uint64_t *sub_216CAEAB0(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = sub_2169B41A8((uint64_t)v32, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (uint64_t *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_2169B42A0(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (uint64_t *)(a1 + 16);
  unint64_t v18 = operator new(0x40uLL);
  int i = (uint64_t *)v18;
  uint64_t v33 = a1 + 16;
  *(void *)unint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    long long v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      long long v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  unint64_t v29 = *(uint64_t **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *unint64_t v29 = (uint64_t)i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = (uint64_t)i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    unint64_t v29 = (uint64_t *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CAED28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CAED44(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CAED44(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2169B4408(__p + 2);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

char ***sub_216CAED9C(unsigned __int8 *a1, unsigned __int8 *a2, char ***a3)
{
  if (a1 != a2)
  {
    long long v5 = a1;
    do
    {
      int __src = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddString(*a3, v5);
      sub_216C984FC((uint64_t)a3, (char *)&__src);
      v5 += 48;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_216CAEE08(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a1)
{
  uint64_t v1 = *a1;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v3);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddToken(v1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

__n128 sub_216CAEE80(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C760E78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CAEECC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C760E78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CAEEFC(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  long long v10[2] = 0;
  v10[3] = v8;
  void v10[4] = v9;
  sub_216CAEF94(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_216CAEF48(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C760ED8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CAEF88()
{
  return &unk_26C760ED8;
}

void sub_216CAEF94(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  unsigned int v5 = a3;
  if (a3 < 0)
  {
    memset(v17, 0, sizeof(v17));
    long long v8 = *(_OWORD *)(a2 + 16);
    v15[0] = *(_OWORD *)a2;
    v15[1] = v8;
    uint64_t v16 = *(void *)(a2 + 32);
    sub_216CAF114(a1, v15, a3, (uint64_t)v17);
    sub_216B8E3E8(a4, (__n128 *)v17);
    sub_2169B4408(v17);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)__p);
    long long v7 = *(_OWORD *)(a2 + 16);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v7;
    uint64_t v10 = *(void *)(a2 + 32);
    sub_216CAF53C((pxrInternal__aapl__pxrReserved__::TfToken *)v9, v5, (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v17);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)__sFILE __p = *(_OWORD *)v17;
    uint64_t v12 = *(void *)&v17[16];
    v17[23] = 0;
    v17[0] = 0;
    if (SHIBYTE(v14) < 0)
    {
      operator delete((void *)v13);
      long long v13 = *(_OWORD *)&v17[24];
      uint64_t v14 = v18;
      HIBYTE(v18) = 0;
      v17[24] = 0;
      if ((v17[23] & 0x80000000) != 0) {
        operator delete(*(void **)v17);
      }
    }
    else
    {
      long long v13 = *(_OWORD *)&v17[24];
      uint64_t v14 = v18;
    }
    sub_216B8E324(a4, (uint64_t)__p);
    if (SHIBYTE(v14) < 0) {
      operator delete((void *)v13);
    }
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_216CAF0EC(_Unwind_Exception *a1)
{
  sub_2169B4408((void *)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_216CAF114(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 2) = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF)
    {
      long long v9 = a2[1];
      long long v24 = *a2;
      long long v25 = v9;
      unint64_t v26 = (pxrInternal__aapl__pxrReserved__ *)*((void *)a2 + 4);
      unint64_t v30 = 0;
      if (v6 > 0x6FF)
      {
        ssize_t v13 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v26, (__sFILE *)&v30, (char *)8, v25 + *((void *)&v24 + 1));
        if (v13 == -1) {
          return;
        }
        ssize_t v11 = v13 + v25;
        *(void *)&long long v25 = v13 + v25;
        unint64_t v12 = v30;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v27) = 0;
      if (!sub_216C98940((uint64_t)a2 + 8, 0, (__sFILE *)&v27)) {
        return;
      }
      long long v7 = a2[1];
      long long v24 = *a2;
      long long v25 = v7;
      unint64_t v26 = (pxrInternal__aapl__pxrReserved__ *)*((void *)a2 + 4);
    }
    LODWORD(v27) = 0;
    ssize_t v10 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v26, (__sFILE *)&v27, (char *)4, v25 + *((void *)&v24 + 1));
    if (v10 == -1) {
      return;
    }
    ssize_t v11 = v10 + v25;
    *(void *)&long long v25 = v10 + v25;
    unint64_t v12 = v27;
    unint64_t v30 = v27;
LABEL_13:
    unint64_t v14 = *((void *)&v25 + 1) - v11;
    if (v11 < 0 || (v14 & 0x8000000000000000) != 0 || (v12 <= v14 ? (BOOL v15 = 48 * v12 > v14) : (BOOL v15 = 1), v15))
    {
      *(void *)&long long v27 = "usd/crateFile.cpp";
      *((void *)&v27 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v28 = 2053;
      *((void *)&v28 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::SdfAssetPath]";
      LOBYTE(v29) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v12, 48 * v12, v14, *((void *)&v25 + 1));
    }
    else
    {
      sub_216CAF32C((unint64_t *)a4, v12);
      sub_2169B49FC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v16, v17);
      unint64_t v18 = *(void *)a4;
      if (*(void *)a4)
      {
        uint64_t v19 = *(void *)(a4 + 32);
        unint64_t v20 = v18 - 1;
        do
        {
          unsigned int v21 = sub_216CAF3B4((uint64_t *)&v24, v19);
          BOOL v23 = v20-- != 0;
          if (!v21) {
            break;
          }
          v19 += 48;
        }
        while (v23);
      }
    }
    return;
  }
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  if (&v27 != (long long *)a4)
  {
    sub_2169B4408((void *)a4);
    long long v8 = v28;
    *(_OWORD *)a4 = v27;
    *(_OWORD *)(a4 + 16) = v8;
    long long v27 = 0u;
    long long v28 = 0u;
    *(void *)(a4 + 32) = v29;
    uint64_t v29 = 0;
  }
  sub_2169B4408(&v27);
}

void sub_216CAF310(_Unwind_Exception *a1)
{
  sub_2169B4408((void *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_216CAF32C(unint64_t *a1, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v4);
  long long v8 = v4;
  sub_2169B4574(a1, a2, (long long **)&v8);
  if (v7 < 0) {
    operator delete(__p);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_216CAF3A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21682E578((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216CAF3B4(uint64_t *a1, uint64_t a2)
{
  memset(&v21, 0, sizeof(v21));
  LODWORD(__p[0]) = -1;
  EmptyToken = (uint64_t *)sub_216C98940((uint64_t)(a1 + 1), 0, (__sFILE *)__p);
  char v5 = EmptyToken;
  if (EmptyToken)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = *(void *)(*a1 + 144);
    if (LODWORD(__p[0]) >= (unint64_t)((*(void *)(*a1 + 152) - v7) >> 2))
    {
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
      EmptyString = (const std::string *)&qword_267B91638;
    }
    else
    {
      unint64_t v8 = *(unsigned int *)(v7 + 4 * LODWORD(__p[0]));
      uint64_t v10 = v6 + 120;
      uint64_t v9 = *(void *)(v6 + 120);
      if (v8 >= (*(void *)(v10 + 8) - v9) >> 3)
      {
        EmptyToken = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
        ssize_t v11 = &qword_267B91658;
      }
      else
      {
        ssize_t v11 = (uint64_t *)(v9 + 8 * v8);
      }
      unint64_t v12 = *v11 & 0xFFFFFFFFFFFFFFF8;
      if (v12) {
        EmptyString = (const std::string *)(v12 + 16);
      }
      else {
        EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyToken);
      }
    }
    std::string::operator=(&v21, EmptyString);
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(__p);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + 16) = v18;
    HIBYTE(v18) = 0;
    LOBYTE(__p[0]) = 0;
    unint64_t v14 = (void **)(a2 + 24);
    if (*(char *)(a2 + 47) < 0)
    {
      operator delete(*v14);
      int v15 = SHIBYTE(v18);
      *(_OWORD *)unint64_t v14 = v19;
      *(void *)(a2 + 40) = v20;
      HIBYTE(v20) = 0;
      LOBYTE(v19) = 0;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v14 = v19;
      *(void *)(a2 + 40) = v20;
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
  }
  return v5;
}

void sub_216CAF51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_216CAF53C@<D0>(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, unsigned int a2@<W1>, pxrInternal__aapl__pxrReserved__::SdfAssetPath *a3@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 120);
  if (a2 >= (unint64_t)((*(void *)(*(void *)a1 + 128) - v4) >> 3))
  {
    v6[0] = "usd/crateFile.cpp";
    v6[1] = "GetUninlinedValue";
    long long v6[2] = 1246;
    v6[3] = "T pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_"
            "CrateFile::_PreadStream>::GetUninlinedValue(uint32_t) const [ByteStream = pxrInternal__aapl__pxrReserved__::"
            "Usd_CrateFile::_PreadStream, T = pxrInternal__aapl__pxrReserved__::SdfAssetPath]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to get token for index %u", a2);
    return pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(a3);
  }
  else
  {
    if ((*(void *)(v4 + 8 * a2) & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
    }
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(a3);
  }
  return result;
}

__n128 sub_216CAF60C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C760EF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CAF658(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C760EF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CAF688(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CAF690(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C760F58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CAF6D0()
{
  return &unk_26C760F58;
}

void sub_216CAF6DC(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  _OWORD v9[2] = v6;
  v9[3] = v7;
  int v10 = sub_216C688BC();
  sub_216CAF75C(v5, (uint64_t)v9, v3, v4);
}

void sub_216CAF75C(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  unsigned int v5 = a3;
  if (a3 < 0)
  {
    memset(v17, 0, sizeof(v17));
    long long v8 = *(_OWORD *)(a2 + 16);
    v15[0] = *(_OWORD *)a2;
    v15[1] = v8;
    uint64_t v16 = *(void *)(a2 + 32);
    sub_216CAF8DC(a1, v15, a3, (uint64_t)v17);
    sub_216B8E3E8(a4, (__n128 *)v17);
    sub_2169B4408(v17);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)__p);
    long long v7 = *(_OWORD *)(a2 + 16);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v7;
    uint64_t v10 = *(void *)(a2 + 32);
    sub_216CAFC78((pxrInternal__aapl__pxrReserved__::TfToken *)v9, v5, (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v17);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)__sFILE __p = *(_OWORD *)v17;
    uint64_t v12 = *(void *)&v17[16];
    v17[23] = 0;
    v17[0] = 0;
    if (SHIBYTE(v14) < 0)
    {
      operator delete((void *)v13);
      long long v13 = *(_OWORD *)&v17[24];
      uint64_t v14 = v18;
      HIBYTE(v18) = 0;
      v17[24] = 0;
      if ((v17[23] & 0x80000000) != 0) {
        operator delete(*(void **)v17);
      }
    }
    else
    {
      long long v13 = *(_OWORD *)&v17[24];
      uint64_t v14 = v18;
    }
    sub_216B8E324(a4, (uint64_t)__p);
    if (SHIBYTE(v14) < 0) {
      operator delete((void *)v13);
    }
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_216CAF8B4(_Unwind_Exception *a1)
{
  sub_2169B4408((void *)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_216CAF8DC(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF)
    {
      long long v9 = a2[1];
      long long v23 = *a2;
      long long v24 = v9;
      uint64_t v25 = *((void *)a2 + 4);
      unint64_t v29 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v23 + 8, &v29, 8uLL)) {
          return;
        }
        unint64_t v10 = v29;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(__dst) = 0;
      if (!sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)) {
        return;
      }
      long long v7 = a2[1];
      long long v23 = *a2;
      long long v24 = v7;
      uint64_t v25 = *((void *)a2 + 4);
    }
    LODWORD(__dst) = 0;
    if (!sub_216C82F78((uint64_t)&v23 + 8, &__dst, 4uLL)) {
      return;
    }
    unint64_t v10 = __dst;
    unint64_t v29 = __dst;
LABEL_13:
    uint64_t v11 = *(void *)(*(void *)v24 + 32);
    uint64_t v12 = *((void *)&v23 + 1) - *(void *)(*(void *)v24 + 24);
    unint64_t v13 = v11 - v12;
    if (v12 < 0 || (v13 & 0x8000000000000000) != 0 || (v10 <= v13 ? (BOOL v14 = 48 * v10 > v13) : (BOOL v14 = 1), v14))
    {
      *(void *)&long long __dst = "usd/crateFile.cpp";
      *((void *)&__dst + 1) = "_ReadUncompressedArray";
      *(void *)&long long v27 = 2053;
      *((void *)&v27 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<"
                              "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = pxrInter"
                              "nal__aapl__pxrReserved__::SdfAssetPath]";
      LOBYTE(v28) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v10, 48 * v10, v13, v11);
    }
    else
    {
      sub_216CAF32C((unint64_t *)a4, v10);
      sub_2169B49FC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
      unint64_t v17 = *(void *)a4;
      if (*(void *)a4)
      {
        uint64_t v18 = *(void *)(a4 + 32);
        unint64_t v19 = v17 - 1;
        do
        {
          unsigned int v20 = sub_216CAFAF0((uint64_t *)&v23, v18);
          BOOL v22 = v19-- != 0;
          if (!v20) {
            break;
          }
          v18 += 48;
        }
        while (v22);
      }
    }
    return;
  }
  uint64_t v28 = 0;
  long long __dst = 0u;
  long long v27 = 0u;
  if (&__dst != (long long *)a4)
  {
    sub_2169B4408((void *)a4);
    long long v8 = v27;
    *(_OWORD *)a4 = __dst;
    *(_OWORD *)(a4 + 16) = v8;
    long long __dst = 0u;
    long long v27 = 0u;
    *(void *)(a4 + 32) = v28;
    uint64_t v28 = 0;
  }
  sub_2169B4408(&__dst);
}

void sub_216CAFAD4(_Unwind_Exception *a1)
{
  sub_2169B4408((void *)(v1 - 64));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *sub_216CAFAF0(uint64_t *a1, uint64_t a2)
{
  memset(&v21, 0, sizeof(v21));
  LODWORD(__p[0]) = -1;
  EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_216C82F78((uint64_t)(a1 + 1), __p, 4uLL);
  unsigned int v5 = EmptyToken;
  if (EmptyToken)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = *(void *)(*a1 + 144);
    if (LODWORD(__p[0]) >= (unint64_t)((*(void *)(*a1 + 152) - v7) >> 2))
    {
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
      EmptyString = (const std::string *)&qword_267B91638;
    }
    else
    {
      unint64_t v8 = *(unsigned int *)(v7 + 4 * LODWORD(__p[0]));
      uint64_t v10 = v6 + 120;
      uint64_t v9 = *(void *)(v6 + 120);
      if (v8 >= (*(void *)(v10 + 8) - v9) >> 3)
      {
        EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
        uint64_t v11 = &qword_267B91658;
      }
      else
      {
        uint64_t v11 = (uint64_t *)(v9 + 8 * v8);
      }
      unint64_t v12 = *v11 & 0xFFFFFFFFFFFFFFF8;
      if (v12) {
        EmptyString = (const std::string *)(v12 + 16);
      }
      else {
        EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
      }
    }
    std::string::operator=(&v21, EmptyString);
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(__p);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + 16) = v18;
    HIBYTE(v18) = 0;
    LOBYTE(__p[0]) = 0;
    BOOL v14 = (void **)(a2 + 24);
    if (*(char *)(a2 + 47) < 0)
    {
      operator delete(*v14);
      int v15 = SHIBYTE(v18);
      *(_OWORD *)BOOL v14 = v19;
      *(void *)(a2 + 40) = v20;
      HIBYTE(v20) = 0;
      LOBYTE(v19) = 0;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_OWORD *)BOOL v14 = v19;
      *(void *)(a2 + 40) = v20;
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
  }
  return v5;
}

void sub_216CAFC58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_216CAFC78@<D0>(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, unsigned int a2@<W1>, pxrInternal__aapl__pxrReserved__::SdfAssetPath *a3@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 120);
  if (a2 >= (unint64_t)((*(void *)(*(void *)a1 + 128) - v4) >> 3))
  {
    v6[0] = "usd/crateFile.cpp";
    v6[1] = "GetUninlinedValue";
    long long v6[2] = 1246;
    v6[3] = "T pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_"
            "CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::GetUnin"
            "linedValue(uint32_t) const [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInt"
            "ernal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::SdfAssetPath]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to get token for index %u", a2);
    return pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(a3);
  }
  else
  {
    if ((*(void *)(v4 + 8 * a2) & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
    }
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(a3);
  }
  return result;
}

__n128 sub_216CAFD48(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C760F78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CAFD94(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C760F78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CAFDC4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CAFDCC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C760FD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CAFE0C()
{
  return &unk_26C760FD8;
}

void sub_216CAFE18(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  unsigned int v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CAFEC4(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CAFEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CAFEC4(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  unsigned int v5 = a3;
  if (a3 < 0)
  {
    memset(v19, 0, sizeof(v19));
    long long v16 = *a2;
    uint64_t v8 = (std::__shared_weak_count *)*((void *)a2 + 2);
    unint64_t v17 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = *((void *)a2 + 3);
    sub_216CB00B4(a1, &v16, a3, (uint64_t)v19);
    if (v17) {
      sub_216784EC4(v17);
    }
    sub_216B8E3E8(a4, (__n128 *)v19);
    sub_2169B4408(v19);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)__p);
    long long v9 = *a2;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)a2 + 2);
    long long v10 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *((void *)a2 + 3);
    sub_216CB04E8((pxrInternal__aapl__pxrReserved__::TfToken *)&v9, v5, (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v19);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)__sFILE __p = *(_OWORD *)v19;
    uint64_t v13 = *(void *)&v19[16];
    v19[23] = 0;
    v19[0] = 0;
    if (SHIBYTE(v15) < 0)
    {
      operator delete((void *)v14);
      long long v14 = *(_OWORD *)&v19[24];
      uint64_t v15 = v20;
      HIBYTE(v20) = 0;
      v19[24] = 0;
      if ((v19[23] & 0x80000000) != 0) {
        operator delete(*(void **)v19);
      }
    }
    else
    {
      long long v14 = *(_OWORD *)&v19[24];
      uint64_t v15 = v20;
    }
    if (v10) {
      sub_216784EC4(v10);
    }
    sub_216B8E324(a4, (uint64_t)__p);
    if (SHIBYTE(v15) < 0) {
      operator delete((void *)v14);
    }
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_216CB0064(_Unwind_Exception *a1)
{
  sub_2169B4408((void *)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_216CB00B4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    uint64_t v6 = *a2;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 <= 0x4FF)
    {
      LODWORD(v29) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v29, 4uLL)) {
        return;
      }
      uint64_t v6 = *a2;
    }
    uint64_t v8 = a2[1];
    long long v9 = (std::__shared_weak_count *)a2[2];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v10 = a2[3];
      uint64_t v25 = v6;
      uint64_t v26 = v8;
      long long v27 = v9;
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v10 = a2[3];
      uint64_t v25 = v6;
      uint64_t v26 = v8;
      long long v27 = 0;
    }
    uint64_t v28 = v10;
    unint64_t v32 = 0;
    if (v7 > 0x6FF)
    {
      if (sub_216C804FC(&v26, (uint64_t)&v32, 8uLL))
      {
LABEL_15:
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 16))(v26);
        unint64_t v13 = v12 - v28;
        unint64_t v14 = v32;
        if (v28 < 0 || (v13 & 0x8000000000000000) != 0 || (v32 <= v13 ? (BOOL v15 = 48 * v32 > v13) : (BOOL v15 = 1), v15))
        {
          *(void *)&long long v29 = "usd/crateFile.cpp";
          *((void *)&v29 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v30 = 2053;
          *((void *)&v30 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::SdfAssetPath]";
          LOBYTE(v31) = 0;
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 16))(v26);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v29, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v14, 48 * v14, v13, v24);
        }
        else
        {
          sub_216CAF32C((unint64_t *)a4, v32);
          sub_2169B49FC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v16, v17);
          unint64_t v18 = *(void *)a4;
          if (*(void *)a4)
          {
            uint64_t v19 = *(void *)(a4 + 32);
            unint64_t v20 = v18 - 1;
            do
            {
              unsigned __int8 v21 = sub_216CB0360(&v25, v19);
              v19 += 48;
              if (v20-- != 0) {
                unsigned __int8 v23 = v21;
              }
              else {
                unsigned __int8 v23 = 0;
              }
            }
            while ((v23 & 1) != 0);
          }
        }
      }
    }
    else
    {
      LODWORD(v29) = 0;
      if (sub_216C804FC(&v26, (uint64_t)&v29, 4uLL))
      {
        unint64_t v32 = v29;
        goto LABEL_15;
      }
    }
    if (v27) {
      sub_216784EC4(v27);
    }
    if (v9) {
      sub_216784EC4(v9);
    }
    return;
  }
  uint64_t v31 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  if (&v29 != (long long *)a4)
  {
    sub_2169B4408((void *)a4);
    long long v11 = v30;
    *(_OWORD *)a4 = v29;
    *(_OWORD *)(a4 + 16) = v11;
    long long v29 = 0u;
    long long v30 = 0u;
    *(void *)(a4 + 32) = v31;
    uint64_t v31 = 0;
  }
  sub_2169B4408(&v29);
}

void sub_216CB0320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2169B4408((uint64_t *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *sub_216CB0360(void *a1, uint64_t a2)
{
  memset(&v21, 0, sizeof(v21));
  LODWORD(__p[0]) = -1;
  EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_216C804FC(a1 + 1, (uint64_t)__p, 4uLL);
  unsigned int v5 = EmptyToken;
  if (EmptyToken)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = *(void *)(*a1 + 144);
    if (LODWORD(__p[0]) >= (unint64_t)((*(void *)(*a1 + 152) - v7) >> 2))
    {
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
      EmptyString = (const std::string *)&qword_267B91638;
    }
    else
    {
      unint64_t v8 = *(unsigned int *)(v7 + 4 * LODWORD(__p[0]));
      uint64_t v10 = v6 + 120;
      uint64_t v9 = *(void *)(v6 + 120);
      if (v8 >= (*(void *)(v10 + 8) - v9) >> 3)
      {
        EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
        long long v11 = &qword_267B91658;
      }
      else
      {
        long long v11 = (uint64_t *)(v9 + 8 * v8);
      }
      unint64_t v12 = *v11 & 0xFFFFFFFFFFFFFFF8;
      if (v12) {
        EmptyString = (const std::string *)(v12 + 16);
      }
      else {
        EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
      }
    }
    std::string::operator=(&v21, EmptyString);
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(__p);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + 16) = v18;
    HIBYTE(v18) = 0;
    LOBYTE(__p[0]) = 0;
    unint64_t v14 = (void **)(a2 + 24);
    if (*(char *)(a2 + 47) < 0)
    {
      operator delete(*v14);
      int v15 = SHIBYTE(v18);
      *(_OWORD *)unint64_t v14 = v19;
      *(void *)(a2 + 40) = v20;
      HIBYTE(v20) = 0;
      LOBYTE(v19) = 0;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v14 = v19;
      *(void *)(a2 + 40) = v20;
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
  }
  return v5;
}

void sub_216CB04C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_216CB04E8@<D0>(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, unsigned int a2@<W1>, pxrInternal__aapl__pxrReserved__::SdfAssetPath *a3@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 120);
  if (a2 >= (unint64_t)((*(void *)(*(void *)a1 + 128) - v4) >> 3))
  {
    v6[0] = "usd/crateFile.cpp";
    v6[1] = "GetUninlinedValue";
    long long v6[2] = 1246;
    v6[3] = "T pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_"
            "CrateFile::_AssetStream>::GetUninlinedValue(uint32_t) const [ByteStream = pxrInternal__aapl__pxrReserved__::"
            "Usd_CrateFile::_AssetStream, T = pxrInternal__aapl__pxrReserved__::SdfAssetPath]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to get token for index %u", a2);
    return pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(a3);
  }
  else
  {
    if ((*(void *)(v4 + 8 * a2) & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
    }
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(a3);
  }
  return result;
}

__n128 sub_216CB05B8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C760FF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB0604(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C760FF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CB0634(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return sub_216CB0694(*(uint64_t **)(a1 + 16), *(void *)(a1 + 8), (void *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), this);
}

uint64_t sub_216CB0648(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C761058)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB0688()
{
  return &unk_26C761058;
}

unint64_t sub_216CB0694(uint64_t *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    }
    else {
      uint64_t v10 = *(void *)this;
    }
    return sub_216CB07C4((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      unint64_t v12 = (char *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                           + 168))(this);
    else {
      unint64_t v12 = *(char **)this;
    }
    v19[0] = a2;
    v19[1] = a3;
    uint64_t v13 = *a1;
    if (!*a1)
    {
      unint64_t v14 = operator new(0x28uLL);
      _OWORD *v14 = 0u;
      v14[1] = 0u;
      *((_DWORD *)v14 + 8) = 1065353216;
      sub_2168CAEA8(a1, (uint64_t)v14);
      uint64_t v13 = *a1;
    }
    uint64_t v18 = 0;
    int v15 = sub_216CB0CD8(v13, (uint64_t)v12, v12, (double *)&v18);
    uint64_t v16 = v15;
    if (v17)
    {
      *((void *)v15 + 6) = *a3 & 0xFFFFFFFFFFFFLL | 0x10000000000000;
      sub_216CB0C34((uint64_t)v19, v12);
    }
    return *((void *)v16 + 6);
  }
}

unint64_t sub_216CB07C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a2;
  v19[1] = a3;
  unint64_t result = 0x8010000000000000;
  unint64_t v18 = 0x8010000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      unint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7BBA0(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    uint64_t v13 = sub_216CB0948(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        uint64_t v17 = sub_216C98168((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          uint64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(void *)a4;
          sub_216C984FC((uint64_t)v20, (char *)&__src);
        }
        sub_216C7B02C((uint64_t)v20, *(char **)(a4 + 32), *(void *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8010000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(void *)a4;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        sub_216C7B02C((uint64_t)v19, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void *sub_216CB0948(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = sub_216905A74((uint64_t)v32, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_216905B78(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  unint64_t v18 = operator new(0x40uLL);
  int i = v18;
  uint64_t v33 = a1 + 16;
  *(void *)unint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    std::string v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      std::string v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  long long v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *long long v29 = i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    long long v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CB0BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CB0BDC(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CB0BDC(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t sub_216CB0C34(uint64_t a1, char *__src)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = 32;
  do
  {
    uint64_t v5 = v3[2];
    uint64_t v6 = v5 - *v3 + 0x80000;
    if (v4 >= v6) {
      size_t v7 = v5 - *v3 + 0x80000;
    }
    else {
      size_t v7 = v4;
    }
    uint64_t v8 = *v3 - v5;
    if ((int64_t)(v7 + v8) > v3[4]) {
      v3[4] = v7 + v8;
    }
    uint64_t result = (uint64_t)memcpy((void *)(v3[3] + v8), __src, v7);
    *v3 += v7;
    if (v6 <= v4) {
      uint64_t result = sub_216C7A9E4((BOOL)v3);
    }
    __src += v7;
    v4 -= v7;
  }
  while (v4);
  return result;
}

double *sub_216CB0CD8(uint64_t a1, uint64_t a2, _OWORD *a3, double *a4)
{
  uint64_t v26 = *(void *)(a2 + 24);
  uint64_t v27 = 0;
  char v28 = 0;
  sub_2168F7DF0((uint64_t)&v27, (double *)&v26, (double *)a2);
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v27));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
    uint8x8_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = (double *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v9)
          {
            if (v13[5] == *(double *)(a2 + 24)
              && v13[2] == *(double *)a2
              && v13[3] == *(double *)(a2 + 8)
              && v13[4] == *(double *)(a2 + 16))
            {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = *(double **)v13;
        }
        while (v13);
      }
    }
  }
  unint64_t v13 = (double *)operator new(0x38uLL);
  double *v13 = 0.0;
  *((void *)v13 + 1) = v9;
  long long v15 = a3[1];
  *((_OWORD *)v13 + 1) = *a3;
  *((_OWORD *)v13 + 2) = v15;
  v13[6] = *a4;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  float v23 = *(double ***)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)unint64_t v13 = *v23;
LABEL_41:
    *float v23 = v13;
    goto LABEL_42;
  }
  double *v13 = *(double *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*(void *)v13)
  {
    unint64_t v24 = *(void *)(*(void *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    float v23 = (double **)(*(void *)a1 + 8 * v24);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_216CB0F6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216CB0F88(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C761078;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB0FD4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C761078;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CB1004(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  long long v10[2] = 0;
  v10[3] = v8;
  void v10[4] = v9;
  sub_216CB109C(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_216CB1050(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7610D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB1090()
{
  return &unk_26C7610D8;
}

void sub_216CB109C(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    long long v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a2 + 32);
    sub_216CB1150(a1, v6, a3, (uint64_t)v8);
    sub_2169056C4(a4, v8);
    sub_2168F83DC((uint64_t)v8);
  }
  else
  {
    if ((a3 & 0x4000000000000000) == 0) {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v8, (char *)0x20, *(void *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    sub_216B90170(a4, v8);
  }
}

void sub_216CB1138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CB1150(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      uint64_t v8 = a2[1];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
      unint64_t v22 = 0;
      if (v7 > 0x6FF)
      {
        ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1) {
          return;
        }
        unint64_t v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v19)) {
        return;
      }
      uint64_t v8 = a2[1];
      uint64_t v5 = a2[2];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1) {
      return;
    }
    unint64_t v13 = v19;
    unint64_t v22 = v19;
LABEL_13:
    ssize_t v14 = v12 + v5;
    unint64_t v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (BOOL v16 = 32 * v13 > v15) : (BOOL v16 = 1), v16))
    {
      *(void *)&long long v19 = "usd/crateFile.cpp";
      *((void *)&v19 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v20 = 2053;
      *((void *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 32 * v13, v10 - v14, v10);
    }
    else
    {
      float v23 = &v19;
      sub_2169053B4((unint64_t *)a4, v13, &v23);
      sub_21690562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(32 * *(void *)a4), v14 + v8);
    }
    return;
  }
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  if (&v19 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    long long v19 = 0u;
    long long v20 = 0u;
    *(void *)(a4 + 32) = v21;
    uint64_t v21 = 0;
  }
  sub_2168F83DC((uint64_t)&v19);
}

void sub_216CB1324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CB1348(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7610F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB1394(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7610F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CB13C4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CB13CC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C761158)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB140C()
{
  return &unk_26C761158;
}

void sub_216CB1418(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  _OWORD v9[2] = v6;
  v9[3] = v7;
  int v10 = sub_216C688BC();
  sub_216CB1498(v5, (uint64_t)v9, v3, v4);
}

void sub_216CB1498(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v13 = 0;
    memset(__dst, 0, sizeof(__dst));
    long long v6 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v6;
    uint64_t v11 = *(void *)(a2 + 32);
    sub_216CB156C(a1, v10, a3, (uint64_t)__dst);
    sub_2169056C4(a4, __dst);
    sub_2168F83DC((uint64_t)__dst);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v7 = *(_OWORD *)a2;
    long long v8 = v5;
    uint64_t v9 = *(void *)(a2 + 32);
    if ((a3 & 0x4000000000000000) == 0)
    {
      *((void *)&v7 + 1) = *(void *)(*(void *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_216C82F78((uint64_t)&v7 + 8, __dst, 0x20uLL);
    }
    sub_216B90170(a4, __dst);
  }
}

void sub_216CB1554(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_216CB156C(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      long long v7 = a2[1];
      long long v21 = *a2;
      long long v22 = v7;
      uint64_t v23 = *((void *)a2 + 4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91750, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B91750))
      {
        long long v20 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v20) {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
        }
        byte_267B91748 = *v20;
        __cxa_guard_release(&qword_267B91750);
      }
      unint64_t v27 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v21 + 8, &v27, 8uLL)) {
          return;
        }
        unint64_t v8 = v27;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_216C82F78((uint64_t)&v21 + 8, &__dst, 4uLL) & 1) == 0) {
          return;
        }
        unint64_t v8 = __dst;
        unint64_t v27 = __dst;
      }
      unint64_t v10 = 32 * v8;
      uint64_t v11 = *((void *)&v21 + 1);
      if (!byte_267B91748 || v10 < 0x800 || (BYTE8(v21) & 7) != 0)
      {
        uint64_t v14 = *(void *)(*(void *)v22 + 32);
        uint64_t v15 = *((void *)&v21 + 1) - *(void *)(*(void *)v22 + 24);
        unint64_t v16 = v14 - v15;
        if (v15 < 0 || (v16 & 0x8000000000000000) != 0 || (v8 <= v16 ? (BOOL v17 = v10 > v16) : (BOOL v17 = 1), v17))
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2117;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v8, 32 * v8, v16, v14);
        }
        else
        {
          p_dst = &__dst;
          sub_2169053B4((unint64_t *)a4, v8, &p_dst);
          sub_21690562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v18, v19);
          sub_216C82F78((uint64_t)&v21 + 8, *(void **)(a4 + 32), 32 * *(void *)a4);
        }
      }
      else
      {
        uint64_t v12 = sub_216C99144((uint64_t)&v21 + 8, *((char **)&v21 + 1), 32 * v8, v8);
        if (v12)
        {
          *(void *)&long long v25 = 0;
          *((void *)&v25 + 1) = v12;
          uint64_t v26 = v11;
          long long __dst = v27;
          if (&__dst != (long long *)a4)
          {
            sub_2168F83DC(a4);
            long long v13 = v25;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v13;
            long long __dst = 0u;
            long long v25 = 0u;
            *(void *)(a4 + 32) = v26;
            uint64_t v26 = 0;
          }
          sub_2168F83DC((uint64_t)&__dst);
        }
        else
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2109;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v10);
          sub_2168F845C((void *)a4);
        }
      }
    }
  }
  else
  {
    uint64_t v26 = 0;
    long long __dst = 0u;
    long long v25 = 0u;
    if (&__dst != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v9 = v25;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v9;
      long long __dst = 0u;
      long long v25 = 0u;
      *(void *)(a4 + 32) = v26;
      uint64_t v26 = 0;
    }
    sub_2168F83DC((uint64_t)&__dst);
  }
}

void sub_216CB1880(_Unwind_Exception *a1)
{
}

__n128 sub_216CB18D0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C761178;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB191C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C761178;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CB194C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CB1954(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7611D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB1994()
{
  return &unk_26C7611D8;
}

void sub_216CB19A0(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CB1A4C(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CB1A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CB1A4C(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v14 = 0;
    memset(v13, 0, sizeof(v13));
    long long v10 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v11 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *((void *)a2 + 3);
    sub_216CB1B80(a1, &v10, a3, (uint64_t)v13);
    if (v11) {
      sub_216784EC4(v11);
    }
    sub_2169056C4(a4, v13);
    sub_2168F83DC((uint64_t)v13);
  }
  else
  {
    long long v7 = *a2;
    long long v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v8 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *((void *)a2 + 3);
    if ((a3 & 0x4000000000000000) == 0)
    {
      uint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
      sub_216C804FC((void *)&v7 + 1, (uint64_t)v13, 0x20uLL);
      long long v5 = v8;
    }
    if (v5) {
      sub_216784EC4(v5);
    }
    sub_216B90170(a4, v13);
  }
}

void sub_216CB1B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CB1B80(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v21) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v21, 4uLL)) {
        return;
      }
    }
    uint64_t v7 = a2[1];
    uint64_t v8 = (std::__shared_weak_count *)a2[2];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = a2[3];
      uint64_t v18 = v7;
      long long v19 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = a2[3];
      uint64_t v18 = a2[1];
      long long v19 = 0;
    }
    uint64_t v20 = v9;
    unint64_t v24 = 0;
    if (v6 > 0x6FF)
    {
      if (sub_216C804FC(&v18, (uint64_t)&v24, 8uLL))
      {
LABEL_14:
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
        unint64_t v12 = v11 - v20;
        unint64_t v13 = v24;
        if (v20 < 0 || (v12 & 0x8000000000000000) != 0 || (v24 <= v12 ? (BOOL v14 = 32 * v24 > v12) : (BOOL v14 = 1), v14))
        {
          *(void *)&long long v21 = "usd/crateFile.cpp";
          *((void *)&v21 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v22 = 2053;
          *((void *)&v22 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
          LOBYTE(v23) = 0;
          uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 32 * v13, v12, v17);
        }
        else
        {
          long long v25 = &v21;
          sub_2169053B4((unint64_t *)a4, v24, &v25);
          sub_21690562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
          sub_216C804FC(&v18, *(void *)(a4 + 32), 32 * *(void *)a4);
        }
      }
    }
    else
    {
      LODWORD(v21) = 0;
      if (sub_216C804FC(&v18, (uint64_t)&v21, 4uLL))
      {
        unint64_t v24 = v21;
        goto LABEL_14;
      }
    }
    if (v19) {
      sub_216784EC4(v19);
    }
    if (v8) {
      sub_216784EC4(v8);
    }
    return;
  }
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  if (&v21 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v10 = v22;
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v10;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a4 + 32) = v23;
    uint64_t v23 = 0;
  }
  sub_2168F83DC((uint64_t)&v21);
}

void sub_216CB1DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CB1E28(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7611F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB1E74(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7611F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CB1EA4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return sub_216CB1F04(*(uint64_t **)(a1 + 16), *(void *)(a1 + 8), (void *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), this);
}

uint64_t sub_216CB1EB8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C761258)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB1EF8()
{
  return &unk_26C761258;
}

unint64_t sub_216CB1F04(uint64_t *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    }
    else {
      uint64_t v10 = *(void *)this;
    }
    return sub_216CB2034((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      unint64_t v12 = (char *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                           + 168))(this);
    else {
      unint64_t v12 = *(char **)this;
    }
    v19[0] = a2;
    v19[1] = a3;
    uint64_t v13 = *a1;
    if (!*a1)
    {
      BOOL v14 = operator new(0x28uLL);
      _OWORD *v14 = 0u;
      v14[1] = 0u;
      *((_DWORD *)v14 + 8) = 1065353216;
      sub_2168CAEA8(a1, (uint64_t)v14);
      uint64_t v13 = *a1;
    }
    uint64_t v18 = 0;
    uint64_t v15 = sub_216CB24A4(v13, (uint64_t)v12, v12, &v18);
    unint64_t v16 = v15;
    if (v17)
    {
      *((void *)v15 + 4) = *a3 & 0xFFFFFFFFFFFFLL | 0x11000000000000;
      sub_216C944BC((uint64_t)v19, v12);
    }
    return *((void *)v16 + 4);
  }
}

unint64_t sub_216CB2034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a2;
  v19[1] = a3;
  unint64_t result = 0x8011000000000000;
  unint64_t v18 = 0x8011000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      unint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7BC60(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    uint64_t v13 = sub_216CB21B8(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        uint64_t v17 = sub_216C98168((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          uint64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(void *)a4;
          sub_216C984FC((uint64_t)v20, (char *)&__src);
        }
        sub_216C93DB8((uint64_t)v20, *(char **)(a4 + 32), *(void *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8011000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(void *)a4;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        sub_216C93DB8((uint64_t)v19, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void *sub_216CB21B8(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = sub_2169042FC((uint64_t)v32, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_216904400(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  unint64_t v18 = operator new(0x40uLL);
  int i = v18;
  uint64_t v33 = a1 + 16;
  *(void *)unint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    long long v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      long long v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  long long v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *long long v29 = i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    long long v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CB2430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CB244C(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CB244C(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

float *sub_216CB24A4(uint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  int v25 = *(_DWORD *)(a2 + 12);
  uint64_t v26 = 0;
  char v27 = 0;
  sub_2168F7758((uint64_t)&v26, (float *)&v25, (float *)a2);
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v26));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
    uint8x8_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = (float *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v9)
          {
            if (v13[7] == *(float *)(a2 + 12)
              && v13[4] == *(float *)a2
              && v13[5] == *(float *)(a2 + 4)
              && v13[6] == *(float *)(a2 + 8))
            {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = *(float **)v13;
        }
        while (v13);
      }
    }
  }
  unint64_t v13 = (float *)operator new(0x28uLL);
  *(void *)unint64_t v13 = 0;
  *((void *)v13 + 1) = v9;
  *((_OWORD *)v13 + 1) = *a3;
  *((void *)v13 + 4) = *a4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_21678A04C(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  float v22 = *(float ***)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)unint64_t v13 = *v22;
LABEL_41:
    char *v22 = v13;
    goto LABEL_42;
  }
  *(void *)unint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*(void *)v13)
  {
    unint64_t v23 = *(void *)(*(void *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    float v22 = (float **)(*(void *)a1 + 8 * v23);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_216CB2738(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216CB2754(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C761278;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB27A0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C761278;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CB27D0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  unsigned int v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  long long v10[2] = 0;
  v10[3] = v8;
  void v10[4] = v9;
  sub_216CB2868(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_216CB281C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7612D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB285C()
{
  return &unk_26C7612D8;
}

void sub_216CB2868(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    long long v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a2 + 32);
    sub_216CB291C(a1, v6, a3, (uint64_t)v8);
    sub_216903F4C(a4, v8);
    sub_2168F83DC((uint64_t)v8);
  }
  else
  {
    if ((a3 & 0x4000000000000000) == 0) {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v8, (char *)0x10, *(void *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    sub_216B8FF54((unsigned int **)a4, v8);
  }
}

void sub_216CB2904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CB291C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      uint64_t v8 = a2[1];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
      unint64_t v22 = 0;
      if (v7 > 0x6FF)
      {
        ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1) {
          return;
        }
        unint64_t v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v19)) {
        return;
      }
      uint64_t v8 = a2[1];
      uint64_t v5 = a2[2];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1) {
      return;
    }
    unint64_t v13 = v19;
    unint64_t v22 = v19;
LABEL_13:
    ssize_t v14 = v12 + v5;
    unint64_t v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (BOOL v16 = 16 * v13 > v15) : (BOOL v16 = 1), v16))
    {
      *(void *)&long long v19 = "usd/crateFile.cpp";
      *((void *)&v19 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v20 = 2053;
      *((void *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 16 * v13, v10 - v14, v10);
    }
    else
    {
      unint64_t v23 = &v19;
      sub_216903C50((unint64_t *)a4, v13, &v23);
      sub_216903EB4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(16 * *(void *)a4), v14 + v8);
    }
    return;
  }
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  if (&v19 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    long long v19 = 0u;
    long long v20 = 0u;
    *(void *)(a4 + 32) = v21;
    uint64_t v21 = 0;
  }
  sub_2168F83DC((uint64_t)&v19);
}

void sub_216CB2AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CB2B14(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7612F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB2B60(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7612F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CB2B90(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CB2B98(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C761358)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB2BD8()
{
  return &unk_26C761358;
}

void sub_216CB2BE4(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  _OWORD v9[2] = v6;
  v9[3] = v7;
  int v10 = sub_216C688BC();
  sub_216CB2C64(v5, (uint64_t)v9, v3, v4);
}

void sub_216CB2C64(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v13 = 0;
    memset(__dst, 0, sizeof(__dst));
    long long v6 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v6;
    uint64_t v11 = *(void *)(a2 + 32);
    sub_216CB2D38(a1, v10, a3, (uint64_t)__dst);
    sub_216903F4C(a4, __dst);
    sub_2168F83DC((uint64_t)__dst);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v7 = *(_OWORD *)a2;
    long long v8 = v5;
    uint64_t v9 = *(void *)(a2 + 32);
    if ((a3 & 0x4000000000000000) == 0)
    {
      *((void *)&v7 + 1) = *(void *)(*(void *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_216C82F78((uint64_t)&v7 + 8, __dst, 0x10uLL);
    }
    sub_216B8FF54((unsigned int **)a4, __dst);
  }
}

void sub_216CB2D20(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_216CB2D38(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      long long v7 = a2[1];
      long long v21 = *a2;
      long long v22 = v7;
      uint64_t v23 = *((void *)a2 + 4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91760, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B91760))
      {
        long long v20 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v20) {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
        }
        byte_267B91758 = *v20;
        __cxa_guard_release(&qword_267B91760);
      }
      unint64_t v27 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v21 + 8, &v27, 8uLL)) {
          return;
        }
        unint64_t v8 = v27;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_216C82F78((uint64_t)&v21 + 8, &__dst, 4uLL) & 1) == 0) {
          return;
        }
        unint64_t v8 = __dst;
        unint64_t v27 = __dst;
      }
      unint64_t v10 = 16 * v8;
      uint64_t v11 = *((void *)&v21 + 1);
      if (!byte_267B91758 || v10 < 0x800 || (BYTE8(v21) & 3) != 0)
      {
        uint64_t v14 = *(void *)(*(void *)v22 + 32);
        uint64_t v15 = *((void *)&v21 + 1) - *(void *)(*(void *)v22 + 24);
        unint64_t v16 = v14 - v15;
        if (v15 < 0 || (v16 & 0x8000000000000000) != 0 || (v8 <= v16 ? (BOOL v17 = v10 > v16) : (BOOL v17 = 1), v17))
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2117;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v8, 16 * v8, v16, v14);
        }
        else
        {
          p_dst = &__dst;
          sub_216903C50((unint64_t *)a4, v8, &p_dst);
          sub_216903EB4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v18, v19);
          sub_216C82F78((uint64_t)&v21 + 8, *(void **)(a4 + 32), 16 * *(void *)a4);
        }
      }
      else
      {
        uint64_t v12 = sub_216C99144((uint64_t)&v21 + 8, *((char **)&v21 + 1), 16 * v8, v8);
        if (v12)
        {
          *(void *)&long long v25 = 0;
          *((void *)&v25 + 1) = v12;
          uint64_t v26 = v11;
          long long __dst = v27;
          if (&__dst != (long long *)a4)
          {
            sub_2168F83DC(a4);
            long long v13 = v25;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v13;
            long long __dst = 0u;
            long long v25 = 0u;
            *(void *)(a4 + 32) = v26;
            uint64_t v26 = 0;
          }
          sub_2168F83DC((uint64_t)&__dst);
        }
        else
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2109;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v10);
          sub_2168F845C((void *)a4);
        }
      }
    }
  }
  else
  {
    uint64_t v26 = 0;
    long long __dst = 0u;
    long long v25 = 0u;
    if (&__dst != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v9 = v25;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v9;
      long long __dst = 0u;
      long long v25 = 0u;
      *(void *)(a4 + 32) = v26;
      uint64_t v26 = 0;
    }
    sub_2168F83DC((uint64_t)&__dst);
  }
}

void sub_216CB304C(_Unwind_Exception *a1)
{
}

__n128 sub_216CB309C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C761378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB30E8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C761378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CB3118(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CB3120(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7613D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB3160()
{
  return &unk_26C7613D8;
}

void sub_216CB316C(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CB3218(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CB31F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CB3218(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v14 = 0;
    memset(v13, 0, sizeof(v13));
    long long v10 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v11 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *((void *)a2 + 3);
    sub_216CB334C(a1, &v10, a3, (uint64_t)v13);
    if (v11) {
      sub_216784EC4(v11);
    }
    sub_216903F4C(a4, v13);
    sub_2168F83DC((uint64_t)v13);
  }
  else
  {
    long long v7 = *a2;
    long long v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v8 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *((void *)a2 + 3);
    if ((a3 & 0x4000000000000000) == 0)
    {
      uint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
      sub_216C804FC((void *)&v7 + 1, (uint64_t)v13, 0x10uLL);
      long long v5 = v8;
    }
    if (v5) {
      sub_216784EC4(v5);
    }
    sub_216B8FF54((unsigned int **)a4, v13);
  }
}

void sub_216CB3308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CB334C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v21) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v21, 4uLL)) {
        return;
      }
    }
    uint64_t v7 = a2[1];
    uint64_t v8 = (std::__shared_weak_count *)a2[2];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = a2[3];
      uint64_t v18 = v7;
      long long v19 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = a2[3];
      uint64_t v18 = a2[1];
      long long v19 = 0;
    }
    uint64_t v20 = v9;
    unint64_t v24 = 0;
    if (v6 > 0x6FF)
    {
      if (sub_216C804FC(&v18, (uint64_t)&v24, 8uLL))
      {
LABEL_14:
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
        unint64_t v12 = v11 - v20;
        unint64_t v13 = v24;
        if (v20 < 0 || (v12 & 0x8000000000000000) != 0 || (v24 <= v12 ? (BOOL v14 = 16 * v24 > v12) : (BOOL v14 = 1), v14))
        {
          *(void *)&long long v21 = "usd/crateFile.cpp";
          *((void *)&v21 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v22 = 2053;
          *((void *)&v22 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
          LOBYTE(v23) = 0;
          uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 16 * v13, v12, v17);
        }
        else
        {
          long long v25 = &v21;
          sub_216903C50((unint64_t *)a4, v24, &v25);
          sub_216903EB4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
          sub_216C804FC(&v18, *(void *)(a4 + 32), 16 * *(void *)a4);
        }
      }
    }
    else
    {
      LODWORD(v21) = 0;
      if (sub_216C804FC(&v18, (uint64_t)&v21, 4uLL))
      {
        unint64_t v24 = v21;
        goto LABEL_14;
      }
    }
    if (v19) {
      sub_216784EC4(v19);
    }
    if (v8) {
      sub_216784EC4(v8);
    }
    return;
  }
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  if (&v21 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v10 = v22;
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v10;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a4 + 32) = v23;
    uint64_t v23 = 0;
  }
  sub_2168F83DC((uint64_t)&v21);
}

void sub_216CB35B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CB35F4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7613F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB3640(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7613F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CB3670(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return sub_216CB36D0(*(uint64_t **)(a1 + 16), *(void *)(a1 + 8), (void *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), this);
}

uint64_t sub_216CB3684(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C761458)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB36C4()
{
  return &unk_26C761458;
}

unint64_t sub_216CB36D0(uint64_t *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v4 = this;
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)v4 + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      uint64_t v10 = *(void *)v4;
    }
    return sub_216CB37FC((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    v18[0] = a2;
    v18[1] = a3;
    uint64_t v12 = *a1;
    if (!*a1)
    {
      unint64_t v13 = operator new(0x28uLL);
      _OWORD *v13 = 0u;
      v13[1] = 0u;
      *((_DWORD *)v13 + 8) = 1065353216;
      sub_2168CAEA8(a1, (uint64_t)v13);
      uint64_t v12 = *a1;
    }
    uint64_t v17 = 0;
    BOOL v14 = sub_216CB3C6C(v12, (unsigned __int16 *)v4, v4, &v17);
    uint64_t v15 = v14;
    if (v16)
    {
      *((void *)v14 + 3) = *a3 & 0xFFFFFFFFFFFFLL | 0x12000000000000;
      sub_216C80458((uint64_t)v18, (char *)v4);
    }
    return *((void *)v15 + 3);
  }
}

unint64_t sub_216CB37FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a2;
  v19[1] = a3;
  unint64_t result = 0x8012000000000000;
  unint64_t v18 = 0x8012000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      uint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7BD20(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    unint64_t v13 = sub_216CB3980(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        uint64_t v17 = sub_216C98168((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          uint64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(void *)a4;
          sub_216C984FC((uint64_t)v20, (char *)&__src);
        }
        sub_216C9E7BC((uint64_t)v20, *(char **)(a4 + 32), *(void *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8012000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(void *)a4;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        sub_216C9E7BC((uint64_t)v19, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

uint64_t *sub_216CB3980(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = sub_216904E80((uint64_t)v32, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (uint64_t *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_216904F84(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (uint64_t *)(a1 + 16);
  unint64_t v18 = operator new(0x40uLL);
  int i = (uint64_t *)v18;
  uint64_t v33 = a1 + 16;
  *(void *)unint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    long long v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      long long v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  long long v29 = *(uint64_t **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *long long v29 = (uint64_t)i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = (uint64_t)i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    long long v29 = (uint64_t *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CB3BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CB3C14(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CB3C14(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

unsigned __int16 *sub_216CB3C6C(uint64_t a1, unsigned __int16 *a2, void *a3, uint64_t *a4)
{
  unsigned __int16 v27 = a2[3];
  uint64_t v28 = 0;
  char v29 = 0;
  sub_2168F7A3C((uint64_t)&v28, &v27, a2);
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v28));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      char v14 = (unsigned __int16 *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v9)
          {
            if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v14[11]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]]
              && sub_2168F450C(v14 + 8, a2))
            {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          char v14 = *(unsigned __int16 **)v14;
        }
        while (v14);
      }
    }
  }
  char v14 = (unsigned __int16 *)operator new(0x20uLL);
  *(void *)char v14 = 0;
  *((void *)v14 + 1) = v9;
  uint64_t v16 = *a4;
  *((void *)v14 + 2) = *a3;
  *((void *)v14 + 3) = v16;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  BOOL v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)char v14 = *v24;
LABEL_39:
    void *v24 = v14;
    goto LABEL_40;
  }
  *(void *)char v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v25 = *(void *)(*(void *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    BOOL v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_39;
  }
LABEL_40:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_216CB3F04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216CB3F20(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C761478;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB3F6C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C761478;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CB3F9C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  unsigned int v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  long long v10[2] = 0;
  v10[3] = v8;
  void v10[4] = v9;
  sub_216CB4034(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_216CB3FE8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7614D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB4028()
{
  return &unk_26C7614D8;
}

void sub_216CB4034(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    long long v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a2 + 32);
    sub_216CB40E8(a1, v6, a3, (uint64_t)v8);
    sub_216904B08(a4, v8);
    sub_2168F83DC((uint64_t)v8);
  }
  else
  {
    if ((a3 & 0x4000000000000000) == 0) {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v8, (char *)8, *(void *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    sub_216B8FCC0(a4, (uint64_t *)v8);
  }
}

void sub_216CB40D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CB40E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      uint64_t v8 = a2[1];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
      unint64_t v22 = 0;
      if (v7 > 0x6FF)
      {
        ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1) {
          return;
        }
        unint64_t v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v19)) {
        return;
      }
      uint64_t v8 = a2[1];
      uint64_t v5 = a2[2];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1) {
      return;
    }
    unint64_t v13 = v19;
    unint64_t v22 = v19;
LABEL_13:
    ssize_t v14 = v12 + v5;
    unint64_t v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (BOOL v16 = 8 * v13 > v15) : (BOOL v16 = 1), v16))
    {
      *(void *)&long long v19 = "usd/crateFile.cpp";
      *((void *)&v19 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v20 = 2053;
      *((void *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfQuath]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 8 * v13, v10 - v14, v10);
    }
    else
    {
      *(void *)&long long v19 = &v23;
      sub_216904808((unint64_t *)a4, v13, (uint64_t **)&v19);
      sub_216904A70((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(8 * *(void *)a4), v14 + v8);
    }
    return;
  }
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  if (&v19 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    long long v19 = 0u;
    long long v20 = 0u;
    *(void *)(a4 + 32) = v21;
    uint64_t v21 = 0;
  }
  sub_2168F83DC((uint64_t)&v19);
}

void sub_216CB42BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CB42E0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7614F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB432C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7614F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CB435C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CB4364(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C761558)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB43A4()
{
  return &unk_26C761558;
}

void sub_216CB43B0(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  _OWORD v9[2] = v6;
  v9[3] = v7;
  int v10 = sub_216C688BC();
  sub_216CB4430(v5, (uint64_t)v9, v3, v4);
}

void sub_216CB4430(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v13 = 0;
    memset(__dst, 0, sizeof(__dst));
    long long v6 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v6;
    uint64_t v11 = *(void *)(a2 + 32);
    sub_216CB4504(a1, v10, a3, (uint64_t)__dst);
    sub_216904B08(a4, __dst);
    sub_2168F83DC((uint64_t)__dst);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v7 = *(_OWORD *)a2;
    long long v8 = v5;
    uint64_t v9 = *(void *)(a2 + 32);
    if ((a3 & 0x4000000000000000) == 0)
    {
      *((void *)&v7 + 1) = *(void *)(*(void *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_216C82F78((uint64_t)&v7 + 8, __dst, 8uLL);
    }
    sub_216B8FCC0(a4, (uint64_t *)__dst);
  }
}

void sub_216CB44EC(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_216CB4504(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      long long v7 = a2[1];
      long long v21 = *a2;
      long long v22 = v7;
      uint64_t v23 = *((void *)a2 + 4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91770, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B91770))
      {
        long long v20 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v20) {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
        }
        byte_267B91768 = *v20;
        __cxa_guard_release(&qword_267B91770);
      }
      unint64_t v27 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v21 + 8, &v27, 8uLL)) {
          return;
        }
        unint64_t v8 = v27;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_216C82F78((uint64_t)&v21 + 8, &__dst, 4uLL) & 1) == 0) {
          return;
        }
        unint64_t v8 = __dst;
        unint64_t v27 = __dst;
      }
      unint64_t v10 = 8 * v8;
      uint64_t v11 = *((void *)&v21 + 1);
      if (!byte_267B91768 || v10 < 0x800 || (BYTE8(v21) & 1) != 0)
      {
        uint64_t v14 = *(void *)(*(void *)v22 + 32);
        uint64_t v15 = *((void *)&v21 + 1) - *(void *)(*(void *)v22 + 24);
        unint64_t v16 = v14 - v15;
        if (v15 < 0 || (v16 & 0x8000000000000000) != 0 || (v8 <= v16 ? (BOOL v17 = v10 > v16) : (BOOL v17 = 1), v17))
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2117;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfQuath]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v8, 8 * v8, v16, v14);
        }
        else
        {
          *(void *)&long long __dst = &v28;
          sub_216904808((unint64_t *)a4, v8, (uint64_t **)&__dst);
          sub_216904A70((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v18, v19);
          sub_216C82F78((uint64_t)&v21 + 8, *(void **)(a4 + 32), 8 * *(void *)a4);
        }
      }
      else
      {
        uint64_t v12 = sub_216C99144((uint64_t)&v21 + 8, *((char **)&v21 + 1), 8 * v8, v8);
        if (v12)
        {
          *(void *)&long long v25 = 0;
          *((void *)&v25 + 1) = v12;
          uint64_t v26 = v11;
          long long __dst = v27;
          if (&__dst != (long long *)a4)
          {
            sub_2168F83DC(a4);
            long long v13 = v25;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v13;
            long long __dst = 0u;
            long long v25 = 0u;
            *(void *)(a4 + 32) = v26;
            uint64_t v26 = 0;
          }
          sub_2168F83DC((uint64_t)&__dst);
        }
        else
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2109;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfQuath]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v10);
          sub_2168F845C((void *)a4);
        }
      }
    }
  }
  else
  {
    uint64_t v26 = 0;
    long long __dst = 0u;
    long long v25 = 0u;
    if (&__dst != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v9 = v25;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v9;
      long long __dst = 0u;
      long long v25 = 0u;
      *(void *)(a4 + 32) = v26;
      uint64_t v26 = 0;
    }
    sub_2168F83DC((uint64_t)&__dst);
  }
}

void sub_216CB4814(_Unwind_Exception *a1)
{
}

__n128 sub_216CB4864(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C761578;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB48B0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C761578;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CB48E0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CB48E8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7615D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB4928()
{
  return &unk_26C7615D8;
}

void sub_216CB4934(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CB49E0(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CB49BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CB49E0(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v14 = 0;
    memset(v13, 0, sizeof(v13));
    long long v10 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v11 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *((void *)a2 + 3);
    sub_216CB4B14(a1, &v10, a3, (uint64_t)v13);
    if (v11) {
      sub_216784EC4(v11);
    }
    sub_216904B08(a4, v13);
    sub_2168F83DC((uint64_t)v13);
  }
  else
  {
    long long v7 = *a2;
    long long v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v8 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *((void *)a2 + 3);
    if ((a3 & 0x4000000000000000) == 0)
    {
      uint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
      sub_216C804FC((void *)&v7 + 1, (uint64_t)v13, 8uLL);
      long long v5 = v8;
    }
    if (v5) {
      sub_216784EC4(v5);
    }
    sub_216B8FCC0(a4, (uint64_t *)v13);
  }
}

void sub_216CB4AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CB4B14(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v21) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v21, 4uLL)) {
        return;
      }
    }
    uint64_t v7 = a2[1];
    uint64_t v8 = (std::__shared_weak_count *)a2[2];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = a2[3];
      uint64_t v18 = v7;
      long long v19 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = a2[3];
      uint64_t v18 = a2[1];
      long long v19 = 0;
    }
    uint64_t v20 = v9;
    unint64_t v24 = 0;
    if (v6 > 0x6FF)
    {
      if (sub_216C804FC(&v18, (uint64_t)&v24, 8uLL))
      {
LABEL_14:
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
        unint64_t v12 = v11 - v20;
        unint64_t v13 = v24;
        if (v20 < 0 || (v12 & 0x8000000000000000) != 0 || (v24 <= v12 ? (BOOL v14 = 8 * v24 > v12) : (BOOL v14 = 1), v14))
        {
          *(void *)&long long v21 = "usd/crateFile.cpp";
          *((void *)&v21 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v22 = 2053;
          *((void *)&v22 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfQuath]";
          LOBYTE(v23) = 0;
          uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 8 * v13, v12, v17);
        }
        else
        {
          *(void *)&long long v21 = &v25;
          sub_216904808((unint64_t *)a4, v24, (uint64_t **)&v21);
          sub_216904A70((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
          sub_216C804FC(&v18, *(void *)(a4 + 32), 8 * *(void *)a4);
        }
      }
    }
    else
    {
      LODWORD(v21) = 0;
      if (sub_216C804FC(&v18, (uint64_t)&v21, 4uLL))
      {
        unint64_t v24 = v21;
        goto LABEL_14;
      }
    }
    if (v19) {
      sub_216784EC4(v19);
    }
    if (v8) {
      sub_216784EC4(v8);
    }
    return;
  }
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  if (&v21 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v10 = v22;
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v10;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a4 + 32) = v23;
    uint64_t v23 = 0;
  }
  sub_2168F83DC((uint64_t)&v21);
}

void sub_216CB4D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CB4DBC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7615F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB4E08(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7615F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CB4E38(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return sub_216CB4E98(*(uint64_t **)(a1 + 16), *(void *)(a1 + 8), (void *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), this);
}

uint64_t sub_216CB4E4C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C761658)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB4E8C()
{
  return &unk_26C761658;
}

unint64_t sub_216CB4E98(uint64_t *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    }
    else {
      uint64_t v10 = *(void *)this;
    }
    return sub_216CB4FEC((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      unint64_t v12 = (double *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(this);
    else {
      unint64_t v12 = *(double **)this;
    }
    v20[0] = a2;
    v20[1] = a3;
    unsigned int v19 = 0;
    if (sub_216CB545C(&v19, *v12, v12[1]))
    {
      return v19 | 0x4013000000000000;
    }
    else
    {
      uint64_t v13 = *a1;
      if (!*a1)
      {
        BOOL v14 = operator new(0x28uLL);
        _OWORD *v14 = 0u;
        v14[1] = 0u;
        *((_DWORD *)v14 + 8) = 1065353216;
        sub_2168CAEA8(a1, (uint64_t)v14);
        uint64_t v13 = *a1;
      }
      double v18 = 0.0;
      uint64_t v15 = sub_216CB54D8(v13, v12, v12, &v18);
      unint64_t v16 = v15;
      if (v17)
      {
        *((void *)v15 + 4) = *a3 & 0xFFFFFFFFFFFFLL | 0x13000000000000;
        sub_216C944BC((uint64_t)v20, (char *)v12);
      }
      return *((void *)v16 + 4);
    }
  }
}

unint64_t sub_216CB4FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a2;
  v19[1] = a3;
  unint64_t result = 0x8013000000000000;
  unint64_t v18 = 0x8013000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      unint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7BDE0(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    uint64_t v13 = sub_216CB5170(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        uint64_t v17 = sub_216C98168((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          uint64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(void *)a4;
          sub_216C984FC((uint64_t)v20, (char *)&__src);
        }
        sub_216C93DB8((uint64_t)v20, *(char **)(a4 + 32), *(void *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8013000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(void *)a4;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        sub_216C93DB8((uint64_t)v19, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void *sub_216CB5170(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = sub_2168FC8A8((uint64_t)v32, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_2168FC990(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  unint64_t v18 = operator new(0x40uLL);
  int i = v18;
  uint64_t v33 = a1 + 16;
  *(void *)unint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    long long v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      long long v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  char v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *char v29 = i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    char v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CB53E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CB5404(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CB5404(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t sub_216CB545C(_WORD *a1, double a2, double a3)
{
  uint64_t v3 = 0;
  *(double *)uint64_t v8 = a2;
  *(double *)&v8[1] = a3;
  while (1)
  {
    uint64_t v4 = 0;
    double v5 = *(double *)&v8[v3];
    if (v5 < -128.0 || v5 > 127.0) {
      break;
    }
    if (v5 != (double)(int)v5) {
      return 0;
    }
    *((unsigned char *)&v7 + v3++) = (int)v5;
    if (v3 == 2)
    {
      *a1 = v7;
      return 1;
    }
  }
  return v4;
}

double *sub_216CB54D8(uint64_t a1, double *a2, _OWORD *a3, double *a4)
{
  double v8 = a2[1];
  uint64_t v9 = 0;
  if (*a2 == 0.0) {
    double v10 = 0.0;
  }
  else {
    double v10 = *a2;
  }
  if (v8 != 0.0) {
    uint64_t v9 = *((void *)a2 + 1);
  }
  unint64_t v11 = bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55* (v9 + ((unint64_t)(v9 + *(void *)&v10 + (v9 + *(void *)&v10) * (v9 + *(void *)&v10)) >> 1))));
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
    }
    else
    {
      unint64_t v4 = v11 & (v12 - 1);
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = (double *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = *((void *)v15 + 1);
          if (v16 == v11)
          {
            if (v15[2] == *a2 && v15[3] == v8) {
              return v15;
            }
          }
          else
          {
            if (v13.u32[0] > 1uLL)
            {
              if (v16 >= v12) {
                v16 %= v12;
              }
            }
            else
            {
              v16 &= v12 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          uint64_t v15 = *(double **)v15;
        }
        while (v15);
      }
    }
  }
  uint64_t v15 = (double *)operator new(0x28uLL);
  *uint64_t v15 = 0.0;
  *((void *)v15 + 1) = v11;
  *((_OWORD *)v15 + 1) = *a3;
  v15[4] = *a4;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_21678A04C(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v24 = *(void *)a1;
  unint64_t v25 = *(double ***)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)uint64_t v15 = *v25;
LABEL_47:
    long long *v25 = v15;
    goto LABEL_48;
  }
  *uint64_t v15 = *(double *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v24 + 8 * v4) = a1 + 16;
  if (*(void *)v15)
  {
    unint64_t v26 = *(void *)(*(void *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v26 >= v12) {
        v26 %= v12;
      }
    }
    else
    {
      v26 &= v12 - 1;
    }
    unint64_t v25 = (double **)(*(void *)a1 + 8 * v26);
    goto LABEL_47;
  }
LABEL_48:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_216CB5740(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216CB575C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C761678;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB57A8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C761678;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_216CB57D8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  unsigned int v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v11[0] = v6;
  v11[1] = v7;
  long long v11[2] = 0;
  void v11[3] = v8;
  v11[4] = v9;
  return sub_216CB5870(v5, (uint64_t)v11, v3, v4);
}

uint64_t sub_216CB5824(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7616D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB5864()
{
  return &unk_26C7616D8;
}

double sub_216CB5870(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v10 = 0;
    memset(v9, 0, sizeof(v9));
    long long v5 = *(_OWORD *)(a2 + 16);
    v7[0] = *(_OWORD *)a2;
    v7[1] = v5;
    uint64_t v8 = *(void *)(a2 + 32);
    sub_216CB593C(a1, v7, a3, (uint64_t)v9);
    sub_2168FC4F8(a4, v9);
    sub_2168F83DC((uint64_t)v9);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0)
    {
      v9[0].n128_f64[0] = (double)(char)a3;
      v9[0].n128_f64[1] = (double)((__int16)a3 >> 8);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v9, (char *)0x10, *(void *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    *(void *)&double result = sub_216B90ACC((unsigned int **)a4, v9).n128_u64[0];
  }
  return result;
}

void sub_216CB5924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CB593C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      uint64_t v8 = a2[1];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
      unint64_t v22 = 0;
      if (v7 > 0x6FF)
      {
        ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1) {
          return;
        }
        unint64_t v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v19)) {
        return;
      }
      uint64_t v8 = a2[1];
      uint64_t v5 = a2[2];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1) {
      return;
    }
    unint64_t v13 = v19;
    unint64_t v22 = v19;
LABEL_13:
    ssize_t v14 = v12 + v5;
    unint64_t v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (BOOL v16 = 16 * v13 > v15) : (BOOL v16 = 1), v16))
    {
      *(void *)&long long v19 = "usd/crateFile.cpp";
      *((void *)&v19 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v20 = 2053;
      *((void *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 16 * v13, v10 - v14, v10);
    }
    else
    {
      long long v19 = 0uLL;
      size_t v23 = &v19;
      sub_2168FC1FC((unint64_t *)a4, v13, &v23);
      sub_2168FC460((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(16 * *(void *)a4), v14 + v8);
    }
    return;
  }
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  if (&v19 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    long long v19 = 0u;
    long long v20 = 0u;
    *(void *)(a4 + 32) = v21;
    uint64_t v21 = 0;
  }
  sub_2168F83DC((uint64_t)&v19);
}

void sub_216CB5B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CB5B38(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7616F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB5B84(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7616F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_216CB5BB4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_216CB5C08((void *)(a1 + 8), a2, a3);
}

uint64_t sub_216CB5BBC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C761758)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB5BFC()
{
  return &unk_26C761758;
}

double sub_216CB5C08(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v10[0] = *a1;
  v10[1] = v8;
  long long v10[2] = v6;
  v10[3] = v7;
  int v11 = sub_216C688BC();
  return sub_216CB5C88(v5, (uint64_t)v10, v3, v4);
}

double sub_216CB5C88(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v14 = 0;
    memset(&__dst, 0, 32);
    long long v6 = *(_OWORD *)(a2 + 16);
    v11[0] = *(_OWORD *)a2;
    v11[1] = v6;
    uint64_t v12 = *(void *)(a2 + 32);
    sub_216CB5D74(a1, v11, a3, (uint64_t)&__dst);
    sub_2168FC4F8(a4, &__dst);
    sub_2168F83DC((uint64_t)&__dst);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v8 = *(_OWORD *)a2;
    long long v9 = v5;
    uint64_t v10 = *(void *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      __dst.n128_f64[0] = (double)(char)a3;
      __dst.n128_f64[1] = (double)((__int16)a3 >> 8);
    }
    else
    {
      *((void *)&v8 + 1) = *(void *)(*(void *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_216C82F78((uint64_t)&v8 + 8, &__dst, 0x10uLL);
    }
    *(void *)&double result = sub_216B90ACC((unsigned int **)a4, &__dst).n128_u64[0];
  }
  return result;
}

void sub_216CB5D5C(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_216CB5D74(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      long long v7 = a2[1];
      long long v21 = *a2;
      long long v22 = v7;
      uint64_t v23 = *((void *)a2 + 4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91780, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B91780))
      {
        long long v20 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v20) {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
        }
        byte_267B91778 = *v20;
        __cxa_guard_release(&qword_267B91780);
      }
      unint64_t v27 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v21 + 8, &v27, 8uLL)) {
          return;
        }
        unint64_t v8 = v27;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_216C82F78((uint64_t)&v21 + 8, &__dst, 4uLL) & 1) == 0) {
          return;
        }
        unint64_t v8 = __dst;
        unint64_t v27 = __dst;
      }
      unint64_t v10 = 16 * v8;
      uint64_t v11 = *((void *)&v21 + 1);
      if (!byte_267B91778 || v10 < 0x800 || (BYTE8(v21) & 7) != 0)
      {
        uint64_t v14 = *(void *)(*(void *)v22 + 32);
        uint64_t v15 = *((void *)&v21 + 1) - *(void *)(*(void *)v22 + 24);
        unint64_t v16 = v14 - v15;
        if (v15 < 0 || (v16 & 0x8000000000000000) != 0 || (v8 <= v16 ? (BOOL v17 = v10 > v16) : (BOOL v17 = 1), v17))
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2117;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v8, 16 * v8, v16, v14);
        }
        else
        {
          long long __dst = 0uLL;
          p_dst = &__dst;
          sub_2168FC1FC((unint64_t *)a4, v8, &p_dst);
          sub_2168FC460((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v18, v19);
          sub_216C82F78((uint64_t)&v21 + 8, *(void **)(a4 + 32), 16 * *(void *)a4);
        }
      }
      else
      {
        uint64_t v12 = sub_216C99144((uint64_t)&v21 + 8, *((char **)&v21 + 1), 16 * v8, v8);
        if (v12)
        {
          *(void *)&long long v25 = 0;
          *((void *)&v25 + 1) = v12;
          uint64_t v26 = v11;
          long long __dst = v27;
          if (&__dst != (long long *)a4)
          {
            sub_2168F83DC(a4);
            long long v13 = v25;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v13;
            long long __dst = 0u;
            long long v25 = 0u;
            *(void *)(a4 + 32) = v26;
            uint64_t v26 = 0;
          }
          sub_2168F83DC((uint64_t)&__dst);
        }
        else
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2109;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v10);
          sub_2168F845C((void *)a4);
        }
      }
    }
  }
  else
  {
    uint64_t v26 = 0;
    long long __dst = 0u;
    long long v25 = 0u;
    if (&__dst != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v9 = v25;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v9;
      long long __dst = 0u;
      long long v25 = 0u;
      *(void *)(a4 + 32) = v26;
      uint64_t v26 = 0;
    }
    sub_2168F83DC((uint64_t)&__dst);
  }
}

void sub_216CB608C(_Unwind_Exception *a1)
{
}

__n128 sub_216CB60DC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C761778;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB6128(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C761778;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CB6158(uint64_t a1, uint64_t *a2, unsigned int ***a3)
{
}

uint64_t sub_216CB6160(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7617D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB61A0()
{
  return &unk_26C7617D8;
}

void sub_216CB61AC(uint64_t *a1, uint64_t *a2, unsigned int ***a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CB6258(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CB6234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

double sub_216CB6258(uint64_t a1, long long *a2, uint64_t a3, unsigned int **a4)
{
  if ((a3 & 0x8000000000000000) == 0)
  {
    long long v8 = *a2;
    long long v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
    long long v9 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *((void *)a2 + 3);
    if ((a3 & 0x4000000000000000) != 0)
    {
      v14.n128_f64[0] = (double)(char)a3;
      v14.n128_f64[1] = (double)((__int16)a3 >> 8);
      if (!v5)
      {
LABEL_14:
        *(void *)&double result = sub_216B90ACC(a4, &v14).n128_u64[0];
        return result;
      }
    }
    else
    {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
      sub_216C804FC((void *)&v8 + 1, (uint64_t)&v14, 0x10uLL);
      long long v5 = v9;
      if (!v9) {
        goto LABEL_14;
      }
    }
    sub_216784EC4(v5);
    goto LABEL_14;
  }
  uint64_t v15 = 0;
  memset(&v14, 0, 32);
  long long v11 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
  uint64_t v12 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *((void *)a2 + 3);
  sub_216CB63A8(a1, &v11, a3, (uint64_t)&v14);
  if (v12) {
    sub_216784EC4(v12);
  }
  sub_2168FC4F8((pxrInternal__aapl__pxrReserved__::VtValue *)a4, &v14);
  sub_2168F83DC((uint64_t)&v14);
  return result;
}

void sub_216CB6364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CB63A8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v21) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v21, 4uLL)) {
        return;
      }
    }
    uint64_t v7 = a2[1];
    long long v8 = (std::__shared_weak_count *)a2[2];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = a2[3];
      uint64_t v18 = v7;
      long long v19 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = a2[3];
      uint64_t v18 = a2[1];
      long long v19 = 0;
    }
    uint64_t v20 = v9;
    unint64_t v24 = 0;
    if (v6 > 0x6FF)
    {
      if (sub_216C804FC(&v18, (uint64_t)&v24, 8uLL))
      {
LABEL_14:
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
        unint64_t v12 = v11 - v20;
        unint64_t v13 = v24;
        if (v20 < 0 || (v12 & 0x8000000000000000) != 0 || (v24 <= v12 ? (BOOL v14 = 16 * v24 > v12) : (BOOL v14 = 1), v14))
        {
          *(void *)&long long v21 = "usd/crateFile.cpp";
          *((void *)&v21 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v22 = 2053;
          *((void *)&v22 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
          LOBYTE(v23) = 0;
          uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 16 * v13, v12, v17);
        }
        else
        {
          long long v21 = 0uLL;
          long long v25 = &v21;
          sub_2168FC1FC((unint64_t *)a4, v24, &v25);
          sub_2168FC460((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
          sub_216C804FC(&v18, *(void *)(a4 + 32), 16 * *(void *)a4);
        }
      }
    }
    else
    {
      LODWORD(v21) = 0;
      if (sub_216C804FC(&v18, (uint64_t)&v21, 4uLL))
      {
        unint64_t v24 = v21;
        goto LABEL_14;
      }
    }
    if (v19) {
      sub_216784EC4(v19);
    }
    if (v8) {
      sub_216784EC4(v8);
    }
    return;
  }
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  if (&v21 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v10 = v22;
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v10;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a4 + 32) = v23;
    uint64_t v23 = 0;
  }
  sub_2168F83DC((uint64_t)&v21);
}

void sub_216CB6610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CB6654(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7617F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB66A0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7617F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CB66D0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return sub_216CB6730(*(uint64_t **)(a1 + 16), *(void *)(a1 + 8), (void *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), this);
}

uint64_t sub_216CB66E4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C761858)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB6724()
{
  return &unk_26C761858;
}

unint64_t sub_216CB6730(uint64_t *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v4 = this;
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)v4 + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      uint64_t v10 = *(void *)v4;
    }
    return sub_216CB6880((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    v19[0] = a2;
    v19[1] = a3;
    unsigned int v18 = 0;
    if (sub_216CB6CF0(&v18, *(float *)v4, *((float *)v4 + 1)))
    {
      return v18 | 0x4014000000000000;
    }
    else
    {
      uint64_t v12 = *a1;
      if (!*a1)
      {
        unint64_t v13 = operator new(0x28uLL);
        _OWORD *v13 = 0u;
        v13[1] = 0u;
        *((_DWORD *)v13 + 8) = 1065353216;
        sub_2168CAEA8(a1, (uint64_t)v13);
        uint64_t v12 = *a1;
      }
      uint64_t v17 = 0;
      BOOL v14 = sub_216CB6D5C(v12, (float *)v4, v4, &v17);
      uint64_t v15 = v14;
      if (v16)
      {
        *((void *)v14 + 3) = *a3 & 0xFFFFFFFFFFFFLL | 0x14000000000000;
        sub_216C80458((uint64_t)v19, (char *)v4);
      }
      return *((void *)v15 + 3);
    }
  }
}

unint64_t sub_216CB6880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a2;
  v19[1] = a3;
  unint64_t result = 0x8014000000000000;
  unint64_t v18 = 0x8014000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      uint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7BEA0(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    unint64_t v13 = sub_216CB6A04(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        uint64_t v17 = sub_216C98168((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          uint64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(void *)a4;
          sub_216C984FC((uint64_t)v20, (char *)&__src);
        }
        sub_216C9E7BC((uint64_t)v20, *(char **)(a4 + 32), *(void *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8014000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(void *)a4;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        sub_216C9E7BC((uint64_t)v19, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void *sub_216CB6A04(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = sub_2168FB198((uint64_t)v32, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_2168FB280(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  unint64_t v18 = operator new(0x40uLL);
  int i = v18;
  uint64_t v33 = a1 + 16;
  *(void *)unint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    long long v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      long long v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  char v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *char v29 = i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    char v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CB6C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CB6C98(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CB6C98(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t sub_216CB6CF0(_WORD *a1, float a2, float a3)
{
  uint64_t v3 = 0;
  *(float *)long long v8 = a2;
  *(float *)&v8[1] = a3;
  while (1)
  {
    float v4 = *(float *)&v8[v3];
    BOOL v5 = v4 < -128.0 || v4 > 127.0;
    if (v5 || v4 != (float)(int)v4) {
      break;
    }
    *((unsigned char *)&v7 + v3++) = (int)v4;
    if (v3 == 2)
    {
      *a1 = v7;
      return 1;
    }
  }
  return 0;
}

float *sub_216CB6D5C(uint64_t a1, float *a2, void *a3, uint64_t *a4)
{
  float v8 = a2[1];
  unsigned int v9 = 0;
  if (*a2 == 0.0) {
    float v10 = 0.0;
  }
  else {
    float v10 = *a2;
  }
  if (v8 != 0.0) {
    unsigned int v9 = *((_DWORD *)a2 + 1);
  }
  unint64_t v11 = bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55* (v9+ ((v9+ (unint64_t)LODWORD(v10)+ (v9 + (unint64_t)LODWORD(v10)) * (v9 + (unint64_t)LODWORD(v10))) >> 1))));
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
    }
    else
    {
      unint64_t v4 = v11 & (v12 - 1);
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = (float *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = *((void *)v15 + 1);
          if (v16 == v11)
          {
            if (v15[4] == *a2 && v15[5] == v8) {
              return v15;
            }
          }
          else
          {
            if (v13.u32[0] > 1uLL)
            {
              if (v16 >= v12) {
                v16 %= v12;
              }
            }
            else
            {
              v16 &= v12 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          uint64_t v15 = *(float **)v15;
        }
        while (v15);
      }
    }
  }
  uint64_t v15 = (float *)operator new(0x20uLL);
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v11;
  uint64_t v18 = *a4;
  *((void *)v15 + 2) = *a3;
  *((void *)v15 + 3) = v18;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v12 || (float)(v20 * (float)v12) < v19)
  {
    BOOL v21 = 1;
    if (v12 >= 3) {
      BOOL v21 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v12);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_21678A04C(a1, v24);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v25 = *(void *)a1;
  unint64_t v26 = *(float ***)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)uint64_t v15 = *v26;
LABEL_47:
    pxrInternal__aapl__pxrReserved__ *v26 = v15;
    goto LABEL_48;
  }
  *(void *)uint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v25 + 8 * v4) = a1 + 16;
  if (*(void *)v15)
  {
    unint64_t v27 = *(void *)(*(void *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v27 >= v12) {
        v27 %= v12;
      }
    }
    else
    {
      v27 &= v12 - 1;
    }
    unint64_t v26 = (float **)(*(void *)a1 + 8 * v27);
    goto LABEL_47;
  }
LABEL_48:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_216CB6FC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216CB6FDC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C761878;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB7028(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C761878;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CB7058(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  unsigned int v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  long long v10[2] = 0;
  v10[3] = v8;
  void v10[4] = v9;
  sub_216CB70F0(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_216CB70A4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7618D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB70E4()
{
  return &unk_26C7618D8;
}

void sub_216CB70F0(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    long long v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a2 + 32);
    sub_216CB71BC(a1, v6, a3, (uint64_t)v8);
    sub_2168FADE8(a4, v8);
    sub_2168F83DC((uint64_t)v8);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0)
    {
      v8[0].n128_f32[0] = (float)(char)a3;
      v8[0].n128_f32[1] = (float)((__int16)a3 >> 8);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v8, (char *)8, *(void *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    sub_216B90A0C(a4, (uint64_t *)v8);
  }
}

void sub_216CB71A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CB71BC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      uint64_t v8 = a2[1];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
      unint64_t v22 = 0;
      if (v7 > 0x6FF)
      {
        ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1) {
          return;
        }
        unint64_t v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v19)) {
        return;
      }
      uint64_t v8 = a2[1];
      uint64_t v5 = a2[2];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1) {
      return;
    }
    unint64_t v13 = v19;
    unint64_t v22 = v19;
LABEL_13:
    ssize_t v14 = v12 + v5;
    unint64_t v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (BOOL v16 = 8 * v13 > v15) : (BOOL v16 = 1), v16))
    {
      *(void *)&long long v19 = "usd/crateFile.cpp";
      *((void *)&v19 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v20 = 2053;
      *((void *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 8 * v13, v10 - v14, v10);
    }
    else
    {
      uint64_t v23 = 0;
      *(void *)&long long v19 = &v23;
      sub_2168FAAE8((unint64_t *)a4, v13, (uint64_t **)&v19);
      sub_2168FAD50((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(8 * *(void *)a4), v14 + v8);
    }
    return;
  }
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  if (&v19 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    long long v19 = 0u;
    long long v20 = 0u;
    *(void *)(a4 + 32) = v21;
    uint64_t v21 = 0;
  }
  sub_2168F83DC((uint64_t)&v19);
}

void sub_216CB7394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CB73B8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7618F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB7404(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7618F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CB7434(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CB743C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C761958)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB747C()
{
  return &unk_26C761958;
}

void sub_216CB7488(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  __n128 v9[2] = v6;
  v9[3] = v7;
  int v10 = sub_216C688BC();
  sub_216CB7508(v5, (uint64_t)v9, v3, v4);
}

void sub_216CB7508(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v13 = 0;
    memset(&__dst, 0, 32);
    long long v6 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v6;
    uint64_t v11 = *(void *)(a2 + 32);
    sub_216CB75F4(a1, v10, a3, (uint64_t)&__dst);
    sub_2168FADE8(a4, &__dst);
    sub_2168F83DC((uint64_t)&__dst);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v7 = *(_OWORD *)a2;
    long long v8 = v5;
    uint64_t v9 = *(void *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      __dst.n128_f32[0] = (float)(char)a3;
      __dst.n128_f32[1] = (float)((__int16)a3 >> 8);
    }
    else
    {
      *((void *)&v7 + 1) = *(void *)(*(void *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_216C82F78((uint64_t)&v7 + 8, &__dst, 8uLL);
    }
    sub_216B90A0C(a4, (uint64_t *)&__dst);
  }
}

void sub_216CB75DC(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_216CB75F4(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      long long v7 = a2[1];
      long long v21 = *a2;
      long long v22 = v7;
      uint64_t v23 = *((void *)a2 + 4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91790, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B91790))
      {
        long long v20 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v20) {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
        }
        byte_267B91788 = *v20;
        __cxa_guard_release(&qword_267B91790);
      }
      unint64_t v27 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v21 + 8, &v27, 8uLL)) {
          return;
        }
        unint64_t v8 = v27;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_216C82F78((uint64_t)&v21 + 8, &__dst, 4uLL) & 1) == 0) {
          return;
        }
        unint64_t v8 = __dst;
        unint64_t v27 = __dst;
      }
      unint64_t v10 = 8 * v8;
      uint64_t v11 = *((void *)&v21 + 1);
      if (!byte_267B91788 || v10 < 0x800 || (BYTE8(v21) & 3) != 0)
      {
        uint64_t v14 = *(void *)(*(void *)v22 + 32);
        uint64_t v15 = *((void *)&v21 + 1) - *(void *)(*(void *)v22 + 24);
        unint64_t v16 = v14 - v15;
        if (v15 < 0 || (v16 & 0x8000000000000000) != 0 || (v8 <= v16 ? (BOOL v17 = v10 > v16) : (BOOL v17 = 1), v17))
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2117;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v8, 8 * v8, v16, v14);
        }
        else
        {
          uint64_t v28 = 0;
          *(void *)&long long __dst = &v28;
          sub_2168FAAE8((unint64_t *)a4, v8, (uint64_t **)&__dst);
          sub_2168FAD50((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v18, v19);
          sub_216C82F78((uint64_t)&v21 + 8, *(void **)(a4 + 32), 8 * *(void *)a4);
        }
      }
      else
      {
        uint64_t v12 = sub_216C99144((uint64_t)&v21 + 8, *((char **)&v21 + 1), 8 * v8, v8);
        if (v12)
        {
          *(void *)&long long v25 = 0;
          *((void *)&v25 + 1) = v12;
          uint64_t v26 = v11;
          long long __dst = v27;
          if (&__dst != (long long *)a4)
          {
            sub_2168F83DC(a4);
            long long v13 = v25;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v13;
            long long __dst = 0u;
            long long v25 = 0u;
            *(void *)(a4 + 32) = v26;
            uint64_t v26 = 0;
          }
          sub_2168F83DC((uint64_t)&__dst);
        }
        else
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2109;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v10);
          sub_2168F845C((void *)a4);
        }
      }
    }
  }
  else
  {
    uint64_t v26 = 0;
    long long __dst = 0u;
    long long v25 = 0u;
    if (&__dst != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v9 = v25;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v9;
      long long __dst = 0u;
      long long v25 = 0u;
      *(void *)(a4 + 32) = v26;
      uint64_t v26 = 0;
    }
    sub_2168F83DC((uint64_t)&__dst);
  }
}

void sub_216CB790C(_Unwind_Exception *a1)
{
}

__n128 sub_216CB795C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C761978;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB79A8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C761978;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CB79D8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CB79E0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7619D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB7A20()
{
  return &unk_26C7619D8;
}

void sub_216CB7A2C(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CB7AD8(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CB7AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CB7AD8(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if ((a3 & 0x8000000000000000) == 0)
  {
    long long v7 = *a2;
    long long v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v8 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *((void *)a2 + 3);
    if ((a3 & 0x4000000000000000) != 0)
    {
      v13.n128_f32[0] = (float)(char)a3;
      v13.n128_f32[1] = (float)((__int16)a3 >> 8);
      if (!v5)
      {
LABEL_14:
        sub_216B90A0C(a4, (uint64_t *)&v13);
        return;
      }
    }
    else
    {
      uint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
      sub_216C804FC((void *)&v7 + 1, (uint64_t)&v13, 8uLL);
      long long v5 = v8;
      if (!v8) {
        goto LABEL_14;
      }
    }
    sub_216784EC4(v5);
    goto LABEL_14;
  }
  uint64_t v14 = 0;
  memset(&v13, 0, 32);
  long long v10 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
  uint64_t v11 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *((void *)a2 + 3);
  sub_216CB7C28(a1, &v10, a3, (uint64_t)&v13);
  if (v11) {
    sub_216784EC4(v11);
  }
  sub_2168FADE8(a4, &v13);
  sub_2168F83DC((uint64_t)&v13);
}

void sub_216CB7BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CB7C28(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v21) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v21, 4uLL)) {
        return;
      }
    }
    uint64_t v7 = a2[1];
    uint64_t v8 = (std::__shared_weak_count *)a2[2];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = a2[3];
      uint64_t v18 = v7;
      long long v19 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = a2[3];
      uint64_t v18 = a2[1];
      long long v19 = 0;
    }
    uint64_t v20 = v9;
    unint64_t v24 = 0;
    if (v6 > 0x6FF)
    {
      if (sub_216C804FC(&v18, (uint64_t)&v24, 8uLL))
      {
LABEL_14:
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
        unint64_t v12 = v11 - v20;
        unint64_t v13 = v24;
        if (v20 < 0 || (v12 & 0x8000000000000000) != 0 || (v24 <= v12 ? (BOOL v14 = 8 * v24 > v12) : (BOOL v14 = 1), v14))
        {
          *(void *)&long long v21 = "usd/crateFile.cpp";
          *((void *)&v21 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v22 = 2053;
          *((void *)&v22 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
          LOBYTE(v23) = 0;
          uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 8 * v13, v12, v17);
        }
        else
        {
          uint64_t v25 = 0;
          *(void *)&long long v21 = &v25;
          sub_2168FAAE8((unint64_t *)a4, v24, (uint64_t **)&v21);
          sub_2168FAD50((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
          sub_216C804FC(&v18, *(void *)(a4 + 32), 8 * *(void *)a4);
        }
      }
    }
    else
    {
      LODWORD(v21) = 0;
      if (sub_216C804FC(&v18, (uint64_t)&v21, 4uLL))
      {
        unint64_t v24 = v21;
        goto LABEL_14;
      }
    }
    if (v19) {
      sub_216784EC4(v19);
    }
    if (v8) {
      sub_216784EC4(v8);
    }
    return;
  }
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  if (&v21 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v10 = v22;
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v10;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a4 + 32) = v23;
    uint64_t v23 = 0;
  }
  sub_2168F83DC((uint64_t)&v21);
}

void sub_216CB7E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CB7ED4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7619F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB7F20(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7619F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CB7F50(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return sub_216CB7FB0(*(void *)(a1 + 16), *(void *)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 6328) + 256, this);
}

uint64_t sub_216CB7F64(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C761A58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB7FA4()
{
  return &unk_26C761A58;
}

unint64_t sub_216CB7FB0(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v4 = (uint64_t *)this;
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = v4[1];
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      uint64_t v10 = *v4;
    }
    return sub_216CB8068(a1, a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      uint64_t v4 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    return *(unsigned int *)v4 | 0x4015000000000000;
  }
}

unint64_t sub_216CB8068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a2;
  v19[1] = a3;
  unint64_t result = 0x8015000000000000;
  unint64_t v18 = 0x8015000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      unint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7BF60(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    unint64_t v13 = sub_216CB81EC(v9, (unint64_t *)a4, a4, &v18);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        uint64_t v17 = sub_216C98168((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          unint64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(void *)a4;
          sub_216C984FC((uint64_t)v20, (char *)&__src);
        }
        sub_216C93180((uint64_t)v20, *(char **)(a4 + 32), *(void *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8015000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(void *)a4;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        sub_216C93180((uint64_t)v19, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void *sub_216CB81EC(uint64_t a1, unint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = sub_2168FBCCC((uint64_t)v32, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_2168FBD2C(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  unint64_t v18 = operator new(0x40uLL);
  int i = v18;
  uint64_t v33 = a1 + 16;
  *(void *)unint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    long long v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      long long v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  char v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *char v29 = i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    char v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CB8464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CB8480(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CB8480(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

__n128 sub_216CB84E0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C761A78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB852C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C761A78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CB855C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  unsigned int v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  long long v10[2] = 0;
  v10[3] = v8;
  void v10[4] = v9;
  sub_216CB85F4(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_216CB85A8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C761AD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB85E8()
{
  return &unk_26C761AD8;
}

void sub_216CB85F4(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    long long v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a2 + 32);
    sub_216CB868C(a1, v6, a3, (uint64_t)v8);
    sub_2168FB954(a4, v8);
    sub_2168F83DC((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u32[0] = a3;
    sub_216B907F4(a4, v8);
  }
}

void sub_216CB8674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CB868C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      uint64_t v8 = a2[1];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
      unint64_t v22 = 0;
      if (v7 > 0x6FF)
      {
        ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1) {
          return;
        }
        unint64_t v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v19)) {
        return;
      }
      uint64_t v8 = a2[1];
      uint64_t v5 = a2[2];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1) {
      return;
    }
    unint64_t v13 = v19;
    unint64_t v22 = v19;
LABEL_13:
    ssize_t v14 = v12 + v5;
    unint64_t v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (BOOL v16 = 4 * v13 > v15) : (BOOL v16 = 1), v16))
    {
      *(void *)&long long v19 = "usd/crateFile.cpp";
      *((void *)&v19 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v20 = 2053;
      *((void *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec2h]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 4 * v13, v10 - v14, v10);
    }
    else
    {
      int v23 = 0;
      *(void *)&long long v19 = &v23;
      sub_2168FB654((unint64_t *)a4, v13, (_DWORD **)&v19);
      sub_2168FB8BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(4 * *(void *)a4), v14 + v8);
    }
    return;
  }
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  if (&v19 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    long long v19 = 0u;
    long long v20 = 0u;
    *(void *)(a4 + 32) = v21;
    uint64_t v21 = 0;
  }
  sub_2168F83DC((uint64_t)&v19);
}

void sub_216CB8864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CB8888(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C761AF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB88D4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C761AF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CB8904(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CB890C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C761B58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB894C()
{
  return &unk_26C761B58;
}

void sub_216CB8958(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  __n128 v9[2] = v6;
  v9[3] = v7;
  int v10 = sub_216C688BC();
  sub_216CB89D8(v5, (uint64_t)v9, v3, v4);
}

void sub_216CB89D8(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    long long v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a2 + 32);
    sub_216CB8A70(a1, v6, a3, (uint64_t)v8);
    sub_2168FB954(a4, v8);
    sub_2168F83DC((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u32[0] = a3;
    sub_216B907F4(a4, v8);
  }
}

void sub_216CB8A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CB8A70(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      long long v7 = a2[1];
      long long v21 = *a2;
      long long v22 = v7;
      uint64_t v23 = *((void *)a2 + 4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B917A0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B917A0))
      {
        long long v20 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v20) {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
        }
        byte_267B91798 = *v20;
        __cxa_guard_release(&qword_267B917A0);
      }
      unint64_t v27 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v21 + 8, &v27, 8uLL)) {
          return;
        }
        unint64_t v8 = v27;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_216C82F78((uint64_t)&v21 + 8, &__dst, 4uLL) & 1) == 0) {
          return;
        }
        unint64_t v8 = __dst;
        unint64_t v27 = __dst;
      }
      unint64_t v10 = 4 * v8;
      uint64_t v11 = *((void *)&v21 + 1);
      if (!byte_267B91798 || v10 < 0x800 || (BYTE8(v21) & 1) != 0)
      {
        uint64_t v14 = *(void *)(*(void *)v22 + 32);
        uint64_t v15 = *((void *)&v21 + 1) - *(void *)(*(void *)v22 + 24);
        unint64_t v16 = v14 - v15;
        if (v15 < 0 || (v16 & 0x8000000000000000) != 0 || (v8 <= v16 ? (BOOL v17 = v10 > v16) : (BOOL v17 = 1), v17))
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2117;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec2h]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v8, 4 * v8, v16, v14);
        }
        else
        {
          int v28 = 0;
          *(void *)&long long __dst = &v28;
          sub_2168FB654((unint64_t *)a4, v8, (_DWORD **)&__dst);
          sub_2168FB8BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v18, v19);
          sub_216C82F78((uint64_t)&v21 + 8, *(void **)(a4 + 32), 4 * *(void *)a4);
        }
      }
      else
      {
        uint64_t v12 = sub_216C99144((uint64_t)&v21 + 8, *((char **)&v21 + 1), 4 * v8, v8);
        if (v12)
        {
          *(void *)&long long v25 = 0;
          *((void *)&v25 + 1) = v12;
          uint64_t v26 = v11;
          long long __dst = v27;
          if (&__dst != (long long *)a4)
          {
            sub_2168F83DC(a4);
            long long v13 = v25;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v13;
            long long __dst = 0u;
            long long v25 = 0u;
            *(void *)(a4 + 32) = v26;
            uint64_t v26 = 0;
          }
          sub_2168F83DC((uint64_t)&__dst);
        }
        else
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2109;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec2h]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v10);
          sub_2168F845C((void *)a4);
        }
      }
    }
  }
  else
  {
    uint64_t v26 = 0;
    long long __dst = 0u;
    long long v25 = 0u;
    if (&__dst != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v9 = v25;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v9;
      long long __dst = 0u;
      long long v25 = 0u;
      *(void *)(a4 + 32) = v26;
      uint64_t v26 = 0;
    }
    sub_2168F83DC((uint64_t)&__dst);
  }
}

void sub_216CB8D84(_Unwind_Exception *a1)
{
}

__n128 sub_216CB8DD4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C761B78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB8E20(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C761B78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CB8E50(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CB8E58(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C761BD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB8E98()
{
  return &unk_26C761BD8;
}

void sub_216CB8EA4(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CB8F50(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CB8F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CB8F50(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  unsigned __int32 v5 = a3;
  if (a3 < 0)
  {
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    long long v8 = *a2;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)a2 + 2);
    long long v9 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *((void *)a2 + 3);
    sub_216CB9040(a1, &v8, a3, (uint64_t)v11);
    if (v9) {
      sub_216784EC4(v9);
    }
    sub_2168FB954(a4, v11);
    sub_2168F83DC((uint64_t)v11);
  }
  else
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v6);
    }
    v11[0].n128_u32[0] = v5;
    sub_216B907F4(a4, v11);
  }
}

void sub_216CB9014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CB9040(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v21) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v21, 4uLL)) {
        return;
      }
    }
    uint64_t v7 = a2[1];
    long long v8 = (std::__shared_weak_count *)a2[2];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = a2[3];
      uint64_t v18 = v7;
      long long v19 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = a2[3];
      uint64_t v18 = a2[1];
      long long v19 = 0;
    }
    uint64_t v20 = v9;
    unint64_t v24 = 0;
    if (v6 > 0x6FF)
    {
      if (sub_216C804FC(&v18, (uint64_t)&v24, 8uLL))
      {
LABEL_14:
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
        unint64_t v12 = v11 - v20;
        unint64_t v13 = v24;
        if (v20 < 0 || (v12 & 0x8000000000000000) != 0 || (v24 <= v12 ? (BOOL v14 = 4 * v24 > v12) : (BOOL v14 = 1), v14))
        {
          *(void *)&long long v21 = "usd/crateFile.cpp";
          *((void *)&v21 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v22 = 2053;
          *((void *)&v22 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec2h]";
          LOBYTE(v23) = 0;
          uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 4 * v13, v12, v17);
        }
        else
        {
          int v25 = 0;
          *(void *)&long long v21 = &v25;
          sub_2168FB654((unint64_t *)a4, v24, (_DWORD **)&v21);
          sub_2168FB8BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
          sub_216C804FC(&v18, *(void *)(a4 + 32), 4 * *(void *)a4);
        }
      }
    }
    else
    {
      LODWORD(v21) = 0;
      if (sub_216C804FC(&v18, (uint64_t)&v21, 4uLL))
      {
        unint64_t v24 = v21;
        goto LABEL_14;
      }
    }
    if (v19) {
      sub_216784EC4(v19);
    }
    if (v8) {
      sub_216784EC4(v8);
    }
    return;
  }
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  if (&v21 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v10 = v22;
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v10;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a4 + 32) = v23;
    uint64_t v23 = 0;
  }
  sub_2168F83DC((uint64_t)&v21);
}

void sub_216CB92A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CB92EC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C761BF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB9338(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C761BF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CB9368(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return sub_216CB93C8(*(uint64_t **)(a1 + 16), *(void *)(a1 + 8), (void *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), this);
}

uint64_t sub_216CB937C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C761C58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB93BC()
{
  return &unk_26C761C58;
}

unint64_t sub_216CB93C8(uint64_t *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v4 = this;
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)v4 + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      uint64_t v10 = *(void *)v4;
    }
    return sub_216CB9534((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    uint64_t v12 = 0;
    v19[0] = a2;
    v19[1] = a3;
    uint64_t v21 = *(void *)v4;
    while (1)
    {
      int v13 = *((_DWORD *)&v21 + v12);
      if (v13 != (char)v13) {
        break;
      }
      *((unsigned char *)&v20 + v12++) = v13;
      if (v12 == 2) {
        return v20 | 0x4016000000000000;
      }
    }
    uint64_t v14 = *a1;
    if (!*a1)
    {
      uint64_t v15 = operator new(0x28uLL);
      *uint64_t v15 = 0u;
      v15[1] = 0u;
      *((_DWORD *)v15 + 8) = 1065353216;
      sub_2168CAEA8(a1, (uint64_t)v15);
      uint64_t v14 = *a1;
    }
    uint64_t v21 = 0;
    unint64_t v16 = sub_216CB99A4(v14, (int *)v4, v4, &v21);
    uint64_t v17 = v16;
    if (v18)
    {
      v16[3] = *a3 & 0xFFFFFFFFFFFFLL | 0x16000000000000;
      sub_216C80458((uint64_t)v19, (char *)v4);
    }
    return v17[3];
  }
}

unint64_t sub_216CB9534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a2;
  v19[1] = a3;
  unint64_t result = 0x8016000000000000;
  unint64_t v18 = 0x8016000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      uint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7C020(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    int v13 = sub_216CB96B8(v9, (unint64_t *)a4, a4, &v18);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        uint64_t v17 = sub_216C98168((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          unint64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(void *)a4;
          sub_216C984FC((uint64_t)v20, (char *)&__src);
        }
        sub_216C9E7BC((uint64_t)v20, *(char **)(a4 + 32), *(void *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8016000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(void *)a4;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        sub_216C9E7BC((uint64_t)v19, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void *sub_216CB96B8(uint64_t a1, unint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = sub_2169B9840((uint64_t)v32, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_2169B9898(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  unint64_t v18 = operator new(0x40uLL);
  int i = v18;
  uint64_t v33 = a1 + 16;
  *(void *)unint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    uint64_t v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      uint64_t v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  char v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *char v29 = i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    char v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CB9930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CB994C(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CB994C(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void *sub_216CB99A4(uint64_t a1, int *a2, void *a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55 * (v9 + ((unint64_t)(v9 + v8 + (v9 + v8) * (v9 + v8)) >> 1))));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      char v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v8 && *((_DWORD *)v14 + 5) == v9) {
              return v14;
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11) {
                v15 %= v11;
              }
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          char v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  char v14 = operator new(0x20uLL);
  void *v14 = 0;
  v14[1] = v10;
  uint64_t v17 = *a4;
  __n128 v14[2] = *a3;
  void v14[3] = v17;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    BOOL v20 = 1;
    if (v11 >= 3) {
      BOOL v20 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v11);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_21678A04C(a1, v23);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v24 = *(void *)a1;
  unint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    void *v14 = *v25;
LABEL_42:
    void *v25 = v14;
    goto LABEL_43;
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v24 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    unint64_t v26 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11) {
        v26 %= v11;
      }
    }
    else
    {
      v26 &= v11 - 1;
    }
    unint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_216CB9BEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216CB9C08(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C761C78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CB9C54(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C761C78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CB9C84(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  unsigned int v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  long long v10[2] = 0;
  v10[3] = v8;
  void v10[4] = v9;
  sub_216CB9D1C(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_216CB9CD0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C761CD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CB9D10()
{
  return &unk_26C761CD8;
}

void sub_216CB9D1C(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    long long v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a2 + 32);
    sub_216CB9DEC(a1, v6, a3, (uint64_t)v8);
    sub_216B90404(a4, v8);
    sub_2168F83DC((uint64_t)v8);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0) {
      v8[0].n128_u64[0] = (unint64_t)vshr_n_s32((int32x2_t)vshl_u32((uint32x2_t)vdup_n_s32(a3), (uint32x2_t)0x1000000018), 0x18uLL);
    }
    else {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v8, (char *)8, *(void *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    sub_216B9038C(a4, (uint64_t *)v8);
  }
}

void sub_216CB9DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CB9DEC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      uint64_t v8 = a2[1];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
      unint64_t v22 = 0;
      if (v7 > 0x6FF)
      {
        ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1) {
          return;
        }
        unint64_t v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v19)) {
        return;
      }
      uint64_t v8 = a2[1];
      uint64_t v5 = a2[2];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1) {
      return;
    }
    unint64_t v13 = v19;
    unint64_t v22 = v19;
LABEL_13:
    ssize_t v14 = v12 + v5;
    unint64_t v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (BOOL v16 = 8 * v13 > v15) : (BOOL v16 = 1), v16))
    {
      *(void *)&long long v19 = "usd/crateFile.cpp";
      *((void *)&v19 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v20 = 2053;
      *((void *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec2i]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 8 * v13, v10 - v14, v10);
    }
    else
    {
      uint64_t v23 = 0;
      *(void *)&long long v19 = &v23;
      sub_2169B99EC((unint64_t *)a4, v13, (uint64_t **)&v19);
      sub_2169B9C54((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(8 * *(void *)a4), v14 + v8);
    }
    return;
  }
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  if (&v19 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    long long v19 = 0u;
    long long v20 = 0u;
    *(void *)(a4 + 32) = v21;
    uint64_t v21 = 0;
  }
  sub_2168F83DC((uint64_t)&v19);
}

void sub_216CB9FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CB9FE8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C761CF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CBA034(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C761CF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CBA064(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CBA06C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C761D58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CBA0AC()
{
  return &unk_26C761D58;
}

void sub_216CBA0B8(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  __n128 v9[2] = v6;
  v9[3] = v7;
  int v10 = sub_216C688BC();
  sub_216CBA138(v5, (uint64_t)v9, v3, v4);
}

void sub_216CBA138(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v13 = 0;
    memset(__dst, 0, sizeof(__dst));
    long long v6 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v6;
    uint64_t v11 = *(void *)(a2 + 32);
    sub_216CBA228(a1, v10, a3, (uint64_t)__dst);
    sub_216B90404(a4, __dst);
    sub_2168F83DC((uint64_t)__dst);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v7 = *(_OWORD *)a2;
    long long v8 = v5;
    uint64_t v9 = *(void *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      __dst[0].n128_u64[0] = (unint64_t)vshr_n_s32((int32x2_t)vshl_u32((uint32x2_t)vdup_n_s32(a3), (uint32x2_t)0x1000000018), 0x18uLL);
    }
    else
    {
      *((void *)&v7 + 1) = *(void *)(*(void *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_216C82F78((uint64_t)&v7 + 8, __dst, 8uLL);
    }
    sub_216B9038C(a4, (uint64_t *)__dst);
  }
}

void sub_216CBA210(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_216CBA228(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      long long v7 = a2[1];
      long long v21 = *a2;
      long long v22 = v7;
      uint64_t v23 = *((void *)a2 + 4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B917B0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B917B0))
      {
        long long v20 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v20) {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
        }
        byte_267B917A8 = *v20;
        __cxa_guard_release(&qword_267B917B0);
      }
      unint64_t v27 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v21 + 8, &v27, 8uLL)) {
          return;
        }
        unint64_t v8 = v27;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_216C82F78((uint64_t)&v21 + 8, &__dst, 4uLL) & 1) == 0) {
          return;
        }
        unint64_t v8 = __dst;
        unint64_t v27 = __dst;
      }
      unint64_t v10 = 8 * v8;
      uint64_t v11 = *((void *)&v21 + 1);
      if (!byte_267B917A8 || v10 < 0x800 || (BYTE8(v21) & 3) != 0)
      {
        uint64_t v14 = *(void *)(*(void *)v22 + 32);
        uint64_t v15 = *((void *)&v21 + 1) - *(void *)(*(void *)v22 + 24);
        unint64_t v16 = v14 - v15;
        if (v15 < 0 || (v16 & 0x8000000000000000) != 0 || (v8 <= v16 ? (BOOL v17 = v10 > v16) : (BOOL v17 = 1), v17))
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2117;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec2i]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v8, 8 * v8, v16, v14);
        }
        else
        {
          uint64_t v28 = 0;
          *(void *)&long long __dst = &v28;
          sub_2169B99EC((unint64_t *)a4, v8, (uint64_t **)&__dst);
          sub_2169B9C54((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v18, v19);
          sub_216C82F78((uint64_t)&v21 + 8, *(void **)(a4 + 32), 8 * *(void *)a4);
        }
      }
      else
      {
        uint64_t v12 = sub_216C99144((uint64_t)&v21 + 8, *((char **)&v21 + 1), 8 * v8, v8);
        if (v12)
        {
          *(void *)&long long v25 = 0;
          *((void *)&v25 + 1) = v12;
          uint64_t v26 = v11;
          long long __dst = v27;
          if (&__dst != (long long *)a4)
          {
            sub_2168F83DC(a4);
            long long v13 = v25;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v13;
            long long __dst = 0u;
            long long v25 = 0u;
            *(void *)(a4 + 32) = v26;
            uint64_t v26 = 0;
          }
          sub_2168F83DC((uint64_t)&__dst);
        }
        else
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2109;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec2i]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v10);
          sub_2168F845C((void *)a4);
        }
      }
    }
  }
  else
  {
    uint64_t v26 = 0;
    long long __dst = 0u;
    long long v25 = 0u;
    if (&__dst != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v9 = v25;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v9;
      long long __dst = 0u;
      long long v25 = 0u;
      *(void *)(a4 + 32) = v26;
      uint64_t v26 = 0;
    }
    sub_2168F83DC((uint64_t)&__dst);
  }
}

void sub_216CBA540(_Unwind_Exception *a1)
{
}

__n128 sub_216CBA590(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C761D78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CBA5DC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C761D78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CBA60C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CBA614(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C761DD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CBA654()
{
  return &unk_26C761DD8;
}

void sub_216CBA660(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CBA70C(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CBA6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CBA70C(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if ((a3 & 0x8000000000000000) == 0)
  {
    long long v7 = *a2;
    long long v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v8 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *((void *)a2 + 3);
    if ((a3 & 0x4000000000000000) != 0)
    {
      v13[0].n128_u64[0] = (unint64_t)vshr_n_s32((int32x2_t)vshl_u32((uint32x2_t)vdup_n_s32(a3), (uint32x2_t)0x1000000018), 0x18uLL);
      if (!v5)
      {
LABEL_14:
        sub_216B9038C(a4, (uint64_t *)v13);
        return;
      }
    }
    else
    {
      uint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
      sub_216C804FC((void *)&v7 + 1, (uint64_t)v13, 8uLL);
      long long v5 = v8;
      if (!v8) {
        goto LABEL_14;
      }
    }
    sub_216784EC4(v5);
    goto LABEL_14;
  }
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  long long v10 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
  uint64_t v11 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *((void *)a2 + 3);
  sub_216CBA860(a1, &v10, a3, (uint64_t)v13);
  if (v11) {
    sub_216784EC4(v11);
  }
  sub_216B90404(a4, v13);
  sub_2168F83DC((uint64_t)v13);
}

void sub_216CBA81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CBA860(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v21) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v21, 4uLL)) {
        return;
      }
    }
    uint64_t v7 = a2[1];
    uint64_t v8 = (std::__shared_weak_count *)a2[2];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = a2[3];
      uint64_t v18 = v7;
      long long v19 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = a2[3];
      uint64_t v18 = a2[1];
      long long v19 = 0;
    }
    uint64_t v20 = v9;
    unint64_t v24 = 0;
    if (v6 > 0x6FF)
    {
      if (sub_216C804FC(&v18, (uint64_t)&v24, 8uLL))
      {
LABEL_14:
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
        unint64_t v12 = v11 - v20;
        unint64_t v13 = v24;
        if (v20 < 0 || (v12 & 0x8000000000000000) != 0 || (v24 <= v12 ? (BOOL v14 = 8 * v24 > v12) : (BOOL v14 = 1), v14))
        {
          *(void *)&long long v21 = "usd/crateFile.cpp";
          *((void *)&v21 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v22 = 2053;
          *((void *)&v22 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec2i]";
          LOBYTE(v23) = 0;
          uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 8 * v13, v12, v17);
        }
        else
        {
          uint64_t v25 = 0;
          *(void *)&long long v21 = &v25;
          sub_2169B99EC((unint64_t *)a4, v24, (uint64_t **)&v21);
          sub_2169B9C54((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
          sub_216C804FC(&v18, *(void *)(a4 + 32), 8 * *(void *)a4);
        }
      }
    }
    else
    {
      LODWORD(v21) = 0;
      if (sub_216C804FC(&v18, (uint64_t)&v21, 4uLL))
      {
        unint64_t v24 = v21;
        goto LABEL_14;
      }
    }
    if (v19) {
      sub_216784EC4(v19);
    }
    if (v8) {
      sub_216784EC4(v8);
    }
    return;
  }
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  if (&v21 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v10 = v22;
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v10;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a4 + 32) = v23;
    uint64_t v23 = 0;
  }
  sub_2168F83DC((uint64_t)&v21);
}

void sub_216CBAAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CBAB0C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C761DF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CBAB58(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C761DF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CBAB88(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return sub_216CBABE8(*(uint64_t **)(a1 + 16), *(void *)(a1 + 8), (void *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), this);
}

uint64_t sub_216CBAB9C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C761E58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CBABDC()
{
  return &unk_26C761E58;
}

unint64_t sub_216CBABE8(uint64_t *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    }
    else {
      uint64_t v10 = *(void *)this;
    }
    return sub_216CBAD40((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      unint64_t v12 = (double *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(this);
    else {
      unint64_t v12 = *(double **)this;
    }
    v20[0] = a2;
    v20[1] = a3;
    unsigned int v19 = 0;
    if (sub_216CBB25C((uint64_t)&v19, *v12, v12[1], v12[2]))
    {
      return v19 | 0x4017000000000000;
    }
    else
    {
      uint64_t v13 = *a1;
      if (!*a1)
      {
        BOOL v14 = operator new(0x28uLL);
        _OWORD *v14 = 0u;
        v14[1] = 0u;
        *((_DWORD *)v14 + 8) = 1065353216;
        sub_2168CAEA8(a1, (uint64_t)v14);
        uint64_t v13 = *a1;
      }
      uint64_t v18 = 0;
      uint64_t v15 = sub_216CBB388(v13, v12, (uint64_t)v12, &v18);
      unint64_t v16 = v15;
      if (v17)
      {
        *((void *)v15 + 5) = *a3 & 0xFFFFFFFFFFFFLL | 0x17000000000000;
        sub_216CBB2E4((uint64_t)v20, (char *)v12);
      }
      return *((void *)v16 + 5);
    }
  }
}

unint64_t sub_216CBAD40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a2;
  v19[1] = a3;
  unint64_t result = 0x8017000000000000;
  unint64_t v18 = 0x8017000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      unint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7C0E0(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    uint64_t v13 = sub_216CBAF70(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        uint64_t v17 = sub_216C98168((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          uint64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(void *)a4;
          sub_216C984FC((uint64_t)v20, (char *)&__src);
        }
        sub_216CBAEC4((uint64_t)v20, *(char **)(a4 + 32), *(void *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8017000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(void *)a4;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        sub_216CBAEC4((uint64_t)v19, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

uint64_t sub_216CBAEC4(uint64_t result, char *__src, uint64_t a3)
{
  uint64_t v3 = 24 * a3;
  if (24 * a3)
  {
    long long v5 = *(void **)(result + 8);
    do
    {
      uint64_t v6 = v5[2];
      uint64_t v7 = v6 - *v5 + 0x80000;
      if (v3 >= v7) {
        size_t v8 = v6 - *v5 + 0x80000;
      }
      else {
        size_t v8 = v3;
      }
      uint64_t v9 = *v5 - v6;
      if ((int64_t)(v8 + v9) > v5[4]) {
        v5[4] = v8 + v9;
      }
      unint64_t result = (uint64_t)memcpy((void *)(v5[3] + v9), __src, v8);
      *v5 += v8;
      if (v7 <= v3) {
        unint64_t result = sub_216C7A9E4((BOOL)v5);
      }
      __src += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return result;
}

void *sub_216CBAF70(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = sub_2168FF1E0((uint64_t)v32, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_2168FF258(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  unint64_t v18 = operator new(0x40uLL);
  int i = v18;
  uint64_t v33 = a1 + 16;
  *(void *)unint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    long long v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      long long v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  char v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *char v29 = i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    char v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CBB1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CBB204(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CBB204(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t sub_216CBB25C(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v4 = 0;
  *(double *)unint64_t v10 = a2;
  *(double *)&v10[1] = a3;
  *(double *)&long long v10[2] = a4;
  while (1)
  {
    uint64_t v5 = 0;
    double v6 = *(double *)&v10[v4];
    if (v6 < -128.0 || v6 > 127.0) {
      break;
    }
    if (v6 != (double)(int)v6) {
      return 0;
    }
    *((unsigned char *)&v8 + v4++) = (int)v6;
    if (v4 == 3)
    {
      *(_WORD *)a1 = v8;
      *(unsigned char *)(a1 + 2) = v9;
      return 1;
    }
  }
  return v5;
}

uint64_t sub_216CBB2E4(uint64_t a1, char *__src)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = 24;
  do
  {
    uint64_t v5 = v3[2];
    uint64_t v6 = v5 - *v3 + 0x80000;
    if (v4 >= v6) {
      size_t v7 = v5 - *v3 + 0x80000;
    }
    else {
      size_t v7 = v4;
    }
    uint64_t v8 = *v3 - v5;
    if ((int64_t)(v7 + v8) > v3[4]) {
      v3[4] = v7 + v8;
    }
    uint64_t result = (uint64_t)memcpy((void *)(v3[3] + v8), __src, v7);
    *v3 += v7;
    if (v6 <= v4) {
      uint64_t result = sub_216C7A9E4((BOOL)v3);
    }
    __src += v7;
    v4 -= v7;
  }
  while (v4);
  return result;
}

double *sub_216CBB388(uint64_t a1, double *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v26 = 0;
  char v27 = 0;
  sub_2168F4C18((uint64_t)&v26, a2, a2 + 1, a2 + 2);
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v26));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint8x8_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = (double *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v9)
          {
            if (v13[2] == *a2 && v13[3] == a2[1] && v13[4] == a2[2]) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = *(double **)v13;
        }
        while (v13);
      }
    }
  }
  unint64_t v13 = (double *)operator new(0x30uLL);
  double *v13 = 0.0;
  *((void *)v13 + 1) = v9;
  *((_OWORD *)v13 + 1) = *(_OWORD *)a3;
  uint64_t v15 = *a4;
  v13[4] = *(double *)(a3 + 16);
  *((void *)v13 + 5) = v15;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  float v23 = *(double ***)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)unint64_t v13 = *v23;
LABEL_40:
    *float v23 = v13;
    goto LABEL_41;
  }
  double *v13 = *(double *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*(void *)v13)
  {
    unint64_t v24 = *(void *)(*(void *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    float v23 = (double **)(*(void *)a1 + 8 * v24);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_216CBB60C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216CBB628(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C761E78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CBB674(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C761E78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_216CBB6A4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v11[0] = v6;
  v11[1] = v7;
  __n128 v11[2] = 0;
  void v11[3] = v8;
  v11[4] = v9;
  return sub_216CBB73C(v5, (uint64_t)v11, v3, v4);
}

uint64_t sub_216CBB6F0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C761ED8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CBB730()
{
  return &unk_26C761ED8;
}

double sub_216CBB73C(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    long long v5 = *(_OWORD *)(a2 + 16);
    v8[0] = *(_OWORD *)a2;
    v8[1] = v5;
    uint64_t v9 = *(void *)(a2 + 32);
    sub_216CBB824(a1, v8, a3, (uint64_t)v10);
    sub_2168FEE30(a4, v10);
    sub_2168F83DC((uint64_t)v10);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0)
    {
      uint64_t v7 = 0;
      __int16 v12 = a3;
      char v13 = BYTE2(a3);
      do
      {
        v10[0].n128_f64[v7] = (double)*((char *)&v12 + v7);
        ++v7;
      }
      while (v7 != 3);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v10, (char *)0x18, *(void *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    *(void *)&double result = sub_216B91618(a4, v10).n128_u64[0];
  }
  return result;
}

void sub_216CBB80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CBB824(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      uint64_t v8 = a2[1];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
      unint64_t v22 = 0;
      if (v7 > 0x6FF)
      {
        ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1) {
          return;
        }
        unint64_t v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v19)) {
        return;
      }
      uint64_t v8 = a2[1];
      uint64_t v5 = a2[2];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1) {
      return;
    }
    unint64_t v13 = v19;
    unint64_t v22 = v19;
LABEL_13:
    ssize_t v14 = v12 + v5;
    unint64_t v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (BOOL v16 = 24 * v13 > v15) : (BOOL v16 = 1), v16))
    {
      *(void *)&long long v19 = "usd/crateFile.cpp";
      *((void *)&v19 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v20 = 2053;
      *((void *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 24 * v13, v10 - v14, v10);
    }
    else
    {
      long long v19 = 0uLL;
      *(void *)&long long v20 = 0;
      float v23 = &v19;
      sub_2168FEAB4((unint64_t *)a4, v13, &v23);
      sub_2168FED88((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(24 * *(void *)a4), v14 + v8);
    }
    return;
  }
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  if (&v19 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    long long v19 = 0u;
    long long v20 = 0u;
    *(void *)(a4 + 32) = v21;
    uint64_t v21 = 0;
  }
  sub_2168F83DC((uint64_t)&v19);
}

void sub_216CBBA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CBBA2C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C761EF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CBBA78(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C761EF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_216CBBAA8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_216CBBAFC((void *)(a1 + 8), a2, a3);
}

uint64_t sub_216CBBAB0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C761F58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CBBAF0()
{
  return &unk_26C761F58;
}

double sub_216CBBAFC(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v10[0] = *a1;
  v10[1] = v8;
  __n128 v10[2] = v6;
  void v10[3] = v7;
  int v11 = sub_216C688BC();
  return sub_216CBBB7C(v5, (uint64_t)v10, v3, v4);
}

double sub_216CBBB7C(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v15 = 0;
    memset(&__dst, 0, 32);
    long long v6 = *(_OWORD *)(a2 + 16);
    v12[0] = *(_OWORD *)a2;
    v12[1] = v6;
    uint64_t v13 = *(void *)(a2 + 32);
    sub_216CBBC84(a1, v12, a3, (uint64_t)&__dst);
    sub_2168FEE30(a4, &__dst);
    sub_2168F83DC((uint64_t)&__dst);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v9 = *(_OWORD *)a2;
    long long v10 = v5;
    uint64_t v11 = *(void *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      uint64_t v8 = 0;
      __int16 v16 = a3;
      char v17 = BYTE2(a3);
      do
      {
        __dst.n128_f64[v8] = (double)*((char *)&v16 + v8);
        ++v8;
      }
      while (v8 != 3);
    }
    else
    {
      *((void *)&v9 + 1) = *(void *)(*(void *)v10 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_216C82F78((uint64_t)&v9 + 8, &__dst, 0x18uLL);
    }
    *(void *)&double result = sub_216B91618(a4, &__dst).n128_u64[0];
  }
  return result;
}

void sub_216CBBC6C(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_216CBBC84(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      long long v7 = a2[1];
      long long v21 = *a2;
      long long v22 = v7;
      uint64_t v23 = *((void *)a2 + 4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B917C0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B917C0))
      {
        long long v20 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v20) {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
        }
        byte_267B917B8 = *v20;
        __cxa_guard_release(&qword_267B917C0);
      }
      unint64_t v27 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v21 + 8, &v27, 8uLL)) {
          return;
        }
        unint64_t v8 = v27;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_216C82F78((uint64_t)&v21 + 8, &__dst, 4uLL) & 1) == 0) {
          return;
        }
        unint64_t v8 = __dst;
        unint64_t v27 = __dst;
      }
      unint64_t v10 = 24 * v8;
      uint64_t v11 = *((void *)&v21 + 1);
      if (!byte_267B917B8 || v10 < 0x800 || (BYTE8(v21) & 7) != 0)
      {
        uint64_t v14 = *(void *)(*(void *)v22 + 32);
        uint64_t v15 = *((void *)&v21 + 1) - *(void *)(*(void *)v22 + 24);
        unint64_t v16 = v14 - v15;
        if (v15 < 0 || (v16 & 0x8000000000000000) != 0 || (v8 <= v16 ? (BOOL v17 = v10 > v16) : (BOOL v17 = 1), v17))
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2117;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v8, 24 * v8, v16, v14);
        }
        else
        {
          long long __dst = 0uLL;
          *(void *)&long long v25 = 0;
          p_dst = &__dst;
          sub_2168FEAB4((unint64_t *)a4, v8, &p_dst);
          sub_2168FED88((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v18, v19);
          sub_216C82F78((uint64_t)&v21 + 8, *(void **)(a4 + 32), 24 * *(void *)a4);
        }
      }
      else
      {
        uint64_t v12 = sub_216C99144((uint64_t)&v21 + 8, *((char **)&v21 + 1), 24 * v8, v8);
        if (v12)
        {
          *(void *)&long long v25 = 0;
          *((void *)&v25 + 1) = v12;
          uint64_t v26 = v11;
          long long __dst = v27;
          if (&__dst != (long long *)a4)
          {
            sub_2168F83DC(a4);
            long long v13 = v25;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v13;
            long long __dst = 0u;
            long long v25 = 0u;
            *(void *)(a4 + 32) = v26;
            uint64_t v26 = 0;
          }
          sub_2168F83DC((uint64_t)&__dst);
        }
        else
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2109;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v10);
          sub_2168F845C((void *)a4);
        }
      }
    }
  }
  else
  {
    uint64_t v26 = 0;
    long long __dst = 0u;
    long long v25 = 0u;
    if (&__dst != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v9 = v25;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v9;
      long long __dst = 0u;
      long long v25 = 0u;
      *(void *)(a4 + 32) = v26;
      uint64_t v26 = 0;
    }
    sub_2168F83DC((uint64_t)&__dst);
  }
}

void sub_216CBBFA8(_Unwind_Exception *a1)
{
}

__n128 sub_216CBBFF8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C761F78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CBC044(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C761F78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CBC074(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CBC07C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C761FD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CBC0BC()
{
  return &unk_26C761FD8;
}

void sub_216CBC0C8(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CBC174(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CBC150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

double sub_216CBC174(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v16 = 0;
    memset(&v15, 0, 32);
    long long v12 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    long long v13 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = *((void *)a2 + 3);
    sub_216CBC2DC(a1, &v12, a3, (uint64_t)&v15);
    if (v13) {
      sub_216784EC4(v13);
    }
    sub_2168FEE30(a4, &v15);
    sub_2168F83DC((uint64_t)&v15);
  }
  else
  {
    long long v9 = *a2;
    long long v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
    long long v10 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *((void *)a2 + 3);
    if ((a3 & 0x4000000000000000) != 0)
    {
      uint64_t v8 = 0;
      __int16 v17 = a3;
      char v18 = BYTE2(a3);
      do
      {
        v15.n128_f64[v8] = (double)*((char *)&v17 + v8);
        ++v8;
      }
      while (v8 != 3);
    }
    else
    {
      uint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
      sub_216C804FC((void *)&v9 + 1, (uint64_t)&v15, 0x18uLL);
      long long v5 = v10;
    }
    if (v5) {
      sub_216784EC4(v5);
    }
    *(void *)&double result = sub_216B91618(a4, &v15).n128_u64[0];
  }
  return result;
}

void sub_216CBC298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CBC2DC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v21) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v21, 4uLL)) {
        return;
      }
    }
    uint64_t v7 = a2[1];
    uint64_t v8 = (std::__shared_weak_count *)a2[2];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = a2[3];
      uint64_t v18 = v7;
      long long v19 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = a2[3];
      uint64_t v18 = a2[1];
      long long v19 = 0;
    }
    uint64_t v20 = v9;
    unint64_t v24 = 0;
    if (v6 > 0x6FF)
    {
      if (sub_216C804FC(&v18, (uint64_t)&v24, 8uLL))
      {
LABEL_14:
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
        unint64_t v12 = v11 - v20;
        unint64_t v13 = v24;
        if (v20 < 0 || (v12 & 0x8000000000000000) != 0 || (v24 <= v12 ? (BOOL v14 = 24 * v24 > v12) : (BOOL v14 = 1), v14))
        {
          *(void *)&long long v21 = "usd/crateFile.cpp";
          *((void *)&v21 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v22 = 2053;
          *((void *)&v22 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
          LOBYTE(v23) = 0;
          uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 24 * v13, v12, v17);
        }
        else
        {
          long long v21 = 0uLL;
          *(void *)&long long v22 = 0;
          long long v25 = &v21;
          sub_2168FEAB4((unint64_t *)a4, v24, &v25);
          sub_2168FED88((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
          sub_216C804FC(&v18, *(void *)(a4 + 32), 24 * *(void *)a4);
        }
      }
    }
    else
    {
      LODWORD(v21) = 0;
      if (sub_216C804FC(&v18, (uint64_t)&v21, 4uLL))
      {
        unint64_t v24 = v21;
        goto LABEL_14;
      }
    }
    if (v19) {
      sub_216784EC4(v19);
    }
    if (v8) {
      sub_216784EC4(v8);
    }
    return;
  }
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  if (&v21 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v10 = v22;
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v10;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a4 + 32) = v23;
    uint64_t v23 = 0;
  }
  sub_2168F83DC((uint64_t)&v21);
}

void sub_216CBC550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CBC594(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C761FF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CBC5E0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C761FF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CBC610(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return sub_216CBC670(*(uint64_t **)(a1 + 16), *(void *)(a1 + 8), (void *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), this);
}

uint64_t sub_216CBC624(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C762058)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CBC664()
{
  return &unk_26C762058;
}

unint64_t sub_216CBC670(uint64_t *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    }
    else {
      uint64_t v10 = *(void *)this;
    }
    return sub_216CBC7C8((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      unint64_t v12 = (float *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                            + 168))(this);
    else {
      unint64_t v12 = *(float **)this;
    }
    v20[0] = a2;
    v20[1] = a3;
    unsigned int v19 = 0;
    if (sub_216CBCC38((uint64_t)&v19, *v12, v12[1], v12[2]))
    {
      return v19 | 0x4018000000000000;
    }
    else
    {
      uint64_t v13 = *a1;
      if (!*a1)
      {
        BOOL v14 = operator new(0x28uLL);
        _OWORD *v14 = 0u;
        v14[1] = 0u;
        *((_DWORD *)v14 + 8) = 1065353216;
        sub_2168CAEA8(a1, (uint64_t)v14);
        uint64_t v13 = *a1;
      }
      uint64_t v18 = 0;
      uint64_t v15 = sub_216CBCCB0(v13, v12, (uint64_t)v12, &v18);
      uint64_t v16 = v15;
      if (v17)
      {
        *((void *)v15 + 4) = *a3 & 0xFFFFFFFFFFFFLL | 0x18000000000000;
        sub_216C94560((uint64_t)v20, (char *)v12);
      }
      return *((void *)v16 + 4);
    }
  }
}

unint64_t sub_216CBC7C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a2;
  v19[1] = a3;
  unint64_t result = 0x8018000000000000;
  unint64_t v18 = 0x8018000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      unint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7C1A0(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    uint64_t v13 = sub_216CBC94C(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        uint64_t v17 = sub_216C98168((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          uint64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(void *)a4;
          sub_216C984FC((uint64_t)v20, (char *)&__src);
        }
        sub_216C9638C((uint64_t)v20, *(char **)(a4 + 32), *(void *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8018000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(void *)a4;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        sub_216C9638C((uint64_t)v19, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void *sub_216CBC94C(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = sub_2168FD9A4((uint64_t)v32, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_2168FDA1C(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  unint64_t v18 = operator new(0x40uLL);
  int i = v18;
  uint64_t v33 = a1 + 16;
  *(void *)unint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    long long v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      long long v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  char v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *char v29 = i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    char v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CBCBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CBCBE0(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CBCBE0(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t sub_216CBCC38(uint64_t a1, float a2, float a3, float a4)
{
  uint64_t v4 = 0;
  *(float *)unint64_t v10 = a2;
  *(float *)&v10[1] = a3;
  *(float *)&__n128 v10[2] = a4;
  while (1)
  {
    float v5 = *(float *)&v10[v4];
    BOOL v6 = v5 < -128.0 || v5 > 127.0;
    if (v6 || v5 != (float)(int)v5) {
      break;
    }
    *((unsigned char *)&v8 + v4++) = (int)v5;
    if (v4 == 3)
    {
      *(_WORD *)a1 = v8;
      *(unsigned char *)(a1 + 2) = v9;
      return 1;
    }
  }
  return 0;
}

float *sub_216CBCCB0(uint64_t a1, float *a2, uint64_t a3, void *a4)
{
  uint64_t v25 = 0;
  char v26 = 0;
  sub_2168F4850((uint64_t)&v25, a2, a2 + 1, a2 + 2);
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v25));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint8x8_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = (float *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v9)
          {
            if (v13[4] == *a2 && v13[5] == a2[1] && v13[6] == a2[2]) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = *(float **)v13;
        }
        while (v13);
      }
    }
  }
  unint64_t v13 = (float *)operator new(0x28uLL);
  *(void *)unint64_t v13 = 0;
  *((void *)v13 + 1) = v9;
  *((void *)v13 + 2) = *(void *)a3;
  v13[6] = *(float *)(a3 + 8);
  *((void *)v13 + 4) = *a4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_21678A04C(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  float v22 = *(float ***)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)unint64_t v13 = *v22;
LABEL_40:
    char *v22 = v13;
    goto LABEL_41;
  }
  *(void *)unint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*(void *)v13)
  {
    unint64_t v23 = *(void *)(*(void *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    float v22 = (float **)(*(void *)a1 + 8 * v23);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_216CBCF38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216CBCF54(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C762078;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CBCFA0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C762078;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CBCFD0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  BOOL v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  __n128 v10[2] = 0;
  _DWORD v10[3] = v8;
  void v10[4] = v9;
  sub_216CBD068(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_216CBD01C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7620D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CBD05C()
{
  return &unk_26C7620D8;
}

void sub_216CBD068(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v10 = 0;
    memset(v9, 0, sizeof(v9));
    long long v5 = *(_OWORD *)(a2 + 16);
    v7[0] = *(_OWORD *)a2;
    v7[1] = v5;
    uint64_t v8 = *(void *)(a2 + 32);
    sub_216CBD150(a1, v7, a3, (uint64_t)v9);
    sub_2168FD5F4(a4, v9);
    sub_2168F83DC((uint64_t)v9);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0)
    {
      uint64_t v6 = 0;
      __int16 v11 = a3;
      char v12 = BYTE2(a3);
      do
      {
        v9[0].n128_f32[v6] = (float)*((char *)&v11 + v6);
        ++v6;
      }
      while (v6 != 3);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v9, (char *)0xC, *(void *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    sub_216B91440(a4, (uint64_t)v9);
  }
}

void sub_216CBD138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CBD150(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      uint64_t v8 = a2[1];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
      unint64_t v22 = 0;
      if (v7 > 0x6FF)
      {
        ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1) {
          return;
        }
        unint64_t v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v19)) {
        return;
      }
      uint64_t v8 = a2[1];
      uint64_t v5 = a2[2];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1) {
      return;
    }
    unint64_t v13 = v19;
    unint64_t v22 = v19;
LABEL_13:
    ssize_t v14 = v12 + v5;
    unint64_t v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (BOOL v16 = 12 * v13 > v15) : (BOOL v16 = 1), v16))
    {
      *(void *)&long long v19 = "usd/crateFile.cpp";
      *((void *)&v19 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v20 = 2053;
      *((void *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 12 * v13, v10 - v14, v10);
    }
    else
    {
      DWORD2(v19) = 0;
      *(void *)&long long v19 = 0;
      unint64_t v23 = &v19;
      sub_2168FD278((unint64_t *)a4, v13, (uint64_t **)&v23);
      sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(12 * *(void *)a4), v14 + v8);
    }
    return;
  }
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  if (&v19 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    long long v19 = 0u;
    long long v20 = 0u;
    *(void *)(a4 + 32) = v21;
    uint64_t v21 = 0;
  }
  sub_2168F83DC((uint64_t)&v19);
}

void sub_216CBD334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CBD358(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7620F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CBD3A4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7620F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CBD3D4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CBD3DC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C762158)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CBD41C()
{
  return &unk_26C762158;
}

void sub_216CBD428(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  __n128 v9[2] = v6;
  v9[3] = v7;
  int v10 = sub_216C688BC();
  sub_216CBD4A8(v5, (uint64_t)v9, v3, v4);
}

void sub_216CBD4A8(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v14 = 0;
    memset(&__dst, 0, 32);
    long long v6 = *(_OWORD *)(a2 + 16);
    v11[0] = *(_OWORD *)a2;
    v11[1] = v6;
    uint64_t v12 = *(void *)(a2 + 32);
    sub_216CBD5B0(a1, v11, a3, (uint64_t)&__dst);
    sub_2168FD5F4(a4, &__dst);
    sub_2168F83DC((uint64_t)&__dst);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v8 = *(_OWORD *)a2;
    long long v9 = v5;
    uint64_t v10 = *(void *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      uint64_t v7 = 0;
      __int16 v15 = a3;
      char v16 = BYTE2(a3);
      do
      {
        __dst.n128_f32[v7] = (float)*((char *)&v15 + v7);
        ++v7;
      }
      while (v7 != 3);
    }
    else
    {
      *((void *)&v8 + 1) = *(void *)(*(void *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_216C82F78((uint64_t)&v8 + 8, &__dst, 0xCuLL);
    }
    sub_216B91440(a4, (uint64_t)&__dst);
  }
}

void sub_216CBD598(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_216CBD5B0(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      long long v7 = a2[1];
      long long v21 = *a2;
      long long v22 = v7;
      uint64_t v23 = *((void *)a2 + 4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B917D0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B917D0))
      {
        long long v20 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v20) {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
        }
        byte_267B917C8 = *v20;
        __cxa_guard_release(&qword_267B917D0);
      }
      unint64_t v27 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v21 + 8, &v27, 8uLL)) {
          return;
        }
        unint64_t v8 = v27;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_216C82F78((uint64_t)&v21 + 8, &__dst, 4uLL) & 1) == 0) {
          return;
        }
        unint64_t v8 = __dst;
        unint64_t v27 = __dst;
      }
      unint64_t v10 = 12 * v8;
      uint64_t v11 = *((void *)&v21 + 1);
      if (!byte_267B917C8 || v10 < 0x800 || (BYTE8(v21) & 3) != 0)
      {
        uint64_t v14 = *(void *)(*(void *)v22 + 32);
        uint64_t v15 = *((void *)&v21 + 1) - *(void *)(*(void *)v22 + 24);
        unint64_t v16 = v14 - v15;
        if (v15 < 0 || (v16 & 0x8000000000000000) != 0 || (v8 <= v16 ? (BOOL v17 = v10 > v16) : (BOOL v17 = 1), v17))
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2117;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v8, 12 * v8, v16, v14);
        }
        else
        {
          DWORD2(__dst) = 0;
          *(void *)&long long __dst = 0;
          p_dst = &__dst;
          sub_2168FD278((unint64_t *)a4, v8, (uint64_t **)&p_dst);
          sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v18, v19);
          sub_216C82F78((uint64_t)&v21 + 8, *(void **)(a4 + 32), 12 * *(void *)a4);
        }
      }
      else
      {
        uint64_t v12 = sub_216C99144((uint64_t)&v21 + 8, *((char **)&v21 + 1), 12 * v8, v8);
        if (v12)
        {
          *(void *)&long long v25 = 0;
          *((void *)&v25 + 1) = v12;
          uint64_t v26 = v11;
          long long __dst = v27;
          if (&__dst != (long long *)a4)
          {
            sub_2168F83DC(a4);
            long long v13 = v25;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v13;
            long long __dst = 0u;
            long long v25 = 0u;
            *(void *)(a4 + 32) = v26;
            uint64_t v26 = 0;
          }
          sub_2168F83DC((uint64_t)&__dst);
        }
        else
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2109;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v10);
          sub_2168F845C((void *)a4);
        }
      }
    }
  }
  else
  {
    uint64_t v26 = 0;
    long long __dst = 0u;
    long long v25 = 0u;
    if (&__dst != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v9 = v25;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v9;
      long long __dst = 0u;
      long long v25 = 0u;
      *(void *)(a4 + 32) = v26;
      uint64_t v26 = 0;
    }
    sub_2168F83DC((uint64_t)&__dst);
  }
}

void sub_216CBD8D4(_Unwind_Exception *a1)
{
}

__n128 sub_216CBD924(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C762178;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CBD970(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C762178;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CBD9A0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CBD9A8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7621D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CBD9E8()
{
  return &unk_26C7621D8;
}

void sub_216CBD9F4(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CBDAA0(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CBDA7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CBDAA0(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v15 = 0;
    memset(&v14, 0, 32);
    long long v11 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v12 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *((void *)a2 + 3);
    sub_216CBDC08(a1, &v11, a3, (uint64_t)&v14);
    if (v12) {
      sub_216784EC4(v12);
    }
    sub_2168FD5F4(a4, &v14);
    sub_2168F83DC((uint64_t)&v14);
  }
  else
  {
    long long v8 = *a2;
    long long v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
    long long v9 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *((void *)a2 + 3);
    if ((a3 & 0x4000000000000000) != 0)
    {
      uint64_t v7 = 0;
      __int16 v16 = a3;
      char v17 = BYTE2(a3);
      do
      {
        v14.n128_f32[v7] = (float)*((char *)&v16 + v7);
        ++v7;
      }
      while (v7 != 3);
    }
    else
    {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
      sub_216C804FC((void *)&v8 + 1, (uint64_t)&v14, 0xCuLL);
      long long v5 = v9;
    }
    if (v5) {
      sub_216784EC4(v5);
    }
    sub_216B91440(a4, (uint64_t)&v14);
  }
}

void sub_216CBDBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CBDC08(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v21) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v21, 4uLL)) {
        return;
      }
    }
    uint64_t v7 = a2[1];
    long long v8 = (std::__shared_weak_count *)a2[2];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = a2[3];
      uint64_t v18 = v7;
      long long v19 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = a2[3];
      uint64_t v18 = a2[1];
      long long v19 = 0;
    }
    uint64_t v20 = v9;
    unint64_t v24 = 0;
    if (v6 > 0x6FF)
    {
      if (sub_216C804FC(&v18, (uint64_t)&v24, 8uLL))
      {
LABEL_14:
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
        unint64_t v12 = v11 - v20;
        unint64_t v13 = v24;
        if (v20 < 0 || (v12 & 0x8000000000000000) != 0 || (v24 <= v12 ? (BOOL v14 = 12 * v24 > v12) : (BOOL v14 = 1), v14))
        {
          *(void *)&long long v21 = "usd/crateFile.cpp";
          *((void *)&v21 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v22 = 2053;
          *((void *)&v22 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
          LOBYTE(v23) = 0;
          uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 12 * v13, v12, v17);
        }
        else
        {
          DWORD2(v21) = 0;
          *(void *)&long long v21 = 0;
          long long v25 = &v21;
          sub_2168FD278((unint64_t *)a4, v24, (uint64_t **)&v25);
          sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
          sub_216C804FC(&v18, *(void *)(a4 + 32), 12 * *(void *)a4);
        }
      }
    }
    else
    {
      LODWORD(v21) = 0;
      if (sub_216C804FC(&v18, (uint64_t)&v21, 4uLL))
      {
        unint64_t v24 = v21;
        goto LABEL_14;
      }
    }
    if (v19) {
      sub_216784EC4(v19);
    }
    if (v8) {
      sub_216784EC4(v8);
    }
    return;
  }
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  if (&v21 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v10 = v22;
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v10;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a4 + 32) = v23;
    uint64_t v23 = 0;
  }
  sub_2168F83DC((uint64_t)&v21);
}

void sub_216CBDE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CBDEC0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7621F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CBDF0C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7621F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CBDF3C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return sub_216CBDF9C(*(uint64_t **)(a1 + 16), *(void *)(a1 + 8), (void *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), this);
}

uint64_t sub_216CBDF50(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C762258)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CBDF90()
{
  return &unk_26C762258;
}

unint64_t sub_216CBDF9C(uint64_t *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v4 = this;
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)v4 + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      uint64_t v10 = *(void *)v4;
    }
    return sub_216CBE128((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    uint64_t v12 = 0;
    v21[0] = a2;
    v21[1] = a3;
    int v13 = *(_DWORD *)v4;
    WORD2(v20) = *((_WORD *)v4 + 2);
    LODWORD(v20) = v13;
    for (int i = (unsigned __int16 *)&v20; (sub_216CBE6E8(i, (unsigned char *)&v22 + v12) & 1) != 0; ++i)
    {
      if (++v12 == 3) {
        return v22 | ((unint64_t)v23 << 16) | 0x4019000000000000;
      }
    }
    uint64_t v15 = *a1;
    if (!*a1)
    {
      __int16 v16 = operator new(0x28uLL);
      *__int16 v16 = 0u;
      v16[1] = 0u;
      *((_DWORD *)v16 + 8) = 1065353216;
      sub_2168CAEA8(a1, (uint64_t)v16);
      uint64_t v15 = *a1;
    }
    uint64_t v20 = 0;
    uint64_t v17 = sub_216CBE7E4(v15, (unsigned __int16 *)v4, (uint64_t)v4, &v20);
    uint64_t v18 = v17;
    if (v19)
    {
      v17[3] = *a3 & 0xFFFFFFFFFFFFLL | 0x19000000000000;
      sub_216CBE644((uint64_t)v21, (char *)v4);
    }
    return v18[3];
  }
}

unint64_t sub_216CBE128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a2;
  v19[1] = a3;
  unint64_t result = 0x8019000000000000;
  unint64_t v18 = 0x8019000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      uint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7C260(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    int v13 = sub_216CBE358(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        uint64_t v17 = sub_216C98168((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          uint64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(void *)a4;
          sub_216C984FC((uint64_t)v20, (char *)&__src);
        }
        sub_216CBE2AC((uint64_t)v20, *(char **)(a4 + 32), *(void *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8019000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(void *)a4;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        sub_216CBE2AC((uint64_t)v19, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

uint64_t sub_216CBE2AC(uint64_t result, char *__src, uint64_t a3)
{
  uint64_t v3 = 6 * a3;
  if (6 * a3)
  {
    long long v5 = *(void **)(result + 8);
    do
    {
      uint64_t v6 = v5[2];
      uint64_t v7 = v6 - *v5 + 0x80000;
      if (v3 >= v7) {
        size_t v8 = v6 - *v5 + 0x80000;
      }
      else {
        size_t v8 = v3;
      }
      uint64_t v9 = *v5 - v6;
      if ((int64_t)(v8 + v9) > v5[4]) {
        v5[4] = v8 + v9;
      }
      unint64_t result = (uint64_t)memcpy((void *)(v5[3] + v9), __src, v8);
      *v5 += v8;
      if (v7 <= v3) {
        unint64_t result = sub_216C7A9E4((BOOL)v5);
      }
      __src += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return result;
}

uint64_t *sub_216CBE358(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = sub_2168FE50C((uint64_t)v32, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (uint64_t *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_2168FE584(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (uint64_t *)(a1 + 16);
  unint64_t v18 = operator new(0x40uLL);
  int i = (uint64_t *)v18;
  uint64_t v33 = a1 + 16;
  *(void *)unint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    long long v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      long long v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  char v29 = *(uint64_t **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *char v29 = (uint64_t)i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = (uint64_t)i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    char v29 = (uint64_t *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CBE5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CBE5EC(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CBE5EC(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t sub_216CBE644(uint64_t a1, char *__src)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = 6;
  do
  {
    uint64_t v5 = v3[2];
    uint64_t v6 = v5 - *v3 + 0x80000;
    if (v4 >= v6) {
      size_t v7 = v5 - *v3 + 0x80000;
    }
    else {
      size_t v7 = v4;
    }
    uint64_t v8 = *v3 - v5;
    if ((int64_t)(v7 + v8) > v3[4]) {
      v3[4] = v7 + v8;
    }
    uint64_t result = (uint64_t)memcpy((void *)(v3[3] + v8), __src, v7);
    *v3 += v7;
    if (v6 <= v4) {
      uint64_t result = sub_216C7A9E4((BOOL)v3);
    }
    __src += v7;
    v4 -= v7;
  }
  while (v4);
  return result;
}

uint64_t sub_216CBE6E8(unsigned __int16 *a1, unsigned char *a2)
{
  float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
  if (v4 < -128.0 || v4 > 127.0) {
    return 0;
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)(int)v4);
  if ((int)v4)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23])
    {
      unsigned int v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23]
         + (((v5 & 0x7FFFFF) + ((v5 >> 13) & 1) + 4095) >> 13);
    }
    else
    {
      LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v5);
      float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
    }
  }
  else
  {
    unsigned int v6 = v5 >> 16;
  }
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)v6] != v4) {
    return 0;
  }
  *a2 = (int)v4;
  return 1;
}

void *sub_216CBE7E4(uint64_t a1, unsigned __int16 *a2, uint64_t a3, void *a4)
{
  uint64_t v26 = 0;
  char v27 = 0;
  sub_2168F44D4((uint64_t)&v26, a2, a2 + 1, a2 + 2);
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v26));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (int i = *v13; i; int i = *(void **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_2168F450C((unsigned __int16 *)i + 8, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  int i = operator new(0x20uLL);
  *(void *)int i = 0;
  *((void *)i + 1) = v9;
  *((_DWORD *)i + 4) = *(_DWORD *)a3;
  *((_WORD *)i + 10) = *(_WORD *)(a3 + 4);
  *((void *)i + 3) = *a4;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  float v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)int i = *v23;
LABEL_38:
    *float v23 = i;
    goto LABEL_39;
  }
  *(void *)int i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v24 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    float v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CBEA58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216CBEA74(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C762278;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CBEAC0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C762278;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CBEAF0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  unsigned int v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  __n128 v10[2] = 0;
  _DWORD v10[3] = v8;
  void v10[4] = v9;
  sub_216CBEB88(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_216CBEB3C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7622D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CBEB7C()
{
  return &unk_26C7622D8;
}

void sub_216CBEB88(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    long long v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a2 + 32);
    sub_216CBEC4C(a1, v6, a3, (uint64_t)v8);
    sub_2168FE194(a4, v8);
    sub_2168F83DC((uint64_t)v8);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0) {
      sub_216CBEE4C((uint64_t)v8, a3);
    }
    else {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v8, (char *)6, *(void *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    sub_216B9120C((uint64_t)a4, (uint64_t)v8);
  }
}

void sub_216CBEC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CBEC4C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      uint64_t v8 = a2[1];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
      unint64_t v22 = 0;
      if (v7 > 0x6FF)
      {
        ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1) {
          return;
        }
        unint64_t v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v19)) {
        return;
      }
      uint64_t v8 = a2[1];
      uint64_t v5 = a2[2];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1) {
      return;
    }
    unint64_t v13 = v19;
    unint64_t v22 = v19;
LABEL_13:
    ssize_t v14 = v12 + v5;
    unint64_t v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (BOOL v16 = 6 * v13 > v15) : (BOOL v16 = 1), v16))
    {
      *(void *)&long long v19 = "usd/crateFile.cpp";
      *((void *)&v19 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v20 = 2053;
      *((void *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec3h]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 6 * v13, v10 - v14, v10);
    }
    else
    {
      __int16 v24 = 0;
      int v23 = 0;
      *(void *)&long long v19 = &v23;
      sub_2168FDE18((unint64_t *)a4, v13, (int **)&v19);
      sub_2168FE0EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(6 * *(void *)a4), v14 + v8);
    }
    return;
  }
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  if (&v19 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    long long v19 = 0u;
    long long v20 = 0u;
    *(void *)(a4 + 32) = v21;
    uint64_t v21 = 0;
  }
  sub_2168F83DC((uint64_t)&v19);
}

void sub_216CBEE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CBEE4C(uint64_t a1, int a2)
{
  uint64_t v3 = 0;
  __int16 v6 = a2;
  char v7 = BYTE2(a2);
  do
  {
    unint64_t v4 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)*((char *)&v6 + v3));
    if (*((unsigned char *)&v6 + v3))
    {
      if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23]) {
        uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23]
      }
               + (((v4 & 0x7FFFFF) + ((v4 >> 13) & 1) + 4095) >> 13);
      else {
        uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v4);
      }
    }
    else
    {
      uint64_t result = v4 >> 16;
    }
    *(_WORD *)(a1 + 2 * v3++) = result;
  }
  while (v3 != 3);
  return result;
}

__n128 sub_216CBEEF4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7622F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CBEF40(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7622F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CBEF70(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CBEF78(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C762358)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CBEFB8()
{
  return &unk_26C762358;
}

void sub_216CBEFC4(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  __n128 v9[2] = v6;
  v9[3] = v7;
  int v10 = sub_216C688BC();
  sub_216CBF044(v5, (uint64_t)v9, v3, v4);
}

void sub_216CBF044(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v13 = 0;
    memset(__dst, 0, sizeof(__dst));
    long long v6 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v6;
    uint64_t v11 = *(void *)(a2 + 32);
    sub_216CBF128(a1, v10, a3, (uint64_t)__dst);
    sub_2168FE194(a4, __dst);
    sub_2168F83DC((uint64_t)__dst);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v7 = *(_OWORD *)a2;
    long long v8 = v5;
    uint64_t v9 = *(void *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      sub_216CBEE4C((uint64_t)__dst, a3);
    }
    else
    {
      *((void *)&v7 + 1) = *(void *)(*(void *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_216C82F78((uint64_t)&v7 + 8, __dst, 6uLL);
    }
    sub_216B9120C((uint64_t)a4, (uint64_t)__dst);
  }
}

void sub_216CBF110(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_216CBF128(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      long long v7 = a2[1];
      long long v21 = *a2;
      long long v22 = v7;
      uint64_t v23 = *((void *)a2 + 4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B917E0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B917E0))
      {
        long long v20 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v20) {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
        }
        byte_267B917D8 = *v20;
        __cxa_guard_release(&qword_267B917E0);
      }
      unint64_t v27 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v21 + 8, &v27, 8uLL)) {
          return;
        }
        unint64_t v8 = v27;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_216C82F78((uint64_t)&v21 + 8, &__dst, 4uLL) & 1) == 0) {
          return;
        }
        unint64_t v8 = __dst;
        unint64_t v27 = __dst;
      }
      unint64_t v10 = 6 * v8;
      uint64_t v11 = *((void *)&v21 + 1);
      if (!byte_267B917D8 || v10 < 0x800 || (BYTE8(v21) & 1) != 0)
      {
        uint64_t v14 = *(void *)(*(void *)v22 + 32);
        uint64_t v15 = *((void *)&v21 + 1) - *(void *)(*(void *)v22 + 24);
        unint64_t v16 = v14 - v15;
        if (v15 < 0 || (v16 & 0x8000000000000000) != 0 || (v8 <= v16 ? (BOOL v17 = v10 > v16) : (BOOL v17 = 1), v17))
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2117;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec3h]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v8, 6 * v8, v16, v14);
        }
        else
        {
          __int16 v29 = 0;
          int v28 = 0;
          *(void *)&long long __dst = &v28;
          sub_2168FDE18((unint64_t *)a4, v8, (int **)&__dst);
          sub_2168FE0EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v18, v19);
          sub_216C82F78((uint64_t)&v21 + 8, *(void **)(a4 + 32), 6 * *(void *)a4);
        }
      }
      else
      {
        uint64_t v12 = sub_216C99144((uint64_t)&v21 + 8, *((char **)&v21 + 1), 6 * v8, v8);
        if (v12)
        {
          *(void *)&long long v25 = 0;
          *((void *)&v25 + 1) = v12;
          uint64_t v26 = v11;
          long long __dst = v27;
          if (&__dst != (long long *)a4)
          {
            sub_2168F83DC(a4);
            long long v13 = v25;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v13;
            long long __dst = 0u;
            long long v25 = 0u;
            *(void *)(a4 + 32) = v26;
            uint64_t v26 = 0;
          }
          sub_2168F83DC((uint64_t)&__dst);
        }
        else
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2109;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec3h]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v10);
          sub_2168F845C((void *)a4);
        }
      }
    }
  }
  else
  {
    uint64_t v26 = 0;
    long long __dst = 0u;
    long long v25 = 0u;
    if (&__dst != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v9 = v25;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v9;
      long long __dst = 0u;
      long long v25 = 0u;
      *(void *)(a4 + 32) = v26;
      uint64_t v26 = 0;
    }
    sub_2168F83DC((uint64_t)&__dst);
  }
}

void sub_216CBF448(_Unwind_Exception *a1)
{
}

__n128 sub_216CBF498(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C762378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CBF4E4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C762378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CBF514(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CBF51C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7623D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CBF55C()
{
  return &unk_26C7623D8;
}

void sub_216CBF568(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CBF614(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CBF5F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CBF614(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v14 = 0;
    memset(v13, 0, sizeof(v13));
    long long v10 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v11 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *((void *)a2 + 3);
    sub_216CBF75C(a1, &v10, a3, (uint64_t)v13);
    if (v11) {
      sub_216784EC4(v11);
    }
    sub_2168FE194(a4, v13);
    sub_2168F83DC((uint64_t)v13);
  }
  else
  {
    long long v7 = *a2;
    long long v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v8 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *((void *)a2 + 3);
    if ((a3 & 0x4000000000000000) != 0)
    {
      sub_216CBEE4C((uint64_t)v13, a3);
    }
    else
    {
      uint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
      sub_216C804FC((void *)&v7 + 1, (uint64_t)v13, 6uLL);
      long long v5 = v8;
    }
    if (v5) {
      sub_216784EC4(v5);
    }
    sub_216B9120C((uint64_t)a4, (uint64_t)v13);
  }
}

void sub_216CBF71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CBF75C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v21) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v21, 4uLL)) {
        return;
      }
    }
    uint64_t v7 = a2[1];
    uint64_t v8 = (std::__shared_weak_count *)a2[2];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = a2[3];
      uint64_t v18 = v7;
      long long v19 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = a2[3];
      uint64_t v18 = a2[1];
      long long v19 = 0;
    }
    uint64_t v20 = v9;
    unint64_t v24 = 0;
    if (v6 > 0x6FF)
    {
      if (sub_216C804FC(&v18, (uint64_t)&v24, 8uLL))
      {
LABEL_14:
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
        unint64_t v12 = v11 - v20;
        unint64_t v13 = v24;
        if (v20 < 0 || (v12 & 0x8000000000000000) != 0 || (v24 <= v12 ? (BOOL v14 = 6 * v24 > v12) : (BOOL v14 = 1), v14))
        {
          *(void *)&long long v21 = "usd/crateFile.cpp";
          *((void *)&v21 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v22 = 2053;
          *((void *)&v22 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec3h]";
          LOBYTE(v23) = 0;
          uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 6 * v13, v12, v17);
        }
        else
        {
          __int16 v26 = 0;
          int v25 = 0;
          *(void *)&long long v21 = &v25;
          sub_2168FDE18((unint64_t *)a4, v24, (int **)&v21);
          sub_2168FE0EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
          sub_216C804FC(&v18, *(void *)(a4 + 32), 6 * *(void *)a4);
        }
      }
    }
    else
    {
      LODWORD(v21) = 0;
      if (sub_216C804FC(&v18, (uint64_t)&v21, 4uLL))
      {
        unint64_t v24 = v21;
        goto LABEL_14;
      }
    }
    if (v19) {
      sub_216784EC4(v19);
    }
    if (v8) {
      sub_216784EC4(v8);
    }
    return;
  }
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  if (&v21 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v10 = v22;
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v10;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a4 + 32) = v23;
    uint64_t v23 = 0;
  }
  sub_2168F83DC((uint64_t)&v21);
}

void sub_216CBF9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CBFA14(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7623F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CBFA60(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7623F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CBFA90(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return sub_216CBFAF0(*(uint64_t **)(a1 + 16), *(void *)(a1 + 8), (void *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), this);
}

uint64_t sub_216CBFAA4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C762458)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CBFAE4()
{
  return &unk_26C762458;
}

unint64_t sub_216CBFAF0(uint64_t *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    }
    else {
      uint64_t v10 = *(void *)this;
    }
    return sub_216CBFC70((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      unint64_t v12 = (int *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                          + 168))(this);
    else {
      unint64_t v12 = *(int **)this;
    }
    uint64_t v13 = 0;
    v21[0] = a2;
    v21[1] = a3;
    int v14 = v12[2];
    uint64_t v24 = *(void *)v12;
    int v25 = v14;
    while (1)
    {
      int v15 = *((_DWORD *)&v24 + v13);
      if (v15 != (char)v15) {
        break;
      }
      *((unsigned char *)&v22 + v13++) = v15;
      if (v13 == 3) {
        return v22 | ((unint64_t)v23 << 16) | 0x401A000000000000;
      }
    }
    uint64_t v16 = *a1;
    if (!*a1)
    {
      uint64_t v17 = operator new(0x28uLL);
      *uint64_t v17 = 0u;
      v17[1] = 0u;
      *((_DWORD *)v17 + 8) = 1065353216;
      sub_2168CAEA8(a1, (uint64_t)v17);
      uint64_t v16 = *a1;
    }
    uint64_t v24 = 0;
    uint64_t v18 = sub_216CC00E0(v16, v12, (uint64_t)v12, &v24);
    long long v19 = v18;
    if (v20)
    {
      void v18[4] = *a3 & 0xFFFFFFFFFFFFLL | 0x1A000000000000;
      sub_216C94560((uint64_t)v21, (char *)v12);
    }
    return v19[4];
  }
}

unint64_t sub_216CBFC70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a2;
  v19[1] = a3;
  unint64_t result = 0x801A000000000000;
  unint64_t v18 = 0x801A000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      unint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7C320(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    uint64_t v13 = sub_216CBFDF4(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        uint64_t v17 = sub_216C98168((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          uint64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(void *)a4;
          sub_216C984FC((uint64_t)v20, (char *)&__src);
        }
        sub_216C9638C((uint64_t)v20, *(char **)(a4 + 32), *(void *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x801A000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(void *)a4;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        sub_216C9638C((uint64_t)v19, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void *sub_216CBFDF4(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = sub_2169BB714((uint64_t)v32, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_2169BB810(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  unint64_t v18 = operator new(0x40uLL);
  int i = v18;
  uint64_t v33 = a1 + 16;
  *(void *)unint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    long long v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      long long v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  __int16 v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *__int16 v29 = i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    __int16 v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CC006C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CC0088(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CC0088(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void *sub_216CC00E0(uint64_t a1, int *a2, uint64_t a3, void *a4)
{
  uint64_t v25 = 0;
  char v26 = 0;
  sub_2169BB374((uint64_t)&v25, a2, a2 + 1, a2 + 2);
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v25));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint8x8_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == *a2 && *((_DWORD *)v13 + 5) == a2[1] && *((_DWORD *)v13 + 6) == a2[2]) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  unint64_t v13 = operator new(0x28uLL);
  void *v13 = 0;
  v13[1] = v9;
  __n128 v13[2] = *(void *)a3;
  *((_DWORD *)v13 + 6) = *(_DWORD *)(a3 + 8);
  v13[4] = *a4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_21678A04C(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  float v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *v13 = *v22;
LABEL_40:
    void *v22 = v13;
    goto LABEL_41;
  }
  void *v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    unint64_t v23 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    float v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_216CC0368(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216CC0384(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C762478;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC03D0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C762478;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CC0400(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  unsigned int v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  long long v10[2] = 0;
  _DWORD v10[3] = v8;
  void v10[4] = v9;
  sub_216CC0498(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_216CC044C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7624D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC048C()
{
  return &unk_26C7624D8;
}

void sub_216CC0498(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v10 = 0;
    memset(v9, 0, sizeof(v9));
    long long v5 = *(_OWORD *)(a2 + 16);
    v7[0] = *(_OWORD *)a2;
    v7[1] = v5;
    uint64_t v8 = *(void *)(a2 + 32);
    sub_216CC057C(a1, v7, a3, (uint64_t)v9);
    sub_216B90D24(a4, v9);
    sub_2168F83DC((uint64_t)v9);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0)
    {
      uint64_t v6 = 0;
      __int16 v11 = a3;
      char v12 = BYTE2(a3);
      do
      {
        v9[0].n128_u32[v6] = *((char *)&v11 + v6);
        ++v6;
      }
      while (v6 != 3);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v9, (char *)0xC, *(void *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    sub_216B90C88(a4, (uint64_t)v9);
  }
}

void sub_216CC0564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CC057C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      uint64_t v8 = a2[1];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
      unint64_t v22 = 0;
      if (v7 > 0x6FF)
      {
        ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1) {
          return;
        }
        unint64_t v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v19)) {
        return;
      }
      uint64_t v8 = a2[1];
      uint64_t v5 = a2[2];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1) {
      return;
    }
    unint64_t v13 = v19;
    unint64_t v22 = v19;
LABEL_13:
    ssize_t v14 = v12 + v5;
    unint64_t v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (BOOL v16 = 12 * v13 > v15) : (BOOL v16 = 1), v16))
    {
      *(void *)&long long v19 = "usd/crateFile.cpp";
      *((void *)&v19 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v20 = 2053;
      *((void *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec3i]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 12 * v13, v10 - v14, v10);
    }
    else
    {
      DWORD2(v19) = 0;
      *(void *)&long long v19 = 0;
      unint64_t v23 = &v19;
      sub_2169BB98C((unint64_t *)a4, v13, (uint64_t **)&v23);
      sub_2169BBC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(12 * *(void *)a4), v14 + v8);
    }
    return;
  }
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  if (&v19 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    long long v19 = 0u;
    long long v20 = 0u;
    *(void *)(a4 + 32) = v21;
    uint64_t v21 = 0;
  }
  sub_2168F83DC((uint64_t)&v19);
}

void sub_216CC0760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CC0784(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7624F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC07D0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7624F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CC0800(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CC0808(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C762558)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC0848()
{
  return &unk_26C762558;
}

void sub_216CC0854(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  __n128 v9[2] = v6;
  v9[3] = v7;
  int v10 = sub_216C688BC();
  sub_216CC08D4(v5, (uint64_t)v9, v3, v4);
}

void sub_216CC08D4(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v14 = 0;
    memset(&__dst, 0, 32);
    long long v6 = *(_OWORD *)(a2 + 16);
    v11[0] = *(_OWORD *)a2;
    v11[1] = v6;
    uint64_t v12 = *(void *)(a2 + 32);
    sub_216CC09D8(a1, v11, a3, (uint64_t)&__dst);
    sub_216B90D24(a4, &__dst);
    sub_2168F83DC((uint64_t)&__dst);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v8 = *(_OWORD *)a2;
    long long v9 = v5;
    uint64_t v10 = *(void *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      uint64_t v7 = 0;
      __int16 v15 = a3;
      char v16 = BYTE2(a3);
      do
      {
        __dst.n128_u32[v7] = *((char *)&v15 + v7);
        ++v7;
      }
      while (v7 != 3);
    }
    else
    {
      *((void *)&v8 + 1) = *(void *)(*(void *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_216C82F78((uint64_t)&v8 + 8, &__dst, 0xCuLL);
    }
    sub_216B90C88(a4, (uint64_t)&__dst);
  }
}

void sub_216CC09C0(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_216CC09D8(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      long long v7 = a2[1];
      long long v21 = *a2;
      long long v22 = v7;
      uint64_t v23 = *((void *)a2 + 4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B917F0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B917F0))
      {
        long long v20 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v20) {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
        }
        byte_267B917E8 = *v20;
        __cxa_guard_release(&qword_267B917F0);
      }
      unint64_t v27 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v21 + 8, &v27, 8uLL)) {
          return;
        }
        unint64_t v8 = v27;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_216C82F78((uint64_t)&v21 + 8, &__dst, 4uLL) & 1) == 0) {
          return;
        }
        unint64_t v8 = __dst;
        unint64_t v27 = __dst;
      }
      unint64_t v10 = 12 * v8;
      uint64_t v11 = *((void *)&v21 + 1);
      if (!byte_267B917E8 || v10 < 0x800 || (BYTE8(v21) & 3) != 0)
      {
        uint64_t v14 = *(void *)(*(void *)v22 + 32);
        uint64_t v15 = *((void *)&v21 + 1) - *(void *)(*(void *)v22 + 24);
        unint64_t v16 = v14 - v15;
        if (v15 < 0 || (v16 & 0x8000000000000000) != 0 || (v8 <= v16 ? (BOOL v17 = v10 > v16) : (BOOL v17 = 1), v17))
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2117;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec3i]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v8, 12 * v8, v16, v14);
        }
        else
        {
          DWORD2(__dst) = 0;
          *(void *)&long long __dst = 0;
          p_dst = &__dst;
          sub_2169BB98C((unint64_t *)a4, v8, (uint64_t **)&p_dst);
          sub_2169BBC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v18, v19);
          sub_216C82F78((uint64_t)&v21 + 8, *(void **)(a4 + 32), 12 * *(void *)a4);
        }
      }
      else
      {
        uint64_t v12 = sub_216C99144((uint64_t)&v21 + 8, *((char **)&v21 + 1), 12 * v8, v8);
        if (v12)
        {
          *(void *)&long long v25 = 0;
          *((void *)&v25 + 1) = v12;
          uint64_t v26 = v11;
          long long __dst = v27;
          if (&__dst != (long long *)a4)
          {
            sub_2168F83DC(a4);
            long long v13 = v25;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v13;
            long long __dst = 0u;
            long long v25 = 0u;
            *(void *)(a4 + 32) = v26;
            uint64_t v26 = 0;
          }
          sub_2168F83DC((uint64_t)&__dst);
        }
        else
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2109;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec3i]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v10);
          sub_2168F845C((void *)a4);
        }
      }
    }
  }
  else
  {
    uint64_t v26 = 0;
    long long __dst = 0u;
    long long v25 = 0u;
    if (&__dst != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v9 = v25;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v9;
      long long __dst = 0u;
      long long v25 = 0u;
      *(void *)(a4 + 32) = v26;
      uint64_t v26 = 0;
    }
    sub_2168F83DC((uint64_t)&__dst);
  }
}

void sub_216CC0CFC(_Unwind_Exception *a1)
{
}

__n128 sub_216CC0D4C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C762578;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC0D98(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C762578;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CC0DC8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CC0DD0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7625D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC0E10()
{
  return &unk_26C7625D8;
}

void sub_216CC0E1C(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CC0EC8(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CC0EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CC0EC8(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v15 = 0;
    memset(&v14, 0, 32);
    long long v11 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v12 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *((void *)a2 + 3);
    sub_216CC102C(a1, &v11, a3, (uint64_t)&v14);
    if (v12) {
      sub_216784EC4(v12);
    }
    sub_216B90D24(a4, &v14);
    sub_2168F83DC((uint64_t)&v14);
  }
  else
  {
    long long v8 = *a2;
    long long v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
    long long v9 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *((void *)a2 + 3);
    if ((a3 & 0x4000000000000000) != 0)
    {
      uint64_t v7 = 0;
      __int16 v16 = a3;
      char v17 = BYTE2(a3);
      do
      {
        v14.n128_u32[v7] = *((char *)&v16 + v7);
        ++v7;
      }
      while (v7 != 3);
    }
    else
    {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
      sub_216C804FC((void *)&v8 + 1, (uint64_t)&v14, 0xCuLL);
      long long v5 = v9;
    }
    if (v5) {
      sub_216784EC4(v5);
    }
    sub_216B90C88(a4, (uint64_t)&v14);
  }
}

void sub_216CC0FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CC102C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v21) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v21, 4uLL)) {
        return;
      }
    }
    uint64_t v7 = a2[1];
    long long v8 = (std::__shared_weak_count *)a2[2];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = a2[3];
      uint64_t v18 = v7;
      long long v19 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = a2[3];
      uint64_t v18 = a2[1];
      long long v19 = 0;
    }
    uint64_t v20 = v9;
    unint64_t v24 = 0;
    if (v6 > 0x6FF)
    {
      if (sub_216C804FC(&v18, (uint64_t)&v24, 8uLL))
      {
LABEL_14:
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
        unint64_t v12 = v11 - v20;
        unint64_t v13 = v24;
        if (v20 < 0 || (v12 & 0x8000000000000000) != 0 || (v24 <= v12 ? (BOOL v14 = 12 * v24 > v12) : (BOOL v14 = 1), v14))
        {
          *(void *)&long long v21 = "usd/crateFile.cpp";
          *((void *)&v21 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v22 = 2053;
          *((void *)&v22 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec3i]";
          LOBYTE(v23) = 0;
          uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 12 * v13, v12, v17);
        }
        else
        {
          DWORD2(v21) = 0;
          *(void *)&long long v21 = 0;
          long long v25 = &v21;
          sub_2169BB98C((unint64_t *)a4, v24, (uint64_t **)&v25);
          sub_2169BBC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
          sub_216C804FC(&v18, *(void *)(a4 + 32), 12 * *(void *)a4);
        }
      }
    }
    else
    {
      LODWORD(v21) = 0;
      if (sub_216C804FC(&v18, (uint64_t)&v21, 4uLL))
      {
        unint64_t v24 = v21;
        goto LABEL_14;
      }
    }
    if (v19) {
      sub_216784EC4(v19);
    }
    if (v8) {
      sub_216784EC4(v8);
    }
    return;
  }
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  if (&v21 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v10 = v22;
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v10;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a4 + 32) = v23;
    uint64_t v23 = 0;
  }
  sub_2168F83DC((uint64_t)&v21);
}

void sub_216CC12A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CC12E4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7625F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC1330(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7625F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CC1360(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return sub_216CC13C0(*(uint64_t **)(a1 + 16), *(void *)(a1 + 8), (void *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), this);
}

uint64_t sub_216CC1374(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C762658)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC13B4()
{
  return &unk_26C762658;
}

unint64_t sub_216CC13C0(uint64_t *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    }
    else {
      uint64_t v10 = *(void *)this;
    }
    return sub_216CC1518((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      unint64_t v12 = (double *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(this);
    else {
      unint64_t v12 = *(double **)this;
    }
    v20[0] = a2;
    v20[1] = a3;
    unsigned int v19 = 0;
    if (sub_216CC1988(&v19, *v12, v12[1], v12[2], v12[3]))
    {
      return v19 | 0x401B000000000000;
    }
    else
    {
      uint64_t v13 = *a1;
      if (!*a1)
      {
        BOOL v14 = operator new(0x28uLL);
        _OWORD *v14 = 0u;
        v14[1] = 0u;
        *((_DWORD *)v14 + 8) = 1065353216;
        sub_2168CAEA8(a1, (uint64_t)v14);
        uint64_t v13 = *a1;
      }
      double v18 = 0.0;
      uint64_t v15 = sub_216CC1A08(v13, v12, v12, &v18);
      __int16 v16 = v15;
      if (v17)
      {
        *((void *)v15 + 6) = *a3 & 0xFFFFFFFFFFFFLL | 0x1B000000000000;
        sub_216CB0C34((uint64_t)v20, (char *)v12);
      }
      return *((void *)v16 + 6);
    }
  }
}

unint64_t sub_216CC1518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a2;
  v19[1] = a3;
  unint64_t result = 0x801B000000000000;
  unint64_t v18 = 0x801B000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      unint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7C3E0(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    uint64_t v13 = sub_216CC169C(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        uint64_t v17 = sub_216C98168((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          uint64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(void *)a4;
          sub_216C984FC((uint64_t)v20, (char *)&__src);
        }
        sub_216C7B02C((uint64_t)v20, *(char **)(a4 + 32), *(void *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x801B000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(void *)a4;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        sub_216C7B02C((uint64_t)v19, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void *sub_216CC169C(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = sub_2169018E8((uint64_t)v32, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_2169019E8(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  unint64_t v18 = operator new(0x40uLL);
  int i = v18;
  uint64_t v33 = a1 + 16;
  *(void *)unint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    long long v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      long long v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  __int16 v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *__int16 v29 = i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    __int16 v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CC1914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CC1930(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CC1930(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t sub_216CC1988(_DWORD *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5 = 0;
  *(double *)unint64_t v10 = a2;
  *(double *)&v10[1] = a3;
  *(double *)&long long v10[2] = a4;
  *(double *)&_DWORD v10[3] = a5;
  while (1)
  {
    uint64_t v6 = 0;
    double v7 = *(double *)&v10[v5];
    if (v7 < -128.0 || v7 > 127.0) {
      break;
    }
    if (v7 != (double)(int)v7) {
      return 0;
    }
    *((unsigned char *)&v9 + v5++) = (int)v7;
    if (v5 == 4)
    {
      *a1 = v9;
      return 1;
    }
  }
  return v6;
}

double *sub_216CC1A08(uint64_t a1, double *a2, _OWORD *a3, double *a4)
{
  uint64_t v26 = 0;
  char v27 = 0;
  sub_2168F5C84((uint64_t)&v26, a2, a2 + 1, a2 + 2, a2 + 3);
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v26));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint8x8_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = (double *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v9)
          {
            if (v13[2] == *a2 && v13[3] == a2[1] && v13[4] == a2[2] && v13[5] == a2[3]) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = *(double **)v13;
        }
        while (v13);
      }
    }
  }
  unint64_t v13 = (double *)operator new(0x38uLL);
  double *v13 = 0.0;
  *((void *)v13 + 1) = v9;
  long long v15 = a3[1];
  *((_OWORD *)v13 + 1) = *a3;
  *((_OWORD *)v13 + 2) = v15;
  v13[6] = *a4;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  float v23 = *(double ***)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)unint64_t v13 = *v23;
LABEL_41:
    *float v23 = v13;
    goto LABEL_42;
  }
  double *v13 = *(double *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*(void *)v13)
  {
    unint64_t v24 = *(void *)(*(void *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    float v23 = (double **)(*(void *)a1 + 8 * v24);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_216CC1C98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216CC1CB4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C762678;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC1D00(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C762678;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_216CC1D30(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v11[0] = v6;
  v11[1] = v7;
  long long v11[2] = 0;
  void v11[3] = v8;
  v11[4] = v9;
  return sub_216CC1DC8(v5, (uint64_t)v11, v3, v4);
}

uint64_t sub_216CC1D7C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7626D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC1DBC()
{
  return &unk_26C7626D8;
}

double sub_216CC1DC8(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    long long v5 = *(_OWORD *)(a2 + 16);
    v8[0] = *(_OWORD *)a2;
    v8[1] = v5;
    uint64_t v9 = *(void *)(a2 + 32);
    sub_216CC1EA8(a1, v8, a3, (uint64_t)v10);
    sub_216901538(a4, v10);
    sub_2168F83DC((uint64_t)v10);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0)
    {
      uint64_t v7 = 0;
      _5C[0] = a3;
      do
      {
        v10[0].n128_f64[v7] = (double)*((char *)_5C + v7);
        ++v7;
      }
      while (v7 != 4);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v10, (char *)0x20, *(void *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    *(void *)&double result = sub_216B92128(a4, v10).n128_u64[0];
  }
  return result;
}

void sub_216CC1E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CC1EA8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      uint64_t v8 = a2[1];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
      unint64_t v22 = 0;
      if (v7 > 0x6FF)
      {
        ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1) {
          return;
        }
        unint64_t v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v19)) {
        return;
      }
      uint64_t v8 = a2[1];
      uint64_t v5 = a2[2];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1) {
      return;
    }
    unint64_t v13 = v19;
    unint64_t v22 = v19;
LABEL_13:
    ssize_t v14 = v12 + v5;
    unint64_t v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (BOOL v16 = 32 * v13 > v15) : (BOOL v16 = 1), v16))
    {
      *(void *)&long long v19 = "usd/crateFile.cpp";
      *((void *)&v19 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v20 = 2053;
      *((void *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 32 * v13, v10 - v14, v10);
    }
    else
    {
      long long v19 = 0u;
      long long v20 = 0u;
      float v23 = &v19;
      sub_216901228((unint64_t *)a4, v13, &v23);
      sub_2169014A0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(32 * *(void *)a4), v14 + v8);
    }
    return;
  }
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  if (&v19 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    long long v19 = 0u;
    long long v20 = 0u;
    *(void *)(a4 + 32) = v21;
    uint64_t v21 = 0;
  }
  sub_2168F83DC((uint64_t)&v19);
}

void sub_216CC2084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CC20A8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7626F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC20F4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7626F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_216CC2124(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_216CC2178((void *)(a1 + 8), a2, a3);
}

uint64_t sub_216CC212C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C762758)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC216C()
{
  return &unk_26C762758;
}

double sub_216CC2178(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v10[0] = *a1;
  v10[1] = v8;
  __n128 v10[2] = v6;
  _DWORD v10[3] = v7;
  int v11 = sub_216C688BC();
  return sub_216CC21F8(v5, (uint64_t)v10, v3, v4);
}

double sub_216CC21F8(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v15 = 0;
    memset(&__dst, 0, 32);
    long long v6 = *(_OWORD *)(a2 + 16);
    v12[0] = *(_OWORD *)a2;
    v12[1] = v6;
    uint64_t v13 = *(void *)(a2 + 32);
    sub_216CC22F8(a1, v12, a3, (uint64_t)&__dst);
    sub_216901538(a4, &__dst);
    sub_2168F83DC((uint64_t)&__dst);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v9 = *(_OWORD *)a2;
    long long v10 = v5;
    uint64_t v11 = *(void *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      uint64_t v8 = 0;
      int v16 = a3;
      do
      {
        __dst.n128_f64[v8] = (double)*((char *)&v16 + v8);
        ++v8;
      }
      while (v8 != 4);
    }
    else
    {
      *((void *)&v9 + 1) = *(void *)(*(void *)v10 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_216C82F78((uint64_t)&v9 + 8, &__dst, 0x20uLL);
    }
    *(void *)&double result = sub_216B92128(a4, &__dst).n128_u64[0];
  }
  return result;
}

void sub_216CC22E0(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_216CC22F8(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      long long v7 = a2[1];
      long long v21 = *a2;
      long long v22 = v7;
      uint64_t v23 = *((void *)a2 + 4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91800, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B91800))
      {
        long long v20 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v20) {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
        }
        byte_267B917F8 = *v20;
        __cxa_guard_release(&qword_267B91800);
      }
      unint64_t v27 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v21 + 8, &v27, 8uLL)) {
          return;
        }
        unint64_t v8 = v27;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_216C82F78((uint64_t)&v21 + 8, &__dst, 4uLL) & 1) == 0) {
          return;
        }
        unint64_t v8 = __dst;
        unint64_t v27 = __dst;
      }
      unint64_t v10 = 32 * v8;
      uint64_t v11 = *((void *)&v21 + 1);
      if (!byte_267B917F8 || v10 < 0x800 || (BYTE8(v21) & 7) != 0)
      {
        uint64_t v14 = *(void *)(*(void *)v22 + 32);
        uint64_t v15 = *((void *)&v21 + 1) - *(void *)(*(void *)v22 + 24);
        unint64_t v16 = v14 - v15;
        if (v15 < 0 || (v16 & 0x8000000000000000) != 0 || (v8 <= v16 ? (BOOL v17 = v10 > v16) : (BOOL v17 = 1), v17))
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2117;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v8, 32 * v8, v16, v14);
        }
        else
        {
          long long __dst = 0u;
          long long v25 = 0u;
          p_dst = &__dst;
          sub_216901228((unint64_t *)a4, v8, &p_dst);
          sub_2169014A0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v18, v19);
          sub_216C82F78((uint64_t)&v21 + 8, *(void **)(a4 + 32), 32 * *(void *)a4);
        }
      }
      else
      {
        uint64_t v12 = sub_216C99144((uint64_t)&v21 + 8, *((char **)&v21 + 1), 32 * v8, v8);
        if (v12)
        {
          *(void *)&long long v25 = 0;
          *((void *)&v25 + 1) = v12;
          uint64_t v26 = v11;
          long long __dst = v27;
          if (&__dst != (long long *)a4)
          {
            sub_2168F83DC(a4);
            long long v13 = v25;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v13;
            long long __dst = 0u;
            long long v25 = 0u;
            *(void *)(a4 + 32) = v26;
            uint64_t v26 = 0;
          }
          sub_2168F83DC((uint64_t)&__dst);
        }
        else
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2109;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v10);
          sub_2168F845C((void *)a4);
        }
      }
    }
  }
  else
  {
    uint64_t v26 = 0;
    long long __dst = 0u;
    long long v25 = 0u;
    if (&__dst != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v9 = v25;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v9;
      long long __dst = 0u;
      long long v25 = 0u;
      *(void *)(a4 + 32) = v26;
      uint64_t v26 = 0;
    }
    sub_2168F83DC((uint64_t)&__dst);
  }
}

void sub_216CC2614(_Unwind_Exception *a1)
{
}

__n128 sub_216CC2664(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C762778;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC26B0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C762778;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CC26E0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CC26E8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7627D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC2728()
{
  return &unk_26C7627D8;
}

void sub_216CC2734(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CC27E0(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CC27BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

double sub_216CC27E0(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v16 = 0;
    memset(&v15, 0, 32);
    long long v12 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    long long v13 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = *((void *)a2 + 3);
    sub_216CC2940(a1, &v12, a3, (uint64_t)&v15);
    if (v13) {
      sub_216784EC4(v13);
    }
    sub_216901538(a4, &v15);
    sub_2168F83DC((uint64_t)&v15);
  }
  else
  {
    long long v9 = *a2;
    long long v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
    long long v10 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *((void *)a2 + 3);
    if ((a3 & 0x4000000000000000) != 0)
    {
      uint64_t v8 = 0;
      int v17 = a3;
      do
      {
        v15.n128_f64[v8] = (double)*((char *)&v17 + v8);
        ++v8;
      }
      while (v8 != 4);
    }
    else
    {
      uint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
      sub_216C804FC((void *)&v9 + 1, (uint64_t)&v15, 0x20uLL);
      long long v5 = v10;
    }
    if (v5) {
      sub_216784EC4(v5);
    }
    *(void *)&double result = sub_216B92128(a4, &v15).n128_u64[0];
  }
  return result;
}

void sub_216CC28FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CC2940(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v21) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v21, 4uLL)) {
        return;
      }
    }
    uint64_t v7 = a2[1];
    uint64_t v8 = (std::__shared_weak_count *)a2[2];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = a2[3];
      uint64_t v18 = v7;
      long long v19 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = a2[3];
      uint64_t v18 = a2[1];
      long long v19 = 0;
    }
    uint64_t v20 = v9;
    unint64_t v24 = 0;
    if (v6 > 0x6FF)
    {
      if (sub_216C804FC(&v18, (uint64_t)&v24, 8uLL))
      {
LABEL_14:
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
        unint64_t v12 = v11 - v20;
        unint64_t v13 = v24;
        if (v20 < 0 || (v12 & 0x8000000000000000) != 0 || (v24 <= v12 ? (BOOL v14 = 32 * v24 > v12) : (BOOL v14 = 1), v14))
        {
          *(void *)&long long v21 = "usd/crateFile.cpp";
          *((void *)&v21 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v22 = 2053;
          *((void *)&v22 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
          LOBYTE(v23) = 0;
          uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 32 * v13, v12, v17);
        }
        else
        {
          long long v21 = 0u;
          long long v22 = 0u;
          long long v25 = &v21;
          sub_216901228((unint64_t *)a4, v24, &v25);
          sub_2169014A0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
          sub_216C804FC(&v18, *(void *)(a4 + 32), 32 * *(void *)a4);
        }
      }
    }
    else
    {
      LODWORD(v21) = 0;
      if (sub_216C804FC(&v18, (uint64_t)&v21, 4uLL))
      {
        unint64_t v24 = v21;
        goto LABEL_14;
      }
    }
    if (v19) {
      sub_216784EC4(v19);
    }
    if (v8) {
      sub_216784EC4(v8);
    }
    return;
  }
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  if (&v21 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v10 = v22;
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v10;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a4 + 32) = v23;
    uint64_t v23 = 0;
  }
  sub_2168F83DC((uint64_t)&v21);
}

void sub_216CC2BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CC2BF0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7627F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC2C3C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7627F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CC2C6C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return sub_216CC2CCC(*(uint64_t **)(a1 + 16), *(void *)(a1 + 8), (void *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), this);
}

uint64_t sub_216CC2C80(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C762858)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC2CC0()
{
  return &unk_26C762858;
}

unint64_t sub_216CC2CCC(uint64_t *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    }
    else {
      uint64_t v10 = *(void *)this;
    }
    return sub_216CC2E24((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      unint64_t v12 = (float *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                            + 168))(this);
    else {
      unint64_t v12 = *(float **)this;
    }
    v20[0] = a2;
    v20[1] = a3;
    unsigned int v19 = 0;
    if (sub_216CC3294(&v19, *v12, v12[1], v12[2], v12[3]))
    {
      return v19 | 0x401C000000000000;
    }
    else
    {
      uint64_t v13 = *a1;
      if (!*a1)
      {
        BOOL v14 = operator new(0x28uLL);
        _OWORD *v14 = 0u;
        v14[1] = 0u;
        *((_DWORD *)v14 + 8) = 1065353216;
        sub_2168CAEA8(a1, (uint64_t)v14);
        uint64_t v13 = *a1;
      }
      uint64_t v18 = 0;
      uint64_t v15 = sub_216CC3304(v13, v12, v12, &v18);
      uint64_t v16 = v15;
      if (v17)
      {
        *((void *)v15 + 4) = *a3 & 0xFFFFFFFFFFFFLL | 0x1C000000000000;
        sub_216C944BC((uint64_t)v20, (char *)v12);
      }
      return *((void *)v16 + 4);
    }
  }
}

unint64_t sub_216CC2E24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a2;
  v19[1] = a3;
  unint64_t result = 0x801C000000000000;
  unint64_t v18 = 0x801C000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      unint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7C4A0(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    uint64_t v13 = sub_216CC2FA8(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        uint64_t v17 = sub_216C98168((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          uint64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(void *)a4;
          sub_216C984FC((uint64_t)v20, (char *)&__src);
        }
        sub_216C93DB8((uint64_t)v20, *(char **)(a4 + 32), *(void *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x801C000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(void *)a4;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        sub_216C93DB8((uint64_t)v19, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void *sub_216CC2FA8(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = sub_216900168((uint64_t)v32, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_216900268(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  unint64_t v18 = operator new(0x40uLL);
  int i = v18;
  uint64_t v33 = a1 + 16;
  *(void *)unint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    long long v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      long long v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  __int16 v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *__int16 v29 = i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    __int16 v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CC3220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CC323C(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CC323C(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t sub_216CC3294(_DWORD *a1, float a2, float a3, float a4, float a5)
{
  uint64_t v5 = 0;
  *(float *)unint64_t v10 = a2;
  *(float *)&v10[1] = a3;
  *(float *)&__n128 v10[2] = a4;
  *(float *)&_DWORD v10[3] = a5;
  while (1)
  {
    float v6 = *(float *)&v10[v5];
    BOOL v7 = v6 < -128.0 || v6 > 127.0;
    if (v7 || v6 != (float)(int)v6) {
      break;
    }
    *((unsigned char *)&v10[-1] + v5++) = (int)v6;
    if (v5 == 4)
    {
      *a1 = v9;
      return 1;
    }
  }
  return 0;
}

float *sub_216CC3304(uint64_t a1, float *a2, _OWORD *a3, void *a4)
{
  uint64_t v25 = 0;
  char v26 = 0;
  sub_2168F58A0((uint64_t)&v25, a2, a2 + 1, a2 + 2, a2 + 3);
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v25));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint8x8_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = (float *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v9)
          {
            if (v13[4] == *a2 && v13[5] == a2[1] && v13[6] == a2[2] && v13[7] == a2[3]) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = *(float **)v13;
        }
        while (v13);
      }
    }
  }
  unint64_t v13 = (float *)operator new(0x28uLL);
  *(void *)unint64_t v13 = 0;
  *((void *)v13 + 1) = v9;
  *((_OWORD *)v13 + 1) = *a3;
  *((void *)v13 + 4) = *a4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_21678A04C(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  float v22 = *(float ***)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)unint64_t v13 = *v22;
LABEL_41:
    void *v22 = v13;
    goto LABEL_42;
  }
  *(void *)unint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*(void *)v13)
  {
    unint64_t v23 = *(void *)(*(void *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    float v22 = (float **)(*(void *)a1 + 8 * v23);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_216CC3594(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216CC35B0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C762878;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC35FC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C762878;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_216CC362C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3, int8x8_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  BOOL v7 = *(void **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = v7[808];
  uint64_t v9 = v7[809];
  uint64_t v10 = v7[807];
  v12[0] = v7;
  v12[1] = v8;
  long long v12[2] = 0;
  void v12[3] = v9;
  v12[4] = v10;
  return sub_216CC36C4(v6, (uint64_t)v12, v4, v5, a4);
}

uint64_t sub_216CC3678(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7628D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC36B8()
{
  return &unk_26C7628D8;
}

double sub_216CC36C4(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4, int8x8_t a5)
{
  if (a3 < 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    long long v6 = *(_OWORD *)(a2 + 16);
    v8[0] = *(_OWORD *)a2;
    v8[1] = v6;
    uint64_t v9 = *(void *)(a2 + 32);
    sub_216CC3798(a1, v8, a3, (uint64_t)v10);
    sub_2168FFDB8(a4, v10);
    sub_2168F83DC((uint64_t)v10);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0)
    {
      a5.i32[0] = a3;
      v10[0] = (__n128)vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(a5, a5), 8uLL), 8uLL)));
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v10, (char *)0x10, *(void *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    *(void *)&double result = sub_216B91F6C((unsigned int **)a4, v10).n128_u64[0];
  }
  return result;
}

void sub_216CC3780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CC3798(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      uint64_t v8 = a2[1];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
      unint64_t v22 = 0;
      if (v7 > 0x6FF)
      {
        ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1) {
          return;
        }
        unint64_t v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v19)) {
        return;
      }
      uint64_t v8 = a2[1];
      uint64_t v5 = a2[2];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1) {
      return;
    }
    unint64_t v13 = v19;
    unint64_t v22 = v19;
LABEL_13:
    ssize_t v14 = v12 + v5;
    unint64_t v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (BOOL v16 = 16 * v13 > v15) : (BOOL v16 = 1), v16))
    {
      *(void *)&long long v19 = "usd/crateFile.cpp";
      *((void *)&v19 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v20 = 2053;
      *((void *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 16 * v13, v10 - v14, v10);
    }
    else
    {
      long long v19 = 0uLL;
      unint64_t v23 = &v19;
      sub_2168FFABC((unint64_t *)a4, v13, &v23);
      sub_2168FFD20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(16 * *(void *)a4), v14 + v8);
    }
    return;
  }
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  if (&v19 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    long long v19 = 0u;
    long long v20 = 0u;
    *(void *)(a4 + 32) = v21;
    uint64_t v21 = 0;
  }
  sub_2168F83DC((uint64_t)&v19);
}

void sub_216CC3970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CC3994(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7628F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC39E0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7628F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_216CC3A10(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_216CC3A64((void *)(a1 + 8), a2, a3);
}

uint64_t sub_216CC3A18(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C762958)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC3A58()
{
  return &unk_26C762958;
}

double sub_216CC3A64(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v10[0] = *a1;
  v10[1] = v8;
  __n128 v10[2] = v6;
  _DWORD v10[3] = v7;
  int v11 = sub_216C688BC();
  return sub_216CC3AE4(v5, (uint64_t)v10, v3, v4);
}

double sub_216CC3AE4(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v15 = 0;
    memset(__dst, 0, sizeof(__dst));
    long long v7 = *(_OWORD *)(a2 + 16);
    v12[0] = *(_OWORD *)a2;
    v12[1] = v7;
    uint64_t v13 = *(void *)(a2 + 32);
    sub_216CC3BD8(a1, v12, a3, (uint64_t)__dst);
    sub_2168FFDB8(a4, __dst);
    sub_2168F83DC((uint64_t)__dst);
  }
  else
  {
    long long v5 = *(_OWORD *)a2;
    long long v6 = *(_OWORD *)(a2 + 16);
    long long v9 = *(_OWORD *)a2;
    long long v10 = v6;
    uint64_t v11 = *(void *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      LODWORD(v5) = a3;
      __dst[0] = (__n128)vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)&v5, *(int8x8_t *)&v5), 8uLL), 8uLL)));
    }
    else
    {
      *((void *)&v9 + 1) = *(void *)(*(void *)v10 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_216C82F78((uint64_t)&v9 + 8, __dst, 0x10uLL);
    }
    *(void *)&double result = sub_216B91F6C((unsigned int **)a4, __dst).n128_u64[0];
  }
  return result;
}

void sub_216CC3BC0(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_216CC3BD8(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      long long v7 = a2[1];
      long long v21 = *a2;
      long long v22 = v7;
      uint64_t v23 = *((void *)a2 + 4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91810, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B91810))
      {
        long long v20 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v20) {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
        }
        byte_267B91808 = *v20;
        __cxa_guard_release(&qword_267B91810);
      }
      unint64_t v27 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v21 + 8, &v27, 8uLL)) {
          return;
        }
        unint64_t v8 = v27;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_216C82F78((uint64_t)&v21 + 8, &__dst, 4uLL) & 1) == 0) {
          return;
        }
        unint64_t v8 = __dst;
        unint64_t v27 = __dst;
      }
      unint64_t v10 = 16 * v8;
      uint64_t v11 = *((void *)&v21 + 1);
      if (!byte_267B91808 || v10 < 0x800 || (BYTE8(v21) & 3) != 0)
      {
        uint64_t v14 = *(void *)(*(void *)v22 + 32);
        uint64_t v15 = *((void *)&v21 + 1) - *(void *)(*(void *)v22 + 24);
        unint64_t v16 = v14 - v15;
        if (v15 < 0 || (v16 & 0x8000000000000000) != 0 || (v8 <= v16 ? (BOOL v17 = v10 > v16) : (BOOL v17 = 1), v17))
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2117;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v8, 16 * v8, v16, v14);
        }
        else
        {
          long long __dst = 0uLL;
          p_dst = &__dst;
          sub_2168FFABC((unint64_t *)a4, v8, &p_dst);
          sub_2168FFD20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v18, v19);
          sub_216C82F78((uint64_t)&v21 + 8, *(void **)(a4 + 32), 16 * *(void *)a4);
        }
      }
      else
      {
        uint64_t v12 = sub_216C99144((uint64_t)&v21 + 8, *((char **)&v21 + 1), 16 * v8, v8);
        if (v12)
        {
          *(void *)&long long v25 = 0;
          *((void *)&v25 + 1) = v12;
          uint64_t v26 = v11;
          long long __dst = v27;
          if (&__dst != (long long *)a4)
          {
            sub_2168F83DC(a4);
            long long v13 = v25;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v13;
            long long __dst = 0u;
            long long v25 = 0u;
            *(void *)(a4 + 32) = v26;
            uint64_t v26 = 0;
          }
          sub_2168F83DC((uint64_t)&__dst);
        }
        else
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2109;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v10);
          sub_2168F845C((void *)a4);
        }
      }
    }
  }
  else
  {
    uint64_t v26 = 0;
    long long __dst = 0u;
    long long v25 = 0u;
    if (&__dst != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v9 = v25;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v9;
      long long __dst = 0u;
      long long v25 = 0u;
      *(void *)(a4 + 32) = v26;
      uint64_t v26 = 0;
    }
    sub_2168F83DC((uint64_t)&__dst);
  }
}

void sub_216CC3EF0(_Unwind_Exception *a1)
{
}

__n128 sub_216CC3F40(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C762978;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC3F8C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C762978;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CC3FBC(uint64_t a1, uint64_t *a2, unsigned int ***a3)
{
}

uint64_t sub_216CC3FC4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7629D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC4004()
{
  return &unk_26C7629D8;
}

void sub_216CC4010(uint64_t *a1, uint64_t *a2, unsigned int ***a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CC40BC(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CC4098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

double sub_216CC40BC(uint64_t a1, long long *a2, uint64_t a3, unsigned int **a4)
{
  if ((a3 & 0x8000000000000000) == 0)
  {
    long long v5 = *a2;
    long long v9 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    long long v10 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *((void *)a2 + 3);
    if ((a3 & 0x4000000000000000) != 0)
    {
      LODWORD(v5) = a3;
      v15[0] = (__n128)vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)&v5, *(int8x8_t *)&v5), 8uLL), 8uLL)));
      if (!v6)
      {
LABEL_14:
        *(void *)&double result = sub_216B91F6C(a4, v15).n128_u64[0];
        return result;
      }
    }
    else
    {
      uint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
      sub_216C804FC((void *)&v9 + 1, (uint64_t)v15, 0x10uLL);
      uint64_t v6 = v10;
      if (!v10) {
        goto LABEL_14;
      }
    }
    sub_216784EC4(v6);
    goto LABEL_14;
  }
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  long long v12 = *a2;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)a2 + 2);
  long long v13 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *((void *)a2 + 3);
  sub_216CC4214(a1, &v12, a3, (uint64_t)v15);
  if (v13) {
    sub_216784EC4(v13);
  }
  sub_2168FFDB8((pxrInternal__aapl__pxrReserved__::VtValue *)a4, v15);
  sub_2168F83DC((uint64_t)v15);
  return result;
}

void sub_216CC41D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CC4214(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v21) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v21, 4uLL)) {
        return;
      }
    }
    uint64_t v7 = a2[1];
    uint64_t v8 = (std::__shared_weak_count *)a2[2];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = a2[3];
      uint64_t v18 = v7;
      long long v19 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = a2[3];
      uint64_t v18 = a2[1];
      long long v19 = 0;
    }
    uint64_t v20 = v9;
    unint64_t v24 = 0;
    if (v6 > 0x6FF)
    {
      if (sub_216C804FC(&v18, (uint64_t)&v24, 8uLL))
      {
LABEL_14:
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
        unint64_t v12 = v11 - v20;
        unint64_t v13 = v24;
        if (v20 < 0 || (v12 & 0x8000000000000000) != 0 || (v24 <= v12 ? (BOOL v14 = 16 * v24 > v12) : (BOOL v14 = 1), v14))
        {
          *(void *)&long long v21 = "usd/crateFile.cpp";
          *((void *)&v21 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v22 = 2053;
          *((void *)&v22 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
          LOBYTE(v23) = 0;
          uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 16 * v13, v12, v17);
        }
        else
        {
          long long v21 = 0uLL;
          long long v25 = &v21;
          sub_2168FFABC((unint64_t *)a4, v24, &v25);
          sub_2168FFD20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
          sub_216C804FC(&v18, *(void *)(a4 + 32), 16 * *(void *)a4);
        }
      }
    }
    else
    {
      LODWORD(v21) = 0;
      if (sub_216C804FC(&v18, (uint64_t)&v21, 4uLL))
      {
        unint64_t v24 = v21;
        goto LABEL_14;
      }
    }
    if (v19) {
      sub_216784EC4(v19);
    }
    if (v8) {
      sub_216784EC4(v8);
    }
    return;
  }
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  if (&v21 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v10 = v22;
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v10;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a4 + 32) = v23;
    uint64_t v23 = 0;
  }
  sub_2168F83DC((uint64_t)&v21);
}

void sub_216CC447C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CC44C0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7629F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC450C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7629F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CC453C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return sub_216CC459C(*(uint64_t **)(a1 + 16), *(void *)(a1 + 8), (void *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), this);
}

uint64_t sub_216CC4550(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C762A58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC4590()
{
  return &unk_26C762A58;
}

unint64_t sub_216CC459C(uint64_t *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v4 = this;
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)v4 + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      uint64_t v10 = *(void *)v4;
    }
    return sub_216CC4718((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    uint64_t v12 = 0;
    v19[0] = a2;
    v19[1] = a3;
    uint64_t v21 = *(void *)v4;
    for (int i = (unsigned __int16 *)&v21; (sub_216CBE6E8(i, (unsigned char *)&v20 + v12) & 1) != 0; ++i)
    {
      if (++v12 == 4) {
        return v20 | 0x401D000000000000;
      }
    }
    uint64_t v14 = *a1;
    if (!*a1)
    {
      uint64_t v15 = operator new(0x28uLL);
      *uint64_t v15 = 0u;
      v15[1] = 0u;
      *((_DWORD *)v15 + 8) = 1065353216;
      sub_2168CAEA8(a1, (uint64_t)v15);
      uint64_t v14 = *a1;
    }
    uint64_t v21 = 0;
    uint64_t v16 = sub_216CC4B88(v14, (unsigned __int16 *)v4, v4, &v21);
    uint64_t v17 = v16;
    if (v18)
    {
      v16[3] = *a3 & 0xFFFFFFFFFFFFLL | 0x1D000000000000;
      sub_216C80458((uint64_t)v19, (char *)v4);
    }
    return v17[3];
  }
}

unint64_t sub_216CC4718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a2;
  v19[1] = a3;
  unint64_t result = 0x801D000000000000;
  unint64_t v18 = 0x801D000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      uint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7C560(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    unint64_t v13 = sub_216CC489C(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        uint64_t v17 = sub_216C98168((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          uint64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(void *)a4;
          sub_216C984FC((uint64_t)v20, (char *)&__src);
        }
        sub_216C9E7BC((uint64_t)v20, *(char **)(a4 + 32), *(void *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x801D000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(void *)a4;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        sub_216C9E7BC((uint64_t)v19, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

uint64_t *sub_216CC489C(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = sub_216900CE4((uint64_t)v32, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (uint64_t *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_216900DE4(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (uint64_t *)(a1 + 16);
  unint64_t v18 = operator new(0x40uLL);
  int i = (uint64_t *)v18;
  uint64_t v33 = a1 + 16;
  *(void *)unint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    uint64_t v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      uint64_t v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  __int16 v29 = *(uint64_t **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *__int16 v29 = (uint64_t)i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = (uint64_t)i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    __int16 v29 = (uint64_t *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CC4B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CC4B30(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CC4B30(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void *sub_216CC4B88(uint64_t a1, unsigned __int16 *a2, void *a3, uint64_t *a4)
{
  uint64_t v27 = 0;
  char v28 = 0;
  sub_2168F54F0((uint64_t)&v27, a2, a2 + 1, a2 + 2, a2 + 3);
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v27));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (int i = *v13; i; int i = *(void **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_2168F552C((unsigned __int16 *)i + 8, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  int i = operator new(0x20uLL);
  *(void *)int i = 0;
  *((void *)i + 1) = v9;
  uint64_t v16 = *a4;
  *((void *)i + 2) = *a3;
  *((void *)i + 3) = v16;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  BOOL v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)int i = *v24;
LABEL_38:
    void *v24 = i;
    goto LABEL_39;
  }
  *(void *)int i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    BOOL v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CC4DF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216CC4E10(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C762A78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC4E5C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C762A78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CC4E8C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  unsigned int v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  __n128 v10[2] = 0;
  _DWORD v10[3] = v8;
  void v10[4] = v9;
  sub_216CC4F24(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_216CC4ED8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C762AD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC4F18()
{
  return &unk_26C762AD8;
}

void sub_216CC4F24(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    long long v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a2 + 32);
    sub_216CC4FE8(a1, v6, a3, (uint64_t)v8);
    sub_21690096C(a4, v8);
    sub_2168F83DC((uint64_t)v8);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0) {
      sub_216CC51DC((uint64_t)v8, a3);
    }
    else {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v8, (char *)8, *(void *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    sub_216B91D58(a4, (uint64_t *)v8);
  }
}

void sub_216CC4FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CC4FE8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      uint64_t v8 = a2[1];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
      unint64_t v22 = 0;
      if (v7 > 0x6FF)
      {
        ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1) {
          return;
        }
        unint64_t v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v19)) {
        return;
      }
      uint64_t v8 = a2[1];
      uint64_t v5 = a2[2];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1) {
      return;
    }
    unint64_t v13 = v19;
    unint64_t v22 = v19;
LABEL_13:
    ssize_t v14 = v12 + v5;
    unint64_t v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (BOOL v16 = 8 * v13 > v15) : (BOOL v16 = 1), v16))
    {
      *(void *)&long long v19 = "usd/crateFile.cpp";
      *((void *)&v19 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v20 = 2053;
      *((void *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec4h]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 8 * v13, v10 - v14, v10);
    }
    else
    {
      uint64_t v23 = 0;
      *(void *)&long long v19 = &v23;
      sub_21690066C((unint64_t *)a4, v13, (uint64_t **)&v19);
      sub_2169008D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(8 * *(void *)a4), v14 + v8);
    }
    return;
  }
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  if (&v19 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    long long v19 = 0u;
    long long v20 = 0u;
    *(void *)(a4 + 32) = v21;
    uint64_t v21 = 0;
  }
  sub_2168F83DC((uint64_t)&v19);
}

void sub_216CC51C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CC51DC(uint64_t a1, int a2)
{
  uint64_t v3 = 0;
  int v6 = a2;
  do
  {
    unint64_t v4 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)*((char *)&v6 + v3));
    if (*((unsigned char *)&v6 + v3))
    {
      if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23]) {
        uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23]
      }
               + (((v4 & 0x7FFFFF) + ((v4 >> 13) & 1) + 4095) >> 13);
      else {
        uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v4);
      }
    }
    else
    {
      uint64_t result = v4 >> 16;
    }
    *(_WORD *)(a1 + 2 * v3++) = result;
  }
  while (v3 != 4);
  return result;
}

__n128 sub_216CC527C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C762AF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC52C8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C762AF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CC52F8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CC5300(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C762B58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC5340()
{
  return &unk_26C762B58;
}

void sub_216CC534C(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  __n128 v9[2] = v6;
  v9[3] = v7;
  int v10 = sub_216C688BC();
  sub_216CC53CC(v5, (uint64_t)v9, v3, v4);
}

void sub_216CC53CC(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v13 = 0;
    memset(__dst, 0, sizeof(__dst));
    long long v6 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v6;
    uint64_t v11 = *(void *)(a2 + 32);
    sub_216CC54B0(a1, v10, a3, (uint64_t)__dst);
    sub_21690096C(a4, __dst);
    sub_2168F83DC((uint64_t)__dst);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v7 = *(_OWORD *)a2;
    long long v8 = v5;
    uint64_t v9 = *(void *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      sub_216CC51DC((uint64_t)__dst, a3);
    }
    else
    {
      *((void *)&v7 + 1) = *(void *)(*(void *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_216C82F78((uint64_t)&v7 + 8, __dst, 8uLL);
    }
    sub_216B91D58(a4, (uint64_t *)__dst);
  }
}

void sub_216CC5498(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_216CC54B0(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      long long v7 = a2[1];
      long long v21 = *a2;
      long long v22 = v7;
      uint64_t v23 = *((void *)a2 + 4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91820, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B91820))
      {
        long long v20 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v20) {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
        }
        byte_267B91818 = *v20;
        __cxa_guard_release(&qword_267B91820);
      }
      unint64_t v27 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v21 + 8, &v27, 8uLL)) {
          return;
        }
        unint64_t v8 = v27;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_216C82F78((uint64_t)&v21 + 8, &__dst, 4uLL) & 1) == 0) {
          return;
        }
        unint64_t v8 = __dst;
        unint64_t v27 = __dst;
      }
      unint64_t v10 = 8 * v8;
      uint64_t v11 = *((void *)&v21 + 1);
      if (!byte_267B91818 || v10 < 0x800 || (BYTE8(v21) & 1) != 0)
      {
        uint64_t v14 = *(void *)(*(void *)v22 + 32);
        uint64_t v15 = *((void *)&v21 + 1) - *(void *)(*(void *)v22 + 24);
        unint64_t v16 = v14 - v15;
        if (v15 < 0 || (v16 & 0x8000000000000000) != 0 || (v8 <= v16 ? (BOOL v17 = v10 > v16) : (BOOL v17 = 1), v17))
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2117;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec4h]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v8, 8 * v8, v16, v14);
        }
        else
        {
          uint64_t v28 = 0;
          *(void *)&long long __dst = &v28;
          sub_21690066C((unint64_t *)a4, v8, (uint64_t **)&__dst);
          sub_2169008D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v18, v19);
          sub_216C82F78((uint64_t)&v21 + 8, *(void **)(a4 + 32), 8 * *(void *)a4);
        }
      }
      else
      {
        uint64_t v12 = sub_216C99144((uint64_t)&v21 + 8, *((char **)&v21 + 1), 8 * v8, v8);
        if (v12)
        {
          *(void *)&long long v25 = 0;
          *((void *)&v25 + 1) = v12;
          uint64_t v26 = v11;
          long long __dst = v27;
          if (&__dst != (long long *)a4)
          {
            sub_2168F83DC(a4);
            long long v13 = v25;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v13;
            long long __dst = 0u;
            long long v25 = 0u;
            *(void *)(a4 + 32) = v26;
            uint64_t v26 = 0;
          }
          sub_2168F83DC((uint64_t)&__dst);
        }
        else
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2109;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec4h]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v10);
          sub_2168F845C((void *)a4);
        }
      }
    }
  }
  else
  {
    uint64_t v26 = 0;
    long long __dst = 0u;
    long long v25 = 0u;
    if (&__dst != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v9 = v25;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v9;
      long long __dst = 0u;
      long long v25 = 0u;
      *(void *)(a4 + 32) = v26;
      uint64_t v26 = 0;
    }
    sub_2168F83DC((uint64_t)&__dst);
  }
}

void sub_216CC57C4(_Unwind_Exception *a1)
{
}

__n128 sub_216CC5814(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C762B78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC5860(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C762B78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CC5890(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CC5898(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C762BD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC58D8()
{
  return &unk_26C762BD8;
}

void sub_216CC58E4(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CC5990(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CC596C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CC5990(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v14 = 0;
    memset(v13, 0, sizeof(v13));
    long long v10 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v11 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *((void *)a2 + 3);
    sub_216CC5AD8(a1, &v10, a3, (uint64_t)v13);
    if (v11) {
      sub_216784EC4(v11);
    }
    sub_21690096C(a4, v13);
    sub_2168F83DC((uint64_t)v13);
  }
  else
  {
    long long v7 = *a2;
    long long v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v8 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *((void *)a2 + 3);
    if ((a3 & 0x4000000000000000) != 0)
    {
      sub_216CC51DC((uint64_t)v13, a3);
    }
    else
    {
      uint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
      sub_216C804FC((void *)&v7 + 1, (uint64_t)v13, 8uLL);
      long long v5 = v8;
    }
    if (v5) {
      sub_216784EC4(v5);
    }
    sub_216B91D58(a4, (uint64_t *)v13);
  }
}

void sub_216CC5A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CC5AD8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v21) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v21, 4uLL)) {
        return;
      }
    }
    uint64_t v7 = a2[1];
    uint64_t v8 = (std::__shared_weak_count *)a2[2];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = a2[3];
      uint64_t v18 = v7;
      long long v19 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = a2[3];
      uint64_t v18 = a2[1];
      long long v19 = 0;
    }
    uint64_t v20 = v9;
    unint64_t v24 = 0;
    if (v6 > 0x6FF)
    {
      if (sub_216C804FC(&v18, (uint64_t)&v24, 8uLL))
      {
LABEL_14:
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
        unint64_t v12 = v11 - v20;
        unint64_t v13 = v24;
        if (v20 < 0 || (v12 & 0x8000000000000000) != 0 || (v24 <= v12 ? (BOOL v14 = 8 * v24 > v12) : (BOOL v14 = 1), v14))
        {
          *(void *)&long long v21 = "usd/crateFile.cpp";
          *((void *)&v21 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v22 = 2053;
          *((void *)&v22 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec4h]";
          LOBYTE(v23) = 0;
          uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 8 * v13, v12, v17);
        }
        else
        {
          uint64_t v25 = 0;
          *(void *)&long long v21 = &v25;
          sub_21690066C((unint64_t *)a4, v24, (uint64_t **)&v21);
          sub_2169008D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
          sub_216C804FC(&v18, *(void *)(a4 + 32), 8 * *(void *)a4);
        }
      }
    }
    else
    {
      LODWORD(v21) = 0;
      if (sub_216C804FC(&v18, (uint64_t)&v21, 4uLL))
      {
        unint64_t v24 = v21;
        goto LABEL_14;
      }
    }
    if (v19) {
      sub_216784EC4(v19);
    }
    if (v8) {
      sub_216784EC4(v8);
    }
    return;
  }
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  if (&v21 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v10 = v22;
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v10;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a4 + 32) = v23;
    uint64_t v23 = 0;
  }
  sub_2168F83DC((uint64_t)&v21);
}

void sub_216CC5D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CC5D84(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C762BF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC5DD0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C762BF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CC5E00(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return sub_216CC5E60(*(uint64_t **)(a1 + 16), *(void *)(a1 + 8), (void *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), this);
}

uint64_t sub_216CC5E14(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C762C58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC5E54()
{
  return &unk_26C762C58;
}

unint64_t sub_216CC5E60(uint64_t *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    }
    else {
      uint64_t v10 = *(void *)this;
    }
    return sub_216CC5FD0((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      unint64_t v12 = (int *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                          + 168))(this);
    else {
      unint64_t v12 = *(int **)this;
    }
    uint64_t v13 = 0;
    v20[0] = a2;
    v20[1] = a3;
    long long v22 = *(_OWORD *)v12;
    while (1)
    {
      int v14 = *((_DWORD *)&v22 + v13);
      if (v14 != (char)v14) {
        break;
      }
      *((unsigned char *)&v21 + v13++) = v14;
      if (v13 == 4) {
        return v21 | 0x401E000000000000;
      }
    }
    uint64_t v15 = *a1;
    if (!*a1)
    {
      unint64_t v16 = operator new(0x28uLL);
      *unint64_t v16 = 0u;
      v16[1] = 0u;
      *((_DWORD *)v16 + 8) = 1065353216;
      sub_2168CAEA8(a1, (uint64_t)v16);
      uint64_t v15 = *a1;
    }
    *(void *)&long long v22 = 0;
    uint64_t v17 = sub_216CC6440(v15, v12, v12, &v22);
    uint64_t v18 = v17;
    if (v19)
    {
      void v17[4] = *a3 & 0xFFFFFFFFFFFFLL | 0x1E000000000000;
      sub_216C944BC((uint64_t)v20, (char *)v12);
    }
    return v18[4];
  }
}

unint64_t sub_216CC5FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a2;
  v19[1] = a3;
  unint64_t result = 0x801E000000000000;
  unint64_t v18 = 0x801E000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      unint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7C620(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    uint64_t v13 = sub_216CC6154(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        uint64_t v17 = sub_216C98168((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          uint64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(void *)a4;
          sub_216C984FC((uint64_t)v20, (char *)&__src);
        }
        sub_216C93DB8((uint64_t)v20, *(char **)(a4 + 32), *(void *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x801E000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(void *)a4;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        sub_216C93DB8((uint64_t)v19, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void *sub_216CC6154(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = sub_2169BD83C((uint64_t)v32, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (void *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_2169BD93C(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  unint64_t v18 = operator new(0x40uLL);
  int i = v18;
  uint64_t v33 = a1 + 16;
  *(void *)unint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    unsigned int v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      unsigned int v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  __int16 v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *__int16 v29 = i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    __int16 v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CC63CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CC63E8(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CC63E8(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void *sub_216CC6440(uint64_t a1, int *a2, _OWORD *a3, void *a4)
{
  uint64_t v25 = 0;
  char v26 = 0;
  sub_2169BD49C((uint64_t)&v25, a2, a2 + 1, a2 + 2, a2 + 3);
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v25));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint8x8_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == *a2
              && *((_DWORD *)v13 + 5) == a2[1]
              && *((_DWORD *)v13 + 6) == a2[2]
              && *((_DWORD *)v13 + 7) == a2[3])
            {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  unint64_t v13 = operator new(0x28uLL);
  void *v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = *a3;
  v13[4] = *a4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_21678A04C(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  float v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *v13 = *v22;
LABEL_41:
    void *v22 = v13;
    goto LABEL_42;
  }
  void *v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    unint64_t v23 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    float v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_216CC66D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216CC66EC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C762C78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC6738(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C762C78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_216CC6768(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3, int8x8_t a4)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = v7[808];
  uint64_t v9 = v7[809];
  uint64_t v10 = v7[807];
  v12[0] = v7;
  v12[1] = v8;
  long long v12[2] = 0;
  void v12[3] = v9;
  v12[4] = v10;
  return sub_216CC6800(v6, (uint64_t)v12, v4, v5, a4);
}

uint64_t sub_216CC67B4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C762CD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC67F4()
{
  return &unk_26C762CD8;
}

double sub_216CC6800(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4, int8x8_t a5)
{
  if (a3 < 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    long long v6 = *(_OWORD *)(a2 + 16);
    v8[0] = *(_OWORD *)a2;
    v8[1] = v6;
    uint64_t v9 = *(void *)(a2 + 32);
    sub_216CC68D0(a1, v8, a3, (uint64_t)v10);
    sub_216B91878(a4, v10);
    sub_2168F83DC((uint64_t)v10);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0)
    {
      a5.i32[0] = a3;
      v10[0] = (__n128)vshrq_n_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(a5, a5)), 0x18uLL), 0x18uLL);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v10, (char *)0x10, *(void *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    *(void *)&double result = sub_216B917F0((unsigned int **)a4, v10).n128_u64[0];
  }
  return result;
}

void sub_216CC68B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CC68D0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      uint64_t v8 = a2[1];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
      unint64_t v22 = 0;
      if (v7 > 0x6FF)
      {
        ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1) {
          return;
        }
        unint64_t v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v19)) {
        return;
      }
      uint64_t v8 = a2[1];
      uint64_t v5 = a2[2];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1) {
      return;
    }
    unint64_t v13 = v19;
    unint64_t v22 = v19;
LABEL_13:
    ssize_t v14 = v12 + v5;
    unint64_t v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (BOOL v16 = 16 * v13 > v15) : (BOOL v16 = 1), v16))
    {
      *(void *)&long long v19 = "usd/crateFile.cpp";
      *((void *)&v19 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v20 = 2053;
      *((void *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec4i]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 16 * v13, v10 - v14, v10);
    }
    else
    {
      long long v19 = 0uLL;
      unint64_t v23 = &v19;
      sub_2169BDAC4((unint64_t *)a4, v13, &v23);
      sub_2169BDD28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(16 * *(void *)a4), v14 + v8);
    }
    return;
  }
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  if (&v19 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    long long v19 = 0u;
    long long v20 = 0u;
    *(void *)(a4 + 32) = v21;
    uint64_t v21 = 0;
  }
  sub_2168F83DC((uint64_t)&v19);
}

void sub_216CC6AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CC6ACC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C762CF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC6B18(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C762CF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_216CC6B48(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_216CC6B9C((void *)(a1 + 8), a2, a3);
}

uint64_t sub_216CC6B50(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C762D58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC6B90()
{
  return &unk_26C762D58;
}

double sub_216CC6B9C(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v10[0] = *a1;
  v10[1] = v8;
  __n128 v10[2] = v6;
  _DWORD v10[3] = v7;
  int v11 = sub_216C688BC();
  return sub_216CC6C1C(v5, (uint64_t)v10, v3, v4);
}

double sub_216CC6C1C(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v15 = 0;
    memset(__dst, 0, sizeof(__dst));
    long long v7 = *(_OWORD *)(a2 + 16);
    v12[0] = *(_OWORD *)a2;
    v12[1] = v7;
    uint64_t v13 = *(void *)(a2 + 32);
    sub_216CC6D0C(a1, v12, a3, (uint64_t)__dst);
    sub_216B91878(a4, __dst);
    sub_2168F83DC((uint64_t)__dst);
  }
  else
  {
    long long v5 = *(_OWORD *)a2;
    long long v6 = *(_OWORD *)(a2 + 16);
    long long v9 = *(_OWORD *)a2;
    long long v10 = v6;
    uint64_t v11 = *(void *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      LODWORD(v5) = a3;
      __dst[0] = (__n128)vshrq_n_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)&v5, *(int8x8_t *)&v5)), 0x18uLL), 0x18uLL);
    }
    else
    {
      *((void *)&v9 + 1) = *(void *)(*(void *)v10 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_216C82F78((uint64_t)&v9 + 8, __dst, 0x10uLL);
    }
    *(void *)&double result = sub_216B917F0((unsigned int **)a4, __dst).n128_u64[0];
  }
  return result;
}

void sub_216CC6CF4(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_216CC6D0C(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      long long v7 = a2[1];
      long long v21 = *a2;
      long long v22 = v7;
      uint64_t v23 = *((void *)a2 + 4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91830, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B91830))
      {
        long long v20 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v20) {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
        }
        byte_267B91828 = *v20;
        __cxa_guard_release(&qword_267B91830);
      }
      unint64_t v27 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v21 + 8, &v27, 8uLL)) {
          return;
        }
        unint64_t v8 = v27;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_216C82F78((uint64_t)&v21 + 8, &__dst, 4uLL) & 1) == 0) {
          return;
        }
        unint64_t v8 = __dst;
        unint64_t v27 = __dst;
      }
      unint64_t v10 = 16 * v8;
      uint64_t v11 = *((void *)&v21 + 1);
      if (!byte_267B91828 || v10 < 0x800 || (BYTE8(v21) & 3) != 0)
      {
        uint64_t v14 = *(void *)(*(void *)v22 + 32);
        uint64_t v15 = *((void *)&v21 + 1) - *(void *)(*(void *)v22 + 24);
        unint64_t v16 = v14 - v15;
        if (v15 < 0 || (v16 & 0x8000000000000000) != 0 || (v8 <= v16 ? (BOOL v17 = v10 > v16) : (BOOL v17 = 1), v17))
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2117;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec4i]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v8, 16 * v8, v16, v14);
        }
        else
        {
          long long __dst = 0uLL;
          p_dst = &__dst;
          sub_2169BDAC4((unint64_t *)a4, v8, &p_dst);
          sub_2169BDD28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v18, v19);
          sub_216C82F78((uint64_t)&v21 + 8, *(void **)(a4 + 32), 16 * *(void *)a4);
        }
      }
      else
      {
        uint64_t v12 = sub_216C99144((uint64_t)&v21 + 8, *((char **)&v21 + 1), 16 * v8, v8);
        if (v12)
        {
          *(void *)&long long v25 = 0;
          *((void *)&v25 + 1) = v12;
          uint64_t v26 = v11;
          long long __dst = v27;
          if (&__dst != (long long *)a4)
          {
            sub_2168F83DC(a4);
            long long v13 = v25;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v13;
            long long __dst = 0u;
            long long v25 = 0u;
            *(void *)(a4 + 32) = v26;
            uint64_t v26 = 0;
          }
          sub_2168F83DC((uint64_t)&__dst);
        }
        else
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2109;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec4i]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v10);
          sub_2168F845C((void *)a4);
        }
      }
    }
  }
  else
  {
    uint64_t v26 = 0;
    long long __dst = 0u;
    long long v25 = 0u;
    if (&__dst != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v9 = v25;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v9;
      long long __dst = 0u;
      long long v25 = 0u;
      *(void *)(a4 + 32) = v26;
      uint64_t v26 = 0;
    }
    sub_2168F83DC((uint64_t)&__dst);
  }
}

void sub_216CC7024(_Unwind_Exception *a1)
{
}

__n128 sub_216CC7074(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C762D78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC70C0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C762D78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CC70F0(uint64_t a1, uint64_t *a2, unsigned int ***a3)
{
}

uint64_t sub_216CC70F8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C762DD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC7138()
{
  return &unk_26C762DD8;
}

void sub_216CC7144(uint64_t *a1, uint64_t *a2, unsigned int ***a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CC71F0(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CC71CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

double sub_216CC71F0(uint64_t a1, long long *a2, uint64_t a3, unsigned int **a4)
{
  if ((a3 & 0x8000000000000000) == 0)
  {
    long long v5 = *a2;
    long long v9 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    long long v10 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *((void *)a2 + 3);
    if ((a3 & 0x4000000000000000) != 0)
    {
      LODWORD(v5) = a3;
      v15[0] = (__n128)vshrq_n_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)&v5, *(int8x8_t *)&v5)), 0x18uLL), 0x18uLL);
      if (!v6)
      {
LABEL_14:
        *(void *)&double result = sub_216B917F0(a4, v15).n128_u64[0];
        return result;
      }
    }
    else
    {
      uint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
      sub_216C804FC((void *)&v9 + 1, (uint64_t)v15, 0x10uLL);
      uint64_t v6 = v10;
      if (!v10) {
        goto LABEL_14;
      }
    }
    sub_216784EC4(v6);
    goto LABEL_14;
  }
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  long long v12 = *a2;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)a2 + 2);
  long long v13 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *((void *)a2 + 3);
  sub_216CC7344(a1, &v12, a3, (uint64_t)v15);
  if (v13) {
    sub_216784EC4(v13);
  }
  sub_216B91878((pxrInternal__aapl__pxrReserved__::VtValue *)a4, v15);
  sub_2168F83DC((uint64_t)v15);
  return result;
}

void sub_216CC7300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CC7344(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v21) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v21, 4uLL)) {
        return;
      }
    }
    uint64_t v7 = a2[1];
    uint64_t v8 = (std::__shared_weak_count *)a2[2];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = a2[3];
      uint64_t v18 = v7;
      long long v19 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = a2[3];
      uint64_t v18 = a2[1];
      long long v19 = 0;
    }
    uint64_t v20 = v9;
    unint64_t v24 = 0;
    if (v6 > 0x6FF)
    {
      if (sub_216C804FC(&v18, (uint64_t)&v24, 8uLL))
      {
LABEL_14:
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
        unint64_t v12 = v11 - v20;
        unint64_t v13 = v24;
        if (v20 < 0 || (v12 & 0x8000000000000000) != 0 || (v24 <= v12 ? (BOOL v14 = 16 * v24 > v12) : (BOOL v14 = 1), v14))
        {
          *(void *)&long long v21 = "usd/crateFile.cpp";
          *((void *)&v21 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v22 = 2053;
          *((void *)&v22 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec4i]";
          LOBYTE(v23) = 0;
          uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 16 * v13, v12, v17);
        }
        else
        {
          long long v21 = 0uLL;
          long long v25 = &v21;
          sub_2169BDAC4((unint64_t *)a4, v24, &v25);
          sub_2169BDD28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
          sub_216C804FC(&v18, *(void *)(a4 + 32), 16 * *(void *)a4);
        }
      }
    }
    else
    {
      LODWORD(v21) = 0;
      if (sub_216C804FC(&v18, (uint64_t)&v21, 4uLL))
      {
        unint64_t v24 = v21;
        goto LABEL_14;
      }
    }
    if (v19) {
      sub_216784EC4(v19);
    }
    if (v8) {
      sub_216784EC4(v8);
    }
    return;
  }
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  if (&v21 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v10 = v22;
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v10;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a4 + 32) = v23;
    uint64_t v23 = 0;
  }
  sub_2168F83DC((uint64_t)&v21);
}

void sub_216CC75AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CC75F0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C762DF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC763C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C762DF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CC766C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return sub_216CC76CC(*(uint64_t **)(a1 + 16), *(void *)(a1 + 8), (void *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), this);
}

uint64_t sub_216CC7680(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C762E58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC76C0()
{
  return &unk_26C762E58;
}

unint64_t sub_216CC76CC(uint64_t *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    }
    else {
      uint64_t v10 = *(void *)this;
    }
    return sub_216CC7824((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      unint64_t v12 = (double *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(this);
    else {
      unint64_t v12 = *(double **)this;
    }
    v20[0] = a2;
    v20[1] = a3;
    unsigned int v19 = 0;
    if (sub_216CC7C94(&v19, *v12, v12[1], v12[2], v12[3]))
    {
      return v19 | 0x400D000000000000;
    }
    else
    {
      uint64_t v13 = *a1;
      if (!*a1)
      {
        BOOL v14 = operator new(0x28uLL);
        _OWORD *v14 = 0u;
        v14[1] = 0u;
        *((_DWORD *)v14 + 8) = 1065353216;
        sub_2168CAEA8(a1, (uint64_t)v14);
        uint64_t v13 = *a1;
      }
      uint64_t v18 = 0;
      uint64_t v15 = sub_216CC7D48(v13, v12, v12, &v18);
      uint64_t v16 = v15;
      if (v17)
      {
        v15[6] = *a3 & 0xFFFFFFFFFFFFLL | 0xD000000000000;
        sub_216CB0C34((uint64_t)v20, (char *)v12);
      }
      return v16[6];
    }
  }
}

unint64_t sub_216CC7824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a2;
  v19[1] = a3;
  unint64_t result = 0x800D000000000000;
  unint64_t v18 = 0x800D000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      unint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7C6E0(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    uint64_t v13 = sub_216CC79A8(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        uint64_t v17 = sub_216C98168((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          uint64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(void *)a4;
          sub_216C984FC((uint64_t)v20, (char *)&__src);
        }
        sub_216C7B02C((uint64_t)v20, *(char **)(a4 + 32), *(void *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x800D000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(void *)a4;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        sub_216C7B02C((uint64_t)v19, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

uint64_t *sub_216CC79A8(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = sub_2169018E8((uint64_t)v32, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = (uint64_t *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_2169C06C0(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (uint64_t *)(a1 + 16);
  unint64_t v18 = operator new(0x40uLL);
  int i = (uint64_t *)v18;
  uint64_t v33 = a1 + 16;
  *(void *)unint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    long long v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      long long v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  __int16 v29 = *(uint64_t **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *int i = *v29;
LABEL_42:
    *__int16 v29 = (uint64_t)i;
    goto LABEL_43;
  }
  *int i = *v17;
  *uint64_t v17 = (uint64_t)i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    __int16 v29 = (uint64_t *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CC7C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CC7C3C(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CC7C3C(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t sub_216CC7C94(_WORD *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5 = 0;
  *(double *)uint8x8_t v12 = a2;
  *(double *)&v12[1] = a3;
  *(double *)&long long v12[2] = a4;
  *(double *)&void v12[3] = a5;
  unsigned int v6 = v12;
  while (2)
  {
    for (uint64_t i = 0; i != 2; ++i)
    {
      if (v5 == i)
      {
        uint64_t v8 = 0;
        double v9 = *(double *)&v12[2 * v5 + v5];
        if (v9 < -128.0 || v9 > 127.0) {
          return v8;
        }
        if (v9 != (double)(int)v9) {
          return 0;
        }
        *((unsigned char *)&v11 + v5) = (int)v9;
      }
      else if (*(double *)&v6[i] != 0.0)
      {
        return 0;
      }
    }
    ++v5;
    v6 += 2;
    if (v5 != 2) {
      continue;
    }
    break;
  }
  *a1 = v11;
  return 1;
}

void *sub_216CC7D48(uint64_t a1, double *a2, _OWORD *a3, void *a4)
{
  uint64_t v27 = 0;
  char v28 = 0;
  sub_2168F5C84((uint64_t)&v27, a2, a2 + 1, a2 + 2, a2 + 3);
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v27));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(void **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator==((double *)i + 2, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x38uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v9;
  long long v16 = a3[1];
  *((_OWORD *)i + 1) = *a3;
  *((_OWORD *)i + 2) = v16;
  *((void *)i + 6) = *a4;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  BOOL v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)uint64_t i = *v24;
LABEL_38:
    void *v24 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    BOOL v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CC7FB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216CC7FD4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C762E78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC8020(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C762E78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_216CC8050(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  unsigned int v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v11[0] = v6;
  v11[1] = v7;
  long long v11[2] = 0;
  void v11[3] = v8;
  v11[4] = v9;
  return sub_216CC80E8(v5, (uint64_t)v11, v3, v4);
}

uint64_t sub_216CC809C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C762ED8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC80DC()
{
  return &unk_26C762ED8;
}

double sub_216CC80E8(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    memset(&v9._write, 0, 40);
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&v9._bf._int size = *(_OWORD *)a2;
    *(_OWORD *)&v9._unsigned int cookie = v5;
    v9._read = *(int (__cdecl **)(void *, char *, int))(a2 + 32);
    sub_216CC81DC(a1, &v9._bf._size, a3, (uint64_t)&v9._write);
    sub_216B8F268(a4, (__n128 *)&v9._write);
    sub_2168F83DC((uint64_t)&v9._write);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0)
    {
      int v7 = (char)a3;
      int v8 = (__int16)a3 >> 8;
      pxrInternal__aapl__pxrReserved__::GfMatrix2d::SetDiagonal((uint64_t)&v9._write, 1.0);
      *(__sbuf *)&v9._r = v9._ub;
      *(double *)&v9._unint64_t p = (double)v7;
      *(double *)&v9._bf._unsigned int base = (double)v8;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), &v9, (char *)0x20, *(void *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    *(void *)&double result = sub_216B8F1DC(a4, &v9).n128_u64[0];
  }
  return result;
}

void sub_216CC81C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CC81DC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      uint64_t v8 = a2[1];
      uint64_t v10 = a2[3];
      __sFILE v9 = (FILE *)a2[4];
      unint64_t v22 = 0;
      if (v7 > 0x6FF)
      {
        ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1) {
          return;
        }
        unint64_t v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v19)) {
        return;
      }
      uint64_t v8 = a2[1];
      uint64_t v5 = a2[2];
      uint64_t v10 = a2[3];
      __sFILE v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1) {
      return;
    }
    unint64_t v13 = v19;
    unint64_t v22 = v19;
LABEL_13:
    ssize_t v14 = v12 + v5;
    unint64_t v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (BOOL v16 = 32 * v13 > v15) : (BOOL v16 = 1), v16))
    {
      *(void *)&long long v19 = "usd/crateFile.cpp";
      *((void *)&v19 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v20 = 2053;
      *((void *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 32 * v13, v10 - v14, v10);
    }
    else
    {
      long long v19 = 0u;
      long long v20 = 0u;
      uint64_t v23 = &v19;
      sub_2169C0824((unint64_t *)a4, v13, &v23);
      sub_2169C0A9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(32 * *(void *)a4), v14 + v8);
    }
    return;
  }
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  if (&v19 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    long long v19 = 0u;
    long long v20 = 0u;
    *(void *)(a4 + 32) = v21;
    uint64_t v21 = 0;
  }
  sub_2168F83DC((uint64_t)&v19);
}

void sub_216CC83B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CC83DC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C762EF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC8428(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C762EF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_216CC8458(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_216CC84AC((void *)(a1 + 8), a2, a3);
}

uint64_t sub_216CC8460(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C762F58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC84A0()
{
  return &unk_26C762F58;
}

double sub_216CC84AC(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v10[0] = *a1;
  v10[1] = v8;
  __n128 v10[2] = v6;
  _DWORD v10[3] = v7;
  int v11 = sub_216C688BC();
  return sub_216CC852C(v5, (uint64_t)v10, v3, v4);
}

double sub_216CC852C(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v20 = 0;
    __n128 v18 = 0u;
    long long v19 = 0u;
    long long v6 = *(_OWORD *)(a2 + 16);
    v16[0] = *(_OWORD *)a2;
    v16[1] = v6;
    uint64_t v17 = *(void *)(a2 + 32);
    sub_216CC8640(a1, v16, a3, (uint64_t)&v18);
    sub_216B8F268(a4, &v18);
    sub_2168F83DC((uint64_t)&v18);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v10 = *(_OWORD *)a2;
    long long v11 = v5;
    uint64_t v12 = *(void *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      int v8 = (char)a3;
      int v9 = (__int16)a3 >> 8;
      pxrInternal__aapl__pxrReserved__::GfMatrix2d::SetDiagonal((uint64_t)&v18, 1.0);
      *((void *)&__dst + 1) = v18.n128_u64[1];
      uint64_t v14 = v19;
      *(double *)&long long __dst = (double)v8;
      double v15 = (double)v9;
    }
    else
    {
      *((void *)&v10 + 1) = *(void *)(*(void *)v11 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_216C82F78((uint64_t)&v10 + 8, &__dst, 0x20uLL);
    }
    *(void *)&double result = sub_216B8F1DC(a4, &__dst).n128_u64[0];
  }
  return result;
}

void sub_216CC8628(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_216CC8640(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      long long v7 = a2[1];
      long long v21 = *a2;
      long long v22 = v7;
      uint64_t v23 = *((void *)a2 + 4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91840, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B91840))
      {
        uint64_t v20 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v20) {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
        }
        byte_267B91838 = *v20;
        __cxa_guard_release(&qword_267B91840);
      }
      unint64_t v27 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v21 + 8, &v27, 8uLL)) {
          return;
        }
        unint64_t v8 = v27;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_216C82F78((uint64_t)&v21 + 8, &__dst, 4uLL) & 1) == 0) {
          return;
        }
        unint64_t v8 = __dst;
        unint64_t v27 = __dst;
      }
      unint64_t v10 = 32 * v8;
      uint64_t v11 = *((void *)&v21 + 1);
      if (!byte_267B91838 || v10 < 0x800 || (BYTE8(v21) & 7) != 0)
      {
        uint64_t v14 = *(void *)(*(void *)v22 + 32);
        uint64_t v15 = *((void *)&v21 + 1) - *(void *)(*(void *)v22 + 24);
        unint64_t v16 = v14 - v15;
        if (v15 < 0 || (v16 & 0x8000000000000000) != 0 || (v8 <= v16 ? (BOOL v17 = v10 > v16) : (BOOL v17 = 1), v17))
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2117;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v8, 32 * v8, v16, v14);
        }
        else
        {
          long long __dst = 0u;
          long long v25 = 0u;
          p_dst = &__dst;
          sub_2169C0824((unint64_t *)a4, v8, &p_dst);
          sub_2169C0A9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v18, v19);
          sub_216C82F78((uint64_t)&v21 + 8, *(void **)(a4 + 32), 32 * *(void *)a4);
        }
      }
      else
      {
        uint64_t v12 = sub_216C99144((uint64_t)&v21 + 8, *((char **)&v21 + 1), 32 * v8, v8);
        if (v12)
        {
          *(void *)&long long v25 = 0;
          *((void *)&v25 + 1) = v12;
          uint64_t v26 = v11;
          long long __dst = v27;
          if (&__dst != (long long *)a4)
          {
            sub_2168F83DC(a4);
            long long v13 = v25;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v13;
            long long __dst = 0u;
            long long v25 = 0u;
            *(void *)(a4 + 32) = v26;
            uint64_t v26 = 0;
          }
          sub_2168F83DC((uint64_t)&__dst);
        }
        else
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v25 = 2109;
          *((void *)&v25 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
          LOBYTE(v26) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v10);
          sub_2168F845C((void *)a4);
        }
      }
    }
  }
  else
  {
    uint64_t v26 = 0;
    long long __dst = 0u;
    long long v25 = 0u;
    if (&__dst != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v9 = v25;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v9;
      long long __dst = 0u;
      long long v25 = 0u;
      *(void *)(a4 + 32) = v26;
      uint64_t v26 = 0;
    }
    sub_2168F83DC((uint64_t)&__dst);
  }
}

void sub_216CC895C(_Unwind_Exception *a1)
{
}

__n128 sub_216CC89AC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C762F78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC89F8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C762F78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CC8A28(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CC8A30(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C762FD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC8A70()
{
  return &unk_26C762FD8;
}

void sub_216CC8A7C(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CC8B28(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CC8B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

double sub_216CC8B28(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int16 v5 = a3;
  if ((a3 & 0x8000000000000000) == 0)
  {
    long long v9 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    long long v10 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *((void *)a2 + 3);
    if ((a3 & 0x4000000000000000) != 0)
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix2d::SetDiagonal((uint64_t)&v18, 1.0);
      *((void *)&v12 + 1) = v18.n128_u64[1];
      uint64_t v13 = v19;
      *(double *)&long long v12 = (double)(char)v5;
      double v14 = (double)(v5 >> 8);
      if (!v6)
      {
LABEL_14:
        *(void *)&double result = sub_216B8F1DC(a4, &v12).n128_u64[0];
        return result;
      }
    }
    else
    {
      uint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
      sub_216C804FC((void *)&v9 + 1, (uint64_t)&v12, 0x20uLL);
      uint64_t v6 = v10;
      if (!v10) {
        goto LABEL_14;
      }
    }
    sub_216784EC4(v6);
    goto LABEL_14;
  }
  uint64_t v20 = 0;
  __n128 v18 = 0u;
  long long v19 = 0u;
  long long v15 = *a2;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)a2 + 2);
  unint64_t v16 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = *((void *)a2 + 3);
  sub_216CC8CAC(a1, &v15, a3, (uint64_t)&v18);
  if (v16) {
    sub_216784EC4(v16);
  }
  sub_216B8F268(a4, &v18);
  sub_2168F83DC((uint64_t)&v18);
  return result;
}

void sub_216CC8C6C(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_216CC8CAC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v21) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v21, 4uLL)) {
        return;
      }
    }
    uint64_t v7 = a2[1];
    uint64_t v8 = (std::__shared_weak_count *)a2[2];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = a2[3];
      uint64_t v18 = v7;
      long long v19 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = a2[3];
      uint64_t v18 = a2[1];
      long long v19 = 0;
    }
    uint64_t v20 = v9;
    unint64_t v24 = 0;
    if (v6 > 0x6FF)
    {
      if (sub_216C804FC(&v18, (uint64_t)&v24, 8uLL))
      {
LABEL_14:
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
        unint64_t v12 = v11 - v20;
        unint64_t v13 = v24;
        if (v20 < 0 || (v12 & 0x8000000000000000) != 0 || (v24 <= v12 ? (BOOL v14 = 32 * v24 > v12) : (BOOL v14 = 1), v14))
        {
          *(void *)&long long v21 = "usd/crateFile.cpp";
          *((void *)&v21 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v22 = 2053;
          *((void *)&v22 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
          LOBYTE(v23) = 0;
          uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 32 * v13, v12, v17);
        }
        else
        {
          long long v21 = 0u;
          long long v22 = 0u;
          long long v25 = &v21;
          sub_2169C0824((unint64_t *)a4, v24, &v25);
          sub_2169C0A9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
          sub_216C804FC(&v18, *(void *)(a4 + 32), 32 * *(void *)a4);
        }
      }
    }
    else
    {
      LODWORD(v21) = 0;
      if (sub_216C804FC(&v18, (uint64_t)&v21, 4uLL))
      {
        unint64_t v24 = v21;
        goto LABEL_14;
      }
    }
    if (v19) {
      sub_216784EC4(v19);
    }
    if (v8) {
      sub_216784EC4(v8);
    }
    return;
  }
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  if (&v21 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v10 = v22;
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v10;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a4 + 32) = v23;
    uint64_t v23 = 0;
  }
  sub_2168F83DC((uint64_t)&v21);
}

void sub_216CC8F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CC8F5C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C762FF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC8FA8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C762FF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CC8FD8(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return sub_216CC9038(*(uint64_t **)(a1 + 16), *(void *)(a1 + 8), (void *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), this);
}

uint64_t sub_216CC8FEC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C763058)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC902C()
{
  return &unk_26C763058;
}

unint64_t sub_216CC9038(uint64_t *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    }
    else {
      uint64_t v10 = *(void *)this;
    }
    return sub_216CC91AC((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      uint64_t v12 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    }
    else {
      uint64_t v12 = *(void *)this;
    }
    v25[0] = a2;
    v25[1] = a3;
    unsigned int v24 = 0;
    v22[0] = *(_OWORD *)v12;
    long long v14 = *(_OWORD *)(v12 + 32);
    long long v13 = *(_OWORD *)(v12 + 48);
    long long v15 = *(_OWORD *)(v12 + 16);
    uint64_t v23 = *(void *)(v12 + 64);
    _OWORD v22[2] = v14;
    v22[3] = v13;
    v22[1] = v15;
    if (sub_216CC96C8((uint64_t)v22, (uint64_t)&v24))
    {
      return v24 | 0x400E000000000000;
    }
    else
    {
      uint64_t v16 = *a1;
      if (!*a1)
      {
        uint64_t v17 = operator new(0x28uLL);
        *uint64_t v17 = 0u;
        v17[1] = 0u;
        *((_DWORD *)v17 + 8) = 1065353216;
        sub_2168CAEA8(a1, (uint64_t)v17);
        uint64_t v16 = *a1;
      }
      uint64_t v21 = 0;
      uint64_t v18 = sub_216CC9820(v16, (double *)v12, v12, &v21);
      long long v19 = v18;
      if (v20)
      {
        v18[11] = *a3 & 0xFFFFFFFFFFFFLL | 0xE000000000000;
        sub_216CC977C((uint64_t)v25, (char *)v12);
      }
      return v19[11];
    }
  }
}

unint64_t sub_216CC91AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a2;
  v19[1] = a3;
  unint64_t result = 0x800E000000000000;
  unint64_t v18 = 0x800E000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      uint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7C7A0(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    long long v13 = sub_216CC93DC(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        uint64_t v17 = sub_216C98168((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          uint64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(void *)a4;
          sub_216C984FC((uint64_t)v20, (char *)&__src);
        }
        sub_216CC9330((uint64_t)v20, *(char **)(a4 + 32), *(void *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x800E000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(void *)a4;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        sub_216CC9330((uint64_t)v19, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

uint64_t sub_216CC9330(uint64_t result, char *__src, uint64_t a3)
{
  uint64_t v3 = 72 * a3;
  if (72 * a3)
  {
    __int16 v5 = *(void **)(result + 8);
    do
    {
      uint64_t v6 = v5[2];
      uint64_t v7 = v6 - *v5 + 0x80000;
      if (v3 >= v7) {
        size_t v8 = v6 - *v5 + 0x80000;
      }
      else {
        size_t v8 = v3;
      }
      uint64_t v9 = *v5 - v6;
      if ((int64_t)(v8 + v9) > v5[4]) {
        v5[4] = v8 + v9;
      }
      unint64_t result = (uint64_t)memcpy((void *)(v5[3] + v9), __src, v8);
      *v5 += v8;
      if (v7 <= v3) {
        unint64_t result = sub_216C7A9E4((BOOL)v5);
      }
      __src += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return result;
}

uint64_t *sub_216CC93DC(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = sub_2169C13AC((uint64_t)v32, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_2169C14C4(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (uint64_t *)(a1 + 16);
  unint64_t v18 = operator new(0x40uLL);
  uint64_t i = (uint64_t *)v18;
  uint64_t v33 = a1 + 16;
  *(void *)unint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    uint64_t v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      uint64_t v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  __int16 v29 = *(uint64_t **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *uint64_t i = *v29;
LABEL_42:
    *__int16 v29 = (uint64_t)i;
    goto LABEL_43;
  }
  *uint64_t i = *v17;
  *uint64_t v17 = (uint64_t)i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    __int16 v29 = (uint64_t *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CC9654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CC9670(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CC9670(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t sub_216CC96C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = a1;
  while (2)
  {
    for (uint64_t i = 0; i != 3; ++i)
    {
      if (v2 == i)
      {
        uint64_t v5 = 0;
        double v6 = *(double *)(a1 + 24 * v2 + 8 * v2);
        if (v6 < -128.0 || v6 > 127.0) {
          return v5;
        }
        if (v6 != (double)(int)v6) {
          return 0;
        }
        *((unsigned char *)&v8 + v2) = (int)v6;
      }
      else if (*(double *)(v3 + 8 * i) != 0.0)
      {
        return 0;
      }
    }
    ++v2;
    v3 += 24;
    if (v2 != 3) {
      continue;
    }
    break;
  }
  *(_WORD *)a2 = v8;
  *(unsigned char *)(a2 + 2) = v9;
  return 1;
}

uint64_t sub_216CC977C(uint64_t a1, char *__src)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = 72;
  do
  {
    uint64_t v5 = v3[2];
    uint64_t v6 = v5 - *v3 + 0x80000;
    if (v4 >= v6) {
      size_t v7 = v5 - *v3 + 0x80000;
    }
    else {
      size_t v7 = v4;
    }
    uint64_t v8 = *v3 - v5;
    if ((int64_t)(v7 + v8) > v3[4]) {
      v3[4] = v7 + v8;
    }
    uint64_t result = (uint64_t)memcpy((void *)(v3[3] + v8), __src, v7);
    *v3 += v7;
    if (v6 <= v4) {
      uint64_t result = sub_216C7A9E4((BOOL)v3);
    }
    __src += v7;
    v4 -= v7;
  }
  while (v4);
  return result;
}

void *sub_216CC9820(uint64_t a1, double *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v9 = sub_2169525A4((uint64_t)&v31, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator==((double *)i + 2, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x60uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  long long v17 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)i + 3) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)i + 4) = v17;
  uint64_t v18 = *(void *)(a3 + 64);
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((_OWORD *)i + 2) = v19;
  uint64_t v20 = *a4;
  *((void *)i + 10) = v18;
  *((void *)i + 11) = v20;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (!v11 || (float)(v22 * (float)v11) < v21)
  {
    BOOL v23 = 1;
    if (v11 >= 3) {
      BOOL v23 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v11);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      size_t v26 = v25;
    }
    else {
      size_t v26 = v24;
    }
    sub_21678A04C(a1, v26);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v27 = *(void *)a1;
  uint64_t v28 = *(void **)(*(void *)a1 + 8 * v4);
  if (v28)
  {
    *(void *)uint64_t i = *v28;
LABEL_38:
    *uint64_t v28 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v27 + 8 * v4) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v29 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v29 >= v11) {
        v29 %= v11;
      }
    }
    else
    {
      v29 &= v11 - 1;
    }
    uint64_t v28 = (void *)(*(void *)a1 + 8 * v29);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CC9A68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216CC9A84(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C763078;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC9AD0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C763078;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_216CC9B00(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v11[0] = v6;
  v11[1] = v7;
  long long v11[2] = 0;
  void v11[3] = v8;
  v11[4] = v9;
  return sub_216CC9B98(v5, (uint64_t)v11, v3, v4);
}

uint64_t sub_216CC9B4C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7630D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC9B8C()
{
  return &unk_26C7630D8;
}

double sub_216CC9B98(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    memset(&var90, 0, 40);
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&var90._write = *(_OWORD *)a2;
    *(_OWORD *)&var90._ub._int size = v5;
    *(void *)&var90._ur = *(void *)(a2 + 32);
    sub_216CC9C5C(a1, &var90._write, a3, (uint64_t)&var90);
    sub_216B8F6D4(a4, (__n128 *)&var90);
    sub_2168F83DC((uint64_t)&var90);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0) {
      sub_216CC9E64((uint64_t)&var90, a3);
    }
    else {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), &var90, (char *)0x48, *(void *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    return sub_216B8F5F0(a4, (uint64_t)&var90);
  }
  return result;
}

void sub_216CC9C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216CC9C5C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      uint64_t v8 = a2[1];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
      var88._unint64_t p = 0;
      if (v7 > 0x6FF)
      {
        ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, &var88, (char *)8, v5 + v8);
        if (v12 == -1) {
          return;
        }
        unint64_t p = (unint64_t)var88._p;
        goto LABEL_13;
      }
    }
    else
    {
      var88._r = 0;
      if (!sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&var88._r)) {
        return;
      }
      uint64_t v8 = a2[1];
      uint64_t v5 = a2[2];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
    }
    var88._r = 0;
    ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&var88._r, (char *)4, v5 + v8);
    if (v12 == -1) {
      return;
    }
    unint64_t p = var88._r;
    var88._unint64_t p = (unsigned __int8 *)var88._r;
LABEL_13:
    ssize_t v14 = v12 + v5;
    unint64_t v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (p <= v15 ? (BOOL v16 = 72 * p > v15) : (BOOL v16 = 1), v16))
    {
      *(void *)&var88._r = "usd/crateFile.cpp";
      *(void *)&var88._flags = "_ReadUncompressedArray";
      var88._bf._unsigned int base = (unsigned __int8 *)2053;
      *(void *)&var88._bf._int size = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::"
                                    "value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray"
                                    "(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__px"
                                    "rReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
                                    "_CrateFile::_PreadStream>, T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
      LOBYTE(var88._lbfsize) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&var88._r, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", p, 72 * p, v10 - v14, v10);
    }
    else
    {
      memset(&var88._r, 0, 72);
      var88._write = (int (__cdecl *)(void *, const char *, int))&var88._r;
      sub_2169C162C((unint64_t *)a4, p, (uint64_t *)&var88._write);
      sub_2169C195C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(72 * *(void *)a4), v14 + v8);
    }
    return;
  }
  memset(&var88._r, 0, 40);
  if (&var88._r != (int *)a4)
  {
    sub_2168F83DC(a4);
    __sbuf bf = var88._bf;
    *(_OWORD *)a4 = *(_OWORD *)&var88._r;
    *(__sbuf *)(a4 + 16) = bf;
    memset(&var88._r, 0, 32);
    *(void *)(a4 + 32) = *(void *)&var88._lbfsize;
    *(void *)&var88._lbfint size = 0;
  }
  sub_2168F83DC((uint64_t)&var88._r);
}

void sub_216CC9E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_216CC9E64(uint64_t a1, int a2)
{
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetDiagonal((uint64_t)v7, 1.0);
  uint64_t v3 = 0;
  long long v4 = v7[3];
  *(_OWORD *)(a1 + 32) = v7[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(void *)(a1 + 64) = v8;
  long long v5 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v5;
  do
  {
    double result = (double)*((char *)&v9 + v3);
    *(double *)a1 = result;
    a1 += 32;
    ++v3;
  }
  while (v3 != 3);
  return result;
}

__n128 sub_216CC9EE4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7630F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CC9F30(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7630F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_216CC9F60(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_216CC9FB4((void *)(a1 + 8), a2, a3);
}

uint64_t sub_216CC9F68(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C763158)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CC9FA8()
{
  return &unk_26C763158;
}

double sub_216CC9FB4(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v10[0] = *a1;
  v10[1] = v8;
  __n128 v10[2] = v6;
  _DWORD v10[3] = v7;
  int v11 = sub_216C688BC();
  return sub_216CCA034(v5, (uint64_t)v10, v3, v4);
}

double sub_216CCA034(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v12 = 0;
    memset(__dst, 0, sizeof(__dst));
    long long v6 = *(_OWORD *)(a2 + 16);
    v13[0] = *(_OWORD *)a2;
    v13[1] = v6;
    uint64_t v14 = *(void *)(a2 + 32);
    sub_216CCA118(a1, v13, a3, (uint64_t)__dst);
    sub_216B8F6D4(a4, __dst);
    sub_2168F83DC((uint64_t)__dst);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v8 = *(_OWORD *)a2;
    long long v9 = v5;
    uint64_t v10 = *(void *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      sub_216CC9E64((uint64_t)__dst, a3);
    }
    else
    {
      *((void *)&v8 + 1) = *(void *)(*(void *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_216C82F78((uint64_t)&v8 + 8, __dst, 0x48uLL);
    }
    return sub_216B8F5F0(a4, (uint64_t)__dst);
  }
  return result;
}

void sub_216CCA100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CCA118(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      long long v7 = a2[1];
      long long v21 = *a2;
      long long v22 = v7;
      uint64_t v23 = *((void *)a2 + 4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91850, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B91850))
      {
        uint64_t v20 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v20) {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
        }
        byte_267B91848 = *v20;
        __cxa_guard_release(&qword_267B91850);
      }
      unint64_t v24 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v21 + 8, &v24, 8uLL)) {
          return;
        }
        unint64_t v8 = v24;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_216C82F78((uint64_t)&v21 + 8, &__dst, 4uLL) & 1) == 0) {
          return;
        }
        unint64_t v8 = __dst;
        unint64_t v24 = __dst;
      }
      unint64_t v10 = 72 * v8;
      uint64_t v11 = *((void *)&v21 + 1);
      if (!byte_267B91848 || v10 < 0x800 || (BYTE8(v21) & 7) != 0)
      {
        uint64_t v14 = *(void *)(*(void *)v22 + 32);
        uint64_t v15 = *((void *)&v21 + 1) - *(void *)(*(void *)v22 + 24);
        unint64_t v16 = v14 - v15;
        if (v15 < 0 || (v16 & 0x8000000000000000) != 0 || (v8 <= v16 ? (BOOL v17 = v10 > v16) : (BOOL v17 = 1), v17))
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v26 = 2117;
          *((void *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v8, 72 * v8, v16, v14);
        }
        else
        {
          uint64_t v29 = 0;
          long long v27 = 0u;
          long long v28 = 0u;
          long long __dst = 0u;
          long long v26 = 0u;
          p_dst = &__dst;
          sub_2169C162C((unint64_t *)a4, v8, (uint64_t *)&p_dst);
          sub_2169C195C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v18, v19);
          sub_216C82F78((uint64_t)&v21 + 8, *(void **)(a4 + 32), 72 * *(void *)a4);
        }
      }
      else
      {
        uint64_t v12 = sub_216C99144((uint64_t)&v21 + 8, *((char **)&v21 + 1), 72 * v8, v8);
        if (v12)
        {
          *(void *)&long long v26 = 0;
          *((void *)&v26 + 1) = v12;
          *(void *)&long long v27 = v11;
          long long __dst = v24;
          if (&__dst != (long long *)a4)
          {
            sub_2168F83DC(a4);
            long long v13 = v26;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v13;
            long long __dst = 0u;
            long long v26 = 0u;
            *(void *)(a4 + 32) = v27;
            *(void *)&long long v27 = 0;
          }
          sub_2168F83DC((uint64_t)&__dst);
        }
        else
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v26 = 2109;
          *((void *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v10);
          sub_2168F845C((void *)a4);
        }
      }
    }
  }
  else
  {
    *(void *)&long long v27 = 0;
    long long __dst = 0u;
    long long v26 = 0u;
    if (&__dst != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v9 = v26;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v9;
      long long __dst = 0u;
      long long v26 = 0u;
      *(void *)(a4 + 32) = v27;
      *(void *)&long long v27 = 0;
    }
    sub_2168F83DC((uint64_t)&__dst);
  }
}

void sub_216CCA444(_Unwind_Exception *a1)
{
}

__n128 sub_216CCA494(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C763178;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CCA4E0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C763178;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CCA510(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CCA518(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7631D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CCA558()
{
  return &unk_26C7631D8;
}

void sub_216CCA564(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CCA610(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CCA5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

double sub_216CCA610(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    long long v13 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v14 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = *((void *)a2 + 3);
    sub_216CCA758(a1, &v13, a3, (uint64_t)v11);
    if (v14) {
      sub_216784EC4(v14);
    }
    sub_216B8F6D4(a4, v11);
    sub_2168F83DC((uint64_t)v11);
  }
  else
  {
    long long v8 = *a2;
    long long v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
    long long v9 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *((void *)a2 + 3);
    if ((a3 & 0x4000000000000000) != 0)
    {
      sub_216CC9E64((uint64_t)v11, a3);
    }
    else
    {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
      sub_216C804FC((void *)&v8 + 1, (uint64_t)v11, 0x48uLL);
      long long v5 = v9;
    }
    if (v5) {
      sub_216784EC4(v5);
    }
    return sub_216B8F5F0(a4, (uint64_t)v11);
  }
  return result;
}

void sub_216CCA718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CCA758(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v23) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v23, 4uLL)) {
        return;
      }
    }
    uint64_t v7 = a2[1];
    long long v8 = (std::__shared_weak_count *)a2[2];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = a2[3];
      uint64_t v19 = v7;
      uint64_t v20 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = a2[3];
      uint64_t v19 = a2[1];
      uint64_t v20 = 0;
    }
    uint64_t v21 = v9;
    unint64_t v22 = 0;
    if (v6 > 0x6FF)
    {
      if (sub_216C804FC(&v19, (uint64_t)&v22, 8uLL))
      {
LABEL_14:
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19);
        unint64_t v12 = v22;
        unint64_t v13 = v11 - v21;
        unint64_t v14 = 72 * v22;
        if (v21 < 0 || (v13 & 0x8000000000000000) != 0 || (v22 <= v13 ? (BOOL v15 = v14 > v13) : (BOOL v15 = 1), v15))
        {
          *(void *)&long long v23 = "usd/crateFile.cpp";
          *((void *)&v23 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v24 = 2053;
          *((void *)&v24 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
          LOBYTE(v25) = 0;
          uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v12, v14, v13, v18);
        }
        else
        {
          uint64_t v27 = 0;
          long long v25 = 0u;
          long long v26 = 0u;
          long long v23 = 0u;
          long long v24 = 0u;
          long long v28 = &v23;
          sub_2169C162C((unint64_t *)a4, v22, (uint64_t *)&v28);
          sub_2169C195C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v16, v17);
          sub_216C804FC(&v19, *(void *)(a4 + 32), 72 * *(void *)a4);
        }
      }
    }
    else
    {
      LODWORD(v23) = 0;
      if (sub_216C804FC(&v19, (uint64_t)&v23, 4uLL))
      {
        unint64_t v22 = v23;
        goto LABEL_14;
      }
    }
    if (v20) {
      sub_216784EC4(v20);
    }
    if (v8) {
      sub_216784EC4(v8);
    }
    return;
  }
  *(void *)&long long v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  if (&v23 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v10 = v24;
    *(_OWORD *)a4 = v23;
    *(_OWORD *)(a4 + 16) = v10;
    long long v23 = 0u;
    long long v24 = 0u;
    *(void *)(a4 + 32) = v25;
    *(void *)&long long v25 = 0;
  }
  sub_2168F83DC((uint64_t)&v23);
}

void sub_216CCA9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CCAA10(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7631F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CCAA5C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7631F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CCAA8C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return sub_216CCAAEC(*(uint64_t **)(a1 + 16), *(void *)(a1 + 8), (void *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), this);
}

uint64_t sub_216CCAAA0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C763258)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CCAAE0()
{
  return &unk_26C763258;
}

unint64_t sub_216CCAAEC(uint64_t *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    }
    else {
      uint64_t v10 = *(void *)this;
    }
    return sub_216CCAC60((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      uint64_t v12 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    }
    else {
      uint64_t v12 = *(void *)this;
    }
    v27[0] = a2;
    v27[1] = a3;
    unsigned int v26 = 0;
    long long v13 = *(_OWORD *)(v12 + 48);
    long long v15 = *(_OWORD *)v12;
    long long v14 = *(_OWORD *)(v12 + 16);
    void v25[2] = *(_OWORD *)(v12 + 32);
    v25[3] = v13;
    v25[0] = v15;
    v25[1] = v14;
    long long v16 = *(_OWORD *)(v12 + 112);
    long long v18 = *(_OWORD *)(v12 + 64);
    long long v17 = *(_OWORD *)(v12 + 80);
    v25[6] = *(_OWORD *)(v12 + 96);
    v25[7] = v16;
    v25[4] = v18;
    v25[5] = v17;
    if (sub_216CCB178((uint64_t)v25, &v26))
    {
      return v26 | 0x400F000000000000;
    }
    else
    {
      uint64_t v19 = *a1;
      if (!*a1)
      {
        uint64_t v20 = operator new(0x28uLL);
        _OWORD *v20 = 0u;
        v20[1] = 0u;
        *((_DWORD *)v20 + 8) = 1065353216;
        sub_2168CAEA8(a1, (uint64_t)v20);
        uint64_t v19 = *a1;
      }
      uint64_t v24 = 0;
      uint64_t v21 = sub_216CCB2C4(v19, (double *)v12, (_OWORD *)v12, &v24);
      unint64_t v22 = v21;
      if (v23)
      {
        v21[18] = *a3 & 0xFFFFFFFFFFFFLL | 0xF000000000000;
        sub_216CCB220((uint64_t)v27, (char *)v12);
      }
      return v22[18];
    }
  }
}

unint64_t sub_216CCAC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a2;
  v19[1] = a3;
  unint64_t result = 0x800F000000000000;
  unint64_t v18 = 0x800F000000000000;
  if (*(void *)a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      uint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7C860(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    long long v13 = sub_216CCAE8C(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        uint64_t v17 = sub_216C98168((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          uint64_t __src = *(void *)a4;
          sub_216C80458((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(void *)a4;
          sub_216C984FC((uint64_t)v20, (char *)&__src);
        }
        sub_216CCADE4((uint64_t)v20, *(char **)(a4 + 32), *(void *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x800F000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(void *)a4;
        sub_216C984FC((uint64_t)v19, (char *)v20);
        sub_216CCADE4((uint64_t)v19, *(char **)(a4 + 32), *(void *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

uint64_t sub_216CCADE4(uint64_t result, char *__src, uint64_t a3)
{
  int64_t v3 = a3 << 7;
  if (a3 << 7)
  {
    long long v5 = *(void **)(result + 8);
    do
    {
      uint64_t v6 = v5[2];
      uint64_t v7 = v6 - *v5 + 0x80000;
      if (v3 >= v7) {
        size_t v8 = v6 - *v5 + 0x80000;
      }
      else {
        size_t v8 = v3;
      }
      uint64_t v9 = *v5 - v6;
      if ((int64_t)(v8 + v9) > v5[4]) {
        v5[4] = v8 + v9;
      }
      unint64_t result = (uint64_t)memcpy((void *)(v5[3] + v9), __src, v8);
      *v5 += v8;
      if (v7 <= v3) {
        unint64_t result = sub_216C7A9E4((BOOL)v5);
      }
      __src += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return result;
}

uint64_t *sub_216CCAE8C(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = sub_2169029A8((uint64_t)v32, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_216902AEC(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (uint64_t *)(a1 + 16);
  unint64_t v18 = operator new(0x40uLL);
  uint64_t i = (uint64_t *)v18;
  uint64_t v33 = a1 + 16;
  *(void *)unint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    uint64_t v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      uint64_t v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  uint64_t v29 = *(uint64_t **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *uint64_t i = *v29;
LABEL_42:
    *uint64_t v29 = (uint64_t)i;
    goto LABEL_43;
  }
  *uint64_t i = *v17;
  *uint64_t v17 = (uint64_t)i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    uint64_t v29 = (uint64_t *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CCB104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CCB120(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CCB120(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t sub_216CCB178(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = a1;
  while (2)
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      if (v2 == i)
      {
        uint64_t v5 = 0;
        double v6 = *(double *)(a1 + 32 * v2 + 8 * v2);
        if (v6 < -128.0 || v6 > 127.0) {
          return v5;
        }
        if (v6 != (double)(int)v6) {
          return 0;
        }
        *((unsigned char *)&v8 + v2) = (int)v6;
      }
      else if (*(double *)(v3 + 8 * i) != 0.0)
      {
        return 0;
      }
    }
    ++v2;
    v3 += 32;
    if (v2 != 4) {
      continue;
    }
    break;
  }
  *a2 = v8;
  return 1;
}

uint64_t sub_216CCB220(uint64_t a1, char *__src)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = 128;
  do
  {
    uint64_t v5 = v3[2];
    uint64_t v6 = v5 - *v3 + 0x80000;
    if (v4 >= v6) {
      size_t v7 = v5 - *v3 + 0x80000;
    }
    else {
      size_t v7 = v4;
    }
    uint64_t v8 = *v3 - v5;
    if ((int64_t)(v7 + v8) > v3[4]) {
      v3[4] = v7 + v8;
    }
    uint64_t result = (uint64_t)memcpy((void *)(v3[3] + v8), __src, v7);
    *v3 += v7;
    if (v6 <= v4) {
      uint64_t result = sub_216C7A9E4((BOOL)v3);
    }
    __src += v7;
    v4 -= v7;
  }
  while (v4);
  return result;
}

void *sub_216CCB2C4(uint64_t a1, double *a2, _OWORD *a3, void *a4)
{
  unint64_t v9 = sub_2168F65AC((uint64_t)&v31, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==((double *)i + 2, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x98uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  long long v17 = a3[5];
  *((_OWORD *)i + 5) = a3[4];
  *((_OWORD *)i + 6) = v17;
  long long v18 = a3[7];
  *((_OWORD *)i + 7) = a3[6];
  *((_OWORD *)i + 8) = v18;
  long long v19 = a3[1];
  *((_OWORD *)i + 1) = *a3;
  *((_OWORD *)i + 2) = v19;
  long long v20 = a3[3];
  *((_OWORD *)i + 3) = a3[2];
  *((_OWORD *)i + 4) = v20;
  *((void *)i + 18) = *a4;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (!v11 || (float)(v22 * (float)v11) < v21)
  {
    BOOL v23 = 1;
    if (v11 >= 3) {
      BOOL v23 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v11);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      size_t v26 = v25;
    }
    else {
      size_t v26 = v24;
    }
    sub_21678A04C(a1, v26);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v27 = *(void *)a1;
  uint64_t v28 = *(void **)(*(void *)a1 + 8 * v4);
  if (v28)
  {
    *(void *)uint64_t i = *v28;
LABEL_38:
    *uint64_t v28 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v27 + 8 * v4) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v29 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v29 >= v11) {
        v29 %= v11;
      }
    }
    else
    {
      v29 &= v11 - 1;
    }
    uint64_t v28 = (void *)(*(void *)a1 + 8 * v29);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CCB518(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216CCB534(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C763278;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CCB580(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C763278;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_216CCB5B0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v11[0] = v6;
  v11[1] = v7;
  __n128 v11[2] = 0;
  void v11[3] = v8;
  v11[4] = v9;
  return sub_216CCB648(v5, (uint64_t)v11, v3, v4);
}

uint64_t sub_216CCB5FC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7632D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CCB63C()
{
  return &unk_26C7632D8;
}

double sub_216CCB648(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v8 = 0;
    memset(v7, 0, sizeof(v7));
    long long v5 = *(_OWORD *)(a2 + 16);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v5;
    uint64_t v10 = *(void *)(a2 + 32);
    sub_216CCB70C(a1, v9, a3, (uint64_t)v7);
    sub_2169025F8(a4, v7);
    sub_2168F83DC((uint64_t)v7);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0) {
      sub_216CCB910(v7, a3);
    }
    else {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v7, (char *)0x80, *(void *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    *(void *)&double result = sub_216B8FA6C(a4, (long long *)v7).n128_u64[0];
  }
  return result;
}

void sub_216CCB6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216CCB70C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      uint64_t v8 = a2[1];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
      v19._unint64_t p = 0;
      if (v7 > 0x6FF)
      {
        ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, &v19, (char *)8, v5 + v8);
        if (v12 == -1) {
          return;
        }
        unint64_t p = (unint64_t)v19._p;
        goto LABEL_13;
      }
    }
    else
    {
      v19._r = 0;
      if (!sub_216C98940((uint64_t)(a2 + 1), 0, (__sFILE *)&v19._r)) {
        return;
      }
      uint64_t v8 = a2[1];
      uint64_t v5 = a2[2];
      uint64_t v10 = a2[3];
      uint64_t v9 = (FILE *)a2[4];
    }
    v19._r = 0;
    ssize_t v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19._r, (char *)4, v5 + v8);
    if (v12 == -1) {
      return;
    }
    unint64_t p = v19._r;
    v19._unint64_t p = (unsigned __int8 *)v19._r;
LABEL_13:
    ssize_t v14 = v12 + v5;
    unint64_t v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (p <= v15 ? (BOOL v16 = p << 7 > v15) : (BOOL v16 = 1), v16))
    {
      *(void *)&v19._r = "usd/crateFile.cpp";
      *(void *)&v19._flags = "_ReadUncompressedArray";
      v19._bf._unsigned int base = (unsigned __int8 *)2053;
      *(void *)&v19._bf._int size = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_PreadStream>, T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
      LOBYTE(v19._lbfsize) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19._r, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", p, p << 7, v10 - v14, v10);
    }
    else
    {
      memset(&v19._r, 0, 128);
      v19._offset = (fpos_t)&v19._r;
      sub_216902248((unint64_t *)a4, p, (long long **)&v19._offset);
      sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(*(void *)a4 << 7), v14 + v8);
    }
    return;
  }
  memset(&v19._r, 0, 40);
  if (&v19._r != (int *)a4)
  {
    sub_2168F83DC(a4);
    __sbuf bf = v19._bf;
    *(_OWORD *)a4 = *(_OWORD *)&v19._r;
    *(__sbuf *)(a4 + 16) = bf;
    memset(&v19._r, 0, 32);
    *(void *)(a4 + 32) = *(void *)&v19._lbfsize;
    *(void *)&v19._lbfint size = 0;
  }
  sub_2168F83DC((uint64_t)&v19._r);
}

void sub_216CCB8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_216CCB910(_OWORD *a1, int a2)
{
  int v10 = a2;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v9, 1.0);
  uint64_t v3 = 0;
  long long v4 = v9[5];
  a1[4] = v9[4];
  a1[5] = v4;
  long long v5 = v9[7];
  a1[6] = v9[6];
  a1[7] = v5;
  long long v6 = v9[1];
  *a1 = v9[0];
  a1[1] = v6;
  long long v7 = v9[3];
  a1[2] = v9[2];
  a1[3] = v7;
  do
  {
    double result = (double)*((char *)&v10 + v3);
    *(double *)a1 = result;
    a1 = (_OWORD *)((char *)a1 + 40);
    ++v3;
  }
  while (v3 != 4);
  return result;
}

__n128 sub_216CCB9A0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7632F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CCB9EC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7632F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_216CCBA1C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_216CCBA70((void *)(a1 + 8), a2, a3);
}

uint64_t sub_216CCBA24(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C763358)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CCBA64()
{
  return &unk_26C763358;
}

double sub_216CCBA70(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v10[0] = *a1;
  v10[1] = v8;
  __n128 v10[2] = v6;
  _DWORD v10[3] = v7;
  int v11 = sub_216C688BC();
  return sub_216CCBAF0(v5, (uint64_t)v10, v3, v4);
}

double sub_216CCBAF0(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v12 = 0;
    memset(__dst, 0, sizeof(__dst));
    long long v6 = *(_OWORD *)(a2 + 16);
    v13[0] = *(_OWORD *)a2;
    v13[1] = v6;
    uint64_t v14 = *(void *)(a2 + 32);
    sub_216CCBBD4(a1, v13, a3, (uint64_t)__dst);
    sub_2169025F8(a4, __dst);
    sub_2168F83DC((uint64_t)__dst);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v8 = *(_OWORD *)a2;
    long long v9 = v5;
    uint64_t v10 = *(void *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      sub_216CCB910(__dst, a3);
    }
    else
    {
      *((void *)&v8 + 1) = *(void *)(*(void *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_216C82F78((uint64_t)&v8 + 8, __dst, 0x80uLL);
    }
    *(void *)&double result = sub_216B8FA6C(a4, (long long *)__dst).n128_u64[0];
  }
  return result;
}

void sub_216CCBBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CCBBD4(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      long long v7 = a2[1];
      long long v21 = *a2;
      long long v22 = v7;
      uint64_t v23 = *((void *)a2 + 4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91860, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B91860))
      {
        long long v20 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v20) {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
        }
        byte_267B91858 = *v20;
        __cxa_guard_release(&qword_267B91860);
      }
      unint64_t v24 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v21 + 8, &v24, 8uLL)) {
          return;
        }
        unint64_t v8 = v24;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_216C82F78((uint64_t)&v21 + 8, &__dst, 4uLL) & 1) == 0) {
          return;
        }
        unint64_t v8 = __dst;
        unint64_t v24 = __dst;
      }
      unint64_t v10 = v8 << 7;
      uint64_t v11 = *((void *)&v21 + 1);
      if (!byte_267B91858 || v10 < 0x800 || (BYTE8(v21) & 7) != 0)
      {
        uint64_t v14 = *(void *)(*(void *)v22 + 32);
        uint64_t v15 = *((void *)&v21 + 1) - *(void *)(*(void *)v22 + 24);
        unint64_t v16 = v14 - v15;
        if (v15 < 0 || (v16 & 0x8000000000000000) != 0 || (v8 <= v16 ? (BOOL v17 = v10 > v16) : (BOOL v17 = 1), v17))
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v26 = 2117;
          *((void *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v8, v8 << 7, v16, v14);
        }
        else
        {
          long long v31 = 0u;
          long long v32 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          long long __dst = 0u;
          long long v26 = 0u;
          p_dst = &__dst;
          sub_216902248((unint64_t *)a4, v8, &p_dst);
          sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v18, v19);
          sub_216C82F78((uint64_t)&v21 + 8, *(void **)(a4 + 32), *(void *)a4 << 7);
        }
      }
      else
      {
        uint64_t v12 = sub_216C99144((uint64_t)&v21 + 8, *((char **)&v21 + 1), v8 << 7, v8);
        if (v12)
        {
          *(void *)&long long v26 = 0;
          *((void *)&v26 + 1) = v12;
          *(void *)&long long v27 = v11;
          long long __dst = v24;
          if (&__dst != (long long *)a4)
          {
            sub_2168F83DC(a4);
            long long v13 = v26;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v13;
            long long __dst = 0u;
            long long v26 = 0u;
            *(void *)(a4 + 32) = v27;
            *(void *)&long long v27 = 0;
          }
          sub_2168F83DC((uint64_t)&__dst);
        }
        else
        {
          *(void *)&long long __dst = "usd/crateFile.cpp";
          *((void *)&__dst + 1) = "_ReadUncompressedArray";
          *(void *)&long long v26 = 2109;
          *((void *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v10);
          sub_2168F845C((void *)a4);
        }
      }
    }
  }
  else
  {
    *(void *)&long long v27 = 0;
    long long __dst = 0u;
    long long v26 = 0u;
    if (&__dst != (long long *)a4)
    {
      sub_2168F83DC(a4);
      long long v9 = v26;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v9;
      long long __dst = 0u;
      long long v26 = 0u;
      *(void *)(a4 + 32) = v27;
      *(void *)&long long v27 = 0;
    }
    sub_2168F83DC((uint64_t)&__dst);
  }
}

void sub_216CCBF04(_Unwind_Exception *a1)
{
}

__n128 sub_216CCBF54(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C763378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CCBFA0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C763378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CCBFD0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CCBFD8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7633D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CCC018()
{
  return &unk_26C7633D8;
}

void sub_216CCC024(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CCC0D0(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CCC0AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

double sub_216CCC0D0(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    long long v13 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v14 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = *((void *)a2 + 3);
    sub_216CCC218(a1, &v13, a3, (uint64_t)v11);
    if (v14) {
      sub_216784EC4(v14);
    }
    sub_2169025F8(a4, v11);
    sub_2168F83DC((uint64_t)v11);
  }
  else
  {
    long long v8 = *a2;
    long long v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
    long long v9 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *((void *)a2 + 3);
    if ((a3 & 0x4000000000000000) != 0)
    {
      sub_216CCB910(v11, a3);
    }
    else
    {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
      sub_216C804FC((void *)&v8 + 1, (uint64_t)v11, 0x80uLL);
      long long v5 = v9;
    }
    if (v5) {
      sub_216784EC4(v5);
    }
    *(void *)&double result = sub_216B8FA6C(a4, (long long *)v11).n128_u64[0];
  }
  return result;
}

void sub_216CCC1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CCC218(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v23) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v23, 4uLL)) {
        return;
      }
    }
    uint64_t v7 = a2[1];
    long long v8 = (std::__shared_weak_count *)a2[2];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = a2[3];
      uint64_t v19 = v7;
      long long v20 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v9 = a2[3];
      uint64_t v19 = a2[1];
      long long v20 = 0;
    }
    uint64_t v21 = v9;
    unint64_t v22 = 0;
    if (v6 > 0x6FF)
    {
      if (sub_216C804FC(&v19, (uint64_t)&v22, 8uLL))
      {
LABEL_14:
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19);
        unint64_t v12 = v22;
        unint64_t v13 = v11 - v21;
        unint64_t v14 = v22 << 7;
        if (v21 < 0 || (v13 & 0x8000000000000000) != 0 || (v22 <= v13 ? (BOOL v15 = v14 > v13) : (BOOL v15 = 1), v15))
        {
          *(void *)&long long v23 = "usd/crateFile.cpp";
          *((void *)&v23 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v24 = 2053;
          *((void *)&v24 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
          LOBYTE(v25) = 0;
          uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v12, v14, v13, v18);
        }
        else
        {
          long long v29 = 0u;
          long long v30 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          long long v25 = 0u;
          long long v26 = 0u;
          long long v23 = 0u;
          long long v24 = 0u;
          long long v31 = &v23;
          sub_216902248((unint64_t *)a4, v22, &v31);
          sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v16, v17);
          sub_216C804FC(&v19, *(void *)(a4 + 32), *(void *)a4 << 7);
        }
      }
    }
    else
    {
      LODWORD(v23) = 0;
      if (sub_216C804FC(&v19, (uint64_t)&v23, 4uLL))
      {
        unint64_t v22 = v23;
        goto LABEL_14;
      }
    }
    if (v20) {
      sub_216784EC4(v20);
    }
    if (v8) {
      sub_216784EC4(v8);
    }
    return;
  }
  *(void *)&long long v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  if (&v23 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v10 = v24;
    *(_OWORD *)a4 = v23;
    *(_OWORD *)(a4 + 16) = v10;
    long long v23 = 0u;
    long long v24 = 0u;
    *(void *)(a4 + 32) = v25;
    *(void *)&long long v25 = 0;
  }
  sub_2168F83DC((uint64_t)&v23);
}

void sub_216CCC490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CCC4D4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7633F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CCC520(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7633F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CCC550(uint64_t a1, uint64_t a2)
{
  return sub_216CCC5B0(*(uint64_t **)(a1 + 16), *(char ***)(a1 + 8), (char **)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_216CCC564(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C763458)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CCC5A4()
{
  return &unk_26C763458;
}

uint64_t sub_216CCC5B0(uint64_t *a1, char **a2, char **a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 8);
  if ((v7 & 4) != 0) {
    long long v8 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                              + 168))(a4);
  else {
    long long v8 = *(pxrInternal__aapl__pxrReserved__::VtDictionary **)a4;
  }
  v16[0] = a2;
  v16[1] = a3;
  if (pxrInternal__aapl__pxrReserved__::VtDictionary::empty(v8)) {
    return 0x401F000000000000;
  }
  uint64_t v10 = *a1;
  if (!*a1)
  {
    uint64_t v11 = operator new(0x28uLL);
    _OWORD *v11 = 0u;
    v11[1] = 0u;
    *((_DWORD *)v11 + 8) = 1065353216;
    sub_216C7CA94(a1, (uint64_t)v11);
    uint64_t v10 = *a1;
  }
  uint64_t v15 = 0;
  unint64_t v12 = sub_216CCC694(v10, (uint64_t *)v8, v8, &v15);
  unint64_t v13 = v12;
  if (v14)
  {
    void v12[3] = (unint64_t)*a3 & 0xFFFFFFFFFFFFLL | 0x1F000000000000;
    sub_216CCCA14(v16, v8);
  }
  return v13[3];
}

uint64_t *sub_216CCC694(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::VtDictionary *a3, void *a4)
{
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * sub_2168EEC90(a2));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (pxrInternal__aapl__pxrReserved__::operator==((void **)i + 2, a2, v9)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_216CCC91C(a1, v10, a3, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  long long v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *long long v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (uint64_t *)v26[0];
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CCC8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void ***__p, uint64_t a11)
{
  if (__p) {
    sub_216CCC9BC((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216CCC91C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const pxrInternal__aapl__pxrReserved__::VtDictionary *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x20uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *unint64_t v10 = 0;
  v10[1] = a2;
  uint64_t result = pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)(v10 + 2), a3);
  _DWORD v10[3] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216CCC9A0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_216CCC9BC(v3, v2);
  _Unwind_Resume(a1);
}

void sub_216CCC9BC(uint64_t a1, void ***__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168EBBB8(__p + 2, 0);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void *sub_216CCCA14(char ***a1, pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  __src[0] = pxrInternal__aapl__pxrReserved__::VtDictionary::size(this);
  sub_216C80458((uint64_t)a1, (char *)__src);
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(this);
  uint64_t v6 = v5;
  float v17 = (void *)v4;
  uint64_t v18 = v5;
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::VtDictionary::end(this);
  uint64_t v9 = result;
  uint64_t v10 = v8;
  if (v8) {
    BOOL v11 = v4 == (void)result;
  }
  else {
    BOOL v11 = 1;
  }
  char v12 = v11;
  if (v6 != v8 || (v12 & 1) == 0)
  {
    do
    {
      LODWORD(__src[0]) = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddString(*a1, (unsigned __int8 *)(v4 + 32));
      sub_216C984FC((uint64_t)a1, (char *)__src);
      __src[0] = a1;
      __src[1] = v4 + 56;
      __src[2] = v20;
      sub_216CCCB0C((uint64_t)a1, (uint64_t)__src);
      sub_216C80458((uint64_t)a1, v20);
      uint64_t result = sub_2168EF104(&v17, v13, v14);
      uint64_t v4 = (uint64_t)v17;
      if (v10) {
        BOOL v15 = v17 == v9;
      }
      else {
        BOOL v15 = 1;
      }
      char v16 = v15;
    }
    while (v18 != v10 || (v16 & 1) == 0);
  }
  return result;
}

uint64_t sub_216CCCB0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = **(void **)(a1 + 8);
  uint64_t __src = 0;
  sub_216C80458(a1, (char *)&__src);
  **(void **)(a2 + 16) = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_PackValue(**(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile ***)a2, *(const pxrInternal__aapl__pxrReserved__::VtValue **)(a2 + 8));
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[2];
  if (v7 > v4 || v5[4] + v7 < v4)
  {
    sub_216C7A9E4(*(void *)(a1 + 8));
    uint64_t *v5 = v4;
    v5 += 2;
  }
  uint64_t *v5 = v4;
  uint64_t __src = v6 - v4;
  uint64_t result = sub_216C80458(a1, (char *)&__src);
  uint64_t v9 = *(void **)(a1 + 8);
  uint64_t v10 = v9[2];
  if (v10 > v6 || v9[4] + v10 < v6)
  {
    uint64_t result = sub_216C7A9E4((BOOL)v9);
    void *v9 = v6;
    v9 += 2;
  }
  void *v9 = v6;
  return result;
}

__n128 sub_216CCCC00(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C763478;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CCCC4C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C763478;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CCCC7C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  *(void *)&long long v10 = v6;
  *((void *)&v10 + 1) = v7;
  uint64_t v11 = 0;
  uint64_t v12 = v8;
  uint64_t v13 = v9;
  sub_216CCCD14(v5, &v10, v3, v4);
}

uint64_t sub_216CCCCC8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7634D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CCCD08()
{
  return &unk_26C7634D8;
}

void sub_216CCCD14(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v9 = 0;
  long long v5 = a2[1];
  long long v6 = *a2;
  long long v7 = v5;
  uint64_t v8 = *((void *)a2 + 4);
  if ((a3 & 0x4000000000000000) != 0)
  {
    long long v10 = 0;
    sub_2168EBBB8(&v9, 0);
    sub_2168EBBB8(&v10, 0);
  }
  else
  {
    *(void *)&long long v7 = a3 & 0xFFFFFFFFFFFFLL;
    sub_216CCCDB8((uint64_t *)&v6, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v9);
  }
  sub_2168EC844(a4, (const void ****)&v9);
  sub_2168EBBB8(&v9, 0);
}

void sub_216CCCDA0(_Unwind_Exception *a1)
{
  sub_2168EBBB8((void ***)(v1 - 32), 0);
  _Unwind_Resume(a1);
}

BOOL sub_216CCCDB8(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  _28[2] = *MEMORY[0x263EF8340];
  uint64_t v20 = 0;
  uint64_t v4 = (uint64_t)(a1 + 1);
  if (!sub_216C8B2C8((uint64_t)(a1 + 1), 0, (__sFILE *)&v20)) {
    return 0;
  }
  while (1)
  {
    uint64_t v5 = v20--;
    BOOL v6 = v5 == 0;
    if (!v5) {
      break;
    }
    memset(&v19, 0, sizeof(v19));
    LODWORD(_28[0]) = -1;
    EmptyToken = (uint64_t *)sub_216C98940(v4, 0, (__sFILE *)_28);
    if (EmptyToken)
    {
      uint64_t v8 = *a1;
      uint64_t v9 = *(void *)(*a1 + 144);
      if (LODWORD(_28[0]) >= (unint64_t)((*(void *)(*a1 + 152) - v9) >> 2))
      {
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
        EmptyString = (const std::string *)&qword_267B91638;
      }
      else
      {
        unint64_t v10 = *(unsigned int *)(v9 + 4 * LODWORD(_28[0]));
        uint64_t v12 = v8 + 120;
        uint64_t v11 = *(void *)(v8 + 120);
        if (v10 >= (*(void *)(v12 + 8) - v11) >> 3)
        {
          EmptyToken = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
          uint64_t v13 = &qword_267B91658;
        }
        else
        {
          uint64_t v13 = (uint64_t *)(v11 + 8 * v10);
        }
        unint64_t v14 = *v13 & 0xFFFFFFFFFFFFFFF8;
        if (v14) {
          EmptyString = (const std::string *)(v14 + 16);
        }
        else {
          EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyToken);
        }
      }
      std::string::operator=(&v19, EmptyString);
      _28[1] = 0;
      if (sub_216CCCFAC(a1, _28))
      {
        float v17 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (long long *)&v19);
        sub_2168EC6DC(v17, _28);
        int v16 = 0;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::VtDictionary::clear(a2);
        int v16 = 1;
      }
      sub_2168EE084((uint64_t)_28);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtDictionary::clear(a2);
      int v16 = 1;
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v19.__r_.__value_.__l.__data_);
      if (v16) {
        return v6;
      }
    }
    else if (v16)
    {
      return v6;
    }
  }
  return v6;
}

void sub_216CCCF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
}

BOOL sub_216CCCFAC(uint64_t *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  sub_216CCD110(a1);
  BOOL result = sub_216C8B2C8((uint64_t)(a1 + 1), 0, (__sFILE *)&v9);
  if (result)
  {
    uint64_t v5 = (uint64_t *)sub_216CCD178();
    sub_216CCD4F8(v5, &v9, &v9);
    if (v6)
    {
      uint64_t v8 = *a1;
      uint64_t v11 = 0;
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_UnpackValue(v8, v9, (uint64_t)&v10);
      sub_2168ED33C(a2, &v10);
      sub_2168EE084((uint64_t)&v10);
      sub_216CCD97C((uint64_t)v5, &v9, bswap64(0x9E3779B97F4A7C55 * v9));
      return 1;
    }
    else
    {
      unint64_t v10 = "usd/crateFile.cpp";
      uint64_t v11 = "Read";
      uint64_t v12 = 1425;
      uint64_t v13 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::U"
            "sd_CrateFile::_PreadStream>::Read(T &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_Pread"
            "Stream, T = pxrInternal__aapl__pxrReserved__::VtValue]";
      char v14 = 0;
      long long v7 = (const char *)(*a1 + 6512);
      if (*(char *)(*a1 + 6535) < 0) {
        long long v7 = *(const char **)v7;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt asset <%s>: a VtValue claims to recursively contain itself -- returning an empty VtValue instead", v7);
      return 0;
    }
  }
  return result;
}

void sub_216CCD0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CCD110(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v4 = 0;
  uint64_t result = sub_216C8B2C8((uint64_t)(a1 + 1), 0, (__sFILE *)&v4);
  if (result)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::ArchFileAdvise(a1[4], a1[1] + v2, v4, 1);
    a1[2] = v4 + v2;
  }
  return result;
}

uint64_t sub_216CCD178()
{
  v0 = (uint64_t *)off_26B4B1B18();
  uint64_t result = *v0;
  if (!*v0)
  {
    if ((*(unsigned char *)off_26B4B1B48(&off_26B4B1B48) & 1) == 0)
    {
      uint64_t v2 = (void *)off_26B4B1B30();
      uint64_t v4 = v3;
      sub_216CCD240((uint64_t)v2);
      _tlv_atexit((void (__cdecl *)(void *))sub_216CCD278, v2);
      *(unsigned char *)v4(&off_26B4B1B48) = 1;
    }
    uint64_t result = off_26B4B1B30();
    uint64_t *v0 = result;
  }
  return result;
}

uint64_t sub_216CCD240(uint64_t a1)
{
  return sub_216CCD2B4(a1, 0, 0.0, 0.5);
}

uint64_t sub_216CCD278(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 8);
  sub_21686ED60(&v3);
  return a1;
}

uint64_t sub_216CCD2B4(uint64_t a1, unint64_t a2, float a3, float a4)
{
  unint64_t v12 = a2;
  sub_21686EB98((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >> 60)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_216767B04(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_264293928, MEMORY[0x263F8C060]);
  }
  sub_216CCD458((void *)(a1 + 8), v12);
  long long v7 = *(int **)(a1 + 8);
  if (v7 == *(int **)(a1 + 16)) {
    long long v7 = sub_216CCD3D4();
  }
  unint64_t v8 = v12;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8) {
    *(unsigned char *)(*(void *)(a1 + 16) - 10) = 1;
  }
  float v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(void *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_216CCD3C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *sub_216CCD3D4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798C898, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798C898))
  {
    dword_26798C888 = 0;
    word_26798C88C = -1;
    byte_26798C88E = 1;
    __cxa_atexit((void (*)(void *))sub_216CCD4E0, &dword_26798C888, &dword_216758000);
    __cxa_guard_release(&qword_26798C898);
  }
  return &dword_26798C888;
}

void *sub_216CCD458(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21682BF78(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 16 * a2;
    do
    {
      *(_DWORD *)uint64_t v4 = 0;
      *(_WORD *)(v4 + 4) = -1;
      *(unsigned char *)(v4 + 6) = 0;
      v4 += 16;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_216CCD4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_216CCD4E0(uint64_t result)
{
  if (*(__int16 *)(result + 4) != -1) {
    *(_WORD *)(result + 4) = -1;
  }
  return result;
}

uint64_t sub_216CCD4F8(uint64_t *a1, void *a2, void *a3)
{
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55 * *a2);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[4];
  uint64_t v8 = v5 & *a1;
  if (*(__int16 *)(v7 + 16 * v8 + 4) < 0)
  {
    LOWORD(v9) = 0;
LABEL_7:
    char v11 = sub_216CCD668((uint64_t)a1);
    uint64_t v12 = a1[4];
    if (v11)
    {
      uint64_t v8 = v5 & *a1;
      int v13 = *(__int16 *)(v12 + 16 * v8 + 4);
      if (v13 < 0)
      {
        LOWORD(v9) = 0;
      }
      else
      {
        LOWORD(v9) = 0;
        do
        {
          int v9 = (__int16)(v9 + 1);
          uint64_t v8 = (v8 + 1) & *a1;
          int v13 = *(__int16 *)(v12 + 16 * v8 + 4);
        }
        while (v9 <= v13);
      }
      int v14 = (unsigned __int16)v13;
    }
    else
    {
      int v14 = *(unsigned __int16 *)(v12 + 16 * v8 + 4);
    }
    if (v14 == 0xFFFF)
    {
      uint64_t v15 = v12 + 16 * v8;
      *(void *)(v15 + 8) = *a3;
      *(_DWORD *)uint64_t v15 = v5;
      *(_WORD *)(v15 + 4) = v9;
    }
    else
    {
      uint64_t v16 = *a3;
      sub_216CCD8AC(a1, v8, v9, v5, &v16);
      uint64_t v12 = a1[4];
    }
    ++a1[6];
    return v12 + 16 * v8;
  }
  else
  {
    LOWORD(v9) = 0;
    while (1)
    {
      uint64_t result = v7 + 16 * v8;
      if (*(void *)(result + 8) == *a2) {
        break;
      }
      int v9 = (__int16)(v9 + 1);
      uint64_t v8 = (v8 + 1) & v6;
      if (v9 > *(__int16 *)(v7 + 16 * v8 + 4)) {
        goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t sub_216CCD668(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72) || (unint64_t v2 = *(void *)(a1 + 48), v2 >= *(void *)(a1 + 56)))
  {
    unint64_t v6 = sub_21686E8DC((void *)a1);
    sub_216CCD730(a1, v6);
    *(unsigned char *)(a1 + 72) = 0;
    return 1;
  }
  if (*(unsigned char *)(a1 + 73))
  {
    *(unsigned char *)(a1 + 73) = 0;
    float v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      unint64_t v4 = *(void *)(a1 + 40);
      float v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        float v8 = *(float *)(a1 + 68);
        unint64_t v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        unint64_t v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9) {
          unint64_t v11 = v9;
        }
        else {
          unint64_t v11 = v10;
        }
        sub_216CCD730(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

void sub_216CCD730(uint64_t a1, unint64_t a2)
{
  sub_216CCD2B4((uint64_t)&v8, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  float v3 = *(uint64_t **)(a1 + 8);
  unint64_t v4 = *(uint64_t **)(a1 + 16);
  if (v3 != v4)
  {
    float v5 = v3 + 1;
    unint64_t v6 = (unint64_t)(v9[4] - 1) >> 32;
    do
    {
      if (*((__int16 *)v5 - 2) != -1)
      {
        if (v6) {
          unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * *v5);
        }
        else {
          unint64_t v7 = *((unsigned int *)v5 - 2);
        }
        sub_216CCD840(&v8, v8 & v7, 0, v7, v5);
      }
      v5 += 2;
    }
    while (v5 - 1 != v4);
  }
  void v9[5] = *(void *)(a1 + 48);
  sub_21686E9D4(&v8, (uint64_t *)a1);
  unint64_t v10 = (void **)v9;
  sub_21686ED60(&v10);
}

void sub_216CCD820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 - 56) = &a11;
  sub_21686ED60((void ***)(v11 - 56));
  _Unwind_Resume(a1);
}

void *sub_216CCD840(void *result, uint64_t a2, __int16 a3, int a4, uint64_t *a5)
{
  uint64_t v5 = result[4];
  while (1)
  {
    unint64_t v6 = (int *)(v5 + 16 * a2);
    unint64_t v7 = v6 + 1;
    int v8 = *((__int16 *)v6 + 2);
    if (v8 >= a3) {
      goto LABEL_5;
    }
    unint64_t v9 = (uint64_t *)(v6 + 2);
    uint64_t v10 = *a5;
    if (v8 == -1) {
      break;
    }
    *a5 = *v9;
    uint64_t *v9 = v10;
    *unint64_t v7 = a3;
    int v11 = *v6;
    *unint64_t v6 = a4;
    a3 = v8;
    a4 = v11;
LABEL_5:
    ++a3;
    a2 = *result & (a2 + 1);
  }
  uint64_t *v9 = v10;
  *unint64_t v6 = a4;
  *unint64_t v7 = a3;
  return result;
}

uint64_t *sub_216CCD8AC(uint64_t *result, uint64_t a2, __int16 a3, int a4, uint64_t *a5)
{
  uint64_t v5 = result[4];
  unint64_t v6 = (int *)(v5 + 16 * a2);
  uint64_t v7 = *a5;
  *a5 = *((void *)v6 + 1);
  *((void *)v6 + 1) = v7;
  int v8 = *((unsigned __int16 *)v6 + 2);
  *((_WORD *)v6 + 2) = a3;
  int v9 = *v6;
  *unint64_t v6 = a4;
  uint64_t v10 = *result;
  uint64_t v11 = (a2 + 1) & *result;
  int v12 = v8 + 1;
  int v13 = (int *)(v5 + 16 * v11);
  int v14 = v13 + 1;
  for (int i = *((unsigned __int16 *)v13 + 2); i != 0xFFFF; int i = *((unsigned __int16 *)v13 + 2))
  {
    if ((__int16)v12 <= (__int16)i)
    {
      int i = v12;
    }
    else
    {
      if ((__int16)v12 >= 4096) {
        *((unsigned char *)result + 72) = 1;
      }
      uint64_t v16 = v5 + 16 * v11;
      uint64_t v17 = *a5;
      *a5 = *(void *)(v16 + 8);
      *(void *)(v16 + 8) = v17;
      _WORD *v14 = v12;
      int v18 = *v13;
      int *v13 = v9;
      int v9 = v18;
    }
    uint64_t v11 = (v11 + 1) & v10;
    int v12 = i + 1;
    int v13 = (int *)(v5 + 16 * v11);
    int v14 = v13 + 1;
  }
  *(void *)(v5 + 16 * v11 + 8) = *a5;
  int *v13 = v9;
  _WORD *v14 = v12;
  return result;
}

uint64_t sub_216CCD97C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = sub_21686EF88((void *)a1, a2, a3);
  if (*(void *)(a1 + 32) + 16 * *(void *)(a1 + 40) == v4) {
    return 0;
  }
  sub_216CCD9CC((uint64_t *)a1, v4);
  uint64_t result = 1;
  *(unsigned char *)(a1 + 73) = 1;
  return result;
}

uint64_t *sub_216CCD9CC(uint64_t *result, uint64_t a2)
{
  if (*(__int16 *)(a2 + 4) != -1) {
    *(_WORD *)(a2 + 4) = -1;
  }
  --result[6];
  uint64_t v2 = result[4];
  uint64_t v3 = (a2 - v2) >> 4;
  uint64_t v4 = *result;
  uint64_t v5 = (v3 + 1) & *result;
  uint64_t v6 = v2 + 16 * v5;
  int v9 = *(__int16 *)(v6 + 4);
  uint64_t v7 = (__int16 *)(v6 + 4);
  __int16 v8 = v9;
  if (v9 >= 1)
  {
    do
    {
      uint64_t v10 = v2 + 16 * v3;
      uint64_t v3 = v5;
      uint64_t v11 = (int *)(v2 + 16 * v5);
      int v12 = *v11;
      *(void *)(v10 + 8) = *((void *)v11 + 1);
      *(_DWORD *)uint64_t v10 = v12;
      *(_WORD *)(v10 + 4) = v8 - 1;
      if (*v7 != -1) {
        *uint64_t v7 = -1;
      }
      uint64_t v5 = (v3 + 1) & v4;
      uint64_t v13 = v2 + 16 * v5;
      int v14 = *(__int16 *)(v13 + 4);
      uint64_t v7 = (__int16 *)(v13 + 4);
      __int16 v8 = v14;
    }
    while (v14 > 0);
  }
  return result;
}

__n128 sub_216CCDA70(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7634F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CCDABC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7634F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CCDAEC(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CCDAF4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C763558)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CCDB34()
{
  return &unk_26C763558;
}

void sub_216CCDB40(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  *(void *)&long long v9 = *a1;
  *((void *)&v9 + 1) = v8;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  int v12 = sub_216C688BC();
  sub_216CCDBC0(v5, &v9, v3, v4);
}

void sub_216CCDBC0(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  long long v9 = 0;
  long long v5 = a2[1];
  long long v6 = *a2;
  long long v7 = v5;
  uint64_t v8 = *((void *)a2 + 4);
  if ((a3 & 0x4000000000000000) != 0)
  {
    uint64_t v10 = 0;
    sub_2168EBBB8(&v9, 0);
    sub_2168EBBB8(&v10, 0);
  }
  else
  {
    *((void *)&v6 + 1) = *(void *)(*(void *)v7 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_216CCDC74((uint64_t)&v6, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v9);
  }
  sub_2168EC844(a4, (const void ****)&v9);
  sub_2168EBBB8(&v9, 0);
}

void sub_216CCDC5C(_Unwind_Exception *a1)
{
  sub_2168EBBB8((void ***)(v1 - 32), 0);
  _Unwind_Resume(a1);
}

BOOL sub_216CCDC74(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  void v21[2] = *MEMORY[0x263EF8340];
  uint64_t __dst = 0;
  uint64_t v4 = a1 + 8;
  if (!sub_216C82F78(a1 + 8, &__dst, 8uLL)) {
    return 0;
  }
  while (1)
  {
    uint64_t v5 = __dst--;
    BOOL v6 = v5 == 0;
    if (!v5) {
      break;
    }
    memset(&v19, 0, sizeof(v19));
    LODWORD(v21[0]) = -1;
    EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_216C82F78(v4, v21, 4uLL);
    if (EmptyToken)
    {
      uint64_t v8 = *(void *)a1;
      uint64_t v9 = *(void *)(*(void *)a1 + 144);
      if (LODWORD(v21[0]) >= (unint64_t)((*(void *)(*(void *)a1 + 152) - v9) >> 2))
      {
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
        EmptyString = (const std::string *)&qword_267B91638;
      }
      else
      {
        unint64_t v10 = *(unsigned int *)(v9 + 4 * LODWORD(v21[0]));
        uint64_t v12 = v8 + 120;
        uint64_t v11 = *(void *)(v8 + 120);
        if (v10 >= (*(void *)(v12 + 8) - v11) >> 3)
        {
          EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
          uint64_t v13 = &qword_267B91658;
        }
        else
        {
          uint64_t v13 = (uint64_t *)(v11 + 8 * v10);
        }
        unint64_t v14 = *v13 & 0xFFFFFFFFFFFFFFF8;
        if (v14) {
          EmptyString = (const std::string *)(v14 + 16);
        }
        else {
          EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
        }
      }
      std::string::operator=(&v19, EmptyString);
      v21[1] = 0;
      if (sub_216CCDE68(a1, v21))
      {
        uint64_t v17 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (long long *)&v19);
        sub_2168EC6DC(v17, v21);
        int v16 = 0;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::VtDictionary::clear(a2);
        int v16 = 1;
      }
      sub_2168EE084((uint64_t)v21);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtDictionary::clear(a2);
      int v16 = 1;
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v19.__r_.__value_.__l.__data_);
      if (v16) {
        return v6;
      }
    }
    else if (v16)
    {
      return v6;
    }
  }
  return v6;
}

void sub_216CCDE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
}

uint64_t sub_216CCDE68(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  sub_216CCDFCC(a1);
  uint64_t result = sub_216C82F78(a1 + 8, &__dst, 8uLL);
  if (result)
  {
    uint64_t v5 = (uint64_t *)sub_216CCD178();
    sub_216CCD4F8(v5, &__dst, &__dst);
    if (v6)
    {
      uint64_t v8 = *(void *)a1;
      uint64_t v11 = 0;
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_UnpackValue(v8, __dst, (uint64_t)&v10);
      sub_2168ED33C(a2, &v10);
      sub_2168EE084((uint64_t)&v10);
      sub_216CCD97C((uint64_t)v5, &__dst, bswap64(0x9E3779B97F4A7C55 * __dst));
      return 1;
    }
    else
    {
      unint64_t v10 = "usd/crateFile.cpp";
      uint64_t v11 = "Read";
      uint64_t v12 = 1425;
      uint64_t v13 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::U"
            "sd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::Read"
            "(T &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReser"
            "ved__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::VtValue]";
      char v14 = 0;
      long long v7 = (const char *)(*(void *)a1 + 6512);
      if (*(char *)(*(void *)a1 + 6535) < 0) {
        long long v7 = *(const char **)v7;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt asset <%s>: a VtValue claims to recursively contain itself -- returning an empty VtValue instead", v7);
      return 0;
    }
  }
  return result;
}

void sub_216CCDFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CCDFCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(**(void **)(a1 + 16) + 24);
  uint64_t __dst = 0;
  if (sub_216C82F78(a1 + 8, &__dst, 8uLL))
  {
    uint64_t v4 = v2 - v3;
    pxrInternal__aapl__pxrReserved__::ArchMemAdvise(*(void *)(**(void **)(a1 + 16) + 24) + v4, __dst, 1);
    *(void *)(a1 + 8) = *(void *)(**(void **)(a1 + 16) + 24) + __dst + v4;
  }
}

__n128 sub_216CCE060(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C763578;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CCE0AC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C763578;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CCE0DC(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CCE0E4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7635D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CCE124()
{
  return &unk_26C7635D8;
}

void sub_216CCE130(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CCE1DC(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CCE1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CCE1DC(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v9 = 0;
  long long v6 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *((void *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
    sub_216CCE2C0((uint64_t *)&v6, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v9);
    uint64_t v5 = v7;
    if (!v7) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  long long v10 = 0;
  sub_2168EBBB8(&v9, 0);
  sub_2168EBBB8(&v10, 0);
  if (v5) {
LABEL_7:
  }
    sub_216784EC4(v5);
LABEL_8:
  sub_2168EC844(a4, (const void ****)&v9);
  sub_2168EBBB8(&v9, 0);
}

void sub_216CCE294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a4) {
    sub_216784EC4(a4);
  }
  sub_2168EBBB8((void ***)va, 0);
  _Unwind_Resume(a1);
}

BOOL sub_216CCE2C0(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  void v21[2] = *MEMORY[0x263EF8340];
  uint64_t v20 = 0;
  uint64_t v4 = a1 + 1;
  if (!sub_216C804FC(a1 + 1, (uint64_t)&v20, 8uLL)) {
    return 0;
  }
  while (1)
  {
    uint64_t v5 = v20--;
    BOOL v6 = v5 == 0;
    if (!v5) {
      break;
    }
    memset(&v19, 0, sizeof(v19));
    LODWORD(v21[0]) = -1;
    EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_216C804FC(v4, (uint64_t)v21, 4uLL);
    if (EmptyToken)
    {
      uint64_t v8 = *a1;
      uint64_t v9 = *(void *)(*a1 + 144);
      if (LODWORD(v21[0]) >= (unint64_t)((*(void *)(*a1 + 152) - v9) >> 2))
      {
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
        EmptyString = (const std::string *)&qword_267B91638;
      }
      else
      {
        unint64_t v10 = *(unsigned int *)(v9 + 4 * LODWORD(v21[0]));
        uint64_t v12 = v8 + 120;
        uint64_t v11 = *(void *)(v8 + 120);
        if (v10 >= (*(void *)(v12 + 8) - v11) >> 3)
        {
          EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
          uint64_t v13 = &qword_267B91658;
        }
        else
        {
          uint64_t v13 = (uint64_t *)(v11 + 8 * v10);
        }
        unint64_t v14 = *v13 & 0xFFFFFFFFFFFFFFF8;
        if (v14) {
          EmptyString = (const std::string *)(v14 + 16);
        }
        else {
          EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
        }
      }
      std::string::operator=(&v19, EmptyString);
      v21[1] = 0;
      if (sub_216CCE4B4(a1, v21))
      {
        uint64_t v17 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (long long *)&v19);
        sub_2168EC6DC(v17, v21);
        int v16 = 0;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::VtDictionary::clear(a2);
        int v16 = 1;
      }
      sub_2168EE084((uint64_t)v21);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtDictionary::clear(a2);
      int v16 = 1;
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v19.__r_.__value_.__l.__data_);
      if (v16) {
        return v6;
      }
    }
    else if (v16)
    {
      return v6;
    }
  }
  return v6;
}

void sub_216CCE480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
}

uint64_t sub_216CCE4B4(uint64_t *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 1;
  uint64_t v5 = a1[3];
  uint64_t v12 = 0;
  if (sub_216C804FC(a1 + 1, (uint64_t)&v12, 8uLL)) {
    a1[3] = (uint64_t)&v12[v5];
  }
  uint64_t result = sub_216C804FC(v4, (uint64_t)&v11, 8uLL);
  if (result)
  {
    uint64_t v7 = (uint64_t *)sub_216CCD178();
    sub_216CCD4F8(v7, &v11, &v11);
    if (v8)
    {
      uint64_t v10 = *a1;
      uint64_t v13 = 0;
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_UnpackValue(v10, v11, (uint64_t)&v12);
      sub_2168ED33C(a2, &v12);
      sub_2168EE084((uint64_t)&v12);
      sub_216CCD97C((uint64_t)v7, &v11, bswap64(0x9E3779B97F4A7C55 * v11));
      return 1;
    }
    else
    {
      uint64_t v12 = "usd/crateFile.cpp";
      uint64_t v13 = "Read";
      uint64_t v14 = 1425;
      uint64_t v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::U"
            "sd_CrateFile::_AssetStream>::Read(T &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_Asset"
            "Stream, T = pxrInternal__aapl__pxrReserved__::VtValue]";
      char v16 = 0;
      uint64_t v9 = (const char *)(*a1 + 6512);
      if (*(char *)(*a1 + 6535) < 0) {
        uint64_t v9 = *(const char **)v9;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v12, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt asset <%s>: a VtValue claims to recursively contain itself -- returning an empty VtValue instead", v9);
      return 0;
    }
  }
  return result;
}

void sub_216CCE624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CCE648(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7635F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CCE694(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7635F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CCE6C4(uint64_t a1, uint64_t a2)
{
  return sub_216CCE718((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)(a1 + 8), a2);
}

uint64_t sub_216CCE6CC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C763658)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CCE70C()
{
  return &unk_26C763658;
}

uint64_t sub_216CCE718(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v4 = *((void *)*a1 + 791);
  uint64_t v5 = *(void *)(a2 + 8);
  if ((v5 & 4) != 0) {
    BOOL v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  else {
    BOOL v6 = *(unsigned __int8 **)a2;
  }

  return sub_216CCE784(v3, v2, (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)(v4 + 256), v6);
}

uint64_t sub_216CCE784(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a2, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a3, unsigned __int8 *a4)
{
  v20[0] = a2;
  v20[1] = a3;
  sub_2169E21E0((uint64_t)&v13, (uint64_t)a4);
  unint64_t v21 = (void **)&v19;
  sub_216889A04(&v21);
  unint64_t v21 = (void **)&v18;
  sub_216889A04(&v21);
  unint64_t v21 = (void **)&v17;
  sub_216889A04(&v21);
  unint64_t v21 = (void **)&v16;
  sub_216889A04(&v21);
  unint64_t v21 = (void **)&v15;
  sub_216889A04(&v21);
  unint64_t v21 = (void **)&v14;
  sub_216889A04(&v21);
  uint64_t v7 = *a1;
  if (!*a1)
  {
    char v8 = operator new(0x28uLL);
    *char v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_216C7CD3C(a1, (uint64_t)v8);
    uint64_t v7 = *a1;
  }
  unint64_t v21 = 0;
  uint64_t v9 = sub_216CCE9D8(v7, a4, (uint64_t)a4, &v21);
  uint64_t v10 = v9;
  if (v11)
  {
    *(void *)(v9 + 168) = *(void *)a3 & 0xFFFFFFFFFFFFLL | 0x20000000000000;
    sub_216CCE8A0(v20, (pxrInternal__aapl__pxrReserved__::TfToken **)a4);
  }
  return *(void *)(v10 + 168);
}

pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **sub_216CCE8A0(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a1, pxrInternal__aapl__pxrReserved__::TfToken **a2)
{
  sub_216CCEF5C(&__src, (uint64_t)a2);
  if ((__src & 0x60) != 0)
  {
    uint64_t v4 = *((void *)*a1 + 791);
    sub_216779094(__p, "A SdfListOp value using a prepended or appended value was detected, which requires crate version 0.2.0.");
    sub_216CCED74(v4, (const char *)0x200, (char *)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  __n128 result = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)sub_216CA3630((uint64_t)a1, &__src);
  char v6 = __src;
  if ((__src & 2) != 0)
  {
    __n128 result = sub_216CCEF0C(a1, a2 + 1);
    char v6 = __src;
    if ((__src & 4) == 0)
    {
LABEL_6:
      if ((v6 & 0x20) == 0) {
        goto LABEL_7;
      }
      goto LABEL_14;
    }
  }
  else if ((__src & 4) == 0)
  {
    goto LABEL_6;
  }
  __n128 result = sub_216CCEF0C(a1, a2 + 4);
  char v6 = __src;
  if ((__src & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  __n128 result = sub_216CCEF0C(a1, a2 + 7);
  char v6 = __src;
  if ((__src & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
LABEL_15:
  __n128 result = sub_216CCEF0C(a1, a2 + 10);
  char v6 = __src;
  if ((__src & 8) == 0)
  {
LABEL_9:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return sub_216CCEF0C(a1, a2 + 16);
  }
LABEL_16:
  __n128 result = sub_216CCEF0C(a1, a2 + 13);
  if ((__src & 0x10) == 0) {
    return result;
  }
  return sub_216CCEF0C(a1, a2 + 16);
}

void sub_216CCE9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216CCE9D8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  uint64_t v24 = 0;
  char v25 = 0;
  sub_2169E2750((uint64_t)&v24, a2, (uint64_t)(a2 + 8), (uint64_t)(a2 + 32), (uint64_t)(a2 + 56), (uint64_t)(a2 + 80), (uint64_t)(a2 + 104), (uint64_t)(a2 + 128));
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v24));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    char v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8) {
            pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::operator==();
          }
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  sub_216CCEC90(a1, v8, a3, a4, (uint64_t)&v24);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *(void *)uint64_t v24 = *v20;
    void *v20 = v24;
  }
  else
  {
    *(void *)uint64_t v24 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v24)
    {
      unint64_t v21 = *(void *)(*(void *)v24 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v21 >= v9) {
          v21 %= v9;
        }
      }
      else
      {
        v21 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v24;
    }
  }
  uint64_t v22 = v24;
  uint64_t v24 = 0;
  ++*(void *)(a1 + 24);
  sub_216CCED1C((uint64_t)&v24, 0);
  return v22;
}

void sub_216CCEC78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216CCED1C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216CCEC90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint8x8_t v10 = operator new(0xB0uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *uint8x8_t v10 = 0;
  v10[1] = a2;
  uint64_t result = sub_2169E21E0((uint64_t)(v10 + 2), a3);
  v10[21] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216CCED04(_Unwind_Exception *a1)
{
  sub_216CCED1C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216CCED1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216C7CDFC(v2 + 2);
    }
    operator delete(v2);
  }
}

uint64_t sub_216CCED74(uint64_t a1, const char *a2, char *a3)
{
  uint64_t v3 = a3;
  int v4 = (int)a2;
  uint64_t v6 = *(unsigned __int8 *)(a1 + 248);
  if (v6 != a2 || *(unsigned __int8 *)(a1 + 249) < BYTE1(a2))
  {
    v18[0] = "usd/crateFile.cpp";
    v18[1] = "RequestWriteVersionUpgrade";
    void v18[2] = 1076;
    v18[3] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_PackingContext::RequestWriteVersionUpgrad"
             "e(Version, std::string)";
    char v19 = 0;
    uint64_t v7 = (void *)(a1 + 224);
    if (*(char *)(a1 + 247) < 0) {
      uint64_t v7 = (void *)*v7;
    }
    unint64_t v8 = &v16;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%hhd.%hhd.%hhd", a2, a3, v6, *(unsigned __int8 *)(a1 + 249), *(unsigned __int8 *)(a1 + 250));
    if (v17 < 0) {
      unint64_t v8 = v16;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%hhd.%hhd.%hhd", v9, v10, v4, BYTE1(v4), BYTE2(v4));
    if (v15 >= 0) {
      p_unint64_t p = &__p;
    }
    else {
      p_unint64_t p = __p;
    }
    if (v3[23] < 0) {
      uint64_t v3 = *(char **)v3;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v18, (pxrInternal__aapl__pxrReserved__ *)"Upgrading crate file <%s> from version %s to %s: %s", v11, v7, v8, p_p, v3);
    if (v15 < 0) {
      operator delete(__p);
    }
    if (v17 < 0) {
      operator delete(v16);
    }
    *(_WORD *)(a1 + 248) = v4;
    *(unsigned char *)(a1 + 250) = BYTE2(v4);
  }
  return 1;
}

void sub_216CCEED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **sub_216CCEF0C(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a1, pxrInternal__aapl__pxrReserved__::TfToken **a2)
{
  uint64_t __src = (a2[1] - *a2) >> 3;
  sub_216C80458((uint64_t)a1, (char *)&__src);
  return sub_216CAD324(*a2, a2[1], a1);
}

unsigned char *sub_216CCEF5C(unsigned char *result, uint64_t a2)
{
  *uint64_t result = *(unsigned char *)a2 | (2 * (*(void *)(a2 + 16) != *(void *)(a2 + 8))) | (4
                                                                                * (*(void *)(a2 + 40) != *(void *)(a2 + 32))) | (32 * (*(void *)(a2 + 64) != *(void *)(a2 + 56))) | ((*(void *)(a2 + 88) != *(void *)(a2 + 80)) << 6) | (8 * (*(void *)(a2 + 112) != *(void *)(a2 + 104))) | (16 * (*(void *)(a2 + 136) != *(void *)(a2 + 128)));
  return result;
}

__n128 sub_216CCEFD0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C763678;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CCF01C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C763678;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CCF04C()
{
}

uint64_t sub_216CCF098(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7636D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CCF0D8()
{
  return &unk_26C7636D8;
}

void sub_216CCF0E4()
{
}

void sub_216CCF1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2169E0B70((void **)va);
  _Unwind_Resume(a1);
}

void sub_216CCF1D0()
{
}

void sub_216CCF444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v6 - 40) = v5;
  sub_216889A04((void ***)(v6 - 40));
  sub_2169E0B70((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CCF480(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  if (a1 != a2)
  {
    sub_216ABF1B0((void *)(a1 + 8), *(uint64_t **)(a2 + 8), *(uint64_t **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_216ABF1B0((void *)(a1 + 32), *(uint64_t **)(a2 + 32), *(uint64_t **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
    sub_216ABF1B0((void *)(a1 + 56), *(uint64_t **)(a2 + 56), *(uint64_t **)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
    sub_216ABF1B0((void *)(a1 + 80), *(uint64_t **)(a2 + 80), *(uint64_t **)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
    sub_216ABF1B0((void *)(a1 + 104), *(uint64_t **)(a2 + 104), *(uint64_t **)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
    sub_216ABF1B0((void *)(a1 + 128), *(uint64_t **)(a2 + 128), *(uint64_t **)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3);
  }
  return a1;
}

BOOL sub_216CCF534(uint64_t a1, int a2, __sFILE *a3)
{
  ssize_t v4 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 24), a3, (char *)1, *(void *)(a1 + 8) + *(void *)a1);
  if (v4 != -1) {
    *(void *)(a1 + 8) += v4;
  }
  return v4 != -1;
}

BOOL sub_216CCF588(uint64_t a1, uint64_t **a2)
{
  unint64_t v16 = 0;
  if (!sub_216C8B2C8(a1 + 8, 0, (__sFILE *)&v16)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    char v11 = (uint64_t *)"usd/crateFile.cpp";
    uint64_t v12 = (uint64_t *)"_Read";
    uint64_t v13 = 1189;
    float v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::TfToken]";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_216AFE5A8(&v11, v16);
  BOOL v7 = sub_216CAD7F4(a1, v11, v16);
  BOOL v8 = v7;
  if (&v11 != a2 && v7) {
    sub_216ABF1B0(a2, v11, v12, v12 - v11);
  }
  char v17 = (void **)&v11;
  sub_216889A04(&v17);
  return v8;
}

void sub_216CCF690(_Unwind_Exception *a1)
{
  *(void *)(v2 - 40) = v1;
  sub_216889A04((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

__n128 sub_216CCF6B0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7636F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CCF6FC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7636F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CCF72C()
{
}

uint64_t sub_216CCF734(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C763758)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CCF774()
{
  return &unk_26C763758;
}

void sub_216CCF780()
{
}

void sub_216CCF800()
{
}

void sub_216CCF8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2169E0B70((void **)va);
  _Unwind_Resume(a1);
}

void sub_216CCF8FC()
{
}

void sub_216CCFB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v6 - 40) = v5;
  sub_216889A04((void ***)(v6 - 40));
  sub_2169E0B70((void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_216CCFBAC(uint64_t a1, uint64_t **a2)
{
  unint64_t __dst = 0;
  if (!sub_216C82F78(a1 + 8, &__dst, 8uLL)) {
    return 0;
  }
  uint64_t v4 = *(void *)(**(void **)(a1 + 16) + 32);
  uint64_t v5 = *(void *)(a1 + 8) - *(void *)(**(void **)(a1 + 16) + 24);
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || __dst > v6)
  {
    char v11 = (uint64_t *)"usd/crateFile.cpp";
    uint64_t v12 = (uint64_t *)"_Read";
    uint64_t v13 = 1189;
    float v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::TfToken]";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v6, v4);
    return 0;
  }
  sub_216AFE5A8(&v11, __dst);
  BOOL v7 = sub_216CADE1C(a1, v11, __dst);
  BOOL v8 = v7;
  if (&v11 != a2 && v7) {
    sub_216ABF1B0(a2, v11, v12, v12 - v11);
  }
  char v17 = (void **)&v11;
  sub_216889A04(&v17);
  return v8;
}

void sub_216CCFCC0(_Unwind_Exception *a1)
{
  *(void *)(v2 - 40) = v1;
  sub_216889A04((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

__n128 sub_216CCFCE0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C763778;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CCFD2C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C763778;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CCFD5C(uint64_t a1)
{
}

uint64_t sub_216CCFD64(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7637D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CCFDA4()
{
  return &unk_26C7637D8;
}

void sub_216CCFDB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 6496);
  if (v1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  }
  sub_216CCFE5C();
}

void sub_216CCFE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CCFE5C()
{
}

void sub_216CCFF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a4) {
    sub_216784EC4(a4);
  }
  sub_2169E0B70((void **)va);
  _Unwind_Resume(a1);
}

void sub_216CCFF80()
{
}

void sub_216CD01F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v6 - 40) = v5;
  sub_216889A04((void ***)(v6 - 40));
  sub_2169E0B70((void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_216CD0230(void *a1, uint64_t **a2)
{
  unint64_t v19 = 0;
  uint64_t v4 = a1 + 1;
  if (!sub_216C804FC(a1 + 1, (uint64_t)&v19, 8uLL)) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)a1[1] + 16))(a1[1]);
  uint64_t v6 = a1[3];
  unint64_t v7 = v5 - v6;
  unint64_t v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    float v14 = (uint64_t *)"usd/crateFile.cpp";
    char v15 = (uint64_t *)"_Read";
    uint64_t v16 = 1189;
    char v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::TfToken]";
    char v18 = 0;
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*v4 + 16))();
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_216AFE5A8(&v14, v19);
  BOOL v9 = sub_216CAE578(a1, v14, v19);
  BOOL v10 = v9;
  if (&v14 != a2 && v9) {
    sub_216ABF1B0(a2, v14, v15, v15 - v14);
  }
  uint64_t v20 = (void **)&v14;
  sub_216889A04(&v20);
  return v10;
}

void sub_216CD0398(_Unwind_Exception *a1)
{
  *(void *)(v2 - 56) = v1;
  sub_216889A04((void ***)(v2 - 56));
  _Unwind_Resume(a1);
}

__n128 sub_216CD03B8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7637F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CD0404(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7637F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CD0434(uint64_t a1, uint64_t a2)
{
  return sub_216CD0488((char ***)(a1 + 8), a2);
}

uint64_t sub_216CD043C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C763858)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CD047C()
{
  return &unk_26C763858;
}

uint64_t sub_216CD0488(char ***a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v4 = (*a1)[791];
  uint64_t v5 = *(void *)(a2 + 8);
  if ((v5 & 4) != 0) {
    uint64_t v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  else {
    uint64_t v6 = *(unsigned __int8 **)a2;
  }

  return sub_216CD04F4(v3, v2, (char **)v4 + 32, v6);
}

uint64_t sub_216CD04F4(uint64_t *a1, char **a2, char **a3, unsigned __int8 *a4)
{
  v20[0] = a2;
  v20[1] = a3;
  sub_2169DAE8C((uint64_t)&v13, (uint64_t)a4);
  unint64_t v21 = (void **)&v19;
  sub_216782F20(&v21);
  unint64_t v21 = (void **)&v18;
  sub_216782F20(&v21);
  unint64_t v21 = (void **)&v17;
  sub_216782F20(&v21);
  unint64_t v21 = (void **)&v16;
  sub_216782F20(&v21);
  unint64_t v21 = (void **)&v15;
  sub_216782F20(&v21);
  unint64_t v21 = (void **)&v14;
  sub_216782F20(&v21);
  uint64_t v7 = *a1;
  if (!*a1)
  {
    unint64_t v8 = operator new(0x28uLL);
    *unint64_t v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_216C7D068(a1, (uint64_t)v8);
    uint64_t v7 = *a1;
  }
  unint64_t v21 = 0;
  uint64_t v9 = sub_216CD0748(v7, a4, (uint64_t)a4, &v21);
  uint64_t v10 = v9;
  if (v11)
  {
    *(void *)(v9 + 168) = (unint64_t)*a3 & 0xFFFFFFFFFFFFLL | 0x21000000000000;
    sub_216CD0610(v20, (unsigned __int8 **)a4);
  }
  return *(void *)(v10 + 168);
}

char ***sub_216CD0610(char ***a1, unsigned __int8 **a2)
{
  sub_216CCEF5C(&__src, (uint64_t)a2);
  if ((__src & 0x60) != 0)
  {
    uint64_t v4 = (uint64_t)(*a1)[791];
    sub_216779094(__p, "A SdfListOp value using a prepended or appended value was detected, which requires crate version 0.2.0.");
    sub_216CCED74(v4, (const char *)0x200, (char *)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  __n128 result = (char ***)sub_216CA3630((uint64_t)a1, &__src);
  char v6 = __src;
  if ((__src & 2) != 0)
  {
    __n128 result = sub_216CD0AE4(a1, a2 + 1);
    char v6 = __src;
    if ((__src & 4) == 0)
    {
LABEL_6:
      if ((v6 & 0x20) == 0) {
        goto LABEL_7;
      }
      goto LABEL_14;
    }
  }
  else if ((__src & 4) == 0)
  {
    goto LABEL_6;
  }
  __n128 result = sub_216CD0AE4(a1, a2 + 4);
  char v6 = __src;
  if ((__src & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  __n128 result = sub_216CD0AE4(a1, a2 + 7);
  char v6 = __src;
  if ((__src & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
LABEL_15:
  __n128 result = sub_216CD0AE4(a1, a2 + 10);
  char v6 = __src;
  if ((__src & 8) == 0)
  {
LABEL_9:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return sub_216CD0AE4(a1, a2 + 16);
  }
LABEL_16:
  __n128 result = sub_216CD0AE4(a1, a2 + 13);
  if ((__src & 0x10) == 0) {
    return result;
  }
  return sub_216CD0AE4(a1, a2 + 16);
}

void sub_216CD072C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216CD0748(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  uint64_t v24 = 0;
  char v25 = 0;
  sub_2169DB42C((unint64_t)&v24, a2, (uint64_t)(a2 + 8), (uint64_t)(a2 + 32), (uint64_t)(a2 + 56), (uint64_t)(a2 + 80), (uint64_t)(a2 + 104), (uint64_t)(a2 + 128));
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v24));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    char v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8) {
            pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::operator==();
          }
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  sub_216CD0A00(a1, v8, a3, a4, (uint64_t)&v24);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *(void *)uint64_t v24 = *v20;
    void *v20 = v24;
  }
  else
  {
    *(void *)uint64_t v24 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v24)
    {
      unint64_t v21 = *(void *)(*(void *)v24 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v21 >= v9) {
          v21 %= v9;
        }
      }
      else
      {
        v21 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v24;
    }
  }
  uint64_t v22 = v24;
  uint64_t v24 = 0;
  ++*(void *)(a1 + 24);
  sub_216CD0A8C((uint64_t)&v24, 0);
  return v22;
}

void sub_216CD09E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216CD0A8C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216CD0A00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint8x8_t v10 = operator new(0xB0uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *uint8x8_t v10 = 0;
  v10[1] = a2;
  uint64_t result = sub_2169DAE8C((uint64_t)(v10 + 2), a3);
  v10[21] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216CD0A74(_Unwind_Exception *a1)
{
  sub_216CD0A8C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216CD0A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216C7D128(v2 + 2);
    }
    operator delete(v2);
  }
}

char ***sub_216CD0AE4(char ***a1, unsigned __int8 **a2)
{
  unint64_t __src = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_216C80458((uint64_t)a1, (char *)&__src);
  return sub_216CAB250(*a2, a2[1], a1);
}

__n128 sub_216CD0B48(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C763878;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CD0B94(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C763878;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CD0BC4()
{
}

uint64_t sub_216CD0C10(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7638D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CD0C50()
{
  return &unk_26C7638D8;
}

void sub_216CD0C5C()
{
}

void sub_216CD0D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2169CBCC8((void **)va);
  _Unwind_Resume(a1);
}

void sub_216CD0D48()
{
}

void sub_216CD0FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v6 - 40) = v5;
  sub_216782F20((void ***)(v6 - 40));
  sub_2169CBCC8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216CD0FF8(uint64_t *a1, std::string **a2)
{
  unint64_t v16 = 0;
  if (!sub_216C8B2C8((uint64_t)(a1 + 1), 0, (__sFILE *)&v16)) {
    return 0;
  }
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    char v11 = (std::string *)"usd/crateFile.cpp";
    uint64_t v12 = (long long *)"_Read";
    uint64_t v13 = 1189;
    float v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = std::string]";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_216782DE0(&v11, v16);
  uint64_t v7 = sub_216CAB728(a1, v11, v16);
  unint64_t v8 = v7;
  if (&v11 == a2) {
    char v9 = 0;
  }
  else {
    char v9 = (char)v7;
  }
  if (v9) {
    sub_21680F694((uint64_t)a2, v11, v12, 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v11) >> 3));
  }
  unint64_t v17 = &v11;
  sub_216782F20((void ***)&v17);
  return v8;
}

void sub_216CD110C(_Unwind_Exception *a1)
{
  *(void *)(v2 - 40) = v1;
  sub_216782F20((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

__n128 sub_216CD112C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7638F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CD1178(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7638F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CD11A8()
{
}

uint64_t sub_216CD11B0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C763958)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CD11F0()
{
  return &unk_26C763958;
}

void sub_216CD11FC()
{
}

void sub_216CD127C()
{
}

void sub_216CD1364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2169CBCC8((void **)va);
  _Unwind_Resume(a1);
}

void sub_216CD1378()
{
}

void sub_216CD15EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v6 - 40) = v5;
  sub_216782F20((void ***)(v6 - 40));
  sub_2169CBCC8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CD1628(uint64_t a1, std::string **a2)
{
  unint64_t __dst = 0;
  if (!sub_216C82F78(a1 + 8, &__dst, 8uLL)) {
    return 0;
  }
  uint64_t v4 = *(void *)(**(void **)(a1 + 16) + 32);
  uint64_t v5 = *(void *)(a1 + 8) - *(void *)(**(void **)(a1 + 16) + 24);
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || __dst > v6)
  {
    char v11 = (std::string *)"usd/crateFile.cpp";
    uint64_t v12 = (long long *)"_Read";
    uint64_t v13 = 1189;
    float v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = std::string]";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v6, v4);
    return 0;
  }
  sub_216782DE0(&v11, __dst);
  uint64_t v7 = sub_216CAC184((uint64_t *)a1, v11, __dst);
  uint64_t v8 = v7;
  if (&v11 == a2) {
    char v9 = 0;
  }
  else {
    char v9 = v7;
  }
  if (v9) {
    sub_21680F694((uint64_t)a2, v11, v12, 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v11) >> 3));
  }
  unint64_t v17 = &v11;
  sub_216782F20((void ***)&v17);
  return v8;
}

void sub_216CD1748(_Unwind_Exception *a1)
{
  *(void *)(v2 - 40) = v1;
  sub_216782F20((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

__n128 sub_216CD1768(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C763978;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CD17B4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C763978;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CD17E4(uint64_t a1)
{
}

uint64_t sub_216CD17EC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7639D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CD182C()
{
  return &unk_26C7639D8;
}

void sub_216CD1838(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 6496);
  if (v1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  }
  sub_216CD18E4();
}

void sub_216CD18C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CD18E4()
{
}

void sub_216CD19E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a4) {
    sub_216784EC4(a4);
  }
  sub_2169CBCC8((void **)va);
  _Unwind_Resume(a1);
}

void sub_216CD1A08()
{
}

void sub_216CD1C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v6 - 40) = v5;
  sub_216782F20((void ***)(v6 - 40));
  sub_2169CBCC8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CD1CB8(void *a1, std::string **a2)
{
  unint64_t v19 = 0;
  uint64_t v4 = a1 + 1;
  if (!sub_216C804FC(a1 + 1, (uint64_t)&v19, 8uLL)) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)a1[1] + 16))(a1[1]);
  uint64_t v6 = a1[3];
  unint64_t v7 = v5 - v6;
  unint64_t v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    float v14 = (std::string *)"usd/crateFile.cpp";
    char v15 = (long long *)"_Read";
    uint64_t v16 = 1189;
    unint64_t v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = std::string]";
    char v18 = 0;
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*v4 + 16))();
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_216782DE0(&v14, v19);
  uint64_t v9 = sub_216CAC9E0(a1, v14, v19);
  uint64_t v10 = v9;
  if (&v14 == a2) {
    char v11 = 0;
  }
  else {
    char v11 = v9;
  }
  if (v11) {
    sub_21680F694((uint64_t)a2, v14, v15, 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v14) >> 3));
  }
  uint64_t v20 = &v14;
  sub_216782F20((void ***)&v20);
  return v10;
}

void sub_216CD1E2C(_Unwind_Exception *a1)
{
  *(void *)(v2 - 56) = v1;
  sub_216782F20((void ***)(v2 - 56));
  _Unwind_Resume(a1);
}

__n128 sub_216CD1E4C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7639F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CD1E98(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7639F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CD1EC8(uint64_t a1, uint64_t a2)
{
  return sub_216CD1F1C((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)(a1 + 8), a2);
}

uint64_t sub_216CD1ED0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C763A58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CD1F10()
{
  return &unk_26C763A58;
}

uint64_t sub_216CD1F1C(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v4 = *((void *)*a1 + 791);
  uint64_t v5 = *(void *)(a2 + 8);
  if ((v5 & 4) != 0) {
    uint64_t v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  else {
    uint64_t v6 = *(unsigned __int8 **)a2;
  }

  return sub_216CD1F88(v3, v2, (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)(v4 + 256), v6);
}

uint64_t sub_216CD1F88(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a2, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a3, unsigned __int8 *a4)
{
  v20[0] = a2;
  v20[1] = a3;
  sub_216980D74((uint64_t)&v13, (uint64_t)a4);
  unint64_t v21 = (void **)&v19;
  sub_216981168(&v21);
  unint64_t v21 = (void **)&v18;
  sub_216981168(&v21);
  unint64_t v21 = (void **)&v17;
  sub_216981168(&v21);
  unint64_t v21 = (void **)&v16;
  sub_216981168(&v21);
  unint64_t v21 = (void **)&v15;
  sub_216981168(&v21);
  unint64_t v21 = (void **)&v14;
  sub_216981168(&v21);
  uint64_t v7 = *a1;
  if (!*a1)
  {
    unint64_t v8 = operator new(0x28uLL);
    *unint64_t v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_216C7D394(a1, (uint64_t)v8);
    uint64_t v7 = *a1;
  }
  unint64_t v21 = 0;
  uint64_t v9 = sub_216CD21DC(v7, a4, (uint64_t)a4, &v21);
  uint64_t v10 = v9;
  if (v11)
  {
    *(void *)(v9 + 168) = *(void *)a3 & 0xFFFFFFFFFFFFLL | 0x22000000000000;
    sub_216CD20A4(v20, (pxrInternal__aapl__pxrReserved__::SdfPath **)a4);
  }
  return *(void *)(v10 + 168);
}

pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **sub_216CD20A4(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  sub_216CCEF5C(&__src, (uint64_t)a2);
  if ((__src & 0x60) != 0)
  {
    uint64_t v4 = *((void *)*a1 + 791);
    sub_216779094(__p, "A SdfListOp value using a prepended or appended value was detected, which requires crate version 0.2.0.");
    sub_216CCED74(v4, (const char *)0x200, (char *)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  __n128 result = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)sub_216CA3630((uint64_t)a1, &__src);
  char v6 = __src;
  if ((__src & 2) != 0)
  {
    __n128 result = sub_216CD2578(a1, a2 + 1);
    char v6 = __src;
    if ((__src & 4) == 0)
    {
LABEL_6:
      if ((v6 & 0x20) == 0) {
        goto LABEL_7;
      }
      goto LABEL_14;
    }
  }
  else if ((__src & 4) == 0)
  {
    goto LABEL_6;
  }
  __n128 result = sub_216CD2578(a1, a2 + 4);
  char v6 = __src;
  if ((__src & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  __n128 result = sub_216CD2578(a1, a2 + 7);
  char v6 = __src;
  if ((__src & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
LABEL_15:
  __n128 result = sub_216CD2578(a1, a2 + 10);
  char v6 = __src;
  if ((__src & 8) == 0)
  {
LABEL_9:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return sub_216CD2578(a1, a2 + 16);
  }
LABEL_16:
  __n128 result = sub_216CD2578(a1, a2 + 13);
  if ((__src & 0x10) == 0) {
    return result;
  }
  return sub_216CD2578(a1, a2 + 16);
}