void sub_216FB0868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::UsdLuxLightFilter(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this, const pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a2)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4);
  *(void *)this = &unk_26C76E720;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  return this;
}

{
  uint64_t v4;
  atomic_ullong *v5;
  int v6;
  int v7;
  uint64_t v8;

  sub_216D16CFC((uint64_t)&v4, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4);
  *(void *)this = &unk_26C76E720;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  return this;
}

void sub_216FB0924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216FB09DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::ConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v3, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v3);
  *((void *)a2 + 3) = 0;
  *(void *)a2 = off_26C76D8C8;
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
}

void sub_216FB0A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::CreateOutput(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
}

void sub_216FB0B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetOutput(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FB0C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetOutputs(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FB0D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::CreateInput(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
}

void sub_216FB0E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetInput(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FB0F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetInputs(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FB1018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetFilterLinkCollectionAPI(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  sub_216D36868(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (uint64_t *)v3 + 8);
  *(void *)a2 = &unk_26C767A08;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FB10F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetShaderIdAttrForRenderContext(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216D16CFC((uint64_t)v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_216FB11F0(a2, (atomic_uint **)&v5);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v5, a3);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
}

void sub_216FB11BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216FB11F0(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, atomic_uint **a2@<X8>)
{
  if (*(void *)this)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v4) {
      uint64_t v4 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v4 + 336), (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
    if (v9 < 0) {
      operator delete(__p);
    }
  }
  else
  {
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5) {
      unint64_t v5 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    int v6 = (atomic_uint *)*((void *)v5 + 42);
    *a2 = v6;
    if ((v6 & 7) != 0)
    {
      int v7 = (atomic_uint *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
        *a2 = v7;
      }
    }
  }
}

void sub_216FB12B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::CreateShaderIdAttrForRenderContext(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, std::type_info *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  sub_216FB11F0(a2, (atomic_uint **)&v10);
  char v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    char v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a3, a4, a5);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetShaderId(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken **a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetShaderIdAttrForRenderContext(this, v4, (uint64_t)&v7);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v7, v6))pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>(); {
      if ((v11 & 7) != 0)
      }
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
      sub_21697C414(&v9);
      if (v8) {
        sub_216D16E0C(v8);
      }
      uint64_t v4 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v4 + 8);
    }
    while (v4 != v5);
  }
  pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetShaderIdAttr(this, (uint64_t)&v7);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
}

void sub_216FB1508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_216D2EDA0((uint64_t)&a9);
  if ((*v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216FB1548()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F06AAC((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FB1628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FB1674(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216FB1708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216FB1730(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::~UsdShadeConnectableAPIBehavior(a1);

  operator delete(v1);
}

uint64_t sub_216FB1758(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdProperty *a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectInputToSource(a1, a2, a3, a4, 1);
}

uint64_t sub_216FB1760()
{
  return 0;
}

void *sub_216FB1768(void *a1, uint64_t a2)
{
  *a1 = a2;
  char v4 = operator new(0x20uLL);
  *char v4 = &unk_26C76E7D0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216FB17C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217325190(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216FB17DC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216FB1804(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216FB1834(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C76E820)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::~UsdLuxLightListAPI(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76E848;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    int v9 = "usdLux/lightListAPI.cpp";
    int v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdLuxLightListAPI pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::Get(const Us"
                            "dStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    int v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76E848;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FB1A34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this)
{
  return 5;
}

uint64_t sub_216FB1A5C(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B941D0, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdLuxLightListAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_216FB1C44(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76E848;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76E848;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_216FB1C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216FB1C44(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B941D0, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdLuxLightListAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B941D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B941D8))
  {
    __cxa_guard_release(&qword_267B941D8);
  }
  return &qword_267B941D0;
}

void sub_216FB1D78(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B941E8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *)__cxa_guard_acquire(&qword_267B941E8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::_GetStaticTfType(v2);
      byte_267B941E0 = sub_216D16508((char *)&qword_267B941D0, v3, v4);
      __cxa_guard_release(&qword_267B941E8);
    }
  }
  return byte_267B941E0;
}

void sub_216FB1DF8(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this)
{
  return &qword_267B941D0;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::GetLightListCacheBehaviorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 360), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FB1ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::CreateLightListCacheBehaviorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 360), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::GetLightListRel(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 352), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FB2038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::CreateLightListRel(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 352), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FB20F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this)
{
  int v1 = (int)this;
  v7[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94208, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94208))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v3) {
      unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v4 = *((void *)v3 + 45);
    v7[0] = v4;
    if ((v4 & 7) != 0)
    {
      int v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        v7[0] = (uint64_t)v5;
      }
    }
    sub_216D30CFC(&qword_267B941F0, v7, 1uLL);
    if ((v7[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B941F0, &dword_216758000);
    __cxa_guard_release(&qword_267B94208);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94228, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94228))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_216FB22E4((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94210, &dword_216758000);
    __cxa_guard_release(&qword_267B94228);
  }
  if (v1) {
    return &qword_267B94210;
  }
  else {
    return &qword_267B941F0;
  }
}

void sub_216FB229C(_Unwind_Exception *a1)
{
}

void *sub_216FB22E4(uint64_t **a1)
{
  qword_267B94218 = 0;
  unk_267B94220 = 0;
  qword_267B94210 = 0;
  sub_216973388((char **)&qword_267B94210, ((unk_267B941F8 - qword_267B941F0) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B94210, (void *)qword_267B94218, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B94210, (void *)qword_267B94218, (uint64_t *)qword_267B941F0, unk_267B941F8, (unk_267B941F8 - qword_267B941F0) >> 3);
}

void sub_216FB237C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216FB239C()
{
  sub_216779094(v2, "UsdLuxLightListAPI::ComputeModeConsultModelHierarchyCache");
  sub_216779094(__p, "Consult lightList cache");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76E890, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdLuxLightListAPI::ComputeModeIgnoreCache");
  sub_216779094(__p, "Ignore lightList cache");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76E890, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_216FB2470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::ComputeLightList(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = a3 + 8;
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  sub_216FB2568((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&v5, a2, (uint64_t **)a3);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FB2540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_216D16AD8((uint64_t)&a9);
  sub_216981EE8(v9, *(void **)(v9 + 8));
  _Unwind_Resume(a1);
}

_DWORD *sub_216FB2568(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5 = a1;
  if (!a2)
  {
    sub_216D0162C((uint64_t)a1, (int *)&v34);
    BOOL IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v34);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
    a1 = (pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)sub_21697C414(&v34);
    if (IsPrimPath)
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v34, v5);
      *((void *)&v35 + 1) = 0;
      *(void *)&long long v34 = &unk_26C76E848;
      uint64_t v42 = 0;
      pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::GetLightListCacheBehaviorAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *)&v34, (uint64_t)&v31);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
    }
  }
  StaticTfType = pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v8);
  uint64_t HasAPI = pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)v5, SchemaInfo);
  if ((HasAPI & 1) != 0
    || (char v11 = pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *)HasAPI),
        char v13 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v11, v12), pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)v5, v13, v14)))
  {
    sub_216D0162C((uint64_t)v5, (int *)&v34);
    sub_216D3B53C(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v34, &v34);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
    sub_21697C414(&v34);
  }
  long long v34 = 0uLL;
  LOBYTE(v35) = 0;
  uint64_t v15 = sub_216D805CC((uint64_t)&v34, 0);
  *(void *)&long long v32 = *(void *)(v15 + 16);
  long long v31 = *(_OWORD *)v15;
  long long v34 = v31;
  LOBYTE(v35) = v32;
  uint64_t v16 = sub_216D805CC((uint64_t)&v34, 0x100000005);
  *(void *)&long long v29 = *(void *)(v16 + 16);
  long long v28 = *(_OWORD *)v16;
  long long v34 = v28;
  LOBYTE(v35) = v29;
  v17 = (uint64_t *)sub_216D805CC((uint64_t)&v34, 6);
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  unint64_t v20 = v17[2];
  if (!a2)
  {
    *(void *)&long long v34 = *v17;
    *((void *)&v34 + 1) = v19;
    LOBYTE(v35) = v20;
    uint64_t v21 = sub_216D805CC((uint64_t)&v34, 2);
    uint64_t v18 = *(void *)v21;
    uint64_t v19 = *(void *)(v21 + 8);
    unint64_t v20 = v20 & 0xFFFFFFFFFFFFFF00 | *(unsigned __int8 *)(v21 + 16);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v5 + 4);
  *(void *)&long long v31 = v18 & 0xFFFFFFFFFFFFDFFFLL;
  *((void *)&v31 + 1) = v19 | 0x2000;
  *(void *)&long long v32 = v20;
  sub_216D6BF84((uint64_t)v5, (uint64_t *)&v31, (uint64_t)&v34);
  *(void *)&long long v31 = v34;
  sub_216981010((_DWORD *)&v31 + 2, (_DWORD *)&v34 + 2);
  sub_21698105C((_DWORD *)&v31 + 3, (_DWORD *)&v34 + 3);
  long long v32 = v35;
  uint64_t v33 = v36;
  *(void *)&long long v28 = v37;
  sub_216981010((_DWORD *)&v28 + 2, &v38);
  sub_21698105C((_DWORD *)&v28 + 3, &v39);
  long long v29 = v40;
  uint64_t v30 = v41;
  while (v31 != v28 || !sub_216D5D158((uint64_t)&v32, (uint64_t)&v29))
  {
    sub_216D6BE74((uint64_t)&v31, (uint64_t)&v23);
    sub_216FB2568(&v23, a2, a3);
    if ((v27 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
    sub_21697C414(&v25);
    if (v24) {
      sub_216D16E0C(v24);
    }
    sub_216D6BEE8((uint64_t)&v31);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 3);
  sub_21697C414((_DWORD *)&v28 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 3);
  sub_21697C414((_DWORD *)&v31 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
  sub_21697C414(&v38);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 3);
  return sub_21697C414((_DWORD *)&v34 + 2);
}

void sub_216FB2A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v33 = *(void *)(v31 - 96);
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&a31);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::StoreLightList(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this, void *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  v17 = 0;
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  char v3 = a2 + 1;
  uint64_t v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28))
        || (sub_216D1E2AC((uint64_t)this, &v12),
            BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12), pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1), sub_21697C414(&v12), HasPrefix))
      {
        int v6 = v18;
        if ((unint64_t)v18 >= v19)
        {
          int v7 = (_DWORD *)sub_216981B30((uint64_t *)&v17, (_DWORD *)v4 + 7);
        }
        else
        {
          sub_216981010(v18, (_DWORD *)v4 + 7);
          sub_21698105C(v6 + 1, (_DWORD *)v4 + 8);
          int v7 = v6 + 2;
        }
        uint64_t v18 = v7;
      }
      int v8 = (void *)v4[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          int v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v4[2];
          BOOL v10 = *v9 == (void)v4;
          uint64_t v4 = v9;
        }
        while (!v10);
      }
      uint64_t v4 = v9;
    }
    while (v9 != v3);
  }
  pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::CreateLightListRel(this, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v12);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v12, &v17);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
  v20.__type_name = 0;
  pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::CreateLightListCacheBehaviorAttr(this, &v20, 0, (uint64_t)&v12);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens)) {
    sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>();
}

void sub_216FB2D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  a9 = (void **)&a13;
  sub_216981168(&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::InvalidateLightList(pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI *this)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  v3.__type_name = 0;
  pxrInternal__aapl__pxrReserved__::UsdLuxLightListAPI::CreateLightListCacheBehaviorAttr(this, &v3, 0, (uint64_t)v2);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens)) {
    sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>();
}

void sub_216FB2EB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_216D2EDA0((uint64_t)va);
  sub_2168EE084((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216FB2EEC()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FB2FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::~UsdLuxListAPI(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76E8B0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/listAPI.cpp";
    BOOL v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdLuxListAPI pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::Get(const UsdStagePtr "
                            "&, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    BOOL v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76E8B0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FB31D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this)
{
  return 5;
}

uint64_t sub_216FB3200(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94230, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdLuxListAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_216FB33E8(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76E8B0;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76E8B0;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_216FB33D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216FB33E8(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94230, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdLuxListAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94238, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94238))
  {
    __cxa_guard_release(&qword_267B94238);
  }
  return &qword_267B94230;
}

void sub_216FB351C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94248, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *)__cxa_guard_acquire(&qword_267B94248);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::_GetStaticTfType(v2);
      byte_267B94240 = sub_216D16508((char *)&qword_267B94230, v3, v4);
      __cxa_guard_release(&qword_267B94248);
    }
  }
  return byte_267B94240;
}

void sub_216FB359C(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this)
{
  return &qword_267B94230;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::GetLightListCacheBehaviorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 360), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FB3674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::CreateLightListCacheBehaviorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 360), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::GetLightListRel(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 352), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FB37DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::CreateLightListRel(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 352), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FB3898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this)
{
  int v1 = (int)this;
  v7[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94268, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94268))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v3) {
      uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v4 = *((void *)v3 + 45);
    v7[0] = v4;
    if ((v4 & 7) != 0)
    {
      int v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        v7[0] = (uint64_t)v5;
      }
    }
    sub_216D30CFC(&qword_267B94250, v7, 1uLL);
    if ((v7[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94250, &dword_216758000);
    __cxa_guard_release(&qword_267B94268);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94288, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94288))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_216FB3A88((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94270, &dword_216758000);
    __cxa_guard_release(&qword_267B94288);
  }
  if (v1) {
    return &qword_267B94270;
  }
  else {
    return &qword_267B94250;
  }
}

void sub_216FB3A40(_Unwind_Exception *a1)
{
}

void *sub_216FB3A88(uint64_t **a1)
{
  qword_267B94278 = 0;
  unk_267B94280 = 0;
  qword_267B94270 = 0;
  sub_216973388((char **)&qword_267B94270, ((unk_267B94258 - qword_267B94250) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B94270, (void *)qword_267B94278, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B94270, (void *)qword_267B94278, (uint64_t *)qword_267B94250, unk_267B94258, (unk_267B94258 - qword_267B94250) >> 3);
}

void sub_216FB3B20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216FB3B40()
{
  sub_216779094(v2, "UsdLuxListAPI::ComputeModeConsultModelHierarchyCache");
  sub_216779094(__p, "Consult lightList cache");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76E8F8, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdLuxListAPI::ComputeModeIgnoreCache");
  sub_216779094(__p, "Ignore lightList cache");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76E8F8, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_216FB3C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::ComputeLightList(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = a3 + 8;
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  sub_216FB3D0C((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)&v5, a2, (uint64_t **)a3);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FB3CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_216D16AD8((uint64_t)&a9);
  sub_216981EE8(v9, *(void **)(v9 + 8));
  _Unwind_Resume(a1);
}

_DWORD *sub_216FB3D0C(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5 = a1;
  if (!a2)
  {
    sub_216D0162C((uint64_t)a1, (int *)&v34);
    BOOL IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v34);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
    a1 = (pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)sub_21697C414(&v34);
    if (IsPrimPath)
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v34, v5);
      *((void *)&v35 + 1) = 0;
      *(void *)&long long v34 = &unk_26C76E8B0;
      uint64_t v42 = 0;
      pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::GetLightListCacheBehaviorAttr((pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *)&v34, (uint64_t)&v31);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
    }
  }
  StaticTfType = pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v8);
  uint64_t HasAPI = pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)v5, SchemaInfo);
  if ((HasAPI & 1) != 0
    || (char v11 = pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *)HasAPI),
        char v13 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v11, v12), pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)v5, v13, v14)))
  {
    sub_216D0162C((uint64_t)v5, (int *)&v34);
    sub_216D3B53C(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v34, &v34);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
    sub_21697C414(&v34);
  }
  long long v34 = 0uLL;
  LOBYTE(v35) = 0;
  uint64_t v15 = sub_216D805CC((uint64_t)&v34, 0);
  *(void *)&long long v32 = *(void *)(v15 + 16);
  long long v31 = *(_OWORD *)v15;
  long long v34 = v31;
  LOBYTE(v35) = v32;
  uint64_t v16 = sub_216D805CC((uint64_t)&v34, 0x100000005);
  *(void *)&long long v29 = *(void *)(v16 + 16);
  long long v28 = *(_OWORD *)v16;
  long long v34 = v28;
  LOBYTE(v35) = v29;
  v17 = (uint64_t *)sub_216D805CC((uint64_t)&v34, 6);
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  unint64_t v20 = v17[2];
  if (!a2)
  {
    *(void *)&long long v34 = *v17;
    *((void *)&v34 + 1) = v19;
    LOBYTE(v35) = v20;
    uint64_t v21 = sub_216D805CC((uint64_t)&v34, 2);
    uint64_t v18 = *(void *)v21;
    uint64_t v19 = *(void *)(v21 + 8);
    unint64_t v20 = v20 & 0xFFFFFFFFFFFFFF00 | *(unsigned __int8 *)(v21 + 16);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v5 + 4);
  *(void *)&long long v31 = v18 & 0xFFFFFFFFFFFFDFFFLL;
  *((void *)&v31 + 1) = v19 | 0x2000;
  *(void *)&long long v32 = v20;
  sub_216D6BF84((uint64_t)v5, (uint64_t *)&v31, (uint64_t)&v34);
  *(void *)&long long v31 = v34;
  sub_216981010((_DWORD *)&v31 + 2, (_DWORD *)&v34 + 2);
  sub_21698105C((_DWORD *)&v31 + 3, (_DWORD *)&v34 + 3);
  long long v32 = v35;
  uint64_t v33 = v36;
  *(void *)&long long v28 = v37;
  sub_216981010((_DWORD *)&v28 + 2, &v38);
  sub_21698105C((_DWORD *)&v28 + 3, &v39);
  long long v29 = v40;
  uint64_t v30 = v41;
  while (v31 != v28 || !sub_216D5D158((uint64_t)&v32, (uint64_t)&v29))
  {
    sub_216D6BE74((uint64_t)&v31, (uint64_t)&v23);
    sub_216FB3D0C(&v23, a2, a3);
    if ((v27 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
    sub_21697C414(&v25);
    if (v24) {
      sub_216D16E0C(v24);
    }
    sub_216D6BEE8((uint64_t)&v31);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 3);
  sub_21697C414((_DWORD *)&v28 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 3);
  sub_21697C414((_DWORD *)&v31 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
  sub_21697C414(&v38);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 3);
  return sub_21697C414((_DWORD *)&v34 + 2);
}

void sub_216FB420C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v33 = *(void *)(v31 - 96);
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&a31);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::StoreLightList(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this, void *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  v17 = 0;
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  char v3 = a2 + 1;
  uint64_t v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28))
        || (sub_216D1E2AC((uint64_t)this, &v12),
            BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12), pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1), sub_21697C414(&v12), HasPrefix))
      {
        int v6 = v18;
        if ((unint64_t)v18 >= v19)
        {
          int v7 = (_DWORD *)sub_216981B30((uint64_t *)&v17, (_DWORD *)v4 + 7);
        }
        else
        {
          sub_216981010(v18, (_DWORD *)v4 + 7);
          sub_21698105C(v6 + 1, (_DWORD *)v4 + 8);
          int v7 = v6 + 2;
        }
        uint64_t v18 = v7;
      }
      int v8 = (void *)v4[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          int v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v4[2];
          BOOL v10 = *v9 == (void)v4;
          uint64_t v4 = v9;
        }
        while (!v10);
      }
      uint64_t v4 = v9;
    }
    while (v9 != v3);
  }
  pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::CreateLightListRel(this, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v12);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v12, &v17);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
  v20.__type_name = 0;
  pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::CreateLightListCacheBehaviorAttr(this, &v20, 0, (uint64_t)&v12);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens)) {
    sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>();
}

void sub_216FB4508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  a9 = (void **)&a13;
  sub_216981168(&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::InvalidateLightList(pxrInternal__aapl__pxrReserved__::UsdLuxListAPI *this)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  v3.__type_name = 0;
  pxrInternal__aapl__pxrReserved__::UsdLuxListAPI::CreateLightListCacheBehaviorAttr(this, &v3, 0, (uint64_t)v2);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens)) {
    sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>();
}

void sub_216FB465C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_216D2EDA0((uint64_t)va);
  sub_2168EE084((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216FB4690()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FB4770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::~UsdLuxMeshLightAPI(pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76E918;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/meshLightAPI.cpp";
    BOOL v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdLuxMeshLightAPI pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::Get(const Us"
                            "dStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    BOOL v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76E918;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FB497C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI *this)
{
  return 5;
}

uint64_t sub_216FB49A4(pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94290, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdLuxMeshLightAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_216FB4B8C(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76E918;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76E918;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_216FB4B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216FB4B8C(pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94290, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdLuxMeshLightAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94298, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94298))
  {
    __cxa_guard_release(&qword_267B94298);
  }
  return &qword_267B94290;
}

void sub_216FB4CC0(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B942A8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI *)__cxa_guard_acquire(&qword_267B942A8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::_GetStaticTfType(v2);
      byte_267B942A0 = sub_216D16508((char *)&qword_267B94290, v3, v4);
      __cxa_guard_release(&qword_267B942A8);
    }
  }
  return byte_267B942A0;
}

void sub_216FB4D40(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI *this)
{
  return &qword_267B94290;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxMeshLightAPI *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B942C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B942C8))
  {
    qword_267B942B0 = 0;
    *(void *)algn_267B942B8 = 0;
    qword_267B942C0 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B942B0, &dword_216758000);
    __cxa_guard_release(&qword_267B942C8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B942E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B942E8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_216FB4E80((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B942D0, &dword_216758000);
    __cxa_guard_release(&qword_267B942E8);
  }
  if (v1) {
    return &qword_267B942D0;
  }
  else {
    return &qword_267B942B0;
  }
}

void sub_216FB4E68(_Unwind_Exception *a1)
{
}

void *sub_216FB4E80(uint64_t **a1)
{
  qword_267B942D8 = 0;
  unk_267B942E0 = 0;
  qword_267B942D0 = 0;
  sub_216973388((char **)&qword_267B942D0, ((*(void *)algn_267B942B8 - qword_267B942B0) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B942D0, (void *)qword_267B942D8, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B942D0, (void *)qword_267B942D8, (uint64_t *)qword_267B942B0, *(uint64_t **)algn_267B942B8, (*(void *)algn_267B942B8 - qword_267B942B0) >> 3);
}

void sub_216FB4F18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216FB4F38()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FB5018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::~UsdLuxNonboundableLightBase(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E970;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/nonboundableLightBase.cpp";
    BOOL v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdLuxNonboundableLightBase pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLight"
                            "Base::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    BOOL v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E970;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FB521C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this)
{
  return 2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B942F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B942F8))
  {
    __cxa_guard_release(&qword_267B942F8);
  }
  return &qword_267B942F0;
}

void sub_216FB52AC(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94308, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *)__cxa_guard_acquire(&qword_267B94308);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::_GetStaticTfType(v2);
      byte_267B94300 = sub_216D16508((char *)&qword_267B942F0, v3, v4);
      __cxa_guard_release(&qword_267B94308);
    }
  }
  return byte_267B94300;
}

void sub_216FB532C(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this)
{
  return &qword_267B942F0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94328, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94328))
  {
    qword_267B94310 = 0;
    *(void *)algn_267B94318 = 0;
    qword_267B94320 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94310, &dword_216758000);
    __cxa_guard_release(&qword_267B94328);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94348, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94348))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)1);
    qword_267B94330 = 0;
    *(void *)algn_267B94338 = 0;
    qword_267B94340 = 0;
    sub_21698FA28(&qword_267B94330, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94330, &dword_216758000);
    __cxa_guard_release(&qword_267B94348);
  }
  if (v1) {
    return &qword_267B94330;
  }
  else {
    return &qword_267B94310;
  }
}

void sub_216FB5474(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetIntensityAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetIntensityAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_216FB54D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v3, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v3);
  *((void *)a2 + 3) = 0;
  *(void *)a2 = &unk_26C76E5F8;
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
}

void sub_216FB5584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::CreateIntensityAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateIntensityAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_216FB55F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetExposureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetExposureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_216FB564C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::CreateExposureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateExposureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_216FB56BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetDiffuseAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetDiffuseAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_216FB5714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::CreateDiffuseAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateDiffuseAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_216FB5784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetSpecularAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetSpecularAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_216FB57DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::CreateSpecularAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateSpecularAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_216FB584C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetNormalizeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetNormalizeAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_216FB58A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::CreateNormalizeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateNormalizeAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_216FB5914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetColorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetColorAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_216FB596C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::CreateColorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateColorAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_216FB59DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetEnableColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetEnableColorTemperatureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_216FB5A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::CreateEnableColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateEnableColorTemperatureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_216FB5AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetColorTemperatureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_216FB5AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::CreateColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateColorTemperatureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_216FB5B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetFiltersRel(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetFiltersRel((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_216FB5BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::CreateFiltersRel(pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateFiltersRel((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_216FB5C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_216FB5C30()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F06AAC((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FB5D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FB5D60()
{
  sub_216FB64C4();
  sub_216779094(__p, "PluginLight");
  sub_216FB65F0((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216FB5DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::~UsdLuxPluginLight(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E9C8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/pluginLight.cpp";
    BOOL v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdLuxPluginLight pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::Get(const UsdS"
                            "tagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    BOOL v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E9C8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FB5F7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94358, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94358))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B94350, "PluginLight");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B94350, &dword_216758000);
    __cxa_guard_release(&qword_267B94358);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B94350, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E9C8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/pluginLight.cpp";
    BOOL v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdLuxPluginLight pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::Define(const U"
                            "sdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    BOOL v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E9C8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FB6188(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94368, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94368))
  {
    __cxa_guard_release(&qword_267B94368);
  }
  return &qword_267B94360;
}

void sub_216FB6230(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94378, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight *)__cxa_guard_acquire(&qword_267B94378);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::_GetStaticTfType(v2);
      byte_267B94370 = sub_216D16508((char *)&qword_267B94360, v3, v4);
      __cxa_guard_release(&qword_267B94378);
    }
  }
  return byte_267B94370;
}

void sub_216FB62B0(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight *this)
{
  return &qword_267B94360;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94398, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94398))
  {
    qword_267B94380 = 0;
    *(void *)algn_267B94388 = 0;
    qword_267B94390 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94380, &dword_216758000);
    __cxa_guard_release(&qword_267B94398);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B943B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B943B8))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)1);
    qword_267B943A0 = 0;
    *(void *)algn_267B943A8 = 0;
    qword_267B943B0 = 0;
    sub_21698FA28(&qword_267B943A0, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B943A0, &dword_216758000);
    __cxa_guard_release(&qword_267B943B8);
  }
  if (v1) {
    return &qword_267B943A0;
  }
  else {
    return &qword_267B94380;
  }
}

void sub_216FB63F8(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight::GetNodeDefAPI(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLight *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v3, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v3);
  *((void *)a2 + 3) = 0;
  *(void *)a2 = &unk_26C76DD98;
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
}

void sub_216FB64B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_216FB64C4()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F06AAC((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FB65A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FB65F0(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216FB6684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216FB66A8()
{
  sub_216FB6E0C();
  sub_216779094(__p, "PluginLightFilter");
  sub_216FB6F38((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216FB66F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::~UsdLuxPluginLightFilter(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::~UsdLuxLightFilter(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EA20;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/pluginLightFilter.cpp";
    BOOL v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdLuxPluginLightFilter pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::Ge"
                            "t(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    BOOL v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EA20;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FB68C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B943C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B943C8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B943C0, "PluginLightFilter");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B943C0, &dword_216758000);
    __cxa_guard_release(&qword_267B943C8);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B943C0, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EA20;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/pluginLightFilter.cpp";
    BOOL v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdLuxPluginLightFilter pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::De"
                            "fine(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    BOOL v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EA20;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FB6AD0(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B943D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B943D8))
  {
    __cxa_guard_release(&qword_267B943D8);
  }
  return &qword_267B943D0;
}

void sub_216FB6B78(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B943E8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter *)__cxa_guard_acquire(&qword_267B943E8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::_GetStaticTfType(v2);
      byte_267B943E0 = sub_216D16508((char *)&qword_267B943D0, v3, v4);
      __cxa_guard_release(&qword_267B943E8);
    }
  }
  return byte_267B943E0;
}

void sub_216FB6BF8(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter *this)
{
  return &qword_267B943D0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94408, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94408))
  {
    qword_267B943F0 = 0;
    *(void *)algn_267B943F8 = 0;
    qword_267B94400 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B943F0, &dword_216758000);
    __cxa_guard_release(&qword_267B94408);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94428, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94428))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *)1);
    qword_267B94410 = 0;
    *(void *)algn_267B94418 = 0;
    qword_267B94420 = 0;
    sub_21698FA28(&qword_267B94410, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94410, &dword_216758000);
    __cxa_guard_release(&qword_267B94428);
  }
  if (v1) {
    return &qword_267B94410;
  }
  else {
    return &qword_267B943F0;
  }
}

void sub_216FB6D40(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter::GetNodeDefAPI(pxrInternal__aapl__pxrReserved__::UsdLuxPluginLightFilter *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v3, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v3);
  *((void *)a2 + 3) = 0;
  *(void *)a2 = &unk_26C76DD98;
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
}

void sub_216FB6DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_216FB6E0C()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216FB6FEC((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FB6EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FB6F38(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216FB6FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216FB6FEC(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  unint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216FB705C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216FB7080()
{
  sub_216FB7C28();
  sub_216779094(__p, "PortalLight");
  sub_216FB7D54((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216FB70D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::~UsdLuxPortalLight(pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EA78;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/portalLight.cpp";
    BOOL v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdLuxPortalLight pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::Get(const UsdS"
                            "tagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    BOOL v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EA78;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FB729C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94438, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94438))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B94430, "PortalLight");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B94430, &dword_216758000);
    __cxa_guard_release(&qword_267B94438);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B94430, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EA78;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/portalLight.cpp";
    BOOL v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdLuxPortalLight pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::Define(const U"
                            "sdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    BOOL v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EA78;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FB74A8(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94448, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94448))
  {
    __cxa_guard_release(&qword_267B94448);
  }
  return &qword_267B94440;
}

void sub_216FB7550(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94458, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *)__cxa_guard_acquire(&qword_267B94458);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::_GetStaticTfType(v2);
      byte_267B94450 = sub_216D16508((char *)&qword_267B94440, v3, v4);
      __cxa_guard_release(&qword_267B94458);
    }
  }
  return byte_267B94450;
}

void sub_216FB75D0(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *this)
{
  return &qword_267B94440;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::GetWidthAttr(pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 312), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FB76A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::CreateWidthAttr(pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 312), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::GetHeightAttr(pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 152), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FB7810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::CreateHeightAttr(pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 152), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *this)
{
  int v1 = (int)this;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94478, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94478))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v3) {
      unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v4 = *((void *)v3 + 39);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0)
    {
      char v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v12 = (uint64_t)v5;
      }
    }
    int v6 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v6) {
      int v6 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    int v7 = (atomic_uint *)*((void *)v6 + 19);
    char v13 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        char v13 = v8;
      }
    }
    sub_216D30CFC(&qword_267B94460, &v12, 2uLL);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94460, &dword_216758000);
    __cxa_guard_release(&qword_267B94478);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94498, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94498))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)1);
    sub_216FB7B30((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94480, &dword_216758000);
    __cxa_guard_release(&qword_267B94498);
  }
  if (v1) {
    return &qword_267B94480;
  }
  else {
    return &qword_267B94460;
  }
}

void sub_216FB7AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B94478);
  _Unwind_Resume(a1);
}

void *sub_216FB7B30(uint64_t **a1)
{
  qword_267B94488 = 0;
  unk_267B94490 = 0;
  qword_267B94480 = 0;
  sub_216973388((char **)&qword_267B94480, ((unk_267B94468 - qword_267B94460) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B94480, (void *)qword_267B94488, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B94480, (void *)qword_267B94488, (uint64_t *)qword_267B94460, unk_267B94468, (unk_267B94468 - qword_267B94460) >> 3);
}

void sub_216FB7BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216FB7BE8(uint64_t a1, const std::type_info *a2, char *a3)
{
  var8.__vftable = (std::type_info_vtbl *)sub_216FB7E0C;
  pxrInternal__aapl__pxrReserved__::UsdGeomRegisterComputeExtentFunction(v3, &var8, v4);
}

uint64_t *sub_216FB7C28()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216FA563C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FB7D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FB7D54(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216FB7DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FB7E0C(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1)
{
  int v1 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v6, a1);
  uint64_t v6 = &unk_26C76EA78;
  if (v7 && (*(unsigned char *)(v7 + 57) & 8) == 0 && (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible(v1) & 1) != 0
    || (v3[0] = "usdLux/portalLight.cpp",
        v3[1] = "_ComputeExtent",
        v3[2] = 207,
        v3[3] = "BOOL pxrInternal__aapl__pxrReserved__::_ComputeExtent(const UsdGeomBoundable &, const UsdTimeCode &, con"
                "st GfMatrix4d *, VtVec3fArray *)",
        char v4 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v3, "light", 0) & 1) != 0))
  {
    int v5 = 0;
    pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight::GetWidthAttr((pxrInternal__aapl__pxrReserved__::UsdLuxPortalLight *)&v6, (uint64_t)v3);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>();
  }
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)&v6);
  return 0;
}

void sub_216FB80E8(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_216FB813C()
{
  sub_216FB8EC4();
  sub_216779094(__p, "RectLight");
  sub_216FB8FF0((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216FB818C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::~UsdLuxRectLight(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EAD0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/rectLight.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdLuxRectLight pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::Get(const UsdStage"
                            "Ptr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EAD0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FB8358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B944A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B944A8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B944A0, "RectLight");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B944A0, &dword_216758000);
    __cxa_guard_release(&qword_267B944A8);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B944A0, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EAD0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/rectLight.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdLuxRectLight pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::Define(const UsdSt"
                            "agePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EAD0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FB8564(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B944B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B944B8))
  {
    __cxa_guard_release(&qword_267B944B8);
  }
  return &qword_267B944B0;
}

void sub_216FB860C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B944C8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *)__cxa_guard_acquire(&qword_267B944C8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::_GetStaticTfType(v2);
      byte_267B944C0 = sub_216D16508((char *)&qword_267B944B0, v3, v4);
      __cxa_guard_release(&qword_267B944C8);
    }
  }
  return byte_267B944C0;
}

void sub_216FB868C(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this)
{
  return &qword_267B944B0;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::GetWidthAttr(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 312), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FB8764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::CreateWidthAttr(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 312), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::GetHeightAttr(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 152), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FB88CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::CreateHeightAttr(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 152), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::GetTextureFileAttr(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 296), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FB8A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::CreateTextureFileAttr(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 296), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 96), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *this)
{
  int v1 = (int)this;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B944E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B944E8))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v3) {
      unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v4 = *((void *)v3 + 39);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5) {
      int v5 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v6 = *((void *)v5 + 19);
    uint64_t v13 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v13 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v7) {
      int v7 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v8 = *((void *)v7 + 37);
    uint64_t v14 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B944D0, &v12, 3uLL);
    for (uint64_t i = 16; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B944D0, &dword_216758000);
    __cxa_guard_release(&qword_267B944E8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94508, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94508))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)1);
    sub_216FB8DCC((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B944F0, &dword_216758000);
    __cxa_guard_release(&qword_267B94508);
  }
  if (v1) {
    return &qword_267B944F0;
  }
  else {
    return &qword_267B944D0;
  }
}

void sub_216FB8D48(_Unwind_Exception *a1)
{
}

void *sub_216FB8DCC(uint64_t **a1)
{
  qword_267B944F8 = 0;
  unk_267B94500 = 0;
  qword_267B944F0 = 0;
  sub_216973388((char **)&qword_267B944F0, ((unk_267B944D8 - qword_267B944D0) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B944F0, (void *)qword_267B944F8, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B944F0, (void *)qword_267B944F8, (uint64_t *)qword_267B944D0, unk_267B944D8, (unk_267B944D8 - qword_267B944D0) >> 3);
}

void sub_216FB8E64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216FB8E84(uint64_t a1, const std::type_info *a2, char *a3)
{
  var8.__vftable = (std::type_info_vtbl *)sub_216FB90A8;
  pxrInternal__aapl__pxrReserved__::UsdGeomRegisterComputeExtentFunction(v3, &var8, v4);
}

uint64_t *sub_216FB8EC4()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216FA563C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FB8FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FB8FF0(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216FB9084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FB90A8(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1)
{
  int v1 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v6, a1);
  uint64_t v6 = &unk_26C76EAD0;
  if (v7 && (*(unsigned char *)(v7 + 57) & 8) == 0 && (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible(v1) & 1) != 0
    || (v3[0] = "usdLux/rectLight.cpp",
        v3[1] = "_ComputeExtent",
        v3[2] = 223,
        v3[3] = "BOOL pxrInternal__aapl__pxrReserved__::_ComputeExtent(const UsdGeomBoundable &, const UsdTimeCode &, con"
                "st GfMatrix4d *, VtVec3fArray *)",
        char v4 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v3, "light", 0) & 1) != 0))
  {
    int v5 = 0;
    pxrInternal__aapl__pxrReserved__::UsdLuxRectLight::GetWidthAttr((pxrInternal__aapl__pxrReserved__::UsdLuxRectLight *)&v6, (uint64_t)v3);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>();
  }
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)&v6);
  return 0;
}

void sub_216FB937C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)(v1 - 88));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::~UsdLuxShadowAPI(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76EB28;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/shadowAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdLuxShadowAPI pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::Get(const UsdStage"
                            "Ptr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76EB28;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FB958C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this)
{
  return 5;
}

uint64_t sub_216FB95B4(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94510, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdLuxShadowAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_216FB979C(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76EB28;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76EB28;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_216FB9788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216FB979C(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94510, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdLuxShadowAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94518, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94518))
  {
    __cxa_guard_release(&qword_267B94518);
  }
  return &qword_267B94510;
}

void sub_216FB98D0(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94528, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *)__cxa_guard_acquire(&qword_267B94528);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::_GetStaticTfType(v2);
      byte_267B94520 = sub_216D16508((char *)&qword_267B94510, v3, v4);
      __cxa_guard_release(&qword_267B94528);
    }
  }
  return byte_267B94520;
}

void sub_216FB9950(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this)
{
  return &qword_267B94510;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::GetShadowEnableAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 208), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FB9A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::CreateShadowEnableAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 208), v9, 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::GetShadowColorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 192), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FB9B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::CreateShadowColorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 192), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 280), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::GetShadowDistanceAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 200), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FB9CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::CreateShadowDistanceAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 200), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::GetShadowFalloffAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 216), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FB9E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::CreateShadowFalloffAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 216), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::GetShadowFalloffGammaAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 224), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FB9FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::CreateShadowFalloffGammaAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 224), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this)
{
  int v1 = (int)this;
  uint64_t v21 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94548, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94548))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v3) {
      unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v4 = *((void *)v3 + 26);
    uint64_t v16 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v16 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5) {
      int v5 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v6 = *((void *)v5 + 24);
    uint64_t v17 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v17 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v7) {
      int v7 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v8 = *((void *)v7 + 25);
    uint64_t v18 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v18 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v9) {
      uint64_t v9 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v10 = *((void *)v9 + 27);
    uint64_t v19 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v19 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v11 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v11) {
      char v11 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v12 = *((void *)v11 + 28);
    uint64_t v20 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v20 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B94530, &v16, 5uLL);
    for (uint64_t i = 32; i != -8; i -= 8)
    {
      uint64_t v14 = *(uint64_t *)((char *)&v16 + i);
      if ((v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94530, &dword_216758000);
    __cxa_guard_release(&qword_267B94548);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94568, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94568))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_216FBA3F8((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94550, &dword_216758000);
    __cxa_guard_release(&qword_267B94568);
  }
  if (v1) {
    return &qword_267B94550;
  }
  else {
    return &qword_267B94530;
  }
}

void sub_216FBA374(_Unwind_Exception *a1)
{
}

void *sub_216FBA3F8(uint64_t **a1)
{
  qword_267B94558 = 0;
  unk_267B94560 = 0;
  qword_267B94550 = 0;
  sub_216973388((char **)&qword_267B94550, ((unk_267B94538 - qword_267B94530) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B94550, (void *)qword_267B94558, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B94550, (void *)qword_267B94558, (uint64_t *)qword_267B94530, unk_267B94538, (unk_267B94538 - qword_267B94530) >> 3);
}

void sub_216FBA490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::UsdLuxShadowAPI(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this, const pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a2)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4);
  *((void *)this + 3) = 0;
  *(void *)this = &unk_26C76EB28;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  return this;
}

{
  uint64_t v4;
  atomic_ullong *v5;
  int v6;
  int v7;
  uint64_t v8;

  sub_216D16CFC((uint64_t)&v4, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4);
  *((void *)this + 3) = 0;
  *(void *)this = &unk_26C76EB28;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  return this;
}

void sub_216FBA558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216FBA614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::ConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v3, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v3);
  *((void *)a2 + 3) = 0;
  *(void *)a2 = off_26C76D8C8;
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
}

void sub_216FBA6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::CreateOutput(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
}

void sub_216FBA7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::GetOutput(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FBA898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::GetOutputs(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FBA984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::CreateInput(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
}

void sub_216FBAA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::GetInput(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FBAB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI::GetInputs(pxrInternal__aapl__pxrReserved__::UsdLuxShadowAPI *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FBAC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t *sub_216FBAC74()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FBAD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::~UsdLuxShapingAPI(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76EB80;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/shapingAPI.cpp";
    int v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdLuxShapingAPI pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::Get(const UsdSta"
                            "gePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    int v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76EB80;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FBAF60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this)
{
  return 5;
}

uint64_t sub_216FBAF88(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94570, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdLuxShapingAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_216FBB170(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76EB80;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76EB80;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_216FBB15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216FBB170(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94570, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdLuxShapingAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94578, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94578))
  {
    __cxa_guard_release(&qword_267B94578);
  }
  return &qword_267B94570;
}

void sub_216FBB2A4(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94588, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *)__cxa_guard_acquire(&qword_267B94588);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::_GetStaticTfType(v2);
      byte_267B94580 = sub_216D16508((char *)&qword_267B94570, v3, v4);
      __cxa_guard_release(&qword_267B94588);
    }
  }
  return byte_267B94580;
}

void sub_216FBB324(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this)
{
  return &qword_267B94570;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetShapingFocusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 248), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FBB3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::CreateShapingFocusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 248), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetShapingFocusTintAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 256), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FBB564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::CreateShapingFocusTintAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 256), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 280), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetShapingConeAngleAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 232), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FBB6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::CreateShapingConeAngleAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 232), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetShapingConeSoftnessAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 240), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FBB834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::CreateShapingConeSoftnessAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 240), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetShapingIesFileAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 272), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FBB99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::CreateShapingIesFileAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 272), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 96), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetShapingIesAngleScaleAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 264), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FBBB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::CreateShapingIesAngleScaleAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 264), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetShapingIesNormalizeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 280), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FBBC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::CreateShapingIesNormalizeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 280), v9, 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this)
{
  int v1 = (int)this;
  uint64_t v27 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B945A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B945A8))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v3) {
      uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v4 = *((void *)v3 + 31);
    uint64_t v20 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v20 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5) {
      int v5 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v6 = *((void *)v5 + 32);
    uint64_t v21 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v21 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v7) {
      int v7 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v8 = *((void *)v7 + 29);
    uint64_t v22 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v22 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v9) {
      uint64_t v9 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v10 = *((void *)v9 + 30);
    uint64_t v23 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v11 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v11) {
      char v11 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v12 = *((void *)v11 + 34);
    uint64_t v24 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v13 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v13) {
      char v13 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v14 = *((void *)v13 + 33);
    uint64_t v25 = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v15) {
      uint64_t v15 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v16 = *((void *)v15 + 35);
    uint64_t v26 = v16;
    if ((v16 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v26 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B94590, &v20, 7uLL);
    for (uint64_t i = 48; i != -8; i -= 8)
    {
      uint64_t v18 = *(uint64_t *)((char *)&v20 + i);
      if ((v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94590, &dword_216758000);
    __cxa_guard_release(&qword_267B945A8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B945C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B945C8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_216FBC134((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B945B0, &dword_216758000);
    __cxa_guard_release(&qword_267B945C8);
  }
  if (v1) {
    return &qword_267B945B0;
  }
  else {
    return &qword_267B94590;
  }
}

void sub_216FBC0B0(_Unwind_Exception *a1)
{
}

void *sub_216FBC134(uint64_t **a1)
{
  qword_267B945B8 = 0;
  unk_267B945C0 = 0;
  qword_267B945B0 = 0;
  sub_216973388((char **)&qword_267B945B0, ((unk_267B94598 - qword_267B94590) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B945B0, (void *)qword_267B945B8, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B945B0, (void *)qword_267B945B8, (uint64_t *)qword_267B94590, unk_267B94598, (unk_267B94598 - qword_267B94590) >> 3);
}

void sub_216FBC1CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::UsdLuxShapingAPI(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this, const pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a2)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4);
  *((void *)this + 3) = 0;
  *(void *)this = &unk_26C76EB80;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  return this;
}

{
  uint64_t v4;
  atomic_ullong *v5;
  int v6;
  int v7;
  uint64_t v8;

  sub_216D16CFC((uint64_t)&v4, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4);
  *((void *)this + 3) = 0;
  *(void *)this = &unk_26C76EB80;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  return this;
}

void sub_216FBC294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216FBC350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::ConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v3, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v3);
  *((void *)a2 + 3) = 0;
  *(void *)a2 = off_26C76D8C8;
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
}

void sub_216FBC404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::CreateOutput(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
}

void sub_216FBC4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetOutput(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FBC5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetOutputs(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FBC6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::CreateInput(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  v12[3] = 0;
  v12[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
}

void sub_216FBC7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetInput(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FBC8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetInputs(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FBC98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t *sub_216FBC9B0()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FBCA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FBCAE0()
{
  sub_216FBD688();
  sub_216779094(__p, "SphereLight");
  sub_216FBD7B4((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216FBCB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::~UsdLuxSphereLight(pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EBD8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/sphereLight.cpp";
    int v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdLuxSphereLight pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::Get(const UsdS"
                            "tagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    int v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EBD8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FBCCFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B945D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B945D8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B945D0, "SphereLight");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B945D0, &dword_216758000);
    __cxa_guard_release(&qword_267B945D8);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B945D0, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EBD8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/sphereLight.cpp";
    int v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdLuxSphereLight pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::Define(const U"
                            "sdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    int v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EBD8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FBCF08(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B945E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B945E8))
  {
    __cxa_guard_release(&qword_267B945E8);
  }
  return &qword_267B945E0;
}

void sub_216FBCFB0(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B945F8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *)__cxa_guard_acquire(&qword_267B945F8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::_GetStaticTfType(v2);
      byte_267B945F0 = sub_216D16508((char *)&qword_267B945E0, v3, v4);
      __cxa_guard_release(&qword_267B945F8);
    }
  }
  return byte_267B945F0;
}

void sub_216FBD030(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *this)
{
  return &qword_267B945E0;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::GetRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 184), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FBD108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::CreateRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 184), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::GetTreatAsPointAttr(pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 464), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FBD270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::CreateTreatAsPointAttr(pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 464), v9, 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *this)
{
  int v1 = (int)this;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94618, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94618))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v3) {
      uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v4 = *((void *)v3 + 23);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0)
    {
      uint64_t v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v12 = (uint64_t)v5;
      }
    }
    int v6 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v6) {
      int v6 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    int v7 = (atomic_uint *)*((void *)v6 + 58);
    char v13 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        char v13 = v8;
      }
    }
    sub_216D30CFC(&qword_267B94600, &v12, 2uLL);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94600, &dword_216758000);
    __cxa_guard_release(&qword_267B94618);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94638, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94638))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)1);
    sub_216FBD590((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94620, &dword_216758000);
    __cxa_guard_release(&qword_267B94638);
  }
  if (v1) {
    return &qword_267B94620;
  }
  else {
    return &qword_267B94600;
  }
}

void sub_216FBD518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B94618);
  _Unwind_Resume(a1);
}

void *sub_216FBD590(uint64_t **a1)
{
  qword_267B94628 = 0;
  unk_267B94630 = 0;
  qword_267B94620 = 0;
  sub_216973388((char **)&qword_267B94620, ((unk_267B94608 - qword_267B94600) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B94620, (void *)qword_267B94628, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B94620, (void *)qword_267B94628, (uint64_t *)qword_267B94600, unk_267B94608, (unk_267B94608 - qword_267B94600) >> 3);
}

void sub_216FBD628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216FBD648(uint64_t a1, const std::type_info *a2, char *a3)
{
  var8.__vftable = (std::type_info_vtbl *)sub_216FBD86C;
  pxrInternal__aapl__pxrReserved__::UsdGeomRegisterComputeExtentFunction(v3, &var8, v4);
}

uint64_t *sub_216FBD688()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216FA563C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FBD768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FBD7B4(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216FBD848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FBD86C(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1)
{
  int v1 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v6, a1);
  uint64_t v6 = &unk_26C76EBD8;
  if (v7 && (*(unsigned char *)(v7 + 57) & 8) == 0 && (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible(v1) & 1) != 0
    || (v3[0] = "usdLux/sphereLight.cpp",
        v3[1] = "_ComputeExtent",
        v3[2] = 203,
        v3[3] = "BOOL pxrInternal__aapl__pxrReserved__::_ComputeExtent(const UsdGeomBoundable &, const UsdTimeCode &, con"
                "st GfMatrix4d *, VtVec3fArray *)",
        char v4 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v3, "light", 0) & 1) != 0))
  {
    int v5 = 0;
    pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight::GetRadiusAttr((pxrInternal__aapl__pxrReserved__::UsdLuxSphereLight *)&v6, (uint64_t)v3);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>();
  }
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)&v6);
  return 0;
}

void sub_216FBDAD4(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)(v1 - 88));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *pxrInternal__aapl__pxrReserved__::UsdLuxTokensType::UsdLuxTokensType(pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *this)
{
  uint64_t v175 = *MEMORY[0x263EF8340];
  v91 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "angular", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v91, "automatic", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "collection:filterLink:includeRoot", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "collection:lightLink:includeRoot", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "collection:shadowLink:includeRoot", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "consumeAndContinue", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "consumeAndHalt", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "cubeMapVerticalCross", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "filterLink", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "geometry", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "guideRadius", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "ignore", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "independent", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "inputs:angle", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "inputs:color", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "inputs:colorTemperature", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "inputs:diffuse", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "inputs:enableColorTemperature", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "inputs:exposure", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "inputs:height", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "inputs:intensity", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 168, "inputs:length", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 176, "inputs:normalize", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 184, "inputs:radius", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 192, "inputs:shadow:color", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 200, "inputs:shadow:distance", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 208, "inputs:shadow:enable", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 216, "inputs:shadow:falloff", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 224, "inputs:shadow:falloffGamma", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 232, "inputs:shaping:cone:angle", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 240, "inputs:shaping:cone:softness", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 248, "inputs:shaping:focus", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 256, "inputs:shaping:focusTint", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 264, "inputs:shaping:ies:angleScale", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 272, "inputs:shaping:ies:file", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 280, "inputs:shaping:ies:normalize", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 288, "inputs:specular", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 296, "inputs:texture:file", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 304, "inputs:texture:format", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 312, "inputs:width", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 320, "latlong", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 328, "light:filters", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 336, "lightFilter:shaderId", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 344, "lightLink", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 352, "lightList", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 360, "lightList:cacheBehavior", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 368, "light:materialSyncMode", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 376, "light:shaderId", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 384, "materialGlowTintsLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 392, "MeshLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 400, "mirroredBall", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 408, "noMaterialResponse", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 416, "orientToStageUpAxis", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 424, "poleAxis", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 432, "portals", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 440, "scene", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 448, "shadowLink", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 456, "treatAsLine", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 464, "treatAsPoint", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 472, "VolumeLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 480, "Y", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 488, "Z", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 496, "BoundableLightBase", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 504, "CylinderLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 512, "DiskLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 520, "DistantLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 528, "DomeLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 536, "DomeLight_1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 544, "GeometryLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 552, "LightAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 560, "LightFilter", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 568, "LightListAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 576, "ListAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 584, "MeshLightAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 592, "NonboundableLightBase", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 600, "PluginLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 608, "PluginLightFilter", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 616, "PortalLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 624, "RectLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 632, "ShadowAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 640, "ShapingAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 648, "SphereLight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 656, "VolumeLightAPI", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v92 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v92 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v91;
  uint64_t v93 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v93 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v94 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v94 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v95 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v95 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v96 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v96 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v97 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v97 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v98 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v98 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v99 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v99 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v100 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v100 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v101 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v101 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v102 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v102 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v103 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v103 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v104 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v104 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v105 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v105 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v106 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v106 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v107 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v107 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v108 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v108 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v109 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v109 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v110 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v110 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v21 = *((void *)this + 19);
  uint64_t v111 = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v111 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = *((void *)this + 20);
  uint64_t v112 = v22;
  if ((v22 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v112 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v23 = *((void *)this + 21);
  uint64_t v113 = v23;
  if ((v23 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v113 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v24 = *((void *)this + 22);
  uint64_t v114 = v24;
  if ((v24 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v114 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v25 = *((void *)this + 23);
  uint64_t v115 = v25;
  if ((v25 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v115 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v26 = *((void *)this + 24);
  uint64_t v116 = v26;
  if ((v26 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v116 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v27 = *((void *)this + 25);
  uint64_t v117 = v27;
  if ((v27 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v117 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v28 = *((void *)this + 26);
  uint64_t v118 = v28;
  if ((v28 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v118 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v29 = *((void *)this + 27);
  uint64_t v119 = v29;
  if ((v29 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v119 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v30 = *((void *)this + 28);
  uint64_t v120 = v30;
  if ((v30 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v120 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v31 = *((void *)this + 29);
  uint64_t v121 = v31;
  if ((v31 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v121 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v32 = *((void *)this + 30);
  uint64_t v122 = v32;
  if ((v32 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v122 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v33 = *((void *)this + 31);
  uint64_t v123 = v33;
  if ((v33 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v123 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v34 = *((void *)this + 32);
  uint64_t v124 = v34;
  if ((v34 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v124 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v35 = *((void *)this + 33);
  uint64_t v125 = v35;
  if ((v35 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v125 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v36 = *((void *)this + 34);
  uint64_t v126 = v36;
  if ((v36 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v126 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v37 = *((void *)this + 35);
  uint64_t v127 = v37;
  if ((v37 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v127 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v38 = *((void *)this + 36);
  uint64_t v128 = v38;
  if ((v38 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v128 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v39 = *((void *)this + 37);
  uint64_t v129 = v39;
  if ((v39 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v129 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v40 = *((void *)this + 38);
  uint64_t v130 = v40;
  if ((v40 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v130 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v41 = *((void *)this + 39);
  uint64_t v131 = v41;
  if ((v41 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v131 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v42 = *((void *)this + 40);
  uint64_t v132 = v42;
  if ((v42 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v132 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v43 = *((void *)this + 41);
  uint64_t v133 = v43;
  if ((v43 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v133 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v44 = *((void *)this + 42);
  uint64_t v134 = v44;
  if ((v44 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v134 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v45 = *((void *)this + 43);
  uint64_t v135 = v45;
  if ((v45 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v135 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v46 = *((void *)this + 44);
  uint64_t v136 = v46;
  if ((v46 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v136 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v47 = *((void *)this + 45);
  uint64_t v137 = v47;
  if ((v47 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v137 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v48 = *((void *)this + 46);
  uint64_t v138 = v48;
  if ((v48 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v138 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v49 = *((void *)this + 47);
  uint64_t v139 = v49;
  if ((v49 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v139 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v50 = *((void *)this + 48);
  uint64_t v140 = v50;
  if ((v50 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v140 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v51 = *((void *)this + 49);
  uint64_t v141 = v51;
  if ((v51 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v141 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v52 = *((void *)this + 50);
  uint64_t v142 = v52;
  if ((v52 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v142 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v53 = *((void *)this + 51);
  uint64_t v143 = v53;
  if ((v53 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v143 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v54 = *((void *)this + 52);
  uint64_t v144 = v54;
  if ((v54 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v144 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v55 = *((void *)this + 53);
  uint64_t v145 = v55;
  if ((v55 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v145 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v56 = *((void *)this + 54);
  uint64_t v146 = v56;
  if ((v56 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v146 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v57 = *((void *)this + 55);
  uint64_t v147 = v57;
  if ((v57 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v147 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v58 = *((void *)this + 56);
  uint64_t v148 = v58;
  if ((v58 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v148 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v59 = *((void *)this + 57);
  uint64_t v149 = v59;
  if ((v59 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v149 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v60 = *((void *)this + 58);
  uint64_t v150 = v60;
  if ((v60 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v150 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v61 = *((void *)this + 59);
  uint64_t v151 = v61;
  if ((v61 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v151 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v62 = *((void *)this + 60);
  uint64_t v152 = v62;
  if ((v62 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v152 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v63 = *((void *)this + 61);
  uint64_t v153 = v63;
  if ((v63 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v153 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v64 = *((void *)this + 62);
  uint64_t v154 = v64;
  if ((v64 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v64 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v154 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v65 = *((void *)this + 63);
  uint64_t v155 = v65;
  if ((v65 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v65 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v155 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v66 = *((void *)this + 64);
  uint64_t v156 = v66;
  if ((v66 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v156 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v67 = *((void *)this + 65);
  uint64_t v157 = v67;
  if ((v67 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v157 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v68 = *((void *)this + 66);
  uint64_t v158 = v68;
  if ((v68 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v158 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v69 = *((void *)this + 67);
  uint64_t v159 = v69;
  if ((v69 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v159 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v70 = *((void *)this + 68);
  uint64_t v160 = v70;
  if ((v70 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v70 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v160 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v71 = *((void *)this + 69);
  uint64_t v161 = v71;
  if ((v71 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v161 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v72 = *((void *)this + 70);
  uint64_t v162 = v72;
  if ((v72 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v72 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v162 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v73 = *((void *)this + 71);
  uint64_t v163 = v73;
  if ((v73 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v73 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v163 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v74 = *((void *)this + 72);
  uint64_t v164 = v74;
  if ((v74 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v164 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v75 = *((void *)this + 73);
  uint64_t v165 = v75;
  if ((v75 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v75 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v165 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v76 = *((void *)this + 74);
  uint64_t v166 = v76;
  if ((v76 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v166 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v77 = *((void *)this + 75);
  uint64_t v167 = v77;
  if ((v77 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v77 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v167 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v78 = *((void *)this + 76);
  uint64_t v168 = v78;
  if ((v78 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v78 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v168 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v79 = *((void *)this + 77);
  uint64_t v169 = v79;
  if ((v79 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v169 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v80 = *((void *)this + 78);
  uint64_t v170 = v80;
  if ((v80 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v80 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v170 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v81 = *((void *)this + 79);
  uint64_t v171 = v81;
  if ((v81 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v81 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v171 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v82 = *((void *)this + 80);
  uint64_t v172 = v82;
  if ((v82 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v82 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v172 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v83 = *((void *)this + 81);
  uint64_t v173 = v83;
  if ((v83 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v83 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v173 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v84 = *((void *)this + 82);
  uint64_t v174 = v84;
  if ((v84 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v84 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v174 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 83) = 0;
  *((void *)this + 84) = 0;
  *((void *)this + 85) = 0;
  v85 = (char *)operator new(0x298uLL);
  uint64_t v86 = 0;
  *((void *)this + 83) = v85;
  *((void *)this + 84) = v85;
  *((void *)this + 85) = v85 + 664;
  do
  {
    uint64_t v87 = *(uint64_t *)((char *)&v92 + v86);
    *(void *)&v85[v86] = v87;
    if ((v87 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v87 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v85[v86] &= 0xFFFFFFFFFFFFFFF8;
    }
    v86 += 8;
  }
  while (v86 != 664);
  *((void *)this + 84) = v85 + 664;
  for (uint64_t i = 656; i != -8; i -= 8)
  {
    uint64_t v89 = *(uint64_t *)((char *)&v92 + i);
    if ((v89 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v89 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_216FBF35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _Unwind_Exception *exception_objecta, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41,void *a42,void *a43,void *a44,void *a45,void *a46,void *a47,void *a48,void *a49,void *a50,void *a51,void *a52,void *a53,void *a54,void *a55,void *a56,void *a57,void *a58,void *a59,void *a60,void *a61,void *a62,void *a63)
{
  sub_216889A04((void ***)&STACK[0x258]);
  uint64_t v82 = 656;
  while (1)
  {
    uint64_t v83 = *(unint64_t *)((char *)&STACK[0x268] + v82);
    if ((v83 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v83 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v82 -= 8;
    if (v82 == -8)
    {
      if ((*v73 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v73 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v81 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v81 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v80 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v80 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v79 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v78 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v78 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v77 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v77 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v76 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v76 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v75 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v75 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v74 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a42 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a43 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a44 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a45 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a46 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a47 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a48 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a49 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a50 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a51 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a52 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a53 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a54 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a55 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a56 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a57 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a58 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a59 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a60 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a61 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a62 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a63 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a64 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a65 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a65 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a66 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a67 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a68 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a69 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a70 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a70 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a71 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a72 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a72 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v84 = *(void *)STACK[0x200];
      if ((v84 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v84 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v85 = *(void *)STACK[0x208];
      if ((v85 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v85 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v86 = *(void *)STACK[0x210];
      if ((v86 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v87 = *(void *)STACK[0x218];
      if ((v87 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v87 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v88 = *(void *)STACK[0x220];
      if ((v88 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v88 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v89 = *(void *)STACK[0x228];
      if ((v89 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v89 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v90 = *(void *)STACK[0x230];
      if ((v90 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v90 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v91 = *(void *)STACK[0x238];
      if ((v91 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v91 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v92 = *(void *)STACK[0x240];
      if ((v92 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v92 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v93 = *(void *)STACK[0x248];
      if ((v93 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v94 = *(void *)STACK[0x250];
      if ((v94 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v94 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v72 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v72 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_216FBFCC8()
{
}

void sub_216FBFCD0()
{
}

void sub_216FBFCD8()
{
}

void sub_216FBFCE0()
{
}

void sub_216FBFCE8()
{
}

void sub_216FBFCF0()
{
}

void sub_216FBFCF8()
{
}

void sub_216FBFD00()
{
}

void sub_216FBFD08()
{
}

void sub_216FBFD10()
{
}

void sub_216FBFD18()
{
}

void sub_216FBFD20()
{
}

void sub_216FBFD28()
{
}

void sub_216FBFD30()
{
}

void sub_216FBFD38()
{
}

void sub_216FBFD40()
{
}

void sub_216FBFD48()
{
}

void sub_216FBFD50()
{
}

void sub_216FBFD58()
{
}

void sub_216FBFD60()
{
}

void sub_216FBFD68()
{
}

void sub_216FBFD70()
{
}

void sub_216FBFD78()
{
}

void sub_216FBFD80()
{
}

void sub_216FBFD88()
{
}

void sub_216FBFD90()
{
}

void sub_216FBFD98()
{
}

void sub_216FBFDA0()
{
}

void sub_216FBFDA8()
{
}

void sub_216FBFDB0()
{
}

void sub_216FBFDB8()
{
}

void sub_216FBFDC0()
{
}

void sub_216FBFDC8()
{
}

void sub_216FBFDD0()
{
}

void sub_216FBFDD8()
{
}

void sub_216FBFDE0()
{
}

void sub_216FBFDE8()
{
}

void sub_216FBFDF0()
{
}

void sub_216FBFDF8()
{
}

void sub_216FBFE00()
{
}

void sub_216FBFE08()
{
}

void sub_216FBFE10()
{
}

void sub_216FBFE18()
{
}

void sub_216FBFE20()
{
}

void sub_216FBFE28()
{
}

void sub_216FBFE30()
{
}

void sub_216FBFE38()
{
}

void sub_216FBFE40()
{
}

void sub_216FBFE48()
{
}

void sub_216FBFE50()
{
}

void sub_216FBFE58()
{
}

void sub_216FBFE60()
{
}

void sub_216FBFE68()
{
}

void sub_216FBFE70()
{
}

void sub_216FBFE78()
{
}

void sub_216FBFE80()
{
}

void sub_216FBFE88()
{
}

void sub_216FBFE90()
{
}

void sub_216FBFE98()
{
}

void sub_216FBFEA0()
{
}

void sub_216FBFEA8()
{
}

void sub_216FBFEB0()
{
}

void sub_216FBFEB8()
{
}

void sub_216FBFEC0()
{
}

void sub_216FBFEC8()
{
}

void sub_216FBFED0()
{
}

void sub_216FBFED8()
{
}

void sub_216FBFEE0()
{
}

void sub_216FBFEE8()
{
}

void sub_216FBFEF0()
{
}

void sub_216FBFEF8()
{
}

void sub_216FBFF00()
{
}

void sub_216FBFF08()
{
}

void sub_216FBFF10()
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::~UsdLuxVolumeLightAPI(pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76EC30;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/volumeLightAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdLuxVolumeLightAPI pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::Get(cons"
                            "t UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76EC30;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FC00D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI *this)
{
  return 5;
}

uint64_t sub_216FC0100(pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94640, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdLuxVolumeLightAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_216FC02E8(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76EC30;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76EC30;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_216FC02D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216FC02E8(pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94640, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdLuxVolumeLightAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94648, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94648))
  {
    __cxa_guard_release(&qword_267B94648);
  }
  return &qword_267B94640;
}

void sub_216FC041C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94658, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI *)__cxa_guard_acquire(&qword_267B94658);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::_GetStaticTfType(v2);
      byte_267B94650 = sub_216D16508((char *)&qword_267B94640, v3, v4);
      __cxa_guard_release(&qword_267B94658);
    }
  }
  return byte_267B94650;
}

void sub_216FC049C(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI *this)
{
  return &qword_267B94640;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxVolumeLightAPI *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94678, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94678))
  {
    qword_267B94660 = 0;
    *(void *)algn_267B94668 = 0;
    qword_267B94670 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94660, &dword_216758000);
    __cxa_guard_release(&qword_267B94678);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94698, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94698))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_216FC05DC((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94680, &dword_216758000);
    __cxa_guard_release(&qword_267B94698);
  }
  if (v1) {
    return &qword_267B94680;
  }
  else {
    return &qword_267B94660;
  }
}

void sub_216FC05C4(_Unwind_Exception *a1)
{
}

void *sub_216FC05DC(uint64_t **a1)
{
  qword_267B94688 = 0;
  unk_267B94690 = 0;
  qword_267B94680 = 0;
  sub_216973388((char **)&qword_267B94680, ((*(void *)algn_267B94668 - qword_267B94660) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B94680, (void *)qword_267B94688, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B94680, (void *)qword_267B94688, (uint64_t *)qword_267B94660, *(uint64_t **)algn_267B94668, (*(void *)algn_267B94668 - qword_267B94660) >> 3);
}

void sub_216FC0674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216FC0694()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FC0774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FC07C4()
{
  sub_216FC1144();
  sub_216779094(__p, "GenerativeProcedural");
  sub_216FC1270((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216FC0814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural::~UsdProcGenerativeProcedural(pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EC88;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdProc/generativeProcedural.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdProcGenerativeProcedural pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProced"
                            "ural::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EC88;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FC09E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B946A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B946A8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B946A0, "GenerativeProcedural");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B946A0, &dword_216758000);
    __cxa_guard_release(&qword_267B946A8);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B946A0, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EC88;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdProc/generativeProcedural.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdProcGenerativeProcedural pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProced"
                            "ural::Define(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EC88;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FC0BEC(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B946B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B946B8))
  {
    __cxa_guard_release(&qword_267B946B8);
  }
  return &qword_267B946B0;
}

void sub_216FC0C94(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B946C8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural *)__cxa_guard_acquire(&qword_267B946C8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural::_GetStaticTfType(v2);
      byte_267B946C0 = sub_216D16508((char *)&qword_267B946B0, v3, v4);
      __cxa_guard_release(&qword_267B946C8);
    }
  }
  return byte_267B946C0;
}

void sub_216FC0D14(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural *this)
{
  return &qword_267B946B0;
}

void pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural::GetProceduralSystemAttr(pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdProcTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdProcTokens);
  if (!v3) {
    uint64_t v3 = sub_216FC1328(&pxrInternal__aapl__pxrReserved__::UsdProcTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, v3, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC0DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural::CreateProceduralSystemAttr(pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdProcTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdProcTokens);
  if (!v8) {
    uint64_t v8 = sub_216FC1328(&pxrInternal__aapl__pxrReserved__::UsdProcTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, v8, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdProcGenerativeProcedural *this)
{
  int v1 = (int)this;
  v7[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B946E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B946E8))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdProcTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdProcTokens);
    if (!v3) {
      uint64_t v3 = sub_216FC1328(&pxrInternal__aapl__pxrReserved__::UsdProcTokens);
    }
    uint64_t v4 = *(void *)v3;
    v7[0] = v4;
    if ((v4 & 7) != 0)
    {
      int v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        v7[0] = (uint64_t)v5;
      }
    }
    sub_216D30CFC(&qword_267B946D0, v7, 1uLL);
    if ((v7[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B946D0, &dword_216758000);
    __cxa_guard_release(&qword_267B946E8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94708, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94708))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)1);
    sub_216FC108C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B946F0, &dword_216758000);
    __cxa_guard_release(&qword_267B94708);
  }
  if (v1) {
    return &qword_267B946F0;
  }
  else {
    return &qword_267B946D0;
  }
}

void sub_216FC1044(_Unwind_Exception *a1)
{
}

void *sub_216FC108C(uint64_t **a1)
{
  qword_267B946F8 = 0;
  unk_267B94700 = 0;
  qword_267B946F0 = 0;
  sub_216973388((char **)&qword_267B946F0, ((unk_267B946D8 - qword_267B946D0) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B946F0, (void *)qword_267B946F8, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B946F0, (void *)qword_267B946F8, (uint64_t *)qword_267B946D0, unk_267B946D8, (unk_267B946D8 - qword_267B946D0) >> 3);
}

void sub_216FC1124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216FC1144()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F1C36C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FC1224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FC1270(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216FC1304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdProcTokensType *sub_216FC1328(atomic_ullong *a1)
{
  uint64_t result = sub_216FC1370();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      char v4 = (void *)sub_216D11F60((uint64_t)result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdProcTokensType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdProcTokensType *sub_216FC1370()
{
  v0 = (pxrInternal__aapl__pxrReserved__::UsdProcTokensType *)operator new(0x28uLL);
  pxrInternal__aapl__pxrReserved__::UsdProcTokensType::UsdProcTokensType(v0);
  return v0;
}

void sub_216FC13A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdProcTokensType *pxrInternal__aapl__pxrReserved__::UsdProcTokensType::UsdProcTokensType(atomic_uint **this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "proceduralSystem", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "GenerativeProcedural", 0);
  uint64_t v3 = *this;
  char v13 = v3;
  if ((v3 & 7) != 0)
  {
    char v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      char v13 = v4;
    }
  }
  char v5 = *v2;
  uint64_t v14 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v14 = v6;
    }
  }
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  int v7 = (atomic_uint *)operator new(0x10uLL);
  unint64_t v8 = 0;
  this[2] = v7;
  this[3] = v7;
  this[4] = v7 + 4;
  do
  {
    uint64_t v9 = (&v13)[v8 / 2];
    *(void *)&v7[v8] = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v7[v8] &= 0xFFFFFFFFFFFFFFF8;
    }
    v8 += 2;
  }
  while (v8 != 4);
  this[3] = v7 + 4;
  for (uint64_t i = 1; i != -1; --i)
  {
    uint64_t v11 = (&v13)[i];
    if ((v11 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::UsdProcTokensType *)this;
}

void sub_216FC1520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_216FC159C()
{
  sub_216FC1C4C();
  sub_216779094(__p, "RenderDenoisePass");
  sub_216FC1D78((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216FC15EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass::~UsdRenderDenoisePass(pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass *this)
{
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    unint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76ECE0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdRender/denoisePass.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdRenderDenoisePass pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass::Get(cons"
                            "t UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76ECE0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FC17B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94718, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94718))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B94710, "RenderDenoisePass");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B94710, &dword_216758000);
    __cxa_guard_release(&qword_267B94718);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    unint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B94710, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76ECE0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdRender/denoisePass.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdRenderDenoisePass pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass::Define(c"
                            "onst UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76ECE0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FC19C4(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94728, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94728))
  {
    __cxa_guard_release(&qword_267B94728);
  }
  return &qword_267B94720;
}

void sub_216FC1A6C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94738, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass *)__cxa_guard_acquire(&qword_267B94738);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass::_GetStaticTfType(v2);
      byte_267B94730 = sub_216D16508((char *)&qword_267B94720, v3, v4);
      __cxa_guard_release(&qword_267B94738);
    }
  }
  return byte_267B94730;
}

void sub_216FC1AEC(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass *this)
{
  return &qword_267B94720;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdRenderDenoisePass *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94758, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94758))
  {
    qword_267B94740 = 0;
    *(void *)algn_267B94748 = 0;
    qword_267B94750 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94740, &dword_216758000);
    __cxa_guard_release(&qword_267B94758);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94778, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94778))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    qword_267B94760 = 0;
    *(void *)algn_267B94768 = 0;
    qword_267B94770 = 0;
    sub_21698FA28(&qword_267B94760, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94760, &dword_216758000);
    __cxa_guard_release(&qword_267B94778);
  }
  if (v1) {
    return &qword_267B94760;
  }
  else {
    return &qword_267B94740;
  }
}

void sub_216FC1C34(_Unwind_Exception *a1)
{
}

uint64_t *sub_216FC1C4C()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F1B0B4((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FC1D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FC1D78(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216FC1E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216FC1E30()
{
  sub_216FC325C();
  sub_216779094(__p, "RenderPass");
  sub_216FC3388((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216FC1E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::~UsdRenderPass(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this)
{
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    unint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76ED38;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdRender/pass.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdRenderPass pxrInternal__aapl__pxrReserved__::UsdRenderPass::Get(const UsdStagePtr "
                            "&, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76ED38;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FC204C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94788, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94788))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B94780, "RenderPass");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B94780, &dword_216758000);
    __cxa_guard_release(&qword_267B94788);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    unint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B94780, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76ED38;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdRender/pass.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdRenderPass pxrInternal__aapl__pxrReserved__::UsdRenderPass::Define(const UsdStageP"
                            "tr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76ED38;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FC2258(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderPass::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderPass::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94798, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94798))
  {
    __cxa_guard_release(&qword_267B94798);
  }
  return &qword_267B94790;
}

void sub_216FC2300(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderPass::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B947A8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdRenderPass *)__cxa_guard_acquire(&qword_267B947A8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdRenderPass::_GetStaticTfType(v2);
      byte_267B947A0 = sub_216D16508((char *)&qword_267B94790, v3, v4);
      __cxa_guard_release(&qword_267B947A8);
    }
  }
  return byte_267B947A0;
}

void sub_216FC2380(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderPass::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this)
{
  return &qword_267B94790;
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::GetPassTypeAttr(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 200), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC2458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::CreatePassTypeAttr(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8) {
    uint64_t v8 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 200), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::GetCommandAttr(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 56), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC25C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::CreateCommandAttr(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8) {
    uint64_t v8 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 56), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 536), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::GetFileNameAttr(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 128), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC2728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::CreateFileNameAttr(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8) {
    uint64_t v8 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 128), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 96), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::GetDenoiseEnableAttr(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 88), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC2890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::CreateDenoiseEnableAttr(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8) {
    uint64_t v8 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 88), v9, 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::GetRenderSourceRel(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 288), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC29F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::CreateRenderSourceRel(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 288), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC2AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::GetInputPassesRel(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 152), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC2B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::CreateInputPassesRel(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 152), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC2C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::GetDenoisePassRel(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 96), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC2CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::CreateDenoisePassRel(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 96), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC2D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderPass::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this)
{
  int v1 = (int)this;
  uint64_t v18 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B947C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B947C8))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v3) {
      unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    }
    uint64_t v4 = *((void *)v3 + 25);
    uint64_t v14 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v5 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v5) {
      char v5 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    }
    uint64_t v6 = *((void *)v5 + 7);
    uint64_t v15 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v15 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v7) {
      int v7 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    }
    uint64_t v8 = *((void *)v7 + 16);
    uint64_t v16 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v16 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v9) {
      uint64_t v9 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    }
    uint64_t v10 = *((void *)v9 + 11);
    uint64_t v17 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v17 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B947B0, &v14, 4uLL);
    for (uint64_t i = 24; i != -8; i -= 8)
    {
      uint64_t v12 = *(uint64_t *)((char *)&v14 + i);
      if ((v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B947B0, &dword_216758000);
    __cxa_guard_release(&qword_267B947C8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B947E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B947E8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_216FC30D0((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B947D0, &dword_216758000);
    __cxa_guard_release(&qword_267B947E8);
  }
  if (v1) {
    return &qword_267B947D0;
  }
  else {
    return &qword_267B947B0;
  }
}

void sub_216FC304C(_Unwind_Exception *a1)
{
}

void *sub_216FC30D0(uint64_t **a1)
{
  qword_267B947D8 = 0;
  unk_267B947E0 = 0;
  qword_267B947D0 = 0;
  sub_216973388((char **)&qword_267B947D0, ((unk_267B947B8 - qword_267B947B0) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B947D0, (void *)qword_267B947D8, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B947D0, (void *)qword_267B947D8, (uint64_t *)qword_267B947B0, unk_267B947B8, (unk_267B947B8 - qword_267B947B0) >> 3);
}

void sub_216FC3168(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderPass::GetRenderVisibilityCollectionAPI(pxrInternal__aapl__pxrReserved__::UsdRenderPass *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  sub_216D36868(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (uint64_t *)v3 + 37);
  *(void *)a2 = &unk_26C767A08;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC3244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_216FC325C()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F1B0B4((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FC333C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FC3388(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216FC341C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *sub_216FC3440(atomic_ullong *a1)
{
  uint64_t result = sub_216FC3488();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      char v4 = (void *)sub_216FC34CC((uint64_t)result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *sub_216FC3488()
{
  v0 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)operator new(0x190uLL);
  pxrInternal__aapl__pxrReserved__::UsdRenderTokensType::UsdRenderTokensType(v0);
  return v0;
}

void sub_216FC34B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216FC34CC(uint64_t a1)
{
  uint64_t v49 = (void **)(a1 + 376);
  sub_216889A04(&v49);
  uint64_t v2 = *(void *)(a1 + 368);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 360);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *(void *)(a1 + 352);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(void *)(a1 + 344);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *(void *)(a1 + 336);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *(void *)(a1 + 328);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *(void *)(a1 + 320);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *(void *)(a1 + 312);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *(void *)(a1 + 304);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *(void *)(a1 + 296);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *(void *)(a1 + 288);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *(void *)(a1 + 280);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *(void *)(a1 + 272);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *(void *)(a1 + 264);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *(void *)(a1 + 256);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *(void *)(a1 + 248);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *(void *)(a1 + 240);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *(void *)(a1 + 232);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *(void *)(a1 + 224);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *(void *)(a1 + 216);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *(void *)(a1 + 208);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v23 = *(void *)(a1 + 200);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *(void *)(a1 + 192);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = *(void *)(a1 + 184);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = *(void *)(a1 + 176);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = *(void *)(a1 + 168);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = *(void *)(a1 + 160);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v29 = *(void *)(a1 + 152);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = *(void *)(a1 + 144);
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v31 = *(void *)(a1 + 136);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v32 = *(void *)(a1 + 128);
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v33 = *(void *)(a1 + 120);
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v34 = *(void *)(a1 + 112);
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v35 = *(void *)(a1 + 104);
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v36 = *(void *)(a1 + 96);
  if ((v36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v37 = *(void *)(a1 + 88);
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v38 = *(void *)(a1 + 80);
  if ((v38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v39 = *(void *)(a1 + 72);
  if ((v39 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v40 = *(void *)(a1 + 64);
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v41 = *(void *)(a1 + 56);
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v42 = *(void *)(a1 + 48);
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v43 = *(void *)(a1 + 40);
  if ((v43 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v44 = *(void *)(a1 + 32);
  if ((v44 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v45 = *(void *)(a1 + 24);
  if ((v45 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v46 = *(void *)(a1 + 16);
  if ((v46 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v47 = *(void *)(a1 + 8);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216FC3970()
{
  sub_216FC464C();
  sub_216779094(__p, "RenderProduct");
  sub_216FC4778((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216FC39C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderProduct::~UsdRenderProduct(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::~UsdRenderSettingsBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderProduct::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76ED90;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdRender/product.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdRenderProduct pxrInternal__aapl__pxrReserved__::UsdRenderProduct::Get(const UsdSta"
                            "gePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76ED90;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FC3B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderProduct::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B947F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B947F8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B947F0, "RenderProduct");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B947F0, &dword_216758000);
    __cxa_guard_release(&qword_267B947F8);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B947F0, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76ED90;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdRender/product.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdRenderProduct pxrInternal__aapl__pxrReserved__::UsdRenderProduct::Define(const Usd"
                            "StagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76ED90;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FC3D98(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderProduct::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderProduct::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94808, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94808))
  {
    __cxa_guard_release(&qword_267B94808);
  }
  return &qword_267B94800;
}

void sub_216FC3E40(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderProduct::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94818, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdRenderProduct *)__cxa_guard_acquire(&qword_267B94818);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdRenderProduct::_GetStaticTfType(v2);
      byte_267B94810 = sub_216D16508((char *)&qword_267B94800, v3, v4);
      __cxa_guard_release(&qword_267B94818);
    }
  }
  return byte_267B94810;
}

void sub_216FC3EC0(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderProduct::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this)
{
  return &qword_267B94800;
}

void pxrInternal__aapl__pxrReserved__::UsdRenderProduct::GetProductTypeAttr(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    uint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 248), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC3F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderProduct::CreateProductTypeAttr(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8) {
    uint64_t v8 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 248), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderProduct::GetProductNameAttr(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    uint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 232), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC4100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderProduct::CreateProductNameAttr(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8) {
    uint64_t v8 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 232), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderProduct::GetOrderedVarsRel(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    uint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 192), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC4268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderProduct::CreateOrderedVarsRel(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    uint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 192), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC4324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderProduct::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdRenderProduct *this)
{
  int v1 = (int)this;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94838, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94838))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v3) {
      uint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    }
    uint64_t v4 = *((void *)v3 + 31);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0)
    {
      uint64_t v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v12 = (uint64_t)v5;
      }
    }
    int v6 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v6) {
      int v6 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    }
    int v7 = (atomic_uint *)*((void *)v6 + 29);
    char v13 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        char v13 = v8;
      }
    }
    sub_216D30CFC(&qword_267B94820, &v12, 2uLL);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94820, &dword_216758000);
    __cxa_guard_release(&qword_267B94838);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94858, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94858))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *)1);
    sub_216FC4594((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94840, &dword_216758000);
    __cxa_guard_release(&qword_267B94858);
  }
  if (v1) {
    return &qword_267B94840;
  }
  else {
    return &qword_267B94820;
  }
}

void sub_216FC451C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B94838);
  _Unwind_Resume(a1);
}

void *sub_216FC4594(uint64_t **a1)
{
  qword_267B94848 = 0;
  unk_267B94850 = 0;
  qword_267B94840 = 0;
  sub_216973388((char **)&qword_267B94840, ((unk_267B94828 - qword_267B94820) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B94840, (void *)qword_267B94848, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B94840, (void *)qword_267B94848, (uint64_t *)qword_267B94820, unk_267B94828, (unk_267B94828 - qword_267B94820) >> 3);
}

void sub_216FC462C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216FC464C()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216FC482C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FC472C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FC4778(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216FC480C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216FC482C(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  unint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216FC489C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216FC48C0()
{
  sub_216FC5C94();
  sub_216779094(__p, "RenderSettings");
  sub_216FC5DC0((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216FC4910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::~UsdRenderSettings(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this)
{
  pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::~UsdRenderSettingsBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EDE8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdRender/settings.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdRenderSettings pxrInternal__aapl__pxrReserved__::UsdRenderSettings::Get(const UsdS"
                            "tagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EDE8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FC4ADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94868, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94868))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B94860, "RenderSettings");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B94860, &dword_216758000);
    __cxa_guard_release(&qword_267B94868);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B94860, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EDE8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdRender/settings.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdRenderSettings pxrInternal__aapl__pxrReserved__::UsdRenderSettings::Define(const U"
                            "sdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EDE8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FC4CE8(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderSettings::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderSettings::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94878, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94878))
  {
    __cxa_guard_release(&qword_267B94878);
  }
  return &qword_267B94870;
}

void sub_216FC4D90(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderSettings::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94888, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdRenderSettings *)__cxa_guard_acquire(&qword_267B94888);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdRenderSettings::_GetStaticTfType(v2);
      byte_267B94880 = sub_216D16508((char *)&qword_267B94870, v3, v4);
      __cxa_guard_release(&qword_267B94888);
    }
  }
  return byte_267B94880;
}

void sub_216FC4E10(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderSettings::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this)
{
  return &qword_267B94870;
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::GetIncludedPurposesAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 144), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC4EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::CreateIncludedPurposesAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8) {
    uint64_t v8 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 144), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 544), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::GetMaterialBindingPurposesAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 184), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC5050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::CreateMaterialBindingPurposesAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8) {
    uint64_t v8 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 184), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 544), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::GetRenderingColorSpaceAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 272), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC51B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::CreateRenderingColorSpaceAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8) {
    uint64_t v8 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 272), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::GetProductsRel(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 240), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC5320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::CreateProductsRel(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 240), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC53DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderSettings::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdRenderSettings *this)
{
  int v1 = (int)this;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B948A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B948A8))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v3) {
      unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    }
    uint64_t v4 = *((void *)v3 + 18);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v5 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v5) {
      char v5 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    }
    uint64_t v6 = *((void *)v5 + 23);
    uint64_t v13 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v13 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v7) {
      int v7 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    }
    uint64_t v8 = *((void *)v7 + 34);
    uint64_t v14 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B94890, &v12, 3uLL);
    for (uint64_t i = 16; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94890, &dword_216758000);
    __cxa_guard_release(&qword_267B948A8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B948C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B948C8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *)1);
    sub_216FC56C4((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B948B0, &dword_216758000);
    __cxa_guard_release(&qword_267B948C8);
  }
  if (v1) {
    return &qword_267B948B0;
  }
  else {
    return &qword_267B94890;
  }
}

void sub_216FC5640(_Unwind_Exception *a1)
{
}

void *sub_216FC56C4(uint64_t **a1)
{
  qword_267B948B8 = 0;
  unk_267B948C0 = 0;
  qword_267B948B0 = 0;
  sub_216973388((char **)&qword_267B948B0, ((unk_267B94898 - qword_267B94890) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B948B0, (void *)qword_267B948B8, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B948B0, (void *)qword_267B948B8, (uint64_t *)qword_267B94890, unk_267B94898, (unk_267B94898 - qword_267B94890) >> 3);
}

void sub_216FC575C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettings::GetStageRenderSettings(uint64_t *a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  uint64_t v4 = sub_216D24140(a1);
  if (v5 & 1 | (unint64_t)v4)
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(a1);
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v7) {
      int v7 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    }
    if (pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredMetadata(v6, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v7 + 280)))
    {
      memset(&__p, 0, sizeof(__p));
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(a1);
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
      if (!v9) {
        uint64_t v9 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
      }
      sub_216FC5AB0(v8, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v9 + 280), &__p);
      char v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v13, &__p);
        uint64_t v12 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, (uint64_t)&v16);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v16);
        *(void *)a2 = &unk_26C76EDE8;
        if ((v19 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
        sub_21697C414(&v18);
        if (v17) {
          sub_216D16E0C(v17);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
        sub_21697C414(&v13);
        char v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      if (v10 < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (size) {
          return;
        }
      }
      else if (size)
      {
        return;
      }
    }
    LODWORD(v16) = 1;
    uint64_t v17 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v18);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v18 + 1);
    unint64_t v19 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v16);
    *(void *)a2 = &unk_26C76EDE8;
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  }
  else
  {
    uint64_t v16 = "usdRender/settings.cpp";
    uint64_t v17 = (atomic_ullong *)"GetStageRenderSettings";
    uint64_t v18 = 225;
    unint64_t v19 = (unint64_t)"static UsdRenderSettings pxrInternal__aapl__pxrReserved__::UsdRenderSettings::GetStageRender"
                            "Settings(const UsdStageWeakPtr &)";
    char v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid UsdStage");
    LODWORD(v16) = 1;
    uint64_t v17 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v18);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v18 + 1);
    unint64_t v19 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v16);
    *(void *)a2 = &unk_26C76EDE8;
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  }
  sub_21697C414(&v18);
  if (v17) {
    sub_216D16E0C(v17);
  }
}

void sub_216FC5A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216FC5AB0(pxrInternal__aapl__pxrReserved__::UsdStage *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, std::string *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v21 = 0;
  if ((pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadata(a1, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v20) & 1) == 0)
  {
LABEL_19:
    uint64_t v6 = 0;
    goto LABEL_20;
  }
  if (!sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
  {
    v18[0] = "usd/stage.h";
    v18[1] = "GetMetadata";
    v18[2] = 2410;
    v18[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadata(const TfToken &, T *) const [T = std::string]";
    char v19 = 0;
    int v7 = v16;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174BFD94 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v16);
    if (v17 < 0) {
      int v7 = (void **)v16[0];
    }
    unint64_t v10 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      uint64_t v11 = (const char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0) {
        uint64_t v11 = *(const char **)v11;
      }
    }
    else
    {
      uint64_t v11 = "";
    }
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v20, v8, v9, (uint64_t)__p);
    if (v15 >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Requested type %s for stage metadatum %s does not match retrieved type %s", (const char *)v7, v11, (const char *)v12);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    goto LABEL_19;
  }
  if ((v21 & 4) != 0) {
    char v5 = (const std::string *)(*(uint64_t (**)(const std::string **))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
  }
  else {
    char v5 = v20;
  }
  std::string::operator=(a3, v5);
  uint64_t v6 = 1;
LABEL_20:
  sub_2168EE084((uint64_t)&v20);
  return v6;
}

void sub_216FC5C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  sub_2168EE084(v24 - 56);
  _Unwind_Resume(a1);
}

uint64_t *sub_216FC5C94()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216FC482C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FC5D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FC5DC0(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216FC5E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::~UsdRenderSettingsBase(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this)
{
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EE40;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdRender/settingsBase.cpp";
    unint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdRenderSettingsBase pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::Get(co"
                            "nst UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    unint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EE40;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FC602C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this)
{
  return 2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B948D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B948D8))
  {
    __cxa_guard_release(&qword_267B948D8);
  }
  return &qword_267B948D0;
}

void sub_216FC60BC(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B948E8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *)__cxa_guard_acquire(&qword_267B948E8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::_GetStaticTfType(v2);
      byte_267B948E0 = sub_216D16508((char *)&qword_267B948D0, v3, v4);
      __cxa_guard_release(&qword_267B948E8);
    }
  }
  return byte_267B948E0;
}

void sub_216FC613C(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this)
{
  return &qword_267B948D0;
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetResolutionAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 304), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC6214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::CreateResolutionAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8) {
    uint64_t v8 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 304), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 104), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetPixelAspectRatioAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 208), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC637C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::CreatePixelAspectRatioAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8) {
    uint64_t v8 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 208), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetAspectRatioConformPolicyAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 24), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC64E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::CreateAspectRatioConformPolicyAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8) {
    uint64_t v8 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 24), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetDataWindowNDCAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 80), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC664C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::CreateDataWindowNDCAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8) {
    uint64_t v8 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 80), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 168), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetInstantaneousShutterAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 160), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC67B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::CreateInstantaneousShutterAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8) {
    uint64_t v8 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 160), v9, 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetDisableMotionBlurAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 112), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC691C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::CreateDisableMotionBlurAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8) {
    uint64_t v8 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 112), v9, 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetDisableDepthOfFieldAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 104), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC6A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::CreateDisableDepthOfFieldAttr(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8) {
    uint64_t v8 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 104), v9, 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetCameraRel(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 32), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC6BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::CreateCameraRel(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 32), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FC6CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *this)
{
  int v1 = (int)this;
  uint64_t v27 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94908, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94908))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v3) {
      unint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    }
    uint64_t v4 = *((void *)v3 + 38);
    uint64_t v20 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v20 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v5 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v5) {
      char v5 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    }
    uint64_t v6 = *((void *)v5 + 26);
    uint64_t v21 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v21 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v7) {
      int v7 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    }
    uint64_t v8 = *((void *)v7 + 3);
    uint64_t v22 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v22 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v9) {
      uint64_t v9 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    }
    uint64_t v10 = *((void *)v9 + 10);
    uint64_t v23 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v11) {
      uint64_t v11 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    }
    uint64_t v12 = *((void *)v11 + 20);
    uint64_t v24 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v13 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v13) {
      char v13 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    }
    uint64_t v14 = *((void *)v13 + 14);
    uint64_t v25 = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v15 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v15) {
      char v15 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    }
    uint64_t v16 = *((void *)v15 + 13);
    uint64_t v26 = v16;
    if ((v16 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v26 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B948F0, &v20, 7uLL);
    for (uint64_t i = 48; i != -8; i -= 8)
    {
      uint64_t v18 = *(uint64_t *)((char *)&v20 + i);
      if ((v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B948F0, &dword_216758000);
    __cxa_guard_release(&qword_267B94908);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94928, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94928))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_216FC70C0((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94910, &dword_216758000);
    __cxa_guard_release(&qword_267B94928);
  }
  if (v1) {
    return &qword_267B94910;
  }
  else {
    return &qword_267B948F0;
  }
}

void sub_216FC703C(_Unwind_Exception *a1)
{
}

void *sub_216FC70C0(uint64_t **a1)
{
  qword_267B94918 = 0;
  unk_267B94920 = 0;
  qword_267B94910 = 0;
  sub_216973388((char **)&qword_267B94910, ((unk_267B948F8 - qword_267B948F0) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B94910, (void *)qword_267B94918, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B94910, (void *)qword_267B94918, (uint64_t *)qword_267B948F0, unk_267B948F8, (unk_267B948F8 - qword_267B948F0) >> 3);
}

void sub_216FC7158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216FC7178()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F1B0B4((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FC7258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderComputeSpec(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 128) = 0;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdObject *)sub_216D16CFC((uint64_t)v47, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(v3, v4, &v45);
  char v5 = sub_216D24140(&v45);
  if (v6 & 1 | (unint64_t)v5)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v36);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v36 + 1);
    uint64_t v38 = 0;
    uint64_t v37 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v39);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v39 + 1);
    uint64_t v41 = 0;
    long long v42 = xmmword_217456E50;
    long long v43 = 0u;
    long long v44 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v26, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v47);
    uint64_t v26 = &unk_26C76EE40;
    sub_216FC849C((pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *)&v26, (uint64_t)&v36, 1);
    pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::~UsdRenderSettingsBase((pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *)&v26);
    uint64_t v34 = 0;
    uint64_t v33 = 0;
    uint64_t v35 = 0;
    pxrInternal__aapl__pxrReserved__::UsdRenderSettings::GetProductsRel((pxrInternal__aapl__pxrReserved__::UsdRenderSettings *)a1, (uint64_t)&v26);
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)&v26, (uint64_t *)&v33);
    if ((v30 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
    sub_21697C414(&v28);
    if (v27) {
      sub_216D16E0C(v27);
    }
    int v7 = v33;
    for (i = v34; v7 != i; int v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 8))
    {
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(&v45);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v9, v7, (uint64_t)&v26);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v31, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v26);
      uint64_t v31 = (unsigned int (**)(void **))&unk_26C76ED90;
      if ((v30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
      sub_21697C414(&v28);
      if (v27) {
        sub_216D16E0C(v27);
      }
      if (v32 && (*(unsigned char *)(v32 + 57) & 8) == 0 && v31[4]((void **)&v31))
      {
        sub_216FC90A8((uint64_t)&v26, (uint64_t)&v36);
        sub_2169C487C((int *)&v26, v7);
        sub_2169C48D4((int *)&v26 + 1, (_DWORD *)v7 + 1);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v17, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v31);
        char v17 = (char *)&unk_26C76EE40;
        sub_216FC849C((pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *)&v17, (uint64_t)&v26, 0);
        pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::~UsdRenderSettingsBase((pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *)&v17);
        BOOL v10 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
        if (v10) {
          uint64_t v11 = (const char **)&v30;
        }
        else {
          uint64_t v11 = &v39;
        }
        if (v10) {
          uint64_t v12 = (char *)&v30 + 4;
        }
        else {
          uint64_t v12 = (char *)&v39 + 4;
        }
        sub_216981010(&v24, v11);
        sub_21698105C(&v25, v12);
        char v13 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(&v45);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, (uint64_t)&v17);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v22, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v17);
        uint64_t v22 = (unsigned int (**)(void **))&unk_26C76C710;
        if ((v20 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v19 + 1);
        sub_21697C414(&v19);
        if (v18) {
          sub_216D16E0C(v18);
        }
        if (v23 && (*(unsigned char *)(v23 + 57) & 8) == 0)
        {
          if (v22[4]((void **)&v22))
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomCamera::GetHorizontalApertureAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCamera *)&v22, (uint64_t)&v17);
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>();
          }
        }
        char v17 = "usdRender/spec.cpp";
        uint64_t v18 = (atomic_ullong *)"UsdRenderComputeSpec";
        char v19 = (void *)219;
        unint64_t v20 = (unint64_t)"UsdRenderSpec pxrInternal__aapl__pxrReserved__::UsdRenderComputeSpec(const UsdRenderSett"
                                "ings &, const TfTokenVector &)";
        char v21 = 0;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24);
        char v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v7);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"UsdRenderSettings: Could not find camera <%s> for the render product <%s>.\n", Text, v15);
        pxrInternal__aapl__pxrReserved__::UsdGeomCamera::~UsdGeomCamera((pxrInternal__aapl__pxrReserved__::UsdGeomCamera *)&v22);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
        sub_21697C414(&v24);
        sub_216FC9248((uint64_t)&v26);
      }
      pxrInternal__aapl__pxrReserved__::UsdRenderProduct::~UsdRenderProduct((pxrInternal__aapl__pxrReserved__::UsdRenderProduct *)&v31);
    }
    pxrInternal__aapl__pxrReserved__::UsdRenderSettings::GetMaterialBindingPurposesAttr((pxrInternal__aapl__pxrReserved__::UsdRenderSettings *)a1, (uint64_t)&v26);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>();
  }
  uint64_t v36 = "usdRender/spec.cpp";
  uint64_t v37 = "UsdRenderComputeSpec";
  uint64_t v38 = 182;
  uint64_t v39 = "UsdRenderSpec pxrInternal__aapl__pxrReserved__::UsdRenderComputeSpec(const UsdRenderSettings &, const TfTokenVector &)";
  char v40 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v36, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage\n");
  uint64_t v16 = v46;
  if (v46 && atomic_fetch_add_explicit((atomic_uint *volatile)(v46 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  if ((v51 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v50);
  sub_21697C414(&v49);
  if (v48) {
    sub_216D16E0C(v48);
  }
}

void sub_216FC8208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void **a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,int a59,void **a60)
{
  *(void *)(v60 + 8) = v61;
  a42 = (void **)&a56;
  sub_216981168(&a42);
  sub_21697B754(&a59);
  sub_216FC9248((uint64_t)&a60);
  pxrInternal__aapl__pxrReserved__::UsdRenderProduct::~UsdRenderProduct((pxrInternal__aapl__pxrReserved__::UsdRenderProduct *)&STACK[0x208]);
  a60 = (void **)&STACK[0x220];
  sub_216981168(&a60);
  sub_216FC9248((uint64_t)&STACK[0x238]);
  uint64_t v64 = *(atomic_uint **)(v62 - 176);
  if (v64)
  {
    if (atomic_fetch_add_explicit(v64 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v64 + 8))(v64);
    }
  }
  sub_216D16AD8(v62 - 168);
  sub_216FC8E50(v60);
  _Unwind_Resume(a1);
}

void sub_216FC849C(pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase *a1, uint64_t a2, char a3)
{
  uint64_t v12 = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetCameraRel(a1, (uint64_t)&v7);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)&v7, (uint64_t *)&v12);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  char v6 = v12;
  if (v12 != v13)
  {
    sub_2169C487C((int *)(a2 + 24), v12);
    sub_2169C48D4((int *)(a2 + 28), v6 + 1);
  }
  pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetResolutionAttr(a1, (uint64_t)&v7);
  if ((a3 & 1) != 0
    || pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v7))
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec2i>();
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetPixelAspectRatioAttr(a1, (uint64_t)&v7);
  if ((a3 & 1) != 0
    || pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v7))
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>();
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetAspectRatioConformPolicyAttr(a1, (uint64_t)&v7);
  if ((a3 & 1) != 0
    || pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v7))
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetDataWindowNDCAttr(a1, (uint64_t)&v7);
  if ((a3 & 1) != 0
    || pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v7))
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec4f>();
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetDisableMotionBlurAttr(a1, (uint64_t)&v7);
  if ((a3 & 1) != 0
    || pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v7))
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<BOOL>();
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetDisableMotionBlurAttr(a1, (uint64_t)&v7);
  if ((a3 & 1) != 0
    || pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v7))
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<BOOL>();
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  pxrInternal__aapl__pxrReserved__::UsdRenderSettingsBase::GetDisableDepthOfFieldAttr(a1, (uint64_t)&v7);
  if ((a3 & 1) != 0
    || pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v7))
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<BOOL>();
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  int v7 = (void **)&v12;
  sub_216981168(&v7);
}

void sub_216FC8870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  a12 = (void **)&a16;
  sub_216981168(&a12);
  _Unwind_Resume(a1);
}

void sub_216FC88FC(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtDictionary *a3)
{
  v53[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredAttributes(a1, &v47);
  uint64_t v36 = sub_216D5A03C((uint64_t)a1, v5);
  uint64_t v6 = v47;
  uint64_t v37 = v48;
  while (v6 != v37)
  {
    int v42 = *(_DWORD *)v6;
    int v7 = *(atomic_ullong **)(v6 + 8);
    long long v43 = v7;
    if (v7) {
      atomic_fetch_add_explicit(v7 + 6, 1uLL, memory_order_relaxed);
    }
    sub_216981010(&v44, (_DWORD *)(v6 + 16));
    size_t v8 = (size_t)sub_21698105C(&v45, (_DWORD *)(v6 + 20));
    uint64_t v9 = *(void *)(v6 + 24);
    uint64_t v46 = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v46 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = *(void **)a2;
    int v10 = *(void **)(a2 + 8);
    if (*(void **)a2 == v10)
    {
      unint64_t v20 = *(void **)(v36 + 80);
      char v21 = *(void **)(v36 + 88);
      pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v42, (pxrInternal__aapl__pxrReserved__::TfToken *)v50);
      if (v20 != v21)
      {
        while ((*v20 & 0xFFFFFFFFFFFFFFF8) != ((unint64_t)v50[0] & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v20 == v21)
          {
            unint64_t v20 = v21;
            break;
          }
        }
      }
      uint64_t v22 = *(void **)(v36 + 88);
      if (((uint64_t)v50[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v50[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v20 != v22) {
        goto LABEL_57;
      }
    }
    else
    {
      while (1)
      {
        if ((*v11 & 0xFFFFFFFFFFFFFFF8) != 0) {
          EmptyString = (uint64_t *)((*v11 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
        }
        char v13 = sub_216D563F8(&v42);
        if ((*(void *)v13 & 0xFFFFFFFFFFFFFFF8) != 0) {
          uint64_t v14 = (uint64_t *)((*(void *)v13 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          uint64_t v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
        }
        if (*((char *)EmptyString + 23) < 0) {
          EmptyString = (uint64_t *)*EmptyString;
        }
        int v15 = *((char *)v14 + 23);
        size_t v16 = v15 >= 0 ? *((unsigned __int8 *)v14 + 23) : v14[1];
        size_t v8 = strlen((const char *)EmptyString);
        if (v16 >= v8)
        {
          size_t v17 = v8;
          uint64_t v18 = v15 >= 0 ? (const char *)v14 : (const char *)*v14;
          size_t v8 = strncmp(v18, (const char *)EmptyString, v17);
          if (!v8) {
            break;
          }
        }
        if (++v11 == v10) {
          goto LABEL_57;
        }
      }
    }
    v53[1] = 0;
    v19.n128_u64[0] = 0x7FF8000000000000;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get((uint64_t)&v42, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v53, v19))
    {
      int v24 = sub_216D563F8(&v42);
      if ((*(void *)v24 & 0xFFFFFFFFFFFFFFF8) != 0) {
        int v25 = (uint64_t *)((*(void *)v24 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        int v25 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v24);
      }
      uint64_t v33 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a3, (long long *)v25);
      sub_2168EC6DC(v33, v53);
    }
    else if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v42, v23))
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeOutput::UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v38, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v42);
      pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes((pxrInternal__aapl__pxrReserved__::UsdShadeUtils *)&v38, 0, (uint64_t)v50);
      if ((v41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v40 + 1);
      sub_21697C414(&v40);
      if (v39) {
        sub_216D16E0C(v39);
      }
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      unint64_t v40 = 0;
      if (v52 >= 2) {
        uint64_t v26 = (void ***)v50[0];
      }
      else {
        uint64_t v26 = v50;
      }
      if (v51)
      {
        uint64_t v27 = 32 * v51;
        do
        {
          int v28 = sub_216D2F758((uint64_t)v26);
          int v29 = v39;
          if ((unint64_t)v39 >= v40)
          {
            uint64_t v30 = (atomic_ullong *)sub_216981B30((uint64_t *)&v38, v28);
          }
          else
          {
            sub_216981010(v39, v28);
            sub_21698105C((_DWORD *)v29 + 1, (_DWORD *)v28 + 1);
            uint64_t v30 = v29 + 1;
          }
          uint64_t v39 = v30;
          v26 += 4;
          v27 -= 32;
        }
        while (v27);
      }
      v49[1] = (unsigned int *)&off_26C756D88;
      sub_2169DC54C(v49, &v38);
      uint64_t v31 = sub_216D563F8(&v42);
      if ((*(void *)v31 & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v32 = (uint64_t *)((*(void *)v31 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v32 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v31);
      }
      uint64_t v34 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a3, (long long *)v32);
      sub_2168ED33C(v34, v49);
      sub_2168EE084((uint64_t)v49);
      v49[0] = (unsigned int *)&v38;
      sub_216981168((void ***)v49);
      sub_216F80A24((uint64_t)v50);
    }
    sub_2168EE084((uint64_t)v53);
LABEL_57:
    if ((v46 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v45);
    sub_21697C414(&v44);
    if (v43) {
      sub_216D16E0C(v43);
    }
    v6 += 32;
  }
  v50[0] = (void **)&v47;
  sub_216D6CFF8(v50);
}

void sub_216FC8D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28)
{
  a28 = (void **)&a23;
  sub_216D6CFF8(&a28);
  _Unwind_Resume(a1);
}

_DWORD *sub_216FC8DC4(uint64_t a1)
{
  sub_2168EBBB8((void ***)(a1 + 48), 0);
  uint64_t v2 = *(void *)(a1 + 40);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

uint64_t sub_216FC8E50(uint64_t a1)
{
  sub_2168EBBB8((void ***)(a1 + 128), 0);
  sub_2169B2E0C((void *)(a1 + 88));
  sub_2169B2E0C((void *)(a1 + 48));
  uint64_t v3 = (void **)(a1 + 24);
  sub_216FC8F00(&v3);
  uint64_t v3 = (void **)a1;
  sub_216FC9024(&v3);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdRenderComputeNamespacedSettings(pxrInternal__aapl__pxrReserved__::UsdPrim *a1@<X0>, uint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__::VtDictionary *a3@<X8>)
{
  *(void *)a3 = 0;
  sub_216FC88FC(a1, a2, a3);
}

void sub_216FC8EE8(_Unwind_Exception *a1)
{
  sub_2168EBBB8(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216FC8F00(void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    char v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_216FC8F98((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_216FC8F98(uint64_t a1, uint64_t a2)
{
  sub_2168EBBB8((void ***)(a2 + 48), 0);
  uint64_t v3 = *(void *)(a2 + 40);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 4));

  return sub_21697C414((_DWORD *)a2);
}

void sub_216FC9024(void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    char v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = sub_216FC9248((uint64_t)(v4 - 28));
      while (v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216FC90A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_216981010((_DWORD *)a1, (_DWORD *)a2);
  sub_21698105C(v4 + 1, (_DWORD *)(a2 + 4));
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_216981010((_DWORD *)(a1 + 24), (_DWORD *)(a2 + 24));
  sub_21698105C((_DWORD *)(a1 + 28), (_DWORD *)(a2 + 28));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 48) &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v8 = *(_OWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = v9;
  *(_OWORD *)(a1 + 56) = v8;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216863490((void *)(a1 + 80), *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a1 + 104), (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(a2 + 104));
  return a1;
}

void sub_216FC91CC(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 88) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void *)(v1 + 48);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754(v2);
  uint64_t v7 = *(void *)(v1 + 16);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *(void *)(v1 + 8);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754((_DWORD *)v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_216FC9248(uint64_t a1)
{
  sub_2168EBBB8((void ***)(a1 + 104), 0);
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v4 = *(void *)(a1 + 16);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

uint64_t sub_216FC9300(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  size_t v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)sub_2167B421C(v7, v9);
  }
  else {
    int v10 = 0;
  }
  char v13 = v10;
  uint64_t v14 = &v10[56 * v4];
  size_t v16 = &v10[56 * v9];
  sub_216FC9420((uint64_t)v14, a2);
  int v15 = v14 + 56;
  sub_216FC9550(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216FC9780(&v13);
  return v11;
}

void sub_216FC940C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216FC9780((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216FC9420(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_216981010((_DWORD *)a1, (_DWORD *)a2);
  sub_21698105C(v4 + 1, (_DWORD *)(a2 + 4));
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  if (*(char *)(a2 + 39) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 16), *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v6;
  }
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 40) &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a1 + 48), (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(a2 + 48));
  return a1;
}

void sub_216FC94F4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754((_DWORD *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216FC9550(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216FC95C8((uint64_t)(a1 + 2), a1[1], (__n128 *)a1[1], *a1, (__n128 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216FC95C8(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t a4, __n128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      unint64_t v9 = (__n128 *)((char *)v9 - 56);
      sub_216FC9680(a1, (__n128 *)(v7 - 56), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 56;
      *((void *)&v16 + 1) -= 56;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216FC96F4((uint64_t)v13);
  return v11;
}

__n128 sub_216FC9680(uint64_t a1, __n128 *a2, __n128 *a3)
{
  sub_21697D878(a2, a3);
  sub_21697D8B4(&a2->n128_u32[1], &a3->n128_u32[1]);
  a2->n128_u64[1] = a3->n128_u64[1];
  a3->n128_u64[1] = 0;
  __n128 result = a3[1];
  a2[2].n128_u64[0] = a3[2].n128_u64[0];
  a2[1] = result;
  a3[1].n128_u64[0] = 0;
  a3[1].n128_u64[1] = 0;
  a3[2].n128_u64[0] = 0;
  a2[2].n128_u64[1] = a3[2].n128_u64[1];
  unint64_t v6 = a3[3].n128_u64[0];
  a3[2].n128_u64[1] = 0;
  a3[3].n128_u64[0] = 0;
  a2[3].n128_u64[0] = v6;
  return result;
}

uint64_t sub_216FC96F4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216FC972C((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216FC972C(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      __n128 result = (uint64_t *)sub_216FC8F98(v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_216FC9780(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

_DWORD *sub_216FC97B4(_DWORD *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2) = v1 - 56;
      __n128 result = sub_216FC8F98(v4, v1 - 56);
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_216FC97FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x249249249249249) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x124924924924924) {
    unint64_t v9 = 0x249249249249249;
  }
  else {
    unint64_t v9 = v5;
  }
  size_t v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)sub_216C02804(v7, v9);
  }
  else {
    int v10 = 0;
  }
  char v13 = v10;
  char v14 = &v10[112 * v4];
  long long v16 = &v10[112 * v9];
  sub_216FC90A8((uint64_t)v14, a2);
  long long v15 = v14 + 112;
  sub_216FC991C(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216FC9A70((uint64_t)&v13);
  return v11;
}

void sub_216FC9908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216FC9A70((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216FC991C(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  if (v4 != *a1)
  {
    do
    {
      v6 -= 112;
      v4 -= 112;
      sub_216FC99BC((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

double sub_216FC99BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_21697D878((_DWORD *)a2, (_DWORD *)a3);
  sub_21697D8B4((_DWORD *)(a2 + 4), (_DWORD *)(a3 + 4));
  *(void *)(a2 + 8) = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = 0;
  sub_21697D878((_DWORD *)(a2 + 24), (_DWORD *)(a3 + 24));
  sub_21697D8B4((_DWORD *)(a2 + 28), (_DWORD *)(a3 + 28));
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(void *)(a3 + 48) = 0;
  uint64_t v5 = *(void *)(a3 + 72);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
  *(void *)(a2 + 72) = v5;
  *(void *)(a2 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a3 + 80);
  *(void *)(a2 + 96) = *(void *)(a3 + 96);
  uint64_t v7 = *(void *)(a3 + 104);
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(void *)(a2 + 104) = v7;
  return result;
}

uint64_t sub_216FC9A70(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 112;
    sub_216FC9248(i - 112);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *pxrInternal__aapl__pxrReserved__::UsdRenderTokensType::UsdRenderTokensType(pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *this)
{
  uint64_t v103 = *MEMORY[0x263EF8340];
  uint64_t v55 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "adjustApertureHeight", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v55, "adjustApertureWidth", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "adjustPixelAspectRatio", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "aspectRatioConformPolicy", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "camera", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "collection:renderVisibility:includeRoot", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "color3f", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "command", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "cropAperture", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "dataType", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "dataWindowNDC", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "denoise:enable", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "denoise:pass", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "disableDepthOfField", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "disableMotionBlur", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "expandAperture", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "fileName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "full", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "includedPurposes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "inputPasses", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "instantaneousShutter", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 168, "intrinsic", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 176, "lpe", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 184, "materialBindingPurposes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 192, "orderedVars", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 200, "passType", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 208, "pixelAspectRatio", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 216, "preview", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 224, "primvar", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 232, "productName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 240, "products", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 248, "productType", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 256, "raster", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 264, "raw", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 272, "renderingColorSpace", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 280, "renderSettingsPrimPath", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 288, "renderSource", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 296, "renderVisibility", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 304, "resolution", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 312, "sourceName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 320, "sourceType", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 328, "RenderDenoisePass", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 336, "RenderPass", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 344, "RenderProduct", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 352, "RenderSettings", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 360, "RenderSettingsBase", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 368, "RenderVar", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v56 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v56 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v55;
  uint64_t v57 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v58 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v58 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v59 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v59 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v60 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v60 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v61 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v61 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v62 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v62 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v63 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v63 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v64 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v64 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v65 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v65 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v66 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v66 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v67 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v67 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v68 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v68 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v69 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v69 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v70 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v70 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v71 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v71 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v72 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v72 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v73 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v73 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v74 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v74 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v21 = *((void *)this + 19);
  uint64_t v75 = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v75 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = *((void *)this + 20);
  uint64_t v76 = v22;
  if ((v22 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v76 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v23 = *((void *)this + 21);
  uint64_t v77 = v23;
  if ((v23 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v77 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v24 = *((void *)this + 22);
  uint64_t v78 = v24;
  if ((v24 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v78 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v25 = *((void *)this + 23);
  uint64_t v79 = v25;
  if ((v25 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v79 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v26 = *((void *)this + 24);
  uint64_t v80 = v26;
  if ((v26 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v80 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v27 = *((void *)this + 25);
  uint64_t v81 = v27;
  if ((v27 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v81 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v28 = *((void *)this + 26);
  uint64_t v82 = v28;
  if ((v28 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v82 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v29 = *((void *)this + 27);
  uint64_t v83 = v29;
  if ((v29 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v83 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v30 = *((void *)this + 28);
  uint64_t v84 = v30;
  if ((v30 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v84 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v31 = *((void *)this + 29);
  uint64_t v85 = v31;
  if ((v31 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v85 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v32 = *((void *)this + 30);
  uint64_t v86 = v32;
  if ((v32 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v86 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v33 = *((void *)this + 31);
  uint64_t v87 = v33;
  if ((v33 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v87 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v34 = *((void *)this + 32);
  uint64_t v88 = v34;
  if ((v34 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v88 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v35 = *((void *)this + 33);
  uint64_t v89 = v35;
  if ((v35 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v89 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v36 = *((void *)this + 34);
  uint64_t v90 = v36;
  if ((v36 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v90 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v37 = *((void *)this + 35);
  uint64_t v91 = v37;
  if ((v37 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v91 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v38 = *((void *)this + 36);
  uint64_t v92 = v38;
  if ((v38 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v92 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v39 = *((void *)this + 37);
  uint64_t v93 = v39;
  if ((v39 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v93 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v40 = *((void *)this + 38);
  uint64_t v94 = v40;
  if ((v40 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v94 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v41 = *((void *)this + 39);
  uint64_t v95 = v41;
  if ((v41 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v95 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v42 = *((void *)this + 40);
  uint64_t v96 = v42;
  if ((v42 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v96 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v43 = *((void *)this + 41);
  uint64_t v97 = v43;
  if ((v43 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v97 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v44 = *((void *)this + 42);
  uint64_t v98 = v44;
  if ((v44 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v98 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v45 = *((void *)this + 43);
  uint64_t v99 = v45;
  if ((v45 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v99 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v46 = *((void *)this + 44);
  uint64_t v100 = v46;
  if ((v46 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v100 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v47 = *((void *)this + 45);
  uint64_t v101 = v47;
  if ((v47 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v101 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v48 = *((void *)this + 46);
  uint64_t v102 = v48;
  if ((v48 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v102 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  int v49 = (char *)operator new(0x178uLL);
  uint64_t v50 = 0;
  *((void *)this + 47) = v49;
  *((void *)this + 48) = v49;
  *((void *)this + 49) = v49 + 376;
  do
  {
    uint64_t v51 = *(uint64_t *)((char *)&v56 + v50);
    *(void *)&v49[v50] = v51;
    if ((v51 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v49[v50] &= 0xFFFFFFFFFFFFFFF8;
    }
    v50 += 8;
  }
  while (v50 != 376);
  *((void *)this + 48) = v49 + 376;
  for (uint64_t i = 368; i != -8; i -= 8)
  {
    uint64_t v53 = *(uint64_t *)((char *)&v56 + i);
    if ((v53 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_216FCA8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41,void *a42,void *a43,void *a44,void *a45,void *a46,void *a47,void **a48,uint64_t a49,char a50)
{
  sub_216889A04(&a48);
  uint64_t v60 = 368;
  while (1)
  {
    uint64_t v61 = *(void *)(&a50 + v60);
    if ((v61 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v60 -= 8;
    if (v60 == -8)
    {
      if ((*v51 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v59 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v58 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v57 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v56 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v55 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v54 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v53 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v52 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a42 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a43 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a44 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a45 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a46 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a47 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v50 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_216FCAE58()
{
}

void sub_216FCAE60()
{
}

void sub_216FCAE68()
{
}

void sub_216FCAE70()
{
}

void sub_216FCAE78()
{
}

void sub_216FCAE80()
{
}

void sub_216FCAE88()
{
}

void sub_216FCAE90()
{
}

void sub_216FCAE98()
{
}

void sub_216FCAEA0()
{
}

void sub_216FCAEA8()
{
}

void sub_216FCAEB0()
{
}

void sub_216FCAEB8()
{
}

void sub_216FCAEC0()
{
}

void sub_216FCAEC8()
{
}

void sub_216FCAED0()
{
}

void sub_216FCAED8()
{
}

void sub_216FCAEE0()
{
}

void sub_216FCAEE8()
{
}

void sub_216FCAEF0()
{
}

void sub_216FCAEF8()
{
}

void sub_216FCAF00()
{
}

void sub_216FCAF08()
{
}

void sub_216FCAF10()
{
}

void sub_216FCAF18()
{
}

void sub_216FCAF20()
{
}

void sub_216FCAF28()
{
}

void sub_216FCAF30()
{
}

void sub_216FCAF38()
{
}

void sub_216FCAF40()
{
}

void sub_216FCAF48()
{
}

void sub_216FCAF50()
{
}

void sub_216FCAF58()
{
}

void sub_216FCAF60()
{
}

void sub_216FCAF68()
{
}

void sub_216FCAF70()
{
}

void sub_216FCAF78()
{
}

void sub_216FCAF80()
{
}

void sub_216FCAF8C()
{
  sub_216FCBCD4();
  sub_216779094(__p, "RenderVar");
  sub_216FCBE00((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216FCAFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderVar::~UsdRenderVar(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this)
{
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderVar::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EE98;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdRender/var.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdRenderVar pxrInternal__aapl__pxrReserved__::UsdRenderVar::Get(const UsdStagePtr &,"
                            " const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EE98;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FCB1A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderVar::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94938, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94938))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B94930, "RenderVar");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B94930, &dword_216758000);
    __cxa_guard_release(&qword_267B94938);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B94930, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EE98;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdRender/var.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdRenderVar pxrInternal__aapl__pxrReserved__::UsdRenderVar::Define(const UsdStagePtr"
                            " &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76EE98;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FCB3B4(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderVar::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderVar::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94948, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94948))
  {
    __cxa_guard_release(&qword_267B94948);
  }
  return &qword_267B94940;
}

void sub_216FCB45C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRenderVar::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94958, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdRenderVar *)__cxa_guard_acquire(&qword_267B94958);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdRenderVar::_GetStaticTfType(v2);
      byte_267B94950 = sub_216D16508((char *)&qword_267B94940, v3, v4);
      __cxa_guard_release(&qword_267B94958);
    }
  }
  return byte_267B94950;
}

void sub_216FCB4DC(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderVar::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this)
{
  return &qword_267B94940;
}

void pxrInternal__aapl__pxrReserved__::UsdRenderVar::GetDataTypeAttr(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    uint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 72), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FCB5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderVar::CreateDataTypeAttr(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8) {
    uint64_t v8 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 72), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderVar::GetSourceNameAttr(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    uint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 312), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FCB71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderVar::CreateSourceNameAttr(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8) {
    uint64_t v8 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 312), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 80), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRenderVar::GetSourceTypeAttr(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v3) {
    uint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v3 + 320), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FCB884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRenderVar::CreateSourceTypeAttr(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  if (!v8) {
    uint64_t v8 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)((char *)v8 + 320), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRenderVar::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdRenderVar *this)
{
  int v1 = (int)this;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94978, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94978))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v3) {
      uint64_t v3 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    }
    uint64_t v4 = *((void *)v3 + 9);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v5) {
      uint64_t v5 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    }
    uint64_t v6 = *((void *)v5 + 39);
    uint64_t v13 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v13 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdRenderTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    if (!v7) {
      int v7 = sub_216FC3440(&pxrInternal__aapl__pxrReserved__::UsdRenderTokens);
    }
    uint64_t v8 = *((void *)v7 + 40);
    uint64_t v14 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B94960, &v12, 3uLL);
    for (uint64_t i = 16; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94960, &dword_216758000);
    __cxa_guard_release(&qword_267B94978);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94998, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94998))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_216FCBC1C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94980, &dword_216758000);
    __cxa_guard_release(&qword_267B94998);
  }
  if (v1) {
    return &qword_267B94980;
  }
  else {
    return &qword_267B94960;
  }
}

void sub_216FCBB98(_Unwind_Exception *a1)
{
}

void *sub_216FCBC1C(uint64_t **a1)
{
  qword_267B94988 = 0;
  unk_267B94990 = 0;
  qword_267B94980 = 0;
  sub_216973388((char **)&qword_267B94980, ((unk_267B94968 - qword_267B94960) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B94980, (void *)qword_267B94988, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B94980, (void *)qword_267B94988, (uint64_t *)qword_267B94960, unk_267B94968, (unk_267B94968 - qword_267B94960) >> 3);
}

void sub_216FCBCB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216FCBCD4()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F1B0B4((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FCBDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FCBE00(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216FCBE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *pxrInternal__aapl__pxrReserved__::UsdHydraTokensType::UsdHydraTokensType(pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *this)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v38 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "black", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v38, "clamp", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "displayLook:bxdf", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "faceIndex", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "faceOffset", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "frame", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "HwPrimvar_1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "HwPtexTexture_1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "HwUvTexture_1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "hydraGenerativeProcedural", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "inputs:file", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "inputs:varname", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "linear", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "linearMipmapLinear", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "linearMipmapNearest", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "magFilter", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "minFilter", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "mirror", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "nearest", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "nearestMipmapLinear", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "nearestMipmapNearest", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 168, "primvars:hdGp:proceduralType", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 176, "proceduralSystem", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 184, "repeat", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 192, "textureMemory", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 200, "useMetadata", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 208, "uv", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 216, "wrapS", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 224, "wrapT", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 232, "HydraGenerativeProceduralAPI", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v39 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v39 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v38;
  uint64_t v40 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v40 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v41 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v41 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v42 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v42 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v43 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v43 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v44 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v44 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v45 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v46 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v46 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v47 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v47 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v48 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v49 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v49 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v50 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v50 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v51 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v51 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v52 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v52 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v53 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v53 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v54 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v54 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v55 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v55 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v56 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v56 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v57 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v21 = *((void *)this + 19);
  uint64_t v58 = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v58 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = *((void *)this + 20);
  uint64_t v59 = v22;
  if ((v22 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v59 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v23 = *((void *)this + 21);
  uint64_t v60 = v23;
  if ((v23 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v60 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v24 = *((void *)this + 22);
  uint64_t v61 = v24;
  if ((v24 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v61 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v25 = *((void *)this + 23);
  uint64_t v62 = v25;
  if ((v25 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v62 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v26 = *((void *)this + 24);
  uint64_t v63 = v26;
  if ((v26 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v63 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v27 = *((void *)this + 25);
  uint64_t v64 = v27;
  if ((v27 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v64 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v28 = *((void *)this + 26);
  uint64_t v65 = v28;
  if ((v28 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v65 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v29 = *((void *)this + 27);
  uint64_t v66 = v29;
  if ((v29 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v66 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v30 = *((void *)this + 28);
  uint64_t v67 = v30;
  if ((v30 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v67 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v31 = *((void *)this + 29);
  uint64_t v68 = v31;
  if ((v31 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v68 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  uint64_t v32 = (char *)operator new(0xF0uLL);
  uint64_t v33 = 0;
  *((void *)this + 30) = v32;
  *((void *)this + 31) = v32;
  *((void *)this + 32) = v32 + 240;
  do
  {
    uint64_t v34 = *(uint64_t *)((char *)&v39 + v33);
    *(void *)&v32[v33] = v34;
    if ((v34 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v32[v33] &= 0xFFFFFFFFFFFFFFF8;
    }
    v33 += 8;
  }
  while (v33 != 240);
  *((void *)this + 31) = v32 + 240;
  for (uint64_t i = 232; i != -8; i -= 8)
  {
    uint64_t v36 = *(uint64_t *)((char *)&v39 + i);
    if ((v36 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_216FCC80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void **a31,uint64_t a32,char a33)
{
  sub_216889A04(&a31);
  uint64_t v43 = 232;
  while (1)
  {
    uint64_t v44 = *(void *)(&a33 + v43);
    if ((v44 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v43 -= 8;
    if (v43 == -8)
    {
      if ((*v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v42 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_216FCCBAC()
{
}

void sub_216FCCBB4()
{
}

void sub_216FCCBBC()
{
}

void sub_216FCCBC4()
{
}

void sub_216FCCBCC()
{
}

void sub_216FCCBD4()
{
}

void sub_216FCCBDC()
{
}

void sub_216FCCBE4()
{
}

void sub_216FCCBEC()
{
}

void sub_216FCCBF4()
{
}

void sub_216FCCBFC()
{
}

void sub_216FCCC04()
{
}

void sub_216FCCC0C()
{
}

void sub_216FCCC14()
{
}

void sub_216FCCC1C()
{
}

void sub_216FCCC24()
{
}

void sub_216FCCC2C()
{
}

void sub_216FCCC34()
{
}

void sub_216FCCC3C()
{
}

void sub_216FCCC44()
{
}

void sub_216FCCC4C()
{
}

void *pxrInternal__aapl__pxrReserved__::UsdHydraDiscoveryPlugin::GetSearchURIs(pxrInternal__aapl__pxrReserved__::UsdHydraDiscoveryPlugin *this)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B949B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B949B8))
  {
    sub_216FCCD68("", (uint64_t)__p);
    sub_216A3A700((uint64_t)&unk_267B949A0, (long long *)__p, 1uLL);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))sub_216963C50, &unk_267B949A0, &dword_216758000);
    __cxa_guard_release(&qword_267B949B8);
  }
  return &unk_267B949A0;
}

void sub_216FCCD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267B949B8);
  _Unwind_Resume(a1);
}

void sub_216FCCD68(char *a1@<X0>, uint64_t a2@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B949F0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)__cxa_guard_acquire(&qword_267B949F0);
    if (v8)
    {
      pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v8);
      sub_216779094(&__p, "usdHydra");
      pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginWithName((unsigned __int8 *)&__p, &unk_267B949E0);
      if (v10 < 0) {
        operator delete(__p);
      }
      __cxa_atexit((void (*)(void *))sub_216FA1398, &unk_267B949E0, &dword_216758000);
      __cxa_guard_release(&qword_267B949F0);
    }
  }
  sub_216779094(v14, "shaders");
  sub_216779094(v12, a1);
  pxrInternal__aapl__pxrReserved__::TfStringCatPaths(v14, (uint64_t)v12, &__p);
  pxrInternal__aapl__pxrReserved__::PlugFindPluginResource((uint64_t *)&unk_267B949E0, (uint64_t)&__p, 1, (void *)a2);
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (v15 < 0) {
    operator delete((void *)v14[0]);
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (!v6)
  {
    LOBYTE(v11) = 0;
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Could not find shader resource: %s\n", v4, v5, a1, "usdHydra/discoveryPlugin.cpp", "_GetShaderResourcePath", 54, "std::string pxrInternal__aapl__pxrReserved__::_GetShaderResourcePath(const char *)", v11);
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "!path.empty()", v7);
  }
}

void sub_216FCCF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267B949F0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdHydraDiscoveryPlugin::DiscoverNodes(pxrInternal__aapl__pxrReserved__ *a1@<X0>, void *a2@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B949D8, memory_order_acquire) & 1) == 0)
  {
    a1 = (pxrInternal__aapl__pxrReserved__ *)__cxa_guard_acquire(&qword_267B949D8);
    if (a1)
    {
      sub_216FCCD68("shaderDefs.usda", (uint64_t)&qword_267B949C0);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267B949C0, &dword_216758000);
      __cxa_guard_release(&qword_267B949D8);
    }
  }
  uint64_t v2 = qword_267B949C8;
  if (byte_267B949D7 >= 0) {
    uint64_t v2 = byte_267B949D7;
  }
  if (v2)
  {
    Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
    pxrInternal__aapl__pxrReserved__::ArResolver::CreateDefaultContextForAsset((uint64_t)Resolver);
    pxrInternal__aapl__pxrReserved__::UsdStage::Open((uint64_t)&qword_267B949C0, (pxrInternal__aapl__pxrReserved__::ArResolverContext *)v41, 0, &v40);
    if (v40)
    {
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v42, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)v41);
      uint64_t v5 = pxrInternal__aapl__pxrReserved__::ArGetResolver(v4);
      pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension((uint64_t)v5);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v39);
      if (SBYTE7(v32) < 0) {
        operator delete(__p);
      }
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D57D70((uint64_t *)&v40);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v6, (uint64_t)&v26);
      UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v7);
      uint64_t v10 = *UsdPrimDefaultPredicate;
      unint64_t v9 = UsdPrimDefaultPredicate[1];
      uint64_t v11 = UsdPrimDefaultPredicate[2];
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v28)
        && ((v10 & 0x2000) != 0 || (v9 & 0x2000) == 0))
      {
        v10 |= 0x2000uLL;
        v9 &= ~0x2000uLL;
      }
      uint64_t v22 = (void *)v10;
      uint64_t v23 = (atomic_ullong *)v9;
      *(void *)&long long v24 = v11;
      sub_216D6BF84((uint64_t)&v26, (uint64_t *)&v22, (uint64_t)&__p);
      if ((BYTE8(v28) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v28 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 1);
      sub_21697C414(&v28);
      if (v27) {
        sub_216D16E0C(v27);
      }
      uint64_t v26 = __p;
      sub_216981010(&v27, &v31);
      sub_21698105C((_DWORD *)&v27 + 1, (_DWORD *)&v31 + 1);
      long long v28 = v32;
      uint64_t v29 = v33;
      uint64_t v22 = (void *)v34;
      sub_216981010(&v23, &v35);
      sub_21698105C((_DWORD *)&v23 + 1, &v36);
      long long v24 = v37;
      uint64_t v25 = v38;
      uint64_t v12 = off_26C76DE10;
      while (v26 != v22 || v27 != v23 || !sub_216D5D158((uint64_t)&v28, (uint64_t)&v24))
      {
        sub_216D6BE74((uint64_t)&v26, (uint64_t)v17);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v15, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v17);
        char v15 = &unk_26C76DDF0;
        if (v16
          && (*(unsigned char *)(v16 + 57) & 8) == 0
          && (v12((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v15) & 1) != 0)
        {
          pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefUtils::GetNodeDiscoveryResults((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v15, &v14);
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v15);
        if ((v21 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
        sub_21697C414(&v19);
        if (v18) {
          sub_216D16E0C(v18);
        }
        sub_216D6BEE8((uint64_t)&v26);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
      sub_21697C414(&v23);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
      sub_21697C414(&v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
      sub_21697C414(&v35);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
      sub_21697C414(&v31);
      if ((v39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v42);
    }
    else
    {
      std::string __p = "usdHydra/discoveryPlugin.cpp";
      uint64_t v31 = "DiscoverNodes";
      *(void *)&long long v32 = 84;
      *((void *)&v32 + 1) = "virtual NdrNodeDiscoveryResultVec pxrInternal__aapl__pxrReserved__::UsdHydraDiscoveryPlugi"
                              "n::DiscoverNodes(const Context &)";
      LOBYTE(v33) = 0;
      if (byte_267B949D7 >= 0) {
        char v13 = (const char *)&qword_267B949C0;
      }
      else {
        char v13 = (const char *)qword_267B949C0;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Could not open file '%s' on a USD stage.", v13);
    }
    sub_216E10FB8(&v40);
    std::string __p = v41;
    sub_216787968((void ***)&__p);
  }
}

void sub_216FCD4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
}

uint64_t sub_216FCD614()
{
  v0 = sub_216FCD668();

  return sub_216FCD794(v0);
}

void sub_216FCD640(pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin *a1, const void *a2)
{
  pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::~NdrDiscoveryPlugin(a1, a2);

  operator delete(v2);
}

uint64_t *sub_216FCD668()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216BA541C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FCD748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_216FCD794(uint64_t *a1)
{
  uint64_t v2 = operator new(8uLL);
  *uint64_t v2 = &unk_26C76EF38;
  uint64_t v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  uint64_t result = (uint64_t)v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_216FCD820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324398(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_216FCD844(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);

  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216FCD86C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x18uLL);
  pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::NdrDiscoveryPlugin((uint64_t)v2);
  *uint64_t v2 = &unk_26C76EEF0;
  *a1 = v2;
  char v4 = 0;
  return sub_216FCD8E4(&v4);
}

void sub_216FCD8D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216FCD8E4(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

uint64_t sub_216FCD914(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    int v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0x84BDA12F684BDA13 * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if ((uint64_t)(0x84BDA12F684BDA13 * ((uint64_t)(v12 - a2) >> 3)) >= a5)
      {
        uint64_t v21 = (uint64_t)&a3[27 * a5];
      }
      else
      {
        uint64_t v21 = (uint64_t)&a3[(uint64_t)(v12 - a2) >> 3];
        a1[1] = sub_216FCDCB4(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_216FCDB1C((uint64_t)a1, v5, v12, v5 + 216 * a5);
      sub_216FCDD98((uint64_t)v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x7B425ED097B425EDLL * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x12F684BDA12F684) {
        sub_21677CB10();
      }
      unint64_t v15 = 0x84BDA12F684BDA13 * ((a2 - v13) >> 3);
      unint64_t v16 = 0x84BDA12F684BDA13 * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x97B425ED097B42) {
        unint64_t v18 = 0x12F684BDA12F684;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        int v19 = (char *)sub_216BA76E0(v9, v18);
      }
      else {
        int v19 = 0;
      }
      uint64_t v22 = (uint64_t)&v19[216 * v15];
      v26[0] = v19;
      v26[1] = v22;
      uint64_t v27 = v22;
      long long v28 = &v19[216 * v18];
      uint64_t v23 = 216 * a5;
      uint64_t v24 = v22 + 216 * a5;
      do
      {
        sub_216BAC8B8(v22, v7);
        v22 += 216;
        v7 += 27;
        v23 -= 216;
      }
      while (v23);
      uint64_t v27 = v24;
      uint64_t v5 = sub_216FCDBC0(a1, v26, v5);
      sub_216BA7820((uint64_t)v26);
    }
  }
  return v5;
}

void sub_216FCDAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FCDB1C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      sub_216BA772C(a1 + 16, v8, v10);
      v10 += 216;
      v8 += 216;
    }
    while (v10 < a3);
  }
  *(void *)(a1 + 8) = v8;

  return sub_216FCDD38(a2, v7, v6);
}

uint64_t sub_216FCDBC0(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = *a1;
  uint64_t v9 = v6;
  if (*a1 != a3)
  {
    uint64_t v10 = a3;
    uint64_t v9 = a2[1];
    do
    {
      v9 -= 216;
      v10 -= 216;
      sub_216BA772C(v7, v9, v10);
    }
    while (v10 != v8);
  }
  a2[1] = v9;
  uint64_t v11 = a1[1];
  uint64_t v12 = a2[2];
  if (v11 != v3)
  {
    do
    {
      sub_216BA772C(v7, v12, v3);
      v3 += 216;
      v12 += 216;
    }
    while (v3 != v11);
    uint64_t v9 = a2[1];
  }
  a2[2] = v12;
  uint64_t v13 = *a1;
  *a1 = v9;
  a2[1] = v13;
  uint64_t v14 = a1[1];
  a1[1] = a2[2];
  a2[2] = v14;
  uint64_t v15 = a1[2];
  a1[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_216FCDCB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_216BAC8B8(a4 + v7, (uint64_t *)(a2 + v7));
      v7 += 216;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_216FCDD14(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 216;
    do
    {
      sub_216BA5AC4(v4 + v2);
      v2 -= 216;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FCDD38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      v6 -= 216;
      a3 -= 216;
      sub_216BA4F9C(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t sub_216FCDD98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_216FCDDF8(a3, v4);
      v4 += 216;
      a3 += 216;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_216FCDDF8(uint64_t a1, uint64_t a2)
{
  sub_2168D2318((void *)a1, (void *)a2);
  char v4 = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = v4;
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  sub_2168D2318((void *)(a1 + 48), (void *)(a2 + 48));
  sub_2168D2318((void *)(a1 + 56), (void *)(a2 + 56));
  sub_2168D2318((void *)(a1 + 64), (void *)(a2 + 64));
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
    sub_216FCDEC0((void *)(a1 + 144), *(const std::string **)(a2 + 160), 0);
  }
  std::string::operator=((std::string *)(a1 + 184), (const std::string *)(a2 + 184));
  sub_2168D2318((void *)(a1 + 208), (void *)(a2 + 208));
  return a1;
}

void sub_216FCDEC0(void *a1, const std::string *a2, const std::string *a3)
{
  char v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = (std::string *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = v8;
    }
    else
    {
      do
      {
        sub_2168D2318(&v8->__r_.__value_.__r.__words[2], &v4->__r_.__value_.__r.__words[2]);
        std::string::operator=(v8 + 1, v4 + 1);
        uint64_t v10 = (std::string *)v8->__r_.__value_.__r.__words[0];
        sub_2168D22B4(a1, v8);
        char v4 = (const std::string *)v4->__r_.__value_.__r.__words[0];
        if (!v10) {
          break;
        }
        uint64_t v8 = v10;
      }
      while (v4 != a3);
    }
    sub_216BA5664((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    sub_216FCDFCC(a1, (uint64_t *)&v4->__r_.__value_.__r.__words[2]);
    char v4 = (const std::string *)v4->__r_.__value_.__r.__words[0];
  }
}

void sub_216FCDF9C(void *a1)
{
  __cxa_begin_catch(a1);
  sub_216BA5664(v1, v2);
  __cxa_rethrow();
}

void sub_216FCDFB8(_Unwind_Exception *a1)
{
}

void *sub_216FCDFCC(void *a1, uint64_t *a2)
{
  sub_216FCE038((uint64_t)a1, a2, (uint64_t)v5);
  uint64_t v3 = sub_2168D22B4(a1, v5[0]);
  v5[0] = 0;
  sub_216BA75E8((uint64_t)v5, 0);
  return v3;
}

void sub_216FCE020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BA75E8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_216FCE038@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *uint64_t v6 = 0;
  v6[1] = 0;
  uint64_t result = sub_216BA754C(v6 + 2, a2);
  *(unsigned char *)(a3 + 16) = 1;
  v6[1] = bswap64(0x9E3779B97F4A7C55 * (v6[2] & 0xFFFFFFFFFFFFFFF8));
  return result;
}

void sub_216FCE0B8(_Unwind_Exception *a1)
{
  sub_216BA75E8(v1, 0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::~UsdHydraGenerativeProceduralAPI(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76EF78;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    BOOL v9 = "usdHydra/generativeProceduralAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdHydraGenerativeProceduralAPI pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeP"
                            "roceduralAPI::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76EF78;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FCE28C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *this)
{
  return 5;
}

uint64_t sub_216FCE2B4(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B949F8, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_216FCE49C(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76EF78;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76EF78;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_216FCE488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216FCE49C(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B949F8, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdHydraGenerativeProceduralAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94A00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94A00))
  {
    __cxa_guard_release(&qword_267B94A00);
  }
  return &qword_267B949F8;
}

void sub_216FCE5D0(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94A10, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *)__cxa_guard_acquire(&qword_267B94A10);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::_GetStaticTfType(v2);
      byte_267B94A08 = sub_216D16508((char *)&qword_267B949F8, v3, v4);
      __cxa_guard_release(&qword_267B94A10);
    }
  }
  return byte_267B94A08;
}

void sub_216FCE650(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *this)
{
  return &qword_267B949F8;
}

void pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::GetProceduralTypeAttr(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
  if (!v3) {
    uint64_t v3 = sub_216FCED98(&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)((char *)v3 + 168), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FCE728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::CreateProceduralTypeAttr(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
  if (!v8) {
    uint64_t v8 = sub_216FCED98(&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)((char *)v8 + 168), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::GetProceduralSystemAttr(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
  if (!v3) {
    uint64_t v3 = sub_216FCED98(&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)((char *)v3 + 176), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FCE890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::CreateProceduralSystemAttr(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
  if (!v8) {
    uint64_t v8 = sub_216FCED98(&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)((char *)v8 + 176), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdHydraGenerativeProceduralAPI *this)
{
  int v1 = (int)this;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94A30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94A30))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
    if (!v3) {
      uint64_t v3 = sub_216FCED98(&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
    }
    uint64_t v4 = *((void *)v3 + 21);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0)
    {
      int v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v12 = (uint64_t)v5;
      }
    }
    int v6 = (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
    if (!v6) {
      int v6 = sub_216FCED98(&pxrInternal__aapl__pxrReserved__::UsdHydraTokens);
    }
    int v7 = (atomic_uint *)*((void *)v6 + 22);
    char v13 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        char v13 = v8;
      }
    }
    sub_216D30CFC(&qword_267B94A18, &v12, 2uLL);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94A18, &dword_216758000);
    __cxa_guard_release(&qword_267B94A30);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94A50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94A50))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_216FCEBB0((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94A38, &dword_216758000);
    __cxa_guard_release(&qword_267B94A50);
  }
  if (v1) {
    return &qword_267B94A38;
  }
  else {
    return &qword_267B94A18;
  }
}

void sub_216FCEB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B94A30);
  _Unwind_Resume(a1);
}

void *sub_216FCEBB0(uint64_t **a1)
{
  qword_267B94A40 = 0;
  unk_267B94A48 = 0;
  qword_267B94A38 = 0;
  sub_216973388((char **)&qword_267B94A38, ((unk_267B94A20 - qword_267B94A18) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B94A38, (void *)qword_267B94A40, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B94A38, (void *)qword_267B94A40, (uint64_t *)qword_267B94A18, unk_267B94A20, (unk_267B94A20 - qword_267B94A18) >> 3);
}

void sub_216FCEC48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216FCEC68()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FCED48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *sub_216FCED98(atomic_ullong *a1)
{
  uint64_t result = sub_216FCEDE0();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      char v4 = (void *)sub_216FCEE24((uint64_t)result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *sub_216FCEDE0()
{
  v0 = (pxrInternal__aapl__pxrReserved__::UsdHydraTokensType *)operator new(0x108uLL);
  pxrInternal__aapl__pxrReserved__::UsdHydraTokensType::UsdHydraTokensType(v0);
  return v0;
}

void sub_216FCEE10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216FCEE24(uint64_t a1)
{
  long long v32 = (void **)(a1 + 240);
  sub_216889A04(&v32);
  uint64_t v2 = *(void *)(a1 + 232);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 224);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *(void *)(a1 + 216);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(void *)(a1 + 208);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *(void *)(a1 + 200);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *(void *)(a1 + 192);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *(void *)(a1 + 184);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *(void *)(a1 + 176);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *(void *)(a1 + 168);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *(void *)(a1 + 160);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *(void *)(a1 + 152);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *(void *)(a1 + 144);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *(void *)(a1 + 136);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *(void *)(a1 + 128);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *(void *)(a1 + 120);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *(void *)(a1 + 112);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *(void *)(a1 + 104);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *(void *)(a1 + 96);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *(void *)(a1 + 88);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *(void *)(a1 + 80);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *(void *)(a1 + 72);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v23 = *(void *)(a1 + 64);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *(void *)(a1 + 56);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = *(void *)(a1 + 48);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = *(void *)(a1 + 40);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = *(void *)(a1 + 32);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = *(void *)(a1 + 24);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v29 = *(void *)(a1 + 16);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = *(void *)(a1 + 8);
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::UsdRi_GetRiType@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "");
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRi_GetUsdType(void **a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94AA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94AA8))
  {
    qword_267B94A58[0] = (uint64_t)"color";
    uint64_t v18 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v18) {
      uint64_t v18 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    qword_267B94A60 = *((void *)v18 + 35);
    *(void *)algn_267B94A68 = "vector";
    uint64_t v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v19) {
      uint64_t v19 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    qword_267B94A70 = *((void *)v19 + 30);
    *(void *)algn_267B94A78 = "normal";
    uint64_t v20 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v20) {
      uint64_t v20 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    qword_267B94A80 = *((void *)v20 + 33);
    *(void *)algn_267B94A88 = "point";
    uint64_t v21 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v21) {
      uint64_t v21 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    qword_267B94A90 = *((void *)v21 + 27);
    *(void *)algn_267B94A98 = "matrix";
    uint64_t v22 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v22) {
      uint64_t v22 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    qword_267B94AA0 = *((void *)v22 + 45);
    __cxa_guard_release(&qword_267B94AA8);
  }
  uint64_t v2 = 0;
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    uint64_t v4 = (char *)a1;
  }
  else {
    uint64_t v4 = (char *)*a1;
  }
  if (v3 >= 0) {
    int64_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    int64_t v5 = (int64_t)a1[1];
  }
  uint64_t v6 = &v4[v5];
  do
  {
    uint64_t v7 = (const char *)qword_267B94A58[2 * v2];
    int64_t v8 = strlen(v7);
    if (!v8) {
      return qword_267B94A58[2 * v2 + 1];
    }
    int64_t v9 = v8;
    if (v5 >= v8)
    {
      int v10 = *v7;
      int64_t v11 = v5;
      uint64_t v12 = v4;
      do
      {
        uint64_t v13 = v11 - v9;
        if (v13 == -1) {
          break;
        }
        uint64_t v14 = (char *)memchr(v12, v10, v13 + 1);
        if (!v14) {
          break;
        }
        uint64_t v15 = v14;
        if (!memcmp(v14, v7, v9))
        {
          if (v15 == v6 || v15 - v4 == -1) {
            break;
          }
          return qword_267B94A58[2 * v2 + 1];
        }
        uint64_t v12 = v15 + 1;
        int64_t v11 = v6 - (v15 + 1);
      }
      while (v11 >= v9);
    }
    ++v2;
  }
  while (v2 != 5);
  uint64_t v17 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v17) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v23);
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindOrCreateType(v17, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v23);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216FCF3C8(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::~UsdRiMaterialAPI(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76EFD0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    int64_t v9 = "usdRi/materialAPI.cpp";
    int v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdRiMaterialAPI pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::Get(const UsdSta"
                            "gePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    int v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76EFD0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FCF5BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this)
{
  return 5;
}

uint64_t sub_216FCF5E4(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94AB0, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdRiMaterialAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_216FCF7CC(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76EFD0;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76EFD0;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_216FCF7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216FCF7CC(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94AB0, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdRiMaterialAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94AB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94AB8))
  {
    __cxa_guard_release(&qword_267B94AB8);
  }
  return &qword_267B94AB0;
}

void sub_216FCF900(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94AC8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *)__cxa_guard_acquire(&qword_267B94AC8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetStaticTfType(v2);
      byte_267B94AC0 = sub_216D16508((char *)&qword_267B94AB0, v3, v4);
      __cxa_guard_release(&qword_267B94AC8);
    }
  }
  return byte_267B94AC0;
}

void sub_216FCF980(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this)
{
  return &qword_267B94AB0;
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetSurfaceAttr(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  int v3 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v3) {
    int v3 = sub_216FD16B8(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v3 + 72), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FCFA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::CreateSurfaceAttr(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v8) {
    uint64_t v8 = sub_216FD16B8(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v8 + 72), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetDisplacementAttr(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  int v3 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v3) {
    int v3 = sub_216FD16B8(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v3 + 64), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FCFBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::CreateDisplacementAttr(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v8) {
    uint64_t v8 = sub_216FD16B8(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v8 + 64), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetVolumeAttr(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  int v3 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v3) {
    int v3 = sub_216FD16B8(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v3 + 80), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FCFD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::CreateVolumeAttr(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v8) {
    uint64_t v8 = sub_216FD16B8(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v8 + 80), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this)
{
  int v1 = (int)this;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94AE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94AE8))
  {
    int v3 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
    if (!v3) {
      int v3 = sub_216FD16B8(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
    }
    uint64_t v4 = *((void *)v3 + 9);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v5 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
    if (!v5) {
      int v5 = sub_216FD16B8(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
    }
    uint64_t v6 = *((void *)v5 + 8);
    uint64_t v13 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v13 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
    if (!v7) {
      int v7 = sub_216FD16B8(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
    }
    uint64_t v8 = *((void *)v7 + 10);
    uint64_t v14 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B94AD0, &v12, 3uLL);
    for (uint64_t i = 16; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94AD0, &dword_216758000);
    __cxa_guard_release(&qword_267B94AE8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94B08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94B08))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_216FD00C0((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94AF0, &dword_216758000);
    __cxa_guard_release(&qword_267B94B08);
  }
  if (v1) {
    return &qword_267B94AF0;
  }
  else {
    return &qword_267B94AD0;
  }
}

void sub_216FD003C(_Unwind_Exception *a1)
{
}

void *sub_216FD00C0(uint64_t **a1)
{
  qword_267B94AF8 = 0;
  unk_267B94B00 = 0;
  qword_267B94AF0 = 0;
  sub_216973388((char **)&qword_267B94AF0, ((unk_267B94AD8 - qword_267B94AD0) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B94AF0, (void *)qword_267B94AF8, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B94AF0, (void *)qword_267B94AF8, (uint64_t *)qword_267B94AD0, unk_267B94AD8, (unk_267B94AD8 - qword_267B94AD0) >> 3);
}

void sub_216FD0158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetSourceShaderObject(const pxrInternal__aapl__pxrReserved__::UsdShadeOutput *a1@<X1>, int a2@<W2>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a1) & 1) == 0)
  {
    LODWORD(v15) = 1;
    uint64_t v16 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v18);
    uint64_t v19 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v15);
    *(void *)a3 = &unk_26C76DDF0;
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    goto LABEL_9;
  }
  if (a2
    && pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::IsSourceConnectionFromBaseMaterial(a1, v7))
  {
    LODWORD(v15) = 1;
    uint64_t v16 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v18);
    uint64_t v19 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v15);
    *(void *)a3 = &unk_26C76DDF0;
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
LABEL_9:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
    sub_21697C414(&v17);
    if (v16) {
      sub_216D16E0C(v16);
    }
    return;
  }
  int v10 = 1;
  char v11 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v13);
  uint64_t v14 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v15, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v10);
  uint64_t v19 = 0;
  uint64_t v15 = off_26C76D8C8;
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  if (v11) {
    sub_216D16E0C(v11);
  }
  uint64_t v9 = 0;
  int v8 = 0;
  if (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource(a1, (uint64_t)&v15, &v9, &v8))
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::UsdShadeShader(a3, (const pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v15);
  }
  else
  {
    int v10 = 1;
    char v11 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v13);
    uint64_t v14 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v10);
    *(void *)a3 = &unk_26C76DDF0;
    if ((v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
    sub_21697C414(&v12);
    if (v11) {
      sub_216D16E0C(v11);
    }
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v15);
}

void sub_216FD0464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetBxdfOutput(const pxrInternal__aapl__pxrReserved__::UsdPrim *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v5 = sub_216FD05AC();
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v5 + 24), (uint64_t)&v9);
  int IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v9, v6);
  char v8 = IsDefined;
  if (IsDefined) {
    pxrInternal__aapl__pxrReserved__::UsdShadeOutput::UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)a2, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v9);
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
  if ((v8 & 1) == 0)
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
    *(void *)(a2 + 24) = 0;
  }
}

void sub_216FD0598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_216FD05AC()
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  v0 = (char *)atomic_load((unint64_t *)&qword_267B94B10);
  if (!v0)
  {
    v0 = (char *)operator new(0x40uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "outputs:out", 0);
    uint64_t v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "ri", 0);
    int v3 = v0 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "ri:bxdf", 0);
    uint64_t v4 = v0 + 24;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 24, "outputs:ri:bxdf", 0);
    unint64_t v5 = v0 + 32;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 32, "riLook:bxdf", 0);
    uint64_t v6 = *(void ***)v0;
    uint64_t v22 = v6;
    if ((v6 & 7) != 0)
    {
      int v7 = (void **)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)v7, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v22 = v7;
      }
    }
    char v8 = (atomic_uint *)*v2;
    uint64_t v23 = v8;
    if ((v8 & 7) != 0)
    {
      uint64_t v9 = (atomic_uint *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v9, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v23 = v9;
      }
    }
    int v10 = (atomic_uint *)*v3;
    uint64_t v24 = v10;
    if ((v10 & 7) != 0)
    {
      int v11 = (atomic_uint *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v11, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v24 = v11;
      }
    }
    int v12 = (atomic_uint *)*v4;
    uint64_t v25 = v12;
    if ((v12 & 7) != 0)
    {
      uint64_t v13 = (atomic_uint *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v13, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v25 = v13;
      }
    }
    uint64_t v14 = (atomic_uint *)*v5;
    uint64_t v26 = v14;
    if ((v14 & 7) != 0)
    {
      uint64_t v15 = (atomic_uint *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v15, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v26 = v15;
      }
    }
    *((void *)v0 + 5) = 0;
    *((void *)v0 + 6) = 0;
    *((void *)v0 + 7) = 0;
    uint64_t v16 = (char *)operator new(0x28uLL);
    uint64_t v17 = 0;
    *((void *)v0 + 5) = v16;
    *((void *)v0 + 6) = v16;
    *((void *)v0 + 7) = v16 + 40;
    do
    {
      unint64_t v18 = (unint64_t)(&v22)[v17];
      *(void *)&v16[v17 * 8] = v18;
      if ((v18 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v16[v17 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v17;
    }
    while (v17 != 5);
    *((void *)v0 + 6) = v16 + 40;
    for (uint64_t i = 4; i != -1; --i)
    {
      unint64_t v20 = (unint64_t)(&v22)[i];
      if ((v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v21 = 0;
    atomic_compare_exchange_strong(&qword_267B94B10, (unint64_t *)&v21, (unint64_t)v0);
    if (v21)
    {
      uint64_t v22 = (void **)(v0 + 40);
      sub_216889A04(&v22);
      if ((*v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B94B10);
    }
  }
  return (unint64_t)v0;
}

void sub_216FD0898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v17 = 32;
  while (1)
  {
    uint64_t v18 = *(void *)(&a11 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v11);
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetSurface(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, int a2@<W1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetSurfaceOutput(this, (uint64_t)&v15);
  pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetSourceShaderObject((const pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v15, a2, a3);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_21697C414(&v17);
  if (v16) {
    sub_216D16E0C(v16);
  }
  uint64_t v6 = *((void *)a3 + 1);
  if (!v6
    || (*(unsigned char *)(v6 + 57) & 8) != 0
    || ((*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *))(*(void *)a3 + 32))(a3) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader(a3);
    sub_216D16CFC((uint64_t)&v10, (uint64_t *)this + 1, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetBxdfOutput((const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v10, (uint64_t)&v15);
    if ((v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
    sub_21697C414(&v12);
    if (v11) {
      sub_216D16E0C(v11);
    }
    int IsOutput = pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v15, v7);
    char v9 = IsOutput;
    if (IsOutput) {
      pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetSourceShaderObject((const pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v15, a2, a3);
    }
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
    sub_21697C414(&v17);
    if (v16) {
      sub_216D16E0C(v16);
    }
    if ((v9 & 1) == 0)
    {
      int v15 = 1;
      uint64_t v16 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v17);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v18);
      uint64_t v19 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v15);
      *(void *)a3 = &unk_26C76DDF0;
      if ((v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
      sub_21697C414(&v17);
      if (v16) {
        sub_216D16E0C(v16);
      }
    }
  }
}

void sub_216FD0B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader(v13);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetSurfaceOutput(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v9, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v4);
  v9[0] = &unk_26C76DAD0;
  unint64_t v3 = sub_216FD05AC();
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceOutput((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 8), a2);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v9);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FD0C9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetDisplacement(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, int a2@<W1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetDisplacementOutput(this, (uint64_t)&v5);
  pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetSourceShaderObject((const pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v5, a2, a3);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FD0D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetDisplacementOutput(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v9, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v4);
  v9[0] = &unk_26C76DAD0;
  unint64_t v3 = sub_216FD05AC();
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetDisplacementOutput((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 8), a2);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v9);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FD0E10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetVolume(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, int a2@<W1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetVolumeOutput(this, (uint64_t)&v5);
  pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::_GetSourceShaderObject((const pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v5, a2, a3);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FD0EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::GetVolumeOutput(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v9, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v4);
  v9[0] = &unk_26C76DAD0;
  unint64_t v3 = sub_216FD05AC();
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetVolumeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 8), a2);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v9);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FD0F84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::SetSurfaceSource(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  sub_216D16CFC((uint64_t)&v8, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v8);
  v14[0] = &unk_26C76DAD0;
  unint64_t v3 = sub_216FD05AC();
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateSurfaceOutput((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v14, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 8), (uint64_t)v15);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v14);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a2))
  {
    sub_216981010(&v8, a2);
    sub_21698105C(&v9, (_DWORD *)a2 + 1);
  }
  else
  {
    uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_216FD05AC();
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a2, v5, &v8);
  }
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v15, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v8, v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_21697C414(&v17);
  if (v16) {
    sub_216D16E0C(v16);
  }
  return v6;
}

void sub_216FD1108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754(va);
  sub_216F73CDC(v2 - 48);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::SetDisplacementSource(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  sub_216D16CFC((uint64_t)&v8, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v8);
  v14[0] = &unk_26C76DAD0;
  unint64_t v3 = sub_216FD05AC();
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateDisplacementOutput((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v14, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 8), (uint64_t)v15);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v14);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a2))
  {
    sub_216981010(&v8, a2);
    sub_21698105C(&v9, (_DWORD *)a2 + 1);
  }
  else
  {
    uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_216FD05AC();
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a2, v5, &v8);
  }
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v15, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v8, v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_21697C414(&v17);
  if (v16) {
    sub_216D16E0C(v16);
  }
  return v6;
}

void sub_216FD12B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754(va);
  sub_216F73CDC(v2 - 48);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::SetVolumeSource(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  sub_216D16CFC((uint64_t)&v8, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v8);
  v14[0] = &unk_26C76DAD0;
  unint64_t v3 = sub_216FD05AC();
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateVolumeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v14, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 8), (uint64_t)v15);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v14);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a2))
  {
    sub_216981010(&v8, a2);
    sub_21698105C(&v9, (_DWORD *)a2 + 1);
  }
  else
  {
    uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_216FD05AC();
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a2, v5, &v8);
  }
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v15, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v8, v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_21697C414(&v17);
  if (v16) {
    sub_216D16E0C(v16);
  }
  return v6;
}

void sub_216FD1458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754(va);
  sub_216F73CDC(v2 - 48);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI::ComputeInterfaceInputConsumersMap(pxrInternal__aapl__pxrReserved__::UsdRiMaterialAPI *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  sub_216D16CFC((uint64_t)v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v5);
  v10[0] = &unk_26C76E028;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ComputeInterfaceInputConsumersMap((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FD1564(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)va1);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216FD1588()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FD1668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdRiTokensType *sub_216FD16B8(atomic_ullong *a1)
{
  uint64_t result = sub_216FD1700();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      char v4 = (void *)sub_216FD1744((uint64_t)result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdRiTokensType *sub_216FD1700()
{
  v0 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)operator new(0xB0uLL);
  pxrInternal__aapl__pxrReserved__::UsdRiTokensType::UsdRiTokensType(v0);
  return v0;
}

void sub_216FD1730(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216FD1744(uint64_t a1)
{
  uint64_t v21 = (void **)(a1 + 152);
  sub_216889A04(&v21);
  uint64_t v2 = *(void *)(a1 + 144);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 136);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *(void *)(a1 + 128);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(void *)(a1 + 120);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *(void *)(a1 + 112);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *(void *)(a1 + 104);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *(void *)(a1 + 96);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *(void *)(a1 + 88);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *(void *)(a1 + 80);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *(void *)(a1 + 72);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *(void *)(a1 + 56);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *(void *)(a1 + 48);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *(void *)(a1 + 40);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *(void *)(a1 + 32);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *(void *)(a1 + 24);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *(void *)(a1 + 16);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *(void *)(a1 + 8);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::~UsdRiRenderPassAPI(pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76F028;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdRi/renderPassAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdRiRenderPassAPI pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::Get(const Us"
                            "dStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76F028;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FD1B04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *this)
{
  return 5;
}

uint64_t sub_216FD1B2C(pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94B18, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdRiRenderPassAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_216FD1D14(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76F028;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76F028;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_216FD1D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216FD1D14(pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94B18, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    void v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdRiRenderPassAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94B20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94B20))
  {
    __cxa_guard_release(&qword_267B94B20);
  }
  return &qword_267B94B18;
}

void sub_216FD1E48(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94B30, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *)__cxa_guard_acquire(&qword_267B94B30);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::_GetStaticTfType(v2);
      byte_267B94B28 = sub_216D16508((char *)&qword_267B94B18, v3, v4);
      __cxa_guard_release(&qword_267B94B30);
    }
  }
  return byte_267B94B28;
}

void sub_216FD1EC8(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *this)
{
  return &qword_267B94B18;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94B50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94B50))
  {
    qword_267B94B38 = 0;
    qword_267B94B40 = 0;
    qword_267B94B48 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94B38, &dword_216758000);
    __cxa_guard_release(&qword_267B94B50);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94B70, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94B70))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_216FD2008((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94B58, &dword_216758000);
    __cxa_guard_release(&qword_267B94B70);
  }
  if (v1) {
    return &qword_267B94B58;
  }
  else {
    return &qword_267B94B38;
  }
}

void sub_216FD1FF0(_Unwind_Exception *a1)
{
}

void *sub_216FD2008(uint64_t **a1)
{
  qword_267B94B60 = 0;
  unk_267B94B68 = 0;
  qword_267B94B58 = 0;
  sub_216973388((char **)&qword_267B94B58, (((uint64_t)qword_267B94B40 - qword_267B94B38) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B94B58, (void *)qword_267B94B60, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B94B58, (void *)qword_267B94B60, (uint64_t *)qword_267B94B38, qword_267B94B40, ((uint64_t)qword_267B94B40 - qword_267B94B38) >> 3);
}

void sub_216FD20A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::GetCameraVisibilityCollectionAPI(pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v3) {
    uint64_t v3 = sub_216FD16B8(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  }
  sub_216D36868(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (uint64_t *)v3 + 1);
  *(void *)a2 = &unk_26C767A08;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FD217C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI::GetMatteCollectionAPI(pxrInternal__aapl__pxrReserved__::UsdRiRenderPassAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v3) {
    uint64_t v3 = sub_216FD16B8(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  }
  sub_216D36868(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (uint64_t *)v3 + 7);
  *(void *)a2 = &unk_26C767A08;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FD2250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_216FD2268()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FD2348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiConvertToRManInterpolateBoundary(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    uint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != (*((void *)v3 + 85) & 0xFFFFFFFFFFFFFFF8))
  {
    char v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v4) {
      char v4 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v4 + 32) & 0xFFFFFFFFFFFFFFF8)) {
      return 1;
    }
    int v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v5) {
      int v5 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    unint64_t v6 = *(void *)this & 0xFFFFFFFFFFFFFFF8;
    if (v6 == (*((void *)v5 + 33) & 0xFFFFFFFFFFFFFFF8)) {
      return 2;
    }
    v9[0] = "usdRi/rmanUtilities.cpp";
    v9[1] = "UsdRiConvertToRManInterpolateBoundary";
    v9[2] = 42;
    void v9[3] = "int pxrInternal__aapl__pxrReserved__::UsdRiConvertToRManInterpolateBoundary(const TfToken &)";
    char v10 = 0;
    int v11 = 1;
    if (v6)
    {
      int v7 = (const char *)(v6 + 16);
      if (*(char *)(v6 + 39) < 0) {
        int v7 = *(const char **)v7;
      }
    }
    else
    {
      int v7 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v9, (pxrInternal__aapl__pxrReserved__ *)"Invalid InterpolateBoundary Token: %s", v7);
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiConvertFromRManInterpolateBoundary(pxrInternal__aapl__pxrReserved__ *this)
{
  if (this == 2)
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v3) {
      uint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    return (uint64_t)v3 + 264;
  }
  else if (this == 1)
  {
    char v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v4) {
      char v4 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    return (uint64_t)v4 + 256;
  }
  else
  {
    if (this)
    {
      v5[0] = "usdRi/rmanUtilities.cpp";
      v5[1] = "UsdRiConvertFromRManInterpolateBoundary";
      v5[2] = 59;
      v5[3] = "const TfToken &pxrInternal__aapl__pxrReserved__::UsdRiConvertFromRManInterpolateBoundary(int)";
      char v6 = 0;
      int v7 = 1;
      pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"Invalid InterpolateBoundary int: %d", this);
    }
    int v1 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v1) {
      int v1 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    return (uint64_t)v1 + 680;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiConvertToRManFaceVaryingLinearInterpolation(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    uint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v3 + 1) & 0xFFFFFFFFFFFFFFF8)) {
    return 0;
  }
  char v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v4) {
    char v4 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != (*((void *)v4 + 20) & 0xFFFFFFFFFFFFFFF8))
  {
    int v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v5) {
      int v5 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != (*((void *)v5 + 21) & 0xFFFFFFFFFFFFFFF8))
    {
      char v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v6) {
        char v6 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != (*((void *)v6 + 22) & 0xFFFFFFFFFFFFFFF8))
      {
        int v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v7) {
          int v7 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        }
        if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 85) & 0xFFFFFFFFFFFFFFF8)) {
          return 2;
        }
        uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v8) {
          uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        }
        unint64_t v9 = *(void *)this & 0xFFFFFFFFFFFFFFF8;
        if (v9 == (*((void *)v8 + 7) & 0xFFFFFFFFFFFFFFF8)) {
          return 3;
        }
        v12[0] = "usdRi/rmanUtilities.cpp";
        v12[1] = "UsdRiConvertToRManFaceVaryingLinearInterpolation";
        v12[2] = 83;
        v12[3] = "int pxrInternal__aapl__pxrReserved__::UsdRiConvertToRManFaceVaryingLinearInterpolation(const TfToken &)";
        char v13 = 0;
        int v14 = 1;
        if (v9)
        {
          char v10 = (const char *)(v9 + 16);
          if (*(char *)(v9 + 39) < 0) {
            char v10 = *(const char **)v10;
          }
        }
        else
        {
          char v10 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v12, (pxrInternal__aapl__pxrReserved__ *)"Invalid FaceVaryingLinearInterpolation Token: %s", v10);
      }
    }
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiConvertFromRManFaceVaryingLinearInterpolation(pxrInternal__aapl__pxrReserved__ *this)
{
  switch((int)this)
  {
    case 0:
      int v1 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v1) {
        int v1 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      uint64_t result = (uint64_t)v1 + 8;
      break;
    case 1:
      char v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v4) {
        char v4 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      uint64_t result = (uint64_t)v4 + 168;
      break;
    case 2:
      goto LABEL_6;
    case 3:
      int v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v5) {
        int v5 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      uint64_t result = (uint64_t)v5 + 56;
      break;
    default:
      v6[0] = "usdRi/rmanUtilities.cpp";
      v6[1] = "UsdRiConvertFromRManFaceVaryingLinearInterpolation";
      v6[2] = 102;
      v6[3] = "const TfToken &pxrInternal__aapl__pxrReserved__::UsdRiConvertFromRManFaceVaryingLinearInterpolation(int)";
      char v7 = 0;
      int v8 = 1;
      pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"Invalid FaceVaryingLinearInterpolation int: %d", this);
LABEL_6:
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v3) {
        uint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      uint64_t result = (uint64_t)v3 + 680;
      break;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiConvertToRManTriangleSubdivisionRule(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    uint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != (*((void *)v3 + 12) & 0xFFFFFFFFFFFFFFF8))
  {
    char v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v4) {
      char v4 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    unint64_t v5 = *(void *)this & 0xFFFFFFFFFFFFFFF8;
    if (v5 == (*((void *)v4 + 127) & 0xFFFFFFFFFFFFFFF8)) {
      return 2;
    }
    v8[0] = "usdRi/rmanUtilities.cpp";
    v8[1] = "UsdRiConvertToRManTriangleSubdivisionRule";
    v8[2] = 117;
    v8[3] = "int pxrInternal__aapl__pxrReserved__::UsdRiConvertToRManTriangleSubdivisionRule(const TfToken &)";
    char v9 = 0;
    int v10 = 1;
    if (v5)
    {
      char v6 = (const char *)(v5 + 16);
      if (*(char *)(v5 + 39) < 0) {
        char v6 = *(const char **)v6;
      }
    }
    else
    {
      char v6 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v8, (pxrInternal__aapl__pxrReserved__ *)"Invalid TriangleSubdivisionRule Token: %s", v6);
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiConvertFromRManTriangleSubdivisionRule(pxrInternal__aapl__pxrReserved__ *this)
{
  if (this == 2)
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v3) {
      uint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    return (uint64_t)v3 + 1016;
  }
  else
  {
    if (this)
    {
      v4[0] = "usdRi/rmanUtilities.cpp";
      v4[1] = "UsdRiConvertFromRManTriangleSubdivisionRule";
      v4[2] = 133;
      v4[3] = "const TfToken &pxrInternal__aapl__pxrReserved__::UsdRiConvertFromRManTriangleSubdivisionRule(int)";
      char v5 = 0;
      int v6 = 1;
      pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"Invalid TriangleSubdivisionRule int: %d", this);
    }
    int v1 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v1) {
      int v1 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    return (uint64_t)v1 + 96;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::~UsdRiSplineAPI(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this)
{
  *(void *)this = &unk_26C76F080;
  uint64_t v1 = *((void *)this + 4);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
}

{
  uint64_t v1;

  *(void *)this = &unk_26C76F080;
  uint64_t v1 = *((void *)this + 4);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
}

{
  uint64_t v1;
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C76F080;
  uint64_t v1 = *((void *)this + 4);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v2);
}

void pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  int v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    sub_216FD44D8(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    char v9 = "usdRi/splineAPI.cpp";
    int v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdRiSplineAPI pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::Get(const UsdStagePt"
                            "r &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    int v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    sub_216FD44D8(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FD2C90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this)
{
  return 5;
}

uint64_t sub_216FD2CB8(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94B78, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdRiSplineAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_216FD2E7C(this))
  {
    sub_216FD44D8(a2, this);
  }
  else
  {
    int v5 = 1;
    int v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    sub_216FD44D8(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_216FD2E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216FD2E7C(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94B78, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    void v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdRiSplineAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94B80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94B80))
  {
    __cxa_guard_release(&qword_267B94B80);
  }
  return &qword_267B94B78;
}

void sub_216FD2FB0(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94B90, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *)__cxa_guard_acquire(&qword_267B94B90);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetStaticTfType(v2);
      byte_267B94B88 = sub_216D16508((char *)&qword_267B94B78, v3, v4);
      __cxa_guard_release(&qword_267B94B90);
    }
  }
  return byte_267B94B88;
}

void sub_216FD3030(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this)
{
  return &qword_267B94B78;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94BB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94BB0))
  {
    qword_267B94B98 = 0;
    unk_267B94BA0 = 0;
    qword_267B94BA8 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94B98, &dword_216758000);
    __cxa_guard_release(&qword_267B94BB0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94BD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94BD0))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_267B94BB8 = 0;
    unk_267B94BC0 = 0;
    qword_267B94BC8 = 0;
    sub_21698FA28(&qword_267B94BB8, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94BB8, &dword_216758000);
    __cxa_guard_release(&qword_267B94BD0);
  }
  if (v1) {
    return &qword_267B94BB8;
  }
  else {
    return &qword_267B94B98;
  }
}

void sub_216FD3178(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetScopedPropertyName(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  if ((*((void *)this + 4) & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*((void *)this + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  int v6 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v6) {
    int v6 = sub_216FD16B8(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  }
  if ((*((void *)v6 + 13) & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v7 = (uint64_t *)((*((void *)v6 + 13) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    int v7 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier((const void **)EmptyString, (uint64_t)v7, (uint64_t)v10);
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v9 = (uint64_t *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v9 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier((const void **)v10, (uint64_t)v9, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
}

void sub_216FD327C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::GetInterpolationAttr(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this@<X0>, uint64_t a2@<X8>)
{
  char v4 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v4) {
    char v4 = sub_216FD16B8(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetScopedPropertyName(this, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v4 + 40), (uint64_t)&v10);
  sub_216D16CFC((uint64_t)v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10, a2);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216FD3380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  uint64_t v4 = *(void *)(v2 - 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::CreateInterpolationAttr(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v8) {
    int v8 = sub_216FD16B8(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetScopedPropertyName(this, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v8 + 40), (uint64_t)&v10);
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::GetPositionsAttr(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v4) {
    uint64_t v4 = sub_216FD16B8(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetScopedPropertyName(this, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v4 + 88), (uint64_t)&v10);
  sub_216D16CFC((uint64_t)v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10, a2);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216FD3568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  uint64_t v4 = *(void *)(v2 - 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::CreatePositionsAttr(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v8) {
    int v8 = sub_216FD16B8(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetScopedPropertyName(this, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v8 + 88), (uint64_t)&v10);
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 512), 0, 1, a2, a3, a4);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::GetValuesAttr(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v4) {
    uint64_t v4 = sub_216FD16B8(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetScopedPropertyName(this, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v4 + 112), (uint64_t)&v10);
  sub_216D16CFC((uint64_t)v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10, a2);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216FD3750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  uint64_t v4 = *(void *)(v2 - 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::CreateValuesAttr(pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8 = (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  if (!v8) {
    int v8 = sub_216FD16B8(&pxrInternal__aapl__pxrReserved__::UsdRiTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::_GetScopedPropertyName(this, (pxrInternal__aapl__pxrReserved__::UsdRiTokensType *)((char *)v8 + 112), (uint64_t)&v9);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9, (pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *)((char *)this + 40), 0, 1, a2, a3, a4);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::Validate(void *a1, std::string *this)
{
  if (a1[4])
  {
    pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::GetInterpolationAttr((pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *)a1, (uint64_t)v31);
    pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::GetPositionsAttr((pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *)a1, (uint64_t)v26);
    pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI::GetValuesAttr((pxrInternal__aapl__pxrReserved__::UsdRiSplineAPI *)a1, (uint64_t)v21);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v4) {
      uint64_t v4 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    int v5 = (void **)(a1 + 5);
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(v5, (void **)v4 + 64)) {
      goto LABEL_45;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v7) {
      int v7 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(v5, (void **)v7 + 92))
    {
LABEL_45:
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v31, v6))
      {
        if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v26, v8))
        {
          uint64_t v20 = 0;
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
        }
        uint64_t v9 = "Could not get the position attribute.";
      }
      else
      {
        uint64_t v9 = "Could not get the interpolation attribute.";
      }
      std::string::append(this, v9);
    }
    else
    {
      AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)v5, (atomic_uint **)&v19);
      if ((v19.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
      }
      std::operator+<char>();
      char v11 = std::string::append(&v16, "'");
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      *(void *)&long long v18 = *((void *)&v11->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if ((SBYTE7(v18) & 0x80u) == 0) {
        char v13 = __p;
      }
      else {
        char v13 = (void **)__p[0];
      }
      if ((SBYTE7(v18) & 0x80u) == 0) {
        std::string::size_type v14 = BYTE7(v18);
      }
      else {
        std::string::size_type v14 = (std::string::size_type)__p[1];
      }
      std::string::append(this, (const std::string::value_type *)v13, v14);
      if (SBYTE7(v18) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      if ((v19.__r_.__value_.__s.__data_[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v19.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v25 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
    sub_21697C414(&v23);
    if (v22) {
      sub_216D16E0C(v22);
    }
    if ((v30 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
    sub_21697C414(&v28);
    if (v27) {
      sub_216D16E0C(v27);
    }
    if ((v35 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
    sub_21697C414(&v33);
    if (v32) {
      sub_216D16E0C(v32);
    }
  }
  else
  {
    std::string::append(this, "SplineAPI is not correctly initialized");
  }
  return 0;
}

void sub_216FD413C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  sub_2168F83DC((uint64_t)&__p);
  sub_2168F83DC((uint64_t)&a25);
  uint64_t v50 = *(void *)(v48 - 152);
  if ((v50 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D2EDA0(v48 - 144);
  sub_216D2EDA0(v48 - 112);
  sub_216D2EDA0(v48 - 80);
  _Unwind_Resume(a1);
}

uint64_t *sub_216FD43A8()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FD4488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_216FD44D8(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a1, a2);
  *(void *)uint64_t v3 = &unk_26C76F080;
  *((void *)v3 + 3) = 0;
  *((void *)v3 + 4) = 0;
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v3 + 40));
  return a1;
}

void sub_216FD4528(_Unwind_Exception *a1)
{
  uint64_t v3 = *((void *)v1 + 4);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::~UsdRiStatementsAPI(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76F0D8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdRi/statementsAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdRiStatementsAPI pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::Get(const Us"
                            "dStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76F0D8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FD4710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this)
{
  return 5;
}

uint64_t sub_216FD4738(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94BD8, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdRiStatementsAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_216FD4920(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76F0D8;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76F0D8;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_216FD490C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216FD4920(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94BD8, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    void v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdRiStatementsAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94BE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94BE0))
  {
    __cxa_guard_release(&qword_267B94BE0);
  }
  return &qword_267B94BD8;
}

void sub_216FD4A54(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94BF0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *)__cxa_guard_acquire(&qword_267B94BF0);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::_GetStaticTfType(v2);
      byte_267B94BE8 = sub_216D16508((char *)&qword_267B94BD8, v3, v4);
      __cxa_guard_release(&qword_267B94BF0);
    }
  }
  return byte_267B94BE8;
}

void sub_216FD4AD4(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this)
{
  return &qword_267B94BD8;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94C10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94C10))
  {
    qword_267B94BF8 = 0;
    unk_267B94C00 = 0;
    qword_267B94C08 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94BF8, &dword_216758000);
    __cxa_guard_release(&qword_267B94C10);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94C30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94C30))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_267B94C18 = 0;
    unk_267B94C20 = 0;
    qword_267B94C28 = 0;
    sub_21698FA28(&qword_267B94C18, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94C18, &dword_216758000);
    __cxa_guard_release(&qword_267B94C30);
  }
  if (v1) {
    return &qword_267B94C18;
  }
  else {
    return &qword_267B94BF8;
  }
}

void sub_216FD4C1C(_Unwind_Exception *a1)
{
}

void sub_216FD4C34()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDRI_STATEMENTS_READ_OLD_ATTR_ENCODING)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::CreateRiAttribute(uint64_t a1@<X0>, void *a2@<X1>, void **a3@<X2>, const void **a4@<X3>, uint64_t a5@<X8>)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
  }
  sub_216FD4EE0(a4, (uint64_t)EmptyString, (uint64_t)&v26);
  uint64_t UsdType = pxrInternal__aapl__pxrReserved__::UsdRi_GetUsdType(a3);
  sub_216D16CFC((uint64_t)v13, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v18, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v13);
  v18[3] = 0;
  v18[0] = &unk_26C76D128;
  uint64_t v12 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v18, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v26, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&UsdType, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, -1, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v19);
  *(_DWORD *)a5 = v19;
  uint64_t v10 = v20;
  *(void *)(a5 + 8) = v20;
  if (v10) {
    atomic_fetch_add_explicit(v10 + 6, 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a5 + 16), &v21);
  sub_21698105C((_DWORD *)(a5 + 20), &v22);
  uint64_t v11 = v23;
  *(void *)(a5 + 24) = v23;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a5 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_21697C414(&v21);
  if (v20) {
    sub_216D16E0C(v20);
  }
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v18);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if (v14) {
    sub_216D16E0C(v14);
  }
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216FD4E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)va1);
  sub_216D16AD8((uint64_t)va);
  uint64_t v5 = *(void *)(v3 - 40);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_216FD4EE0(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216FD5C30();
  if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)EmptyString, a1, (uint64_t)&v15);
  uint64_t v8 = std::string::append(&v15, ":");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v11 = *(const std::string::value_type **)a2;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(a2 + 8);
  }
  char v13 = std::string::append(&v16, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  std::string::size_type v18 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_216FD4FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::CreateRiAttribute(uint64_t a1@<X0>, void *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfType *a3@<X2>, const void **a4@<X3>, uint64_t a5@<X8>)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
  }
  sub_216FD4EE0(a4, (uint64_t)EmptyString, (uint64_t)&v27);
  int v10 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  unint64_t v20 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v10, a3, (atomic_uint **)&v20);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16CFC((uint64_t)v14, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v19, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v14);
  v19[3] = 0;
  v19[0] = &unk_26C76D128;
  uint64_t v13 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v19, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v27, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v13, -1, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v20);
  *(_DWORD *)a5 = v20;
  uint64_t v11 = v21;
  *(void *)(a5 + 8) = v21;
  if (v11) {
    atomic_fetch_add_explicit(v11 + 6, 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a5 + 16), &v22);
  sub_21698105C((_DWORD *)(a5 + 20), &v23);
  uint64_t v12 = v24;
  *(void *)(a5 + 24) = v24;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a5 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
  sub_21697C414(&v22);
  if (v21) {
    sub_216D16E0C(v21);
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v19);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_21697C414(&v16);
  if (v15) {
    sub_216D16E0C(v15);
  }
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216FD5260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v20 = *(void *)(v19 - 40);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::GetRiAttribute(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, void *a2@<X1>, const void **a3@<X2>, uint64_t a4@<X8>)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  sub_216FD4EE0(a3, (uint64_t)EmptyString, (uint64_t)&v26);
  uint64_t v8 = (uint64_t *)((char *)a1 + 8);
  long long v9 = (_DWORD *)((char *)a1 + 16);
  sub_216D16CFC((uint64_t)v14, v8, v9);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v19, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v14);
  v19[3] = 0;
  v19[0] = &unk_26C76D128;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v19, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v26, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v20);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v19);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_21697C414(&v16);
  if (v15) {
    sub_216D16E0C(v15);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v20, v10))
  {
    *(_DWORD *)a4 = v20;
    uint64_t v11 = v21;
    *(void *)(a4 + 8) = v21;
    if (v11) {
      atomic_fetch_add_explicit(v11 + 6, 1uLL, memory_order_relaxed);
    }
    sub_216981010((_DWORD *)(a4 + 16), &v22);
    sub_21698105C((_DWORD *)(a4 + 20), &v23);
    uint64_t v12 = v24;
    *(void *)(a4 + 24) = v24;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)(a4 + 24) &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v25 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v24 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if ((v25 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v24 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
    sub_21697C414(&v22);
    if (v21) {
      sub_216D16E0C(v21);
    }
    uint64_t v13 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDRI_STATEMENTS_READ_OLD_ATTR_ENCODING);
    if (!v13) {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
    }
    if (!*v13)
    {
      *(_DWORD *)a4 = 3;
      *(void *)(a4 + 8) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a4 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a4 + 20));
      *(void *)(a4 + 24) = 0;
      goto LABEL_32;
    }
    sub_216D16CFC((uint64_t)&v20, v8, v9);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v20, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v26, a4);
    if ((v24 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
  sub_21697C414(&v22);
  if (v21) {
    sub_216D16E0C(v21);
  }
LABEL_32:
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216FD55B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v19 = *(void *)(v18 - 40);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::GetRiAttributes(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216FD5C30();
  if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  uint64_t v48 = (_DWORD *)(a1 + 16);
  uint64_t v49 = (uint64_t *)(a1 + 8);
  sub_216D16CFC((uint64_t)&v52, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v57, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v52);
  uint64_t v59 = 0;
  *(void *)&long long v57 = &unk_26C76D128;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvars((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v57, (uint64_t *)&v60);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v57);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v55);
  sub_21697C414(&v54);
  if (v53) {
    sub_216D16E0C(v53);
  }
  long long v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)*((void *)&v60 + 1);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v60;
  if ((void)v60 != *((void *)&v60 + 1))
  {
    int v10 = a2;
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetPrimvarName(v8, &v57);
      if ((v57 & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v12 = (uint64_t *)((v57 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v12 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
      }
      if (*((char *)EmptyString + 23) >= 0) {
        uint64_t v13 = (const char *)EmptyString;
      }
      else {
        uint64_t v13 = (const char *)*EmptyString;
      }
      int v14 = *((char *)v12 + 23);
      if (v14 >= 0) {
        size_t v15 = *((unsigned __int8 *)v12 + 23);
      }
      else {
        size_t v15 = v12[1];
      }
      size_t v16 = strlen(v13);
      if (v15 >= v16)
      {
        size_t v18 = v16;
        if (v14 >= 0) {
          uint64_t v19 = (const char *)v12;
        }
        else {
          uint64_t v19 = (const char *)*v12;
        }
        BOOL v17 = strncmp(v19, v13, v18) == 0;
      }
      else
      {
        BOOL v17 = 0;
      }
      a2 = v10;
      if ((v57 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v17)
      {
        unint64_t v20 = a3[1];
        if (v20 >= a3[2])
        {
          uint64_t v21 = sub_216F8C564(a3, (uint64_t)v8);
        }
        else
        {
          sub_216D3B3EC((uint64_t)(a3 + 2), a3[1], (uint64_t)v8);
          uint64_t v21 = v20 + 32;
          a3[1] = v20 + 32;
        }
        a3[1] = v21;
      }
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)((char *)v8 + 48);
    }
    while (v8 != v9);
  }
  *(void *)&long long v57 = &v60;
  sub_216F48514((void ***)&v57);
  int v22 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDRI_STATEMENTS_READ_OLD_ATTR_ENCODING);
  if (!v22) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  if (!*v22) {
    return;
  }
  uint64_t v50 = *a3;
  uint64_t v51 = a3[1];
  sub_216D16CFC((uint64_t)&v57, v49, v48);
  int v23 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216FD5C30();
  if ((*(void *)v23 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v24 = (uint64_t *)((*(void *)v23 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v24 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v23);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace((uint64_t)&v57, v24, (uint64_t *)&v52);
  if ((v59 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58 + 1);
  sub_21697C414(&v58);
  if (*((void *)&v57 + 1)) {
    sub_216D16E0C(*((atomic_ullong **)&v57 + 1));
  }
  long long v57 = 0uLL;
  uint64_t v58 = 0;
  if ((char)a2[23] < 0)
  {
    if (*((void *)a2 + 1)) {
      goto LABEL_44;
    }
LABEL_46:
    int v25 = 0;
    goto LABEL_47;
  }
  if (!a2[23]) {
    goto LABEL_46;
  }
LABEL_44:
  int v25 = 1;
LABEL_47:
  uint64_t v26 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)v52;
  uint64_t v27 = v53;
  if (v52 != v53)
  {
    if ((unint64_t)((v51 - v50) >> 5) <= 1) {
      uint64_t v28 = 1;
    }
    else {
      uint64_t v28 = (v51 - v50) >> 5;
    }
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdProperty::SplitName(v26, (uint64_t *)&v60);
      sub_21680F80C((uint64_t *)&v57);
      long long v57 = v60;
      uint64_t v58 = v61;
      uint64_t v61 = 0;
      long long v60 = 0uLL;
      uint64_t v62 = (void **)&v60;
      sub_216782F20(&v62);
      if (!v25) {
        goto LABEL_67;
      }
      uint64_t v29 = *(unsigned __int8 *)(v57 + 71);
      if ((v29 & 0x80u) == 0) {
        uint64_t v30 = *(unsigned __int8 *)(v57 + 71);
      }
      else {
        uint64_t v30 = *(void *)(v57 + 56);
      }
      uint64_t v31 = a2[23];
      int v32 = (char)v31;
      if ((v31 & 0x80u) != 0) {
        uint64_t v31 = *((void *)a2 + 1);
      }
      if (v30 == v31)
      {
        int v33 = (const void **)(v57 + 48);
        if (v32 >= 0) {
          int v34 = a2;
        }
        else {
          int v34 = *(unsigned __int8 **)a2;
        }
        if ((v29 & 0x80) == 0)
        {
          if (*(unsigned char *)(v57 + 71))
          {
            while (*(unsigned __int8 *)v33 == *v34)
            {
              int v33 = (const void **)((char *)v33 + 1);
              ++v34;
              if (!--v29) {
                goto LABEL_67;
              }
            }
            goto LABEL_93;
          }
LABEL_67:
          if (v51 != v50)
          {
            uint64_t v35 = 0;
            do
            {
              int v36 = sub_216D563F8((_DWORD *)(*a3 + 32 * v35));
              if ((*(void *)v36 & 0xFFFFFFFFFFFFFFF8) != 0) {
                long long v37 = (uint64_t *)((*(void *)v36 & 0xFFFFFFFFFFFFFFF8) + 16);
              }
              else {
                long long v37 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v36);
              }
              if (*((char *)v37 + 23) < 0)
              {
                uint64_t v39 = *v37;
                int64_t v38 = v37[1];
              }
              else
              {
                int64_t v38 = *((unsigned __int8 *)v37 + 23);
                uint64_t v39 = (uint64_t)v37;
              }
              if (v38 >= 1)
              {
                uint64_t v40 = (unsigned char *)(v39 + v38);
                uint64_t v41 = (void *)v39;
                do
                {
                  uint64_t v42 = memchr(v41, 58, v38);
                  if (!v42) {
                    break;
                  }
                  if (*v42 == 58)
                  {
                    if (v42 != v40)
                    {
                      uint64_t v43 = &v42[-v39];
                      if (v43 != (unsigned char *)-1)
                      {
                        unint64_t v44 = *(void *)sub_216D563F8(v26) & 0xFFFFFFFFFFFFFFF8;
                        if (v44)
                        {
                          uint64_t v45 = (const char *)(v44 + 16);
                          if (*(char *)(v44 + 39) < 0) {
                            uint64_t v45 = *(const char **)v45;
                          }
                        }
                        else
                        {
                          uint64_t v45 = "";
                        }
                        if (!std::string::compare((const std::string *)v37, (std::string::size_type)(v43 + 1), 0xFFFFFFFFFFFFFFFFLL, v45))goto LABEL_93; {
                      }
                        }
                    }
                    break;
                  }
                  uint64_t v41 = v42 + 1;
                  int64_t v38 = v40 - (unsigned char *)v41;
                }
                while (v40 - (unsigned char *)v41 >= 1);
              }
              ++v35;
            }
            while (v35 != v28);
          }
          unint64_t v46 = a3[1];
          if (v46 >= a3[2])
          {
            uint64_t v47 = sub_216F8C564(a3, (uint64_t)v26);
          }
          else
          {
            sub_216D3B3EC((uint64_t)(a3 + 2), a3[1], (uint64_t)v26);
            uint64_t v47 = v46 + 32;
            a3[1] = v46 + 32;
          }
          a3[1] = v47;
          goto LABEL_93;
        }
        if (!memcmp(*v33, v34, *(void *)(v57 + 56))) {
          goto LABEL_67;
        }
      }
LABEL_93:
      uint64_t v26 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)((char *)v26 + 32);
    }
    while (v26 != (pxrInternal__aapl__pxrReserved__::UsdProperty *)v27);
  }
  *(void *)&long long v60 = &v57;
  sub_216782F20((void ***)&v60);
  *(void *)&long long v57 = &v52;
  sub_216D3BBE0((void ***)&v57);
}

void sub_216FD5B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_216D3BBE0((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t sub_216FD5C30()
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  v0 = (unint64_t *)atomic_load((unint64_t *)&qword_267B94C38);
  if (!v0)
  {
    v0 = (unint64_t *)operator new(0x58uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "ri:attributes:", 0);
    uint64_t v2 = (uint64_t *)(v0 + 1);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 1, "primvars:ri:attributes:", 0);
    uint64_t v3 = (uint64_t *)(v0 + 2);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 2, "ri", 0);
    char v4 = (uint64_t *)(v0 + 3);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 3, "attributes", 0);
    uint64_t v5 = (uint64_t *)(v0 + 4);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 4, "ri:coordinateSystem", 0);
    uint64_t v6 = (uint64_t *)(v0 + 5);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 5, "ri:scopedCoordinateSystem", 0);
    int v7 = (uint64_t *)(v0 + 6);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 6, "ri:modelCoordinateSystems", 0);
    uint64_t v8 = (uint64_t *)(v0 + 7);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 7, "ri:modelScopedCoordinateSystems", 0);
    unint64_t v9 = *v0;
    unint64_t v23 = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v10 = *v2;
    uint64_t v24 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = *v3;
    uint64_t v25 = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v12 = *v4;
    uint64_t v26 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v26 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v13 = *v5;
    uint64_t v27 = v13;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v14 = *v6;
    uint64_t v28 = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v28 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v15 = *v7;
    uint64_t v29 = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v29 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v16 = *v8;
    uint64_t v30 = v16;
    if ((v16 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    v0[8] = 0;
    v0[9] = 0;
    v0[10] = 0;
    BOOL v17 = (char *)operator new(0x40uLL);
    uint64_t v18 = 0;
    v0[8] = (unint64_t)v17;
    v0[9] = (unint64_t)v17;
    v0[10] = (unint64_t)(v17 + 64);
    do
    {
      unint64_t v19 = *(unint64_t *)((char *)&v23 + v18);
      *(void *)&v17[v18] = v19;
      if ((v19 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v17[v18] &= 0xFFFFFFFFFFFFFFF8;
      }
      v18 += 8;
    }
    while (v18 != 64);
    v0[9] = (unint64_t)(v17 + 64);
    for (uint64_t i = 56; i != -8; i -= 8)
    {
      unint64_t v21 = *(unint64_t *)((char *)&v23 + i);
      if ((v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v22 = 0;
    atomic_compare_exchange_strong(&qword_267B94C38, (unint64_t *)&v22, (unint64_t)v0);
    if (v22)
    {
      unint64_t v23 = (unint64_t)(v0 + 8);
      sub_216889A04((void ***)&v23);
      if ((*v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v7 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v6 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B94C38);
    }
  }
  return (unint64_t)v0;
}

void sub_216FD6060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v21 = 56;
  while (1)
  {
    uint64_t v22 = *(void *)(&a12 + v21);
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v21 -= 8;
    if (v21 == -8)
    {
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v12);
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::GetRiAttributeNameSpace(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this@<X0>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdProperty::SplitName(this, (uint64_t *)&v27);
  uint64_t v5 = sub_216D563F8(this);
  if ((*(void *)v5 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v5 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  }
  int v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216FD5C30();
  if ((*((void *)v7 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v8 = (uint64_t *)((*((void *)v7 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  }
  if (*((char *)v8 + 23) >= 0) {
    unint64_t v9 = (const char *)v8;
  }
  else {
    unint64_t v9 = (const char *)*v8;
  }
  int v10 = *((char *)EmptyString + 23);
  if (v10 >= 0) {
    size_t v11 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    size_t v11 = EmptyString[1];
  }
  size_t v12 = strlen(v9);
  if (v11 < v12
    || ((size_t v13 = v12, v10 >= 0) ? (v14 = (const char *)EmptyString) : (v14 = (const char *)*EmptyString),
        strncmp(v14, v9, v13)))
  {
    uint64_t v15 = sub_216D563F8(this);
    if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v16 = (uint64_t *)((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      uint64_t v16 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
    }
    BOOL v17 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216FD5C30();
    if ((*(void *)v17 & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v18 = (uint64_t *)((*(void *)v17 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      uint64_t v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
    }
    if (*((char *)v18 + 23) >= 0) {
      unint64_t v19 = (const char *)v18;
    }
    else {
      unint64_t v19 = (const char *)*v18;
    }
    int v20 = *((char *)v16 + 23);
    if (v20 >= 0) {
      size_t v21 = *((unsigned __int8 *)v16 + 23);
    }
    else {
      size_t v21 = v16[1];
    }
    size_t v22 = strlen(v19);
    if (v21 >= v22)
    {
      size_t v23 = v22;
      uint64_t v24 = v20 >= 0 ? (const char *)v16 : (const char *)*v16;
      if (!strncmp(v24, v19, v23))
      {
        uint64_t v25 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDRI_STATEMENTS_READ_OLD_ATTR_ENCODING);
        if (!v25) {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
        }
        if (*v25 && 0xAAAAAAAAAAAAAAABLL * ((v28 - (uint64_t)v27) >> 3) >= 4)
        {
          sub_216881C38(":", v27 + 2, (std::string *)(v28 - 24), &__p);
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
          goto LABEL_41;
        }
      }
    }
LABEL_43:
    *a2 = 0;
    goto LABEL_44;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v28 - (uint64_t)v27) >> 3) < 5) {
    goto LABEL_43;
  }
  sub_216881C38(":", v27 + 3, (std::string *)(v28 - 24), &__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
LABEL_41:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_44:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  sub_216782F20((void ***)&__p);
}

void sub_216FD63F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::string __p = &a15;
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::IsRiAttribute(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this, const pxrInternal__aapl__pxrReserved__::UsdProperty *a2)
{
  uint64_t v3 = sub_216D563F8(this);
  if ((*(void *)v3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v3 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216FD5C30();
  if ((*((void *)v5 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v6 = (uint64_t *)((*((void *)v5 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v6 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  }
  if (*((char *)v6 + 23) >= 0) {
    int v7 = (const char *)v6;
  }
  else {
    int v7 = (const char *)*v6;
  }
  int v8 = *((char *)EmptyString + 23);
  if (v8 >= 0) {
    size_t v9 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    size_t v9 = EmptyString[1];
  }
  size_t v10 = strlen(v7);
  if (v9 >= v10)
  {
    size_t v11 = v10;
    size_t v12 = v8 >= 0 ? (const char *)EmptyString : (const char *)*EmptyString;
    if (!strncmp(v12, v7, v11)) {
      return 1;
    }
  }
  size_t v13 = sub_216D563F8(this);
  uint64_t v14 = (*(void *)v13 & 0xFFFFFFFFFFFFFFF8) != 0
      ? (uint64_t *)((*(void *)v13 & 0xFFFFFFFFFFFFFFF8) + 16)
      : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216FD5C30();
  uint64_t v16 = (*(void *)v15 & 0xFFFFFFFFFFFFFFF8) != 0
      ? (uint64_t *)((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) + 16)
      : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
  BOOL v17 = *((char *)v16 + 23) >= 0 ? (const char *)v16 : (const char *)*v16;
  int v18 = *((char *)v14 + 23);
  size_t v19 = v18 >= 0 ? *((unsigned __int8 *)v14 + 23) : v14[1];
  size_t v20 = strlen(v17);
  if (v19 < v20) {
    return 0;
  }
  size_t v21 = v20;
  size_t v22 = v18 >= 0 ? (const char *)v14 : (const char *)*v14;
  if (strncmp(v22, v17, v21)) {
    return 0;
  }
  uint64_t v24 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDRI_STATEMENTS_READ_OLD_ATTR_ENCODING);
  if (!v24) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  return *v24 != 0;
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::MakeRiAttributePropertyName(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfStringTokenize((unsigned __int8 *)a1, ":", &v37);
  if (*((void *)&v37 + 1) - (void)v37 == 120)
  {
    char v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216FD5C30();
    uint64_t v5 = (*((void *)v4 + 1) & 0xFFFFFFFFFFFFFFF8) != 0
       ? (uint64_t *)((*((void *)v4 + 1) & 0xFFFFFFFFFFFFFFF8) + 16)
       : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
    uint64_t v6 = *((char *)v5 + 23) >= 0 ? (const char *)v5 : (const char *)*v5;
    int v7 = *(char *)(a1 + 23);
    unint64_t v8 = *(void *)(a1 + 8);
    size_t v9 = v7 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(void *)(a1 + 8);
    size_t v10 = strlen(v6);
    if (v9 >= v10)
    {
      size_t v11 = v10;
      size_t v12 = *(void **)a1;
      size_t v13 = v7 >= 0 ? (const char *)a1 : *(const char **)a1;
      if (!strncmp(v13, v6, v11)) {
        goto LABEL_45;
      }
    }
  }
  if (*((void *)&v37 + 1) - (void)v37 != 96) {
    goto LABEL_31;
  }
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216FD5C30();
  uint64_t v15 = (*(void *)v14 & 0xFFFFFFFFFFFFFFF8) != 0
      ? (uint64_t *)((*(void *)v14 & 0xFFFFFFFFFFFFFFF8) + 16)
      : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
  uint64_t v16 = *((char *)v15 + 23) >= 0 ? (const char *)v15 : (const char *)*v15;
  int v7 = *(char *)(a1 + 23);
  unint64_t v8 = *(void *)(a1 + 8);
  size_t v17 = v7 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(void *)(a1 + 8);
  size_t v18 = strlen(v16);
  if (v17 >= v18
    && ((v19 = v18, size_t v12 = *(void **)a1, v7 >= 0) ? (v20 = (const char *)a1) : (v20 = *(const char **)a1),
        !strncmp(v20, v16, v19)))
  {
LABEL_45:
    if (v7 < 0)
    {
      sub_216778F24((unsigned char *)a2, v12, v8);
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(void *)(a2 + 16) = *(void *)(a1 + 16);
    }
  }
  else
  {
LABEL_31:
    uint64_t v21 = *((void *)&v37 + 1);
    uint64_t v22 = v37;
    if (*((void *)&v37 + 1) - (void)v37 == 24)
    {
      pxrInternal__aapl__pxrReserved__::TfStringTokenize((unsigned __int8 *)a1, ".", __p);
      sub_21680F80C((uint64_t *)&v37);
      long long v37 = *(_OWORD *)__p;
      std::string::size_type v38 = v36;
      __p[1] = 0;
      std::string::size_type v36 = 0;
      __p[0] = 0;
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      sub_216782F20((void ***)&v34);
      uint64_t v21 = *((void *)&v37 + 1);
      uint64_t v22 = v37;
    }
    if (v21 - v22 == 24)
    {
      pxrInternal__aapl__pxrReserved__::TfStringTokenize((unsigned __int8 *)a1, "_", __p);
      sub_21680F80C((uint64_t *)&v37);
      long long v37 = *(_OWORD *)__p;
      std::string::size_type v38 = v36;
      __p[1] = 0;
      std::string::size_type v36 = 0;
      __p[0] = 0;
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      sub_216782F20((void ***)&v34);
      uint64_t v21 = *((void *)&v37 + 1);
      uint64_t v22 = v37;
    }
    if (v21 - v22 == 24)
    {
      sub_216779094(__p, "user");
      sub_216FD6A1C((uint64_t *)&v37, v22, (__n128 *)__p);
      if (SHIBYTE(v36) < 0) {
        operator delete(__p[0]);
      }
    }
    size_t v23 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216FD5C30();
    if ((*((void *)v23 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*((void *)v23 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v23);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)EmptyString, (const void **)v37, (uint64_t)&v33);
    uint64_t v25 = std::string::append(&v33, ":");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    uint64_t v27 = (std::string *)(v37 + 24);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v37 + 1) - v37) >> 3) < 3)
    {
      if (*(char *)(v37 + 47) < 0)
      {
        sub_216778F24(&v32, *(void **)(v37 + 24), *(void *)(v37 + 32));
      }
      else
      {
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = *(void *)(v37 + 40);
      }
    }
    else
    {
      sub_216881C38("_", v27, *((std::string **)&v37 + 1), &v32);
    }
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v28 = &v32;
    }
    else {
      uint64_t v28 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v32.__r_.__value_.__l.__size_;
    }
    uint64_t v30 = std::string::append(&v34, (const std::string::value_type *)v28, size);
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    std::string::size_type v36 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier((size_t *)__p))
    {
      if (SHIBYTE(v36) < 0)
      {
        sub_216778F24((unsigned char *)a2, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(_OWORD *)a2 = *(_OWORD *)__p;
        *(void *)(a2 + 16) = v36;
      }
    }
    else
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
    }
    if (SHIBYTE(v36) < 0) {
      operator delete(__p[0]);
    }
  }
  __p[0] = &v37;
  sub_216782F20((void ***)__p);
}

void sub_216FD6990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  std::string __p = (void *)(v33 - 80);
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_216FD6A1C(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4 = a2;
  unint64_t v6 = a1[1];
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if (v6 >= v9)
  {
    uint64_t v11 = *a1;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v11) >> 3);
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v11) >> 3);
    unint64_t v15 = 2 * v14;
    if (2 * v14 <= v12) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v16 = v15;
    }
    uint64_t v24 = v7;
    if (v16) {
      size_t v17 = (char *)sub_216782ED8(v7, v16);
    }
    else {
      size_t v17 = 0;
    }
    size_t v20 = v17;
    uint64_t v21 = &v17[24 * v13];
    uint64_t v22 = v21;
    size_t v23 = &v17[24 * v16];
    sub_216FD7E80(&v20, a3);
    uint64_t v4 = sub_21680F250((uint64_t)a1, &v20, (long long *)v4);
    sub_216790E64((uint64_t)&v20);
  }
  else if (a2 == v6)
  {
    __n128 v18 = *a3;
    *(void *)(a2 + 16) = a3[1].n128_u64[0];
    *(__n128 *)a2 = v18;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    a1[1] = a2 + 24;
  }
  else
  {
    sub_21680F12C((uint64_t)a1, a2, v6, a2 + 24);
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    __n128 v10 = *a3;
    *(void *)(v4 + 16) = a3[1].n128_u64[0];
    *(__n128 *)uint64_t v4 = v10;
    a3[1].n128_u8[7] = 0;
    a3->n128_u8[0] = 0;
  }
  return v4;
}

void sub_216FD6B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216790E64((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::SetCoordinateSystem(uint64_t a1)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  unint64_t v1 = sub_216FD5C30();
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v2) {
    uint64_t v2 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)&v4, (uint64_t *)(v1 + 32), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v2 + 80), 0, 0, (uint64_t)v9);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v6 + 1);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v9, v3) & 1) != 0|| (uint64_t v4 = "usdRi/statementsAPI.cpp", v5 = (atomic_ullong *)"SetCoordinateSystem", v6 = 335, v7 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::SetCoordinateSystem(const std::string &)", v8 = 0, (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v4, "attr", 0)))
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<std::string>();
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FD6FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  sub_216D33F64((uint64_t)va);
  sub_216D16AD8((uint64_t)va1);
  sub_216D2EDA0((uint64_t)va2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::GetCoordinateSystem(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v2 = sub_216FD5C30();
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v2 + 32), (uint64_t)v9);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v9, v3))pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<std::string>(); {
  if ((v13 & 7) != 0)
  }
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FD7170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::HasCoordinateSystem(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  sub_216D16CFC((uint64_t)v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v1 = sub_216FD5C30();
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v1 + 32), (uint64_t)v9);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v9, v2))pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<std::string>(); {
  if ((v13 & 7) != 0)
  }
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v14);
  }
  return 0;
}

void sub_216FD72B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::SetScopedCoordinateSystem(uint64_t a1)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  unint64_t v1 = sub_216FD5C30();
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v2) {
    unint64_t v2 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)&v4, (uint64_t *)(v1 + 40), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v2 + 80), 0, 0, (uint64_t)v9);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v6 + 1);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v9, v3) & 1) != 0|| (uint64_t v4 = "usdRi/statementsAPI.cpp", v5 = (atomic_ullong *)"SetScopedCoordinateSystem", v6 = 386, v7 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::SetScopedCoordinateSystem(const std::string &)", v8 = 0, (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v4, "attr", 0)))
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<std::string>();
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FD76E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  sub_216D33F64((uint64_t)va);
  sub_216D16AD8((uint64_t)va1);
  sub_216D2EDA0((uint64_t)va2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::GetScopedCoordinateSystem(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v2 = sub_216FD5C30();
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v2 + 40), (uint64_t)v9);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v9, v3))pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<std::string>(); {
  if ((v13 & 7) != 0)
  }
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FD7880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::HasScopedCoordinateSystem(pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI *this)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  sub_216D16CFC((uint64_t)v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v1 = sub_216FD5C30();
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v1 + 40), (uint64_t)v9);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v9, v2))pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<std::string>(); {
  if ((v13 & 7) != 0)
  }
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v14);
  }
  return 0;
}

void sub_216FD79C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::GetModelCoordinateSystems(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v4 = (_DWORD *)(a1 + 16);
  sub_216D16CFC((uint64_t)v17, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  int v6 = v18;
  if (!v18 || (uint64_t v7 = *((void *)v18 + 7), (v7 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v18, v5);
    uint64_t v7 = *((void *)v6 + 7);
  }
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  if (v18) {
    sub_216D16E0C((atomic_ullong *)v18);
  }
  if ((v7 & 4) == 0) {
    return 1;
  }
  sub_216D16CFC((uint64_t)&v12, v3, v4);
  unint64_t v9 = sub_216FD5C30();
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v9 + 48), (uint64_t)v17);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v17, v10))uint64_t ForwardedTargets = pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)v17, a2); {
  else
  }
    uint64_t ForwardedTargets = 0;
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  if (v18) {
    sub_216D16E0C((atomic_ullong *)v18);
  }
  return ForwardedTargets;
}

void sub_216FD7B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRiStatementsAPI::GetModelScopedCoordinateSystems(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v4 = (_DWORD *)(a1 + 16);
  sub_216D16CFC((uint64_t)v17, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  int v6 = v18;
  if (!v18 || (uint64_t v7 = *((void *)v18 + 7), (v7 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v18, v5);
    uint64_t v7 = *((void *)v6 + 7);
  }
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  if (v18) {
    sub_216D16E0C((atomic_ullong *)v18);
  }
  if ((v7 & 4) == 0) {
    return 1;
  }
  sub_216D16CFC((uint64_t)&v12, v3, v4);
  unint64_t v9 = sub_216FD5C30();
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v9 + 56), (uint64_t)v17);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v17, v10))uint64_t ForwardedTargets = pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)v17, a2); {
  else
  }
    uint64_t ForwardedTargets = 0;
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  if (v18) {
    sub_216D16E0C((atomic_ullong *)v18);
  }
  return ForwardedTargets;
}

void sub_216FD7D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216FD7D50()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FD7E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

__n128 sub_216FD7E80(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3])
  {
    uint64_t v5 = (long long *)a1[1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == *a1) {
        unint64_t v10 = 1;
      }
      else {
        unint64_t v10 = 0x5555555555555556 * ((v4 - *a1) >> 3);
      }
      unint64_t v11 = v10 >> 2;
      uint64_t v12 = a1[4];
      uint64_t v29 = a1[4];
      uint64_t v13 = (char *)sub_216782ED8(v12, v10);
      int v15 = &v13[24 * v11];
      unint64_t v16 = a1[1];
      int64_t v17 = a1[2] - v16;
      if (v17)
      {
        uint64_t v18 = v17 / 24;
        int v19 = &v15[24 * v18];
        uint64_t v20 = 24 * v18;
        uint64_t v21 = &v13[24 * v11];
        do
        {
          long long v22 = *(_OWORD *)v16;
          *((void *)v21 + 2) = *(void *)(v16 + 16);
          *(_OWORD *)uint64_t v21 = v22;
          v21 += 24;
          *(void *)(v16 + 8) = 0;
          *(void *)(v16 + 16) = 0;
          *(void *)unint64_t v16 = 0;
          v16 += 24;
          v20 -= 24;
        }
        while (v20);
        int64x2_t v23 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        int64x2_t v23 = vdupq_n_s64(v16);
        int v19 = &v13[24 * v11];
      }
      uint64_t v26 = *a1;
      *a1 = v13;
      a1[1] = v15;
      int64x2_t v27 = v23;
      uint64_t v24 = a1[3];
      a1[2] = v19;
      a1[3] = &v13[24 * v14];
      uint64_t v28 = v24;
      sub_216790E64((uint64_t)&v26);
      uint64_t v4 = a1[2];
    }
    else
    {
      int64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 3);
      if (v6 >= -1) {
        uint64_t v7 = v6 + 1;
      }
      else {
        uint64_t v7 = v6 + 2;
      }
      uint64_t v8 = -3 * (v7 >> 1);
      sub_216A3104C((uint64_t)&v26, v5, (long long *)v4, (uint64_t)v5 - 24 * (v7 >> 1));
      uint64_t v4 = v9;
      a1[1] += 8 * v8;
      a1[2] = v9;
    }
  }
  __n128 result = *a2;
  *(void *)(v4 + 16) = a2[1].n128_u64[0];
  *(__n128 *)uint64_t v4 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  a1[2] += 24;
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdRiTokensType *pxrInternal__aapl__pxrReserved__::UsdRiTokensType::UsdRiTokensType(pxrInternal__aapl__pxrReserved__::UsdRiTokensType *this)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  int64x2_t v27 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "bspline", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v27, "cameraVisibility", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "catmull-rom", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "collection:cameraVisibility:includeRoot", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "constant", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "interpolation", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "linear", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "matte", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "outputs:ri:displacement", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "outputs:ri:surface", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "outputs:ri:volume", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "positions", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "ri", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "spline", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "values", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "RiMaterialAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "RiRenderPassAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "RiSplineAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "StatementsAPI", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v28 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v27;
  uint64_t v29 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v29 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v30 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v31 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v31 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v32 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v32 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v33 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v33 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v34 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v34 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v35 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v35 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v36 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v36 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v37 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v37 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v38 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v38 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v39 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v39 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v40 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v40 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v41 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v41 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v42 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v42 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v43 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v43 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v44 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v44 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v45 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v46 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v46 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  uint64_t v21 = (char *)operator new(0x98uLL);
  uint64_t v22 = 0;
  *((void *)this + 19) = v21;
  *((void *)this + 20) = v21;
  *((void *)this + 21) = v21 + 152;
  do
  {
    uint64_t v23 = *(uint64_t *)((char *)&v28 + v22);
    *(void *)&v21[v22] = v23;
    if ((v23 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v21[v22] &= 0xFFFFFFFFFFFFFFF8;
    }
    v22 += 8;
  }
  while (v22 != 152);
  *((void *)this + 20) = v21 + 152;
  for (uint64_t i = 144; i != -8; i -= 8)
  {
    uint64_t v25 = *(uint64_t *)((char *)&v28 + i);
    if ((v25 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_216FD8634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void **a20,uint64_t a21,char a22)
{
  sub_216889A04(&a20);
  uint64_t v32 = 144;
  while (1)
  {
    uint64_t v33 = *(void *)(&a22 + v32);
    if ((v33 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v32 -= 8;
    if (v32 == -8)
    {
      if ((*v31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_216FD88A0()
{
}

void sub_216FD88A8()
{
}

void sub_216FD88B0()
{
}

void sub_216FD88B8()
{
}

void sub_216FD88C0()
{
}

void sub_216FD88C8()
{
}

void sub_216FD88D0()
{
}

void sub_216FD88D8()
{
}

void sub_216FD88E0()
{
}

void sub_216FD88E8()
{
}

pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::UsdSkel_SkelAnimationQueryImpl(pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *this, const pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *a2)
{
  *((_DWORD *)this + 2) = 1;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(void *)this = &unk_26C76F130;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *)((char *)this + 96), a2);
  *((void *)this + 12) = &unk_26C76F2A8;
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetTranslationsAttr(a2, (uint64_t)&v6);
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *)((char *)this + 120), (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v6);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v8 + 1);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetRotationsAttr(a2, (uint64_t)&v6);
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *)((char *)this + 240), (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v6);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v8 + 1);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetScalesAttr(a2, (uint64_t)&v6);
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *)((char *)this + 360), (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v6);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v8 + 1);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetBlendShapeWeightsAttr(a2, (uint64_t)&v6);
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *)((char *)this + 480), (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v6);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v8 + 1);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  uint64_t v4 = *((void *)a2 + 1);
  if (v4
    && (*(unsigned char *)(v4 + 57) & 8) == 0
    && ((*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *))(*(void *)a2 + 32))(a2) & 1) != 0
    || (uint64_t v6 = "usdSkel/animQueryImpl.cpp",
        uint64_t v7 = (atomic_ullong *)"UsdSkel_SkelAnimationQueryImpl",
        uint64_t v8 = 111,
        unint64_t v9 = (unint64_t)"pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::UsdSkel_SkelAnimationQu"
                               "eryImpl(const UsdSkelAnimation &)",
        char v10 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v6, "anim", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetJointsAttr(a2, (uint64_t)&v6);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>();
  }
  return this;
}

void sub_216FD8C24(_Unwind_Exception *a1)
{
  sub_216D2FE74(v6);
  sub_216D2FE74(v5);
  sub_216D2FE74(v4);
  sub_216D2FE74(v3);
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::~UsdSkelAnimation(v2);
  sub_216FD8D00(v1);
  _Unwind_Resume(a1);
}

void sub_216FD8C8C(uint64_t a1, ...)
{
  va_start(va, a1);
  sub_216D2EDA0((uint64_t)va);
  JUMPOUT(0x216FD8C58);
}

void sub_216FD8C9C()
{
}

void sub_216FD8CA8(uint64_t a1, ...)
{
  va_start(va, a1);
  sub_216D2EDA0((uint64_t)va);
  JUMPOUT(0x216FD8C60);
}

void sub_216FD8CB8()
{
}

void sub_216FD8CC4(uint64_t a1, ...)
{
  va_start(va, a1);
  sub_216D2EDA0((uint64_t)va);
  JUMPOUT(0x216FD8C68);
}

void sub_216FD8CD4()
{
}

void sub_216FD8CE0(uint64_t a1, ...)
{
  va_start(va, a1);
  sub_216D2EDA0((uint64_t)va);
  JUMPOUT(0x216FD8C70);
}

void sub_216FD8CF0()
{
}

void sub_216FD8CF8()
{
}

void sub_216FD8D00(pxrInternal__aapl__pxrReserved__::TfRefBase *a1)
{
  *(void *)a1 = &unk_26C76F1D8;
  sub_2169B2E0C((void *)a1 + 7);
  sub_2169B2E0C((void *)a1 + 2);

  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::ComputeJointLocalTransformComponents()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::GetJointTransformTimeSamples(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t Attribute = pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 120));
  int v25 = *(_DWORD *)Attribute;
  uint64_t v7 = *(void *)(Attribute + 8);
  uint64_t v26 = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010(&v27, (_DWORD *)(Attribute + 16));
  sub_21698105C(&v28, (_DWORD *)(Attribute + 20));
  uint64_t v8 = *(void *)(Attribute + 24);
  uint64_t v29 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v29 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 240));
  int v30 = *(_DWORD *)v9;
  uint64_t v10 = *(void *)(v9 + 8);
  uint64_t v31 = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010(&v32, (_DWORD *)(v9 + 16));
  sub_21698105C(&v33, (_DWORD *)(v9 + 20));
  uint64_t v11 = *(void *)(v9 + 24);
  uint64_t v34 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v34 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 360));
  int v35 = *(_DWORD *)v12;
  uint64_t v13 = *(void *)(v12 + 8);
  uint64_t v36 = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010(&v37, (_DWORD *)(v12 + 16));
  sub_21698105C(&v38, (_DWORD *)(v12 + 20));
  uint64_t v14 = *(void *)(v12 + 24);
  uint64_t v39 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v39 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = &v20;
  char v24 = 0;
  uint64_t v20 = (pxrInternal__aapl__pxrReserved__::UsdObject *)operator new(0x60uLL);
  uint64_t v21 = v20;
  uint64_t v22 = (char *)v20 + 96;
  uint64_t v21 = (pxrInternal__aapl__pxrReserved__::UsdObject *)sub_216F44B2C((uint64_t)&v22, (uint64_t)&v25, (uint64_t)&v40, (uint64_t)v20);
  uint64_t UnionedTimeSamplesInInterval = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetUnionedTimeSamplesInInterval(&v20, a2, a3);
  uint64_t v23 = &v20;
  sub_216D6CFF8((void ***)&v23);
  for (uint64_t i = 0; i != -96; i -= 32)
  {
    uint64_t v17 = *(uint64_t *)((char *)&v39 + i);
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((int *)((char *)&v38 + i));
    sub_21697C414((int *)((char *)&v37 + i));
    uint64_t v18 = *(atomic_ullong **)((char *)&v36 + i);
    if (v18) {
      sub_216D16E0C(v18);
    }
  }
  return UnionedTimeSamplesInInterval;
}

void sub_216FD9084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  sub_216D6CFF8(&a12);
  for (uint64_t i = 64; i != -32; i -= 32)
    sub_216D2EDA0((uint64_t)(&a14 + i));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::GetJointTransformAttributes(uint64_t a1, uint64_t *a2)
{
  uint64_t Attribute = pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 120));
  unint64_t v5 = a2[1];
  if (v5 >= a2[2])
  {
    uint64_t v6 = sub_216D6D338(a2, Attribute);
  }
  else
  {
    sub_216D3B3EC((uint64_t)(a2 + 2), a2[1], Attribute);
    uint64_t v6 = v5 + 32;
    a2[1] = v5 + 32;
  }
  a2[1] = v6;
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 240));
  unint64_t v8 = a2[1];
  if (v8 >= a2[2])
  {
    uint64_t v9 = sub_216D6D338(a2, v7);
  }
  else
  {
    sub_216D3B3EC((uint64_t)(a2 + 2), a2[1], v7);
    uint64_t v9 = v8 + 32;
    a2[1] = v8 + 32;
  }
  a2[1] = v9;
  uint64_t v10 = pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 360));
  unint64_t v11 = a2[1];
  if (v11 >= a2[2])
  {
    uint64_t v12 = sub_216D6D338(a2, v10);
  }
  else
  {
    sub_216D3B3EC((uint64_t)(a2 + 2), a2[1], v10);
    uint64_t v12 = v11 + 32;
    a2[1] = v11 + 32;
  }
  a2[1] = v12;
  return 1;
}

void sub_216FD91F8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::JointTransformsMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  if (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::ValueMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *)((char *)this + 120), a2)|| pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::ValueMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *)((char *)this + 240), v3))
  {
    return 1;
  }

  return pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::ValueMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *)((char *)this + 360), v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::ComputeBlendShapeWeights(uint64_t a1, const char *a2, char *a3)
{
  uint64_t v3 = *(void *)(a1 + 104);
  if (v3 && (*(unsigned char *)(v3 + 57) & 8) == 0 && ((*(uint64_t (**)(void))(*(void *)(a1 + 96) + 32))() & 1) != 0) {
    goto LABEL_4;
  }
  v7[0] = "usdSkel/animQueryImpl.cpp";
  v7[1] = "ComputeBlendShapeWeights";
  uint64_t v7[2] = 219;
  v7[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::ComputeBlendShapeWeights(VtFloa"
          "tArray *, UsdTimeCode) const";
  char v8 = 0;
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"PackedJointAnimation schema object is invalid.", a2, a3);
  char v5 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "_anim", v4);
  uint64_t result = 0;
  if (v5) {
LABEL_4:
  }
    pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>();
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::GetBlendShapeWeightTimeSamples(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  return pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetTimeSamplesInInterval(a1 + 480, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::GetBlendShapeWeightAttributes(uint64_t a1, uint64_t *a2)
{
  uint64_t Attribute = pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 480));
  unint64_t v4 = a2[1];
  if (v4 >= a2[2])
  {
    uint64_t v5 = sub_216D6D338(a2, Attribute);
  }
  else
  {
    sub_216D3B3EC((uint64_t)(a2 + 2), a2[1], Attribute);
    uint64_t v5 = v4 + 32;
    a2[1] = v4 + 32;
  }
  a2[1] = v5;
  return 1;
}

void sub_216FD93B0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::BlendShapeWeightsMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::ValueMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *)((char *)this + 480), a2);
}

void pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl::New(pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl **a2@<X8>)
{
  StaticTfuint64_t Type = pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetStaticTfType(this);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v6);
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)this, SchemaInfo, v8))
  {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl *)operator new(0x258uLL);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, this);
    v10[0] = &unk_26C76F2A8;
    pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::UsdSkel_SkelAnimationQueryImpl(v9, (const pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)v10);
    *a2 = v9;
    unint64_t v11 = 0;
    sub_216FD9C1C(&v11);
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::~UsdSkelAnimation((pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)v10);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_216FD9470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::~UsdSkelAnimation((pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_216FD9498(pxrInternal__aapl__pxrReserved__::TfRefBase *a1)
{
  sub_216FD94D8(a1);

  operator delete(v1);
}

uint64_t sub_216FD94C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_216D16CFC(a2, (uint64_t *)(a1 + 104), (_DWORD *)(a1 + 112));
}

void sub_216FD94D8(pxrInternal__aapl__pxrReserved__::TfRefBase *a1)
{
  *(void *)a1 = &unk_26C76F130;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::TfRefBase *)((char *)a1 + 96);
  sub_216D2FE74((uint64_t)a1 + 480);
  sub_216D2FE74((uint64_t)a1 + 360);
  sub_216D2FE74((uint64_t)a1 + 240);
  sub_216D2FE74((uint64_t)a1 + 120);
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::~UsdSkelAnimation(v2);

  sub_216FD8D00(a1);
}

uint64_t sub_216FD9554(uint64_t a1, unint64_t *a2)
{
  if (a2)
  {
    uint64_t v30 = 0;
    memset(v29, 0, sizeof(v29));
    int v28 = 0;
    memset(v27, 0, sizeof(v27));
    uint64_t v26 = 0;
    memset(v25, 0, sizeof(v25));
    if ((*(unsigned int (**)(uint64_t, unint64_t *, _OWORD *, _OWORD *))(*(void *)a1 + 40))(a1, v29, v27, v25))
    {
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      uint64_t v18 = &v31;
      sub_216902248(a2, v29[0], &v18);
      int v4 = v30;
      uint64_t v5 = v29[0];
      uint64_t v6 = v28;
      uint64_t v7 = *(void *)&v27[0];
      uint64_t v8 = v26;
      uint64_t v9 = *(void *)&v25[0];
      sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v10, v11);
      if (!pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransforms(v4, v5, v6, v7, v8, v9, a2[4], *a2))
      {
        *(void *)&long long v31 = "usdSkel/animQueryImpl.cpp";
        *((void *)&v31 + 1) = "_ComputeJointLocalTransforms";
        *(void *)&long long v32 = 161;
        *((void *)&v32 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::_ComputeJointLoca"
                                "lTransforms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrRese"
                                "rved__::GfMatrix4d]";
        LOBYTE(v33) = 0;
        sub_216D16CFC((uint64_t)&v18, (uint64_t *)(a1 + 104), (_DWORD *)(a1 + 112));
        sub_216D0162C((uint64_t)&v18, &v23);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v31, (pxrInternal__aapl__pxrReserved__ *)"%s -- failed composing transforms from components.", v14, Text);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
        sub_21697C414(&v23);
        if ((v22 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        goto LABEL_13;
      }
      if (*a2 == *(void *)(a1 + 16))
      {
        uint64_t v12 = 1;
LABEL_16:
        sub_2168F83DC((uint64_t)v25);
        sub_2168F83DC((uint64_t)v27);
        sub_2168F83DC((uint64_t)v29);
        return v12;
      }
      if (*a2)
      {
        *(void *)&long long v31 = "usdSkel/animQueryImpl.cpp";
        *((void *)&v31 + 1) = "_ComputeJointLocalTransforms";
        *(void *)&long long v32 = 158;
        *((void *)&v32 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::_ComputeJointLoca"
                                "lTransforms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrRese"
                                "rved__::GfMatrix4d]";
        LOBYTE(v33) = 0;
        sub_216D16CFC((uint64_t)&v18, (uint64_t *)(a1 + 104), (_DWORD *)(a1 + 112));
        sub_216D0162C((uint64_t)&v18, &v23);
        uint64_t v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v31, (pxrInternal__aapl__pxrReserved__ *)"%s -- size of transform component arrays [%zu] != joint order size [%zu].", v16, v15, *a2, *(void *)(a1 + 16));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
        sub_21697C414(&v23);
        if ((v22 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
LABEL_13:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
        sub_21697C414(&v20);
        if (v19) {
          sub_216D16E0C(v19);
        }
      }
    }
    uint64_t v12 = 0;
    goto LABEL_16;
  }
  *(void *)&long long v31 = "usdSkel/animQueryImpl.cpp";
  *((void *)&v31 + 1) = "_ComputeJointLocalTransforms";
  *(void *)&long long v32 = 127;
  *((void *)&v32 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::_ComputeJointLocalTrans"
                          "forms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  LOBYTE(v33) = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' is null");
  return 0;
}

void sub_216FD9848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_216FD98BC(uint64_t a1, unint64_t *a2)
{
  if (a2)
  {
    uint64_t v30 = 0;
    memset(v29, 0, sizeof(v29));
    int v28 = 0;
    memset(v27, 0, sizeof(v27));
    uint64_t v26 = 0;
    memset(v25, 0, sizeof(v25));
    if ((*(unsigned int (**)(uint64_t, unint64_t *, _OWORD *, _OWORD *))(*(void *)a1 + 40))(a1, v29, v27, v25))
    {
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      uint64_t v18 = &v31;
      sub_216902ED0(a2, v29[0], &v18);
      int v4 = v30;
      uint64_t v5 = v29[0];
      uint64_t v6 = v28;
      uint64_t v7 = *(void *)&v27[0];
      uint64_t v8 = v26;
      uint64_t v9 = *(void *)&v25[0];
      sub_216903174((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v10, v11);
      if (!pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransforms(v4, v5, v6, v7, v8, v9, a2[4], *a2))
      {
        *(void *)&long long v31 = "usdSkel/animQueryImpl.cpp";
        *((void *)&v31 + 1) = "_ComputeJointLocalTransforms";
        *(void *)&long long v32 = 161;
        *((void *)&v32 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::_ComputeJointLoca"
                                "lTransforms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrRese"
                                "rved__::GfMatrix4f]";
        LOBYTE(v33) = 0;
        sub_216D16CFC((uint64_t)&v18, (uint64_t *)(a1 + 104), (_DWORD *)(a1 + 112));
        sub_216D0162C((uint64_t)&v18, &v23);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v31, (pxrInternal__aapl__pxrReserved__ *)"%s -- failed composing transforms from components.", v14, Text);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
        sub_21697C414(&v23);
        if ((v22 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        goto LABEL_13;
      }
      if (*a2 == *(void *)(a1 + 16))
      {
        uint64_t v12 = 1;
LABEL_16:
        sub_2168F83DC((uint64_t)v25);
        sub_2168F83DC((uint64_t)v27);
        sub_2168F83DC((uint64_t)v29);
        return v12;
      }
      if (*a2)
      {
        *(void *)&long long v31 = "usdSkel/animQueryImpl.cpp";
        *((void *)&v31 + 1) = "_ComputeJointLocalTransforms";
        *(void *)&long long v32 = 158;
        *((void *)&v32 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::_ComputeJointLoca"
                                "lTransforms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrRese"
                                "rved__::GfMatrix4f]";
        LOBYTE(v33) = 0;
        sub_216D16CFC((uint64_t)&v18, (uint64_t *)(a1 + 104), (_DWORD *)(a1 + 112));
        sub_216D0162C((uint64_t)&v18, &v23);
        uint64_t v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v31, (pxrInternal__aapl__pxrReserved__ *)"%s -- size of transform component arrays [%zu] != joint order size [%zu].", v16, v15, *a2, *(void *)(a1 + 16));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
        sub_21697C414(&v23);
        if ((v22 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
LABEL_13:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
        sub_21697C414(&v20);
        if (v19) {
          sub_216D16E0C(v19);
        }
      }
    }
    uint64_t v12 = 0;
    goto LABEL_16;
  }
  *(void *)&long long v31 = "usdSkel/animQueryImpl.cpp";
  *((void *)&v31 + 1) = "_ComputeJointLocalTransforms";
  *(void *)&long long v32 = 127;
  *((void *)&v32 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelAnimationQueryImpl::_ComputeJointLocalTrans"
                          "forms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
  LOBYTE(v33) = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' is null");
  return 0;
}

void sub_216FD9BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216FD9C1C(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::WriteScope::WriteScope(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 33) = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire(a1 + 8, (atomic_ullong *)(a2 + 2336), 1);
  return a1;
}

{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 33) = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire(a1 + 8, (atomic_ullong *)(a2 + 2336), 1);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::WriteScope::Clear(unint64_t **this)
{
  sub_216FD9D1C(*this);
  sub_216FD9DEC(*this + 73);
  sub_216FD9EBC(*this + 146);
  uint64_t v2 = *this + 219;

  return sub_216FD9F8C(v2);
}

uint64_t sub_216FD9D1C(unint64_t *a1)
{
  unint64_t v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  unint64_t v3 = sub_216851020(v2);
  do
  {
    unint64_t v4 = 0;
    unint64_t v5 = v3;
    unint64_t v6 = a1[v3 + 1];
    if (v3-- > 1) {
      char v8 = v5;
    }
    else {
      char v8 = 1;
    }
    do
    {
      unint64_t v9 = v6 + 24 * v4;
      unint64_t v12 = *(void *)(v9 + 16);
      unint64_t v11 = (void *)(v9 + 16);
      uint64_t v10 = (void *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          *unint64_t v11 = *v10;
          sub_216FDD370((uint64_t)a1, (uint64_t)v10);
          uint64_t v10 = (void *)*v11;
        }
        while (*v11 > 0x3FuLL);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    uint64_t result = sub_216FDD3A4((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

uint64_t sub_216FD9DEC(unint64_t *a1)
{
  unint64_t v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  unint64_t v3 = sub_216851020(v2);
  do
  {
    unint64_t v4 = 0;
    unint64_t v5 = v3;
    unint64_t v6 = a1[v3 + 1];
    if (v3-- > 1) {
      char v8 = v5;
    }
    else {
      char v8 = 1;
    }
    do
    {
      unint64_t v9 = v6 + 24 * v4;
      unint64_t v12 = *(void *)(v9 + 16);
      unint64_t v11 = (void *)(v9 + 16);
      uint64_t v10 = (void *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          *unint64_t v11 = *v10;
          sub_216FDD46C((uint64_t)a1, (uint64_t)v10);
          uint64_t v10 = (void *)*v11;
        }
        while (*v11 > 0x3FuLL);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    uint64_t result = sub_216FDD4A0((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

uint64_t sub_216FD9EBC(unint64_t *a1)
{
  unint64_t v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  unint64_t v3 = sub_216851020(v2);
  do
  {
    unint64_t v4 = 0;
    unint64_t v5 = v3;
    unint64_t v6 = a1[v3 + 1];
    if (v3-- > 1) {
      char v8 = v5;
    }
    else {
      char v8 = 1;
    }
    do
    {
      unint64_t v9 = v6 + 24 * v4;
      unint64_t v12 = *(void *)(v9 + 16);
      unint64_t v11 = (void *)(v9 + 16);
      uint64_t v10 = (void *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          *unint64_t v11 = *v10;
          sub_216FDD568((uint64_t)a1, (uint64_t)v10);
          uint64_t v10 = (void *)*v11;
        }
        while (*v11 > 0x3FuLL);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    uint64_t result = sub_216FDD59C((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

uint64_t sub_216FD9F8C(unint64_t *a1)
{
  unint64_t v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  unint64_t v3 = sub_216851020(v2);
  do
  {
    unint64_t v4 = 0;
    unint64_t v5 = v3;
    unint64_t v6 = a1[v3 + 1];
    if (v3-- > 1) {
      char v8 = v5;
    }
    else {
      char v8 = 1;
    }
    do
    {
      unint64_t v9 = v6 + 24 * v4;
      unint64_t v12 = *(void *)(v9 + 16);
      unint64_t v11 = (void *)(v9 + 16);
      uint64_t v10 = (void *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          *unint64_t v11 = *v10;
          sub_216FDD67C((uint64_t)a1, (uint64_t)v10);
          uint64_t v10 = (void *)*v11;
        }
        while (*v11 > 0x3FuLL);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    uint64_t result = sub_216FDD6B0((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::ReadScope(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 33) = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire(a1 + 8, (atomic_ullong *)(a2 + 2336), 0);
  return a1;
}

{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 33) = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire(a1 + 8, (atomic_ullong *)(a2 + 2336), 0);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::FindOrCreateAnimQuery(uint64_t **this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, uint64_t *a3@<X8>)
{
  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a2, a2)
    || (sub_216DF1588((uint64_t)a2, v6) & 1) == 0)
  {
    goto LABEL_15;
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a2 + 4))
  {
    uint64_t v11 = 0;
    LOBYTE(v12) = 0;
    uint64_t v13 = 0;
    if (sub_216FDA294(*this, (uint64_t)&v11, (uint64_t)a2))
    {
      *a3 = *(void *)(v13 + 48);
      sub_2168BD80C(a3);
LABEL_14:
      uint64_t v13 = 0;
      sub_21685C048(&v11);
      return;
    }
    uint64_t v13 = 0;
    sub_21685C048(&v11);
    if (pxrInternal__aapl__pxrReserved__::UsdSkelIsSkelAnimationPrim(a2, v7))
    {
      uint64_t v11 = 0;
      LOBYTE(v12) = 0;
      uint64_t v13 = 0;
      if (sub_216FDA314(*this, (uint64_t)&v11, (uint64_t)a2))
      {
        pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl::New(a2, &v10);
        int v8 = v13 + 48;
        unint64_t v9 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v13 + 48);
        *(void *)(v13 + 48) = v10;
        uint64_t v10 = 0;
        sub_2168BD378(v8, v9);
        sub_216FDD310(&v10);
      }
      *a3 = *(void *)(v13 + 48);
      sub_2168BD80C(a3);
      goto LABEL_14;
    }
LABEL_15:
    *a3 = 0;
    return;
  }
  sub_216F83748((uint64_t)a2, (uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::FindOrCreateAnimQuery((pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope *)this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v11);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v13 + 1);
  sub_21697C414(&v13);
  if (v12) {
    sub_216D16E0C(v12);
  }
}

void sub_216FDA24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  a13 = 0;
  sub_21685C048(&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_216FDA294(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_216FDD778(a1, 0, a3, 0, a2, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_216FDDA88, 0);
}

uint64_t sub_216FDA314(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_216FDD778(a1, 1, a3, 0, a2, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_216FDDF24, 0);
}

void pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::FindOrCreateSkelDefinition(pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, uint64_t *a3@<X8>)
{
  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a2, a2)
    || (sub_216DF1588((uint64_t)a2, v6) & 1) == 0)
  {
    goto LABEL_15;
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a2 + 4))
  {
    uint64_t v17 = 0;
    LOBYTE(v18) = 0;
    uint64_t v19 = 0;
    if (sub_216FDA5AC((uint64_t *)(*(void *)this + 584), (uint64_t)&v17, (uint64_t)a2))
    {
      *a3 = *(void *)(v19 + 48);
      sub_2168BD80C(a3);
LABEL_14:
      uint64_t v19 = 0;
      sub_21685C048(&v17);
      return;
    }
    uint64_t v19 = 0;
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)sub_21685C048(&v17);
    StaticTfuint64_t Type = pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetStaticTfType(v7);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v9);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)a2, SchemaInfo, v11))
    {
      uint64_t v17 = 0;
      LOBYTE(v18) = 0;
      uint64_t v19 = 0;
      if (sub_216FDA62C((uint64_t *)(*(void *)this + 584), (uint64_t)&v17, (uint64_t)a2))
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v15, a2);
        v15[0] = &unk_26C76FA70;
        pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::New((const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v15, v12, (uint64_t *)&v16);
        int v13 = v19 + 48;
        uint64_t v14 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v19 + 48);
        *(void *)(v19 + 48) = v16;
        uint64_t v16 = 0;
        sub_2168BD378(v13, v14);
        sub_216FDD340(&v16);
        pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v15);
      }
      *a3 = *(void *)(v19 + 48);
      sub_2168BD80C(a3);
      goto LABEL_14;
    }
LABEL_15:
    *a3 = 0;
    return;
  }
  sub_216F83748((uint64_t)a2, (uint64_t)&v17);
  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::FindOrCreateSkelDefinition(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v17);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v19 + 1);
  sub_21697C414(&v19);
  if (v18) {
    sub_216D16E0C(v18);
  }
}

void sub_216FDA554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  a15 = 0;
  sub_21685C048(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_216FDA5AC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_216FDE0A0(a1, 0, a3, 0, a2, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_216FDE3B0, 0);
}

uint64_t sub_216FDA62C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_216FDE0A0(a1, 1, a3, 0, a2, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_216FDE7EC, 0);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::FindOrCreateSkelQuery@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v20 = 0;
  LOBYTE(v21) = 0;
  *(void *)&long long v22 = 0;
  if (sub_216FDAA24((uint64_t *)(*(void *)this + 1168), (uint64_t)&v20, (uint64_t)a2))
  {
    uint64_t v6 = v22;
    *(void *)a3 = *(void *)(v22 + 48);
    sub_2168BD80C((uint64_t *)a3);
    *(void *)(a3 + 8) = *(void *)(v6 + 56);
    sub_2168BD80C((uint64_t *)(a3 + 8));
    *(_OWORD *)(a3 + 16) = *(_OWORD *)(v6 + 64);
    long long v7 = *(_OWORD *)(v6 + 96);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(a3 + 48) = v7;
    uint64_t v8 = *(void *)(v6 + 112);
    *(void *)(a3 + 64) = v8;
    if (v8)
    {
      unint64_t v9 = (atomic_ullong *)(v8 - 16);
      if (*(void *)(a3 + 56)) {
        unint64_t v9 = *(atomic_ullong **)(a3 + 56);
      }
      atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
    }
    *(_DWORD *)(a3 + 72) = *(_DWORD *)(v6 + 120);
    *(void *)&long long v22 = 0;
    return (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)sub_21685C048(&v20);
  }
  else
  {
    *(void *)&long long v22 = 0;
    sub_21685C048(&v20);
    pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::FindOrCreateSkelDefinition(this, a2, (uint64_t *)&v32);
    if (v32)
    {
      uint64_t v29 = 0;
      char v30 = 0;
      uint64_t v31 = 0;
      if (sub_216FDAAA4((uint64_t *)(*(void *)this + 1168), (uint64_t)&v29, (uint64_t)a2))
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v27, a2);
        v27[3] = 0;
        v27[0] = &unk_26C76F730;
        pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedAnimationSource((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v27, (uint64_t)&v20);
        pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::FindOrCreateAnimQuery((uint64_t **)this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v20, (uint64_t *)&v28);
        if ((BYTE8(v22) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v22 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
        sub_21697C414(&v22);
        if (v21) {
          sub_216D16E0C(v21);
        }
        pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::~UsdSkelBindingAPI((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v27);
        pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::UsdSkelSkeletonQuery(&v20, &v32, &v28);
        uint64_t v11 = v31;
        int v13 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v31 + 48);
        unint64_t v12 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v31 + 48);
        *(void *)(v31 + 48) = v20;
        uint64_t v20 = 0;
        sub_2168BD378((int)v13, v12);
        uint64_t v14 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v11 + 56);
        *(void *)(v11 + 56) = v21;
        int v21 = 0;
        sub_2168BD378(v11 + 56, v14);
        *(_OWORD *)(v11 + 64) = v22;
        if (v13 != &v20)
        {
          sub_2168F83DC(v11 + 80);
          long long v15 = v24;
          *(_OWORD *)(v11 + 80) = v23;
          *(_OWORD *)(v11 + 96) = v15;
          long long v23 = 0u;
          long long v24 = 0u;
          *(void *)(v11 + 112) = v25;
          uint64_t v25 = 0;
        }
        *(_DWORD *)(v11 + 120) = v26;
        sub_2168F83DC((uint64_t)&v23);
        sub_216FDD310((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v21);
        sub_216FDD340(&v20);
        sub_216FDD310(&v28);
      }
      uint64_t v16 = v31;
      *(void *)a3 = *(void *)(v31 + 48);
      sub_2168BD80C((uint64_t *)a3);
      *(void *)(a3 + 8) = *(void *)(v16 + 56);
      sub_2168BD80C((uint64_t *)(a3 + 8));
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(v16 + 64);
      long long v17 = *(_OWORD *)(v16 + 96);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(v16 + 80);
      *(_OWORD *)(a3 + 48) = v17;
      uint64_t v18 = *(void *)(v16 + 112);
      *(void *)(a3 + 64) = v18;
      if (v18)
      {
        uint64_t v19 = (atomic_ullong *)(v18 - 16);
        if (*(void *)(a3 + 56)) {
          uint64_t v19 = *(atomic_ullong **)(a3 + 56);
        }
        atomic_fetch_add_explicit(v19, 1uLL, memory_order_relaxed);
      }
      *(_DWORD *)(a3 + 72) = *(_DWORD *)(v16 + 120);
      uint64_t v31 = 0;
      sub_21685C048(&v29);
      return sub_216FDD340(&v32);
    }
    else
    {
      sub_216FDD340(&v32);
      return (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)sub_216FDC6F0((void *)a3);
    }
  }
}

void sub_216FDA988(_Unwind_Exception *a1)
{
  sub_216FDD310((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v1 - 80));
  *(void *)(v1 - 56) = 0;
  sub_21685C048((void *)(v1 - 72));
  sub_216FDD340((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v1 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_216FDAA24(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_216FDE8D8(a1, 0, a3, 0, a2, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_216FDEBE8, 0);
}

uint64_t sub_216FDAAA4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_216FDE8D8(a1, 1, a3, 0, a2, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_216FDF024, 0);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216FDAB24(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_2168F83DC((uint64_t)(a1 + 4));
  sub_216FDD310(a1 + 1);

  return sub_216FDD340(a1);
}

void *pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::GetSkinningQuery@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *a3@<X8>)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  if (sub_216FDABF8((uint64_t *)(*(void *)this + 1752), (uint64_t)&v5, (uint64_t)a2)) {
    sub_216FDC73C((uint64_t)a3, v7 + 48);
  }
  else {
    pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery(a3);
  }
  uint64_t v7 = 0;
  return sub_21685C048(&v5);
}

void sub_216FDABE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  a11 = 0;
  sub_21685C048(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216FDABF8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_216FDF208(a1, 0, a3, 0, a2, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_216FDF518, 0);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::_FindOrCreateSkinningQuery@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::FindOrCreateSkelQuery(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)(a3 + 224), (uint64_t)&v15);
  AnimQuery = (pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *)pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetAnimQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)&v15);
  if (v15)
  {
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetJointOrder((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)&v15, v7, v8, (uint64_t)v13);
  }
  else
  {
    uint64_t v14 = 0;
    memset(v13, 0, sizeof(v13));
  }
  if (*(void *)AnimQuery)
  {
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeOrder(AnimQuery, v7, v8, (uint64_t)v11);
  }
  else
  {
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery(a4, a2, (uint64_t)v13, (uint64_t)v11, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)a3, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)(a3 + 32), a3 + 64, a3 + 96, (pxrInternal__aapl__pxrReserved__::UsdProperty *)(a3 + 128), a3 + 160, a3 + 192);
  sub_2169B2E0C(v11);
  sub_2169B2E0C(v13);
  sub_2168F83DC((uint64_t)&v17);
  sub_216FDD310(&v16);
  return sub_216FDD340(&v15);
}

void sub_216FDAD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_2169B2E0C((uint64_t *)va);
  sub_216FDAB24((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::Populate(pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope *a1, uint64_t a2, void *a3)
{
  if (sub_216FDC16C(0))
  {
    sub_216D16CFC((uint64_t)&v68, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
    sub_216D0162C((uint64_t)&v68, (int *)&__b);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__b);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelCache] Populate map from <%s>\n", v6, v7, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__b + 1);
    sub_21697C414(&__b);
    if ((v71 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v70 + 1);
    sub_21697C414(&v70);
    if (v69) {
      sub_216D16E0C(v69);
    }
  }
  uint64_t v8 = *(void *)(a2 + 8);
  if (v8
    && (*(unsigned char *)(v8 + 57) & 8) == 0
    && ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2) & 1) != 0)
  {
    sub_216FDF9D0(&v137, 1uLL);
    sub_216D16CFC((uint64_t)&v68, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
    sub_216D3B730((uint64_t)v133, (uint64_t)&v68, a3);
    char v136 = 1;
    if ((v71 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v70 + 1);
    sub_21697C414(&v70);
    if (v69) {
      sub_216D16E0C(v69);
    }
    sub_216D3ADBC(v133, (uint64_t)v128);
    uint64_t v66 = &v129;
    while (1)
    {
      uint64_t v68 = (void **)v133[1];
      uint64_t v69 = v133;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v70);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v70 + 1);
      LODWORD(v71) = 0;
      WORD2(v71) = 0;
      if ((atomic_ullong *)v128[1] == v69 && (void **)v128[0] == v68)
      {
        BOOL v9 = 1;
        if (v129 == v70 && !v130 && !v131) {
          BOOL v9 = v132 != 0;
        }
      }
      else
      {
        BOOL v9 = 1;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v70 + 1);
      sub_21697C414(&v70);
      if (!v9) {
        break;
      }
      if (v132)
      {
        unint64_t v10 = v138;
        if (v138 != v137)
        {
          sub_216D3AE90((uint64_t)v128, (uint64_t)&v68);
          BOOL v11 = *(_DWORD *)(v10 - 32) == v68
             && *(atomic_ullong **)(v10 - 24) == v69
             && *(void *)(v10 - 16) == v70
             && (*(void *)(v10 - 8) & 0xFFFFFFFFFFFFFFF8) == (v71 & 0xFFFFFFFFFFFFFFF8);
          if ((v71 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v70 + 1);
          sub_21697C414(&v70);
          if (v69) {
            sub_216D16E0C(v69);
          }
          if (v11)
          {
            unint64_t v49 = v138 - 288;
            sub_216FDFD6C((uint64_t)&v139, v138 - 288);
            unint64_t v138 = v49;
          }
        }
      }
      else
      {
        sub_216D3B00C((uint64_t)v128, (uint64_t)&v68);
        StaticTfuint64_t Type = pxrInternal__aapl__pxrReserved__::UsdGeomImageable::_GetStaticTfType(v12);
        SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v14);
        char IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v68, SchemaInfo, v16);
        if ((v71 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v70 + 1);
        sub_21697C414(&v70);
        if (v69) {
          sub_216D16E0C(v69);
        }
        if (IsA)
        {
          sub_216FDCAE4((uint64_t)&__b, v138 - 288);
          sub_216D3AE90((uint64_t)v128, (uint64_t)&v68);
          unsigned int v19 = pxrInternal__aapl__pxrReserved__::UsdSkelIsSkinnablePrim((pxrInternal__aapl__pxrReserved__ *)&v68, v18);
          if ((v71 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v70 + 1);
          sub_21697C414(&v70);
          if (v69) {
            sub_216D16E0C(v69);
          }
          sub_216D3AE90((uint64_t)v128, (uint64_t)&v68);
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v87, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v68);
          v87[3] = 0;
          v87[0] = &unk_26C76F730;
          if ((v71 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v70 + 1);
          sub_21697C414(&v70);
          if (v69) {
            sub_216D16E0C(v69);
          }
          LODWORD(v68) = 1;
          uint64_t v69 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v70);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v70 + 1);
          unint64_t v71 = 0;
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v84, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v68);
          uint64_t v84 = &unk_26C76FA70;
          if ((v71 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v70 + 1);
          sub_21697C414(&v70);
          if (v69) {
            sub_216D16E0C(v69);
          }
          if (pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v87, (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v84))
          {
            sub_216D16CFC((uint64_t)&v68, &v85, &v86);
            int v123 = (int)v68;
            uint64_t v20 = v69;
            uint64_t v69 = 0;
            int v21 = v124;
            uint64_t v124 = v20;
            if (v21) {
              sub_216D16E0C(v21);
            }
            sub_21697DE94(&v125, (int *)&v70);
            sub_21697DEEC(&v126, (int *)&v70 + 1);
            if ((v127 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v127 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            unint64_t v127 = v71;
            unint64_t v71 = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v70 + 1);
            sub_21697C414(&v70);
            if (v69) {
              sub_216D16E0C(v69);
            }
          }
          pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v87, (uint64_t)&v140);
          sub_216FDC1D0((uint64_t)&v140, v22, (uint64_t)&v68);
          if ((v143 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v142 + 1);
          sub_21697C414(&v142);
          if (v141) {
            sub_216D16E0C(v141);
          }
          if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v68, v23)&& pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v68))
          {
            LODWORD(__b) = v68;
            long long v24 = v69;
            uint64_t v69 = 0;
            uint64_t v25 = v89;
            uint64_t v89 = v24;
            if (v25) {
              sub_216D16E0C(v25);
            }
            sub_21697DE94(&v90, (int *)&v70);
            sub_21697DEEC(&v91, (int *)&v70 + 1);
            if ((v92 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v92 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            unint64_t v92 = v71;
            unint64_t v71 = 0;
          }
          if ((v71 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v70 + 1);
          sub_21697C414(&v70);
          if (v69) {
            sub_216D16E0C(v69);
          }
          pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointWeightsAttr((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v87, (uint64_t)&v140);
          sub_216FDC1D0((uint64_t)&v140, v26, (uint64_t)&v68);
          if ((v143 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v142 + 1);
          sub_21697C414(&v142);
          if (v141) {
            sub_216D16E0C(v141);
          }
          if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v68, v27)&& pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v68))
          {
            int v93 = (int)v68;
            int v28 = v69;
            uint64_t v69 = 0;
            uint64_t v29 = v94;
            uint64_t v94 = v28;
            if (v29) {
              sub_216D16E0C(v29);
            }
            sub_21697DE94(&v95, (int *)&v70);
            sub_21697DEEC(&v96, (int *)&v70 + 1);
            if ((v97 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v97 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            unint64_t v97 = v71;
            unint64_t v71 = 0;
          }
          if ((v71 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v70 + 1);
          sub_21697C414(&v70);
          if (v69) {
            sub_216D16E0C(v69);
          }
          pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSkinningMethodAttr((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v87, (uint64_t)&v68);
          if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v68, v30)&& pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v68))
          {
            int v98 = (int)v68;
            uint64_t v31 = v69;
            uint64_t v69 = 0;
            long long v32 = v99;
            uint64_t v99 = v31;
            if (v32) {
              sub_216D16E0C(v32);
            }
            sub_21697DE94(&v100, (int *)&v70);
            sub_21697DEEC(&v101, (int *)&v70 + 1);
            if ((v102 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v102 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            unint64_t v102 = v71;
            unint64_t v71 = 0;
          }
          if ((v71 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v70 + 1);
          sub_21697C414(&v70);
          if (v69) {
            sub_216D16E0C(v69);
          }
          pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetGeomBindTransformAttr((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v87, (uint64_t)&v140);
          sub_216FDC1D0((uint64_t)&v140, v33, (uint64_t)&v68);
          if ((v143 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v142 + 1);
          sub_21697C414(&v142);
          if (v141) {
            sub_216D16E0C(v141);
          }
          if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v68, v34)&& pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v68))
          {
            int v103 = (int)v68;
            long long v35 = v69;
            uint64_t v69 = 0;
            long long v36 = v104;
            uint64_t v104 = v35;
            if (v36) {
              sub_216D16E0C(v36);
            }
            sub_21697DE94(&v105, (int *)&v70);
            sub_21697DEEC(&v106, (int *)&v70 + 1);
            if ((v107 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v107 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            unint64_t v107 = v71;
            unint64_t v71 = 0;
          }
          if ((v71 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v70 + 1);
          sub_21697C414(&v70);
          if (v69) {
            sub_216D16E0C(v69);
          }
          pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointsAttr((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v87, (uint64_t)&v140);
          sub_216FDC1D0((uint64_t)&v140, v37, (uint64_t)&v68);
          if ((v143 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v142 + 1);
          sub_21697C414(&v142);
          if (v141) {
            sub_216D16E0C(v141);
          }
          if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v68, v38)&& pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v68))
          {
            int v108 = (int)v68;
            uint64_t v39 = v69;
            uint64_t v69 = 0;
            uint64_t v40 = v109;
            uint64_t v109 = v39;
            if (v40) {
              sub_216D16E0C(v40);
            }
            sub_21697DE94(&v110, (int *)&v70);
            sub_21697DEEC(&v111, (int *)&v70 + 1);
            if ((v112 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v112 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            unint64_t v112 = v71;
            unint64_t v71 = 0;
          }
          if ((v71 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v70 + 1);
          sub_21697C414(&v70);
          if (v69) {
            sub_216D16E0C(v69);
          }
          if (v19)
          {
            pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetBlendShapesAttr((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v87, (uint64_t)&v140);
            sub_216FDC1D0((uint64_t)&v140, v41, (uint64_t)&v68);
            if ((v143 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v142 + 1);
            sub_21697C414(&v142);
            if (v141) {
              sub_216D16E0C(v141);
            }
            if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v68, v42)&& pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v68))
            {
              int v113 = (int)v68;
              uint64_t v43 = v69;
              uint64_t v69 = 0;
              uint64_t v44 = v114;
              uint64_t v114 = v43;
              if (v44) {
                sub_216D16E0C(v44);
              }
              sub_21697DE94(&v115, (int *)&v70);
              sub_21697DEEC(&v116, (int *)&v70 + 1);
              if ((v117 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v117 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              unint64_t v117 = v71;
              unint64_t v71 = 0;
            }
            if ((v71 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v70 + 1);
            sub_21697C414(&v70);
            if (v69) {
              sub_216D16E0C(v69);
            }
            pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetBlendShapeTargetsRel((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v87, (uint64_t)&v73);
            if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v73, v45))goto LABEL_160; {
            sub_216D16CFC((uint64_t)&v68, (uint64_t *)&v75, &v76);
            }
            BOOL v46 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v70);
            if ((v71 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v70 + 1);
            sub_21697C414(&v70);
            if (v69) {
              sub_216D16E0C(v69);
            }
            if (v46)
            {
              uint64_t v47 = sub_216D16CFC((uint64_t)&v140, (uint64_t *)&v75, &v76);
              sub_216F83748(v47, (uint64_t)&v68);
              uint64_t v48 = sub_216D563F8(&v73);
              pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v68, v48, (uint64_t)&__p);
              if ((v71 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v70 + 1);
              sub_21697C414(&v70);
              if (v69) {
                sub_216D16E0C(v69);
              }
              if ((v143 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v142 + 1);
              sub_21697C414(&v142);
              if (v141) {
                sub_216D16E0C(v141);
              }
            }
            else
            {
LABEL_160:
              LODWORD(__p) = v73;
              uint64_t v80 = v75;
              if (v75) {
                atomic_fetch_add_explicit(v75 + 6, 1uLL, memory_order_relaxed);
              }
              sub_216981010(&v81, &v76);
              sub_21698105C(&v82, &v77);
              uint64_t v83 = v78;
              if ((v78 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v78 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                v83 &= 0xFFFFFFFFFFFFFFF8;
              }
            }
            if ((v78 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v78 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v77);
            sub_21697C414(&v76);
            if (v75) {
              sub_216D16E0C(v75);
            }
            if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&__p, v50)&& pxrInternal__aapl__pxrReserved__::UsdRelationship::HasAuthoredTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&__p))
            {
              int v118 = (int)__p;
              uint64_t v51 = v80;
              uint64_t v80 = 0;
              uint64_t v52 = v119;
              uint64_t v119 = v51;
              if (v52) {
                sub_216D16E0C(v52);
              }
              sub_21697DE94(&v120, &v81);
              sub_21697DEEC(&v121, &v82);
              if ((v122 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v122 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              uint64_t v122 = v83;
              uint64_t v83 = 0;
            }
            if ((v83 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v83 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v82);
            sub_21697C414(&v81);
            if (v80) {
              sub_216D16E0C(v80);
            }
            uint64_t v140 = 0;
            LOBYTE(v141) = 0;
            uint64_t v142 = 0;
            uint64_t v53 = *(void *)a1;
            sub_216D3AE90((uint64_t)v128, (uint64_t)&v68);
            int v54 = sub_216FDC3BC((uint64_t *)(v53 + 1752), (uint64_t)&v140, (uint64_t)&v68);
            if ((v71 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v70 + 1);
            sub_21697C414(&v70);
            if (v69) {
              sub_216D16E0C(v69);
            }
            if (v54)
            {
              sub_216D3AE90((uint64_t)v128, (uint64_t)&__p);
              pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::_FindOrCreateSkinningQuery(a1, (uint64_t)&__p, (uint64_t)&__b, (uint64_t)&v68);
              sub_216FDC43C(v142 + 48, (uint64_t)&v68);
              sub_216FDCF10((uint64_t)&v68);
              if ((v83 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v83 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v82);
              sub_21697C414(&v81);
              if (v80) {
                sub_216D16E0C(v80);
              }
            }
            if (sub_216FDC16C(0))
            {
              sub_2167794AC(&__p, 0x1C71C71C71C71C72 * ((uint64_t)(v138 - v137) >> 5), 32);
              if (v82 >= 0) {
                p_p = &__p;
              }
              else {
                p_p = __p;
              }
              sub_216D3B00C((uint64_t)v128, (uint64_t)&v68);
              sub_216D0162C((uint64_t)&v68, &v73);
              uint64_t v56 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v73);
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelCache] %sAdded skinning query for prim <%s>\n", v57, v58, p_p, v56);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v74);
              sub_21697C414(&v73);
              if ((v71 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v70 + 1);
              sub_21697C414(&v70);
              if (v69) {
                sub_216D16E0C(v69);
              }
              if (SHIBYTE(v82) < 0) {
                operator delete(__p);
              }
            }
            pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v128);
            uint64_t v142 = 0;
            sub_21685C048(&v140);
          }
          sub_216D3AE90((uint64_t)v128, (uint64_t)&v68);
          unint64_t v59 = v138;
          if (v138 >= v139)
          {
            uint64_t v60 = sub_216FDFFE4(&v137, (uint64_t)&__b, (uint64_t)&v68);
          }
          else
          {
            sub_216FE010C(v138, (uint64_t)&__b, (uint64_t)&v68);
            uint64_t v60 = v59 + 288;
          }
          unint64_t v138 = v60;
          if ((v71 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v70 + 1);
          sub_21697C414(&v70);
          if (v69) {
            sub_216D16E0C(v69);
          }
          pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v84);
          pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::~UsdSkelBindingAPI((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v87);
          sub_216FDD12C((uint64_t)&__b);
        }
        else
        {
          if (sub_216FDC16C(0))
          {
            sub_2167794AC(&__b, 0x1C71C71C71C71C72 * ((uint64_t)(v138 - v137) >> 5), 32);
            uint64_t v61 = v91 >= 0 ? &__b : (void **)__b;
            sub_216D3B00C((uint64_t)v128, (uint64_t)&v68);
            sub_216D0162C((uint64_t)&v68, (int *)&v140);
            uint64_t v62 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v140);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelCache]  %sPruning traversal at <%s> (prim is not UsdGeomImageable)\n", v63, v64, v61, v62, v66);
            sub_21697B754(&v140);
            sub_216D3B0D8((uint64_t)&v68);
            if (SHIBYTE(v91) < 0) {
              operator delete(__b);
            }
          }
          pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v128);
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)v128);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v129 + 1);
    sub_21697C414(v66);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v135);
    sub_21697C414(&v134);
    uint64_t v68 = (void **)&v137;
    sub_216FDFCD4(&v68);
    return 1;
  }
  else
  {
    uint64_t v68 = (void **)"usdSkel/cacheImpl.cpp";
    uint64_t v69 = (atomic_ullong *)"Populate";
    uint64_t v70 = 230;
    unint64_t v71 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::Populate(const UsdSkelR"
                            "oot &, Usd_PrimFlagsPredicate)";
    char v72 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v68, 1, (pxrInternal__aapl__pxrReserved__ *)"'root' is invalid.");
    return 0;
  }
}

void sub_216FDBE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_216D3B0D8((uint64_t)&a35);
  if (SLOBYTE(STACK[0x2EF]) < 0) {
    operator delete((void *)STACK[0x2D8]);
  }
  sub_216D3AE58(v35 - 232);
  sub_216D3AF04(v35 - 200);
  STACK[0x2D8] = v35 - 144;
  sub_216FDFCD4((void ***)&STACK[0x2D8]);
  _Unwind_Resume(a1);
}

void sub_216FDC15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

BOOL sub_216FDC16C(int a1)
{
  uint64_t v2 = sub_216FDF954();
  unsigned int v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    uint64_t v5 = v2;
    uint64_t v6 = sub_216FDF954();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), off_264294658[a1]);
    unsigned int v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

void sub_216FDC1D0(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, uint64_t a3@<X8>)
{
  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a1, a2))goto LABEL_15; {
  sub_216D16CFC((uint64_t)v14, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  }
  BOOL v5 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_21697C414(&v16);
  if (v15) {
    sub_216D16E0C(v15);
  }
  if (v5)
  {
    sub_216D16CFC((uint64_t)&v9, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    sub_216F83748((uint64_t)&v9, (uint64_t)v14);
    uint64_t v6 = sub_216D563F8((_DWORD *)a1);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v14, v6, a3);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
    sub_21697C414(&v16);
    if (v15) {
      sub_216D16E0C(v15);
    }
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
    sub_21697C414(&v11);
    if (v10) {
      sub_216D16E0C(v10);
    }
  }
  else
  {
LABEL_15:
    *(_DWORD *)a3 = *(_DWORD *)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a3 + 8) = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 48), 1uLL, memory_order_relaxed);
    }
    sub_216981010((_DWORD *)(a3 + 16), (_DWORD *)(a1 + 16));
    sub_21698105C((_DWORD *)(a3 + 20), (_DWORD *)(a1 + 20));
    uint64_t v8 = *(void *)(a1 + 24);
    *(void *)(a3 + 24) = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)(a3 + 24) &= 0xFFFFFFFFFFFFFFF8;
    }
  }
}

void sub_216FDC390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216FDC3BC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_216FDF208(a1, 1, a3, 0, a2, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_216FDFDD8, 0);
}

uint64_t sub_216FDC43C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  BOOL v5 = *(atomic_ullong **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    sub_216D16E0C(v5);
  }
  sub_21697DE94((int *)(a1 + 16), (int *)(a2 + 16));
  sub_21697DEEC((int *)(a1 + 20), (int *)(a2 + 20));
  if (a2 == a1)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 24);
    if ((v6 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = 0;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    if ((v7 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 40) = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=(a1 + 48, a2 + 48);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=(a1 + 96, a2 + 96);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  uint64_t v8 = *(void *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  uint64_t v9 = *(atomic_ullong **)(a1 + 152);
  *(void *)(a1 + 152) = v8;
  if (v9) {
    sub_216D16E0C(v9);
  }
  sub_21697DE94((int *)(a1 + 160), (int *)(a2 + 160));
  sub_21697DEEC((int *)(a1 + 164), (int *)(a2 + 164));
  if (a2 != a1)
  {
    uint64_t v10 = *(void *)(a1 + 168);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a2 + 168) = 0;
  }
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  uint64_t v11 = *(void *)(a2 + 184);
  *(void *)(a2 + 184) = 0;
  int v12 = *(atomic_ullong **)(a1 + 184);
  *(void *)(a1 + 184) = v11;
  if (v12) {
    sub_216D16E0C(v12);
  }
  sub_21697DE94((int *)(a1 + 192), (int *)(a2 + 192));
  sub_21697DEEC((int *)(a1 + 196), (int *)(a2 + 196));
  if (a2 != a1)
  {
    uint64_t v13 = *(void *)(a1 + 200);
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(void *)(a2 + 200) = 0;
  }
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  uint64_t v14 = *(void *)(a2 + 216);
  *(void *)(a2 + 216) = 0;
  uint64_t v15 = *(atomic_ullong **)(a1 + 216);
  *(void *)(a1 + 216) = v14;
  if (v15) {
    sub_216D16E0C(v15);
  }
  sub_21697DE94((int *)(a1 + 224), (int *)(a2 + 224));
  sub_21697DEEC((int *)(a1 + 228), (int *)(a2 + 228));
  if (a2 != a1)
  {
    uint64_t v16 = *(void *)(a1 + 232);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    *(void *)(a2 + 232) = 0;
  }
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  uint64_t v17 = *(void *)(a2 + 248);
  *(void *)(a2 + 248) = 0;
  uint64_t v18 = *(atomic_ullong **)(a1 + 248);
  *(void *)(a1 + 248) = v17;
  if (v18) {
    sub_216D16E0C(v18);
  }
  sub_21697DE94((int *)(a1 + 256), (int *)(a2 + 256));
  sub_21697DEEC((int *)(a1 + 260), (int *)(a2 + 260));
  if (a2 != a1)
  {
    uint64_t v19 = *(void *)(a1 + 264);
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    *(void *)(a2 + 264) = 0;
  }
  long long v20 = *(_OWORD *)(a2 + 272);
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 280) = 0;
  int v21 = *(std::__shared_weak_count **)(a1 + 280);
  *(_OWORD *)(a1 + 272) = v20;
  if (v21) {
    sub_216784EC4(v21);
  }
  long long v22 = *(_OWORD *)(a2 + 288);
  *(void *)(a2 + 288) = 0;
  *(void *)(a2 + 296) = 0;
  long long v23 = *(std::__shared_weak_count **)(a1 + 296);
  *(_OWORD *)(a1 + 288) = v22;
  if (v23) {
    sub_216784EC4(v23);
  }
  sub_216FDCE2C(a1 + 304, a2 + 304);
  sub_216FDCE2C(a1 + 352, a2 + 352);
  return a1;
}

void *sub_216FDC6F0(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::UsdSkelAnimMapper((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)(a1 + 2));
  return a1;
}

void sub_216FDC720(_Unwind_Exception *a1)
{
  sub_216FDD310(v1 + 1);
  sub_216FDD340(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216FDC73C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 40) &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a1 + 48), (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a2 + 48));
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a1 + 96), (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a2 + 96));
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  uint64_t v7 = *(void *)(a2 + 152);
  *(void *)(a1 + 152) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 160), (_DWORD *)(a2 + 160));
  sub_21698105C((_DWORD *)(a1 + 164), (_DWORD *)(a2 + 164));
  uint64_t v8 = *(void *)(a2 + 168);
  *(void *)(a1 + 168) = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 168) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  uint64_t v9 = *(void *)(a2 + 184);
  *(void *)(a1 + 184) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 192), (_DWORD *)(a2 + 192));
  sub_21698105C((_DWORD *)(a1 + 196), (_DWORD *)(a2 + 196));
  uint64_t v10 = *(void *)(a2 + 200);
  *(void *)(a1 + 200) = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 200) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  uint64_t v11 = *(void *)(a2 + 216);
  *(void *)(a1 + 216) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 224), (_DWORD *)(a2 + 224));
  sub_21698105C((_DWORD *)(a1 + 228), (_DWORD *)(a2 + 228));
  uint64_t v12 = *(void *)(a2 + 232);
  *(void *)(a1 + 232) = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 232) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  uint64_t v13 = *(void *)(a2 + 248);
  *(void *)(a1 + 248) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 256), (_DWORD *)(a2 + 256));
  sub_21698105C((_DWORD *)(a1 + 260), (_DWORD *)(a2 + 260));
  uint64_t v14 = *(void *)(a2 + 264);
  *(void *)(a1 + 264) = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 264) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 344) = 0;
  if (*(unsigned char *)(a2 + 344))
  {
    long long v17 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v17;
    uint64_t v18 = *(void *)(a2 + 336);
    *(void *)(a1 + 336) = v18;
    if (v18)
    {
      uint64_t v19 = (atomic_ullong *)(v18 - 16);
      if (*(void *)(a1 + 328)) {
        uint64_t v19 = *(atomic_ullong **)(a1 + 328);
      }
      atomic_fetch_add_explicit(v19, 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a1 + 344) = 1;
  }
  *(unsigned char *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 392) = 0;
  if (*(unsigned char *)(a2 + 392))
  {
    long long v20 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 368) = v20;
    uint64_t v21 = *(void *)(a2 + 384);
    *(void *)(a1 + 384) = v21;
    if (v21)
    {
      long long v22 = (atomic_ullong *)(v21 - 16);
      if (*(void *)(a1 + 376)) {
        long long v22 = *(atomic_ullong **)(a1 + 376);
      }
      atomic_fetch_add_explicit(v22, 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a1 + 392) = 1;
  }
  return a1;
}

void sub_216FDCA70(_Unwind_Exception *a1)
{
  sub_216F45190(v2);
  uint64_t v4 = *(void *)(v1 + 40);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216FDCAAC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    sub_2169B2E0C((void *)a1);
  }
  return a1;
}

uint64_t sub_216FDCAE4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 48), (_DWORD *)(a2 + 48));
  sub_21698105C((_DWORD *)(a1 + 52), (_DWORD *)(a2 + 52));
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 56) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 72) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 80), (_DWORD *)(a2 + 80));
  sub_21698105C((_DWORD *)(a1 + 84), (_DWORD *)(a2 + 84));
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 88) = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 88) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v10 = *(void *)(a2 + 104);
  *(void *)(a1 + 104) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 112), (_DWORD *)(a2 + 112));
  sub_21698105C((_DWORD *)(a1 + 116), (_DWORD *)(a2 + 116));
  uint64_t v11 = *(void *)(a2 + 120);
  *(void *)(a1 + 120) = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 120) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  uint64_t v12 = *(void *)(a2 + 136);
  *(void *)(a1 + 136) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 144), (_DWORD *)(a2 + 144));
  sub_21698105C((_DWORD *)(a1 + 148), (_DWORD *)(a2 + 148));
  uint64_t v13 = *(void *)(a2 + 152);
  *(void *)(a1 + 152) = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 152) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  uint64_t v14 = *(void *)(a2 + 168);
  *(void *)(a1 + 168) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 176), (_DWORD *)(a2 + 176));
  sub_21698105C((_DWORD *)(a1 + 180), (_DWORD *)(a2 + 180));
  uint64_t v15 = *(void *)(a2 + 184);
  *(void *)(a1 + 184) = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 184) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  uint64_t v16 = *(void *)(a2 + 200);
  *(void *)(a1 + 200) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 208), (_DWORD *)(a2 + 208));
  sub_21698105C((_DWORD *)(a1 + 212), (_DWORD *)(a2 + 212));
  uint64_t v17 = *(void *)(a2 + 216);
  *(void *)(a1 + 216) = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 216) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  uint64_t v18 = *(void *)(a2 + 232);
  *(void *)(a1 + 232) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 240), (_DWORD *)(a2 + 240));
  sub_21698105C((_DWORD *)(a1 + 244), (_DWORD *)(a2 + 244));
  uint64_t v19 = *(void *)(a2 + 248);
  *(void *)(a1 + 248) = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 248) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

double sub_216FDCE2C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
  {
    if (a1 != a2)
    {
      if (*(unsigned char *)(a1 + 40))
      {
        sub_2169B2E0C((void *)a1);
        long long v4 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v4;
        double result = 0.0;
        *(_OWORD *)a2 = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a2 + 32) = 0;
      }
    }
  }
  else if (*(unsigned char *)(a1 + 40))
  {
    sub_216FDCEDC(a1);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    *(unsigned char *)(a1 + 40) = 1;
  }
  return result;
}

void sub_216FDCEDC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    sub_2169B2E0C((void *)a1);
    *(unsigned char *)(a1 + 40) = 0;
  }
}

uint64_t sub_216FDCF10(uint64_t a1)
{
  sub_216FDCAAC(a1 + 352);
  sub_216FDCAAC(a1 + 304);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 296);
  if (v2) {
    sub_216784EC4(v2);
  }
  unsigned int v3 = *(std::__shared_weak_count **)(a1 + 280);
  if (v3) {
    sub_216784EC4(v3);
  }
  uint64_t v4 = *(void *)(a1 + 264);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 260));
  sub_21697C414((_DWORD *)(a1 + 256));
  uint64_t v5 = *(atomic_ullong **)(a1 + 248);
  if (v5) {
    sub_216D16E0C(v5);
  }
  uint64_t v6 = *(void *)(a1 + 232);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 228));
  sub_21697C414((_DWORD *)(a1 + 224));
  uint64_t v7 = *(atomic_ullong **)(a1 + 216);
  if (v7) {
    sub_216D16E0C(v7);
  }
  uint64_t v8 = *(void *)(a1 + 200);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 196));
  sub_21697C414((_DWORD *)(a1 + 192));
  uint64_t v9 = *(atomic_ullong **)(a1 + 184);
  if (v9) {
    sub_216D16E0C(v9);
  }
  uint64_t v10 = *(void *)(a1 + 168);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 164));
  sub_21697C414((_DWORD *)(a1 + 160));
  uint64_t v11 = *(atomic_ullong **)(a1 + 152);
  if (v11) {
    sub_216D16E0C(v11);
  }
  uint64_t v12 = *(void *)(a1 + 128);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *(void *)(a1 + 120);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 116));
  sub_21697C414((_DWORD *)(a1 + 112));
  uint64_t v14 = *(atomic_ullong **)(a1 + 104);
  if (v14) {
    sub_216D16E0C(v14);
  }
  uint64_t v15 = *(void *)(a1 + 80);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *(void *)(a1 + 72);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 68));
  sub_21697C414((_DWORD *)(a1 + 64));
  uint64_t v17 = *(atomic_ullong **)(a1 + 56);
  if (v17) {
    sub_216D16E0C(v17);
  }
  uint64_t v18 = *(void *)(a1 + 40);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *(void *)(a1 + 24);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  long long v20 = *(atomic_ullong **)(a1 + 8);
  if (v20) {
    sub_216D16E0C(v20);
  }
  return a1;
}

uint64_t sub_216FDD12C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 248);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 244));
  sub_21697C414((_DWORD *)(a1 + 240));
  unsigned int v3 = *(atomic_ullong **)(a1 + 232);
  if (v3) {
    sub_216D16E0C(v3);
  }
  uint64_t v4 = *(void *)(a1 + 216);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 212));
  sub_21697C414((_DWORD *)(a1 + 208));
  uint64_t v5 = *(atomic_ullong **)(a1 + 200);
  if (v5) {
    sub_216D16E0C(v5);
  }
  uint64_t v6 = *(void *)(a1 + 184);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 180));
  sub_21697C414((_DWORD *)(a1 + 176));
  uint64_t v7 = *(atomic_ullong **)(a1 + 168);
  if (v7) {
    sub_216D16E0C(v7);
  }
  uint64_t v8 = *(void *)(a1 + 152);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 148));
  sub_21697C414((_DWORD *)(a1 + 144));
  uint64_t v9 = *(atomic_ullong **)(a1 + 136);
  if (v9) {
    sub_216D16E0C(v9);
  }
  uint64_t v10 = *(void *)(a1 + 120);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 116));
  sub_21697C414((_DWORD *)(a1 + 112));
  uint64_t v11 = *(atomic_ullong **)(a1 + 104);
  if (v11) {
    sub_216D16E0C(v11);
  }
  uint64_t v12 = *(void *)(a1 + 88);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 84));
  sub_21697C414((_DWORD *)(a1 + 80));
  uint64_t v13 = *(atomic_ullong **)(a1 + 72);
  if (v13) {
    sub_216D16E0C(v13);
  }
  uint64_t v14 = *(void *)(a1 + 56);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 52));
  sub_21697C414((_DWORD *)(a1 + 48));
  uint64_t v15 = *(atomic_ullong **)(a1 + 40);
  if (v15) {
    sub_216D16E0C(v15);
  }
  uint64_t v16 = *(void *)(a1 + 24);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v17 = *(atomic_ullong **)(a1 + 8);
  if (v17) {
    sub_216D16E0C(v17);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216FDD310(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216FDD340(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

uint64_t sub_216FDD370(uint64_t a1, uint64_t a2)
{
  sub_216FDD3F4(a2 + 16);
  return tbb::internal::deallocate_via_handler_v3(a2, v3);
}

uint64_t sub_216FDD3A4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 + 8 * a2;
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v4 = (void *)(v2 + 8);
  uint64_t result = v5;
  if (a2 < 8)
  {
    if (!a2) {
      return result;
    }
    if (a2 == 1) {
      uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
    }
  }
  else
  {
    uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  *uint64_t v4 = 0;
  return result;
}

void sub_216FDD3F4(uint64_t a1)
{
  sub_216FDD310((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  unsigned int v3 = *(atomic_ullong **)(a1 + 8);
  if (v3)
  {
    sub_216D16E0C(v3);
  }
}

uint64_t sub_216FDD46C(uint64_t a1, uint64_t a2)
{
  sub_216FDD4F0(a2 + 16);
  return tbb::internal::deallocate_via_handler_v3(a2, v3);
}

uint64_t sub_216FDD4A0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 + 8 * a2;
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v4 = (void *)(v2 + 8);
  uint64_t result = v5;
  if (a2 < 8)
  {
    if (!a2) {
      return result;
    }
    if (a2 == 1) {
      uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
    }
  }
  else
  {
    uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  *uint64_t v4 = 0;
  return result;
}

void sub_216FDD4F0(uint64_t a1)
{
  sub_216FDD340((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  unsigned int v3 = *(atomic_ullong **)(a1 + 8);
  if (v3)
  {
    sub_216D16E0C(v3);
  }
}

uint64_t sub_216FDD568(uint64_t a1, uint64_t a2)
{
  sub_216FDD5EC(a2 + 16);
  return tbb::internal::deallocate_via_handler_v3(a2, v3);
}

uint64_t sub_216FDD59C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 + 8 * a2;
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v4 = (void *)(v2 + 8);
  uint64_t result = v5;
  if (a2 < 8)
  {
    if (!a2) {
      return result;
    }
    if (a2 == 1) {
      uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
    }
  }
  else
  {
    uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  *uint64_t v4 = 0;
  return result;
}

void sub_216FDD5EC(uint64_t a1)
{
  sub_2168F83DC(a1 + 64);
  sub_216FDD310((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 40));
  sub_216FDD340((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  unsigned int v3 = *(atomic_ullong **)(a1 + 8);
  if (v3)
  {
    sub_216D16E0C(v3);
  }
}

uint64_t sub_216FDD67C(uint64_t a1, uint64_t a2)
{
  sub_216FDD700(a2 + 16);
  return tbb::internal::deallocate_via_handler_v3(a2, v3);
}

uint64_t sub_216FDD6B0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 + 8 * a2;
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v4 = (void *)(v2 + 8);
  uint64_t result = v5;
  if (a2 < 8)
  {
    if (!a2) {
      return result;
    }
    if (a2 == 1) {
      uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
    }
  }
  else
  {
    uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  *uint64_t v4 = 0;
  return result;
}

void sub_216FDD700(uint64_t a1)
{
  sub_216FDCF10(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  unsigned int v3 = *(atomic_ullong **)(a1 + 8);
  if (v3)
  {
    sub_216D16E0C(v3);
  }
}

uint64_t sub_216FDD778(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t), void *a8)
{
  long long v32 = 0;
  char v33 = 0;
  sub_216D6EF4C((uint64_t)&v32, (unsigned int *)a3, (void *)(a3 + 8), (unsigned int *)(a3 + 16), (void *)(a3 + 24));
  unint64_t v30 = 0;
  uint64_t v13 = bswap64(0x9E3779B97F4A7C55 * (void)v32);
  uint64_t v14 = *a1;
  __dmb(0xBu);
  uint64_t v29 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_216FDDC88((uint64_t)&v32, (uint64_t)a1, v14 & v13, 0);
    unint64_t v15 = sub_216FDDA90((uint64_t)a1, a3, v34);
    unint64_t v16 = v15;
    if (!a2)
    {
      if (v15)
      {
        uint64_t v17 = 1;
        goto LABEL_7;
      }
      unint64_t v25 = *a1;
      __dmb(0xBu);
      if (v14 == v25 || !sub_21686CF40((uint64_t)a1, v13, v14, v25))
      {
        sub_21685C048(&v32);
        return 0;
      }
      goto LABEL_31;
    }
    if (v15) {
      goto LABEL_4;
    }
    if (!a8) {
      a8 = (void *)a7(v29, a3, a4);
    }
    if (!v33)
    {
      char v33 = 1;
      if ((tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v32) & 1) == 0)
      {
        unint64_t v16 = sub_216FDDA90((uint64_t)a1, a3, v34);
        if (v16 >= 0x40) {
          break;
        }
      }
    }
    unint64_t v25 = *a1;
    __dmb(0xBu);
    if (v14 == v25)
    {
      unint64_t v25 = v14;
LABEL_33:
      unint64_t v30 = sub_21686C9CC((uint64_t)a1, v34, a8, v25);
      uint64_t v18 = 0;
      uint64_t v17 = 1;
      unint64_t v16 = (unint64_t)a8;
      if (a5) {
        goto LABEL_8;
      }
LABEL_34:
      sub_21685C048(&v32);
      goto LABEL_36;
    }
    if (!sub_21686CF40((uint64_t)a1, v13, v14, v25)) {
      goto LABEL_33;
    }
LABEL_31:
    sub_21685C048(&v32);
    uint64_t v14 = v25;
  }
  if (v33)
  {
    uint64_t v17 = 0;
    atomic_fetch_add((atomic_ullong *volatile)v32, 3uLL);
    char v33 = 0;
  }
  else
  {
LABEL_4:
    uint64_t v17 = 0;
  }
LABEL_7:
  uint64_t v18 = (uint64_t)a8;
  if (!a5) {
    goto LABEL_34;
  }
LABEL_8:
  if ((sub_21686CAA4(a5, (atomic_ullong *)(v16 + 8), a6) & 1) == 0)
  {
    sched_yield();
    int v19 = 2;
    while ((sub_21686CAA4(a5, (atomic_ullong *)(v16 + 8), a6) & 1) == 0)
    {
      sched_yield();
      BOOL v20 = v19 < 16;
      v19 *= 2;
      if (!v20)
      {
        uint64_t v21 = (atomic_ullong *)v32;
        long long v32 = 0;
        if (v33)
        {
LABEL_13:
          atomic_ullong v22 = *v21;
          unint64_t v23 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
          while (1)
          {
            atomic_ullong v24 = v22;
            atomic_compare_exchange_strong(v21, (unint64_t *)&v24, v23);
            if (v24 == v22) {
              break;
            }
            if (atomic_fetch_add_explicit(v21, 0, memory_order_relaxed) != v22)
            {
              sched_yield();
              goto LABEL_13;
            }
          }
        }
        else
        {
          atomic_fetch_add(v21, 0xFFFFFFFFFFFFFFFCLL);
        }
        sched_yield();
        unint64_t v25 = *a1;
        __dmb(0xBu);
        a8 = (void *)v18;
        goto LABEL_31;
      }
    }
  }
  sub_21685C048(&v32);
  *(void *)(a5 + 16) = v16;
  *(void *)(a5 + 24) = v13;
LABEL_36:
  if (v30) {
    sub_216FDDAF0(a1, v30, v29, 0);
  }
  if (v18) {
    sub_216FDD370((uint64_t)a1, v18);
  }
  return v17;
}

void sub_216FDDA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216FDDA88()
{
  return 0;
}

unint64_t sub_216FDDA90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = *(void *)(a3 + 16);
  if (result >= 0x40)
  {
    do
    {
      if (*(_DWORD *)a2 == *(_DWORD *)(result + 16)
        && *(void *)(a2 + 8) == *(void *)(result + 24)
        && *(void *)(a2 + 16) == *(void *)(result + 32)
        && (*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(result + 40) & 0xFFFFFFFFFFFFFFF8))
      {
        break;
      }
      unint64_t result = *(void *)result;
    }
    while (result > 0x3F);
  }
  return result;
}

void sub_216FDDAF0(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  if (a2 < 8)
  {
    uint64_t v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    uint64_t v10 = v9;
    if (a4)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      uint64_t v14 = -6096;
      do
      {
        unint64_t v15 = &v9[v14];
        *((void *)v15 + 763) = 0;
        *((void *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    unint64_t v16 = 0;
    int64x2_t v17 = (int64x2_t)xmmword_217411D20;
    uint64_t v18 = v10 - 48;
    uint64x2_t v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    uint64x2_t v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    int8x16_t v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    int64x2_t v22 = vdupq_n_s64(2uLL);
    uint64_t v13 = 255;
    do
    {
      uint64x2_t v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_217411D30);
      int8x16_t v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if (vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0]) {
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      }
      if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1]) {
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      }
      v16 += 2;
      int64x2_t v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    uint64_t v7 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    uint64_t v8 = v7;
    if (a4)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      uint64_t v11 = 1 << a2;
      uint64_t v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        *uint64_t v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    uint64_t v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_216FDDC78(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_216FDDC88(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  unint64_t v8 = sub_21686CD68(a2, a3);
  *(void *)(a1 + 16) = v8;
  uint64_t v9 = *(void *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (uint64_t v10 = (atomic_ullong *)(*(void *)(a1 + 16) + 8),
        *(unsigned char *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(void *)a1 = v10;
    uint64_t v11 = *(void *)(a1 + 16);
    if (*(void *)(v11 + 16) == 3) {
      sub_216FDDD64(a2, v11, a3);
    }
  }
  else
  {
    uint64_t v12 = (atomic_ullong *)(*(void *)(a1 + 16) + 8);
    *(unsigned char *)(a1 + 8) = a4;
    *(void *)a1 = v12;
    if (a4) {
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    }
    else {
      tbb::spin_rw_mutex_v3::internal_acquire_reader(v12);
    }
  }
  return a1;
}

void sub_216FDDD50(_Unwind_Exception *a1)
{
  sub_21685C048(v1);
  _Unwind_Resume(a1);
}

void *sub_216FDDD64(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __dmb(0xBu);
  *(void *)(a2 + 16) = 0;
  if (a3)
  {
    unint64_t v5 = HIDWORD(a3);
    if (!HIDWORD(a3)) {
      unint64_t v5 = a3;
    }
    char v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      char v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    BOOL v7 = v5 >= 4;
    if (v5 >= 4) {
      LODWORD(v5) = v5 >> 2;
    }
    unsigned int v8 = (v5 >> 1) & 1;
    if (v7) {
      v6 += 2;
    }
    char v9 = v8 + v6;
  }
  else
  {
    char v9 = -1;
  }
  uint64_t v10 = ~(-1 << v9);
  sub_216FDDC88(&v15, a1, v10 & a3, 0);
  uint64_t v11 = (unint64_t *)(v17 + 16);
  unint64_t v12 = *(void *)(v17 + 16);
  __dmb(0xBu);
  if (v12 >= 0x40)
  {
    uint64_t v13 = (2 * v10) | 1;
    while (1)
    {
      uint64_t v18 = 0;
      char v19 = 0;
      sub_216D6EF4C((uint64_t)&v18, (unsigned int *)(v12 + 16), (void *)(v12 + 24), (unsigned int *)(v12 + 32), (void *)(v12 + 40));
      if ((bswap64(0x9E3779B97F4A7C55 * v18) & v13) != a3) {
        break;
      }
      if (v16 || (char v16 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v15) & 1) != 0))
      {
        *uint64_t v11 = *(void *)v12;
        *(void *)unint64_t v12 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v12;
LABEL_24:
        unint64_t v12 = *v11;
        if (*v11 <= 0x3F) {
          return sub_21685C048(&v15);
        }
      }
      else
      {
        uint64_t v11 = (unint64_t *)(v17 + 16);
        unint64_t v12 = *(void *)(v17 + 16);
        __dmb(0xBu);
        if (v12 < 0x40) {
          return sub_21685C048(&v15);
        }
      }
    }
    uint64_t v11 = (unint64_t *)v12;
    goto LABEL_24;
  }
  return sub_21685C048(&v15);
}

void sub_216FDDF10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216FDDF24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return sub_216FDDF58(a1, (uint64_t)&unk_2174BFD90, &v3);
}

uint64_t sub_216FDDF58(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x38);
  v8[0] = v5;
  v8[1] = a1;
  *(_OWORD *)(v5 + 32) = 0u;
  *(void *)(v5 + 48) = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  sub_216FDDFDC(v5 + 16, *a3);
  v8[0] = 0;
  sub_216FDE06C(v8, v6);
  return v5;
}

void sub_216FDDFC8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216FDDFDC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 32) = 0;
  return a1;
}

uint64_t *sub_216FDE06C(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (v3) {
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  }
  return a1;
}

uint64_t sub_216FDE0A0(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t), void *a8)
{
  long long v32 = 0;
  char v33 = 0;
  sub_216D6EF4C((uint64_t)&v32, (unsigned int *)a3, (void *)(a3 + 8), (unsigned int *)(a3 + 16), (void *)(a3 + 24));
  unint64_t v30 = 0;
  uint64_t v13 = bswap64(0x9E3779B97F4A7C55 * (void)v32);
  uint64_t v14 = *a1;
  __dmb(0xBu);
  uint64_t v29 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_216FDE550((uint64_t)&v32, (uint64_t)a1, v14 & v13, 0);
    unint64_t v15 = sub_216FDDA90((uint64_t)a1, a3, v34);
    unint64_t v16 = v15;
    if (!a2)
    {
      if (v15)
      {
        uint64_t v17 = 1;
        goto LABEL_7;
      }
      unint64_t v25 = *a1;
      __dmb(0xBu);
      if (v14 == v25 || !sub_21686CF40((uint64_t)a1, v13, v14, v25))
      {
        sub_21685C048(&v32);
        return 0;
      }
      goto LABEL_31;
    }
    if (v15) {
      goto LABEL_4;
    }
    if (!a8) {
      a8 = (void *)a7(v29, a3, a4);
    }
    if (!v33)
    {
      char v33 = 1;
      if ((tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v32) & 1) == 0)
      {
        unint64_t v16 = sub_216FDDA90((uint64_t)a1, a3, v34);
        if (v16 >= 0x40) {
          break;
        }
      }
    }
    unint64_t v25 = *a1;
    __dmb(0xBu);
    if (v14 == v25)
    {
      unint64_t v25 = v14;
LABEL_33:
      unint64_t v30 = sub_21686C9CC((uint64_t)a1, v34, a8, v25);
      uint64_t v18 = 0;
      uint64_t v17 = 1;
      unint64_t v16 = (unint64_t)a8;
      if (a5) {
        goto LABEL_8;
      }
LABEL_34:
      sub_21685C048(&v32);
      goto LABEL_36;
    }
    if (!sub_21686CF40((uint64_t)a1, v13, v14, v25)) {
      goto LABEL_33;
    }
LABEL_31:
    sub_21685C048(&v32);
    uint64_t v14 = v25;
  }
  if (v33)
  {
    uint64_t v17 = 0;
    atomic_fetch_add((atomic_ullong *volatile)v32, 3uLL);
    char v33 = 0;
  }
  else
  {
LABEL_4:
    uint64_t v17 = 0;
  }
LABEL_7:
  uint64_t v18 = (uint64_t)a8;
  if (!a5) {
    goto LABEL_34;
  }
LABEL_8:
  if ((sub_21686CAA4(a5, (atomic_ullong *)(v16 + 8), a6) & 1) == 0)
  {
    sched_yield();
    int v19 = 2;
    while ((sub_21686CAA4(a5, (atomic_ullong *)(v16 + 8), a6) & 1) == 0)
    {
      sched_yield();
      BOOL v20 = v19 < 16;
      v19 *= 2;
      if (!v20)
      {
        int8x16_t v21 = (atomic_ullong *)v32;
        long long v32 = 0;
        if (v33)
        {
LABEL_13:
          atomic_ullong v22 = *v21;
          unint64_t v23 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
          while (1)
          {
            atomic_ullong v24 = v22;
            atomic_compare_exchange_strong(v21, (unint64_t *)&v24, v23);
            if (v24 == v22) {
              break;
            }
            if (atomic_fetch_add_explicit(v21, 0, memory_order_relaxed) != v22)
            {
              sched_yield();
              goto LABEL_13;
            }
          }
        }
        else
        {
          atomic_fetch_add(v21, 0xFFFFFFFFFFFFFFFCLL);
        }
        sched_yield();
        unint64_t v25 = *a1;
        __dmb(0xBu);
        a8 = (void *)v18;
        goto LABEL_31;
      }
    }
  }
  sub_21685C048(&v32);
  *(void *)(a5 + 16) = v16;
  *(void *)(a5 + 24) = v13;
LABEL_36:
  if (v30) {
    sub_216FDE3B8(a1, v30, v29, 0);
  }
  if (v18) {
    sub_216FDD46C((uint64_t)a1, v18);
  }
  return v17;
}

void sub_216FDE390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216FDE3B0()
{
  return 0;
}

void sub_216FDE3B8(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  if (a2 < 8)
  {
    char v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    uint64_t v10 = v9;
    if (a4)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      uint64_t v14 = -6096;
      do
      {
        unint64_t v15 = &v9[v14];
        *((void *)v15 + 763) = 0;
        *((void *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    unint64_t v16 = 0;
    int64x2_t v17 = (int64x2_t)xmmword_217411D20;
    uint64_t v18 = v10 - 48;
    uint64x2_t v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    uint64x2_t v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    int8x16_t v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    int64x2_t v22 = vdupq_n_s64(2uLL);
    uint64_t v13 = 255;
    do
    {
      uint64x2_t v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_217411D30);
      int8x16_t v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if (vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0]) {
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      }
      if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1]) {
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      }
      v16 += 2;
      int64x2_t v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    BOOL v7 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    unsigned int v8 = v7;
    if (a4)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      uint64_t v11 = 1 << a2;
      unint64_t v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        *unint64_t v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    uint64_t v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_216FDE540(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_216FDE550(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  unint64_t v8 = sub_21686CD68(a2, a3);
  *(void *)(a1 + 16) = v8;
  uint64_t v9 = *(void *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (uint64_t v10 = (atomic_ullong *)(*(void *)(a1 + 16) + 8),
        *(unsigned char *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(void *)a1 = v10;
    uint64_t v11 = *(void *)(a1 + 16);
    if (*(void *)(v11 + 16) == 3) {
      sub_216FDE62C(a2, v11, a3);
    }
  }
  else
  {
    unint64_t v12 = (atomic_ullong *)(*(void *)(a1 + 16) + 8);
    *(unsigned char *)(a1 + 8) = a4;
    *(void *)a1 = v12;
    if (a4) {
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    }
    else {
      tbb::spin_rw_mutex_v3::internal_acquire_reader(v12);
    }
  }
  return a1;
}

void sub_216FDE618(_Unwind_Exception *a1)
{
  sub_21685C048(v1);
  _Unwind_Resume(a1);
}

void *sub_216FDE62C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __dmb(0xBu);
  *(void *)(a2 + 16) = 0;
  if (a3)
  {
    unint64_t v5 = HIDWORD(a3);
    if (!HIDWORD(a3)) {
      unint64_t v5 = a3;
    }
    char v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      char v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    BOOL v7 = v5 >= 4;
    if (v5 >= 4) {
      LODWORD(v5) = v5 >> 2;
    }
    unsigned int v8 = (v5 >> 1) & 1;
    if (v7) {
      v6 += 2;
    }
    char v9 = v8 + v6;
  }
  else
  {
    char v9 = -1;
  }
  uint64_t v10 = ~(-1 << v9);
  sub_216FDE550(&v15, a1, v10 & a3, 0);
  uint64_t v11 = (unint64_t *)(v17 + 16);
  unint64_t v12 = *(void *)(v17 + 16);
  __dmb(0xBu);
  if (v12 >= 0x40)
  {
    uint64_t v13 = (2 * v10) | 1;
    while (1)
    {
      uint64_t v18 = 0;
      char v19 = 0;
      sub_216D6EF4C((uint64_t)&v18, (unsigned int *)(v12 + 16), (void *)(v12 + 24), (unsigned int *)(v12 + 32), (void *)(v12 + 40));
      if ((bswap64(0x9E3779B97F4A7C55 * v18) & v13) != a3) {
        break;
      }
      if (v16 || (char v16 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v15) & 1) != 0))
      {
        *uint64_t v11 = *(void *)v12;
        *(void *)unint64_t v12 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v12;
LABEL_24:
        unint64_t v12 = *v11;
        if (*v11 <= 0x3F) {
          return sub_21685C048(&v15);
        }
      }
      else
      {
        uint64_t v11 = (unint64_t *)(v17 + 16);
        unint64_t v12 = *(void *)(v17 + 16);
        __dmb(0xBu);
        if (v12 < 0x40) {
          return sub_21685C048(&v15);
        }
      }
    }
    uint64_t v11 = (unint64_t *)v12;
    goto LABEL_24;
  }
  return sub_21685C048(&v15);
}

void sub_216FDE7D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216FDE7EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return sub_216FDE820(a1, (uint64_t)&unk_2174BFD90, &v3);
}

uint64_t sub_216FDE820(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x38);
  v8[0] = v5;
  v8[1] = a1;
  *(_OWORD *)(v5 + 32) = 0u;
  *(void *)(v5 + 48) = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  sub_216FDDFDC(v5 + 16, *a3);
  v8[0] = 0;
  sub_216FDE8A4(v8, v6);
  return v5;
}

void sub_216FDE890(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_216FDE8A4(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (v3) {
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  }
  return a1;
}

uint64_t sub_216FDE8D8(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t), void *a8)
{
  long long v32 = 0;
  char v33 = 0;
  sub_216D6EF4C((uint64_t)&v32, (unsigned int *)a3, (void *)(a3 + 8), (unsigned int *)(a3 + 16), (void *)(a3 + 24));
  unint64_t v30 = 0;
  uint64_t v13 = bswap64(0x9E3779B97F4A7C55 * (void)v32);
  uint64_t v14 = *a1;
  __dmb(0xBu);
  uint64_t v29 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_216FDED88((uint64_t)&v32, (uint64_t)a1, v14 & v13, 0);
    unint64_t v15 = sub_216FDDA90((uint64_t)a1, a3, v34);
    unint64_t v16 = v15;
    if (!a2)
    {
      if (v15)
      {
        uint64_t v17 = 1;
        goto LABEL_7;
      }
      unint64_t v25 = *a1;
      __dmb(0xBu);
      if (v14 == v25 || !sub_21686CF40((uint64_t)a1, v13, v14, v25))
      {
        sub_21685C048(&v32);
        return 0;
      }
      goto LABEL_31;
    }
    if (v15) {
      goto LABEL_4;
    }
    if (!a8) {
      a8 = (void *)a7(v29, a3, a4);
    }
    if (!v33)
    {
      char v33 = 1;
      if ((tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v32) & 1) == 0)
      {
        unint64_t v16 = sub_216FDDA90((uint64_t)a1, a3, v34);
        if (v16 >= 0x40) {
          break;
        }
      }
    }
    unint64_t v25 = *a1;
    __dmb(0xBu);
    if (v14 == v25)
    {
      unint64_t v25 = v14;
LABEL_33:
      unint64_t v30 = sub_21686C9CC((uint64_t)a1, v34, a8, v25);
      uint64_t v18 = 0;
      uint64_t v17 = 1;
      unint64_t v16 = (unint64_t)a8;
      if (a5) {
        goto LABEL_8;
      }
LABEL_34:
      sub_21685C048(&v32);
      goto LABEL_36;
    }
    if (!sub_21686CF40((uint64_t)a1, v13, v14, v25)) {
      goto LABEL_33;
    }
LABEL_31:
    sub_21685C048(&v32);
    uint64_t v14 = v25;
  }
  if (v33)
  {
    uint64_t v17 = 0;
    atomic_fetch_add((atomic_ullong *volatile)v32, 3uLL);
    char v33 = 0;
  }
  else
  {
LABEL_4:
    uint64_t v17 = 0;
  }
LABEL_7:
  uint64_t v18 = (uint64_t)a8;
  if (!a5) {
    goto LABEL_34;
  }
LABEL_8:
  if ((sub_21686CAA4(a5, (atomic_ullong *)(v16 + 8), a6) & 1) == 0)
  {
    sched_yield();
    int v19 = 2;
    while ((sub_21686CAA4(a5, (atomic_ullong *)(v16 + 8), a6) & 1) == 0)
    {
      sched_yield();
      BOOL v20 = v19 < 16;
      v19 *= 2;
      if (!v20)
      {
        int8x16_t v21 = (atomic_ullong *)v32;
        long long v32 = 0;
        if (v33)
        {
LABEL_13:
          atomic_ullong v22 = *v21;
          unint64_t v23 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
          while (1)
          {
            atomic_ullong v24 = v22;
            atomic_compare_exchange_strong(v21, (unint64_t *)&v24, v23);
            if (v24 == v22) {
              break;
            }
            if (atomic_fetch_add_explicit(v21, 0, memory_order_relaxed) != v22)
            {
              sched_yield();
              goto LABEL_13;
            }
          }
        }
        else
        {
          atomic_fetch_add(v21, 0xFFFFFFFFFFFFFFFCLL);
        }
        sched_yield();
        unint64_t v25 = *a1;
        __dmb(0xBu);
        a8 = (void *)v18;
        goto LABEL_31;
      }
    }
  }
  sub_21685C048(&v32);
  *(void *)(a5 + 16) = v16;
  *(void *)(a5 + 24) = v13;
LABEL_36:
  if (v30) {
    sub_216FDEBF0(a1, v30, v29, 0);
  }
  if (v18) {
    sub_216FDD568((uint64_t)a1, v18);
  }
  return v17;
}

void sub_216FDEBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216FDEBE8()
{
  return 0;
}

void sub_216FDEBF0(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  if (a2 < 8)
  {
    char v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    uint64_t v10 = v9;
    if (a4)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      uint64_t v14 = -6096;
      do
      {
        unint64_t v15 = &v9[v14];
        *((void *)v15 + 763) = 0;
        *((void *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    unint64_t v16 = 0;
    int64x2_t v17 = (int64x2_t)xmmword_217411D20;
    uint64_t v18 = v10 - 48;
    uint64x2_t v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    uint64x2_t v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    int8x16_t v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    int64x2_t v22 = vdupq_n_s64(2uLL);
    uint64_t v13 = 255;
    do
    {
      uint64x2_t v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_217411D30);
      int8x16_t v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if (vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0]) {
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      }
      if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1]) {
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      }
      v16 += 2;
      int64x2_t v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    BOOL v7 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    unsigned int v8 = v7;
    if (a4)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      uint64_t v11 = 1 << a2;
      unint64_t v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        *unint64_t v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    uint64_t v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_216FDED78(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_216FDED88(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  unint64_t v8 = sub_21686CD68(a2, a3);
  *(void *)(a1 + 16) = v8;
  uint64_t v9 = *(void *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (uint64_t v10 = (atomic_ullong *)(*(void *)(a1 + 16) + 8),
        *(unsigned char *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(void *)a1 = v10;
    uint64_t v11 = *(void *)(a1 + 16);
    if (*(void *)(v11 + 16) == 3) {
      sub_216FDEE64(a2, v11, a3);
    }
  }
  else
  {
    unint64_t v12 = (atomic_ullong *)(*(void *)(a1 + 16) + 8);
    *(unsigned char *)(a1 + 8) = a4;
    *(void *)a1 = v12;
    if (a4) {
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    }
    else {
      tbb::spin_rw_mutex_v3::internal_acquire_reader(v12);
    }
  }
  return a1;
}

void sub_216FDEE50(_Unwind_Exception *a1)
{
  sub_21685C048(v1);
  _Unwind_Resume(a1);
}

void *sub_216FDEE64(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __dmb(0xBu);
  *(void *)(a2 + 16) = 0;
  if (a3)
  {
    unint64_t v5 = HIDWORD(a3);
    if (!HIDWORD(a3)) {
      unint64_t v5 = a3;
    }
    char v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      char v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    BOOL v7 = v5 >= 4;
    if (v5 >= 4) {
      LODWORD(v5) = v5 >> 2;
    }
    unsigned int v8 = (v5 >> 1) & 1;
    if (v7) {
      v6 += 2;
    }
    char v9 = v8 + v6;
  }
  else
  {
    char v9 = -1;
  }
  uint64_t v10 = ~(-1 << v9);
  sub_216FDED88(&v15, a1, v10 & a3, 0);
  uint64_t v11 = (unint64_t *)(v17 + 16);
  unint64_t v12 = *(void *)(v17 + 16);
  __dmb(0xBu);
  if (v12 >= 0x40)
  {
    uint64_t v13 = (2 * v10) | 1;
    while (1)
    {
      uint64_t v18 = 0;
      char v19 = 0;
      sub_216D6EF4C((uint64_t)&v18, (unsigned int *)(v12 + 16), (void *)(v12 + 24), (unsigned int *)(v12 + 32), (void *)(v12 + 40));
      if ((bswap64(0x9E3779B97F4A7C55 * v18) & v13) != a3) {
        break;
      }
      if (v16 || (char v16 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v15) & 1) != 0))
      {
        *uint64_t v11 = *(void *)v12;
        *(void *)unint64_t v12 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v12;
LABEL_24:
        unint64_t v12 = *v11;
        if (*v11 <= 0x3F) {
          return sub_21685C048(&v15);
        }
      }
      else
      {
        uint64_t v11 = (unint64_t *)(v17 + 16);
        unint64_t v12 = *(void *)(v17 + 16);
        __dmb(0xBu);
        if (v12 < 0x40) {
          return sub_21685C048(&v15);
        }
      }
    }
    uint64_t v11 = (unint64_t *)v12;
    goto LABEL_24;
  }
  return sub_21685C048(&v15);
}

void sub_216FDF010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_216FDF024(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = a2;
  return sub_216FDF058(a1, (uint64_t)&unk_2174BFD90, &v3);
}

_OWORD *sub_216FDF058(uint64_t a1, uint64_t a2, _DWORD **a3)
{
  unint64_t v5 = (_OWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x80);
  v8[0] = (uint64_t)v5;
  v8[1] = a1;
  v5[2] = 0u;
  v5[3] = 0u;
  void v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  _OWORD *v5 = 0u;
  v5[1] = 0u;
  char v9 = *a3;
  sub_216FDF0EC((uint64_t)(v5 + 1), &v9);
  v8[0] = 0;
  sub_216FDF1D4(v8, v6);
  return v5;
}

void sub_216FDF0D8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216FDF0EC(uint64_t a1, _DWORD **a2)
{
  uint64_t v3 = *a2;
  *(_DWORD *)a1 = **a2;
  uint64_t v4 = *((void *)v3 + 1);
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 16), v3 + 4);
  sub_21698105C((_DWORD *)(a1 + 20), v3 + 5);
  uint64_t v5 = *((void *)v3 + 3);
  *(void *)(a1 + 24) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_216FDC6F0((void *)(a1 + 32));
  return a1;
}

void sub_216FDF190(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void *)(v1 + 24);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_21697C414(v2);
  char v6 = *(atomic_ullong **)(v1 + 8);
  if (v6) {
    sub_216D16E0C(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216FDF1D4(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (v3) {
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  }
  return a1;
}

uint64_t sub_216FDF208(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t), void *a8)
{
  long long v32 = 0;
  char v33 = 0;
  sub_216D6EF4C((uint64_t)&v32, (unsigned int *)a3, (void *)(a3 + 8), (unsigned int *)(a3 + 16), (void *)(a3 + 24));
  unint64_t v30 = 0;
  uint64_t v13 = bswap64(0x9E3779B97F4A7C55 * (void)v32);
  uint64_t v14 = *a1;
  __dmb(0xBu);
  uint64_t v29 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_216FDF6B8((uint64_t)&v32, (uint64_t)a1, v14 & v13, 0);
    unint64_t v15 = sub_216FDDA90((uint64_t)a1, a3, v34);
    unint64_t v16 = v15;
    if (!a2)
    {
      if (v15)
      {
        uint64_t v17 = 1;
        goto LABEL_7;
      }
      unint64_t v25 = *a1;
      __dmb(0xBu);
      if (v14 == v25 || !sub_21686CF40((uint64_t)a1, v13, v14, v25))
      {
        sub_21685C048(&v32);
        return 0;
      }
      goto LABEL_31;
    }
    if (v15) {
      goto LABEL_4;
    }
    if (!a8) {
      a8 = (void *)a7(v29, a3, a4);
    }
    if (!v33)
    {
      char v33 = 1;
      if ((tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v32) & 1) == 0)
      {
        unint64_t v16 = sub_216FDDA90((uint64_t)a1, a3, v34);
        if (v16 >= 0x40) {
          break;
        }
      }
    }
    unint64_t v25 = *a1;
    __dmb(0xBu);
    if (v14 == v25)
    {
      unint64_t v25 = v14;
LABEL_33:
      unint64_t v30 = sub_21686C9CC((uint64_t)a1, v34, a8, v25);
      uint64_t v18 = 0;
      uint64_t v17 = 1;
      unint64_t v16 = (unint64_t)a8;
      if (a5) {
        goto LABEL_8;
      }
LABEL_34:
      sub_21685C048(&v32);
      goto LABEL_36;
    }
    if (!sub_21686CF40((uint64_t)a1, v13, v14, v25)) {
      goto LABEL_33;
    }
LABEL_31:
    sub_21685C048(&v32);
    uint64_t v14 = v25;
  }
  if (v33)
  {
    uint64_t v17 = 0;
    atomic_fetch_add((atomic_ullong *volatile)v32, 3uLL);
    char v33 = 0;
  }
  else
  {
LABEL_4:
    uint64_t v17 = 0;
  }
LABEL_7:
  uint64_t v18 = (uint64_t)a8;
  if (!a5) {
    goto LABEL_34;
  }
LABEL_8:
  if ((sub_21686CAA4(a5, (atomic_ullong *)(v16 + 8), a6) & 1) == 0)
  {
    sched_yield();
    int v19 = 2;
    while ((sub_21686CAA4(a5, (atomic_ullong *)(v16 + 8), a6) & 1) == 0)
    {
      sched_yield();
      BOOL v20 = v19 < 16;
      v19 *= 2;
      if (!v20)
      {
        int8x16_t v21 = (atomic_ullong *)v32;
        long long v32 = 0;
        if (v33)
        {
LABEL_13:
          atomic_ullong v22 = *v21;
          unint64_t v23 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
          while (1)
          {
            atomic_ullong v24 = v22;
            atomic_compare_exchange_strong(v21, (unint64_t *)&v24, v23);
            if (v24 == v22) {
              break;
            }
            if (atomic_fetch_add_explicit(v21, 0, memory_order_relaxed) != v22)
            {
              sched_yield();
              goto LABEL_13;
            }
          }
        }
        else
        {
          atomic_fetch_add(v21, 0xFFFFFFFFFFFFFFFCLL);
        }
        sched_yield();
        unint64_t v25 = *a1;
        __dmb(0xBu);
        a8 = (void *)v18;
        goto LABEL_31;
      }
    }
  }
  sub_21685C048(&v32);
  *(void *)(a5 + 16) = v16;
  *(void *)(a5 + 24) = v13;
LABEL_36:
  if (v30) {
    sub_216FDF520(a1, v30, v29, 0);
  }
  if (v18) {
    sub_216FDD67C((uint64_t)a1, v18);
  }
  return v17;
}

void sub_216FDF4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216FDF518()
{
  return 0;
}

void sub_216FDF520(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  if (a2 < 8)
  {
    char v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    uint64_t v10 = v9;
    if (a4)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      uint64_t v14 = -6096;
      do
      {
        unint64_t v15 = &v9[v14];
        *((void *)v15 + 763) = 0;
        *((void *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    unint64_t v16 = 0;
    int64x2_t v17 = (int64x2_t)xmmword_217411D20;
    uint64_t v18 = v10 - 48;
    uint64x2_t v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    uint64x2_t v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    int8x16_t v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    int64x2_t v22 = vdupq_n_s64(2uLL);
    uint64_t v13 = 255;
    do
    {
      uint64x2_t v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_217411D30);
      int8x16_t v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if (vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0]) {
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      }
      if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1]) {
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      }
      v16 += 2;
      int64x2_t v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    BOOL v7 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    unsigned int v8 = v7;
    if (a4)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      uint64_t v11 = 1 << a2;
      unint64_t v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        *unint64_t v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    uint64_t v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_216FDF6A8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_216FDF6B8(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  unint64_t v8 = sub_21686CD68(a2, a3);
  *(void *)(a1 + 16) = v8;
  uint64_t v9 = *(void *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (uint64_t v10 = (atomic_ullong *)(*(void *)(a1 + 16) + 8),
        *(unsigned char *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(void *)a1 = v10;
    uint64_t v11 = *(void *)(a1 + 16);
    if (*(void *)(v11 + 16) == 3) {
      sub_216FDF794(a2, v11, a3);
    }
  }
  else
  {
    unint64_t v12 = (atomic_ullong *)(*(void *)(a1 + 16) + 8);
    *(unsigned char *)(a1 + 8) = a4;
    *(void *)a1 = v12;
    if (a4) {
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    }
    else {
      tbb::spin_rw_mutex_v3::internal_acquire_reader(v12);
    }
  }
  return a1;
}

void sub_216FDF780(_Unwind_Exception *a1)
{
  sub_21685C048(v1);
  _Unwind_Resume(a1);
}

void *sub_216FDF794(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __dmb(0xBu);
  *(void *)(a2 + 16) = 0;
  if (a3)
  {
    unint64_t v5 = HIDWORD(a3);
    if (!HIDWORD(a3)) {
      unint64_t v5 = a3;
    }
    char v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      char v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    BOOL v7 = v5 >= 4;
    if (v5 >= 4) {
      LODWORD(v5) = v5 >> 2;
    }
    unsigned int v8 = (v5 >> 1) & 1;
    if (v7) {
      v6 += 2;
    }
    char v9 = v8 + v6;
  }
  else
  {
    char v9 = -1;
  }
  uint64_t v10 = ~(-1 << v9);
  sub_216FDF6B8(&v15, a1, v10 & a3, 0);
  uint64_t v11 = (unint64_t *)(v17 + 16);
  unint64_t v12 = *(void *)(v17 + 16);
  __dmb(0xBu);
  if (v12 >= 0x40)
  {
    uint64_t v13 = (2 * v10) | 1;
    while (1)
    {
      uint64_t v18 = 0;
      char v19 = 0;
      sub_216D6EF4C((uint64_t)&v18, (unsigned int *)(v12 + 16), (void *)(v12 + 24), (unsigned int *)(v12 + 32), (void *)(v12 + 40));
      if ((bswap64(0x9E3779B97F4A7C55 * v18) & v13) != a3) {
        break;
      }
      if (v16 || (char v16 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v15) & 1) != 0))
      {
        *uint64_t v11 = *(void *)v12;
        *(void *)unint64_t v12 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v12;
LABEL_24:
        unint64_t v12 = *v11;
        if (*v11 <= 0x3F) {
          return sub_21685C048(&v15);
        }
      }
      else
      {
        uint64_t v11 = (unint64_t *)(v17 + 16);
        unint64_t v12 = *(void *)(v17 + 16);
        __dmb(0xBu);
        if (v12 < 0x40) {
          return sub_21685C048(&v15);
        }
      }
    }
    uint64_t v11 = (unint64_t *)v12;
    goto LABEL_24;
  }
  return sub_21685C048(&v15);
}

void sub_216FDF940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216FDF954()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798CFB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798CFB0))
  {
    uint64_t v1 = operator new(8uLL);
    void *v1 = 0;
    qword_26798CFA8 = (uint64_t)v1;
    __cxa_guard_release(&qword_26798CFB0);
  }
  return qword_26798CFA8;
}

void sub_216FDF9B8(_Unwind_Exception *a1)
{
}

void *sub_216FDF9D0(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216FDFA6C(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = 9 * a2;
    unint64_t v6 = v4 + 288 * a2;
    uint64_t v7 = 32 * v5;
    do
    {
      sub_216FDFB10(v4);
      v4 += 288;
      v7 -= 288;
    }
    while (v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_216FDFA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *sub_216FDFA6C(void *a1, unint64_t a2)
{
  if (a2 >= 0xE38E38E38E38E4) {
    sub_21677CB10();
  }
  unint64_t result = (char *)sub_216FDFAC4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[288 * v4];
  return result;
}

void *sub_216FDFAC4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xE38E38E38E38E4) {
    sub_21677CA1C();
  }
  return operator new(288 * a2);
}

uint64_t sub_216FDFB10(uint64_t a1)
{
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v2 = sub_216FDFB84(a1);
  *(_DWORD *)(v2 + 256) = 1;
  *(void *)(v2 + 264) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(v2 + 272));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 276));
  *(void *)(a1 + 280) = 0;
  return a1;
}

uint64_t sub_216FDFB84(uint64_t a1)
{
  *(_DWORD *)a1 = 3;
  *(void *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 3;
  *(void *)(a1 + 40) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 48));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 52));
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 3;
  *(void *)(a1 + 72) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 80));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 84));
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 3;
  *(void *)(a1 + 104) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 112));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 116));
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 3;
  *(void *)(a1 + 136) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 144));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 148));
  *(void *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 3;
  *(void *)(a1 + 168) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 176));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 180));
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 4;
  *(void *)(a1 + 200) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 208));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 212));
  *(void *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 1;
  *(void *)(a1 + 232) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 240));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 244));
  *(void *)(a1 + 248) = 0;
  return a1;
}

void sub_216FDFCD4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 288;
        sub_216FDFD6C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216FDFD6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 280);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 276));
  sub_21697C414((_DWORD *)(a2 + 272));
  uint64_t v4 = *(atomic_ullong **)(a2 + 264);
  if (v4) {
    sub_216D16E0C(v4);
  }

  return sub_216FDD12C(a2);
}

_OWORD *sub_216FDFDD8(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = a2;
  return sub_216FDFE0C(a1, (uint64_t)&unk_2174BFD90, &v3);
}

_OWORD *sub_216FDFE0C(uint64_t a1, uint64_t a2, _DWORD **a3)
{
  uint64_t v5 = (_OWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x1C0);
  v8[0] = (uint64_t)v5;
  v8[1] = a1;
  v5[2] = 0u;
  v5[3] = 0u;
  void v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  unsigned char v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  v5[17] = 0u;
  v5[18] = 0u;
  v5[19] = 0u;
  v5[20] = 0u;
  v5[21] = 0u;
  v5[22] = 0u;
  v5[23] = 0u;
  v5[24] = 0u;
  v5[25] = 0u;
  v5[26] = 0u;
  v5[27] = 0u;
  _OWORD *v5 = 0u;
  v5[1] = 0u;
  char v9 = *a3;
  sub_216FDFEC8((uint64_t)(v5 + 1), &v9);
  v8[0] = 0;
  sub_216FDFFB0(v8, v6);
  return v5;
}

void sub_216FDFEB4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216FDFEC8(uint64_t a1, _DWORD **a2)
{
  uint64_t v3 = *a2;
  *(_DWORD *)a1 = **a2;
  uint64_t v4 = *((void *)v3 + 1);
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 16), v3 + 4);
  sub_21698105C((_DWORD *)(a1 + 20), v3 + 5);
  uint64_t v5 = *((void *)v3 + 3);
  *(void *)(a1 + 24) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)(a1 + 32));
  return a1;
}

void sub_216FDFF6C(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void *)(v1 + 24);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_21697C414(v2);
  unint64_t v6 = *(atomic_ullong **)(v1 + 8);
  if (v6) {
    sub_216D16E0C(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216FDFFB0(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (v3) {
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  }
  return a1;
}

uint64_t sub_216FDFFE4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 5);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xE38E38E38E38E3) {
    sub_21677CB10();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0x8E38E38E38E38E39 * ((a1[2] - v4) >> 5);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x71C71C71C71C71) {
    unint64_t v11 = 0xE38E38E38E38E3;
  }
  else {
    unint64_t v11 = v6;
  }
  char v19 = a1 + 2;
  if (v11) {
    unint64_t v12 = (char *)sub_216FDFAC4(v9, v11);
  }
  else {
    unint64_t v12 = 0;
  }
  unint64_t v15 = v12;
  char v16 = &v12[288 * v5];
  uint64_t v18 = &v12[288 * v11];
  sub_216FE010C((uint64_t)v16, a2, a3);
  uint64_t v17 = v16 + 288;
  sub_216FE0170(a1, &v15);
  uint64_t v13 = a1[1];
  sub_216FE0568(&v15);
  return v13;
}

void sub_216FE00F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216FE0568((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216FE010C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_216FDCAE4(a1, a2);
  *(_DWORD *)(v5 + 256) = *(_DWORD *)a3;
  *(void *)(v5 + 264) = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  sub_21697D878((_DWORD *)(v5 + 272), (_DWORD *)(a3 + 16));
  sub_21697D8B4((_DWORD *)(a1 + 276), (_DWORD *)(a3 + 20));
  *(void *)(a1 + 280) = *(void *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  return a1;
}

uint64_t sub_216FE0170(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216FE01E8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216FE01E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 288;
      sub_216FE0290(v7 - 288, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 288;
      *((void *)&v15 + 1) -= 288;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216FE04DC((uint64_t)v12);
  return v10;
}

uint64_t sub_216FE0290(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_216FE02F4(a1, a2);
  *(_DWORD *)(v4 + 256) = *(_DWORD *)(a2 + 256);
  *(void *)(v4 + 264) = *(void *)(a2 + 264);
  *(void *)(a2 + 264) = 0;
  sub_21697D878((_DWORD *)(v4 + 272), (_DWORD *)(a2 + 272));
  sub_21697D8B4((_DWORD *)(a1 + 276), (_DWORD *)(a2 + 276));
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a2 + 280) = 0;
  return a1;
}

uint64_t sub_216FE02F4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  sub_21697D878((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21697D8B4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  sub_21697D878((_DWORD *)(a1 + 48), (_DWORD *)(a2 + 48));
  sub_21697D8B4((_DWORD *)(a1 + 52), (_DWORD *)(a2 + 52));
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  sub_21697D878((_DWORD *)(a1 + 80), (_DWORD *)(a2 + 80));
  sub_21697D8B4((_DWORD *)(a1 + 84), (_DWORD *)(a2 + 84));
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  sub_21697D878((_DWORD *)(a1 + 112), (_DWORD *)(a2 + 112));
  sub_21697D8B4((_DWORD *)(a1 + 116), (_DWORD *)(a2 + 116));
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  sub_21697D878((_DWORD *)(a1 + 144), (_DWORD *)(a2 + 144));
  sub_21697D8B4((_DWORD *)(a1 + 148), (_DWORD *)(a2 + 148));
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  sub_21697D878((_DWORD *)(a1 + 176), (_DWORD *)(a2 + 176));
  sub_21697D8B4((_DWORD *)(a1 + 180), (_DWORD *)(a2 + 180));
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 184) = 0;
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a2 + 200) = 0;
  sub_21697D878((_DWORD *)(a1 + 208), (_DWORD *)(a2 + 208));
  sub_21697D8B4((_DWORD *)(a1 + 212), (_DWORD *)(a2 + 212));
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a2 + 216) = 0;
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a2 + 232) = 0;
  sub_21697D878((_DWORD *)(a1 + 240), (_DWORD *)(a2 + 240));
  sub_21697D8B4((_DWORD *)(a1 + 244), (_DWORD *)(a2 + 244));
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a2 + 248) = 0;
  return a1;
}

uint64_t sub_216FE04DC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216FE0514((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216FE0514(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_216FDFD6C(v3, v1);
      v1 += 288;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_216FE0568(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_216FE059C(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 288;
      uint64_t result = sub_216FDFD6C(v4, v1 - 288);
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::New@<X0>(const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    if ((*(unsigned char *)(v4 + 57) & 8) == 0)
    {
      uint64_t v5 = this;
      this = (const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *, const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *))(*(void *)this + 32))(this, a2);
      if (this)
      {
        uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *)operator new(0x208uLL);
        pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::UsdSkel_SkelDefinition(v6);
        *a3 = (uint64_t)v6;
        uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *)sub_216FE06A4(a3);
        pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_Init(v7, v5);
      }
    }
  }
  *a3 = 0;
  return this;
}

void sub_216FE067C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216FE06A4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition>::ope"
            "rator->() const [U = pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x80000002174A7BEDLL & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_Init(pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *this, const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetJointsAttr(a2, (uint64_t)&v2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>();
}

void sub_216FE0BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::UsdSkel_SkelDefinition(pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *this)
{
  *((_DWORD *)this + 2) = 1;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26C76F250;
  long long v2 = (pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *)((char *)this + 24);
  int v4 = 1;
  uint64_t v5 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v7);
  uint64_t v8 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(v2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4);
  *(void *)long long v2 = &unk_26C76FA70;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  *((_DWORD *)this + 112) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 57) = 850045863;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((void *)this + 64) = 0;
  return this;
}

void sub_216FE0DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_216D16AD8((uint64_t)&a9);
  sub_216859A88(v10, v12);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_XformHolder::Get<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t a1)
{
  return a1 + 40;
}

{
  return a1 + 40;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, uint64_t a2)
{
  char v2 = atomic_load((unsigned int *)(a1 + 448));
  if ((v2 & 2) != 0)
  {
    if (a2)
    {
      sub_216C467D8(a2, (long long *)(a1 + 128));
      return 1;
    }
    v4[0] = "usdSkel/skelDefinition.cpp";
    v4[1] = "GetJointLocalRestTransforms";
    v4[2] = 166;
    v4[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalRestTransforms(VtMatrix4dArray *)";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t a1, unint64_t *a2)
{
  if (a2)
  {
    uint64_t v7 = 0;
    long long v5 = 0u;
    long long v6 = 0u;
    unsigned int v2 = atomic_load((unsigned int *)(a1 + 448));
    if ((v2 & 2) != 0)
    {
      sub_216C467D8((uint64_t)&v5, (long long *)(a1 + 128));
      sub_216FE0F4C((unint64_t *)&v5, a2);
    }
    sub_2168F83DC((uint64_t)&v5);
    return (v2 >> 1) & 1;
  }
  else
  {
    *(void *)&long long v5 = "usdSkel/skelDefinition.cpp";
    *((void *)&v5 + 1) = "GetJointLocalRestTransforms";
    *(void *)&long long v6 = 183;
    *((void *)&v6 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalRestTransforms(Vt"
                           "Matrix4fArray *)";
    LOBYTE(v7) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v5, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
}

void sub_216FE0F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_216FE0F4C(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  long long v15 = 0u;
  long long v16 = 0u;
  __n128 v13 = 0u;
  long long v14 = 0u;
  uint64_t v17 = &v13;
  sub_216902ED0(a2, v4, (long long **)&v17);
  sub_216903174((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v5, v6);
  if (*a1)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    unint64_t v10 = a2[4];
    do
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)&v13, (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)(a1[4] + v8));
      __n128 result = v13;
      long long v11 = v14;
      long long v12 = v16;
      *(_OWORD *)(v10 + 32) = v15;
      *(_OWORD *)(v10 + 48) = v12;
      *(__n128 *)unint64_t v10 = result;
      *(_OWORD *)(v10 + 16) = v11;
      v10 += 64;
      ++v9;
      v8 += 128;
    }
    while (v9 < *a1);
  }
  return result;
}

uint64_t sub_216FE0FF8(uint64_t a1, uint64_t a2)
{
  char v2 = atomic_load((unsigned int *)(a1 + 448));
  if ((v2 & 2) == 0) {
    return 0;
  }
  if (!a2)
  {
    v6[0] = "usdSkel/skelDefinition.cpp";
    v6[1] = "_GetJointSkelRestTransforms";
    v6[2] = 205;
    v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_GetJointSkelRestTransforms(VtArray<Matrix4> "
            "*) [ComputeFlag = 4, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  if ((v2 & 4) != 0 || (uint64_t result = sub_216FE157C(a1), result))
  {
    sub_216C467D8(a2, (long long *)(a1 + 208));
    return 1;
  }
  return result;
}

uint64_t sub_216FE10A0(uint64_t a1, uint64_t a2)
{
  char v2 = atomic_load((unsigned int *)(a1 + 448));
  if ((v2 & 2) == 0) {
    return 0;
  }
  if (!a2)
  {
    v6[0] = "usdSkel/skelDefinition.cpp";
    v6[1] = "_GetJointSkelRestTransforms";
    v6[2] = 205;
    v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_GetJointSkelRestTransforms(VtArray<Matrix4> "
            "*) [ComputeFlag = 32, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  if ((v2 & 0x20) != 0 || (uint64_t result = sub_216FE1744(a1), result))
  {
    sub_216FE18F0(a2, (long long *)(a1 + 248));
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointWorldBindTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, uint64_t a2)
{
  char v2 = atomic_load((unsigned int *)(a1 + 448));
  if (v2)
  {
    if (a2)
    {
      sub_216C467D8(a2, (long long *)(a1 + 168));
      return 1;
    }
    v4[0] = "usdSkel/skelDefinition.cpp";
    v4[1] = "GetJointWorldBindTransforms";
    v4[2] = 277;
    v4[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointWorldBindTransforms(VtMatrix4dArray *)";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointWorldBindTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t a1, unint64_t *a2)
{
  if (a2)
  {
    uint64_t v7 = 0;
    long long v5 = 0u;
    long long v6 = 0u;
    char v2 = atomic_load((unsigned int *)(a1 + 448));
    if (v2)
    {
      sub_216C467D8((uint64_t)&v5, (long long *)(a1 + 168));
      sub_216FE0F4C((unint64_t *)&v5, a2);
    }
    sub_2168F83DC((uint64_t)&v5);
    return v2 & 1;
  }
  else
  {
    *(void *)&long long v5 = "usdSkel/skelDefinition.cpp";
    *((void *)&v5 + 1) = "GetJointWorldBindTransforms";
    *(void *)&long long v6 = 294;
    *((void *)&v6 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointWorldBindTransforms(Vt"
                           "Matrix4fArray *)";
    LOBYTE(v7) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v5, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
}

void sub_216FE1278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216FE1294(uint64_t a1, uint64_t a2)
{
  char v2 = atomic_load((unsigned int *)(a1 + 448));
  if ((v2 & 1) == 0) {
    return 0;
  }
  if (!a2)
  {
    v6[0] = "usdSkel/skelDefinition.cpp";
    v6[1] = "_GetJointWorldInverseBindTransforms";
    v6[2] = 317;
    v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_GetJointWorldInverseBindTransforms(VtArray<M"
            "atrix4> *) [ComputeFlag = 8, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  if ((v2 & 8) != 0 || (uint64_t result = sub_216FE19A4(a1), result))
  {
    sub_216C467D8(a2, (long long *)(a1 + 288));
    return 1;
  }
  return result;
}

uint64_t sub_216FE133C(uint64_t a1, uint64_t a2)
{
  char v2 = atomic_load((unsigned int *)(a1 + 448));
  if ((v2 & 1) == 0) {
    return 0;
  }
  if (!a2)
  {
    v6[0] = "usdSkel/skelDefinition.cpp";
    v6[1] = "_GetJointWorldInverseBindTransforms";
    v6[2] = 317;
    v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_GetJointWorldInverseBindTransforms(VtArray<M"
            "atrix4> *) [ComputeFlag = 64, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  if ((v2 & 0x40) != 0 || (uint64_t result = sub_216FE1B80(a1), result))
  {
    sub_216FE18F0(a2, (long long *)(a1 + 328));
    return 1;
  }
  return result;
}

uint64_t sub_216FE13E4(uint64_t a1, uint64_t a2)
{
  char v2 = atomic_load((unsigned int *)(a1 + 448));
  if ((v2 & 2) == 0) {
    return 0;
  }
  if (!a2)
  {
    v6[0] = "usdSkel/skelDefinition.cpp";
    v6[1] = "_GetJointLocalInverseRestTransforms";
    v6[2] = 392;
    v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_GetJointLocalInverseRestTransforms(VtArray<M"
            "atrix4> *) [ComputeFlag = 16, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  if ((v2 & 0x10) != 0 || (uint64_t result = sub_216FE1D38(a1), result))
  {
    sub_216C467D8(a2, (long long *)(a1 + 368));
    return 1;
  }
  return result;
}

uint64_t sub_216FE148C(uint64_t a1, uint64_t a2)
{
  char v2 = atomic_load((unsigned int *)(a1 + 448));
  if ((v2 & 2) == 0) {
    return 0;
  }
  if (!a2)
  {
    v6[0] = "usdSkel/skelDefinition.cpp";
    v6[1] = "_GetJointLocalInverseRestTransforms";
    v6[2] = 392;
    v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_GetJointLocalInverseRestTransforms(VtArray<M"
            "atrix4> *) [ComputeFlag = 128, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  if (v2 < 0 || (uint64_t result = sub_216FE1E48(a1), result))
  {
    sub_216FE18F0(a2, (long long *)(a1 + 408));
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::HasBindPose(pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *this)
{
  char v1 = atomic_load((unsigned int *)this + 112);
  return v1 & 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::HasRestPose(pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *this)
{
  unsigned int v1 = atomic_load((unsigned int *)this + 112);
  return (v1 >> 1) & 1;
}

void sub_216FE1554(uint64_t a1)
{
  sub_216FE1F4C(a1);

  operator delete(v1);
}

uint64_t sub_216FE157C(uint64_t a1)
{
  long long v12 = 0;
  memset(v11, 0, sizeof(v11));
  char v2 = atomic_load((unsigned int *)(a1 + 448));
  if ((v2 & 2) != 0)
  {
    sub_216C467D8((uint64_t)v11, (long long *)(a1 + 128));
  }
  else
  {
    *(void *)&long long v13 = "usdSkel/skelDefinition.cpp";
    *((void *)&v13 + 1) = "_ComputeJointSkelRestTransforms";
    *(void *)&long long v14 = 244;
    *((void *)&v14 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_ComputeJointSkelRestTransfor"
                            "ms() [ComputeFlag = 4, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v15) = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v13, "GetJointLocalRestTransforms(&jointLocalRestXforms)", 0) & 1) == 0)
    {
      uint64_t v9 = 0;
      goto LABEL_8;
    }
  }
  std::mutex::lock((std::mutex *)(a1 + 456));
  char v3 = atomic_load((unsigned int *)(a1 + 448));
  if ((v3 & 4) == 0)
  {
    unint64_t v4 = *(void *)(a1 + 88);
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    int8x16_t v21 = &v13;
    sub_216902248((unint64_t *)(a1 + 208), v4, &v21);
    long long v5 = v12;
    long long v6 = *(char **)&v11[0];
    sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 208), v7, v8);
    if ((pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms((char **)(a1 + 88), v5, v6, *(void *)(a1 + 240), *(char **)(a1 + 208), 0) & 1) == 0)
    {
      *(void *)&long long v13 = "usdSkel/skelDefinition.cpp";
      *((void *)&v13 + 1) = "_ComputeJointSkelRestTransforms";
      *(void *)&long long v14 = 258;
      *((void *)&v14 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_ComputeJointSkelRestTransf"
                              "orms() [ComputeFlag = 4, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
      LOBYTE(v15) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v13, "success", 0);
    }
    atomic_fetch_or((atomic_uint *volatile)(a1 + 448), 4u);
  }
  std::mutex::unlock((std::mutex *)(a1 + 456));
  uint64_t v9 = 1;
LABEL_8:
  sub_2168F83DC((uint64_t)v11);
  return v9;
}

void sub_216FE1708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  sub_2168F83DC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216FE1744(uint64_t a1)
{
  long long v11 = 0;
  memset(v10, 0, sizeof(v10));
  if (pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(a1, (unint64_t *)v10) & 1) != 0|| (*(void *)&long long v12 = "usdSkel/skelDefinition.cpp", *((void *)&v12 + 1) = "_ComputeJointSkelRestTransforms", *(void *)&v13 = 244, *((void *)&v13 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_ComputeJointSkelRestTransforms() [ComputeFlag = 32, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]", LOBYTE(v14) = 0, (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "GetJointLocalRestTransforms(&jointLocalRestXforms)", 0)))
  {
    std::mutex::lock((std::mutex *)(a1 + 456));
    char v2 = atomic_load((unsigned int *)(a1 + 448));
    if ((v2 & 0x20) == 0)
    {
      unint64_t v3 = *(void *)(a1 + 88);
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v16 = &v12;
      sub_216902ED0((unint64_t *)(a1 + 248), v3, &v16);
      unint64_t v4 = v11;
      long long v5 = *(char **)&v10[0];
      sub_216903174((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 248), v6, v7);
      if ((pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms((char **)(a1 + 88), v4, v5, *(void *)(a1 + 280), *(char **)(a1 + 248), 0) & 1) == 0)
      {
        *(void *)&long long v12 = "usdSkel/skelDefinition.cpp";
        *((void *)&v12 + 1) = "_ComputeJointSkelRestTransforms";
        *(void *)&long long v13 = 258;
        *((void *)&v13 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_ComputeJointSkelRestTran"
                                "sforms() [ComputeFlag = 32, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
        LOBYTE(v14) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "success", 0);
      }
      atomic_fetch_or((atomic_uint *volatile)(a1 + 448), 0x20u);
    }
    std::mutex::unlock((std::mutex *)(a1 + 456));
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  sub_2168F83DC((uint64_t)v10);
  return v8;
}

void sub_216FE18B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  sub_2168F83DC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216FE18F0(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216FE1988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216FE19A4(uint64_t a1)
{
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  char v2 = atomic_load((unsigned int *)(a1 + 448));
  if (v2)
  {
    sub_216C467D8((uint64_t)v8, (long long *)(a1 + 168));
  }
  else
  {
    v6[0] = "usdSkel/skelDefinition.cpp";
    v6[1] = "_ComputeJointWorldInverseBindTransforms";
    v6[2] = 361;
    v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_ComputeJointWorldInverseBindTransforms() [Co"
            "mputeFlag = 8, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v7 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "GetJointWorldBindTransforms(&jointWorldBindXforms)", 0) & 1) == 0)
    {
      uint64_t v4 = 0;
      goto LABEL_6;
    }
  }
  std::mutex::lock((std::mutex *)(a1 + 456));
  char v3 = atomic_load((unsigned int *)(a1 + 448));
  if ((v3 & 8) == 0)
  {
    sub_216FE1AB4((unint64_t *)v8, (unint64_t *)(a1 + 288));
    atomic_fetch_or((atomic_uint *volatile)(a1 + 448), 8u);
  }
  std::mutex::unlock((std::mutex *)(a1 + 456));
  uint64_t v4 = 1;
LABEL_6:
  sub_2168F83DC((uint64_t)v8);
  return v4;
}

void sub_216FE1A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216FE1AB4(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  long long v23 = 0u;
  long long v24 = 0u;
  __n128 v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  unint64_t v25 = &v17;
  sub_216902248(a2, v4, &v25);
  sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v5, v6);
  if (*a1)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    unint64_t v10 = a2[4];
    do
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)(a1[4] + v8), 0, 0.0, (uint64_t)&v17);
      uint64_t v11 = v10 + v8;
      long long v12 = v17;
      long long v13 = v18;
      long long v14 = v20;
      *(_OWORD *)(v11 + 32) = v19;
      *(_OWORD *)(v11 + 48) = v14;
      *(_OWORD *)uint64_t v11 = v12;
      *(_OWORD *)(v11 + 16) = v13;
      __n128 result = v21;
      long long v15 = v22;
      long long v16 = v24;
      *(_OWORD *)(v11 + 96) = v23;
      *(_OWORD *)(v11 + 112) = v16;
      *(__n128 *)(v11 + 64) = result;
      *(_OWORD *)(v11 + 80) = v15;
      ++v9;
      v8 += 128;
    }
    while (v9 < *a1);
  }
  return result;
}

uint64_t sub_216FE1B80(uint64_t a1)
{
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  if (pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointWorldBindTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(a1, (unint64_t *)v7) & 1) != 0|| (v5[0] = "usdSkel/skelDefinition.cpp", v5[1] = "_ComputeJointWorldInverseBindTransforms", v5[2] = 361, v5[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_ComputeJointWorldInverseBindTransforms() [ComputeFlag = 64, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]", char v6 = 0, (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "GetJointWorldBindTransforms(&jointWorldBindXforms)", 0)))
  {
    std::mutex::lock((std::mutex *)(a1 + 456));
    char v2 = atomic_load((unsigned int *)(a1 + 448));
    if ((v2 & 0x40) == 0)
    {
      sub_216FE1C84((unint64_t *)v7, (unint64_t *)(a1 + 328));
      atomic_fetch_or((atomic_uint *volatile)(a1 + 448), 0x40u);
    }
    std::mutex::unlock((std::mutex *)(a1 + 456));
    uint64_t v3 = 1;
  }
  else
  {
    uint64_t v3 = 0;
  }
  sub_2168F83DC((uint64_t)v7);
  return v3;
}

void sub_216FE1C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216FE1C84(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  long long v16 = 0u;
  long long v17 = 0u;
  __n128 v14 = 0u;
  long long v15 = 0u;
  long long v18 = &v14;
  sub_216902ED0(a2, v4, (long long **)&v18);
  sub_216903174((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v5, v6);
  if (*a1)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    unint64_t v10 = a2[4];
    do
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix4f::GetInverse((float *)(a1[4] + v8), 0, 0.0, (uint64_t)&v14);
      uint64_t v11 = v10 + v8;
      __n128 result = v14;
      long long v12 = v15;
      long long v13 = v17;
      *(_OWORD *)(v11 + 32) = v16;
      *(_OWORD *)(v11 + 48) = v13;
      *(__n128 *)uint64_t v11 = result;
      *(_OWORD *)(v11 + 16) = v12;
      ++v9;
      v8 += 64;
    }
    while (v9 < *a1);
  }
  return result;
}

uint64_t sub_216FE1D38(uint64_t a1)
{
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  char v2 = atomic_load((unsigned int *)(a1 + 448));
  if ((v2 & 2) != 0)
  {
    sub_216C467D8((uint64_t)v8, (long long *)(a1 + 128));
  }
  else
  {
    v6[0] = "usdSkel/skelDefinition.cpp";
    v6[1] = "_ComputeJointLocalInverseRestTransforms";
    v6[2] = 438;
    v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_ComputeJointLocalInverseRestTransforms() [Co"
            "mputeFlag = 16, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v7 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "GetJointLocalRestTransforms(&jointLocalRestXforms)", 0) & 1) == 0)
    {
      uint64_t v4 = 0;
      goto LABEL_6;
    }
  }
  std::mutex::lock((std::mutex *)(a1 + 456));
  char v3 = atomic_load((unsigned int *)(a1 + 448));
  if ((v3 & 0x10) == 0)
  {
    sub_216FE1AB4((unint64_t *)v8, (unint64_t *)(a1 + 368));
    atomic_fetch_or((atomic_uint *volatile)(a1 + 448), 0x10u);
  }
  std::mutex::unlock((std::mutex *)(a1 + 456));
  uint64_t v4 = 1;
LABEL_6:
  sub_2168F83DC((uint64_t)v8);
  return v4;
}

void sub_216FE1E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216FE1E48(uint64_t a1)
{
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  if (pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(a1, (unint64_t *)v7) & 1) != 0|| (v5[0] = "usdSkel/skelDefinition.cpp", v5[1] = "_ComputeJointLocalInverseRestTransforms", v5[2] = 438, v5[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::_ComputeJointLocalInverseRestTransforms() [ComputeFlag = 128, Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]", char v6 = 0, (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "GetJointLocalRestTransforms(&jointLocalRestXforms)", 0)))
  {
    std::mutex::lock((std::mutex *)(a1 + 456));
    char v2 = atomic_load((unsigned int *)(a1 + 448));
    if ((v2 & 0x80) == 0)
    {
      sub_216FE1C84((unint64_t *)v7, (unint64_t *)(a1 + 408));
      atomic_fetch_or((atomic_uint *volatile)(a1 + 448), 0x80u);
    }
    std::mutex::unlock((std::mutex *)(a1 + 456));
    uint64_t v3 = 1;
  }
  else
  {
    uint64_t v3 = 0;
  }
  sub_2168F83DC((uint64_t)v7);
  return v3;
}

void sub_216FE1F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216FE1F4C(uint64_t a1)
{
  *(void *)a1 = &unk_26C76F250;
  std::mutex::~mutex((std::mutex *)(a1 + 456));
  sub_2168F83DC(a1 + 408);
  sub_2168F83DC(a1 + 368);
  sub_2168F83DC(a1 + 328);
  sub_2168F83DC(a1 + 288);
  sub_2168F83DC(a1 + 248);
  sub_2168F83DC(a1 + 208);
  sub_2168F83DC(a1 + 168);
  sub_2168F83DC(a1 + 128);
  sub_2168F83DC(a1 + 88);
  sub_2169B2E0C((void *)(a1 + 48));
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)(a1 + 24));
  sub_216859A88((uint64_t *)(a1 + 16), v2);

  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

void sub_216FE202C()
{
  sub_216FE3710();
  sub_216779094(__p, "SkelAnimation");
  sub_216FE383C((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216FE207C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::~UsdSkelAnimation(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  char v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76F2A8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdSkel/animation.cpp";
    unint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdSkelAnimation pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::Get(const UsdSta"
                            "gePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    unint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76F2A8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FE2248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94C48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94C48))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B94C40, "SkelAnimation");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B94C40, &dword_216758000);
    __cxa_guard_release(&qword_267B94C48);
  }
  char v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B94C40, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76F2A8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdSkel/animation.cpp";
    unint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdSkelAnimation pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::Define(const Usd"
                            "StagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    unint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76F2A8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FE2454(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94C58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94C58))
  {
    __cxa_guard_release(&qword_267B94C58);
  }
  return &qword_267B94C50;
}

void sub_216FE24FC(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94C68, memory_order_acquire) & 1) == 0)
  {
    char v2 = (pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)__cxa_guard_acquire(&qword_267B94C68);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetStaticTfType(v2);
      byte_267B94C60 = sub_216D16508((char *)&qword_267B94C50, v3, v4);
      __cxa_guard_release(&qword_267B94C68);
    }
  }
  return byte_267B94C60;
}

void sub_216FE257C(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
  return &qword_267B94C50;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetJointsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    uint64_t v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 48), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FE2654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::CreateJointsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8) {
    uint64_t v8 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 48), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 544), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetTranslationsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    uint64_t v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 176), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FE27BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::CreateTranslationsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8) {
    uint64_t v8 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 176), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 616), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetRotationsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    uint64_t v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 120), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FE2924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::CreateRotationsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8) {
    uint64_t v8 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 120), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 784), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetScalesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    uint64_t v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 128), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FE2A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::CreateScalesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8) {
    uint64_t v8 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 128), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 592), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetBlendShapesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    uint64_t v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 8), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FE2BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::CreateBlendShapesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8) {
    uint64_t v8 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 8), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 544), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetBlendShapeWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    uint64_t v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 16), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FE2D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::CreateBlendShapeWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8) {
    uint64_t v8 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 16), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 512), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
  int v1 = (int)this;
  uint64_t v24 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94C88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94C88))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v3) {
      uint64_t v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    uint64_t v4 = *((void *)v3 + 6);
    uint64_t v18 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v18 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v5) {
      uint64_t v5 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    uint64_t v6 = *((void *)v5 + 22);
    uint64_t v19 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v19 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v7) {
      int v7 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    uint64_t v8 = *((void *)v7 + 15);
    uint64_t v20 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v20 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v9) {
      uint64_t v9 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    uint64_t v10 = *((void *)v9 + 16);
    uint64_t v21 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v21 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v11) {
      uint64_t v11 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    uint64_t v12 = *((void *)v11 + 1);
    uint64_t v22 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v22 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v13 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v13) {
      char v13 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    uint64_t v14 = *((void *)v13 + 2);
    uint64_t v23 = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B94C70, &v18, 6uLL);
    for (uint64_t i = 40; i != -8; i -= 8)
    {
      uint64_t v16 = *(uint64_t *)((char *)&v18 + i);
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94C70, &dword_216758000);
    __cxa_guard_release(&qword_267B94C88);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94CA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94CA8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_216FE31D8((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94C90, &dword_216758000);
    __cxa_guard_release(&qword_267B94CA8);
  }
  if (v1) {
    return &qword_267B94C90;
  }
  else {
    return &qword_267B94C70;
  }
}

void sub_216FE3154(_Unwind_Exception *a1)
{
}

void *sub_216FE31D8(uint64_t **a1)
{
  qword_267B94C98 = 0;
  unk_267B94CA0 = 0;
  qword_267B94C90 = 0;
  sub_216973388((char **)&qword_267B94C90, ((unk_267B94C78 - qword_267B94C70) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B94C90, (void *)qword_267B94C98, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B94C90, (void *)qword_267B94C98, (uint64_t *)qword_267B94C70, unk_267B94C78, (unk_267B94C78 - qword_267B94C70) >> 3);
}

void sub_216FE3270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetTransforms(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *a1)
{
  uint64_t v2 = 0;
  memset(&v1[3], 0, 32);
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetTranslationsAttr(a1, (uint64_t)v1);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
}

void sub_216FE3450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  sub_2168F83DC(v5 - 96);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::SetTransforms(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *a1, unint64_t *a2)
{
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  if (pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransforms(a2, (unint64_t *)v9, (unint64_t *)v7, (uint64_t)v5))
  {
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetTranslationsAttr(a1, (uint64_t)v4);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
  }
  sub_2168F83DC((uint64_t)v5);
  sub_2168F83DC((uint64_t)v7);
  sub_2168F83DC((uint64_t)v9);
  return 0;
}

void sub_216FE3698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_216D2EDA0((uint64_t)&a9);
  sub_216D2EDA0((uint64_t)&a13);
  sub_216D2EDA0((uint64_t)&a17);
  sub_2168F83DC((uint64_t)&a21);
  sub_2168F83DC((uint64_t)&a27);
  sub_2168F83DC(v27 - 112);
  _Unwind_Resume(a1);
}

uint64_t *sub_216FE3710()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F1B0B4((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FE37F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FE383C(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216FE38D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *sub_216FE38F4(atomic_ullong *a1)
{
  __n128 result = sub_216FE393C();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      char v4 = (void *)sub_216FE3980((uint64_t)result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *sub_216FE393C()
{
  v0 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)operator new(0x100uLL);
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType::UsdSkelTokensType(v0);
  return v0;
}

void sub_216FE396C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216FE3980(uint64_t a1)
{
  uint64_t v31 = (void **)(a1 + 232);
  sub_216889A04(&v31);
  uint64_t v2 = *(void *)(a1 + 224);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 216);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *(void *)(a1 + 208);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(void *)(a1 + 200);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *(void *)(a1 + 192);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *(void *)(a1 + 184);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *(void *)(a1 + 176);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *(void *)(a1 + 168);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *(void *)(a1 + 160);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *(void *)(a1 + 152);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *(void *)(a1 + 144);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *(void *)(a1 + 136);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *(void *)(a1 + 128);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *(void *)(a1 + 120);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *(void *)(a1 + 112);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *(void *)(a1 + 104);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *(void *)(a1 + 96);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *(void *)(a1 + 88);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *(void *)(a1 + 80);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *(void *)(a1 + 72);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *(void *)(a1 + 64);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v23 = *(void *)(a1 + 56);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *(void *)(a1 + 48);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = *(void *)(a1 + 40);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = *(void *)(a1 + 32);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = *(void *)(a1 + 24);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = *(void *)(a1 + 16);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v29 = *(void *)(a1 + 8);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4)
{
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d> const&,pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>*,int)const::identity, 1.0);
  }

  return sub_216FE3D28(a1, a2, a3, a4, pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d> const&,pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>*,int)const::identity);
}

void sub_216FE3D10(_Unwind_Exception *a1)
{
}

uint64_t sub_216FE3D28(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, long long *a5)
{
  if (!a3)
  {
    *(void *)&long long v31 = "usdSkel/animMapper.h";
    *((void *)&v31 + 1) = "Remap";
    *(void *)&long long v32 = 204;
    *((void *)&v32 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>]";
    LOBYTE(v33) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    *(void *)&long long v31 = "usdSkel/animMapper.h";
    *((void *)&v31 + 1) = "Remap";
    *(void *)&long long v32 = 209;
    *((void *)&v32 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>]";
    LOBYTE(v33) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v31, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C467D8(a3, a2);
  }
  else
  {
    if (a5)
    {
      long long v13 = a5[5];
      long long v35 = a5[4];
      long long v36 = v13;
      long long v14 = a5[7];
      long long v37 = a5[6];
      long long v38 = v14;
      long long v15 = a5[1];
      long long v31 = *a5;
      long long v32 = v15;
      long long v16 = a5[3];
      long long v33 = a5[2];
      long long v34 = v16;
    }
    else
    {
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
    }
    sub_216FF0C28((unint64_t *)a3, v11, &v31);
    int v20 = *((_DWORD *)a1 + 14);
    if ((v20 & 3) != 0)
    {
      if ((v20 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v29 = *(void *)a2;
        }
        else {
          uint64_t v29 = (v9 - a1[1]) * v10;
        }
        unint64_t v30 = (const void *)*((void *)a2 + 4);
        sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v18, v19);
        if (v29) {
          memmove((void *)(*(void *)(a3 + 32) + ((a1[1] * v10) << 7)), v30, v29 << 7);
        }
      }
      else
      {
        uint64_t v21 = (char *)*((void *)a2 + 4);
        sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v18, v19);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v22 = *(void *)a2 / v10;
        }
        else {
          unint64_t v22 = a1[2];
        }
        if (v22)
        {
          uint64_t v23 = 0;
          uint64_t v24 = *(void *)(a3 + 32);
          uint64_t v25 = (unsigned int *)a1[6];
          do
          {
            unsigned int v27 = *v25++;
            unint64_t v26 = v27;
            if ((v27 & 0x80000000) == 0 && *(void *)a3 > v26 && v5 != 0) {
              memmove((void *)(v24 + ((uint64_t)(int)(v26 * v5) << 7)), v21, v10 << 7);
            }
            v23 += v5;
            v21 += 128 * (unint64_t)v5;
            --v22;
          }
          while (v22);
        }
      }
    }
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4)
{
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal((uint64_t)pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4f> const&,pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4f>*,int)const::identity, 1.0);
  }

  return sub_216FE4010(a1, a2, a3, a4, pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4f> const&,pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4f>*,int)const::identity);
}

void sub_216FE3FF8(_Unwind_Exception *a1)
{
}

uint64_t sub_216FE4010(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, long long *a5)
{
  if (!a3)
  {
    *(void *)&long long v29 = "usdSkel/animMapper.h";
    *((void *)&v29 + 1) = "Remap";
    *(void *)&long long v30 = 204;
    *((void *)&v30 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4f>]";
    LOBYTE(v31) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v29, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    *(void *)&long long v29 = "usdSkel/animMapper.h";
    *((void *)&v29 + 1) = "Remap";
    *(void *)&long long v30 = 209;
    *((void *)&v30 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4f>]";
    LOBYTE(v31) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v29, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216FE18F0(a3, a2);
  }
  else
  {
    if (a5)
    {
      long long v13 = a5[1];
      long long v29 = *a5;
      long long v30 = v13;
      long long v14 = a5[3];
      long long v31 = a5[2];
      long long v32 = v14;
    }
    else
    {
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
    }
    sub_216FF0CCC((unint64_t *)a3, v11, (uint64_t)&v29);
    int v18 = *((_DWORD *)a1 + 14);
    if ((v18 & 3) != 0)
    {
      if ((v18 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v27 = *(void *)a2;
        }
        else {
          uint64_t v27 = (v9 - a1[1]) * v10;
        }
        uint64_t v28 = (const void *)*((void *)a2 + 4);
        sub_216903174((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v16, v17);
        if (v27) {
          memmove((void *)(*(void *)(a3 + 32) + ((a1[1] * v10) << 6)), v28, v27 << 6);
        }
      }
      else
      {
        uint64_t v19 = (char *)*((void *)a2 + 4);
        sub_216903174((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v16, v17);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v20 = *(void *)a2 / v10;
        }
        else {
          unint64_t v20 = a1[2];
        }
        if (v20)
        {
          uint64_t v21 = 0;
          uint64_t v22 = *(void *)(a3 + 32);
          uint64_t v23 = (unsigned int *)a1[6];
          do
          {
            unsigned int v25 = *v23++;
            unint64_t v24 = v25;
            if ((v25 & 0x80000000) == 0 && *(void *)a3 > v24 && v5 != 0) {
              memmove((void *)(v22 + ((uint64_t)(int)(v24 * v5) << 6)), v19, v10 << 6);
            }
            v21 += v5;
            v19 += 64 * (unint64_t)v5;
            --v20;
          }
          while (v20);
        }
      }
    }
  }
  return 1;
}

double pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::UsdSkelAnimMapper(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 44) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

{
  double result;

  double result = 0.0;
  *(_OWORD *)((char *)this + 44) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

double pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::UsdSkelAnimMapper(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *this, uint64_t a2)
{
  *(void *)this = a2;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 14;
  return result;
}

{
  double result;

  *(void *)this = a2;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 14;
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::UsdSkelAnimMapper(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *a1, uint64_t a2, uint64_t a3)
{
  return pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::UsdSkelAnimMapper(a1, *(const pxrInternal__aapl__pxrReserved__::TfToken **)(a2 + 32), *(void *)a2, *(const pxrInternal__aapl__pxrReserved__::TfToken **)(a3 + 32), *(void *)a3);
}

{
  return pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::UsdSkelAnimMapper(a1, *(const pxrInternal__aapl__pxrReserved__::TfToken **)(a2 + 32), *(void *)a2, *(const pxrInternal__aapl__pxrReserved__::TfToken **)(a3 + 32), *(void *)a3);
}

pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::UsdSkelAnimMapper(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, unint64_t a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, unint64_t a5)
{
  *(void *)this = a5;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (a3 && a5)
  {
    uint64_t v7 = (uint64_t *)a4;
    uint64_t v9 = a2;
    uint64_t v10 = 0;
    unint64_t v11 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)a4 + 8 * a5);
    while ((*(void *)((unsigned char *)a4 + v10) & 0xFFFFFFFFFFFFFFF8) != (*(void *)a2 & 0xFFFFFFFFFFFFFFF8))
    {
      v10 += 8;
      if (8 * a5 == v10) {
        goto LABEL_9;
      }
    }
    unint64_t v11 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)a4 + v10);
LABEL_9:
    if (a3 + ((v11 - a4) >> 3) <= a5)
    {
      uint64_t v23 = (v11 - a4) >> 3;
      uint64_t v24 = 8 * v23;
      uint64_t v25 = 8 * a3;
      unint64_t v26 = a2;
      while ((*(void *)v26 & 0xFFFFFFFFFFFFFFF8) == (*(void *)((unsigned char *)a4 + v24) & 0xFFFFFFFFFFFFFFF8))
      {
        unint64_t v26 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v26 + 8);
        v24 += 8;
        v25 -= 8;
        if (!v25)
        {
          *((void *)this + 1) = v23;
          if (v11 == a4 && a3 == a5) {
            int v28 = 14;
          }
          else {
            int v28 = 10;
          }
          *((_DWORD *)this + 14) = v28;
          return this;
        }
      }
    }
    uint64_t v12 = 0;
    memset(v32, 0, sizeof(v32));
    int v33 = 1065353216;
    do
    {
      long long v30 = v7;
      *((_DWORD *)sub_2168CB594((uint64_t)v32, v7++, (uint64_t)&unk_2174BFD90, &v30) + 6) = v12++;
    }
    while (a5 != v12);
    int v34 = 0;
    long long v30 = (uint64_t *)&v34;
    sub_216907A0C((unint64_t *)this + 2, a3, (_DWORD **)&v30);
    sub_216907C74((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)((char *)this + 16), v13, v14);
    uint64_t v15 = *((void *)this + 6);
    sub_216BD2264(&v30, a5);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    do
    {
      int v18 = sub_2168CB1F4(v32, v9);
      if (v18)
      {
        *(_DWORD *)(v15 + 4 * v16) = *((_DWORD *)v18 + 6);
        *(uint64_t *)((char *)v30 + (((unint64_t)*((int *)v18 + 6) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *((_DWORD *)v18 + 6);
        ++v17;
      }
      else
      {
        *(_DWORD *)(v15 + 4 * v16) = -1;
      }
      ++v16;
      uint64_t v9 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v9 + 8);
    }
    while (a3 != v16);
    if (v17 == a3) {
      int v19 = 2;
    }
    else {
      int v19 = 1;
    }
    *((_DWORD *)this + 14) = v19;
    unint64_t v20 = v30;
    if (v31 > 0x3F || (v31 & 0x3F) != 0)
    {
      int v21 = 0;
      uint64_t v22 = v30;
      while ((((unint64_t)*v22 >> v21) & 1) != 0)
      {
        v22 += v21 == 63;
        if (v21 == 63) {
          int v21 = 0;
        }
        else {
          ++v21;
        }
        if (v21 == (v31 & 0x3F) && v22 == &v30[v31 >> 6]) {
          goto LABEL_29;
        }
      }
    }
    else
    {
LABEL_29:
      *((_DWORD *)this + 14) = v19 | 4;
    }
    if (v20) {
      operator delete(v20);
    }
    sub_2168C08A0((uint64_t)v32);
  }
  else
  {
    *((_DWORD *)this + 14) = 0;
  }
  return this;
}

void sub_216FE4530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  sub_2168C08A0((uint64_t)&a13);
  sub_2168F83DC(v13);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsIdentity(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *this)
{
  return (~*((_DWORD *)this + 14) & 0xE) == 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsSparse(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *this)
{
  return (*((unsigned char *)this + 56) & 4) == 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsNull(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *this)
{
  return (*((unsigned char *)this + 56) & 3) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_IsOrdered(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *this)
{
  return (*((unsigned __int8 *)this + 56) >> 3) & 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, const pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (sub_216A31600(a2))
  {
    return sub_216FE4ED4((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_216908770(a2))
  {
    return sub_216FE5208((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_216907880(a2))
  {
    return sub_216FE553C((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_2169062C0(a2))
  {
    return sub_216FE5870((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_2169DDCD4(a2))
  {
    return sub_216FE5BA4((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_2169DF540(a2))
  {
    return sub_216FE5ED8((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_2168F8308(a2))
  {
    return sub_216FE620C((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_2168F8860(a2))
  {
    return sub_216FE6540((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_2168F9F4C(a2))
  {
    return sub_216FE6874((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_216B8DA34(a2))
  {
    return sub_216FE6BA8((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_216998044(a2))
  {
    return sub_216FE6EDC((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_21699807C(a2))
  {
    return sub_216FE7218((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_216998140(a2))
  {
    return sub_216FE754C((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_216B8EA80(a2))
  {
    return sub_216FE7888((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_21699AC40(a2))
  {
    return sub_216FE7BBC((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_216B8F40C(a2))
  {
    return sub_216FE7EF8((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_216B8F888(a2))
  {
    return sub_216FE8234((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_2169026B0(a2))
  {
    return sub_216FE8570((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_216903B7C(a2))
  {
    return sub_216FE88AC((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_216904004(a2))
  {
    return sub_216FE8BE0((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_21690577C(a2))
  {
    return sub_216FE8F1C((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_216B90610(a2))
  {
    return sub_216FE9258((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_2168FAA14(a2))
  {
    return sub_216FE958C((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_2168FAEA0(a2))
  {
    return sub_216FE98C0((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_2168FC5B0(a2))
  {
    return sub_216FE9BF4((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_216B91028(a2))
  {
    return sub_216FE9F30((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_2168FD1A4(a2))
  {
    return sub_216FEA26C((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_2168FD6AC(a2))
  {
    return sub_216FEA5A0((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_2168FEEE8(a2))
  {
    return sub_216FEA8DC((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_216B91B74(a2))
  {
    return sub_216FEAC18((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_2168FF9E8(a2))
  {
    return sub_216FEAF54((uint64_t *)this, a2, a3, a4, a5);
  }
  else if (sub_2168FFE70(a2))
  {
    return sub_216FEB288((uint64_t *)this, a2, a3, a4, a5);
  }
  else
  {
    uint64_t result = sub_2169015F0(a2);
    if (result)
    {
      return sub_216FEB5C4((uint64_t *)this, a2, a3, a4, a5);
    }
  }
  return result;
}

uint64_t sub_216FE4ED4(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v40 = "usdSkel/animMapper.cpp";
    *((void *)&v40 + 1) = "_UntypedRemap";
    *(void *)&long long v41 = 179;
    *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = BOOL]";
    LOBYTE(v42) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_216A31600(a3) & 1) == 0)
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 188;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = BOOL]";
      LOBYTE(v42) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v38);
      int v12 = v39;
      uint64_t v13 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v38;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v37 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    sub_216A31534(a3, (uint64_t)&v40);
    sub_2168F83DC((uint64_t)&v40);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_216959490(a5))
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 199;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = BOOL]";
      LOBYTE(v42) = 0;
      long long v29 = v38;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v38);
      if (v39 < 0) {
        long long v29 = (void **)v38[0];
      }
      long long v32 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C230], v30, v31);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v32);
      if (*(char *)(TypeName + 23) >= 0) {
        int v34 = (const char *)TypeName;
      }
      else {
        int v34 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v29, v34);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
  }
  else
  {
    a5 = 0;
  }
  uint64_t v21 = *((void *)a2 + 1);
  if ((v21 & 4) != 0) {
    uint64_t v22 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  else {
    uint64_t v22 = *(void *)a2;
  }
  uint64_t v23 = *((void *)a3 + 1);
  if ((v23 & 4) != 0) {
    uint64_t v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v24 = *(void *)a3;
  }
  long long v25 = *(_OWORD *)(v24 + 16);
  long long v40 = *(_OWORD *)v24;
  long long v41 = v25;
  uint64_t v26 = *(void *)(v24 + 32);
  uint64_t v42 = v26;
  if (v26)
  {
    uint64_t v27 = (atomic_ullong *)(v26 - 16);
    if (*((void *)&v41 + 1)) {
      uint64_t v27 = (atomic_ullong *)*((void *)&v41 + 1);
    }
    atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = sub_216FEB944(a1, v22, (uint64_t)&v40, a4, a5);
  if (v28) {
    sub_216A31534(a3, (uint64_t)&v40);
  }
  sub_2168F83DC((uint64_t)&v40);
  return v28;
}

void sub_216FE51A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE5208(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v40 = "usdSkel/animMapper.cpp";
    *((void *)&v40 + 1) = "_UntypedRemap";
    *(void *)&long long v41 = 179;
    *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = unsigned char]";
    LOBYTE(v42) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_216908770(a3) & 1) == 0)
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 188;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = unsigned char]";
      LOBYTE(v42) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v38);
      int v12 = v39;
      uint64_t v13 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v38;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v37 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    sub_2169087A8(a3, (uint64_t)&v40);
    sub_2168F83DC((uint64_t)&v40);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_2169975B8(a5))
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 199;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = unsigned char]";
      LOBYTE(v42) = 0;
      long long v29 = v38;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v38);
      if (v39 < 0) {
        long long v29 = (void **)v38[0];
      }
      long long v32 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C250], v30, v31);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v32);
      if (*(char *)(TypeName + 23) >= 0) {
        int v34 = (const char *)TypeName;
      }
      else {
        int v34 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v29, v34);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
  }
  else
  {
    a5 = 0;
  }
  uint64_t v21 = *((void *)a2 + 1);
  if ((v21 & 4) != 0) {
    uint64_t v22 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  else {
    uint64_t v22 = *(void *)a2;
  }
  uint64_t v23 = *((void *)a3 + 1);
  if ((v23 & 4) != 0) {
    uint64_t v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v24 = *(void *)a3;
  }
  long long v25 = *(_OWORD *)(v24 + 16);
  long long v40 = *(_OWORD *)v24;
  long long v41 = v25;
  uint64_t v26 = *(void *)(v24 + 32);
  uint64_t v42 = v26;
  if (v26)
  {
    uint64_t v27 = (atomic_ullong *)(v26 - 16);
    if (*((void *)&v41 + 1)) {
      uint64_t v27 = (atomic_ullong *)*((void *)&v41 + 1);
    }
    atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = sub_216FEBBB8(a1, v22, (uint64_t)&v40, a4, (char *)a5);
  if (v28) {
    sub_2169087A8(a3, (uint64_t)&v40);
  }
  sub_2168F83DC((uint64_t)&v40);
  return v28;
}

void sub_216FE54D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE553C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v40 = "usdSkel/animMapper.cpp";
    *((void *)&v40 + 1) = "_UntypedRemap";
    *(void *)&long long v41 = 179;
    *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = int]";
    LOBYTE(v42) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_216907880(a3) & 1) == 0)
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 188;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = int]";
      LOBYTE(v42) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v38);
      int v12 = v39;
      uint64_t v13 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v38;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v37 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    sub_216907DC4(a3, (uint64_t)&v40);
    sub_2168F83DC((uint64_t)&v40);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_21695A85C(a5))
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 199;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = int]";
      LOBYTE(v42) = 0;
      long long v29 = v38;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v38);
      if (v39 < 0) {
        long long v29 = (void **)v38[0];
      }
      long long v32 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C258], v30, v31);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v32);
      if (*(char *)(TypeName + 23) >= 0) {
        int v34 = (const char *)TypeName;
      }
      else {
        int v34 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v29, v34);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
  }
  else
  {
    a5 = 0;
  }
  uint64_t v21 = *((void *)a2 + 1);
  if ((v21 & 4) != 0) {
    uint64_t v22 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v22 = *(long long **)a2;
  }
  uint64_t v23 = *((void *)a3 + 1);
  if ((v23 & 4) != 0) {
    uint64_t v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v24 = *(void *)a3;
  }
  long long v25 = *(_OWORD *)(v24 + 16);
  long long v40 = *(_OWORD *)v24;
  long long v41 = v25;
  uint64_t v26 = *(void *)(v24 + 32);
  uint64_t v42 = v26;
  if (v26)
  {
    uint64_t v27 = (atomic_ullong *)(v26 - 16);
    if (*((void *)&v41 + 1)) {
      uint64_t v27 = (atomic_ullong *)*((void *)&v41 + 1);
    }
    atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = sub_216FEBE24(a1, v22, (uint64_t)&v40, a4, (int *)a5);
  if (v28) {
    sub_216907DC4(a3, (uint64_t)&v40);
  }
  sub_2168F83DC((uint64_t)&v40);
  return v28;
}

void sub_216FE5808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE5870(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v40 = "usdSkel/animMapper.cpp";
    *((void *)&v40 + 1) = "_UntypedRemap";
    *(void *)&long long v41 = 179;
    *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = unsigned int]";
    LOBYTE(v42) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_2169062C0(a3) & 1) == 0)
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 188;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = unsigned int]";
      LOBYTE(v42) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v38);
      int v12 = v39;
      uint64_t v13 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v38;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v37 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    sub_2169071E8(a3, (uint64_t)&v40);
    sub_2168F83DC((uint64_t)&v40);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_216B8CB68(a5))
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 199;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = unsigned int]";
      LOBYTE(v42) = 0;
      long long v29 = v38;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v38);
      if (v39 < 0) {
        long long v29 = (void **)v38[0];
      }
      long long v32 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C260], v30, v31);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v32);
      if (*(char *)(TypeName + 23) >= 0) {
        int v34 = (const char *)TypeName;
      }
      else {
        int v34 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v29, v34);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
  }
  else
  {
    a5 = 0;
  }
  uint64_t v21 = *((void *)a2 + 1);
  if ((v21 & 4) != 0) {
    uint64_t v22 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v22 = *(long long **)a2;
  }
  uint64_t v23 = *((void *)a3 + 1);
  if ((v23 & 4) != 0) {
    uint64_t v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v24 = *(void *)a3;
  }
  long long v25 = *(_OWORD *)(v24 + 16);
  long long v40 = *(_OWORD *)v24;
  long long v41 = v25;
  uint64_t v26 = *(void *)(v24 + 32);
  uint64_t v42 = v26;
  if (v26)
  {
    uint64_t v27 = (atomic_ullong *)(v26 - 16);
    if (*((void *)&v41 + 1)) {
      uint64_t v27 = (atomic_ullong *)*((void *)&v41 + 1);
    }
    atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = sub_216FEC0A4(a1, v22, (uint64_t)&v40, a4, (int *)a5);
  if (v28) {
    sub_2169071E8(a3, (uint64_t)&v40);
  }
  sub_2168F83DC((uint64_t)&v40);
  return v28;
}

void sub_216FE5B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE5BA4(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v40 = "usdSkel/animMapper.cpp";
    *((void *)&v40 + 1) = "_UntypedRemap";
    *(void *)&long long v41 = 179;
    *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = long long]";
    LOBYTE(v42) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_2169DDCD4(a3) & 1) == 0)
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 188;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = long long]";
      LOBYTE(v42) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v38);
      int v12 = v39;
      uint64_t v13 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v38;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v37 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    sub_216A319F4(a3, (uint64_t)&v40);
    sub_2168F83DC((uint64_t)&v40);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_2169F9268(a5))
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 199;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = long long]";
      LOBYTE(v42) = 0;
      long long v29 = v38;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v38);
      if (v39 < 0) {
        long long v29 = (void **)v38[0];
      }
      long long v32 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C290], v30, v31);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v32);
      if (*(char *)(TypeName + 23) >= 0) {
        int v34 = (const char *)TypeName;
      }
      else {
        int v34 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v29, v34);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
  }
  else
  {
    a5 = 0;
  }
  uint64_t v21 = *((void *)a2 + 1);
  if ((v21 & 4) != 0) {
    uint64_t v22 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v22 = *(long long **)a2;
  }
  uint64_t v23 = *((void *)a3 + 1);
  if ((v23 & 4) != 0) {
    uint64_t v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v24 = *(void *)a3;
  }
  long long v25 = *(_OWORD *)(v24 + 16);
  long long v40 = *(_OWORD *)v24;
  long long v41 = v25;
  uint64_t v26 = *(void *)(v24 + 32);
  uint64_t v42 = v26;
  if (v26)
  {
    uint64_t v27 = (atomic_ullong *)(v26 - 16);
    if (*((void *)&v41 + 1)) {
      uint64_t v27 = (atomic_ullong *)*((void *)&v41 + 1);
    }
    atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = sub_216FEC324(a1, v22, (uint64_t)&v40, a4, (char **)a5);
  if (v28) {
    sub_216A319F4(a3, (uint64_t)&v40);
  }
  sub_2168F83DC((uint64_t)&v40);
  return v28;
}

void sub_216FE5E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE5ED8(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v40 = "usdSkel/animMapper.cpp";
    *((void *)&v40 + 1) = "_UntypedRemap";
    *(void *)&long long v41 = 179;
    *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = unsigned long long]";
    LOBYTE(v42) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_2169DF540(a3) & 1) == 0)
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 188;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = unsigned long long]";
      LOBYTE(v42) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v38);
      int v12 = v39;
      uint64_t v13 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v38;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v37 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    sub_216B8D190(a3, (uint64_t)&v40);
    sub_2168F83DC((uint64_t)&v40);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_216B8D0C8(a5))
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 199;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = unsigned long long]";
      LOBYTE(v42) = 0;
      long long v29 = v38;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v38);
      if (v39 < 0) {
        long long v29 = (void **)v38[0];
      }
      long long v32 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C298], v30, v31);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v32);
      if (*(char *)(TypeName + 23) >= 0) {
        int v34 = (const char *)TypeName;
      }
      else {
        int v34 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v29, v34);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
  }
  else
  {
    a5 = 0;
  }
  uint64_t v21 = *((void *)a2 + 1);
  if ((v21 & 4) != 0) {
    uint64_t v22 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v22 = *(long long **)a2;
  }
  uint64_t v23 = *((void *)a3 + 1);
  if ((v23 & 4) != 0) {
    uint64_t v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v24 = *(void *)a3;
  }
  long long v25 = *(_OWORD *)(v24 + 16);
  long long v40 = *(_OWORD *)v24;
  long long v41 = v25;
  uint64_t v26 = *(void *)(v24 + 32);
  uint64_t v42 = v26;
  if (v26)
  {
    uint64_t v27 = (atomic_ullong *)(v26 - 16);
    if (*((void *)&v41 + 1)) {
      uint64_t v27 = (atomic_ullong *)*((void *)&v41 + 1);
    }
    atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = sub_216FEC59C(a1, v22, (uint64_t)&v40, a4, (char **)a5);
  if (v28) {
    sub_216B8D190(a3, (uint64_t)&v40);
  }
  sub_2168F83DC((uint64_t)&v40);
  return v28;
}

void sub_216FE61A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE620C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v40 = "usdSkel/animMapper.cpp";
    *((void *)&v40 + 1) = "_UntypedRemap";
    *(void *)&long long v41 = 179;
    *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
    LOBYTE(v42) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_2168F8308(a3) & 1) == 0)
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 188;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
      LOBYTE(v42) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v38);
      int v12 = v39;
      uint64_t v13 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v38;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v37 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    sub_2168F945C(a3, (uint64_t)&v40);
    sub_2168F83DC((uint64_t)&v40);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_216B8D444(a5))
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 199;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
      LOBYTE(v42) = 0;
      long long v29 = v38;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v38);
      if (v39 < 0) {
        long long v29 = (void **)v38[0];
      }
      long long v32 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C510, v30, v31);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v32);
      if (*(char *)(TypeName + 23) >= 0) {
        int v34 = (const char *)TypeName;
      }
      else {
        int v34 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v29, v34);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
  }
  else
  {
    a5 = 0;
  }
  uint64_t v21 = *((void *)a2 + 1);
  if ((v21 & 4) != 0) {
    uint64_t v22 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v22 = *(long long **)a2;
  }
  uint64_t v23 = *((void *)a3 + 1);
  if ((v23 & 4) != 0) {
    uint64_t v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v24 = *(void *)a3;
  }
  long long v25 = *(_OWORD *)(v24 + 16);
  long long v40 = *(_OWORD *)v24;
  long long v41 = v25;
  uint64_t v26 = *(void *)(v24 + 32);
  uint64_t v42 = v26;
  if (v26)
  {
    uint64_t v27 = (atomic_ullong *)(v26 - 16);
    if (*((void *)&v41 + 1)) {
      uint64_t v27 = (atomic_ullong *)*((void *)&v41 + 1);
    }
    atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = sub_216FEC814(a1, v22, (uint64_t)&v40, a4, (__int16 *)a5);
  if (v28) {
    sub_2168F945C(a3, (uint64_t)&v40);
  }
  sub_2168F83DC((uint64_t)&v40);
  return v28;
}

void sub_216FE64D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE6540(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v40 = "usdSkel/animMapper.cpp";
    *((void *)&v40 + 1) = "_UntypedRemap";
    *(void *)&long long v41 = 179;
    *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = float]";
    LOBYTE(v42) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_2168F8860(a3) & 1) == 0)
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 188;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = float]";
      LOBYTE(v42) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v38);
      int v12 = v39;
      uint64_t v13 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v38;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v37 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    sub_2168F8898(a3, (uint64_t)&v40);
    sub_2168F83DC((uint64_t)&v40);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_21691FA2C(a5))
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 199;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = float]";
      LOBYTE(v42) = 0;
      long long v29 = v38;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v38);
      if (v39 < 0) {
        long long v29 = (void **)v38[0];
      }
      long long v32 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C248], v30, v31);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v32);
      if (*(char *)(TypeName + 23) >= 0) {
        int v34 = (const char *)TypeName;
      }
      else {
        int v34 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v29, v34);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
  }
  else
  {
    a5 = 0;
  }
  uint64_t v21 = *((void *)a2 + 1);
  if ((v21 & 4) != 0) {
    uint64_t v22 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v22 = *(long long **)a2;
  }
  uint64_t v23 = *((void *)a3 + 1);
  if ((v23 & 4) != 0) {
    uint64_t v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v24 = *(void *)a3;
  }
  long long v25 = *(_OWORD *)(v24 + 16);
  long long v40 = *(_OWORD *)v24;
  long long v41 = v25;
  uint64_t v26 = *(void *)(v24 + 32);
  uint64_t v42 = v26;
  if (v26)
  {
    uint64_t v27 = (atomic_ullong *)(v26 - 16);
    if (*((void *)&v41 + 1)) {
      uint64_t v27 = (atomic_ullong *)*((void *)&v41 + 1);
    }
    atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = sub_216FECA94(a1, v22, (uint64_t)&v40, a4, (int *)a5);
  if (v28) {
    sub_2168F8898(a3, (uint64_t)&v40);
  }
  sub_2168F83DC((uint64_t)&v40);
  return v28;
}

void sub_216FE680C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE6874(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v40 = "usdSkel/animMapper.cpp";
    *((void *)&v40 + 1) = "_UntypedRemap";
    *(void *)&long long v41 = 179;
    *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = double]";
    LOBYTE(v42) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_2168F9F4C(a3) & 1) == 0)
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 188;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = double]";
      LOBYTE(v42) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v38);
      int v12 = v39;
      uint64_t v13 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v38;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v37 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    sub_2168F9F84(a3, (uint64_t)&v40);
    sub_2168F83DC((uint64_t)&v40);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_21691CE68(a5))
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 199;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = double]";
      LOBYTE(v42) = 0;
      long long v29 = v38;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v38);
      if (v39 < 0) {
        long long v29 = (void **)v38[0];
      }
      long long v32 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C240], v30, v31);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v32);
      if (*(char *)(TypeName + 23) >= 0) {
        int v34 = (const char *)TypeName;
      }
      else {
        int v34 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v29, v34);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
  }
  else
  {
    a5 = 0;
  }
  uint64_t v21 = *((void *)a2 + 1);
  if ((v21 & 4) != 0) {
    uint64_t v22 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v22 = *(long long **)a2;
  }
  uint64_t v23 = *((void *)a3 + 1);
  if ((v23 & 4) != 0) {
    uint64_t v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v24 = *(void *)a3;
  }
  long long v25 = *(_OWORD *)(v24 + 16);
  long long v40 = *(_OWORD *)v24;
  long long v41 = v25;
  uint64_t v26 = *(void *)(v24 + 32);
  uint64_t v42 = v26;
  if (v26)
  {
    uint64_t v27 = (atomic_ullong *)(v26 - 16);
    if (*((void *)&v41 + 1)) {
      uint64_t v27 = (atomic_ullong *)*((void *)&v41 + 1);
    }
    atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = sub_216FECD14(a1, v22, (uint64_t)&v40, a4, (char **)a5);
  if (v28) {
    sub_2168F9F84(a3, (uint64_t)&v40);
  }
  sub_2168F83DC((uint64_t)&v40);
  return v28;
}

void sub_216FE6B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE6BA8(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v40 = "usdSkel/animMapper.cpp";
    *((void *)&v40 + 1) = "_UntypedRemap";
    *(void *)&long long v41 = 179;
    *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfTimeCode]";
    LOBYTE(v42) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_216B8DA34(a3) & 1) == 0)
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 188;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfTimeCode]";
      LOBYTE(v42) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v38);
      int v12 = v39;
      uint64_t v13 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v38;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v37 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    sub_216B8DAC0(a3, (uint64_t)&v40);
    sub_2168F83DC((uint64_t)&v40);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_216B8D878(a5))
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 199;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfTimeCode]";
      LOBYTE(v42) = 0;
      long long v29 = v38;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v38);
      if (v39 < 0) {
        long long v29 = (void **)v38[0];
      }
      long long v32 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7557E0, v30, v31);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v32);
      if (*(char *)(TypeName + 23) >= 0) {
        int v34 = (const char *)TypeName;
      }
      else {
        int v34 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v29, v34);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
  }
  else
  {
    a5 = 0;
  }
  uint64_t v21 = *((void *)a2 + 1);
  if ((v21 & 4) != 0) {
    uint64_t v22 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v22 = *(long long **)a2;
  }
  uint64_t v23 = *((void *)a3 + 1);
  if ((v23 & 4) != 0) {
    uint64_t v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v24 = *(void *)a3;
  }
  long long v25 = *(_OWORD *)(v24 + 16);
  long long v40 = *(_OWORD *)v24;
  long long v41 = v25;
  uint64_t v26 = *(void *)(v24 + 32);
  uint64_t v42 = v26;
  if (v26)
  {
    uint64_t v27 = (atomic_ullong *)(v26 - 16);
    if (*((void *)&v41 + 1)) {
      uint64_t v27 = (atomic_ullong *)*((void *)&v41 + 1);
    }
    atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = sub_216FECF8C(a1, v22, (uint64_t)&v40, a4, (char **)a5);
  if (v28) {
    sub_216B8DAC0(a3, (uint64_t)&v40);
  }
  sub_2168F83DC((uint64_t)&v40);
  return v28;
}

void sub_216FE6E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE6EDC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v41 = "usdSkel/animMapper.cpp";
    *((void *)&v41 + 1) = "_UntypedRemap";
    *(void *)&long long v42 = 179;
    *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = std::string]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_216998044(a3) & 1) == 0)
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 188;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = std::string]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      int v12 = v40;
      uint64_t v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v39;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v38 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v40 < 0) {
        operator delete(v39[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    sub_216A31E78(a3, (uint64_t)&v41);
    sub_2169B1EE4(&v41);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_21695C360(a5))
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 199;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = std::string]";
      LOBYTE(v43) = 0;
      long long v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0) {
        long long v30 = (void **)v39[0];
      }
      int v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C747090, v31, v32);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0) {
        long long v35 = (const char *)TypeName;
      }
      else {
        long long v35 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      uint64_t v21 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
    else {
      uint64_t v21 = *(void *)a5;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *((void *)a2 + 1);
  if ((v22 & 4) != 0) {
    uint64_t v23 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v23 = *(long long **)a2;
  }
  uint64_t v24 = *((void *)a3 + 1);
  if ((v24 & 4) != 0) {
    uint64_t v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v25 = *(void *)a3;
  }
  long long v26 = *(_OWORD *)(v25 + 16);
  long long v41 = *(_OWORD *)v25;
  long long v42 = v26;
  uint64_t v27 = *(void *)(v25 + 32);
  uint64_t v43 = v27;
  if (v27)
  {
    uint64_t v28 = (atomic_ullong *)(v27 - 16);
    if (*((void *)&v42 + 1)) {
      uint64_t v28 = (atomic_ullong *)*((void *)&v42 + 1);
    }
    atomic_fetch_add_explicit(v28, 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = sub_216FED204(a1, v23, (uint64_t)&v41, a4, v21);
  if (v29) {
    sub_216A31E78(a3, (uint64_t)&v41);
  }
  sub_2169B1EE4(&v41);
  return v29;
}

void sub_216FE71B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE7218(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v40 = "usdSkel/animMapper.cpp";
    *((void *)&v40 + 1) = "_UntypedRemap";
    *(void *)&long long v41 = 179;
    *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::TfToken]";
    LOBYTE(v42) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_21699807C(a3) & 1) == 0)
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 188;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::TfToken]";
      LOBYTE(v42) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v38);
      int v12 = v39;
      uint64_t v13 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v38;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v37 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    sub_216B8E178(a3, (uint64_t)&v40);
    sub_2169B2E0C(&v40);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_21695DC44(a5))
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 199;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::TfToken]";
      LOBYTE(v42) = 0;
      uint64_t v29 = v38;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v38);
      if (v39 < 0) {
        uint64_t v29 = (void **)v38[0];
      }
      long long v32 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C2C0, v30, v31);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v32);
      if (*(char *)(TypeName + 23) >= 0) {
        int v34 = (const char *)TypeName;
      }
      else {
        int v34 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v29, v34);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
  }
  else
  {
    a5 = 0;
  }
  uint64_t v21 = *((void *)a2 + 1);
  if ((v21 & 4) != 0) {
    uint64_t v22 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v22 = *(long long **)a2;
  }
  uint64_t v23 = *((void *)a3 + 1);
  if ((v23 & 4) != 0) {
    uint64_t v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v24 = *(void *)a3;
  }
  long long v25 = *(_OWORD *)(v24 + 16);
  long long v40 = *(_OWORD *)v24;
  long long v41 = v25;
  uint64_t v26 = *(void *)(v24 + 32);
  uint64_t v42 = v26;
  if (v26)
  {
    uint64_t v27 = (atomic_ullong *)(v26 - 16);
    if (*((void *)&v41 + 1)) {
      uint64_t v27 = (atomic_ullong *)*((void *)&v41 + 1);
    }
    atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = sub_216FED4C4(a1, v22, (uint64_t)&v40, a4, (char **)a5);
  if (v28) {
    sub_216B8E178(a3, (uint64_t)&v40);
  }
  sub_2169B2E0C(&v40);
  return v28;
}

void sub_216FE74E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE754C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v41 = "usdSkel/animMapper.cpp";
    *((void *)&v41 + 1) = "_UntypedRemap";
    *(void *)&long long v42 = 179;
    *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfAssetPath]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_216998140(a3) & 1) == 0)
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 188;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfAssetPath]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      int v12 = v40;
      uint64_t v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v39;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v38 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v40 < 0) {
        operator delete(v39[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    sub_216B8E690(a3, (uint64_t)&v41);
    sub_2169B4408(&v41);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_2169980B4(a5))
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 199;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfAssetPath]";
      LOBYTE(v43) = 0;
      long long v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0) {
        long long v30 = (void **)v39[0];
      }
      int v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755240, v31, v32);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0) {
        long long v35 = (const char *)TypeName;
      }
      else {
        long long v35 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      uint64_t v21 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
    else {
      uint64_t v21 = *(void *)a5;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *((void *)a2 + 1);
  if ((v22 & 4) != 0) {
    uint64_t v23 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v23 = *(long long **)a2;
  }
  uint64_t v24 = *((void *)a3 + 1);
  if ((v24 & 4) != 0) {
    uint64_t v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v25 = *(void *)a3;
  }
  long long v26 = *(_OWORD *)(v25 + 16);
  long long v41 = *(_OWORD *)v25;
  long long v42 = v26;
  uint64_t v27 = *(void *)(v25 + 32);
  uint64_t v43 = v27;
  if (v27)
  {
    uint64_t v28 = (atomic_ullong *)(v27 - 16);
    if (*((void *)&v42 + 1)) {
      uint64_t v28 = (atomic_ullong *)*((void *)&v42 + 1);
    }
    atomic_fetch_add_explicit(v28, 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = sub_216FED7C4(a1, v23, (uint64_t)&v41, a4, v21);
  if (v29) {
    sub_216B8E690(a3, (uint64_t)&v41);
  }
  sub_2169B4408(&v41);
  return v29;
}

void sub_216FE7820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE7888(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v40 = "usdSkel/animMapper.cpp";
    *((void *)&v40 + 1) = "_UntypedRemap";
    *(void *)&long long v41 = 179;
    *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfOpaqueValue]";
    LOBYTE(v42) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_216B8EA80(a3) & 1) == 0)
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 188;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfOpaqueValue]";
      LOBYTE(v42) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v38);
      int v12 = v39;
      uint64_t v13 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v38;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v37 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
LABEL_35:
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    sub_216B8EB0C(a3, (uint64_t)&v40);
    sub_2168F83DC((uint64_t)&v40);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_21699510C(a5))
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 199;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfOpaqueValue]";
      LOBYTE(v42) = 0;
      uint64_t v29 = v38;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v38);
      if (v39 < 0) {
        uint64_t v29 = (void **)v38[0];
      }
      long long v32 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755210, v30, v31);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v32);
      if (*(char *)(TypeName + 23) >= 0) {
        int v34 = (const char *)TypeName;
      }
      else {
        int v34 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v29, v34);
      goto LABEL_35;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
  }
  uint64_t v21 = *((void *)a2 + 1);
  if ((v21 & 4) != 0) {
    uint64_t v22 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v22 = *(long long **)a2;
  }
  uint64_t v23 = *((void *)a3 + 1);
  if ((v23 & 4) != 0) {
    uint64_t v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v24 = *(void *)a3;
  }
  long long v25 = *(_OWORD *)(v24 + 16);
  long long v40 = *(_OWORD *)v24;
  long long v41 = v25;
  uint64_t v26 = *(void *)(v24 + 32);
  uint64_t v42 = v26;
  if (v26)
  {
    uint64_t v27 = (atomic_ullong *)(v26 - 16);
    if (*((void *)&v41 + 1)) {
      uint64_t v27 = (atomic_ullong *)*((void *)&v41 + 1);
    }
    atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = sub_216FEDAF8(a1, v22, (uint64_t)&v40, a4);
  if (v28) {
    sub_216B8EB0C(a3, (uint64_t)&v40);
  }
  sub_2168F83DC((uint64_t)&v40);
  return v28;
}

void sub_216FE7B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE7BBC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v41 = "usdSkel/animMapper.cpp";
    *((void *)&v41 + 1) = "_UntypedRemap";
    *(void *)&long long v42 = 179;
    *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfPathExpression]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_21699AC40(a3) & 1) == 0)
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 188;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfPathExpression]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      int v12 = v40;
      uint64_t v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v39;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v38 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v40 < 0) {
        operator delete(v39[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    sub_216B8F0C4(a3, (uint64_t)&v41);
    sub_2169B88CC(&v41);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_21699AB4C(a5))
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 199;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::SdfPathExpression]";
      LOBYTE(v43) = 0;
      long long v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0) {
        long long v30 = (void **)v39[0];
      }
      int v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755268, v31, v32);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0) {
        long long v35 = (const char *)TypeName;
      }
      else {
        long long v35 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      uint64_t v21 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
    else {
      uint64_t v21 = *(void *)a5;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *((void *)a2 + 1);
  if ((v22 & 4) != 0) {
    uint64_t v23 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v23 = *(long long **)a2;
  }
  uint64_t v24 = *((void *)a3 + 1);
  if ((v24 & 4) != 0) {
    uint64_t v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v25 = *(void *)a3;
  }
  long long v26 = *(_OWORD *)(v25 + 16);
  long long v41 = *(_OWORD *)v25;
  long long v42 = v26;
  uint64_t v27 = *(void *)(v25 + 32);
  uint64_t v43 = v27;
  if (v27)
  {
    uint64_t v28 = (atomic_ullong *)(v27 - 16);
    if (*((void *)&v42 + 1)) {
      uint64_t v28 = (atomic_ullong *)*((void *)&v42 + 1);
    }
    atomic_fetch_add_explicit(v28, 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = sub_216FEDCF4(a1, v23, (uint64_t)&v41, a4, v21);
  if (v29) {
    sub_216B8F0C4(a3, (uint64_t)&v41);
  }
  sub_2169B88CC(&v41);
  return v29;
}

void sub_216FE7E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE7EF8(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v41 = "usdSkel/animMapper.cpp";
    *((void *)&v41 + 1) = "_UntypedRemap";
    *(void *)&long long v42 = 179;
    *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_216B8F40C(a3) & 1) == 0)
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 188;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      int v12 = v40;
      uint64_t v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v39;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v38 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v40 < 0) {
        operator delete(v39[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    sub_216B8F444(a3, (uint64_t)&v41);
    sub_2168F83DC((uint64_t)&v41);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_21694FB20(a5))
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 199;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
      LOBYTE(v43) = 0;
      long long v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0) {
        long long v30 = (void **)v39[0];
      }
      int v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C570, v31, v32);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0) {
        long long v35 = (const char *)TypeName;
      }
      else {
        long long v35 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      uint64_t v21 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                               + 168))(a5);
    else {
      uint64_t v21 = *(long long **)a5;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *((void *)a2 + 1);
  if ((v22 & 4) != 0) {
    uint64_t v23 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v23 = *(long long **)a2;
  }
  uint64_t v24 = *((void *)a3 + 1);
  if ((v24 & 4) != 0) {
    uint64_t v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v25 = *(void *)a3;
  }
  long long v26 = *(_OWORD *)(v25 + 16);
  long long v41 = *(_OWORD *)v25;
  long long v42 = v26;
  uint64_t v27 = *(void *)(v25 + 32);
  uint64_t v43 = v27;
  if (v27)
  {
    uint64_t v28 = (atomic_ullong *)(v27 - 16);
    if (*((void *)&v42 + 1)) {
      uint64_t v28 = (atomic_ullong *)*((void *)&v42 + 1);
    }
    atomic_fetch_add_explicit(v28, 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = sub_216FEE0C8(a1, v23, (uint64_t)&v41, a4, v21);
  if (v29) {
    sub_216B8F444(a3, (uint64_t)&v41);
  }
  sub_2168F83DC((uint64_t)&v41);
  return v29;
}

void sub_216FE81CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE8234(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v41 = "usdSkel/animMapper.cpp";
    *((void *)&v41 + 1) = "_UntypedRemap";
    *(void *)&long long v42 = 179;
    *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_216B8F888(a3) & 1) == 0)
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 188;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      int v12 = v40;
      uint64_t v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v39;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v38 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v40 < 0) {
        operator delete(v39[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    sub_216B8F8C0(a3, (uint64_t)&v41);
    sub_2168F83DC((uint64_t)&v41);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_21695273C(a5))
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 199;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
      LOBYTE(v43) = 0;
      long long v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0) {
        long long v30 = (void **)v39[0];
      }
      int v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5A0, v31, v32);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0) {
        long long v35 = (const char *)TypeName;
      }
      else {
        long long v35 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      uint64_t v21 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                               + 168))(a5);
    else {
      uint64_t v21 = *(long long **)a5;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *((void *)a2 + 1);
  if ((v22 & 4) != 0) {
    uint64_t v23 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v23 = *(long long **)a2;
  }
  uint64_t v24 = *((void *)a3 + 1);
  if ((v24 & 4) != 0) {
    uint64_t v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v25 = *(void *)a3;
  }
  long long v26 = *(_OWORD *)(v25 + 16);
  long long v41 = *(_OWORD *)v25;
  long long v42 = v26;
  uint64_t v27 = *(void *)(v25 + 32);
  uint64_t v43 = v27;
  if (v27)
  {
    uint64_t v28 = (atomic_ullong *)(v27 - 16);
    if (*((void *)&v42 + 1)) {
      uint64_t v28 = (atomic_ullong *)*((void *)&v42 + 1);
    }
    atomic_fetch_add_explicit(v28, 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = sub_216FEE354(a1, v23, (uint64_t)&v41, a4, v21);
  if (v29) {
    sub_216B8F8C0(a3, (uint64_t)&v41);
  }
  sub_2168F83DC((uint64_t)&v41);
  return v29;
}

void sub_216FE8508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE8570(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v41 = "usdSkel/animMapper.cpp";
    *((void *)&v41 + 1) = "_UntypedRemap";
    *(void *)&long long v42 = 179;
    *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_2169026B0(a3) & 1) == 0)
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 188;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      int v12 = v40;
      uint64_t v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v39;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v38 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v40 < 0) {
        operator delete(v39[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    sub_2169026E8(a3, (uint64_t)&v41);
    sub_2168F83DC((uint64_t)&v41);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_21695529C(a5))
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 199;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
      LOBYTE(v43) = 0;
      long long v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0) {
        long long v30 = (void **)v39[0];
      }
      int v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5C0, v31, v32);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0) {
        long long v35 = (const char *)TypeName;
      }
      else {
        long long v35 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      uint64_t v21 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                               + 168))(a5);
    else {
      uint64_t v21 = *(long long **)a5;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *((void *)a2 + 1);
  if ((v22 & 4) != 0) {
    uint64_t v23 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v23 = *(long long **)a2;
  }
  uint64_t v24 = *((void *)a3 + 1);
  if ((v24 & 4) != 0) {
    uint64_t v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v25 = *(void *)a3;
  }
  long long v26 = *(_OWORD *)(v25 + 16);
  long long v41 = *(_OWORD *)v25;
  long long v42 = v26;
  uint64_t v27 = *(void *)(v25 + 32);
  uint64_t v43 = v27;
  if (v27)
  {
    uint64_t v28 = (atomic_ullong *)(v27 - 16);
    if (*((void *)&v42 + 1)) {
      uint64_t v28 = (atomic_ullong *)*((void *)&v42 + 1);
    }
    atomic_fetch_add_explicit(v28, 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = sub_216FE3D28(a1, v23, (uint64_t)&v41, a4, v21);
  if (v29) {
    sub_2169026E8(a3, (uint64_t)&v41);
  }
  sub_2168F83DC((uint64_t)&v41);
  return v29;
}

void sub_216FE8844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE88AC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v40 = "usdSkel/animMapper.cpp";
    *((void *)&v40 + 1) = "_UntypedRemap";
    *(void *)&long long v41 = 179;
    *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfQuath]";
    LOBYTE(v42) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_216903B7C(a3) & 1) == 0)
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 188;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfQuath]";
      LOBYTE(v42) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v38);
      int v12 = v39;
      uint64_t v13 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v38;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v37 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    sub_216904BC0(a3, (uint64_t)&v40);
    sub_2168F83DC((uint64_t)&v40);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_216B8FDA4(a5))
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 199;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfQuath]";
      LOBYTE(v42) = 0;
      uint64_t v29 = v38;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v38);
      if (v39 < 0) {
        uint64_t v29 = (void **)v38[0];
      }
      long long v32 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C610, v30, v31);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v32);
      if (*(char *)(TypeName + 23) >= 0) {
        int v34 = (const char *)TypeName;
      }
      else {
        int v34 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v29, v34);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
  }
  else
  {
    a5 = 0;
  }
  uint64_t v21 = *((void *)a2 + 1);
  if ((v21 & 4) != 0) {
    uint64_t v22 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v22 = *(long long **)a2;
  }
  uint64_t v23 = *((void *)a3 + 1);
  if ((v23 & 4) != 0) {
    uint64_t v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v24 = *(void *)a3;
  }
  long long v25 = *(_OWORD *)(v24 + 16);
  long long v40 = *(_OWORD *)v24;
  long long v41 = v25;
  uint64_t v26 = *(void *)(v24 + 32);
  uint64_t v42 = v26;
  if (v26)
  {
    uint64_t v27 = (atomic_ullong *)(v26 - 16);
    if (*((void *)&v41 + 1)) {
      uint64_t v27 = (atomic_ullong *)*((void *)&v41 + 1);
    }
    atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = sub_216FEE62C(a1, v22, (uint64_t)&v40, a4, (char **)a5);
  if (v28) {
    sub_216904BC0(a3, (uint64_t)&v40);
  }
  sub_2168F83DC((uint64_t)&v40);
  return v28;
}

void sub_216FE8B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE8BE0(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v41 = "usdSkel/animMapper.cpp";
    *((void *)&v41 + 1) = "_UntypedRemap";
    *(void *)&long long v42 = 179;
    *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_216904004(a3) & 1) == 0)
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 188;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      int v12 = v40;
      uint64_t v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v39;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v38 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v40 < 0) {
        operator delete(v39[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    sub_21690403C(a3, (uint64_t)&v41);
    sub_2168F83DC((uint64_t)&v41);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_21695810C(a5))
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 199;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
      LOBYTE(v43) = 0;
      long long v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0) {
        long long v30 = (void **)v39[0];
      }
      int v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C600, v31, v32);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0) {
        long long v35 = (const char *)TypeName;
      }
      else {
        long long v35 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      uint64_t v21 = (__n128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a5);
    else {
      uint64_t v21 = *(__n128 **)a5;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *((void *)a2 + 1);
  if ((v22 & 4) != 0) {
    uint64_t v23 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v23 = *(long long **)a2;
  }
  uint64_t v24 = *((void *)a3 + 1);
  if ((v24 & 4) != 0) {
    uint64_t v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v25 = *(void *)a3;
  }
  long long v26 = *(_OWORD *)(v25 + 16);
  long long v41 = *(_OWORD *)v25;
  long long v42 = v26;
  uint64_t v27 = *(void *)(v25 + 32);
  uint64_t v43 = v27;
  if (v27)
  {
    uint64_t v28 = (atomic_ullong *)(v27 - 16);
    if (*((void *)&v42 + 1)) {
      uint64_t v28 = (atomic_ullong *)*((void *)&v42 + 1);
    }
    atomic_fetch_add_explicit(v28, 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = sub_216FEE89C(a1, v23, (uint64_t)&v41, a4, v21);
  if (v29) {
    sub_21690403C(a3, (uint64_t)&v41);
  }
  sub_2168F83DC((uint64_t)&v41);
  return v29;
}

void sub_216FE8EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE8F1C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v41 = "usdSkel/animMapper.cpp";
    *((void *)&v41 + 1) = "_UntypedRemap";
    *(void *)&long long v42 = 179;
    *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_21690577C(a3) & 1) == 0)
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 188;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      int v12 = v40;
      uint64_t v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v39;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v38 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v40 < 0) {
        operator delete(v39[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    sub_2169057B4(a3, (uint64_t)&v41);
    sub_2168F83DC((uint64_t)&v41);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_216956AEC(a5))
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 199;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
      LOBYTE(v43) = 0;
      long long v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0) {
        long long v30 = (void **)v39[0];
      }
      int v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5F0, v31, v32);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0) {
        long long v35 = (const char *)TypeName;
      }
      else {
        long long v35 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      uint64_t v21 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                               + 168))(a5);
    else {
      uint64_t v21 = *(long long **)a5;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *((void *)a2 + 1);
  if ((v22 & 4) != 0) {
    uint64_t v23 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v23 = *(long long **)a2;
  }
  uint64_t v24 = *((void *)a3 + 1);
  if ((v24 & 4) != 0) {
    uint64_t v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v25 = *(void *)a3;
  }
  long long v26 = *(_OWORD *)(v25 + 16);
  long long v41 = *(_OWORD *)v25;
  long long v42 = v26;
  uint64_t v27 = *(void *)(v25 + 32);
  uint64_t v43 = v27;
  if (v27)
  {
    uint64_t v28 = (atomic_ullong *)(v27 - 16);
    if (*((void *)&v42 + 1)) {
      uint64_t v28 = (atomic_ullong *)*((void *)&v42 + 1);
    }
    atomic_fetch_add_explicit(v28, 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = sub_216FEEB10(a1, v23, (uint64_t)&v41, a4, v21);
  if (v29) {
    sub_2169057B4(a3, (uint64_t)&v41);
  }
  sub_2168F83DC((uint64_t)&v41);
  return v29;
}

void sub_216FE91F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE9258(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v40 = "usdSkel/animMapper.cpp";
    *((void *)&v40 + 1) = "_UntypedRemap";
    *(void *)&long long v41 = 179;
    *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2i]";
    LOBYTE(v42) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_216B90610(a3) & 1) == 0)
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 188;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2i]";
      LOBYTE(v42) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v38);
      int v12 = v39;
      uint64_t v13 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v38;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v37 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    sub_216B90648(a3, (uint64_t)&v40);
    sub_2168F83DC((uint64_t)&v40);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_216B90548(a5))
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 199;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2i]";
      LOBYTE(v42) = 0;
      uint64_t v29 = v38;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v38);
      if (v39 < 0) {
        uint64_t v29 = (void **)v38[0];
      }
      long long v32 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C720, v30, v31);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v32);
      if (*(char *)(TypeName + 23) >= 0) {
        int v34 = (const char *)TypeName;
      }
      else {
        int v34 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v29, v34);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
  }
  else
  {
    a5 = 0;
  }
  uint64_t v21 = *((void *)a2 + 1);
  if ((v21 & 4) != 0) {
    uint64_t v22 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v22 = *(long long **)a2;
  }
  uint64_t v23 = *((void *)a3 + 1);
  if ((v23 & 4) != 0) {
    uint64_t v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v24 = *(void *)a3;
  }
  long long v25 = *(_OWORD *)(v24 + 16);
  long long v40 = *(_OWORD *)v24;
  long long v41 = v25;
  uint64_t v26 = *(void *)(v24 + 32);
  uint64_t v42 = v26;
  if (v26)
  {
    uint64_t v27 = (atomic_ullong *)(v26 - 16);
    if (*((void *)&v41 + 1)) {
      uint64_t v27 = (atomic_ullong *)*((void *)&v41 + 1);
    }
    atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = sub_216FEED88(a1, v22, (uint64_t)&v40, a4, (char **)a5);
  if (v28) {
    sub_216B90648(a3, (uint64_t)&v40);
  }
  sub_2168F83DC((uint64_t)&v40);
  return v28;
}

void sub_216FE9524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE958C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v40 = "usdSkel/animMapper.cpp";
    *((void *)&v40 + 1) = "_UntypedRemap";
    *(void *)&long long v41 = 179;
    *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2h]";
    LOBYTE(v42) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_2168FAA14(a3) & 1) == 0)
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 188;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2h]";
      LOBYTE(v42) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v38);
      int v12 = v39;
      uint64_t v13 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v38;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v37 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    sub_2168FBA0C(a3, (uint64_t)&v40);
    sub_2168F83DC((uint64_t)&v40);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_216B908FC(a5))
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 199;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2h]";
      LOBYTE(v42) = 0;
      uint64_t v29 = v38;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v38);
      if (v39 < 0) {
        uint64_t v29 = (void **)v38[0];
      }
      long long v32 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C710, v30, v31);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v32);
      if (*(char *)(TypeName + 23) >= 0) {
        int v34 = (const char *)TypeName;
      }
      else {
        int v34 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v29, v34);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
  }
  else
  {
    a5 = 0;
  }
  uint64_t v21 = *((void *)a2 + 1);
  if ((v21 & 4) != 0) {
    uint64_t v22 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v22 = *(long long **)a2;
  }
  uint64_t v23 = *((void *)a3 + 1);
  if ((v23 & 4) != 0) {
    uint64_t v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v24 = *(void *)a3;
  }
  long long v25 = *(_OWORD *)(v24 + 16);
  long long v40 = *(_OWORD *)v24;
  long long v41 = v25;
  uint64_t v26 = *(void *)(v24 + 32);
  uint64_t v42 = v26;
  if (v26)
  {
    uint64_t v27 = (atomic_ullong *)(v26 - 16);
    if (*((void *)&v41 + 1)) {
      uint64_t v27 = (atomic_ullong *)*((void *)&v41 + 1);
    }
    atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = sub_216FEF000(a1, v22, (uint64_t)&v40, a4, (int *)a5);
  if (v28) {
    sub_2168FBA0C(a3, (uint64_t)&v40);
  }
  sub_2168F83DC((uint64_t)&v40);
  return v28;
}

void sub_216FE9858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE98C0(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v40 = "usdSkel/animMapper.cpp";
    *((void *)&v40 + 1) = "_UntypedRemap";
    *(void *)&long long v41 = 179;
    *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
    LOBYTE(v42) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_2168FAEA0(a3) & 1) == 0)
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 188;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
      LOBYTE(v42) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v38);
      int v12 = v39;
      uint64_t v13 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v38;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v37 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    sub_2168FAED8(a3, (uint64_t)&v40);
    sub_2168F83DC((uint64_t)&v40);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_2169456CC(a5))
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 199;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
      LOBYTE(v42) = 0;
      uint64_t v29 = v38;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v38);
      if (v39 < 0) {
        uint64_t v29 = (void **)v38[0];
      }
      long long v32 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C700, v30, v31);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v32);
      if (*(char *)(TypeName + 23) >= 0) {
        int v34 = (const char *)TypeName;
      }
      else {
        int v34 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v29, v34);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
  }
  else
  {
    a5 = 0;
  }
  uint64_t v21 = *((void *)a2 + 1);
  if ((v21 & 4) != 0) {
    uint64_t v22 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v22 = *(long long **)a2;
  }
  uint64_t v23 = *((void *)a3 + 1);
  if ((v23 & 4) != 0) {
    uint64_t v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v24 = *(void *)a3;
  }
  long long v25 = *(_OWORD *)(v24 + 16);
  long long v40 = *(_OWORD *)v24;
  long long v41 = v25;
  uint64_t v26 = *(void *)(v24 + 32);
  uint64_t v42 = v26;
  if (v26)
  {
    uint64_t v27 = (atomic_ullong *)(v26 - 16);
    if (*((void *)&v41 + 1)) {
      uint64_t v27 = (atomic_ullong *)*((void *)&v41 + 1);
    }
    atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = sub_216FEF280(a1, v22, (uint64_t)&v40, a4, (char **)a5);
  if (v28) {
    sub_2168FAED8(a3, (uint64_t)&v40);
  }
  sub_2168F83DC((uint64_t)&v40);
  return v28;
}

void sub_216FE9B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE9BF4(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v41 = "usdSkel/animMapper.cpp";
    *((void *)&v41 + 1) = "_UntypedRemap";
    *(void *)&long long v42 = 179;
    *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_2168FC5B0(a3) & 1) == 0)
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 188;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      int v12 = v40;
      uint64_t v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v39;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v38 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v40 < 0) {
        operator delete(v39[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    sub_2168FC5E8(a3, (uint64_t)&v41);
    sub_2168F83DC((uint64_t)&v41);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_216943B00(a5))
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 199;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
      LOBYTE(v43) = 0;
      long long v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0) {
        long long v30 = (void **)v39[0];
      }
      int v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C6F0, v31, v32);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0) {
        long long v35 = (const char *)TypeName;
      }
      else {
        long long v35 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      uint64_t v21 = (__n128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a5);
    else {
      uint64_t v21 = *(__n128 **)a5;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *((void *)a2 + 1);
  if ((v22 & 4) != 0) {
    uint64_t v23 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v23 = *(long long **)a2;
  }
  uint64_t v24 = *((void *)a3 + 1);
  if ((v24 & 4) != 0) {
    uint64_t v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v25 = *(void *)a3;
  }
  long long v26 = *(_OWORD *)(v25 + 16);
  long long v41 = *(_OWORD *)v25;
  long long v42 = v26;
  uint64_t v27 = *(void *)(v25 + 32);
  uint64_t v43 = v27;
  if (v27)
  {
    uint64_t v28 = (atomic_ullong *)(v27 - 16);
    if (*((void *)&v42 + 1)) {
      uint64_t v28 = (atomic_ullong *)*((void *)&v42 + 1);
    }
    atomic_fetch_add_explicit(v28, 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = sub_216FEF4F8(a1, v23, (uint64_t)&v41, a4, v21);
  if (v29) {
    sub_2168FC5E8(a3, (uint64_t)&v41);
  }
  sub_2168F83DC((uint64_t)&v41);
  return v29;
}

void sub_216FE9EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FE9F30(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v41 = "usdSkel/animMapper.cpp";
    *((void *)&v41 + 1) = "_UntypedRemap";
    *(void *)&long long v42 = 179;
    *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3i]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_216B91028(a3) & 1) == 0)
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 188;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3i]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      int v12 = v40;
      uint64_t v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v39;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v38 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v40 < 0) {
        operator delete(v39[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    sub_216B91060(a3, (uint64_t)&v41);
    sub_2168F83DC((uint64_t)&v41);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_216B90E68(a5))
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 199;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3i]";
      LOBYTE(v43) = 0;
      long long v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0) {
        long long v30 = (void **)v39[0];
      }
      int v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C760, v31, v32);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0) {
        long long v35 = (const char *)TypeName;
      }
      else {
        long long v35 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      uint64_t v21 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
    else {
      uint64_t v21 = *(void *)a5;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *((void *)a2 + 1);
  if ((v22 & 4) != 0) {
    uint64_t v23 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v23 = *(long long **)a2;
  }
  uint64_t v24 = *((void *)a3 + 1);
  if ((v24 & 4) != 0) {
    uint64_t v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v25 = *(void *)a3;
  }
  long long v26 = *(_OWORD *)(v25 + 16);
  long long v41 = *(_OWORD *)v25;
  long long v42 = v26;
  uint64_t v27 = *(void *)(v25 + 32);
  uint64_t v43 = v27;
  if (v27)
  {
    uint64_t v28 = (atomic_ullong *)(v27 - 16);
    if (*((void *)&v42 + 1)) {
      uint64_t v28 = (atomic_ullong *)*((void *)&v42 + 1);
    }
    atomic_fetch_add_explicit(v28, 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = sub_216FEF778(a1, v23, (uint64_t)&v41, a4, v21);
  if (v29) {
    sub_216B91060(a3, (uint64_t)&v41);
  }
  sub_2168F83DC((uint64_t)&v41);
  return v29;
}

void sub_216FEA204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FEA26C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v40 = "usdSkel/animMapper.cpp";
    *((void *)&v40 + 1) = "_UntypedRemap";
    *(void *)&long long v41 = 179;
    *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3h]";
    LOBYTE(v42) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_2168FD1A4(a3) & 1) == 0)
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 188;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3h]";
      LOBYTE(v42) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v38);
      int v12 = v39;
      uint64_t v13 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v38;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v37 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    sub_2168FE24C(a3, (uint64_t)&v40);
    sub_2168F83DC((uint64_t)&v40);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_216B91330(a5))
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 199;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3h]";
      LOBYTE(v42) = 0;
      uint64_t v29 = v38;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v38);
      if (v39 < 0) {
        uint64_t v29 = (void **)v38[0];
      }
      long long v32 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C750, v30, v31);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v32);
      if (*(char *)(TypeName + 23) >= 0) {
        int v34 = (const char *)TypeName;
      }
      else {
        int v34 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v29, v34);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
  }
  else
  {
    a5 = 0;
  }
  uint64_t v21 = *((void *)a2 + 1);
  if ((v21 & 4) != 0) {
    uint64_t v22 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v22 = *(long long **)a2;
  }
  uint64_t v23 = *((void *)a3 + 1);
  if ((v23 & 4) != 0) {
    uint64_t v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v24 = *(void *)a3;
  }
  long long v25 = *(_OWORD *)(v24 + 16);
  long long v40 = *(_OWORD *)v24;
  long long v41 = v25;
  uint64_t v26 = *(void *)(v24 + 32);
  uint64_t v42 = v26;
  if (v26)
  {
    uint64_t v27 = (atomic_ullong *)(v26 - 16);
    if (*((void *)&v41 + 1)) {
      uint64_t v27 = (atomic_ullong *)*((void *)&v41 + 1);
    }
    atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = sub_216FEFA24(a1, v22, (uint64_t)&v40, a4, (uint64_t)a5);
  if (v28) {
    sub_2168FE24C(a3, (uint64_t)&v40);
  }
  sub_2168F83DC((uint64_t)&v40);
  return v28;
}

void sub_216FEA538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FEA5A0(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v41 = "usdSkel/animMapper.cpp";
    *((void *)&v41 + 1) = "_UntypedRemap";
    *(void *)&long long v42 = 179;
    *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_2168FD6AC(a3) & 1) == 0)
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 188;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      int v12 = v40;
      uint64_t v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v39;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v38 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v40 < 0) {
        operator delete(v39[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    sub_2168FD6E4(a3, (uint64_t)&v41);
    sub_2168F83DC((uint64_t)&v41);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_216949788(a5))
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 199;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
      LOBYTE(v43) = 0;
      long long v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0) {
        long long v30 = (void **)v39[0];
      }
      int v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C740, v31, v32);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0) {
        long long v35 = (const char *)TypeName;
      }
      else {
        long long v35 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      uint64_t v21 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
    else {
      uint64_t v21 = *(void *)a5;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *((void *)a2 + 1);
  if ((v22 & 4) != 0) {
    uint64_t v23 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v23 = *(long long **)a2;
  }
  uint64_t v24 = *((void *)a3 + 1);
  if ((v24 & 4) != 0) {
    uint64_t v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v25 = *(void *)a3;
  }
  long long v26 = *(_OWORD *)(v25 + 16);
  long long v41 = *(_OWORD *)v25;
  long long v42 = v26;
  uint64_t v27 = *(void *)(v25 + 32);
  uint64_t v43 = v27;
  if (v27)
  {
    uint64_t v28 = (atomic_ullong *)(v27 - 16);
    if (*((void *)&v42 + 1)) {
      uint64_t v28 = (atomic_ullong *)*((void *)&v42 + 1);
    }
    atomic_fetch_add_explicit(v28, 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = sub_216FEFCD0(a1, v23, (uint64_t)&v41, a4, v21);
  if (v29) {
    sub_2168FD6E4(a3, (uint64_t)&v41);
  }
  sub_2168F83DC((uint64_t)&v41);
  return v29;
}

void sub_216FEA874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FEA8DC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v41 = "usdSkel/animMapper.cpp";
    *((void *)&v41 + 1) = "_UntypedRemap";
    *(void *)&long long v42 = 179;
    *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_2168FEEE8(a3) & 1) == 0)
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 188;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      int v12 = v40;
      uint64_t v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v39;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v38 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v40 < 0) {
        operator delete(v39[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    sub_2168FEF20(a3, (uint64_t)&v41);
    sub_2168F83DC((uint64_t)&v41);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_216947714(a5))
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 199;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
      LOBYTE(v43) = 0;
      long long v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0) {
        long long v30 = (void **)v39[0];
      }
      int v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C730, v31, v32);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0) {
        long long v35 = (const char *)TypeName;
      }
      else {
        long long v35 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      uint64_t v21 = (__n128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a5);
    else {
      uint64_t v21 = *(__n128 **)a5;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *((void *)a2 + 1);
  if ((v22 & 4) != 0) {
    uint64_t v23 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v23 = *(long long **)a2;
  }
  uint64_t v24 = *((void *)a3 + 1);
  if ((v24 & 4) != 0) {
    uint64_t v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v25 = *(void *)a3;
  }
  long long v26 = *(_OWORD *)(v25 + 16);
  long long v41 = *(_OWORD *)v25;
  long long v42 = v26;
  uint64_t v27 = *(void *)(v25 + 32);
  uint64_t v43 = v27;
  if (v27)
  {
    uint64_t v28 = (atomic_ullong *)(v27 - 16);
    if (*((void *)&v42 + 1)) {
      uint64_t v28 = (atomic_ullong *)*((void *)&v42 + 1);
    }
    atomic_fetch_add_explicit(v28, 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = sub_216FEFF7C(a1, v23, (uint64_t)&v41, a4, v21);
  if (v29) {
    sub_2168FEF20(a3, (uint64_t)&v41);
  }
  sub_2168F83DC((uint64_t)&v41);
  return v29;
}

void sub_216FEABB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FEAC18(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v41 = "usdSkel/animMapper.cpp";
    *((void *)&v41 + 1) = "_UntypedRemap";
    *(void *)&long long v42 = 179;
    *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4i]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_216B91B74(a3) & 1) == 0)
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 188;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4i]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      int v12 = v40;
      uint64_t v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v39;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v38 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v40 < 0) {
        operator delete(v39[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    sub_216B91BAC(a3, (uint64_t)&v41);
    sub_2168F83DC((uint64_t)&v41);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_216B919BC(a5))
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 199;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4i]";
      LOBYTE(v43) = 0;
      long long v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0) {
        long long v30 = (void **)v39[0];
      }
      int v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C7A0, v31, v32);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0) {
        long long v35 = (const char *)TypeName;
      }
      else {
        long long v35 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      uint64_t v21 = (__n128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a5);
    else {
      uint64_t v21 = *(__n128 **)a5;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *((void *)a2 + 1);
  if ((v22 & 4) != 0) {
    uint64_t v23 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v23 = *(long long **)a2;
  }
  uint64_t v24 = *((void *)a3 + 1);
  if ((v24 & 4) != 0) {
    uint64_t v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v25 = *(void *)a3;
  }
  long long v26 = *(_OWORD *)(v25 + 16);
  long long v41 = *(_OWORD *)v25;
  long long v42 = v26;
  uint64_t v27 = *(void *)(v25 + 32);
  uint64_t v43 = v27;
  if (v27)
  {
    uint64_t v28 = (atomic_ullong *)(v27 - 16);
    if (*((void *)&v42 + 1)) {
      uint64_t v28 = (atomic_ullong *)*((void *)&v42 + 1);
    }
    atomic_fetch_add_explicit(v28, 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = sub_216FF0224(a1, v23, (uint64_t)&v41, a4, v21);
  if (v29) {
    sub_216B91BAC(a3, (uint64_t)&v41);
  }
  sub_2168F83DC((uint64_t)&v41);
  return v29;
}

void sub_216FEAEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FEAF54(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v40 = "usdSkel/animMapper.cpp";
    *((void *)&v40 + 1) = "_UntypedRemap";
    *(void *)&long long v41 = 179;
    *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4h]";
    LOBYTE(v42) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_2168FF9E8(a3) & 1) == 0)
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 188;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4h]";
      LOBYTE(v42) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v38);
      int v12 = v39;
      uint64_t v13 = (void **)v38[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v38;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v37 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    sub_216900A24(a3, (uint64_t)&v40);
    sub_2168F83DC((uint64_t)&v40);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_216B91E5C(a5))
    {
      *(void *)&long long v40 = "usdSkel/animMapper.cpp";
      *((void *)&v40 + 1) = "_UntypedRemap";
      *(void *)&long long v41 = 199;
      *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4h]";
      LOBYTE(v42) = 0;
      uint64_t v29 = v38;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v38);
      if (v39 < 0) {
        uint64_t v29 = (void **)v38[0];
      }
      long long v32 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C790, v30, v31);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v32);
      if (*(char *)(TypeName + 23) >= 0) {
        int v34 = (const char *)TypeName;
      }
      else {
        int v34 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v29, v34);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      a5 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
  }
  else
  {
    a5 = 0;
  }
  uint64_t v21 = *((void *)a2 + 1);
  if ((v21 & 4) != 0) {
    uint64_t v22 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v22 = *(long long **)a2;
  }
  uint64_t v23 = *((void *)a3 + 1);
  if ((v23 & 4) != 0) {
    uint64_t v24 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v24 = *(void *)a3;
  }
  long long v25 = *(_OWORD *)(v24 + 16);
  long long v40 = *(_OWORD *)v24;
  long long v41 = v25;
  uint64_t v26 = *(void *)(v24 + 32);
  uint64_t v42 = v26;
  if (v26)
  {
    uint64_t v27 = (atomic_ullong *)(v26 - 16);
    if (*((void *)&v41 + 1)) {
      uint64_t v27 = (atomic_ullong *)*((void *)&v41 + 1);
    }
    atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = sub_216FF04A4(a1, v22, (uint64_t)&v40, a4, (char **)a5);
  if (v28) {
    sub_216900A24(a3, (uint64_t)&v40);
  }
  sub_2168F83DC((uint64_t)&v40);
  return v28;
}

void sub_216FEB220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FEB288(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v41 = "usdSkel/animMapper.cpp";
    *((void *)&v41 + 1) = "_UntypedRemap";
    *(void *)&long long v42 = 179;
    *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_2168FFE70(a3) & 1) == 0)
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 188;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      int v12 = v40;
      uint64_t v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v39;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v38 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v40 < 0) {
        operator delete(v39[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    sub_2168FFEA8(a3, (uint64_t)&v41);
    sub_2168F83DC((uint64_t)&v41);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_21694D72C(a5))
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 199;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
      LOBYTE(v43) = 0;
      long long v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0) {
        long long v30 = (void **)v39[0];
      }
      int v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C780, v31, v32);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0) {
        long long v35 = (const char *)TypeName;
      }
      else {
        long long v35 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      uint64_t v21 = (__n128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a5);
    else {
      uint64_t v21 = *(__n128 **)a5;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *((void *)a2 + 1);
  if ((v22 & 4) != 0) {
    uint64_t v23 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v23 = *(long long **)a2;
  }
  uint64_t v24 = *((void *)a3 + 1);
  if ((v24 & 4) != 0) {
    uint64_t v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v25 = *(void *)a3;
  }
  long long v26 = *(_OWORD *)(v25 + 16);
  long long v41 = *(_OWORD *)v25;
  long long v42 = v26;
  uint64_t v27 = *(void *)(v25 + 32);
  uint64_t v43 = v27;
  if (v27)
  {
    uint64_t v28 = (atomic_ullong *)(v27 - 16);
    if (*((void *)&v42 + 1)) {
      uint64_t v28 = (atomic_ullong *)*((void *)&v42 + 1);
    }
    atomic_fetch_add_explicit(v28, 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = sub_216FF071C(a1, v23, (uint64_t)&v41, a4, v21);
  if (v29) {
    sub_2168FFEA8(a3, (uint64_t)&v41);
  }
  sub_2168F83DC((uint64_t)&v41);
  return v29;
}

void sub_216FEB55C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FEB5C4(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (!a3)
  {
    *(void *)&long long v41 = "usdSkel/animMapper.cpp";
    *((void *)&v41 + 1) = "_UntypedRemap";
    *(void *)&long long v42 = 179;
    *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, VtV"
                            "alue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
    LOBYTE(v43) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' pointer is null.");
    return 0;
  }
  if (*((void *)a3 + 1))
  {
    if ((sub_2169015F0(a3) & 1) == 0)
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 188;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
      LOBYTE(v43) = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v10, v11, (uint64_t)v39);
      int v12 = v40;
      uint64_t v13 = (void **)v39[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v14, v15, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v16 = v39;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v38 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Type of 'target' [%s] did not match the type of 'source' [%s].", (const char *)v16, (const char *)v17);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      if (v40 < 0) {
        operator delete(v39[0]);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    sub_216901628(a3, (uint64_t)&v41);
    sub_2168F83DC((uint64_t)&v41);
  }
  if (*((void *)a5 + 1))
  {
    if (!sub_21694B764(a5))
    {
      *(void *)&long long v41 = "usdSkel/animMapper.cpp";
      *((void *)&v41 + 1) = "_UntypedRemap";
      *(void *)&long long v42 = 199;
      *((void *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_UntypedRemap(const VtValue &, V"
                              "tValue *, int, const VtValue &) const [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
      LOBYTE(v43) = 0;
      long long v30 = v39;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a5, v18, v19, (uint64_t)v39);
      if (v40 < 0) {
        long long v30 = (void **)v39[0];
      }
      int v33 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C770, v31, v32);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v33);
      if (*(char *)(TypeName + 23) >= 0) {
        long long v35 = (const char *)TypeName;
      }
      else {
        long long v35 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected type [%s] for defaultValue: expecting '%s'.", (const char *)v30, v35);
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)a5 + 1);
    if ((v20 & 4) != 0) {
      uint64_t v21 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                               + 168))(a5);
    else {
      uint64_t v21 = *(long long **)a5;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *((void *)a2 + 1);
  if ((v22 & 4) != 0) {
    uint64_t v23 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                             + 168))(a2);
  else {
    uint64_t v23 = *(long long **)a2;
  }
  uint64_t v24 = *((void *)a3 + 1);
  if ((v24 & 4) != 0) {
    uint64_t v25 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
  }
  else {
    uint64_t v25 = *(void *)a3;
  }
  long long v26 = *(_OWORD *)(v25 + 16);
  long long v41 = *(_OWORD *)v25;
  long long v42 = v26;
  uint64_t v27 = *(void *)(v25 + 32);
  uint64_t v43 = v27;
  if (v27)
  {
    uint64_t v28 = (atomic_ullong *)(v27 - 16);
    if (*((void *)&v42 + 1)) {
      uint64_t v28 = (atomic_ullong *)*((void *)&v42 + 1);
    }
    atomic_fetch_add_explicit(v28, 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = sub_216FF099C(a1, v23, (uint64_t)&v41, a4, v21);
  if (v29) {
    sub_216901628(a3, (uint64_t)&v41);
  }
  sub_2168F83DC((uint64_t)&v41);
  return v29;
}

void sub_216FEB898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::operator==(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2
    && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56))
  {
    return pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==(a1 + 16, a2 + 16);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_216FEB944(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  if (!a3)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    uint64_t v29 = "Remap";
    uint64_t v30 = 204;
    unint64_t v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<BOOL>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    uint64_t v29 = "Remap";
    uint64_t v30 = 209;
    unint64_t v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<BOOL>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C42CBC(a3, (long long *)a2);
  }
  else
  {
    if (a5) {
      BOOL v13 = *a5 != 0;
    }
    else {
      BOOL v13 = 0;
    }
    LOBYTE(v28) = v13;
    sub_216FEBB40((unint64_t *)a3, v11, &v28);
    int v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          size_t v26 = *(void *)a2;
        }
        else {
          size_t v26 = (v9 - a1[1]) * v10;
        }
        uint64_t v27 = *(const void **)(a2 + 32);
        sub_2169AAF5C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26) {
          memmove((void *)(*(void *)(a3 + 32) + a1[1] * v10), v27, v26);
        }
      }
      else
      {
        uint64_t v18 = *(void *)(a2 + 32);
        sub_2169AAF5C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v19 = *(void *)a2 / v10;
        }
        else {
          unint64_t v19 = a1[2];
        }
        if (v19)
        {
          uint64_t v20 = 0;
          uint64_t v21 = *(void *)(a3 + 32);
          uint64_t v22 = (unsigned int *)a1[6];
          do
          {
            unsigned int v24 = *v22++;
            unint64_t v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(void *)a3 > v23 && v5 != 0) {
              memmove((void *)(v21 + (int)(v23 * v5)), (const void *)(v18 + v20), v5);
            }
            v20 += v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_216FEBB40(unint64_t *a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v6 = *a1;
  char v11 = 0;
  int v12 = &v11;
  sub_2169AAD2C(a1, a2, &v12);
  sub_2169AAF5C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v9 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v10 = (unsigned char *)(a1[4] + v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_216FEBBB8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  if (!a3)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    uint64_t v29 = "Remap";
    uint64_t v30 = 204;
    unint64_t v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    uint64_t v29 = "Remap";
    uint64_t v30 = 209;
    unint64_t v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C430B8(a3, (long long *)a2);
  }
  else
  {
    if (a5) {
      char v13 = *a5;
    }
    else {
      char v13 = 0;
    }
    LOBYTE(v28) = v13;
    sub_216FEBDAC((unint64_t *)a3, v11, &v28);
    int v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          size_t v26 = *(void *)a2;
        }
        else {
          size_t v26 = (v9 - a1[1]) * v10;
        }
        uint64_t v27 = *(const void **)(a2 + 32);
        sub_216908624((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26) {
          memmove((void *)(*(void *)(a3 + 32) + a1[1] * v10), v27, v26);
        }
      }
      else
      {
        uint64_t v18 = *(void *)(a2 + 32);
        sub_216908624((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v19 = *(void *)a2 / v10;
        }
        else {
          unint64_t v19 = a1[2];
        }
        if (v19)
        {
          uint64_t v20 = 0;
          uint64_t v21 = *(void *)(a3 + 32);
          uint64_t v22 = (unsigned int *)a1[6];
          do
          {
            unsigned int v24 = *v22++;
            unint64_t v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(void *)a3 > v23 && v5 != 0) {
              memmove((void *)(v21 + (int)(v23 * v5)), (const void *)(v18 + v20), v5);
            }
            v20 += v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_216FEBDAC(unint64_t *a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v6 = *a1;
  char v11 = 0;
  int v12 = &v11;
  sub_2169083F4(a1, a2, &v12);
  sub_216908624((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v9 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v10 = (unsigned char *)(a1[4] + v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_216FEBE24(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (!a3)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    uint64_t v29 = "Remap";
    uint64_t v30 = 204;
    unint64_t v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<int>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    uint64_t v29 = "Remap";
    uint64_t v30 = 209;
    unint64_t v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<int>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_2169DCE38(a3, a2);
  }
  else
  {
    if (a5) {
      int v13 = *a5;
    }
    else {
      int v13 = 0;
    }
    LODWORD(v28) = v13;
    sub_216FEC02C((unint64_t *)a3, v11, &v28);
    int v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v26 = *(void *)a2;
        }
        else {
          uint64_t v26 = (v9 - a1[1]) * v10;
        }
        uint64_t v27 = (const void *)*((void *)a2 + 4);
        sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26) {
          memmove((void *)(*(void *)(a3 + 32) + 4 * a1[1] * v10), v27, 4 * v26);
        }
      }
      else
      {
        uint64_t v18 = (char *)*((void *)a2 + 4);
        sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v19 = *(void *)a2 / v10;
        }
        else {
          unint64_t v19 = a1[2];
        }
        if (v19)
        {
          uint64_t v20 = 0;
          uint64_t v21 = *(void *)(a3 + 32);
          uint64_t v22 = (unsigned int *)a1[6];
          do
          {
            unsigned int v24 = *v22++;
            unint64_t v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(void *)a3 > v23 && v5 != 0) {
              memmove((void *)(v21 + 4 * (int)(v23 * v5)), v18, 4 * v10);
            }
            v20 += v5;
            v18 += 4 * v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_216FEC02C(unint64_t *a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6 = *a1;
  int v11 = 0;
  int v12 = &v11;
  sub_216907A0C(a1, a2, &v12);
  sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v9 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v10 = (_DWORD *)(a1[4] + 4 * v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_216FEC0A4(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (!a3)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    uint64_t v29 = "Remap";
    uint64_t v30 = 204;
    unint64_t v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    uint64_t v29 = "Remap";
    uint64_t v30 = 209;
    unint64_t v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_2169DE964(a3, a2);
  }
  else
  {
    if (a5) {
      int v13 = *a5;
    }
    else {
      int v13 = 0;
    }
    LODWORD(v28) = v13;
    sub_216FEC2AC((unint64_t *)a3, v11, &v28);
    int v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v26 = *(void *)a2;
        }
        else {
          uint64_t v26 = (v9 - a1[1]) * v10;
        }
        uint64_t v27 = (const void *)*((void *)a2 + 4);
        sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26) {
          memmove((void *)(*(void *)(a3 + 32) + 4 * a1[1] * v10), v27, 4 * v26);
        }
      }
      else
      {
        uint64_t v18 = (char *)*((void *)a2 + 4);
        sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v19 = *(void *)a2 / v10;
        }
        else {
          unint64_t v19 = a1[2];
        }
        if (v19)
        {
          uint64_t v20 = 0;
          uint64_t v21 = *(void *)(a3 + 32);
          uint64_t v22 = (unsigned int *)a1[6];
          do
          {
            unsigned int v24 = *v22++;
            unint64_t v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(void *)a3 > v23 && v5 != 0) {
              memmove((void *)(v21 + 4 * (int)(v23 * v5)), v18, 4 * v10);
            }
            v20 += v5;
            v18 += 4 * v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_216FEC2AC(unint64_t *a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6 = *a1;
  int v11 = 0;
  int v12 = &v11;
  sub_216906E30(a1, a2, &v12);
  sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v9 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v10 = (_DWORD *)(a1[4] + 4 * v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_216FEC324(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, char **a5)
{
  if (!a3)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    uint64_t v29 = "Remap";
    uint64_t v30 = 204;
    unint64_t v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<long long>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    uint64_t v29 = "Remap";
    uint64_t v30 = 209;
    unint64_t v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<long long>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_2169DDD0C(a3, a2);
  }
  else
  {
    if (a5) {
      int v13 = *a5;
    }
    else {
      int v13 = 0;
    }
    uint64_t v28 = v13;
    sub_216FEC528((unint64_t *)a3, v11, &v28);
    int v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v26 = *(void *)a2;
        }
        else {
          uint64_t v26 = (v9 - a1[1]) * v10;
        }
        uint64_t v27 = (const void *)*((void *)a2 + 4);
        sub_2169AE038((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26) {
          memmove((void *)(*(void *)(a3 + 32) + 8 * a1[1] * v10), v27, 8 * v26);
        }
      }
      else
      {
        uint64_t v18 = *((void *)a2 + 4);
        sub_2169AE038((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v19 = *(void *)a2 / v10;
        }
        else {
          unint64_t v19 = a1[2];
        }
        if (v19)
        {
          uint64_t v20 = 0;
          uint64_t v21 = *(void *)(a3 + 32);
          uint64_t v22 = (unsigned int *)a1[6];
          do
          {
            unsigned int v24 = *v22++;
            unint64_t v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(void *)a3 > v23 && v5 != 0) {
              memmove((void *)(v21 + 8 * (int)(v23 * v5)), (const void *)(v18 + 8 * v20), 8 * v5);
            }
            v20 += v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_216FEC528(unint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *a1;
  uint64_t v11 = 0;
  int v12 = &v11;
  sub_2169ADDD0(a1, a2, &v12);
  sub_2169AE038((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v9 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v10 = (void *)(a1[4] + 8 * v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_216FEC59C(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, char **a5)
{
  if (!a3)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    uint64_t v29 = "Remap";
    uint64_t v30 = 204;
    unint64_t v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    uint64_t v29 = "Remap";
    uint64_t v30 = 209;
    unint64_t v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_2169DF578(a3, a2);
  }
  else
  {
    if (a5) {
      int v13 = *a5;
    }
    else {
      int v13 = 0;
    }
    uint64_t v28 = v13;
    sub_216FEC7A0((unint64_t *)a3, v11, &v28);
    int v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v26 = *(void *)a2;
        }
        else {
          uint64_t v26 = (v9 - a1[1]) * v10;
        }
        uint64_t v27 = (const void *)*((void *)a2 + 4);
        sub_2169AF080((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26) {
          memmove((void *)(*(void *)(a3 + 32) + 8 * a1[1] * v10), v27, 8 * v26);
        }
      }
      else
      {
        uint64_t v18 = *((void *)a2 + 4);
        sub_2169AF080((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v19 = *(void *)a2 / v10;
        }
        else {
          unint64_t v19 = a1[2];
        }
        if (v19)
        {
          uint64_t v20 = 0;
          uint64_t v21 = *(void *)(a3 + 32);
          uint64_t v22 = (unsigned int *)a1[6];
          do
          {
            unsigned int v24 = *v22++;
            unint64_t v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(void *)a3 > v23 && v5 != 0) {
              memmove((void *)(v21 + 8 * (int)(v23 * v5)), (const void *)(v18 + 8 * v20), 8 * v5);
            }
            v20 += v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_216FEC7A0(unint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *a1;
  uint64_t v11 = 0;
  int v12 = &v11;
  sub_2169AEE18(a1, a2, &v12);
  sub_2169AF080((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v9 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v10 = (void *)(a1[4] + 8 * v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_216FEC814(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, __int16 *a5)
{
  if (!a3)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    uint64_t v29 = "Remap";
    uint64_t v30 = 204;
    unint64_t v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::pxr_half::half>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    uint64_t v29 = "Remap";
    uint64_t v30 = 209;
    unint64_t v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::pxr_half::half>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C441D0(a3, a2);
  }
  else
  {
    if (a5) {
      __int16 v13 = *a5;
    }
    else {
      __int16 v13 = 0;
    }
    LOWORD(v28) = v13;
    sub_216FECA1C((unint64_t *)a3, v11, &v28);
    int v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v26 = *(void *)a2;
        }
        else {
          uint64_t v26 = (v9 - a1[1]) * v10;
        }
        uint64_t v27 = (const void *)*((void *)a2 + 4);
        sub_2168F930C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26) {
          memmove((void *)(*(void *)(a3 + 32) + 2 * a1[1] * v10), v27, 2 * v26);
        }
      }
      else
      {
        uint64_t v18 = (char *)*((void *)a2 + 4);
        sub_2168F930C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v19 = *(void *)a2 / v10;
        }
        else {
          unint64_t v19 = a1[2];
        }
        if (v19)
        {
          uint64_t v20 = 0;
          uint64_t v21 = *(void *)(a3 + 32);
          uint64_t v22 = (unsigned int *)a1[6];
          do
          {
            unsigned int v24 = *v22++;
            unint64_t v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(void *)a3 > v23 && v5 != 0) {
              memmove((void *)(v21 + 2 * (int)(v23 * v5)), v18, 2 * v10);
            }
            v20 += v5;
            v18 += 2 * v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_216FECA1C(unint64_t *a1, unint64_t a2, _WORD *a3)
{
  unint64_t v6 = *a1;
  __int16 v11 = 0;
  int v12 = &v11;
  sub_2168F90A4(a1, a2, &v12);
  sub_2168F930C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v9 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v10 = (_WORD *)(a1[4] + 2 * v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_216FECA94(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (!a3)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    uint64_t v29 = "Remap";
    uint64_t v30 = 204;
    unint64_t v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    uint64_t v29 = "Remap";
    uint64_t v30 = 209;
    unint64_t v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_2169412D4(a3, a2);
  }
  else
  {
    if (a5) {
      int v13 = *a5;
    }
    else {
      int v13 = 0;
    }
    LODWORD(v28) = v13;
    sub_216FECC9C((unint64_t *)a3, v11, (float *)&v28);
    int v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v26 = *(void *)a2;
        }
        else {
          uint64_t v26 = (v9 - a1[1]) * v10;
        }
        uint64_t v27 = (const void *)*((void *)a2 + 4);
        sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26) {
          memmove((void *)(*(void *)(a3 + 32) + 4 * a1[1] * v10), v27, 4 * v26);
        }
      }
      else
      {
        uint64_t v18 = (char *)*((void *)a2 + 4);
        sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v19 = *(void *)a2 / v10;
        }
        else {
          unint64_t v19 = a1[2];
        }
        if (v19)
        {
          uint64_t v20 = 0;
          uint64_t v21 = *(void *)(a3 + 32);
          uint64_t v22 = (unsigned int *)a1[6];
          do
          {
            unsigned int v24 = *v22++;
            unint64_t v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(void *)a3 > v23 && v5 != 0) {
              memmove((void *)(v21 + 4 * (int)(v23 * v5)), v18, 4 * v10);
            }
            v20 += v5;
            v18 += 4 * v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

float sub_216FECC9C(unint64_t *a1, unint64_t a2, float *a3)
{
  unint64_t v6 = *a1;
  int v12 = 0;
  int v13 = &v12;
  sub_2168F84A8(a1, a2, &v13);
  sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v10 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v11 = (_DWORD *)(a1[4] + 4 * v6);
    do
    {
      float result = *a3;
      *v11++ = *(_DWORD *)a3;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_216FECD14(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, char **a5)
{
  if (!a3)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    uint64_t v29 = "Remap";
    uint64_t v30 = 204;
    unint64_t v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    uint64_t v29 = "Remap";
    uint64_t v30 = 209;
    unint64_t v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_21693E46C(a3, a2);
  }
  else
  {
    if (a5) {
      int v13 = *a5;
    }
    else {
      int v13 = 0;
    }
    uint64_t v28 = v13;
    sub_216FECF18((unint64_t *)a3, v11, (double *)&v28);
    int v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v26 = *(void *)a2;
        }
        else {
          uint64_t v26 = (v9 - a1[1]) * v10;
        }
        uint64_t v27 = (const void *)*((void *)a2 + 4);
        sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26) {
          memmove((void *)(*(void *)(a3 + 32) + 8 * a1[1] * v10), v27, 8 * v26);
        }
      }
      else
      {
        uint64_t v18 = *((void *)a2 + 4);
        sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v19 = *(void *)a2 / v10;
        }
        else {
          unint64_t v19 = a1[2];
        }
        if (v19)
        {
          uint64_t v20 = 0;
          uint64_t v21 = *(void *)(a3 + 32);
          uint64_t v22 = (unsigned int *)a1[6];
          do
          {
            unsigned int v24 = *v22++;
            unint64_t v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(void *)a3 > v23 && v5 != 0) {
              memmove((void *)(v21 + 8 * (int)(v23 * v5)), (const void *)(v18 + 8 * v20), 8 * v5);
            }
            v20 += v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

double sub_216FECF18(unint64_t *a1, unint64_t a2, double *a3)
{
  unint64_t v6 = *a1;
  uint64_t v12 = 0;
  int v13 = &v12;
  sub_2168F9B94(a1, a2, &v13);
  sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v10 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v11 = (void *)(a1[4] + 8 * v6);
    do
    {
      double result = *a3;
      *v11++ = *(void *)a3;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_216FECF8C(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, char **a5)
{
  if (!a3)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    uint64_t v29 = "Remap";
    uint64_t v30 = 204;
    unint64_t v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::SdfTimeCode>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    uint64_t v29 = "Remap";
    uint64_t v30 = 209;
    unint64_t v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::SdfTimeCode>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C44A4C(a3, a2);
  }
  else
  {
    if (a5) {
      int v13 = *a5;
    }
    else {
      int v13 = 0;
    }
    uint64_t v28 = v13;
    sub_216FED190((unint64_t *)a3, v11, &v28);
    int v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v26 = *(void *)a2;
        }
        else {
          uint64_t v26 = (v9 - a1[1]) * v10;
        }
        uint64_t v27 = (const void *)*((void *)a2 + 4);
        sub_2169B1440((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26) {
          memmove((void *)(*(void *)(a3 + 32) + 8 * a1[1] * v10), v27, 8 * v26);
        }
      }
      else
      {
        uint64_t v18 = *((void *)a2 + 4);
        sub_2169B1440((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v19 = *(void *)a2 / v10;
        }
        else {
          unint64_t v19 = a1[2];
        }
        if (v19)
        {
          uint64_t v20 = 0;
          uint64_t v21 = *(void *)(a3 + 32);
          uint64_t v22 = (unsigned int *)a1[6];
          do
          {
            unsigned int v24 = *v22++;
            unint64_t v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(void *)a3 > v23 && v5 != 0) {
              memmove((void *)(v21 + 8 * (int)(v23 * v5)), (const void *)(v18 + 8 * v20), 8 * v5);
            }
            v20 += v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_216FED190(unint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *a1;
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  sub_2169B11D8(a1, a2, &v12);
  sub_2169B1440((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v9 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v10 = (void *)(a1[4] + 8 * v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_216FED204(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdSkel/animMapper.h";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"Remap";
    __p.__r_.__value_.__r.__words[2] = 204;
    uint64_t v28 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<std::string>]";
    char v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdSkel/animMapper.h";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"Remap";
    __p.__r_.__value_.__r.__words[2] = 209;
    uint64_t v28 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<std::string>]";
    char v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_2169E0154(a3, a2);
  }
  else
  {
    if (a5)
    {
      if (*(char *)(a5 + 23) < 0) {
        sub_216778F24(&__p, *(void **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __p = *(std::string *)a5;
      }
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
    }
    sub_216FED458((unint64_t *)a3, v11, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int v16 = *((_DWORD *)a1 + 14);
    if ((v16 & 3) != 0)
    {
      if ((v16 & 8) != 0)
      {
        uint64_t v24 = *(void *)a2;
        if ((v9 - a1[1]) * (unint64_t)v5 < *(void *)a2) {
          uint64_t v24 = (v9 - a1[1]) * v10;
        }
        uint64_t v25 = (std::string *)*((void *)a2 + 4);
        uint64_t v26 = &v25[v24];
        sub_2169B23EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        sub_21680F908(v25, v26, (std::string *)(*(void *)(a3 + 32) + 24 * a1[1] * v10));
      }
      else
      {
        int v17 = (std::string *)*((void *)a2 + 4);
        sub_2169B23EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v18 = *(void *)a2 / v10;
        }
        else {
          unint64_t v18 = a1[2];
        }
        if (v18)
        {
          uint64_t v19 = *(void *)(a3 + 32);
          uint64_t v20 = (unsigned int *)a1[6];
          uint64_t v21 = v5;
          do
          {
            unsigned int v23 = *v20++;
            unint64_t v22 = v23;
            if ((v23 & 0x80000000) == 0 && *(void *)a3 > v22) {
              sub_21680F908(v17, &v17[v21], (std::string *)(v19 + 24 * (int)(v22 * v5)));
            }
            int v17 = (std::string *)((char *)v17 + v21 * 24);
            --v18;
          }
          while (v18);
        }
      }
    }
  }
  return 1;
}

void sub_216FED43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216FED458(unint64_t *a1, unint64_t a2, const std::string *a3)
{
  unint64_t v6 = *a1;
  sub_216CAB6C4(a1, a2);
  sub_2169B23EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  BOOL v9 = a2 > v6;
  unint64_t v10 = a2 - v6;
  if (v9)
  {
    unint64_t v11 = (std::string *)(a1[4] + 24 * v6);
    do
    {
      std::string::operator=(v11++, a3);
      --v10;
    }
    while (v10);
  }
}

uint64_t sub_216FED4C4(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, char **a5)
{
  if (!a3)
  {
    int v34 = (atomic_uint *)"usdSkel/animMapper.h";
    long long v35 = "Remap";
    uint64_t v36 = 204;
    char v37 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::TfToken>]";
    char v38 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    int v34 = (atomic_uint *)"usdSkel/animMapper.h";
    long long v35 = "Remap";
    uint64_t v36 = 209;
    char v37 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::TfToken>]";
    char v38 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v34, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_2169E06EC(a3, a2);
  }
  else
  {
    if (a5)
    {
      int v13 = *a5;
      int v34 = (atomic_uint *)v13;
      if ((v13 & 7) != 0)
      {
        uint64_t v14 = (atomic_uint *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit(v14, 2u, memory_order_relaxed) & 1) == 0) {
          int v34 = v14;
        }
      }
    }
    else
    {
      int v34 = 0;
    }
    sub_216FED75C((uint64_t *)a3, v11, &v34);
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    int v18 = *((_DWORD *)a1 + 14);
    if ((v18 & 3) != 0)
    {
      if ((v18 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v28 = *(void *)a2;
        }
        else {
          uint64_t v28 = (v9 - a1[1]) * v10;
        }
        char v29 = (void *)*((void *)a2 + 4);
        sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v16, v17);
        if (v28)
        {
          uint64_t v30 = (void *)(*(void *)(a3 + 32) + 8 * a1[1] * v10);
          uint64_t v31 = 8 * v28;
          do
          {
            sub_2168D2318(v30++, v29++);
            v31 -= 8;
          }
          while (v31);
        }
      }
      else
      {
        uint64_t v33 = *((void *)a2 + 4);
        sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v16, v17);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v19 = *(void *)a2 / v10;
        }
        else {
          unint64_t v19 = a1[2];
        }
        if (v19)
        {
          uint64_t v20 = 0;
          uint64_t v32 = *(void *)(a3 + 32);
          uint64_t v21 = a1[6];
          do
          {
            unint64_t v22 = *(unsigned int *)(v21 + 4 * v20);
            if ((v22 & 0x80000000) == 0)
            {
              uint64_t v23 = v20 * v5;
              if (*(void *)a3 > v22 && v23 != v5 + v20 * v5)
              {
                uint64_t v25 = (void *)(v32 + 8 * (int)(v22 * v5));
                uint64_t v26 = (void *)(v33 + 8 * v23);
                uint64_t v27 = 8 * v5;
                do
                {
                  sub_2168D2318(v25++, v26++);
                  v27 -= 8;
                }
                while (v27);
              }
            }
            ++v20;
          }
          while (v20 != v19);
        }
      }
    }
  }
  return 1;
}

void sub_216FED75C(uint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *a1;
  sub_216CAD794(a1, a2);
  sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  BOOL v9 = a2 > v6;
  unint64_t v10 = a2 - v6;
  if (v9)
  {
    unint64_t v11 = (void *)(a1[4] + 8 * v6);
    do
    {
      sub_2168D2318(v11++, a3);
      --v10;
    }
    while (v10);
  }
}

uint64_t sub_216FED7C4(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdSkel/animMapper.h";
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)"Remap";
    __dst.__r_.__value_.__r.__words[2] = 204;
    *(void *)&long long __p = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, in"
                      "t, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::Vt"
                      "Array<pxrInternal__aapl__pxrReserved__::SdfAssetPath>]";
    BYTE8(__p) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdSkel/animMapper.h";
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)"Remap";
    __dst.__r_.__value_.__r.__words[2] = 209;
    *(void *)&long long __p = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, in"
                      "t, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::Vt"
                      "Array<pxrInternal__aapl__pxrReserved__::SdfAssetPath>]";
    BYTE8(__p) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__dst, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C45344(a3, a2);
  }
  else
  {
    if (a5)
    {
      if (*(char *)(a5 + 23) < 0) {
        sub_216778F24(&__dst, *(void **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __dst = *(std::string *)a5;
      }
      if (*(char *)(a5 + 47) < 0)
      {
        sub_216778F24(&__p, *(void **)(a5 + 24), *(void *)(a5 + 32));
      }
      else
      {
        long long __p = *(_OWORD *)(a5 + 24);
        uint64_t v30 = *(void *)(a5 + 40);
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&__dst);
    }
    sub_216FEDA74((unint64_t *)a3, v11, &__dst);
    if (SHIBYTE(v30) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    int v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        uint64_t v25 = *(void *)a2;
        if ((v9 - a1[1]) * (unint64_t)v5 < *(void *)a2) {
          uint64_t v25 = (v9 - a1[1]) * v10;
        }
        uint64_t v26 = (std::string *)*((void *)a2 + 4);
        uint64_t v27 = &v26[2 * v25];
        sub_2169B49FC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        sub_216CF5990((int)&__dst, v26, v27, (std::string *)(*(void *)(a3 + 32) + 48 * a1[1] * v10));
      }
      else
      {
        int v18 = (std::string *)*((void *)a2 + 4);
        sub_2169B49FC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v19 = *(void *)a2 / v10;
        }
        else {
          unint64_t v19 = a1[2];
        }
        if (v19)
        {
          uint64_t v20 = *(void *)(a3 + 32);
          uint64_t v21 = (unsigned int *)a1[6];
          uint64_t v22 = 2 * v5;
          do
          {
            unsigned int v24 = *v21++;
            unint64_t v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(void *)a3 > v23) {
              sub_216CF5990((int)&__dst, v18, &v18[v22], (std::string *)(v20 + 48 * (int)(v23 * v5)));
            }
            int v18 = (std::string *)((char *)v18 + v22 * 24);
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_216FEDA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216FEDA74(unint64_t *a1, unint64_t a2, const std::string *a3)
{
  unint64_t v6 = *a1;
  sub_216CAF32C(a1, a2);
  sub_2169B49FC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v9 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v10 = (std::string *)(a1[4] + 48 * v6);
    do
    {
      std::string::operator=(v10, a3);
      std::string::operator=(v10 + 1, a3 + 1);
      v10 += 2;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_216FEDAF8(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if (!a3)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    char v29 = "Remap";
    uint64_t v30 = 204;
    uint64_t v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::SdfOpaqueValue>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v4 = a4;
  if ((int)a4 <= 0)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    char v29 = "Remap";
    uint64_t v30 = 209;
    uint64_t v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::SdfOpaqueValue>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v8 = *a1;
  unint64_t v9 = a4;
  unint64_t v10 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v10)
  {
    sub_216C4571C(a3, a2);
  }
  else
  {
    uint64_t v28 = &v33;
    sub_2169B521C((unint64_t *)a3, v10);
    sub_2169B5370((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v12, v13);
    int v16 = *((_DWORD *)a1 + 14);
    if ((v16 & 3) != 0)
    {
      if ((v16 & 8) != 0)
      {
        if ((v8 - a1[1]) * (unint64_t)v4 >= *(void *)a2) {
          uint64_t v26 = *(void *)a2;
        }
        else {
          uint64_t v26 = (v8 - a1[1]) * v9;
        }
        uint64_t v27 = (const void *)*((void *)a2 + 4);
        sub_2169B5370((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (v26) {
          memmove((void *)(*(void *)(a3 + 32) + a1[1] * v9), v27, v26 - 1);
        }
      }
      else
      {
        uint64_t v17 = *((void *)a2 + 4);
        sub_2169B5370((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (a1[2] >= *(void *)a2 / (unint64_t)v4) {
          unint64_t v18 = *(void *)a2 / v9;
        }
        else {
          unint64_t v18 = a1[2];
        }
        if (v18)
        {
          uint64_t v19 = 0;
          uint64_t v20 = *(void *)(a3 + 32);
          uint64_t v21 = (unsigned int *)a1[6];
          do
          {
            unsigned int v23 = *v21++;
            unint64_t v22 = v23;
            if ((v23 & 0x80000000) == 0 && *(void *)a3 > v22 && v4 != 0) {
              memmove((void *)(v20 + (int)(v22 * v4)), (const void *)(v17 + v19), v4 - 1);
            }
            v19 += v4;
            --v18;
          }
          while (v18);
        }
      }
    }
  }
  return 1;
}

uint64_t sub_216FEDCF4(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    v27[0] = "usdSkel/animMapper.h";
    v27[1] = "Remap";
    *(void *)&long long v28 = 204;
    *((void *)&v28 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>]";
    LOBYTE(v29) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v27, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    v27[0] = "usdSkel/animMapper.h";
    v27[1] = "Remap";
    *(void *)&long long v28 = 209;
    *((void *)&v28 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>]";
    LOBYTE(v29) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v27, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C45C64(a3, a2);
  }
  else
  {
    if (a5)
    {
      sub_2169B70E4(v27, a5);
    }
    else
    {
      *(_OWORD *)long long __p = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      *(_OWORD *)uint64_t v27 = 0u;
      long long v28 = 0u;
    }
    sub_216FEDF68((unint64_t *)a3, v11, (const std::string *)v27);
    if (SHIBYTE(v32) < 0) {
      operator delete(__p[1]);
    }
    char v33 = (void **)&v30;
    sub_2169B81EC(&v33);
    char v33 = (void **)&v28 + 1;
    sub_2169B74B8(&v33);
    if (v27[0])
    {
      v27[1] = v27[0];
      operator delete(v27[0]);
    }
    int v16 = *((_DWORD *)a1 + 14);
    if ((v16 & 3) != 0)
    {
      if ((v16 & 8) != 0)
      {
        uint64_t v24 = *(void *)a2;
        if ((v9 - a1[1]) * (unint64_t)v5 < *(void *)a2) {
          uint64_t v24 = (v9 - a1[1]) * v10;
        }
        uint64_t v25 = (const std::string *)*((void *)a2 + 4);
        uint64_t v26 = &v25[4 * v24];
        sub_2169B8E9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        sub_216FEE024((int)v27, v25, v26, (std::string *)(*(void *)(a3 + 32) + 96 * a1[1] * v10));
      }
      else
      {
        uint64_t v17 = (const std::string *)*((void *)a2 + 4);
        sub_2169B8E9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v18 = *(void *)a2 / v10;
        }
        else {
          unint64_t v18 = a1[2];
        }
        if (v18)
        {
          uint64_t v19 = *(void *)(a3 + 32);
          uint64_t v20 = (unsigned int *)a1[6];
          uint64_t v21 = 4 * v5;
          do
          {
            unsigned int v23 = *v20++;
            unint64_t v22 = v23;
            if ((v23 & 0x80000000) == 0 && *(void *)a3 > v22) {
              sub_216FEE024((int)v27, v17, &v17[v21], (std::string *)(v19 + 96 * (int)(v22 * v5)));
            }
            uint64_t v17 = (const std::string *)((char *)v17 + v21 * 24);
            --v18;
          }
          while (v18);
        }
      }
    }
  }
  return 1;
}

void sub_216FEDF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2169B5940((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216FEDF68(unint64_t *a1, unint64_t a2, const std::string *a3)
{
  unint64_t v6 = *a1;
  sub_216CF0988(a1, a2);
  sub_2169B8E9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v9 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v10 = (std::string *)(a1[4] + 96 * v6);
    do
    {
      if (v10 != a3)
      {
        sub_216825D78((char *)v10, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_, (uint64_t)(a3->__r_.__value_.__l.__size_ - a3->__r_.__value_.__r.__words[0]) >> 2);
        sub_216B01A9C((uint64_t)&v10[1], (uint64_t)a3[1].__r_.__value_.__l.__data_, a3[1].__r_.__value_.__l.__size_, (uint64_t)(a3[1].__r_.__value_.__l.__size_ - a3[1].__r_.__value_.__r.__words[0]) >> 5);
        sub_216B01C6C((uint64_t)&v10[2], (uint64_t)a3[2].__r_.__value_.__l.__data_, a3[2].__r_.__value_.__l.__size_, (uint64_t)(a3[2].__r_.__value_.__l.__size_ - a3[2].__r_.__value_.__r.__words[0]) >> 6);
      }
      std::string::operator=(v10 + 3, a3 + 3);
      v10 += 4;
      --v9;
    }
    while (v9);
  }
}

const std::string *sub_216FEE024(int a1, const std::string *a2, const std::string *a3, std::string *a4)
{
  unsigned int v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != a4)
      {
        sub_216825D78((char *)a4, v5->__r_.__value_.__l.__data_, v5->__r_.__value_.__l.__size_, (uint64_t)(v5->__r_.__value_.__l.__size_ - v5->__r_.__value_.__r.__words[0]) >> 2);
        sub_216B01A9C((uint64_t)&a4[1], (uint64_t)v5[1].__r_.__value_.__l.__data_, v5[1].__r_.__value_.__l.__size_, (uint64_t)(v5[1].__r_.__value_.__l.__size_ - v5[1].__r_.__value_.__r.__words[0]) >> 5);
        sub_216B01C6C((uint64_t)&a4[2], (uint64_t)v5[2].__r_.__value_.__l.__data_, v5[2].__r_.__value_.__l.__size_, (uint64_t)(v5[2].__r_.__value_.__l.__size_ - v5[2].__r_.__value_.__r.__words[0]) >> 6);
      }
      std::string::operator=(a4 + 3, v5 + 3);
      v5 += 4;
      a4 += 4;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_216FEE0C8(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, long long *a5)
{
  if (!a3)
  {
    *(void *)&long long v28 = "usdSkel/animMapper.h";
    *((void *)&v28 + 1) = "Remap";
    *(void *)&long long v29 = 204;
    *((void *)&v29 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>]";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    *(void *)&long long v28 = "usdSkel/animMapper.h";
    *((void *)&v28 + 1) = "Remap";
    *(void *)&long long v29 = 209;
    *((void *)&v29 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>]";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C4600C(a3, a2);
  }
  else
  {
    if (a5)
    {
      long long v13 = a5[1];
      long long v28 = *a5;
      long long v29 = v13;
    }
    else
    {
      long long v28 = 0u;
      long long v29 = 0u;
    }
    sub_216FEE2D8((unint64_t *)a3, v11, (uint64_t)&v28);
    int v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v26 = *(void *)a2;
        }
        else {
          uint64_t v26 = (v9 - a1[1]) * v10;
        }
        uint64_t v27 = (const void *)*((void *)a2 + 4);
        sub_2169C0A9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26) {
          memmove((void *)(*(void *)(a3 + 32) + 32 * a1[1] * v10), v27, 32 * v26);
        }
      }
      else
      {
        unint64_t v18 = (char *)*((void *)a2 + 4);
        sub_2169C0A9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v19 = *(void *)a2 / v10;
        }
        else {
          unint64_t v19 = a1[2];
        }
        if (v19)
        {
          uint64_t v20 = 0;
          uint64_t v21 = *(void *)(a3 + 32);
          unint64_t v22 = (unsigned int *)a1[6];
          do
          {
            unsigned int v24 = *v22++;
            unint64_t v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(void *)a3 > v23 && v5 != 0) {
              memmove((void *)(v21 + 32 * (int)(v23 * v5)), v18, 32 * v10);
            }
            v20 += v5;
            v18 += 32 * v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

__n128 sub_216FEE2D8(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = *a1;
  memset(v13, 0, sizeof(v13));
  uint64_t v14 = v13;
  sub_2169C0824(a1, a2, &v14);
  sub_2169C0A9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v10 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v11 = (_OWORD *)(a1[4] + 32 * v6);
    do
    {
      __n128 result = *(__n128 *)a3;
      long long v12 = *(_OWORD *)(a3 + 16);
      *unint64_t v11 = *(_OWORD *)a3;
      v11[1] = v12;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_216FEE354(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, long long *a5)
{
  if (!a3)
  {
    *(void *)&long long v29 = "usdSkel/animMapper.h";
    *((void *)&v29 + 1) = "Remap";
    *(void *)&long long v30 = 204;
    *((void *)&v30 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>]";
    LOBYTE(v31) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v29, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    *(void *)&long long v29 = "usdSkel/animMapper.h";
    *((void *)&v29 + 1) = "Remap";
    *(void *)&long long v30 = 209;
    *((void *)&v30 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>]";
    LOBYTE(v31) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v29, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C463F4(a3, a2);
  }
  else
  {
    if (a5)
    {
      long long v13 = a5[3];
      long long v31 = a5[2];
      long long v32 = v13;
      uint64_t v33 = *((void *)a5 + 8);
      long long v14 = a5[1];
      long long v29 = *a5;
      long long v30 = v14;
    }
    else
    {
      uint64_t v33 = 0;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
    }
    sub_216FEE588((unint64_t *)a3, v11, (uint64_t)&v29);
    int v18 = *((_DWORD *)a1 + 14);
    if ((v18 & 3) != 0)
    {
      if ((v18 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v27 = *(void *)a2;
        }
        else {
          uint64_t v27 = (v9 - a1[1]) * v10;
        }
        long long v28 = (const void *)*((void *)a2 + 4);
        sub_2169C195C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v16, v17);
        if (v27) {
          memmove((void *)(*(void *)(a3 + 32) + 72 * a1[1] * v10), v28, 72 * v27);
        }
      }
      else
      {
        unint64_t v19 = (char *)*((void *)a2 + 4);
        sub_2169C195C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v16, v17);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v20 = *(void *)a2 / v10;
        }
        else {
          unint64_t v20 = a1[2];
        }
        if (v20)
        {
          uint64_t v21 = 0;
          uint64_t v22 = *(void *)(a3 + 32);
          unint64_t v23 = (unsigned int *)a1[6];
          do
          {
            unsigned int v25 = *v23++;
            unint64_t v24 = v25;
            if ((v25 & 0x80000000) == 0 && *(void *)a3 > v24 && v5 != 0) {
              memmove((void *)(v22 + 72 * (int)(v24 * v5)), v19, 72 * v10);
            }
            v21 += v5;
            v19 += 72 * v5;
            --v20;
          }
          while (v20);
        }
      }
    }
  }
  return 1;
}

__n128 sub_216FEE588(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = *a1;
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  uint64_t v16 = v14;
  sub_2169C162C(a1, a2, (uint64_t *)&v16);
  sub_2169C195C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v10 = a2 - v6;
  if (a2 > v6)
  {
    uint64_t v11 = a1[4] + 72 * v6;
    do
    {
      *(_OWORD *)uint64_t v11 = *(_OWORD *)a3;
      __n128 result = *(__n128 *)(a3 + 16);
      long long v12 = *(_OWORD *)(a3 + 32);
      long long v13 = *(_OWORD *)(a3 + 48);
      *(void *)(v11 + 64) = *(void *)(a3 + 64);
      *(_OWORD *)(v11 + 32) = v12;
      *(_OWORD *)(v11 + 48) = v13;
      *(__n128 *)(v11 + 16) = result;
      v11 += 72;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_216FEE62C(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, char **a5)
{
  if (!a3)
  {
    uint64_t v27 = "usdSkel/animMapper.h";
    long long v28 = "Remap";
    uint64_t v29 = 204;
    long long v30 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfQuath>]";
    char v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    uint64_t v27 = "usdSkel/animMapper.h";
    long long v28 = "Remap";
    uint64_t v29 = 209;
    long long v30 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfQuath>]";
    char v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v27, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C46BD0(a3, a2);
  }
  else
  {
    if (a5) {
      uint64_t v27 = *a5;
    }
    sub_216FEE828((unint64_t *)a3, v11, &v27);
    int v15 = *((_DWORD *)a1 + 14);
    if ((v15 & 3) != 0)
    {
      if ((v15 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v25 = *(void *)a2;
        }
        else {
          uint64_t v25 = (v9 - a1[1]) * v10;
        }
        uint64_t v26 = (const void *)*((void *)a2 + 4);
        sub_216904A70((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v13, v14);
        if (v25) {
          memmove((void *)(*(void *)(a3 + 32) + 8 * a1[1] * v10), v26, 8 * v25);
        }
      }
      else
      {
        uint64_t v16 = *((void *)a2 + 4);
        sub_216904A70((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v13, v14);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v17 = *(void *)a2 / v10;
        }
        else {
          unint64_t v17 = a1[2];
        }
        if (v17)
        {
          uint64_t v18 = 0;
          uint64_t v19 = *(void *)(a3 + 32);
          unint64_t v20 = (unsigned int *)a1[6];
          do
          {
            unsigned int v22 = *v20++;
            unint64_t v21 = v22;
            if ((v22 & 0x80000000) == 0 && *(void *)a3 > v21 && v5 != 0) {
              memmove((void *)(v19 + 8 * (int)(v21 * v5)), (const void *)(v16 + 8 * v18), 8 * v5);
            }
            v18 += v5;
            --v17;
          }
          while (v17);
        }
      }
    }
  }
  return 1;
}

void sub_216FEE828(unint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *a1;
  long long v12 = &v11;
  sub_216904808(a1, a2, &v12);
  sub_216904A70((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v9 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v10 = (void *)(a1[4] + 8 * v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_216FEE89C(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, __n128 *a5)
{
  if (!a3)
  {
    v27.n128_u64[0] = (unint64_t)"usdSkel/animMapper.h";
    v27.n128_u64[1] = (unint64_t)"Remap";
    uint64_t v28 = 204;
    uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfQuatf>]";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    v27.n128_u64[0] = (unint64_t)"usdSkel/animMapper.h";
    v27.n128_u64[1] = (unint64_t)"Remap";
    uint64_t v28 = 209;
    uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfQuatf>]";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v27, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C46FEC(a3, a2);
  }
  else
  {
    if (a5) {
      __n128 v27 = *a5;
    }
    sub_216FEEA9C((unint64_t *)a3, v11, &v27);
    int v15 = *((_DWORD *)a1 + 14);
    if ((v15 & 3) != 0)
    {
      if ((v15 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v25 = *(void *)a2;
        }
        else {
          uint64_t v25 = (v9 - a1[1]) * v10;
        }
        uint64_t v26 = (const void *)*((void *)a2 + 4);
        sub_216903EB4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v13, v14);
        if (v25) {
          memmove((void *)(*(void *)(a3 + 32) + 16 * a1[1] * v10), v26, 16 * v25);
        }
      }
      else
      {
        uint64_t v16 = (char *)*((void *)a2 + 4);
        sub_216903EB4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v13, v14);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v17 = *(void *)a2 / v10;
        }
        else {
          unint64_t v17 = a1[2];
        }
        if (v17)
        {
          uint64_t v18 = 0;
          uint64_t v19 = *(void *)(a3 + 32);
          unint64_t v20 = (unsigned int *)a1[6];
          do
          {
            unsigned int v22 = *v20++;
            unint64_t v21 = v22;
            if ((v22 & 0x80000000) == 0 && *(void *)a3 > v21 && v5 != 0) {
              memmove((void *)(v19 + 16 * (int)(v21 * v5)), v16, 16 * v10);
            }
            v18 += v5;
            v16 += 16 * v5;
            --v17;
          }
          while (v17);
        }
      }
    }
  }
  return 1;
}

__n128 sub_216FEEA9C(unint64_t *a1, unint64_t a2, __n128 *a3)
{
  unint64_t v6 = *a1;
  uint64_t v13 = &v12;
  sub_216903C50(a1, a2, (_OWORD **)&v13);
  sub_216903EB4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v10 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v11 = (__n128 *)(a1[4] + 16 * v6);
    do
    {
      __n128 result = *a3;
      *v11++ = *a3;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_216FEEB10(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, long long *a5)
{
  if (!a3)
  {
    *(void *)&long long v28 = "usdSkel/animMapper.h";
    *((void *)&v28 + 1) = "Remap";
    *(void *)&long long v29 = 204;
    *((void *)&v29 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>]";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    *(void *)&long long v28 = "usdSkel/animMapper.h";
    *((void *)&v28 + 1) = "Remap";
    *(void *)&long long v29 = 209;
    *((void *)&v29 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>]";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C47408(a3, a2);
  }
  else
  {
    if (a5)
    {
      long long v13 = a5[1];
      long long v28 = *a5;
      long long v29 = v13;
    }
    sub_216FEED14((unint64_t *)a3, v11, (uint64_t)&v28);
    int v16 = *((_DWORD *)a1 + 14);
    if ((v16 & 3) != 0)
    {
      if ((v16 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v26 = *(void *)a2;
        }
        else {
          uint64_t v26 = (v9 - a1[1]) * v10;
        }
        __n128 v27 = (const void *)*((void *)a2 + 4);
        sub_21690562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (v26) {
          memmove((void *)(*(void *)(a3 + 32) + 32 * a1[1] * v10), v27, 32 * v26);
        }
      }
      else
      {
        unint64_t v17 = (char *)*((void *)a2 + 4);
        sub_21690562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v18 = *(void *)a2 / v10;
        }
        else {
          unint64_t v18 = a1[2];
        }
        if (v18)
        {
          uint64_t v19 = 0;
          uint64_t v20 = *(void *)(a3 + 32);
          unint64_t v21 = (unsigned int *)a1[6];
          do
          {
            unsigned int v23 = *v21++;
            unint64_t v22 = v23;
            if ((v23 & 0x80000000) == 0 && *(void *)a3 > v22 && v5 != 0) {
              memmove((void *)(v20 + 32 * (int)(v22 * v5)), v17, 32 * v10);
            }
            v19 += v5;
            v17 += 32 * v5;
            --v18;
          }
          while (v18);
        }
      }
    }
  }
  return 1;
}

__n128 sub_216FEED14(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = *a1;
  uint64_t v14 = &v13;
  sub_2169053B4(a1, a2, (_OWORD **)&v14);
  sub_21690562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v10 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v11 = (_OWORD *)(a1[4] + 32 * v6);
    do
    {
      __n128 result = *(__n128 *)a3;
      long long v12 = *(_OWORD *)(a3 + 16);
      *unint64_t v11 = *(_OWORD *)a3;
      v11[1] = v12;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_216FEED88(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, char **a5)
{
  if (!a3)
  {
    long long v28 = "usdSkel/animMapper.h";
    long long v29 = "Remap";
    uint64_t v30 = 204;
    char v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec2i>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    long long v28 = "usdSkel/animMapper.h";
    long long v29 = "Remap";
    uint64_t v30 = 209;
    char v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec2i>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C47800(a3, a2);
  }
  else
  {
    if (a5) {
      char v13 = *a5;
    }
    else {
      char v13 = 0;
    }
    long long v28 = v13;
    sub_216FEEF8C((unint64_t *)a3, v11, &v28);
    int v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v26 = *(void *)a2;
        }
        else {
          uint64_t v26 = (v9 - a1[1]) * v10;
        }
        __n128 v27 = (const void *)*((void *)a2 + 4);
        sub_2169B9C54((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26) {
          memmove((void *)(*(void *)(a3 + 32) + 8 * a1[1] * v10), v27, 8 * v26);
        }
      }
      else
      {
        uint64_t v18 = *((void *)a2 + 4);
        sub_2169B9C54((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v19 = *(void *)a2 / v10;
        }
        else {
          unint64_t v19 = a1[2];
        }
        if (v19)
        {
          uint64_t v20 = 0;
          uint64_t v21 = *(void *)(a3 + 32);
          unint64_t v22 = (unsigned int *)a1[6];
          do
          {
            unsigned int v24 = *v22++;
            unint64_t v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(void *)a3 > v23 && v5 != 0) {
              memmove((void *)(v21 + 8 * (int)(v23 * v5)), (const void *)(v18 + 8 * v20), 8 * v5);
            }
            v20 += v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_216FEEF8C(unint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *a1;
  uint64_t v11 = 0;
  long long v12 = &v11;
  sub_2169B99EC(a1, a2, &v12);
  sub_2169B9C54((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v9 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v10 = (void *)(a1[4] + 8 * v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_216FEF000(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (!a3)
  {
    long long v28 = "usdSkel/animMapper.h";
    long long v29 = "Remap";
    uint64_t v30 = 204;
    char v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec2h>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    long long v28 = "usdSkel/animMapper.h";
    long long v29 = "Remap";
    uint64_t v30 = 209;
    char v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec2h>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C47BF8(a3, a2);
  }
  else
  {
    if (a5) {
      int v13 = *a5;
    }
    else {
      int v13 = 0;
    }
    LODWORD(v28) = v13;
    sub_216FEF208((unint64_t *)a3, v11, &v28);
    int v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v26 = *(void *)a2;
        }
        else {
          uint64_t v26 = (v9 - a1[1]) * v10;
        }
        __n128 v27 = (const void *)*((void *)a2 + 4);
        sub_2168FB8BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26) {
          memmove((void *)(*(void *)(a3 + 32) + 4 * a1[1] * v10), v27, 4 * v26);
        }
      }
      else
      {
        uint64_t v18 = (char *)*((void *)a2 + 4);
        sub_2168FB8BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v19 = *(void *)a2 / v10;
        }
        else {
          unint64_t v19 = a1[2];
        }
        if (v19)
        {
          uint64_t v20 = 0;
          uint64_t v21 = *(void *)(a3 + 32);
          unint64_t v22 = (unsigned int *)a1[6];
          do
          {
            unsigned int v24 = *v22++;
            unint64_t v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(void *)a3 > v23 && v5 != 0) {
              memmove((void *)(v21 + 4 * (int)(v23 * v5)), v18, 4 * v10);
            }
            v20 += v5;
            v18 += 4 * v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_216FEF208(unint64_t *a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6 = *a1;
  int v11 = 0;
  long long v12 = &v11;
  sub_2168FB654(a1, a2, &v12);
  sub_2168FB8BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v9 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v10 = (_DWORD *)(a1[4] + 4 * v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_216FEF280(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, char **a5)
{
  if (!a3)
  {
    long long v28 = "usdSkel/animMapper.h";
    long long v29 = "Remap";
    uint64_t v30 = 204;
    char v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec2f>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    long long v28 = "usdSkel/animMapper.h";
    long long v29 = "Remap";
    uint64_t v30 = 209;
    char v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec2f>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C47F9C(a3, a2);
  }
  else
  {
    if (a5) {
      int v13 = *a5;
    }
    else {
      int v13 = 0;
    }
    long long v28 = v13;
    sub_216FEF484((unint64_t *)a3, v11, &v28);
    int v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v26 = *(void *)a2;
        }
        else {
          uint64_t v26 = (v9 - a1[1]) * v10;
        }
        __n128 v27 = (const void *)*((void *)a2 + 4);
        sub_2168FAD50((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26) {
          memmove((void *)(*(void *)(a3 + 32) + 8 * a1[1] * v10), v27, 8 * v26);
        }
      }
      else
      {
        uint64_t v18 = *((void *)a2 + 4);
        sub_2168FAD50((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v19 = *(void *)a2 / v10;
        }
        else {
          unint64_t v19 = a1[2];
        }
        if (v19)
        {
          uint64_t v20 = 0;
          uint64_t v21 = *(void *)(a3 + 32);
          unint64_t v22 = (unsigned int *)a1[6];
          do
          {
            unsigned int v24 = *v22++;
            unint64_t v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(void *)a3 > v23 && v5 != 0) {
              memmove((void *)(v21 + 8 * (int)(v23 * v5)), (const void *)(v18 + 8 * v20), 8 * v5);
            }
            v20 += v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_216FEF484(unint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *a1;
  uint64_t v11 = 0;
  long long v12 = &v11;
  sub_2168FAAE8(a1, a2, &v12);
  sub_2168FAD50((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v9 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v10 = (void *)(a1[4] + 8 * v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_216FEF4F8(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, __n128 *a5)
{
  if (!a3)
  {
    v27.n128_u64[0] = (unint64_t)"usdSkel/animMapper.h";
    v27.n128_u64[1] = (unint64_t)"Remap";
    uint64_t v28 = 204;
    long long v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec2d>]";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    v27.n128_u64[0] = (unint64_t)"usdSkel/animMapper.h";
    v27.n128_u64[1] = (unint64_t)"Remap";
    uint64_t v28 = 209;
    long long v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec2d>]";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v27, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C48340(a3, a2);
  }
  else
  {
    if (a5) {
      __n128 v27 = *a5;
    }
    else {
      __n128 v27 = 0uLL;
    }
    sub_216FEF700((unint64_t *)a3, v11, &v27);
    int v16 = *((_DWORD *)a1 + 14);
    if ((v16 & 3) != 0)
    {
      if ((v16 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v25 = *(void *)a2;
        }
        else {
          uint64_t v25 = (v9 - a1[1]) * v10;
        }
        uint64_t v26 = (const void *)*((void *)a2 + 4);
        sub_2168FC460((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (v25) {
          memmove((void *)(*(void *)(a3 + 32) + 16 * a1[1] * v10), v26, 16 * v25);
        }
      }
      else
      {
        int v17 = (char *)*((void *)a2 + 4);
        sub_2168FC460((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v18 = *(void *)a2 / v10;
        }
        else {
          unint64_t v18 = a1[2];
        }
        if (v18)
        {
          uint64_t v19 = 0;
          uint64_t v20 = *(void *)(a3 + 32);
          uint64_t v21 = (unsigned int *)a1[6];
          do
          {
            unsigned int v23 = *v21++;
            unint64_t v22 = v23;
            if ((v23 & 0x80000000) == 0 && *(void *)a3 > v22 && v5 != 0) {
              memmove((void *)(v20 + 16 * (int)(v22 * v5)), v17, 16 * v10);
            }
            v19 += v5;
            v17 += 16 * v5;
            --v18;
          }
          while (v18);
        }
      }
    }
  }
  return 1;
}

__n128 sub_216FEF700(unint64_t *a1, unint64_t a2, __n128 *a3)
{
  unint64_t v6 = *a1;
  v12[0] = 0;
  v12[1] = 0;
  int v13 = v12;
  sub_2168FC1FC(a1, a2, &v13);
  sub_2168FC460((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v10 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v11 = (__n128 *)(a1[4] + 16 * v6);
    do
    {
      __n128 result = *a3;
      *v11++ = *a3;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_216FEF778(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    __n128 v27 = "usdSkel/animMapper.h";
    uint64_t v28 = "Remap";
    uint64_t v29 = 204;
    char v30 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec3i>]";
    char v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    __n128 v27 = "usdSkel/animMapper.h";
    uint64_t v28 = "Remap";
    uint64_t v29 = 209;
    char v30 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec3i>]";
    char v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v27, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C48754(a3, a2);
  }
  else
  {
    if (a5)
    {
      __n128 v27 = *(char **)a5;
      LODWORD(v28) = *(_DWORD *)(a5 + 8);
    }
    else
    {
      LODWORD(v28) = 0;
      __n128 v27 = 0;
    }
    sub_216FEF99C((unint64_t *)a3, v11, (uint64_t *)&v27);
    int v16 = *((_DWORD *)a1 + 14);
    if ((v16 & 3) != 0)
    {
      if ((v16 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v25 = *(void *)a2;
        }
        else {
          uint64_t v25 = (v9 - a1[1]) * v10;
        }
        uint64_t v26 = (const void *)*((void *)a2 + 4);
        sub_2169BBC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (v25) {
          memmove((void *)(*(void *)(a3 + 32) + 12 * a1[1] * v10), v26, 12 * v25);
        }
      }
      else
      {
        int v17 = (char *)*((void *)a2 + 4);
        sub_2169BBC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v18 = *(void *)a2 / v10;
        }
        else {
          unint64_t v18 = a1[2];
        }
        if (v18)
        {
          uint64_t v19 = 0;
          uint64_t v20 = *(void *)(a3 + 32);
          uint64_t v21 = (unsigned int *)a1[6];
          do
          {
            unsigned int v23 = *v21++;
            unint64_t v22 = v23;
            if ((v23 & 0x80000000) == 0 && *(void *)a3 > v22 && v5 != 0) {
              memmove((void *)(v20 + 12 * (int)(v22 * v5)), v17, 12 * v10);
            }
            v19 += v5;
            v17 += 12 * v5;
            --v18;
          }
          while (v18);
        }
      }
    }
  }
  return 1;
}

void sub_216FEF99C(unint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = *a1;
  int v13 = 0;
  uint64_t v12 = 0;
  uint64_t v14 = &v12;
  sub_2169BB98C(a1, a2, &v14);
  sub_2169BBC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v9 = a2 - v6;
  if (a2 > v6)
  {
    uint64_t v10 = a1[4] + 12 * v6;
    do
    {
      uint64_t v11 = *a3;
      *(_DWORD *)(v10 + 8) = *((_DWORD *)a3 + 2);
      *(void *)uint64_t v10 = v11;
      v10 += 12;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_216FEFA24(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    __n128 v27 = "usdSkel/animMapper.h";
    uint64_t v28 = "Remap";
    uint64_t v29 = 204;
    char v30 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec3h>]";
    char v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    __n128 v27 = "usdSkel/animMapper.h";
    uint64_t v28 = "Remap";
    uint64_t v29 = 209;
    char v30 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec3h>]";
    char v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v27, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C48B64(a3, a2);
  }
  else
  {
    if (a5)
    {
      LODWORD(v27) = *(_DWORD *)a5;
      WORD2(v27) = *(_WORD *)(a5 + 4);
    }
    else
    {
      WORD2(v27) = 0;
      LODWORD(v27) = 0;
    }
    sub_216FEFC48((unint64_t *)a3, v11, (int *)&v27);
    int v16 = *((_DWORD *)a1 + 14);
    if ((v16 & 3) != 0)
    {
      if ((v16 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v25 = *(void *)a2;
        }
        else {
          uint64_t v25 = (v9 - a1[1]) * v10;
        }
        uint64_t v26 = (const void *)*((void *)a2 + 4);
        sub_2168FE0EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (v25) {
          memmove((void *)(*(void *)(a3 + 32) + 6 * a1[1] * v10), v26, 6 * v25);
        }
      }
      else
      {
        int v17 = (char *)*((void *)a2 + 4);
        sub_2168FE0EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v18 = *(void *)a2 / v10;
        }
        else {
          unint64_t v18 = a1[2];
        }
        if (v18)
        {
          uint64_t v19 = 0;
          uint64_t v20 = *(void *)(a3 + 32);
          uint64_t v21 = (unsigned int *)a1[6];
          do
          {
            unsigned int v23 = *v21++;
            unint64_t v22 = v23;
            if ((v23 & 0x80000000) == 0 && *(void *)a3 > v22 && v5 != 0) {
              memmove((void *)(v20 + 6 * (int)(v22 * v5)), v17, 6 * v10);
            }
            v19 += v5;
            v17 += 6 * v5;
            --v18;
          }
          while (v18);
        }
      }
    }
  }
  return 1;
}

void sub_216FEFC48(unint64_t *a1, unint64_t a2, int *a3)
{
  unint64_t v6 = *a1;
  __int16 v13 = 0;
  int v12 = 0;
  uint64_t v14 = &v12;
  sub_2168FDE18(a1, a2, &v14);
  sub_2168FE0EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v9 = a2 - v6;
  if (a2 > v6)
  {
    uint64_t v10 = a1[4] + 6 * v6;
    do
    {
      int v11 = *a3;
      *(_WORD *)(v10 + 4) = *((_WORD *)a3 + 2);
      *(_DWORD *)uint64_t v10 = v11;
      v10 += 6;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_216FEFCD0(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    __n128 v27 = "usdSkel/animMapper.h";
    uint64_t v28 = "Remap";
    uint64_t v29 = 204;
    char v30 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec3f>]";
    char v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    __n128 v27 = "usdSkel/animMapper.h";
    uint64_t v28 = "Remap";
    uint64_t v29 = 209;
    char v30 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec3f>]";
    char v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v27, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C48F14(a3, a2);
  }
  else
  {
    if (a5)
    {
      __n128 v27 = *(char **)a5;
      LODWORD(v28) = *(_DWORD *)(a5 + 8);
    }
    else
    {
      LODWORD(v28) = 0;
      __n128 v27 = 0;
    }
    sub_216FEFEF4((unint64_t *)a3, v11, (uint64_t *)&v27);
    int v16 = *((_DWORD *)a1 + 14);
    if ((v16 & 3) != 0)
    {
      if ((v16 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v25 = *(void *)a2;
        }
        else {
          uint64_t v25 = (v9 - a1[1]) * v10;
        }
        uint64_t v26 = (const void *)*((void *)a2 + 4);
        sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (v25) {
          memmove((void *)(*(void *)(a3 + 32) + 12 * a1[1] * v10), v26, 12 * v25);
        }
      }
      else
      {
        int v17 = (char *)*((void *)a2 + 4);
        sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v18 = *(void *)a2 / v10;
        }
        else {
          unint64_t v18 = a1[2];
        }
        if (v18)
        {
          uint64_t v19 = 0;
          uint64_t v20 = *(void *)(a3 + 32);
          uint64_t v21 = (unsigned int *)a1[6];
          do
          {
            unsigned int v23 = *v21++;
            unint64_t v22 = v23;
            if ((v23 & 0x80000000) == 0 && *(void *)a3 > v22 && v5 != 0) {
              memmove((void *)(v20 + 12 * (int)(v22 * v5)), v17, 12 * v10);
            }
            v19 += v5;
            v17 += 12 * v5;
            --v18;
          }
          while (v18);
        }
      }
    }
  }
  return 1;
}

void sub_216FEFEF4(unint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = *a1;
  int v13 = 0;
  uint64_t v12 = 0;
  uint64_t v14 = &v12;
  sub_2168FD278(a1, a2, &v14);
  sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v9 = a2 - v6;
  if (a2 > v6)
  {
    uint64_t v10 = a1[4] + 12 * v6;
    do
    {
      uint64_t v11 = *a3;
      *(_DWORD *)(v10 + 8) = *((_DWORD *)a3 + 2);
      *(void *)uint64_t v10 = v11;
      v10 += 12;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_216FEFF7C(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, __n128 *a5)
{
  if (!a3)
  {
    v27.n128_u64[0] = (unint64_t)"usdSkel/animMapper.h";
    v27.n128_u64[1] = (unint64_t)"Remap";
    uint64_t v28 = 204;
    uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec3d>]";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    v27.n128_u64[0] = (unint64_t)"usdSkel/animMapper.h";
    v27.n128_u64[1] = (unint64_t)"Remap";
    uint64_t v28 = 209;
    uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec3d>]";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v27, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C492C4(a3, a2);
  }
  else
  {
    if (a5)
    {
      __n128 v27 = *a5;
      uint64_t v28 = a5[1].n128_i64[0];
    }
    else
    {
      __n128 v27 = 0uLL;
      uint64_t v28 = 0;
    }
    sub_216FF01A0((unint64_t *)a3, v11, &v27);
    int v16 = *((_DWORD *)a1 + 14);
    if ((v16 & 3) != 0)
    {
      if ((v16 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v25 = *(void *)a2;
        }
        else {
          uint64_t v25 = (v9 - a1[1]) * v10;
        }
        uint64_t v26 = (const void *)*((void *)a2 + 4);
        sub_2168FED88((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (v25) {
          memmove((void *)(*(void *)(a3 + 32) + 24 * a1[1] * v10), v26, 24 * v25);
        }
      }
      else
      {
        int v17 = (char *)*((void *)a2 + 4);
        sub_2168FED88((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v18 = *(void *)a2 / v10;
        }
        else {
          unint64_t v18 = a1[2];
        }
        if (v18)
        {
          uint64_t v19 = 0;
          uint64_t v20 = *(void *)(a3 + 32);
          uint64_t v21 = (unsigned int *)a1[6];
          do
          {
            unsigned int v23 = *v21++;
            unint64_t v22 = v23;
            if ((v23 & 0x80000000) == 0 && *(void *)a3 > v22 && v5 != 0) {
              memmove((void *)(v20 + 24 * (int)(v22 * v5)), v17, 24 * v10);
            }
            v19 += v5;
            v17 += 24 * v5;
            --v18;
          }
          while (v18);
        }
      }
    }
  }
  return 1;
}

__n128 sub_216FF01A0(unint64_t *a1, unint64_t a2, __n128 *a3)
{
  unint64_t v6 = *a1;
  memset(v12, 0, sizeof(v12));
  int v13 = (long long *)v12;
  sub_2168FEAB4(a1, a2, &v13);
  sub_2168FED88((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v10 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v11 = (__n128 *)(a1[4] + 24 * v6);
    do
    {
      __n128 result = *a3;
      v11[1].n128_u64[0] = a3[1].n128_u64[0];
      *unint64_t v11 = result;
      unint64_t v11 = (__n128 *)((char *)v11 + 24);
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_216FF0224(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, __n128 *a5)
{
  if (!a3)
  {
    v27.n128_u64[0] = (unint64_t)"usdSkel/animMapper.h";
    v27.n128_u64[1] = (unint64_t)"Remap";
    uint64_t v28 = 204;
    uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec4i>]";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    v27.n128_u64[0] = (unint64_t)"usdSkel/animMapper.h";
    v27.n128_u64[1] = (unint64_t)"Remap";
    uint64_t v28 = 209;
    uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec4i>]";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v27, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C496C8(a3, a2);
  }
  else
  {
    if (a5) {
      __n128 v27 = *a5;
    }
    else {
      __n128 v27 = 0uLL;
    }
    sub_216FF042C((unint64_t *)a3, v11, &v27);
    int v16 = *((_DWORD *)a1 + 14);
    if ((v16 & 3) != 0)
    {
      if ((v16 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v25 = *(void *)a2;
        }
        else {
          uint64_t v25 = (v9 - a1[1]) * v10;
        }
        uint64_t v26 = (const void *)*((void *)a2 + 4);
        sub_2169BDD28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (v25) {
          memmove((void *)(*(void *)(a3 + 32) + 16 * a1[1] * v10), v26, 16 * v25);
        }
      }
      else
      {
        int v17 = (char *)*((void *)a2 + 4);
        sub_2169BDD28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v18 = *(void *)a2 / v10;
        }
        else {
          unint64_t v18 = a1[2];
        }
        if (v18)
        {
          uint64_t v19 = 0;
          uint64_t v20 = *(void *)(a3 + 32);
          uint64_t v21 = (unsigned int *)a1[6];
          do
          {
            unsigned int v23 = *v21++;
            unint64_t v22 = v23;
            if ((v23 & 0x80000000) == 0 && *(void *)a3 > v22 && v5 != 0) {
              memmove((void *)(v20 + 16 * (int)(v22 * v5)), v17, 16 * v10);
            }
            v19 += v5;
            v17 += 16 * v5;
            --v18;
          }
          while (v18);
        }
      }
    }
  }
  return 1;
}

__n128 sub_216FF042C(unint64_t *a1, unint64_t a2, __n128 *a3)
{
  unint64_t v6 = *a1;
  v12[0] = 0;
  v12[1] = 0;
  int v13 = v12;
  sub_2169BDAC4(a1, a2, &v13);
  sub_2169BDD28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v10 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v11 = (__n128 *)(a1[4] + 16 * v6);
    do
    {
      __n128 result = *a3;
      *v11++ = *a3;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_216FF04A4(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, char **a5)
{
  if (!a3)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    uint64_t v29 = "Remap";
    uint64_t v30 = 204;
    char v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec4h>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    uint64_t v28 = "usdSkel/animMapper.h";
    uint64_t v29 = "Remap";
    uint64_t v30 = 209;
    char v31 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec4h>]";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C49AC0(a3, a2);
  }
  else
  {
    if (a5) {
      int v13 = *a5;
    }
    else {
      int v13 = 0;
    }
    uint64_t v28 = v13;
    sub_216FF06A8((unint64_t *)a3, v11, &v28);
    int v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v26 = *(void *)a2;
        }
        else {
          uint64_t v26 = (v9 - a1[1]) * v10;
        }
        __n128 v27 = (const void *)*((void *)a2 + 4);
        sub_2169008D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26) {
          memmove((void *)(*(void *)(a3 + 32) + 8 * a1[1] * v10), v27, 8 * v26);
        }
      }
      else
      {
        uint64_t v18 = *((void *)a2 + 4);
        sub_2169008D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v19 = *(void *)a2 / v10;
        }
        else {
          unint64_t v19 = a1[2];
        }
        if (v19)
        {
          uint64_t v20 = 0;
          uint64_t v21 = *(void *)(a3 + 32);
          unint64_t v22 = (unsigned int *)a1[6];
          do
          {
            unsigned int v24 = *v22++;
            unint64_t v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(void *)a3 > v23 && v5 != 0) {
              memmove((void *)(v21 + 8 * (int)(v23 * v5)), (const void *)(v18 + 8 * v20), 8 * v5);
            }
            v20 += v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

void sub_216FF06A8(unint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *a1;
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  sub_21690066C(a1, a2, &v12);
  sub_2169008D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v9 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v10 = (void *)(a1[4] + 8 * v6);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
}

uint64_t sub_216FF071C(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, __n128 *a5)
{
  if (!a3)
  {
    v27.n128_u64[0] = (unint64_t)"usdSkel/animMapper.h";
    v27.n128_u64[1] = (unint64_t)"Remap";
    uint64_t v28 = 204;
    uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec4f>]";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    v27.n128_u64[0] = (unint64_t)"usdSkel/animMapper.h";
    v27.n128_u64[1] = (unint64_t)"Remap";
    uint64_t v28 = 209;
    uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container *, int, const typ"
          "ename Container::value_type *) const [Container = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl_"
          "_pxrReserved__::GfVec4f>]";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v27, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C49E68(a3, a2);
  }
  else
  {
    if (a5) {
      __n128 v27 = *a5;
    }
    else {
      __n128 v27 = 0uLL;
    }
    sub_216FF0924((unint64_t *)a3, v11, &v27);
    int v16 = *((_DWORD *)a1 + 14);
    if ((v16 & 3) != 0)
    {
      if ((v16 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v25 = *(void *)a2;
        }
        else {
          uint64_t v25 = (v9 - a1[1]) * v10;
        }
        uint64_t v26 = (const void *)*((void *)a2 + 4);
        sub_2168FFD20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (v25) {
          memmove((void *)(*(void *)(a3 + 32) + 16 * a1[1] * v10), v26, 16 * v25);
        }
      }
      else
      {
        int v17 = (char *)*((void *)a2 + 4);
        sub_2168FFD20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v18 = *(void *)a2 / v10;
        }
        else {
          unint64_t v18 = a1[2];
        }
        if (v18)
        {
          uint64_t v19 = 0;
          uint64_t v20 = *(void *)(a3 + 32);
          uint64_t v21 = (unsigned int *)a1[6];
          do
          {
            unsigned int v23 = *v21++;
            unint64_t v22 = v23;
            if ((v23 & 0x80000000) == 0 && *(void *)a3 > v22 && v5 != 0) {
              memmove((void *)(v20 + 16 * (int)(v22 * v5)), v17, 16 * v10);
            }
            v19 += v5;
            v17 += 16 * v5;
            --v18;
          }
          while (v18);
        }
      }
    }
  }
  return 1;
}

__n128 sub_216FF0924(unint64_t *a1, unint64_t a2, __n128 *a3)
{
  unint64_t v6 = *a1;
  v12[0] = 0;
  v12[1] = 0;
  int v13 = v12;
  sub_2168FFABC(a1, a2, &v13);
  sub_2168FFD20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v10 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v11 = (__n128 *)(a1[4] + 16 * v6);
    do
    {
      __n128 result = *a3;
      *v11++ = *a3;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_216FF099C(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, long long *a5)
{
  if (!a3)
  {
    *(void *)&long long v28 = "usdSkel/animMapper.h";
    *((void *)&v28 + 1) = "Remap";
    *(void *)&long long v29 = 204;
    *((void *)&v29 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>]";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"'target' is null");
    return 0;
  }
  unsigned int v5 = a4;
  if ((int)a4 <= 0)
  {
    *(void *)&long long v28 = "usdSkel/animMapper.h";
    *((void *)&v28 + 1) = "Remap";
    *(void *)&long long v29 = 209;
    *((void *)&v29 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::Remap(const Container &, Container"
                            " *, int, const typename Container::value_type *) const [Container = pxrInternal__aapl__pxrRe"
                            "served__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>]";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"Invalid elementSize [%d]: size must be greater than zero.", (char *)a3, a4);
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = a4;
  unint64_t v11 = *a1 * a4;
  if ((~*((_DWORD *)a1 + 14) & 0xE) == 0 && *(void *)a2 == v11)
  {
    sub_216C4A210(a3, a2);
  }
  else
  {
    if (a5)
    {
      long long v13 = a5[1];
      long long v28 = *a5;
      long long v29 = v13;
    }
    else
    {
      long long v28 = 0u;
      long long v29 = 0u;
    }
    sub_216FF0BAC((unint64_t *)a3, v11, (uint64_t)&v28);
    int v17 = *((_DWORD *)a1 + 14);
    if ((v17 & 3) != 0)
    {
      if ((v17 & 8) != 0)
      {
        if ((v9 - a1[1]) * (unint64_t)v5 >= *(void *)a2) {
          uint64_t v26 = *(void *)a2;
        }
        else {
          uint64_t v26 = (v9 - a1[1]) * v10;
        }
        __n128 v27 = (const void *)*((void *)a2 + 4);
        sub_2169014A0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (v26) {
          memmove((void *)(*(void *)(a3 + 32) + 32 * a1[1] * v10), v27, 32 * v26);
        }
      }
      else
      {
        unint64_t v18 = (char *)*((void *)a2 + 4);
        sub_2169014A0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v15, v16);
        if (a1[2] >= *(void *)a2 / (unint64_t)v5) {
          unint64_t v19 = *(void *)a2 / v10;
        }
        else {
          unint64_t v19 = a1[2];
        }
        if (v19)
        {
          uint64_t v20 = 0;
          uint64_t v21 = *(void *)(a3 + 32);
          unint64_t v22 = (unsigned int *)a1[6];
          do
          {
            unsigned int v24 = *v22++;
            unint64_t v23 = v24;
            if ((v24 & 0x80000000) == 0 && *(void *)a3 > v23 && v5 != 0) {
              memmove((void *)(v21 + 32 * (int)(v23 * v5)), v18, 32 * v10);
            }
            v20 += v5;
            v18 += 32 * v5;
            --v19;
          }
          while (v19);
        }
      }
    }
  }
  return 1;
}

__n128 sub_216FF0BAC(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = *a1;
  memset(v13, 0, sizeof(v13));
  uint64_t v14 = v13;
  sub_216901228(a1, a2, &v14);
  sub_2169014A0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v10 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v11 = (_OWORD *)(a1[4] + 32 * v6);
    do
    {
      __n128 result = *(__n128 *)a3;
      long long v12 = *(_OWORD *)(a3 + 16);
      *unint64_t v11 = *(_OWORD *)a3;
      v11[1] = v12;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  return result;
}

__n128 sub_216FF0C28(unint64_t *a1, unint64_t a2, long long *a3)
{
  unint64_t v6 = *a1;
  memset(v17, 0, sizeof(v17));
  unint64_t v18 = v17;
  sub_216902248(a1, a2, &v18);
  sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v10 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v11 = a1[4] + (v6 << 7);
    do
    {
      long long v12 = *a3;
      long long v13 = a3[1];
      long long v14 = a3[3];
      *(_OWORD *)(v11 + 32) = a3[2];
      *(_OWORD *)(v11 + 48) = v14;
      *(_OWORD *)unint64_t v11 = v12;
      *(_OWORD *)(v11 + 16) = v13;
      __n128 result = (__n128)a3[4];
      long long v15 = a3[5];
      long long v16 = a3[7];
      *(_OWORD *)(v11 + 96) = a3[6];
      *(_OWORD *)(v11 + 112) = v16;
      *(__n128 *)(v11 + 64) = result;
      *(_OWORD *)(v11 + 80) = v15;
      v11 += 128;
      --v10;
    }
    while (v10);
  }
  return result;
}

__n128 sub_216FF0CCC(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = *a1;
  memset(v14, 0, sizeof(v14));
  long long v15 = v14;
  sub_216902ED0(a1, a2, &v15);
  sub_216903174((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  unint64_t v10 = a2 - v6;
  if (a2 > v6)
  {
    unint64_t v11 = a1[4] + (v6 << 6);
    do
    {
      __n128 result = *(__n128 *)a3;
      long long v12 = *(_OWORD *)(a3 + 16);
      long long v13 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(v11 + 32) = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v11 + 48) = v13;
      *(__n128 *)unint64_t v11 = result;
      *(_OWORD *)(v11 + 16) = v12;
      v11 += 64;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeJointLocalTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t *a1, const char *a2, char *a3, double a4)
{
  if (*a1) {
    goto LABEL_2;
  }
  v11[0] = "usdSkel/animQuery.cpp";
  v11[1] = "ComputeJointLocalTransforms";
  _OWORD v11[2] = 52;
  v11[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeJointLocalTransforms(VtArray<Matrix4> *, UsdT"
           "imeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  char v12 = 0;
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3);
  char v10 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v11, "IsValid()", v9);
  uint64_t result = 0;
  if (v10)
  {
LABEL_2:
    uint64_t v7 = sub_216FF0E20(a1);
    return (*(uint64_t (**)(uint64_t, const char *, double))(*(void *)v7 + 24))(v7, a2, a4);
  }
  return result;
}

uint64_t sub_216FF0E20(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::oper"
            "ator->() const [U = pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x80000002174A7C70 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeJointLocalTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t *a1, const char *a2, char *a3, double a4)
{
  if (*a1) {
    goto LABEL_2;
  }
  v11[0] = "usdSkel/animQuery.cpp";
  v11[1] = "ComputeJointLocalTransforms";
  _OWORD v11[2] = 52;
  v11[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeJointLocalTransforms(VtArray<Matrix4> *, UsdT"
           "imeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
  char v12 = 0;
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3);
  char v10 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v11, "IsValid()", v9);
  uint64_t result = 0;
  if (v10)
  {
LABEL_2:
    uint64_t v7 = sub_216FF0E20(a1);
    return (*(uint64_t (**)(uint64_t, const char *, double))(*(void *)v7 + 32))(v7, a2, a4);
  }
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetPrim@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *this@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)this)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)sub_216FF0E20((uint64_t *)this) + 16);
    return (_DWORD *)v3();
  }
  else
  {
    *(_DWORD *)a2 = 1;
    *(void *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 16));
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
    *(void *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeJointLocalTransformComponents(uint64_t *a1, const char *a2, char *a3, uint64_t a4, double a5)
{
  if (*a1) {
    goto LABEL_2;
  }
  v14[0] = "usdSkel/animQuery.cpp";
  v14[1] = "ComputeJointLocalTransformComponents";
  v14[2] = 75;
  void v14[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeJointLocalTransformComponents(VtVec3fArray *,"
           " VtQuatfArray *, VtVec3hArray *, UsdTimeCode) const";
  char v15 = 0;
  char v12 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3);
  char v13 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v14, "IsValid()", v12);
  uint64_t result = 0;
  if (v13)
  {
LABEL_2:
    uint64_t v10 = sub_216FF0E20(a1);
    return (*(uint64_t (**)(uint64_t, const char *, char *, uint64_t, double))(*(void *)v10 + 40))(v10, a2, a3, a4, a5);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeBlendShapeWeights(uint64_t *a1, const char *a2, char *a3, double a4)
{
  if (*a1) {
    goto LABEL_2;
  }
  v11[0] = "usdSkel/animQuery.cpp";
  v11[1] = "ComputeBlendShapeWeights";
  _OWORD v11[2] = 87;
  v11[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeBlendShapeWeights(VtFloatArray *, UsdTimeCode) const";
  char v12 = 0;
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3);
  char v10 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v11, "IsValid()", v9);
  uint64_t result = 0;
  if (v10)
  {
LABEL_2:
    uint64_t v7 = sub_216FF0E20(a1);
    return (*(uint64_t (**)(uint64_t, const char *, double))(*(void *)v7 + 72))(v7, a2, a4);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointTransformTimeSamples(uint64_t *a1, char *a2)
{
  unint64_t v3 = 0xFFF0000000000000;
  char v4 = 0;
  uint64_t v5 = 0x7FF0000000000000;
  char v6 = 0;
  return pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointTransformTimeSamplesInInterval(a1, (const char *)&v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointTransformTimeSamplesInInterval(uint64_t *a1, const char *a2, char *a3)
{
  if (*a1) {
    goto LABEL_2;
  }
  v10[0] = "usdSkel/animQuery.cpp";
  v10[1] = "GetJointTransformTimeSamplesInInterval";
  _OWORD v10[2] = 107;
  void v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointTransformTimeSamplesInInterval(const GfInter"
           "val &, std::vector<double> *) const";
  char v11 = 0;
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3);
  char v9 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v10, "IsValid()", v8);
  uint64_t result = 0;
  if (v9)
  {
LABEL_2:
    uint64_t v6 = sub_216FF0E20(a1);
    return (*(uint64_t (**)(uint64_t, const char *, char *))(*(void *)v6 + 48))(v6, a2, a3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointTransformAttributes(uint64_t *a1, const char *a2, char *a3)
{
  if (*a1) {
    goto LABEL_2;
  }
  v9[0] = "usdSkel/animQuery.cpp";
  v9[1] = "GetJointTransformAttributes";
  _OWORD v9[2] = 117;
  void v9[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointTransformAttributes(std::vector<UsdAttribute> *) const";
  char v10 = 0;
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3);
  char v8 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "IsValid()", v7);
  uint64_t result = 0;
  if (v8)
  {
LABEL_2:
    uint64_t v5 = sub_216FF0E20(a1);
    return (*(uint64_t (**)(uint64_t, const char *))(*(void *)v5 + 56))(v5, a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::JointTransformsMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *this, const char *a2, char *a3)
{
  if (*(void *)this) {
    goto LABEL_2;
  }
  v8[0] = "usdSkel/animQuery.cpp";
  v8[1] = "JointTransformsMightBeTimeVarying";
  _OWORD v8[2] = 127;
  v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::JointTransformsMightBeTimeVarying() const";
  char v9 = 0;
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3);
  char v7 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v8, "IsValid()", v6);
  uint64_t result = 0;
  if (v7)
  {
LABEL_2:
    uint64_t v4 = sub_216FF0E20((uint64_t *)this);
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 64))(v4);
  }
  return result;
}

double pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointOrder@<D0>(pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *this@<X0>, const char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)this
    || (v13[0] = "usdSkel/animQuery.cpp",
        v13[1] = "GetJointOrder",
        _OWORD v13[2] = 137,
        void v13[3] = "VtTokenArray pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointOrder() const",
        char v14 = 0,
        char v11 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v13, "IsValid()", v11) & 1) != 0))
  {
    uint64_t v6 = sub_216FF0E20((uint64_t *)this);
    long long v7 = *(_OWORD *)(v6 + 16);
    long long v8 = *(_OWORD *)(v6 + 32);
    *(_OWORD *)a4 = v7;
    *(_OWORD *)(a4 + 16) = v8;
    uint64_t v9 = *(void *)(v6 + 48);
    *(void *)(a4 + 32) = v9;
    if (v9)
    {
      char v10 = (atomic_ullong *)(v9 - 16);
      if (*(void *)(a4 + 24)) {
        char v10 = *(atomic_ullong **)(a4 + 24);
      }
      atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *(void *)(a4 + 32) = 0;
    *(void *)&long long v7 = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return *(double *)&v7;
}

double pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeOrder@<D0>(pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *this@<X0>, const char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)this
    || (v13[0] = "usdSkel/animQuery.cpp",
        v13[1] = "GetBlendShapeOrder",
        _OWORD v13[2] = 147,
        void v13[3] = "VtTokenArray pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeOrder() const",
        char v14 = 0,
        char v11 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v13, "IsValid()", v11) & 1) != 0))
  {
    uint64_t v6 = sub_216FF0E20((uint64_t *)this);
    long long v7 = *(_OWORD *)(v6 + 56);
    long long v8 = *(_OWORD *)(v6 + 72);
    *(_OWORD *)a4 = v7;
    *(_OWORD *)(a4 + 16) = v8;
    uint64_t v9 = *(void *)(v6 + 88);
    *(void *)(a4 + 32) = v9;
    if (v9)
    {
      char v10 = (atomic_ullong *)(v9 - 16);
      if (*(void *)(a4 + 24)) {
        char v10 = *(atomic_ullong **)(a4 + 24);
      }
      atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *(void *)(a4 + 32) = 0;
    *(void *)&long long v7 = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return *(double *)&v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeWeightTimeSamples(uint64_t *a1, char *a2)
{
  unint64_t v3 = 0xFFF0000000000000;
  char v4 = 0;
  uint64_t v5 = 0x7FF0000000000000;
  char v6 = 0;
  return pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeWeightTimeSamplesInInterval(a1, (const char *)&v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeWeightTimeSamplesInInterval(uint64_t *a1, const char *a2, char *a3)
{
  if (*a1) {
    goto LABEL_2;
  }
  v10[0] = "usdSkel/animQuery.cpp";
  v10[1] = "GetBlendShapeWeightTimeSamplesInInterval";
  _OWORD v10[2] = 179;
  void v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeWeightTimeSamplesInInterval(const GfInt"
           "erval &, std::vector<double> *) const";
  char v11 = 0;
  long long v8 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3);
  char v9 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v10, "IsValid()", v8);
  uint64_t result = 0;
  if (v9)
  {
LABEL_2:
    uint64_t v6 = sub_216FF0E20(a1);
    return (*(uint64_t (**)(uint64_t, const char *, char *))(*(void *)v6 + 80))(v6, a2, a3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeWeightAttributes(uint64_t *a1, const char *a2, char *a3)
{
  if (*a1) {
    goto LABEL_2;
  }
  v9[0] = "usdSkel/animQuery.cpp";
  v9[1] = "GetBlendShapeWeightAttributes";
  _OWORD v9[2] = 167;
  void v9[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeWeightAttributes(std::vector<UsdAttribute> *) const";
  char v10 = 0;
  long long v7 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3);
  char v8 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "IsValid()", v7);
  uint64_t result = 0;
  if (v8)
  {
LABEL_2:
    uint64_t v5 = sub_216FF0E20(a1);
    return (*(uint64_t (**)(uint64_t, const char *))(*(void *)v5 + 88))(v5, a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::BlendShapeWeightsMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *this, const char *a2, char *a3)
{
  if (*(void *)this) {
    goto LABEL_2;
  }
  v8[0] = "usdSkel/animQuery.cpp";
  v8[1] = "BlendShapeWeightsMightBeTimeVarying";
  _OWORD v8[2] = 189;
  v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::BlendShapeWeightsMightBeTimeVarying() const";
  char v9 = 0;
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid anim query.", a2, a3);
  char v7 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v8, "IsValid()", v6);
  uint64_t result = 0;
  if (v7)
  {
LABEL_2:
    uint64_t v4 = sub_216FF0E20((uint64_t *)this);
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 96))(v4);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetDescription(pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *this@<X0>, void *a2@<X8>)
{
  if (*(void *)this)
  {
    uint64_t v2 = sub_216FF0E20((uint64_t *)this);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 16))(&v6);
    sub_216D0162C((uint64_t)&v6, &v11);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"UsdSkelAnimQuery <%s>", v4, v5, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
    sub_21697C414(&v11);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_21697C414(&v8);
    if (v7) {
      sub_216D16E0C(v7);
    }
  }
  else
  {
    sub_216779094(a2, "invalid UsdSkelAnimQuery");
  }
}

void sub_216FF1944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBakeSkinning(pxrInternal__aapl__pxrReserved__::UsdSkelCache *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v497 = *MEMORY[0x263EF8340];
  if (sub_216FDC16C(1))
  {
    sub_216FF59B8(a3);
    uint64_t v5 = *(void *)(a2 + 24);
    uint64_t v4 = *(void *)(a2 + 32);
    uint64_t v7 = *(void *)(a2 + 48);
    uint64_t v6 = *(void *)(a2 + 56);
    sub_216FF5B00(*(_DWORD *)a2, v8, v9);
    int v12 = v487;
    if (SBYTE7(v488) < 0) {
      int v12 = (void **)v487[0];
    }
    if (v462 >= 0) {
      char v13 = __p;
    }
    else {
      char v13 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Baking skinning over range %s for %zu bindings in %zu layers.\nDeformation flags:\n%s", v10, v11, v12, (v4 - v5) >> 6, (v6 - v7) >> 4, v13);
    if (v462 < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE7(v488) < 0) {
      operator delete(v487[0]);
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::UsdGeomXformCache((pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)__p);
  long long v460 = 0uLL;
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v14 = *(void *)(a2 + 32);
  if (v15 != v14)
  {
    while (1)
    {
      long long v16 = sub_216D24140(&v460);
      if (!(v17 & 1 | (unint64_t)v16))
      {
        uint64_t v21 = *(void *)(v15 + 8);
        if (v21)
        {
          if ((*(unsigned char *)(v21 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)v15 + 32))(v15))
          {
            sub_216D16CFC((uint64_t)v487, (uint64_t *)(v15 + 8), (_DWORD *)(v15 + 16));
            pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v487, v22, v485);
            unint64_t v23 = (atomic_uint *)*((void *)&v460 + 1);
            long long v460 = *(_OWORD *)v485;
            v485[1] = 0;
            if (v23)
            {
              if (atomic_fetch_add_explicit(v23 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v23 + 8))(v23);
              }
              unsigned int v24 = v485[1];
              v485[0] = 0;
              if (v485[1]
                && atomic_fetch_add_explicit((atomic_uint *volatile)v485[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(pxrInternal__aapl__pxrReserved__::UsdAttribute *))(*(void *)v24 + 8))(v24);
              }
            }
            else
            {
              v485[0] = 0;
            }
            if ((BYTE8(v488) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v488 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v488 + 1);
            sub_21697C414(&v488);
            if (v487[1]) {
              sub_216D16E0C((atomic_ullong *)v487[1]);
            }
          }
        }
      }
      uint64_t v18 = *(void *)(v15 + 24);
      if (v18) {
        break;
      }
LABEL_18:
      v15 += 64;
      if (v15 == v14) {
        goto LABEL_35;
      }
    }
    uint64_t v19 = *(void *)(v15 + 56);
    uint64_t v20 = 400 * v18;
    while ((sub_216E0D4E4(v19, v17) & 1) == 0
         && !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v19 + 16)))
    {
      v19 += 400;
      v20 -= 400;
      if (!v20) {
        goto LABEL_18;
      }
    }
    v487[0] = "usdSkel/bakeSkinning.cpp";
    v487[1] = "UsdSkelBakeSkinning";
    *(void *)&long long v488 = 2359;
    *((void *)&v488 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBakeSkinning(const UsdSkelCache &, const UsdS"
                             "kelBakeSkinningParms &, const GfInterval &)";
    LOBYTE(v489) = 0;
    sub_216D0162C(v19, (int *)v485);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v485);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v487, (pxrInternal__aapl__pxrReserved__ *)"[UsdSkelBakeSkinning] Cannot bake skinning for instanced SkinningQuery <%s>\n", v26, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v485 + 1);
    sub_21697C414(v485);
LABEL_148:
    BOOL v113 = 0;
    goto LABEL_645;
  }
LABEL_35:
  __n128 v27 = sub_216D24140(&v460);
  if (!(v28 & 1 | (unint64_t)v27)) {
    goto LABEL_148;
  }
  int64x2_t v458 = 0uLL;
  v459[0] = 0;
  v455 = 0;
  v456 = 0;
  uint64_t v457 = 0;
  uint64_t v30 = *(void *)(a2 + 24);
  uint64_t v29 = *(void *)(a2 + 32);
  unint64_t v31 = v29 - v30;
  unint64_t v32 = (v29 - v30) >> 6;
  uint64_t v33 = *(void *)(a2 + 72);
  if (v32 != v33)
  {
    v487[0] = "usdSkel/bakeSkinning.cpp";
    v487[1] = "_CreateAdapters";
    *(void *)&long long v488 = 1838;
    *((void *)&v488 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CreateAdapters(const UsdSkel"
                             "BakeSkinningParms &, const UsdSkelCache &, std::vector<_SkelAdapterRefPtr> *, std::vector<_"
                             "SkinningAdapterRefPtr> *, UsdGeomXformCache *)";
    LOBYTE(v489) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v487, 1, (pxrInternal__aapl__pxrReserved__ *)"size of parms.bindings [%zu] != size of parms.bindingLayerIndices [%zu]", v32, v33);
    BOOL v113 = 0;
    goto LABEL_644;
  }
  if (v29 != v30)
  {
    if ((v31 & 0x8000000000000000) != 0) {
      sub_21677CB10();
    }
    *(void *)&long long v489 = v459;
    v458.i64[0] = (uint64_t)operator new(v31 >> 2);
    v458.i64[1] = v458.i64[0];
    v459[0] = v458.i64[0] + 16 * v32;
    *(_OWORD *)v487 = 0u;
    long long v488 = 0u;
    sub_21696A2C0((uint64_t)v487);
    unint64_t v32 = (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 6;
  }
  sub_216FF6B64((unint64_t *)&v455, v32);
  uint64_t v35 = a2;
  if (*(void *)(a2 + 32) != *(void *)(a2 + 24))
  {
    unint64_t v36 = 0;
    do
    {
      unint64_t v37 = *(unsigned int *)(*(void *)(v35 + 104) + 4 * v36);
      uint64_t v39 = v35 + 48;
      uint64_t v38 = *(void *)(v35 + 48);
      unint64_t v40 = (*(void *)(v39 + 8) - v38) >> 4;
      if (v40 <= v37)
      {
        v487[0] = "usdSkel/bakeSkinning.cpp";
        v487[1] = "_CreateAdapters";
        *(void *)&long long v488 = 1850;
        *((void *)&v488 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CreateAdapters(const Usd"
                                 "SkelBakeSkinningParms &, const UsdSkelCache &, std::vector<_SkelAdapterRefPtr> *, std::"
                                 "vector<_SkinningAdapterRefPtr> *, UsdGeomXformCache *)";
        LOBYTE(v489) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v487, (pxrInternal__aapl__pxrReserved__ *)"Layer index %d for the %zu'th binding >= number of layers [%zu]", v34, v37, v36, v40);
      }
      else
      {
        long long v41 = (uint64_t *)(v38 + 16 * v37);
        long long v42 = sub_21697CF14(v41);
        if (v43 & 1 | (unint64_t)v42)
        {
          uint64_t v446 = *(void *)(a2 + 24);
          v449 = (void *)(v446 + (v36 << 6) + 24);
          if (*v449)
          {
            pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkelQuery(a1, (const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)(v446 + (v36 << 6)), (uint64_t)v487);
            uint64_t v44 = v487[0];
            if (v487[0])
            {
              uint64_t v45 = (char *)operator new(0x198uLL);
              *((void *)v45 + 1) = 0;
              *((void *)v45 + 2) = 0;
              *(void *)uint64_t v45 = &unk_26C76F300;
              *((void *)v45 + 3) = v44;
              v447 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)(v45 + 24);
              sub_2168BD80C((uint64_t *)v45 + 3);
              *((void **)v45 + 4) = v487[1];
              sub_2168BD80C((uint64_t *)v45 + 4);
              *(_OWORD *)(v45 + 40) = v488;
              long long v46 = v490;
              *(_OWORD *)(v45 + 56) = v489;
              *(_OWORD *)(v45 + 72) = v46;
              uint64_t v47 = v491;
              *((void *)v45 + 11) = v491;
              if (v47)
              {
                uint64_t v48 = (atomic_ullong *)(v47 - 16);
                if (*((void *)v45 + 10)) {
                  uint64_t v48 = (atomic_ullong *)*((void *)v45 + 10);
                }
                atomic_fetch_add_explicit(v48, 1uLL, memory_order_relaxed);
              }
              int v49 = DWORD2(v491);
              *((_OWORD *)v45 + 13) = 0u;
              *((_DWORD *)v45 + 24) = v49;
              v45[104] = v45[104] & 0xE0 | 8;
              *((_OWORD *)v45 + 7) = 0u;
              *((_OWORD *)v45 + 8) = 0u;
              *((void *)v45 + 18) = 0;
              v45[152] = v45[152] & 0xE0 | 8;
              *((_OWORD *)v45 + 10) = 0u;
              *((_OWORD *)v45 + 11) = 0u;
              *((void *)v45 + 24) = 0;
              v45[200] = v45[200] & 0xE0 | 8;
              *((_OWORD *)v45 + 14) = 0u;
              *((void *)v45 + 30) = 0;
              v45[248] = v45[248] & 0xE0 | 8;
              *((void *)v45 + 48) = 0;
              *((void *)v45 + 49) = 0;
              *((void *)v45 + 50) = 0;
              if (*((void *)v45 + 3)
                || (v485[0] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)"usdSkel/bakeSkinning.cpp",
                    v485[1] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)"_SkelAdapter",
                    v485[2] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)594,
                    v485[3] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)"pxrInternal__aapl__pxrReserved__::(anony"
                                                                                "mous namespace)::_SkelAdapter::_SkelAdap"
                                                                                "ter(const UsdSkelBakeSkinningParms &, co"
                                                                                "nst UsdSkelSkeletonQuery &, UsdGeomXformCache *)",
                    LOBYTE(v486) = 0,
                    (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v485, "_skelQuery", 0) & 1) != 0))
              {
                if (sub_216FDC16C(1))
                {
                  pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v487, v50, v51, (uint64_t)v485);
                  sub_216D0162C((uint64_t)v485, (int *)&v464);
                  uint64_t v52 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v464);
                  pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]   Creating adapter for skel at <%s>\n", v53, v54, v52);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v464 + 1);
                  sub_21697C414(&v464);
                  if (((uint64_t)v485[3] & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v485[3] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v485[2] + 1);
                  sub_21697C414(&v485[2]);
                  if (v485[1]) {
                    sub_216D16E0C((atomic_ullong *)v485[1]);
                  }
                }
                if ((*(unsigned char *)a2 & 7) != 0)
                {
                  Skeletounint64_t n = pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v487, v50, v51);
                  uint64_t v56 = Skeleton;
                  uint64_t v58 = Skeleton + 1;
                  uint64_t v57 = Skeleton[1];
                  if (v57)
                  {
                    if ((*(unsigned char *)(v57 + 57) & 8) == 0
                      && (*(unsigned int (**)(uint64_t *))(*Skeleton + 32))(Skeleton))
                    {
                      AnimQuery = (pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *)pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetAnimQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v487);
                      if (*(void *)AnimQuery)
                      {
                        Mapper = (pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetMapper((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v487);
                        if (!pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsNull(Mapper)) {
                          goto LABEL_67;
                        }
                      }
                      pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetRestTransformsAttr((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v56, (uint64_t)v485);
                      BOOL HasAuthoredValue = pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v485);
                      if (((uint64_t)v485[3] & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v485[3] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v485[2] + 1);
                      sub_21697C414(&v485[2]);
                      if (v485[1]) {
                        sub_216D16E0C((atomic_ullong *)v485[1]);
                      }
                      if (HasAuthoredValue)
                      {
LABEL_67:
                        char v63 = v45[104] & 0xFC | 1;
                        v45[104] = v63;
                        char v64 = v45[152] & 0xFC | 1;
                        v45[152] = v64;
                        if (*(void *)AnimQuery
                          && (v65 = pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::JointTransformsMightBeTimeVarying(AnimQuery, v60, v61), char v63 = v45[104], v64 = v45[152], v65))
                        {
                          v45[104] = v63 | 4;
                          char v66 = v64 | 4;
                        }
                        else
                        {
                          v45[104] = v63 & 0xFB;
                          char v66 = v64 & 0xFB;
                        }
                        v45[152] = v66;
                        v45[248] = v45[248] & 0xFC | 1;
                        sub_216D16CFC((uint64_t)v485, v58, (_DWORD *)v56 + 4);
                        if (sub_216FF6D10((int *)v485, (pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)__p))char v67 = 4; {
                        else
                        }
                          char v67 = 0;
                        v45[248] = v45[248] & 0xFB | v67;
                        if (((uint64_t)v485[3] & 7) != 0) {
                          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v485[3] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                        }
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v485[2] + 1);
                        sub_21697C414(&v485[2]);
                        if (v485[1]) {
                          sub_216D16E0C((atomic_ullong *)v485[1]);
                        }
                      }
                    }
                  }
                }
                if ((*(unsigned char *)a2 & 0x18) != 0)
                {
                  uint64_t v68 = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetAnimQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v487);
                  uint64_t v70 = (pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *)v68;
                  if (*v68)
                  {
                    memset(v485, 0, 24);
                    if (pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeWeightAttributes(v68, (const char *)v485, v69))
                    {
                      int v73 = v485[0];
                      int v74 = v485[1];
                      if (v485[0] == v485[1])
                      {
                        LOBYTE(v75) = 0;
                      }
                      else
                      {
                        do
                        {
                          BOOL v75 = pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue(v73);
                          int v73 = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)((char *)v73 + 32);
                          int v76 = v73 == v74 || v75;
                        }
                        while (v76 != 1);
                      }
                      v45[200] = v45[200] & 0xFC | v75;
                      if (pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::BlendShapeWeightsMightBeTimeVarying(v70, v71, v72))char v77 = 4; {
                      else
                      }
                        char v77 = 0;
                      v45[200] = v45[200] & 0xFB | v77;
                    }
                    v464 = v485;
                    sub_216D6CFF8((void ***)&v464);
                  }
                }
                if (sub_216FDC16C(1))
                {
                  pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim(v447, v78, v79, (uint64_t)v485);
                  sub_216D0162C((uint64_t)v485, (int *)&v468);
                  uint64_t v80 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v468);
                  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v81, v82, v45[104] & 1, (v45[104] >> 1) & 1, (v45[104] >> 2) & 1);
                  v441 = (pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *)v80;
                  if (SHIBYTE(v466) >= 0) {
                    uint64_t v85 = &v464;
                  }
                  else {
                    uint64_t v85 = v464;
                  }
                  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v83, v84, v45[152] & 1, (v45[152] >> 1) & 1, (v45[152] >> 2) & 1);
                  if (v484[0] >= 0) {
                    uint64_t v88 = &v482;
                  }
                  else {
                    uint64_t v88 = v482;
                  }
                  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v86, v87, v45[200] & 1, (v45[200] >> 1) & 1, (v45[200] >> 2) & 1);
                  int v89 = SHIBYTE(v480);
                  int v90 = (void **)v478;
                  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v91, v92, v45[248] & 1, (v45[248] >> 1) & 1, (v45[248] >> 2) & 1);
                  int v95 = &v478;
                  if (v89 < 0) {
                    int v95 = v90;
                  }
                  int v96 = &v475;
                  if (v477 < 0) {
                    int v96 = v475;
                  }
                  pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]\n  Initial state for skel <%s>:\n    _skinningXformsTask: %s\n    _skinningInvTransposeXformsTask: %s\n    _blendShapeWeightsTask: %s\n    _skelLocalToWorldXformTask: %s\n", v93, v94, v441, v85, v88, v95, v96);
                  if (SHIBYTE(v477) < 0) {
                    operator delete(v475);
                  }
                  if (SHIBYTE(v480) < 0) {
                    operator delete(v478);
                  }
                  if (SHIBYTE(v484[0]) < 0) {
                    operator delete(v482);
                  }
                  if (SHIBYTE(v466) < 0) {
                    operator delete(v464);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v468 + 1);
                  sub_21697C414(&v468);
                  if (((uint64_t)v485[3] & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v485[3] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v485[2] + 1);
                  sub_21697C414(&v485[2]);
                  if (v485[1]) {
                    sub_216D16E0C((atomic_ullong *)v485[1]);
                  }
                }
              }
              v471 = v45 + 24;
              v472 = v45;
              if (*v449)
              {
                int v97 = *(_DWORD *)(*(void *)(a2 + 104) + 4 * v36);
                int v98 = *(const pxrInternal__aapl__pxrReserved__::UsdPrim **)(v446 + (v36 << 6) + 56);
                uint64_t v99 = 400 * *v449;
                do
                {
                  int v100 = (std::__shared_weak_count *)operator new(0x8C8uLL);
                  v100->__shared_owners_ = 0;
                  v100->__shared_weak_owners_ = 0;
                  v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C76F350;
                  v485[0] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)sub_216FF7140((uint64_t)&v100[1], (unsigned char *)a2, v98, &v471, v41, v97, (pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)__p);
                  v485[1] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v100;
                  if (LODWORD(v100[18].__shared_owners_)) {
                    sub_21696CBE4((unint64_t *)&v455, (long long *)v485);
                  }
                  sub_216784EC4(v100);
                  int v98 = (const pxrInternal__aapl__pxrReserved__::UsdPrim *)((char *)v98 + 400);
                  v99 -= 400;
                }
                while (v99);
              }
              if ((~v45[104] & 3) == 0
                || (~v45[152] & 3) == 0
                || (~v45[200] & 3) == 0
                || (~v45[248] & 3) == 0)
              {
                int v101 = (void *)v458.i64[1];
                unint64_t v102 = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v459[0];
                if (v458.i64[1] >= v459[0])
                {
                  uint64_t v104 = (void *)v458.i64[0];
                  uint64_t v105 = (v458.i64[1] - v458.i64[0]) >> 4;
                  unint64_t v106 = v105 + 1;
                  if ((unint64_t)(v105 + 1) >> 60) {
                    sub_21677CB10();
                  }
                  if ((v459[0] - v458.i64[0]) >> 3 > v106) {
                    unint64_t v106 = (v459[0] - v458.i64[0]) >> 3;
                  }
                  if (v459[0] - v458.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL) {
                    unint64_t v107 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v107 = v106;
                  }
                  v486 = (void **)v459;
                  if (v107 >> 60) {
                    sub_21677CA1C();
                  }
                  int v108 = (char *)operator new(16 * v107);
                  uint64_t v109 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery **)&v108[16 * v105];
                  *uint64_t v109 = v447;
                  v109[1] = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v45;
                  atomic_fetch_add_explicit((atomic_ullong *volatile)v45 + 1, 1uLL, memory_order_relaxed);
                  if (v101 == v104)
                  {
                    int64x2_t v112 = vdupq_n_s64((unint64_t)v101);
                    int v110 = &v108[16 * v105];
                  }
                  else
                  {
                    int v110 = &v108[16 * v105];
                    do
                    {
                      long long v111 = *((_OWORD *)v101 - 1);
                      v101 -= 2;
                      *((_OWORD *)v110 - 1) = v111;
                      v110 -= 16;
                      *int v101 = 0;
                      v101[1] = 0;
                    }
                    while (v101 != v104);
                    int64x2_t v112 = v458;
                    unint64_t v102 = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v459[0];
                  }
                  int v103 = v109 + 2;
                  v458.i64[0] = (uint64_t)v110;
                  v458.i64[1] = (uint64_t)(v109 + 2);
                  *(int64x2_t *)&v485[1] = v112;
                  v459[0] = &v108[16 * v107];
                  v485[3] = v102;
                  v485[0] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v112.i64[0];
                  sub_21696A2C0((uint64_t)v485);
                }
                else
                {
                  *(void *)v458.i64[1] = v447;
                  v101[1] = v45;
                  int v103 = v101 + 2;
                  atomic_fetch_add_explicit((atomic_ullong *volatile)v45 + 1, 1uLL, memory_order_relaxed);
                }
                v458.i64[1] = (uint64_t)v103;
              }
              sub_216784EC4((std::__shared_weak_count *)v45);
            }
            sub_2168F83DC((uint64_t)&v489);
            sub_216FDD310((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v487[1]);
            sub_216FDD340((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v487);
          }
        }
      }
      ++v36;
      uint64_t v35 = a2;
    }
    while (v36 < (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 6);
  }
  uint64_t v114 = (void *)sub_216FDC16C(1);
  if (v114) {
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Computing time samples for skinning\n", v115, v116);
  }
  v452 = 0;
  v453 = 0;
  unint64_t v454 = 0;
  memset(v485, 0, sizeof(v485));
  LODWORD(v486) = 1065353216;
  unint64_t v117 = (uint64_t *)v458.i64[1];
  int v118 = (uint64_t *)v458.i64[0];
  if (v458.i64[0] != v458.i64[1])
  {
    do
    {
      uint64_t v119 = (void **)sub_216FF9D2C((uint64_t)v485, v118);
      uint64_t v114 = *v119;
      if (*v119)
      {
        v119[1] = v114;
        operator delete(v114);
        *uint64_t v119 = 0;
        v119[1] = 0;
        v119[2] = 0;
      }
      v118 += 2;
      *uint64_t v119 = 0;
      v119[1] = 0;
      v119[2] = 0;
    }
    while (v118 != v117);
    v464 = &v458;
    v465 = (pxrInternal__aapl__pxrReserved__ *)a3;
    v466 = (int64x2_t *)v485;
    uint64_t v120 = v458.i64[1] - v458.i64[0];
    if (v458.i64[1] != v458.i64[0])
    {
      if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency((pxrInternal__aapl__pxrReserved__ *)v114))
      {
        LODWORD(v487[0]) = 0;
        uint64_t v495 = 65539;
        int v496 = 55;
        tbb::task_group_context::init((uint64_t)v487, v121, v122, v123);
        v482 = v487;
        uint64_t v124 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v482, 0x38uLL);
        *(unsigned char *)(v124 - 11) = 1;
        *(void *)uint64_t v124 = &unk_26C76F418;
        *(void *)(v124 + 8) = v120 >> 4;
        *(_OWORD *)(v124 + 16) = xmmword_217411D30;
        *(void *)(v124 + 32) = &v464;
        unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v124);
        *(_DWORD *)(v124 + 48) = 0;
        *(unsigned char *)(v124 + 52) = 5;
        *(void *)(v124 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v124 - 40) + 16))(*(void *)(v124 - 40), v124, v124 - 8);
        tbb::task_group_context::~task_group_context((tbb::task_group_context *)v487);
      }
      else
      {
        sub_216FFA7D8((uint64_t)&v464, 0, v120 >> 4);
      }
    }
  }
  int v126 = v455;
  for (uint64_t i = v456; v126 != i; v126 += 2)
  {
    uint64_t v128 = *v126;
    uint64_t v129 = sub_216FF9D2C((uint64_t)v485, (uint64_t *)(*v126 + 400));
    v464 = 0;
    v465 = 0;
    v466 = 0;
    if ((~*(unsigned __int8 *)(v128 + 512) & 3) == 0
      && pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetTimeSamplesInInterval(v128 + 560, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a3, (uint64_t)&v464))
    {
      sub_216FFAC74((uint64_t)v129, v129[1], (char *)v464, (char *)v465, (v465 - (pxrInternal__aapl__pxrReserved__ *)v464) >> 3);
    }
    if ((~*(unsigned __int8 *)(v128 + 680) & 3) == 0
      && pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetTimeSamplesInInterval(v128 + 728, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a3, (uint64_t)&v464))
    {
      sub_216FFAC74((uint64_t)v129, v129[1], (char *)v464, (char *)v465, (v465 - (pxrInternal__aapl__pxrReserved__ *)v464) >> 3);
    }
    if ((~*(unsigned __int8 *)(v128 + 848) & 3) == 0
      && pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetTimeSamplesInInterval(v128 + 896, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a3, (uint64_t)&v464))
    {
      sub_216FFAC74((uint64_t)v129, v129[1], (char *)v464, (char *)v465, (v465 - (pxrInternal__aapl__pxrReserved__ *)v464) >> 3);
    }
    if ((~*(unsigned __int8 *)(v128 + 1152) & 3) == 0)
    {
      uint64_t Attribute = (pxrInternal__aapl__pxrReserved__::UsdProperty *)pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(v128 + 1288));
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(Attribute, v131))
      {
        if (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetTimeSamplesInInterval(v128 + 1288, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a3, (uint64_t)&v464))sub_216FFAC74((uint64_t)v129, v129[1], (char *)v464, (char *)v465, (v465 - (pxrInternal__aapl__pxrReserved__ *)v464) >> 3); {
      }
        }
    }
    if ((~*(unsigned __int8 *)(v128 + 1488) & 3) == 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v487, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(v128 + 48));
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v490, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(v128 + 96));
      for (uint64_t j = 0; j != 12; j += 6)
      {
        if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetTimeSamplesInInterval((uint64_t)&v487[j], (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a3, (uint64_t)&v464))sub_216FFAC74((uint64_t)v129, v129[1], (char *)v464, (char *)v465, (v465 - (pxrInternal__aapl__pxrReserved__ *)v464) >> 3); {
      }
        }
      for (uint64_t k = 0; k != -96; k -= 48)
      {
        uint64_t v134 = *(void *)((char *)&v492 + k);
        if ((v134 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v134 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v135 = *(void *)((char *)&v491 + k + 8);
        if ((v135 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v135 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((long long *)((char *)&v491 + k + 4));
        sub_21697C414((long long *)((char *)&v491 + k));
        char v136 = *(atomic_ullong **)((char *)&v490 + k + 8);
        if (v136) {
          sub_216D16E0C(v136);
        }
      }
    }
    if ((~*(unsigned __int8 *)(v128 + 1576) & 3) == 0) {
      sub_216FFA9D0((int *)v128, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a3, (uint64_t)v129);
    }
    if ((~*(unsigned __int8 *)(v128 + 1712) & 3) == 0)
    {
      sub_216D6B1F8(v128, (uint64_t)v487);
      sub_216FFA9D0((int *)v487, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a3, (uint64_t)v129);
      if ((BYTE8(v488) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v488 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v488 + 1);
      sub_21697C414(&v488);
      if (v487[1]) {
        sub_216D16E0C((atomic_ullong *)v487[1]);
      }
    }
    uint64_t v114 = v464;
    if (v464)
    {
      v465 = (pxrInternal__aapl__pxrReserved__ *)v464;
      operator delete(v464);
    }
  }
  v464 = v485;
  v465 = (pxrInternal__aapl__pxrReserved__ *)&v458;
  if (v458.i64[1] != v458.i64[0])
  {
    uint64_t v140 = (v458.i64[1] - v458.i64[0]) >> 4;
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency((pxrInternal__aapl__pxrReserved__ *)v114))
    {
      LODWORD(v487[0]) = 0;
      uint64_t v495 = 65539;
      int v496 = 55;
      tbb::task_group_context::init((uint64_t)v487, v137, v138, v139);
      v482 = v487;
      uint64_t v141 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v482, 0x38uLL);
      *(unsigned char *)(v141 - 11) = 1;
      *(void *)uint64_t v141 = &unk_26C76F460;
      *(void *)(v141 + 8) = v140;
      *(_OWORD *)(v141 + 16) = xmmword_217411D30;
      *(void *)(v141 + 32) = &v464;
      unint64_t v142 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v141);
      *(_DWORD *)(v141 + 48) = 0;
      *(unsigned char *)(v141 + 52) = 5;
      *(void *)(v141 + 40) = (v142 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v141 - 40) + 16))(*(void *)(v141 - 40), v141, v141 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v487);
    }
    else
    {
      uint64_t v143 = 0;
      do
      {
        uint64_t v144 = (double **)sub_216FF9D2C((uint64_t)v464, (uint64_t *)(*(void *)v465 + v143));
        std::__sort<std::__less<double,double> &,double *>();
        uint64_t v145 = sub_216C4287C(*v144, v144[1]);
        if (v144[1] != v145) {
          v144[1] = v145;
        }
        v143 += 16;
        --v140;
      }
      while (v140);
    }
  }
  v483 = 0;
  v482 = 0;
  v484[0] = 0;
  uint64_t v146 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530((uint64_t *)&v460);
  if (pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v146))
  {
    uint64_t v147 = (pxrInternal__aapl__pxrReserved__::PcpCache **)sub_216D01530((uint64_t *)&v460);
    double TimeCodesPerSecond = pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v147);
    uint64_t v149 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530((uint64_t *)&v460);
    double FramesPerSecond = pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v149);
    if (fabs(TimeCodesPerSecond) >= 0.000001 && fabs(FramesPerSecond) >= 0.000001)
    {
      uint64_t v151 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530((uint64_t *)&v460);
      double StartTimeCode = pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v151);
      uint64_t v153 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530((uint64_t *)&v460);
      double EndTimeCode = pxrInternal__aapl__pxrReserved__::UsdStage::GetEndTimeCode(v153);
      if (EndTimeCode >= StartTimeCode)
      {
        double v155 = fabs(TimeCodesPerSecond / FramesPerSecond);
        unint64_t v156 = (uint64_t)((EndTimeCode - StartTimeCode) / v155 + 1.0);
        sub_2168042E8(&v482, v156);
        if ((v156 & 0x8000000000000000) == 0)
        {
          uint64_t v157 = 0;
          do
          {
            double v158 = StartTimeCode + v155 * (double)v157;
            if (*(double *)a3 < v158 || (*(double *)a3 == v158 ? (BOOL v159 = *(unsigned char *)(a3 + 8) == 0) : (BOOL v159 = 1), !v159))
            {
              double v160 = *(double *)(a3 + 16);
              if (v160 > v158 || (v160 == v158 ? (BOOL v161 = *(unsigned char *)(a3 + 24) == 0) : (BOOL v161 = 1), !v161))
              {
                uint64_t v162 = v483;
                if ((unint64_t)v483 >= v484[0])
                {
                  uint64_t v164 = (double *)v482;
                  uint64_t v165 = ((char *)v483 - (unsigned char *)v482) >> 3;
                  unint64_t v166 = v165 + 1;
                  if ((unint64_t)(v165 + 1) >> 61) {
                    sub_21677CB10();
                  }
                  uint64_t v167 = v484[0] - (void)v482;
                  if ((uint64_t)(v484[0] - (void)v482) >> 2 > v166) {
                    unint64_t v166 = v167 >> 2;
                  }
                  if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v168 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v168 = v166;
                  }
                  if (v168)
                  {
                    uint64_t v169 = (char *)sub_21677CB28((uint64_t)v484, v168);
                    uint64_t v162 = v483;
                    uint64_t v164 = (double *)v482;
                  }
                  else
                  {
                    uint64_t v169 = 0;
                  }
                  uint64_t v170 = (double *)&v169[8 * v165];
                  *uint64_t v170 = v158;
                  uint64_t v163 = v170 + 1;
                  while (v162 != v164)
                  {
                    uint64_t v171 = *((void *)v162-- - 1);
                    *((void *)v170-- - 1) = v171;
                  }
                  v482 = v170;
                  v483 = v163;
                  v484[0] = &v169[8 * v168];
                  if (v164) {
                    operator delete(v164);
                  }
                }
                else
                {
                  double *v483 = v158;
                  uint64_t v163 = v162 + 1;
                }
                v483 = v163;
              }
            }
            BOOL v159 = v157++ == v156;
          }
          while (!v159);
        }
      }
    }
  }
  v478 = 0;
  v479 = 0;
  v480 = 0;
  v475 = 0;
  v476 = 0;
  uint64_t v477 = 0;
  v472 = 0;
  uint64_t v473 = 0;
  v471 = 0;
  sub_21677CA50(&v471, v482, (uint64_t)v483, ((char *)v483 - (unsigned char *)v482) >> 3);
  sub_216FFA1A0((double **)&v471, (double **)&v478, (double **)&v475);
  if (v471)
  {
    v472 = v471;
    operator delete(v471);
  }
  for (m = v485[2]; m; m = *(pxrInternal__aapl__pxrReserved__::UsdAttribute **)m)
  {
    v468 = 0;
    v469 = 0;
    uint64_t v470 = 0;
    sub_21677CA50(&v468, *((const void **)m + 4), *((void *)m + 5), (uint64_t)(*((void *)m + 5) - *((void *)m + 4)) >> 3);
    sub_216FFA1A0((double **)&v468, (double **)&v478, (double **)&v475);
    if (v468)
    {
      v469 = v468;
      operator delete(v468);
    }
  }
  v453 = (char *)v452;
  sub_216818B74(&v452, ((v479 - (unsigned char *)v478) >> 3) + 1);
  uint64_t v173 = v453;
  if ((unint64_t)v453 >= v454)
  {
    uint64_t v175 = (char *)v452;
    uint64_t v176 = (v453 - (unsigned char *)v452) >> 3;
    unint64_t v177 = v176 + 1;
    if ((unint64_t)(v176 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v178 = v454 - (void)v452;
    if ((uint64_t)(v454 - (void)v452) >> 2 > v177) {
      unint64_t v177 = v178 >> 2;
    }
    if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v179 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v179 = v177;
    }
    if (v179)
    {
      v180 = (char *)sub_21677CB28((uint64_t)&v454, v179);
      uint64_t v175 = (char *)v452;
      uint64_t v173 = v453;
    }
    else
    {
      v180 = 0;
    }
    v181 = &v180[8 * v176];
    v182 = &v180[8 * v179];
    *(void *)v181 = 0x7FF8000000000000;
    uint64_t v174 = v181 + 8;
    while (v173 != v175)
    {
      uint64_t v183 = *((void *)v173 - 1);
      v173 -= 8;
      *((void *)v181 - 1) = v183;
      v181 -= 8;
    }
    v452 = v181;
    v453 = v174;
    unint64_t v454 = (unint64_t)v182;
    if (v175) {
      operator delete(v175);
    }
  }
  else
  {
    *(void *)v453 = 0x7FF8000000000000;
    uint64_t v174 = v173 + 8;
  }
  v453 = v174;
  v184 = sub_216FFB374((uint64_t)&v452, v174, (uint64_t *)v478, (uint64_t *)v479, (v479 - (unsigned char *)v478) >> 3);
  v464 = &v452;
  v465 = (pxrInternal__aapl__pxrReserved__ *)v485;
  v466 = &v458;
  v467[0] = &v478;
  v467[1] = &v482;
  uint64_t v185 = v458.i64[1] - v458.i64[0];
  if (v458.i64[1] != v458.i64[0])
  {
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency((pxrInternal__aapl__pxrReserved__ *)v184))
    {
      LODWORD(v487[0]) = 0;
      uint64_t v495 = 65539;
      int v496 = 55;
      tbb::task_group_context::init((uint64_t)v487, v186, v187, v188);
      v474 = v487;
      uint64_t v190 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v474, 0x38uLL);
      *(unsigned char *)(v190 - 11) = 1;
      *(void *)uint64_t v190 = &unk_26C76F4A8;
      *(void *)(v190 + 8) = v185 >> 4;
      *(_OWORD *)(v190 + 16) = xmmword_217411D30;
      *(void *)(v190 + 32) = &v464;
      unint64_t v191 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v190);
      *(_DWORD *)(v190 + 48) = 0;
      *(unsigned char *)(v190 + 52) = 5;
      *(void *)(v190 + 40) = (v191 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v190 - 40) + 16))(*(void *)(v190 - 40), v190, v190 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v487);
    }
    else
    {
      sub_216FFB9CC((uint64_t)&v464, 0, v185 >> 4, v189);
    }
  }
  if (v475)
  {
    v476 = v475;
    operator delete(v475);
  }
  if (v478)
  {
    v479 = (char *)v478;
    operator delete(v478);
  }
  if (v482)
  {
    v483 = (double *)v482;
    operator delete(v482);
  }
  sub_216FFA2A0((uint64_t)v485);
  if (sub_216FDC16C(1)) {
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Baking skinning for %zu prims, deformed by %zu skels, over %zu time samples\n", v192, v193, ((char *)v456 - (char *)v455) >> 4, (v458.i64[1] - v458.i64[0]) >> 4, (v453 - (unsigned char *)v452) >> 3);
  }
  v194 = (pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)operator new(8uLL);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock(v194);
  v442 = v194;
  sub_216FFD698(&v482, (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 4);
  v195 = v452;
  if (v453 == v452)
  {
LABEL_390:
    if (sub_216FDC16C(1)) {
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Convert SkelRoot prims to Xforms\n", v308, v309);
    }
    sub_216FFC2AC(v485, (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 6);
    uint64_t v310 = a2;
    uint64_t v311 = *(void *)(a2 + 24);
    if (*(void *)(a2 + 32) != v311)
    {
      unint64_t v312 = 0;
      do
      {
        unint64_t v313 = *(unsigned int *)(*(void *)(v310 + 104) + 4 * v312);
        uint64_t v315 = v310 + 48;
        uint64_t v314 = *(void *)(v310 + 48);
        if (v313 < (*(void *)(v315 + 8) - v314) >> 4)
        {
          uint64_t v316 = v311 + (v312 << 6);
          uint64_t v317 = *(void *)(v316 + 24);
          if (v317)
          {
            v318 = (uint64_t *)(v314 + 16 * v313);
            v319 = *(pxrInternal__aapl__pxrReserved__::UsdSkelRoot **)(v316 + 56);
            uint64_t v320 = 400 * v317;
            while (1)
            {
              pxrInternal__aapl__pxrReserved__::UsdSkelRoot::Find(v319, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v464);
              if (v465)
              {
                if ((*((unsigned char *)v465 + 57) & 8) == 0 && (*((unsigned int (**)(void **))v464 + 4))(&v464)) {
                  break;
                }
              }
              pxrInternal__aapl__pxrReserved__::UsdSkelRoot::~UsdSkelRoot((pxrInternal__aapl__pxrReserved__::UsdSkelRoot *)&v464);
              v319 = (pxrInternal__aapl__pxrReserved__::UsdSkelRoot *)((char *)v319 + 400);
              v320 -= 400;
              if (!v320) {
                goto LABEL_412;
              }
            }
            sub_216D16CFC((uint64_t)v487, (uint64_t *)&v465, &v466);
            sub_216D0162C((uint64_t)v487, (int *)&v475);
            pxrInternal__aapl__pxrReserved__::SdfCreatePrimInLayer(v318, (uint64_t)&v475, &v478);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v475 + 1);
            sub_21697C414(&v475);
            if ((BYTE8(v488) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v488 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v488 + 1);
            sub_21697C414(&v488);
            if (v487[1]) {
              sub_216D16E0C((atomic_ullong *)v487[1]);
            }
            if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v478) & 1) == 0)
            {
              v322 = sub_216A663FC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v478);
              v323 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216FF911C();
              if ((*((void *)v323 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
                EmptyString = (uint64_t *)((*((void *)v323 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
              }
              else {
                EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v323);
              }
              pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetTypeName(v322, (uint64_t)EmptyString);
              v325 = sub_216A663FC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v478);
              pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetSpecifier(v325, 0);
            }
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v321, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v478);
            pxrInternal__aapl__pxrReserved__::UsdSkelRoot::~UsdSkelRoot((pxrInternal__aapl__pxrReserved__::UsdSkelRoot *)&v464);
          }
        }
LABEL_412:
        ++v312;
        uint64_t v310 = a2;
        uint64_t v311 = *(void *)(a2 + 24);
      }
      while (v312 < (*(void *)(a2 + 32) - v311) >> 6);
    }
    v487[0] = v485;
    sub_216F50D48((void ***)v487);
    if (v482)
    {
      v483 = (double *)v482;
      operator delete(v482);
    }
    unint64_t v326 = (unint64_t)v442;
    if (sub_216FDC16C(1)) {
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Processing stage changes\n", v327, v328);
    }
    v329 = sub_21697BEF0(v442);
    operator delete(v329);
    if (*(unsigned char *)(a2 + 16))
    {
      if (sub_216FDC16C(1)) {
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Post-updating prim extents\n", v330, v331);
      }
      memset(v485, 0, 24);
      sub_216FF6B64((unint64_t *)v485, ((char *)v456 - (char *)v455) >> 4);
      unint64_t v326 = (unint64_t)v455;
      v332 = v456;
      if (v455 != v456)
      {
        do
        {
          if ((*(unsigned char *)(*(void *)v326 + 416) & 9) != 0
            && pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(void *)v326 + 2040)))
          {
            sub_21696CBE4((unint64_t *)v485, (long long *)v326);
          }
          v326 += 16;
        }
        while ((uint64_t *)v326 != v332);
      }
      if (sub_216FDC16C(1)) {
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]   Updating extents for %zu prims\n", v333, v334, (v485[1] - v485[0]) >> 4);
      }
      if (v485[0] != v485[1])
      {
        v335 = (pxrInternal__aapl__pxrReserved__ *)sub_216FFC464(&v464, ((v453 - (unsigned char *)v452) >> 3) * ((v485[1] - v485[0]) >> 4));
        v482 = v485;
        v483 = (double *)&v452;
        v484[0] = &v464;
        int64_t v336 = v485[1] - v485[0];
        if (v485[1] != v485[0])
        {
          if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v335))
          {
            LODWORD(v487[0]) = 0;
            uint64_t v495 = 65539;
            int v496 = 55;
            tbb::task_group_context::init((uint64_t)v487, v337, v338, v339);
            v478 = v487;
            unint64_t v326 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v478, 0x38uLL);
            *(unsigned char *)(v326 - 11) = 1;
            *(void *)unint64_t v326 = &unk_26C76F538;
            *(void *)(v326 + 8) = v336 >> 4;
            *(_OWORD *)(v326 + 16) = xmmword_217411D30;
            *(void *)(v326 + 32) = &v482;
            unint64_t v340 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v326);
            *(_DWORD *)(v326 + 48) = 0;
            *(unsigned char *)(v326 + 52) = 5;
            *(void *)(v326 + 40) = (v340 >> 1) & 0x7FFFFFFFFFFFFFFELL;
            (*(void (**)(void, unint64_t, unint64_t))(**(void **)(v326 - 40) + 16))(*(void *)(v326 - 40), v326, v326 - 8);
            tbb::task_group_context::~task_group_context((tbb::task_group_context *)v487);
          }
          else
          {
            sub_216FFC944((void **)&v482, 0, v336 >> 4);
          }
        }
        v342 = v485[0];
        if (v485[1] != v485[0])
        {
          unint64_t v343 = 0;
          unint64_t v326 = (unint64_t)&v488 + 4;
          do
          {
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v482, *((const pxrInternal__aapl__pxrReserved__::UsdPrim **)v342 + 2 * v343));
            v482 = &unk_26C76C628;
            pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::GetExtentAttr((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)&v482, (uint64_t)v487);
            pxrInternal__aapl__pxrReserved__::UsdAttribute::Clear((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v487, v344);
            if (v453 != v452)
            {
              unint64_t v345 = 0;
              unint64_t v346 = (v453 - (unsigned char *)v452) >> 3;
              do
              {
                if (*((void *)v464 + 5 * v345 + 5 * v343 * v346)) {
                  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
                }
                ++v345;
                unint64_t v346 = (v453 - (unsigned char *)v452) >> 3;
              }
              while (v345 < v346);
            }
            if ((BYTE8(v488) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v488 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v488 + 1);
            sub_21697C414(&v488);
            if (v487[1]) {
              sub_216D16E0C((atomic_ullong *)v487[1]);
            }
            pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)&v482);
            ++v343;
            v342 = v485[0];
          }
          while (v343 < (v485[1] - v485[0]) >> 4);
        }
        v487[0] = &v464;
        sub_216F2C49C((void ***)v487);
      }
      sub_216966BB8((void **)v485);
    }
    if (*(unsigned char *)(a2 + 17))
    {
      if (sub_216FDC16C(1)) {
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Updating extent hints\n", v347, v348);
      }
      memset(v485, 0, sizeof(v485));
      LODWORD(v486) = 1065353216;
      v445 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v456;
      if (v455 != v456)
      {
        v349 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v455;
        do
        {
          v448 = v349;
          v350 = *(_DWORD **)v349;
          LODWORD(v464) = **(_DWORD **)v349;
          v351 = (atomic_ullong *)*((void *)v350 + 1);
          v465 = (pxrInternal__aapl__pxrReserved__ *)v351;
          if (v351) {
            atomic_fetch_add_explicit(v351 + 6, 1uLL, memory_order_relaxed);
          }
          sub_216981010(&v466, v350 + 4);
          sub_21698105C((_DWORD *)&v466 + 1, v350 + 5);
          uint64_t v352 = *((void *)v350 + 3);
          v467[0] = v352;
          if ((v352 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v352 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v467[0] &= 0xFFFFFFFFFFFFFFF8;
          }
          while (!pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v464))
          {
            v354 = v465;
            if (!v465 || (uint64_t v355 = *((void *)v465 + 7), (v355 & 0x800) != 0))
            {
              pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v465, v353);
              uint64_t v355 = *((void *)v354 + 7);
            }
            if ((v355 & 4) != 0)
            {
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v482, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v464);
              v484[1] = 0;
              v482 = &unk_26C76CB40;
              pxrInternal__aapl__pxrReserved__::UsdGeomModelAPI::GetExtentsHintAttr((pxrInternal__aapl__pxrReserved__::UsdGeomModelAPI *)&v482, (uint64_t)&v478);
              if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v478, v356))
              {
                v487[0] = 0;
                LOBYTE(v487[1]) = 0;
                sub_216D6EF4C((uint64_t)v487, (unsigned int *)&v464, &v465, (unsigned int *)&v466, v467);
                unint64_t v358 = bswap64(0x9E3779B97F4A7C55 * (unint64_t)v487[0]);
                unint64_t v359 = (unint64_t)v485[1];
                if (v485[1])
                {
                  uint8x8_t v360 = (uint8x8_t)vcnt_s8((int8x8_t)v485[1]);
                  v360.i16[0] = vaddlv_u8(v360);
                  if (v360.u32[0] > 1uLL)
                  {
                    unint64_t v326 = v358;
                    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v358 >= v485[1]) {
                      unint64_t v326 = v358 % (unint64_t)v485[1];
                    }
                  }
                  else
                  {
                    unint64_t v326 = ((unint64_t)v485[1] - 1) & v358;
                  }
                  v361 = (void *)*((void *)v485[0] + v326);
                  if (v361)
                  {
                    v362 = (void *)*v361;
                    if (*v361)
                    {
                      do
                      {
                        unint64_t v363 = v362[1];
                        if (v363 == v358)
                        {
                          if (*((_DWORD *)v362 + 4) == v464
                            && (pxrInternal__aapl__pxrReserved__ *)v362[3] == v465
                            && (int64x2_t *)v362[4] == v466
                            && (v362[5] & 0xFFFFFFFFFFFFFFF8) == (v467[0] & 0xFFFFFFFFFFFFFFF8))
                          {
                            goto LABEL_544;
                          }
                        }
                        else
                        {
                          if (v360.u32[0] > 1uLL)
                          {
                            if ((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v363 >= v485[1]) {
                              v363 %= (unint64_t)v485[1];
                            }
                          }
                          else
                          {
                            v363 &= (unint64_t)v485[1] - 1;
                          }
                          if (v363 != v326) {
                            break;
                          }
                        }
                        v362 = (void *)*v362;
                      }
                      while (v362);
                    }
                  }
                }
                v364 = operator new(0x58uLL);
                v365 = v364;
                v487[0] = v364;
                v487[1] = &v485[2];
                LOBYTE(v488) = 0;
                void *v364 = 0;
                v364[1] = v358;
                *((_DWORD *)v364 + 4) = v464;
                v366 = v465;
                v364[3] = v465;
                if (v366) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)v366 + 6, 1uLL, memory_order_relaxed);
                }
                sub_216981010((_DWORD *)v364 + 8, &v466);
                sub_21698105C((_DWORD *)v365 + 9, (_DWORD *)&v466 + 1);
                uint64_t v367 = v467[0];
                v365[5] = v467[0];
                if ((v367 & 7) != 0
                  && (atomic_fetch_add_explicit((atomic_uint *volatile)(v367 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                {
                  v365[5] &= 0xFFFFFFFFFFFFFFF8;
                }
                v365[10] = 0;
                *((_OWORD *)v365 + 3) = 0u;
                *((_OWORD *)v365 + 4) = 0u;
                LOBYTE(v488) = 1;
                float v368 = (float)((unint64_t)v485[3] + 1);
                if (!v359 || (float)(*(float *)&v486 * (float)v359) < v368)
                {
                  BOOL v369 = (v359 & (v359 - 1)) == 0;
                  if (v359 < 3) {
                    BOOL v369 = 0;
                  }
                  unint64_t v370 = (2 * v359) | !v369;
                  unint64_t v371 = vcvtps_u32_f32(v368 / *(float *)&v486);
                  if (v370 <= v371) {
                    int8x8_t prime = (int8x8_t)v371;
                  }
                  else {
                    int8x8_t prime = (int8x8_t)v370;
                  }
                  if (*(void *)&prime == 1)
                  {
                    int8x8_t prime = (int8x8_t)2;
                  }
                  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
                  {
                    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
                  }
                  unint64_t v359 = (unint64_t)v485[1];
                  if ((pxrInternal__aapl__pxrReserved__::UsdAttribute *)*(void *)&prime <= v485[1])
                  {
                    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute *)*(void *)&prime < v485[1])
                    {
                      unint64_t v379 = vcvtps_u32_f32((float)(unint64_t)v485[3] / *(float *)&v486);
                      if (v485[1] < (pxrInternal__aapl__pxrReserved__::UsdAttribute *)3
                        || (uint8x8_t v380 = (uint8x8_t)vcnt_s8((int8x8_t)v485[1]),
                            v380.i16[0] = vaddlv_u8(v380),
                            v380.u32[0] > 1uLL))
                      {
                        unint64_t v379 = std::__next_prime(v379);
                      }
                      else
                      {
                        uint64_t v381 = 1 << -(char)__clz(v379 - 1);
                        if (v379 >= 2) {
                          unint64_t v379 = v381;
                        }
                      }
                      if (*(void *)&prime <= v379) {
                        int8x8_t prime = (int8x8_t)v379;
                      }
                      if (*(void *)&prime >= v359)
                      {
                        unint64_t v359 = (unint64_t)v485[1];
                      }
                      else
                      {
                        if (prime) {
                          goto LABEL_501;
                        }
                        v393 = v485[0];
                        v485[0] = 0;
                        if (v393) {
                          operator delete(v393);
                        }
                        unint64_t v359 = 0;
                        v485[1] = 0;
                      }
                    }
                  }
                  else
                  {
LABEL_501:
                    if (*(void *)&prime >> 61) {
                      sub_21677CA1C();
                    }
                    v373 = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)operator new(8 * *(void *)&prime);
                    v374 = v485[0];
                    v485[0] = v373;
                    if (v374) {
                      operator delete(v374);
                    }
                    uint64_t v375 = 0;
                    v485[1] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)prime;
                    do
                      *((void *)v485[0] + v375++) = 0;
                    while (*(void *)&prime != v375);
                    v376 = v485[2];
                    if (v485[2])
                    {
                      unint64_t v377 = *((void *)v485[2] + 1);
                      uint8x8_t v378 = (uint8x8_t)vcnt_s8(prime);
                      v378.i16[0] = vaddlv_u8(v378);
                      if (v378.u32[0] > 1uLL)
                      {
                        if (v377 >= *(void *)&prime) {
                          v377 %= *(void *)&prime;
                        }
                      }
                      else
                      {
                        v377 &= *(void *)&prime - 1;
                      }
                      *((void *)v485[0] + v377) = &v485[2];
                      v382 = *(pxrInternal__aapl__pxrReserved__::UsdAttribute **)v376;
                      if (*(void *)v376)
                      {
                        do
                        {
                          unint64_t v383 = *((void *)v382 + 1);
                          if (v378.u32[0] > 1uLL)
                          {
                            if (v383 >= *(void *)&prime) {
                              v383 %= *(void *)&prime;
                            }
                          }
                          else
                          {
                            v383 &= *(void *)&prime - 1;
                          }
                          if (v383 != v377)
                          {
                            if (!*((void *)v485[0] + v383))
                            {
                              *((void *)v485[0] + v383) = v376;
                              goto LABEL_526;
                            }
                            *(void *)v376 = *(void *)v382;
                            *(void *)v382 = **((void **)v485[0] + v383);
                            **((void **)v485[0] + v383) = v382;
                            v382 = v376;
                          }
                          unint64_t v383 = v377;
LABEL_526:
                          v376 = v382;
                          v382 = *(pxrInternal__aapl__pxrReserved__::UsdAttribute **)v382;
                          unint64_t v377 = v383;
                        }
                        while (v382);
                      }
                    }
                    unint64_t v359 = (unint64_t)prime;
                  }
                  if ((v359 & (v359 - 1)) != 0)
                  {
                    if (v358 >= v359) {
                      unint64_t v326 = v358 % v359;
                    }
                    else {
                      unint64_t v326 = v358;
                    }
                  }
                  else
                  {
                    unint64_t v326 = (v359 - 1) & v358;
                  }
                }
                v384 = (void *)*((void *)v485[0] + v326);
                if (v384)
                {
                  *(void *)v487[0] = *v384;
                  void *v384 = v487[0];
                }
                else
                {
                  *(void *)v487[0] = v485[2];
                  v485[2] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v487[0];
                  *((void *)v485[0] + v326) = &v485[2];
                  if (*(void *)v487[0])
                  {
                    unint64_t v385 = *(void *)(*(void *)v487[0] + 8);
                    if ((v359 & (v359 - 1)) != 0)
                    {
                      if (v385 >= v359) {
                        v385 %= v359;
                      }
                    }
                    else
                    {
                      v385 &= v359 - 1;
                    }
                    *((void **)v485[0] + v385) = v487[0];
                  }
                }
                v362 = v487[0];
                v487[0] = 0;
                ++v485[3];
                sub_216FFCBB0((uint64_t)v487);
LABEL_544:
                if (*((_DWORD *)v362 + 14))
                {
                  v487[0] = "vt/array.h";
                  v487[1] = "emplace_back";
                  *(void *)&long long v488 = 433;
                  *((void *)&v488 + 1) = "void pxrInternal__aapl__pxrReserved__::VtArray<std::shared_ptr<pxrInternal__a"
                                           "apl__pxrReserved__::(anonymous namespace)::_SkinningAdapter>>::emplace_back(A"
                                           "rgs &&...) [ELEM = std::shared_ptr<pxrInternal__aapl__pxrReserved__::(anonymo"
                                           "us namespace)::_SkinningAdapter>, Args = <const std::shared_ptr<pxrInternal__"
                                           "aapl__pxrReserved__::(anonymous namespace)::_SkinningAdapter> &>]";
                  LOBYTE(v489) = 0;
                  if (*((_DWORD *)v362 + 15))
                  {
                    if (*((_DWORD *)v362 + 16)) {
                      int v405 = 4;
                    }
                    else {
                      int v405 = 3;
                    }
                  }
                  else
                  {
                    int v405 = 2;
                  }
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v487, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v405);
                }
                else
                {
                  unint64_t v326 = v362[6];
                  if (v362[9]) {
                    goto LABEL_579;
                  }
                  uint64_t v386 = v362[10];
                  if (!v386) {
                    goto LABEL_553;
                  }
                  unint64_t v387 = atomic_load((unint64_t *)(v386 - 16));
                  if (v387 != 1) {
                    goto LABEL_579;
                  }
                  uint64_t v386 = v362[10];
                  if (!v386)
                  {
LABEL_553:
                    uint64_t v389 = 0;
                    goto LABEL_554;
                  }
                  if (v362[9]) {
                    v388 = v362 + 6;
                  }
                  else {
                    v388 = (uint64_t *)(v386 - 8);
                  }
                  uint64_t v389 = *v388;
LABEL_554:
                  if (v326 != v389)
                  {
                    long long v390 = *(_OWORD *)v448;
                    *(_OWORD *)(v386 + 16 * v326) = *(_OWORD *)v448;
                    if (*((void *)&v390 + 1)) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v390 + 1) + 8), 1uLL, memory_order_relaxed);
                    }
                    goto LABEL_557;
                  }
LABEL_579:
                  v394 = (void *)v362[10];
                  uint64_t v395 = 1;
                  do
                  {
                    unint64_t v396 = v395;
                    v395 *= 2;
                  }
                  while (v396 < v326 + 1);
                  sub_216851EE4((uint64_t)v487, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<std::shared_ptr<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinningAdapter>>::_AllocateNew(size_t) [ELEM = std::shared_ptr<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinningAdapter>]");
                  if (v396 > 0xFFFFFFFFFFFFFFELL) {
                    size_t v397 = -1;
                  }
                  else {
                    size_t v397 = 16 * v396 + 16;
                  }
                  v398 = operator new(v397);
                  void *v398 = 1;
                  v398[1] = v396;
                  v444 = v398;
                  while (LODWORD(v487[1])--)
                    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v487[0]);
                  v400 = v444 + 2;
                  if (v326)
                  {
                    v401 = &v394[2 * v326];
                    v402 = v444 + 2;
                    do
                    {
                      void *v402 = *v394;
                      uint64_t v403 = v394[1];
                      v402[1] = v403;
                      if (v403) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v403 + 8), 1uLL, memory_order_relaxed);
                      }
                      v394 += 2;
                      v402 += 2;
                    }
                    while (v394 != v401);
                  }
                  long long v404 = *(_OWORD *)v448;
                  *(_OWORD *)&v400[2 * v326] = *(_OWORD *)v448;
                  if (*((void *)&v404 + 1)) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v404 + 1) + 8), 1uLL, memory_order_relaxed);
                  }
                  sub_216FFCC74(v362 + 6);
                  v362[10] = v400;
LABEL_557:
                  ++v362[6];
                }
                pxrInternal__aapl__pxrReserved__::UsdAttribute::Clear((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v478, v357);
              }
              if ((v481 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v481 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v480 + 1);
              sub_21697C414(&v480);
              if (v479) {
                sub_216D16E0C((atomic_ullong *)v479);
              }
              pxrInternal__aapl__pxrReserved__::UsdGeomModelAPI::~UsdGeomModelAPI((pxrInternal__aapl__pxrReserved__::UsdGeomModelAPI *)&v482);
            }
            sub_216D6B1F8((uint64_t)&v464, (uint64_t)v487);
            LODWORD(v464) = v487[0];
            v391 = (pxrInternal__aapl__pxrReserved__ *)v487[1];
            v487[1] = 0;
            v392 = v465;
            v465 = v391;
            if (v392) {
              sub_216D16E0C((atomic_ullong *)v392);
            }
            sub_21697DE94((int *)&v466, (int *)&v488);
            sub_21697DEEC((int *)&v466 + 1, (int *)&v488 + 1);
            if ((v467[0] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v467[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            v467[0] = *((void *)&v488 + 1);
            *((void *)&v488 + 1) = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v488 + 1);
            sub_21697C414(&v488);
            if (v487[1]) {
              sub_216D16E0C((atomic_ullong *)v487[1]);
            }
          }
          if ((v467[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v467[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v466 + 1);
          sub_21697C414(&v466);
          if (v465) {
            sub_216D16E0C((atomic_ullong *)v465);
          }
          v349 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)((char *)v448 + 16);
        }
        while ((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)((char *)v448 + 16) != v445);
      }
      if (sub_216FDC16C(1)) {
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]   Updating extent hints for %zu prims\n", v406, v407, v485[3]);
      }
      if (v485[3])
      {
        v483 = 0;
        v482 = 0;
        v484[0] = 0;
        sub_216FFCA7C(&v482, (unint64_t)v485[3]);
        v478 = 0;
        v479 = 0;
        v480 = 0;
        v408 = v485[3];
        if (v485[3])
        {
          if (v485[3] >= (pxrInternal__aapl__pxrReserved__::UsdAttribute *)0x666666666666667) {
            sub_21677CB10();
          }
          v409 = (char *)operator new(40 * (uint64_t)v485[3]);
          bzero(v409, 40 * ((40 * (uint64_t)v408 - 40) / 0x28uLL) + 40);
          v478 = v409;
          v479 = &v409[40 * ((40 * (uint64_t)v408 - 40) / 0x28uLL) + 40];
          v480 = &v409[40 * (void)v408];
        }
        v410 = v485[2];
        if (v485[2])
        {
          uint64_t v411 = 0;
          uint64_t v412 = 0;
          do
          {
            v413 = (char *)v482;
            v414 = (char *)v482 + v411;
            *(_DWORD *)((char *)v482 + v411) = *((_DWORD *)v410 + 4);
            uint64_t v415 = *((void *)v410 + 3);
            if (v415) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v415 + 48), 1uLL, memory_order_relaxed);
            }
            v416 = (atomic_ullong *)*((void *)v414 + 1);
            *((void *)v414 + 1) = v415;
            if (v416) {
              sub_216D16E0C(v416);
            }
            v417 = (int *)&v413[v411];
            sub_2169C487C(v417 + 4, (_DWORD *)v410 + 8);
            sub_2169C48D4(v417 + 5, (_DWORD *)v410 + 9);
            sub_2168D2318((void *)v417 + 3, (void *)v410 + 5);
            v418 = (char *)v478;
            v419 = (char *)v478 + v412;
            if ((char *)v478 + v412 != (char *)v410 + 48)
            {
              long long v420 = *((_OWORD *)v410 + 4);
              *(_OWORD *)v487 = *((_OWORD *)v410 + 3);
              long long v488 = v420;
              uint64_t v421 = *((void *)v410 + 10);
              *(void *)&long long v489 = v421;
              if (v421)
              {
                v422 = (atomic_ullong *)*((void *)&v488 + 1);
                if (!*((void *)&v488 + 1)) {
                  v422 = (atomic_ullong *)(v421 - 16);
                }
                atomic_fetch_add_explicit(v422, 1uLL, memory_order_relaxed);
              }
              sub_216FFCC74(v419);
              *(_OWORD *)v419 = *(_OWORD *)v487;
              *((_OWORD *)v419 + 1) = v488;
              *(_OWORD *)v487 = 0u;
              long long v488 = 0u;
              *(void *)&v418[v412 + 32] = v421;
              *(void *)&long long v489 = 0;
              sub_216FFCC74(v487);
            }
            v410 = *(pxrInternal__aapl__pxrReserved__::UsdAttribute **)v410;
            v412 += 40;
            v411 += 32;
          }
          while (v410);
        }
        v423 = (pxrInternal__aapl__pxrReserved__ *)sub_216FFC464(&v475, (((char *)v456 - (char *)v455) >> 4)* ((v453 - (unsigned char *)v452) >> 3));
        v464 = &v452;
        v465 = (pxrInternal__aapl__pxrReserved__ *)&v478;
        v466 = (int64x2_t *)&v482;
        v467[0] = &v475;
        uint64_t v424 = v453 - (unsigned char *)v452;
        if (v453 != v452)
        {
          if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v423))
          {
            LODWORD(v487[0]) = 0;
            uint64_t v495 = 65539;
            int v496 = 55;
            tbb::task_group_context::init((uint64_t)v487, v425, v426, v427);
            v471 = v487;
            uint64_t v428 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v471, 0x38uLL);
            *(unsigned char *)(v428 - 11) = 1;
            *(void *)uint64_t v428 = &unk_26C76F580;
            *(void *)(v428 + 8) = v424 >> 3;
            *(_OWORD *)(v428 + 16) = xmmword_217411D30;
            *(void *)(v428 + 32) = &v464;
            unint64_t v429 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v428);
            *(_DWORD *)(v428 + 48) = 0;
            *(unsigned char *)(v428 + 52) = 5;
            *(void *)(v428 + 40) = (v429 >> 1) & 0x7FFFFFFFFFFFFFFELL;
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v428 - 40) + 16))(*(void *)(v428 - 40), v428, v428 - 8);
            tbb::task_group_context::~task_group_context((tbb::task_group_context *)v487);
          }
          else
          {
            sub_216FFD3BC((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)&v464, 0, v424 >> 3);
          }
        }
        v430 = (char *)v482;
        if (v483 != v482)
        {
          unint64_t v431 = 0;
          do
          {
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v487, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v430[32 * v431]);
            *((void *)&v488 + 1) = 0;
            v487[0] = &unk_26C76CB40;
            v433 = v452;
            v432 = v453;
            if (v453 != v452)
            {
              uint64_t v434 = 0;
              unint64_t v435 = 0;
              unint64_t v436 = (v453 - (unsigned char *)v452) >> 3;
              do
              {
                v437 = (unint64_t *)((char *)v475 + 40 * v435 + 40 * v431 * v436);
                if (*v437)
                {
                  pxrInternal__aapl__pxrReserved__::UsdGeomModelAPI::SetExtentsHint((uint64_t)v487, v437);
                  v433 = v452;
                  v432 = v453;
                }
                ++v435;
                unint64_t v436 = (v432 - v433) >> 3;
                v434 += 8;
              }
              while (v435 < v436);
            }
            pxrInternal__aapl__pxrReserved__::UsdGeomModelAPI::~UsdGeomModelAPI((pxrInternal__aapl__pxrReserved__::UsdGeomModelAPI *)v487);
            ++v431;
            v430 = (char *)v482;
          }
          while (v431 < ((char *)v483 - (unsigned char *)v482) >> 5);
        }
        v487[0] = &v475;
        sub_216F2C49C((void ***)v487);
        sub_216FFCB14(&v478);
        v487[0] = &v482;
        sub_216E1B384((void ***)v487);
      }
      sub_216FFCB50((uint64_t)v485);
    }
    if (*(unsigned char *)(a2 + 4)) {
      BOOL v113 = sub_216FF5B58(a2);
    }
    else {
      BOOL v113 = 1;
    }
    goto LABEL_642;
  }
  unint64_t v196 = 0;
  uint64_t v443 = 0;
  while (1)
  {
    v475 = (void *)v195[v196];
    if (sub_216FDC16C(1))
    {
      sub_216EF6394((double *)&v475);
      v201 = v487;
      if (SBYTE7(v488) < 0) {
        v201 = (void **)v487[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]   Baking skinning at sample %zu (time=%s)\n", v199, v200, v196, v201);
      if (SBYTE7(v488) < 0) {
        operator delete(v487[0]);
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::SetTime((uint64_t)__p, v197, v198, *(double *)&v475);
    if (sub_216FDC16C(1))
    {
      sub_216EF6394((double *)&v475);
      v204 = v487;
      if (SBYTE7(v488) < 0) {
        v204 = (void **)v487[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Reading skel transforms at time %s\n", v202, v203, v204);
      if (SBYTE7(v488) < 0) {
        operator delete(v487[0]);
      }
    }
    uint64_t v206 = v458.i64[1];
    uint64_t v205 = v458.i64[0];
    for (unint64_t n = v196 >> 6; v205 != v206; v205 += 16)
    {
      uint64_t v208 = *(void *)v205;
      if ((*(void *)(*(void *)(*(void *)v205 + 360) + 8 * n) & (1 << v196)) != 0)
      {
        if (sub_216FDC16C(1))
        {
          pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v208, v209, v210, (uint64_t)v487);
          sub_216D0162C((uint64_t)v487, (int *)&v464);
          v211 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v464);
          v478 = v463;
          sub_216EF6394((double *)&v478);
          v214 = v485;
          if (SHIBYTE(v485[2]) < 0) {
            v214 = (pxrInternal__aapl__pxrReserved__::UsdAttribute **)v485[0];
          }
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]   Updating transform for <%s> @ time %s\n", v212, v213, v211, v214);
          if (SHIBYTE(v485[2]) < 0) {
            operator delete(v485[0]);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v464 + 1);
          sub_21697C414(&v464);
          if ((BYTE8(v488) & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v488 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v488 + 1);
          sub_21697C414(&v488);
          if (v487[1]) {
            sub_216D16E0C((atomic_ullong *)v487[1]);
          }
        }
        pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v208, v209, v210, (uint64_t)&v464);
        if ((~*(unsigned __int8 *)(v208 + 224) & 3) == 0)
        {
          if (sub_216FDC16C(1))
          {
            sub_216D0162C((uint64_t)&v464, (int *)v487);
            v217 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v487);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v218, v219, "compute skel local to world xform", v217);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v487 + 1);
            sub_21697C414(v487);
          }
          if ((*(unsigned char *)(v208 + 224) & 0xC) != 0)
          {
            pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v208, v215, v216, (uint64_t)v485);
            pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetLocalToWorldTransform((pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)__p, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v485, (uint64_t)v487);
            long long v220 = v488;
            *(_OWORD *)(v208 + 232) = *(_OWORD *)v487;
            *(_OWORD *)(v208 + 248) = v220;
            long long v221 = v492;
            *(_OWORD *)(v208 + 296) = v491;
            *(_OWORD *)(v208 + 312) = v221;
            long long v222 = v494;
            *(_OWORD *)(v208 + 328) = v493;
            *(_OWORD *)(v208 + 344) = v222;
            long long v223 = v490;
            *(_OWORD *)(v208 + 264) = v489;
            *(_OWORD *)(v208 + 280) = v223;
            if (((uint64_t)v485[3] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v485[3] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v485[2] + 1);
            sub_21697C414(&v485[2]);
            if (v485[1]) {
              sub_216D16E0C((atomic_ullong *)v485[1]);
            }
            *(unsigned char *)(v208 + 224) |= 0x10u;
            if (sub_216FDC16C(1))
            {
              sub_216D0162C((uint64_t)&v464, (int *)v487);
              v224 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v487);
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Ran task '%s' for <%s>. Result: %d\n", v225, v226, "compute skel local to world xform", v224, (*(unsigned __int8 *)(v208 + 224) >> 4) & 1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v487 + 1);
              sub_21697C414(v487);
            }
            *(unsigned char *)(v208 + 224) &= ~8u;
          }
          else if (sub_216FDC16C(1))
          {
            sub_216D0162C((uint64_t)&v464, (int *)v487);
            v228 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v487);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v229, v230, "compute skel local to world xform", v228);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v487 + 1);
            sub_21697C414(v487);
          }
        }
        if ((v467[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v467[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v466 + 1);
        sub_21697C414(&v466);
        if (v465) {
          sub_216D16E0C((atomic_ullong *)v465);
        }
      }
    }
    if (sub_216FDC16C(1))
    {
      sub_216EF6394((double *)&v475);
      v233 = v487;
      if (SBYTE7(v488) < 0) {
        v233 = (void **)v487[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Reading skinned prim transforms at time %s\n", v231, v232, v233);
      if (SBYTE7(v488) < 0) {
        operator delete(v487[0]);
      }
    }
    v235 = v455;
    for (iuint64_t i = v456; v235 != ii; v235 += 2)
    {
      uint64_t v236 = *v235;
      if (*(_DWORD *)(*v235 + 416)
        && (*(void *)(*(void *)(*(void *)(v236 + 400) + 360) + 8 * n) & (1 << v196)) != 0)
      {
        if (sub_216FDC16C(1))
        {
          sub_216D0162C(v236, (int *)v485);
          v237 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v485);
          v464 = v463;
          sub_216EF6394((double *)&v464);
          v240 = v487;
          if (SBYTE7(v488) < 0) {
            v240 = (void **)v487[0];
          }
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]   Updating transforms for <%s> @ time %s\n", v238, v239, v237, v240);
          if (SBYTE7(v488) < 0) {
            operator delete(v487[0]);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v485 + 1);
          sub_21697C414(v485);
        }
        if ((~*(unsigned __int8 *)(v236 + 1576) & 3) == 0)
        {
          if (sub_216FDC16C(1))
          {
            sub_216D0162C(v236, (int *)v487);
            v241 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v487);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v242, v243, "compute prim local to world xform", v241);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v487 + 1);
            sub_21697C414(v487);
          }
          if ((*(unsigned char *)(v236 + 1576) & 0xC) != 0)
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetLocalToWorldTransform((pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)__p, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v236, (uint64_t)v487);
            long long v244 = v492;
            *(_OWORD *)(v236 + 1648) = v491;
            *(_OWORD *)(v236 + 1664) = v244;
            long long v245 = v494;
            *(_OWORD *)(v236 + 1680) = v493;
            *(_OWORD *)(v236 + 1696) = v245;
            long long v246 = v488;
            *(_OWORD *)(v236 + 1584) = *(_OWORD *)v487;
            *(_OWORD *)(v236 + 1600) = v246;
            long long v247 = v490;
            *(_OWORD *)(v236 + 1616) = v489;
            *(_OWORD *)(v236 + 1632) = v247;
            *(unsigned char *)(v236 + 1576) |= 0x10u;
            if (sub_216FDC16C(1))
            {
              sub_216D0162C(v236, (int *)v487);
              v248 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v487);
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Ran task '%s' for <%s>. Result: %d\n", v249, v250, "compute prim local to world xform", v248, (*(unsigned __int8 *)(v236 + 1576) >> 4) & 1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v487 + 1);
              sub_21697C414(v487);
            }
            *(unsigned char *)(v236 + 1576) &= ~8u;
          }
          else if (sub_216FDC16C(1))
          {
            sub_216D0162C(v236, (int *)v487);
            v252 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v487);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v253, v254, "compute prim local to world xform", v252);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v487 + 1);
            sub_21697C414(v487);
          }
        }
        if ((~*(unsigned __int8 *)(v236 + 1712) & 3) == 0)
        {
          if (sub_216FDC16C(1))
          {
            sub_216D0162C(v236, (int *)v487);
            v255 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v487);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v256, v257, "compute prim parent to world xform", v255);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v487 + 1);
            sub_21697C414(v487);
          }
          if ((*(unsigned char *)(v236 + 1712) & 0xC) != 0)
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetParentToWorldTransform((pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)__p, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v236, v487);
            long long v261 = v492;
            *(_OWORD *)(v236 + 1784) = v491;
            *(_OWORD *)(v236 + 1800) = v261;
            long long v262 = v494;
            *(_OWORD *)(v236 + 1816) = v493;
            *(_OWORD *)(v236 + 1832) = v262;
            long long v263 = v488;
            *(_OWORD *)(v236 + 1720) = *(_OWORD *)v487;
            *(_OWORD *)(v236 + 1736) = v263;
            long long v264 = v490;
            *(_OWORD *)(v236 + 1752) = v489;
            *(_OWORD *)(v236 + 1768) = v264;
            *(unsigned char *)(v236 + 1712) |= 0x10u;
            if (sub_216FDC16C(1))
            {
              sub_216D0162C(v236, (int *)v487);
              v265 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v487);
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Ran task '%s' for <%s>. Result: %d\n", v266, v267, "compute prim parent to world xform", v265, (*(unsigned __int8 *)(v236 + 1712) >> 4) & 1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v487 + 1);
              sub_21697C414(v487);
            }
            *(unsigned char *)(v236 + 1712) &= ~8u;
          }
          else if (sub_216FDC16C(1))
          {
            sub_216D0162C(v236, (int *)v487);
            v258 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v487);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v259, v260, "compute prim parent to world xform", v258);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v487 + 1);
            sub_21697C414(v487);
          }
        }
      }
    }
    if (sub_216FDC16C(1))
    {
      sub_216EF6394((double *)&v475);
      v273 = v487;
      if (SBYTE7(v488) < 0) {
        v273 = (void **)v487[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Reading skel animation at time %s\n", v271, v272, v273);
      if (SBYTE7(v488) < 0) {
        operator delete(v487[0]);
      }
    }
    int64x2_t v274 = v458;
    v485[0] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v475;
    v485[1] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v196;
    LODWORD(v487[0]) = 0;
    uint64_t v495 = 65539;
    int v496 = 55;
    tbb::task_group_context::init((uint64_t)v487, v268, v269, v270);
    if (v274.i64[0] < (unint64_t)v274.i64[1])
    {
      v464 = v487;
      uint64_t v275 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v464, 0x38uLL);
      *(unsigned char *)(v275 - 11) = 1;
      *(void *)uint64_t v275 = &unk_26C76F5C8;
      *(void *)(v275 + 8) = v274.i64[1];
      *(void *)(v275 + 16) = v274.i64[0];
      *(void *)(v275 + 24) = 1;
      *(void *)(v275 + 32) = v485;
      unint64_t v276 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v275);
      *(_DWORD *)(v275 + 48) = 0;
      *(unsigned char *)(v275 + 52) = 5;
      *(void *)(v275 + 40) = (v276 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v275 - 40) + 16))(*(void *)(v275 - 40), v275, v275 - 8);
    }
    tbb::task_group_context::~task_group_context((tbb::task_group_context *)v487);
    if (sub_216FDC16C(1))
    {
      sub_216EF6394((double *)&v475);
      v282 = v487;
      if (SBYTE7(v488) < 0) {
        v282 = (void **)v487[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Updating skinning adapters at time %s\n", v280, v281, v282);
      if (SBYTE7(v488) < 0) {
        operator delete(v487[0]);
      }
    }
    unint64_t v283 = (unint64_t)v455;
    v284 = v456;
    v485[0] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v475;
    v485[1] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v196;
    LODWORD(v487[0]) = 0;
    uint64_t v495 = 65539;
    int v496 = 55;
    tbb::task_group_context::init((uint64_t)v487, v277, v278, v279);
    if (v283 < (unint64_t)v284)
    {
      v464 = v487;
      uint64_t v285 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v464, 0x38uLL);
      *(unsigned char *)(v285 - 11) = 1;
      *(void *)uint64_t v285 = &unk_26C76F610;
      *(void *)(v285 + 8) = v284;
      *(void *)(v285 + 16) = v283;
      *(void *)(v285 + 24) = 1;
      *(void *)(v285 + 32) = v485;
      unint64_t v286 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v285);
      *(_DWORD *)(v285 + 48) = 0;
      *(unsigned char *)(v285 + 52) = 5;
      *(void *)(v285 + 40) = (v286 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v285 - 40) + 16))(*(void *)(v285 - 40), v285, v285 - 8);
    }
    tbb::task_group_context::~task_group_context((tbb::task_group_context *)v487);
    BOOL v287 = sub_216FDC16C(1);
    if (v287)
    {
      sub_216EF6394((double *)&v475);
      v290 = v487;
      if (SBYTE7(v488) < 0) {
        v290 = (void **)v487[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Writing data to layers at time %s\n", v288, v289, v290);
      if (SBYTE7(v488) < 0) {
        operator delete(v487[0]);
      }
    }
    uint64_t v292 = *(void *)(a2 + 48);
    uint64_t v291 = *(void *)(a2 + 56);
    v485[0] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v475;
    v485[1] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v196;
    v485[2] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)a2;
    v485[3] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v455;
    v486 = &v482;
    uint64_t v293 = v291 - v292;
    if (v291 != v292)
    {
      if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency((pxrInternal__aapl__pxrReserved__ *)v287))
      {
        LODWORD(v487[0]) = 0;
        uint64_t v495 = 65539;
        int v496 = 55;
        tbb::task_group_context::init((uint64_t)v487, v294, v295, v296);
        v464 = v487;
        uint64_t v297 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v464, 0x38uLL);
        *(unsigned char *)(v297 - 11) = 1;
        *(void *)uint64_t v297 = &unk_26C76F6E8;
        *(void *)(v297 + 8) = v293 >> 4;
        *(_OWORD *)(v297 + 16) = xmmword_217411D30;
        *(void *)(v297 + 32) = v485;
        unint64_t v298 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v297);
        *(_DWORD *)(v297 + 48) = 0;
        *(unsigned char *)(v297 + 52) = 5;
        *(void *)(v297 + 40) = (v298 >> 1) & 0x7FFFFFFFFFFFFFFELL;
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v297 - 40) + 16))(*(void *)(v297 - 40), v297, v297 - 8);
        tbb::task_group_context::~task_group_context((tbb::task_group_context *)v487);
      }
      else
      {
        sub_2170011B0((uint64_t)v485, 0, v293 >> 4);
      }
    }
    v299 = (double *)v482;
    if (v482 == v483)
    {
      int v300 = 0;
    }
    else
    {
      int v300 = 0;
      do
      {
        int v301 = *(_DWORD *)v299++;
        v300 += v301;
      }
      while (v299 != v483);
    }
    unint64_t v302 = v443 + v300;
    unint64_t v303 = *(void *)(a2 + 8);
    if (v303) {
      BOOL v304 = *(unsigned char *)(a2 + 4) == 0;
    }
    else {
      BOOL v304 = 1;
    }
    v443 += v300;
    if (v304 || v302 <= v303) {
      goto LABEL_389;
    }
    if (sub_216FDC16C(1)) {
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Memory limit exceeded (%zu bytes of pending data). Flushing data to disk.\n", v306, v307, v443);
    }
    if (!sub_216FF5B58(a2)) {
      break;
    }
    uint64_t v443 = 0;
LABEL_389:
    ++v196;
    v195 = v452;
    if (v196 >= (v453 - (unsigned char *)v452) >> 3) {
      goto LABEL_390;
    }
  }
  if (v482)
  {
    v483 = (double *)v482;
    operator delete(v482);
  }
  v341 = sub_21697BEF0(v442);
  operator delete(v341);
  BOOL v113 = 0;
LABEL_642:
  if (v452)
  {
    v453 = (char *)v452;
    operator delete(v452);
  }
LABEL_644:
  sub_216966BB8((void **)&v455);
  sub_216966BB8((void **)&v458);
LABEL_645:
  uint64_t v438 = *((void *)&v460 + 1);
  if (*((void *)&v460 + 1)
    && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v460 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v438 + 8))(v438);
  }
  sub_216EF9C4C((uint64_t)__p);
  return v113;
}

void sub_216FF4FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48)
{
  uint64_t v56 = v48;
  uint64_t v53 = *(void **)(v49 + 176);
  if (v53) {
    operator delete(v53);
  }
  sub_2168F83DC(v49);
  sub_2168F83DC(a21);
  sub_2168F83DC(v50);
  sub_2168F83DC((uint64_t)&v51[2].__shared_owners_);
  sub_216FDD310(v56);
  sub_216FDD340(a31);
  std::__shared_weak_count::~__shared_weak_count(v51);
  operator delete(v54);
  sub_216FDAB24((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&STACK[0x250]);
  sub_216966BB8(&a38);
  sub_216966BB8(&a41);
  uint64_t v55 = a46;
  if (a46)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a46 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
    }
  }
  sub_216EF9C4C((uint64_t)&a48);
  _Unwind_Resume(a1);
}

uint64_t sub_216FF59B8(uint64_t a1)
{
  sub_21677B834((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216FF5AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216FF5B00(unsigned int a1, const char *a2, char *a3)
{
}

BOOL sub_216FF5B58(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (sub_216FDC16C(1)) {
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Saving %zu layers\n", v2, v3, (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 4);
  }
  unsigned __int8 v12 = 0;
  unint64_t v5 = *(void *)(a1 + 48);
  unint64_t v6 = *(void *)(a1 + 56);
  int v11 = &v12;
  v14[0] = 0;
  uint64_t v15 = 65539;
  int v16 = 55;
  tbb::task_group_context::init((uint64_t)v14, (uint64_t)v2, (uint64_t)v3, v4);
  if (v5 < v6)
  {
    char v13 = (tbb::task_group_context *)v14;
    uint64_t v7 = tbb::internal::allocate_root_with_context_proxy::allocate(&v13, 0x38uLL);
    *(unsigned char *)(v7 - 11) = 1;
    *(void *)uint64_t v7 = &unk_26C76F4F0;
    *(void *)(v7 + 8) = v6;
    *(void *)(v7 + 16) = v5;
    *(void *)(v7 + 24) = 1;
    *(void *)(v7 + 32) = &v11;
    unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v7);
    *(_DWORD *)(v7 + 48) = 0;
    *(unsigned char *)(v7 + 52) = 5;
    *(void *)(v7 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v7 - 40) + 16))(*(void *)(v7 - 40), v7, v7 - 8);
  }
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)v14);
  unsigned __int8 v9 = atomic_load(&v12);
  return (v9 & 1) == 0;
}

void sub_216FF5CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a13, v17);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a15);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBakeSkinning(uint64_t *a1, uint64_t a2)
{
  int v61 = 31;
  uint64_t v63 = 0;
  __int16 v64 = 257;
  memset(v65, 0, sizeof(v65));
  memset(v66, 0, 40);
  char v62 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSkelCache::UsdSkelCache((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v59);
  uint64_t v33 = a2;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  sub_216D3ADBC(a1, (uint64_t)&v50);
  while (1)
  {
    unint64_t v40 = (void ***)a1[1];
    long long v41 = (pxrInternal__aapl__pxrReserved__ *)a1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v42);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v42 + 1);
    LODWORD(v43) = 0;
    WORD2(v43) = 0;
    if (v51 == (atomic_uint *)v41 && v50 == v40)
    {
      BOOL v4 = 1;
      if (v52 == v42 && !v53 && !v54) {
        BOOL v4 = v55 != 0;
      }
    }
    else
    {
      BOOL v4 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v42 + 1);
    sub_21697C414(&v42);
    if (!v4) {
      break;
    }
    sub_216D3B00C((uint64_t)&v50, (uint64_t)&v40);
    StaticTfuint64_t Type = pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetStaticTfType(v5);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v7);
    int IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v40, SchemaInfo, v9);
    if ((v43 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v42 + 1);
    sub_21697C414(&v42);
    if (v41) {
      sub_216D16E0C((atomic_ullong *)v41);
    }
    if (IsA)
    {
      sub_216D3B00C((uint64_t)&v50, (uint64_t)&v40);
      unsigned __int8 v12 = v41;
      if (!v41 || (uint64_t v13 = *((void *)v41 + 7), (v13 & 0x800) != 0))
      {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v41, v11);
        uint64_t v13 = *((void *)v12 + 7);
      }
      if ((v13 & 0x100) != 0)
      {
        BOOL v14 = 1;
      }
      else
      {
        sub_216D3B00C((uint64_t)&v50, (uint64_t)&v45);
        BOOL v14 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
        if ((v49 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v48);
        sub_21697C414(&v47);
        if (v46) {
          sub_216D16E0C(v46);
        }
      }
      if ((v43 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v42 + 1);
      sub_21697C414(&v42);
      if (v41) {
        sub_216D16E0C((atomic_ullong *)v41);
      }
      if (v14)
      {
        unint64_t v40 = (void ***)"usdSkel/bakeSkinning.cpp";
        long long v41 = (pxrInternal__aapl__pxrReserved__ *)"UsdSkelBakeSkinning";
        uint64_t v42 = 2528;
        unint64_t v43 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBakeSkinning(const UsdPrimRange &, const GfInterval &)";
        char v44 = 0;
        sub_216D3B00C((uint64_t)&v50, (uint64_t)&v45);
        sub_216D0162C((uint64_t)&v45, &v38);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v40, (pxrInternal__aapl__pxrReserved__ *)"[UsdSkelBakeSkinning] Cannot bake skinning for instanced SkelRoot <%s>\n", v31, Text);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
        sub_21697C414(&v38);
        if ((v49 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v48);
        sub_21697C414(&v47);
        if (v46) {
          sub_216D16E0C(v46);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v52 + 1);
        sub_21697C414(&v52);
        BOOL v29 = 0;
        goto LABEL_57;
      }
      if (sub_216FDC16C(1))
      {
        sub_216D3B00C((uint64_t)&v50, (uint64_t)&v40);
        sub_216D0162C((uint64_t)&v40, (int *)&v45);
        uint64_t v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v45);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Populating cache for <%s>\n", v16, v17, v15);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
        sub_21697C414(&v45);
        if ((v43 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v42 + 1);
        sub_21697C414(&v42);
        if (v41) {
          sub_216D16E0C((atomic_ullong *)v41);
        }
      }
      sub_216D3AE90((uint64_t)&v50, (uint64_t)&v40);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v45, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v40);
      uint64_t v45 = &unk_26C76FA18;
      if ((v43 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v42 + 1);
      sub_21697C414(&v42);
      uint64_t v18 = v41;
      if (v41) {
        sub_216D16E0C((atomic_ullong *)v41);
      }
      uint64_t UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v18);
      long long v20 = *(_OWORD *)UsdPrimDefaultPredicate;
      uint64_t v37 = *(void *)(UsdPrimDefaultPredicate + 16);
      long long v36 = v20;
      uint64_t v21 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdSkelCache::Populate(&v59, (uint64_t)&v45, &v36);
      uint64_t v22 = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v21);
      long long v23 = *(_OWORD *)v22;
      uint64_t v35 = *(void *)(v22 + 16);
      long long v34 = v23;
      if (pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBindings((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v59, (uint64_t)&v45, (uint64_t *)&v56, &v34))sub_2170019D8((uint64_t *)v65, *((pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)&v65[0] + 1), v56, v57, (v57 - v56) >> 6); {
      pxrInternal__aapl__pxrReserved__::UsdSkelRoot::~UsdSkelRoot((pxrInternal__aapl__pxrReserved__::UsdSkelRoot *)&v45);
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v50);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v52 + 1);
  sub_21697C414(&v52);
  if (*(void *)&v65[0] == *((void *)&v65[0] + 1))
  {
    BOOL v29 = 1;
  }
  else
  {
    sub_216D16CFC((uint64_t)&v40, (uint64_t *)(*(void *)&v65[0] + 8), (_DWORD *)(*(void *)&v65[0] + 16));
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v40, v24, &v50);
    uint64_t v25 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530((uint64_t *)&v50);
    uint64_t EditTarget = pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v25);
    sub_216FF6460((atomic_uint *)&v65[1] + 2, 1uLL, EditTarget);
    __n128 v27 = v51;
    if (v51 && atomic_fetch_add_explicit(v51 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v27 + 8))(v27);
    }
    if ((v43 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v42 + 1);
    sub_21697C414(&v42);
    if (v41) {
      sub_216D16E0C((atomic_ullong *)v41);
    }
    long long v28 = v65[0];
    LODWORD(v40) = 0;
    sub_2168F845C(v66);
    uint64_t v50 = (void ***)&v40;
    sub_216906E30(v66, (uint64_t)(*((void *)&v28 + 1) - v28) >> 6, (_DWORD **)&v50);
    BOOL v29 = pxrInternal__aapl__pxrReserved__::UsdSkelBakeSkinning((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v59, (uint64_t)&v61, v33);
  }
LABEL_57:
  unint64_t v40 = (void ***)&v56;
  sub_217001850((void ***)&v40);
  if (v60) {
    sub_216784EC4(v60);
  }
  sub_2168F83DC((uint64_t)v66);
  unint64_t v40 = (void ***)&v65[1] + 1;
  sub_216850BF4((void ***)&v40);
  unint64_t v40 = (void ***)v65;
  sub_217001850((void ***)&v40);
  return v29;
}

void sub_216FF6308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38)
{
  sub_216D3B0D8((uint64_t)&a26);
  sub_216D3AE58((uint64_t)&a30);
  a21 = (void **)&a34;
  sub_217001850(&a21);
  if (a38) {
    sub_216784EC4(a38);
  }
  sub_216FF65D0(v38 - 208);
  _Unwind_Resume(a1);
}

atomic_uint *sub_216FF6460(atomic_uint *result, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = result;
  unint64_t v6 = *(void **)result;
  if (a2 > (uint64_t)(*((void *)result + 2) - *(void *)result) >> 4)
  {
    sub_2168EB3BC((uint64_t)result);
    if (a2 >> 60) {
      sub_21677CB10();
    }
    uint64_t v7 = *((void *)v5 + 2) - *(void *)v5;
    uint64_t v8 = v7 >> 3;
    if (v7 >> 3 <= a2) {
      uint64_t v8 = a2;
    }
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    uint64_t result = (atomic_uint *)sub_21682BF78(v5, v9);
    uint64_t v10 = (void *)*((void *)v5 + 1);
    int v11 = &v10[2 * a2];
    do
    {
      uint64_t v12 = *(void *)(a3 + 8);
      *uint64_t v10 = *(void *)a3;
      v10[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 1u, memory_order_relaxed);
      }
      v10 += 2;
    }
    while (v10 != v11);
LABEL_23:
    *((void *)v5 + 1) = v11;
    return result;
  }
  uint64_t v13 = *((void *)result + 1) - (void)v6;
  unint64_t v14 = v13 >> 4;
  if (v13 >> 4 >= a2) {
    uint64_t v15 = a2;
  }
  else {
    uint64_t v15 = v13 >> 4;
  }
  for (; v15; --v15)
  {
    int v16 = (atomic_uint **)(v6 + 1);
    *unint64_t v6 = *(void *)a3;
    v6 += 2;
    uint64_t result = (atomic_uint *)sub_2168CD2FC(v16, (atomic_uint **)(a3 + 8));
  }
  if (a2 > v14)
  {
    uint64_t v17 = (void *)*((void *)v5 + 1);
    int v11 = &v17[2 * (a2 - v14)];
    do
    {
      uint64_t v18 = *(void *)(a3 + 8);
      void *v17 = *(void *)a3;
      v17[1] = v18;
      if (v18) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 + 8), 1u, memory_order_relaxed);
      }
      v17 += 2;
    }
    while (v17 != v11);
    goto LABEL_23;
  }
  uint64_t v19 = *(void *)v5 + 16 * a2;

  return sub_216850C48(v5, v19);
}

uint64_t sub_216FF65D0(uint64_t a1)
{
  sub_2168F83DC(a1 + 72);
  unint64_t v3 = (void **)(a1 + 48);
  sub_216850BF4(&v3);
  unint64_t v3 = (void **)(a1 + 24);
  sub_217001850(&v3);
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBakeSkinning(uint64_t a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a1 + 8);
  unint64_t v5 = (_DWORD *)(a1 + 16);
  sub_216D16CFC((uint64_t)&v39, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  uint64_t v7 = v40;
  if (!v40 || (uint64_t v8 = *((void *)v40 + 7), (v8 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v40, v6);
    uint64_t v8 = *((void *)v7 + 7);
  }
  if ((v8 & 0x100) != 0)
  {
    BOOL v9 = 1;
  }
  else
  {
    sub_216D16CFC((uint64_t)&v44, v4, v5);
    BOOL v9 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
    if ((v48 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
    sub_21697C414(&v46);
    if (v45) {
      sub_216D16E0C(v45);
    }
  }
  if ((v42[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v42[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v41 + 1);
  sub_21697C414(&v41);
  if (v40) {
    sub_216D16E0C((atomic_ullong *)v40);
  }
  if (v9)
  {
    int v39 = "usdSkel/bakeSkinning.cpp";
    unint64_t v40 = (pxrInternal__aapl__pxrReserved__ *)"UsdSkelBakeSkinning";
    uint64_t v41 = 2568;
    *(void *)&v42[0] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBakeSkinning(const UsdSkelRoot &, const GfInterval &)";
    BYTE8(v42[0]) = 0;
    uint64_t v10 = sub_216D16CFC((uint64_t)&v44, v4, v5);
    sub_216D0162C(v10, (int *)&v37);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v39, (pxrInternal__aapl__pxrReserved__ *)"[UsdSkelBakeSkinning] Cannot bake skinning for instanced SkelRoot <%s>\n", v12, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
    sub_21697C414(&v37);
    if ((v48 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
    sub_21697C414(&v46);
    if (v45) {
      sub_216D16E0C(v45);
    }
    return 0;
  }
  else
  {
    LODWORD(v39) = 31;
    unint64_t v40 = 0;
    LOWORD(v41) = 257;
    memset(v42, 0, sizeof(v42));
    memset(v43, 0, sizeof(v43));
    BYTE4(v39) = 0;
    if (sub_216FDC16C(1))
    {
      uint64_t v14 = sub_216D16CFC((uint64_t)&v44, v4, v5);
      sub_216D0162C(v14, (int *)&v37);
      uint64_t v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning] Populating cache for <%s>\n", v16, v17, v15);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
      sub_21697C414(&v37);
      if ((v48 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
      sub_21697C414(&v46);
      if (v45) {
        sub_216D16E0C(v45);
      }
    }
    uint64_t v18 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdSkelCache::UsdSkelCache((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v37);
    uint64_t UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v18);
    long long v20 = *(_OWORD *)UsdPrimDefaultPredicate;
    uint64_t v36 = *(void *)(UsdPrimDefaultPredicate + 16);
    long long v35 = v20;
    uint64_t v21 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdSkelCache::Populate(&v37, a1, &v35);
    uint64_t v22 = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v21);
    long long v23 = *(_OWORD *)v22;
    uint64_t v34 = *(void *)(v22 + 16);
    long long v33 = v23;
    if (pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBindings((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v37, a1, (uint64_t *)v42, &v33))
    {
      if (*(void *)&v42[0] == *((void *)&v42[0] + 1))
      {
        BOOL v13 = 1;
      }
      else
      {
        unsigned int v24 = (pxrInternal__aapl__pxrReserved__::UsdObject *)sub_216D16CFC((uint64_t)&v44, v4, v5);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(v24, v25, &v31);
        uint64_t v26 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(&v31);
        uint64_t EditTarget = pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v26);
        sub_216FF6460((atomic_uint *)&v42[1] + 2, 1uLL, EditTarget);
        uint64_t v28 = v32;
        if (v32 && atomic_fetch_add_explicit((atomic_uint *volatile)(v32 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        }
        if ((v48 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
        sub_21697C414(&v46);
        if (v45) {
          sub_216D16E0C(v45);
        }
        long long v29 = v42[0];
        LODWORD(v31) = 0;
        sub_2168F845C(v43);
        char v44 = &v31;
        sub_216906E30(v43, (uint64_t)(*((void *)&v29 + 1) - v29) >> 6, (_DWORD **)&v44);
        BOOL v13 = pxrInternal__aapl__pxrReserved__::UsdSkelBakeSkinning((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v37, (uint64_t)&v39, a2);
      }
    }
    else
    {
      BOOL v13 = 0;
    }
    if (v38) {
      sub_216784EC4(v38);
    }
    sub_2168F83DC((uint64_t)v43);
    char v44 = (uint64_t *)&v42[1] + 1;
    sub_216850BF4((void ***)&v44);
    char v44 = (uint64_t *)v42;
    sub_217001850((void ***)&v44);
  }
  return v13;
}

void sub_216FF6A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, ...)
{
  va_start(va, a15);
  sub_216D16AD8(v15 - 96);
  if (a15) {
    sub_216784EC4(a15);
  }
  sub_216FF65D0((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t *sub_216FF6B64(unint64_t *result, unint64_t a2)
{
  unint64_t v2 = result[2];
  unint64_t v3 = *result;
  if (a2 > (uint64_t)(v2 - *result) >> 4)
  {
    if (a2 >> 60) {
      sub_21677CB10();
    }
    unint64_t v5 = (int64x2_t *)result;
    unint64_t v6 = (void *)result[1];
    uint64_t v15 = result + 2;
    uint64_t v7 = (char *)operator new(16 * a2);
    uint64_t v8 = (char *)v6 + (void)v7 - v3;
    if (v6 == (void *)v3)
    {
      int64x2_t v11 = vdupq_n_s64(v3);
      BOOL v9 = (char *)v6 + (void)v7 - v3;
    }
    else
    {
      BOOL v9 = (char *)v6 + (void)v7 - v3;
      do
      {
        long long v10 = *((_OWORD *)v6 - 1);
        v6 -= 2;
        *((_OWORD *)v9 - 1) = v10;
        v9 -= 16;
        *unint64_t v6 = 0;
        v6[1] = 0;
      }
      while (v6 != (void *)v3);
      int64x2_t v11 = *v5;
      unint64_t v2 = v5[1].u64[0];
    }
    v5->i64[0] = (uint64_t)v9;
    v5->i64[1] = (uint64_t)v8;
    int64x2_t v13 = v11;
    v5[1].i64[0] = (uint64_t)&v7[16 * a2];
    unint64_t v14 = v2;
    uint64_t v12 = v11.i64[0];
    return (unint64_t *)sub_21696A2C0((uint64_t)&v12);
  }
  return result;
}

void sub_216FF6C2C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C76F300;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_216FF6C4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C76F300;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216FF6C90(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 384);
  if (v2) {
    operator delete(v2);
  }
  sub_2168F83DC(a1 + 208);
  sub_2168F83DC(a1 + 160);
  sub_2168F83DC(a1 + 112);
  sub_2168F83DC(a1 + 56);
  sub_216FDD310((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 32));

  return sub_216FDD340((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 24));
}

uint64_t sub_216FF6D10(int *a1, pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *a2)
{
  int v15 = *a1;
  BOOL v4 = (atomic_ullong *)*((void *)a1 + 1);
  int v16 = v4;
  if (v4) {
    atomic_fetch_add_explicit(v4 + 6, 1uLL, memory_order_relaxed);
  }
  sub_216981010(&v17, a1 + 4);
  sub_21698105C(&v18, a1 + 5);
  uint64_t v5 = *((void *)a1 + 3);
  uint64_t v19 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v19 &= 0xFFFFFFFFFFFFFFF8;
  }
  while (1)
  {
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v15))
    {
LABEL_15:
      uint64_t v8 = 0;
      goto LABEL_17;
    }
    if (pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::TransformMightBeTimeVarying(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v15))break; {
    if (pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetResetXformStack(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v15))
    }
    {
      goto LABEL_15;
    }
    sub_216D6B1F8((uint64_t)&v15, (uint64_t)&v10);
    int v15 = v10;
    unint64_t v6 = v11;
    int64x2_t v11 = 0;
    uint64_t v7 = v16;
    int v16 = v6;
    if (v7) {
      sub_216D16E0C(v7);
    }
    sub_21697DE94(&v17, &v12);
    sub_21697DEEC(&v18, &v13);
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v19 = v14;
    uint64_t v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
    sub_21697C414(&v12);
    if (v11) {
      sub_216D16E0C(v11);
    }
  }
  uint64_t v8 = 1;
LABEL_17:
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_21697C414(&v17);
  if (v16) {
    sub_216D16E0C(v16);
  }
  return v8;
}

void sub_216FF6EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216FF6EE0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C76F350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_216FF6F00(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C76F350;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216FF6F44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 2240);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 2236));
  sub_21697C414((_DWORD *)(a1 + 2232));
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v3, (pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 2224));
  uint64_t v4 = *(void *)(a1 + 2080);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 2076));
  sub_21697C414((_DWORD *)(a1 + 2072));
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v5, (pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 2064));
  sub_2168F83DC(a1 + 2016);
  uint64_t v6 = *(void *)(a1 + 2008);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 2004));
  sub_21697C414((_DWORD *)(a1 + 2000));
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v7, (pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 1992));
  sub_2168F83DC(a1 + 1944);
  uint64_t v8 = *(void *)(a1 + 1936);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 1932));
  sub_21697C414((_DWORD *)(a1 + 1928));
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v9, (pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 1920));
  sub_2168F83DC(a1 + 1872);
  sub_2168F83DC(a1 + 1560);
  sub_2168F83DC(a1 + 1520);
  sub_216D2FE74(a1 + 1312);
  sub_216D2FE74(a1 + 1056);
  uint64_t v10 = *(void *)(a1 + 1048);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D2FE74(a1 + 920);
  sub_2168F83DC(a1 + 880);
  sub_216D2FE74(a1 + 752);
  sub_2168F83DC(a1 + 712);
  sub_216D2FE74(a1 + 584);
  sub_2168F83DC(a1 + 544);
  uint64_t v14 = (void **)(a1 + 512);
  sub_216F2C49C(&v14);
  uint64_t v14 = (void **)(a1 + 488);
  sub_216F2C49C(&v14);
  uint64_t v14 = (void **)(a1 + 464);
  sub_216FF97AC(&v14);
  int64x2_t v11 = *(std::__shared_weak_count **)(a1 + 456);
  if (v11) {
    sub_216784EC4(v11);
  }
  int v12 = *(std::__shared_weak_count **)(a1 + 432);
  if (v12) {
    sub_216784EC4(v12);
  }
  return sub_216FDCF10(a1 + 24);
}

uint64_t sub_216FF7140(uint64_t a1, unsigned char *a2, const pxrInternal__aapl__pxrReserved__::UsdPrim *a3, void *a4, uint64_t *a5, int a6, pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *a7)
{
  uint64_t v172 = *MEMORY[0x263EF8340];
  uint64_t v13 = a1 + 424;
  uint64_t v14 = sub_216FDC73C(a1, (uint64_t)a3);
  *(void *)(v14 + 400) = *a4;
  uint64_t v15 = a4[1];
  *(void *)(v14 + 408) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 416) = 0;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_DWORD *)(a1 + 420) = a6;
  *(_OWORD *)(v13 + 64) = 0u;
  uint64_t v137 = (uint64_t *)(v13 + 64);
  *(_OWORD *)uint64_t v13 = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(void *)(v13 + 80) = 0;
  *(unsigned char *)(a1 + 512) = *(unsigned char *)(a1 + 512) & 0xE0 | 8;
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  uint64_t v143 = (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 560);
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 560));
  *(unsigned char *)(a1 + 680) = *(unsigned char *)(a1 + 680) & 0xE0 | 8;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(void *)(a1 + 720) = 0;
  unint64_t v142 = (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 728);
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 728));
  *(unsigned char *)(a1 + 848) = *(unsigned char *)(a1 + 848) & 0xE0 | 8;
  *(void *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  uint64_t v140 = (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 896);
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 896));
  *(unsigned char *)(a1 + 1016) = *(unsigned char *)(a1 + 1016) & 0xE0 | 8;
  *(void *)(a1 + 1024) = 0;
  unint64_t v139 = (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 1032);
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 1032));
  *(unsigned char *)(a1 + 1152) = *(unsigned char *)(a1 + 1152) & 0xE0 | 8;
  uint64_t v138 = (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 1288);
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)(a1 + 1288));
  *(unsigned char *)(a1 + 1408) = *(unsigned char *)(a1 + 1408) & 0xE0 | 8;
  *(unsigned char *)(a1 + 1488) = *(unsigned char *)(a1 + 1488) & 0xE0 | 8;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(unsigned char *)(a1 + 1576) = *(unsigned char *)(a1 + 1576) & 0xE0 | 8;
  *(unsigned char *)(a1 + 1712) = *(unsigned char *)(a1 + 1712) & 0xE0 | 8;
  *(void *)(a1 + 1880) = 0;
  *(_OWORD *)(a1 + 1848) = 0u;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(void *)(a1 + 1896) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 1904));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 1908));
  *(_OWORD *)(a1 + 1912) = 0u;
  *(void *)(a1 + 1968) = 0;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_OWORD *)(a1 + 1944) = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 1976));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 1980));
  *(void *)(a1 + 2040) = 0;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 2016) = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 2048));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 2052));
  *(void *)(a1 + 2056) = 0;
  *(void *)(a1 + 2200) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 2208));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 2212));
  *(void *)(a1 + 2216) = 0;
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a3, v16) & 1) != 0
    || (*(void *)&long long v168 = "usdSkel/bakeSkinning.cpp",
        *((void *)&v168 + 1) = "_SkinningAdapter",
        uint64_t v169 = 992,
        unint64_t v170 = (unint64_t)"pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinningAdapter::_SkinningAda"
                                 "pter(const UsdSkelBakeSkinningParms &, const UsdSkelSkinningQuery &, const _SkelAdapter"
                                 "RefPtr &, const SdfLayerHandle &, const unsigned int, UsdGeomXformCache *)",
        char v171 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v168, "skinningQuery", 0)))
  {
    if (*a4
      || (uint64_t v163 = "usdSkel/bakeSkinning.cpp",
          uint64_t v164 = (atomic_ullong *)"_SkinningAdapter",
          uint64_t v165 = 992,
          unint64_t v166 = (unint64_t)"pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinningAdapter::_SkinningA"
                                   "dapter(const UsdSkelBakeSkinningParms &, const UsdSkelSkinningQuery &, const _SkelAda"
                                   "pterRefPtr &, const SdfLayerHandle &, const unsigned int, UsdGeomXformCache *)",
          char v167 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v163, "skelAdapter", 0) & 1) != 0))
    {
      int v17 = (pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)sub_216FDC16C(1);
      if (v17)
      {
        sub_216D0162C((uint64_t)a3, (int *)&v168);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v168);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]   Creating adapter for skinning prim at <%s>\n", v19, v20, Text);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v168 + 1);
        int v17 = (pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)sub_21697C414(&v168);
      }
      StaticTfuint64_t Type = pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::_GetStaticTfType(v17);
      SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v22);
      uint64_t IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)a3, SchemaInfo, v24);
      int v26 = IsA;
      if (IsA)
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v161, a3);
        v161[0] = &unk_26C76CCF8;
        if ((*a2 & 9) != 0)
        {
          pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)v161, (uint64_t)&v163);
          pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)&v168, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v163);
          sub_216EFE730((uint64_t)v143, (uint64_t)&v168);
          sub_216D2FE74((uint64_t)&v168);
          if ((v166 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v166 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v165 + 1);
          sub_21697C414(&v165);
          if (v164) {
            sub_216D16E0C(v164);
          }
          if (!pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::HasAuthoredValue(v143))
          {
            pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)&v168);
            sub_216EFE730((uint64_t)v143, (uint64_t)&v168);
            sub_216D2FE74((uint64_t)&v168);
          }
        }
        if ((*a2 & 0x12) != 0)
        {
          pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)v161, (uint64_t)&v163);
          pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)&v168, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v163);
          sub_216EFE730((uint64_t)v142, (uint64_t)&v168);
          sub_216D2FE74((uint64_t)&v168);
          if ((v166 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v166 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v165 + 1);
          sub_21697C414(&v165);
          if (v164) {
            sub_216D16E0C(v164);
          }
          pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)v161, (atomic_uint **)v154);
          __n128 v27 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          if (!v27) {
            __n128 v27 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          }
          if (((unint64_t)v154[0] & 0xFFFFFFFFFFFFFFF8) == (*((void *)v27 + 40) & 0xFFFFFFFFFFFFFFF8)
            && (uint64_t v28 = pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v27),
                uint64_t v30 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v28, v29), pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)a3, v30, v31)))
          {
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v159, a3);
            v159[0] = &unk_26C76CAE8;
            pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v159, (uint64_t)&v163);
            pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)&v168, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v163);
            sub_216EFE730((uint64_t)v140, (uint64_t)&v168);
            sub_216D2FE74((uint64_t)&v168);
            if ((v166 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v166 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v165 + 1);
            sub_21697C414(&v165);
            if (v164) {
              sub_216D16E0C(v164);
            }
            if (!pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::HasAuthoredValue(v142)
              || !pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::HasAuthoredValue(v140))
            {
              pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)&v168);
              sub_216EFE730((uint64_t)v140, (uint64_t)&v168);
              uint64_t v32 = (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)sub_216D2FE74((uint64_t)&v168);
              pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery(v32);
              sub_216EFE730((uint64_t)v142, (uint64_t)&v168);
              sub_216D2FE74((uint64_t)&v168);
            }
            pxrInternal__aapl__pxrReserved__::UsdGeomMesh::~UsdGeomMesh((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v159);
          }
          else
          {
            if (!pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::HasAuthoredValue(v142)) {
              goto LABEL_40;
            }
            uint64_t v38 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
            if (!v38) {
              uint64_t v38 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
            }
            if (((unint64_t)v154[0] & 0xFFFFFFFFFFFFFFF8) != (*((void *)v38 + 153) & 0xFFFFFFFFFFFFFFF8))
            {
              int v39 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
              if (!v39) {
                int v39 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
              }
              if (((unint64_t)v154[0] & 0xFFFFFFFFFFFFFFF8) != (*((void *)v39 + 151) & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_40:
                pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)&v168);
                sub_216EFE730((uint64_t)v142, (uint64_t)&v168);
                sub_216D2FE74((uint64_t)&v168);
              }
            }
          }
          if (((uint64_t)v154[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v154[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::~UsdGeomPointBased((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)v161);
        int v37 = 1;
      }
      else
      {
        long long v33 = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)IsA);
        long long v35 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v33, v34);
        int v37 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)a3, v35, v36);
      }
      if ((*a2 & 7) != 0
        && pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::HasJointInfluences(a3))
      {
        if ((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::IsRigidlyDeformed(a3) & v37) == 1)
        {
          if (*a2 & 4) != 0 && (*(unsigned char *)(*a4 + 80))
          {
            int v40 = 4;
LABEL_50:
            *(_DWORD *)(a1 + 416) |= v40;
          }
        }
        else if (v26)
        {
          if (*a2)
          {
            uint64_t Attribute = (pxrInternal__aapl__pxrReserved__::UsdProperty *)pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(v143);
            if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(Attribute, v42))
            {
              if (*(unsigned char *)(*a4 + 80)) {
                *(_DWORD *)(a1 + 416) |= 1u;
              }
            }
          }
          if ((*a2 & 2) != 0)
          {
            unint64_t v43 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(v142);
            if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v43, v44))
            {
              if (*(unsigned char *)(*a4 + 128))
              {
                int v40 = 2;
                goto LABEL_50;
              }
            }
          }
        }
      }
      if ((*a2 & 0x18) != 0 && (*(unsigned char *)(*a4 + 176) & v26) == 1)
      {
        if (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::HasBlendShapes(a3))
        {
          uint64_t v45 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(v143);
          if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v45, v46) & 1) != 0
            || (int v47 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(v142),
                pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v47, v48)))
          {
            uint64_t v49 = (pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *)operator new(0x68uLL);
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v168, a3);
            unint64_t v170 = 0;
            *(void *)&long long v168 = &unk_26C76F730;
            pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::UsdSkelBlendShapeQuery(v49, (const pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v168);
            sub_216FF8CE4((void *)v13, (uint64_t)v49);
            pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::~UsdSkelBindingAPI((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v168);
            if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(*(pxrInternal__aapl__pxrReserved__::UsdProperty **)v13, v50))
            {
              if ((*a2 & 8) != 0)
              {
                uint64_t v51 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(v143);
                if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v51, v52))
                {
                  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapePointOffsets(*(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery **)v13, &v168);
                  sub_216F2CAE0((uint64_t *)(a1 + 464));
                  *(_OWORD *)(a1 + 464) = v168;
                  *(void *)(a1 + 480) = v169;
                  uint64_t v169 = 0;
                  long long v168 = 0uLL;
                  uint64_t v163 = &v168;
                  sub_216F2C49C((void ***)&v163);
                  for (uint64_t i = *(void **)(a1 + 464); i != *(void **)(a1 + 472); i += 5)
                  {
                    if (*i)
                    {
                      *(_DWORD *)(a1 + 416) |= 8u;
                      break;
                    }
                  }
                }
              }
              if ((*a2 & 0x10) != 0)
              {
                char v54 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(v142);
                if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v54, v55))
                {
                  uint64_t v56 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(v140);
                  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v56, v57) & 1) == 0)
                  {
                    pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapeNormalOffsets(*(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery **)v13, &v168);
                    sub_216F2CAE0(v137);
                    *(_OWORD *)uint64_t v137 = v168;
                    *(void *)(a1 + 504) = v169;
                    uint64_t v169 = 0;
                    long long v168 = 0uLL;
                    uint64_t v163 = &v168;
                    sub_216F2C49C((void ***)&v163);
                    for (uint64_t j = *(void **)(a1 + 488); j != *(void **)(a1 + 496); j += 5)
                    {
                      if (*j)
                      {
                        *(_DWORD *)(a1 + 416) |= 0x10u;
                        break;
                      }
                    }
                  }
                }
              }
              if ((*(unsigned char *)(a1 + 416) & 0x18) != 0)
              {
                pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeBlendShapePointIndices(*(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery **)v13, &v168);
                sub_216FF9720((uint64_t *)(v13 + 16));
                *(_OWORD *)(v13 + 16) = v168;
                *(void *)(a1 + 456) = v169;
                uint64_t v169 = 0;
                long long v168 = 0uLL;
                uint64_t v163 = &v168;
                sub_216FF97AC((void ***)&v163);
              }
            }
            if ((*(unsigned char *)(a1 + 416) & 0x18) != 0) {
              goto LABEL_87;
            }
            uint64_t v59 = *(std::__shared_weak_count **)(a1 + 432);
            *(void *)uint64_t v13 = 0;
            *(void *)(v13 + 8) = 0;
            if (v59) {
              sub_216784EC4(v59);
            }
          }
        }
      }
      if (!*(_DWORD *)(a1 + 416))
      {
        if (sub_216FDC16C(1))
        {
          sub_216D0162C((uint64_t)a3, (int *)&v168);
          uint64_t v63 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v168);
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]   No computations active for <%s>: skipping\n", v64, v65, v63);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v168 + 1);
          sub_21697C414(&v168);
        }
        return a1;
      }
LABEL_87:
      sub_216D0162C((uint64_t)a3, (int *)&v168);
      pxrInternal__aapl__pxrReserved__::SdfCreatePrimInLayer(a5, (uint64_t)&v168, &v158);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v168 + 1);
      sub_21697C414(&v168);
      if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v158))
      {
        *(void *)&long long v168 = "usdSkel/bakeSkinning.cpp";
        *((void *)&v168 + 1) = "_SkinningAdapter";
        uint64_t v169 = 1141;
        unint64_t v170 = (unint64_t)"pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinningAdapter::_SkinningAda"
                                 "pter(const UsdSkelBakeSkinningParms &, const UsdSkelSkinningQuery &, const _SkelAdapter"
                                 "RefPtr &, const SdfLayerHandle &, const unsigned int, UsdGeomXformCache *)";
        char v171 = 0;
        if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v168, "primSpec", 0) & 1) == 0)
        {
          *(_DWORD *)(a1 + 416) = 0;
LABEL_215:
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v95, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v158);
          return a1;
        }
      }
      if ((*(unsigned char *)(a1 + 416) & 9) != 0)
      {
        if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens)) {
          sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        }
        if (!atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames)) {
          sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        sub_216FF8D2C(a1 + 1896, &v158);
      }
      int v66 = *(_DWORD *)(a1 + 416);
      if ((v66 & 0x12) != 0)
      {
        if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens)) {
          sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        }
        if (!atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames)) {
          sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        sub_216FF8D2C(a1 + 1968, &v158);
      }
      if ((v66 & 4) != 0)
      {
        uint64_t v163 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v164);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v164 + 1);
        uint64_t v165 = 0;
        sub_216FF911C();
        if (!atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames)) {
          sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        sub_216FF8D2C(a1 + 2200, &v158);
      }
      if ((v66 & 9) != 0)
      {
        *(unsigned char *)(a1 + 512) |= 3u;
        if (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::ValueMightBeTimeVarying(v143, v60)) {
          char v70 = 4;
        }
        else {
          char v70 = 0;
        }
        *(unsigned char *)(a1 + 512) = *(unsigned char *)(a1 + 512) & 0xFB | v70;
        int v66 = *(_DWORD *)(a1 + 416);
      }
      if ((v66 & 0x12) != 0)
      {
        *(unsigned char *)(a1 + 680) |= 3u;
        char v71 = pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::ValueMightBeTimeVarying(v142, v60) ? 4 : 0;
        *(unsigned char *)(a1 + 680) = *(unsigned char *)(a1 + 680) & 0xFB | v71;
        char v72 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(v140);
        if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v72, v73))
        {
          *(unsigned char *)(a1 + 848) |= 3u;
          if (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::ValueMightBeTimeVarying(v140, v74)) {
            char v75 = 4;
          }
          else {
            char v75 = 0;
          }
          *(unsigned char *)(a1 + 848) = *(unsigned char *)(a1 + 848) & 0xFB | v75;
        }
      }
      if ((*(unsigned char *)(a1 + 416) & 7) != 0)
      {
        *(unsigned char *)(a1 + 1016) |= 3u;
        pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)&v168, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)(a1 + 144));
        int v76 = (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)sub_216EFE730((uint64_t)v139, (uint64_t)&v168);
        char v77 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(v76);
        int IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v77, v78);
        sub_216D2FE74((uint64_t)&v168);
        if (IsDefined)
        {
          if (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::ValueMightBeTimeVarying(v139, v80)) {
            char v81 = 4;
          }
          else {
            char v81 = 0;
          }
          *(unsigned char *)(a1 + 1016) = *(unsigned char *)(a1 + 1016) & 0xFB | v81;
        }
      }
      int v82 = *(_DWORD *)(a1 + 416);
      if ((v82 & 7) != 0)
      {
        *(unsigned char *)(a1 + 1152) |= 3u;
        pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)&v168, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)(a1 + 176));
        uint64_t v83 = (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)sub_216EFE730((uint64_t)v138, (uint64_t)&v168);
        uint64_t v84 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(v83);
        int v86 = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v84, v85);
        sub_216D2FE74((uint64_t)&v168);
        if (v86)
        {
          if (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::ValueMightBeTimeVarying(v138, v87)) {
            char v88 = 4;
          }
          else {
            char v88 = 0;
          }
          *(unsigned char *)(a1 + 1152) = *(unsigned char *)(a1 + 1152) & 0xFB | v88;
        }
        int v82 = *(_DWORD *)(a1 + 416);
        if ((v82 & 2) != 0) {
          *(unsigned char *)(a1 + 1408) = *(unsigned char *)(a1 + 1408) & 0xF8 | *(unsigned char *)(a1 + 1152) & 4 | 3;
        }
      }
      if ((v82 & 7) == 0)
      {
LABEL_141:
        if ((v82 & 3) != 0)
        {
          *(unsigned char *)(a1 + 1576) |= 3u;
          if (sub_216FF6D10((int *)a3, a7)) {
            char v92 = 4;
          }
          else {
            char v92 = 0;
          }
          *(unsigned char *)(a1 + 1576) = *(unsigned char *)(a1 + 1576) & 0xFB | v92;
          int v82 = *(_DWORD *)(a1 + 416);
        }
        if ((v82 & 4) != 0)
        {
          if (pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetResetXformStack(a7, a3))
          {
            pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal(a1 + 1720, 1.0);
          }
          else
          {
            *(unsigned char *)(a1 + 1712) |= 3u;
            sub_216D6B1F8((uint64_t)a3, (uint64_t)&v168);
            if (sub_216FF6D10((int *)&v168, a7)) {
              char v93 = 4;
            }
            else {
              char v93 = 0;
            }
            *(unsigned char *)(a1 + 1712) = *(unsigned char *)(a1 + 1712) & 0xFB | v93;
            if ((v170 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v170 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v169 + 1);
            sub_21697C414(&v169);
            if (*((void *)&v168 + 1)) {
              sub_216D16E0C(*((atomic_ullong **)&v168 + 1));
            }
          }
        }
        int v94 = *(_DWORD *)(a1 + 416);
        if ((v94 & 0x18) != 0)
        {
          *(unsigned char *)(*a4 + 176) |= 2u;
          int v94 = *(_DWORD *)(a1 + 416);
        }
        if ((v94 & 7) != 0)
        {
          *(unsigned char *)(*a4 + 80) |= 2u;
          int v94 = *(_DWORD *)(a1 + 416);
        }
        if ((v94 & 2) != 0)
        {
          *(unsigned char *)(*a4 + 128) |= 2u;
          int v94 = *(_DWORD *)(a1 + 416);
        }
        if ((v94 & 7) != 0) {
          *(unsigned char *)(*a4 + 224) |= 2u;
        }
        if (sub_216FDC16C(1))
        {
          uint64_t v134 = v13 + 16;
          sub_216D0162C(a1, &v156);
          int v96 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v156);
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v97, v98, *(unsigned char *)(a1 + 512) & 1, (*(unsigned __int8 *)(a1 + 512) >> 1) & 1, (*(unsigned __int8 *)(a1 + 512) >> 2) & 1);
          if (v169 >= 0) {
            int v101 = &v168;
          }
          else {
            int v101 = (long long *)v168;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v99, v100, *(unsigned char *)(a1 + 680) & 1, (*(unsigned __int8 *)(a1 + 680) >> 1) & 1, (*(unsigned __int8 *)(a1 + 680) >> 2) & 1);
          if (v165 >= 0) {
            uint64_t v104 = &v163;
          }
          else {
            uint64_t v104 = v163;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v102, v103, *(unsigned char *)(a1 + 848) & 1, (*(unsigned __int8 *)(a1 + 848) >> 1) & 1, (*(unsigned __int8 *)(a1 + 848) >> 2) & 1);
          if (v162 >= 0) {
            unint64_t v107 = v161;
          }
          else {
            unint64_t v107 = (void **)v161[0];
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v105, v106, *(unsigned char *)(a1 + 1016) & 1, (*(unsigned __int8 *)(a1 + 1016) >> 1) & 1, (*(unsigned __int8 *)(a1 + 1016) >> 2) & 1);
          if (v160 >= 0) {
            int v110 = v159;
          }
          else {
            int v110 = (void **)v159[0];
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v108, v109, *(unsigned char *)(a1 + 1152) & 1, (*(unsigned __int8 *)(a1 + 1152) >> 1) & 1, (*(unsigned __int8 *)(a1 + 1152) >> 2) & 1);
          if (v155 >= 0) {
            BOOL v113 = v154;
          }
          else {
            BOOL v113 = (void **)v154[0];
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v111, v112, *(unsigned char *)(a1 + 1408) & 1, (*(unsigned __int8 *)(a1 + 1408) >> 1) & 1, (*(unsigned __int8 *)(a1 + 1408) >> 2) & 1);
          if (v153 >= 0) {
            int v116 = &v152;
          }
          else {
            int v116 = v152;
          }
          uint64_t v135 = v116;
          char v136 = v113;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v114, v115, *(unsigned char *)(a1 + 1488) & 1, (*(unsigned __int8 *)(a1 + 1488) >> 1) & 1, (*(unsigned __int8 *)(a1 + 1488) >> 2) & 1);
          uint64_t v119 = v107;
          if (v151 >= 0) {
            uint64_t v120 = &v150;
          }
          else {
            uint64_t v120 = v150;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v117, v118, *(unsigned char *)(a1 + 1576) & 1, (*(unsigned __int8 *)(a1 + 1576) >> 1) & 1, (*(unsigned __int8 *)(a1 + 1576) >> 2) & 1);
          int v123 = v101;
          if (v149 >= 0) {
            uint64_t v124 = &v148;
          }
          else {
            uint64_t v124 = v148;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"active: %d, required: %d, mightBeTimeVarying: %d", v121, v122, *(unsigned char *)(a1 + 1712) & 1, (*(unsigned __int8 *)(a1 + 1712) >> 1) & 1, (*(unsigned __int8 *)(a1 + 1712) >> 2) & 1);
          int v125 = v147;
          int v126 = (void **)v146;
          sub_216FF5B00(*(_DWORD *)(a1 + 416), v127, v128);
          char v131 = &v146;
          if (v125 < 0) {
            char v131 = v126;
          }
          if (v145 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]\n  Computation state for skinnable prim <%s>:\n    _restPointsTask: %s\n    _restNormalsTask: %s\n    _faceVertexIndicesTask: %s\n    _skinningMethodTask: %s\n    _geomBindXformTask: %s\n    _geomBindInvTransposeXformTask: %s\n    _jointInfluencesTask: %s\n    _localToWorldXformTask: %s\n    _parentToWorldXformTask: %s\n  Deformation flags:\n%s", v129, v130, v96, v123, v104, v119,
            v110,
            v136,
            v135,
            v120,
            v124,
            v131,
            p_p,
            a1 + 464,
            v134);
          if (v145 < 0) {
            operator delete(__p);
          }
          if (v147 < 0) {
            operator delete(v146);
          }
          if (v149 < 0) {
            operator delete(v148);
          }
          if (v151 < 0) {
            operator delete(v150);
          }
          if (v153 < 0) {
            operator delete(v152);
          }
          if (v155 < 0) {
            operator delete(v154[0]);
          }
          if (v160 < 0) {
            operator delete(v159[0]);
          }
          if (v162 < 0) {
            operator delete(v161[0]);
          }
          if (SHIBYTE(v165) < 0) {
            operator delete(v163);
          }
          if (SHIBYTE(v169) < 0) {
            operator delete((void *)v168);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v157);
          sub_21697C414(&v156);
        }
        goto LABEL_215;
      }
      *(unsigned char *)(a1 + 1488) |= 3u;
      if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ValueMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a1 + 48)))
      {
        char v89 = *(unsigned char *)(a1 + 1488);
      }
      else
      {
        BOOL v90 = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ValueMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a1 + 96));
        char v89 = *(unsigned char *)(a1 + 1488);
        if (!v90)
        {
          char v91 = 0;
          goto LABEL_140;
        }
      }
      char v91 = 4;
LABEL_140:
      *(unsigned char *)(a1 + 1488) = v89 & 0xFB | v91;
      int v82 = *(_DWORD *)(a1 + 416);
      goto LABEL_141;
    }
  }
  return a1;
}

void sub_216FF8684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,_DWORD *a25,uint64_t a26,void *a27,_DWORD *a28,_DWORD *a29,_DWORD *a30,uint64_t a31,_DWORD *a32,uint64_t a33,_DWORD *a34,_DWORD *a35,_DWORD *a36,void *a37,pxrInternal__aapl__pxrReserved__::SdfSpec *a38,pxrInternal__aapl__pxrReserved__::SdfSpec *a39,pxrInternal__aapl__pxrReserved__::SdfSpec *a40,pxrInternal__aapl__pxrReserved__::SdfSpec *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  uint64_t v76 = *(void *)(v74 - 224);
  if ((v76 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B94CE0);
  if ((STACK[0x218] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x218] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v73);
  sub_21697C414(v72);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v80, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&STACK[0x208]);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v81, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a67);
  uint64_t v82 = v71[277];
  if ((v82 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v82 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a36);
  sub_21697C414(a34);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v83, a39);
  uint64_t v84 = v71[257];
  if ((v84 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v84 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a35);
  sub_21697C414(a32);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v85, a38);
  sub_2168F83DC((uint64_t)(v71 + 249));
  uint64_t v86 = v71[248];
  if ((v86 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a30);
  sub_21697C414(a29);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v87, a41);
  sub_2168F83DC((uint64_t)(v71 + 240));
  if ((*a27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a28);
  sub_21697C414(a25);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v88, a40);
  sub_2168F83DC(a26);
  sub_2168F83DC((uint64_t)(v71 + 192));
  sub_2168F83DC(a24);
  sub_216D2FE74(a42);
  sub_216D2FE74(a43);
  uint64_t v77 = v71[128];
  if ((v77 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v77 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D2FE74(a44);
  sub_2168F83DC(a31);
  sub_216D2FE74(a46);
  sub_2168F83DC((uint64_t)(v71 + 86));
  sub_216D2FE74(a47);
  sub_2168F83DC(a33);
  a71 = a37;
  sub_216F2C49C((void ***)&a71);
  a71 = a20;
  sub_216F2C49C((void ***)&a71);
  a71 = a21;
  sub_216FF97AC((void ***)&a71);
  uint64_t v78 = (std::__shared_weak_count *)v71[54];
  if (v78) {
    sub_216784EC4(v78);
  }
  uint64_t v79 = (std::__shared_weak_count *)v71[51];
  if (v79) {
    sub_216784EC4(v79);
  }
  sub_216FDCF10((uint64_t)v71);
  _Unwind_Resume(a1);
}

void sub_216FF8CE4(void *a1, uint64_t a2)
{
  sub_216FF9400(&v5, a2);
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v5;
  *(void *)&long long v5 = *a1;
  *((void *)&v5 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_216784EC4(v3);
  }
}

void sub_216FF8D2C(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  uint64_t v2 = (uint64_t **)sub_216A663FC(a2);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetAttributes(v2);
}

void sub_216FF9060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,atomic_uint *a23,int a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a23)
  {
    if (atomic_fetch_add_explicit(a23 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a23 + 8))(a23);
    }
  }
  sub_21697B754(&a24);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v30, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a26);
  sub_216E0E2CC(v28 - 144);
  _Unwind_Resume(a1);
}

unint64_t sub_216FF911C()
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  v0 = (char *)atomic_load((unint64_t *)&qword_267B94CB0);
  if (!v0)
  {
    v0 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "xformOp:transform", 0);
    uint64_t v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "Xform", 0);
    unint64_t v3 = *(atomic_uint **)v0;
    uint64_t v15 = v3;
    if ((v3 & 7) != 0)
    {
      long long v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v15 = v4;
      }
    }
    long long v5 = (atomic_uint *)*v2;
    int v16 = v5;
    if ((v5 & 7) != 0)
    {
      uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
        int v16 = v6;
      }
    }
    *((void *)v0 + 2) = 0;
    *((void *)v0 + 3) = 0;
    *((void *)v0 + 4) = 0;
    uint64_t v13 = (void **)(v0 + 16);
    char v14 = 0;
    uint64_t v7 = (char *)operator new(0x10uLL);
    uint64_t v8 = 0;
    *((void *)v0 + 2) = v7;
    *((void *)v0 + 3) = v7;
    *((void *)v0 + 4) = v7 + 16;
    do
    {
      BOOL v9 = (&v15)[v8];
      *(void *)&v7[v8 * 8] = v9;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v7[v8 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v8;
    }
    while (v8 != 2);
    *((void *)v0 + 3) = v7 + 16;
    for (uint64_t i = 1; i != -1; --i)
    {
      int64x2_t v11 = (&v15)[i];
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v12 = 0;
    atomic_compare_exchange_strong(&qword_267B94CB0, (unint64_t *)&v12, (unint64_t)v0);
    if (v12)
    {
      uint64_t v13 = (void **)(v0 + 16);
      sub_216889A04(&v13);
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B94CB0);
    }
  }
  return (unint64_t)v0;
}

void sub_216FF92FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v12);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_216FF9384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_216FF9B0C((uint64_t *)a1, a2, a2 + 8 * a3);
  return a1;
}

void sub_216FF93BC(_Unwind_Exception *a1)
{
  sub_2169B2E0C(v1);
  _Unwind_Resume(a1);
}

void *sub_216FF93D4(void *a1)
{
  return a1;
}

void *sub_216FF9400(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  *long long v4 = &unk_26C76F3A0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216FF9460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_216FF94F8((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_216FF9484(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_216FF94AC(uint64_t a1)
{
}

uint64_t sub_216FF94B4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C76F3F0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_216FF94F8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v6 = (void **)(a2 + 80);
    sub_216FF9594(&v6);
    uint64_t v6 = (void **)(a2 + 56);
    sub_216FF969C(&v6);
    unint64_t v3 = *(void **)(a2 + 32);
    if (v3)
    {
      *(void *)(a2 + 40) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void *)(a2 + 24);
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
    sub_21697C414((_DWORD *)(a2 + 16));
    long long v5 = *(atomic_ullong **)(a2 + 8);
    if (v5) {
      sub_216D16E0C(v5);
    }
    operator delete((void *)a2);
  }
}

void sub_216FF9594(void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_216FF962C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216FF962C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_21697C414((_DWORD *)(a2 + 16));
  uint64_t v4 = *(atomic_ullong **)(a2 + 8);
  if (v4)
  {
    sub_216D16E0C(v4);
  }
}

void sub_216FF969C(void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    long long v5 = v2;
    if (v4 != v2)
    {
      do
        pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::~UsdSkelBlendShape((pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)(v4 - 40));
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216FF9720(uint64_t *a1)
{
  if (*a1)
  {
    sub_216FF975C((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_216FF975C(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; sub_2168F83DC(i))
    i -= 40;
  *(void *)(a1 + 8) = a2;
}

void sub_216FF97AC(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_216FF975C((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_216FF9800()
{
}

void sub_216FF9888()
{
}

uint64_t sub_216FF98E4(uint64_t a1)
{
  sub_21677B834((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<((pxrInternal__aapl__pxrReserved__::TfToken *)v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216FF9A18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216FF9A2C(uint64_t result)
{
  if (*(void *)(result + 16) != *(void *)(result + 32)) {
    sub_216E0E280();
  }
  return result;
}

void sub_216FF9AA8(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

BOOL sub_216FF9ABC(_DWORD *a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(this)) {
    return 0;
  }
  uint64_t v5 = sub_216A64148(this);
  return pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v5) == *a1;
}

void sub_216FF9B0C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  sub_2169B2EC0(a1);
  v6[0] = (uint64_t **)&v8;
  v6[1] = (uint64_t **)&v7;
  sub_216FF9B6C(a1, (a3 - a2) >> 3, v6);
}

void sub_216FF9B6C(uint64_t *a1, unint64_t a2, uint64_t ***a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (uint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load((unint64_t *)v7 - 2);
        if (v8 == 1)
        {
          if (v3 >= a2)
          {
            uint64_t v12 = a2;
            do
            {
              uint64_t v13 = v7[v12];
              if ((v13 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              ++v12;
            }
            while (v3 != v12);
            goto LABEL_25;
          }
          BOOL v9 = (uint64_t *)a1[4];
          if (*(v9 - 1) < a2) {
            uint64_t v7 = sub_2169B3204((uint64_t)a1, v9, a2, *a1);
          }
LABEL_19:
          uint64_t v10 = &v7[v3];
          goto LABEL_20;
        }
        uint64_t v7 = (uint64_t *)a1[4];
      }
      if (v3 >= a2) {
        uint64_t v11 = a2;
      }
      else {
        uint64_t v11 = *a1;
      }
      uint64_t v7 = sub_2169B3204((uint64_t)a1, v7, a2, v11);
      if (v3 >= a2) {
        goto LABEL_25;
      }
      goto LABEL_19;
    }
    if (8 * a2 / a2 == 8)
    {
      uint64_t v7 = sub_2169B3164((uint64_t)a1, a2);
      uint64_t v10 = v7;
LABEL_20:
      sub_216FF9CD8(a3, v10);
LABEL_25:
      if (v7 != (uint64_t *)a1[4])
      {
        sub_2169B2E0C(a1);
        a1[4] = (uint64_t)v7;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2169B2EC0(a1);
}

uint64_t ***sub_216FF9CD8(uint64_t ***result, uint64_t *a2)
{
  uint64_t v2 = **result;
  for (uint64_t i = *result[1]; v2 != i; ++a2)
  {
    uint64_t v4 = *v2;
    *a2 = *v2;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *a2 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v2;
  }
  return result;
}

void *sub_216FF9D2C(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v2 = v8 % v9;
      }
    }
    else
    {
      unint64_t v2 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void **)(*(void *)a1 + 8 * v2);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == v5) {
              return v12 + 4;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v2) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  char v14 = (void *)(a1 + 16);
  uint64_t v15 = operator new(0x38uLL);
  v38[0] = v15;
  v38[1] = a1 + 16;
  *uint64_t v15 = 0;
  v15[1] = v8;
  uint64_t v16 = a2[1];
  v15[2] = v5;
  void v15[3] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  v15[4] = 0;
  v15[5] = 0;
  v15[6] = 0;
  char v39 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = (v9 & (v9 - 1)) == 0;
    if (v9 < 3) {
      BOOL v19 = 0;
    }
    unint64_t v20 = (2 * v9) | !v19;
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    else {
      int8x8_t prime = (int8x8_t)v20;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (*(void *)&prime <= v29) {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            sub_21677CA1C();
          }
          long long v23 = operator new(8 * *(void *)&prime);
          unsigned int v24 = *(void **)a1;
          *(void *)a1 = v23;
          if (v24) {
            operator delete(v24);
          }
          uint64_t v25 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v25++) = 0;
          while (*(void *)&prime != v25);
          int v26 = (void *)*v14;
          if (*v14)
          {
            unint64_t v27 = v26[1];
            uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&prime) {
                v27 %= *(void *)&prime;
              }
            }
            else
            {
              v27 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v27) = v14;
            uint64_t v32 = (void *)*v26;
            if (*v26)
            {
              do
              {
                unint64_t v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(void *)&prime) {
                    v33 %= *(void *)&prime;
                  }
                }
                else
                {
                  v33 &= *(void *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v33))
                  {
                    *(void *)(*(void *)a1 + 8 * v33) = v26;
                    goto LABEL_57;
                  }
                  *int v26 = *v32;
                  *uint64_t v32 = **(void **)(*(void *)a1 + 8 * v33);
                  **(void **)(*(void *)a1 + 8 * v33) = v32;
                  uint64_t v32 = v26;
                }
                unint64_t v33 = v27;
LABEL_57:
                int v26 = v32;
                uint64_t v32 = (void *)*v32;
                unint64_t v27 = v33;
              }
              while (v32);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_61;
        }
        int v37 = *(void **)a1;
        *(void *)a1 = 0;
        if (v37) {
          operator delete(v37);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_61:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v2 = v8 % v9;
      }
      else {
        unint64_t v2 = v8;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v8;
    }
  }
  uint64_t v34 = *(void **)(*(void *)a1 + 8 * v2);
  if (v34)
  {
    *(void *)v38[0] = *v34;
    *uint64_t v34 = v38[0];
  }
  else
  {
    *(void *)v38[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v38[0];
    *(void *)(*(void *)a1 + 8 * v2) = v14;
    if (*(void *)v38[0])
    {
      unint64_t v35 = *(void *)(*(void *)v38[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v35 >= v9) {
          v35 %= v9;
        }
      }
      else
      {
        v35 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v35) = v38[0];
    }
  }
  uint64_t v12 = (void *)v38[0];
  v38[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216FFA300((uint64_t)v38);
  return v12 + 4;
}

void sub_216FFA18C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216FFA300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216FFA1A0(double **a1, double **a2, double **a3)
{
  sub_21677C0AC((uint64_t)a3, a1[1] - *a1 + a2[1] - *a2);
  unint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  unint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  uint8x8_t v10 = *a3;
  while (v6 != v7)
  {
    if (v8 == v9)
    {
      size_t v13 = (char *)v7 - (char *)v6;
      char v14 = v10;
      unint64_t v8 = v6;
      goto LABEL_10;
    }
    double v11 = *v8;
    BOOL v12 = *v8 >= *v6;
    if (*v8 >= *v6) {
      double v11 = *v6;
    }
    v8 += *v8 <= *v6;
    v6 += v12;
    *v10++ = v11;
  }
  size_t v13 = (char *)v9 - (char *)v8;
  if (v9 == v8) {
    goto LABEL_11;
  }
  char v14 = v10;
LABEL_10:
  memmove(v14, v8, v13);
LABEL_11:
  sub_21677C0AC((uint64_t)a3, ((char *)v10 + v13 - (char *)*a3) >> 3);
  uint64_t v15 = *a2;
  *a2 = *a3;
  *a3 = v15;
  uint64_t v16 = a2[1];
  a2[1] = a3[1];
  a3[1] = v16;
  float v17 = a2[2];
  a2[2] = a3[2];
  a3[2] = v17;
}

uint64_t sub_216FFA2A0(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_216FFA348(v2 + 2);
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_216FFA300(uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216FFA348(v2 + 2);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_216FFA348(void *a1)
{
  unint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3)
  {
    sub_216784EC4(v3);
  }
}

uint64_t sub_216FFA3A4(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  uint64_t v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint8x8_t v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)uint8x8_t v10 = &unk_26C751420;
        __dmb(0xBu);
        v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C76F418;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)unint64_t v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      unint64_t v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)unint64_t v21 = &unk_26C751420;
      __dmb(0xBu);
      unsigned char v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      long long v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C76F418;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_216FFA7D8(*((void *)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_216FFA7D8(*((void *)this + 4), v6, v4);
  return 0;
}

void sub_216FFA7D8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3 - a2;
  if (a3 > a2)
  {
    uint64_t v5 = 16 * a2;
    do
    {
      unint64_t v6 = *(const char **)(a1 + 8);
      unint64_t v7 = (uint64_t *)(**(void **)a1 + v5);
      unint64_t v8 = (unsigned __int8 *)*v7;
      uint64_t v11 = sub_216FF9D2C(*(void *)(a1 + 16), v7);
      long long __p = 0;
      unsigned __int8 v20 = 0;
      uint64_t v21 = 0;
      if ((~v8[80] & 3) == 0)
      {
        AnimQuery = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetAnimQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v8);
        if (*AnimQuery)
        {
          if (pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointTransformTimeSamplesInInterval(AnimQuery, v6, (char *)&__p))sub_216FFAC74((uint64_t)v11, v11[1], (char *)__p, v20, (v20 - (unsigned char *)__p) >> 3); {
        }
          }
      }
      if ((~v8[176] & 3) == 0)
      {
        uint64_t v13 = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetAnimQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v8);
        if (*v13)
        {
          if (pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeWeightTimeSamplesInInterval(v13, v6, (char *)&__p))sub_216FFAC74((uint64_t)v11, v11[1], (char *)__p, v20, (v20 - (unsigned char *)__p) >> 3); {
        }
          }
      }
      if ((~v8[224] & 3) == 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v8, v9, v10, (uint64_t)&v14);
        sub_216FFA9D0(&v14, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v6, (uint64_t)v11);
        if ((v18 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
        sub_21697C414(&v16);
        if (v15) {
          sub_216D16E0C(v15);
        }
      }
      if (__p)
      {
        unsigned __int8 v20 = (char *)__p;
        operator delete(__p);
      }
      v5 += 16;
      --v3;
    }
    while (v3);
  }
}

void sub_216FFA960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216FFA9D0(int *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  long long __p = 0;
  long long v28 = 0;
  uint64_t v29 = 0;
  int v22 = *a1;
  unint64_t v6 = (atomic_ullong *)*((void *)a1 + 1);
  long long v23 = v6;
  if (v6) {
    atomic_fetch_add_explicit(v6 + 6, 1uLL, memory_order_relaxed);
  }
  sub_216981010(&v24, a1 + 4);
  sub_21698105C(&v25, a1 + 5);
  uint64_t v7 = *((void *)a1 + 3);
  uint64_t v26 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  while (1)
  {
    BOOL IsPseudoRoot = pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v22);
    if (IsPseudoRoot) {
      break;
    }
    StaticTfuint64_t Type = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)IsPseudoRoot);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v10);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v22, SchemaInfo, v12))
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v21, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)a1);
      v21[0] = &unk_26C76D390;
      pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::XformQuery((pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery *)&v16, (const pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v21);
      if (pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetTimeSamplesInInterval(&v16, a2, (uint64_t)&__p))sub_216FFAC74(a3, *(void *)(a3 + 8), (char *)__p, v28, (v28 - (unsigned char *)__p) >> 3); {
      int v13 = v20;
      }
      uint64_t v30 = (void **)&v16;
      sub_216EF9D3C(&v30);
      pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v21);
      if (v13) {
        break;
      }
    }
    sub_216D6B1F8((uint64_t)&v22, (uint64_t)&v16);
    int v22 = v16;
    int v14 = v17;
    int v17 = 0;
    char v15 = v23;
    long long v23 = v14;
    if (v15) {
      sub_216D16E0C(v15);
    }
    sub_21697DE94(&v24, &v18);
    sub_21697DEEC(&v25, &v19);
    if ((v26 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v26 = v20;
    uint64_t v20 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
    sub_21697C414(&v18);
    if (v17) {
      sub_216D16E0C(v17);
    }
  }
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_21697C414(&v24);
  if (v23) {
    sub_216D16E0C(v23);
  }
  if (__p)
  {
    long long v28 = (char *)__p;
    operator delete(__p);
  }
}

void sub_216FFAC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  *(void *)(v22 - 88) = &a10;
  sub_216EF9D3C((void ***)(v22 - 88));
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&a14);
  sub_216D16AD8((uint64_t)&a17);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

char *sub_216FFAC74(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    int v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      sub_21677CB10();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      int v18 = (char *)sub_21677CB28(v9, v17);
    }
    else {
      int v18 = 0;
    }
    long long v28 = &v18[8 * v15];
    long long __p = v18;
    uint64_t v34 = v28;
    uint64_t v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    uint64_t v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)long long v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    unint64_t v35 = v30;
    uint64_t v5 = sub_216C50DD0((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[8 * a5];
    long long v23 = *(char **)(v9 - 8);
LABEL_17:
    int v24 = &v5[8 * a5];
    int v25 = &v23[-8 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)uint64_t v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  long long v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_216FFAE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FFAE8C(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  unint64_t v4 = (long long *)((char *)this + 8);
  unint64_t v5 = *((void *)this + 3);
  unint64_t v6 = *((void *)this + 1) - *((void *)this + 2);
  if (v5 < v6)
  {
    unint64_t v7 = *((void *)this + 5);
    if (v7 > 1) {
      goto LABEL_12;
    }
    if (v7 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        unint64_t v8 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(void *)unint64_t v8 = &unk_26C751420;
        __dmb(0xBu);
        v8[8] = 0;
        *((void *)this - 4) = v8;
        *((void *)v8 - 3) = 2;
        uint64_t v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(unsigned char *)(v9 - 11) = 1;
        *(void *)uint64_t v9 = &unk_26C76F460;
        *(void *)(v9 + 8) = *((void *)this + 1);
        uint64_t v10 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v10;
        *(void *)(v9 + 16) = v10;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v11 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v11;
        *(void *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(unsigned char *)(v9 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v9 - 40))();
        unint64_t v5 = *((void *)this + 3);
        unint64_t v6 = *((void *)this + 1) - *((void *)this + 2);
        if (v5 >= v6) {
          break;
        }
        unint64_t v12 = *((void *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)int v25 = 0x10000;
    long long v26 = *v4;
    uint64_t v27 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v25, *((unsigned __int8 *)this + 52));
      char v13 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0) {
        break;
      }
      unsigned __int8 v16 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v16;
      unsigned __int8 v15 = v25[2];
      if (v25[2] < 2u)
      {
        unsigned int v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((void *)&v26 + 3 * v25[0] + 2) < *((void *)&v26 + 3 * v25[0]) - *((void *)&v26 + 3 * v25[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v17 = v25[1];
      unsigned __int8 v18 = v25[v25[1] + 3];
      uint64_t v19 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(void *)uint64_t v19 = &unk_26C751420;
      __dmb(0xBu);
      v19[8] = 0;
      *((void *)this - 4) = v19;
      *((void *)v19 - 3) = 2;
      uint64_t v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      uint64_t v21 = (char *)&v26 + 24 * v17;
      *(unsigned char *)(v20 - 11) = 1;
      *(void *)uint64_t v20 = &unk_26C76F460;
      long long v22 = *(_OWORD *)v21;
      *(void *)(v20 + 24) = *((void *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(void *)(v20 + 32) = *((void *)this + 4);
      uint64_t v23 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v23;
      *(void *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(unsigned char *)(v20 + 52) = *((unsigned char *)this + 52) - v18;
      (***(void (****)(void))(v20 - 40))();
      unsigned __int8 v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v14 = v25[0];
LABEL_22:
    sub_216FFB2C0((double *)this, (void *)&v26 + 3 * v14);
    unsigned __int8 v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_216FFB2C0((double *)this, (void *)this + 1);
  return 0;
}

double *sub_216FFB2C0(double *result, void *a2)
{
  unint64_t v2 = a2[1];
  unint64_t v3 = *a2 - v2;
  if (*a2 > v2)
  {
    uint64_t v4 = *((void *)result + 4);
    uint64_t v5 = 16 * v2;
    do
    {
      unint64_t v6 = (double **)sub_216FF9D2C(*(void *)v4, (uint64_t *)(**(void **)(v4 + 8) + v5));
      std::__sort<std::__less<double,double> &,double *>();
      uint64_t result = sub_216C4287C(*v6, v6[1]);
      if (v6[1] != result) {
        v6[1] = result;
      }
      v5 += 16;
      --v3;
    }
    while (v3);
  }
  return result;
}

char *sub_216FFB374(uint64_t a1, char *__src, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = __src;
  if (a5 < 1) {
    return v5;
  }
  unint64_t v7 = a3;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    char v13 = *(unsigned char **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      sub_21677CB10();
    }
    uint64_t v15 = (__src - v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v40 = v9;
    if (v17) {
      unsigned __int8 v18 = (char *)sub_21677CB28(v9, v17);
    }
    else {
      unsigned __int8 v18 = 0;
    }
    uint64_t v31 = &v18[8 * v15];
    long long __p = v18;
    uint64_t v37 = v31;
    char v39 = &v18[8 * v17];
    uint64_t v32 = 8 * a5;
    unint64_t v33 = &v31[8 * a5];
    do
    {
      uint64_t v34 = *v7++;
      *(void *)uint64_t v31 = v34;
      v31 += 8;
      v32 -= 8;
    }
    while (v32);
    uint64_t v38 = v33;
    uint64_t v5 = sub_216891860((void **)a1, (uint64_t)&__p, v5);
    if (v38 != v37) {
      v38 += (v37 - v38 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = (uint64_t)(v12 - (void)__src) >> 3;
  if (v19 >= a5)
  {
    uint64_t v20 = &a3[a5];
    uint64_t v21 = *(char **)(v9 - 8);
LABEL_18:
    int v25 = &__src[8 * a5];
    long long v26 = &v21[-8 * a5];
    uint64_t v27 = v21;
    if ((unint64_t)v26 < v12)
    {
      uint64_t v27 = v21;
      do
      {
        uint64_t v28 = *(void *)v26;
        v26 += 8;
        *(void *)uint64_t v27 = v28;
        v27 += 8;
      }
      while ((unint64_t)v26 < v12);
    }
    *(void *)(a1 + 8) = v27;
    if (v21 != v25) {
      memmove(&v21[-8 * ((v21 - v25) >> 3)], __src, v21 - v25);
    }
    if (v20 != v7)
    {
      uint64_t v29 = v5;
      do
      {
        uint64_t v30 = *v7++;
        *(void *)uint64_t v29 = v30;
        v29 += 8;
      }
      while (v7 != v20);
    }
    return v5;
  }
  uint64_t v20 = &a3[v19];
  uint64_t v21 = *(char **)(v9 - 8);
  if (v20 != a4)
  {
    long long v22 = v20;
    uint64_t v23 = *(void **)(v9 - 8);
    do
    {
      uint64_t v24 = *v22++;
      *v23++ = v24;
      v21 += 8;
    }
    while (v22 != a4);
  }
  *(void *)(a1 + 8) = v21;
  if ((uint64_t)(v12 - (void)__src) >= 1) {
    goto LABEL_18;
  }
  return v5;
}

void sub_216FFB558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FFB598(tbb::internal::allocate_continuation_proxy *this, double a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v3 = *((void *)this - 4);
      if (*(int *)(v3 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v3 + 8) = 1;
        unsigned int v4 = *((unsigned __int8 *)this + 52);
        if (v4 <= 1) {
          LOBYTE(v4) = 1;
        }
        *((unsigned char *)this + 52) = v4 + 1;
      }
    }
  }
  unint64_t v6 = (long long *)((char *)this + 8);
  unint64_t v5 = *((void *)this + 1);
  unint64_t v7 = *((void *)this + 2);
  unint64_t v8 = *((void *)this + 3);
  unint64_t v9 = v5 - v7;
  if (v8 < v5 - v7)
  {
    unint64_t v10 = *((void *)this + 5);
    if (v10 > 1) {
      goto LABEL_12;
    }
    if (v10 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v11 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C751420;
        __dmb(0xBu);
        v11[8] = 0;
        *((void *)this - 4) = v11;
        *((void *)v11 - 3) = 2;
        uint64_t v12 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v11, 0x38uLL);
        *(unsigned char *)(v12 - 11) = 1;
        *(void *)uint64_t v12 = &unk_26C76F4A8;
        *(void *)(v12 + 8) = *((void *)this + 1);
        uint64_t v13 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v13;
        *(void *)(v12 + 16) = v13;
        *(_OWORD *)(v12 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v14 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v14;
        *(void *)(v12 + 40) = v14;
        *(_DWORD *)(v12 + 48) = 2;
        *(unsigned char *)(v12 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v12 - 40))();
        unint64_t v7 = *((void *)this + 2);
        unint64_t v8 = *((void *)this + 3);
        unint64_t v5 = *((void *)this + 1);
        unint64_t v9 = v5 - v7;
        if (v8 >= v5 - v7) {
          break;
        }
        unint64_t v15 = *((void *)this + 5);
        if (v15 <= 1)
        {
          if (!v15 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v8 < v9 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)uint64_t v29 = 0x10000;
    long long v30 = *v6;
    uint64_t v31 = *((void *)this + 3);
    while (1)
    {
      *(void *)&double v16 = sub_216B17510(v29, *((unsigned __int8 *)this + 52)).n128_u64[0];
      char v17 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v17 & 1) == 0) {
        break;
      }
      unsigned __int8 v20 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v20;
      unsigned __int8 v19 = v29[2];
      if (v29[2] < 2u)
      {
        unsigned int v18 = v29[0];
        if (v29[v29[0] + 3] < v20
          && *((void *)&v30 + 3 * v29[0] + 2) < *((void *)&v30 + 3 * v29[0]) - *((void *)&v30 + 3 * v29[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v21 = v29[1];
      unsigned __int8 v22 = v29[v29[1] + 3];
      uint64_t v23 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v23 - 11) = 1;
      *(void *)uint64_t v23 = &unk_26C751420;
      __dmb(0xBu);
      v23[8] = 0;
      *((void *)this - 4) = v23;
      *((void *)v23 - 3) = 2;
      uint64_t v24 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v23, 0x38uLL);
      int v25 = (char *)&v30 + 24 * v21;
      *(unsigned char *)(v24 - 11) = 1;
      *(void *)uint64_t v24 = &unk_26C76F4A8;
      long long v26 = *(_OWORD *)v25;
      *(void *)(v24 + 24) = *((void *)v25 + 2);
      *(_OWORD *)(v24 + 8) = v26;
      *(void *)(v24 + 32) = *((void *)this + 4);
      uint64_t v27 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v27;
      *(void *)(v24 + 40) = v27;
      *(_DWORD *)(v24 + 48) = 2;
      *(unsigned char *)(v24 + 52) = *((unsigned char *)this + 52) - v22;
      (***(void (****)(void))(v24 - 40))();
      unsigned __int8 v19 = --v29[2];
      v29[1] = (v29[1] + 1) & 7;
LABEL_27:
      if (!v19 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v18 = v29[0];
LABEL_22:
    sub_216FFB9CC(*((void *)this + 4), *((void *)&v30 + 3 * v18 + 1), *((void *)&v30 + 3 * v18), v16);
    unsigned __int8 v19 = --v29[2];
    v29[0] = (v29[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_216FFB9CC(*((void *)this + 4), v7, v5, a2);
  return 0;
}

double sub_216FFB9CC(uint64_t a1, unint64_t a2, unint64_t a3, double result)
{
  if (a2 < a3)
  {
    unint64_t v5 = a2;
    do
    {
      unint64_t v7 = (uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 3;
      unsigned __int8 v49 = 0;
      sub_216FFBC3C(&v50, v7, &v49);
      unint64_t v8 = (double **)sub_216FF9D2C(*(void *)(a1 + 8), (uint64_t *)(**(void **)(a1 + 16) + 16 * v5));
      unint64_t v10 = *v8;
      unint64_t v9 = v8[1];
      if (*v8 == v9)
      {
        unint64_t v15 = v50;
        *v50 |= 1uLL;
      }
      else
      {
        uint64_t v11 = *(double ***)(a1 + 24);
        uint64_t v12 = *v11;
        uint64_t v13 = v11[1];
        uint64_t v14 = v13 - *v11;
        unint64_t v15 = v50;
        double v16 = *v8;
        do
        {
          uint64_t v17 = v14;
          if (v13 != v12)
          {
            unsigned int v18 = v12;
            unint64_t v19 = v14;
            do
            {
              unint64_t v20 = v19 >> 1;
              unsigned int v21 = &v18[v19 >> 1];
              double v23 = *v21;
              unsigned __int8 v22 = v21 + 1;
              v19 += ~(v19 >> 1);
              if (v23 < *v16) {
                unsigned int v18 = v22;
              }
              else {
                unint64_t v19 = v20;
              }
            }
            while (v19);
            uint64_t v17 = v18 - v12;
          }
          *(void *)((char *)v15 + (((unint64_t)(v17 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (v17 + 1);
          ++v16;
        }
        while (v16 != v9);
        if ((unint64_t)((char *)v9 - (char *)v10) > 8)
        {
          uint64_t v24 = *(double ***)(a1 + 32);
          int v25 = *v24;
          uint64_t v26 = (char *)v24[1] - (char *)*v24;
          if (v26)
          {
            unint64_t v27 = v26 >> 3;
            double v28 = *v10;
            uint64_t v29 = v25;
            unint64_t v30 = v27;
            do
            {
              unint64_t v31 = v30 >> 1;
              uint64_t v32 = &v29[v30 >> 1];
              double v34 = *v32;
              unint64_t v33 = v32 + 1;
              v30 += ~(v30 >> 1);
              if (v34 < v28) {
                uint64_t v29 = v33;
              }
              else {
                unint64_t v30 = v31;
              }
            }
            while (v30);
            double v35 = *(v9 - 1);
            do
            {
              unint64_t v36 = v27 >> 1;
              uint64_t v37 = &v25[v27 >> 1];
              double v39 = *v37;
              uint64_t v38 = v37 + 1;
              v27 += ~(v27 >> 1);
              if (v35 < v39) {
                unint64_t v27 = v36;
              }
              else {
                int v25 = v38;
              }
            }
            while (v27);
            while (v29 != v25)
            {
              uint64_t v40 = v14;
              if (v13 != v12)
              {
                uint64_t v41 = v12;
                unint64_t v42 = v14;
                do
                {
                  unint64_t v43 = v42 >> 1;
                  char v44 = &v41[v42 >> 1];
                  double v46 = *v44;
                  uint64_t v45 = v44 + 1;
                  v42 += ~(v42 >> 1);
                  if (v46 < *v29) {
                    uint64_t v41 = v45;
                  }
                  else {
                    unint64_t v42 = v43;
                  }
                }
                while (v42);
                uint64_t v40 = v41 - v12;
              }
              *(void *)((char *)v15 + (((unint64_t)(v40 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (v40 + 1);
              ++v29;
            }
          }
        }
      }
      int v47 = *(void **)(**(void **)(a1 + 16) + 16 * v5);
      uint64_t v48 = (void *)v47[45];
      if (v48)
      {
        operator delete(v48);
        v47[45] = 0;
        v47[46] = 0;
        v47[47] = 0;
        unint64_t v15 = v50;
      }
      v47[45] = v15;
      uint64_t result = *(double *)&v51;
      *((_OWORD *)v47 + 23) = v51;
      ++v5;
    }
    while (v5 != a3);
  }
  return result;
}

void sub_216FFBC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216FFBC3C(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216805AB0(a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          sub_216805E30(&v13, a2);
        }
        else {
          sub_216805EE4((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

uint64_t sub_216FFBD18(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  unsigned int v4 = (long long *)((char *)this + 8);
  unint64_t v5 = *((void *)this + 3);
  unint64_t v6 = (uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 4;
  if (v5 < v6)
  {
    unint64_t v7 = *((void *)this + 5);
    if (v7 > 1) {
      goto LABEL_12;
    }
    if (v7 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        unint64_t v8 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(void *)unint64_t v8 = &unk_26C751420;
        __dmb(0xBu);
        v8[8] = 0;
        *((void *)this - 4) = v8;
        *((void *)v8 - 3) = 2;
        uint64_t v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(unsigned char *)(v9 - 11) = 1;
        *(void *)uint64_t v9 = &unk_26C76F4F0;
        *(void *)(v9 + 8) = *((void *)this + 1);
        unint64_t v10 = *((void *)this + 2)
            + 16
            * ((((uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 4)
              + (unint64_t)((uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 4 < 0)) >> 1);
        *((void *)this + 1) = v10;
        *(void *)(v9 + 16) = v10;
        *(void *)(v9 + 24) = *((void *)this + 3);
        *(void *)(v9 + 32) = *((void *)this + 4);
        uint64_t v11 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v11;
        *(void *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(unsigned char *)(v9 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v9 - 40))();
        unint64_t v5 = *((void *)this + 3);
        unint64_t v6 = (uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 4;
        if (v5 >= v6) {
          break;
        }
        unint64_t v12 = *((void *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)int v25 = 0x10000;
    long long v26 = *v4;
    uint64_t v27 = *((void *)this + 3);
    while (1)
    {
      sub_216FFC1D8(v25, *((unsigned __int8 *)this + 52));
      char v13 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0) {
        break;
      }
      unsigned __int8 v16 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v16;
      unsigned __int8 v15 = v25[2];
      if (v25[2] < 2u)
      {
        unsigned int v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((void *)&v26 + 3 * v25[0] + 2) < (unint64_t)((uint64_t)(*((void *)&v26 + 3 * v25[0])
                                                                             - *((void *)&v26 + 3 * v25[0] + 1)) >> 4))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v17 = v25[1];
      unsigned __int8 v18 = v25[v25[1] + 3];
      unint64_t v19 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(void *)unint64_t v19 = &unk_26C751420;
      __dmb(0xBu);
      v19[8] = 0;
      *((void *)this - 4) = v19;
      *((void *)v19 - 3) = 2;
      uint64_t v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      unsigned int v21 = (char *)&v26 + 24 * v17;
      *(unsigned char *)(v20 - 11) = 1;
      *(void *)uint64_t v20 = &unk_26C76F4F0;
      long long v22 = *(_OWORD *)v21;
      *(void *)(v20 + 24) = *((void *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(void *)(v20 + 32) = *((void *)this + 4);
      uint64_t v23 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v23;
      *(void *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(unsigned char *)(v20 + 52) = *((unsigned char *)this + 52) - v18;
      (***(void (****)(void))(v20 - 40))();
      unsigned __int8 v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v14 = v25[0];
LABEL_22:
    sub_216FFC16C((uint64_t)this, (uint64_t **)&v26 + 3 * v14);
    unsigned __int8 v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_216FFC16C((uint64_t)this, (uint64_t **)this + 1);
  return 0;
}

uint64_t sub_216FFC16C(uint64_t result, uint64_t **a2)
{
  unsigned int v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2 != *a2)
  {
    uint64_t v4 = result;
    do
    {
      unint64_t v5 = *(unsigned __int8 ***)(v4 + 32);
      unint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v2);
      uint64_t result = pxrInternal__aapl__pxrReserved__::SdfLayer::Save(v6, 0);
      if ((result & 1) == 0) {
        atomic_store(1u, *v5);
      }
      v2 += 2;
    }
    while (v2 != v3);
  }
  return result;
}

unsigned __int8 *sub_216FFC1D8(unsigned __int8 *result, unsigned int a2)
{
  unsigned int v2 = result[2];
  if (v2 <= 7)
  {
    unsigned int v3 = result + 16;
    unint64_t v4 = *result;
    unsigned __int8 v5 = result[v4 + 3];
    do
    {
      if (a2 <= v5) {
        break;
      }
      char v6 = v4;
      unint64_t v7 = &v3[24 * v4];
      unint64_t v8 = v7 + 16;
      uint64_t v9 = v7 + 8;
      if (*((void *)v7 + 2) >= (unint64_t)((uint64_t)(*(void *)v7 - *((void *)v7 + 1)) >> 4)) {
        break;
      }
      unint64_t v4 = (unint64_t)&result[v4];
      uint64_t v10 = (v6 + 1) & 7;
      uint64_t v11 = &v3[24 * v10];
      uint64_t v12 = *((void *)v7 + 2);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v7;
      *((void *)v11 + 2) = v12;
      uint64_t v13 = *((void *)v11 + 1);
      *(void *)unint64_t v7 = *(void *)v11;
      *uint64_t result = v10;
      uint64_t v14 = v13 + 16 * ((((*(void *)v11 - v13) >> 4) + (unint64_t)((*(void *)v11 - v13) >> 4 < 0)) >> 1);
      *(void *)uint64_t v11 = v14;
      *uint64_t v9 = v14;
      *unint64_t v8 = v12;
      unsigned __int8 v5 = *(unsigned char *)(v4 + 3) + 1;
      *(unsigned char *)(v4 + 3) = v5;
      result[v10 + 3] = v5;
      result[2] = v2 + 1;
      LOBYTE(v4) = v10;
    }
    while (v2++ < 7);
  }
  return result;
}

void *sub_216FFC2AC(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216782E84(a1, a2);
    sub_216FFC318((uint64_t)a1, a2);
  }
  return a1;
}

void sub_216FFC304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_216FFC318(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)(a1 + 8);
  if (a2)
  {
    unint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v3 + 24 * a2);
    uint64_t v5 = 24 * a2;
    do
    {
      sub_216FFC38C(a1 + 16, v3);
      unsigned int v3 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v3 + 24);
      v5 -= 24;
    }
    while (v5);
    unsigned int v3 = v4;
  }
  *(void *)(a1 + 8) = v3;
}

void sub_216FFC384(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216FFC38C(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2)
{
  int v3 = 1;
  unint64_t v4 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v6);
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v3);
  *(void *)a2 = &unk_26C76FA18;
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
}

void sub_216FFC450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216FFC464(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2168724E8(a1, a2);
    unint64_t v4 = (char *)a1[1];
    size_t v5 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_216FFC4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_216FFC510(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  size_t v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)uint64_t v10 = &unk_26C751420;
        __dmb(0xBu);
        v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C76F538;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)uint64_t v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      unsigned int v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)unsigned int v21 = &unk_26C751420;
      __dmb(0xBu);
      unsigned char v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      uint64_t v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C76F538;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_216FFC944(*((void ***)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_216FFC944(*((void ***)this + 4), v6, v4);
  return 0;
}

void sub_216FFC944(void **a1, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    unint64_t v4 = a2;
    do
    {
      unint64_t v6 = (const pxrInternal__aapl__pxrReserved__::UsdPrim **)(**a1 + 16 * v4);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v13, *v6);
      v13[0] = &unk_26C76C628;
      unint64_t v7 = a1[1];
      uint64_t v8 = *v7;
      uint64_t v9 = v7[1] - *v7;
      if (v9)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        unint64_t v12 = v9 >> 3;
        do
        {
          if (*((_DWORD *)*v6 + 104))
          {
            if ((*(void *)(*(void *)(*((void *)*v6 + 50) + 360) + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11))
            {
              pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::ComputeExtentFromPlugins((uint64_t)v13, v8 + v10, *a1[2] + 40 * (v11 + v4 * v12));
              unint64_t v7 = a1[1];
              uint64_t v8 = *v7;
            }
          }
          ++v11;
          unint64_t v12 = (v7[1] - v8) >> 3;
          v10 += 8;
        }
        while (v11 < v12);
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)v13);
      ++v4;
    }
    while (v4 != a3);
  }
}

void sub_216FFCA68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)va);
  _Unwind_Resume(a1);
}

void sub_216FFCA7C(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 32 * a2;
      while (v3 != v6)
      {
        v3 -= 32;
        sub_216E1B41C((uint64_t)(a1 + 2), v3);
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    sub_216FFCD2C((uint64_t)a1, v5);
  }
}

void **sub_216FFCB14(void **a1)
{
  if (*a1)
  {
    sub_216FFCF30((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_216FFCB50(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216FFCBF8((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_216FFCBB0(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216FFCBF8((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_216FFCBF8(uint64_t a1)
{
  sub_216FFCC74((void *)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v3 = *(atomic_ullong **)(a1 + 8);
  if (v3)
  {
    sub_216D16E0C(v3);
  }
}

void sub_216FFCC74(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    unint64_t v4 = a1 + 3;
    uint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v8 = *(void (**)(void))(*v4 + 8);
        if (v8) {
          v8();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 16 * *a1;
        unint64_t v7 = (std::__shared_weak_count **)(v5 + 8);
        do
        {
          if (*v7) {
            sub_216784EC4(*v7);
          }
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    *unint64_t v4 = 0;
    v4[1] = 0;
  }
}

void **sub_216FFCD2C(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v4 = a1 + 16;
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    return (void **)sub_216FFCE38((_DWORD *)a1, a2);
  }
  else
  {
    uint64_t v8 = v7 - *(void *)a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      sub_21677CB10();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *(void *)a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)sub_2168707F4(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    char v15 = v13;
    unsigned int v16 = &v13[32 * v10];
    unsigned __int8 v17 = v16;
    unsigned __int8 v18 = &v13[32 * v12];
    sub_216FFCEB4(&v15, a2);
    sub_216E1B57C((uint64_t *)a1, &v15);
    return sub_216E1B738(&v15);
  }
}

void sub_216FFCE24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216E1B738((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216FFCE38(_DWORD *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((void *)result + 1);
  if (a2)
  {
    uint64_t v4 = v3 + 32 * a2;
    uint64_t v5 = v3 + 16;
    do
    {
      *(_DWORD *)(v5 - 16) = 1;
      *(void *)(v5 - 8) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v5);
      uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(v5 + 4));
      *(void *)(v5 + 8) = 0;
      uint64_t v6 = v5 + 16;
      v5 += 32;
    }
    while (v6 != v4);
  }
  else
  {
    uint64_t v4 = *((void *)result + 1);
  }
  *((void *)v2 + 1) = v4;
  return result;
}

_DWORD *sub_216FFCEB4(_DWORD *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((void *)result + 2);
  if (a2)
  {
    uint64_t v4 = v3 + 32 * a2;
    uint64_t v5 = v3 + 16;
    do
    {
      *(_DWORD *)(v5 - 16) = 1;
      *(void *)(v5 - 8) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v5);
      uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(v5 + 4));
      *(void *)(v5 + 8) = 0;
      uint64_t v6 = v5 + 16;
      v5 += 32;
    }
    while (v6 != v4);
  }
  else
  {
    uint64_t v4 = *((void *)result + 2);
  }
  *((void *)v2 + 2) = v4;
  return result;
}

void sub_216FFCF30(uint64_t a1, void *a2)
{
  for (uint64_t i = *(void **)(a1 + 8); i != a2; sub_216FFCC74(i))
    i -= 5;
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_216FFCF88(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  uint64_t v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)uint64_t v10 = &unk_26C751420;
        __dmb(0xBu);
        v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C76F580;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)uint64_t v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      unsigned int v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)unsigned int v21 = &unk_26C751420;
      __dmb(0xBu);
      unsigned char v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      uint64_t v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C76F580;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_216FFD3BC(*((pxrInternal__aapl__pxrReserved__::UsdGeomImageable **)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_216FFD3BC(*((pxrInternal__aapl__pxrReserved__::UsdGeomImageable **)this + 4), v6, v4);
  return 0;
}

void sub_216FFD3BC(pxrInternal__aapl__pxrReserved__::UsdGeomImageable *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a2;
  v30[6] = *MEMORY[0x263EF8340];
  double v5 = *(double *)(**(void **)a1 + 8 * a2);
  OrderedPurposeTokens = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdGeomImageable::GetOrderedPurposeTokens(a1);
  memset(v26, 0, sizeof(v26));
  sub_21698FA28(v26, *OrderedPurposeTokens, OrderedPurposeTokens[1], OrderedPurposeTokens[1] - *OrderedPurposeTokens);
  pxrInternal__aapl__pxrReserved__::UsdGeomBBoxCache::UsdGeomBBoxCache(v27, v26, 0, 0, v5);
  *(void *)&long long v22 = v26;
  sub_216889A04((void ***)&v22);
  if (v3 < a3)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomBBoxCache::SetTime((uint64_t)v27, *(double *)(**(void **)a1 + 8 * v3));
      unint64_t v7 = (uint64_t *)*((void *)a1 + 1);
      uint64_t v8 = *v7;
      if (v7[1] != *v7)
      {
        unint64_t v9 = 0;
        do
        {
          uint64_t v10 = (uint64_t *)(v8 + 40 * v9);
          uint64_t v11 = *v10;
          if (*v10)
          {
            uint64_t v12 = v10[4];
            uint64_t v13 = 16 * v11;
            while (!*(_DWORD *)(*(void *)v12 + 416)
                 || (*(void *)(*(void *)(*(void *)(*(void *)v12 + 400) + 360) + 8 * (v3 >> 6)) & (1 << v3)) == 0)
            {
              v12 += 16;
              v13 -= 16;
              if (!v13) {
                goto LABEL_13;
              }
            }
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v25, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)(**((void **)a1 + 2) + 32 * v9));
            v25[3] = 0;
            v25[0] = &unk_26C76CB40;
            uint64_t v15 = **(void **)a1;
            uint64_t v14 = *(void *)(*(void *)a1 + 8);
            pxrInternal__aapl__pxrReserved__::UsdGeomModelAPI::ComputeExtentsHint((pxrInternal__aapl__pxrReserved__::UsdGeomModelAPI *)v25, (pxrInternal__aapl__pxrReserved__::UsdGeomBBoxCache *)v27, v16, (uint64_t)&v22);
            unint64_t v17 = v3 + ((v14 - v15) >> 3) * v9;
            uint64_t v18 = **((void **)a1 + 3);
            unsigned int v19 = (long long *)(v18 + 40 * v17);
            if (v19 != &v22)
            {
              sub_2168F83DC(v18 + 40 * v17);
              long long v20 = v23;
              *unsigned int v19 = v22;
              v19[1] = v20;
              long long v22 = 0u;
              long long v23 = 0u;
              *(void *)(v18 + 40 * v17 + 32) = v24;
              uint64_t v24 = 0;
            }
            sub_2168F83DC((uint64_t)&v22);
            pxrInternal__aapl__pxrReserved__::UsdGeomModelAPI::~UsdGeomModelAPI((pxrInternal__aapl__pxrReserved__::UsdGeomModelAPI *)v25);
            unint64_t v7 = (uint64_t *)*((void *)a1 + 1);
            uint64_t v8 = *v7;
          }
LABEL_13:
          ++v9;
        }
        while (v9 < 0xCCCCCCCCCCCCCCCDLL * ((v7[1] - v8) >> 3));
      }
      ++v3;
    }
    while (v3 != a3);
  }
  sub_216EFF674((uint64_t)v30);
  sub_216EF9C4C((uint64_t)&v29);
  *(void *)&long long v22 = &v28;
  sub_216889A04((void ***)&v22);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v27);
}

void sub_216FFD630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_216FFD698(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21677CACC(a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_216FFD6F4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FFD718(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  unint64_t v4 = (long long *)((char *)this + 8);
  unint64_t v5 = *((void *)this + 3);
  unint64_t v6 = (uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 4;
  if (v5 < v6)
  {
    unint64_t v7 = *((void *)this + 5);
    if (v7 > 1) {
      goto LABEL_12;
    }
    if (v7 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v8 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(void *)uint64_t v8 = &unk_26C751420;
        __dmb(0xBu);
        v8[8] = 0;
        *((void *)this - 4) = v8;
        *((void *)v8 - 3) = 2;
        uint64_t v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(unsigned char *)(v9 - 11) = 1;
        *(void *)uint64_t v9 = &unk_26C76F5C8;
        *(void *)(v9 + 8) = *((void *)this + 1);
        unint64_t v10 = *((void *)this + 2)
            + 16
            * ((((uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 4)
              + (unint64_t)((uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 4 < 0)) >> 1);
        *((void *)this + 1) = v10;
        *(void *)(v9 + 16) = v10;
        *(void *)(v9 + 24) = *((void *)this + 3);
        *(void *)(v9 + 32) = *((void *)this + 4);
        uint64_t v11 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v11;
        *(void *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(unsigned char *)(v9 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v9 - 40))();
        unint64_t v5 = *((void *)this + 3);
        unint64_t v6 = (uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 4;
        if (v5 >= v6) {
          break;
        }
        unint64_t v12 = *((void *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6)
  {
    unsigned __int8 v13 = *((unsigned char *)this + 52);
    if (v13)
    {
      *(_DWORD *)double v34 = 0x10000;
      long long v35 = *v4;
      uint64_t v36 = *((void *)this + 3);
      unsigned __int8 v14 = 1;
      while (1)
      {
        if (v14 <= 7u)
        {
          LOBYTE(v15) = v34[0];
          for (unsigned int i = v34[v34[0] + 3]; i < v13; unsigned int i = v23)
          {
            uint64_t v17 = v15;
            uint64_t v18 = (void *)&v35 + 3 * v15;
            if (v18[2] >= (unint64_t)((uint64_t)(*v18 - v18[1]) >> 4)) {
              break;
            }
            unsigned int v15 = ((_BYTE)v15 + 1) & 7;
            unsigned int v19 = (char *)&v35 + 24 * v15;
            uint64_t v20 = v18[2];
            *(_OWORD *)unsigned int v19 = *(_OWORD *)v18;
            *((void *)v19 + 2) = v20;
            uint64_t v21 = *((void *)v19 + 1);
            *uint64_t v18 = *(void *)v19;
            uint64_t v22 = v21
                + 16 * ((((*(void *)v19 - v21) >> 4) + (unint64_t)((*(void *)v19 - v21) >> 4 < 0)) >> 1);
            *(void *)unsigned int v19 = v22;
            v18[1] = v22;
            v18[2] = v20;
            unsigned __int8 v23 = v34[v17 + 3] + 1;
            v34[v17 + 3] = v23;
            v34[v15 + 3] = v23;
            unsigned int v24 = v14++;
            if (v24 > 6) {
              break;
            }
          }
          v34[0] = v15;
          v34[2] = v14;
        }
        char v25 = *(unsigned char *)(*((void *)this - 4) + 8);
        __dmb(0xBu);
        if ((v25 & 1) == 0) {
          break;
        }
        unsigned __int8 v27 = *((unsigned char *)this + 52) + 1;
        *((unsigned char *)this + 52) = v27;
        unsigned __int8 v14 = v34[2];
        if (v34[2] < 2u)
        {
          unsigned int v26 = v34[0];
          if (v34[v34[0] + 3] >= v27
            || *((void *)&v35 + 3 * v34[0] + 2) >= (unint64_t)((uint64_t)(*((void *)&v35 + 3 * v34[0])
                                                                                - *((void *)&v35 + 3 * v34[0] + 1)) >> 4))
          {
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v28 = (char *)&v35 + 24 * v34[1];
          unsigned __int8 v29 = v34[v34[1] + 3];
          uint64_t v30 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
          *(v30 - 11) = 1;
          *(void *)uint64_t v30 = &unk_26C751420;
          __dmb(0xBu);
          void v30[8] = 0;
          *((void *)this - 4) = v30;
          *((void *)v30 - 3) = 2;
          uint64_t v31 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v30, 0x38uLL);
          *(unsigned char *)(v31 - 11) = 1;
          *(void *)uint64_t v31 = &unk_26C76F5C8;
          *(_OWORD *)(v31 + 8) = *(_OWORD *)v28;
          *(void *)(v31 + 24) = *((void *)v28 + 2);
          *(void *)(v31 + 32) = *((void *)this + 4);
          uint64_t v32 = *((void *)this + 5) >> 1;
          *((void *)this + 5) = v32;
          *(void *)(v31 + 40) = v32;
          *(_DWORD *)(v31 + 48) = 2;
          *(unsigned char *)(v31 + 52) = *((unsigned char *)this + 52) - v29;
          (***(void (****)(void))(v31 - 40))();
          unsigned __int8 v14 = --v34[2];
          v34[1] = (v34[1] + 1) & 7;
        }
LABEL_34:
        if (!v14 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
          return 0;
        }
        unsigned __int8 v13 = *((unsigned char *)this + 52);
      }
      unsigned int v26 = v34[0];
      unsigned __int8 v14 = v34[2];
LABEL_33:
      sub_216FFDC28((uint64_t)this, (uint64_t **)&v35 + 3 * v26);
      v34[2] = --v14;
      v34[0] = (v26 - 1) & 7;
      goto LABEL_34;
    }
  }
  sub_216FFDC28((uint64_t)this, (uint64_t **)this + 1);
  return 0;
}

void sub_216FFDC28(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = a2[1];
  uint64_t v57 = *a2;
  if (v2 != *a2)
  {
    unint64_t v4 = (_DWORD *)__p + 1;
    do
    {
      unint64_t v5 = *(double **)(a1 + 32);
      unint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)*v2;
      double v7 = *v5;
      unint64_t v8 = *((void *)v5 + 1);
      double v58 = v7;
      if ((*(void *)(*((void *)v6 + 45) + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8))
      {
        if (sub_216FDC16C(1))
        {
          pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim(v6, v9, v10, (uint64_t)&v67);
          sub_216D0162C((uint64_t)&v67, (int *)v64);
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v64);
          sub_216EF6394(&v58);
          unsigned __int8 v14 = __p;
          if (v66 < 0) {
            unsigned __int8 v14 = (void **)__p[0];
          }
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]   Updating animation for <%s> @ time %s\n", v12, v13, Text, v14);
          if (v66 < 0) {
            operator delete(__p[0]);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v64 + 1);
          sub_21697C414(v64);
          if ((BYTE8(v68) & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v68 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v68 + 1);
          sub_21697C414(&v68);
          if (*((void *)&v67 + 1)) {
            sub_216D16E0C(*((atomic_ullong **)&v67 + 1));
          }
        }
        pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim(v6, v9, v10, (uint64_t)&v67);
        if ((~*((unsigned __int8 *)v6 + 80) & 3) == 0)
        {
          if (sub_216FDC16C(1))
          {
            sub_216D0162C((uint64_t)&v67, (int *)__p);
            unsigned int v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v16, v17, "compute skinning xforms", v15);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v4);
            sub_21697C414(__p);
          }
          if ((*((unsigned char *)v6 + 80) & 0xC) != 0) {
            pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeSkinningTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>();
          }
          if (sub_216FDC16C(1))
          {
            sub_216D0162C((uint64_t)&v67, (int *)__p);
            unsigned int v19 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v20, v21, "compute skinning xforms", v19);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v4);
            sub_21697C414(__p);
          }
        }
        if ((BYTE8(v68) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v68 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v68 + 1);
        sub_21697C414(&v68);
        if (*((void *)&v67 + 1)) {
          sub_216D16E0C(*((atomic_ullong **)&v67 + 1));
        }
        double v24 = v58;
        if ((*((unsigned char *)v6 + 80) & 0x10) != 0)
        {
          pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim(v6, v22, v23, (uint64_t)v59);
          if ((~*((unsigned __int8 *)v6 + 128) & 3) == 0)
          {
            uint64_t v25 = a1;
            unsigned int v26 = v4;
            if (sub_216FDC16C(1))
            {
              sub_216D0162C((uint64_t)v59, (int *)&v67);
              unsigned __int8 v27 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v67);
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v28, v29, "compute skinning inverse transpose xforms", v27);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v67 + 1);
              sub_21697C414(&v67);
            }
            if ((*((unsigned char *)v6 + 128) & 0xC) != 0)
            {
              unint64_t v33 = *((void *)v6 + 11);
              uint64_t v71 = 0;
              long long v69 = 0u;
              long long v70 = 0u;
              long long v67 = 0u;
              long long v68 = 0u;
              __p[0] = &v67;
              sub_2169C162C((unint64_t *)v6 + 17, v33, (uint64_t *)__p);
              double v34 = (__n128 *)*((void *)v6 + 15);
              sub_2169C195C((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)((char *)v6 + 136), v35, v36);
              uint64_t v37 = *((void *)v6 + 17);
              if (v37)
              {
                uint64_t v38 = *((void *)v6 + 21);
                do
                {
                  pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationMatrix(v34, (uint64_t)v64);
                  pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetInverse(v64, 0, 0.0, (uint64_t)__p);
                  pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)__p, (uint64_t)&v67);
                  *(_OWORD *)uint64_t v38 = v67;
                  long long v39 = v68;
                  long long v40 = v69;
                  long long v41 = v70;
                  *(void *)(v38 + 64) = v71;
                  *(_OWORD *)(v38 + 32) = v40;
                  *(_OWORD *)(v38 + 48) = v41;
                  *(_OWORD *)(v38 + 16) = v39;
                  v38 += 72;
                  v34 += 8;
                  --v37;
                }
                while (v37);
              }
              *((unsigned char *)v6 + 128) |= 0x10u;
              if (sub_216FDC16C(1))
              {
                sub_216D0162C((uint64_t)v59, (int *)&v67);
                unint64_t v42 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v67);
                pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Ran task '%s' for <%s>. Result: %d\n", v43, v44, "compute skinning inverse transpose xforms", v42, (*((unsigned __int8 *)v6 + 128) >> 4) & 1);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v67 + 1);
                sub_21697C414(&v67);
              }
              unint64_t v4 = v26;
              a1 = v25;
              *((unsigned char *)v6 + 128) &= ~8u;
            }
            else if (sub_216FDC16C(1))
            {
              sub_216D0162C((uint64_t)v59, (int *)&v67);
              uint64_t v30 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v67);
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v31, v32, "compute skinning inverse transpose xforms", v30);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v67 + 1);
              sub_21697C414(&v67);
            }
          }
          if ((v63 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
          sub_21697C414(&v61);
          if (v60) {
            sub_216D16E0C(v60);
          }
          double v24 = v58;
        }
        pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim(v6, v22, v23, (uint64_t)&v67);
        if ((~*((unsigned __int8 *)v6 + 176) & 3) == 0)
        {
          if (sub_216FDC16C(1))
          {
            sub_216D0162C((uint64_t)&v67, (int *)__p);
            uint64_t v45 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v46, v47, "compute blend shape weights", v45);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v4);
            sub_21697C414(__p);
          }
          if ((*((unsigned char *)v6 + 176) & 0xC) != 0)
          {
            AnimQuery = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetAnimQuery(v6);
            if (pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeBlendShapeWeights(AnimQuery, (const char *)v6 + 184, v52, v24))char v53 = 16; {
            else
            }
              char v53 = 0;
            *((unsigned char *)v6 + 176) = *((unsigned char *)v6 + 176) & 0xEF | v53;
            if (sub_216FDC16C(1))
            {
              sub_216D0162C((uint64_t)&v67, (int *)__p);
              char v54 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Ran task '%s' for <%s>. Result: %d\n", v55, v56, "compute blend shape weights", v54, (*((unsigned __int8 *)v6 + 176) >> 4) & 1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v4);
              sub_21697C414(__p);
            }
            *((unsigned char *)v6 + 176) &= ~8u;
          }
          else if (sub_216FDC16C(1))
          {
            sub_216D0162C((uint64_t)&v67, (int *)__p);
            uint64_t v48 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v49, v50, "compute blend shape weights", v48);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v4);
            sub_21697C414(__p);
          }
        }
        if ((BYTE8(v68) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v68 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v68 + 1);
        sub_21697C414(&v68);
        if (*((void *)&v67 + 1)) {
          sub_216D16E0C(*((atomic_ullong **)&v67 + 1));
        }
      }
      v2 += 2;
    }
    while (v2 != v57);
  }
}

void sub_216FFE314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13, _DWORD *a14, _DWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, atomic_ullong *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a13);
  sub_21697C414((_DWORD *)(v37 - 192));
  if ((a22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a15);
  sub_21697C414(a14);
  if (a20) {
    sub_216D16E0C(a20);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216FFE524(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  unint64_t v4 = (long long *)((char *)this + 8);
  unint64_t v5 = *((void *)this + 3);
  unint64_t v6 = (uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 4;
  if (v5 < v6)
  {
    unint64_t v7 = *((void *)this + 5);
    if (v7 > 1) {
      goto LABEL_12;
    }
    if (v7 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        unint64_t v8 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(void *)unint64_t v8 = &unk_26C751420;
        __dmb(0xBu);
        v8[8] = 0;
        *((void *)this - 4) = v8;
        *((void *)v8 - 3) = 2;
        uint64_t v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(unsigned char *)(v9 - 11) = 1;
        *(void *)uint64_t v9 = &unk_26C76F610;
        *(void *)(v9 + 8) = *((void *)this + 1);
        unint64_t v10 = *((void *)this + 2)
            + 16
            * ((((uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 4)
              + (unint64_t)((uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 4 < 0)) >> 1);
        *((void *)this + 1) = v10;
        *(void *)(v9 + 16) = v10;
        *(void *)(v9 + 24) = *((void *)this + 3);
        *(void *)(v9 + 32) = *((void *)this + 4);
        uint64_t v11 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v11;
        *(void *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(unsigned char *)(v9 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v9 - 40))();
        unint64_t v5 = *((void *)this + 3);
        unint64_t v6 = (uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 4;
        if (v5 >= v6) {
          break;
        }
        unint64_t v12 = *((void *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6)
  {
    unsigned __int8 v13 = *((unsigned char *)this + 52);
    if (v13)
    {
      *(_DWORD *)double v34 = 0x10000;
      long long v35 = *v4;
      uint64_t v36 = *((void *)this + 3);
      unsigned __int8 v14 = 1;
      while (1)
      {
        if (v14 <= 7u)
        {
          LOBYTE(v15) = v34[0];
          for (unsigned int i = v34[v34[0] + 3]; i < v13; unsigned int i = v23)
          {
            uint64_t v17 = v15;
            uint64_t v18 = (void *)&v35 + 3 * v15;
            if (v18[2] >= (unint64_t)((uint64_t)(*v18 - v18[1]) >> 4)) {
              break;
            }
            unsigned int v15 = ((_BYTE)v15 + 1) & 7;
            unsigned int v19 = (char *)&v35 + 24 * v15;
            uint64_t v20 = v18[2];
            *(_OWORD *)unsigned int v19 = *(_OWORD *)v18;
            *((void *)v19 + 2) = v20;
            uint64_t v21 = *((void *)v19 + 1);
            *uint64_t v18 = *(void *)v19;
            uint64_t v22 = v21
                + 16 * ((((*(void *)v19 - v21) >> 4) + (unint64_t)((*(void *)v19 - v21) >> 4 < 0)) >> 1);
            *(void *)unsigned int v19 = v22;
            v18[1] = v22;
            v18[2] = v20;
            unsigned __int8 v23 = v34[v17 + 3] + 1;
            v34[v17 + 3] = v23;
            v34[v15 + 3] = v23;
            unsigned int v24 = v14++;
            if (v24 > 6) {
              break;
            }
          }
          v34[0] = v15;
          v34[2] = v14;
        }
        char v25 = *(unsigned char *)(*((void *)this - 4) + 8);
        __dmb(0xBu);
        if ((v25 & 1) == 0) {
          break;
        }
        unsigned __int8 v27 = *((unsigned char *)this + 52) + 1;
        *((unsigned char *)this + 52) = v27;
        unsigned __int8 v14 = v34[2];
        if (v34[2] < 2u)
        {
          unsigned int v26 = v34[0];
          if (v34[v34[0] + 3] >= v27
            || *((void *)&v35 + 3 * v34[0] + 2) >= (unint64_t)((uint64_t)(*((void *)&v35 + 3 * v34[0])
                                                                                - *((void *)&v35 + 3 * v34[0] + 1)) >> 4))
          {
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v28 = (char *)&v35 + 24 * v34[1];
          unsigned __int8 v29 = v34[v34[1] + 3];
          uint64_t v30 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
          *(v30 - 11) = 1;
          *(void *)uint64_t v30 = &unk_26C751420;
          __dmb(0xBu);
          void v30[8] = 0;
          *((void *)this - 4) = v30;
          *((void *)v30 - 3) = 2;
          uint64_t v31 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v30, 0x38uLL);
          *(unsigned char *)(v31 - 11) = 1;
          *(void *)uint64_t v31 = &unk_26C76F610;
          *(_OWORD *)(v31 + 8) = *(_OWORD *)v28;
          *(void *)(v31 + 24) = *((void *)v28 + 2);
          *(void *)(v31 + 32) = *((void *)this + 4);
          uint64_t v32 = *((void *)this + 5) >> 1;
          *((void *)this + 5) = v32;
          *(void *)(v31 + 40) = v32;
          *(_DWORD *)(v31 + 48) = 2;
          *(unsigned char *)(v31 + 52) = *((unsigned char *)this + 52) - v29;
          (***(void (****)(void))(v31 - 40))();
          unsigned __int8 v14 = --v34[2];
          v34[1] = (v34[1] + 1) & 7;
        }
LABEL_34:
        if (!v14 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
          return 0;
        }
        unsigned __int8 v13 = *((unsigned char *)this + 52);
      }
      unsigned int v26 = v34[0];
      unsigned __int8 v14 = v34[2];
LABEL_33:
      sub_216FFEA34((uint64_t)this, (uint64_t **)&v35 + 3 * v26);
      v34[2] = --v14;
      v34[0] = (v26 - 1) & 7;
      goto LABEL_34;
    }
  }
  sub_216FFEA34((uint64_t)this, (uint64_t **)this + 1);
  return 0;
}

void sub_216FFEA34(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  unsigned int v3 = a2[1];
  if (v3 != *a2)
  {
    do
    {
      uint64_t v5 = *v3;
      v3 += 2;
      sub_216FFEA84(v5, *(void *)(*(void *)(a1 + 32) + 8), **(double **)(a1 + 32));
    }
    while (v3 != v2);
  }
}

void sub_216FFEA84(uint64_t a1, unint64_t a2, double a3)
{
  uint64_t v203 = *MEMORY[0x263EF8340];
  double v164 = a3;
  if (!*(_DWORD *)(a1 + 416)
    || ((*(void *)(*(void *)(*(void *)(a1 + 400) + 360) + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
  {
    return;
  }
  if (sub_216FDC16C(1))
  {
    sub_216D0162C(a1, (int *)&v182);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v182);
    sub_216EF6394(&v164);
    if ((SBYTE7(v194) & 0x80u) == 0) {
      uint64_t p_p = (uint64_t)&__p;
    }
    else {
      uint64_t p_p = __p;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]   Updating skinning for <%s> @ time %s\n", v5, v6, Text, p_p);
    if (SBYTE7(v194) < 0) {
      operator delete((void *)__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v182 + 1);
    sub_21697C414(&v182);
  }
  *(unsigned char *)(a1 + 1888) = 0;
  *(unsigned char *)(a1 + 1960) = 0;
  *(unsigned char *)(a1 + 2032) = 0;
  *(unsigned char *)(a1 + 2192) = 0;
  if ((~*(unsigned __int8 *)(a1 + 512) & 3) == 0)
  {
    if (sub_216FDC16C(1))
    {
      sub_216D0162C(a1, (int *)&__p);
      unint64_t v8 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v9, v10, "compute rest points", v8);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_21697C414(&__p);
    }
    if ((*(unsigned char *)(a1 + 512) & 0xC) != 0) {
      pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
    }
    if (sub_216FDC16C(1))
    {
      sub_216D0162C(a1, (int *)&__p);
      uint64_t v11 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v12, v13, "compute rest points", v11);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_21697C414(&__p);
    }
  }
  if ((~*(unsigned __int8 *)(a1 + 680) & 3) == 0)
  {
    if (sub_216FDC16C(1))
    {
      sub_216D0162C(a1, (int *)&__p);
      unsigned __int8 v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v15, v16, "compute rest normals", v14);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_21697C414(&__p);
    }
    if ((*(unsigned char *)(a1 + 680) & 0xC) != 0) {
      pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
    }
    if (sub_216FDC16C(1))
    {
      sub_216D0162C(a1, (int *)&__p);
      uint64_t v17 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v18, v19, "compute rest normals", v17);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_21697C414(&__p);
    }
  }
  if ((~*(unsigned __int8 *)(a1 + 848) & 3) == 0)
  {
    if (sub_216FDC16C(1))
    {
      sub_216D0162C(a1, (int *)&__p);
      uint64_t v20 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v21, v22, "compute face vertex indices", v20);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_21697C414(&__p);
    }
    if ((*(unsigned char *)(a1 + 848) & 0xC) != 0) {
      pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
    }
    if (sub_216FDC16C(1))
    {
      sub_216D0162C(a1, (int *)&__p);
      unsigned __int8 v23 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v24, v25, "compute face vertex indices", v23);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_21697C414(&__p);
    }
  }
  unsigned int v26 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 1848);
  unsigned __int8 v27 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 1920);
  int v28 = *(_DWORD *)(a1 + 416);
  if ((v28 & 0x18) != 0)
  {
    *(void *)&long long v195 = 0;
    long long __p = 0u;
    long long v194 = 0u;
    if (*(void *)(a1 + 424))
    {
      uint64_t v29 = *(void *)(a1 + 400);
      if ((*(unsigned char *)(v29 + 176) & 0x10) != 0)
      {
        sub_2169412D4((uint64_t)&__p, (long long *)(v29 + 184));
        *(void *)&long long v184 = 0;
        long long v182 = 0u;
        long long v183 = 0u;
        if (sub_216FECA94(*(uint64_t **)(a1 + 288), &__p, (uint64_t)&v182, 1, 0))
        {
          uint64_t v181 = 0;
          long long v179 = 0u;
          long long v180 = 0u;
          *(void *)&long long v167 = 0;
          long long v165 = 0u;
          long long v166 = 0u;
          uint64_t v176 = 0;
          long long v174 = 0u;
          long long v175 = 0u;
          uint64_t v30 = *(void **)(a1 + 424);
          *(void *)&long long v190 = v184;
          *((void *)&v190 + 1) = v182;
          if (pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapeWeights(v30, &v190, (char *)&v179, (unint64_t *)&v165, (unint64_t *)&v174))
          {
            int v33 = *(_DWORD *)(a1 + 416);
            if ((v33 & 8) != 0)
            {
              if (!*(unsigned char *)(a1 + 1888)) {
                sub_216C48F14(a1 + 1848, (long long *)(a1 + 520));
              }
              uint64_t v34 = *(void *)(a1 + 424);
              uint64_t v35 = v181;
              uint64_t v36 = (char *)v179;
              uint64_t v37 = v167;
              uint64_t v38 = (char *)v165;
              uint64_t v39 = (uint64_t)v176;
              long long v40 = (char *)v174;
              sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 1848), v31, v32);
              *(unsigned char *)(a1 + 1888) = pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeDeformedPoints(v34, v35, v36, v37, v38, v39, v40, (void *)(a1 + 440), (uint64_t *)(a1 + 464), *(tbb::task_group_context **)(a1 + 1880), *(tbb::task_group_context **)(a1 + 1848));
              int v33 = *(_DWORD *)(a1 + 416);
              unsigned __int8 v27 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 1920);
            }
            if ((v33 & 0x10) != 0)
            {
              if (!*(unsigned char *)(a1 + 1960)) {
                sub_216C48F14((uint64_t)v27, (long long *)(a1 + 688));
              }
              uint64_t v41 = *(void *)(a1 + 424);
              uint64_t v42 = v181;
              unint64_t v43 = (char *)v179;
              uint64_t v44 = v167;
              uint64_t v45 = (char *)v165;
              uint64_t v46 = (uint64_t)v176;
              int v47 = (char *)v174;
              sub_2168FD54C(v27, v31, v32);
              *(unsigned char *)(a1 + 1960) = pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeDeformedNormals(v41, v42, v43, v44, v45, v46, v47, (void *)(a1 + 440), (uint64_t *)(a1 + 488), *(tbb::task_group_context **)(a1 + 1952), *(tbb::task_group_context **)(a1 + 1920));
              unsigned int v26 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 1848);
            }
          }
          sub_2168F83DC((uint64_t)&v174);
          sub_2168F83DC((uint64_t)&v165);
          sub_2168F83DC((uint64_t)&v179);
        }
        sub_2168F83DC((uint64_t)&v182);
      }
    }
    sub_2168F83DC((uint64_t)&__p);
    int v28 = *(_DWORD *)(a1 + 416);
  }
  if ((v28 & 7) != 0)
  {
    if ((~*(unsigned __int8 *)(a1 + 1016) & 3) == 0)
    {
      if (sub_216FDC16C(1))
      {
        sub_216D0162C(a1, (int *)&__p);
        unsigned __int8 v49 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v50, v51, "compute skinning method", v49);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_21697C414(&__p);
      }
      if ((*(unsigned char *)(a1 + 1016) & 0xC) != 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetSkinningMethod((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)a1, v48, &__p);
        char v55 = (void *)(a1 + 1024);
        if (&__p == (long long *)(a1 + 1024))
        {
          if ((__p & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        else
        {
          if ((*v55 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          *char v55 = __p;
        }
        *(unsigned char *)(a1 + 1016) |= 0x10u;
        if (sub_216FDC16C(1))
        {
          sub_216D0162C(a1, (int *)&__p);
          uint64_t v56 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Ran task '%s' for <%s>. Result: %d\n", v57, v58, "compute skinning method", v56, (*(unsigned __int8 *)(a1 + 1016) >> 4) & 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
          sub_21697C414(&__p);
        }
        *(unsigned char *)(a1 + 1016) &= ~8u;
      }
      else if (sub_216FDC16C(1))
      {
        sub_216D0162C(a1, (int *)&__p);
        uint64_t v52 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v53, v54, "compute skinning method", v52);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_21697C414(&__p);
      }
    }
    if ((~*(unsigned __int8 *)(a1 + 1152) & 3) == 0)
    {
      if (sub_216FDC16C(1))
      {
        sub_216D0162C(a1, (int *)&__p);
        uint64_t v60 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v61, v62, "compute geom bind xform", v60);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_21697C414(&__p);
      }
      if ((*(unsigned char *)(a1 + 1152) & 0xC) != 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetGeomBindTransform(a1, v59, (uint64_t)&__p);
        long long v66 = v198;
        *(_OWORD *)(a1 + 1224) = v197;
        *(_OWORD *)(a1 + 1240) = v66;
        long long v67 = v200;
        *(_OWORD *)(a1 + 1256) = v199;
        *(_OWORD *)(a1 + 1272) = v67;
        long long v68 = v194;
        *(_OWORD *)(a1 + 1160) = __p;
        *(_OWORD *)(a1 + 1176) = v68;
        long long v69 = v196;
        *(_OWORD *)(a1 + 1192) = v195;
        *(_OWORD *)(a1 + 1208) = v69;
        *(unsigned char *)(a1 + 1152) |= 0x10u;
        if (sub_216FDC16C(1))
        {
          sub_216D0162C(a1, (int *)&__p);
          long long v70 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Ran task '%s' for <%s>. Result: %d\n", v71, v72, "compute geom bind xform", v70, (*(unsigned __int8 *)(a1 + 1152) >> 4) & 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
          sub_21697C414(&__p);
        }
        *(unsigned char *)(a1 + 1152) &= ~8u;
      }
      else if (sub_216FDC16C(1))
      {
        sub_216D0162C(a1, (int *)&__p);
        uint64_t v63 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v64, v65, "compute geom bind xform", v63);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_21697C414(&__p);
      }
    }
    if ((*(unsigned char *)(a1 + 1152) & 0x10) != 0 && (~*(unsigned __int8 *)(a1 + 1408) & 3) == 0)
    {
      if (sub_216FDC16C(1))
      {
        sub_216D0162C(a1, (int *)&__p);
        int v73 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v74, v75, "compute geom bind inverse transpose xform", v73);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_21697C414(&__p);
      }
      if ((*(unsigned char *)(a1 + 1408) & 0xC) != 0)
      {
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationMatrix((__n128 *)(a1 + 1160), (uint64_t)&v179);
        pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetInverse((double *)&v179, 0, 0.0, (uint64_t)&v182);
        pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v182, (uint64_t)&__p);
        *(void *)(a1 + 1480) = v197;
        long long v79 = v196;
        *(_OWORD *)(a1 + 1448) = v195;
        *(_OWORD *)(a1 + 1464) = v79;
        long long v80 = v194;
        *(_OWORD *)(a1 + 1416) = __p;
        *(_OWORD *)(a1 + 1432) = v80;
        *(unsigned char *)(a1 + 1408) |= 0x10u;
        if (sub_216FDC16C(1))
        {
          sub_216D0162C(a1, (int *)&__p);
          char v81 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Ran task '%s' for <%s>. Result: %d\n", v82, v83, "compute geom bind inverse transpose xform", v81, (*(unsigned __int8 *)(a1 + 1408) >> 4) & 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
          sub_21697C414(&__p);
        }
        *(unsigned char *)(a1 + 1408) &= ~8u;
      }
      else if (sub_216FDC16C(1))
      {
        sub_216D0162C(a1, (int *)&__p);
        uint64_t v76 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v77, v78, "compute geom bind inverse transpose xform", v76);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_21697C414(&__p);
      }
    }
    if ((~*(unsigned __int8 *)(a1 + 1488) & 3) == 0)
    {
      if (sub_216FDC16C(1))
      {
        sub_216D0162C(a1, (int *)&__p);
        uint64_t v84 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]     Try to run task '%s' for <%s>.\n", v85, v86, "compute joint influences", v84);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_21697C414(&__p);
      }
      if ((*(unsigned char *)(a1 + 1488) & 0xC) != 0)
      {
        if (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeJointInfluences(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(a1 + 1496)))char v90 = 16; {
        else
        }
          char v90 = 0;
        *(unsigned char *)(a1 + 1488) = *(unsigned char *)(a1 + 1488) & 0xEF | v90;
        if (sub_216FDC16C(1))
        {
          sub_216D0162C(a1, (int *)&__p);
          char v91 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Ran task '%s' for <%s>. Result: %d\n", v92, v93, "compute joint influences", v91, (*(unsigned __int8 *)(a1 + 1488) >> 4) & 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
          sub_21697C414(&__p);
        }
        *(unsigned char *)(a1 + 1488) &= ~8u;
      }
      else if (sub_216FDC16C(1))
      {
        sub_216D0162C(a1, (int *)&__p);
        uint64_t v87 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]       Skipping task '%s' for <%s>. Unvarying task has already been computed.\n", v88, v89, "compute joint influences", v87);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_21697C414(&__p);
      }
      if ((*(unsigned char *)(a1 + 1488) & 0x10) != 0)
      {
        uint64_t v94 = *(void *)(a1 + 400);
        if ((*(unsigned char *)(v94 + 224) & 0x10) != 0)
        {
          long long v95 = *(_OWORD *)(v94 + 248);
          long long v165 = *(_OWORD *)(v94 + 232);
          long long v166 = v95;
          long long v96 = *(_OWORD *)(v94 + 312);
          long long v169 = *(_OWORD *)(v94 + 296);
          long long v170 = v96;
          long long v97 = *(_OWORD *)(v94 + 344);
          long long v171 = *(_OWORD *)(v94 + 328);
          long long v172 = v97;
          long long v98 = *(_OWORD *)(v94 + 280);
          long long v167 = *(_OWORD *)(v94 + 264);
          long long v168 = v98;
          int v99 = *(_DWORD *)(a1 + 416);
          if ((v99 & 3) == 0)
          {
            if ((v99 & 4) != 0 && (*(unsigned char *)(a1 + 1152) & 0x10) != 0)
            {
              uint64_t v176 = 0;
              long long v174 = 0u;
              long long v175 = 0u;
              if ((*(unsigned char *)(v94 + 80) & 0x10) != 0)
              {
                sub_216C467D8((uint64_t)&v174, (long long *)(v94 + 88));
                v192 = 0;
                long long v190 = 0u;
                long long v191 = 0u;
                if (*(void *)(a1 + 272)) {
                  pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>();
                }
                sub_216C467D8((uint64_t)&v190, &v174);
                unint64_t v102 = (long long *)(a1 + 2064);
                BOOL v103 = pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransform((void *)(a1 + 1024), (float64x2_t *)(a1 + 1160), v192, v190, *(unsigned int **)(a1 + 1528), *(void *)(a1 + 1496), *(float **)(a1 + 1568), *(void *)(a1 + 1536), a1 + 2064);
                *(unsigned char *)(a1 + 2192) = v103;
                if (v103)
                {
                  long long v104 = *(_OWORD *)(a1 + 2144);
                  long long v186 = *(_OWORD *)(a1 + 2128);
                  long long v187 = v104;
                  long long v105 = *(_OWORD *)(a1 + 2176);
                  long long v188 = *(_OWORD *)(a1 + 2160);
                  long long v189 = v105;
                  long long v106 = *(_OWORD *)(a1 + 2080);
                  long long v182 = *v102;
                  long long v183 = v106;
                  long long v107 = *(_OWORD *)(a1 + 2112);
                  long long v184 = *(_OWORD *)(a1 + 2096);
                  long long v185 = v107;
                  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v182, (double *)&v165);
                  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)(a1 + 1720), 0, 0.0, (uint64_t)&v179);
                  long long v197 = v186;
                  long long v198 = v187;
                  long long v199 = v188;
                  long long v200 = v189;
                  long long __p = v182;
                  long long v194 = v183;
                  long long v195 = v184;
                  long long v196 = v185;
                  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&__p, (double *)&v179);
                  long long v108 = v198;
                  *(_OWORD *)(a1 + 2128) = v197;
                  *(_OWORD *)(a1 + 2144) = v108;
                  long long v109 = v200;
                  *(_OWORD *)(a1 + 2160) = v199;
                  *(_OWORD *)(a1 + 2176) = v109;
                  long long v110 = v194;
                  *unint64_t v102 = __p;
                  *(_OWORD *)(a1 + 2080) = v110;
                  long long v111 = v196;
                  *(_OWORD *)(a1 + 2096) = v195;
                  *(_OWORD *)(a1 + 2112) = v111;
                }
                sub_2168F83DC((uint64_t)&v190);
              }
              sub_2168F83DC((uint64_t)&v174);
            }
            goto LABEL_142;
          }
          if ((*(unsigned char *)(a1 + 1576) & 0x10) == 0)
          {
            *(void *)&long long __p = "usdSkel/bakeSkinning.cpp";
            *((void *)&__p + 1) = "_DeformWithSkinning";
            *(void *)&long long v194 = 1575;
            *((void *)&v194 + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinningAdapter::_De"
                                     "formWithSkinning(const UsdTimeCode, const size_t)";
            LOBYTE(v195) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "_localToWorldXformTask.HasSampleAtCurrentTime()", 0);
          }
          long long v188 = 0u;
          long long v189 = 0u;
          long long v186 = 0u;
          long long v187 = 0u;
          long long v184 = 0u;
          long long v185 = 0u;
          long long v182 = 0u;
          long long v183 = 0u;
          pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)(a1 + 1584), 0, 0.0, (uint64_t)&__p);
          long long v186 = v169;
          long long v187 = v170;
          long long v188 = v171;
          long long v189 = v172;
          long long v182 = v165;
          long long v183 = v166;
          long long v184 = v167;
          long long v185 = v168;
          pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v182, (double *)&__p);
          int v100 = *(_DWORD *)(a1 + 416);
          if ((v100 & 1) != 0 && (*(unsigned char *)(a1 + 512) & 0x10) != 0 && (*(unsigned char *)(a1 + 1488) & 0x10) != 0)
          {
            uint64_t v181 = 0;
            long long v179 = 0u;
            long long v180 = 0u;
            uint64_t v101 = *(void *)(a1 + 400);
            if ((*(unsigned char *)(v101 + 80) & 0x10) != 0)
            {
              sub_216C467D8((uint64_t)&v179, (long long *)(v101 + 88));
              char v162 = v26;
              uint64_t v176 = 0;
              long long v174 = 0u;
              long long v175 = 0u;
              if (*(void *)(a1 + 272)) {
                pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>();
              }
              sub_216C467D8((uint64_t)&v174, &v179);
              if (!*(unsigned char *)(a1 + 1888)) {
                sub_216C48F14((uint64_t)v26, (long long *)(a1 + 520));
              }
              uint64_t v114 = v176;
              unint64_t v115 = v174;
              uint64_t v116 = *(void *)(a1 + 1528);
              uint64_t v117 = *(void *)(a1 + 1496);
              uint64_t v118 = *(void *)(a1 + 1568);
              uint64_t v119 = *(void *)(a1 + 1536);
              unsigned int v120 = *(_DWORD *)(a1 + 32);
              sub_2168FD54C(v162, v112, v113);
              BOOL v121 = pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints((void *)(a1 + 1024), a1 + 1160, v114, v115, v116, v117, v118, v119, v120, *(tbb::task_group_context **)(a1 + 1880), *(void *)(a1 + 1848), 0);
              *(unsigned char *)(a1 + 1888) = v121;
              if (v121)
              {
                sub_2168FD54C(v162, v122, v123);
                unint64_t v124 = *(void *)(a1 + 1880);
                sub_2168FD54C(v162, v125, v126);
                uint64_t v127 = *(void *)(a1 + 1880);
                uint64_t v128 = *(void *)(a1 + 1848);
                v177[0] = &v182;
                LODWORD(__p) = 0;
                uint64_t v201 = 65539;
                int v202 = 55;
                tbb::task_group_context::init((uint64_t)&__p, v129, v130, v131);
                unint64_t v132 = v127 + 12 * v128;
                if (v124 < v132)
                {
                  *(void *)&long long v190 = &__p;
                  uint64_t v133 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v190, 0x38uLL);
                  *(unsigned char *)(v133 - 11) = 1;
                  *(void *)uint64_t v133 = &unk_26C76F658;
                  *(void *)(v133 + 8) = v132;
                  *(void *)(v133 + 16) = v124;
                  *(void *)(v133 + 24) = 1;
                  *(void *)(v133 + 32) = v177;
                  unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v133);
                  *(_DWORD *)(v133 + 48) = 0;
                  *(unsigned char *)(v133 + 52) = 5;
                  *(void *)(v133 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
                  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v133 - 40) + 16))(*(void *)(v133 - 40), v133, v133 - 8);
                }
                tbb::task_group_context::~task_group_context((tbb::task_group_context *)&__p);
              }
              sub_2168F83DC((uint64_t)&v174);
              unsigned int v26 = v162;
            }
            sub_2168F83DC((uint64_t)&v179);
            int v100 = *(_DWORD *)(a1 + 416);
          }
          if ((v100 & 2) != 0 && (*(unsigned char *)(a1 + 680) & 0x10) != 0 && (*(unsigned char *)(a1 + 1488) & 0x10) != 0)
          {
            v192 = 0;
            long long v190 = 0u;
            long long v191 = 0u;
            uint64_t v135 = *(void *)(a1 + 400);
            if ((*(unsigned char *)(v135 + 128) & 0x10) == 0)
            {
LABEL_141:
              sub_2168F83DC((uint64_t)&v190);
              goto LABEL_142;
            }
            sub_216C463F4((uint64_t)&v190, (long long *)(v135 + 136));
            uint64_t v178 = 0;
            memset(v177, 0, sizeof(v177));
            BOOL v161 = v27;
            uint64_t v163 = v26;
            if (*(void *)(a1 + 272))
            {
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94D30, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_267B94D30))
              {
                pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetDiagonal((uint64_t)xmmword_267B94CE8, 1.0);
                __cxa_guard_release(&qword_267B94D30);
              }
              if ((sub_216FEE354(*(uint64_t **)(a1 + 272), &v190, (uint64_t)v177, 1, xmmword_267B94CE8) & 1) == 0) {
                goto LABEL_140;
              }
            }
            else
            {
              sub_216C463F4((uint64_t)v177, &v190);
            }
            if (!*(unsigned char *)(a1 + 1960)) {
              sub_216C48F14((uint64_t)v27, (long long *)(a1 + 688));
            }
            uint64_t v138 = v178;
            unint64_t v139 = v177[0];
            uint64_t v140 = *(void *)(a1 + 1528);
            unint64_t v141 = *(void *)(a1 + 1496);
            uint64_t v142 = *(void *)(a1 + 1568);
            uint64_t v143 = *(void *)(a1 + 1536);
            unsigned int v144 = *(_DWORD *)(a1 + 32);
            if ((~*(unsigned __int8 *)(a1 + 848) & 3) != 0)
            {
              sub_2168FD54C(v27, v136, v137);
              BOOL v147 = pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormals((void *)(a1 + 1024), a1 + 1416, v138, v139, v140, v141, v142, v143, v144, *(tbb::task_group_context **)(a1 + 1952), *(void *)(a1 + 1920), 0);
            }
            else
            {
              uint64_t v145 = *(void *)(a1 + 888);
              uint64_t v146 = *(tbb::task_group_context **)(a1 + 856);
              sub_2168FD54C(v161, v136, v137);
              BOOL v147 = pxrInternal__aapl__pxrReserved__::UsdSkelSkinFaceVaryingNormals((pxrInternal__aapl__pxrReserved__ *)(a1 + 1024), a1 + 1416, v138, v139, v140, v141, v142, v143, v144, v145, v146, *(void **)(a1 + 1952), *(tbb::task_group_context **)(a1 + 1920), 0);
            }
            *(unsigned char *)(a1 + 1960) = v147;
            if (v147)
            {
              pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationMatrix((__n128 *)&v182, (uint64_t)&v174);
              pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetInverse((double *)&v174, 0, 0.0, (uint64_t)&__p);
              pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&__p, (uint64_t)&v179);
              sub_2168FD54C(v161, v148, v149);
              unint64_t v150 = *(void *)(a1 + 1952);
              sub_2168FD54C(v161, v151, v152);
              uint64_t v153 = *(void *)(a1 + 1952);
              uint64_t v154 = *(void *)(a1 + 1920);
              uint64_t v173 = &v179;
              LODWORD(__p) = 0;
              uint64_t v201 = 65539;
              int v202 = 55;
              tbb::task_group_context::init((uint64_t)&__p, v155, v156, v157);
              unint64_t v158 = v153 + 12 * v154;
              if (v150 < v158)
              {
                *(void *)&long long v174 = &__p;
                uint64_t v159 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v174, 0x38uLL);
                *(unsigned char *)(v159 - 11) = 1;
                *(void *)uint64_t v159 = &unk_26C76F6A0;
                *(void *)(v159 + 8) = v158;
                *(void *)(v159 + 16) = v150;
                *(void *)(v159 + 24) = 1;
                *(void *)(v159 + 32) = &v173;
                unint64_t v160 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v159);
                *(_DWORD *)(v159 + 48) = 0;
                *(unsigned char *)(v159 + 52) = 5;
                *(void *)(v159 + 40) = (v160 >> 1) & 0x7FFFFFFFFFFFFFFELL;
                (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v159 - 40) + 16))(*(void *)(v159 - 40), v159, v159 - 8);
              }
              tbb::task_group_context::~task_group_context((tbb::task_group_context *)&__p);
            }
LABEL_140:
            sub_2168F83DC((uint64_t)v177);
            unsigned int v26 = v163;
            goto LABEL_141;
          }
        }
      }
    }
  }
LABEL_142:
  if (*(unsigned char *)(a1 + 1888))
  {
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 2040)) & 1) == 0) {
      *(unsigned char *)(a1 + 2032) = pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::ComputeExtent(v26, (unint64_t *)(a1 + 1992));
    }
  }
}

void sub_216FFFEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

uint64_t sub_2170002BC(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  unint64_t v4 = (long long *)((char *)this + 8);
  unint64_t v5 = *((void *)this + 3);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 2);
  if (v5 < v6)
  {
    unint64_t v7 = *((void *)this + 5);
    if (v7 > 1) {
      goto LABEL_12;
    }
    if (v7 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        unint64_t v8 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(void *)unint64_t v8 = &unk_26C751420;
        __dmb(0xBu);
        v8[8] = 0;
        *((void *)this - 4) = v8;
        *((void *)v8 - 3) = 2;
        uint64_t v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(unsigned char *)(v9 - 11) = 1;
        *(void *)uint64_t v9 = &unk_26C76F658;
        *(void *)(v9 + 8) = *((void *)this + 1);
        uint64_t v10 = *((void *)this + 2) + 12 * ((*((void *)this + 1) - *((void *)this + 2)) / 24);
        *((void *)this + 1) = v10;
        *(void *)(v9 + 16) = v10;
        *(void *)(v9 + 24) = *((void *)this + 3);
        *(void *)(v9 + 32) = *((void *)this + 4);
        uint64_t v11 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v11;
        *(void *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(unsigned char *)(v9 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v9 - 40))();
        unint64_t v5 = *((void *)this + 3);
        unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 2);
        if (v5 >= v6) {
          break;
        }
        unint64_t v12 = *((void *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)char v25 = 0x10000;
    long long v26 = *v4;
    uint64_t v27 = *((void *)this + 3);
    while (1)
    {
      sub_21700079C(v25, *((unsigned __int8 *)this + 52));
      char v13 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0) {
        break;
      }
      unsigned __int8 v16 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v16;
      unsigned __int8 v15 = v25[2];
      if (v25[2] < 2u)
      {
        unsigned int v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((void *)&v26 + 3 * v25[0] + 2) < 0xAAAAAAAAAAAAAAABLL
                                                * ((uint64_t)(*((void *)&v26 + 3 * v25[0])
                                                           - *((void *)&v26 + 3 * v25[0] + 1)) >> 2))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v17 = v25[1];
      unsigned __int8 v18 = v25[v25[1] + 3];
      unsigned int v19 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(void *)unsigned int v19 = &unk_26C751420;
      __dmb(0xBu);
      v19[8] = 0;
      *((void *)this - 4) = v19;
      *((void *)v19 - 3) = 2;
      uint64_t v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      uint64_t v21 = (char *)&v26 + 24 * v17;
      *(unsigned char *)(v20 - 11) = 1;
      *(void *)uint64_t v20 = &unk_26C76F658;
      long long v22 = *(_OWORD *)v21;
      *(void *)(v20 + 24) = *((void *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(void *)(v20 + 32) = *((void *)this + 4);
      uint64_t v23 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v23;
      *(void *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(unsigned char *)(v20 + 52) = *((unsigned char *)this + 52) - v18;
      (***(void (****)(void))(v20 - 40))();
      unsigned __int8 v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v14 = v25[0];
LABEL_22:
    sub_217000744((uint64_t)this, (uint64_t *)&v26 + 3 * v14);
    unsigned __int8 v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_217000744((uint64_t)this, (uint64_t *)this + 1);
  return 0;
}

void sub_217000744(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2 != *a2)
  {
    do
    {
      *(_DWORD *)uint64_t v2 = sub_216F2C3F8(**(float64x2_t ***)(a1 + 32), (float *)v2).u32[0];
      *(_DWORD *)(v2 + 4) = v5;
      *(_DWORD *)(v2 + 8) = v6;
      v2 += 12;
    }
    while (v2 != v3);
  }
}

__n128 sub_21700079C(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2 = a1[2];
  if (v2 <= 7)
  {
    uint64_t v3 = a1 + 16;
    unint64_t v4 = *a1;
    unsigned __int8 v5 = a1[v4 + 3];
    do
    {
      if (a2 <= v5) {
        break;
      }
      char v6 = v4;
      unint64_t v7 = (__n128 *)&v3[24 * v4];
      unint64_t v8 = v7 + 1;
      uint64_t v9 = &v7->n128_u64[1];
      if (v7[1].n128_u64[0] >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7->n128_u64[0] - v7->n128_u64[1]) >> 2)) {
        break;
      }
      unint64_t v4 = (unint64_t)&a1[v4];
      uint64_t v10 = (v6 + 1) & 7;
      *a1 = v10;
      uint64_t v11 = (__n128 *)&v3[24 * v10];
      unint64_t v12 = v7[1].n128_u64[0];
      __n128 result = *v7;
      *uint64_t v11 = *v7;
      v11[1].n128_u64[0] = v12;
      uint64_t v14 = v11->n128_i64[1];
      v7->n128_u64[0] = v11->n128_u64[0];
      unint64_t v15 = v14 + 12 * ((int64_t)(v11->n128_u64[0] - v14) / 24);
      v11->n128_u64[0] = v15;
      *uint64_t v9 = v15;
      v8->n128_u64[0] = v12;
      unsigned __int8 v5 = *(unsigned char *)(v4 + 3) + 1;
      *(unsigned char *)(v4 + 3) = v5;
      a1[v10 + 3] = v5;
      a1[2] = v2 + 1;
      LOBYTE(v4) = v10;
    }
    while (v2++ < 7);
  }
  return result;
}

uint64_t sub_217000894(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  unint64_t v4 = (long long *)((char *)this + 8);
  unint64_t v5 = *((void *)this + 3);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 2);
  if (v5 < v6)
  {
    unint64_t v7 = *((void *)this + 5);
    if (v7 > 1) {
      goto LABEL_12;
    }
    if (v7 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        unint64_t v8 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(void *)unint64_t v8 = &unk_26C751420;
        __dmb(0xBu);
        v8[8] = 0;
        *((void *)this - 4) = v8;
        *((void *)v8 - 3) = 2;
        uint64_t v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(unsigned char *)(v9 - 11) = 1;
        *(void *)uint64_t v9 = &unk_26C76F6A0;
        *(void *)(v9 + 8) = *((void *)this + 1);
        uint64_t v10 = *((void *)this + 2) + 12 * ((*((void *)this + 1) - *((void *)this + 2)) / 24);
        *((void *)this + 1) = v10;
        *(void *)(v9 + 16) = v10;
        *(void *)(v9 + 24) = *((void *)this + 3);
        *(void *)(v9 + 32) = *((void *)this + 4);
        uint64_t v11 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v11;
        *(void *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(unsigned char *)(v9 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v9 - 40))();
        unint64_t v5 = *((void *)this + 3);
        unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 2);
        if (v5 >= v6) {
          break;
        }
        unint64_t v12 = *((void *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)char v25 = 0x10000;
    long long v26 = *v4;
    uint64_t v27 = *((void *)this + 3);
    while (1)
    {
      sub_21700079C(v25, *((unsigned __int8 *)this + 52));
      char v13 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0) {
        break;
      }
      unsigned __int8 v16 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v16;
      unsigned __int8 v15 = v25[2];
      if (v25[2] < 2u)
      {
        unsigned int v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((void *)&v26 + 3 * v25[0] + 2) < 0xAAAAAAAAAAAAAAABLL
                                                * ((uint64_t)(*((void *)&v26 + 3 * v25[0])
                                                           - *((void *)&v26 + 3 * v25[0] + 1)) >> 2))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v17 = v25[1];
      unsigned __int8 v18 = v25[v25[1] + 3];
      unsigned int v19 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(void *)unsigned int v19 = &unk_26C751420;
      __dmb(0xBu);
      v19[8] = 0;
      *((void *)this - 4) = v19;
      *((void *)v19 - 3) = 2;
      uint64_t v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      uint64_t v21 = (char *)&v26 + 24 * v17;
      *(unsigned char *)(v20 - 11) = 1;
      *(void *)uint64_t v20 = &unk_26C76F6A0;
      long long v22 = *(_OWORD *)v21;
      *(void *)(v20 + 24) = *((void *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(void *)(v20 + 32) = *((void *)this + 4);
      uint64_t v23 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v23;
      *(void *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(unsigned char *)(v20 + 52) = *((unsigned char *)this + 52) - v18;
      (***(void (****)(void))(v20 - 40))();
      unsigned __int8 v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v14 = v25[0];
LABEL_22:
    sub_217000D1C((uint64_t)this, (uint64_t *)&v26 + 3 * v14);
    unsigned __int8 v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_217000D1C((uint64_t)this, (uint64_t *)this + 1);
  return 0;
}

void sub_217000D1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2 != *a2)
  {
    do
    {
      *(_DWORD *)uint64_t v2 = pxrInternal__aapl__pxrReserved__::operator*((float *)v2, **(void **)(a1 + 32)).u32[0];
      *(_DWORD *)(v2 + 4) = v5;
      *(_DWORD *)(v2 + 8) = v6;
      v2 += 12;
    }
    while (v2 != v3);
  }
}

uint64_t sub_217000D7C(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  int v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)uint64_t v10 = &unk_26C751420;
        __dmb(0xBu);
        v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C76F6E8;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)uint64_t v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      uint64_t v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)uint64_t v21 = &unk_26C751420;
      __dmb(0xBu);
      unsigned char v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      uint64_t v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C76F6E8;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_2170011B0(*((void *)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_2170011B0(*((void *)this + 4), v6, v4);
  return 0;
}

uint64_t sub_2170011B0(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a2 < a3)
  {
    unint64_t v3 = a2;
    uint64_t v4 = result;
    do
    {
      int v5 = *(uint64_t ***)(v4 + 24);
      unint64_t v7 = *v5;
      unint64_t v6 = v5[1];
      if (*v5 == v6)
      {
        uint64_t v8 = 0;
      }
      else
      {
        uint64_t v8 = 0;
        do
        {
          uint64_t v9 = *v7;
          if (v3 == *(_DWORD *)(*v7 + 420))
          {
            unint64_t v10 = *(void *)(v4 + 8);
            uint64_t v20 = *(void *)v4;
            if (*(_DWORD *)(v9 + 416)
              && ((*(void *)(*(void *)(*(void *)(v9 + 400) + 360) + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
            {
              __n128 result = sub_216FDC16C(1);
              if (result)
              {
                sub_216D0162C(v9, (int *)&v21);
                Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v21);
                sub_216EF6394((double *)&v20);
                uint64_t p_p = &__p;
                if (v27 < 0) {
                  uint64_t p_p = __p;
                }
                pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelBakeSkinning]   Write data for <%s> @ time %s\n", v12, v13, Text, p_p);
                if (SHIBYTE(v27) < 0) {
                  operator delete(__p);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
                __n128 result = (uint64_t)sub_21697C414(&v21);
              }
              if (*(unsigned char *)(v9 + 1888))
              {
                __n128 result = sub_217001614((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v9 + 1896), (const char *)(v9 + 1848));
                uint64_t v15 = result;
              }
              else
              {
                uint64_t v15 = 0;
              }
              if (*(unsigned char *)(v9 + 1960))
              {
                __n128 result = sub_217001614((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v9 + 1968), (const char *)(v9 + 1920));
                v15 += result;
              }
              if (*(unsigned char *)(v9 + 2032))
              {
                __n128 result = sub_217001614((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v9 + 2040), (const char *)(v9 + 1992));
                v15 += result;
              }
              if (*(unsigned char *)(v9 + 2192))
              {
                if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v9 + 2200)))
                {
                  long long __p = "usdSkel/bakeSkinning.cpp";
                  long long v26 = "Set";
                  uint64_t v27 = 374;
                  long long v28 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_AttrWriter::Set(const T &, UsdT"
                        "imeCode) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
                  char v29 = 0;
                  pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "_spec", 0);
                }
                pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 2208), (const pxrInternal__aapl__pxrReserved__::TfToken *)(v9 + 2216), &v23);
                unsigned int v16 = (uint64_t **)sub_216A64148((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v9 + 2200));
                pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v16, &v21);
                unsigned __int8 v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v21);
                long long v26 = (const char *)(v9 + 2064);
                uint64_t v27 = (uint64_t)&stru_26C74C5C0;
                long long __p = &unk_26C76AEF0;
                pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(v17, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, (uint64_t)&__p);
                uint64_t v18 = v22;
                if (v22)
                {
                  if (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
                    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
                  }
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
                __n128 result = (uint64_t)sub_21697C414(&v23);
                v15 += 128;
              }
            }
            else
            {
              uint64_t v15 = 0;
            }
            v8 += v15;
          }
          v7 += 2;
        }
        while (v7 != v6);
      }
      *(void *)(**(void **)(v4 + 32) + 8 * v3++) = v8;
    }
    while (v3 != a3);
  }
  return result;
}

void sub_21700154C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

uint64_t sub_217001614(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const char *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    uint64_t v12 = "usdSkel/bakeSkinning.cpp";
    uint64_t v13 = "Set";
    uint64_t v14 = 374;
    uint64_t v15 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_AttrWriter::Set(const T &, UsdTimeCode) [T = "
          "pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>]";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "_spec", 0);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 1), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 2), &v10);
  uint64_t v4 = (uint64_t **)sub_216A64148(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v4, &v8);
  int v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v8);
  uint64_t v13 = a2;
  uint64_t v14 = (uint64_t)&stru_26C74DEF0;
  uint64_t v12 = (char *)&unk_26C76B7B0;
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(v5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, (uint64_t)&v12);
  uint64_t v6 = v9;
  if (v9 && atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  return 12 * *(void *)a2 + 40;
}

void sub_2170017CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_217001850(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)**a1;
  if (v2)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)((char *)v4 - 64);
        sub_2170018E8((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2170018E8(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *a2)
{
  sub_217001928((void *)a2 + 3);

  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton(a2);
}

void sub_217001928(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    unint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        unint64_t v7 = *(void (**)(void))(*v4 + 8);
        if (v7) {
          v7();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 400 * *a1;
        do
        {
          uint64_t v5 = sub_216FDCF10(v5) + 400;
          v6 -= 400;
        }
        while (v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_2170019D8(uint64_t *a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    unint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 6)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 6;
      if (v20 >= a5)
      {
        uint64_t v21 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)a3 + 64 * a5);
      }
      else
      {
        uint64_t v21 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)a3 + 64 * v20);
        a1[1] = (uint64_t)sub_217001D34(v9, v21, a4, *(pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)(v9 - 8));
        if (v19 < 1) {
          return v5;
        }
      }
      sub_217001B84((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)v5 + 64 * a5);
      sub_217001FDC((uint64_t)v26, (uint64_t)v7, (uint64_t)v21, (uint64_t)v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 6);
      if (v14 >> 58) {
        sub_21677CB10();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 6;
      uint64_t v16 = v10 - v13;
      if (v16 >> 5 > v14) {
        unint64_t v14 = v16 >> 5;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v17 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      *(void *)char v29 = v9;
      if (v17) {
        uint64_t v18 = (char *)sub_2169B761C(v9, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v22 = &v18[64 * v15];
      v26[0] = v18;
      v26[1] = v22;
      uint64_t v27 = v22;
      long long v28 = &v18[64 * v17];
      uint64_t v23 = a5 << 6;
      int v24 = &v22[64 * a5];
      do
      {
        sub_217001DE0(v29[0], (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v22, v7);
        v22 += 64;
        unint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v7 + 64);
        v23 -= 64;
      }
      while (v23);
      uint64_t v27 = v24;
      uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)sub_217001C80((uint64_t)a1, (uint64_t)v26, v5);
      sub_21700235C(v26);
    }
  }
  return v5;
}

void sub_217001B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_217001B84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    uint64_t v10 = *(void *)(a1 + 8);
    unint64_t v11 = a2 + v6 - a4;
    uint64_t v8 = v10;
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v8, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v11);
      *(void *)uint64_t v8 = &unk_26C76FA70;
      long long v12 = *(_OWORD *)(v11 + 24);
      *(_OWORD *)(v8 + 40) = *(_OWORD *)(v11 + 40);
      *(_OWORD *)(v8 + 24) = v12;
      *(_OWORD *)(v11 + 40) = 0u;
      *(_OWORD *)(v11 + 24) = 0u;
      *(void *)(v8 + 56) = *(void *)(v11 + 56);
      *(void *)(v11 + 56) = 0;
      v11 += 64;
      v8 += 64;
      v10 += 64;
    }
    while (v11 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_217001EE8((uint64_t)&v14, a2, v7, v6);
}

void sub_217001C78(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_217001C80(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = a1 + 16;
  sub_217002158(a1 + 16, (uint64_t)a3, a3, *(void *)a1, *(pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)a1, v6, v6);
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = sub_217002224(v7, a3, *(pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)(a1 + 8), *(pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)(a2 + 16));
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = v11;
  *(void *)a2 = *(void *)(a2 + 8);
  return v6;
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_217001D34(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  long long v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  _OWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    int v7 = a1;
    do
    {
      sub_217001DE0(v7, v4, v6);
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v6 + 64);
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v12 + 64);
      long long v12 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v12 + 64);
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_217001E5C((uint64_t)v9);
  return v4;
}

void sub_217001DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_217001DE0(int a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3)
{
  __n128 result = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, a3);
  *(void *)__n128 result = &unk_26C76FA70;
  long long v5 = *(_OWORD *)((char *)a3 + 24);
  *(_OWORD *)((char *)result + 40) = *(_OWORD *)((char *)a3 + 40);
  *(_OWORD *)((char *)result + 24) = v5;
  uint64_t v6 = *((void *)a3 + 7);
  *((void *)result + 7) = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)result + 6)) {
      int v7 = (atomic_ullong *)*((void *)result + 6);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_217001E5C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_217001E94((uint64_t *)a1);
  }
  return a1;
}

void sub_217001E94(uint64_t *a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton **)a1[1];
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton **)a1[2];
  unint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)((char *)v3 - 64);
      sub_2170018E8(v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t sub_217001EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(a3 + v7 - 56);
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 48), 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = *(atomic_ullong **)(a4 + v7 - 56);
      *(void *)(a4 + v7 - 56) = v8;
      if (v9) {
        sub_216D16E0C(v9);
      }
      uint64_t v10 = a4 + v7;
      uint64_t v11 = a3 + v7;
      sub_2169C487C((int *)(a4 + v7 - 48), (_DWORD *)(a3 + v7 - 48));
      sub_2169C48D4((int *)(a4 + v7 - 44), (_DWORD *)(a3 + v7 - 44));
      if (a3 + v7 != a4 + v7)
      {
        sub_217001928((void *)(v10 - 40));
        long long v12 = *(_OWORD *)(v11 - 40);
        *(_OWORD *)(v10 - 24) = *(_OWORD *)(v11 - 24);
        *(_OWORD *)(v10 - 40) = v12;
        *(_OWORD *)(v11 - 40) = 0u;
        *(_OWORD *)(v11 - 24) = 0u;
        *(void *)(v10 - 8) = *(void *)(v11 - 8);
        *(void *)(v11 - 8) = 0;
      }
      v7 -= 64;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_217001FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = *(void *)(a2 + v7 + 8);
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 48), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *(atomic_ullong **)(a4 + v7 + 8);
    *(void *)(a4 + v7 + 8) = v8;
    if (v9) {
      sub_216D16E0C(v9);
    }
    sub_2169C487C((int *)(a4 + v7 + 16), (_DWORD *)(a2 + v7 + 16));
    sub_2169C48D4((int *)(a4 + v7 + 20), (_DWORD *)(a2 + v7 + 20));
    sub_2170020A4(a4 + v7 + 24, (long long *)(a2 + v7 + 24));
    v7 += 64;
  }
  while (a2 + v7 != v6);
  return v6;
}

uint64_t sub_2170020A4(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      uint64_t v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        uint64_t v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_217001928((void *)a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_217001928(&v8);
  }
  return a1;
}

void sub_21700213C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_217002158(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    long long v9 = a3;
    int v10 = a1;
    do
    {
      long long v9 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v9 - 64);
      sub_217001DE0(v10, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v7 - 64), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 64;
      *((void *)&v16 + 1) -= 64;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_2170022D0((uint64_t)v13);
  return v11;
}

void sub_217002210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_217002224(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  long long v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  _OWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    int v7 = a1;
    do
    {
      sub_217001DE0(v7, v4, v6);
      long long v6 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v6 + 64);
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v12 + 64);
      long long v12 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v12 + 64);
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_217001E5C((uint64_t)v9);
  return v4;
}

void sub_2170022BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2170022D0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_217002308((uint64_t *)a1);
  }
  return a1;
}

void sub_217002308(uint64_t *a1)
{
  uint64_t v1 = *(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton **)(a1[2] + 8);
  uint64_t v2 = *(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_2170018E8(v3, v1);
      uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)((char *)v1 + 64);
    }
    while (v1 != v2);
  }
}

void **sub_21700235C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_217002390(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 64;
    sub_2170018E8(v4, (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)(i - 64));
  }
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::~UsdSkelBindingAPI(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  long long v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    long long v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76F730;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    long long v9 = "usdSkel/bindingAPI.cpp";
    char v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdSkelBindingAPI pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::Get(const UsdS"
                            "tagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76F730;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_217002594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return 5;
}

uint64_t sub_2170025BC(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94D38, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    void v12[2] = 1024;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [Schemauint64_t Type = pxrInternal_"
             "_aapl__pxrReserved__::UsdSkelBindingAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_2170027A4(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76F730;
  }
  else
  {
    int v5 = 1;
    long long v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76F730;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_217002790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2170027A4(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94D38, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    _OWORD v10[2] = 1147;
    void v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdSkelBindingAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94D40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94D40))
  {
    __cxa_guard_release(&qword_267B94D40);
  }
  return &qword_267B94D38;
}

void sub_2170028D8(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94D50, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)__cxa_guard_acquire(&qword_267B94D50);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::_GetStaticTfType(v2);
      byte_267B94D48 = sub_216D16508((char *)&qword_267B94D38, v3, v4);
      __cxa_guard_release(&qword_267B94D50);
    }
  }
  return byte_267B94D48;
}

void sub_217002958(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return &qword_267B94D38;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSkinningMethodAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    uint64_t v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 104), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_217002A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateSkinningMethodAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8) {
    uint64_t v8 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 104), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetGeomBindTransformAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    uint64_t v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 80), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_217002B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateGeomBindTransformAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8) {
    uint64_t v8 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 80), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 360), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    uint64_t v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 160), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_217002D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateJointsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8) {
    uint64_t v8 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 160), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 544), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    uint64_t v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 88), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_217002E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateJointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8) {
    uint64_t v8 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 88), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 464), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    uint64_t v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 96), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_217002FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateJointWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8) {
    uint64_t v8 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 96), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 512), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetBlendShapesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    uint64_t v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 144), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_217003138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateBlendShapesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8) {
    uint64_t v8 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 144), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 544), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetAnimationSourceRel(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    uint64_t v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 136), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170032A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateAnimationSourceRel(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    uint64_t v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 136), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_21700335C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSkeletonRel(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    uint64_t v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 168), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_217003414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateSkeletonRel(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    uint64_t v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 168), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170034D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetBlendShapeTargetsRel(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    uint64_t v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 152), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_217003588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateBlendShapeTargetsRel(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    uint64_t v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 152), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_217003644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  int v1 = (int)this;
  uint64_t v24 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94D70, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94D70))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v3) {
      uint64_t v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    uint64_t v4 = *((void *)v3 + 13);
    uint64_t v18 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v18 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v5 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v5) {
      int v5 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    uint64_t v6 = *((void *)v5 + 10);
    uint64_t v19 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v19 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v7) {
      int v7 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    uint64_t v8 = *((void *)v7 + 20);
    uint64_t v20 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v20 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v9) {
      uint64_t v9 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    uint64_t v10 = *((void *)v9 + 11);
    uint64_t v21 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v21 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v11 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v11) {
      char v11 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    uint64_t v12 = *((void *)v11 + 12);
    uint64_t v22 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v22 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v13 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v13) {
      char v13 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    uint64_t v14 = *((void *)v13 + 18);
    uint64_t v23 = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B94D58, &v18, 6uLL);
    for (uint64_t i = 40; i != -8; i -= 8)
    {
      uint64_t v16 = *(uint64_t *)((char *)&v18 + i);
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94D58, &dword_216758000);
    __cxa_guard_release(&qword_267B94D70);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94D90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94D90))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_217003A10((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94D78, &dword_216758000);
    __cxa_guard_release(&qword_267B94D90);
  }
  if (v1) {
    return &qword_267B94D78;
  }
  else {
    return &qword_267B94D58;
  }
}

void sub_21700398C(_Unwind_Exception *a1)
{
}

void *sub_217003A10(uint64_t **a1)
{
  qword_267B94D80 = 0;
  unk_267B94D88 = 0;
  qword_267B94D78 = 0;
  sub_216973388((char **)&qword_267B94D78, ((unk_267B94D60 - qword_267B94D58) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B94D78, (void *)qword_267B94D80, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B94D78, (void *)qword_267B94D80, (uint64_t *)qword_267B94D58, unk_267B94D60, (unk_267B94D60 - qword_267B94D58) >> 3);
}

void sub_217003AA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointIndicesPrimvar(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointIndicesAttr(this, (uint64_t)&v3);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar(a2, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v3);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
}

void sub_217003B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateJointIndicesPrimvar(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, int a2@<W1>, int a3@<W2>, pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a4@<X8>)
{
  sub_216D16CFC((uint64_t)&v11, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v16, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v11);
  v16[3] = 0;
  v16[0] = &unk_26C76D128;
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v7) {
    uint64_t v7 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v8) {
    uint64_t v8 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (a2)
  {
    if (!v9) {
      uint64_t v9 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v9 + 136);
  }
  else
  {
    if (!v9) {
      uint64_t v9 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v9 + 1224);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v16, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v7 + 88), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v8 + 464), v10, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v16);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  if (v12) {
    sub_216D16E0C(v12);
  }
}

void sub_217003CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointWeightsPrimvar(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointWeightsAttr(this, (uint64_t)&v3);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar(a2, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v3);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
}

void sub_217003D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateJointWeightsPrimvar(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, int a2@<W1>, int a3@<W2>, pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a4@<X8>)
{
  sub_216D16CFC((uint64_t)&v11, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v16, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v11);
  v16[3] = 0;
  v16[0] = &unk_26C76D128;
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v7) {
    uint64_t v7 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v8) {
    uint64_t v8 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (a2)
  {
    if (!v9) {
      uint64_t v9 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v9 + 136);
  }
  else
  {
    if (!v9) {
      uint64_t v9 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v9 + 1224);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v16, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v7 + 96), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v8 + 512), v10, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v16);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  if (v12) {
    sub_216D16E0C(v12);
  }
}

void sub_217003ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::SetRigidJointInfluence(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this, uint64_t a2, float a3)
{
  int v22 = a2;
  float v21 = a3;
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateJointIndicesPrimvar(this, 1, 1, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v15);
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::CreateJointWeightsPrimvar(this, 1, 1, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v9);
  if ((a2 & 0x80000000) == 0)
  {
    sub_217004108((uint64_t)v7, 1uLL, &v22);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
  }
  v7[0] = "usdSkel/bindingAPI.cpp";
  v7[1] = "SetRigidJointInfluence";
  _OWORD v7[2] = 351;
  v7[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::SetRigidJointInfluence(int, float) const";
  char v8 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v7, (pxrInternal__aapl__pxrReserved__ *)"Invalid jointIndex '%d'", v5, a2);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_21697C414(&v17);
  if (v16) {
    sub_216D16E0C(v16);
  }
  return 0;
}

void sub_2170040A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  sub_216F45190((uint64_t)va2);
  sub_216F45190(v2 - 72);
  _Unwind_Resume(a1);
}

uint64_t sub_217004108(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_2168F845C((void *)a1);
  uint64_t v7 = a3;
  sub_216907A0C((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_217004168(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217004180(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_2168F845C((void *)a1);
  uint64_t v7 = a3;
  sub_2168F84A8((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_2170041E0(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSkeleton(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this, pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *a2)
{
  if (!a2)
  {
    uint64_t v32 = (void **)"usdSkel/bindingAPI.cpp";
    int v33 = (atomic_ullong *)"GetSkeleton";
    uint64_t v34 = 413;
    unint64_t v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSkeleton(UsdSkelSkeleton *) const";
    char v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"'skel' pointer is null.");
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSkeletonRel(this, (uint64_t)&v27);
  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v27, v3))goto LABEL_22; {
  uint64_t v24 = 0;
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  if (!pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)&v27, (uint64_t *)&v24)|| v24 == v25&& !pxrInternal__aapl__pxrReserved__::UsdRelationship::HasAuthoredTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v27))
  {
    uint64_t v32 = (void **)&v24;
    sub_216981168(&v32);
LABEL_22:
    int v11 = 1;
    goto LABEL_23;
  }
  sub_217004618((pxrInternal__aapl__pxrReserved__::UsdObject *)&v27, &v24, (uint64_t)v19);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v32, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v19);
  uint64_t v32 = (void **)&unk_26C76FA70;
  uint64_t v4 = v33;
  if (v33) {
    atomic_fetch_add_explicit(v33 + 6, 1uLL, memory_order_relaxed);
  }
  int v5 = (atomic_ullong *)*((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  if (v5) {
    sub_216D16E0C(v5);
  }
  sub_2169C487C((int *)a2 + 4, &v34);
  sub_2169C48D4((int *)a2 + 5, (_DWORD *)&v34 + 1);
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v32);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v19, v6))
  {
    uint64_t v7 = *((void *)a2 + 1);
    if (!v7
      || (*(unsigned char *)(v7 + 57) & 8) != 0
      || ((*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *))(*(void *)a2 + 32))(a2) & 1) == 0)
    {
      uint64_t v32 = (void **)"usdSkel/bindingAPI.cpp";
      int v33 = (atomic_ullong *)"GetSkeleton";
      uint64_t v34 = 428;
      unint64_t v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSkeleton(UsdSkelSkeleton *) const";
      char v36 = 0;
      sub_216D0162C((uint64_t)&v27, &v17);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v17);
      sub_216D0162C((uint64_t)v19, &v15);
      uint64_t v9 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__ *)"%s -- target (<%s>) of relationship is not a Skeleton.", v10, Text, v9);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
      sub_21697C414(&v15);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
      sub_21697C414(&v17);
    }
  }
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_21697C414(&v21);
  if (v20) {
    sub_216D16E0C(v20);
  }
  uint64_t v32 = (void **)&v24;
  sub_216981168(&v32);
  int v11 = 0;
LABEL_23:
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
  sub_21697C414(&v29);
  if (v28) {
    sub_216D16E0C(v28);
  }
  uint64_t result = 1;
  if (v11)
  {
    LODWORD(v32) = 1;
    int v33 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v34);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v34 + 1);
    unint64_t v35 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v27, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v32);
    uint64_t v27 = &unk_26C76FA70;
    uint64_t v13 = v28;
    if (v28) {
      atomic_fetch_add_explicit(v28 + 6, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = (atomic_ullong *)*((void *)a2 + 1);
    *((void *)a2 + 1) = v13;
    if (v14) {
      sub_216D16E0C(v14);
    }
    sub_2169C487C((int *)a2 + 4, &v29);
    sub_2169C48D4((int *)a2 + 5, &v30);
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v27);
    if ((v35 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
    sub_21697C414(&v34);
    if (v33) {
      sub_216D16E0C(v33);
    }
    return 0;
  }
  return result;
}

void sub_217004590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v13 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  sub_21697B754((uint64_t *)va);
  sub_216D16AD8((uint64_t)va1);
  *(void *)(v4 - 72) = va2;
  sub_216981168((void ***)(v4 - 72));
  sub_216D33F64((uint64_t)va3);
  _Unwind_Resume(a1);
}

uint64_t sub_217004618@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath **a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *a2;
  unint64_t v6 = a2[1] - *a2;
  if (!v6)
  {
LABEL_34:
    *(_DWORD *)a3 = 1;
    *(void *)(a3 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(void *)(a3 + 24) = 0;
    return result;
  }
  if (v6 >= 9)
  {
    unint64_t v35 = "usdSkel/bindingAPI.cpp";
    char v36 = (pxrInternal__aapl__pxrReserved__ *)"_GetFirstTargetPrimForRel";
    uint64_t v37 = 387;
    unint64_t v38 = (unint64_t)"UsdPrim pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_GetFirstTargetPrimForRel(c"
                            "onst UsdRelationship &, const SdfPathVector &)";
    char v39 = 0;
    sub_216D0162C((uint64_t)a1, (int *)&v33);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v35, (pxrInternal__aapl__pxrReserved__ *)"%s -- relationship has more than one target. Only the first will be used.", v9, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
    sub_21697C414(&v33);
    int v5 = *a2;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2, &v35);
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530((uint64_t *)&v35);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v10, v5, a3);
  uint64_t v12 = v36;
  if (v36 && atomic_fetch_add_explicit((atomic_uint *volatile)v36 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(pxrInternal__aapl__pxrReserved__ *))(*(void *)v12 + 8))(v12);
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a3, v11);
  if ((result & 1) == 0)
  {
    uint64_t v14 = *(void *)(a3 + 24);
    if ((v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a3 + 20));
    sub_21697C414((_DWORD *)(a3 + 16));
    uint64_t v16 = *(atomic_ullong **)(a3 + 8);
    if (v16) {
      sub_216D16E0C(v16);
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v15, &v33);
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(v5)
      || !pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v5))
    {
      goto LABEL_28;
    }
    for (uint64_t i = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v5, &v40);
          ;
          uint64_t i = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_21697C414(&v35))
    {
      int v18 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(i);
      uint64_t v19 = v40;
      uint64_t v20 = *v18;
      if (v40 == *v18) {
        break;
      }
      int v21 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(&v33);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v21, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, (uint64_t)&v35);
      int IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v35, v22);
      char v25 = IsDefined;
      if (IsDefined)
      {
        uint64_t v26 = v36;
        if (!v36 || (uint64_t v27 = *((void *)v36 + 7), (v27 & 0x800) != 0))
        {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v36, v24);
          uint64_t v27 = *((void *)v26 + 7);
        }
        BOOL v3 = (v27 & 1) == 0;
      }
      if ((v38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
      sub_21697C414(&v37);
      if (v36) {
        sub_216D16E0C((atomic_ullong *)v36);
      }
      if (v25) {
        break;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, &v35);
      sub_21697DE94((int *)&v40, (int *)&v35);
      sub_21697DEEC((int *)&v40 + 1, (int *)&v35 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v40 + 1);
    sub_21697C414(&v40);
    if (v19 == v20) {
LABEL_28:
    }
      BOOL v3 = 0;
    uint64_t v28 = v34;
    if (v34 && atomic_fetch_add_explicit((atomic_uint *volatile)(v34 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
    }
    if (!v3)
    {
      unint64_t v35 = "usdSkel/bindingAPI.cpp";
      char v36 = (pxrInternal__aapl__pxrReserved__ *)"_GetFirstTargetPrimForRel";
      uint64_t v37 = 399;
      unint64_t v38 = (unint64_t)"UsdPrim pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_GetFirstTargetPrimForRel"
                              "(const UsdRelationship &, const SdfPathVector &)";
      char v39 = 0;
      sub_216D0162C((uint64_t)a1, (int *)&v33);
      int v29 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33);
      int v30 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v5);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v35, (pxrInternal__aapl__pxrReserved__ *)"%s -- Invalid target <%s>.", v31, v29, v30);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
      sub_21697C414(&v33);
    }
    goto LABEL_34;
  }
  return result;
}

void sub_2170049A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedSkeleton(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  int v15 = 1;
  uint64_t v16 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v18);
  uint64_t v19 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v15);
  *(void *)a2 = &unk_26C76FA70;
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_21697C414(&v17);
  if (v16) {
    sub_216D16E0C(v16);
  }
  sub_216D16CFC((uint64_t)&v15, (uint64_t *)this + 1, (_DWORD *)this + 4);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v15, v4))
  {
    while (1)
    {
      BOOL IsPseudoRoot = pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v15);
      if (IsPseudoRoot) {
        break;
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v15);
      uint64_t v14 = 0;
      uint64_t v10 = &unk_26C76F730;
      Skeletounint64_t n = pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v10, a2);
      pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v10);
      if (Skeleton) {
        break;
      }
      sub_216D6B1F8((uint64_t)&v15, (uint64_t)&v10);
      int v15 = (int)v10;
      uint64_t v7 = v11;
      uint64_t v11 = 0;
      uint64_t v8 = v16;
      uint64_t v16 = v7;
      if (v8) {
        sub_216D16E0C(v8);
      }
      sub_21697DE94(&v17, &v12);
      sub_21697DEEC(&v18, &v13);
      if ((v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v19 = v14;
      uint64_t v14 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
      sub_21697C414(&v12);
      if (v11) {
        sub_216D16E0C(v11);
      }
    }
    int v9 = !IsPseudoRoot;
  }
  else
  {
    int v9 = 0;
    BOOL IsPseudoRoot = 1;
  }
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_21697C414(&v17);
  if (v16) {
    sub_216D16E0C(v16);
  }
  if (((v9 | IsPseudoRoot) & 1) == 0) {
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton(a2);
  }
}

void sub_217004CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216D16AD8((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton(v5);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetAnimationSource(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this, void ***a2)
{
  if (!a2)
  {
    uint64_t v33 = (void **)"usdSkel/bindingAPI.cpp";
    uint64_t v34 = (atomic_ullong *)"GetAnimationSource";
    uint64_t v35 = 461;
    unint64_t v36 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetAnimationSource(UsdPrim *) const";
    char v37 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v33, 1, (pxrInternal__aapl__pxrReserved__ *)"'prim' pointer is null.");
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetAnimationSourceRel(this, (uint64_t)v28);
  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v28, v3))goto LABEL_14; {
  char v25 = 0;
  }
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  if (!pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)v28, (uint64_t *)&v25)|| v25 == v26&& !pxrInternal__aapl__pxrReserved__::UsdRelationship::HasAuthoredTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v28))
  {
    uint64_t v33 = (void **)&v25;
    sub_216981168(&v33);
LABEL_14:
    int v8 = 1;
    goto LABEL_33;
  }
  sub_217004618((pxrInternal__aapl__pxrReserved__::UsdObject *)v28, &v25, (uint64_t)&v33);
  *(_DWORD *)a2 = v33;
  uint64_t v4 = v34;
  uint64_t v34 = 0;
  int v5 = (atomic_ullong *)a2[1];
  a2[1] = (void **)v4;
  if (v5) {
    sub_216D16E0C(v5);
  }
  sub_21697DE94((int *)a2 + 4, (int *)&v35);
  sub_21697DEEC((int *)a2 + 5, (int *)&v35 + 1);
  if (&v33 == a2)
  {
    unint64_t v7 = v36;
  }
  else
  {
    unint64_t v6 = (unint64_t)a2[3];
    if ((v6 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    unint64_t v7 = 0;
    a2[3] = (void **)v36;
    unint64_t v36 = 0;
  }
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
  sub_21697C414(&v35);
  if (v34) {
    sub_216D16E0C(v34);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a2, v9)&& (pxrInternal__aapl__pxrReserved__::UsdSkelIsSkelAnimationPrim((pxrInternal__aapl__pxrReserved__ *)a2, v10) & 1) == 0)
  {
    uint64_t v33 = (void **)"usdSkel/bindingAPI.cpp";
    uint64_t v34 = (atomic_ullong *)"GetAnimationSource";
    uint64_t v35 = 476;
    unint64_t v36 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetAnimationSource(UsdPrim *) const";
    char v37 = 0;
    sub_216D0162C((uint64_t)v28, &v23);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23);
    sub_216D0162C((uint64_t)a2, &v21);
    int v12 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v21);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v33, (pxrInternal__aapl__pxrReserved__ *)"%s -- target (<%s>) of relationship is not a valid skel animation source.", v13, Text, v12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    sub_21697C414(&v21);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
    sub_21697C414(&v23);
    LODWORD(v33) = 1;
    uint64_t v34 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v35);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v35 + 1);
    *(_DWORD *)a2 = v33;
    uint64_t v14 = v34;
    unint64_t v36 = 0;
    uint64_t v34 = 0;
    int v15 = (atomic_ullong *)a2[1];
    a2[1] = (void **)v14;
    if (v15) {
      sub_216D16E0C(v15);
    }
    sub_21697DE94((int *)a2 + 4, (int *)&v35);
    sub_21697DEEC((int *)a2 + 5, (int *)&v35 + 1);
    if (&v33 == a2)
    {
      if ((v36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      unint64_t v16 = (unint64_t)a2[3];
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      a2[3] = (void **)v36;
      unint64_t v36 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
    sub_21697C414(&v35);
    if (v34) {
      sub_216D16E0C(v34);
    }
  }
  uint64_t v33 = (void **)&v25;
  sub_216981168(&v33);
  int v8 = 0;
LABEL_33:
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
  sub_21697C414(&v30);
  if (v29) {
    sub_216D16E0C(v29);
  }
  uint64_t result = 1;
  if (v8)
  {
    LODWORD(v33) = 1;
    uint64_t v34 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v35);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v35 + 1);
    *(_DWORD *)a2 = v33;
    int v18 = v34;
    unint64_t v36 = 0;
    uint64_t v34 = 0;
    uint64_t v19 = (atomic_ullong *)a2[1];
    a2[1] = (void **)v18;
    if (v19) {
      sub_216D16E0C(v19);
    }
    sub_21697DE94((int *)a2 + 4, (int *)&v35);
    sub_21697DEEC((int *)a2 + 5, (int *)&v35 + 1);
    if (&v33 == a2)
    {
      if ((v36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      unint64_t v20 = (unint64_t)a2[3];
      if ((v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      a2[3] = (void **)v36;
      unint64_t v36 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
    sub_21697C414(&v35);
    if (v34) {
      sub_216D16E0C(v34);
    }
    return 0;
  }
  return result;
}

void sub_217005140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  a21 = (void **)&a14;
  sub_216981168(&a21);
  sub_216D33F64((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedAnimationSource(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 1;
  *(void *)(a2 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
  *(void *)(a2 + 24) = 0;
  sub_216D16CFC((uint64_t)&v17, (uint64_t *)this + 1, (_DWORD *)this + 4);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v17, v4))
  {
    while (1)
    {
      BOOL IsPseudoRoot = pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v17);
      if (IsPseudoRoot) {
        break;
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v17);
      uint64_t v16 = 0;
      int v12 = &unk_26C76F730;
      char AnimationSource = pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetAnimationSource((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v12, (void ***)a2);
      pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v12);
      if (AnimationSource) {
        break;
      }
      sub_216D6B1F8((uint64_t)&v17, (uint64_t)&v12);
      int v17 = (int)v12;
      unint64_t v7 = v13;
      int v13 = 0;
      int v8 = v18;
      int v18 = v7;
      if (v8) {
        sub_216D16E0C(v8);
      }
      sub_21697DE94(&v19, &v14);
      sub_21697DEEC(&v20, &v15);
      if ((v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v21 = v16;
      uint64_t v16 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
      sub_21697C414(&v14);
      if (v13) {
        sub_216D16E0C(v13);
      }
    }
    int v9 = !IsPseudoRoot;
  }
  else
  {
    int v9 = 0;
    BOOL IsPseudoRoot = 1;
  }
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  if (v18) {
    sub_216D16E0C(v18);
  }
  if (((v9 | IsPseudoRoot) & 1) == 0)
  {
    uint64_t v10 = *(void *)(a2 + 24);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
    sub_21697C414((_DWORD *)(a2 + 16));
    uint64_t v11 = *(atomic_ullong **)(a2 + 8);
    if (v11) {
      sub_216D16E0C(v11);
    }
  }
}

void sub_2170053C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D16AD8((uint64_t)va);
  sub_216D16AD8(v7);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::ValidateJointIndices(unsigned int *a1, const char *a2, char *a3, uint64_t a4)
{
  if (!a2) {
    return 1;
  }
  int v5 = 0;
  BOOL v6 = 0;
  unint64_t v7 = *a1;
  if ((v7 & 0x80000000) == 0 && v7 < (unint64_t)a3)
  {
    int v5 = 0;
    while (a2 - 1 != v5)
    {
      unint64_t v8 = a1[(void)v5++ + 1];
      if ((v8 & 0x80000000) != 0 || v8 >= (unint64_t)a3)
      {
        BOOL v6 = v5 >= a2;
        unint64_t v7 = v8;
        goto LABEL_9;
      }
    }
    return 1;
  }
LABEL_9:
  if (a4)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Index [%d] at element %td is not in the range [0,%zu)", a2, a3, v7, v5, a3);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(_OWORD *)a4 = v10;
    *(void *)(a4 + 16) = v11;
  }
  return v6;
}

uint64_t *sub_2170054C8()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170055A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_2170055F8()
{
  sub_217006C80();
  sub_216779094(__p, "BlendShape");
  sub_217006DAC((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_217005648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::~UsdSkelBlendShape(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    unint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76F788;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    int v9 = "usdSkel/blendShape.cpp";
    long long v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdSkelBlendShape pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::Get(const UsdS"
                            "tagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    long long v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76F788;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_217005814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94DA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94DA0))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B94D98, "BlendShape");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B94D98, &dword_216758000);
    __cxa_guard_release(&qword_267B94DA0);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    unint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B94D98, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76F788;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    int v9 = "usdSkel/blendShape.cpp";
    long long v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdSkelBlendShape pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::Define(const U"
                            "sdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    long long v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76F788;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_217005A20(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94DB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94DB0))
  {
    __cxa_guard_release(&qword_267B94DB0);
  }
  return &qword_267B94DA8;
}

void sub_217005AC8(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94DC0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)__cxa_guard_acquire(&qword_267B94DC0);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::_GetStaticTfType(v2);
      byte_267B94DB8 = sub_216D16508((char *)&qword_267B94DA8, v3, v4);
      __cxa_guard_release(&qword_267B94DC0);
    }
  }
  return byte_267B94DB8;
}

void sub_217005B48(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
  return &qword_267B94DA8;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetOffsetsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  BOOL v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    BOOL v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 64), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_217005C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::CreateOffsetsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8) {
    uint64_t v8 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  int v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    int v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 64), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 688), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetNormalOffsetsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  BOOL v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    BOOL v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 56), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_217005D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::CreateNormalOffsetsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8) {
    uint64_t v8 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  int v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    int v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 56), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 688), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetPointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  BOOL v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    BOOL v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 72), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_217005EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::CreatePointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8) {
    uint64_t v8 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  int v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    int v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 72), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 464), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
  int v1 = (int)this;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94DE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94DE0))
  {
    BOOL v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v3) {
      BOOL v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    uint64_t v4 = *((void *)v3 + 8);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v5 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v5) {
      int v5 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    uint64_t v6 = *((void *)v5 + 7);
    uint64_t v13 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v13 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v7) {
      int v7 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    uint64_t v8 = *((void *)v7 + 9);
    uint64_t v14 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B94DC8, &v12, 3uLL);
    for (uint64_t i = 16; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94DC8, &dword_216758000);
    __cxa_guard_release(&qword_267B94DE0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94E00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94E00))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_217006288((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94DE8, &dword_216758000);
    __cxa_guard_release(&qword_267B94E00);
  }
  if (v1) {
    return &qword_267B94DE8;
  }
  else {
    return &qword_267B94DC8;
  }
}

void sub_217006204(_Unwind_Exception *a1)
{
}

void *sub_217006288(uint64_t **a1)
{
  qword_267B94DF0 = 0;
  unk_267B94DF8 = 0;
  qword_267B94DE8 = 0;
  sub_216973388((char **)&qword_267B94DE8, ((*(void *)algn_267B94DD0 - qword_267B94DC8) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B94DE8, (void *)qword_267B94DF0, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B94DE8, (void *)qword_267B94DF0, (uint64_t *)qword_267B94DC8, *(uint64_t **)algn_267B94DD0, (*(void *)algn_267B94DD0 - qword_267B94DC8) >> 3);
}

void sub_217006320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::CreateInbetween(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_Create((pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)&v5, a2, a3);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_2170063C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetInbetween(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *a3@<X8>)
{
  sub_216D16CFC((uint64_t)v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_MakeNamespaced(a2, 0, &v5);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v5, (uint64_t)v11);
  pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::UsdSkelInbetweenShape(a3, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v11);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  if (v12) {
    sub_216D16E0C(v12);
  }
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
}

void sub_2170064D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_216D2EDA0((uint64_t)va1);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::HasInbetween(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_MakeNamespaced(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)1, &v16);
  if (!v16) {
    return 0;
  }
  sub_216D16CFC((uint64_t)v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16, (uint64_t)v11);
  IsInbetweeunint64_t n = pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::IsInbetween((pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)v11, v3);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  if (v12) {
    sub_216D16E0C(v12);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return IsInbetween;
}

void sub_217006620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216D2EDA0((uint64_t)va1);
  sub_216D16AD8((uint64_t)va);
  uint64_t v4 = *(void *)(v2 - 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::_MakeInbetweens(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_2170067D0(a2, (a1[1] - *a1) >> 5);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      sub_216D6B7B4(v4, (uint64_t)v12);
      if (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::IsInbetween((pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)v12, v6))
      {
        pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::UsdSkelInbetweenShape((pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)&v7, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v12);
        sub_217006864(a2, (uint64_t)&v7);
        if ((v11 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
        sub_21697C414(&v9);
        if (v8) {
          sub_216D16E0C(v8);
        }
      }
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
      sub_21697C414(&v14);
      if (v13) {
        sub_216D16E0C(v13);
      }
      v4 += 32;
    }
    while (v4 != v5);
  }
}

void sub_217006788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216FF9594((void ***)va);
  _Unwind_Resume(a1);
}

void **sub_2170067D0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_2168707F4((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    _OWORD v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 32 * v6;
    sub_217006E64(a1, v7);
    return sub_217007020(v7);
  }
  return result;
}

void sub_217006850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_217007020((void **)va);
  _Unwind_Resume(a1);
}

void *sub_217006864(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v4 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v4)
  {
    uint64_t v9 = (uint64_t)(v6 - *a1) >> 5;
    if ((unint64_t)(v9 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v10 = v4 - *a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    int v18 = a1 + 2;
    if (v12) {
      int v13 = (char *)sub_2168707F4((uint64_t)(a1 + 2), v12);
    }
    else {
      int v13 = 0;
    }
    int v14 = v13;
    int v15 = &v13[32 * v9];
    int v17 = &v13[32 * v12];
    sub_216D6C860(v5, (uint64_t)v15, a2);
    uint64_t v16 = v15 + 32;
    sub_217006E64(a1, &v14);
    unint64_t v8 = a1[1];
    uint64_t result = sub_217007020(&v14);
  }
  else
  {
    uint64_t result = sub_216D6C860((uint64_t)(a1 + 2), v6, a2);
    unint64_t v8 = v6 + 32;
    a1[1] = v6 + 32;
  }
  a1[1] = v8;
  return result;
}

void sub_217006964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_217007020((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217006978(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  BOOL v3 = *(atomic_ullong **)(a1 + 8);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetInbetweens(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this@<X0>, uint64_t *a2@<X8>)
{
  sub_216D16CFC((uint64_t)v8, (uint64_t *)this + 1, (_DWORD *)this + 4);
  int IsDefined = (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v8, v3);
  if (IsDefined)
  {
    NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNamespacePrefix(IsDefined);
    if ((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace((uint64_t)v8, EmptyString, v7);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::_MakeInbetweens(v7, a2);
  int v13 = (void **)v7;
  sub_216D3BBE0(&v13);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  if (v9) {
    sub_216D16E0C(v9);
  }
}

void sub_217006AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  *(void *)(v5 - 24) = v4;
  sub_216D3BBE0((void ***)(v5 - 24));
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetAuthoredInbetweens(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this@<X0>, uint64_t *a2@<X8>)
{
  sub_216D16CFC((uint64_t)v8, (uint64_t *)this + 1, (_DWORD *)this + 4);
  int IsDefined = (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v8, v3);
  if (IsDefined)
  {
    NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNamespacePrefix(IsDefined);
    if ((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace((uint64_t)v8, EmptyString, v7);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::_MakeInbetweens(v7, a2);
  int v13 = (void **)v7;
  sub_216D3BBE0(&v13);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  if (v9) {
    sub_216D16E0C(v9);
  }
}

void sub_217006BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  *(void *)(v5 - 24) = v4;
  sub_216D3BBE0((void ***)(v5 - 24));
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::ValidatePointIndices(uint64_t a1, const char *a2, char *a3, uint64_t a4)
{
  if (a2)
  {
    BOOL v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(unsigned int *)(a1 + 4 * (void)v6);
      if ((v7 & 0x80000000) != 0)
      {
        if (!a4) {
          return v5;
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Index [%d] at element %td < 0", a2, a3, *(unsigned int *)(a1 + 4 * (void)v6), v6);
        goto LABEL_9;
      }
      if (v7 >= (unint64_t)a3) {
        break;
      }
      BOOL v5 = ++v6 >= a2;
      if (a2 == v6) {
        return 1;
      }
    }
    if (!a4) {
      return v5;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Index [%d] at element %td >= numPoints [%zu]", a2, a3, v7, v6, a3);
LABEL_9:
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(_OWORD *)a4 = v9;
    *(void *)(a4 + 16) = v10;
  }
  else
  {
    return 1;
  }
  return v5;
}

uint64_t *sub_217006C80()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F1B0B4((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_217006D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_217006DAC(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_217006E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217006E64(uint64_t *a1, void *a2)
{
  uint64_t result = sub_217006EDC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_217006EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 32;
      sub_216D6C860(a1, v7 - 32, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 32;
      *((void *)&v16 + 1) -= 32;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_217006F94((uint64_t)v13);
  return v11;
}

uint64_t sub_217006F94(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_217006FCC((uint64_t *)a1);
  }
  return a1;
}

void sub_217006FCC(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_216FF962C(v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
}

void **sub_217007020(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_217007054(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 32;
    sub_216FF962C(v4, i - 32);
  }
}

pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::UsdSkelBlendShapeQuery(void ***this, const pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *a2)
{
  *(_DWORD *)this = 1;
  this[1] = 0;
  uint64_t v85 = (int *)(this + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 5);
  *(_OWORD *)(this + 3) = 0u;
  *(_OWORD *)(this + 7) = 0u;
  char v88 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(this + 7);
  char v89 = this + 4;
  *(_OWORD *)(this + 9) = 0u;
  *(_OWORD *)(this + 11) = 0u;
  uint64_t v84 = (unint64_t *)(this + 3);
  *(_OWORD *)(this + 5) = 0u;
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetBlendShapeTargetsRel(a2, (uint64_t)v107);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v107, v4))
  {
    uint64_t v83 = a2;
    uint64_t v82 = (int *)this + 5;
    uint64_t v104 = 0;
    uint64_t v105 = 0;
    uint64_t v106 = 0;
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets((uint64_t)v107, &v104);
    sub_217007B14(v88, (v105 - v104) >> 3);
    uint64_t v5 = v104;
    if (v105 != v104)
    {
      unint64_t v6 = 0;
      uint64_t v87 = this + 6;
      do
      {
        sub_216D16CFC((uint64_t)&v95, (uint64_t *)v83 + 1, (_DWORD *)v83 + 4);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v95, v7, &v93);
        pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::Get((uint64_t *)&v93, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 8 * v6), (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v100);
        uint64_t v8 = v94;
        if (v94 && atomic_fetch_add_explicit(v94 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 8))(v8);
        }
        if ((v98 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v98 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v97 + 1);
        sub_21697C414(&v97);
        if (v96) {
          sub_216D16E0C((atomic_ullong *)v96);
        }
        if (v101
          && (*(unsigned char *)(v101 + 57) & 8) == 0
          && ((*(uint64_t (**)(uint64_t *))(v100 + 32))(&v100) & 1) != 0)
        {
          uint64_t v9 = *(void *)v88;
          uint64_t v10 = v101;
          if (v101) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 48), 1uLL, memory_order_relaxed);
          }
          uint64_t v11 = v9 + 40 * v6;
          uint64_t v12 = *(atomic_ullong **)(v11 + 8);
          *(void *)(v11 + 8) = v10;
          if (v12) {
            sub_216D16E0C(v12);
          }
          sub_2169C487C((int *)(v11 + 16), &v102);
          sub_2169C48D4((int *)(v11 + 20), &v103);
          uint64_t v13 = v9 + 40 * v6;
          *(void *)(v13 + 24) = 0xAAAAAAAAAAAAAAABLL * (((char *)this[5] - (char *)this[4]) >> 2);
          char v14 = (void *)(v13 + 24);
          sub_216D16CFC((uint64_t)&v95, &v101, &v102);
          long long v16 = v96;
          if (!v96 || (uint64_t v17 = *((void *)v96 + 7), (v17 & 0x800) != 0))
          {
            pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v96, v15);
            uint64_t v17 = *((void *)v16 + 7);
          }
          if ((v98 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v98 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v97 + 1);
          sub_21697C414(&v97);
          if (v96) {
            sub_216D16E0C((atomic_ullong *)v96);
          }
          if (v17)
          {
            int v18 = this[5];
            int v19 = this[6];
            if (v18 >= v19)
            {
              unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)*v89) >> 2);
              unint64_t v24 = v23 + 1;
              if (v23 + 1 > 0x1555555555555555) {
                sub_21677CB10();
              }
              unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)*v89) >> 2);
              if (2 * v25 > v24) {
                unint64_t v24 = 2 * v25;
              }
              if (v25 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v26 = 0x1555555555555555;
              }
              else {
                unint64_t v26 = v24;
              }
              uint64_t v27 = (char *)sub_216B0D05C((uint64_t)v87, v26);
              int v29 = &v27[12 * v23];
              *(_DWORD *)int v29 = v6;
              *(void *)(v29 + 4) = 0x3F800000FFFFFFFFLL;
              int v31 = this[4];
              int v30 = this[5];
              uint64_t v32 = v29;
              if (v30 != v31)
              {
                do
                {
                  uint64_t v33 = *(uint64_t *)((char *)v30 - 12);
                  int v30 = (void **)((char *)v30 - 12);
                  int v34 = *((_DWORD *)v30 + 2);
                  *(void *)(v32 - 12) = v33;
                  v32 -= 12;
                  *((_DWORD *)v32 + 2) = v34;
                }
                while (v30 != v31);
                int v30 = *v89;
              }
              int v19 = (void **)&v27[12 * v28];
              int v20 = v29 + 12;
              this[4] = (void **)v32;
              this[5] = (void **)(v29 + 12);
              this[6] = v19;
              if (v30)
              {
                operator delete(v30);
                int v19 = *v87;
              }
            }
            else
            {
              *(_DWORD *)int v18 = v6;
              *(void **)((char *)v18 + 4) = (void *)0x3F800000FFFFFFFFLL;
              int v20 = (char *)v18 + 12;
            }
            this[5] = (void **)v20;
            if (v20 >= (char *)v19)
            {
              unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v20 - (char *)*v89) >> 2);
              unint64_t v37 = v36 + 1;
              if (v36 + 1 > 0x1555555555555555) {
                sub_21677CB10();
              }
              unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)*v89) >> 2);
              if (2 * v38 > v37) {
                unint64_t v37 = 2 * v38;
              }
              if (v38 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v39 = 0x1555555555555555;
              }
              else {
                unint64_t v39 = v37;
              }
              uint64_t v40 = (char *)sub_216B0D05C((uint64_t)v87, v39);
              uint64_t v42 = &v40[12 * v36];
              *(_DWORD *)uint64_t v42 = v6;
              *(void *)(v42 + 4) = 0xFFFFFFFFLL;
              uint64_t v44 = this[4];
              unint64_t v43 = this[5];
              uint64_t v45 = v42;
              if (v43 != v44)
              {
                do
                {
                  uint64_t v46 = *(uint64_t *)((char *)v43 - 12);
                  unint64_t v43 = (void **)((char *)v43 - 12);
                  int v47 = *((_DWORD *)v43 + 2);
                  *(void *)(v45 - 12) = v46;
                  v45 -= 12;
                  *((_DWORD *)v45 + 2) = v47;
                }
                while (v43 != v44);
                unint64_t v43 = *v89;
              }
              uint64_t v35 = (void **)(v42 + 12);
              this[4] = (void **)v45;
              this[5] = (void **)(v42 + 12);
              this[6] = (void **)&v40[12 * v41];
              if (v43) {
                operator delete(v43);
              }
            }
            else
            {
              *(_DWORD *)int v20 = v6;
              *(void *)(v20 + 4) = 0xFFFFFFFFLL;
              uint64_t v35 = (void **)(v20 + 12);
            }
            uint64_t v86 = v9;
            this[5] = v35;
            pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetInbetweens((pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)&v100, (uint64_t *)&v93);
            unsigned __int8 v49 = v93;
            uint64_t v48 = (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)v94;
            while (v49 != v48)
            {
              float v92 = 0.0;
              if (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::GetWeight(v49, &v92))
              {
                float v50 = v92;
                if (fabs(v92) >= 0.000000999999997 && fabs(v92 + -1.0) >= 0.000000999999997)
                {
                  unint64_t v53 = (unint64_t)((char *)this[11] - (char *)this[10]) >> 5;
                  char v55 = (float *)this[5];
                  char v54 = this[6];
                  if (v55 >= (float *)v54)
                  {
                    unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (char *)*v89) >> 2);
                    unint64_t v58 = v57 + 1;
                    if (v57 + 1 > 0x1555555555555555) {
                      sub_21677CB10();
                    }
                    unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (char *)*v89) >> 2);
                    if (2 * v59 > v58) {
                      unint64_t v58 = 2 * v59;
                    }
                    if (v59 >= 0xAAAAAAAAAAAAAAALL) {
                      unint64_t v60 = 0x1555555555555555;
                    }
                    else {
                      unint64_t v60 = v58;
                    }
                    int v61 = (char *)sub_216B0D05C((uint64_t)v87, v60);
                    uint64_t v63 = &v61[12 * v57];
                    float v64 = v92;
                    *(_DWORD *)uint64_t v63 = v6;
                    *((_DWORD *)v63 + 1) = v53;
                    *((float *)v63 + 2) = v64;
                    long long v66 = this[4];
                    int v65 = this[5];
                    long long v67 = (void **)v63;
                    if (v65 != v66)
                    {
                      do
                      {
                        long long v68 = *(void **)((char *)v65 - 12);
                        int v65 = (void **)((char *)v65 - 12);
                        int v69 = *((_DWORD *)v65 + 2);
                        *(void **)((char *)v67 - 12) = v68;
                        long long v67 = (void **)((char *)v67 - 12);
                        *((_DWORD *)v67 + 2) = v69;
                      }
                      while (v65 != v66);
                      int v65 = *v89;
                    }
                    uint64_t v56 = (void **)(v63 + 12);
                    this[4] = v67;
                    this[5] = (void **)(v63 + 12);
                    this[6] = (void **)&v61[12 * v62];
                    if (v65) {
                      operator delete(v65);
                    }
                  }
                  else
                  {
                    *(_DWORD *)char v55 = v6;
                    *((_DWORD *)v55 + 1) = v53;
                    uint64_t v56 = (void **)(v55 + 3);
                    v55[2] = v50;
                  }
                  this[5] = v56;
                  long long v70 = this[11];
                  if (v70 >= this[12])
                  {
                    uint64_t v71 = sub_21700A320((uint64_t *)this + 10, (uint64_t)v49);
                  }
                  else
                  {
                    sub_216D3B3EC((uint64_t)(this + 12), (uint64_t)this[11], (uint64_t)v49);
                    uint64_t v71 = (uint64_t)(v70 + 4);
                    this[11] = v70 + 4;
                  }
                  this[11] = (void **)v71;
                }
                else
                {
                  long long v95 = (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape **)"usdSkel/blendShapeQuery.cpp";
                  long long v96 = (pxrInternal__aapl__pxrReserved__ *)"UsdSkelBlendShapeQuery";
                  uint64_t v97 = 97;
                  unint64_t v98 = (unint64_t)"pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::UsdSkelBlendShapeQue"
                                          "ry(const UsdSkelBindingAPI &)";
                  char v99 = 0;
                  sub_216D0162C((uint64_t)v49, &v90);
                  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v90);
                  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v95, (pxrInternal__aapl__pxrReserved__ *)"%s -- skipping inbetween with invalid weight (%f)", v52, Text, v92, v82);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v91);
                  sub_21697C414(&v90);
                }
              }
              unsigned __int8 v49 = (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)((char *)v49 + 32);
            }
            long long v95 = &v93;
            sub_216FF9594((void ***)&v95);
            int v73 = this[4];
            char v72 = (uint64_t *)this[5];
            unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * (((char *)v72 - (char *)v73) >> 2);
            uint64_t v75 = (uint64_t)v73 + 12 * *v14;
            unint64_t v76 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v72 - v75) >> 2));
            unint64_t v77 = v74 - *v14;
            *(void *)(v86 + 40 * v6 + 32) = v77;
            if (v77) {
              uint64_t v78 = v76;
            }
            else {
              uint64_t v78 = 0;
            }
            sub_21700A410(v75, v72, (uint64_t)&v93, v78, 1);
          }
        }
        else
        {
          long long v95 = (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape **)"usdSkel/blendShapeQuery.cpp";
          long long v96 = (pxrInternal__aapl__pxrReserved__ *)"UsdSkelBlendShapeQuery";
          uint64_t v97 = 67;
          unint64_t v98 = (unint64_t)"pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::UsdSkelBlendShapeQuery(const"
                                  " UsdSkelBindingAPI &)";
          char v99 = 0;
          uint64_t v21 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 8 * v6));
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v95, (pxrInternal__aapl__pxrReserved__ *)"Target <%s> is not a valid BlendShape", v22, v21);
        }
        pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::~UsdSkelBlendShape((pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)&v100);
        ++v6;
        uint64_t v5 = v104;
      }
      while (v6 < (v105 - v104) >> 3);
    }
    sub_216D16CFC((uint64_t)&v95, (uint64_t *)v83 + 1, (_DWORD *)v83 + 4);
    *(_DWORD *)this = v95;
    long long v79 = v96;
    long long v96 = 0;
    long long v80 = (atomic_ullong *)this[1];
    this[1] = (void **)v79;
    if (v80) {
      sub_216D16E0C(v80);
    }
    sub_21697DE94(v85, (int *)&v97);
    sub_21697DEEC(v82, (int *)&v97 + 1);
    if (&v95 == (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape ***)this)
    {
      if ((v98 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v98 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if ((*v84 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v84 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *uint64_t v84 = v98;
      unint64_t v98 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v97 + 1);
    sub_21697C414(&v97);
    if (v96) {
      sub_216D16E0C((atomic_ullong *)v96);
    }
    long long v95 = (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape **)&v104;
    sub_216981168((void ***)&v95);
  }
  if ((v111 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v111 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v110);
  sub_21697C414(&v109);
  if (v108) {
    sub_216D16E0C(v108);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *)this;
}

void sub_2170079B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,void **a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::~UsdSkelBlendShape((pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)(v32 - 184));
  a31 = (void **)(v32 - 160);
  sub_216981168(&a31);
  sub_216D33F64(v32 - 136);
  a31 = a20;
  sub_216FF9594(&a31);
  a31 = a22;
  sub_216FF969C(&a31);
  int v34 = *a23;
  if (*a23)
  {
    *(void *)(v31 + 40) = v34;
    operator delete(v34);
  }
  sub_216D16AD8(v31);
  _Unwind_Resume(a1);
}

void sub_217007B14(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, unint64_t a2)
{
  uint64_t v3 = *((void *)a1 + 1);
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *(void *)a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_217009EE0(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *(void *)a1 + 40 * a2;
    while (v3 != v7)
      pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::~UsdSkelBlendShape((pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)(v3 - 40));
    *((void *)a1 + 1) = v7;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::GetBlendShape(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *this@<X0>, unint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v4 = *((void *)this + 7);
  if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 8) - v4) >> 3) <= a2)
  {
    int v5 = 1;
    unint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *(void *)a3 = &unk_26C76F788;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v4 + 40 * a2));
    *(void *)a3 = &unk_26C76F788;
  }
}

void sub_217007CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::GetInbetween@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((void *)this + 4);
  if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 5) - v4) >> 2) <= a2) {
    goto LABEL_11;
  }
  uint64_t v5 = v4 + 12 * a2;
  unsigned int v8 = *(_DWORD *)(v5 + 4);
  int v7 = (_DWORD *)(v5 + 4);
  unint64_t v6 = v8;
  if ((v8 & 0x80000000) != 0) {
    goto LABEL_11;
  }
  uint64_t v9 = *((void *)this + 10);
  if (v6 >= (*((void *)this + 11) - v9) >> 5)
  {
    v15[0] = "usdSkel/blendShapeQuery.cpp";
    v15[1] = "GetInbetween";
    v15[2] = 132;
    void v15[3] = "UsdSkelInbetweenShape pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::GetInbetween(size_t) const";
    char v16 = 0;
    if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v15, "static_cast<size_t>(shape.GetInbetweenIndex()) < _inbetweens.size()", 0))
    {
      LODWORD(v6) = *v7;
      uint64_t v9 = *((void *)this + 10);
      goto LABEL_4;
    }
LABEL_11:
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(void *)(a3 + 24) = 0;
    return result;
  }
LABEL_4:
  uint64_t v10 = v9 + 32 * (int)v6;
  *(_DWORD *)a3 = *(_DWORD *)v10;
  uint64_t v11 = *(void *)(v10 + 8);
  *(void *)(a3 + 8) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a3 + 16), (_DWORD *)(v10 + 16));
  uint64_t result = sub_21698105C((_DWORD *)(a3 + 20), (_DWORD *)(v10 + 20));
  uint64_t v13 = *(void *)(v10 + 24);
  *(void *)(a3 + 24) = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a3 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::GetBlendShapeIndex(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 5) - v2) >> 2) <= a2) {
    return 0;
  }
  else {
    return *(unsigned int *)(v2 + 12 * a2);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeBlendShapePointIndices(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *this@<X0>, void *a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__ *)sub_21700B32C(a2, 0xCCCCCCCCCCCCCCCDLL* ((uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3));
  uint64_t v6 = *((void *)this + 7);
  uint64_t v5 = *((void *)this + 8);
  v13[0] = this;
  v13[1] = a2;
  if (v5 != v6)
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 3);
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v4))
    {
      v15[0] = 0;
      uint64_t v16 = 65539;
      int v17 = 55;
      tbb::task_group_context::init((uint64_t)v15, v7, v8, v9);
      char v14 = (tbb::task_group_context *)v15;
      uint64_t v11 = tbb::internal::allocate_root_with_context_proxy::allocate(&v14, 0x38uLL);
      *(unsigned char *)(v11 - 11) = 1;
      *(void *)uint64_t v11 = &unk_26C76F870;
      *(void *)(v11 + 8) = v10;
      *(_OWORD *)(v11 + 16) = xmmword_217411D30;
      *(void *)(v11 + 32) = v13;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v11);
      *(_DWORD *)(v11 + 48) = 0;
      *(unsigned char *)(v11 + 52) = 5;
      *(void *)(v11 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v11 - 40) + 16))(*(void *)(v11 - 40), v11, v11 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v15);
    }
    else
    {
      sub_21700B80C(v13, 0, v10);
    }
  }
}

void sub_217007FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a11, v15);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a13);
  sub_216FF97AC((void ***)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapePointOffsets(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *this@<X0>, void *a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__ *)sub_216FFC464(a2, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 2));
  uint64_t v6 = *((void *)this + 4);
  uint64_t v5 = *((void *)this + 5);
  v13[0] = this;
  v13[1] = a2;
  if (v5 != v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 2);
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v4))
    {
      v15[0] = 0;
      uint64_t v16 = 65539;
      int v17 = 55;
      tbb::task_group_context::init((uint64_t)v15, v7, v8, v9);
      char v14 = (tbb::task_group_context *)v15;
      uint64_t v11 = tbb::internal::allocate_root_with_context_proxy::allocate(&v14, 0x38uLL);
      *(unsigned char *)(v11 - 11) = 1;
      *(void *)uint64_t v11 = &unk_26C76F8B8;
      *(void *)(v11 + 8) = v10;
      *(_OWORD *)(v11 + 16) = xmmword_217411D30;
      *(void *)(v11 + 32) = v13;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v11);
      *(_DWORD *)(v11 + 48) = 0;
      *(unsigned char *)(v11 + 52) = 5;
      *(void *)(v11 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v11 - 40) + 16))(*(void *)(v11 - 40), v11, v11 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v15);
    }
    else
    {
      sub_21700BEB8(v13, 0, v10);
    }
  }
}

void sub_217008198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a11, v15);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a13);
  sub_216F2C49C((void ***)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapeNormalOffsets(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *this@<X0>, void *a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__ *)sub_216FFC464(a2, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 2));
  uint64_t v6 = *((void *)this + 4);
  uint64_t v5 = *((void *)this + 5);
  v13[0] = this;
  v13[1] = a2;
  if (v5 != v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 2);
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v4))
    {
      v15[0] = 0;
      uint64_t v16 = 65539;
      int v17 = 55;
      tbb::task_group_context::init((uint64_t)v15, v7, v8, v9);
      char v14 = (tbb::task_group_context *)v15;
      uint64_t v11 = tbb::internal::allocate_root_with_context_proxy::allocate(&v14, 0x38uLL);
      *(unsigned char *)(v11 - 11) = 1;
      *(void *)uint64_t v11 = &unk_26C76F900;
      *(void *)(v11 + 8) = v10;
      *(_OWORD *)(v11 + 16) = xmmword_217411D30;
      *(void *)(v11 + 32) = v13;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v11);
      *(_DWORD *)(v11 + 48) = 0;
      *(unsigned char *)(v11 + 52) = 5;
      *(void *)(v11 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v11 - 40) + 16))(*(void *)(v11 - 40), v11, v11 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v15);
    }
    else
    {
      sub_21700C53C(v13, 0, v10);
    }
  }
}

void sub_21700835C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a11, v15);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a13);
  sub_216F2C49C((void ***)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapeWeights(void *a1, void *a2, char *a3, unint64_t *a4, unint64_t *a5)
{
  if (!a3)
  {
    unint64_t v39 = "usdSkel/blendShapeQuery.cpp";
    uint64_t v40 = "ComputeSubShapeWeights";
    uint64_t v41 = 275;
    uint64_t v42 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapeWeights(const TfSpan<const float"
          "> &, VtFloatArray *, VtUIntArray *, VtUIntArray *) const";
    char v43 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v39, 1, (pxrInternal__aapl__pxrReserved__ *)"'subShapeWeights' is null");
    return 0;
  }
  if (!a4)
  {
    unint64_t v39 = "usdSkel/blendShapeQuery.cpp";
    uint64_t v40 = "ComputeSubShapeWeights";
    uint64_t v41 = 279;
    uint64_t v42 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapeWeights(const TfSpan<const float"
          "> &, VtFloatArray *, VtUIntArray *, VtUIntArray *) const";
    char v43 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v39, 1, (pxrInternal__aapl__pxrReserved__ *)"'blendShapeIndices' is null");
    return 0;
  }
  if (!a5)
  {
    unint64_t v39 = "usdSkel/blendShapeQuery.cpp";
    uint64_t v40 = "ComputeSubShapeWeights";
    uint64_t v41 = 283;
    uint64_t v42 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapeWeights(const TfSpan<const float"
          "> &, VtFloatArray *, VtUIntArray *, VtUIntArray *) const";
    char v43 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v39, 1, (pxrInternal__aapl__pxrReserved__ *)"'subShapeIndices' is null");
    return 0;
  }
  uint64_t v9 = a2[1];
  unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[8] - a1[7]) >> 3);
  if (v9 != v10)
  {
    unint64_t v39 = "usdSkel/blendShapeQuery.cpp";
    uint64_t v40 = "ComputeSubShapeWeights";
    uint64_t v41 = 289;
    uint64_t v42 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapeWeights(const TfSpan<const float"
          "> &, VtFloatArray *, VtUIntArray *, VtUIntArray *) const";
    char v43 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v39, (pxrInternal__aapl__pxrReserved__ *)"Size of weights [%td] != number of blend shapes [%zu]", a3, v9, v10);
    return 0;
  }
  sub_21700874C((unint64_t *)a3, 2 * v9);
  sub_2170087E8(a4, 2 * a2[1]);
  sub_2170087E8(a5, 2 * a2[1]);
  if (a2[1])
  {
    for (unint64_t i = 0; i < a2[1]; ++i)
    {
      uint64_t v13 = a1[7];
      unint64_t v14 = *(void *)(v13 + 40 * i + 32);
      if (v14 > 2)
      {
        float v17 = *(float *)(*a2 + 4 * i);
        uint64_t v18 = *(void *)(v13 + 40 * i + 24);
        uint64_t v19 = a1[4];
        unint64_t v20 = v19 + 12 * v18;
        unint64_t v21 = v14;
        unint64_t v22 = v20;
        do
        {
          unint64_t v23 = v21 >> 1;
          unint64_t v24 = v22 + 12 * (v21 >> 1);
          float v25 = *(float *)(v24 + 8);
          unint64_t v26 = v24 + 12;
          v21 += ~(v21 >> 1);
          if (v25 > v17) {
            unint64_t v21 = v23;
          }
          else {
            unint64_t v22 = v26;
          }
        }
        while (v21);
        unint64_t v27 = v20 + 12 * v14;
        unint64_t v28 = v20 + 12;
        if (v22 > v20)
        {
          unint64_t v20 = v22 - 12;
          unint64_t v28 = v22;
        }
        BOOL v29 = v22 == v27;
        if (v22 == v27) {
          unint64_t v30 = v22 - 24;
        }
        else {
          unint64_t v30 = v20;
        }
        if (v29) {
          unint64_t v31 = v22 - 12;
        }
        else {
          unint64_t v31 = v28;
        }
        float v32 = *(float *)(v31 + 8);
        float v33 = *(float *)(v30 + 8);
        if ((float)(v32 - v33) <= 0.000001) {
          continue;
        }
        float v34 = (float)(v17 - v33) / (float)(v32 - v33);
        *(float *)&unint64_t v39 = v34;
        if (v33 != 0.0 && fabs(v34 + -1.0) >= 0.000000999999997)
        {
          LODWORD(v37) = -1431655765 * ((v30 - v19) >> 2);
          float v38 = 1.0 - v34;
          sub_21700CA54((uint64_t)a3, &v38);
          float v38 = *(float *)&i;
          sub_21700C8EC((uint64_t)a4, &v38);
          float v38 = v37;
          sub_21700C8EC((uint64_t)a5, &v38);
          float v32 = *(float *)(v31 + 8);
        }
        if (v32 == 0.0 || fabsf(*(float *)&v39) < 0.000001) {
          continue;
        }
        LODWORD(v35) = -1431655765 * ((v31 - a1[4]) >> 2);
        sub_21700C784((uint64_t)a3, &v39);
        float v38 = *(float *)&i;
        sub_21700C8EC((uint64_t)a4, &v38);
        float v38 = v35;
        uint64_t v16 = (char **)&v38;
      }
      else
      {
        uint64_t v15 = v13 + 40 * i;
        sub_21700C784((uint64_t)a3, (_DWORD *)(*a2 + 4 * i));
        LODWORD(v39) = i;
        sub_21700C8EC((uint64_t)a4, &v39);
        LODWORD(v39) = *(_DWORD *)(v15 + 24) + 1;
        uint64_t v16 = &v39;
      }
      sub_21700C8EC((uint64_t)a5, v16);
    }
  }
  return 1;
}

void sub_21700874C(unint64_t *a1, unint64_t a2)
{
  unint64_t v3 = a1[4];
  if (!v3)
  {
    if (!a2) {
      return;
    }
    uint64_t v7 = sub_2168F8670((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3]) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = (unint64_t *)(v3 - 8);
  }
  if (*v4 < a2)
  {
    unint64_t v5 = *a1;
    uint64_t v6 = sub_2168F8670((uint64_t)a1, a2);
    uint64_t v7 = v6;
    if (v5)
    {
      uint64_t v8 = 0;
      do
      {
        *(_DWORD *)((char *)v6 + v8) = *(_DWORD *)(v3 + v8);
        v8 += 4;
      }
      while (4 * v5 != v8);
    }
LABEL_12:
    sub_2168F83DC((uint64_t)a1);
    a1[4] = (unint64_t)v7;
  }
}

void sub_2170087E8(unint64_t *a1, unint64_t a2)
{
  unint64_t v3 = a1[4];
  if (!v3)
  {
    if (!a2) {
      return;
    }
    uint64_t v7 = sub_216906FF8((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3]) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = (unint64_t *)(v3 - 8);
  }
  if (*v4 < a2)
  {
    unint64_t v5 = *a1;
    uint64_t v6 = sub_216906FF8((uint64_t)a1, a2);
    uint64_t v7 = v6;
    if (v5)
    {
      uint64_t v8 = 0;
      do
      {
        *(_DWORD *)((char *)v6 + v8) = *(_DWORD *)(v3 + v8);
        v8 += 4;
      }
      while (4 * v5 != v8);
    }
LABEL_12:
    sub_2168F83DC((uint64_t)a1);
    a1[4] = (unint64_t)v7;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeFlattenedSubShapeWeights(void *a1, void *a2, unint64_t *a3)
{
  if (a3)
  {
    uint64_t v38 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    uint64_t v35 = 0;
    memset(v34, 0, sizeof(v34));
    uint64_t v33 = 0;
    memset(v32, 0, sizeof(v32));
    if (pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapeWeights(a1, a2, (char *)&v36, (unint64_t *)v34, (unint64_t *)v32)&& (*(void *)&v32[0] == (void)v36|| (unint64_t v27 = "usdSkel/blendShapeQuery.cpp", v28 = "ComputeFlattenedSubShapeWeights", v29 = 393, v30 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeFlattenedSubShapeWeights(const TfSpan<const float> &, VtFloatArray *) const", v31 = 0, v24 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"numIndices (%zu) != numWeights (%zu)", v5, v6, *(void *)&v32[0], (void)v36), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper(
              (uint64_t)&v27,
              "(sparseSubShapeIndices.size() == sparseSubShapeWeights.size())",
              v24) & 1) != 0)))
    {
      uint64_t v9 = a1 + 4;
      uint64_t v7 = a1[4];
      uint64_t v8 = v9[1];
      int v26 = 0;
      sub_2168F845C(a3);
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 2);
      unint64_t v27 = (char *)&v26;
      sub_2168F84A8(a3, v10, (_DWORD **)&v27);
      sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v11, v12);
      if ((void)v36)
      {
        unint64_t v15 = 0;
        unint64_t v16 = a3[4];
        do
        {
          sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v32, v13, v14);
          if (v10 > *(unsigned int *)(v33 + 4 * v15)
            || (unint64_t v27 = "usdSkel/blendShapeQuery.cpp",
                unint64_t v28 = "ComputeFlattenedSubShapeWeights",
                uint64_t v29 = 403,
                unint64_t v30 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeFlattenedSubShapeWeights(con"
                      "st TfSpan<const float> &, VtFloatArray *) const",
                char v31 = 0,
                sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v32, v13, v14),
                unint64_t v22 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"index (%d) out of range %zu - skipping.", v20, v21, *(unsigned int *)(v33 + 4 * v15), v10), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v27, "(sparseSubShapeIndices[i] < numSubShapes)", v22) & 1) != 0))
          {
            sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v36, v13, v14);
            int v17 = *(_DWORD *)(v38 + 4 * v15);
            sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v32, v18, v19);
            *(_DWORD *)(v16 + 4 * *(unsigned int *)(v33 + 4 * v15)) = v17;
          }
          ++v15;
        }
        while (v15 < (unint64_t)v36);
      }
      uint64_t v23 = 1;
    }
    else
    {
      uint64_t v23 = 0;
    }
    sub_2168F83DC((uint64_t)v32);
    sub_2168F83DC((uint64_t)v34);
    sub_2168F83DC((uint64_t)&v36);
  }
  else
  {
    *(void *)&long long v36 = "usdSkel/blendShapeQuery.cpp";
    *((void *)&v36 + 1) = "ComputeFlattenedSubShapeWeights";
    *(void *)&long long v37 = 378;
    *((void *)&v37 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeFlattenedSubShapeWeigh"
                            "ts(const TfSpan<const float> &, VtFloatArray *) const";
    LOBYTE(v38) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v36, 1, (pxrInternal__aapl__pxrReserved__ *)"'subShapeWeights' is null");
    return 0;
  }
  return v23;
}

void sub_217008AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeDeformedPoints(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, char *a5, uint64_t a6, char *a7, void *a8, uint64_t *a9, tbb::task_group_context *a10, tbb::task_group_context *a11)
{
  if (a5 != a3)
  {
    float v25 = "usdSkel/blendShapeQuery.cpp";
    int v26 = "ComputeDeformedPoints";
    uint64_t v27 = 425;
    unint64_t v28 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeDeformedPoints(const TfSpan<const float>"
          ", const TfSpan<const unsigned int>, const TfSpan<const unsigned int>, const std::vector<VtIntArray> &, const s"
          "td::vector<VtVec3fArray> &, TfSpan<GfVec3f>) const";
    char v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v25, (pxrInternal__aapl__pxrReserved__ *)"blendShapeIndices size [%td] != subShapeWeights size [%td]", a3, a5, a3);
    return 0;
  }
  if (a7 != a3)
  {
    float v25 = "usdSkel/blendShapeQuery.cpp";
    int v26 = "ComputeDeformedPoints";
    uint64_t v27 = 430;
    unint64_t v28 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeDeformedPoints(const TfSpan<const float>"
          ", const TfSpan<const unsigned int>, const TfSpan<const unsigned int>, const std::vector<VtIntArray> &, const s"
          "td::vector<VtVec3fArray> &, TfSpan<GfVec3f>) const";
    char v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v25, (pxrInternal__aapl__pxrReserved__ *)"subShapeIndices size [%td] != subShapeWeights size [%td]", a3, a7, a3);
    return 0;
  }
  if (a3)
  {
    BOOL v16 = 0;
    int v17 = 0;
    while (1)
    {
      unint64_t v18 = *(unsigned int *)(a4 + 4 * (void)v17);
      unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a8[1] - *a8) >> 3);
      if (v19 <= v18)
      {
        float v25 = "usdSkel/blendShapeQuery.cpp";
        int v26 = "ComputeDeformedPoints";
        uint64_t v27 = 457;
        unint64_t v28 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeDeformedPoints(const TfSpan<const fl"
              "oat>, const TfSpan<const unsigned int>, const TfSpan<const unsigned int>, const std::vector<VtIntArray> &,"
              " const std::vector<VtVec3fArray> &, TfSpan<GfVec3f>) const";
        char v29 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v25, (pxrInternal__aapl__pxrReserved__ *)"%td'th blendShapeIndices entry [%d] >= blendShapePointIndices size [%zu]", a3, v17, v18, v19);
        return v16;
      }
      unint64_t v20 = *(unsigned int *)(a6 + 4 * (void)v17);
      uint64_t v21 = *a9;
      unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((a9[1] - *a9) >> 3);
      if (v22 <= v20) {
        break;
      }
      unint64_t v23 = *(void *)(v21 + 40 * v20);
      if (!v23
        || pxrInternal__aapl__pxrReserved__::UsdSkelApplyBlendShape(*(pxrInternal__aapl__pxrReserved__ **)(v21 + 40 * v20 + 32), v23, *(char **)(*a8 + 40 * v18 + 32), *(void *)(*a8 + 40 * v18), a10, a11, *(float *)(a2 + 4 * (void)v17)))
      {
        BOOL v16 = ++v17 >= a3;
        if (a3 != v17) {
          continue;
        }
      }
      return v16;
    }
    float v25 = "usdSkel/blendShapeQuery.cpp";
    int v26 = "ComputeDeformedPoints";
    uint64_t v27 = 451;
    unint64_t v28 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeDeformedPoints(const TfSpan<const float>"
          ", const TfSpan<const unsigned int>, const TfSpan<const unsigned int>, const std::vector<VtIntArray> &, const s"
          "td::vector<VtVec3fArray> &, TfSpan<GfVec3f>) const";
    char v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v25, (pxrInternal__aapl__pxrReserved__ *)"%td'th subShapeIndices entry [%d] >= subShapePointOffsets size [%zu].", a3, v17, v20, v22);
  }
  else
  {
    return 1;
  }
  return v16;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeDeformedNormals(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, char *a5, uint64_t a6, char *a7, void *a8, uint64_t *a9, tbb::task_group_context *a10, tbb::task_group_context *a11)
{
  uint64_t v11 = a11;
  uint64_t v27 = *MEMORY[0x263EF8340];
  v22[0] = a10;
  v22[1] = a11;
  BOOL v12 = pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeDeformedPoints(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  BOOL v13 = v12;
  if (v12)
  {
    uint64_t v21 = v22;
    if (a11)
    {
      if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency((pxrInternal__aapl__pxrReserved__ *)v12))
      {
        v24[0] = 0;
        uint64_t v25 = 65539;
        int v26 = 55;
        tbb::task_group_context::init((uint64_t)v24, v14, v15, v16);
        unint64_t v23 = (tbb::task_group_context *)v24;
        uint64_t v17 = tbb::internal::allocate_root_with_context_proxy::allocate(&v23, 0x38uLL);
        *(unsigned char *)(v17 - 11) = 1;
        *(void *)uint64_t v17 = &unk_26C76F948;
        *(void *)(v17 + 8) = a11;
        *(_OWORD *)(v17 + 16) = xmmword_217411D30;
        *(void *)(v17 + 32) = &v21;
        unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v17);
        *(_DWORD *)(v17 + 48) = 0;
        *(unsigned char *)(v17 + 52) = 5;
        *(void *)(v17 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v17 - 40) + 16))(*(void *)(v17 - 40), v17, v17 - 8);
        tbb::task_group_context::~task_group_context((tbb::task_group_context *)v24);
      }
      else
      {
        uint64_t v19 = 0;
        do
        {
          sub_2168B0034((float32x2_t *)(v22[0] + v19), 1.0e-10);
          v19 += 12;
          uint64_t v11 = (tbb::task_group_context *)((char *)v11 - 1);
        }
        while (v11);
      }
    }
  }
  return v13;
}

void sub_217008EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a15, v19);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a17);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputePackedShapeTable(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t v112 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    uint64_t v104 = (void **)"usdSkel/blendShapeQuery.cpp";
    uint64_t v105 = "ComputePackedShapeTable";
    uint64_t v106 = 556;
    long long v107 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputePackedShapeTable(VtVec4fArray *, VtVec2iArray *) const";
    char v108 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v104, 1, (pxrInternal__aapl__pxrReserved__ *)"'offsets' is null");
    return 0;
  }
  if (!a3)
  {
    uint64_t v104 = (void **)"usdSkel/blendShapeQuery.cpp";
    uint64_t v105 = "ComputePackedShapeTable";
    uint64_t v106 = 560;
    long long v107 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputePackedShapeTable(VtVec4fArray *, VtVec2iArray *) const";
    char v108 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v104, 1, (pxrInternal__aapl__pxrReserved__ *)"'ranges' is null");
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeBlendShapePointIndices(a1, &v95);
  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapePointOffsets(a1, &v93);
  int v98 = 0;
  int v103 = (void ***)&v95;
  uint64_t v7 = v96 - v95;
  if (v96 != v95)
  {
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * (v7 >> 3);
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v6))
    {
      LODWORD(v104) = 0;
      uint64_t v110 = 65539;
      int v111 = 55;
      tbb::task_group_context::init((uint64_t)&v104, v8, v9, v10);
      int v91 = &v103;
      char v99 = &v98;
      uint64_t v100 = &v91;
      uint64_t v101 = &v97;
      int v102 = 0;
      __p[0] = &v104;
      uint64_t v7 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)__p, 0x40uLL);
      *(unsigned char *)(v7 - 11) = 1;
      *(void *)uint64_t v7 = &unk_26C76F7E0;
      *(void *)(v7 + 8) = &v99;
      *(void *)(v7 + 16) = v11;
      *(_OWORD *)(v7 + 24) = xmmword_217411D30;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v7);
      *(_DWORD *)(v7 + 48) = 0;
      *(unsigned char *)(v7 + 52) = 5;
      *(void *)(v7 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      *(unsigned char *)(v7 + 56) = 0;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v7 - 40) + 16))(*(void *)(v7 - 40), v7, v7 - 8);
      LODWORD(v7) = v102;
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v104);
    }
    else
    {
      uint64_t v14 = 0;
      LODWORD(v7) = 0;
      do
      {
        uint64_t v15 = (uint64_t *)(v95 + 40 * v14);
        uint64_t v16 = *v15;
        if (*v15)
        {
          uint64_t v17 = (int *)v15[4];
          uint64_t v18 = 4 * v16;
          do
          {
            int v20 = *v17++;
            int v19 = v20;
            if ((int)v7 <= v20) {
              LODWORD(v7) = v19;
            }
            v18 -= 4;
          }
          while (v18);
        }
        ++v14;
      }
      while (v14 != v11);
    }
  }
  for (unint64_t i = v93; i != v94; i += 10)
  {
    int v23 = *i;
    int v22 = v23;
    if ((int)v7 <= v23) {
      LODWORD(v7) = v22;
    }
  }
  if ((int)v7 > 0) {
    LODWORD(v7) = v7 + 1;
  }
  else {
    LODWORD(v7) = 0;
  }
  if (v7)
  {
    unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a1 + 8) - *((void *)a1 + 7)) >> 3);
    LODWORD(v104) = 0;
    sub_21700D064(&v99, v24, &v104);
    uint64_t v27 = *((void *)a1 + 4);
    uint64_t v28 = *((void *)a1 + 5) - v27;
    if (v28)
    {
      unint64_t v29 = v28 / 12;
      unint64_t v30 = v99;
      if (v29 <= 1) {
        uint64_t v31 = 1;
      }
      else {
        uint64_t v31 = v29;
      }
      float v32 = (_DWORD *)(v27 + 8);
      do
      {
        LODWORD(v26) = *v32;
        if (*(float *)v32 != 0.0)
        {
          unint64_t v33 = *(v32 - 2);
          if (v29 <= v33)
          {
            uint64_t v104 = (void **)"usdSkel/blendShapeQuery.cpp";
            uint64_t v105 = "ComputePackedShapeTable";
            uint64_t v106 = 585;
            long long v107 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputePackedShapeTable(VtVec4fArray *"
                   ", VtVec2iArray *) const";
            char v108 = 0;
            int v109 = 4;
            pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v104, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v25, v26, "subShape.GetBlendShapeIndex() < _subShapes.size()");
          }
          ++v30[v33];
        }
        v32 += 3;
        --v31;
      }
      while (v31);
    }
    uint64_t v7 = (int)v7;
    LODWORD(v104) = 0;
    sub_21700D064(&v91, (int)v7, &v104);
    uint64_t v35 = *((void *)a1 + 8) - *((void *)a1 + 7);
    if (v35)
    {
      uint64_t v36 = 0;
      unint64_t v37 = v35 / 40;
      uint64_t v38 = v99;
      uint64_t v39 = v95;
      uint64_t v40 = (v96 - v95) / 40;
      uint64_t v41 = v91;
      uint64_t v42 = v92;
      if (v37 <= 1) {
        unint64_t v37 = 1;
      }
      do
      {
        if (v36 == v40)
        {
          uint64_t v104 = (void **)"usdSkel/blendShapeQuery.cpp";
          uint64_t v105 = "ComputePackedShapeTable";
          uint64_t v106 = 594;
          long long v107 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputePackedShapeTable(VtVec4fArray *, "
                 "VtVec2iArray *) const";
          char v108 = 0;
          int v109 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v104, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v34, "i < indicesPerBlendShape.size()");
        }
        int v43 = v38[v36];
        uint64_t v44 = *(void *)(v39 + 40 * v36);
        if (v44)
        {
          uint64_t v45 = *(int **)(v39 + 40 * v36 + 32);
          uint64_t v46 = 4 * v44;
          do
          {
            uint64_t v47 = *v45++;
            float v34 = (char *)(v41[v47] + v43);
            v41[v47] = v34;
            v46 -= 4;
          }
          while (v46);
        }
        else
        {
          for (uint64_t j = v41; j != v42; ++j)
            *j += v43;
        }
        ++v36;
      }
      while (v36 != v37);
    }
    __p[0] = 0;
    uint64_t v104 = __p;
    sub_2169B99EC(a3, (int)v7, (uint64_t **)&v104);
    float v50 = (int *)v91;
    unsigned __int8 v49 = v92;
    sub_2169B9C54((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v51, v52);
    uint64_t v54 = (v49 - (unsigned char *)v50) >> 2;
    if (v54 != *a3)
    {
      uint64_t v104 = (void **)"usdSkel/blendShapeQuery.cpp";
      uint64_t v105 = "_ComputeRangesFromCounts";
      uint64_t v106 = 503;
      long long v107 = "unsigned int pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ComputeRangesFromCounts(const TfSpan"
             "<const unsigned int> &, TfSpan<GfVec2i>)";
      char v108 = 0;
      int v109 = 4;
      pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v104, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v53, "counts.size() == ranges.size()");
    }
    if ((unint64_t)(v49 - (unsigned char *)v50) >= 4)
    {
      unsigned int v56 = 0;
      unint64_t v57 = (unint64_t *)a3[4];
      do
      {
        int v58 = *v50++;
        uint64_t v55 = v58 + v56;
        *v57++ = v56 | (unint64_t)(v55 << 32);
        v56 += v58;
        --v54;
      }
      while (v54);
    }
    else
    {
      LODWORD(v55) = 0;
    }
    sub_2167813E0(__p, (int)v7);
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    if ((unint64_t)(int)v7 <= 1) {
      uint64_t v7 = 1;
    }
    do
    {
      sub_2169B9C54((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v59, v60);
      *((_DWORD *)__p[0] + v62++) = *(_DWORD *)(a3[4] + v61);
      v61 += 8;
    }
    while (v7 != v62);
    uint64_t v104 = 0;
    uint64_t v105 = 0;
    sub_2168F845C(a2);
    int v103 = &v104;
    sub_2168FFABC(a2, v55, (_OWORD **)&v103);
    sub_2168FFD20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v63, v64);
    uint64_t v66 = *((void *)a1 + 4);
    if (*((void *)a1 + 5) != v66)
    {
      unint64_t v67 = 0;
      unint64_t v68 = a2[4];
      do
      {
        int v69 = (float *)(v66 + 12 * v67);
        if (v69[2] != 0.0)
        {
          if (v67 >= 0xCCCCCCCCCCCCCCCDLL * (((char *)v94 - (char *)v93) >> 3))
          {
            uint64_t v104 = (void **)"usdSkel/blendShapeQuery.cpp";
            uint64_t v105 = "ComputePackedShapeTable";
            uint64_t v106 = 635;
            long long v107 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputePackedShapeTable(VtVec4fArray *"
                   ", VtVec2iArray *) const";
            char v108 = 0;
            int v109 = 4;
            pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v104, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v65, "i < offsetsPerSubShape.size()");
          }
          unint64_t v70 = *(unsigned int *)v69;
          if (0xCCCCCCCCCCCCCCCDLL * ((v96 - v95) >> 3) <= v70)
          {
            uint64_t v104 = (void **)"usdSkel/blendShapeQuery.cpp";
            uint64_t v105 = "ComputePackedShapeTable";
            uint64_t v106 = 636;
            long long v107 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputePackedShapeTable(VtVec4fArray *"
                   ", VtVec2iArray *) const";
            char v108 = 0;
            int v109 = 4;
            pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v104, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v65, "subShape.GetBlendShapeIndex() < indicesPerBlendShape.size()");
          }
          uint64_t v71 = &v93[10 * v67];
          if (*(void *)v71)
          {
            char v72 = (char **)(v95 + 40 * v70);
            float v73 = (float)v67;
            unint64_t v74 = *v72;
            if (*v72)
            {
              uint64_t v75 = 0;
              unint64_t v76 = 0;
              unint64_t v77 = (void *)(v95 + 40 * v70 + 32);
              uint64_t v78 = &v93[10 * v67 + 8];
              long long v79 = (unsigned int *)__p[0];
              do
              {
                uint64_t v80 = *(int *)(*v77 + 4 * v76);
                uint64_t v81 = *(void *)v78 + v75;
                int v82 = *(_DWORD *)(v81 + 8);
                unint64_t v83 = v68 + 16 * v79[v80];
                *(void *)unint64_t v83 = *(void *)v81;
                *(_DWORD *)(v83 + 8) = v82;
                *(float *)(v83 + 12) = v73;
                long long v79 = (unsigned int *)__p[0];
                ++*((_DWORD *)__p[0] + v80);
                ++v76;
                int v65 = *v72;
                v75 += 12;
              }
              while (v76 < (unint64_t)*v72);
            }
            else
            {
              uint64_t v84 = 0;
              uint64_t v85 = &v93[10 * v67 + 8];
              uint64_t v86 = (unsigned int *)__p[0];
              do
              {
                uint64_t v87 = *(void *)v85 + v84;
                int v88 = *(_DWORD *)(v87 + 8);
                unint64_t v89 = v68 + 16 * v86[(void)v74];
                *(void *)unint64_t v89 = *(void *)v87;
                *(_DWORD *)(v89 + 8) = v88;
                *(float *)(v89 + 12) = v73;
                uint64_t v86 = (unsigned int *)__p[0];
                ++*((_DWORD *)__p[0] + (void)v74++);
                v84 += 12;
              }
              while ((unint64_t)v74 < *(void *)v71);
            }
          }
        }
        ++v67;
        uint64_t v66 = *((void *)a1 + 4);
      }
      while (v67 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)a1 + 5) - v66) >> 2));
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v91)
    {
      float v92 = v91;
      operator delete(v91);
    }
    if (v99)
    {
      uint64_t v100 = v99;
      operator delete(v99);
    }
  }
  else
  {
    sub_2168F845C(a3);
    sub_2168F845C(a2);
  }
  uint64_t v104 = (void **)&v93;
  sub_216F2C49C(&v104);
  uint64_t v104 = (void **)&v95;
  sub_216FF97AC(&v104);
  return 1;
}

void sub_217009764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char **a13, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&__p, v28);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a28);
  a13 = &a16;
  sub_216F2C49C((void ***)&a13);
  a16 = &a19;
  sub_216FF97AC((void ***)&a16);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::GetDescription@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, void *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2))
  {
    sub_216D0162C((uint64_t)this, &v9);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v9);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"UsdSkelBlendShapeQuery <%s>", v6, v7, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    return sub_21697C414(&v9);
  }
  else
  {
    return sub_216779094(a3, "invalid UsdSkelBlendShapeQuery");
  }
}

void sub_2170098E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2170098FC(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  if (*((unsigned char *)this + 56) == 2)
  {
    uint64_t v4 = *((void *)this - 4);
    uint64_t v5 = *(void *)(v4 + 16);
    __dmb(0xBu);
    if (!v5)
    {
      uint64_t v6 = *((void *)this + 1);
      *(void *)(v4 + 24) = *(void *)v6;
      uint64_t v7 = v4 + 24;
      *(void *)(v7 + 8) = *(void *)(v6 + 8);
      *(void *)(v7 + 16) = *(void *)(v6 + 16);
      *(_DWORD *)(v7 + 24) = **(_DWORD **)v6;
      *((void *)this + 1) = v7;
      *(unsigned char *)(v7 - 15) = 1;
    }
  }
  uint64_t v8 = (long long *)((char *)this + 16);
  unint64_t v9 = *((void *)this + 4);
  unint64_t v10 = *((void *)this + 2) - *((void *)this + 3);
  if (v9 < v10)
  {
    unint64_t v11 = *((void *)this + 5);
    if (v11 > 1) {
      goto LABEL_15;
    }
    if (v11 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_15:
      while (1)
      {
        uint64_t v12 = tbb::internal::allocate_continuation_proxy::allocate(this, 0x38uLL);
        *((void *)this - 4) = v12;
        *(void *)(v12 - 24) = 2;
        uint64_t v13 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v12, 0x40uLL);
        char v14 = *((unsigned char *)this + 56);
        *(unsigned char *)(v12 - 11) = 1;
        *(void *)uint64_t v12 = &unk_26C751420;
        __dmb(0xBu);
        *(unsigned char *)(v12 + 8) = 0;
        *(void *)uint64_t v12 = &unk_26C76F828;
        *(unsigned char *)(v12 + 9) = 0;
        *(unsigned char *)(v12 + 10) = v14;
        *(void *)(v12 + 16) = 0;
        *(unsigned char *)(v13 - 11) = 1;
        *(void *)uint64_t v13 = &unk_26C76F7E0;
        *(void *)(v13 + 8) = *((void *)this + 1);
        *(void *)(v13 + 16) = *((void *)this + 2);
        uint64_t v15 = *((void *)this + 3) + ((*((void *)this + 2) - *((void *)this + 3)) >> 1);
        *((void *)this + 2) = v15;
        *(void *)(v13 + 24) = v15;
        *(void *)(v13 + 32) = *((void *)this + 4);
        uint64_t v16 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v16;
        *(void *)(v13 + 40) = v16;
        *(_DWORD *)(v13 + 48) = 2;
        *(unsigned char *)(v13 + 52) = *((unsigned char *)this + 52);
        *(unsigned char *)(v13 + 56) = 2;
        *((unsigned char *)this + 56) = 1;
        (***(void (****)(void))(v13 - 40))();
        unint64_t v9 = *((void *)this + 4);
        unint64_t v10 = *((void *)this + 2) - *((void *)this + 3);
        if (v9 >= v10) {
          break;
        }
        unint64_t v17 = *((void *)this + 5);
        if (v17 <= 1)
        {
          if (!v17 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v9 < v10 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)unint64_t v33 = 0x10000;
    long long v34 = *v8;
    uint64_t v35 = *((void *)this + 4);
    while (1)
    {
      sub_216B17510(v33, *((unsigned __int8 *)this + 52));
      char v18 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if (v18)
      {
        unsigned __int8 v20 = *((unsigned char *)this + 52) + 1;
        *((unsigned char *)this + 52) = v20;
        unsigned __int8 v21 = v33[2];
        if (v33[2] >= 2u)
        {
          unsigned int v22 = v33[1];
          unsigned __int8 v23 = v33[v33[1] + 3];
          uint64_t v24 = tbb::internal::allocate_continuation_proxy::allocate(this, 0x38uLL);
          *((void *)this - 4) = v24;
          *(void *)(v24 - 24) = 2;
          uint64_t v25 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v24, 0x40uLL);
          double v26 = (char *)&v34 + 24 * v22;
          char v27 = *((unsigned char *)this + 56);
          *(unsigned char *)(v24 - 11) = 1;
          *(void *)uint64_t v24 = &unk_26C751420;
          __dmb(0xBu);
          *(unsigned char *)(v24 + 8) = 0;
          *(void *)uint64_t v24 = &unk_26C76F828;
          *(unsigned char *)(v24 + 9) = 0;
          *(unsigned char *)(v24 + 10) = v27;
          *(void *)(v24 + 16) = 0;
          *(unsigned char *)(v25 - 11) = 1;
          *(void *)uint64_t v25 = &unk_26C76F7E0;
          *(void *)(v25 + 8) = *((void *)this + 1);
          long long v28 = *(_OWORD *)v26;
          *(void *)(v25 + 32) = *((void *)v26 + 2);
          *(_OWORD *)(v25 + 16) = v28;
          uint64_t v29 = *((void *)this + 5) >> 1;
          *((void *)this + 5) = v29;
          *(void *)(v25 + 40) = v29;
          *(_DWORD *)(v25 + 48) = 2;
          LOBYTE(v29) = *((unsigned char *)this + 52);
          *(unsigned char *)(v25 + 56) = 2;
          *(unsigned char *)(v25 + 52) = v29 - v23;
          *((unsigned char *)this + 56) = 1;
          (***(void (****)(void))(v25 - 40))();
          unsigned __int8 v21 = --v33[2];
          v33[1] = (v33[1] + 1) & 7;
          goto LABEL_30;
        }
        unsigned int v19 = v33[0];
        if (v33[v33[0] + 3] < v20
          && *((void *)&v34 + 3 * v33[0] + 2) < *((void *)&v34 + 3 * v33[0]) - *((void *)&v34 + 3 * v33[0] + 1))
        {
          goto LABEL_30;
        }
      }
      else
      {
        unsigned int v19 = v33[0];
      }
      sub_217009E7C((uint64_t)this, (unint64_t *)&v34 + 3 * v19);
      unsigned __int8 v21 = --v33[2];
      v33[0] = (v33[0] - 1) & 7;
LABEL_30:
      if (!v21 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        goto LABEL_34;
      }
    }
  }
  sub_217009E7C((uint64_t)this, (unint64_t *)this + 2);
LABEL_34:
  if (*((unsigned char *)this + 56) == 1)
  {
    uint64_t v30 = *((void *)this - 4);
    uint64_t v31 = *((void *)this + 1);
    __dmb(0xBu);
    *(void *)(v30 + 16) = v31;
  }
  return 0;
}

void *sub_217009E14(void *result)
{
  *uint64_t result = &unk_26C76F828;
  return result;
}

uint64_t sub_217009E38(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 9))
  {
    uint64_t v1 = *(void *)(a1 + 16);
    int v2 = *(_DWORD *)(v1 + 24);
    if (v2 <= *(_DWORD *)(a1 + 48)) {
      int v2 = *(_DWORD *)(a1 + 48);
    }
    *(_DWORD *)(v1 + 24) = v2;
  }
  if (*(unsigned char *)(a1 + 10) == 1)
  {
    uint64_t v3 = *(void *)(a1 - 32);
    uint64_t v4 = *(void *)(a1 + 16);
    __dmb(0xBu);
    *(void *)(v3 + 16) = v4;
  }
  return 0;
}

uint64_t sub_217009E7C(uint64_t result, unint64_t *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  unint64_t v3 = a2[1];
  int v4 = *(_DWORD *)(v2 + 24);
  if (v3 < *a2)
  {
    do
    {
      uint64_t v5 = (uint64_t *)(****(void ****)(v2 + 8) + 40 * v3);
      uint64_t v6 = *v5;
      if (*v5)
      {
        uint64_t v7 = (int *)v5[4];
        uint64_t v8 = 4 * v6;
        do
        {
          int v10 = *v7++;
          int v9 = v10;
          if (v4 <= v10) {
            int v4 = v9;
          }
          v8 -= 4;
        }
        while (v8);
      }
      ++v3;
    }
    while (v3 != *a2);
  }
  *(_DWORD *)(v2 + 24) = v4;
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_217009EE0(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, unint64_t a2)
{
  uint64_t v6 = *((void *)a1 + 2);
  uint64_t v4 = (uint64_t)a1 + 16;
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    return sub_21700A044(a1, a2);
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *(void *)a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666) {
      sub_21677CB10();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *(void *)a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v21 = v4;
    if (v11) {
      uint64_t v12 = (char *)sub_2168720A4(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    char v14 = &v12[40 * v8];
    v18[0] = v12;
    v18[1] = v14;
    unsigned int v19 = v14;
    unsigned __int8 v20 = &v12[40 * v11];
    uint64_t v15 = 5 * a2;
    uint64_t v16 = &v14[40 * a2];
    uint64_t v17 = 8 * v15;
    do
    {
      *((void *)v14 + 4) = 0;
      *(_OWORD *)char v14 = 0u;
      *((_OWORD *)v14 + 1) = 0u;
      sub_21700A12C((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14);
      v14 += 40;
      v17 -= 40;
    }
    while (v17);
    unsigned int v19 = v16;
    sub_21700A0B4((uint64_t *)a1, v18);
    return (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)sub_21700A2D0((uint64_t)v18);
  }
}

void sub_21700A024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21700A2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_21700A044(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((void *)result + 1);
  if (a2)
  {
    uint64_t v4 = v3 + 40 * a2;
    uint64_t v5 = 40 * a2;
    do
    {
      *(void *)(v3 + 32) = 0;
      *(_OWORD *)uint64_t v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      uint64_t result = sub_21700A12C((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
      v3 += 40;
      v5 -= 40;
    }
    while (v5);
    uint64_t v3 = v4;
  }
  *((void *)v2 + 1) = v3;
  return result;
}

void sub_21700A0AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_21700A0B4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21700A20C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_21700A12C(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1)
{
  int v3 = 1;
  uint64_t v4 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v6);
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v3);
  *(void *)a1 = &unk_26C76F788;
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
  *((void *)a1 + 3) = 0;
  *((void *)a1 + 4) = 0;
  return a1;
}

void sub_21700A1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21700A20C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      *(void *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a7 + v11 - 40), (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a3 + v11 - 40)) = &unk_26C76F788;
      *(_OWORD *)(a7 + v11 - 16) = *(_OWORD *)(a3 + v11 - 16);
      v11 -= 40;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_21700A2B0(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 40)
    pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::~UsdSkelBlendShape((pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21700A2D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::~UsdSkelBlendShape((pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)(i - 40));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_21700A320(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_21677CB10();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  uint64_t v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)sub_2168707F4((uint64_t)(a1 + 2), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  uint64_t v12 = &v8[32 * v3];
  char v14 = &v8[32 * v7];
  sub_216D3B3EC((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  uint64_t v13 = v12 + 32;
  sub_217006E64(a1, &v11);
  uint64_t v9 = a1[1];
  sub_217007020(&v11);
  return v9;
}

void sub_21700A3FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_217007020((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21700A410(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v11) >> 2);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          if (*((float *)a2 - 1) < *(float *)(v11 + 8))
          {
            int v37 = *(_DWORD *)(v11 + 8);
            uint64_t v35 = *(void *)v11;
            uint64_t v26 = *(uint64_t *)((char *)a2 - 12);
            *(_DWORD *)(v11 + 8) = *((_DWORD *)a2 - 1);
            *(void *)uint64_t v11 = v26;
            *(uint64_t *)((char *)a2 - 12) = v35;
            *((_DWORD *)a2 - 1) = v37;
          }
          break;
        case 3uLL:
          uint64_t result = sub_21700A8E8((uint64_t *)v11, (float *)(v11 + 12), (float *)a2 - 3);
          break;
        case 4uLL:
          uint64_t result = sub_21700ADCC(v11, (uint64_t *)(v11 + 12), (float *)(v11 + 24), (uint64_t *)((char *)a2 - 12));
          break;
        case 5uLL:
          uint64_t result = sub_21700AEA0(v11, v11 + 12, (uint64_t *)(v11 + 24), (uint64_t *)(v11 + 36), (uint64_t *)((char *)a2 - 12));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 287) {
      break;
    }
    if (v13 == 1)
    {
      if ((uint64_t *)v11 != a2)
      {
        return (uint64_t)sub_21700AFB0(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = v11 + 12 * (v15 >> 1);
    if ((unint64_t)v14 >= 0x601)
    {
      sub_21700A8E8((uint64_t *)v11, (float *)(v11 + 12 * (v15 >> 1)), (float *)a2 - 3);
      uint64_t v18 = 3 * v16;
      unsigned int v19 = (float *)(v11 + 12 * v16 - 12);
      sub_21700A8E8((uint64_t *)(v11 + 12), v19, (float *)a2 - 6);
      unsigned __int8 v20 = (uint64_t *)(v11 + 24);
      uint64_t v21 = (float *)(v11 + 12 + 4 * v18);
      sub_21700A8E8(v20, v21, (float *)a2 - 9);
      sub_21700A8E8((uint64_t *)v19, (float *)v17, v21);
      int v36 = *(_DWORD *)(v10 + 8);
      uint64_t v34 = *(void *)v10;
      uint64_t v22 = *(void *)v17;
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v17 + 8);
      *(void *)uint64_t v10 = v22;
      *(_DWORD *)(v17 + 8) = v36;
      *(void *)unint64_t v17 = v34;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_21700A8E8((uint64_t *)(v11 + 12 * (v15 >> 1)), (float *)v11, (float *)a2 - 3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(float *)(v10 - 4) >= *(float *)(v10 + 8))
    {
      uint64_t result = (uint64_t)sub_21700A9F4((uint64_t *)v10, (float *)a2);
      uint64_t v11 = result;
      goto LABEL_19;
    }
LABEL_14:
    unsigned __int8 v23 = sub_21700AAF8((float *)v10, (unint64_t)a2);
    if ((v24 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v25 = sub_21700ABF8(v10, (uint64_t)v23);
    uint64_t v11 = (uint64_t)(v23 + 3);
    uint64_t result = sub_21700ABF8((uint64_t)(v23 + 3), (uint64_t)a2);
    if (result)
    {
      a4 = -v13;
      a2 = (uint64_t *)v23;
      if (v25) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v25)
    {
LABEL_17:
      uint64_t result = sub_21700A410(v10, v23, a3, -v13, a5 & 1);
      uint64_t v11 = (uint64_t)(v23 + 3);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return sub_21700A85C(v11, a2);
  }
  else if ((uint64_t *)v11 != a2)
  {
    while ((uint64_t *)(v10 + 12) != a2)
    {
      float v28 = *(float *)(v10 + 20);
      float v29 = *(float *)(v10 + 8);
      char v27 = (uint64_t *)(v10 + 12);
      v10 += 12;
      if (v28 < v29)
      {
        uint64_t v30 = *v27;
        uint64_t v31 = v10;
        do
        {
          uint64_t v32 = v31;
          uint64_t v33 = *(void *)(v31 - 12);
          v31 -= 12;
          *(void *)uint64_t v32 = v33;
          *(_DWORD *)(v32 + 8) = *(_DWORD *)(v32 - 4);
        }
        while (v28 < *(float *)(v32 - 16));
        *(void *)uint64_t v31 = v30;
        *(float *)(v31 + 8) = v28;
      }
    }
  }
  return result;
}

uint64_t sub_21700A85C(uint64_t result, void *a2)
{
  if ((void *)result != a2)
  {
    uint64_t v2 = (void *)(result + 12);
    if ((void *)(result + 12) != a2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = (void *)result;
      do
      {
        float v5 = *((float *)v4 + 5);
        float v6 = *((float *)v4 + 2);
        unint64_t v4 = v2;
        if (v5 < v6)
        {
          uint64_t v7 = *v2;
          uint64_t v8 = v3;
          while (1)
          {
            uint64_t v9 = result + v8;
            *(void *)(v9 + 12) = *(void *)(result + v8);
            *(_DWORD *)(v9 + 20) = *(_DWORD *)(result + v8 + 8);
            if (!v8) {
              break;
            }
            v8 -= 12;
            if (v5 >= *(float *)(v9 - 4))
            {
              uint64_t v10 = result + v8 + 12;
              goto LABEL_10;
            }
          }
          uint64_t v10 = result;
LABEL_10:
          *(void *)uint64_t v10 = v7;
          *(float *)(v10 + 8) = v5;
        }
        uint64_t v2 = (void *)((char *)v4 + 12);
        v3 += 12;
      }
      while ((void *)((char *)v4 + 12) != a2);
    }
  }
  return result;
}

uint64_t sub_21700A8E8(uint64_t *a1, float *a2, float *a3)
{
  float v3 = a2[2];
  float v4 = a3[2];
  if (v3 < *((float *)a1 + 2))
  {
    if (v4 < v3)
    {
      int v5 = *((_DWORD *)a1 + 2);
      uint64_t v6 = *a1;
      int v7 = *((_DWORD *)a3 + 2);
      *a1 = *(void *)a3;
      *((_DWORD *)a1 + 2) = v7;
      *(void *)a3 = v6;
      *((_DWORD *)a3 + 2) = v5;
      return 1;
    }
    int v14 = *((_DWORD *)a1 + 2);
    uint64_t v15 = *a1;
    int v16 = *((_DWORD *)a2 + 2);
    *a1 = *(void *)a2;
    *((_DWORD *)a1 + 2) = v16;
    *(void *)a2 = v15;
    *((_DWORD *)a2 + 2) = v14;
    if (a3[2] >= a2[2]) {
      return 1;
    }
    int v17 = *((_DWORD *)a2 + 2);
    uint64_t v18 = *(void *)a2;
    int v19 = *((_DWORD *)a3 + 2);
    *(void *)a2 = *(void *)a3;
    *((_DWORD *)a2 + 2) = v19;
    *(void *)a3 = v18;
    *((_DWORD *)a3 + 2) = v17;
    return 2;
  }
  if (v4 < v3)
  {
    int v8 = *((_DWORD *)a2 + 2);
    uint64_t v9 = *(void *)a2;
    int v10 = *((_DWORD *)a3 + 2);
    *(void *)a2 = *(void *)a3;
    *((_DWORD *)a2 + 2) = v10;
    *(void *)a3 = v9;
    *((_DWORD *)a3 + 2) = v8;
    if (a2[2] >= *((float *)a1 + 2)) {
      return 1;
    }
    int v11 = *((_DWORD *)a1 + 2);
    uint64_t v12 = *a1;
    int v13 = *((_DWORD *)a2 + 2);
    *a1 = *(void *)a2;
    *((_DWORD *)a1 + 2) = v13;
    *(void *)a2 = v12;
    *((_DWORD *)a2 + 2) = v11;
    return 2;
  }
  return 0;
}

uint64_t *sub_21700A9F4(uint64_t *a1, float *a2)
{
  float v2 = *((float *)a1 + 2);
  if (v2 >= *(a2 - 1))
  {
    uint64_t v6 = (uint64_t *)((char *)a1 + 12);
    do
    {
      float v4 = v6;
      if (v6 >= (uint64_t *)a2) {
        break;
      }
      float v7 = *((float *)v6 + 2);
      uint64_t v6 = (uint64_t *)((char *)v6 + 12);
    }
    while (v2 >= v7);
  }
  else
  {
    float v3 = a1;
    do
    {
      float v4 = (uint64_t *)((char *)v3 + 12);
      float v5 = *((float *)v3 + 5);
      float v3 = (uint64_t *)((char *)v3 + 12);
    }
    while (v2 >= v5);
  }
  if (v4 >= (uint64_t *)a2)
  {
    int v8 = a2;
  }
  else
  {
    do
    {
      int v8 = a2 - 3;
      float v9 = *(a2 - 1);
      a2 -= 3;
    }
    while (v2 < v9);
  }
  uint64_t v10 = *a1;
  while (v4 < (uint64_t *)v8)
  {
    int v17 = *((_DWORD *)v4 + 2);
    uint64_t v16 = *v4;
    uint64_t v11 = *(void *)v8;
    *((float *)v4 + 2) = v8[2];
    *float v4 = v11;
    *((_DWORD *)v8 + 2) = v17;
    *(void *)int v8 = v16;
    do
    {
      float v12 = *((float *)v4 + 5);
      float v4 = (uint64_t *)((char *)v4 + 12);
    }
    while (v2 >= v12);
    do
    {
      float v13 = *(v8 - 1);
      v8 -= 3;
    }
    while (v2 < v13);
  }
  if ((uint64_t *)((char *)v4 - 12) != a1)
  {
    uint64_t v14 = *(uint64_t *)((char *)v4 - 12);
    *((_DWORD *)a1 + 2) = *((_DWORD *)v4 - 1);
    *a1 = v14;
  }
  *(uint64_t *)((char *)v4 - 12) = v10;
  *((float *)v4 - 1) = v2;
  return v4;
}

float *sub_21700AAF8(float *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)a1;
  float v4 = a1[2];
  do
  {
    float v5 = a1[v2 + 5];
    v2 += 3;
  }
  while (v5 < v4);
  unint64_t v6 = (unint64_t)&a1[v2];
  if (v2 == 3)
  {
    while (v6 < a2)
    {
      unint64_t v7 = a2 - 12;
      float v9 = *(float *)(a2 - 4);
      a2 -= 12;
      if (v9 < v4) {
        goto LABEL_9;
      }
    }
    unint64_t v7 = a2;
  }
  else
  {
    do
    {
      unint64_t v7 = a2 - 12;
      float v8 = *(float *)(a2 - 4);
      a2 -= 12;
    }
    while (v8 >= v4);
  }
LABEL_9:
  uint64_t v10 = &a1[v2];
  if (v6 < v7)
  {
    unint64_t v11 = v7;
    do
    {
      uint64_t v12 = *(void *)v10;
      int v13 = *((_DWORD *)v10 + 2);
      int v14 = *(_DWORD *)(v11 + 8);
      *(void *)uint64_t v10 = *(void *)v11;
      *((_DWORD *)v10 + 2) = v14;
      *(_DWORD *)(v11 + 8) = v13;
      *(void *)unint64_t v11 = v12;
      do
      {
        float v15 = v10[5];
        v10 += 3;
      }
      while (v15 < v4);
      do
      {
        float v16 = *(float *)(v11 - 4);
        v11 -= 12;
      }
      while (v16 >= v4);
    }
    while ((unint64_t)v10 < v11);
  }
  if (v10 - 3 != a1)
  {
    uint64_t v17 = *(void *)(v10 - 3);
    a1[2] = *(v10 - 1);
    *(void *)a1 = v17;
  }
  *(void *)(v10 - 3) = v3;
  *(v10 - 1) = v4;
  return v10 - 3;
}

BOOL sub_21700ABF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a2 - 4) < *(float *)(a1 + 8))
      {
        int v6 = *(_DWORD *)(a1 + 8);
        uint64_t v7 = *(void *)a1;
        int v8 = *(_DWORD *)(a2 - 4);
        *(void *)a1 = *(void *)(a2 - 12);
        *(_DWORD *)(a1 + 8) = v8;
        *(void *)(a2 - 12) = v7;
        *(_DWORD *)(a2 - 4) = v6;
      }
      return result;
    case 3uLL:
      sub_21700A8E8((uint64_t *)a1, (float *)(a1 + 12), (float *)(a2 - 12));
      return 1;
    case 4uLL:
      sub_21700ADCC(a1, (uint64_t *)(a1 + 12), (float *)(a1 + 24), (uint64_t *)(a2 - 12));
      return 1;
    case 5uLL:
      sub_21700AEA0(a1, a1 + 12, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 36), (uint64_t *)(a2 - 12));
      return 1;
    default:
      uint64_t v9 = a1 + 24;
      sub_21700A8E8((uint64_t *)a1, (float *)(a1 + 12), (float *)(a1 + 24));
      uint64_t v10 = a1 + 36;
      if (a1 + 36 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    float v13 = *(float *)(v10 + 8);
    if (v13 < *(float *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(void *)(v16 + 36) = *(void *)(a1 + v15 + 24);
        *(_DWORD *)(v16 + 44) = *(_DWORD *)(a1 + v15 + 32);
        if (v15 == -24) {
          break;
        }
        v15 -= 12;
        if (v13 >= *(float *)(v16 + 20))
        {
          uint64_t v17 = a1 + v15 + 36;
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      *(void *)uint64_t v17 = v14;
      *(float *)(v17 + 8) = v13;
      if (++v12 == 8) {
        return v10 + 12 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 12;
    v10 += 12;
    if (v10 == a2) {
      return 1;
    }
  }
}

uint64_t sub_21700ADCC(uint64_t a1, uint64_t *a2, float *a3, uint64_t *a4)
{
  uint64_t result = sub_21700A8E8((uint64_t *)a1, (float *)a2, a3);
  if (*((float *)a4 + 2) < a3[2])
  {
    int v9 = *((_DWORD *)a3 + 2);
    uint64_t v10 = *(void *)a3;
    int v11 = *((_DWORD *)a4 + 2);
    *(void *)a3 = *a4;
    *((_DWORD *)a3 + 2) = v11;
    *a4 = v10;
    *((_DWORD *)a4 + 2) = v9;
    if (a3[2] < *((float *)a2 + 2))
    {
      int v12 = *((_DWORD *)a2 + 2);
      uint64_t v13 = *a2;
      int v14 = *((_DWORD *)a3 + 2);
      *a2 = *(void *)a3;
      *((_DWORD *)a2 + 2) = v14;
      *(void *)a3 = v13;
      *((_DWORD *)a3 + 2) = v12;
      if (*((float *)a2 + 2) < *(float *)(a1 + 8))
      {
        int v15 = *(_DWORD *)(a1 + 8);
        uint64_t v16 = *(void *)a1;
        int v17 = *((_DWORD *)a2 + 2);
        *(void *)a1 = *a2;
        *(_DWORD *)(a1 + 8) = v17;
        *a2 = v16;
        *((_DWORD *)a2 + 2) = v15;
      }
    }
  }
  return result;
}

uint64_t sub_21700AEA0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = sub_21700ADCC(a1, (uint64_t *)a2, (float *)a3, a4);
  if (*((float *)a5 + 2) < *((float *)a4 + 2))
  {
    int v11 = *((_DWORD *)a4 + 2);
    uint64_t v12 = *a4;
    int v13 = *((_DWORD *)a5 + 2);
    *a4 = *a5;
    *((_DWORD *)a4 + 2) = v13;
    *a5 = v12;
    *((_DWORD *)a5 + 2) = v11;
    if (*((float *)a4 + 2) < *((float *)a3 + 2))
    {
      int v14 = *((_DWORD *)a3 + 2);
      uint64_t v15 = *a3;
      int v16 = *((_DWORD *)a4 + 2);
      *a3 = *a4;
      *((_DWORD *)a3 + 2) = v16;
      *a4 = v15;
      *((_DWORD *)a4 + 2) = v14;
      if (*((float *)a3 + 2) < *(float *)(a2 + 8))
      {
        int v17 = *(_DWORD *)(a2 + 8);
        uint64_t v18 = *(void *)a2;
        int v19 = *((_DWORD *)a3 + 2);
        *(void *)a2 = *a3;
        *(_DWORD *)(a2 + 8) = v19;
        *a3 = v18;
        *((_DWORD *)a3 + 2) = v17;
        if (*(float *)(a2 + 8) < *(float *)(a1 + 8))
        {
          int v20 = *(_DWORD *)(a1 + 8);
          uint64_t v21 = *(void *)a1;
          int v22 = *(_DWORD *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(_DWORD *)(a1 + 8) = v22;
          *(void *)a2 = v21;
          *(_DWORD *)(a2 + 8) = v20;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_21700AFB0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if ((uint64_t *)a1 != a2)
  {
    int v6 = a2;
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 12;
    if ((uint64_t)a2 - a1 >= 13)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (float *)(a1 + 12 * v10);
      do
      {
        sub_21700B1CC(a1, a4, v9, v12);
        v12 -= 3;
        --v11;
      }
      while (v11);
    }
    int v13 = v6;
    if (v6 != a3)
    {
      int v14 = v6;
      do
      {
        if (*((float *)v14 + 2) < *(float *)(a1 + 8))
        {
          int v15 = *((_DWORD *)v14 + 2);
          uint64_t v16 = *v14;
          int v17 = *(_DWORD *)(a1 + 8);
          uint64_t *v14 = *(void *)a1;
          *((_DWORD *)v14 + 2) = v17;
          *(void *)a1 = v16;
          *(_DWORD *)(a1 + 8) = v15;
          sub_21700B1CC(a1, a4, v9, (float *)a1);
        }
        int v14 = (uint64_t *)((char *)v14 + 12);
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 13)
    {
      int64_t v18 = v8 / 0xCuLL;
      do
      {
        uint64_t v19 = 0;
        uint64_t v29 = *(void *)a1;
        int v30 = *(_DWORD *)(a1 + 8);
        uint64_t v20 = a1;
        do
        {
          uint64_t v21 = v20;
          uint64_t v22 = v19 + 1;
          v20 += 12 * (v19 + 1);
          uint64_t v23 = 2 * v19;
          uint64_t v19 = (2 * v19) | 1;
          int64_t v24 = v23 + 2;
          if (v24 < v18 && *(float *)(v21 + 12 * v22 + 8) < *(float *)(v20 + 20))
          {
            v20 += 12;
            uint64_t v19 = v24;
          }
          uint64_t v25 = *(void *)v20;
          *(_DWORD *)(v21 + 8) = *(_DWORD *)(v20 + 8);
          *(void *)uint64_t v21 = v25;
        }
        while (v19 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
        int v6 = (uint64_t *)((char *)v6 - 12);
        if ((uint64_t *)v20 == v6)
        {
          *(_DWORD *)(v20 + 8) = v30;
          *(void *)uint64_t v20 = v29;
        }
        else
        {
          uint64_t v26 = *v6;
          *(_DWORD *)(v20 + 8) = *((_DWORD *)v6 + 2);
          *(void *)uint64_t v20 = v26;
          *int v6 = v29;
          *((_DWORD *)v6 + 2) = v30;
          sub_21700B2C0(a1, v20 + 12, a4, 0xAAAAAAAAAAAAAAABLL * ((v20 + 12 - a1) >> 2));
        }
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_21700B1CC(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 2)))
    {
      uint64_t v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 2)) | 1;
      int v6 = (uint64_t *)(result + 12 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2 < a3
        && *(float *)(result + 12 * v5 + 8) < *((float *)v6 + 5))
      {
        int v6 = (uint64_t *)((char *)v6 + 12);
        uint64_t v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2;
      }
      float v7 = a4[2];
      if (*((float *)v6 + 2) >= v7)
      {
        uint64_t v8 = *(void *)a4;
        do
        {
          uint64_t v9 = a4;
          a4 = (float *)v6;
          uint64_t v10 = *v6;
          _OWORD v9[2] = a4[2];
          *(void *)uint64_t v9 = v10;
          if (v4 < v5) {
            break;
          }
          uint64_t v11 = (2 * v5) | 1;
          int v6 = (uint64_t *)(result + 12 * v11);
          uint64_t v12 = 2 * v5 + 2;
          if (v12 < a3 && *(float *)(result + 12 * v11 + 8) < *((float *)v6 + 5))
          {
            int v6 = (uint64_t *)((char *)v6 + 12);
            uint64_t v11 = v12;
          }
          uint64_t v5 = v11;
        }
        while (*((float *)v6 + 2) >= v7);
        *(void *)a4 = v8;
        a4[2] = v7;
      }
    }
  }
  return result;
}

uint64_t sub_21700B2C0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    float v5 = *(float *)(a2 - 4);
    if (*(float *)(result + 12 * v4 + 8) < v5)
    {
      uint64_t v8 = *(void *)(a2 - 12);
      int v6 = (uint64_t *)(a2 - 12);
      uint64_t v7 = v8;
      do
      {
        uint64_t v9 = v6;
        int v6 = (uint64_t *)(result + 12 * v4);
        uint64_t v10 = *v6;
        *((_DWORD *)v9 + 2) = *((_DWORD *)v6 + 2);
        *uint64_t v9 = v10;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
      }
      while (*(float *)(result + 12 * v4 + 8) < v5);
      *int v6 = v7;
      *((float *)v6 + 2) = v5;
    }
  }
  return result;
}

void *sub_21700B32C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2168724E8(a1, a2);
    unint64_t v4 = (char *)a1[1];
    size_t v5 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_21700B3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_21700B3D8(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  size_t v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)uint64_t v10 = &unk_26C751420;
        __dmb(0xBu);
        v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C76F870;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)char v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      uint64_t v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)uint64_t v21 = &unk_26C751420;
      __dmb(0xBu);
      unsigned char v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      uint64_t v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C76F870;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_21700B80C(*((void **)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21700B80C(*((void **)this + 4), v6, v4);
  return 0;
}

void *sub_21700B80C(void *result, unint64_t a2, unint64_t a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a2 < a3)
  {
    unint64_t v4 = a2;
    size_t v5 = result;
    uint64_t v6 = *result;
    do
    {
      unint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)(*(void *)(v6 + 56) + 40 * v4);
      uint64_t v8 = *((void *)v7 + 1);
      if (v8)
      {
        if ((*(unsigned char *)(v8 + 57) & 8) == 0)
        {
          uint64_t result = (void *)(*(uint64_t (**)(unint64_t))(*(void *)v7 + 32))(*(void *)(v6 + 56) + 40 * v4);
          if (result)
          {
            uint64_t v29 = 0;
            pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetPointIndicesAttr(v7, (uint64_t)&v22);
            v9.n128_u64[0] = 0x7FF8000000000000;
            int v10 = pxrInternal__aapl__pxrReserved__::UsdAttribute::Get((uint64_t)&v22, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v28, v9);
            if ((v26 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
            sub_21697C414(&v24);
            if (v23) {
              sub_216D16E0C(v23);
            }
            if (v10)
            {
              if (sub_216907880((pxrInternal__aapl__pxrReserved__::VtValue *)&v28))
              {
                if ((v29 & 4) != 0) {
                  uint64_t v11 = (long long *)(*(uint64_t (**)(uint64_t *))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(&v28);
                }
                else {
                  uint64_t v11 = (long long *)v28;
                }
                sub_2169DCE38(*(void *)v5[1] + 40 * v4, v11);
              }
              else if (sub_2169062C0((pxrInternal__aapl__pxrReserved__::VtValue *)&v28))
              {
                uint64_t v12 = (unint64_t *)((v29 & 4) != 0
                                         ? (*(uint64_t (**)(uint64_t *))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(&v28)
                                         : v28);
                uint64_t v13 = (unint64_t *)(*(void *)v5[1] + 40 * v4);
                unint64_t v14 = *v12;
                int v27 = 0;
                uint64_t v22 = &v27;
                sub_216907A0C(v13, v14, &v22);
                uint64_t v15 = *(void *)v5[1];
                sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v15 + 40 * v4), v16, v17);
                uint64_t v18 = *(void *)(v15 + 40 * v4);
                if (v18)
                {
                  unsigned int v19 = *(_DWORD **)(v15 + 40 * v4 + 32);
                  unsigned __int8 v20 = (int *)v12[4];
                  do
                  {
                    int v21 = *v20++;
                    *v19++ = v21;
                    --v18;
                  }
                  while (v18);
                }
              }
            }
            uint64_t result = (void *)sub_2168EE084((uint64_t)&v28);
          }
        }
      }
      ++v4;
    }
    while (v4 != a3);
  }
  return result;
}

void sub_21700BA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21700BA84(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  size_t v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        int v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)int v10 = &unk_26C751420;
        __dmb(0xBu);
        v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C76F8B8;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)int v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      int v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)int v21 = &unk_26C751420;
      __dmb(0xBu);
      unsigned char v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      uint64_t v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C76F8B8;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_21700BEB8(*((void **)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21700BEB8(*((void **)this + 4), v6, v4);
  return 0;
}

void *sub_21700BEB8(void *result, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3 - a2;
  if (a3 > a2)
  {
    uint64_t v4 = 12 * a2;
    uint64_t v5 = 40 * a2;
    unint64_t v6 = (void *)*result;
    do
    {
      unint64_t v7 = (float *)(v6[4] + v4);
      unint64_t v8 = *((unsigned int *)v7 + 1);
      if ((v8 & 0x80000000) != 0)
      {
        if (v7[2] != 0.0)
        {
          uint64_t v9 = v6[7];
          if (0xCCCCCCCCCCCCCCCDLL * ((v6[8] - v9) >> 3) > *(unsigned int *)v7) {
            goto LABEL_10;
          }
          uint64_t v12 = "usdSkel/blendShapeQuery.cpp";
          uint64_t v13 = "operator()";
          uint64_t v14 = 215;
          char v15 = "auto pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapePointOffsets()::(anonymous"
                " class)::operator()(size_t, size_t) const";
          char v16 = 0;
          uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "shape.GetBlendShapeIndex() < _blendShapes.size()", 0);
          if (result)
          {
            uint64_t v9 = v6[7];
LABEL_10:
            int v10 = (pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)(v9 + 40 * *(unsigned int *)v7);
            uint64_t v11 = *((void *)v10 + 1);
            if (v11)
            {
              if ((*(unsigned char *)(v11 + 57) & 8) == 0)
              {
                uint64_t result = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *))(*(void *)v10 + 32))(v10);
                if (result)
                {
                  pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetOffsetsAttr(v10, (uint64_t)&v12);
                  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
                }
              }
            }
          }
        }
      }
      else if (v8 < (uint64_t)(v6[11] - v6[10]) >> 5 {
             || (uint64_t v12 = "usdSkel/blendShapeQuery.cpp",
      }
                 uint64_t v13 = "operator()",
                 uint64_t v14 = 208,
                 char v15 = "auto pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapePointOffsets()::(an"
                       "onymous class)::operator()(size_t, size_t) const",
                 char v16 = 0,
                 uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "static_cast<size_t>(shape.GetInbetweenIndex()) < _inbetweens.size()", 0), result))
      {
        pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::GetOffsets();
      }
      v4 += 12;
      v5 += 40;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_21700C0EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D2EDA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21700C108(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  uint64_t v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        int v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)int v10 = &unk_26C751420;
        __dmb(0xBu);
        v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C76F900;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)int v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      int v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)int v21 = &unk_26C751420;
      __dmb(0xBu);
      unsigned char v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      uint64_t v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C76F900;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_21700C53C(*((void **)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21700C53C(*((void **)this + 4), v6, v4);
  return 0;
}

void *sub_21700C53C(void *result, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3 - a2;
  if (a3 > a2)
  {
    uint64_t v4 = 12 * a2;
    uint64_t v5 = 40 * a2;
    unint64_t v6 = (void *)*result;
    do
    {
      unint64_t v7 = (float *)(v6[4] + v4);
      unint64_t v8 = *((unsigned int *)v7 + 1);
      if ((v8 & 0x80000000) != 0)
      {
        if (v7[2] != 0.0)
        {
          uint64_t v10 = v6[7];
          if (0xCCCCCCCCCCCCCCCDLL * ((v6[8] - v10) >> 3) > *(unsigned int *)v7) {
            goto LABEL_10;
          }
          uint64_t v13 = "usdSkel/blendShapeQuery.cpp";
          unint64_t v14 = "operator()";
          uint64_t v15 = 250;
          unsigned int v16 = "auto pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapeNormalOffsets()::(anonymou"
                "s class)::operator()(size_t, size_t) const";
          char v17 = 0;
          uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v13, "shape.GetBlendShapeIndex() < _blendShapes.size()", 0);
          if (result)
          {
            uint64_t v10 = v6[7];
LABEL_10:
            uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)(v10 + 40 * *(unsigned int *)v7);
            uint64_t v12 = *((void *)v11 + 1);
            if (v12 && (*(unsigned char *)(v12 + 57) & 8) == 0)
            {
              uint64_t result = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *))(*(void *)v11 + 32))(v11);
              if (result)
              {
                pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetNormalOffsetsAttr(v11, (uint64_t)&v13);
                pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
              }
            }
          }
        }
      }
      else
      {
        uint64_t v9 = v6[10];
        if (v8 >= (v6[11] - v9) >> 5)
        {
          uint64_t v13 = "usdSkel/blendShapeQuery.cpp";
          unint64_t v14 = "operator()";
          uint64_t v15 = 243;
          unsigned int v16 = "auto pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::ComputeSubShapeNormalOffsets()::(anonymou"
                "s class)::operator()(size_t, size_t) const";
          char v17 = 0;
          uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v13, "static_cast<size_t>(shape.GetInbetweenIndex()) < _inbetweens.size()", 0);
          if (!result) {
            goto LABEL_7;
          }
          uint64_t v9 = v6[10];
        }
        uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::GetNormalOffsets((pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)(v9 + 32 * *((int *)v7 + 1)));
      }
LABEL_7:
      v4 += 12;
      v5 += 40;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_21700C770(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D2EDA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21700C784(uint64_t a1, _DWORD *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        unint64_t v7 = (uint64_t *)a1;
      }
      else {
        unint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    uint64_t v9 = *(int **)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    uint64_t v12 = sub_2168F8670(a1, v11);
    uint64_t v13 = v12;
    if (v4)
    {
      uint64_t v14 = 4 * v4;
      uint64_t v15 = v12;
      do
      {
        int v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_2168F83DC(a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  void v18[2] = 433;
  v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<float>::emplace_back(Args &&...) [T = float, Args = <const float &>]";
  char v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v17 = 4;
    }
    else {
      int v17 = 3;
    }
  }
  else
  {
    int v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

void sub_21700C8EC(uint64_t a1, _DWORD *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        unint64_t v7 = (uint64_t *)a1;
      }
      else {
        unint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    uint64_t v9 = *(int **)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    uint64_t v12 = sub_216906FF8(a1, v11);
    uint64_t v13 = v12;
    if (v4)
    {
      uint64_t v14 = 4 * v4;
      uint64_t v15 = v12;
      do
      {
        int v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_2168F83DC(a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  void v18[2] = 433;
  v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::emplace_back(Args &&...) [T = unsigned int, Arg"
           "s = <unsigned int>]";
  char v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v17 = 4;
    }
    else {
      int v17 = 3;
    }
  }
  else
  {
    int v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

void sub_21700CA54(uint64_t a1, _DWORD *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        unint64_t v7 = (uint64_t *)a1;
      }
      else {
        unint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    uint64_t v9 = *(int **)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    uint64_t v12 = sub_2168F8670(a1, v11);
    uint64_t v13 = v12;
    if (v4)
    {
      uint64_t v14 = 4 * v4;
      uint64_t v15 = v12;
      do
      {
        int v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_2168F83DC(a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  void v18[2] = 433;
  v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<float>::emplace_back(Args &&...) [T = float, Args = <float>]";
  char v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v17 = 4;
    }
    else {
      int v17 = 3;
    }
  }
  else
  {
    int v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

uint64_t sub_21700CBC4(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  uint64_t v4 = (long long *)((char *)this + 8);
  unint64_t v5 = *((void *)this + 3);
  unint64_t v6 = *((void *)this + 1) - *((void *)this + 2);
  if (v5 < v6)
  {
    unint64_t v7 = *((void *)this + 5);
    if (v7 > 1) {
      goto LABEL_12;
    }
    if (v7 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v8 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(void *)uint64_t v8 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v8[8] = 0;
        *((void *)this - 4) = v8;
        *((void *)v8 - 3) = 2;
        uint64_t v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(unsigned char *)(v9 - 11) = 1;
        *(void *)uint64_t v9 = &unk_26C76F948;
        *(void *)(v9 + 8) = *((void *)this + 1);
        uint64_t v10 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v10;
        *(void *)(v9 + 16) = v10;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v11 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v11;
        *(void *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(unsigned char *)(v9 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v9 - 40))();
        unint64_t v5 = *((void *)this + 3);
        unint64_t v6 = *((void *)this + 1) - *((void *)this + 2);
        if (v5 >= v6) {
          break;
        }
        unint64_t v12 = *((void *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)uint64_t v25 = 0x10000;
    long long v26 = *v4;
    uint64_t v27 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v25, *((unsigned __int8 *)this + 52));
      char v13 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0) {
        break;
      }
      unsigned __int8 v16 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v16;
      unsigned __int8 v15 = v25[2];
      if (v25[2] < 2u)
      {
        unsigned int v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((void *)&v26 + 3 * v25[0] + 2) < *((void *)&v26 + 3 * v25[0]) - *((void *)&v26 + 3 * v25[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v17 = v25[1];
      unsigned __int8 v18 = v25[v25[1] + 3];
      char v19 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(void *)char v19 = &unk_26C751420;
      __dmb(0xBu);
      unsigned char v19[8] = 0;
      *((void *)this - 4) = v19;
      *((void *)v19 - 3) = 2;
      uint64_t v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      int v21 = (char *)&v26 + 24 * v17;
      *(unsigned char *)(v20 - 11) = 1;
      *(void *)uint64_t v20 = &unk_26C76F948;
      long long v22 = *(_OWORD *)v21;
      *(void *)(v20 + 24) = *((void *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(void *)(v20 + 32) = *((void *)this + 4);
      uint64_t v23 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v23;
      *(void *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(unsigned char *)(v20 + 52) = *((unsigned char *)this + 52) - v18;
      (***(void (****)(void))(v20 - 40))();
      unsigned __int8 v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v14 = v25[0];
LABEL_22:
    sub_21700CFF8((uint64_t)this, (void *)&v26 + 3 * v14);
    unsigned __int8 v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21700CFF8((uint64_t)this, (void *)this + 1);
  return 0;
}

void sub_21700CFF8(uint64_t a1, void *a2)
{
  unint64_t v2 = a2[1];
  unint64_t v3 = *a2 - v2;
  if (*a2 > v2)
  {
    uint64_t v4 = *(void ***)(a1 + 32);
    uint64_t v5 = 12 * v2;
    do
    {
      sub_2168B0034((float32x2_t *)(**v4 + v5), 1.0e-10);
      v5 += 12;
      --v3;
    }
    while (v3);
  }
}

void *sub_21700D064(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216781458(a1, a2);
    unint64_t v6 = (_DWORD *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_21700D0CC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::UsdSkelCache::UsdSkelCache(pxrInternal__aapl__pxrReserved__::UsdSkelCache *this)
{
  unint64_t v2 = (char *)operator new(0x928uLL);
  unint64_t v3 = v2 + 528;
  for (uint64_t i = 536; i != 584; i += 24)
    *(void *)&v2[i] = 0;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 488) = 0u;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  __dmb(0xBu);
  *(void *)unint64_t v2 = 0;
  __dmb(0xBu);
  *((void *)v2 + 65) = 0;
  *unint64_t v3 = 0u;
  *((_OWORD *)v2 + 34) = 0u;
  *((_OWORD *)v2 + 35) = 0u;
  *((void *)v2 + 1) = v3;
  __dmb(0xBu);
  uint64_t v5 = v2 + 1112;
  *(void *)unint64_t v2 = 1;
  for (uint64_t j = 1120; j != 1168; j += 24)
    *(void *)&v2[j] = 0;
  *((_OWORD *)v2 + 68) = 0u;
  *((_OWORD *)v2 + 67) = 0u;
  *((_OWORD *)v2 + 66) = 0u;
  *((_OWORD *)v2 + 65) = 0u;
  *((_OWORD *)v2 + 63) = 0u;
  *((_OWORD *)v2 + 64) = 0u;
  *((_OWORD *)v2 + 61) = 0u;
  *((_OWORD *)v2 + 62) = 0u;
  *((_OWORD *)v2 + 59) = 0u;
  *((_OWORD *)v2 + 60) = 0u;
  *((_OWORD *)v2 + 57) = 0u;
  *((_OWORD *)v2 + 58) = 0u;
  *((_OWORD *)v2 + 55) = 0u;
  *((_OWORD *)v2 + 56) = 0u;
  *((_OWORD *)v2 + 53) = 0u;
  *((_OWORD *)v2 + 54) = 0u;
  *((_OWORD *)v2 + 51) = 0u;
  *((_OWORD *)v2 + 52) = 0u;
  *((_OWORD *)v2 + 49) = 0u;
  *((_OWORD *)v2 + 50) = 0u;
  *((_OWORD *)v2 + 47) = 0u;
  *((_OWORD *)v2 + 48) = 0u;
  *((_OWORD *)v2 + 45) = 0u;
  *((_OWORD *)v2 + 46) = 0u;
  *((_OWORD *)v2 + 43) = 0u;
  *((_OWORD *)v2 + 44) = 0u;
  *((_OWORD *)v2 + 41) = 0u;
  *((_OWORD *)v2 + 42) = 0u;
  *((_OWORD *)v2 + 39) = 0u;
  *((_OWORD *)v2 + 40) = 0u;
  *((_OWORD *)v2 + 37) = 0u;
  *((_OWORD *)v2 + 38) = 0u;
  __dmb(0xBu);
  *((void *)v2 + 73) = 0;
  __dmb(0xBu);
  *((void *)v2 + 138) = 0;
  _OWORD *v5 = 0u;
  *(_OWORD *)(v2 + 1128) = 0u;
  *(_OWORD *)(v2 + 1144) = 0u;
  *((void *)v2 + 74) = v5;
  __dmb(0xBu);
  unint64_t v7 = v2 + 1696;
  *((void *)v2 + 73) = 1;
  for (uint64_t k = 1704; k != 1752; k += 24)
    *(void *)&v2[k] = 0;
  *(_OWORD *)(v2 + 1416) = 0u;
  *(_OWORD *)(v2 + 1400) = 0u;
  *(_OWORD *)(v2 + 1384) = 0u;
  *(_OWORD *)(v2 + 1368) = 0u;
  *(_OWORD *)(v2 + 1352) = 0u;
  *(_OWORD *)(v2 + 1336) = 0u;
  *(_OWORD *)(v2 + 1320) = 0u;
  *(_OWORD *)(v2 + 1304) = 0u;
  *(_OWORD *)(v2 + 1288) = 0u;
  *(_OWORD *)(v2 + 1272) = 0u;
  *(_OWORD *)(v2 + 1256) = 0u;
  *(_OWORD *)(v2 + 1240) = 0u;
  *(_OWORD *)(v2 + 1224) = 0u;
  *(_OWORD *)(v2 + 1208) = 0u;
  *(_OWORD *)(v2 + 1192) = 0u;
  *(_OWORD *)(v2 + 1176) = 0u;
  *(_OWORD *)(v2 + 1656) = 0u;
  *(_OWORD *)(v2 + 1672) = 0u;
  *(_OWORD *)(v2 + 1624) = 0u;
  *(_OWORD *)(v2 + 1640) = 0u;
  *(_OWORD *)(v2 + 1592) = 0u;
  *(_OWORD *)(v2 + 1608) = 0u;
  *(_OWORD *)(v2 + 1560) = 0u;
  *(_OWORD *)(v2 + 1576) = 0u;
  *(_OWORD *)(v2 + 1528) = 0u;
  *(_OWORD *)(v2 + 1544) = 0u;
  *(_OWORD *)(v2 + 1496) = 0u;
  *(_OWORD *)(v2 + 1512) = 0u;
  *(_OWORD *)(v2 + 1464) = 0u;
  *(_OWORD *)(v2 + 1480) = 0u;
  *(_OWORD *)(v2 + 1432) = 0u;
  *(_OWORD *)(v2 + 1448) = 0u;
  __dmb(0xBu);
  *((void *)v2 + 146) = 0;
  __dmb(0xBu);
  *((void *)v2 + 211) = 0;
  *unint64_t v7 = 0u;
  *((_OWORD *)v2 + 107) = 0u;
  *((_OWORD *)v2 + 108) = 0u;
  *((void *)v2 + 147) = v7;
  __dmb(0xBu);
  uint64_t v9 = v2 + 2280;
  *((void *)v2 + 146) = 1;
  for (uint64_t m = 2288; m != 2336; m += 24)
    *(void *)&v2[m] = 0;
  *((_OWORD *)v2 + 141) = 0u;
  *((_OWORD *)v2 + 140) = 0u;
  *((_OWORD *)v2 + 139) = 0u;
  *((_OWORD *)v2 + 138) = 0u;
  *((_OWORD *)v2 + 137) = 0u;
  *((_OWORD *)v2 + 136) = 0u;
  *((_OWORD *)v2 + 135) = 0u;
  *((_OWORD *)v2 + 134) = 0u;
  *((_OWORD *)v2 + 133) = 0u;
  *((_OWORD *)v2 + 132) = 0u;
  *((_OWORD *)v2 + 131) = 0u;
  *((_OWORD *)v2 + 130) = 0u;
  *((_OWORD *)v2 + 129) = 0u;
  *((_OWORD *)v2 + 128) = 0u;
  *((_OWORD *)v2 + 127) = 0u;
  *((_OWORD *)v2 + 126) = 0u;
  *((_OWORD *)v2 + 125) = 0u;
  *((_OWORD *)v2 + 124) = 0u;
  *((_OWORD *)v2 + 123) = 0u;
  *((_OWORD *)v2 + 122) = 0u;
  *((_OWORD *)v2 + 121) = 0u;
  *((_OWORD *)v2 + 120) = 0u;
  *((_OWORD *)v2 + 119) = 0u;
  *((_OWORD *)v2 + 118) = 0u;
  *((_OWORD *)v2 + 117) = 0u;
  *((_OWORD *)v2 + 116) = 0u;
  *((_OWORD *)v2 + 115) = 0u;
  *((_OWORD *)v2 + 114) = 0u;
  *((_OWORD *)v2 + 113) = 0u;
  *((_OWORD *)v2 + 112) = 0u;
  *((_OWORD *)v2 + 111) = 0u;
  *((_OWORD *)v2 + 110) = 0u;
  __dmb(0xBu);
  *((void *)v2 + 219) = 0;
  __dmb(0xBu);
  *((void *)v2 + 284) = 0;
  *uint64_t v9 = 0u;
  *(_OWORD *)(v2 + 2296) = 0u;
  *(_OWORD *)(v2 + 2312) = 0u;
  *((void *)v2 + 220) = v9;
  __dmb(0xBu);
  *((void *)v2 + 219) = 1;
  __dmb(0xBu);
  *((void *)v2 + 292) = 0;

  return sub_21700F1F4(this, (uint64_t)v2);
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::UsdSkelCache::Clear(pxrInternal__aapl__pxrReserved__::UsdSkelCache *this)
{
  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::WriteScope::WriteScope((uint64_t)&v2, *(void *)this);
  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::WriteScope::Clear(&v2);
  return sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)&v3);
}

void sub_21700D418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)va);
  _Unwind_Resume(a1);
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetAnimQuery@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkelCache *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::ReadScope((uint64_t)&v11, *(void *)this);
  sub_216D16CFC((uint64_t)v6, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::FindOrCreateAnimQuery(&v11, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v6, a3);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  return sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)&v12);
}

void sub_21700D4D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_216D16AD8((uint64_t)va);
  sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)va1);
  _Unwind_Resume(a1);
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetAnimQuery@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkelCache *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::ReadScope((uint64_t)&v6, *(void *)this);
  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::FindOrCreateAnimQuery(&v6, a2, a3);
  return sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)&v7);
}

void sub_21700D554(_Unwind_Exception *a1)
{
  sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)(v1 + 8));
  _Unwind_Resume(a1);
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkelQuery@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkelCache *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::ReadScope((uint64_t)v11, *(void *)this);
  sub_216D16CFC((uint64_t)v6, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::FindOrCreateSkelQuery((pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope *)v11, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v6, a3);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  return sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)&v12);
}

void sub_21700D608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_216D16AD8((uint64_t)va);
  sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelCache::Populate(uint64_t *a1, uint64_t a2, long long *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::ReadScope((uint64_t)v9, *a1);
  long long v7 = *a3;
  uint64_t v8 = *((void *)a3 + 2);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::Populate((pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope *)v9, a2, &v7);
  sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)&v10);
  return v5;
}

void sub_21700D6A4(_Unwind_Exception *a1)
{
  sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)(v1 + 8));
  _Unwind_Resume(a1);
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkinningQuery@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkelCache *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::ReadScope((uint64_t)v6, *(void *)this);
  pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope::GetSkinningQuery((pxrInternal__aapl__pxrReserved__::UsdSkel_CacheImpl::ReadScope *)v6, a2, a3);
  return sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)&v7);
}

void sub_21700D714(_Unwind_Exception *a1)
{
  sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBindings(pxrInternal__aapl__pxrReserved__::UsdSkelCache *a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = (uint64_t *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4
    && (*(unsigned char *)(v4 + 57) & 8) == 0
    && ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2) & 1) != 0)
  {
    if (a3)
    {
      if (sub_216FDC16C(0))
      {
        sub_216D16CFC((uint64_t)&v65, v5, (_DWORD *)(a2 + 16));
        sub_216D0162C((uint64_t)&v65, (int *)v87);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v87);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelCache] Compute skel bindings for <%s>\n", v11, v12, Text);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v87 + 1);
        sub_21697C414(v87);
        if ((v68 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v67 + 1);
        sub_21697C414(&v67);
        if (v66) {
          sub_216D16E0C((atomic_ullong *)v66);
        }
      }
      uint64_t v13 = *a3;
      unsigned int v14 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)a3[1];
      if (v14 != (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)*a3)
      {
        do
        {
          unsigned int v14 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)((char *)v14 - 64);
          sub_2170018E8((uint64_t)(a3 + 2), v14);
        }
        while (v14 != (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v13);
      }
      a3[1] = v13;
      uint64_t v95 = 0;
      unint64_t v96 = 0;
      uint64_t v94 = &v95;
      sub_21700F3F4(&v91, 1uLL);
      sub_216D16CFC((uint64_t)&v65, v5, (_DWORD *)(a2 + 16));
      sub_216D3B730((uint64_t)v87, (uint64_t)&v65, a4);
      char v90 = 1;
      if ((v68 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v67 + 1);
      sub_21697C414(&v67);
      if (v66) {
        sub_216D16E0C((atomic_ullong *)v66);
      }
      sub_216D3ADBC(v87, (uint64_t)v82);
      while (1)
      {
        int v65 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)v87[1];
        uint64_t v66 = (pxrInternal__aapl__pxrReserved__ *)v87;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v67);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v67 + 1);
        LODWORD(v68) = 0;
        WORD2(v68) = 0;
        if ((pxrInternal__aapl__pxrReserved__ *)v82[1] == v66
          && (pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)v82[0] == v65)
        {
          BOOL v15 = 1;
          if (v83 == v67 && !v84 && !v85) {
            BOOL v15 = v86 != 0;
          }
        }
        else
        {
          BOOL v15 = 1;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v67 + 1);
        sub_21697C414(&v67);
        if (!v15) {
          break;
        }
        sub_216D3B00C((uint64_t)v82, (uint64_t)&v65);
        StaticTfuint64_t Type = pxrInternal__aapl__pxrReserved__::UsdGeomImageable::_GetStaticTfType(v16);
        SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v18);
        char IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v65, SchemaInfo, v20);
        if ((v68 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v67 + 1);
        sub_21697C414(&v67);
        if (v66) {
          sub_216D16E0C((atomic_ullong *)v66);
        }
        if (IsA)
        {
          if (v86)
          {
            long long v22 = v92;
            if (v91 == v92)
            {
              int v65 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)"usdSkel/cache.cpp";
              uint64_t v66 = (pxrInternal__aapl__pxrReserved__ *)"ComputeSkelBindings";
              uint64_t v67 = 159;
              unint64_t v68 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBindings(const Usd"
                                      "SkelRoot &, std::vector<UsdSkelBinding> *, Usd_PrimFlagsPredicate) const";
              char v69 = 0;
              if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v65, "!skelStack.empty()", 0))
              {
                sub_216D3AE58((uint64_t)v82);
                goto LABEL_115;
              }
              long long v22 = v92;
            }
            long long v24 = (void (**)(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *))*((void *)v22 - 3);
            uint64_t v23 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v22 - 24);
            (*v24)(v23);
            float v92 = v23;
          }
          else
          {
            sub_216D3AE90((uint64_t)v82, (uint64_t)&v65);
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v81, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v65);
            v81[3] = 0;
            v81[0] = &unk_26C76F730;
            if ((v68 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v67 + 1);
            sub_21697C414(&v67);
            if (v66) {
              sub_216D16E0C((atomic_ullong *)v66);
            }
            LODWORD(v65) = 1;
            uint64_t v66 = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v67);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v67 + 1);
            unint64_t v68 = 0;
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v77, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v65);
            unint64_t v77 = (unsigned int (**)(void **))&unk_26C76FA70;
            if ((v68 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v67 + 1);
            sub_21697C414(&v67);
            if (v66) {
              sub_216D16E0C((atomic_ullong *)v66);
            }
            if (pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v81, (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v77))
            {
              if (sub_216FDC16C(0))
              {
                sub_216D3B00C((uint64_t)v82, (uint64_t)&v65);
                sub_216D0162C((uint64_t)&v65, &v57);
                uint64_t v25 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v57);
                sub_216D16CFC((uint64_t)&v70, &v78, &v79);
                sub_216D0162C((uint64_t)&v70, &v75);
                long long v26 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v75);
                pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelCache]  Found skel binding at <%s> which targets skel <%s>.\n", v27, v28, v25, v26);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v76);
                sub_21697C414(&v75);
                if ((v74 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v73);
                sub_21697C414(&v72);
                if (v71) {
                  sub_216D16E0C(v71);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v58);
                sub_21697C414(&v57);
                if ((v68 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v67 + 1);
                sub_21697C414(&v67);
                if (v66) {
                  sub_216D16E0C((atomic_ullong *)v66);
                }
              }
            }
            else
            {
              uint64_t v29 = v92;
              uint64_t v30 = *((void *)v92 - 2);
              if (v30) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 48), 1uLL, memory_order_relaxed);
              }
              uint64_t v31 = (atomic_ullong *)v78;
              uint64_t v78 = v30;
              if (v31) {
                sub_216D16E0C(v31);
              }
              sub_2169C487C(&v79, (_DWORD *)v29 - 2);
              sub_2169C48D4(&v80, (_DWORD *)v29 - 1);
            }
            if (v78 && (*(unsigned char *)(v78 + 57) & 8) == 0 && v77[4]((void **)&v77))
            {
              sub_216D16CFC((uint64_t)&v65, &v78, &v79);
              uint64_t v33 = v66;
              if (!v66 || (uint64_t v34 = *((void *)v66 + 7), (v34 & 0x800) != 0))
              {
                pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v66, v32);
                uint64_t v34 = *((void *)v33 + 7);
              }
              if ((v68 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v67 + 1);
              sub_21697C414(&v67);
              if (v66) {
                sub_216D16E0C((atomic_ullong *)v66);
              }
              if (v34)
              {
                sub_216D3AE90((uint64_t)v82, (uint64_t)&v70);
                pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkinningQuery(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v70, (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)&v65);
                if ((v74 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v73);
                sub_21697C414(&v72);
                if (v71) {
                  sub_216D16E0C(v71);
                }
                if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v65, v35))
                {
                  if (sub_216FDC16C(0))
                  {
                    sub_216D3B00C((uint64_t)v82, (uint64_t)&v70);
                    sub_216D0162C((uint64_t)&v70, &v75);
                    int v36 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v75);
                    sub_216D16CFC((uint64_t)&v57, &v78, &v79);
                    sub_216D0162C((uint64_t)&v57, &v63);
                    int v37 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v63);
                    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelCache]  Found skinnable prim <%s>, bound to skel <%s>.\n", v38, v39, v36, v37);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v64);
                    sub_21697C414(&v63);
                    if ((v62 & 7) != 0) {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v61);
                    sub_21697C414(&v60);
                    if (v59) {
                      sub_216D16E0C(v59);
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v76);
                    sub_21697C414(&v75);
                    if ((v74 & 7) != 0) {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v73);
                    sub_21697C414(&v72);
                    if (v71) {
                      sub_216D16E0C(v71);
                    }
                  }
                  uint64_t v40 = v95;
                  uint64_t v41 = &v95;
                  uint64_t v42 = &v95;
                  if (!v95) {
                    goto LABEL_90;
                  }
                  uint64_t v41 = &v95;
                  while (1)
                  {
                    while (1)
                    {
                      uint64_t v42 = (uint64_t **)v40;
                      uint64_t v43 = (uint64_t)(v40 + 4);
                      if (!sub_21700F5AC((uint64_t)&v77, (uint64_t)(v40 + 4))) {
                        break;
                      }
                      uint64_t v40 = *v42;
                      uint64_t v41 = v42;
                      if (!*v42) {
                        goto LABEL_90;
                      }
                    }
                    if (!sub_21700F5AC(v43, (uint64_t)&v77)) {
                      break;
                    }
                    uint64_t v41 = v42 + 1;
                    uint64_t v40 = v42[1];
                    if (!v40) {
                      goto LABEL_90;
                    }
                  }
                  uint64_t v44 = *v41;
                  if (!*v41)
                  {
LABEL_90:
                    uint64_t v45 = operator new(0x60uLL);
                    unint64_t v70 = v45;
                    uint64_t v71 = (atomic_ullong *)&v95;
                    LOBYTE(v72) = 0;
                    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v45 + 4), (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v77);
                    v45[4] = &unk_26C76FA70;
                    v45[11] = 0;
                    *(_OWORD *)(v45 + 9) = 0u;
                    *(_OWORD *)(v45 + 7) = 0u;
                    LOBYTE(v72) = 1;
                    uint64_t v46 = v70;
                    *unint64_t v70 = 0;
                    v46[1] = 0;
                    v46[2] = (uint64_t)v42;
                    *uint64_t v41 = v46;
                    if (*v94)
                    {
                      uint64_t v94 = (uint64_t **)*v94;
                      uint64_t v46 = *v41;
                    }
                    sub_21677B3B0(v95, v46);
                    ++v96;
                    uint64_t v44 = v70;
                    unint64_t v70 = 0;
                    sub_21700F6A4((uint64_t *)&v70, 0);
                  }
                  sub_21700F6FC((uint64_t)(v44 + 7), (uint64_t)&v65);
                  pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v82);
                }
                sub_216FDCF10((uint64_t)&v65);
              }
            }
            uint64_t v47 = v92;
            if ((unint64_t)v92 >= v93)
            {
              uint64_t v48 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)sub_21700F9B0((uint64_t *)&v91, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v77);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(v92, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v77);
              *(void *)uint64_t v47 = &unk_26C76FA70;
              uint64_t v48 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v47 + 24);
            }
            float v92 = v48;
            pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v77);
            pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::~UsdSkelBindingAPI((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v81);
          }
        }
        else if (!v86)
        {
          if (sub_216FDC16C(0))
          {
            sub_216D3B00C((uint64_t)v82, (uint64_t)&v65);
            sub_216D0162C((uint64_t)&v65, (int *)v81);
            unsigned __int8 v49 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v81);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelCache]  Pruning traversal at <%s> (prim is not UsdGeomImageable)\n", v50, v51, v49);
            sub_21697B754(v81);
            sub_216D3B0D8((uint64_t)&v65);
          }
          pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v82);
        }
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)v82);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v83 + 1);
      sub_21697C414(&v83);
      sub_21700E438(a3, v96);
      unint64_t v53 = v94;
      if (v94 != &v95)
      {
        do
        {
          sub_21700E4CC(a3, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v53 + 4), (long long *)(v53 + 7));
          uint64_t v54 = v53[1];
          if (v54)
          {
            do
            {
              uint64_t v55 = (uint64_t **)v54;
              uint64_t v54 = (uint64_t *)*v54;
            }
            while (v54);
          }
          else
          {
            do
            {
              uint64_t v55 = (uint64_t **)v53[2];
              BOOL v56 = *v55 == (uint64_t *)v53;
              unint64_t v53 = v55;
            }
            while (!v56);
          }
          unint64_t v53 = v55;
        }
        while (v55 != &v95);
      }
LABEL_115:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v89);
      a3 = (uint64_t *)!v15;
      sub_21697C414(&v88);
      int v65 = &v91;
      sub_216F50D48((void ***)&v65);
      sub_21700F360(v95);
    }
    else
    {
      int v65 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)"usdSkel/cache.cpp";
      uint64_t v66 = (pxrInternal__aapl__pxrReserved__ *)"ComputeSkelBindings";
      uint64_t v67 = 121;
      unint64_t v68 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBindings(const UsdSkelRoot"
                              " &, std::vector<UsdSkelBinding> *, Usd_PrimFlagsPredicate) const";
      char v69 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v65, 1, (pxrInternal__aapl__pxrReserved__ *)"'bindings' pointer is null.");
    }
  }
  else
  {
    int v65 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)"usdSkel/cache.cpp";
    uint64_t v66 = (pxrInternal__aapl__pxrReserved__ *)"ComputeSkelBindings";
    uint64_t v67 = 116;
    unint64_t v68 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBindings(const UsdSkelRoot &"
                            ", std::vector<UsdSkelBinding> *, Usd_PrimFlagsPredicate) const";
    char v69 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v65, 1, (pxrInternal__aapl__pxrReserved__ *)"'skelRoot' is invalid.");
    return 0;
  }
  return a3;
}

void sub_21700E214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  sub_216D3B0D8((uint64_t)&a27);
  sub_216D3AE58(v27 - 224);
  sub_216D3AF04(v27 - 192);
  a27 = (void **)(v27 - 136);
  sub_216F50D48(&a27);
  sub_21700F360(*(void **)(v27 - 104));
  _Unwind_Resume(a1);
}

void **sub_21700E438(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 6)
  {
    if (a2 >> 58) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_2169B761C((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    _OWORD v7[2] = (char *)v7[0] + v5;
    uint64_t v7[3] = (char *)v7[0] + 64 * v6;
    sub_21700FC00(a1, v7);
    return sub_21700235C(v7);
  }
  return result;
}

void sub_21700E4B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21700235C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21700E4CC(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2, long long *a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void *)(v6 - 8);
  if (v9 >= v8)
  {
    uint64_t v11 = (uint64_t)(v9 - *a1) >> 6;
    if ((unint64_t)(v11 + 1) >> 58) {
      sub_21677CB10();
    }
    uint64_t v12 = v7 - *a1;
    uint64_t v13 = v12 >> 5;
    if (v12 >> 5 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    uint64_t v21 = v6;
    if (v14) {
      BOOL v15 = (char *)sub_2169B761C(v6, v14);
    }
    else {
      BOOL v15 = 0;
    }
    unsigned int v17 = v15;
    unsigned __int8 v18 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v15[64 * v11];
    uint64_t v20 = &v15[64 * v14];
    sub_21700F184(v18, a2, a3);
    char v19 = (char *)v18 + 64;
    sub_21700FC00(a1, &v17);
    uint64_t v10 = a1[1];
    sub_21700235C(&v17);
  }
  else
  {
    sub_21700F184(*(pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)(v6 - 8), a2, a3);
    uint64_t v10 = v9 + 64;
    a1[1] = v9 + 64;
  }
  a1[1] = v10;
  return v10 - 64;
}

void sub_21700E5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBinding(pxrInternal__aapl__pxrReserved__::UsdSkelCache *a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3, uint64_t a4, void *a5)
{
  uint64_t v6 = (uint64_t *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (!v5
    || (*(unsigned char *)(v5 + 57) & 8) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2) & 1) == 0)
  {
    uint64_t v45 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)"usdSkel/cache.cpp";
    uint64_t v46 = (atomic_ullong *)"ComputeSkelBinding";
    uint64_t v47 = 215;
    *(void *)&long long v48 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBinding(const UsdSkelRoot &, const"
                      " UsdSkelSkeleton &, UsdSkelBinding *, Usd_PrimFlagsPredicate) const";
    BYTE8(v48) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v45, 1, (pxrInternal__aapl__pxrReserved__ *)"'skelRoot' is invalid.");
    return 0;
  }
  uint64_t v12 = *((void *)a3 + 1);
  if (!v12
    || (*(unsigned char *)(v12 + 57) & 8) != 0
    || ((*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *))(*(void *)a3 + 32))(a3) & 1) == 0)
  {
    uint64_t v45 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)"usdSkel/cache.cpp";
    uint64_t v46 = (atomic_ullong *)"ComputeSkelBinding";
    uint64_t v47 = 220;
    *(void *)&long long v48 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBinding(const UsdSkelRoot &, const"
                      " UsdSkelSkeleton &, UsdSkelBinding *, Usd_PrimFlagsPredicate) const";
    BYTE8(v48) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v45, 1, (pxrInternal__aapl__pxrReserved__ *)"'skel' is invalid.");
    return 0;
  }
  if (a4)
  {
    sub_21700F3F4(&v75, 1uLL);
    uint64_t v74 = 0;
    memset(v73, 0, sizeof(v73));
    sub_216D16CFC((uint64_t)&v45, v6, (_DWORD *)(a2 + 16));
    sub_216D3B730((uint64_t)v69, (uint64_t)&v45, a5);
    char v72 = 1;
    if ((v48 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47 + 1);
    sub_21697C414(&v47);
    if (v46) {
      sub_216D16E0C(v46);
    }
    sub_216D3ADBC(v69, (uint64_t)v64);
    uint64_t v44 = &v65;
    while (1)
    {
      uint64_t v45 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)v69[1];
      uint64_t v46 = v69;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v47);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v47 + 1);
      LODWORD(v48) = 0;
      WORD2(v48) = 0;
      if ((atomic_ullong *)v64[1] == v46 && (pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)v64[0] == v45)
      {
        BOOL v13 = 1;
        if (v65 == v47 && !v66 && !v67) {
          BOOL v13 = v68 != 0;
        }
      }
      else
      {
        BOOL v13 = 1;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47 + 1);
      sub_21697C414(&v47);
      if (!v13) {
        break;
      }
      sub_216D3B00C((uint64_t)v64, (uint64_t)&v45);
      StaticTfuint64_t Type = pxrInternal__aapl__pxrReserved__::UsdGeomImageable::_GetStaticTfType(v14);
      SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v16);
      char IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v45, SchemaInfo, v18);
      if ((v48 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47 + 1);
      sub_21697C414(&v47);
      if (v46) {
        sub_216D16E0C(v46);
      }
      if (IsA)
      {
        if (v68)
        {
          uint64_t v20 = v76;
          if (v75 == v76)
          {
            uint64_t v45 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)"usdSkel/cache.cpp";
            uint64_t v46 = (atomic_ullong *)"ComputeSkelBinding";
            uint64_t v47 = 254;
            *(void *)&long long v48 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBinding(const UsdSkelRoot "
                              "&, const UsdSkelSkeleton &, UsdSkelBinding *, Usd_PrimFlagsPredicate) const";
            BYTE8(v48) = 0;
            if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v45, "!skelStack.empty()", 0))
            {
              sub_216D3AE58((uint64_t)v64);
              goto LABEL_100;
            }
            uint64_t v20 = v76;
          }
          long long v22 = (void (**)(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *))*((void *)v20 - 3);
          uint64_t v21 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v20 - 24);
          (*v22)(v21);
          int v76 = v21;
        }
        else
        {
          sub_216D3AE90((uint64_t)v64, (uint64_t)&v45);
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v63, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v45);
          v63[3] = 0;
          v63[0] = &unk_26C76F730;
          if ((v48 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47 + 1);
          sub_21697C414(&v47);
          if (v46) {
            sub_216D16E0C(v46);
          }
          LODWORD(v45) = 1;
          uint64_t v46 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v47);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v47 + 1);
          *(void *)&long long v48 = 0;
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v59, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v45);
          uint64_t v59 = &unk_26C76FA70;
          if ((v48 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47 + 1);
          sub_21697C414(&v47);
          if (v46) {
            sub_216D16E0C(v46);
          }
          if (pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v63, (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v59))
          {
            if (sub_216FDC16C(0))
            {
              sub_216D3B00C((uint64_t)v64, (uint64_t)&v45);
              sub_216D0162C((uint64_t)&v45, &v57);
              Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v57);
              sub_216D16CFC((uint64_t)&v51, (uint64_t *)&v60, &v61);
              sub_216D0162C((uint64_t)&v51, &v55);
              long long v24 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v55);
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelCache]  Found skel binding at <%s> which targets skel <%s>.\n", v25, v26, Text, v24, v44);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v56);
              sub_21697C414(&v55);
              if ((v54 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
              sub_21697C414(&v53);
              if (v52) {
                sub_216D16E0C(v52);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v58);
              sub_21697C414(&v57);
              if ((v48 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47 + 1);
              sub_21697C414(&v47);
              if (v46) {
                sub_216D16E0C(v46);
              }
            }
          }
          else
          {
            uint64_t v27 = v76;
            uint64_t v28 = *((void *)v76 - 2);
            if (v28) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 48), 1uLL, memory_order_relaxed);
            }
            uint64_t v29 = v60;
            int v60 = (atomic_ullong *)v28;
            if (v29) {
              sub_216D16E0C(v29);
            }
            sub_2169C487C(&v61, (_DWORD *)v27 - 2);
            sub_2169C48D4(&v62, (_DWORD *)v27 - 1);
          }
          sub_216D16CFC((uint64_t)&v45, (uint64_t *)&v60, &v61);
          sub_216D16CFC((uint64_t)&v51, (uint64_t *)a3 + 1, (_DWORD *)a3 + 4);
          BOOL v30 = v45 == v51
             && v46 == v52
             && v47 == v53
             && (v48 & 0xFFFFFFFFFFFFFFF8) == (v54 & 0xFFFFFFFFFFFFFFF8);
          if ((v54 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
          sub_21697C414(&v53);
          if (v52) {
            sub_216D16E0C(v52);
          }
          if ((v48 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47 + 1);
          sub_21697C414(&v47);
          if (v46) {
            sub_216D16E0C(v46);
          }
          if (v30)
          {
            sub_216D3AE90((uint64_t)v64, (uint64_t)&v51);
            pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkinningQuery(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v51, (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)&v45);
            if ((v54 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
            sub_21697C414(&v53);
            if (v52) {
              sub_216D16E0C(v52);
            }
            if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v45, v31))
            {
              if (sub_216FDC16C(0))
              {
                sub_216D3B00C((uint64_t)v64, (uint64_t)&v51);
                sub_216D0162C((uint64_t)&v51, &v57);
                uint64_t v32 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v57);
                pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelCache]  Found skinnable prim <%s>\n", v33, v34, v32);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v58);
                sub_21697C414(&v57);
                if ((v54 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
                sub_21697C414(&v53);
                if (v52) {
                  sub_216D16E0C(v52);
                }
              }
              sub_21700F6FC((uint64_t)v73, (uint64_t)&v45);
              pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v64);
            }
            sub_216FDCF10((uint64_t)&v45);
          }
          uint64_t v35 = v76;
          if ((unint64_t)v76 >= v77)
          {
            int v36 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)sub_21700F9B0((uint64_t *)&v75, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v59);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(v76, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v59);
            *(void *)uint64_t v35 = &unk_26C76FA70;
            int v36 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v35 + 24);
          }
          int v76 = v36;
          pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v59);
          pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::~UsdSkelBindingAPI((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v63);
        }
      }
      else if (!v68)
      {
        if (sub_216FDC16C(0))
        {
          sub_216D3B00C((uint64_t)v64, (uint64_t)&v45);
          sub_216D0162C((uint64_t)&v45, (int *)v63);
          int v37 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v63);
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"[UsdSkelCache]  Pruning traversal at <%s> (prim is not UsdGeomImageable)\n", v38, v39, v37);
          sub_21697B754(v63);
          sub_216D3B0D8((uint64_t)&v45);
        }
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v64);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)v64);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v65 + 1);
    sub_21697C414(v44);
    sub_21700F184((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v45, a3, v73);
    uint64_t v41 = v46;
    if (v46) {
      atomic_fetch_add_explicit(v46 + 6, 1uLL, memory_order_relaxed);
    }
    uint64_t v42 = *(atomic_ullong **)(a4 + 8);
    *(void *)(a4 + 8) = v41;
    if (v42) {
      sub_216D16E0C(v42);
    }
    sub_2169C487C((int *)(a4 + 16), &v47);
    sub_2169C48D4((int *)(a4 + 20), (_DWORD *)&v47 + 1);
    if (&v45 != (pxrInternal__aapl__pxrReserved__::UsdSchemaBase ***)a4)
    {
      sub_217001928((void *)(a4 + 24));
      long long v43 = v49;
      *(_OWORD *)(a4 + 24) = v48;
      *(_OWORD *)(a4 + 40) = v43;
      long long v48 = 0u;
      long long v49 = 0u;
      *(void *)(a4 + 56) = v50;
      uint64_t v50 = 0;
    }
    sub_217001928(&v48);
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v45);
LABEL_100:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v71);
    sub_21697C414(&v70);
    sub_217001928(v73);
    a4 = !v13;
    uint64_t v45 = &v75;
    sub_216F50D48((void ***)&v45);
  }
  else
  {
    uint64_t v45 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)"usdSkel/cache.cpp";
    uint64_t v46 = (atomic_ullong *)"ComputeSkelBinding";
    uint64_t v47 = 225;
    *(void *)&long long v48 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBinding(const UsdSkelRoot &, const"
                      " UsdSkelSkeleton &, UsdSkelBinding *, Usd_PrimFlagsPredicate) const";
    BYTE8(v48) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v45, 1, (pxrInternal__aapl__pxrReserved__ *)"'binding' pointer is null.");
  }
  return a4;
}

void sub_21700EF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  sub_216D3B0D8((uint64_t)&a19);
  sub_216D3AE58(v19 - 248);
  sub_216D3AF04(v19 - 216);
  sub_217001928((void *)(v19 - 160));
  a19 = (void **)(v19 - 112);
  sub_216F50D48(&a19);
  _Unwind_Resume(a1);
}

void sub_21700F144(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *a1)
{
  sub_217001928((void *)a1 + 3);

  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_21700F184(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2, long long *a3)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a1, a2);
  *(void *)uint64_t result = &unk_26C76FA70;
  long long v5 = *a3;
  *(_OWORD *)((char *)result + 40) = a3[1];
  *(_OWORD *)((char *)result + 24) = v5;
  uint64_t v6 = *((void *)a3 + 4);
  *((void *)result + 7) = v6;
  if (v6)
  {
    unint64_t v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)result + 6)) {
      unint64_t v7 = (atomic_ullong *)*((void *)result + 6);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  return result;
}

void *sub_21700F1F4(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C76F990;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_21700F254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_21700F2EC((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_21700F278(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_21700F2A0(uint64_t a1)
{
}

uint64_t sub_21700F2A8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C76F9E0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_21700F2EC(uint64_t a1, unint64_t *a2)
{
  if (a2)
  {
    sub_216FD9F8C(a2 + 219);
    sub_216FD9EBC(a2 + 146);
    sub_216FD9DEC(a2 + 73);
    sub_216FD9D1C(a2);
    operator delete(a2);
  }
}

void sub_21700F360(void *a1)
{
  if (a1)
  {
    sub_21700F360(*a1);
    sub_21700F360(a1[1]);
    sub_21700F3B4((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)(a1 + 4));
    operator delete(a1);
  }
}

void sub_21700F3B4(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *a1)
{
  sub_217001928((void *)a1 + 3);

  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton(a1);
}

void *sub_21700F3F4(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216782E84(a1, a2);
    sub_21700F460((uint64_t)a1, a2);
  }
  return a1;
}

void sub_21700F44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_21700F460(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)(a1 + 8);
  if (a2)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v3 + 24 * a2);
    uint64_t v5 = 24 * a2;
    do
    {
      sub_21700F4D4(a1 + 16, v3);
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v3 + 24);
      v5 -= 24;
    }
    while (v5);
    uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3;
}

void sub_21700F4CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_21700F4D4(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2)
{
  int v3 = 1;
  uint64_t v4 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v6);
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v3);
  *(void *)a2 = &unk_26C76FA70;
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
}

void sub_21700F598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21700F5AC(uint64_t a1, uint64_t a2)
{
  sub_216D16CFC((uint64_t)v10, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  uint64_t v3 = sub_216D3B348((uint64_t)v10, (uint64_t)&v5);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  if (v11) {
    sub_216D16E0C(v11);
  }
  return v3;
}

void sub_21700F680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_21700F6A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      sub_21700F3B4((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)(v2 + 32));
    }
    operator delete((void *)v2);
  }
}

void sub_21700F6FC(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_15;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_15;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        int v7 = (uint64_t *)a1;
      }
      else {
        int v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      sub_216FDC73C(v5 + 400 * v4, a2);
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_15:
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    int v12 = sub_21700F86C(a1, v11);
    uint64_t v13 = 50 * v4;
    sub_21700F918(v9, v9 + v13 * 8, (uint64_t)v12);
    sub_216FDC73C((uint64_t)&v12[v13], a2);
    sub_217001928((void *)a1);
    *(void *)(a1 + 32) = v12;
    goto LABEL_13;
  }
  v15[0] = "vt/array.h";
  v15[1] = "emplace_back";
  v15[2] = 433;
  void v15[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery>::empla"
           "ce_back(Args &&...) [ELEM = pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery, Args = <const pxrInternal"
           "__aapl__pxrReserved__::UsdSkelSkinningQuery &>]";
  char v16 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v14 = 4;
    }
    else {
      int v14 = 3;
    }
  }
  else
  {
    int v14 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v14);
}

void *sub_21700F86C(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery>::_AllocateNew(size_t) [ELEM = pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery]");
  if (a2 > 0xA3D70A3D70A3D6) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 400 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_21700F900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21700F918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      sub_216FDC73C(a3 + v6, a1 + v6);
      v6 += 400;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_21700F978(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 400)
  {
    sub_216FDCF10(v1);
    v1 += 400;
  }
  __cxa_rethrow();
}

void sub_21700F99C(_Unwind_Exception *a1)
{
}

uint64_t sub_21700F9B0(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unsigned int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216782ED8(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  int v14 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v10[24 * v4];
  BOOL v15 = v14;
  char v16 = &v10[24 * v9];
  *(void *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(v14, a2) = &unk_26C76FA70;
  BOOL v15 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v15 + 24);
  sub_21700FAD4(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216F51058((uint64_t)&v13);
  return v11;
}

void sub_21700FAC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F51058((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21700FAD4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21700FB4C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21700FB4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      int v12 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a7 + v11 - 24), (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a3 + v11 - 24));
      v11 -= 24;
      *(void *)int v12 = &unk_26C76FA70;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_21700FBE4(_Unwind_Exception *exception_object)
{
  if (v3) {
    sub_21732512C(v2, v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21700FC00(uint64_t *a1, void *a2)
{
  uint64_t result = sub_217002158((uint64_t)(a1 + 2), a1[1], (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a1[1], *a1, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void sub_21700FC78()
{
  sub_216779094(v5, "USDSKEL_CACHE");
  long long __p = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76F9F8, 0, (uint64_t)v5, (uint64_t)&__p);
  if (SHIBYTE(v4) < 0) {
    operator delete(__p);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  uint64_t v0 = sub_216FDF954();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "USDSKEL_CACHE", "UsdSkel cache population.");
  sub_216779094(v5, "USDSKEL_BAKESKINNING");
  long long __p = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76F9F8, 1, (uint64_t)v5, (uint64_t)&__p);
  if (SHIBYTE(v4) < 0) {
    operator delete(__p);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  uint64_t v1 = sub_216FDF954();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v1 + 4, "USDSKEL_BAKESKINNING", "UsdSkelBakeSkinningLBS() method.");
}

void sub_21700FD70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::UsdSkelInbetweenShape(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_Create(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, uint64_t a3@<X8>)
{
  if (((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2) & 1) != 0
     || (unint64_t v9 = "usdSkel/inbetweenShape.cpp",
         uint64_t v10 = (atomic_ullong *)"_Create",
         uint64_t v11 = 47,
         unint64_t v12 = (unint64_t)"static UsdSkelInbetweenShape pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_"
                                 "Create(const UsdPrim &, const TfToken &)",
         char v13 = 0,
         (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v9, "prim", 0) & 1) != 0))
    && (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_MakeNamespaced(a2, 0, &v8), v8))
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v7) {
      uint64_t v7 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)this, &v8, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v7 + 664), 0, 1, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::UsdSkelInbetweenShape(a3, (uint64_t)&v9);
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
    sub_21697C414(&v11);
    if (v10) {
      sub_216D16E0C(v10);
    }
    if ((v8 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(void *)(a3 + 24) = 0;
  }
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_MakeNamespaced@<W0>(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  BOOL IsNamespaced = pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_IsNamespaced(this, a2);
  if (IsNamespaced)
  {
    char v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168D2318(a3, this);
  }
  else
  {
    NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)IsNamespaced);
    if ((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v8 = (const void **)((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else
    {
      NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
      uint64_t v8 = (const void **)NamespacePrefix;
    }
    if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v8, (const void **)EmptyString, (uint64_t)&__p);
    char v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v16);
    uint64_t v10 = *a3;
    uint64_t v11 = *a3 & 7;
    if (&v16 == a3)
    {
      if (v11) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if (v11) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *a3 = v16;
      uint64_t v16 = 0;
    }
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t v12 = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    unint64_t v12 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_IsValidInbetweenName((pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)v12);
  if (!result)
  {
    if ((*a3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *a3 = 0;
  }
  return result;
}

void sub_2170100E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if ((*v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::IsInbetween(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2);
  if (result)
  {
    uint64_t v4 = sub_216D563F8(this);
    if ((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
    }
    return pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_IsValidInbetweenName((pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)EmptyString);
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_IsValidInbetweenName(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *a1)
{
  NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNamespacePrefix(a1);
  if ((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
  }
  if (*((char *)EmptyString + 23) >= 0) {
    uint64_t v4 = (const char *)EmptyString;
  }
  else {
    uint64_t v4 = (const char *)*EmptyString;
  }
  int v5 = *((char *)a1 + 23);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = *((void *)a1 + 1);
  }
  size_t v7 = strlen(v4);
  if (v6 < v7) {
    return 0;
  }
  size_t v8 = v7;
  unint64_t v9 = v5 >= 0 ? (const char *)a1 : *(const char **)a1;
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)strncmp(v9, v4, v8);
  if (v10) {
    return 0;
  }
  unint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNamespacePrefix(v10);
  if ((*((void *)v12 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
    char v13 = (uint64_t *)((*((void *)v12 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
  }
  if (*((char *)v13 + 23) >= 0) {
    int v14 = (const char *)v13;
  }
  else {
    int v14 = (const char *)*v13;
  }
  int v15 = *((char *)a1 + 23);
  if (v15 >= 0) {
    size_t v16 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v16 = *((void *)a1 + 1);
  }
  size_t v17 = strlen(v14);
  if (v16 < v17) {
    return 1;
  }
  unsigned __int8 v18 = *(const char **)a1;
  if (v15 >= 0) {
    unsigned __int8 v18 = (const char *)a1;
  }
  return strcmp(&v18[v16 - v17], v14) != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNamespacePrefix(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = (char *)atomic_load((unint64_t *)&qword_267B94E08);
  if (!v1)
  {
    uint64_t v1 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1, "inbetweens:", 0);
    uint64_t v3 = v1 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1 + 8, ":normalOffsets", 0);
    uint64_t v4 = *(atomic_uint **)v1;
    size_t v16 = v4;
    if ((v4 & 7) != 0)
    {
      int v5 = (atomic_uint *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        size_t v16 = v5;
      }
    }
    size_t v6 = (atomic_uint *)*v3;
    size_t v17 = v6;
    if ((v6 & 7) != 0)
    {
      size_t v7 = (atomic_uint *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
        size_t v17 = v7;
      }
    }
    *((void *)v1 + 2) = 0;
    *((void *)v1 + 3) = 0;
    *((void *)v1 + 4) = 0;
    int v14 = (void **)(v1 + 16);
    char v15 = 0;
    size_t v8 = (char *)operator new(0x10uLL);
    uint64_t v9 = 0;
    *((void *)v1 + 2) = v8;
    *((void *)v1 + 3) = v8;
    *((void *)v1 + 4) = v8 + 16;
    do
    {
      uint64_t v10 = (&v16)[v9];
      *(void *)&v8[v9 * 8] = v10;
      if ((v10 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v8[v9 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v9;
    }
    while (v9 != 2);
    *((void *)v1 + 3) = v8 + 16;
    for (uint64_t i = 1; i != -1; --i)
    {
      unint64_t v12 = (&v16)[i];
      if ((v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v13 = 0;
    atomic_compare_exchange_strong(&qword_267B94E08, (unint64_t *)&v13, (unint64_t)v1);
    if (v13)
    {
      int v14 = (void **)(v1 + 16);
      sub_216889A04(&v14);
      if ((*v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v1 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v1);
      return atomic_load((unint64_t *)&qword_267B94E08);
    }
  }
  return (unint64_t)v1;
}

void sub_217010484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v12);
      _Unwind_Resume(a1);
    }
  }
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_IsNamespaced(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    this = (pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
    uint64_t v2 = this;
  }
  NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNamespacePrefix(this);
  if ((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
  }
  if (*((char *)EmptyString + 23) >= 0) {
    int v5 = (const char *)EmptyString;
  }
  else {
    int v5 = (const char *)*EmptyString;
  }
  int v6 = *((char *)v2 + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)v2 + 23);
  }
  else {
    size_t v7 = *((void *)v2 + 1);
  }
  size_t v8 = strlen(v5);
  if (v7 < v8) {
    return 0;
  }
  size_t v10 = v8;
  if (v6 >= 0) {
    uint64_t v11 = (const char *)v2;
  }
  else {
    uint64_t v11 = *(const char **)v2;
  }
  return strncmp(v11, v5, v10) == 0;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNormalOffsetsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  EmptyString = sub_216D563F8(this);
  if ((*(void *)EmptyString & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    size_t v7 = (const void **)((*(void *)EmptyString & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    size_t v7 = (const void **)EmptyString;
  }
  NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNamespacePrefix(EmptyString);
  if ((*((void *)NamespacePrefix + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v9 = (uint64_t *)((*((void *)NamespacePrefix + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v9 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v7, (const void **)v9, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v18);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
  size_t v10 = (uint64_t *)((char *)this + 8);
  uint64_t v11 = (_DWORD *)((char *)this + 16);
  if (a2)
  {
    sub_216D16CFC((uint64_t)&__p, v10, v11);
    unint64_t v12 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v12) {
      unint64_t v12 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)&__p, &v18, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v12 + 688), 0, 0, a3);
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    sub_216D16CFC((uint64_t)&__p, v10, v11);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v18, a3);
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if (v14) {
    sub_216D16E0C(v14);
  }
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_217010748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if ((a17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::GetNormalOffsetsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *this@<X0>, uint64_t a2@<X8>)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::CreateNormalOffsetsAttr@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *this@<X0>, const pxrInternal__aapl__pxrReserved__::VtValue *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdProperty *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNormalOffsetsAttr(this, 1, (uint64_t)a3);
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a3, v5);
  if (*((void *)a2 + 1)) {
    int v7 = result;
  }
  else {
    int v7 = 0;
  }
  if (v7 == 1) {
    return pxrInternal__aapl__pxrReserved__::UsdAttribute::Set((pxrInternal__aapl__pxrReserved__ **)a3, a2, NAN);
  }
  return result;
}

void sub_217010808(_Unwind_Exception *a1)
{
  sub_216D2EDA0(v1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::GetWeight(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *this, float *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v4) {
    uint64_t v4 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  uint64_t v6 = 0;
  BOOL result = sub_217010B2C((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v4 + 184), (uint64_t)a2, &v6);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::SetWeight(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *this, float a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    uint64_t v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  sub_217010BD4((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 184));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::HasAuthoredWeight(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v2) {
    uint64_t v2 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v2 + 184));
}

void pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::GetOffsets()
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::SetOffsets()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::GetNormalOffsets(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNormalOffsetsAttr(a1, 0, (uint64_t)&v3);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v3, v1))pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(); {
  if ((v7 & 7) != 0)
  }
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
  return 0;
}

void sub_217010A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::SetNormalOffsets(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::_GetNormalOffsetsAttr(a1, 1, (uint64_t)&v3);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v3, v1))pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(); {
  if ((v7 & 7) != 0)
  }
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
  return 0;
}

void sub_217010B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_217010B2C(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8 || (*(unsigned char *)(v8 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  uint64_t v9 = *(void *)v8;
  v11[1] = a3;
  _OWORD v11[2] = MEMORY[0x263F8C248];
  __int16 v12 = 0;
  v11[0] = &unk_26C75DB98;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata(v9, a1, a2, a4, 1, (uint64_t)v11);
}

void sub_217010BD4(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

void sub_217010C74()
{
  sub_2170115FC();
  sub_216779094(__p, "SkelRoot");
  sub_217011728((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_217010CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelRoot::~UsdSkelRoot(pxrInternal__aapl__pxrReserved__::UsdSkelRoot *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelRoot::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  int v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76FA18;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdSkel/root.cpp";
    size_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdSkelRoot pxrInternal__aapl__pxrReserved__::UsdSkelRoot::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    size_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76FA18;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_217010E90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelRoot::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94E18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94E18))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B94E10, "SkelRoot");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B94E10, &dword_216758000);
    __cxa_guard_release(&qword_267B94E18);
  }
  int v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B94E10, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76FA18;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdSkel/root.cpp";
    size_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdSkelRoot pxrInternal__aapl__pxrReserved__::UsdSkelRoot::Define(const UsdStagePtr &"
                            ", const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    size_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76FA18;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_21701109C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdSkelRoot *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdSkelRoot *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94E28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94E28))
  {
    __cxa_guard_release(&qword_267B94E28);
  }
  return &qword_267B94E20;
}

void sub_217011144(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdSkelRoot *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94E38, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdSkelRoot *)__cxa_guard_acquire(&qword_267B94E38);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetStaticTfType(v2);
      byte_267B94E30 = sub_216D16508((char *)&qword_267B94E20, v3, v4);
      __cxa_guard_release(&qword_267B94E38);
    }
  }
  return byte_267B94E30;
}

void sub_2170111C4(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdSkelRoot *this)
{
  return &qword_267B94E20;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelRoot::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdSkelRoot *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94E58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94E58))
  {
    qword_267B94E40 = 0;
    *(void *)algn_267B94E48 = 0;
    qword_267B94E50 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94E40, &dword_216758000);
    __cxa_guard_release(&qword_267B94E58);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94E78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94E78))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)1);
    qword_267B94E60 = 0;
    *(void *)algn_267B94E68 = 0;
    qword_267B94E70 = 0;
    sub_21698FA28(&qword_267B94E60, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94E60, &dword_216758000);
    __cxa_guard_release(&qword_267B94E78);
  }
  if (v1) {
    return &qword_267B94E60;
  }
  else {
    return &qword_267B94E40;
  }
}

void sub_21701130C(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelRoot::Find(pxrInternal__aapl__pxrReserved__::UsdSkelRoot *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  int v20 = *(_DWORD *)this;
  int v5 = (atomic_ullong *)*((void *)this + 1);
  uint64_t v21 = v5;
  if (v5) {
    atomic_fetch_add_explicit(v5 + 6, 1uLL, memory_order_relaxed);
  }
  sub_216981010(&v22, (_DWORD *)this + 4);
  sub_21698105C(&v23, (_DWORD *)this + 5);
  uint64_t v7 = *((void *)this + 3);
  uint64_t v24 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  while (1)
  {
    uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v20, v6);
    char v9 = IsDefined;
    if ((IsDefined & 1) == 0) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdSkelRoot *)IsDefined);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94E20, v10);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v20, SchemaInfo, v12))
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v20);
      *(void *)a2 = &unk_26C76FA18;
      break;
    }
    sub_216D6B1F8((uint64_t)&v20, (uint64_t)&v15);
    int v20 = v15;
    char v13 = v16;
    int v16 = 0;
    int v14 = v21;
    uint64_t v21 = v13;
    if (v14) {
      sub_216D16E0C(v14);
    }
    sub_21697DE94(&v22, &v17);
    sub_21697DEEC(&v23, &v18);
    if ((v24 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v24 = v19;
    uint64_t v19 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
    sub_21697C414(&v17);
    if (v16) {
      sub_216D16E0C(v16);
    }
  }
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
  sub_21697C414(&v22);
  if (v21) {
    sub_216D16E0C(v21);
  }
  if ((v9 & 1) == 0)
  {
    int v20 = 1;
    uint64_t v21 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v22);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v23);
    uint64_t v24 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v20);
    *(void *)a2 = &unk_26C76FA18;
    if ((v24 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
    sub_21697C414(&v22);
    if (v21) {
      sub_216D16E0C(v21);
    }
  }
}

void sub_217011594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2170115BC(uint64_t a1, const std::type_info *a2, char *a3)
{
  var8.__vftable = (std::type_info_vtbl *)sub_2170117E0;
  pxrInternal__aapl__pxrReserved__::UsdGeomRegisterComputeExtentFunction(v3, &var8, v4);
}

uint64_t *sub_2170115FC()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F1C36C((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170116DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_217011728(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_2170117BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170117E0(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, pxrInternal__aapl__pxrReserved__::UsdSkelCache *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v79 = a3;
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v76, a1);
  int v76 = &unk_26C76FA18;
  if (v77
    && (*(unsigned char *)(v77 + 57) & 8) == 0
    && (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible(v6) & 1) != 0
    || (int v37 = (const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton **)"usdSkel/root.cpp",
        uint64_t v38 = (atomic_ullong *)"_ComputeExtent",
        uint64_t v39 = 165,
        unint64_t v40 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::_ComputeExtent(const UsdGeomBoundable &, const Us"
                                "dTimeCode &, const GfMatrix4d *, VtVec3fArray *)",
        char v41 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v37, "skelRoot", 0) & 1) != 0))
  {
    int v7 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdSkelCache::UsdSkelCache((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v74);
    uint64_t UsdPrimDefaultPredicate = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v7);
    uint64_t v9 = UsdPrimDefaultPredicate[1].i64[0];
    v10.i64[0] = -8193;
    v10.i64[0] = vandq_s8(*UsdPrimDefaultPredicate, v10).u64[0];
    v10.i64[1] = vorrq_s8(*UsdPrimDefaultPredicate, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
    int8x16_t v72 = v10;
    uint64_t v73 = v9;
    pxrInternal__aapl__pxrReserved__::UsdSkelCache::Populate(&v74, (uint64_t)&v76, (long long *)v72.i8);
    int v36 = a4;
    pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::UsdGeomXformCache((pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)v71);
    int64x2_t v69 = vdupq_n_s64(0x47EFFFFFE0000000uLL);
    *(_OWORD *)int v70 = xmmword_217412860;
    *(int64x2_t *)&v70[16] = vdupq_n_s64(0xC7EFFFFFE0000000);
    uint64_t v68 = 0;
    memset(v67, 0, sizeof(v67));
    v66[0] = (pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v74;
    v66[1] = a2;
    v66[2] = (pxrInternal__aapl__pxrReserved__::UsdSkelCache *)v71;
    v66[3] = (pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v76;
    v66[4] = (pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v79;
    v66[5] = (pxrInternal__aapl__pxrReserved__::UsdSkelCache *)v67;
    v66[6] = (pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v69;
    int v63 = 0;
    int v64 = 0;
    uint64_t v65 = 0;
    unint64_t v12 = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v11);
    uint64_t v13 = v12[1].i64[0];
    v14.i64[0] = -8193;
    v14.i64[0] = vandq_s8(*v12, v14).u64[0];
    v14.i64[1] = vorrq_s8(*v12, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
    int8x16_t v61 = v14;
    uint64_t v62 = v13;
    if (!pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBindings((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v74, (uint64_t)&v76, (uint64_t *)&v63, &v61)|| (uint64_t v16 = v63, v15 = v64, v64 == v63))
    {
      int v17 = (pxrInternal__aapl__pxrReserved__ *)sub_216D16CFC((uint64_t)&v37, &v77, &v78);
      int v18 = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v17);
      uint64_t v19 = v18[1].i64[0];
      v20.i64[0] = -8193;
      v20.i64[0] = vandq_s8(*v18, v20).u64[0];
      v20.i64[1] = vorrq_s8(*v18, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
      int8x16_t v53 = v20;
      uint64_t v54 = v19;
      sub_216D3B730((uint64_t)v58, (uint64_t)&v37, &v53);
      if ((v40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
      sub_21697C414(&v39);
      if (v38) {
        sub_216D16E0C(v38);
      }
      sub_216D3ADBC((uint64_t *)v58, (uint64_t)&v53);
      *(uint64_t **)&long long v49 = v58[1];
      *((void *)&v49 + 1) = v58;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v50);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v50 + 1);
      int v51 = 0;
      __int16 v52 = 0;
      while (*(_OWORD *)&v53 != v49 || v54 != v50 || v55 != v51 || v56 != v52 || v57 != HIBYTE(v52))
      {
        sub_216D3AE90((uint64_t)&v53, (uint64_t)v44);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v42, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v44);
        uint64_t v42 = &unk_26C76FA70;
        if (v43)
        {
          if ((*(unsigned char *)(v43 + 57) & 8) == 0)
          {
            if (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v42))
            {
              sub_217012294((uint64_t)&v37);
              char v21 = sub_217011E90(v66, (const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v42);
              sub_217001928(&v40);
              pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v37);
              if ((v21 & 1) == 0)
              {
                pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v42);
                if ((v48 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
                sub_21697C414(&v46);
                if (v45) {
                  sub_216D16E0C(v45);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v50 + 1);
                sub_21697C414(&v50);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v54 + 1);
                sub_21697C414(&v54);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v60);
                sub_21697C414(&v59);
                goto LABEL_33;
              }
            }
          }
        }
        pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v42);
        if ((v48 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
        sub_21697C414(&v46);
        if (v45) {
          sub_216D16E0C(v45);
        }
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v53);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v50 + 1);
      sub_21697C414(&v50);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v54 + 1);
      sub_21697C414(&v54);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v60);
      sub_21697C414(&v59);
LABEL_35:
      LODWORD(v38) = 0;
      int v37 = 0;
      v58[0] = (uint64_t *)&v37;
      sub_2168FD278(v36, 2uLL, v58);
      float64x2_t v34 = (float64x2_t)v69;
      double v23 = *(double *)v70;
      sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v36, v24, v25);
      float32_t v26 = v23;
      uint64_t v27 = (float32x2_t *)v36[4];
      *uint64_t v27 = vcvt_f32_f64(v34);
      v27[1].f32[0] = v26;
      float64x2_t v35 = *(float64x2_t *)&v70[8];
      double v28 = *(double *)&v70[24];
      sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v36, v29, v30);
      float v31 = v28;
      unint64_t v32 = v36[4];
      *(float32x2_t *)(v32 + 12) = vcvt_f32_f64(v35);
      *(float *)(v32 + 20) = v31;
      uint64_t v22 = 1;
    }
    else
    {
      while ((sub_217011E90(v66, v16) & 1) != 0)
      {
        uint64_t v16 = (const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)((char *)v16 + 64);
        if (v16 == v15) {
          goto LABEL_35;
        }
      }
LABEL_33:
      uint64_t v22 = 0;
    }
    int v37 = &v63;
    sub_217001850((void ***)&v37);
    sub_2168F83DC((uint64_t)v67);
    sub_216EF9C4C((uint64_t)v71);
    if (v75) {
      sub_216784EC4(v75);
    }
  }
  else
  {
    uint64_t v22 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)&v76);
  return v22;
}

void sub_217011D84(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_217011E90(pxrInternal__aapl__pxrReserved__::UsdSkelCache **a1, const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkelQuery(*a1, a2, (uint64_t)&v8);
  if (v8
    || (v3[0] = "usdSkel/root.cpp",
        v3[1] = "operator()",
        v3[2] = 182,
        v3[3] = "auto pxrInternal__aapl__pxrReserved__::_ComputeExtent(const UsdGeomBoundable &, const UsdTimeCode &, con"
                "st GfMatrix4d *, VtVec3fArray *)::(anonymous class)::operator()(const UsdSkelSkeleton &, const UsdSkelBinding &) const",
        LOBYTE(v4) = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v3, "skelQuery", 0) & 1) != 0))
  {
    uint64_t v7 = 0;
    long long v5 = 0u;
    long long v6 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointSkelTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>();
  }
  sub_2168F83DC((uint64_t)&v10);
  sub_216FDD310(&v9);
  sub_216FDD340(&v8);
  return 0;
}

void sub_217012180(_Unwind_Exception *a1)
{
  sub_216FDAB24((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_217012218(uint64_t result, uint64_t a2)
{
  if (*(double *)a2 < *(double *)result) {
    *(void *)BOOL result = *(void *)a2;
  }
  double v2 = *(double *)(a2 + 8);
  if (v2 < *(double *)(result + 8)) {
    *(double *)(result + 8) = v2;
  }
  double v3 = *(double *)(a2 + 16);
  if (v3 < *(double *)(result + 16)) {
    *(double *)(result + 16) = v3;
  }
  if (*(double *)a2 > *(double *)(result + 24)) {
    *(void *)(result + 24) = *(void *)a2;
  }
  double v4 = *(double *)(a2 + 8);
  if (v4 > *(double *)(result + 32)) {
    *(double *)(result + 32) = v4;
  }
  double v5 = *(double *)(a2 + 16);
  if (v5 > *(double *)(result + 40)) {
    *(double *)(result + 40) = v5;
  }
  return result;
}

uint64_t sub_217012294(uint64_t a1)
{
  int v3 = 1;
  double v4 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v6);
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v3);
  *(void *)a1 = &unk_26C76FA70;
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return a1;
}

void sub_21701236C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_217012380()
{
  sub_2170132BC();
  sub_216779094(__p, "Skeleton");
  sub_2170133E8((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2170123D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  int v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76FA70;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdSkel/skeleton.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdSkelSkeleton pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::Get(const UsdStage"
                            "Ptr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76FA70;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_21701259C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94E88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94E88))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B94E80, "Skeleton");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B94E80, &dword_216758000);
    __cxa_guard_release(&qword_267B94E88);
  }
  int v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B94E80, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76FA70;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdSkel/skeleton.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdSkelSkeleton pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::Define(const UsdSt"
                            "agePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76FA70;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170127A8(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94E98, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94E98))
  {
    __cxa_guard_release(&qword_267B94E98);
  }
  return &qword_267B94E90;
}

void sub_217012850(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94EA8, memory_order_acquire) & 1) == 0)
  {
    double v2 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)__cxa_guard_acquire(&qword_267B94EA8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetStaticTfType(v2);
      byte_267B94EA0 = sub_216D16508((char *)&qword_267B94E90, v3, v4);
      __cxa_guard_release(&qword_267B94EA8);
    }
  }
  return byte_267B94EA0;
}

void sub_2170128D0(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  return &qword_267B94E90;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetJointsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  int v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    int v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 48), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170129A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::CreateJointsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8) {
    uint64_t v8 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 48), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 544), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetJointNamesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  int v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    int v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 40), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_217012B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::CreateJointNamesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8) {
    uint64_t v8 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 40), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 544), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetBindTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  int v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    int v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, v3, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_217012C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::CreateBindTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8) {
    uint64_t v8 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, v8, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 816), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetRestTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  int v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v3) {
    int v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v3 + 112), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_217012DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::CreateRestTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v8) {
    uint64_t v8 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v8 + 112), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 816), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  int v1 = (int)this;
  uint64_t v18 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94EC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94EC8))
  {
    int v3 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v3) {
      int v3 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    uint64_t v4 = *((void *)v3 + 6);
    uint64_t v14 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v5 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v5) {
      int v5 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    uint64_t v6 = *((void *)v5 + 5);
    uint64_t v15 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v15 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v7) {
      int v7 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    uint64_t v8 = *(void *)v7;
    uint64_t v16 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v16 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v9) {
      uint64_t v9 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    uint64_t v10 = *((void *)v9 + 14);
    uint64_t v17 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v17 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B94EB0, &v14, 4uLL);
    for (uint64_t i = 24; i != -8; i -= 8)
    {
      uint64_t v12 = *(uint64_t *)((char *)&v14 + i);
      if ((v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94EB0, &dword_216758000);
    __cxa_guard_release(&qword_267B94EC8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94EE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94EE8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)1);
    sub_2170131C4((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94ED0, &dword_216758000);
    __cxa_guard_release(&qword_267B94EE8);
  }
  if (v1) {
    return &qword_267B94ED0;
  }
  else {
    return &qword_267B94EB0;
  }
}

void sub_217013140(_Unwind_Exception *a1)
{
}

void *sub_2170131C4(uint64_t **a1)
{
  qword_267B94ED8 = 0;
  unk_267B94EE0 = 0;
  qword_267B94ED0 = 0;
  sub_216973388((char **)&qword_267B94ED0, ((unk_267B94EB8 - qword_267B94EB0) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B94ED0, (void *)qword_267B94ED8, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B94ED0, (void *)qword_267B94ED8, (uint64_t *)qword_267B94EB0, unk_267B94EB8, (unk_267B94EB8 - qword_267B94EB0) >> 3);
}

void sub_21701325C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_21701327C(uint64_t a1, const std::type_info *a2, char *a3)
{
  var8.__vftable = (std::type_info_vtbl *)sub_2170134A0;
  pxrInternal__aapl__pxrReserved__::UsdGeomRegisterComputeExtentFunction(v3, &var8, v4);
}

uint64_t *sub_2170132BC()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F1C36C((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_21701339C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_2170133E8(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_21701347C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170134A0(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1)
{
  unint64_t v2 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v14, a1);
  uint64_t v14 = &unk_26C76FA70;
  if (v15
    && (*(unsigned char *)(v15 + 57) & 8) == 0
    && (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible(v2) & 1) != 0
    || (uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)"usdSkel/skeleton.cpp",
        v10[0] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)"_ComputeExtent",
        v10[1] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)239,
        _OWORD v10[2] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)"BOOL pxrInternal__aapl__pxrReserved"
                                                                                     "__::_ComputeExtent(const UsdGeomBou"
                                                                                     "ndable &, const UsdTimeCode &, cons"
                                                                                     "t GfMatrix4d *, VtVec3fArray *)",
        v11[0] = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v9, "skel", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::UsdSkelCache::UsdSkelCache((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)v12);
    sub_216D16CFC((uint64_t)&v5, (uint64_t *)a1 + 1, (_DWORD *)a1 + 4);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v8, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    v8[0] = &unk_26C76FA70;
    pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkelQuery((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)v12, (const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v8, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)v8);
    if ((BYTE8(v6) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v6 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v6 + 1);
    sub_21697C414(&v6);
    if (*((void *)&v5 + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&v5 + 1));
    }
    if (v9
      || (*(void *)&long long v5 = "usdSkel/skeleton.cpp",
          *((void *)&v5 + 1) = "_ComputeExtent",
          *(void *)&long long v6 = 248,
          *((void *)&v6 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::_ComputeExtent(const UsdGeomBoundable &, const U"
                                 "sdTimeCode &, const GfMatrix4d *, VtVec3fArray *)",
          LOBYTE(v7) = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v5, "skelQuery", 0) & 1) != 0))
    {
      uint64_t v7 = 0;
      long long v5 = 0u;
      long long v6 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointSkelTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>();
    }
    char v3 = 1;
    sub_2168F83DC((uint64_t)v11);
    sub_216FDD310(v10);
    sub_216FDD340(&v9);
    if (v13) {
      sub_216784EC4(v13);
    }
  }
  else
  {
    char v3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)&v14);
  return v3 & 1;
}

void sub_2170136D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_216FDAB24((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  uint64_t v12 = *(std::__shared_weak_count **)(v10 - 80);
  if (v12) {
    sub_216784EC4(v12);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)(v10 - 72));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointLocalTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t *a1, const char *a2, char *a3)
{
  if (a2)
  {
    char v3 = (char)a3;
    if (*a1) {
      goto LABEL_12;
    }
    uint64_t v10 = "usdSkel/skeletonQuery.cpp";
    uint64_t v11 = "ComputeJointLocalTransforms";
    uint64_t v12 = 91;
    char v13 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointLocalTransforms(VtArray<Matrix4> *, U"
          "sdTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v14 = 0;
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
    char v9 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v10, "IsValid()", v8);
    uint64_t result = 0;
    if (v9)
    {
LABEL_12:
      int v6 = (v3 & 1) != 0
        || !a1[1]
        || pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsNull((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)(a1 + 2));
      return sub_2170138A0(a1, (uint64_t)a2, v6);
    }
  }
  else
  {
    uint64_t v10 = "usdSkel/skeletonQuery.cpp";
    uint64_t v11 = "ComputeJointLocalTransforms";
    uint64_t v12 = 87;
    char v13 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointLocalTransforms(VtArray<Matrix4> *, U"
          "sdTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::_HasMappableAnim(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this)
{
  return *((void *)this + 1)
      && !pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsNull((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)((char *)this + 16));
}

uint64_t sub_2170138A0(uint64_t *a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v5 = sub_216FE06A4(a1);
    return pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v5, a2);
  }
  else
  {
    if (!pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsSparse((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)(a1 + 2))
      || (uint64_t v7 = sub_216FE06A4(a1),
          (pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v7, a2) & 1) != 0))
    {
      uint64_t v30 = 0;
      long long v28 = 0u;
      long long v29 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeJointLocalTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>();
    }
    *(void *)&long long v28 = "usdSkel/skeletonQuery.cpp";
    *((void *)&v28 + 1) = "_ComputeJointLocalTransforms";
    *(void *)&long long v29 = 127;
    *((void *)&v29 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::_ComputeJointLocalTransforms(Vt"
                            "Array<Matrix4> *, UsdTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v30) = 0;
    Skeletounint64_t n = pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)a1, v8, v9);
    sub_216D16CFC((uint64_t)v21, Skeleton + 1, (_DWORD *)Skeleton + 4);
    sub_216D0162C((uint64_t)v21, &v26);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26);
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetPrim((pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *)(a1 + 1), (uint64_t)v14);
    sub_216D0162C((uint64_t)v14, &v19);
    uint64_t v12 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v19);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"%s -- Failed computing local space transforms: the the animation source (<%s>) is sparse, but the 'restTransforms' of the Skeleton are either unset, or do not match the number of joints.", v13, Text, v12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
    sub_21697C414(&v19);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
    sub_21697C414(&v16);
    if (v15) {
      sub_216D16E0C(v15);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
    sub_21697C414(&v26);
    if ((v25 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
    sub_21697C414(&v23);
    if (v22) {
      sub_216D16E0C(v22);
    }
    return 0;
  }
}

void sub_217013AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  sub_216D16AD8((uint64_t)va);
  sub_21697B754(va2);
  sub_216D16AD8((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointLocalTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t *a1, char *a2, char *a3)
{
  if (a2)
  {
    char v3 = (char)a3;
    if (*a1) {
      goto LABEL_12;
    }
    uint64_t v10 = "usdSkel/skeletonQuery.cpp";
    uint64_t v11 = "ComputeJointLocalTransforms";
    uint64_t v12 = 91;
    uint64_t v13 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointLocalTransforms(VtArray<Matrix4> *, U"
          "sdTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v14 = 0;
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
    char v9 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v10, "IsValid()", v8);
    uint64_t result = 0;
    if (v9)
    {
LABEL_12:
      int v6 = (v3 & 1) != 0
        || !a1[1]
        || pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsNull((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)(a1 + 2));
      return sub_217013C60(a1, (unint64_t *)a2, v6);
    }
  }
  else
  {
    uint64_t v10 = "usdSkel/skeletonQuery.cpp";
    uint64_t v11 = "ComputeJointLocalTransforms";
    uint64_t v12 = 87;
    uint64_t v13 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointLocalTransforms(VtArray<Matrix4> *, U"
          "sdTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  return result;
}

uint64_t sub_217013C60(uint64_t *a1, unint64_t *a2, int a3)
{
  if (a3)
  {
    uint64_t v5 = sub_216FE06A4(a1);
    return pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(v5, a2);
  }
  else
  {
    if (!pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsSparse((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)(a1 + 2))
      || (uint64_t v7 = sub_216FE06A4(a1),
          (pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(v7, a2) & 1) != 0))
    {
      uint64_t v30 = 0;
      long long v28 = 0u;
      long long v29 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeJointLocalTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>();
    }
    *(void *)&long long v28 = "usdSkel/skeletonQuery.cpp";
    *((void *)&v28 + 1) = "_ComputeJointLocalTransforms";
    *(void *)&long long v29 = 127;
    *((void *)&v29 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::_ComputeJointLocalTransforms(Vt"
                            "Array<Matrix4> *, UsdTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v30) = 0;
    Skeletounint64_t n = pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)a1, v8, v9);
    sub_216D16CFC((uint64_t)v21, Skeleton + 1, (_DWORD *)Skeleton + 4);
    sub_216D0162C((uint64_t)v21, &v26);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26);
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetPrim((pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *)(a1 + 1), (uint64_t)v14);
    sub_216D0162C((uint64_t)v14, &v19);
    uint64_t v12 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v19);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__ *)"%s -- Failed computing local space transforms: the the animation source (<%s>) is sparse, but the 'restTransforms' of the Skeleton are either unset, or do not match the number of joints.", v13, Text, v12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
    sub_21697C414(&v19);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
    sub_21697C414(&v16);
    if (v15) {
      sub_216D16E0C(v15);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
    sub_21697C414(&v26);
    if ((v25 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
    sub_21697C414(&v23);
    if (v22) {
      sub_216D16E0C(v22);
    }
    return 0;
  }
}

void sub_217013EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  sub_216D16AD8((uint64_t)va);
  sub_21697B754(va2);
  sub_216D16AD8((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointSkelTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t *a1, const char *a2, char *a3)
{
  if (a2)
  {
    char v3 = (char)a3;
    if (*a1) {
      goto LABEL_12;
    }
    uint64_t v10 = "usdSkel/skeletonQuery.cpp";
    uint64_t v11 = "ComputeJointSkelTransforms";
    uint64_t v12 = 161;
    uint64_t v13 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointSkelTransforms(VtArray<Matrix4> *, Us"
          "dTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v14 = 0;
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
    char v9 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v10, "IsValid()", v8);
    uint64_t result = 0;
    if (v9)
    {
LABEL_12:
      int v6 = (v3 & 1) != 0
        || !a1[1]
        || pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsNull((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)(a1 + 2));
      return sub_217014020(a1, (uint64_t)a2, v6);
    }
  }
  else
  {
    uint64_t v10 = "usdSkel/skeletonQuery.cpp";
    uint64_t v11 = "ComputeJointSkelTransforms";
    uint64_t v12 = 157;
    uint64_t v13 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointSkelTransforms(VtArray<Matrix4> *, Us"
          "dTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  return result;
}

uint64_t sub_217014020(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v3 = a2;
  if (a3)
  {
    uint64_t v5 = sub_216FE06A4(a1);
    return pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointSkelRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v5, v3);
  }
  else
  {
    if (a2)
    {
      char v14 = 0;
      memset(v13, 0, sizeof(v13));
      if (sub_2170138A0(a1, (uint64_t)v13, 0))
      {
        uint64_t v8 = (char **)(sub_216FE06A4(a1) + 88);
        uint64_t v7 = *v8;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        int v23 = &v15;
        sub_216902248((unint64_t *)v3, (unint64_t)v7, &v23);
        char v9 = v14;
        uint64_t v10 = *(char **)&v13[0];
        sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v3, v11, v12);
        uint64_t v3 = pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms(v8, v9, v10, *(void *)(v3 + 32), *(char **)v3, 0);
      }
      else
      {
        uint64_t v3 = 0;
      }
      sub_2168F83DC((uint64_t)v13);
    }
    else
    {
      *(void *)&long long v15 = "usdSkel/skeletonQuery.cpp";
      *((void *)&v15 + 1) = "_ComputeJointSkelTransforms";
      *(void *)&long long v16 = 190;
      *((void *)&v16 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::_ComputeJointSkelTransforms(V"
                              "tArray<Matrix4> *, UsdTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
      LOBYTE(v17) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' is null");
    }
    return v3;
  }
}

void sub_21701416C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointSkelTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t *a1, const char *a2, char *a3)
{
  if (a2)
  {
    char v3 = (char)a3;
    if (*a1) {
      goto LABEL_12;
    }
    uint64_t v10 = "usdSkel/skeletonQuery.cpp";
    uint64_t v11 = "ComputeJointSkelTransforms";
    uint64_t v12 = 161;
    uint64_t v13 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointSkelTransforms(VtArray<Matrix4> *, Us"
          "dTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v14 = 0;
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
    char v9 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v10, "IsValid()", v8);
    uint64_t result = 0;
    if (v9)
    {
LABEL_12:
      int v6 = (v3 & 1) != 0
        || !a1[1]
        || pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsNull((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)(a1 + 2));
      return sub_2170142A4(a1, (uint64_t)a2, v6);
    }
  }
  else
  {
    uint64_t v10 = "usdSkel/skeletonQuery.cpp";
    uint64_t v11 = "ComputeJointSkelTransforms";
    uint64_t v12 = 157;
    uint64_t v13 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointSkelTransforms(VtArray<Matrix4> *, Us"
          "dTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  return result;
}

uint64_t sub_2170142A4(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v3 = a2;
  if (a3)
  {
    uint64_t v5 = sub_216FE06A4(a1);
    return pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointSkelRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(v5, v3);
  }
  else
  {
    if (a2)
    {
      char v14 = 0;
      memset(v13, 0, sizeof(v13));
      if (sub_217013C60(a1, (unint64_t *)v13, 0))
      {
        uint64_t v8 = (char **)(sub_216FE06A4(a1) + 88);
        uint64_t v7 = *v8;
        long long v17 = 0u;
        long long v18 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        long long v19 = &v15;
        sub_216902ED0((unint64_t *)v3, (unint64_t)v7, &v19);
        char v9 = v14;
        uint64_t v10 = *(char **)&v13[0];
        sub_216903174((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v3, v11, v12);
        uint64_t v3 = pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms(v8, v9, v10, *(void *)(v3 + 32), *(char **)v3, 0);
      }
      else
      {
        uint64_t v3 = 0;
      }
      sub_2168F83DC((uint64_t)v13);
    }
    else
    {
      *(void *)&long long v15 = "usdSkel/skeletonQuery.cpp";
      *((void *)&v15 + 1) = "_ComputeJointSkelTransforms";
      *(void *)&long long v16 = 190;
      *((void *)&v16 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::_ComputeJointSkelTransforms(V"
                              "tArray<Matrix4> *, UsdTimeCode, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
      LOBYTE(v17) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' is null");
    }
    return v3;
  }
}

void sub_2170143E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointRestRelativeTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(void *a1, char *a2, char *a3)
{
  if (!a2)
  {
    *(void *)&long long v40 = "usdSkel/skeletonQuery.cpp";
    *((void *)&v40 + 1) = "ComputeJointRestRelativeTransforms";
    *(void *)&long long v41 = 232;
    *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointRestRelativeTransfo"
                            "rms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v42) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  if (!*a1)
  {
    *(void *)&long long v40 = "usdSkel/skeletonQuery.cpp";
    *((void *)&v40 + 1) = "ComputeJointRestRelativeTransforms";
    *(void *)&long long v41 = 236;
    *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointRestRelativeTransfo"
                            "rms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v42) = 0;
    uint64_t v33 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v40, "IsValid()", v33) & 1) == 0) {
      return 0;
    }
  }
  if (!a1[1]
    || pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsNull((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)(a1 + 2)))
  {
    unint64_t v5 = *(void *)pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetTopology((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)a1, a2, a3);
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v40, 1.0);
    sub_2168F845C(a2);
    *(void *)&v37[0] = &v40;
    sub_216902248((unint64_t *)a2, v5, (long long **)v37);
    return 1;
  }
  uint64_t v38 = 0;
  memset(v37, 0, sizeof(v37));
  uint64_t v7 = sub_216FE06A4(a1);
  if (!pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalInverseRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v7, v37))
  {
    *(void *)&long long v40 = "usdSkel/skeletonQuery.cpp";
    *((void *)&v40 + 1) = "ComputeJointRestRelativeTransforms";
    *(void *)&long long v41 = 263;
    *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointRestRelativeTransfo"
                            "rms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v42) = 0;
    Skeletounint64_t n = pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)a1, v8, v9);
    sub_216D16CFC((uint64_t)&v34, Skeleton + 1, (_DWORD *)Skeleton + 4);
    sub_216D0162C((uint64_t)&v34, (int *)&v39);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v39);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v40, (pxrInternal__aapl__pxrReserved__ *)"%s -- Failed computing rest-relative transforms: the 'restTransforms' of the Skeleton are either unset, or do not have a matching number of joints.", v32, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
    sub_21697C414(&v39);
    if ((BYTE8(v35) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v35 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
    sub_21697C414(&v35);
    if (*((void *)&v34 + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&v34 + 1));
    }
    goto LABEL_24;
  }
  int v36 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  if (!sub_2170138A0(a1, (uint64_t)&v34, 0))
  {
LABEL_23:
    sub_2168F83DC((uint64_t)&v34);
LABEL_24:
    char v29 = 1;
    goto LABEL_25;
  }
  unint64_t v10 = v34;
  if ((void)v34 != *(void *)&v37[0])
  {
    *(void *)&long long v40 = "usdSkel/skeletonQuery.cpp";
    *((void *)&v40 + 1) = "ComputeJointRestRelativeTransforms";
    *(void *)&long long v41 = 250;
    *((void *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointRestRelativeTransfo"
                            "rms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v42) = 0;
    if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v40, "localXforms.size() == invRestXforms.size()", 0))
    {
      unint64_t v10 = v34;
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_11:
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v39 = &v40;
  sub_216902248((unint64_t *)a2, v10, &v39);
  uint64_t v11 = v36;
  uint64_t v12 = v38;
  sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v13, v14);
  uint64_t v15 = *(void *)a2;
  if (*(void *)a2)
  {
    long long v16 = (_OWORD *)*((void *)a2 + 4);
    do
    {
      long long v17 = *v11;
      long long v18 = v11[1];
      long long v19 = v11[3];
      long long v42 = v11[2];
      long long v43 = v19;
      long long v40 = v17;
      long long v41 = v18;
      long long v20 = v11[4];
      long long v21 = v11[5];
      long long v22 = v11[7];
      long long v46 = v11[6];
      long long v47 = v22;
      long long v44 = v20;
      long long v45 = v21;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v40, v12);
      long long v23 = v40;
      long long v24 = v41;
      long long v25 = v43;
      v16[2] = v42;
      v16[3] = v25;
      *long long v16 = v23;
      v16[1] = v24;
      long long v26 = v44;
      long long v27 = v45;
      long long v28 = v47;
      v16[6] = v46;
      v16[7] = v28;
      void v16[4] = v26;
      v16[5] = v27;
      v16 += 8;
      v12 += 16;
      v11 += 8;
      --v15;
    }
    while (v15);
  }
  sub_2168F83DC((uint64_t)&v34);
  char v29 = 0;
LABEL_25:
  sub_2168F83DC((uint64_t)v37);
  return (v29 & 1) == 0;
}

void sub_217014760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this, const char *a2, char *a3)
{
  if (*(void *)this) {
    return (uint64_t *)(sub_216FE06A4((uint64_t *)this) + 24);
  }
  v6[0] = "usdSkel/skeletonQuery.cpp";
  v6[1] = "GetSkeleton";
  v6[2] = 420;
  v6[3] = "const UsdSkelSkeleton &pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton() const";
  char v7 = 0;
  unint64_t v5 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
  if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "IsValid()", v5)) {
    return (uint64_t *)(sub_216FE06A4((uint64_t *)this) + 24);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94F08, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267B94F08))
  {
    return qword_267B94EF0;
  }
  sub_217015D2C((uint64_t)v6);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)qword_267B94EF0, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v6);
  qword_267B94EF0[0] = (uint64_t)&unk_26C76FA70;
  sub_216D16AD8((uint64_t)v6);
  __cxa_atexit((void (*)(void *))pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton, qword_267B94EF0, &dword_216758000);
  __cxa_guard_release(&qword_267B94F08);
  return qword_267B94EF0;
}

void sub_2170148F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  __cxa_guard_abort(&qword_267B94F08);
  _Unwind_Resume(a1);
}

long long *pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetTopology(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this, const char *a2, char *a3)
{
  if (*(void *)this) {
    return (long long *)(sub_216FE06A4((uint64_t *)this) + 88);
  }
  v6[0] = "usdSkel/skeletonQuery.cpp";
  v6[1] = "GetTopology";
  v6[2] = 438;
  v6[3] = "const UsdSkelTopology &pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetTopology() const";
  char v7 = 0;
  unint64_t v5 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
  if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "IsValid()", v5)) {
    return (long long *)(sub_216FE06A4((uint64_t *)this) + 88);
  }
  if (atomic_load_explicit((atomic_uchar *volatile)&qword_267B94F38, memory_order_acquire)) {
    return &xmmword_267B94F10;
  }
  if (__cxa_guard_acquire(&qword_267B94F38))
  {
    qword_267B94F30 = 0;
    xmmword_267B94F10 = 0u;
    unk_267B94F20 = 0u;
    __cxa_atexit((void (*)(void *))sub_217015D80, &xmmword_267B94F10, &dword_216758000);
    __cxa_guard_release(&qword_267B94F38);
  }
  return &xmmword_267B94F10;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointRestRelativeTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this, char *a2, char *a3)
{
  if (!a2)
  {
    *(void *)&long long v34 = "usdSkel/skeletonQuery.cpp";
    *((void *)&v34 + 1) = "ComputeJointRestRelativeTransforms";
    *(void *)&long long v35 = 232;
    *((void *)&v35 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointRestRelativeTransfo"
                            "rms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v36) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  if (!*(void *)this)
  {
    *(void *)&long long v34 = "usdSkel/skeletonQuery.cpp";
    *((void *)&v34 + 1) = "ComputeJointRestRelativeTransforms";
    *(void *)&long long v35 = 236;
    *((void *)&v35 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointRestRelativeTransfo"
                            "rms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v36) = 0;
    long long v27 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v34, "IsValid()", v27) & 1) == 0) {
      return 0;
    }
  }
  if (!*((void *)this + 1)
    || pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsNull((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)((char *)this + 16)))
  {
    unint64_t v5 = *(void *)pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetTopology(this, a2, a3);
    pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal((uint64_t)&v34, 1.0);
    sub_2168F845C(a2);
    *(void *)&v31[0] = &v34;
    sub_216902ED0((unint64_t *)a2, v5, (long long **)v31);
    return 1;
  }
  unint64_t v32 = 0;
  memset(v31, 0, sizeof(v31));
  uint64_t v7 = sub_216FE06A4((uint64_t *)this);
  if (!pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointLocalInverseRestTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(v7, v31))
  {
    *(void *)&long long v34 = "usdSkel/skeletonQuery.cpp";
    *((void *)&v34 + 1) = "ComputeJointRestRelativeTransforms";
    *(void *)&long long v35 = 263;
    *((void *)&v35 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointRestRelativeTransfo"
                            "rms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v36) = 0;
    Skeletounint64_t n = pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton(this, v8, v9);
    sub_216D16CFC((uint64_t)&v28, Skeleton + 1, (_DWORD *)Skeleton + 4);
    sub_216D0162C((uint64_t)&v28, (int *)&v33);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v34, (pxrInternal__aapl__pxrReserved__ *)"%s -- Failed computing rest-relative transforms: the 'restTransforms' of the Skeleton are either unset, or do not have a matching number of joints.", v26, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
    sub_21697C414(&v33);
    if ((BYTE8(v29) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v29 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v29 + 1);
    sub_21697C414(&v29);
    if (*((void *)&v28 + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&v28 + 1));
    }
    goto LABEL_24;
  }
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  if (!sub_217013C60((uint64_t *)this, (unint64_t *)&v28, 0))
  {
LABEL_23:
    sub_2168F83DC((uint64_t)&v28);
LABEL_24:
    char v23 = 1;
    goto LABEL_25;
  }
  unint64_t v10 = v28;
  if ((void)v28 != *(void *)&v31[0])
  {
    *(void *)&long long v34 = "usdSkel/skeletonQuery.cpp";
    *((void *)&v34 + 1) = "ComputeJointRestRelativeTransforms";
    *(void *)&long long v35 = 250;
    *((void *)&v35 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointRestRelativeTransfo"
                            "rms(VtArray<Matrix4> *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v36) = 0;
    if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v34, "localXforms.size() == invRestXforms.size()", 0))
    {
      unint64_t v10 = v28;
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_11:
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v33 = &v34;
  sub_216902ED0((unint64_t *)a2, v10, &v33);
  uint64_t v11 = v30;
  uint64_t v12 = v32;
  sub_216903174((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v13, v14);
  uint64_t v15 = *(void *)a2;
  if (*(void *)a2)
  {
    long long v16 = (_OWORD *)*((void *)a2 + 4);
    do
    {
      long long v17 = *v11;
      long long v18 = v11[1];
      long long v19 = v11[3];
      long long v36 = v11[2];
      long long v37 = v19;
      long long v34 = v17;
      long long v35 = v18;
      pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=((float *)&v34, v12);
      long long v20 = v34;
      long long v21 = v35;
      long long v22 = v37;
      v16[2] = v36;
      v16[3] = v22;
      *long long v16 = v20;
      v16[1] = v21;
      v16 += 4;
      v12 += 16;
      v11 += 4;
      --v15;
    }
    while (v15);
  }
  sub_2168F83DC((uint64_t)&v28);
  char v23 = 0;
LABEL_25:
  sub_2168F83DC((uint64_t)v31);
  return (v23 & 1) == 0;
}

void sub_217014D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointWorldTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (a3) {
      pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointLocalTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>();
    }
    uint64_t v4 = "usdSkel/skeletonQuery.cpp";
    unint64_t v5 = "ComputeJointWorldTransforms";
    uint64_t v6 = 298;
    uint64_t v7 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointWorldTransforms(VtArray<Matrix4> *, Us"
         "dGeomXformCache *, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v8) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v4, 1, (pxrInternal__aapl__pxrReserved__ *)"'xfCache' is null.");
  }
  else
  {
    uint64_t v4 = "usdSkel/skeletonQuery.cpp";
    unint64_t v5 = "ComputeJointWorldTransforms";
    uint64_t v6 = 293;
    uint64_t v7 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointWorldTransforms(VtArray<Matrix4> *, Us"
         "dGeomXformCache *, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v8) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v4, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' is null");
  }
  return 0;
}

void sub_217014F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this@<X0>, const char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  Skeletounint64_t n = pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton(this, a2, a3);

  return sub_216D16CFC(a4, Skeleton + 1, (_DWORD *)Skeleton + 4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointWorldTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (a3)
    {
      uint64_t v11 = 0;
      long long v9 = 0u;
      long long v10 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointLocalTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>();
    }
    uint64_t v4 = "usdSkel/skeletonQuery.cpp";
    unint64_t v5 = "ComputeJointWorldTransforms";
    uint64_t v6 = 298;
    uint64_t v7 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointWorldTransforms(VtArray<Matrix4> *, Us"
         "dGeomXformCache *, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v8) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v4, 1, (pxrInternal__aapl__pxrReserved__ *)"'xfCache' is null.");
  }
  else
  {
    uint64_t v4 = "usdSkel/skeletonQuery.cpp";
    unint64_t v5 = "ComputeJointWorldTransforms";
    uint64_t v6 = 293;
    uint64_t v7 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeJointWorldTransforms(VtArray<Matrix4> *, Us"
         "dGeomXformCache *, BOOL) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v8) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v4, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' is null");
  }
  return 0;
}

void sub_2170151E8(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 96);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeSkinningTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(void *a1, const char *a2, char *a3)
{
  if (a2)
  {
    if (*a1) {
      goto LABEL_3;
    }
    uint64_t v6 = "usdSkel/skeletonQuery.cpp";
    uint64_t v7 = "ComputeSkinningTransforms";
    uint64_t v8 = 337;
    long long v9 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeSkinningTransforms(VtArray<Matrix4> *, UsdT"
         "imeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v10 = 0;
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
    char v5 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v6, "IsValid()", v4);
    uint64_t result = 0;
    if (v5) {
LABEL_3:
    }
      sub_217015310();
  }
  else
  {
    uint64_t v6 = "usdSkel/skeletonQuery.cpp";
    uint64_t v7 = "ComputeSkinningTransforms";
    uint64_t v8 = 333;
    long long v9 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeSkinningTransforms(VtArray<Matrix4> *, UsdT"
         "imeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v6, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  return result;
}

void sub_217015310()
{
}

void sub_2170155BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_216D16AD8((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeSkinningTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(void *a1, const char *a2, char *a3)
{
  if (a2)
  {
    if (*a1) {
      goto LABEL_3;
    }
    uint64_t v6 = "usdSkel/skeletonQuery.cpp";
    uint64_t v7 = "ComputeSkinningTransforms";
    uint64_t v8 = 337;
    uint64_t v9 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeSkinningTransforms(VtArray<Matrix4> *, UsdT"
         "imeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v10 = 0;
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
    char v5 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v6, "IsValid()", v4);
    uint64_t result = 0;
    if (v5) {
LABEL_3:
    }
      sub_217015704();
  }
  else
  {
    uint64_t v6 = "usdSkel/skeletonQuery.cpp";
    uint64_t v7 = "ComputeSkinningTransforms";
    uint64_t v8 = 333;
    uint64_t v9 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::ComputeSkinningTransforms(VtArray<Matrix4> *, UsdT"
         "imeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v6, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
  return result;
}

void sub_217015704()
{
}

void sub_21701598C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_216D16AD8((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetJointWorldBindTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t *a1, const char *a2, char *a3)
{
  if (*a1) {
    goto LABEL_2;
  }
  v9[0] = "usdSkel/skeletonQuery.cpp";
  v9[1] = "GetJointWorldBindTransforms";
  _OWORD v9[2] = 394;
  void v9[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetJointWorldBindTransforms(VtArray<Matrix4> *) c"
          "onst [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  char v10 = 0;
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
  char v8 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "IsValid()", v7);
  uint64_t result = 0;
  if (v8)
  {
LABEL_2:
    uint64_t v5 = sub_216FE06A4(a1);
    return pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointWorldBindTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v5, (uint64_t)a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetJointWorldBindTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t *a1, char *a2, char *a3)
{
  if (*a1) {
    goto LABEL_2;
  }
  v9[0] = "usdSkel/skeletonQuery.cpp";
  v9[1] = "GetJointWorldBindTransforms";
  _OWORD v9[2] = 394;
  void v9[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetJointWorldBindTransforms(VtArray<Matrix4> *) c"
          "onst [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
  char v10 = 0;
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3);
  char v8 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "IsValid()", v7);
  uint64_t result = 0;
  if (v8)
  {
LABEL_2:
    uint64_t v5 = sub_216FE06A4(a1);
    return pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::GetJointWorldBindTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(v5, (unint64_t *)a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::UsdSkelSkeletonQuery(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *a3)
{
  *(void *)a1 = *a2;
  sub_2168BD80C((uint64_t *)a1);
  *(void *)(a1 + 8) = *(void *)a3;
  sub_2168BD80C((uint64_t *)(a1 + 8));
  uint64_t v6 = (long long *)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::UsdSkelAnimMapper((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)(a1 + 16));
  if (*a2 && *(void *)a3)
  {
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointOrder(a3, v7, v8, (uint64_t)v12);
    uint64_t v9 = sub_216FE06A4(a2);
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::UsdSkelAnimMapper((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)&v13, (uint64_t)v12, v9 + 48);
    *uint64_t v6 = v13;
    if (v6 != &v13)
    {
      sub_2168F83DC(a1 + 32);
      long long v10 = v15;
      *(_OWORD *)(a1 + 32) = v14;
      *(_OWORD *)(a1 + 48) = v10;
      long long v14 = 0u;
      long long v15 = 0u;
      *(void *)(a1 + 64) = v16;
      uint64_t v16 = 0;
    }
    *(_DWORD *)(a1 + 72) = v17;
    sub_2168F83DC((uint64_t)&v14);
    sub_2169B2E0C(v12);
  }
  return a1;
}

void sub_217015C20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC(v4);
  sub_2169B2E0C((uint64_t *)va);
  sub_2168F83DC((uint64_t)(v2 + 4));
  sub_216FDD310(v3);
  sub_216FDD340(v2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::HasBindPose(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *)sub_216FE06A4((uint64_t *)this);

  return pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::HasBindPose(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::HasRestPose(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition *)sub_216FE06A4((uint64_t *)this);

  return pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition::HasRestPose(v1);
}

unint64_t pxrInternal__aapl__pxrReserved__::hash_value(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *a2)
{
  uint64_t v3 = 0;
  char v4 = 0;
  sub_217016034((uint64_t)&v3, (uint64_t *)this, (pxrInternal__aapl__pxrReserved__ *)((char *)this + 8));
  return bswap64(0x9E3779B97F4A7C55 * v3);
}

uint64_t sub_217015D2C(uint64_t a1)
{
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(void *)(a1 + 24) = 0;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetAnimQuery(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this)
{
  return (uint64_t)this + 8;
}

uint64_t sub_217015D80(uint64_t a1)
{
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetMapper(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this)
{
  return (uint64_t)this + 16;
}

double pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetJointOrder@<D0>(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this@<X0>, const char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)this
    || (v13[0] = "usdSkel/skeletonQuery.cpp",
        v13[1] = "GetJointOrder",
        _OWORD v13[2] = 456,
        void v13[3] = "VtTokenArray pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetJointOrder() const",
        char v14 = 0,
        uint64_t v11 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skeleton query.", a2, a3), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v13, "IsValid()", v11) & 1) != 0))
  {
    uint64_t v6 = sub_216FE06A4((uint64_t *)this);
    long long v7 = *(_OWORD *)(v6 + 48);
    long long v8 = *(_OWORD *)(v6 + 64);
    *(_OWORD *)a4 = v7;
    *(_OWORD *)(a4 + 16) = v8;
    uint64_t v9 = *(void *)(v6 + 80);
    *(void *)(a4 + 32) = v9;
    if (v9)
    {
      long long v10 = (atomic_ullong *)(v9 - 16);
      if (*(void *)(a4 + 24)) {
        long long v10 = *(atomic_ullong **)(a4 + 24);
      }
      atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *(void *)(a4 + 32) = 0;
    *(void *)&long long v7 = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return *(double *)&v7;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetDescription(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this@<X0>, const char *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  if (*(void *)this)
  {
    Skeletounint64_t n = pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetSkeleton(this, a2, a3);
    sub_216D16CFC((uint64_t)v17, Skeleton + 1, (_DWORD *)Skeleton + 4);
    sub_216D0162C((uint64_t)v17, &v22);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v22);
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetPrim((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)((char *)this + 8), (uint64_t)v10);
    sub_216D0162C((uint64_t)v10, &v15);
    long long v7 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"UsdSkelSkeletonQuery (skel = <%s>, aniuint64_t m = <%s>)", v8, v9, Text, v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
    sub_21697C414(&v15);
    if ((v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
    sub_21697C414(&v12);
    if (v11) {
      sub_216D16E0C(v11);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
    sub_21697C414(&v22);
    if ((v21 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
    sub_21697C414(&v19);
    if (v18) {
      sub_216D16E0C(v18);
    }
  }
  else
  {
    sub_216779094(a4, "invalid UsdSkelSkeletonQuery");
  }
}

void sub_217015FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_216D16AD8((uint64_t)va);
  sub_21697B754((_DWORD *)(v3 - 40));
  sub_216D16AD8((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_217016034(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *a3)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v3 += (unint64_t)(*(void *)a1 + v3 + (*(void *)a1 + v3) * (*(void *)a1 + v3)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v3;
  return sub_217016068(a1, a3);
}

unint64_t sub_217016068(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *a2)
{
  unint64_t result = sub_2170160B8(a2);
  if (*(unsigned char *)(a1 + 8)) {
    result += (*(void *)a1 + result + (*(void *)a1 + result) * (*(void *)a1 + result)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = result;
  return result;
}

unint64_t sub_2170160B8(pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetPrim(a1, (uint64_t)&v3);
  uint64_t v8 = 0;
  char v9 = 0;
  sub_216D6EF4C((uint64_t)&v8, &v3, &v4, &v5, &v7);
  uint64_t v1 = v8;
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
  return bswap64(0x9E3779B97F4A7C55 * v1);
}

void sub_217016160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

tbb::task_group_context **pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedPoints<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, long long *a2, uint64_t *a3)
{
  unsigned int v3 = (tbb::task_group_context **)a3;
  if (a3)
  {
    uint64_t v36 = 0;
    memset(v35, 0, sizeof(v35));
    uint64_t v34 = 0;
    memset(v33, 0, sizeof(v33));
    if (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeVaryingJointInfluences(a1, *a3, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v35, v33))
    {
      long long v7 = a2[1];
      long long v30 = *a2;
      long long v31 = v7;
      uint64_t v8 = (char *)*((void *)a2 + 4);
      unint64_t v32 = v8;
      if (v8)
      {
        char v9 = (atomic_ullong *)(v8 - 16);
        if (*((void *)&v31 + 1)) {
          char v9 = (atomic_ullong *)*((void *)&v31 + 1);
        }
        atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
      }
      if (*(void *)(a1 + 272)) {
        pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>();
      }
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetGeomBindTransform(a1, v6, (uint64_t)&v22);
      pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetSkinningMethod((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)a1, v10, &v21);
      uint64_t v11 = v32;
      unint64_t v12 = v30;
      uint64_t v13 = v36;
      uint64_t v14 = v35[0];
      uint64_t v15 = v34;
      uint64_t v16 = v33[0];
      unsigned int v17 = *(_DWORD *)(a1 + 32);
      sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v3, v18, v19);
      unsigned int v3 = (tbb::task_group_context **)pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints(&v21, (uint64_t)&v22, v11, v12, v13, v14, v15, v16, v17, v3[4], (unint64_t)*v3, 0);
      if ((v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      sub_2168F83DC((uint64_t)&v30);
    }
    else
    {
      unsigned int v3 = 0;
    }
    sub_2168F83DC((uint64_t)v33);
    sub_2168F83DC((uint64_t)v35);
  }
  else
  {
    *(void *)&long long v22 = "usdSkel/skinningQuery.cpp";
    *((void *)&v22 + 1) = "ComputeSkinnedPoints";
    *(void *)&long long v23 = 350;
    *((void *)&v23 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedPoints(const VtAr"
                            "ray<Matrix4> &, VtVec3fArray *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v24) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1, (pxrInternal__aapl__pxrReserved__ *)"'points' pointer is null.");
  }
  return v3;
}

void sub_217016360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_2168F83DC((uint64_t)&a31);
  sub_2168F83DC(v31 - 192);
  sub_2168F83DC(v31 - 144);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeVaryingJointInfluences(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3, unint64_t *a4)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeJointInfluences(a1, a3);
  if (result)
  {
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v10) {
      uint64_t v10 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    if ((*(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFF8) != (*((void *)v10 + 17) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v11 = *(void *)a3;
      uint64_t v12 = *(int *)(a1 + 32);
      if (*(void *)a3 != v12 * a2)
      {
        uint64_t v14 = "usdSkel/skinningQuery.cpp";
        uint64_t v15 = "ComputeVaryingJointInfluences";
        uint64_t v16 = 332;
        unsigned int v17 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeVaryingJointInfluences(size_t, VtIntAr"
              "ray *, VtFloatArray *, UsdTimeCode) const";
        char v18 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v14, (pxrInternal__aapl__pxrReserved__ *)"Unexpected size of jointIndices and jointWeights arrays [%zu]: varying influences should be sized to numPoints [%zu] * numInfluencesPerComponent [%d].", v9, v11, a2, v12);
        return 0;
      }
      return 1;
    }
    uint64_t result = pxrInternal__aapl__pxrReserved__::UsdSkelExpandConstantInfluencesToVarying((unint64_t *)a3, a2);
    if (result)
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::UsdSkelExpandConstantInfluencesToVarying(a4, a2);
      if (result)
      {
        if (*(void *)a3 == *a4) {
          return 1;
        }
        uint64_t v14 = "usdSkel/skinningQuery.cpp";
        uint64_t v15 = "ComputeVaryingJointInfluences";
        uint64_t v16 = 326;
        unsigned int v17 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeVaryingJointInfluences(size_t, VtIntAr"
              "ray *, VtFloatArray *, UsdTimeCode) const";
        char v18 = 0;
        char v13 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v14, "indices->size() == weights->size()", 0);
        uint64_t result = 0;
        if (v13) {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetGeomBindTransform@<X0>(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, uint64_t a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)(a1 + 176), a2))pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(); {

  }
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal(a3, 1.0);
}

void *pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetSkinningMethod@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)((char *)this + 144), a2))pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>(); {
  char v4 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  if (!v4) {
    char v4 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }

  return sub_2168D2318(a3, (void *)v4 + 3);
}

tbb::task_group_context **pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedPoints<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t a1, long long *a2, uint64_t *a3)
{
  unsigned int v3 = (tbb::task_group_context **)a3;
  if (a3)
  {
    uint64_t v30 = 0;
    memset(v29, 0, sizeof(v29));
    uint64_t v28 = 0;
    memset(v27, 0, sizeof(v27));
    if (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeVaryingJointInfluences(a1, *a3, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v29, (unint64_t *)v27))
    {
      long long v7 = a2[1];
      long long v24 = *a2;
      long long v25 = v7;
      uint64_t v8 = (char *)*((void *)a2 + 4);
      long long v26 = v8;
      if (v8)
      {
        char v9 = (atomic_ullong *)(v8 - 16);
        if (*((void *)&v25 + 1)) {
          char v9 = (atomic_ullong *)*((void *)&v25 + 1);
        }
        atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
      }
      if (*(void *)(a1 + 272)) {
        pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>();
      }
      memset(v23, 0, sizeof(v23));
      pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetGeomBindTransform(a1, v6, (uint64_t)v21);
      pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v23, (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v21);
      pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetSkinningMethod((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)a1, v10, v21);
      uint64_t v11 = v26;
      unint64_t v12 = v24;
      uint64_t v13 = v30;
      uint64_t v14 = *(void *)&v29[0];
      uint64_t v15 = v28;
      uint64_t v16 = *(void *)&v27[0];
      unsigned int v17 = *(_DWORD *)(a1 + 32);
      sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v3, v18, v19);
      unsigned int v3 = (tbb::task_group_context **)pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints(v21, (uint64_t)v23, v11, v12, v13, v14, v15, v16, v17, v3[4], (unint64_t)*v3, 0);
      if ((v21[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v21[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      sub_2168F83DC((uint64_t)&v24);
    }
    else
    {
      unsigned int v3 = 0;
    }
    sub_2168F83DC((uint64_t)v27);
    sub_2168F83DC((uint64_t)v29);
  }
  else
  {
    v21[0] = "usdSkel/skinningQuery.cpp";
    v21[1] = "ComputeSkinnedPoints";
    v21[2] = 350;
    void v21[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedPoints(const VtArray<Matrix4> &,"
             " VtVec3fArray *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v21, 1, (pxrInternal__aapl__pxrReserved__ *)"'points' pointer is null.");
  }
  return v3;
}

void sub_21701683C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_2168F83DC((uint64_t)&a37);
  sub_2168F83DC(v37 - 192);
  sub_2168F83DC(v37 - 144);
  _Unwind_Resume(a1);
}

tbb::task_group_context **pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedNormals<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, long long *a2, uint64_t *a3)
{
  unsigned int v3 = (tbb::task_group_context **)a3;
  if (a3)
  {
    uint64_t v50 = 0;
    memset(v49, 0, sizeof(v49));
    uint64_t v48 = 0;
    memset(v47, 0, sizeof(v47));
    if (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeVaryingJointInfluences(a1, *a3, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v49, v47))
    {
      long long v6 = a2[1];
      long long v44 = *a2;
      long long v45 = v6;
      uint64_t v7 = *((void *)a2 + 4);
      uint64_t v46 = v7;
      if (v7)
      {
        uint64_t v8 = (atomic_ullong *)(v7 - 16);
        if (*((void *)&v45 + 1)) {
          uint64_t v8 = (atomic_ullong *)*((void *)&v45 + 1);
        }
        atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
      }
      if (*(void *)(a1 + 272)) {
        pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4d>();
      }
      sub_2169C1040((uint64_t)v42, v44);
      sub_2169C195C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v42, v9, v10);
      uint64_t v13 = v42[0];
      if (v42[0])
      {
        uint64_t v14 = 0;
        uint64_t v15 = v43;
        do
        {
          sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v44, (uint64_t)v11, v12);
          pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationMatrix((__n128 *)(v46 + v14), (uint64_t)v39);
          pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetInverse(v39, 0, 0.0, (uint64_t)v40);
          pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)v40, (uint64_t)&v31);
          *(__n128 *)uint64_t v15 = v31;
          long long v16 = v32;
          long long v17 = v33;
          long long v18 = v34;
          *((void *)v15 + 8) = v35;
          *((_OWORD *)v15 + 2) = v17;
          *((_OWORD *)v15 + 3) = v18;
          *((_OWORD *)v15 + 1) = v16;
          v14 += 128;
          v15 += 72;
          --v13;
        }
        while (v13);
      }
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      __n128 v31 = 0u;
      long long v32 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetGeomBindTransform(a1, v11, (uint64_t)&v31);
      uint64_t v41 = 0;
      memset(v40, 0, sizeof(v40));
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationMatrix(&v31, (uint64_t)v30);
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetInverse(v30, 0, 0.0, (uint64_t)v39);
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)v39, (uint64_t)v40);
      pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetSkinningMethod((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)a1, v19, v39);
      int v20 = v43;
      unint64_t v21 = v42[0];
      uint64_t v22 = v50;
      uint64_t v23 = v49[0];
      uint64_t v24 = v48;
      uint64_t v25 = v47[0];
      unsigned int v26 = *(_DWORD *)(a1 + 32);
      sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v3, v27, v28);
      unsigned int v3 = (tbb::task_group_context **)pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormals(v39, (uint64_t)v40, v20, v21, v22, v23, v24, v25, v26, v3[4], (unint64_t)*v3, 0);
      if ((LOBYTE(v39[0]) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v39[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      sub_2168F83DC((uint64_t)v42);
      sub_2168F83DC((uint64_t)&v44);
    }
    else
    {
      unsigned int v3 = 0;
    }
    sub_2168F83DC((uint64_t)v47);
    sub_2168F83DC((uint64_t)v49);
  }
  else
  {
    v31.n128_u64[0] = (unint64_t)"usdSkel/skinningQuery.cpp";
    v31.n128_u64[1] = (unint64_t)"ComputeSkinnedNormals";
    *(void *)&long long v32 = 416;
    *((void *)&v32 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedNormals(const VtA"
                            "rray<Matrix4> &, VtVec3fArray *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserve"
                            "d__::GfMatrix4d]";
    LOBYTE(v33) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"'normals' pointer is null.");
  }
  return v3;
}

void sub_217016B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  sub_2168F83DC((uint64_t)&a58);
  sub_2168F83DC(v58 - 240);
  sub_2168F83DC(v58 - 192);
  sub_2168F83DC(v58 - 144);
  _Unwind_Resume(a1);
}

tbb::task_group_context **pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedNormals<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t a1, long long *a2, uint64_t *a3)
{
  unsigned int v3 = (tbb::task_group_context **)a3;
  if (a3)
  {
    uint64_t v49 = 0;
    memset(v48, 0, sizeof(v48));
    uint64_t v47 = 0;
    memset(v46, 0, sizeof(v46));
    if (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeVaryingJointInfluences(a1, *a3, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v48, v46))
    {
      long long v6 = a2[1];
      long long v43 = *a2;
      long long v44 = v6;
      uint64_t v7 = *((void *)a2 + 4);
      uint64_t v45 = v7;
      if (v7)
      {
        uint64_t v8 = (atomic_ullong *)(v7 - 16);
        if (*((void *)&v44 + 1)) {
          uint64_t v8 = (atomic_ullong *)*((void *)&v44 + 1);
        }
        atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
      }
      if (*(void *)(a1 + 272)) {
        pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::RemapTransforms<pxrInternal__aapl__pxrReserved__::GfMatrix4f>();
      }
      sub_217016F30((uint64_t)v41, v43);
      sub_2170196F4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v41, v9, v10);
      uint64_t v13 = v41[0];
      if (v41[0])
      {
        uint64_t v14 = 0;
        uint64_t v15 = v42;
        do
        {
          sub_216903174((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v43, (uint64_t)v11, v12);
          pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotationMatrix((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)(v45 + v14), (uint64_t)v40);
          pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetInverse(v40, 0, 0.0, v39);
          pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v39, (uint64_t)&v36);
          long long v16 = v36;
          long long v17 = v37;
          *((_DWORD *)v15 + 8) = v38;
          *(_OWORD *)uint64_t v15 = v16;
          *((_OWORD *)v15 + 1) = v17;
          v14 += 64;
          v15 += 36;
          --v13;
        }
        while (v13);
      }
      memset(v39, 0, sizeof(v39));
      pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetGeomBindTransform(a1, v11, (uint64_t)&v36);
      pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v39, (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v36);
      int v38 = 0;
      long long v36 = 0u;
      long long v37 = 0u;
      pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotationMatrix((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v39, (uint64_t)v35);
      pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetInverse(v35, 0, 0.0, v40);
      pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v40, (uint64_t)&v36);
      pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetSkinningMethod((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)a1, v18, v40);
      int v19 = v42;
      unint64_t v20 = v41[0];
      uint64_t v21 = v49;
      uint64_t v22 = v48[0];
      uint64_t v23 = v47;
      uint64_t v24 = v46[0];
      unsigned int v25 = *(_DWORD *)(a1 + 32);
      sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v3, v26, v27);
      unsigned int v3 = (tbb::task_group_context **)pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormals(v40, (uint64_t)&v36, v19, v20, v21, v22, v23, v24, v28, v29, v30, v31, v32, v33, v25, v3[4], (unint64_t)*v3, 0);
      if ((LOBYTE(v40[0]) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      sub_2168F83DC((uint64_t)v41);
      sub_2168F83DC((uint64_t)&v43);
    }
    else
    {
      unsigned int v3 = 0;
    }
    sub_2168F83DC((uint64_t)v46);
    sub_2168F83DC((uint64_t)v48);
  }
  else
  {
    *(void *)&long long v36 = "usdSkel/skinningQuery.cpp";
    *((void *)&v36 + 1) = "ComputeSkinnedNormals";
    *(void *)&long long v37 = 416;
    *((void *)&v37 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedNormals(const VtA"
                            "rray<Matrix4> &, VtVec3fArray *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserve"
                            "d__::GfMatrix4f]";
    LOBYTE(v38) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v36, 1, (pxrInternal__aapl__pxrReserved__ *)"'normals' pointer is null.");
  }
  return v3;
}

void sub_217016EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  sub_2168F83DC((uint64_t)&a46);
  sub_2168F83DC(v46 - 240);
  sub_2168F83DC(v46 - 192);
  sub_2168F83DC(v46 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_217016F30(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int v6 = 0;
  memset(v5, 0, sizeof(v5));
  sub_2168F845C((void *)a1);
  uint64_t v7 = v5;
  sub_217019414((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_217016F90(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *a1, uint64_t a2, BOOL a3)
{
  BOOL v3 = a3;
  if (a3)
  {
    int v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v6) {
      int v6 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    if ((*((void *)a1 + 5) & 0xFFFFFFFFFFFFFFF8) == (*((void *)v6 + 17) & 0xFFFFFFFFFFFFFFF8))
    {
      double v29 = 0;
      memset(v28, 0, sizeof(v28));
      uint64_t v27 = 0;
      memset(v26, 0, sizeof(v26));
      if (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeJointInfluences((uint64_t)a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v28))
      {
        long long v8 = *(_OWORD *)(a2 + 16);
        long long v23 = *(_OWORD *)a2;
        long long v24 = v8;
        uint64_t v9 = *(char **)(a2 + 32);
        unsigned int v25 = v9;
        if (v9)
        {
          uint64_t v10 = (atomic_ullong *)(v9 - 16);
          if (*((void *)&v24 + 1)) {
            uint64_t v10 = (atomic_ullong *)*((void *)&v24 + 1);
          }
          atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
        }
        uint64_t v11 = (uint64_t *)*((void *)a1 + 34);
        if (v11 && (sub_216FE3D28(v11, (long long *)a2, (uint64_t)&v23, 1, 0) & 1) == 0)
        {
          BOOL v3 = 0;
        }
        else
        {
          long long v21 = 0u;
          long long v22 = 0u;
          long long v19 = 0u;
          long long v20 = 0u;
          long long v17 = 0u;
          long long v18 = 0u;
          float64x2_t v15 = 0u;
          long long v16 = 0u;
          pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetGeomBindTransform((uint64_t)a1, v7, (uint64_t)&v15);
          pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetSkinningMethod(a1, v12, &v14);
          BOOL v3 = pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransform(&v14, &v15, v25, v23, v29, v28[0], v27, v26[0], v3);
          if ((v14 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        sub_2168F83DC((uint64_t)&v23);
      }
      else
      {
        BOOL v3 = 0;
      }
      sub_2168F83DC((uint64_t)v26);
      sub_2168F83DC((uint64_t)v28);
    }
    else
    {
      *(void *)&v15.f64[0] = "usdSkel/skinningQuery.cpp";
      *(void *)&v15.f64[1] = "ComputeSkinnedTransform";
      *(void *)&long long v16 = 485;
      *((void *)&v16 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedTransform(const"
                              " VtArray<Matrix4> &, Matrix4 *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserv"
                              "ed__::GfMatrix4d]";
      LOBYTE(v17) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempted to skin a transform, but joint influences are not constant.");
      return 0;
    }
  }
  else
  {
    *(void *)&v15.f64[0] = "usdSkel/skinningQuery.cpp";
    *(void *)&v15.f64[1] = "ComputeSkinnedTransform";
    *(void *)&long long v16 = 479;
    *((void *)&v16 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedTransform(const V"
                            "tArray<Matrix4> &, Matrix4 *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v17) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' pointer is null.");
  }
  return v3;
}

void sub_2170171D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_2168F83DC((uint64_t)&a27);
  sub_2168F83DC(v27 - 160);
  sub_2168F83DC(v27 - 112);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::IsRigidlyDeformed(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *this)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v2) {
    unint64_t v2 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  return (*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8) == (*((void *)v2 + 17) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeJointInfluences(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a1, a2) & 1) == 0)
  {
    v13[0] = "usdSkel/skinningQuery.cpp";
    v13[1] = "ComputeJointInfluences";
    _OWORD v13[2] = 268;
    void v13[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeJointInfluences(VtIntArray *, VtFloatAr"
             "ray *, UsdTimeCode) const";
    char v14 = 0;
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"invalid skinning query", v3, v4);
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v13, "IsValid()", v7)) {
      return 0;
    }
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a1 + 48), (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v3) & 1) == 0)
  {
    v11[0] = "usdSkel/skinningQuery.cpp";
    v11[1] = "ComputeJointInfluences";
    _OWORD v11[2] = 269;
    void v11[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeJointInfluences(VtIntArray *, VtFloatAr"
             "ray *, UsdTimeCode) const";
    char v12 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v11, "_jointIndicesPrimvar", 0))return 0; {
  }
    }
  if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a1 + 96), v5) & 1) != 0|| (v9[0] = "usdSkel/skinningQuery.cpp", v9[1] = "ComputeJointInfluences", v9[2] = 270, v9[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeJointInfluences(VtIntArray *, VtFloatArray *, UsdTimeCode) const", v10 = 0, char v8 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "_jointWeightsPrimvar", 0), result = 0, (v8))
  {
    sub_217018D10();
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *a1, uint64_t a2, BOOL a3)
{
  BOOL v3 = a3;
  if (a3)
  {
    int v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v6) {
      int v6 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    if ((*((void *)a1 + 5) & 0xFFFFFFFFFFFFFFF8) == (*((void *)v6 + 17) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v27 = 0;
      memset(v26, 0, sizeof(v26));
      unsigned int v25 = 0;
      memset(v24, 0, sizeof(v24));
      if (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeJointInfluences((uint64_t)a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v26))
      {
        long long v8 = *(_OWORD *)(a2 + 16);
        long long v21 = *(_OWORD *)a2;
        long long v22 = v8;
        uint64_t v9 = *(char **)(a2 + 32);
        long long v23 = v9;
        if (v9)
        {
          char v10 = (atomic_ullong *)(v9 - 16);
          if (*((void *)&v22 + 1)) {
            char v10 = (atomic_ullong *)*((void *)&v22 + 1);
          }
          atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
        }
        uint64_t v11 = (uint64_t *)*((void *)a1 + 34);
        if (v11 && (sub_216FE4010(v11, (long long *)a2, (uint64_t)&v21, 1, 0) & 1) == 0)
        {
          BOOL v3 = 0;
        }
        else
        {
          memset(v20, 0, sizeof(v20));
          pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetGeomBindTransform((uint64_t)a1, v7, (uint64_t)&v15);
          pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v20, (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v15);
          pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetSkinningMethod(a1, v12, &v15);
          BOOL v3 = pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransform(&v15, (uint64_t)v20, v23, v21, v27, *(unint64_t *)&v26[0], v25, *(uint64_t *)&v24[0], v13, v3);
          if ((v15 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        sub_2168F83DC((uint64_t)&v21);
      }
      else
      {
        BOOL v3 = 0;
      }
      sub_2168F83DC((uint64_t)v24);
      sub_2168F83DC((uint64_t)v26);
    }
    else
    {
      unint64_t v15 = (unint64_t)"usdSkel/skinningQuery.cpp";
      long long v16 = "ComputeSkinnedTransform";
      uint64_t v17 = 485;
      long long v18 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedTransform(const VtArray<Matrix4> "
            "&, Matrix4 *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
      char v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempted to skin a transform, but joint influences are not constant.");
      return 0;
    }
  }
  else
  {
    unint64_t v15 = (unint64_t)"usdSkel/skinningQuery.cpp";
    long long v16 = "ComputeSkinnedTransform";
    uint64_t v17 = 479;
    long long v18 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeSkinnedTransform(const VtArray<Matrix4> &,"
          " Matrix4 *, UsdTimeCode) const [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' pointer is null.");
  }
  return v3;
}

void sub_2170177B0(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 192);
  sub_2168F83DC(v1 - 144);
  sub_2168F83DC(v1 - 96);
  _Unwind_Resume(a1);
}

float pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeExtentsPadding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *a3)
{
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  uint64_t v3 = *((void *)a3 + 1);
  if (v3
    && (*(unsigned char *)(v3 + 57) & 8) == 0
    && (*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *))(*(void *)a3 + 32))(a3))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::GetExtentAttr(a3, (uint64_t)&v6);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
  }
  sub_2168F83DC((uint64_t)v7);
  return 0.0;
}

void sub_217017A58(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 128);
  _Unwind_Resume(a1);
}

float pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::ComputeExtentsPadding<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *a3)
{
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  uint64_t v3 = *((void *)a3 + 1);
  if (v3
    && (*(unsigned char *)(v3 + 57) & 8) == 0
    && (*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *))(*(void *)a3 + 32))(a3))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::GetExtentAttr(a3, (uint64_t)&v6);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
  }
  sub_2168F83DC((uint64_t)v7);
  return 0.0;
}

void sub_217017CD8(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 128);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *this)
{
  *(_DWORD *)this = 1;
  *((void *)this + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 5);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 1;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 3;
  *((void *)this + 7) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 17);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((_DWORD *)this + 24) = 3;
  *((void *)this + 13) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 28);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 29);
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((_DWORD *)this + 36) = 3;
  *((void *)this + 19) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 40);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 41);
  *((void *)this + 21) = 0;
  *((_DWORD *)this + 44) = 3;
  *((void *)this + 23) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 49);
  *((void *)this + 25) = 0;
  *((_DWORD *)this + 52) = 3;
  *((void *)this + 27) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 56);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 57);
  *((void *)this + 29) = 0;
  *((_DWORD *)this + 60) = 4;
  *((void *)this + 31) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 64);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 65);
  *((unsigned char *)this + 344) = 0;
  *((unsigned char *)this + 352) = 0;
  *((unsigned char *)this + 392) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 289) = 0u;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a5, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a6, uint64_t a7, pxrInternal__aapl__pxrReserved__::UsdProperty *a8, uint64_t a9, uint64_t a10)
{
  int v19 = 3;
  long long v20 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v21);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v22);
  uint64_t v23 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery(a1, a2, a3, a4, a5, a6, (uint64_t)&v19, a7, a8, a9, a10);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_21697C414(&v21);
  if (v20) {
    sub_216D16E0C(v20);
  }
  return a1;
}

{
  int v19;
  atomic_ullong *v20;
  int v21;
  int v22;
  uint64_t v23;

  int v19 = 3;
  long long v20 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v21);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v22);
  uint64_t v23 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery(a1, a2, a3, a4, a5, a6, (uint64_t)&v19, a7, a8, a9, a10);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_21697C414(&v21);
  if (v20) {
    sub_216D16E0C(v20);
  }
  return a1;
}

void sub_217017F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D2EDA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a5, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a6, uint64_t a7, uint64_t a8, pxrInternal__aapl__pxrReserved__::UsdProperty *a9, uint64_t a10, uint64_t a11)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v17 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v18 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 32) = 1;
  int v19 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v19) {
    int v19 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v20 = *((void *)v19 + 17);
  *(void *)(a1 + 40) = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 40) &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a1 + 48), a5);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a1 + 96), a6);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)a7;
  uint64_t v21 = *(void *)(a7 + 8);
  *(void *)(a1 + 152) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 160), (_DWORD *)(a7 + 16));
  sub_21698105C((_DWORD *)(a1 + 164), (_DWORD *)(a7 + 20));
  uint64_t v22 = *(void *)(a7 + 24);
  *(void *)(a1 + 168) = v22;
  if ((v22 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 168) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 176) = *(_DWORD *)a8;
  uint64_t v23 = *(void *)(a8 + 8);
  *(void *)(a1 + 184) = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 192), (_DWORD *)(a8 + 16));
  sub_21698105C((_DWORD *)(a1 + 196), (_DWORD *)(a8 + 20));
  uint64_t v24 = *(void *)(a8 + 24);
  *(void *)(a1 + 200) = v24;
  if ((v24 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 200) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 208) = *(_DWORD *)a10;
  uint64_t v25 = *(void *)(a10 + 8);
  *(void *)(a1 + 216) = v25;
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 224), (_DWORD *)(a10 + 16));
  sub_21698105C((_DWORD *)(a1 + 228), (_DWORD *)(a10 + 20));
  uint64_t v26 = *(void *)(a10 + 24);
  *(void *)(a1 + 232) = v26;
  if ((v26 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 232) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 240) = *(_DWORD *)a11;
  uint64_t v27 = *(void *)(a11 + 8);
  *(void *)(a1 + 248) = v27;
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 256), (_DWORD *)(a11 + 16));
  sub_21698105C((_DWORD *)(a1 + 260), (_DWORD *)(a11 + 20));
  uint64_t v29 = *(void *)(a11 + 24);
  *(void *)(a1 + 264) = v29;
  if ((v29 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 264) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(unsigned char *)(a1 + 344) = 0;
  *(unsigned char *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(unsigned char *)(a1 + 304) = 0;
  uint64_t v33 = 0;
  memset(v32, 0, sizeof(v32));
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a9, v28)) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>();
  }
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a10, v30))pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(); {
  pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::_InitializeJointInfluenceBindings((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)a1, a5, a6);
  }
  pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::_InitializeBlendShapeBindings((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)a1, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)a10, (const pxrInternal__aapl__pxrReserved__::UsdRelationship *)a11);
  sub_2169B2E0C(v32);
  return a1;
}

{
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_2170183A8(_Unwind_Exception *a1)
{
  sub_216D16AD8(v1);
  _Unwind_Resume(a1);
}

void sub_217018558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D2EDA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217018580(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    sub_2169E06EC(a1, (long long *)a2);
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v3;
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a1 + 32) = v4;
    if (v4)
    {
      unsigned int v5 = (atomic_ullong *)(v4 - 16);
      if (*(void *)(a1 + 24)) {
        unsigned int v5 = *(atomic_ullong **)(a1 + 24);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a1 + 40) = 1;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::_InitializeJointInfluenceBindings(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a3)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a2, a2)
    && pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a3, v5))
  {
    uint64_t ElementSize = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)((char *)this + 48));
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)((char *)this + 96));
    if (ElementSize == v7)
    {
      if ((int)ElementSize <= 0)
      {
        uint64_t v20 = "usdSkel/skinningQuery.cpp";
        uint64_t v21 = "_InitializeJointInfluenceBindings";
        uint64_t v22 = 132;
        uint64_t v23 = "void pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::_InitializeJointInfluenceBindings(const UsdAt"
              "tribute &, const UsdAttribute &)";
        char v24 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v20, (pxrInternal__aapl__pxrReserved__ *)"Invalid element size [%d]: element size must be greater than zero.", v8, ElementSize);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)((char *)this + 48), &v19);
        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)((char *)this + 96), &v18);
        unint64_t v10 = v19 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v11 = v18 & 0xFFFFFFFFFFFFFFF8;
        if ((v19 & 0xFFFFFFFFFFFFFFF8) == (v18 & 0xFFFFFFFFFFFFFFF8))
        {
          int8x16_t v13 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          if (!v13) {
            int8x16_t v13 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          }
          if ((v19 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v13 + 17) & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_26;
          }
          char v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          if (!v14) {
            char v14 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          }
          unint64_t v15 = v19 & 0xFFFFFFFFFFFFFFF8;
          if ((v19 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v14 + 153) & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_26:
            *((_DWORD *)this + 8) = ElementSize;
            sub_2168D2318((void *)this + 5, &v19);
            *((_DWORD *)this + 9) |= 1u;
          }
          else
          {
            uint64_t v20 = "usdSkel/skinningQuery.cpp";
            uint64_t v21 = "_InitializeJointInfluenceBindings";
            uint64_t v22 = 150;
            uint64_t v23 = "void pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::_InitializeJointInfluenceBindings(const U"
                  "sdAttribute &, const UsdAttribute &)";
            char v24 = 0;
            if (v15)
            {
              long long v16 = (const char *)(v15 + 16);
              if (*(char *)(v15 + 39) < 0) {
                long long v16 = *(const char **)v16;
              }
            }
            else
            {
              long long v16 = "";
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v20, (pxrInternal__aapl__pxrReserved__ *)"Invalid interpolation (%s) for joint influences: interpolation must be either 'constant' or 'vertex'.", v9, v16);
          }
        }
        else
        {
          uint64_t v20 = "usdSkel/skinningQuery.cpp";
          uint64_t v21 = "_InitializeJointInfluenceBindings";
          uint64_t v22 = 142;
          uint64_t v23 = "void pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::_InitializeJointInfluenceBindings(const Usd"
                "Attribute &, const UsdAttribute &)";
          char v24 = 0;
          if (v10)
          {
            char v12 = (const char *)(v10 + 16);
            if (*(char *)(v10 + 39) < 0) {
              char v12 = *(const char **)v12;
            }
          }
          else
          {
            char v12 = "";
          }
          if (v11)
          {
            uint64_t v17 = (const char *)(v11 + 16);
            if (*(char *)(v11 + 39) < 0) {
              uint64_t v17 = *(const char **)v17;
            }
          }
          else
          {
            uint64_t v17 = "";
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v20, (pxrInternal__aapl__pxrReserved__ *)"jointIndices interpolation (%s) != jointWeights interpolation (%s).", v9, v12, v17);
        }
        if ((v18 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v19 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
    }
    else
    {
      uint64_t v20 = "usdSkel/skinningQuery.cpp";
      uint64_t v21 = "_InitializeJointInfluenceBindings";
      uint64_t v22 = 126;
      uint64_t v23 = "void pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::_InitializeJointInfluenceBindings(const UsdAttr"
            "ibute &, const UsdAttribute &)";
      char v24 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v20, (pxrInternal__aapl__pxrReserved__ *)"jointIndices element size (%d) != jointWeights element size (%d).", v8, ElementSize, v7);
    }
  }
}

void sub_2170188A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::_InitializeBlendShapeBindings(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, const pxrInternal__aapl__pxrReserved__::UsdRelationship *a3)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a2, a2);
  if (result)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a3, v6);
    if (result)
    {
      if (*((void *)this + 36)) {
        *((_DWORD *)this + 9) |= 2u;
      }
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::HasBlendShapes(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *this)
{
  return (*((unsigned __int8 *)this + 36) >> 1) & 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::HasJointInfluences(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *this)
{
  return *((_DWORD *)this + 9) & 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetJointOrder(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(unsigned char *)(a1 + 344))
    {
      sub_2169E06EC(a2, (long long *)(a1 + 304));
      return 1;
    }
  }
  else
  {
    v3[0] = "usdSkel/skinningQuery.cpp";
    v3[1] = "GetJointOrder";
    v3[2] = 206;
    v3[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetJointOrder(VtTokenArray *) const";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"'jointOrder' pointer is null.");
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetBlendShapeOrder(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(unsigned char *)(a1 + 392))
    {
      sub_2169E06EC(a2, (long long *)(a1 + 352));
      return 1;
    }
  }
  else
  {
    v3[0] = "usdSkel/skinningQuery.cpp";
    v3[1] = "GetBlendShapeOrder";
    v3[2] = 221;
    v3[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetBlendShapeOrder(VtTokenArray *) const";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"'blendShapeOrder' pointer is null.");
  }
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetTimeSamples(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = 0xFFF0000000000000;
  char v4 = 0;
  uint64_t v5 = 0x7FF0000000000000;
  char v6 = 0;
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetTimeSamplesInInterval(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v3, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetTimeSamplesInInterval(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  v18[6] = *MEMORY[0x263EF8340];
  if (a3)
  {
    long long __p = 0;
    char v14 = 0;
    uint64_t v15 = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v16, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a1 + 48));
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v18, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(a1 + 96));
    for (uint64_t i = 0; i != 12; i += 6)
    {
      if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetTimeSamplesInInterval((uint64_t)&v16[i], a2, (uint64_t)&__p))sub_216FFAC74(a3, *(void *)(a3 + 8), (char *)__p, v14, (v14 - (unsigned char *)__p) >> 3); {
    }
      }
    for (uint64_t j = 0; j != -12; j -= 6)
    {
      uint64_t v8 = v18[j + 4];
      if ((v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v9 = v18[j + 3];
      if ((v9 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18[j + 2] + 1);
      sub_21697C414(&v18[j + 2]);
      unint64_t v10 = (atomic_ullong *)v18[j + 1];
      if (v10) {
        sub_216D16E0C(v10);
      }
    }
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamplesInInterval(a1 + 176, a2, (uint64_t)&__p))sub_216FFAC74(a3, *(void *)(a3 + 8), (char *)__p, v14, (v14 - (unsigned char *)__p) >> 3); {
    std::__sort<std::__less<double,double> &,double *>();
    }
    unint64_t v11 = sub_216C4287C(*(double **)a3, *(double **)(a3 + 8));
    if (*(double **)(a3 + 8) != v11) {
      *(void *)(a3 + 8) = v11;
    }
    if (__p)
    {
      char v14 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    v16[0] = "usdSkel/skinningQuery.cpp";
    v16[1] = "GetTimeSamplesInInterval";
    v16[2] = 239;
    v16[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetTimeSamplesInInterval(const GfInterval &, s"
             "td::vector<double> *) const";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"'times' pointer is null.");
  }
  return a3 != 0;
}

void sub_217018C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_217018D10()
{
  uint64_t v2 = 0;
  long long v0 = 0u;
  long long v1 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
}

void sub_217018F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  sub_2168F83DC((uint64_t)&a29);
  sub_2168F83DC(v29 - 96);
  _Unwind_Resume(a1);
}

void sub_217018F94()
{
  uint64_t v2 = 0;
  long long v0 = 0u;
  long long v1 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>();
}

void sub_217019198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  sub_2168F83DC((uint64_t)&a29);
  sub_2168F83DC(v29 - 96);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetDescription@<X0>(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, void *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2))
  {
    sub_216D0162C((uint64_t)this, &v9);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v9);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"UsdSkelSkinningQuery <%s>", v6, v7, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    return sub_21697C414(&v9);
  }
  else
  {
    return sub_216779094(a3, "invalid UsdSkelSkinningQuery");
  }
}

void sub_2170192B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void *sub_2170192CC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x58uLL);
  uint64_t result = sub_217019330(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_21701931C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_217019330(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C76FAC8;
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::UsdSkelAnimMapper((pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *)(a1 + 3), a2, a3);
  return a1;
}

void sub_217019378(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_21701938C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C76FAC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2170193AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C76FAC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_2170193F0(uint64_t a1)
{
}

void sub_217019414(unint64_t *a1, unint64_t a2, long long **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              int v10 = sub_217019648((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  char v12 = (char *)v10 + v11;
                  long long v13 = *(_OWORD *)(v9 + v11);
                  long long v14 = *(_OWORD *)(v9 + v11 + 16);
                  *((_DWORD *)v12 + 8) = *(_DWORD *)(v9 + v11 + 32);
                  *(_OWORD *)char v12 = v13;
                  *((_OWORD *)v12 + 1) = v14;
                  v11 += 36;
                }
                while (36 * v3 != v11);
              }
            }
            uint64_t v15 = *a3;
            uint64_t v16 = 36 * v3;
            do
            {
              char v17 = (char *)v7 + v16;
              long long v18 = *v15;
              long long v19 = v15[1];
              *((_DWORD *)v17 + 8) = *((_DWORD *)v15 + 8);
              *(_OWORD *)char v17 = v18;
              *((_OWORD *)v17 + 1) = v19;
              v16 += 36;
            }
            while (36 * a2 != v16);
          }
          uint64_t v20 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (void *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v27 = a2;
      }
      else {
        unint64_t v27 = *a1;
      }
      double v28 = sub_217019648((uint64_t)a1, a2);
      uint64_t v20 = v28;
      if (v27)
      {
        uint64_t v29 = 36 * v27;
        double v30 = v28;
        do
        {
          long long v31 = *(_OWORD *)v7;
          long long v32 = *((_OWORD *)v7 + 1);
          *((_DWORD *)v30 + 8) = *((_DWORD *)v7 + 8);
          *(_OWORD *)double v30 = v31;
          *((_OWORD *)v30 + 1) = v32;
          uint64_t v7 = (void *)((char *)v7 + 36);
          double v30 = (void *)((char *)v30 + 36);
          v29 -= 36;
        }
        while (v29);
      }
      if (v3 < a2)
      {
        uint64_t v33 = *a3;
        uint64_t v34 = 36 * v3;
        do
        {
          long long v35 = (char *)v28 + v34;
          long long v36 = *v33;
          long long v37 = v33[1];
          *((_DWORD *)v35 + 8) = *((_DWORD *)v33 + 8);
          *(_OWORD *)long long v35 = v36;
          *((_OWORD *)v35 + 1) = v37;
          v34 += 36;
        }
        while (36 * a2 != v34);
      }
      goto LABEL_31;
    }
    if (a2 < 0x71C71C71C71C71DLL)
    {
      uint64_t v21 = sub_217019648((uint64_t)a1, a2);
      uint64_t v20 = v21;
      uint64_t v22 = 0;
      uint64_t v23 = *a3;
      do
      {
        char v24 = (char *)v21 + v22;
        long long v25 = *v23;
        long long v26 = v23[1];
        *((_DWORD *)v24 + 8) = *((_DWORD *)v23 + 8);
        *(_OWORD *)char v24 = v25;
        *((_OWORD *)v24 + 1) = v26;
        v22 += 36;
      }
      while (36 * a2 != v22);
LABEL_31:
      if (v20 != (void *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v20;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_217019648(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3f>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3f]");
  if (a2 > 0x71C71C71C71C71BLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 36 * a2 + 16;
  }
  char v4 = operator new(v3);
  *char v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2170196DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2170196F4(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix3f]", a3);
      char v6 = (long long *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_217019648((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 36 * v7;
        uint64_t v11 = v8;
        do
        {
          long long v12 = *v6;
          long long v13 = v6[1];
          *((_DWORD *)v11 + 8) = *((_DWORD *)v6 + 8);
          *(_OWORD *)uint64_t v11 = v12;
          *((_OWORD *)v11 + 1) = v13;
          char v6 = (long long *)((char *)v6 + 36);
          uint64_t v11 = (void *)((char *)v11 + 36);
          v10 -= 36;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *pxrInternal__aapl__pxrReserved__::UsdSkelTokensType::UsdSkelTokensType(pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *this)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  long long v37 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "bindTransforms", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v37, "blendShapes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "blendShapeWeights", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "classicLinear", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "dualQuaternion", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "jointNames", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "joints", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "normalOffsets", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "offsets", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "pointIndices", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "primvars:skel:geomBindTransform", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "primvars:skel:jointIndices", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "primvars:skel:jointWeights", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "primvars:skel:skinningMethod", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "restTransforms", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "rotations", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "scales", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "skel:animationSource", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "skel:blendShapes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "skel:blendShapeTargets", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "skel:joints", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 168, "skel:skeleton", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 176, "translations", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 184, "weight", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 192, "BlendShape", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 200, "SkelAnimation", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 208, "SkelBindingAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 216, "Skeleton", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 224, "SkelRoot", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v38 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v38 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v37;
  uint64_t v39 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v39 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v40 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v40 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v41 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v41 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v42 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v42 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v43 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v43 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v44 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v44 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v45 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v46 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v46 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v47 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v47 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v48 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v49 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v49 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v50 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v50 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v51 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v51 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v52 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v52 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v53 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v53 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v54 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v54 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v55 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v55 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v56 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v56 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v21 = *((void *)this + 19);
  uint64_t v57 = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = *((void *)this + 20);
  uint64_t v58 = v22;
  if ((v22 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v58 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v23 = *((void *)this + 21);
  uint64_t v59 = v23;
  if ((v23 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v59 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v24 = *((void *)this + 22);
  uint64_t v60 = v24;
  if ((v24 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v60 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v25 = *((void *)this + 23);
  uint64_t v61 = v25;
  if ((v25 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v61 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v26 = *((void *)this + 24);
  uint64_t v62 = v26;
  if ((v26 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v62 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v27 = *((void *)this + 25);
  uint64_t v63 = v27;
  if ((v27 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v63 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v28 = *((void *)this + 26);
  uint64_t v64 = v28;
  if ((v28 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v64 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v29 = *((void *)this + 27);
  uint64_t v65 = v29;
  if ((v29 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v65 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v30 = *((void *)this + 28);
  uint64_t v66 = v30;
  if ((v30 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v66 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  long long v31 = (char *)operator new(0xE8uLL);
  uint64_t v32 = 0;
  *((void *)this + 29) = v31;
  *((void *)this + 30) = v31;
  *((void *)this + 31) = v31 + 232;
  do
  {
    uint64_t v33 = *(uint64_t *)((char *)&v38 + v32);
    *(void *)&v31[v32] = v33;
    if ((v33 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v31[v32] &= 0xFFFFFFFFFFFFFFF8;
    }
    v32 += 8;
  }
  while (v32 != 232);
  *((void *)this + 30) = v31 + 232;
  for (uint64_t i = 224; i != -8; i -= 8)
  {
    uint64_t v35 = *(uint64_t *)((char *)&v38 + i);
    if ((v35 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_21701A0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void **a30,uint64_t a31,char a32)
{
  sub_216889A04(&a30);
  uint64_t v42 = 224;
  while (1)
  {
    uint64_t v43 = *(void *)(&a32 + v42);
    if ((v43 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v42 -= 8;
    if (v42 == -8)
    {
      if ((*v33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_21701A430()
{
}

void sub_21701A438()
{
}

void sub_21701A440()
{
}

void sub_21701A448()
{
}

void sub_21701A450()
{
}

void sub_21701A458()
{
}

void sub_21701A460()
{
}

void sub_21701A468()
{
}

void sub_21701A470()
{
}

void sub_21701A478()
{
}

void sub_21701A480()
{
}

void sub_21701A488()
{
}

void sub_21701A490()
{
}

void sub_21701A498()
{
}

void sub_21701A4A0()
{
}

void sub_21701A4A8()
{
}

void sub_21701A4B0()
{
}

void sub_21701A4B8()
{
}

void sub_21701A4C0()
{
}

void sub_21701A4C8()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelTopology::UsdSkelTopology(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_21701A54C(a2, a3, (uint64_t)v8);
  long long v4 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = v9;
  *(void *)(a1 + 32) = v9;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 16);
    if (*(void *)(a1 + 24)) {
      uint64_t v6 = *(atomic_ullong **)(a1 + 24);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  sub_2168F83DC((uint64_t)v8);
  return a1;
}

{
  long long v4;
  uint64_t v5;
  atomic_ullong *v6;
  _OWORD v8[2];
  uint64_t v9;

  sub_21701A54C(a2, a3, (uint64_t)v8);
  long long v4 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = v9;
  *(void *)(a1 + 32) = v9;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 16);
    if (*(void *)(a1 + 24)) {
      uint64_t v6 = *(atomic_ullong **)(a1 + 24);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  sub_2168F83DC((uint64_t)v8);
  return a1;
}

void sub_21701A54C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = a2;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2169C4410(v10, a2);
  if (v3)
  {
    uint64_t v7 = 0;
    do
    {
      if ((*(void *)(a1 + v7 * 8) & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (uint64_t *)((*(void *)(a1 + v7 * 8) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v11, EmptyString);
      uint64_t v9 = &v10[0][v7];
      sub_21697DE94((int *)&v10[0][v7], (int *)&v11);
      sub_21697DEEC((int *)v9 + 1, (int *)&v11 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21697C414(&v11);
      ++v7;
      --v3;
    }
    while (v3);
  }
  sub_21701A79C(v10[0], v10[1] - v10[0], a3);
  uint64_t v11 = (void **)v10;
  sub_216981168(&v11);
}

void sub_21701A628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216981168(&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelTopology::UsdSkelTopology(uint64_t result, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v2;
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(result + 32) = v3;
  if (v3)
  {
    long long v4 = (atomic_ullong *)(v3 - 16);
    if (*(void *)(result + 24)) {
      long long v4 = *(atomic_ullong **)(result + 24);
    }
    atomic_fetch_add_explicit(v4, 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  long long v2;
  uint64_t v3;
  atomic_ullong *v4;

  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v2;
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(result + 32) = v3;
  if (v3)
  {
    long long v4 = (atomic_ullong *)(v3 - 16);
    if (*(void *)(result + 24)) {
      long long v4 = *(atomic_ullong **)(result + 24);
    }
    atomic_fetch_add_explicit(v4, 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelTopology::UsdSkelTopology(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  sub_21701A79C(a2, a3, (uint64_t)v8);
  long long v4 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = v9;
  *(void *)(a1 + 32) = v9;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 16);
    if (*(void *)(a1 + 24)) {
      uint64_t v6 = *(atomic_ullong **)(a1 + 24);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  sub_2168F83DC((uint64_t)v8);
  return a1;
}

{
  long long v4;
  uint64_t v5;
  atomic_ullong *v6;
  _OWORD v8[2];
  uint64_t v9;

  sub_21701A79C(a2, a3, (uint64_t)v8);
  long long v4 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = v9;
  *(void *)(a1 + 32) = v9;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 16);
    if (*(void *)(a1 + 24)) {
      uint64_t v6 = *(atomic_ullong **)(a1 + 24);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  sub_2168F83DC((uint64_t)v8);
  return a1;
}

uint64_t sub_21701A79C@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  memset(v18, 0, sizeof(v18));
  int v19 = 1065353216;
  if (a2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a1;
    do
    {
      uint64_t v22 = v6;
      *((_DWORD *)sub_21701AB34((uint64_t)v18, (unsigned int *)v6++, (uint64_t)&unk_2174BFD90, (_DWORD **)&v22) + 6) = v5++;
    }
    while (a2 != v5);
  }
  int v7 = a3;
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  LODWORD(v21) = -1;
  sub_2168F845C((void *)a3);
  uint64_t v22 = &v21;
  sub_216907A0C((unint64_t *)a3, a2, (_DWORD **)&v22);
  sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v8, v9);
  if (a2)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(a3 + 32);
    do
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a1[v10])) {
        goto LABEL_13;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAncestorsRange((pxrInternal__aapl__pxrReserved__::SdfPath *)&a1[v10], &v22);
      sub_216981010(&v21, &v22);
      sub_21698105C((_DWORD *)&v21 + 1, (_DWORD *)&v22 + 1);
      pxrInternal__aapl__pxrReserved__::SdfPathAncestorsRange::iterator::operator++((int *)&v21);
      while (1)
      {
        uint64_t v20 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v20);
        uint64_t v12 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v20 + 1);
        uint64_t v14 = v20;
        uint64_t v13 = v21;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v12);
        sub_21697C414(&v20);
        if (v13 == v14) {
          break;
        }
        uint64_t v15 = sub_216A9DB14(v18, (unsigned int *)&v21);
        if (v15)
        {
          int v7 = *((_DWORD *)v15 + 6);
          break;
        }
        pxrInternal__aapl__pxrReserved__::SdfPathAncestorsRange::iterator::operator++((int *)&v21);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
      sub_21697C414(&v21);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
      sub_21697C414(&v22);
      if (v13 == v14) {
LABEL_13:
      }
        int v7 = -1;
      *(_DWORD *)(v11 + 4 * v10++) = v7;
    }
    while (v10 != a2);
  }
  return sub_21701AEF0((uint64_t)v18);
}

void sub_21701A97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2168F83DC(a3);
  sub_21701AEF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelTopology::Validate(unint64_t *a1, uint64_t a2, char *a3)
{
  unint64_t v3 = *a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (unsigned int *)a1[4];
  unint64_t v6 = *v5;
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v7 = 0;
    uint64_t v8 = v5 + 1;
    while (v3 - 1 != v7)
    {
      unint64_t v9 = v7;
      unint64_t v6 = v8[v7++];
      if ((v6 & 0x80000000) == 0 && v9 < v6)
      {
        BOOL v10 = v7 >= v3;
        goto LABEL_8;
      }
    }
    return 1;
  }
  BOOL v10 = 0;
  unint64_t v7 = 0;
LABEL_8:
  if (v7 == v6)
  {
    if (!a2) {
      return v10;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Joint %zu has itself as its parent.", (const char *)a2, a3, v7);
  }
  else
  {
    if (!a2) {
      return v10;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Joint %zu has mis-ordered parent %d. Joints are expected to be ordered with parent joints always coming before children.", (const char *)a2, a3, v7, v6);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = v12;
  *(void *)(a2 + 16) = v13;
  return v10;
}

void *sub_21701AB34(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = v6;
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = v6 & (v7 - 1);
    }
    unint64_t v9 = *(void **)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      BOOL v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(void *)a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4) {
              break;
            }
          }
          BOOL v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_21701ADA4(a1, v6, a4, (uint64_t)v21);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *(void *)v21[0] = *v18;
    *uint64_t v18 = v21[0];
  }
  else
  {
    *(void *)v21[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v21[0])
    {
      unint64_t v19 = *(void *)(*(void *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v21[0];
    }
  }
  BOOL v10 = (void *)v21[0];
  v21[0] = 0;
  ++*(void *)(a1 + 24);
  sub_21701AE18((uint64_t)v21, 0);
  return v10;
}

void sub_21701AD8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21701AE18((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_21701ADA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = operator new(0x20uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *uint8x8_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = *a3;
  sub_216981010((_DWORD *)v8 + 4, v9);
  uint64_t result = sub_21698105C((_DWORD *)v8 + 5, v9 + 1);
  *((_DWORD *)v8 + 6) = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_21701AE18(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_DWORD **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216BECFC0(v2 + 4);
    }
    operator delete(v2);
  }
}

_DWORD *sub_21701AE70(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

_DWORD *sub_21701AEB0(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

uint64_t sub_21701AEF0(uint64_t a1)
{
  sub_21701AF2C(a1, *(_DWORD **)(a1 + 16));
  long long v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_21701AF2C(uint64_t a1, _DWORD *a2)
{
  if (a2)
  {
    long long v2 = a2;
    do
    {
      unint64_t v3 = *(_DWORD **)v2;
      sub_216BECFC0(v2 + 4);
      operator delete(v2);
      long long v2 = v3;
    }
    while (v3);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, float32x2_t *a2, uint64_t a3, _WORD *a4)
{
  if (!a2)
  {
    BOOL v10 = "usdSkel/utils.cpp";
    unint64_t v11 = "UsdSkelDecomposeTransform";
    uint64_t v12 = 476;
    float v13 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfRotation *, GfV"
          "ec3h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'translate' pointer is null.");
    return 0;
  }
  if (!a3)
  {
    BOOL v10 = "usdSkel/utils.cpp";
    unint64_t v11 = "UsdSkelDecomposeTransform";
    uint64_t v12 = 480;
    float v13 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfRotation *, GfV"
          "ec3h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'rotate' pointer is null.");
    return 0;
  }
  if (!a4)
  {
    BOOL v10 = "usdSkel/utils.cpp";
    unint64_t v11 = "UsdSkelDecomposeTransform";
    uint64_t v12 = 484;
    float v13 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfRotation *, GfV"
          "ec3h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'scale' pointer is null.");
    return 0;
  }
  uint64_t v5 = sub_21701B074(a1, a2, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v10, a4);
  if (v5)
  {
    *(double *)a3 = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotation((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v10);
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = v7;
    *(void *)(a3 + 24) = v8;
  }
  return v5;
}

uint64_t sub_21701B074(uint64_t a1, float32x2_t *a2, pxrInternal__aapl__pxrReserved__::GfMatrix4d *a3, _WORD *a4)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::GfMatrix4d::Factor(a1, v19, (uint64_t)v17, a3, (uint64_t)&v15, (uint64_t)v18, 1.0e-10);
  if (result)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::GfMatrix4d::Orthonormalize(a3, 1);
    if (result)
    {
      float v8 = v17[0];
      if (v8 == 0.0)
      {
        unsigned int v9 = HIWORD(LODWORD(v8));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
      {
        unsigned int v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
           + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
      }
      float v10 = v17[1];
      if (v10 == 0.0)
      {
        unsigned int v11 = HIWORD(LODWORD(v10));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23])
      {
        unsigned int v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23]
            + (((LODWORD(v10) & 0x7FFFFF) + ((LODWORD(v10) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v10));
      }
      float v12 = v17[2];
      if (v12 == 0.0)
      {
        unsigned int v13 = HIWORD(LODWORD(v12));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23])
      {
        unsigned int v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23]
            + (((LODWORD(v12) & 0x7FFFFF) + ((LODWORD(v12) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v13) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v12));
      }
      *a4 = v9;
      a4[1] = v11;
      a4[2] = v13;
      float32_t v14 = v16;
      *a2 = vcvt_f32_f64(v15);
      a2[1].f32[0] = v14;
      return 1;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4)
{
  if (!a2)
  {
    v10.i64[0] = (uint64_t)"usdSkel/utils.cpp";
    v10.i64[1] = (uint64_t)"UsdSkelDecomposeTransform";
    uint64_t v11 = 476;
    float v12 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfRotation *, GfV"
          "ec3h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'translate' pointer is null.");
    return 0;
  }
  if (!a3)
  {
    v10.i64[0] = (uint64_t)"usdSkel/utils.cpp";
    v10.i64[1] = (uint64_t)"UsdSkelDecomposeTransform";
    uint64_t v11 = 480;
    float v12 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfRotation *, GfV"
          "ec3h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'rotate' pointer is null.");
    return 0;
  }
  if (!a4)
  {
    v10.i64[0] = (uint64_t)"usdSkel/utils.cpp";
    v10.i64[1] = (uint64_t)"UsdSkelDecomposeTransform";
    uint64_t v11 = 484;
    float v12 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfRotation *, GfV"
          "ec3h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'scale' pointer is null.");
    return 0;
  }
  uint64_t v5 = sub_21701B300(a1, a2, &v10, a4);
  if (v5)
  {
    *(double *)a3 = pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotation((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)&v10);
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = v7;
    *(void *)(a3 + 24) = v8;
  }
  return v5;
}

{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  float32x4_t v10;
  uint64_t v11;
  const char *v12;
  char v13;

  if (!a2)
  {
    v10.i64[0] = (uint64_t)"usdSkel/utils.cpp";
    v10.i64[1] = (uint64_t)"UsdSkelDecomposeTransform";
    uint64_t v11 = 515;
    float v12 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfQuatf *, GfVec3"
          "h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'translate' pointer is null.");
    return 0;
  }
  if (!a3)
  {
    v10.i64[0] = (uint64_t)"usdSkel/utils.cpp";
    v10.i64[1] = (uint64_t)"UsdSkelDecomposeTransform";
    uint64_t v11 = 519;
    float v12 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfQuatf *, GfVec3"
          "h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'rotate' pointer is null.");
    return 0;
  }
  if (!a4)
  {
    v10.i64[0] = (uint64_t)"usdSkel/utils.cpp";
    v10.i64[1] = (uint64_t)"UsdSkelDecomposeTransform";
    uint64_t v11 = 523;
    float v12 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfQuatf *, GfVec3"
          "h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"'scale' pointer is null.");
    return 0;
  }
  uint64_t v5 = sub_21701B300(a1, a2, &v10, a4);
  if (v5)
  {
    *(float *)a3 = pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotationQuat((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)&v10);
    *(_DWORD *)(a3 + 4) = v6;
    *(_DWORD *)(a3 + 8) = v7;
    *(_DWORD *)(a3 + 12) = v8;
  }
  return v5;
}

uint64_t sub_21701B300(uint64_t a1, uint64_t a2, float32x4_t *a3, _WORD *a4)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::GfMatrix4f::Factor(a1, v17, (uint64_t)&v13, a3, (uint64_t)&v11, (uint64_t)v16, 0.00001);
  if (result)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::GfMatrix4f::Orthonormalize((float32x2_t *)a3, 1);
    if (result)
    {
      if (v13 == 0.0)
      {
        unsigned int v8 = HIWORD(LODWORD(v13));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v13) >> 23])
      {
        unsigned int v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v13) >> 23]
           + (((LODWORD(v13) & 0x7FFFFF) + ((LODWORD(v13) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v13));
      }
      if (v14 == 0.0)
      {
        unsigned int v9 = HIWORD(LODWORD(v14));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23])
      {
        unsigned int v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23]
           + (((LODWORD(v14) & 0x7FFFFF) + ((LODWORD(v14) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v14));
      }
      if (v15 == 0.0)
      {
        unsigned int v10 = HIWORD(LODWORD(v15));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v15) >> 23])
      {
        unsigned int v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v15) >> 23]
            + (((LODWORD(v15) & 0x7FFFFF) + ((LODWORD(v15) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v10) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v15));
      }
      *a4 = v8;
      a4[1] = v9;
      a4[2] = v10;
      *(void *)a2 = v11;
      *(_DWORD *)(a2 + 8) = v12;
      return 1;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, float32x2_t *a2, float32x4_t *a3, _WORD *a4)
{
  if (!a2)
  {
    float v14 = "usdSkel/utils.cpp";
    float v15 = "UsdSkelDecomposeTransform";
    uint64_t v16 = 515;
    size_t v17 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfQuatf *, GfVec3"
          "h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"'translate' pointer is null.");
    return 0;
  }
  if (!a3)
  {
    float v14 = "usdSkel/utils.cpp";
    float v15 = "UsdSkelDecomposeTransform";
    uint64_t v16 = 519;
    size_t v17 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfQuatf *, GfVec3"
          "h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"'rotate' pointer is null.");
    return 0;
  }
  if (!a4)
  {
    float v14 = "usdSkel/utils.cpp";
    float v15 = "UsdSkelDecomposeTransform";
    uint64_t v16 = 523;
    size_t v17 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransform(const Matrix4 &, GfVec3f *, GfQuatf *, GfVec3"
          "h *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"'scale' pointer is null.");
    return 0;
  }
  uint64_t v5 = sub_21701B074(a1, a2, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v14, a4);
  if (v5)
  {
    v10.n128_u64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationQuat((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v14);
    v10.n128_u64[1] = v6;
    uint64_t v11 = v7;
    uint64_t v12 = v8;
    pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(&v13, &v10);
    *a3 = v13;
  }
  return v5;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(float32x2_t *a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  if (a4)
  {
    float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a3];
    float v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a3[1]];
    double v6 = (float)(v4 * *(float *)(a2 + 8));
    float v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a3[2]];
    double v8 = (float)(v5 * *(float *)(a2 + 20));
    double v9 = (float)(v7 * *(float *)(a2 + 32));
    double v10 = a1[1].f32[0];
    float64x2_t v11 = vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a2 + 12), v5));
    float64x2_t v12 = vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a2 + 24), v7));
    float64x2_t v13 = vcvtq_f64_f32(*a1);
    *(float64x2_t *)a4 = vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)a2, v4));
    *(double *)(a4 + 16) = v6;
    *(void *)(a4 + 24) = 0;
    *(float64x2_t *)(a4 + 32) = v11;
    *(double *)(a4 + 48) = v8;
    *(void *)(a4 + 56) = 0;
    *(float64x2_t *)(a4 + 64) = v12;
    *(double *)(a4 + 80) = v9;
    *(void *)(a4 + 88) = 0;
    *(float64x2_t *)(a4 + 96) = v13;
    *(double *)(a4 + 112) = v10;
    *(void *)(a4 + 120) = 0x3FF0000000000000;
  }
  else
  {
    v14[0] = "usdSkel/utils.cpp";
    v14[1] = "UsdSkelMakeTransform";
    v14[2] = 690;
    void v14[3] = "void pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransform(const GfVec3f &, const GfMatrix3f &, const GfVe"
             "c3h &, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' is null");
  }
}

void pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(float32x2_t *a1, uint64_t a2, unsigned __int16 *a3, float32x2_t *a4)
{
  if (a4)
  {
    float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a3];
    float32_t v5 = v4 * *(float *)(a2 + 8);
    float v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a3[1]];
    float v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a3[2]];
    float32_t v8 = v6 * *(float *)(a2 + 20);
    float32_t v9 = v7 * *(float *)(a2 + 32);
    __int32 v10 = a1[1].i32[0];
    float32x2_t v11 = vmul_n_f32(*(float32x2_t *)(a2 + 12), v6);
    float32x2_t v12 = vmul_n_f32(*(float32x2_t *)(a2 + 24), v7);
    float32x2_t v13 = *a1;
    *a4 = vmul_n_f32(*(float32x2_t *)a2, v4);
    a4[1].f32[0] = v5;
    a4[1].i32[1] = 0;
    a4[2] = v11;
    a4[3].f32[0] = v8;
    a4[3].i32[1] = 0;
    a4[4] = v12;
    a4[5].f32[0] = v9;
    a4[5].i32[1] = 0;
    a4[6] = v13;
    a4[7].i32[0] = v10;
    a4[7].i32[1] = 1065353216;
  }
  else
  {
    v14[0] = "usdSkel/utils.cpp";
    v14[1] = "UsdSkelMakeTransform";
    v14[2] = 690;
    void v14[3] = "void pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransform(const GfVec3f &, const GfMatrix3f &, const GfVe"
             "c3h &, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' is null");
  }
}

void pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::GfQuatf *a2)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v2, a2);
  pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4d>();
}

void pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::GfQuatf *a2)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v2, a2);
  pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4f>();
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointsExtent<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, int32x2_t a5)
{
  if (a3)
  {
    uint64_t v6 = a2;
    if (a2)
    {
      float32_t v8 = (double *)(a1 + 112);
      do
      {
        double v9 = *v8;
        char v18 = (char *)vcvt_f32_f64(*(float64x2_t *)(v8 - 2));
        *(float *)&double v9 = v9;
        LODWORD(v19) = LODWORD(v9);
        if (a4)
        {
          LODWORD(v16) = sub_21701BAB8(a4, (float *)&v18).u32[0];
          HIDWORD(v16) = v10;
          int v17 = v11;
        }
        else
        {
          uint64_t v16 = v18;
          int v17 = (int)v19;
        }
        sub_21701BA3C(a3, (uint64_t)&v16);
        v8 += 16;
        --v6;
      }
      while (v6);
    }
    float32x4_t v12 = (float32x4_t)vdupq_lane_s32(a5, 0);
    float32x4_t v13 = vsubq_f32(*(float32x4_t *)a3, v12);
    v13.i32[3] = vaddq_f32(*(float32x4_t *)a3, v12).i32[3];
    *(float32x4_t *)a3 = v13;
    *(float32x2_t *)(a3 + 16) = vadd_f32(*(float32x2_t *)(a3 + 16), *(float32x2_t *)v12.f32);
  }
  else
  {
    char v18 = "usdSkel/utils.cpp";
    unint64_t v19 = "UsdSkelComputeJointsExtent";
    uint64_t v20 = 828;
    uint64_t v21 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointsExtent(TfSpan<const Matrix4>, GfRange3f *, float, c"
          "onst Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"'extent' pointer is null.");
  }
  return a3 != 0;
}

uint64_t sub_21701BA3C(uint64_t result, uint64_t a2)
{
  if (*(float *)a2 < *(float *)result) {
    *(_DWORD *)uint64_t result = *(_DWORD *)a2;
  }
  float v2 = *(float *)(a2 + 4);
  if (v2 < *(float *)(result + 4)) {
    *(float *)(result + 4) = v2;
  }
  float v3 = *(float *)(a2 + 8);
  if (v3 < *(float *)(result + 8)) {
    *(float *)(result + 8) = v3;
  }
  if (*(float *)a2 > *(float *)(result + 12)) {
    *(_DWORD *)(result + 12) = *(_DWORD *)a2;
  }
  float v4 = *(float *)(a2 + 4);
  if (v4 > *(float *)(result + 16)) {
    *(float *)(result + 16) = v4;
  }
  float v5 = *(float *)(a2 + 8);
  if (v5 > *(float *)(result + 20)) {
    *(float *)(result + 20) = v5;
  }
  return result;
}

float32x2_t sub_21701BAB8(float64x2_t *a1, float *a2)
{
  return vcvt_f32_f64(vaddq_f64(a1[6], vaddq_f64(vaddq_f64(vmulq_n_f64(*a1, *a2), vmulq_n_f64(a1[2], a2[1])), vmulq_n_f64(a1[4], a2[2]))));
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointsExtent<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t a1, uint64_t a2, uint64_t a3, float32x2_t *a4, int32x2_t a5)
{
  if (a3)
  {
    uint64_t v6 = a2;
    if (a2)
    {
      float32_t v8 = (_DWORD *)(a1 + 56);
      do
      {
        int v9 = *v8;
        char v18 = (char *)*((void *)v8 - 1);
        LODWORD(v19) = v9;
        if (a4)
        {
          LODWORD(v16) = sub_21701BC38(a4, (float *)&v18).u32[0];
          HIDWORD(v16) = v10;
          int v17 = v11;
        }
        else
        {
          uint64_t v16 = v18;
          int v17 = (int)v19;
        }
        sub_21701BA3C(a3, (uint64_t)&v16);
        v8 += 16;
        --v6;
      }
      while (v6);
    }
    float32x4_t v12 = (float32x4_t)vdupq_lane_s32(a5, 0);
    float32x4_t v13 = vsubq_f32(*(float32x4_t *)a3, v12);
    v13.i32[3] = vaddq_f32(*(float32x4_t *)a3, v12).i32[3];
    *(float32x4_t *)a3 = v13;
    *(float32x2_t *)(a3 + 16) = vadd_f32(*(float32x2_t *)(a3 + 16), *(float32x2_t *)v12.f32);
  }
  else
  {
    char v18 = "usdSkel/utils.cpp";
    unint64_t v19 = "UsdSkelComputeJointsExtent";
    uint64_t v20 = 828;
    uint64_t v21 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointsExtent(TfSpan<const Matrix4>, GfRange3f *, float, c"
          "onst Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"'extent' pointer is null.");
  }
  return a3 != 0;
}

float32x2_t sub_21701BC38(float32x2_t *a1, float *a2)
{
  return vadd_f32(a1[6], vadd_f32(vadd_f32(vmul_n_f32(*a1, *a2), vmul_n_f32(a1[2], a2[1])), vmul_n_f32(a1[4], a2[2])));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelIsSkelAnimationPrim(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  StaticTfuint64_t Type = pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetStaticTfType(this);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v4);

  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)this, SchemaInfo, v6);
}

pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *pxrInternal__aapl__pxrReserved__::UsdSkelIsSkinnablePrim(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  StaticTfuint64_t Type = pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::_GetStaticTfType(this);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v4);
  uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)this, SchemaInfo, v6);
  if (result)
  {
    float32_t v8 = pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetStaticTfType(result);
    int v10 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v8, v9);
    uint64_t IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)this, v10, v11);
    if (IsA)
    {
      return 0;
    }
    else
    {
      float32x4_t v13 = pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdSkelRoot *)IsA);
      char v15 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v13, v14);
      return (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)(pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)this, v15, v16) ^ 1);
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms(char **a1, long long *a2, char *a3, uint64_t a4, char *a5, double *a6)
{
  uint64_t v6 = *a1;
  if (a3 != *a1)
  {
    *(void *)&long long v33 = "usdSkel/utils.cpp";
    *((void *)&v33 + 1) = "UsdSkel_ConcatJointTransforms";
    *(void *)&long long v34 = 125;
    *((void *)&v34 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ConcatJointTransforms("
                            "const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<Matrix4>, const Matrix4 *) [Matrix4 ="
                            " pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v35) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v33, (pxrInternal__aapl__pxrReserved__ *)"Size of jointLocalXforms [%zu] != number of joints [%zu]", a3, a3, v6);
    return 0;
  }
  if (a5 != a3)
  {
    *(void *)&long long v33 = "usdSkel/utils.cpp";
    *((void *)&v33 + 1) = "UsdSkel_ConcatJointTransforms";
    *(void *)&long long v34 = 130;
    *((void *)&v34 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ConcatJointTransforms("
                            "const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<Matrix4>, const Matrix4 *) [Matrix4 ="
                            " pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v35) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v33, (pxrInternal__aapl__pxrReserved__ *)"Size of xforms [%zu] != number of joints [%zu]", a3, a5, a3);
    return 0;
  }
  if (!a5) {
    return 1;
  }
  unint64_t v11 = 0;
  for (uint64_t i = a4; ; i += 128)
  {
    unint64_t v13 = *(unsigned int *)&a1[4][4 * v11];
    if ((v13 & 0x80000000) != 0)
    {
      long long v26 = *a2;
      long long v27 = a2[1];
      long long v28 = a2[3];
      *(_OWORD *)(i + 32) = a2[2];
      *(_OWORD *)(i + 48) = v28;
      *(_OWORD *)uint64_t i = v26;
      *(_OWORD *)(i + 16) = v27;
      long long v29 = a2[4];
      long long v30 = a2[5];
      long long v31 = a2[7];
      *(_OWORD *)(i + 96) = a2[6];
      *(_OWORD *)(i + 112) = v31;
      *(_OWORD *)(i + 64) = v29;
      *(_OWORD *)(i + 80) = v30;
      if (a6) {
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)i, a6);
      }
      goto LABEL_10;
    }
    if (v11 <= v13) {
      break;
    }
    long long v14 = *a2;
    long long v15 = a2[1];
    long long v16 = a2[3];
    long long v35 = a2[2];
    long long v36 = v16;
    long long v33 = v14;
    long long v34 = v15;
    long long v17 = a2[4];
    long long v18 = a2[5];
    long long v19 = a2[7];
    long long v39 = a2[6];
    long long v40 = v19;
    long long v37 = v17;
    long long v38 = v18;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v33, (double *)(a4 + (v13 << 7)));
    long long v20 = v36;
    long long v22 = v33;
    long long v21 = v34;
    *(_OWORD *)(i + 32) = v35;
    *(_OWORD *)(i + 48) = v20;
    *(_OWORD *)uint64_t i = v22;
    *(_OWORD *)(i + 16) = v21;
    long long v23 = v40;
    long long v25 = v37;
    long long v24 = v38;
    *(_OWORD *)(i + 96) = v39;
    *(_OWORD *)(i + 112) = v23;
    *(_OWORD *)(i + 64) = v25;
    *(_OWORD *)(i + 80) = v24;
LABEL_10:
    ++v11;
    a2 += 8;
    if (v11 >= (unint64_t)*a1) {
      return 1;
    }
  }
  *(void *)&long long v33 = "usdSkel/utils.cpp";
  *((void *)&v33 + 1) = "UsdSkel_ConcatJointTransforms";
  if (v11 == v13)
  {
    *(void *)&long long v34 = 141;
    *((void *)&v34 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ConcatJointTransforms("
                            "const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<Matrix4>, const Matrix4 *) [Matrix4 ="
                            " pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v35) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v33, (pxrInternal__aapl__pxrReserved__ *)"Joint %zu has itself as its parent.", a3, v11);
  }
  else
  {
    *(void *)&long long v34 = 145;
    *((void *)&v34 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ConcatJointTransforms("
                            "const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<Matrix4>, const Matrix4 *) [Matrix4 ="
                            " pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v35) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v33, (pxrInternal__aapl__pxrReserved__ *)"Joint %zu has mis-ordered parent %d. Joints are expected to be ordered with parent joints always coming before children.", a3, v11, v13);
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms(char **a1, long long *a2, char *a3, uint64_t a4, char *a5, float *a6)
{
  uint64_t v6 = *a1;
  if (a3 != *a1)
  {
    *(void *)&long long v24 = "usdSkel/utils.cpp";
    *((void *)&v24 + 1) = "UsdSkel_ConcatJointTransforms";
    *(void *)&long long v25 = 125;
    *((void *)&v25 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ConcatJointTransforms("
                            "const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<Matrix4>, const Matrix4 *) [Matrix4 ="
                            " pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v26) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v24, (pxrInternal__aapl__pxrReserved__ *)"Size of jointLocalXforms [%zu] != number of joints [%zu]", a3, a3, v6);
    return 0;
  }
  if (a5 != a3)
  {
    *(void *)&long long v24 = "usdSkel/utils.cpp";
    *((void *)&v24 + 1) = "UsdSkel_ConcatJointTransforms";
    *(void *)&long long v25 = 130;
    *((void *)&v25 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ConcatJointTransforms("
                            "const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<Matrix4>, const Matrix4 *) [Matrix4 ="
                            " pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v26) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v24, (pxrInternal__aapl__pxrReserved__ *)"Size of xforms [%zu] != number of joints [%zu]", a3, a5, a3);
    return 0;
  }
  if (!a5) {
    return 1;
  }
  unint64_t v11 = 0;
  for (uint64_t i = a4; ; i += 64)
  {
    unint64_t v13 = *(unsigned int *)&a1[4][4 * v11];
    if ((v13 & 0x80000000) != 0)
    {
      long long v20 = *a2;
      long long v21 = a2[1];
      long long v22 = a2[3];
      *(_OWORD *)(i + 32) = a2[2];
      *(_OWORD *)(i + 48) = v22;
      *(_OWORD *)uint64_t i = v20;
      *(_OWORD *)(i + 16) = v21;
      if (a6) {
        pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=((float *)i, a6);
      }
      goto LABEL_10;
    }
    if (v11 <= v13) {
      break;
    }
    long long v14 = *a2;
    long long v15 = a2[1];
    long long v16 = a2[3];
    long long v26 = a2[2];
    long long v27 = v16;
    long long v24 = v14;
    long long v25 = v15;
    pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=((float *)&v24, (float *)(a4 + (v13 << 6)));
    long long v17 = v27;
    long long v19 = v24;
    long long v18 = v25;
    *(_OWORD *)(i + 32) = v26;
    *(_OWORD *)(i + 48) = v17;
    *(_OWORD *)uint64_t i = v19;
    *(_OWORD *)(i + 16) = v18;
LABEL_10:
    ++v11;
    a2 += 4;
    if (v11 >= (unint64_t)*a1) {
      return 1;
    }
  }
  *(void *)&long long v24 = "usdSkel/utils.cpp";
  *((void *)&v24 + 1) = "UsdSkel_ConcatJointTransforms";
  if (v11 == v13)
  {
    *(void *)&long long v25 = 141;
    *((void *)&v25 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ConcatJointTransforms("
                            "const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<Matrix4>, const Matrix4 *) [Matrix4 ="
                            " pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v26) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v24, (pxrInternal__aapl__pxrReserved__ *)"Joint %zu has itself as its parent.", a3, v11);
  }
  else
  {
    *(void *)&long long v25 = 145;
    *((void *)&v25 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ConcatJointTransforms("
                            "const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<Matrix4>, const Matrix4 *) [Matrix4 ="
                            " pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v26) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v24, (pxrInternal__aapl__pxrReserved__ *)"Joint %zu has mis-ordered parent %d. Joints are expected to be ordered with parent joints always coming before children.", a3, v11, v13);
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms(char **a1, uint64_t a2, uint64_t a3, double *a4)
{
  if (a3)
  {
    float32_t v8 = *a1;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v22 = &v14;
    sub_216902248((unint64_t *)a3, (unint64_t)v8, &v22);
    int v9 = *(long long **)(a2 + 32);
    int v10 = *(char **)a2;
    sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v11, v12);
    return pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms(a1, v9, v10, *(void *)(a3 + 32), *(char **)a3, a4);
  }
  else
  {
    *(void *)&long long v14 = "usdSkel/utils.cpp";
    *((void *)&v14 + 1) = "UsdSkelConcatJointTransforms";
    *(void *)&long long v15 = 194;
    *((void *)&v15 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms(const UsdSkelTopology &,"
                            " const VtMatrix4dArray &, VtMatrix4dArray *, const GfMatrix4d *)";
    LOBYTE(v16) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' is null");
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms(char **a1, long long *a2, uint64_t a3, double *a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdSkelConcatJointTransforms(a1, a2, *a1, a3, *a1, a4);
}

uint64_t sub_21701C21C(char **a1, long long *a2, char *a3, uint64_t a4, char *a5, uint64_t a6, char *a7, double *a8)
{
  float32_t v8 = *a1;
  if (a3 != *a1)
  {
    *(void *)&long long v35 = "usdSkel/utils.cpp";
    *((void *)&v35 + 1) = "UsdSkel_ComputeJointLocalTransforms";
    *(void *)&long long v36 = 233;
    *((void *)&v36 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ComputeJointLocalTrans"
                            "forms(const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<const Matrix4>, TfSpan<Matrix4>"
                            ", const Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v37) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v35, (pxrInternal__aapl__pxrReserved__ *)"Size of xforms [%zu] != number of joints [%zu]", a3, a3, v8);
    return 0;
  }
  if (a5 != a3)
  {
    *(void *)&long long v35 = "usdSkel/utils.cpp";
    *((void *)&v35 + 1) = "UsdSkel_ComputeJointLocalTransforms";
    *(void *)&long long v36 = 238;
    *((void *)&v36 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ComputeJointLocalTrans"
                            "forms(const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<const Matrix4>, TfSpan<Matrix4>"
                            ", const Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v37) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v35, (pxrInternal__aapl__pxrReserved__ *)"Size of inverseXforms [%zu] != number of joints [%zu]", a3, a5, a3);
    return 0;
  }
  if (a7 != a3)
  {
    *(void *)&long long v35 = "usdSkel/utils.cpp";
    *((void *)&v35 + 1) = "UsdSkel_ComputeJointLocalTransforms";
    *(void *)&long long v36 = 243;
    *((void *)&v36 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ComputeJointLocalTrans"
                            "forms(const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<const Matrix4>, TfSpan<Matrix4>"
                            ", const Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v37) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v35, (pxrInternal__aapl__pxrReserved__ *)"Size of jointLocalXforms [%zu] != number of joints [%zu]", a3, a7, a3);
    return 0;
  }
  if (!a3) {
    return 1;
  }
  unint64_t v14 = 0;
  while (1)
  {
    unint64_t v15 = *(unsigned int *)&a1[4][4 * v14];
    if ((v15 & 0x80000000) != 0)
    {
      long long v28 = *a2;
      long long v29 = a2[1];
      long long v30 = a2[3];
      *(_OWORD *)(a6 + 32) = a2[2];
      *(_OWORD *)(a6 + 48) = v30;
      *(_OWORD *)a6 = v28;
      *(_OWORD *)(a6 + 16) = v29;
      long long v31 = a2[4];
      long long v32 = a2[5];
      long long v33 = a2[7];
      *(_OWORD *)(a6 + 96) = a2[6];
      *(_OWORD *)(a6 + 112) = v33;
      *(_OWORD *)(a6 + 64) = v31;
      *(_OWORD *)(a6 + 80) = v32;
      if (a8) {
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)a6, a8);
      }
      goto LABEL_11;
    }
    if (v14 <= v15) {
      break;
    }
    long long v16 = *a2;
    long long v17 = a2[1];
    long long v18 = a2[3];
    long long v37 = a2[2];
    long long v38 = v18;
    long long v35 = v16;
    long long v36 = v17;
    long long v19 = a2[4];
    long long v20 = a2[5];
    long long v21 = a2[7];
    long long v41 = a2[6];
    long long v42 = v21;
    long long v39 = v19;
    long long v40 = v20;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v35, (double *)(a4 + (v15 << 7)));
    long long v22 = v38;
    long long v24 = v35;
    long long v23 = v36;
    *(_OWORD *)(a6 + 32) = v37;
    *(_OWORD *)(a6 + 48) = v22;
    *(_OWORD *)a6 = v24;
    *(_OWORD *)(a6 + 16) = v23;
    long long v25 = v42;
    long long v27 = v39;
    long long v26 = v40;
    *(_OWORD *)(a6 + 96) = v41;
    *(_OWORD *)(a6 + 112) = v25;
    *(_OWORD *)(a6 + 64) = v27;
    *(_OWORD *)(a6 + 80) = v26;
LABEL_11:
    ++v14;
    a2 += 8;
    a6 += 128;
    if (v14 >= (unint64_t)*a1) {
      return 1;
    }
  }
  *(void *)&long long v35 = "usdSkel/utils.cpp";
  *((void *)&v35 + 1) = "UsdSkel_ComputeJointLocalTransforms";
  if (v14 == v15)
  {
    *(void *)&long long v36 = 259;
    *((void *)&v36 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ComputeJointLocalTrans"
                            "forms(const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<const Matrix4>, TfSpan<Matrix4>"
                            ", const Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v37) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v35, (pxrInternal__aapl__pxrReserved__ *)"Joint %zu has itself as its parent.", a3, v14);
  }
  else
  {
    *(void *)&long long v36 = 264;
    *((void *)&v36 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ComputeJointLocalTrans"
                            "forms(const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<const Matrix4>, TfSpan<Matrix4>"
                            ", const Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v37) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v35, (pxrInternal__aapl__pxrReserved__ *)"Joint %zu has mis-ordered parent %d. Joints are expected to be ordered with parent joints always coming before children.", a3, v14, v15);
  }
  return 0;
}

uint64_t sub_21701C464(char **a1, long long *a2, char *a3, uint64_t a4, char *a5, uint64_t a6, char *a7, float *a8)
{
  float32_t v8 = *a1;
  if (a3 != *a1)
  {
    *(void *)&long long v26 = "usdSkel/utils.cpp";
    *((void *)&v26 + 1) = "UsdSkel_ComputeJointLocalTransforms";
    *(void *)&long long v27 = 233;
    *((void *)&v27 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ComputeJointLocalTrans"
                            "forms(const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<const Matrix4>, TfSpan<Matrix4>"
                            ", const Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v28) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__ *)"Size of xforms [%zu] != number of joints [%zu]", a3, a3, v8);
    return 0;
  }
  if (a5 != a3)
  {
    *(void *)&long long v26 = "usdSkel/utils.cpp";
    *((void *)&v26 + 1) = "UsdSkel_ComputeJointLocalTransforms";
    *(void *)&long long v27 = 238;
    *((void *)&v27 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ComputeJointLocalTrans"
                            "forms(const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<const Matrix4>, TfSpan<Matrix4>"
                            ", const Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v28) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__ *)"Size of inverseXforms [%zu] != number of joints [%zu]", a3, a5, a3);
    return 0;
  }
  if (a7 != a3)
  {
    *(void *)&long long v26 = "usdSkel/utils.cpp";
    *((void *)&v26 + 1) = "UsdSkel_ComputeJointLocalTransforms";
    *(void *)&long long v27 = 243;
    *((void *)&v27 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ComputeJointLocalTrans"
                            "forms(const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<const Matrix4>, TfSpan<Matrix4>"
                            ", const Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v28) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__ *)"Size of jointLocalXforms [%zu] != number of joints [%zu]", a3, a7, a3);
    return 0;
  }
  if (!a3) {
    return 1;
  }
  unint64_t v14 = 0;
  while (1)
  {
    unint64_t v15 = *(unsigned int *)&a1[4][4 * v14];
    if ((v15 & 0x80000000) != 0)
    {
      long long v22 = *a2;
      long long v23 = a2[1];
      long long v24 = a2[3];
      *(_OWORD *)(a6 + 32) = a2[2];
      *(_OWORD *)(a6 + 48) = v24;
      *(_OWORD *)a6 = v22;
      *(_OWORD *)(a6 + 16) = v23;
      if (a8) {
        pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=((float *)a6, a8);
      }
      goto LABEL_11;
    }
    if (v14 <= v15) {
      break;
    }
    long long v16 = *a2;
    long long v17 = a2[1];
    long long v18 = a2[3];
    long long v28 = a2[2];
    long long v29 = v18;
    long long v26 = v16;
    long long v27 = v17;
    pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=((float *)&v26, (float *)(a4 + (v15 << 6)));
    long long v19 = v29;
    long long v21 = v26;
    long long v20 = v27;
    *(_OWORD *)(a6 + 32) = v28;
    *(_OWORD *)(a6 + 48) = v19;
    *(_OWORD *)a6 = v21;
    *(_OWORD *)(a6 + 16) = v20;
LABEL_11:
    ++v14;
    a2 += 4;
    a6 += 64;
    if (v14 >= (unint64_t)*a1) {
      return 1;
    }
  }
  *(void *)&long long v26 = "usdSkel/utils.cpp";
  *((void *)&v26 + 1) = "UsdSkel_ComputeJointLocalTransforms";
  if (v14 == v15)
  {
    *(void *)&long long v27 = 259;
    *((void *)&v27 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ComputeJointLocalTrans"
                            "forms(const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<const Matrix4>, TfSpan<Matrix4>"
                            ", const Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v28) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__ *)"Joint %zu has itself as its parent.", a3, v14);
  }
  else
  {
    *(void *)&long long v27 = 264;
    *((void *)&v27 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ComputeJointLocalTrans"
                            "forms(const UsdSkelTopology &, TfSpan<const Matrix4>, TfSpan<const Matrix4>, TfSpan<Matrix4>"
                            ", const Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v28) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__ *)"Joint %zu has mis-ordered parent %d. Joints are expected to be ordered with parent joints always coming before children.", a3, v14, v15);
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointLocalTransforms(char **a1, long long *a2, char *a3, uint64_t a4, char *a5, double *a6)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  float32x4_t v12 = (pxrInternal__aapl__pxrReserved__ *)sub_21702634C(&__p, (unint64_t)a3);
  v33[0] = a2;
  v33[1] = a3;
  v32[0] = __p;
  v32[1] = (v30 - (unsigned char *)__p) >> 7;
  v31[0] = v32;
  v31[1] = v33;
  if ((unint64_t)a3 >= 0x3E8)
  {
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v12))
    {
      LODWORD(v35[0]) = 0;
      uint64_t v36 = 65539;
      int v37 = 55;
      tbb::task_group_context::init((uint64_t)v35, v13, v14, v15);
      long long v34 = (tbb::task_group_context *)v35;
      uint64_t v16 = tbb::internal::allocate_root_with_context_proxy::allocate(&v34, 0x38uLL);
      *(unsigned char *)(v16 - 11) = 1;
      *(void *)uint64_t v16 = &unk_26C76FBA8;
      *(void *)(v16 + 8) = a3;
      *(_OWORD *)(v16 + 16) = xmmword_2174A9840;
      *(void *)(v16 + 32) = v31;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v16);
      *(_DWORD *)(v16 + 48) = 0;
      *(unsigned char *)(v16 + 52) = 5;
      *(void *)(v16 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v16 - 40) + 16))(*(void *)(v16 - 40), v16, v16 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v35);
      goto LABEL_8;
    }
  }
  else if (!a3)
  {
    goto LABEL_8;
  }
  uint64_t v18 = 0;
  long long v19 = a3;
  do
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)(v33[0] + v18), 0, 0.0, (uint64_t)v35);
    long long v20 = (_OWORD *)(v32[0] + v18);
    long long v21 = v35[0];
    long long v22 = v35[1];
    long long v23 = v35[3];
    v20[2] = v35[2];
    v20[3] = v23;
    v20[1] = v22;
    long long v24 = v35[7];
    long long v25 = v35[5];
    long long v26 = v35[4];
    v20[6] = v35[6];
    v20[7] = v24;
    _OWORD v20[4] = v26;
    v20[5] = v25;
    *long long v20 = v21;
    v18 += 128;
    --v19;
  }
  while (v19);
LABEL_8:
  uint64_t v27 = sub_21701C21C(a1, a2, a3, (uint64_t)__p, (char *)((v30 - (unsigned char *)__p) >> 7), a4, a5, a6);
  if (__p)
  {
    long long v30 = __p;
    operator delete(__p);
  }
  return v27;
}

void sub_21701C8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a19, v23);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a21);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointLocalTransforms(char **a1, long long *a2, char *a3, uint64_t a4, char *a5, float *a6)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  float32x4_t v12 = (pxrInternal__aapl__pxrReserved__ *)sub_217026894(&__p, (unint64_t)a3);
  v30[0] = a2;
  v30[1] = a3;
  v29[0] = __p;
  v29[1] = (v27 - (unsigned char *)__p) >> 6;
  v28[0] = v29;
  v28[1] = v30;
  if ((unint64_t)a3 >= 0x3E8)
  {
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v12))
    {
      LODWORD(v32[0]) = 0;
      uint64_t v33 = 65539;
      int v34 = 55;
      tbb::task_group_context::init((uint64_t)v32, v13, v14, v15);
      long long v31 = (tbb::task_group_context *)v32;
      uint64_t v16 = tbb::internal::allocate_root_with_context_proxy::allocate(&v31, 0x38uLL);
      *(unsigned char *)(v16 - 11) = 1;
      *(void *)uint64_t v16 = &unk_26C76FBF0;
      *(void *)(v16 + 8) = a3;
      *(_OWORD *)(v16 + 16) = xmmword_2174A9840;
      *(void *)(v16 + 32) = v28;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v16);
      *(_DWORD *)(v16 + 48) = 0;
      *(unsigned char *)(v16 + 52) = 5;
      *(void *)(v16 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v16 - 40) + 16))(*(void *)(v16 - 40), v16, v16 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v32);
      goto LABEL_8;
    }
  }
  else if (!a3)
  {
    goto LABEL_8;
  }
  uint64_t v18 = 0;
  long long v19 = a3;
  do
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix4f::GetInverse((float *)(v30[0] + v18), 0, 0.0, (uint64_t)v32);
    long long v20 = (_OWORD *)(v29[0] + v18);
    long long v21 = v32[0];
    long long v22 = v32[1];
    long long v23 = v32[3];
    v20[2] = v32[2];
    v20[3] = v23;
    *long long v20 = v21;
    v20[1] = v22;
    v18 += 64;
    --v19;
  }
  while (v19);
LABEL_8:
  uint64_t v24 = sub_21701C464(a1, a2, a3, (uint64_t)__p, (char *)((v27 - (unsigned char *)__p) >> 6), a4, a5, a6);
  if (__p)
  {
    uint64_t v27 = __p;
    operator delete(__p);
  }
  return v24;
}

void sub_21701CB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a19, v23);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a21);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointLocalTransforms(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5)
{
  if (a4)
  {
    int v10 = *a1;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v26 = &v18;
    sub_216902248((unint64_t *)a4, (unint64_t)v10, &v26);
    uint64_t v11 = *(long long **)(a2 + 32);
    float32x4_t v12 = *(char **)a2;
    uint64_t v13 = *(void *)(a3 + 32);
    uint64_t v14 = *(char **)a3;
    sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
    return sub_21701C21C(a1, v11, v12, v13, v14, *(void *)(a4 + 32), *(char **)a4, a5);
  }
  else
  {
    *(void *)&long long v18 = "usdSkel/utils.cpp";
    *((void *)&v18 + 1) = "UsdSkelComputeJointLocalTransforms";
    *(void *)&long long v19 = 353;
    *((void *)&v19 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointLocalTransforms(const UsdSkelTopol"
                            "ogy &, const VtMatrix4dArray &, const VtMatrix4dArray &, VtMatrix4dArray *, const GfMatrix4d *)";
    LOBYTE(v20) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"'jointLocalXforms' is null");
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointLocalTransforms(char **a1, uint64_t a2, uint64_t a3, double *a4)
{
  if (a3)
  {
    float32_t v8 = *a1;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v22 = &v14;
    sub_216902248((unint64_t *)a3, (unint64_t)v8, &v22);
    int v9 = *(long long **)(a2 + 32);
    int v10 = *(char **)a2;
    sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v11, v12);
    return pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointLocalTransforms(a1, v9, v10, *(void *)(a3 + 32), *(char **)a3, a4);
  }
  else
  {
    *(void *)&long long v14 = "usdSkel/utils.cpp";
    *((void *)&v14 + 1) = "UsdSkelComputeJointLocalTransforms";
    *(void *)&long long v15 = 370;
    *((void *)&v15 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointLocalTransforms(const UsdSkelTopol"
                            "ogy &, const VtMatrix4dArray &, VtMatrix4dArray *, const GfMatrix4d *)";
    LOBYTE(v16) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"'jointLocalXforms' is null");
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointLocalTransforms(char **a1, long long *a2, uint64_t a3, uint64_t a4, double *a5)
{
  return sub_21701C21C(a1, a2, *a1, a3, *a1, a4, *a1, a5);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransforms(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  v21[0] = a1;
  v21[1] = a2;
  v20[0] = a3;
  v20[1] = a4;
  v19[0] = a5;
  v19[1] = a6;
  v18[0] = a7;
  v18[1] = a8;
  if (a4 != a2)
  {
    long long v23 = "usdSkel/utils.cpp";
    long long v24 = "UsdSkel_DecomposeTransforms";
    uint64_t v25 = 558;
    long long v26 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_DecomposeTransforms(TfSpan<const Matrix4"
          ">, TfSpan<GfVec3f>, TfSpan<GfQuatf>, TfSpan<GfVec3h>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v27 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v23, (pxrInternal__aapl__pxrReserved__ *)"Size of translations [%zu] != size of xforms [%zu]", a3, a4, a2);
    return 0;
  }
  if (a6 != a4)
  {
    long long v23 = "usdSkel/utils.cpp";
    long long v24 = "UsdSkel_DecomposeTransforms";
    uint64_t v25 = 563;
    long long v26 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_DecomposeTransforms(TfSpan<const Matrix4"
          ">, TfSpan<GfVec3f>, TfSpan<GfQuatf>, TfSpan<GfVec3h>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v27 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v23, (pxrInternal__aapl__pxrReserved__ *)"Size of rotations [%zu] != size of xforms [%zu]", a3, a6, a4);
    return 0;
  }
  if (a8 != a4)
  {
    long long v23 = "usdSkel/utils.cpp";
    long long v24 = "UsdSkel_DecomposeTransforms";
    uint64_t v25 = 568;
    long long v26 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_DecomposeTransforms(TfSpan<const Matrix4"
          ">, TfSpan<GfVec3f>, TfSpan<GfQuatf>, TfSpan<GfVec3h>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v27 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v23, (pxrInternal__aapl__pxrReserved__ *)"Size of scales [%zu] != size of xforms [%zu]", a3, a8, a4);
    return 0;
  }
  unsigned __int8 v17 = 0;
  v16[0] = v21;
  v16[1] = v20;
  v16[2] = v18;
  v16[3] = v19;
  void v16[4] = &v17;
  if (a4 > 0x3E7)
  {
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
    {
      LODWORD(v23) = 0;
      uint64_t v28 = 65539;
      int v29 = 55;
      tbb::task_group_context::init((uint64_t)&v23, v10, v11, v12);
      long long v22 = &v23;
      uint64_t v13 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v22, 0x38uLL);
      *(unsigned char *)(v13 - 11) = 1;
      *(void *)uint64_t v13 = &unk_26C76FC38;
      *(void *)(v13 + 8) = a4;
      *(_OWORD *)(v13 + 16) = xmmword_2174A9840;
      *(void *)(v13 + 32) = v16;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v13);
      *(_DWORD *)(v13 + 48) = 0;
      *(unsigned char *)(v13 + 52) = 5;
      *(void *)(v13 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v13 - 40) + 16))(*(void *)(v13 - 40), v13, v13 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v23);
    }
    else
    {
      sub_217026DCC(a4, (uint64_t)v16);
    }
  }
  else
  {
    sub_217026DCC(a4, (uint64_t)v16);
  }
  unsigned __int8 v15 = atomic_load(&v17);
  return (v15 & 1) == 0;
}

{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t initial_auto_partitioner_divisor;
  unsigned __int8 v15;
  void v16[5];
  unsigned __int8 v17;
  void v18[2];
  void v19[2];
  void v20[2];
  void v21[2];
  char **v22;
  char *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  char v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  uint64_t v30 = *MEMORY[0x263EF8340];
  v21[0] = a1;
  v21[1] = a2;
  v20[0] = a3;
  v20[1] = a4;
  v19[0] = a5;
  v19[1] = a6;
  v18[0] = a7;
  v18[1] = a8;
  if (a4 != a2)
  {
    long long v23 = "usdSkel/utils.cpp";
    long long v24 = "UsdSkel_DecomposeTransforms";
    uint64_t v25 = 558;
    long long v26 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_DecomposeTransforms(TfSpan<const Matrix4"
          ">, TfSpan<GfVec3f>, TfSpan<GfQuatf>, TfSpan<GfVec3h>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v27 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v23, (pxrInternal__aapl__pxrReserved__ *)"Size of translations [%zu] != size of xforms [%zu]", a3, a4, a2);
    return 0;
  }
  if (a6 != a4)
  {
    long long v23 = "usdSkel/utils.cpp";
    long long v24 = "UsdSkel_DecomposeTransforms";
    uint64_t v25 = 563;
    long long v26 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_DecomposeTransforms(TfSpan<const Matrix4"
          ">, TfSpan<GfVec3f>, TfSpan<GfQuatf>, TfSpan<GfVec3h>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v27 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v23, (pxrInternal__aapl__pxrReserved__ *)"Size of rotations [%zu] != size of xforms [%zu]", a3, a6, a4);
    return 0;
  }
  if (a8 != a4)
  {
    long long v23 = "usdSkel/utils.cpp";
    long long v24 = "UsdSkel_DecomposeTransforms";
    uint64_t v25 = 568;
    long long v26 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_DecomposeTransforms(TfSpan<const Matrix4"
          ">, TfSpan<GfVec3f>, TfSpan<GfQuatf>, TfSpan<GfVec3h>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v27 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v23, (pxrInternal__aapl__pxrReserved__ *)"Size of scales [%zu] != size of xforms [%zu]", a3, a8, a4);
    return 0;
  }
  unsigned __int8 v17 = 0;
  v16[0] = v21;
  v16[1] = v20;
  v16[2] = v18;
  v16[3] = v19;
  void v16[4] = &v17;
  if (a4 > 0x3E7)
  {
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
    {
      LODWORD(v23) = 0;
      uint64_t v28 = 65539;
      int v29 = 55;
      tbb::task_group_context::init((uint64_t)&v23, v10, v11, v12);
      long long v22 = &v23;
      uint64_t v13 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v22, 0x38uLL);
      *(unsigned char *)(v13 - 11) = 1;
      *(void *)uint64_t v13 = &unk_26C76FC80;
      *(void *)(v13 + 8) = a4;
      *(_OWORD *)(v13 + 16) = xmmword_2174A9840;
      *(void *)(v13 + 32) = v16;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v13);
      *(_DWORD *)(v13 + 48) = 0;
      *(unsigned char *)(v13 + 52) = 5;
      *(void *)(v13 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v13 - 40) + 16))(*(void *)(v13 - 40), v13, v13 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v23);
    }
    else
    {
      sub_217027448(a4, (uint64_t)v16);
    }
  }
  else
  {
    sub_217027448(a4, (uint64_t)v16);
  }
  unsigned __int8 v15 = atomic_load(&v17);
  return (v15 & 1) == 0;
}

void sub_21701CFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,int a26,__int16 a27,char a28,char a29)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a25, v29);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a27);
  _Unwind_Resume(a1);
}

void sub_21701D2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,int a26,__int16 a27,char a28,char a29)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a25, v29);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a27);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransforms(pxrInternal__aapl__pxrReserved__ *a1, char *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransforms(a1, a5, a2, a5, a3, a5, a4, a5);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransforms(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (a2)
  {
    if (a3)
    {
      if (a4)
      {
        unint64_t v8 = *a1;
        LODWORD(v25) = 0;
        long long v24 = 0;
        int v29 = (int **)&v24;
        sub_2168FD278(a2, v8, (uint64_t **)&v29);
        unint64_t v9 = *a1;
        int v29 = (int **)&v24;
        sub_216903C50(a3, v9, (_OWORD **)&v29);
        unint64_t v10 = *a1;
        WORD2(v29) = 0;
        LODWORD(v29) = 0;
        long long v24 = (char *)&v29;
        sub_2168FDE18((unint64_t *)a4, v10, (int **)&v24);
        uint64_t v11 = (pxrInternal__aapl__pxrReserved__ *)a1[4];
        uint64_t v12 = *a1;
        sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v13, v14);
        unsigned __int8 v15 = (char *)a2[4];
        unint64_t v16 = *a2;
        sub_216903EB4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v17, v18);
        uint64_t v19 = a3[4];
        uint64_t v20 = *a3;
        sub_2168FE0EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v21, v22);
        return pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransforms(v11, v12, v15, v16, v19, v20, *(void *)(a4 + 32), *(void *)a4);
      }
      long long v24 = "usdSkel/utils.cpp";
      uint64_t v25 = "UsdSkelDecomposeTransforms";
      uint64_t v26 = 654;
      char v27 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransforms(const VtMatrix4dArray &, VtVec3fArray *, V"
            "tQuatfArray *, VtVec3hArray *)";
      char v28 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"'scales' pointer is null.");
    }
    else
    {
      long long v24 = "usdSkel/utils.cpp";
      uint64_t v25 = "UsdSkelDecomposeTransforms";
      uint64_t v26 = 650;
      char v27 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransforms(const VtMatrix4dArray &, VtVec3fArray *, V"
            "tQuatfArray *, VtVec3hArray *)";
      char v28 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"'rotations' pointer is null.");
    }
  }
  else
  {
    long long v24 = "usdSkel/utils.cpp";
    uint64_t v25 = "UsdSkelDecomposeTransforms";
    uint64_t v26 = 646;
    char v27 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelDecomposeTransforms(const VtMatrix4dArray &, VtVec3fArray *, VtQ"
          "uatfArray *, VtVec3hArray *)";
    char v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"'translations' pointer is null.");
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransforms(int a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::GfQuatf *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 != a8)
  {
    unint64_t v9 = "usdSkel/utils.cpp";
    unint64_t v10 = "UsdSkel_MakeTransforms";
    uint64_t v11 = 738;
    uint64_t v12 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_MakeTransforms(TfSpan<const GfVec3f>, Tf"
          "Span<const GfQuatf>, TfSpan<const GfVec3h>, TfSpan<Matrix4>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v9, (pxrInternal__aapl__pxrReserved__ *)"Size of translations [%zu] != size of xforms [%zu]", (char *)a3, a2, a8);
    return 0;
  }
  if (a4 != a8)
  {
    unint64_t v9 = "usdSkel/utils.cpp";
    unint64_t v10 = "UsdSkel_MakeTransforms";
    uint64_t v11 = 743;
    uint64_t v12 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_MakeTransforms(TfSpan<const GfVec3f>, Tf"
          "Span<const GfQuatf>, TfSpan<const GfVec3h>, TfSpan<Matrix4>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v9, (pxrInternal__aapl__pxrReserved__ *)"Size of rotations [%zu] != size of xforms [%zu]", (char *)a3, a4, a8);
    return 0;
  }
  if (a6 != a8)
  {
    unint64_t v9 = "usdSkel/utils.cpp";
    unint64_t v10 = "UsdSkel_MakeTransforms";
    uint64_t v11 = 748;
    uint64_t v12 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_MakeTransforms(TfSpan<const GfVec3f>, Tf"
          "Span<const GfQuatf>, TfSpan<const GfVec3h>, TfSpan<Matrix4>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v9, (pxrInternal__aapl__pxrReserved__ *)"Size of scales [%zu] != size of xforms [%zu]", (char *)a3, a6, a8);
    return 0;
  }
  if (a8)
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v9, a3);
    pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4d>();
  }
  return 1;
}

{
  char *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  char v13;

  if (a2 != a8)
  {
    unint64_t v9 = "usdSkel/utils.cpp";
    unint64_t v10 = "UsdSkel_MakeTransforms";
    uint64_t v11 = 738;
    uint64_t v12 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_MakeTransforms(TfSpan<const GfVec3f>, Tf"
          "Span<const GfQuatf>, TfSpan<const GfVec3h>, TfSpan<Matrix4>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v9, (pxrInternal__aapl__pxrReserved__ *)"Size of translations [%zu] != size of xforms [%zu]", (char *)a3, a2, a8);
    return 0;
  }
  if (a4 != a8)
  {
    unint64_t v9 = "usdSkel/utils.cpp";
    unint64_t v10 = "UsdSkel_MakeTransforms";
    uint64_t v11 = 743;
    uint64_t v12 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_MakeTransforms(TfSpan<const GfVec3f>, Tf"
          "Span<const GfQuatf>, TfSpan<const GfVec3h>, TfSpan<Matrix4>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v9, (pxrInternal__aapl__pxrReserved__ *)"Size of rotations [%zu] != size of xforms [%zu]", (char *)a3, a4, a8);
    return 0;
  }
  if (a6 != a8)
  {
    unint64_t v9 = "usdSkel/utils.cpp";
    unint64_t v10 = "UsdSkel_MakeTransforms";
    uint64_t v11 = 748;
    uint64_t v12 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_MakeTransforms(TfSpan<const GfVec3f>, Tf"
          "Span<const GfQuatf>, TfSpan<const GfVec3h>, TfSpan<Matrix4>) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v9, (pxrInternal__aapl__pxrReserved__ *)"Size of scales [%zu] != size of xforms [%zu]", (char *)a3, a6, a8);
    return 0;
  }
  if (a8)
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v9, a3);
    pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransform<pxrInternal__aapl__pxrReserved__::GfMatrix4f>();
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransforms(int a1, pxrInternal__aapl__pxrReserved__::GfQuatf *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransforms(a1, a5, a2, a5, a3, a5, a4, a5);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransforms(unint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a4)
  {
    unint64_t v8 = *a1;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    uint64_t v26 = &v18;
    sub_216902248((unint64_t *)a4, v8, &v26);
    unint64_t v9 = a1[4];
    uint64_t v10 = *a1;
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::GfQuatf *)a2[4];
    uint64_t v12 = *a2;
    uint64_t v13 = a3[4];
    uint64_t v14 = *a3;
    sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
    return pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransforms(v9, v10, v11, v12, v13, v14, *(void *)(a4 + 32), *(void *)a4);
  }
  else
  {
    *(void *)&long long v18 = "usdSkel/utils.cpp";
    *((void *)&v18 + 1) = "UsdSkelMakeTransforms";
    *(void *)&long long v19 = 808;
    *((void *)&v19 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelMakeTransforms(const VtVec3fArray &, const VtQ"
                            "uatfArray &, const VtVec3hArray &, VtMatrix4dArray *)";
    LOBYTE(v20) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"'xforms' pointer is null.");
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointsExtent()
{
}

{
  pxrInternal__aapl__pxrReserved__::UsdSkelComputeJointsExtent<pxrInternal__aapl__pxrReserved__::GfMatrix4d>();
}

pxrInternal__aapl__pxrReserved__ *pxrInternal__aapl__pxrReserved__::UsdSkelNormalizeWeights(uint64_t a1, unint64_t a2, char *a3, float a4)
{
  int v4 = (int)a3;
  uint64_t v23 = *MEMORY[0x263EF8340];
  v18[0] = a1;
  v18[1] = a2;
  int v17 = (int)a3;
  float v16 = a4;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__ *)sub_21701DBA8(a2, (uint64_t)a3, a3);
  float v7 = v6;
  if (v6)
  {
    unint64_t v8 = a2 / v4;
    v15[0] = v18;
    v15[1] = &v17;
    v15[2] = &v16;
    if (v8 > 0x3E7 && pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v6))
    {
      v20[0] = 0;
      uint64_t v21 = 65539;
      int v22 = 55;
      tbb::task_group_context::init((uint64_t)v20, v9, v10, v11);
      long long v19 = (tbb::task_group_context *)v20;
      uint64_t v12 = tbb::internal::allocate_root_with_context_proxy::allocate(&v19, 0x38uLL);
      *(unsigned char *)(v12 - 11) = 1;
      *(void *)uint64_t v12 = &unk_26C76FCC8;
      *(void *)(v12 + 8) = v8;
      *(_OWORD *)(v12 + 16) = xmmword_2174A9840;
      *(void *)(v12 + 32) = v15;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v12);
      *(_DWORD *)(v12 + 48) = 0;
      *(unsigned char *)(v12 + 52) = 5;
      *(void *)(v12 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v12 - 40) + 16))(*(void *)(v12 - 40), v12, v12 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v20);
    }
    else
    {
      sub_217027AA4(v8, (uint64_t)v15);
    }
  }
  return v7;
}

void sub_21701DB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a15, v19);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_21701DBA8(unint64_t a1, uint64_t a2, char *a3)
{
  if ((int)a2 < 1)
  {
    int v4 = "usdSkel/utils.cpp";
    float v5 = "_ValidateArrayShape";
    uint64_t v6 = 914;
    float v7 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ValidateArrayShape(size_t, int)";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v4, (pxrInternal__aapl__pxrReserved__ *)"Invalid number of influences per component (%d): number of influences must be greater than zero.", a3, a2);
    return 0;
  }
  if (a1 % a2)
  {
    int v4 = "usdSkel/utils.cpp";
    float v5 = "_ValidateArrayShape";
    uint64_t v6 = 909;
    float v7 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ValidateArrayShape(size_t, int)";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v4, (pxrInternal__aapl__pxrReserved__ *)"Unexpected array size [%zu]: Size must be a multiple of the number of influences per component [%d].", a3, a1, a2);
    return 0;
  }
  return 1;
}

pxrInternal__aapl__pxrReserved__ *pxrInternal__aapl__pxrReserved__::UsdSkelNormalizeWeights(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, char *a2, char *a3)
{
  if (a1)
  {
    sub_2168F8710(a1, (uint64_t)a2, a3);
    uint64_t v5 = *((void *)a1 + 4);
    unint64_t v6 = *(void *)a1;
    return pxrInternal__aapl__pxrReserved__::UsdSkelNormalizeWeights(v5, v6, a2, 0.00000011921);
  }
  else
  {
    v8[0] = "usdSkel/utils.cpp";
    v8[1] = "UsdSkelNormalizeWeights";
    _OWORD v8[2] = 969;
    void v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelNormalizeWeights(VtFloatArray *, int)";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"'weights' pointer is null.");
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSortInfluences(uint64_t a1, unint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  v17[0] = a1;
  v17[1] = a2;
  v16[0] = a3;
  v16[1] = a4;
  int v15 = a5;
  if (a2 == a4)
  {
    int v6 = a5;
    uint64_t result = sub_21701DBA8(a2, a5, a3);
    if (result)
    {
      if (v6 >= 2)
      {
        unint64_t v8 = a2 / v6;
        v14[0] = &v15;
        v14[1] = (int *)v16;
        v14[2] = (int *)v17;
        if (v8 > 0x3E7
          && pxrInternal__aapl__pxrReserved__::WorkHasConcurrency((pxrInternal__aapl__pxrReserved__ *)result))
        {
          LODWORD(v19[0]) = 0;
          uint64_t v21 = 65539;
          int v22 = 55;
          tbb::task_group_context::init((uint64_t)v19, v9, v10, v11);
          long long v18 = (tbb::task_group_context *)v19;
          uint64_t v12 = tbb::internal::allocate_root_with_context_proxy::allocate(&v18, 0x38uLL);
          *(unsigned char *)(v12 - 11) = 1;
          *(void *)uint64_t v12 = &unk_26C76FD10;
          *(void *)(v12 + 8) = v8;
          *(_OWORD *)(v12 + 16) = xmmword_2174A9840;
          *(void *)(v12 + 32) = v14;
          unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v12);
          *(_DWORD *)(v12 + 48) = 0;
          *(unsigned char *)(v12 + 52) = 5;
          *(void *)(v12 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v12 - 40) + 16))(*(void *)(v12 - 40), v12, v12 - 8);
          tbb::task_group_context::~task_group_context((tbb::task_group_context *)v19);
        }
        else
        {
          sub_21702809C(v14, 0, v8);
        }
      }
      return 1;
    }
  }
  else
  {
    v19[0] = "usdSkel/utils.cpp";
    v19[1] = "UsdSkelSortInfluences";
    void v19[2] = 985;
    v19[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSortInfluences(TfSpan<int>, TfSpan<float>, int)";
    char v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v19, (pxrInternal__aapl__pxrReserved__ *)"Size of 'indices' [%zu] != size of 'weights' [%zu].", a3, a2, a4);
    return 0;
  }
  return result;
}

void sub_21701DEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a19, v23);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a21);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSortInfluences(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a2, char *a3)
{
  if (!a1)
  {
    uint64_t v13 = "usdSkel/utils.cpp";
    uint64_t v14 = "UsdSkelSortInfluences";
    uint64_t v15 = 1034;
    float v16 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSortInfluences(VtIntArray *, VtFloatArray *, int)";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"'indices' pointer is null.");
    return 0;
  }
  if (!a2)
  {
    uint64_t v13 = "usdSkel/utils.cpp";
    uint64_t v14 = "UsdSkelSortInfluences";
    uint64_t v15 = 1038;
    float v16 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSortInfluences(VtIntArray *, VtFloatArray *, int)";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"'weights' pointer is null.");
    return 0;
  }
  sub_216907C74(a1, (uint64_t)a2, a3);
  uint64_t v6 = *((void *)a1 + 4);
  unint64_t v7 = *(void *)a1;
  sub_2168F8710(a2, v8, v9);
  uint64_t v10 = (char *)*((void *)a2 + 4);
  uint64_t v11 = *(void *)a2;

  return pxrInternal__aapl__pxrReserved__::UsdSkelSortInfluences(v6, v7, v10, v11, (uint64_t)a3);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelExpandConstantInfluencesToVarying(unint64_t *a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      unint64_t v4 = *a1;
      unint64_t v5 = *a1 * a2;
      int v14 = 0;
      v12[0] = &v14;
      sub_216907A0C(a1, v5, v12);
      sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v6, v7);
      uint64_t v8 = a2 - 1;
      if (a2 != 1)
      {
        uint64_t v9 = (char *)a1[4];
        uint64_t v10 = 4 * v4;
        do
        {
          if (v4) {
            memmove(&v9[v10], v9, 4 * v4);
          }
          v10 += 4 * v4;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      sub_2168F845C(a1);
    }
  }
  else
  {
    v12[0] = "usdSkel/utils.cpp";
    v12[1] = "_ExpandConstantArray";
    void v12[2] = (_DWORD *)1053;
    void v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ExpandConstantArray(T *, size_t) [T = pxrInt"
             "ernal__aapl__pxrReserved__::VtArray<int>]";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"'array' pointer is null.");
  }
  return a1 != 0;
}

{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _DWORD *v12[4];
  char v13;
  int v14;

  if (a1)
  {
    if (a2)
    {
      unint64_t v4 = *a1;
      unint64_t v5 = *a1 * a2;
      int v14 = 0;
      v12[0] = &v14;
      sub_2168F84A8(a1, v5, v12);
      sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v6, v7);
      uint64_t v8 = a2 - 1;
      if (a2 != 1)
      {
        uint64_t v9 = (char *)a1[4];
        uint64_t v10 = 4 * v4;
        do
        {
          if (v4) {
            memmove(&v9[v10], v9, 4 * v4);
          }
          v10 += 4 * v4;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      sub_2168F845C(a1);
    }
  }
  else
  {
    v12[0] = "usdSkel/utils.cpp";
    v12[1] = "_ExpandConstantArray";
    void v12[2] = (_DWORD *)1053;
    void v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ExpandConstantArray(T *, size_t) [T = pxrInt"
             "ernal__aapl__pxrReserved__::VtArray<float>]";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"'array' pointer is null.");
  }
  return a1 != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelResizeInfluences(unint64_t *a1, uint64_t a2, char *a3)
{
  if (a2 == a3) {
    return 1;
  }
  uint64_t v29 = v3;
  uint64_t v30 = v4;
  if (a1)
  {
    int v7 = (int)a3;
    int v8 = a2;
    uint64_t result = sub_21701DBA8(*a1, a2, a3);
    if (result)
    {
      if (*a1 >= v8)
      {
        unint64_t v11 = *a1 / v8;
        if (v7 >= v8)
        {
          int v28 = 0;
          v26[0] = &v28;
          sub_216907A0C(a1, v11 * v7, v26);
          sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v16, v17);
          uint64_t v18 = 0;
          unint64_t v19 = a1[4];
          uint64_t v20 = v7 - (uint64_t)v8;
          if (v11 <= 1) {
            uint64_t v21 = 1;
          }
          else {
            uint64_t v21 = v11;
          }
          do
          {
            unint64_t v22 = v11 + ~v18;
            if (v8 <= 0)
            {
              unint64_t v25 = v22 * v7;
            }
            else
            {
              unint64_t v23 = v22 * v8;
              uint64_t v24 = v8 + 1;
              unint64_t v25 = v22 * v7;
              do
              {
                *(_DWORD *)(v19 + 4 * ((v24 - 2) + v25)) = *(_DWORD *)(v19
                                                                                   + 4 * ((v24 - 2) + v23));
                --v24;
              }
              while (v24 > 1);
            }
            if (v20 >= 1) {
              bzero((void *)(v19 + 4 * v8 + 4 * v25), 4 * (v20 - ((v20 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
            }
            ++v18;
          }
          while (v18 != v21);
        }
        else
        {
          sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v9, v10);
          if (v11 >= 2)
          {
            unint64_t v12 = a1[4];
            unint64_t v13 = v11 - 1;
            int v14 = (char *)(v12 + 4 * v8);
            uint64_t v15 = (char *)(v12 + 4 * v7);
            do
            {
              if (v7) {
                memmove(v15, v14, 4 * v7);
              }
              v14 += 4 * v8;
              v15 += 4 * v7;
              --v13;
            }
            while (v13);
          }
          int v28 = 0;
          v26[0] = &v28;
          sub_216907A0C(a1, v11 * v7, v26);
        }
      }
      return 1;
    }
  }
  else
  {
    v26[0] = "usdSkel/utils.cpp";
    v26[1] = "_ResizeInfluences";
    _OWORD v26[2] = (_DWORD *)1100;
    void v26[3] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ResizeInfluences(VtArray<T> *, int, int, T) [T = int]";
    char v27 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v26, 1, (pxrInternal__aapl__pxrReserved__ *)"'array' pointer is null.");
    return 0;
  }
  return result;
}

{
  int v4;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _DWORD *v26[4];
  char v27;
  int v28;

  uint64_t v4 = a2;
  if (a2 != a3)
  {
    if (!a1)
    {
      v26[0] = "usdSkel/utils.cpp";
      v26[1] = "_ResizeInfluences";
      _OWORD v26[2] = (_DWORD *)1100;
      void v26[3] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ResizeInfluences(VtArray<T> *, int, int, T) [T = float]";
      char v27 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v26, 1, (pxrInternal__aapl__pxrReserved__ *)"'array' pointer is null.");
      return 0;
    }
    uint64_t result = sub_21701DBA8(*a1, a2, a3);
    if (!result) {
      return result;
    }
    int v8 = *a1;
    if (*a1 >= v4)
    {
      unint64_t v25 = v8 / v4;
      if ((int)a3 >= v4)
      {
        int v28 = 0;
        v26[0] = &v28;
        sub_2168F84A8(a1, v8 / v4 * (int)a3, v26);
        sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v14, v15);
        uint64_t v16 = v25;
        char v17 = 0;
        uint64_t v18 = a1[4];
        unint64_t v19 = (int)a3 - (uint64_t)v4;
        if (v25 <= 1) {
          uint64_t v20 = 1;
        }
        else {
          uint64_t v20 = v25;
        }
        do
        {
          uint64_t v21 = v16 + ~v17;
          if (v4 <= 0)
          {
            uint64_t v24 = v21 * (int)a3;
          }
          else
          {
            unint64_t v22 = v21 * v4;
            unint64_t v23 = v4 + 1;
            uint64_t v24 = v21 * (int)a3;
            do
            {
              *(_DWORD *)(v18 + 4 * ((v23 - 2) + v24)) = *(_DWORD *)(v18
                                                                                 + 4 * ((v23 - 2) + v22));
              --v23;
            }
            while (v23 > 1);
          }
          if (v19 >= 1)
          {
            bzero((void *)(v18 + 4 * v4 + 4 * v24), 4 * (v19 - ((v19 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
            uint64_t v16 = v25;
          }
          ++v17;
        }
        while (v17 != v20);
      }
      else
      {
        sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, a3);
        uint64_t v9 = v25;
        if (v25 >= 2)
        {
          uint64_t v10 = a1[4];
          unint64_t v11 = v25 - 1;
          unint64_t v12 = (char *)(v10 + 4 * v4);
          unint64_t v13 = (char *)(v10 + 4 * (int)a3);
          do
          {
            if (a3)
            {
              memmove(v13, v12, 4 * (int)a3);
              uint64_t v9 = v25;
            }
            v12 += 4 * v4;
            v13 += 4 * (int)a3;
            --v11;
          }
          while (v11);
        }
        int v28 = 0;
        v26[0] = &v28;
        sub_2168F84A8(a1, v9 * (int)a3, v26);
      }
    }
  }
  if ((int)a3 >= v4) {
    return 1;
  }
  else {
    return (uint64_t)pxrInternal__aapl__pxrReserved__::UsdSkelNormalizeWeights((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, a3, a3);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelInterleaveInfluences(void *a1, void *a2, char *a3, uint64_t a4)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  if (v4 != v5)
  {
    uint64_t v10 = "usdSkel/utils.cpp";
    unint64_t v11 = "UsdSkelInterleaveInfluences";
    uint64_t v12 = 1196;
    unint64_t v13 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelInterleaveInfluences(const TfSpan<const int> &, const TfSpan<con"
          "st float> &, TfSpan<GfVec2f>)";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v10, (pxrInternal__aapl__pxrReserved__ *)"Size of weights [%zu] != size of indices [%zu]", a3, v4, v5);
    return 0;
  }
  if (a4 != v4)
  {
    uint64_t v10 = "usdSkel/utils.cpp";
    unint64_t v11 = "UsdSkelInterleaveInfluences";
    uint64_t v12 = 1202;
    unint64_t v13 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelInterleaveInfluences(const TfSpan<const int> &, const TfSpan<con"
          "st float> &, TfSpan<GfVec2f>)";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v10, (pxrInternal__aapl__pxrReserved__ *)"Size of interleavedInfluences [%zu] != size of indices [%zu]", a3, a4, v4);
    return 0;
  }
  if (a4)
  {
    unint64_t v6 = 0;
    int v7 = (float *)(a3 + 4);
    do
    {
      int v8 = *(_DWORD *)(*a2 + 4 * v6);
      *(v7 - 1) = (float)*(int *)(*a1 + 4 * v6);
      *(_DWORD *)int v7 = v8;
      v7 += 2;
      ++v6;
    }
    while (v6 < a1[1]);
  }
  return 1;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints(void *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, tbb::task_group_context *a10, unint64_t a11, char a12)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (a6 != a8)
  {
    uint64_t v54 = "usdSkel/utils.cpp";
    uint64_t v55 = "_NonInterleavedSkinPoints";
    uint64_t v56 = 1590;
    uint64_t v57 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinPoints(const TfToken &, const"
          " Matrix4 &, TfSpan<const Matrix4>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, const b"
          "ool) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v58 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v54, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != size of jointWeights [%zu]", a3, a6, a8);
    return 0;
  }
  if (a6 != a11 * (int)a9)
  {
    uint64_t v54 = "usdSkel/utils.cpp";
    uint64_t v55 = "_NonInterleavedSkinPoints";
    uint64_t v56 = 1597;
    uint64_t v57 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinPoints(const TfToken &, const"
          " Matrix4 &, TfSpan<const Matrix4>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, const b"
          "ool) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v58 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v54, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != (points.size() [%zu] * numInfluencesPerPoint [%d]).", a3, a6, a11, a9);
    return 0;
  }
  v36[0] = a5;
  v36[1] = a6;
  v36[2] = a7;
  v36[3] = a6;
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v16) {
    uint64_t v16 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  char v17 = a10;
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v16 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v48 = a3;
    uint64_t v49 = (unsigned char *)a4;
    long long __p = a10;
    uint64_t v47 = (unsigned char *)a11;
    LODWORD(v53) = a9;
    LOBYTE(v51) = 0;
    uint64_t v37 = a2;
    uint64_t p_p = &__p;
    long long v39 = (void **)&v53;
    long long v40 = v36;
    long long v41 = &v48;
    long long v42 = (int *)&v51;
    if (a11 < 0x3E8 || a12 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v16))
    {
      sub_21702987C((uint64_t)&v37, 0, a11);
    }
    else
    {
      LODWORD(v54) = 0;
      uint64_t v59 = 65539;
      int v60 = 55;
      tbb::task_group_context::init((uint64_t)&v54, v21, v22, v23);
      v52[0] = (tbb::task_group_context *)&v54;
      uint64_t v24 = tbb::internal::allocate_root_with_context_proxy::allocate(v52, 0x38uLL);
      *(unsigned char *)(v24 - 11) = 1;
      *(void *)uint64_t v24 = &unk_26C76FD58;
      *(void *)(v24 + 8) = a11;
      *(_OWORD *)(v24 + 16) = xmmword_2174A9840;
      *(void *)(v24 + 32) = &v37;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v24);
      *(_DWORD *)(v24 + 48) = 0;
      *(unsigned char *)(v24 + 52) = 5;
      *(void *)(v24 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v24 - 40) + 16))(*(void *)(v24 - 40), v24, v24 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v54);
    }
    unsigned __int8 v35 = atomic_load((unsigned __int8 *)&v51);
    return (v35 & 1) == 0;
  }
  else
  {
    uint64_t v18 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v18)
    {
      uint64_t v18 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
      char v17 = a10;
    }
    unint64_t v19 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v19 != (*((void *)v18 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v54 = "usdSkel/utils.cpp";
      uint64_t v55 = "_NonInterleavedSkinPoints";
      uint64_t v56 = 1609;
      uint64_t v57 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinPoints(const TfToken &, con"
            "st Matrix4 &, TfSpan<const Matrix4>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, con"
            "st BOOL) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
      char v58 = 0;
      if (v19)
      {
        uint64_t v20 = (const char *)(v19 + 16);
        if (*(char *)(v19 + 39) < 0) {
          uint64_t v20 = *(const char **)v20;
        }
      }
      else
      {
        uint64_t v20 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v54, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v20);
      return 0;
    }
    v52[0] = v17;
    v52[1] = (tbb::task_group_context *)a11;
    unsigned int v51 = a9;
    unsigned __int8 v50 = 0;
    sub_21702A090(&v48, a4);
    sub_21702A0F4(&__p, a4);
    char v45 = 0;
    uint64_t v26 = (pxrInternal__aapl__pxrReserved__ *)sub_217029E5C((uint64_t)a3, a4, (__n128 *)v48, (v49 - (unsigned char *)v48) >> 6, (uint64_t)__p, 0x8E38E38E38E38E39 * ((v47 - (unsigned char *)__p) >> 2), &v45);
    uint64_t v37 = a2;
    uint64_t p_p = (void **)v52;
    long long v39 = &v48;
    long long v40 = v36;
    long long v41 = (void **)&v51;
    long long v42 = (int *)&v45;
    uint64_t v43 = &__p;
    uint64_t v44 = &v50;
    if (a11 < 0x3E8 || (a12 & 1) != 0 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v26))
    {
      sub_21702A23C((uint64_t)&v37, 0, a11);
    }
    else
    {
      LODWORD(v54) = 0;
      uint64_t v59 = 65539;
      int v60 = 55;
      tbb::task_group_context::init((uint64_t)&v54, v27, v28, v29);
      uint64_t v53 = &v54;
      uint64_t v30 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v53, 0x38uLL);
      *(unsigned char *)(v30 - 11) = 1;
      *(void *)uint64_t v30 = &unk_26C76FDA0;
      *(void *)(v30 + 8) = a11;
      *(_OWORD *)(v30 + 16) = xmmword_2174A9840;
      *(void *)(v30 + 32) = &v37;
      unint64_t v31 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v30);
      *(_DWORD *)(v30 + 48) = 0;
      *(unsigned char *)(v30 + 52) = 5;
      *(void *)(v30 + 40) = (v31 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v30 - 40) + 16))(*(void *)(v30 - 40), v30, v30 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v54);
    }
    unsigned __int8 v32 = atomic_load(&v50);
    if (__p)
    {
      uint64_t v47 = __p;
      operator delete(__p);
    }
    if (v48)
    {
      uint64_t v49 = v48;
      operator delete(v48);
    }
    return (v32 & 1) == 0;
  }
}

{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v16;
  tbb::task_group_context *v17;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t initial_auto_partitioner_divisor;
  pxrInternal__aapl__pxrReserved__ *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v35;
  void v36[4];
  uint64_t v37;
  void **p_p;
  void **v39;
  void *v40;
  void **v41;
  int *v42;
  void **v43;
  unsigned __int8 *v44;
  char v45;
  void *__p;
  unsigned char *v47;
  void *v48;
  unsigned char *v49;
  unsigned __int8 v50;
  unsigned int v51;
  tbb::task_group_context *v52[2];
  char **v53;
  char *v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  char v58;
  uint64_t v59;
  int v60;
  uint64_t v61;

  uint64_t v61 = *MEMORY[0x263EF8340];
  if (a6 != a8)
  {
    uint64_t v54 = "usdSkel/utils.cpp";
    uint64_t v55 = "_NonInterleavedSkinPoints";
    uint64_t v56 = 1590;
    uint64_t v57 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinPoints(const TfToken &, const"
          " Matrix4 &, TfSpan<const Matrix4>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, const b"
          "ool) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v58 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v54, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != size of jointWeights [%zu]", a3, a6, a8);
    return 0;
  }
  if (a6 != a11 * (int)a9)
  {
    uint64_t v54 = "usdSkel/utils.cpp";
    uint64_t v55 = "_NonInterleavedSkinPoints";
    uint64_t v56 = 1597;
    uint64_t v57 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinPoints(const TfToken &, const"
          " Matrix4 &, TfSpan<const Matrix4>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, const b"
          "ool) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    char v58 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v54, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != (points.size() [%zu] * numInfluencesPerPoint [%d]).", a3, a6, a11, a9);
    return 0;
  }
  v36[0] = a5;
  v36[1] = a6;
  v36[2] = a7;
  v36[3] = a6;
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v16) {
    uint64_t v16 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  char v17 = a10;
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v16 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v48 = a3;
    uint64_t v49 = (unsigned char *)a4;
    long long __p = a10;
    uint64_t v47 = (unsigned char *)a11;
    LODWORD(v53) = a9;
    LOBYTE(v51) = 0;
    uint64_t v37 = a2;
    uint64_t p_p = &__p;
    long long v39 = (void **)&v53;
    long long v40 = v36;
    long long v41 = &v48;
    long long v42 = (int *)&v51;
    if (a11 < 0x3E8 || a12 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v16))
    {
      sub_21702A9D4((uint64_t)&v37, 0, a11);
    }
    else
    {
      LODWORD(v54) = 0;
      uint64_t v59 = 65539;
      int v60 = 55;
      tbb::task_group_context::init((uint64_t)&v54, v21, v22, v23);
      v52[0] = (tbb::task_group_context *)&v54;
      uint64_t v24 = tbb::internal::allocate_root_with_context_proxy::allocate(v52, 0x38uLL);
      *(unsigned char *)(v24 - 11) = 1;
      *(void *)uint64_t v24 = &unk_26C76FDE8;
      *(void *)(v24 + 8) = a11;
      *(_OWORD *)(v24 + 16) = xmmword_2174A9840;
      *(void *)(v24 + 32) = &v37;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v24);
      *(_DWORD *)(v24 + 48) = 0;
      *(unsigned char *)(v24 + 52) = 5;
      *(void *)(v24 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v24 - 40) + 16))(*(void *)(v24 - 40), v24, v24 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v54);
    }
    unsigned __int8 v35 = atomic_load((unsigned __int8 *)&v51);
    return (v35 & 1) == 0;
  }
  else
  {
    uint64_t v18 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v18)
    {
      uint64_t v18 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
      char v17 = a10;
    }
    unint64_t v19 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v19 != (*((void *)v18 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v54 = "usdSkel/utils.cpp";
      uint64_t v55 = "_NonInterleavedSkinPoints";
      uint64_t v56 = 1609;
      uint64_t v57 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinPoints(const TfToken &, con"
            "st Matrix4 &, TfSpan<const Matrix4>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, con"
            "st BOOL) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
      char v58 = 0;
      if (v19)
      {
        uint64_t v20 = (const char *)(v19 + 16);
        if (*(char *)(v19 + 39) < 0) {
          uint64_t v20 = *(const char **)v20;
        }
      }
      else
      {
        uint64_t v20 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v54, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v20);
      return 0;
    }
    v52[0] = v17;
    v52[1] = (tbb::task_group_context *)a11;
    unsigned int v51 = a9;
    unsigned __int8 v50 = 0;
    sub_21702A090(&v48, a4);
    sub_21702A0F4(&__p, a4);
    char v45 = 0;
    uint64_t v26 = (pxrInternal__aapl__pxrReserved__ *)sub_21702B044((uint64_t)a3, a4, (__n128 *)v48, (v49 - (unsigned char *)v48) >> 6, (uint64_t)__p, 0x8E38E38E38E38E39 * ((v47 - (unsigned char *)__p) >> 2), &v45);
    uint64_t v37 = a2;
    uint64_t p_p = (void **)v52;
    long long v39 = &v48;
    long long v40 = v36;
    long long v41 = (void **)&v51;
    long long v42 = (int *)&v45;
    uint64_t v43 = &__p;
    uint64_t v44 = &v50;
    if (a11 < 0x3E8 || (a12 & 1) != 0 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v26))
    {
      sub_21702B280((uint64_t)&v37, 0, a11);
    }
    else
    {
      LODWORD(v54) = 0;
      uint64_t v59 = 65539;
      int v60 = 55;
      tbb::task_group_context::init((uint64_t)&v54, v27, v28, v29);
      uint64_t v53 = &v54;
      uint64_t v30 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v53, 0x38uLL);
      *(unsigned char *)(v30 - 11) = 1;
      *(void *)uint64_t v30 = &unk_26C76FE30;
      *(void *)(v30 + 8) = a11;
      *(_OWORD *)(v30 + 16) = xmmword_2174A9840;
      *(void *)(v30 + 32) = &v37;
      unint64_t v31 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v30);
      *(_DWORD *)(v30 + 48) = 0;
      *(unsigned char *)(v30 + 52) = 5;
      *(void *)(v30 + 40) = (v31 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v30 - 40) + 16))(*(void *)(v30 - 40), v30, v30 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v54);
    }
    unsigned __int8 v32 = atomic_load(&v50);
    if (__p)
    {
      uint64_t v47 = __p;
      operator delete(__p);
    }
    if (v48)
    {
      uint64_t v49 = v48;
      operator delete(v48);
    }
    return (v32 & 1) == 0;
  }
}

void sub_21701EC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,int a36,__int16 a37,char a38,char a39)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a35, v39);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a37);
  if (__p) {
    operator delete(__p);
  }
  if (a29) {
    operator delete(a29);
  }
  _Unwind_Resume(a1);
}

void sub_21701F1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,int a36,__int16 a37,char a38,char a39)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a35, v39);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a37);
  if (__p) {
    operator delete(__p);
  }
  if (a29) {
    operator delete(a29);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints(void *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, unint64_t a10, char a11)
{
  int v11 = a7;
  uint64_t v60 = *MEMORY[0x263EF8340];
  if (a6 != a10 * (int)a7)
  {
    uint64_t v53 = "usdSkel/utils.cpp";
    uint64_t v54 = "_InterleavedSkinPoints";
    uint64_t v55 = 1559;
    uint64_t v56 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_InterleavedSkinPoints(const TfToken &, const Ma"
          "trix4 &, TfSpan<const Matrix4>, TfSpan<const GfVec2f>, const int, TfSpan<GfVec3f>, const BOOL) [Matrix4 = pxrI"
          "nternal__aapl__pxrReserved__::GfMatrix4d]";
    char v57 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v53, (pxrInternal__aapl__pxrReserved__ *)"Size of influences [%zu] != (points.size() [%zu] * numInfluencesPerPoint [%d]).", a3, a6, a10, a7);
    return 0;
  }
  v35[0] = a5;
  v35[1] = a6;
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v16) {
    uint64_t v16 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v16 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v47 = a3;
    uint64_t v48 = (unsigned char *)a4;
    long long __p = a9;
    uint64_t v46 = (unsigned char *)a10;
    LODWORD(v52) = v11;
    LOBYTE(v50) = 0;
    uint64_t v36 = a2;
    uint64_t p_p = &__p;
    uint64_t v38 = (void **)&v52;
    long long v39 = v35;
    long long v40 = &v47;
    long long v41 = &v50;
    if (a10 < 0x3E8 || a11 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v16))
    {
      sub_21702B9AC((uint64_t)&v36, 0, a10);
    }
    else
    {
      LODWORD(v53) = 0;
      uint64_t v58 = 65539;
      int v59 = 55;
      tbb::task_group_context::init((uint64_t)&v53, v20, v21, v22);
      v51[0] = (tbb::task_group_context *)&v53;
      uint64_t v23 = tbb::internal::allocate_root_with_context_proxy::allocate(v51, 0x38uLL);
      *(unsigned char *)(v23 - 11) = 1;
      *(void *)uint64_t v23 = &unk_26C76FE78;
      *(void *)(v23 + 8) = a10;
      *(_OWORD *)(v23 + 16) = xmmword_2174A9840;
      *(void *)(v23 + 32) = &v36;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v23);
      *(_DWORD *)(v23 + 48) = 0;
      *(unsigned char *)(v23 + 52) = 5;
      *(void *)(v23 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v23 - 40) + 16))(*(void *)(v23 - 40), v23, v23 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v53);
    }
    unsigned __int8 v34 = atomic_load((unsigned __int8 *)&v50);
    return (v34 & 1) == 0;
  }
  else
  {
    char v17 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v17) {
      char v17 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    unint64_t v18 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v18 != (*((void *)v17 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v53 = "usdSkel/utils.cpp";
      uint64_t v54 = "_InterleavedSkinPoints";
      uint64_t v55 = 1571;
      uint64_t v56 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_InterleavedSkinPoints(const TfToken &, const "
            "Matrix4 &, TfSpan<const Matrix4>, TfSpan<const GfVec2f>, const int, TfSpan<GfVec3f>, const BOOL) [Matrix4 = "
            "pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
      char v57 = 0;
      if (v18)
      {
        unint64_t v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0) {
          unint64_t v19 = *(const char **)v19;
        }
      }
      else
      {
        unint64_t v19 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v53, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v19);
      return 0;
    }
    v51[0] = (tbb::task_group_context *)a9;
    v51[1] = (tbb::task_group_context *)a10;
    int v50 = v11;
    unsigned __int8 v49 = 0;
    sub_21702A090(&v47, a4);
    sub_21702A0F4(&__p, a4);
    char v44 = 0;
    unint64_t v25 = (pxrInternal__aapl__pxrReserved__ *)sub_217029E5C((uint64_t)a3, a4, (__n128 *)v47, (v48 - (unsigned char *)v47) >> 6, (uint64_t)__p, 0x8E38E38E38E38E39 * ((v46 - (unsigned char *)__p) >> 2), &v44);
    uint64_t v36 = a2;
    uint64_t p_p = (void **)v51;
    uint64_t v38 = &v47;
    long long v39 = v35;
    long long v40 = (void **)&v50;
    long long v41 = (int *)&v44;
    long long v42 = &__p;
    uint64_t v43 = &v49;
    if (a10 < 0x3E8 || (a11 & 1) != 0 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v25))
    {
      sub_21702BF94((uint64_t)&v36, 0, a10);
    }
    else
    {
      LODWORD(v53) = 0;
      uint64_t v58 = 65539;
      int v59 = 55;
      tbb::task_group_context::init((uint64_t)&v53, v26, v27, v28);
      uint64_t v52 = &v53;
      uint64_t v29 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v52, 0x38uLL);
      *(unsigned char *)(v29 - 11) = 1;
      *(void *)uint64_t v29 = &unk_26C76FEC0;
      *(void *)(v29 + 8) = a10;
      *(_OWORD *)(v29 + 16) = xmmword_2174A9840;
      *(void *)(v29 + 32) = &v36;
      unint64_t v30 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v29);
      *(_DWORD *)(v29 + 48) = 0;
      *(unsigned char *)(v29 + 52) = 5;
      *(void *)(v29 + 40) = (v30 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v29 - 40) + 16))(*(void *)(v29 - 40), v29, v29 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v53);
    }
    unsigned __int8 v31 = atomic_load(&v49);
    if (__p)
    {
      uint64_t v46 = __p;
      operator delete(__p);
    }
    if (v47)
    {
      uint64_t v48 = v47;
      operator delete(v47);
    }
    return (v31 & 1) == 0;
  }
}

{
  int v11;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v16;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t initial_auto_partitioner_divisor;
  pxrInternal__aapl__pxrReserved__ *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v34;
  void v35[2];
  uint64_t v36;
  void **p_p;
  void **v38;
  void *v39;
  void **v40;
  int *v41;
  void **v42;
  unsigned __int8 *v43;
  char v44;
  void *__p;
  unsigned char *v46;
  void *v47;
  unsigned char *v48;
  unsigned __int8 v49;
  int v50;
  tbb::task_group_context *v51[2];
  char **v52;
  char *v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  char v57;
  uint64_t v58;
  int v59;
  uint64_t v60;

  int v11 = a7;
  uint64_t v60 = *MEMORY[0x263EF8340];
  if (a6 != a10 * (int)a7)
  {
    uint64_t v53 = "usdSkel/utils.cpp";
    uint64_t v54 = "_InterleavedSkinPoints";
    uint64_t v55 = 1559;
    uint64_t v56 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_InterleavedSkinPoints(const TfToken &, const Ma"
          "trix4 &, TfSpan<const Matrix4>, TfSpan<const GfVec2f>, const int, TfSpan<GfVec3f>, const BOOL) [Matrix4 = pxrI"
          "nternal__aapl__pxrReserved__::GfMatrix4f]";
    char v57 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v53, (pxrInternal__aapl__pxrReserved__ *)"Size of influences [%zu] != (points.size() [%zu] * numInfluencesPerPoint [%d]).", a3, a6, a10, a7);
    return 0;
  }
  v35[0] = a5;
  v35[1] = a6;
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v16) {
    uint64_t v16 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v16 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v47 = a3;
    uint64_t v48 = (unsigned char *)a4;
    long long __p = a9;
    uint64_t v46 = (unsigned char *)a10;
    LODWORD(v52) = v11;
    LOBYTE(v50) = 0;
    uint64_t v36 = a2;
    uint64_t p_p = &__p;
    uint64_t v38 = (void **)&v52;
    long long v39 = v35;
    long long v40 = &v47;
    long long v41 = &v50;
    if (a10 < 0x3E8 || a11 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v16))
    {
      sub_21702C740((uint64_t)&v36, 0, a10);
    }
    else
    {
      LODWORD(v53) = 0;
      uint64_t v58 = 65539;
      int v59 = 55;
      tbb::task_group_context::init((uint64_t)&v53, v20, v21, v22);
      v51[0] = (tbb::task_group_context *)&v53;
      uint64_t v23 = tbb::internal::allocate_root_with_context_proxy::allocate(v51, 0x38uLL);
      *(unsigned char *)(v23 - 11) = 1;
      *(void *)uint64_t v23 = &unk_26C76FF08;
      *(void *)(v23 + 8) = a10;
      *(_OWORD *)(v23 + 16) = xmmword_2174A9840;
      *(void *)(v23 + 32) = &v36;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v23);
      *(_DWORD *)(v23 + 48) = 0;
      *(unsigned char *)(v23 + 52) = 5;
      *(void *)(v23 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v23 - 40) + 16))(*(void *)(v23 - 40), v23, v23 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v53);
    }
    unsigned __int8 v34 = atomic_load((unsigned __int8 *)&v50);
    return (v34 & 1) == 0;
  }
  else
  {
    char v17 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v17) {
      char v17 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    unint64_t v18 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v18 != (*((void *)v17 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v53 = "usdSkel/utils.cpp";
      uint64_t v54 = "_InterleavedSkinPoints";
      uint64_t v55 = 1571;
      uint64_t v56 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_InterleavedSkinPoints(const TfToken &, const "
            "Matrix4 &, TfSpan<const Matrix4>, TfSpan<const GfVec2f>, const int, TfSpan<GfVec3f>, const BOOL) [Matrix4 = "
            "pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
      char v57 = 0;
      if (v18)
      {
        unint64_t v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0) {
          unint64_t v19 = *(const char **)v19;
        }
      }
      else
      {
        unint64_t v19 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v53, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v19);
      return 0;
    }
    v51[0] = (tbb::task_group_context *)a9;
    v51[1] = (tbb::task_group_context *)a10;
    int v50 = v11;
    unsigned __int8 v49 = 0;
    sub_21702A090(&v47, a4);
    sub_21702A0F4(&__p, a4);
    char v44 = 0;
    unint64_t v25 = (pxrInternal__aapl__pxrReserved__ *)sub_21702B044((uint64_t)a3, a4, (__n128 *)v47, (v48 - (unsigned char *)v47) >> 6, (uint64_t)__p, 0x8E38E38E38E38E39 * ((v46 - (unsigned char *)__p) >> 2), &v44);
    uint64_t v36 = a2;
    uint64_t p_p = (void **)v51;
    uint64_t v38 = &v47;
    long long v39 = v35;
    long long v40 = (void **)&v50;
    long long v41 = (int *)&v44;
    long long v42 = &__p;
    uint64_t v43 = &v49;
    if (a10 < 0x3E8 || (a11 & 1) != 0 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v25))
    {
      sub_21702CD28((uint64_t)&v36, 0, a10);
    }
    else
    {
      LODWORD(v53) = 0;
      uint64_t v58 = 65539;
      int v59 = 55;
      tbb::task_group_context::init((uint64_t)&v53, v26, v27, v28);
      uint64_t v52 = &v53;
      uint64_t v29 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v52, 0x38uLL);
      *(unsigned char *)(v29 - 11) = 1;
      *(void *)uint64_t v29 = &unk_26C76FF50;
      *(void *)(v29 + 8) = a10;
      *(_OWORD *)(v29 + 16) = xmmword_2174A9840;
      *(void *)(v29 + 32) = &v36;
      unint64_t v30 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v29);
      *(_DWORD *)(v29 + 48) = 0;
      *(unsigned char *)(v29 + 52) = 5;
      *(void *)(v29 + 40) = (v30 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v29 - 40) + 16))(*(void *)(v29 - 40), v29, v29 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v53);
    }
    unsigned __int8 v31 = atomic_load(&v49);
    if (__p)
    {
      uint64_t v46 = __p;
      operator delete(__p);
    }
    if (v47)
    {
      uint64_t v48 = v47;
      operator delete(v47);
    }
    return (v31 & 1) == 0;
  }
}

void sub_21701F718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a33, v37);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a35);
  if (__p) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

void sub_21701FC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a33, v37);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a35);
  if (__p) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints(void *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, tbb::task_group_context *a9, unint64_t a10, char a11)
{
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints(a1, a2, a3, a4, a5, a7, a6, a7, a8, a9, a10, a11);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, unsigned int a6, tbb::task_group_context **this)
{
  if (this)
  {
    int v11 = *(char **)(a3 + 32);
    unint64_t v12 = *(void *)a3;
    uint64_t v13 = a4[4];
    uint64_t v14 = *a4;
    uint64_t v15 = a5[4];
    uint64_t v16 = *a5;
    sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)this, a2, (char *)a3);
    return pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints(a1, a2, v11, v12, v13, v14, v15, v16, a6, this[4], (unint64_t)*this, 0);
  }
  else
  {
    v18[0] = "usdSkel/utils.cpp";
    v18[1] = "UsdSkelSkinPoints";
    void v18[2] = 1718;
    v18[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints(const TfToken &, const GfMatrix4d &, const VtMatri"
             "x4dArray &, const VtIntArray &, const VtFloatArray &, const int, VtVec3fArray *)";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"'points' pointer is null.");
    return 0;
  }
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinPointsLBS(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, tbb::task_group_context *a9, unint64_t a10, char a11)
{
  uint64_t v12 = a7;
  char v19 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v19)
  {
    char v19 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    uint64_t v12 = a7;
  }
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints((void *)v19 + 3, a1, a2, a3, a4, a5, a6, v12, a8, a9, a10, a11);
}

{
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v19;

  uint64_t v12 = a7;
  char v19 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v19)
  {
    char v19 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    uint64_t v12 = a7;
  }
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints((void *)v19 + 3, a1, a2, a3, a4, a5, a6, v12, a8, a9, a10, a11);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinPointsLBS(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, unint64_t a8, char a9)
{
  char v17 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v17) {
    char v17 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints((void *)v17 + 3, a1, a2, a3, a4, a5, a6, a8, a7, a8, a9);
}

{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v17;

  char v17 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v17) {
    char v17 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints((void *)v17 + 3, a1, a2, a3, a4, a5, a6, a8, a7, a8, a9);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinPointsLBS(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, tbb::task_group_context *a8, unint64_t a9, char a10)
{
  unint64_t v18 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v18) {
    unint64_t v18 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints((void *)v18 + 3, a1, a2, a3, a4, a6, a5, a6, a7, a8, a9, a10);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinPointsLBS(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned int a5, tbb::task_group_context **this)
{
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v12) {
    uint64_t v12 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  uint64_t v13 = (void *)((char *)v12 + 24);

  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinPoints(v13, a1, a2, a3, a4, a5, this);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormals(void *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, tbb::task_group_context *a10, unint64_t a11, char a12)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  if (a6 != a8)
  {
    uint64_t v56 = "usdSkel/utils.cpp";
    char v57 = "_NonInterleavedSkinNormals";
    uint64_t v58 = 2110;
    int v59 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinNormals(const TfToken &, cons"
          "t Matrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, const "
          "BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
    char v60 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v56, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != size of jointWeights [%zu]", a3, a6, a8);
    return 0;
  }
  if (a6 != a11 * (int)a9)
  {
    uint64_t v56 = "usdSkel/utils.cpp";
    char v57 = "_NonInterleavedSkinNormals";
    uint64_t v58 = 2117;
    int v59 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinNormals(const TfToken &, cons"
          "t Matrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, const "
          "BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
    char v60 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v56, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != (normals.size() [%zu] * numInfluencesPerPoint [%d]).", a3, a6, a11, a9);
    return 0;
  }
  v37[0] = a5;
  v37[1] = a6;
  _OWORD v37[2] = a7;
  v37[3] = a6;
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v16) {
    uint64_t v16 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  char v17 = a10;
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v16 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    int v50 = a3;
    unsigned int v51 = (unsigned char *)a4;
    long long __p = a10;
    unsigned __int8 v49 = (unsigned char *)a11;
    LODWORD(v55) = a9;
    LOBYTE(v53) = 0;
    uint64_t p_p = &__p;
    uint64_t v39 = a2;
    long long v40 = &v52;
    long long v41 = (void **)&v55;
    long long v42 = v37;
    uint64_t v43 = (void **)&v50;
    char v44 = (int *)&v53;
    if (a11 < 0x3E8 || a12 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v16))
    {
      sub_21702D468((uint64_t)&p_p, 0, a11);
    }
    else
    {
      LODWORD(v56) = 0;
      uint64_t v61 = 65539;
      int v62 = 55;
      tbb::task_group_context::init((uint64_t)&v56, v21, v22, v23);
      v54[0] = (tbb::task_group_context *)&v56;
      uint64_t v24 = tbb::internal::allocate_root_with_context_proxy::allocate(v54, 0x38uLL);
      *(unsigned char *)(v24 - 11) = 1;
      *(void *)uint64_t v24 = &unk_26C76FF98;
      *(void *)(v24 + 8) = a11;
      *(_OWORD *)(v24 + 16) = xmmword_2174A9840;
      *(void *)(v24 + 32) = &p_p;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v24);
      *(_DWORD *)(v24 + 48) = 0;
      *(unsigned char *)(v24 + 52) = 5;
      *(void *)(v24 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v24 - 40) + 16))(*(void *)(v24 - 40), v24, v24 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v56);
    }
    unsigned __int8 v35 = atomic_load((unsigned __int8 *)&v53);
    return (v35 & 1) == 0;
  }
  else
  {
    unint64_t v18 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v18)
    {
      unint64_t v18 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
      char v17 = a10;
    }
    unint64_t v19 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v19 != (*((void *)v18 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v56 = "usdSkel/utils.cpp";
      char v57 = "_NonInterleavedSkinNormals";
      uint64_t v58 = 2131;
      int v59 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinNormals(const TfToken &, co"
            "nst Matrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, co"
            "nst BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
      char v60 = 0;
      if (v19)
      {
        uint64_t v20 = (const char *)(v19 + 16);
        if (*(char *)(v19 + 39) < 0) {
          uint64_t v20 = *(const char **)v20;
        }
      }
      else
      {
        uint64_t v20 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v56, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v20);
      return 0;
    }
    v54[0] = v17;
    v54[1] = (tbb::task_group_context *)a11;
    unsigned int v53 = a9;
    unsigned __int8 v52 = 0;
    sub_21702DC08(&v50, a4);
    sub_21702DC6C(&__p, a4);
    char v47 = 0;
    sub_21702DAA8((long long *)a3, a4, (uint64_t)v50, (v51 - v50) >> 5, (uint64_t)__p, 0x8E38E38E38E38E39 * ((v49 - (unsigned char *)__p) >> 3), &v47);
    uint64_t p_p = (void **)v54;
    uint64_t v39 = a2;
    long long v40 = (unsigned __int8 *)&v36;
    long long v41 = (void **)&v50;
    long long v42 = v37;
    uint64_t v43 = (void **)&v53;
    char v44 = (int *)&v47;
    char v45 = &__p;
    uint64_t v46 = &v52;
    if (a11 < 0x3E8 || (a12 & 1) != 0 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v26))
    {
      sub_21702DD10((uint64_t)&p_p, 0, a11);
    }
    else
    {
      LODWORD(v56) = 0;
      uint64_t v61 = 65539;
      int v62 = 55;
      tbb::task_group_context::init((uint64_t)&v56, v27, v28, v29);
      uint64_t v55 = &v56;
      uint64_t v30 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v55, 0x38uLL);
      *(unsigned char *)(v30 - 11) = 1;
      *(void *)uint64_t v30 = &unk_26C76FFE0;
      *(void *)(v30 + 8) = a11;
      *(_OWORD *)(v30 + 16) = xmmword_2174A9840;
      *(void *)(v30 + 32) = &p_p;
      unint64_t v31 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v30);
      *(_DWORD *)(v30 + 48) = 0;
      *(unsigned char *)(v30 + 52) = 5;
      *(void *)(v30 + 40) = (v31 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v30 - 40) + 16))(*(void *)(v30 - 40), v30, v30 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v56);
    }
    unsigned __int8 v32 = atomic_load(&v52);
    if (__p)
    {
      unsigned __int8 v49 = __p;
      operator delete(__p);
    }
    if (v50)
    {
      unsigned int v51 = v50;
      operator delete(v50);
    }
    return (v32 & 1) == 0;
  }
}

void sub_217020768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,int a38,__int16 a39,char a40,char a41)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a37, v41);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a39);
  if (__p) {
    operator delete(__p);
  }
  char v44 = *(void **)v42;
  if (*(void *)v42)
  {
    *(void *)(v42 + 8) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormals(void *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, unsigned int a15, tbb::task_group_context *a16, unint64_t a17, char a18)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  if (a6 != a8)
  {
    uint64_t v63 = "usdSkel/utils.cpp";
    uint64_t v64 = "_NonInterleavedSkinNormals";
    uint64_t v65 = 2110;
    uint64_t v66 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinNormals(const TfToken &, cons"
          "t Matrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, const "
          "BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3f]";
    char v67 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v63, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != size of jointWeights [%zu]", a3, a6, a8);
    return 0;
  }
  if (a6 != a17 * (int)a15)
  {
    uint64_t v63 = "usdSkel/utils.cpp";
    uint64_t v64 = "_NonInterleavedSkinNormals";
    uint64_t v65 = 2117;
    uint64_t v66 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinNormals(const TfToken &, cons"
          "t Matrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, const "
          "BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3f]";
    char v67 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v63, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != (normals.size() [%zu] * numInfluencesPerPoint [%d]).", a3, a6, a17, a15);
    return 0;
  }
  v44[0] = a5;
  v44[1] = a6;
  v44[2] = a7;
  v44[3] = a6;
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v22) {
    uint64_t v22 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  uint64_t v23 = a16;
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v22 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    char v57 = a3;
    uint64_t v58 = (unsigned char *)a4;
    long long __p = a16;
    uint64_t v56 = (unsigned char *)a17;
    LODWORD(v62) = a15;
    LOBYTE(v60) = 0;
    uint64_t p_p = &__p;
    uint64_t v46 = a2;
    char v47 = &v59;
    uint64_t v48 = (void **)&v62;
    unsigned __int8 v49 = v44;
    int v50 = (void **)&v57;
    unsigned int v51 = (int *)&v60;
    if (a17 < 0x3E8 || a18 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v22))
    {
      sub_21702E4A4((uint64_t)&p_p, 0, (char *)a17, a9, a10, a11, a12, a13, a14);
    }
    else
    {
      LODWORD(v63) = 0;
      uint64_t v68 = 65539;
      int v69 = 55;
      tbb::task_group_context::init((uint64_t)&v63, v27, v28, v29);
      v61[0] = (tbb::task_group_context *)&v63;
      uint64_t v30 = tbb::internal::allocate_root_with_context_proxy::allocate(v61, 0x38uLL);
      *(unsigned char *)(v30 - 11) = 1;
      *(void *)uint64_t v30 = &unk_26C770028;
      *(void *)(v30 + 8) = a17;
      *(_OWORD *)(v30 + 16) = xmmword_2174A9840;
      *(void *)(v30 + 32) = &p_p;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v30);
      *(_DWORD *)(v30 + 48) = 0;
      *(unsigned char *)(v30 + 52) = 5;
      *(void *)(v30 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v30 - 40) + 16))(*(void *)(v30 - 40), v30, v30 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v63);
    }
    unsigned __int8 v42 = atomic_load((unsigned __int8 *)&v60);
    return (v42 & 1) == 0;
  }
  else
  {
    uint64_t v24 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v24)
    {
      uint64_t v24 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
      uint64_t v23 = a16;
    }
    unint64_t v25 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v25 != (*((void *)v24 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v63 = "usdSkel/utils.cpp";
      uint64_t v64 = "_NonInterleavedSkinNormals";
      uint64_t v65 = 2131;
      uint64_t v66 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedSkinNormals(const TfToken &, co"
            "nst Matrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<GfVec3f>, co"
            "nst BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3f]";
      char v67 = 0;
      if (v25)
      {
        uint64_t v26 = (const char *)(v25 + 16);
        if (*(char *)(v25 + 39) < 0) {
          uint64_t v26 = *(const char **)v26;
        }
      }
      else
      {
        uint64_t v26 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v63, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v26);
      return 0;
    }
    v61[0] = v23;
    v61[1] = (tbb::task_group_context *)a17;
    unsigned int v60 = a15;
    unsigned __int8 v59 = 0;
    sub_21702DC08(&v57, a4);
    sub_21702A0F4(&__p, a4);
    char v54 = 0;
    unsigned __int8 v32 = sub_21702EAEC((const pxrInternal__aapl__pxrReserved__::GfMatrix3f *)a3, a4, (uint64_t)v57, (v58 - v57) >> 5, (uint64_t)__p, 0x8E38E38E38E38E39 * ((v56 - (unsigned char *)__p) >> 2), &v54);
    uint64_t p_p = (void **)v61;
    uint64_t v46 = a2;
    char v47 = (unsigned __int8 *)&v43;
    uint64_t v48 = (void **)&v57;
    unsigned __int8 v49 = v44;
    int v50 = (void **)&v60;
    unsigned int v51 = (int *)&v54;
    unsigned __int8 v52 = &__p;
    unsigned int v53 = &v59;
    if (a17 < 0x3E8 || (a18 & 1) != 0 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v32))
    {
      sub_21702EC58((uint64_t)&p_p, 0, a17, v33);
    }
    else
    {
      LODWORD(v63) = 0;
      uint64_t v68 = 65539;
      int v69 = 55;
      tbb::task_group_context::init((uint64_t)&v63, v34, v35, v36);
      int v62 = &v63;
      uint64_t v37 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v62, 0x38uLL);
      *(unsigned char *)(v37 - 11) = 1;
      *(void *)uint64_t v37 = &unk_26C770070;
      *(void *)(v37 + 8) = a17;
      *(_OWORD *)(v37 + 16) = xmmword_2174A9840;
      *(void *)(v37 + 32) = &p_p;
      unint64_t v38 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v37);
      *(_DWORD *)(v37 + 48) = 0;
      *(unsigned char *)(v37 + 52) = 5;
      *(void *)(v37 + 40) = (v38 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v37 - 40) + 16))(*(void *)(v37 - 40), v37, v37 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v63);
    }
    unsigned __int8 v39 = atomic_load(&v59);
    if (__p)
    {
      uint64_t v56 = __p;
      operator delete(__p);
    }
    if (v57)
    {
      uint64_t v58 = v57;
      operator delete(v57);
    }
    return (v39 & 1) == 0;
  }
}

void sub_217020D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,int a38,__int16 a39,char a40,char a41)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a37, v41);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a39);
  if (__p) {
    operator delete(__p);
  }
  char v44 = *(void **)v42;
  if (*(void *)v42)
  {
    *(void *)(v42 + 8) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormals(void *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, unint64_t a10, char a11)
{
  int v11 = a7;
  uint64_t v62 = *MEMORY[0x263EF8340];
  if (a6 != a10 * (int)a7)
  {
    uint64_t v55 = "usdSkel/utils.cpp";
    uint64_t v56 = "_InterleavedSkinNormals";
    uint64_t v57 = 2077;
    uint64_t v58 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_InterleavedSkinNormals(const TfToken &, const M"
          "atrix3 &, TfSpan<const Matrix3>, TfSpan<const GfVec2f>, const int, TfSpan<GfVec3f>, const BOOL) [Matrix3 = pxr"
          "Internal__aapl__pxrReserved__::GfMatrix3d]";
    char v59 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v55, (pxrInternal__aapl__pxrReserved__ *)"Size of influences [%zu] != (normals.size() [%zu] * numInfluencesPerPoint [%d]).", a3, a6, a10, a7);
    return 0;
  }
  v36[0] = a5;
  v36[1] = a6;
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v16) {
    uint64_t v16 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v16 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    unsigned __int8 v49 = a3;
    int v50 = (unsigned char *)a4;
    long long __p = a9;
    uint64_t v48 = (unsigned char *)a10;
    LODWORD(v54) = v11;
    LOBYTE(v52) = 0;
    uint64_t p_p = &__p;
    uint64_t v38 = a2;
    unsigned __int8 v39 = &v51;
    long long v40 = (void **)&v54;
    long long v41 = v36;
    uint64_t v42 = &v49;
    char v43 = &v52;
    if (a10 < 0x3E8 || a11 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v16))
    {
      sub_21702F400((uint64_t)&p_p, 0, a10);
    }
    else
    {
      LODWORD(v55) = 0;
      uint64_t v60 = 65539;
      int v61 = 55;
      tbb::task_group_context::init((uint64_t)&v55, v20, v21, v22);
      v53[0] = (tbb::task_group_context *)&v55;
      uint64_t v23 = tbb::internal::allocate_root_with_context_proxy::allocate(v53, 0x38uLL);
      *(unsigned char *)(v23 - 11) = 1;
      *(void *)uint64_t v23 = &unk_26C7700B8;
      *(void *)(v23 + 8) = a10;
      *(_OWORD *)(v23 + 16) = xmmword_2174A9840;
      *(void *)(v23 + 32) = &p_p;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v23);
      *(_DWORD *)(v23 + 48) = 0;
      *(unsigned char *)(v23 + 52) = 5;
      *(void *)(v23 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v23 - 40) + 16))(*(void *)(v23 - 40), v23, v23 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v55);
    }
    unsigned __int8 v34 = atomic_load((unsigned __int8 *)&v52);
    return (v34 & 1) == 0;
  }
  else
  {
    char v17 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v17) {
      char v17 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    unint64_t v18 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v18 != (*((void *)v17 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v55 = "usdSkel/utils.cpp";
      uint64_t v56 = "_InterleavedSkinNormals";
      uint64_t v57 = 2091;
      uint64_t v58 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_InterleavedSkinNormals(const TfToken &, const"
            " Matrix3 &, TfSpan<const Matrix3>, TfSpan<const GfVec2f>, const int, TfSpan<GfVec3f>, const BOOL) [Matrix3 ="
            " pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
      char v59 = 0;
      if (v18)
      {
        unint64_t v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0) {
          unint64_t v19 = *(const char **)v19;
        }
      }
      else
      {
        unint64_t v19 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v55, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v19);
      return 0;
    }
    v53[0] = (tbb::task_group_context *)a9;
    v53[1] = (tbb::task_group_context *)a10;
    int v52 = v11;
    unsigned __int8 v51 = 0;
    sub_21702DC08(&v49, a4);
    sub_21702DC6C(&__p, a4);
    char v46 = 0;
    sub_21702DAA8((long long *)a3, a4, (uint64_t)v49, (v50 - (unsigned char *)v49) >> 5, (uint64_t)__p, 0x8E38E38E38E38E39 * ((v48 - (unsigned char *)__p) >> 3), &v46);
    uint64_t p_p = (void **)v53;
    uint64_t v38 = a2;
    unsigned __int8 v39 = (unsigned __int8 *)&v35;
    long long v40 = &v49;
    long long v41 = v36;
    uint64_t v42 = (void **)&v52;
    char v43 = (int *)&v46;
    char v44 = &__p;
    char v45 = &v51;
    if (a10 < 0x3E8 || (a11 & 1) != 0 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v25))
    {
      sub_21702FA48((uint64_t)&p_p, 0, a10);
    }
    else
    {
      LODWORD(v55) = 0;
      uint64_t v60 = 65539;
      int v61 = 55;
      tbb::task_group_context::init((uint64_t)&v55, v26, v27, v28);
      char v54 = &v55;
      uint64_t v29 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v54, 0x38uLL);
      *(unsigned char *)(v29 - 11) = 1;
      *(void *)uint64_t v29 = &unk_26C770100;
      *(void *)(v29 + 8) = a10;
      *(_OWORD *)(v29 + 16) = xmmword_2174A9840;
      *(void *)(v29 + 32) = &p_p;
      unint64_t v30 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v29);
      *(_DWORD *)(v29 + 48) = 0;
      *(unsigned char *)(v29 + 52) = 5;
      *(void *)(v29 + 40) = (v30 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v29 - 40) + 16))(*(void *)(v29 - 40), v29, v29 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v55);
    }
    unsigned __int8 v31 = atomic_load(&v51);
    if (__p)
    {
      uint64_t v48 = __p;
      operator delete(__p);
    }
    if (v49)
    {
      int v50 = v49;
      operator delete(v49);
    }
    return (v31 & 1) == 0;
  }
}

void sub_217021270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34,int a35,__int16 a36,char a37,char a38)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a34, v38);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a36);
  if (__p) {
    operator delete(__p);
  }
  if (a28)
  {
    *(void *)(v39 + 8) = a28;
    operator delete(a28);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormals(void *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9, double a10, double a11, double a12, double a13, uint64_t a14, void *a15, unint64_t a16, char a17)
{
  int v17 = a7;
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (a6 != a16 * (int)a7)
  {
    uint64_t v62 = "usdSkel/utils.cpp";
    uint64_t v63 = "_InterleavedSkinNormals";
    uint64_t v64 = 2077;
    uint64_t v65 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_InterleavedSkinNormals(const TfToken &, const M"
          "atrix3 &, TfSpan<const Matrix3>, TfSpan<const GfVec2f>, const int, TfSpan<GfVec3f>, const BOOL) [Matrix3 = pxr"
          "Internal__aapl__pxrReserved__::GfMatrix3f]";
    char v66 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v62, (pxrInternal__aapl__pxrReserved__ *)"Size of influences [%zu] != (normals.size() [%zu] * numInfluencesPerPoint [%d]).", a3, a6, a16, a7);
    return 0;
  }
  v43[0] = a5;
  v43[1] = a6;
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v22) {
    uint64_t v22 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v22 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v56 = a3;
    uint64_t v57 = (unsigned char *)a4;
    long long __p = a15;
    uint64_t v55 = (unsigned char *)a16;
    LODWORD(v61) = v17;
    LOBYTE(v59) = 0;
    uint64_t p_p = &__p;
    uint64_t v45 = a2;
    char v46 = &v58;
    char v47 = (void **)&v61;
    uint64_t v48 = v43;
    unsigned __int8 v49 = &v56;
    int v50 = &v59;
    if (a16 < 0x3E8 || a17 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v22))
    {
      sub_2170301E4((uint64_t)&p_p, 0, (char *)a16, a8, a9, a10, a11, a12, a13);
    }
    else
    {
      LODWORD(v62) = 0;
      uint64_t v67 = 65539;
      int v68 = 55;
      tbb::task_group_context::init((uint64_t)&v62, v26, v27, v28);
      v60[0] = (tbb::task_group_context *)&v62;
      uint64_t v29 = tbb::internal::allocate_root_with_context_proxy::allocate(v60, 0x38uLL);
      *(unsigned char *)(v29 - 11) = 1;
      *(void *)uint64_t v29 = &unk_26C770148;
      *(void *)(v29 + 8) = a16;
      *(_OWORD *)(v29 + 16) = xmmword_2174A9840;
      *(void *)(v29 + 32) = &p_p;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v29);
      *(_DWORD *)(v29 + 48) = 0;
      *(unsigned char *)(v29 + 52) = 5;
      *(void *)(v29 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v29 - 40) + 16))(*(void *)(v29 - 40), v29, v29 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v62);
    }
    unsigned __int8 v41 = atomic_load((unsigned __int8 *)&v59);
    return (v41 & 1) == 0;
  }
  else
  {
    uint64_t v23 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v23) {
      uint64_t v23 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    unint64_t v24 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v24 != (*((void *)v23 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v62 = "usdSkel/utils.cpp";
      uint64_t v63 = "_InterleavedSkinNormals";
      uint64_t v64 = 2091;
      uint64_t v65 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_InterleavedSkinNormals(const TfToken &, const"
            " Matrix3 &, TfSpan<const Matrix3>, TfSpan<const GfVec2f>, const int, TfSpan<GfVec3f>, const BOOL) [Matrix3 ="
            " pxrInternal__aapl__pxrReserved__::GfMatrix3f]";
      char v66 = 0;
      if (v24)
      {
        unint64_t v25 = (const char *)(v24 + 16);
        if (*(char *)(v24 + 39) < 0) {
          unint64_t v25 = *(const char **)v25;
        }
      }
      else
      {
        unint64_t v25 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v62, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v25);
      return 0;
    }
    v60[0] = (tbb::task_group_context *)a15;
    v60[1] = (tbb::task_group_context *)a16;
    int v59 = v17;
    unsigned __int8 v58 = 0;
    sub_21702DC08(&v56, a4);
    sub_21702A0F4(&__p, a4);
    char v53 = 0;
    unsigned __int8 v31 = sub_21702EAEC((const pxrInternal__aapl__pxrReserved__::GfMatrix3f *)a3, a4, (uint64_t)v56, (v57 - (unsigned char *)v56) >> 5, (uint64_t)__p, 0x8E38E38E38E38E39 * ((v55 - (unsigned char *)__p) >> 2), &v53);
    uint64_t p_p = (void **)v60;
    uint64_t v45 = a2;
    char v46 = (unsigned __int8 *)&v42;
    char v47 = &v56;
    uint64_t v48 = v43;
    unsigned __int8 v49 = (void **)&v59;
    int v50 = (int *)&v53;
    unsigned __int8 v51 = &__p;
    int v52 = &v58;
    if (a16 < 0x3E8 || (a17 & 1) != 0 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v31))
    {
      sub_217030840((uint64_t)&p_p, 0, a16, v32);
    }
    else
    {
      LODWORD(v62) = 0;
      uint64_t v67 = 65539;
      int v68 = 55;
      tbb::task_group_context::init((uint64_t)&v62, v33, v34, v35);
      int v61 = &v62;
      uint64_t v36 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v61, 0x38uLL);
      *(unsigned char *)(v36 - 11) = 1;
      *(void *)uint64_t v36 = &unk_26C770190;
      *(void *)(v36 + 8) = a16;
      *(_OWORD *)(v36 + 16) = xmmword_2174A9840;
      *(void *)(v36 + 32) = &p_p;
      unint64_t v37 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v36);
      *(_DWORD *)(v36 + 48) = 0;
      *(unsigned char *)(v36 + 52) = 5;
      *(void *)(v36 + 40) = (v37 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v36 - 40) + 16))(*(void *)(v36 - 40), v36, v36 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v62);
    }
    unsigned __int8 v38 = atomic_load(&v58);
    if (__p)
    {
      uint64_t v55 = __p;
      operator delete(__p);
    }
    if (v56)
    {
      uint64_t v57 = v56;
      operator delete(v56);
    }
    return (v38 & 1) == 0;
  }
}

void sub_2170217CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34,int a35,__int16 a36,char a37,char a38)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a34, v38);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a36);
  if (__p) {
    operator delete(__p);
  }
  if (a28)
  {
    *(void *)(v39 + 8) = a28;
    operator delete(a28);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinFaceVaryingNormals(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, tbb::task_group_context *a11, void *a12, tbb::task_group_context *a13, char a14)
{
  return sub_21702188C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

BOOL sub_21702188C(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, tbb::task_group_context *a11, void *a12, tbb::task_group_context *a13, char a14)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (a6 != a8)
  {
    uint64_t v62 = "usdSkel/utils.cpp";
    uint64_t v63 = "_SkinFaceVaryingNormals";
    uint64_t v64 = 2152;
    uint64_t v65 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinFaceVaryingNormals(const TfToken &, const M"
          "atrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<const int>, TfSpan<"
          "GfVec3f>, const BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
    char v66 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v62, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != size of jointWeights [%zu]", a3, a6, a8);
    return 0;
  }
  unsigned int v14 = a9;
  if (a6 % (int)a9)
  {
    uint64_t v62 = "usdSkel/utils.cpp";
    uint64_t v63 = "_SkinFaceVaryingNormals";
    uint64_t v64 = 2159;
    uint64_t v65 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinFaceVaryingNormals(const TfToken &, const M"
          "atrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<const int>, TfSpan<"
          "GfVec3f>, const BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
    char v66 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v62, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] is not a multiple of numInfluencesPerPoint [%d]", a3, a6, a9);
    return 0;
  }
  if (a11 != a13)
  {
    uint64_t v62 = "usdSkel/utils.cpp";
    uint64_t v63 = "_SkinFaceVaryingNormals";
    uint64_t v64 = 2165;
    uint64_t v65 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinFaceVaryingNormals(const TfToken &, const M"
          "atrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<const int>, TfSpan<"
          "GfVec3f>, const BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
    char v66 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v62, (pxrInternal__aapl__pxrReserved__ *)"Size of faceVertexIndices [%zu] != size of normals [%zu]", a3, a11, a13);
    return 0;
  }
  v43[0] = a5;
  v43[1] = a6;
  void v43[2] = a7;
  v43[3] = a6;
  v41[0] = a10;
  v41[1] = a11;
  int v42 = a6 / (int)a9;
  unint64_t v19 = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v19)
  {
    unint64_t v37 = a1;
    unsigned __int8 v38 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    unsigned int v14 = a9;
    unint64_t v19 = (unint64_t)v38;
    a1 = v37;
  }
  if ((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v19 + 24) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v56 = a3;
    uint64_t v57 = (unsigned char *)a4;
    long long __p = a12;
    uint64_t v55 = a11;
    LODWORD(v61) = v14;
    LOBYTE(v59) = 0;
    uint64_t p_p = &__p;
    uint64_t v45 = a2;
    char v46 = v41;
    char v47 = (void **)&v61;
    uint64_t v48 = v43;
    unsigned __int8 v49 = &v56;
    int v50 = (int *)&v59;
    if ((unint64_t)a11 < 0x3E8 || a14 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
    {
      sub_217030FFC((uint64_t)&p_p, 0, (unint64_t)a11);
    }
    else
    {
      LODWORD(v62) = 0;
      uint64_t v67 = 65539;
      int v68 = 55;
      tbb::task_group_context::init((uint64_t)&v62, v23, v24, v25);
      v60[0] = (tbb::task_group_context *)&v62;
      uint64_t v26 = tbb::internal::allocate_root_with_context_proxy::allocate(v60, 0x38uLL);
      *(unsigned char *)(v26 - 11) = 1;
      *(void *)uint64_t v26 = &unk_26C7701D8;
      *(void *)(v26 + 8) = a11;
      *(_OWORD *)(v26 + 16) = xmmword_2174A9840;
      *(void *)(v26 + 32) = &p_p;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v26);
      *(_DWORD *)(v26 + 48) = 0;
      *(unsigned char *)(v26 + 52) = 5;
      *(void *)(v26 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v26 - 40) + 16))(*(void *)(v26 - 40), v26, v26 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v62);
    }
    unsigned __int8 v36 = atomic_load((unsigned __int8 *)&v59);
    return (v36 & 1) == 0;
  }
  else
  {
    uint64_t v20 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v20)
    {
      unsigned int v39 = v14;
      long long v40 = a1;
      uint64_t v20 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
      unsigned int v14 = v39;
      a1 = v40;
    }
    unint64_t v21 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
    if (v21 != (*((void *)v20 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v62 = "usdSkel/utils.cpp";
      uint64_t v63 = "_SkinFaceVaryingNormals";
      uint64_t v64 = 2181;
      uint64_t v65 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinFaceVaryingNormals(const TfToken &, const"
            " Matrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<const int>, TfS"
            "pan<GfVec3f>, const BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
      char v66 = 0;
      if (v21)
      {
        uint64_t v22 = (const char *)(v21 + 16);
        if (*(char *)(v21 + 39) < 0) {
          uint64_t v22 = *(const char **)v22;
        }
      }
      else
      {
        uint64_t v22 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v62, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v22);
      return 0;
    }
    v60[0] = (tbb::task_group_context *)a12;
    v60[1] = a11;
    unsigned int v59 = v14;
    unsigned __int8 v58 = 0;
    sub_21702DC08(&v56, a4);
    sub_21702DC6C(&__p, a4);
    char v53 = 0;
    sub_21702DAA8((long long *)a3, a4, (uint64_t)v56, (v57 - (unsigned char *)v56) >> 5, (uint64_t)__p, 0x8E38E38E38E38E39 * ((v55 - (unsigned char *)__p) >> 3), &v53);
    uint64_t p_p = (void **)v60;
    uint64_t v45 = a2;
    char v46 = v41;
    char v47 = &v56;
    uint64_t v48 = v43;
    unsigned __int8 v49 = (void **)&v59;
    int v50 = (int *)&v53;
    unsigned __int8 v51 = &__p;
    int v52 = &v58;
    if ((unint64_t)a11 < 0x3E8 || (a14 & 1) != 0 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v28))
    {
      sub_2170316CC((uint64_t)&p_p, 0, (unint64_t)a11);
    }
    else
    {
      LODWORD(v62) = 0;
      uint64_t v67 = 65539;
      int v68 = 55;
      tbb::task_group_context::init((uint64_t)&v62, v29, v30, v31);
      int v61 = &v62;
      uint64_t v32 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v61, 0x38uLL);
      *(unsigned char *)(v32 - 11) = 1;
      *(void *)uint64_t v32 = &unk_26C770220;
      *(void *)(v32 + 8) = a11;
      *(_OWORD *)(v32 + 16) = xmmword_2174A9840;
      *(void *)(v32 + 32) = &p_p;
      unint64_t v33 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v32);
      *(_DWORD *)(v32 + 48) = 0;
      *(unsigned char *)(v32 + 52) = 5;
      *(void *)(v32 + 40) = (v33 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v32 - 40) + 16))(*(void *)(v32 - 40), v32, v32 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v62);
    }
    unsigned __int8 v34 = atomic_load(&v58);
    if (__p)
    {
      uint64_t v55 = __p;
      operator delete(__p);
    }
    if (v56)
    {
      uint64_t v57 = v56;
      operator delete(v56);
    }
    return (v34 & 1) == 0;
  }
}

void sub_217021E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,int a40,__int16 a41,char a42,char a43)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a39, v43);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a41);
  if (__p) {
    operator delete(__p);
  }
  if (a33) {
    operator delete(a33);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinFaceVaryingNormals(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, char *a11, void *a12, char *a13, char a14)
{
  return sub_217021EC0(a1, a2, a3, a4, a5, a6, a7, a8, *(double *)&a10, a9, a10, a11, a12, a13, a14);
}

BOOL sub_217021EC0(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, double a9, unsigned int a10, uint64_t a11, char *a12, void *a13, char *a14, char a15)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  if (a6 != a8)
  {
    uint64_t v64 = "usdSkel/utils.cpp";
    uint64_t v65 = "_SkinFaceVaryingNormals";
    uint64_t v66 = 2152;
    uint64_t v67 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinFaceVaryingNormals(const TfToken &, const M"
          "atrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<const int>, TfSpan<"
          "GfVec3f>, const BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3f]";
    char v68 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v64, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != size of jointWeights [%zu]", a3, a6, a8);
    return 0;
  }
  unsigned int v15 = a10;
  if (a6 % (int)a10)
  {
    uint64_t v64 = "usdSkel/utils.cpp";
    uint64_t v65 = "_SkinFaceVaryingNormals";
    uint64_t v66 = 2159;
    uint64_t v67 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinFaceVaryingNormals(const TfToken &, const M"
          "atrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<const int>, TfSpan<"
          "GfVec3f>, const BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3f]";
    char v68 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v64, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] is not a multiple of numInfluencesPerPoint [%d]", a3, a6, a10);
    return 0;
  }
  if (a12 != a14)
  {
    uint64_t v64 = "usdSkel/utils.cpp";
    uint64_t v65 = "_SkinFaceVaryingNormals";
    uint64_t v66 = 2165;
    uint64_t v67 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinFaceVaryingNormals(const TfToken &, const M"
          "atrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<const int>, TfSpan<"
          "GfVec3f>, const BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3f]";
    char v68 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v64, (pxrInternal__aapl__pxrReserved__ *)"Size of faceVertexIndices [%zu] != size of normals [%zu]", a3, a12, a14);
    return 0;
  }
  v45[0] = a5;
  v45[1] = a6;
  v45[2] = a7;
  v45[3] = a6;
  v43[0] = a11;
  v43[1] = a12;
  int v44 = a6 / (int)a10;
  unint64_t v20 = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v20)
  {
    unsigned int v39 = a1;
    long long v40 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    unsigned int v15 = a10;
    unint64_t v20 = (unint64_t)v40;
    a1 = v39;
  }
  if ((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v20 + 24) & 0xFFFFFFFFFFFFFFF8))
  {
    unsigned __int8 v58 = a3;
    unsigned int v59 = (unsigned char *)a4;
    long long __p = a13;
    uint64_t v57 = a12;
    LODWORD(v63) = v15;
    LOBYTE(v61) = 0;
    uint64_t p_p = &__p;
    uint64_t v47 = a2;
    uint64_t v48 = v43;
    unsigned __int8 v49 = (void **)&v63;
    int v50 = v45;
    unsigned __int8 v51 = &v58;
    int v52 = (int *)&v61;
    if ((unint64_t)a12 < 0x3E8 || a15 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
    {
      sub_217031E60((uint64_t)&p_p, 0, a12, a9);
    }
    else
    {
      LODWORD(v64) = 0;
      uint64_t v69 = 65539;
      int v70 = 55;
      tbb::task_group_context::init((uint64_t)&v64, v24, v25, v26);
      v62[0] = (tbb::task_group_context *)&v64;
      uint64_t v27 = tbb::internal::allocate_root_with_context_proxy::allocate(v62, 0x38uLL);
      *(unsigned char *)(v27 - 11) = 1;
      *(void *)uint64_t v27 = &unk_26C770268;
      *(void *)(v27 + 8) = a12;
      *(_OWORD *)(v27 + 16) = xmmword_2174A9840;
      *(void *)(v27 + 32) = &p_p;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v27);
      *(_DWORD *)(v27 + 48) = 0;
      *(unsigned char *)(v27 + 52) = 5;
      *(void *)(v27 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v27 - 40) + 16))(*(void *)(v27 - 40), v27, v27 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v64);
    }
    unsigned __int8 v38 = atomic_load((unsigned __int8 *)&v61);
    return (v38 & 1) == 0;
  }
  else
  {
    unint64_t v21 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v21)
    {
      unsigned int v41 = v15;
      int v42 = a1;
      unint64_t v21 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
      unsigned int v15 = v41;
      a1 = v42;
    }
    unint64_t v22 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
    if (v22 != (*((void *)v21 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v64 = "usdSkel/utils.cpp";
      uint64_t v65 = "_SkinFaceVaryingNormals";
      uint64_t v66 = 2181;
      uint64_t v67 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinFaceVaryingNormals(const TfToken &, const"
            " Matrix3 &, TfSpan<const Matrix3>, TfSpan<const int>, TfSpan<const float>, const int, TfSpan<const int>, TfS"
            "pan<GfVec3f>, const BOOL) [Matrix3 = pxrInternal__aapl__pxrReserved__::GfMatrix3f]";
      char v68 = 0;
      if (v22)
      {
        uint64_t v23 = (const char *)(v22 + 16);
        if (*(char *)(v22 + 39) < 0) {
          uint64_t v23 = *(const char **)v23;
        }
      }
      else
      {
        uint64_t v23 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v64, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v23);
      return 0;
    }
    v62[0] = (tbb::task_group_context *)a13;
    v62[1] = (tbb::task_group_context *)a12;
    unsigned int v61 = v15;
    unsigned __int8 v60 = 0;
    sub_21702DC08(&v58, a4);
    sub_21702A0F4(&__p, a4);
    char v55 = 0;
    uint64_t v29 = sub_21702EAEC((const pxrInternal__aapl__pxrReserved__::GfMatrix3f *)a3, a4, (uint64_t)v58, (v59 - (unsigned char *)v58) >> 5, (uint64_t)__p, 0x8E38E38E38E38E39 * ((v57 - (unsigned char *)__p) >> 2), &v55);
    uint64_t p_p = (void **)v62;
    uint64_t v47 = a2;
    uint64_t v48 = v43;
    unsigned __int8 v49 = &v58;
    int v50 = v45;
    unsigned __int8 v51 = (void **)&v61;
    int v52 = (int *)&v55;
    char v53 = &__p;
    char v54 = &v60;
    if ((unint64_t)a12 < 0x3E8 || (a15 & 1) != 0 || !pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v29))
    {
      sub_21703250C((uint64_t)&p_p, 0, a12, v30);
    }
    else
    {
      LODWORD(v64) = 0;
      uint64_t v69 = 65539;
      int v70 = 55;
      tbb::task_group_context::init((uint64_t)&v64, v31, v32, v33);
      uint64_t v63 = &v64;
      uint64_t v34 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v63, 0x38uLL);
      *(unsigned char *)(v34 - 11) = 1;
      *(void *)uint64_t v34 = &unk_26C7702B0;
      *(void *)(v34 + 8) = a12;
      *(_OWORD *)(v34 + 16) = xmmword_2174A9840;
      *(void *)(v34 + 32) = &p_p;
      unint64_t v35 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v34);
      *(_DWORD *)(v34 + 48) = 0;
      *(unsigned char *)(v34 + 52) = 5;
      *(void *)(v34 + 40) = (v35 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v34 - 40) + 16))(*(void *)(v34 - 40), v34, v34 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v64);
    }
    unsigned __int8 v36 = atomic_load(&v60);
    if (__p)
    {
      uint64_t v57 = __p;
      operator delete(__p);
    }
    if (v58)
    {
      unsigned int v59 = v58;
      operator delete(v58);
    }
    return (v36 & 1) == 0;
  }
}

void sub_217022434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,int a40,__int16 a41,char a42,char a43)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a39, v43);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a41);
  if (__p) {
    operator delete(__p);
  }
  if (a33) {
    operator delete(a33);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormalsLBS(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, tbb::task_group_context *a9, unint64_t a10, char a11)
{
  uint64_t v12 = a7;
  unint64_t v19 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v19)
  {
    unint64_t v19 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    uint64_t v12 = a7;
  }
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormals((void *)v19 + 3, a1, a2, a3, a4, a5, a6, v12, a8, a9, a10, a11);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormalsLBS(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, double a9, double a10, double a11, double a12, double a13, double a14, tbb::task_group_context *a15, unint64_t a16, char a17)
{
  uint64_t v18 = a7;
  uint64_t v25 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v25)
  {
    uint64_t v25 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    uint64_t v18 = a7;
  }
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormals((void *)v25 + 3, a1, a2, a3, a4, a5, a6, v18, a9, a10, a11, a12, a13, a14, a8, a15, a16, a17);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormalsLBS(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, unint64_t a8, char a9)
{
  int v17 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v17) {
    int v17 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormals((void *)v17 + 3, a1, a2, a3, a4, a5, a6, a8, a7, a8, a9);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormalsLBS(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, unint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, char a15)
{
  uint64_t v23 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v23) {
    uint64_t v23 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinNormals((void *)v23 + 3, a1, a2, a3, a4, a5, a6, a9, a10, a11, a12, a13, a14, a8, a7, a8, a15);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinFaceVaryingNormalsLBS(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, tbb::task_group_context *a10, void *a11, tbb::task_group_context *a12, char a13)
{
  unint64_t v16 = a5;
  unint64_t v21 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v21)
  {
    uint64_t v24 = a6;
    uint64_t v25 = a7;
    unint64_t v21 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    unint64_t v16 = a5;
    a6 = v24;
    a7 = v25;
  }
  return sub_21702188C((pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v21 + 24), a1, a2, a3, a4, v16, a6, a7, a8, a9, a10, a11, a12, a13);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinFaceVaryingNormalsLBS(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, double a9, uint64_t a10, char *a11, void *a12, char *a13, char a14)
{
  unint64_t v17 = a5;
  unint64_t v22 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v22)
  {
    uint64_t v25 = a6;
    uint64_t v26 = a7;
    unint64_t v22 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    unint64_t v17 = a5;
    a6 = v25;
    a7 = v26;
  }
  return sub_217021EC0((pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v22 + 24), a1, a2, a3, a4, v17, a6, a7, a9, a8, a10, a11, a12, a13, a14);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransform(void *a1, float64x2_t *a2, char *a3, unint64_t a4, unsigned int *a5, unint64_t a6, float *a7, uint64_t a8, uint64_t a9)
{
  return sub_21702294C(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

BOOL sub_21702294C(void *a1, float64x2_t *a2, char *a3, unint64_t a4, unsigned int *a5, unint64_t a6, float *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v133 = *MEMORY[0x263EF8340];
  if (a6 != a8)
  {
    *(void *)&v126[0].f64[0] = "usdSkel/utils.cpp";
    *(void *)&v126[0].f64[1] = "UsdSkel_NonInterleavedSkinTransform";
    *(void *)&v126[1].f64[0] = 2612;
    *(void *)&v126[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_NonInterleavedSki"
                                 "nTransform(const TfToken &, const Matrix4 &, TfSpan<const Matrix4>, TfSpan<const int>, "
                                 "TfSpan<const float>, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v127.f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v126, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != size of jointWeights [%zu]", a3, a6, a8);
    return 0;
  }
  unint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v16) {
    unint64_t v16 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v16 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    unint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v17) {
      unint64_t v17 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    unint64_t v18 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v18 != (*((void *)v17 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      *(void *)&v126[0].f64[0] = "usdSkel/utils.cpp";
      *(void *)&v126[0].f64[1] = "UsdSkel_NonInterleavedSkinTransform";
      *(void *)&v126[1].f64[0] = 2624;
      *(void *)&v126[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_NonInterleavedS"
                                   "kinTransform(const TfToken &, const Matrix4 &, TfSpan<const Matrix4>, TfSpan<const in"
                                   "t>, TfSpan<const float>, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
      LOBYTE(v127.f64[0]) = 0;
      if (v18)
      {
        unint64_t v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0) {
          unint64_t v19 = *(const char **)v19;
        }
      }
      else
      {
        unint64_t v19 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v126, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v19);
      return 0;
    }
    if (!a9)
    {
      *(void *)&v126[0].f64[0] = "usdSkel/utils.cpp";
      *(void *)&v126[0].f64[1] = "UsdSkel_SkinTransformDQS";
      *(void *)&v126[1].f64[0] = 2494;
      *(void *)&v126[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQ"
                                   "S(const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 ="
                                   " pxrInternal__aapl__pxrReserved__::GfMatrix4d, InfluencesFunint64_t n = pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::_NonInterleavedInfluencesFn]";
      LOBYTE(v127.f64[0]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v126, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' is null");
      return 0;
    }
    if (a6 == 1 && fabs(*a7 + -1.0) < 0.000001)
    {
      unint64_t v20 = *a5;
      if ((v20 & 0x80000000) == 0 && a4 > v20) {
        goto LABEL_23;
      }
      *(void *)&v126[0].f64[0] = "usdSkel/utils.cpp";
      *(void *)&v126[0].f64[1] = "UsdSkel_SkinTransformDQS";
      *(void *)&v126[1].f64[0] = 2509;
      *(void *)&v126[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQ"
                                   "S(const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 ="
                                   " pxrInternal__aapl__pxrReserved__::GfMatrix4d, InfluencesFunint64_t n = pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::_NonInterleavedInfluencesFn]";
      LOBYTE(v127.f64[0]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v126, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index 0 (num joints = %zu).", a3, v20, a4);
      return 0;
    }
    sub_21702A090(&v119, a4);
    sub_21702A0F4(&v117, a4);
    unsigned __int8 v116 = 0;
    sub_217029E5C((uint64_t)a3, a4, (__n128 *)v119, (v120 - (unsigned char *)v119) >> 6, (uint64_t)v117, 0x8E38E38E38E38E39 * ((v118 - (unsigned char *)v117) >> 2), &v116);
    float v52 = a2[7].f64[0];
    float v53 = a2[1].f64[0];
    float32x2_t v54 = vcvt_f32_f64(a2[6]);
    *(float32x2_t *)BOOL v121 = vadd_f32(v54, vcvt_f32_f64(*a2));
    *(float32x2_t *)&v121[12] = vadd_f32(v54, vcvt_f32_f64(a2[2]));
    float v55 = a2[3].f64[0];
    *(float *)&v121[8] = v52 + v53;
    *(float *)&v121[20] = v52 + v55;
    float v56 = a2[5].f64[0];
    uint64_t v122 = (const char *)vadd_f32(v54, vcvt_f32_f64(a2[4]));
    float32x2_t v124 = v54;
    float v123 = v52 + v56;
    float v125 = v52;
    float64x2_t v57 = 0uLL;
    if ((int)a6 < 1)
    {
      float64x2_t v68 = 0uLL;
      uint64_t v63 = a9;
    }
    else
    {
      uint64_t v58 = a6;
      int v59 = -1;
      float v60 = -1.0;
      unsigned int v61 = a5;
      uint64_t v62 = a7;
      uint64_t v63 = a9;
      do
      {
        unsigned int v65 = *v61++;
        unint64_t v64 = v65;
        if ((v65 & 0x80000000) == 0 && (v120 - (unsigned char *)v119) >> 6 > v64 && (v60 < *v62 || v59 < 0))
        {
          int v59 = v64;
          float v60 = *v62;
        }
        ++v62;
        --v58;
      }
      while (v58);
      float64x2_t v68 = 0uLL;
      if ((v59 & 0x80000000) == 0)
      {
        uint64_t v69 = (float64x2_t *)((char *)v119 + 64 * (unint64_t)v59);
        float64x2_t v68 = *v69;
        float64x2_t v57 = v69[1];
      }
    }
    float64x2_t v109 = v68;
    float64x2_t v110 = v57;
    v126[0].f64[0] = 0.0;
    LODWORD(v126[0].f64[1]) = 0;
    sub_217032CC0(__p, 4uLL, (uint64_t *)v126);
    float64x2_t v71 = 0uLL;
    float64x2_t v127 = 0u;
    float64x2_t v128 = 0u;
    memset(v126, 0, sizeof(v126));
    if (a6)
    {
      unint64_t v72 = 0;
      BOOL v29 = 0;
      uint64_t v73 = (char *)v119;
      unint64_t v74 = (v120 - (unsigned char *)v119) >> 6;
      unint64_t v75 = *a5;
      if ((v75 & 0x80000000) != 0 || v74 <= v75)
      {
LABEL_78:
        *(void *)&v111.f64[0] = "usdSkel/utils.cpp";
        *(void *)&v111.f64[1] = "UsdSkel_SkinTransformDQS";
        uint64_t v112 = 2581;
        BOOL v113 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQS(const Matrix4 &, T"
               "fSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMat"
               "rix4d, InfluencesFunint64_t n = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedInfluencesFn]";
        char v114 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v111, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v70, v75, v72, v74);
LABEL_89:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v117)
        {
          uint64_t v118 = v117;
          operator delete(v117);
        }
        if (v119)
        {
          unsigned int v120 = v119;
          operator delete(v119);
        }
        return v29;
      }
      unint64_t v72 = 0;
      int v76 = v116;
      uint64_t v77 = (char *)v117;
      float64x2_t v78 = 0uLL;
      uint64_t v79 = (char *)__p[0];
      float64x2_t v80 = 0uLL;
      float64x2_t v81 = 0uLL;
      while (1)
      {
        float v82 = a7[v72];
        if (v82 != 0.0)
        {
          if (v76)
          {
            uint64_t v83 = 0;
            int v84 = &v77[36 * v75];
            do
            {
              float v85 = *(float *)&v121[v83];
              float v86 = *(float *)&v121[v83 + 4];
              float v87 = *(float *)&v121[v83 + 8];
              float v88 = v82
                  * (float)((float)((float)(v85 * *((float *)v84 + 2)) + (float)(v86 * *((float *)v84 + 5)))
                          + (float)(v87 * *((float *)v84 + 8)));
              unint64_t v89 = (float32x2_t *)&v79[v83];
              *unint64_t v89 = vadd_f32(vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v84, v85), vmul_n_f32(*(float32x2_t *)(v84 + 12), v86)), vmul_n_f32(*(float32x2_t *)(v84 + 24), v87)), v82), *(float32x2_t *)&v79[v83]);
              v89[1].f32[0] = v88 + *(float *)&v79[v83 + 8];
              v83 += 12;
            }
            while (v83 != 48);
          }
          char v90 = (float64x2_t *)&v73[64 * v75];
          float64x2_t v91 = v90[1];
          float64x2_t v92 = vmulq_f64(v109, *v90);
          float64x2_t v93 = vmulq_f64(v110, v91);
          if (vaddq_f64(vaddq_f64(vaddq_f64(v92, (float64x2_t)vdupq_laneq_s64((int64x2_t)v92, 1)), v93), (float64x2_t)vdupq_laneq_s64((int64x2_t)v93, 1)).f64[0] < 0.0)float v82 = -v82; {
          double v94 = v82;
          }
          float64x2_t v71 = vaddq_f64(v71, vmulq_n_f64(*v90, v94));
          float64x2_t v78 = vaddq_f64(v78, vmulq_n_f64(v91, v94));
          float64x2_t v80 = vaddq_f64(v80, vmulq_n_f64(v90[2], v94));
          float64x2_t v95 = vmulq_n_f64(v90[3], v94);
          v126[0] = v71;
          v126[1] = v78;
          float64x2_t v81 = vaddq_f64(v81, v95);
          float64x2_t v127 = v80;
          float64x2_t v128 = v81;
        }
        if (++v72 == a6) {
          break;
        }
        unint64_t v75 = a5[v72];
        if ((v75 & 0x80000000) != 0 || v74 <= v75)
        {
          BOOL v29 = v72 >= a6;
          goto LABEL_78;
        }
      }
    }
    pxrInternal__aapl__pxrReserved__::GfDualQuatd::Normalize(v126, 1.0e-10);
    for (uint64_t i = 0; i != 48; i += 12)
    {
      if (v116) {
        char v97 = __p[0];
      }
      else {
        char v97 = v121;
      }
      v111.f64[0] = *(float *)&v97[i];
      int v98 = &v121[i];
      char v99 = (float *)((char *)__p[0] + i);
      if (!v116) {
        char v99 = (float *)&v121[i];
      }
      v111.f64[1] = v99[1];
      *(double *)&uint64_t v112 = v99[2];
      float v100 = pxrInternal__aapl__pxrReserved__::GfDualQuatd::Transform(v126[0].f64, v111.f64);
      *(float *)&double v101 = v101;
      *(float *)&double v102 = v102;
      *(float *)&v121[i] = v100;
      *((_DWORD *)v98 + 1) = LODWORD(v101);
      *((_DWORD *)v98 + 2) = LODWORD(v102);
    }
    float32x2_t v103 = v124;
    float v104 = v125;
    float64x2_t v111 = vcvtq_f64_f32(v124);
    *(double *)&uint64_t v112 = v125;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate(v63, (uint64_t)&v111);
    uint64_t v105 = 0;
    uint64_t v106 = (double *)(v63 + 16);
    do
    {
      double v107 = (float)(*(float *)&v121[v105 + 8] - v104);
      *((float64x2_t *)v106 - 1) = vcvtq_f64_f32(vsub_f32(*(float32x2_t *)&v121[v105], v103));
      *uint64_t v106 = v107;
      v106 += 4;
      v105 += 12;
    }
    while (v105 != 36);
    BOOL v29 = 1;
    goto LABEL_89;
  }
  if (!a9)
  {
    *(void *)&v126[0].f64[0] = "usdSkel/utils.cpp";
    *(void *)&v126[0].f64[1] = "UsdSkel_SkinTransformLBS";
    *(void *)&v126[1].f64[0] = 2409;
    *(void *)&v126[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLBS("
                                 "const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxr"
                                 "Internal__aapl__pxrReserved__::GfMatrix4d, InfluencesFunint64_t n = pxrInternal__aapl__pxrReserve"
                                 "d__::(anonymous namespace)::_NonInterleavedInfluencesFn]";
    LOBYTE(v127.f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v126, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' is null");
    return 0;
  }
  if (a6 == 1 && fabs(*a7 + -1.0) < 0.000001)
  {
    unint64_t v20 = *a5;
    if ((v20 & 0x80000000) == 0 && a4 > v20)
    {
LABEL_23:
      float64x2_t v21 = a2[5];
      float64x2_t v129 = a2[4];
      float64x2_t v130 = v21;
      float64x2_t v22 = a2[7];
      float64x2_t v131 = a2[6];
      float64x2_t v132 = v22;
      float64x2_t v23 = a2[1];
      v126[0] = *a2;
      v126[1] = v23;
      float64x2_t v24 = a2[3];
      float64x2_t v127 = a2[2];
      float64x2_t v128 = v24;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v126[0].f64, (double *)&a3[128 * v20]);
      float64x2_t v25 = v130;
      *(float64x2_t *)(a9 + 64) = v129;
      *(float64x2_t *)(a9 + 80) = v25;
      float64x2_t v26 = v132;
      *(float64x2_t *)(a9 + 96) = v131;
      *(float64x2_t *)(a9 + 112) = v26;
      float64x2_t v27 = v126[1];
      *(float64x2_t *)a9 = v126[0];
      *(float64x2_t *)(a9 + 16) = v27;
      float64x2_t v28 = v128;
      *(float64x2_t *)(a9 + 32) = v127;
      *(float64x2_t *)(a9 + 48) = v28;
      return 1;
    }
    *(void *)&v126[0].f64[0] = "usdSkel/utils.cpp";
    *(void *)&v126[0].f64[1] = "UsdSkel_SkinTransformLBS";
    *(void *)&v126[1].f64[0] = 2424;
    *(void *)&v126[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLBS("
                                 "const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxr"
                                 "Internal__aapl__pxrReserved__::GfMatrix4d, InfluencesFunint64_t n = pxrInternal__aapl__pxrReserve"
                                 "d__::(anonymous namespace)::_NonInterleavedInfluencesFn]";
    LOBYTE(v127.f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v126, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index 0 (num joints = %zu).", a3, v20, a4);
    return 0;
  }
  unint64_t v30 = 0;
  BOOL v29 = 0;
  float v31 = a2[7].f64[0];
  float v32 = a2[1].f64[0];
  float32x2_t v33 = vcvt_f32_f64(a2[6]);
  *(float32x2_t *)&v126[0].f64[0] = vadd_f32(v33, vcvt_f32_f64(*a2));
  *(float32x2_t *)((char *)&v126[0].f64[1] + 4) = vadd_f32(v33, vcvt_f32_f64(a2[2]));
  float v34 = a2[3].f64[0];
  *(float *)&v126[0].f64[1] = v31 + v32;
  *((float *)v126[1].f64 + 1) = v31 + v34;
  float v35 = a2[5].f64[0];
  *(float32x2_t *)&v126[1].f64[1] = vadd_f32(v33, vcvt_f32_f64(a2[4]));
  *(float32x2_t *)((char *)v127.f64 + 4) = v33;
  *(float *)v127.f64 = v31 + v35;
  *((float *)&v127.f64[1] + 1) = v31;
  if (a6 <= 1) {
    uint64_t v36 = 1;
  }
  else {
    uint64_t v36 = a6;
  }
  unint64_t v37 = a6;
  while (1)
  {
    unsigned __int8 v38 = (char *)v126 + 12 * v30;
    v111.f64[0] = *(float64_t *)v38;
    LODWORD(v111.f64[1]) = *((_DWORD *)v38 + 2);
    if (v37) {
      break;
    }
    float v42 = 0.0;
    float v41 = 0.0;
    float v40 = 0.0;
LABEL_38:
    *(float *)unsigned __int8 v38 = v40;
    *((float *)v38 + 1) = v41;
    *((float *)v38 + 2) = v42;
    BOOL v29 = v30++ > 2;
    if (v30 == 4)
    {
      float32x2_t v47 = *(float32x2_t *)((char *)v127.f64 + 4);
      float v48 = *((float *)&v127.f64[1] + 1);
      *(float64x2_t *)BOOL v121 = vcvtq_f64_f32(*(float32x2_t *)((char *)v127.f64 + 4));
      *(double *)&v121[16] = *((float *)&v127.f64[1] + 1);
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate(a9, (uint64_t)v121);
      uint64_t v49 = 0;
      int v50 = (double *)(a9 + 16);
      do
      {
        double v51 = (float)(*(float *)((char *)&v126[0].f64[1] + v49) - v48);
        *((float64x2_t *)v50 - 1) = vcvtq_f64_f32(vsub_f32(*(float32x2_t *)((char *)v126[0].f64 + v49), v47));
        *int v50 = v51;
        v50 += 4;
        v49 += 12;
      }
      while (v49 != 36);
      return 1;
    }
  }
  uint64_t v39 = 0;
  float v40 = 0.0;
  float v41 = 0.0;
  float v42 = 0.0;
  while (1)
  {
    unint64_t v43 = a5[v39];
    if ((v43 & 0x80000000) != 0 || a4 <= v43) {
      break;
    }
    float v44 = a7[v39];
    if (v44 != 0.0)
    {
      float v40 = v40 + (float)(v44 * sub_21701BAB8((float64x2_t *)&a3[128 * v43], (float *)&v111).f32[0]);
      float v41 = v41 + (float)(v44 * v45);
      float v42 = v42 + (float)(v44 * v46);
    }
    if (v36 == ++v39)
    {
      unint64_t v37 = a6;
      goto LABEL_38;
    }
  }
  *(void *)BOOL v121 = "usdSkel/utils.cpp";
  *(void *)&v121[8] = "UsdSkel_SkinTransformLBS";
  *(void *)&v121[16] = 2468;
  uint64_t v122 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLBS(const Matrix4 &, TfSpan<"
         "const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d, Influ"
         "encesFunint64_t n = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedInfluencesFn]";
  LOBYTE(v123) = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v121, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", a3, v43, v39, a4);
  return v29;
}

void sub_21702334C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  if (a30) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransform(void *a1, uint64_t a2, char *a3, unint64_t a4, unsigned int *a5, unint64_t a6, float *a7, uint64_t a8, int8x16_t a9, uint64_t a10)
{
  uint64_t v127 = *MEMORY[0x263EF8340];
  if (a6 != a8)
  {
    *(void *)&v125[0].f64[0] = "usdSkel/utils.cpp";
    *(void *)&v125[0].f64[1] = "UsdSkel_NonInterleavedSkinTransform";
    *(void *)&v125[1].f64[0] = 2612;
    *(void *)&v125[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_NonInterleavedSki"
                                 "nTransform(const TfToken &, const Matrix4 &, TfSpan<const Matrix4>, TfSpan<const int>, "
                                 "TfSpan<const float>, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
    LOBYTE(v125[2].f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v125, (pxrInternal__aapl__pxrReserved__ *)"Size of jointIndices [%zu] != size of jointWeights [%zu]", a3, a6, a8);
    return 0;
  }
  unint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v17) {
    unint64_t v17 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v17 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    unint64_t v18 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v18) {
      unint64_t v18 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    unint64_t v19 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v19 != (*((void *)v18 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      *(void *)&v125[0].f64[0] = "usdSkel/utils.cpp";
      *(void *)&v125[0].f64[1] = "UsdSkel_NonInterleavedSkinTransform";
      *(void *)&v125[1].f64[0] = 2624;
      *(void *)&v125[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_NonInterleavedS"
                                   "kinTransform(const TfToken &, const Matrix4 &, TfSpan<const Matrix4>, TfSpan<const in"
                                   "t>, TfSpan<const float>, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f]";
      LOBYTE(v125[2].f64[0]) = 0;
      if (v19)
      {
        unint64_t v20 = (const char *)(v19 + 16);
        if (*(char *)(v19 + 39) < 0) {
          unint64_t v20 = *(const char **)v20;
        }
      }
      else
      {
        unint64_t v20 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v125, (pxrInternal__aapl__pxrReserved__ *)"Unknown skinning method: '%s' ", a3, v20);
      return 0;
    }
    if (!a10)
    {
      *(void *)&v125[0].f64[0] = "usdSkel/utils.cpp";
      *(void *)&v125[0].f64[1] = "UsdSkel_SkinTransformDQS";
      *(void *)&v125[1].f64[0] = 2494;
      *(void *)&v125[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQ"
                                   "S(const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 ="
                                   " pxrInternal__aapl__pxrReserved__::GfMatrix4f, InfluencesFunint64_t n = pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::_NonInterleavedInfluencesFn]";
      LOBYTE(v125[2].f64[0]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v125, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' is null");
      return 0;
    }
    if (a6 == 1 && fabs(*a7 + -1.0) < 0.000001)
    {
      unint64_t v21 = *a5;
      if ((v21 & 0x80000000) == 0 && a4 > v21) {
        goto LABEL_23;
      }
      *(void *)&v125[0].f64[0] = "usdSkel/utils.cpp";
      *(void *)&v125[0].f64[1] = "UsdSkel_SkinTransformDQS";
      *(void *)&v125[1].f64[0] = 2509;
      *(void *)&v125[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQ"
                                   "S(const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 ="
                                   " pxrInternal__aapl__pxrReserved__::GfMatrix4f, InfluencesFunint64_t n = pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::_NonInterleavedInfluencesFn]";
      LOBYTE(v125[2].f64[0]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v125, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index 0 (num joints = %zu).", a3, v21, a4);
      return 0;
    }
    sub_21702A090(&v120, a4);
    sub_21702A0F4(&v118, a4);
    unsigned __int8 v117 = 0;
    sub_21702B044((uint64_t)a3, a4, (__n128 *)v120, (v121 - (unsigned char *)v120) >> 6, (uint64_t)v118, 0x8E38E38E38E38E39 * ((v119 - (unsigned char *)v118) >> 2), &v117);
    v50.i32[0] = *(_DWORD *)(a2 + 56);
    float32x4_t v51 = *(float32x4_t *)(a2 + 4);
    float32x4_t v52 = *(float32x4_t *)(a2 + 24);
    v51.i64[1] = *(void *)(a2 + 16);
    int32x4_t v53 = *(int32x4_t *)(a2 + 36);
    v52.i32[1] = *(_DWORD *)(a2 + 32);
    v52.i64[1] = *(void *)(a2 + 36);
    v53.i64[0] = *(void *)(a2 + 48);
    *(float *)uint64_t v122 = *(float *)v53.i32 + *(float *)a2;
    int32x4_t v54 = vuzp2q_s32(v53, vzip1q_s32(v53, v53));
    float32x4_t v55 = (float32x4_t)v54;
    v55.i32[1] = v50.i32[0];
    v55.i32[3] = v54.i32[0];
    *(float32x4_t *)&v122[4] = vaddq_f32(v55, v51);
    float32x4_t v56 = (float32x4_t)vextq_s8(vextq_s8(v50, v50, 4uLL), (int8x16_t)v53, 0xCuLL);
    v56.i32[3] = v56.i32[0];
    *(float32x4_t *)&v122[20] = vaddq_f32(v56, v52);
    double v123 = *(double *)v53.i64;
    __int32 v124 = v50.i32[0];
    float64x2_t v57 = 0uLL;
    if ((int)a6 < 1)
    {
      float64x2_t v68 = 0uLL;
      uint64_t v63 = a10;
    }
    else
    {
      uint64_t v58 = a6;
      int v59 = -1;
      float v60 = -1.0;
      unsigned int v61 = a5;
      uint64_t v62 = a7;
      uint64_t v63 = a10;
      do
      {
        unsigned int v65 = *v61++;
        unint64_t v64 = v65;
        if ((v65 & 0x80000000) == 0 && (v121 - (unsigned char *)v120) >> 6 > v64 && (v60 < *v62 || v59 < 0))
        {
          int v59 = v64;
          float v60 = *v62;
        }
        ++v62;
        --v58;
      }
      while (v58);
      float64x2_t v68 = 0uLL;
      if ((v59 & 0x80000000) == 0)
      {
        uint64_t v69 = (float64x2_t *)((char *)v120 + 64 * (unint64_t)v59);
        float64x2_t v68 = *v69;
        float64x2_t v57 = v69[1];
      }
    }
    float64x2_t v109 = v68;
    float64x2_t v110 = v57;
    v125[0].f64[0] = 0.0;
    LODWORD(v125[0].f64[1]) = 0;
    sub_217032CC0(__p, 4uLL, (uint64_t *)v125);
    float64x2_t v71 = 0uLL;
    float64x2_t v126 = 0u;
    memset(v125, 0, sizeof(v125));
    if (a6)
    {
      unint64_t v72 = 0;
      BOOL v26 = 0;
      uint64_t v73 = (char *)v120;
      unint64_t v74 = (v121 - (unsigned char *)v120) >> 6;
      unint64_t v75 = *a5;
      if ((v75 & 0x80000000) != 0 || v74 <= v75)
      {
LABEL_78:
        double v111 = COERCE_DOUBLE("usdSkel/utils.cpp");
        double v112 = COERCE_DOUBLE("UsdSkel_SkinTransformDQS");
        uint64_t v113 = 2581;
        char v114 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQS(const Matrix4 &, T"
               "fSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMat"
               "rix4f, InfluencesFunint64_t n = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NonInterleavedInfluencesFn]";
        char v115 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v111, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v70, v75, v72, v74);
LABEL_89:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v118)
        {
          uint64_t v119 = v118;
          operator delete(v118);
        }
        if (v120)
        {
          BOOL v121 = v120;
          operator delete(v120);
        }
        return v26;
      }
      unint64_t v72 = 0;
      int v76 = v117;
      uint64_t v77 = (char *)v118;
      float64x2_t v78 = 0uLL;
      uint64_t v79 = (char *)__p[0];
      float64x2_t v80 = 0uLL;
      float64x2_t v81 = 0uLL;
      while (1)
      {
        float v82 = a7[v72];
        if (v82 != 0.0)
        {
          if (v76)
          {
            uint64_t v83 = 0;
            int v84 = &v77[36 * v75];
            do
            {
              float v85 = *(float *)&v122[v83];
              float v86 = *(float *)&v122[v83 + 4];
              float v87 = *(float *)&v122[v83 + 8];
              float v88 = v82
                  * (float)((float)((float)(v85 * *((float *)v84 + 2)) + (float)(v86 * *((float *)v84 + 5)))
                          + (float)(v87 * *((float *)v84 + 8)));
              unint64_t v89 = (float32x2_t *)&v79[v83];
              *unint64_t v89 = vadd_f32(vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v84, v85), vmul_n_f32(*(float32x2_t *)(v84 + 12), v86)), vmul_n_f32(*(float32x2_t *)(v84 + 24), v87)), v82), *(float32x2_t *)&v79[v83]);
              v89[1].f32[0] = v88 + *(float *)&v79[v83 + 8];
              v83 += 12;
            }
            while (v83 != 48);
          }
          char v90 = (float64x2_t *)&v73[64 * v75];
          float64x2_t v91 = v90[1];
          float64x2_t v92 = vmulq_f64(v109, *v90);
          float64x2_t v93 = vmulq_f64(v110, v91);
          if (vaddq_f64(vaddq_f64(vaddq_f64(v92, (float64x2_t)vdupq_laneq_s64((int64x2_t)v92, 1)), v93), (float64x2_t)vdupq_laneq_s64((int64x2_t)v93, 1)).f64[0] < 0.0)float v82 = -v82; {
          double v94 = v82;
          }
          float64x2_t v71 = vaddq_f64(v71, vmulq_n_f64(*v90, v94));
          float64x2_t v78 = vaddq_f64(v78, vmulq_n_f64(v91, v94));
          float64x2_t v80 = vaddq_f64(v80, vmulq_n_f64(v90[2], v94));
          float64x2_t v95 = vmulq_n_f64(v90[3], v94);
          v125[0] = v71;
          v125[1] = v78;
          float64x2_t v81 = vaddq_f64(v81, v95);
          v125[2] = v80;
          float64x2_t v126 = v81;
        }
        if (++v72 == a6) {
          break;
        }
        unint64_t v75 = a5[v72];
        if ((v75 & 0x80000000) != 0 || v74 <= v75)
        {
          BOOL v26 = v72 >= a6;
          goto LABEL_78;
        }
      }
    }
    pxrInternal__aapl__pxrReserved__::GfDualQuatd::Normalize(v125, 1.0e-10);
    for (uint64_t i = 0; i != 48; i += 12)
    {
      if (v117) {
        char v97 = __p[0];
      }
      else {
        char v97 = v122;
      }
      double v111 = *(float *)&v97[i];
      int v98 = &v122[i];
      char v99 = (float *)((char *)__p[0] + i);
      if (!v117) {
        char v99 = (float *)&v122[i];
      }
      double v112 = v99[1];
      *(double *)&uint64_t v113 = v99[2];
      float v100 = pxrInternal__aapl__pxrReserved__::GfDualQuatd::Transform(v125[0].f64, &v111);
      *(float *)&double v101 = v101;
      *(float *)&double v102 = v102;
      *(float *)&v122[i] = v100;
      *((_DWORD *)v98 + 1) = LODWORD(v101);
      *((_DWORD *)v98 + 2) = LODWORD(v102);
    }
    double v111 = v123;
    LODWORD(v112) = v124;
    pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTranslate(v63, (uint64_t)&v111);
    uint64_t v103 = 0;
    float32x2_t v104 = *(float32x2_t *)&v111;
    float v105 = *(float *)&v112;
    uint64_t v106 = (float *)(v63 + 8);
    do
    {
      float v107 = *(float *)&v122[v103 + 8] - v105;
      *((float32x2_t *)v106 - 1) = vsub_f32(*(float32x2_t *)&v122[v103], v104);
      *uint64_t v106 = v107;
      v106 += 4;
      v103 += 12;
    }
    while (v103 != 36);
    BOOL v26 = 1;
    goto LABEL_89;
  }
  if (!a10)
  {
    *(void *)&v125[0].f64[0] = "usdSkel/utils.cpp";
    *(void *)&v125[0].f64[1] = "UsdSkel_SkinTransformLBS";
    *(void *)&v125[1].f64[0] = 2409;
    *(void *)&v125[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLBS("
                                 "const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxr"
                                 "Internal__aapl__pxrReserved__::GfMatrix4f, InfluencesFunint64_t n = pxrInternal__aapl__pxrReserve"
                                 "d__::(anonymous namespace)::_NonInterleavedInfluencesFn]";
    LOBYTE(v125[2].f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v125, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' is null");
    return 0;
  }
  if (a6 == 1)
  {
    *(double *)a9.i64 = fabs(*a7 + -1.0);
    if (*(double *)a9.i64 < 0.000001)
    {
      unint64_t v21 = *a5;
      if ((v21 & 0x80000000) == 0 && a4 > v21)
      {
LABEL_23:
        float64x2_t v22 = *(float64x2_t *)(a2 + 16);
        v125[0] = *(float64x2_t *)a2;
        v125[1] = v22;
        float64x2_t v23 = *(float64x2_t *)(a2 + 48);
        v125[2] = *(float64x2_t *)(a2 + 32);
        float64x2_t v126 = v23;
        pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=((float *)v125, (float *)&a3[64 * v21]);
        float64x2_t v24 = v125[1];
        *(float64x2_t *)a10 = v125[0];
        *(float64x2_t *)(a10 + 16) = v24;
        float64x2_t v25 = v126;
        *(float64x2_t *)(a10 + 32) = v125[2];
        *(float64x2_t *)(a10 + 48) = v25;
        return 1;
      }
      *(void *)&v125[0].f64[0] = "usdSkel/utils.cpp";
      *(void *)&v125[0].f64[1] = "UsdSkel_SkinTransformLBS";
      *(void *)&v125[1].f64[0] = 2424;
      *(void *)&v125[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLB"
                                   "S(const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 ="
                                   " pxrInternal__aapl__pxrReserved__::GfMatrix4f, InfluencesFunint64_t n = pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::_NonInterleavedInfluencesFn]";
      LOBYTE(v125[2].f64[0]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v125, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index 0 (num joints = %zu).", a3, v21, a4);
      return 0;
    }
  }
  unint64_t v27 = 0;
  BOOL v26 = 0;
  a9.i32[0] = *(_DWORD *)(a2 + 56);
  float32x4_t v28 = *(float32x4_t *)(a2 + 4);
  float32x4_t v29 = *(float32x4_t *)(a2 + 24);
  v28.i64[1] = *(void *)(a2 + 16);
  v29.i32[1] = *(_DWORD *)(a2 + 32);
  int32x4_t v30 = *(int32x4_t *)(a2 + 36);
  v29.i64[1] = *(void *)(a2 + 36);
  v30.i64[0] = *(void *)(a2 + 48);
  int32x4_t v31 = vuzp2q_s32(v30, vzip1q_s32(v30, v30));
  float32x4_t v32 = (float32x4_t)v31;
  v32.i32[1] = a9.i32[0];
  v32.i32[3] = v31.i32[0];
  *(float *)v31.i32 = *(float *)v30.i32 + *(float *)a2;
  *(float32x4_t *)((char *)v125 + 4) = vaddq_f32(v32, v28);
  float32x4_t v33 = (float32x4_t)vextq_s8(vextq_s8(a9, a9, 4uLL), (int8x16_t)v30, 0xCuLL);
  v33.i32[3] = v33.i32[0];
  *(float32x4_t *)((char *)&v125[1] + 4) = vaddq_f32(v33, v29);
  *(void *)((char *)v125[2].f64 + 4) = v30.i64[0];
  LODWORD(v125[0].f64[0]) = v31.i32[0];
  HIDWORD(v125[2].f64[1]) = a9.i32[0];
  if (a6 <= 1) {
    uint64_t v34 = 1;
  }
  else {
    uint64_t v34 = a6;
  }
  unint64_t v35 = a6;
  while (1)
  {
    uint64_t v36 = (char *)v125 + 12 * v27;
    double v111 = *(double *)v36;
    LODWORD(v112) = *((_DWORD *)v36 + 2);
    if (v35) {
      break;
    }
    float v40 = 0.0;
    float v39 = 0.0;
    float v38 = 0.0;
LABEL_38:
    *(float *)uint64_t v36 = v38;
    *((float *)v36 + 1) = v39;
    *((float *)v36 + 2) = v40;
    BOOL v26 = v27++ > 2;
    if (v27 == 4)
    {
      *(float64_t *)uint64_t v122 = *(float64_t *)((char *)v125[2].f64 + 4);
      *(_DWORD *)&v122[8] = HIDWORD(v125[2].f64[1]);
      pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTranslate(a10, (uint64_t)v122);
      uint64_t v45 = 0;
      float32x2_t v46 = *(float32x2_t *)v122;
      float v47 = *(float *)&v122[8];
      float v48 = (float *)(a10 + 8);
      do
      {
        float v49 = *(float *)((char *)&v125[0].f64[1] + v45) - v47;
        *((float32x2_t *)v48 - 1) = vsub_f32(*(float32x2_t *)((char *)v125[0].f64 + v45), v46);
        *float v48 = v49;
        v48 += 4;
        v45 += 12;
      }
      while (v45 != 36);
      return 1;
    }
  }
  uint64_t v37 = 0;
  float v38 = 0.0;
  float v39 = 0.0;
  float v40 = 0.0;
  while (1)
  {
    unint64_t v41 = a5[v37];
    if ((v41 & 0x80000000) != 0 || a4 <= v41) {
      break;
    }
    float v42 = a7[v37];
    if (v42 != 0.0)
    {
      float v38 = v38 + (float)(v42 * sub_21701BC38((float32x2_t *)&a3[64 * v41], (float *)&v111).f32[0]);
      float v39 = v39 + (float)(v42 * v43);
      float v40 = v40 + (float)(v42 * v44);
    }
    if (v34 == ++v37)
    {
      unint64_t v35 = a6;
      goto LABEL_38;
    }
  }
  *(void *)uint64_t v122 = "usdSkel/utils.cpp";
  *(void *)&v122[8] = "UsdSkel_SkinTransformLBS";
  *(void *)&v122[16] = 2468;
  *(void *)&v122[24] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLBS(const Ma"
                         "trix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxrInternal__aapl__"
                         "pxrReserved__::GfMatrix4f, InfluencesFunint64_t n = pxrInternal__aapl__pxrReserved__::(anonymous namespac"
                         "e)::_NonInterleavedInfluencesFn]";
  v122[32] = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v122, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", a3, v41, v37, a4);
  return v26;
}

void sub_217023D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  if (a30) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransform(void *a1, float64x2_t *a2, char *a3, unint64_t a4, float *a5, unint64_t a6, uint64_t a7)
{
  uint64_t v131 = *MEMORY[0x263EF8340];
  unsigned int v14 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v14) {
    unsigned int v14 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v14 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    unsigned int v15 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v15) {
      unsigned int v15 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    if ((*a1 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v15 + 4) & 0xFFFFFFFFFFFFFFF8)) {
      return 0;
    }
    if (!a7)
    {
      *(void *)&v124[0].f64[0] = "usdSkel/utils.cpp";
      *(void *)&v124[0].f64[1] = "UsdSkel_SkinTransformDQS";
      *(void *)&v124[1].f64[0] = 2494;
      *(void *)&v124[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQ"
                                   "S(const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 ="
                                   " pxrInternal__aapl__pxrReserved__::GfMatrix4d, InfluencesFunint64_t n = pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::_InterleavedInfluencesFn]";
      LOBYTE(v125.f64[0]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v124, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' is null");
      return 0;
    }
    if (a6 == 1 && fabs(a5[1] + -1.0) < 0.000001)
    {
      uint64_t v16 = (int)*a5;
      if ((v16 & 0x80000000) == 0 && a4 > v16) {
        goto LABEL_18;
      }
      *(void *)&v124[0].f64[0] = "usdSkel/utils.cpp";
      *(void *)&v124[0].f64[1] = "UsdSkel_SkinTransformDQS";
      *(void *)&v124[1].f64[0] = 2509;
      *(void *)&v124[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQ"
                                   "S(const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 ="
                                   " pxrInternal__aapl__pxrReserved__::GfMatrix4d, InfluencesFunint64_t n = pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::_InterleavedInfluencesFn]";
      LOBYTE(v125.f64[0]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v124, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index 0 (num joints = %zu).", a3, v16, a4);
      return 0;
    }
    sub_21702A090(&v117, a4);
    sub_21702A0F4(&v115, a4);
    unsigned __int8 v114 = 0;
    sub_217029E5C((uint64_t)a3, a4, (__n128 *)v117, (v118 - (unsigned char *)v117) >> 6, (uint64_t)v115, 0x8E38E38E38E38E39 * ((v116 - (unsigned char *)v115) >> 2), &v114);
    float v52 = a2[7].f64[0];
    float v53 = a2[1].f64[0];
    float32x2_t v54 = vcvt_f32_f64(a2[6]);
    *(float32x2_t *)uint64_t v119 = vadd_f32(v54, vcvt_f32_f64(*a2));
    *(float32x2_t *)&v119[12] = vadd_f32(v54, vcvt_f32_f64(a2[2]));
    float v55 = a2[3].f64[0];
    *(float *)&v119[8] = v52 + v53;
    *(float *)&v119[20] = v52 + v55;
    float v56 = a2[5].f64[0];
    unsigned int v120 = (const char *)vadd_f32(v54, vcvt_f32_f64(a2[4]));
    float32x2_t v122 = v54;
    float v121 = v52 + v56;
    float v123 = v52;
    float64x2_t v57 = 0uLL;
    if ((int)a6 < 1)
    {
      float64x2_t v65 = 0uLL;
    }
    else
    {
      uint64_t v58 = a6;
      int v59 = a5 + 1;
      int v60 = -1;
      float v61 = -1.0;
      do
      {
        unint64_t v62 = (int)*(v59 - 1);
        if ((v62 & 0x80000000) == 0 && (v118 - (unsigned char *)v117) >> 6 > v62 && (v61 < *v59 || v60 < 0))
        {
          int v60 = (int)*(v59 - 1);
          float v61 = *v59;
        }
        v59 += 2;
        --v58;
      }
      while (v58);
      float64x2_t v65 = 0uLL;
      if ((v60 & 0x80000000) == 0)
      {
        uint64_t v66 = (float64x2_t *)((char *)v117 + 64 * (unint64_t)v60);
        float64x2_t v65 = *v66;
        float64x2_t v57 = v66[1];
      }
    }
    float64x2_t v106 = v65;
    float64x2_t v108 = v57;
    v124[0].f64[0] = 0.0;
    LODWORD(v124[0].f64[1]) = 0;
    sub_217032CC0(__p, 4uLL, (uint64_t *)v124);
    float64x2_t v125 = 0u;
    float64x2_t v126 = 0u;
    memset(v124, 0, sizeof(v124));
    if (a6)
    {
      unint64_t v68 = 0;
      BOOL v25 = 0;
      uint64_t v69 = (char *)v117;
      unint64_t v70 = (v118 - (unsigned char *)v117) >> 6;
      unint64_t v71 = (int)*a5;
      if ((v71 & 0x80000000) != 0 || v70 <= v71)
      {
LABEL_71:
        *(void *)&v109.f64[0] = "usdSkel/utils.cpp";
        *(void *)&v109.f64[1] = "UsdSkel_SkinTransformDQS";
        uint64_t v110 = 2581;
        double v111 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQS(const Matrix4 &, T"
               "fSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMat"
               "rix4d, InfluencesFunint64_t n = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_InterleavedInfluencesFn]";
        char v112 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v109, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v67, v71, v68, v70);
LABEL_82:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v115)
        {
          unsigned __int8 v116 = v115;
          operator delete(v115);
        }
        if (v117)
        {
          uint64_t v118 = v117;
          operator delete(v117);
        }
        return v25;
      }
      unint64_t v68 = 0;
      int v72 = v114;
      uint64_t v73 = (char *)v115;
      float64x2_t v74 = 0uLL;
      float64x2_t v75 = 0uLL;
      int v76 = (char *)__p[0];
      float64x2_t v77 = 0uLL;
      float64x2_t v78 = 0uLL;
      while (1)
      {
        float v79 = a5[2 * v68 + 1];
        if (v79 != 0.0)
        {
          if (v72)
          {
            uint64_t v80 = 0;
            float64x2_t v81 = &v73[36 * v71];
            do
            {
              float v82 = *(float *)&v119[v80];
              float v83 = *(float *)&v119[v80 + 4];
              float v84 = *(float *)&v119[v80 + 8];
              float v85 = v79
                  * (float)((float)((float)(v82 * *((float *)v81 + 2)) + (float)(v83 * *((float *)v81 + 5)))
                          + (float)(v84 * *((float *)v81 + 8)));
              float v86 = (float32x2_t *)&v76[v80];
              *float v86 = vadd_f32(vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v81, v82), vmul_n_f32(*(float32x2_t *)(v81 + 12), v83)), vmul_n_f32(*(float32x2_t *)(v81 + 24), v84)), v79), *(float32x2_t *)&v76[v80]);
              v86[1].f32[0] = v85 + *(float *)&v76[v80 + 8];
              v80 += 12;
            }
            while (v80 != 48);
          }
          float v87 = (float64x2_t *)&v69[64 * v71];
          float64x2_t v88 = v87[1];
          float64x2_t v89 = vmulq_f64(v106, *v87);
          float64x2_t v90 = vmulq_f64(v108, v88);
          if (vaddq_f64(vaddq_f64(vaddq_f64(v89, (float64x2_t)vdupq_laneq_s64((int64x2_t)v89, 1)), v90), (float64x2_t)vdupq_laneq_s64((int64x2_t)v90, 1)).f64[0] < 0.0)float v79 = -v79; {
          double v91 = v79;
          }
          float64x2_t v74 = vaddq_f64(v74, vmulq_n_f64(*v87, v91));
          float64x2_t v75 = vaddq_f64(v75, vmulq_n_f64(v88, v91));
          float64x2_t v77 = vaddq_f64(v77, vmulq_n_f64(v87[2], v91));
          float64x2_t v92 = vmulq_n_f64(v87[3], v91);
          v124[0] = v74;
          v124[1] = v75;
          float64x2_t v78 = vaddq_f64(v78, v92);
          float64x2_t v125 = v77;
          float64x2_t v126 = v78;
        }
        if (++v68 == a6) {
          break;
        }
        unint64_t v71 = (int)a5[2 * v68];
        if ((v71 & 0x80000000) != 0 || v70 <= v71)
        {
          BOOL v25 = v68 >= a6;
          goto LABEL_71;
        }
      }
    }
    pxrInternal__aapl__pxrReserved__::GfDualQuatd::Normalize(v124, 1.0e-10);
    for (uint64_t i = 0; i != 48; i += 12)
    {
      if (v114) {
        double v94 = __p[0];
      }
      else {
        double v94 = v119;
      }
      v109.f64[0] = *(float *)&v94[i];
      float64x2_t v95 = &v119[i];
      unint64_t v96 = (float *)((char *)__p[0] + i);
      if (!v114) {
        unint64_t v96 = (float *)&v119[i];
      }
      v109.f64[1] = v96[1];
      *(double *)&uint64_t v110 = v96[2];
      float v97 = pxrInternal__aapl__pxrReserved__::GfDualQuatd::Transform(v124[0].f64, v109.f64);
      *(float *)&double v98 = v98;
      *(float *)&double v99 = v99;
      *(float *)&v119[i] = v97;
      *((_DWORD *)v95 + 1) = LODWORD(v98);
      *((_DWORD *)v95 + 2) = LODWORD(v99);
    }
    float32x2_t v100 = v122;
    float v101 = v123;
    float64x2_t v109 = vcvtq_f64_f32(v122);
    *(double *)&uint64_t v110 = v123;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate(a7, (uint64_t)&v109);
    uint64_t v102 = 0;
    uint64_t v103 = (double *)(a7 + 16);
    do
    {
      double v104 = (float)(*(float *)&v119[v102 + 8] - v101);
      *((float64x2_t *)v103 - 1) = vcvtq_f64_f32(vsub_f32(*(float32x2_t *)&v119[v102], v100));
      *uint64_t v103 = v104;
      v103 += 4;
      v102 += 12;
    }
    while (v102 != 36);
    BOOL v25 = 1;
    goto LABEL_82;
  }
  if (!a7)
  {
    *(void *)&v124[0].f64[0] = "usdSkel/utils.cpp";
    *(void *)&v124[0].f64[1] = "UsdSkel_SkinTransformLBS";
    *(void *)&v124[1].f64[0] = 2409;
    *(void *)&v124[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLBS("
                                 "const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxr"
                                 "Internal__aapl__pxrReserved__::GfMatrix4d, InfluencesFunint64_t n = pxrInternal__aapl__pxrReserve"
                                 "d__::(anonymous namespace)::_InterleavedInfluencesFn]";
    LOBYTE(v125.f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v124, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' is null");
    return 0;
  }
  if (a6 == 1 && fabs(a5[1] + -1.0) < 0.000001)
  {
    uint64_t v16 = (int)*a5;
    if ((v16 & 0x80000000) == 0 && a4 > v16)
    {
LABEL_18:
      float64x2_t v17 = a2[5];
      float64x2_t v127 = a2[4];
      float64x2_t v128 = v17;
      float64x2_t v18 = a2[7];
      float64x2_t v129 = a2[6];
      float64x2_t v130 = v18;
      float64x2_t v19 = a2[1];
      v124[0] = *a2;
      v124[1] = v19;
      float64x2_t v20 = a2[3];
      float64x2_t v125 = a2[2];
      float64x2_t v126 = v20;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v124[0].f64, (double *)&a3[128 * v16]);
      float64x2_t v21 = v128;
      *(float64x2_t *)(a7 + 64) = v127;
      *(float64x2_t *)(a7 + 80) = v21;
      float64x2_t v22 = v130;
      *(float64x2_t *)(a7 + 96) = v129;
      *(float64x2_t *)(a7 + 112) = v22;
      float64x2_t v23 = v124[1];
      *(float64x2_t *)a7 = v124[0];
      *(float64x2_t *)(a7 + 16) = v23;
      float64x2_t v24 = v126;
      *(float64x2_t *)(a7 + 32) = v125;
      *(float64x2_t *)(a7 + 48) = v24;
      return 1;
    }
    *(void *)&v124[0].f64[0] = "usdSkel/utils.cpp";
    *(void *)&v124[0].f64[1] = "UsdSkel_SkinTransformLBS";
    *(void *)&v124[1].f64[0] = 2424;
    *(void *)&v124[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLBS("
                                 "const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxr"
                                 "Internal__aapl__pxrReserved__::GfMatrix4d, InfluencesFunint64_t n = pxrInternal__aapl__pxrReserve"
                                 "d__::(anonymous namespace)::_InterleavedInfluencesFn]";
    LOBYTE(v125.f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v124, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index 0 (num joints = %zu).", a3, v16, a4);
    return 0;
  }
  uint64_t v107 = a7;
  unint64_t v26 = 0;
  BOOL v25 = 0;
  float v27 = a2[7].f64[0];
  float v28 = a2[1].f64[0];
  float32x2_t v29 = vcvt_f32_f64(a2[6]);
  *(float32x2_t *)&v124[0].f64[0] = vadd_f32(v29, vcvt_f32_f64(*a2));
  *(float32x2_t *)((char *)&v124[0].f64[1] + 4) = vadd_f32(v29, vcvt_f32_f64(a2[2]));
  float v30 = a2[3].f64[0];
  *(float *)&v124[0].f64[1] = v27 + v28;
  *((float *)v124[1].f64 + 1) = v27 + v30;
  float v31 = a2[5].f64[0];
  float v32 = v27 + v31;
  *(float32x2_t *)&v124[1].f64[1] = vadd_f32(v29, vcvt_f32_f64(a2[4]));
  *(float32x2_t *)((char *)v125.f64 + 4) = v29;
  if (a6 <= 1) {
    uint64_t v33 = 1;
  }
  else {
    uint64_t v33 = a6;
  }
  *(float *)v125.f64 = v32;
  *((float *)&v125.f64[1] + 1) = v27;
  uint64_t v34 = a5 + 1;
  unint64_t v35 = a6;
  while (1)
  {
    uint64_t v36 = (char *)v124 + 12 * v26;
    v109.f64[0] = *(float64_t *)v36;
    LODWORD(v109.f64[1]) = *((_DWORD *)v36 + 2);
    if (v35) {
      break;
    }
    float v41 = 0.0;
    float v40 = 0.0;
    float v38 = 0.0;
LABEL_33:
    *(float *)uint64_t v36 = v38;
    *((float *)v36 + 1) = v40;
    *((float *)v36 + 2) = v41;
    BOOL v25 = v26++ > 2;
    if (v26 == 4)
    {
      float32x2_t v47 = *(float32x2_t *)((char *)v125.f64 + 4);
      float v48 = *((float *)&v125.f64[1] + 1);
      *(float64x2_t *)uint64_t v119 = vcvtq_f64_f32(*(float32x2_t *)((char *)v125.f64 + 4));
      *(double *)&v119[16] = *((float *)&v125.f64[1] + 1);
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate(v107, (uint64_t)v119);
      uint64_t v49 = 0;
      int8x16_t v50 = (double *)(v107 + 16);
      do
      {
        double v51 = (float)(*(float *)((char *)&v124[0].f64[1] + v49) - v48);
        *((float64x2_t *)v50 - 1) = vcvtq_f64_f32(vsub_f32(*(float32x2_t *)((char *)v124[0].f64 + v49), v47));
        *int8x16_t v50 = v51;
        v50 += 4;
        v49 += 12;
      }
      while (v49 != 36);
      return 1;
    }
  }
  uint64_t v37 = 0;
  float v38 = 0.0;
  float v39 = v34;
  float v40 = 0.0;
  float v41 = 0.0;
  while (1)
  {
    float v42 = *(v39 - 1);
    uint64_t v43 = (int)v42;
    if ((v43 & 0x80000000) != 0 || a4 <= v43) {
      break;
    }
    float v44 = *v39;
    if (*v39 != 0.0)
    {
      float v38 = v38 + (float)(v44 * sub_21701BAB8((float64x2_t *)&a3[128 * v43], (float *)&v109).f32[0]);
      float v40 = v40 + (float)(v44 * v45);
      float v41 = v41 + (float)(v44 * v46);
    }
    ++v37;
    v39 += 2;
    if (v33 == v37)
    {
      unint64_t v35 = a6;
      goto LABEL_33;
    }
  }
  *(void *)uint64_t v119 = "usdSkel/utils.cpp";
  *(void *)&v119[8] = "UsdSkel_SkinTransformLBS";
  *(void *)&v119[16] = 2468;
  unsigned int v120 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLBS(const Matrix4 &, TfSpan<"
         "const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d, Influ"
         "encesFunint64_t n = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_InterleavedInfluencesFn]";
  LOBYTE(v121) = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v119, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", a3, (int)v42, v37, a4);
  return v25;
}

void sub_217024740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  if (a30) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransform(void *a1, uint64_t a2, char *a3, unint64_t a4, float *a5, unint64_t a6, uint64_t a7, int8x16_t a8)
{
  uint64_t v124 = *MEMORY[0x263EF8340];
  unsigned int v15 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v15) {
    unsigned int v15 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v15 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v16) {
      uint64_t v16 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    if ((*a1 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v16 + 4) & 0xFFFFFFFFFFFFFFF8)) {
      return 0;
    }
    if (!a7)
    {
      *(void *)&v122[0].f64[0] = "usdSkel/utils.cpp";
      *(void *)&v122[0].f64[1] = "UsdSkel_SkinTransformDQS";
      *(void *)&v122[1].f64[0] = 2494;
      *(void *)&v122[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQ"
                                   "S(const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 ="
                                   " pxrInternal__aapl__pxrReserved__::GfMatrix4f, InfluencesFunint64_t n = pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::_InterleavedInfluencesFn]";
      LOBYTE(v122[2].f64[0]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v122, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' is null");
      return 0;
    }
    if (a6 == 1 && fabs(a5[1] + -1.0) < 0.000001)
    {
      uint64_t v17 = (int)*a5;
      if ((v17 & 0x80000000) == 0 && a4 > v17) {
        goto LABEL_18;
      }
      *(void *)&v122[0].f64[0] = "usdSkel/utils.cpp";
      *(void *)&v122[0].f64[1] = "UsdSkel_SkinTransformDQS";
      *(void *)&v122[1].f64[0] = 2509;
      *(void *)&v122[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQ"
                                   "S(const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 ="
                                   " pxrInternal__aapl__pxrReserved__::GfMatrix4f, InfluencesFunint64_t n = pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::_InterleavedInfluencesFn]";
      LOBYTE(v122[2].f64[0]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v122, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index 0 (num joints = %zu).", a3, v17, a4);
      return 0;
    }
    sub_21702A090(&v117, a4);
    sub_21702A0F4(&v115, a4);
    unsigned __int8 v114 = 0;
    sub_21702B044((uint64_t)a3, a4, (__n128 *)v117, (v118 - (unsigned char *)v117) >> 6, (uint64_t)v115, 0x8E38E38E38E38E39 * ((v116 - (unsigned char *)v115) >> 2), &v114);
    v49.i32[0] = *(_DWORD *)(a2 + 56);
    float32x4_t v50 = *(float32x4_t *)(a2 + 4);
    float32x4_t v51 = *(float32x4_t *)(a2 + 24);
    v50.i64[1] = *(void *)(a2 + 16);
    int32x4_t v52 = *(int32x4_t *)(a2 + 36);
    v51.i32[1] = *(_DWORD *)(a2 + 32);
    v51.i64[1] = *(void *)(a2 + 36);
    v52.i64[0] = *(void *)(a2 + 48);
    *(float *)uint64_t v119 = *(float *)v52.i32 + *(float *)a2;
    int32x4_t v53 = vuzp2q_s32(v52, vzip1q_s32(v52, v52));
    float32x4_t v54 = (float32x4_t)v53;
    v54.i32[1] = v49.i32[0];
    v54.i32[3] = v53.i32[0];
    *(float32x4_t *)&v119[4] = vaddq_f32(v54, v50);
    float32x4_t v55 = (float32x4_t)vextq_s8(vextq_s8(v49, v49, 4uLL), (int8x16_t)v52, 0xCuLL);
    v55.i32[3] = v55.i32[0];
    *(float32x4_t *)&v119[20] = vaddq_f32(v55, v51);
    double v120 = *(double *)v52.i64;
    __int32 v121 = v49.i32[0];
    float64x2_t v56 = 0uLL;
    if ((int)a6 < 1)
    {
      float64x2_t v64 = 0uLL;
    }
    else
    {
      uint64_t v57 = a6;
      uint64_t v58 = a5 + 1;
      int v59 = -1;
      float v60 = -1.0;
      do
      {
        unint64_t v61 = (int)*(v58 - 1);
        if ((v61 & 0x80000000) == 0 && (v118 - (unsigned char *)v117) >> 6 > v61 && (v60 < *v58 || v59 < 0))
        {
          int v59 = (int)*(v58 - 1);
          float v60 = *v58;
        }
        v58 += 2;
        --v57;
      }
      while (v57);
      float64x2_t v64 = 0uLL;
      if ((v59 & 0x80000000) == 0)
      {
        float64x2_t v65 = (float64x2_t *)((char *)v117 + 64 * (unint64_t)v59);
        float64x2_t v64 = *v65;
        float64x2_t v56 = v65[1];
      }
    }
    float64x2_t v105 = v64;
    float64x2_t v107 = v56;
    v122[0].f64[0] = 0.0;
    LODWORD(v122[0].f64[1]) = 0;
    sub_217032CC0(__p, 4uLL, (uint64_t *)v122);
    float64x2_t v123 = 0u;
    memset(v122, 0, sizeof(v122));
    if (a6)
    {
      unint64_t v67 = 0;
      BOOL v22 = 0;
      unint64_t v68 = (char *)v117;
      unint64_t v69 = (v118 - (unsigned char *)v117) >> 6;
      unint64_t v70 = (int)*a5;
      if ((v70 & 0x80000000) != 0 || v69 <= v70)
      {
LABEL_71:
        double v108 = COERCE_DOUBLE("usdSkel/utils.cpp");
        double v109 = COERCE_DOUBLE("UsdSkel_SkinTransformDQS");
        uint64_t v110 = 2581;
        double v111 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformDQS(const Matrix4 &, T"
               "fSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxrInternal__aapl__pxrReserved__::GfMat"
               "rix4f, InfluencesFunint64_t n = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_InterleavedInfluencesFn]";
        char v112 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v108, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v66, v70, v67, v69);
LABEL_82:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v115)
        {
          unsigned __int8 v116 = v115;
          operator delete(v115);
        }
        if (v117)
        {
          uint64_t v118 = v117;
          operator delete(v117);
        }
        return v22;
      }
      unint64_t v67 = 0;
      int v71 = v114;
      int v72 = (char *)v115;
      float64x2_t v73 = 0uLL;
      float64x2_t v74 = 0uLL;
      float64x2_t v75 = (char *)__p[0];
      float64x2_t v76 = 0uLL;
      float64x2_t v77 = 0uLL;
      while (1)
      {
        float v78 = a5[2 * v67 + 1];
        if (v78 != 0.0)
        {
          if (v71)
          {
            uint64_t v79 = 0;
            uint64_t v80 = &v72[36 * v70];
            do
            {
              float v81 = *(float *)&v119[v79];
              float v82 = *(float *)&v119[v79 + 4];
              float v83 = *(float *)&v119[v79 + 8];
              float v84 = v78
                  * (float)((float)((float)(v81 * *((float *)v80 + 2)) + (float)(v82 * *((float *)v80 + 5)))
                          + (float)(v83 * *((float *)v80 + 8)));
              float v85 = (float32x2_t *)&v75[v79];
              float32x2_t *v85 = vadd_f32(vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v80, v81), vmul_n_f32(*(float32x2_t *)(v80 + 12), v82)), vmul_n_f32(*(float32x2_t *)(v80 + 24), v83)), v78), *(float32x2_t *)&v75[v79]);
              v85[1].f32[0] = v84 + *(float *)&v75[v79 + 8];
              v79 += 12;
            }
            while (v79 != 48);
          }
          float v86 = (float64x2_t *)&v68[64 * v70];
          float64x2_t v87 = v86[1];
          float64x2_t v88 = vmulq_f64(v105, *v86);
          float64x2_t v89 = vmulq_f64(v107, v87);
          if (vaddq_f64(vaddq_f64(vaddq_f64(v88, (float64x2_t)vdupq_laneq_s64((int64x2_t)v88, 1)), v89), (float64x2_t)vdupq_laneq_s64((int64x2_t)v89, 1)).f64[0] < 0.0)float v78 = -v78; {
          double v90 = v78;
          }
          float64x2_t v73 = vaddq_f64(v73, vmulq_n_f64(*v86, v90));
          float64x2_t v74 = vaddq_f64(v74, vmulq_n_f64(v87, v90));
          float64x2_t v76 = vaddq_f64(v76, vmulq_n_f64(v86[2], v90));
          float64x2_t v91 = vmulq_n_f64(v86[3], v90);
          v122[0] = v73;
          v122[1] = v74;
          float64x2_t v77 = vaddq_f64(v77, v91);
          v122[2] = v76;
          float64x2_t v123 = v77;
        }
        if (++v67 == a6) {
          break;
        }
        unint64_t v70 = (int)a5[2 * v67];
        if ((v70 & 0x80000000) != 0 || v69 <= v70)
        {
          BOOL v22 = v67 >= a6;
          goto LABEL_71;
        }
      }
    }
    pxrInternal__aapl__pxrReserved__::GfDualQuatd::Normalize(v122, 1.0e-10);
    for (uint64_t i = 0; i != 48; i += 12)
    {
      if (v114) {
        float64x2_t v93 = __p[0];
      }
      else {
        float64x2_t v93 = v119;
      }
      double v108 = *(float *)&v93[i];
      double v94 = &v119[i];
      float64x2_t v95 = (float *)((char *)__p[0] + i);
      if (!v114) {
        float64x2_t v95 = (float *)&v119[i];
      }
      double v109 = v95[1];
      *(double *)&uint64_t v110 = v95[2];
      float v96 = pxrInternal__aapl__pxrReserved__::GfDualQuatd::Transform(v122[0].f64, &v108);
      *(float *)&double v97 = v97;
      *(float *)&double v98 = v98;
      *(float *)&v119[i] = v96;
      *((_DWORD *)v94 + 1) = LODWORD(v97);
      *((_DWORD *)v94 + 2) = LODWORD(v98);
    }
    double v108 = v120;
    LODWORD(v109) = v121;
    pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTranslate(a7, (uint64_t)&v108);
    uint64_t v99 = 0;
    float32x2_t v100 = *(float32x2_t *)&v108;
    float v101 = *(float *)&v109;
    uint64_t v102 = (float *)(a7 + 8);
    do
    {
      float v103 = *(float *)&v119[v99 + 8] - v101;
      *((float32x2_t *)v102 - 1) = vsub_f32(*(float32x2_t *)&v119[v99], v100);
      *uint64_t v102 = v103;
      v102 += 4;
      v99 += 12;
    }
    while (v99 != 36);
    BOOL v22 = 1;
    goto LABEL_82;
  }
  if (!a7)
  {
    *(void *)&v122[0].f64[0] = "usdSkel/utils.cpp";
    *(void *)&v122[0].f64[1] = "UsdSkel_SkinTransformLBS";
    *(void *)&v122[1].f64[0] = 2409;
    *(void *)&v122[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLBS("
                                 "const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxr"
                                 "Internal__aapl__pxrReserved__::GfMatrix4f, InfluencesFunint64_t n = pxrInternal__aapl__pxrReserve"
                                 "d__::(anonymous namespace)::_InterleavedInfluencesFn]";
    LOBYTE(v122[2].f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v122, 1, (pxrInternal__aapl__pxrReserved__ *)"'xform' is null");
    return 0;
  }
  if (a6 == 1)
  {
    *(double *)a8.i64 = fabs(a5[1] + -1.0);
    if (*(double *)a8.i64 < 0.000001)
    {
      uint64_t v17 = (int)*a5;
      if ((v17 & 0x80000000) == 0 && a4 > v17)
      {
LABEL_18:
        float64x2_t v18 = *(float64x2_t *)(a2 + 16);
        v122[0] = *(float64x2_t *)a2;
        v122[1] = v18;
        float64x2_t v19 = *(float64x2_t *)(a2 + 48);
        v122[2] = *(float64x2_t *)(a2 + 32);
        float64x2_t v123 = v19;
        pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=((float *)v122, (float *)&a3[64 * v17]);
        float64x2_t v20 = v122[1];
        *(float64x2_t *)a7 = v122[0];
        *(float64x2_t *)(a7 + 16) = v20;
        float64x2_t v21 = v123;
        *(float64x2_t *)(a7 + 32) = v122[2];
        *(float64x2_t *)(a7 + 48) = v21;
        return 1;
      }
      *(void *)&v122[0].f64[0] = "usdSkel/utils.cpp";
      *(void *)&v122[0].f64[1] = "UsdSkel_SkinTransformLBS";
      *(void *)&v122[1].f64[0] = 2424;
      *(void *)&v122[1].f64[1] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLB"
                                   "S(const Matrix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 ="
                                   " pxrInternal__aapl__pxrReserved__::GfMatrix4f, InfluencesFunint64_t n = pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::_InterleavedInfluencesFn]";
      LOBYTE(v122[2].f64[0]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v122, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index 0 (num joints = %zu).", a3, v17, a4);
      return 0;
    }
  }
  uint64_t v106 = a7;
  unint64_t v23 = 0;
  BOOL v22 = 0;
  a8.i32[0] = *(_DWORD *)(a2 + 56);
  float32x4_t v24 = *(float32x4_t *)(a2 + 4);
  float32x4_t v25 = *(float32x4_t *)(a2 + 24);
  v24.i64[1] = *(void *)(a2 + 16);
  int32x4_t v26 = *(int32x4_t *)(a2 + 36);
  v25.i32[1] = *(_DWORD *)(a2 + 32);
  v25.i64[1] = *(void *)(a2 + 36);
  v26.i64[0] = *(void *)(a2 + 48);
  int32x4_t v27 = vuzp2q_s32(v26, vzip1q_s32(v26, v26));
  float32x4_t v28 = (float32x4_t)v27;
  v28.i32[1] = a8.i32[0];
  v28.i32[3] = v27.i32[0];
  *(float *)v27.i32 = *(float *)v26.i32 + *(float *)a2;
  *(float32x4_t *)((char *)v122 + 4) = vaddq_f32(v28, v24);
  float32x4_t v29 = (float32x4_t)vextq_s8(vextq_s8(a8, a8, 4uLL), (int8x16_t)v26, 0xCuLL);
  v29.i32[3] = v29.i32[0];
  *(float32x4_t *)((char *)&v122[1] + 4) = vaddq_f32(v29, v25);
  *(void *)((char *)v122[2].f64 + 4) = v26.i64[0];
  LODWORD(v122[0].f64[0]) = v27.i32[0];
  HIDWORD(v122[2].f64[1]) = a8.i32[0];
  if (a6 <= 1) {
    uint64_t v30 = 1;
  }
  else {
    uint64_t v30 = a6;
  }
  float v31 = a5 + 1;
  unint64_t v32 = a6;
  while (1)
  {
    uint64_t v33 = (char *)v122 + 12 * v23;
    double v108 = *(double *)v33;
    LODWORD(v109) = *((_DWORD *)v33 + 2);
    if (v32) {
      break;
    }
    float v38 = 0.0;
    float v37 = 0.0;
    float v35 = 0.0;
LABEL_33:
    *(float *)uint64_t v33 = v35;
    *((float *)v33 + 1) = v37;
    *((float *)v33 + 2) = v38;
    BOOL v22 = v23++ > 2;
    if (v23 == 4)
    {
      *(float64_t *)uint64_t v119 = *(float64_t *)((char *)v122[2].f64 + 4);
      *(_DWORD *)&v119[8] = HIDWORD(v122[2].f64[1]);
      pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTranslate(v106, (uint64_t)v119);
      uint64_t v44 = 0;
      float32x2_t v45 = *(float32x2_t *)v119;
      float v46 = *(float *)&v119[8];
      float32x2_t v47 = (float *)(v106 + 8);
      do
      {
        float v48 = *(float *)((char *)&v122[0].f64[1] + v44) - v46;
        *((float32x2_t *)v47 - 1) = vsub_f32(*(float32x2_t *)((char *)v122[0].f64 + v44), v45);
        *float32x2_t v47 = v48;
        v47 += 4;
        v44 += 12;
      }
      while (v44 != 36);
      return 1;
    }
  }
  uint64_t v34 = 0;
  float v35 = 0.0;
  uint64_t v36 = v31;
  float v37 = 0.0;
  float v38 = 0.0;
  while (1)
  {
    float v39 = *(v36 - 1);
    uint64_t v40 = (int)v39;
    if ((v40 & 0x80000000) != 0 || a4 <= v40) {
      break;
    }
    float v41 = *v36;
    if (*v36 != 0.0)
    {
      float v35 = v35 + (float)(v41 * sub_21701BC38((float32x2_t *)&a3[64 * v40], (float *)&v108).f32[0]);
      float v37 = v37 + (float)(v41 * v42);
      float v38 = v38 + (float)(v41 * v43);
    }
    ++v34;
    v36 += 2;
    if (v30 == v34)
    {
      unint64_t v32 = a6;
      goto LABEL_33;
    }
  }
  *(void *)uint64_t v119 = "usdSkel/utils.cpp";
  *(void *)&v119[8] = "UsdSkel_SkinTransformLBS";
  *(void *)&v119[16] = 2468;
  *(void *)&unsigned char v119[24] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_SkinTransformLBS(const Ma"
                         "trix4 &, TfSpan<const Matrix4>, const InfluencesFn &, Matrix4 *) [Matrix4 = pxrInternal__aapl__"
                         "pxrReserved__::GfMatrix4f, InfluencesFunint64_t n = pxrInternal__aapl__pxrReserved__::(anonymous namespac"
                         "e)::_InterleavedInfluencesFn]";
  v119[32] = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v119, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", a3, (int)v39, v34, a4);
  return v22;
}

void sub_2170250D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  if (a30) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransform(pxrInternal__aapl__pxrReserved__ *this, float64x2_t *a2, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a3, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a4, unsigned int *a5, float *a6, const float *a7, uint64_t a8, pxrInternal__aapl__pxrReserved__::GfMatrix4d *a9)
{
  return sub_21702294C(this, a2, (char *)a3, (unint64_t)a4, a5, (unint64_t)a7, a6, (uint64_t)a7, a8);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransformLBS(float64x2_t *a1, char *a2, unint64_t a3, unsigned int *a4, unint64_t a5, float *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v16) {
    uint64_t v16 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  return sub_21702294C((void *)v16 + 3, a1, a2, a3, a4, a5, a6, a7, a8);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransformLBS(uint64_t a1, char *a2, unint64_t a3, unsigned int *a4, unint64_t a5, float *a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v17) {
    uint64_t v17 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransform((void *)v17 + 3, a1, a2, a3, a4, a5, a6, a7, a9, a8);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransformLBS(float64x2_t *a1, char *a2, unint64_t a3, float *a4, unint64_t a5, uint64_t a6)
{
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v12) {
    uint64_t v12 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  uint64_t v13 = (void *)((char *)v12 + 24);

  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransform(v13, a1, a2, a3, a4, a5, a6);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransformLBS(uint64_t a1, char *a2, unint64_t a3, float *a4, unint64_t a5, uint64_t a6, int8x16_t a7)
{
  uint64_t v13 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v13) {
    uint64_t v13 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  unsigned int v14 = (void *)((char *)v13 + 24);

  return pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransform(v14, a1, a2, a3, a4, a5, a6, a7);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelSkinTransformLBS(float64x2_t *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a3, unsigned int *a4, float *a5, const float *a6, uint64_t a7, pxrInternal__aapl__pxrReserved__::GfMatrix4d *a8)
{
  unsigned int v15 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  if (!v15) {
    unsigned int v15 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
  }
  return sub_21702294C((void *)v15 + 3, this, (char *)a2, (unint64_t)a3, a4, (unint64_t)a6, a5, (uint64_t)a6, a7);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSkelApplyBlendShape(pxrInternal__aapl__pxrReserved__ *a1, unint64_t a2, char *a3, uint64_t a4, tbb::task_group_context *a5, tbb::task_group_context *a6, float a7)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (fabsf(a7) < 0.000001) {
    return 1;
  }
  if (!a4)
  {
    if ((tbb::task_group_context *)a2 == a6)
    {
      float32x4_t v29 = a1;
      unint64_t v30 = a2;
      int32x4_t v27 = a5;
      unint64_t v28 = a2;
      *(float *)&float v31 = a7;
      float64x2_t v19 = &v27;
      float64x2_t v20 = &v29;
      float64x2_t v21 = &v31;
      if (a2 > 0x3E7 && pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
      {
        LODWORD(v32) = 0;
        uint64_t v37 = 65539;
        int v38 = 55;
        tbb::task_group_context::init((uint64_t)&v32, v9, v10, v11);
        v26[0] = (tbb::task_group_context *)&v32;
        uint64_t v12 = tbb::internal::allocate_root_with_context_proxy::allocate(v26, 0x38uLL);
        *(unsigned char *)(v12 - 11) = 1;
        *(void *)uint64_t v12 = &unk_26C76FB18;
        *(void *)(v12 + 8) = a2;
        *(_OWORD *)(v12 + 16) = xmmword_2174A9840;
        *(void *)(v12 + 32) = &v19;
        unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v12);
        *(_DWORD *)(v12 + 48) = 0;
        *(unsigned char *)(v12 + 52) = 5;
        *(void *)(v12 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v12 - 40) + 16))(*(void *)(v12 - 40), v12, v12 - 8);
        tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v32);
      }
      else
      {
        sub_217025820(a2, (uint64_t)&v19);
      }
      return 1;
    }
    unint64_t v32 = "usdSkel/utils.cpp";
    uint64_t v33 = "UsdSkelApplyBlendShape";
    uint64_t v34 = 2879;
    float v35 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelApplyBlendShape(const float, const TfSpan<const GfVec3f>, const "
          "TfSpan<const int>, TfSpan<GfVec3f>)";
    char v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__ *)"Size of non-indexed offsets [%zu] != size of points [%zu]", a3, a2, a6);
    return 0;
  }
  if (a2 != a4)
  {
    unint64_t v32 = "usdSkel/utils.cpp";
    uint64_t v33 = "UsdSkelApplyBlendShape";
    uint64_t v34 = 2891;
    float v35 = "BOOL pxrInternal__aapl__pxrReserved__::UsdSkelApplyBlendShape(const float, const TfSpan<const GfVec3f>, const "
          "TfSpan<const int>, TfSpan<GfVec3f>)";
    char v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__ *)"Size of indexed offsets [%zu] != size of indices [%zu]", a3, a2, a4);
    return 0;
  }
  float32x4_t v29 = a1;
  unint64_t v30 = a2;
  int32x4_t v27 = a3;
  unint64_t v28 = a2;
  v26[0] = a5;
  v26[1] = a6;
  float v25 = a7;
  unsigned __int8 v24 = 0;
  float64x2_t v19 = &v27;
  float64x2_t v20 = v26;
  float64x2_t v21 = (char ***)&v29;
  BOOL v22 = &v25;
  unint64_t v23 = &v24;
  if (a2 > 0x3E7 && pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
  {
    LODWORD(v32) = 0;
    uint64_t v37 = 65539;
    int v38 = 55;
    tbb::task_group_context::init((uint64_t)&v32, v14, (uint64_t)a3, v15);
    float v31 = &v32;
    uint64_t v16 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v31, 0x38uLL);
    *(unsigned char *)(v16 - 11) = 1;
    *(void *)uint64_t v16 = &unk_26C76FB60;
    *(void *)(v16 + 8) = a2;
    *(_OWORD *)(v16 + 16) = xmmword_2174A9840;
    *(void *)(v16 + 32) = &v19;
    unint64_t v17 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v16);
    *(_DWORD *)(v16 + 48) = 0;
    *(unsigned char *)(v16 + 52) = 5;
    *(void *)(v16 + 40) = (v17 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v16 - 40) + 16))(*(void *)(v16 - 40), v16, v16 - 8);
    tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v32);
  }
  else
  {
    sub_217025D24(a2, (uint64_t)&v19, a3);
  }
  unsigned __int8 v18 = atomic_load(&v24);
  return (v18 & 1) == 0;
}

void sub_2170257C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a17, v27);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_217025820(uint64_t result, uint64_t a2)
{
  if (result)
  {
    float v2 = *(float **)(a2 + 16);
    uint64_t v3 = (float *)(**(void **)a2 + 8);
    uint64_t v4 = (float *)(**(void **)(a2 + 8) + 8);
    do
    {
      float v5 = *v2 * *v4;
      *((float32x2_t *)v3 - 1) = vadd_f32(vmul_n_f32(*(float32x2_t *)(v4 - 2), *v2), *(float32x2_t *)(v3 - 2));
      *uint64_t v3 = v5 + *v3;
      v3 += 3;
      v4 += 3;
      --result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_217025880(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  uint64_t v4 = (long long *)((char *)this + 8);
  unint64_t v5 = *((void *)this + 3);
  unint64_t v6 = *((void *)this + 1) - *((void *)this + 2);
  if (v5 < v6)
  {
    unint64_t v7 = *((void *)this + 5);
    if (v7 > 1) {
      goto LABEL_12;
    }
    if (v7 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        int v8 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(void *)int v8 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v8[8] = 0;
        *((void *)this - 4) = v8;
        *((void *)v8 - 3) = 2;
        uint64_t v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(unsigned char *)(v9 - 11) = 1;
        *(void *)uint64_t v9 = &unk_26C76FB18;
        *(void *)(v9 + 8) = *((void *)this + 1);
        uint64_t v10 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v10;
        *(void *)(v9 + 16) = v10;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v11 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v11;
        *(void *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(unsigned char *)(v9 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v9 - 40))();
        unint64_t v5 = *((void *)this + 3);
        unint64_t v6 = *((void *)this + 1) - *((void *)this + 2);
        if (v5 >= v6) {
          break;
        }
        unint64_t v12 = *((void *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)float v25 = 0x10000;
    long long v26 = *v4;
    uint64_t v27 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v25, *((unsigned __int8 *)this + 52));
      char v13 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if (v13)
      {
        unsigned __int8 v15 = *((unsigned char *)this + 52) + 1;
        *((unsigned char *)this + 52) = v15;
        unsigned __int8 v16 = v25[2];
        if (v25[2] >= 2u)
        {
          unsigned int v17 = v25[1];
          unsigned __int8 v18 = v25[v25[1] + 3];
          float64x2_t v19 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
          *(v19 - 11) = 1;
          *(void *)float64x2_t v19 = &unk_26C751420;
          __dmb(0xBu);
          long long v19[8] = 0;
          *((void *)this - 4) = v19;
          *((void *)v19 - 3) = 2;
          uint64_t v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
          float64x2_t v21 = (char *)&v26 + 24 * v17;
          *(unsigned char *)(v20 - 11) = 1;
          *(void *)uint64_t v20 = &unk_26C76FB18;
          long long v22 = *(_OWORD *)v21;
          *(void *)(v20 + 24) = *((void *)v21 + 2);
          *(_OWORD *)(v20 + 8) = v22;
          *(void *)(v20 + 32) = *((void *)this + 4);
          uint64_t v23 = *((void *)this + 5) >> 1;
          *((void *)this + 5) = v23;
          *(void *)(v20 + 40) = v23;
          *(_DWORD *)(v20 + 48) = 2;
          *(unsigned char *)(v20 + 52) = *((unsigned char *)this + 52) - v18;
          (***(void (****)(void))(v20 - 40))();
          unsigned __int8 v16 = --v25[2];
          v25[1] = (v25[1] + 1) & 7;
          goto LABEL_27;
        }
        unsigned int v14 = v25[0];
        if (v25[v25[0] + 3] < v15
          && *((void *)&v26 + 3 * v25[0] + 2) < *((void *)&v26 + 3 * v25[0]) - *((void *)&v26 + 3 * v25[0] + 1))
        {
          goto LABEL_27;
        }
      }
      else
      {
        unsigned int v14 = v25[0];
      }
      sub_217025CB4((uint64_t)this, (void *)&v26 + 3 * v14);
      unsigned __int8 v16 = --v25[2];
      v25[0] = (v25[0] - 1) & 7;
LABEL_27:
      if (!v16 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
  }
  sub_217025CB4((uint64_t)this, (void *)this + 1);
  return 0;
}

float sub_217025CB4(uint64_t a1, void *a2)
{
  unint64_t v2 = a2[1];
  unint64_t v3 = *a2 - v2;
  if (*a2 > v2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    unint64_t v5 = *(void **)v4;
    uint64_t v6 = **(void **)(v4 + 8);
    unint64_t v7 = *(float **)(v4 + 16);
    uint64_t v8 = 12 * v2 + 8;
    uint64_t v9 = (float *)(*v5 + v8);
    uint64_t v10 = (float *)(v6 + v8);
    do
    {
      float v11 = *v7 * *v10;
      *((float32x2_t *)v9 - 1) = vadd_f32(vmul_n_f32(*(float32x2_t *)(v10 - 2), *v7), *(float32x2_t *)(v9 - 2));
      float result = v11 + *v9;
      *uint64_t v9 = result;
      v9 += 3;
      v10 += 3;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_217025D24(uint64_t a1, uint64_t a2, char *a3)
{
  if (a1)
  {
    uint64_t v4 = 0;
    unint64_t v5 = *(void **)(a2 + 8);
    uint64_t v6 = **(unsigned int ***)a2;
    unint64_t v7 = *(void **)(a2 + 16);
    uint64_t v8 = *(float **)(a2 + 24);
    while (1)
    {
      unsigned int v10 = *v6++;
      unint64_t v9 = v10;
      if ((v10 & 0x80000000) != 0 || v5[1] <= v9) {
        break;
      }
      float v11 = (float32x2_t *)(*v7 + v4);
      float v12 = *v8 * v11[1].f32[0];
      char v13 = (float32x2_t *)(*v5 + 12 * v9);
      *char v13 = vadd_f32(vmul_n_f32(*v11, *v8), *v13);
      v13[1].f32[0] = v12 + v13[1].f32[0];
      v4 += 12;
      if (!--a1) {
        return;
      }
    }
    v14[0] = "usdSkel/utils.cpp";
    v14[1] = "operator()";
    v14[2] = 2829;
    void v14[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ApplyIndexedBlendShape(const float, c"
             "onst TfSpan<const GfVec3f>, const TfSpan<const int>, TfSpan<GfVec3f>)::(anonymous class)::operator()(size_t, size_t) const";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v14, (pxrInternal__aapl__pxrReserved__ *)"Out of range point index %d (num points = %zu).", a3, v9, *(void *)(*(void *)(a2 + 8) + 8));
    atomic_store(1u, *(unsigned __int8 **)(a2 + 32));
  }
}

uint64_t sub_217025E20(tbb::internal::allocate_continuation_proxy *this, uint64_t a2, char *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v4 = *((void *)this - 4);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v4 + 8) = 1;
        unsigned int v5 = *((unsigned __int8 *)this + 52);
        if (v5 <= 1) {
          LOBYTE(v5) = 1;
        }
        *((unsigned char *)this + 52) = v5 + 1;
      }
    }
  }
  uint64_t v6 = (long long *)((char *)this + 8);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = *((void *)this + 1) - *((void *)this + 2);
  if (v7 < v8)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        unsigned int v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)unsigned int v10 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C76FB60;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v7 = *((void *)this + 3);
        unint64_t v8 = *((void *)this + 1) - *((void *)this + 2);
        if (v7 >= v8) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)uint64_t v28 = 0x10000;
    long long v29 = *v6;
    uint64_t v30 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v28, *((unsigned __int8 *)this + 52));
      char v16 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v16 & 1) == 0) {
        break;
      }
      unsigned __int8 v19 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v19;
      unsigned __int8 v18 = v28[2];
      if (v28[2] < 2u)
      {
        unsigned int v17 = v28[0];
        if (v28[v28[0] + 3] < v19
          && *((void *)&v29 + 3 * v28[0] + 2) < *((void *)&v29 + 3 * v28[0]) - *((void *)&v29 + 3 * v28[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v20 = v28[1];
      unsigned __int8 v21 = v28[v28[1] + 3];
      long long v22 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v22 - 11) = 1;
      *(void *)long long v22 = &unk_26C751420;
      __dmb(0xBu);
      v22[8] = 0;
      *((void *)this - 4) = v22;
      *((void *)v22 - 3) = 2;
      uint64_t v23 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v22, 0x38uLL);
      unsigned __int8 v24 = (char *)&v29 + 24 * v20;
      *(unsigned char *)(v23 - 11) = 1;
      *(void *)uint64_t v23 = &unk_26C76FB60;
      long long v25 = *(_OWORD *)v24;
      *(void *)(v23 + 24) = *((void *)v24 + 2);
      *(_OWORD *)(v23 + 8) = v25;
      *(void *)(v23 + 32) = *((void *)this + 4);
      uint64_t v26 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v26;
      *(void *)(v23 + 40) = v26;
      *(_DWORD *)(v23 + 48) = 2;
      *(unsigned char *)(v23 + 52) = *((unsigned char *)this + 52) - v21;
      (***(void (****)(void))(v23 - 40))();
      unsigned __int8 v18 = --v28[2];
      v28[1] = (v28[1] + 1) & 7;
LABEL_27:
      if (!v18 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v17 = v28[0];
LABEL_22:
    sub_217026254((uint64_t)this, (void *)&v29 + 3 * v17, v15);
    unsigned __int8 v18 = --v28[2];
    v28[0] = (v28[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_217026254((uint64_t)this, (void *)this + 1, a3);
  return 0;
}

void sub_217026254(uint64_t a1, void *a2, char *a3)
{
  unint64_t v3 = a2[1];
  unint64_t v4 = *a2 - v3;
  if (*a2 > v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void **)(v5 + 8);
    unint64_t v7 = v6[1];
    uint64_t v8 = 12 * v3;
    unint64_t v9 = (unsigned int *)(**(void **)v5 + 4 * v3);
    while (1)
    {
      unsigned int v11 = *v9++;
      unint64_t v10 = v11;
      if ((v11 & 0x80000000) != 0 || v7 <= v10) {
        break;
      }
      uint64_t v12 = (float32x2_t *)(**(void **)(v5 + 16) + v8);
      float v13 = **(float **)(v5 + 24);
      float v14 = v13 * v12[1].f32[0];
      char v15 = (float32x2_t *)(*v6 + 12 * v10);
      *char v15 = vadd_f32(vmul_n_f32(*v12, v13), *v15);
      v15[1].f32[0] = v14 + v15[1].f32[0];
      v8 += 12;
      if (!--v4) {
        return;
      }
    }
    v16[0] = "usdSkel/utils.cpp";
    v16[1] = "operator()";
    void v16[2] = 2829;
    v16[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_ApplyIndexedBlendShape(const float, c"
             "onst TfSpan<const GfVec3f>, const TfSpan<const int>, TfSpan<GfVec3f>)::(anonymous class)::operator()(size_t, size_t) const";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v16, (pxrInternal__aapl__pxrReserved__ *)"Out of range point index %d (num points = %zu).", a3, v10, v7);
    atomic_store(1u, *(unsigned __int8 **)(v5 + 32));
  }
}

void *sub_21702634C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216F36A6C(a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, a2 << 7);
    a1[1] = &v4[128 * a2];
  }
  return a1;
}

void sub_2170263A8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170263CC(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  unint64_t v4 = (long long *)((char *)this + 8);
  unint64_t v5 = *((void *)this + 3);
  unint64_t v6 = *((void *)this + 1) - *((void *)this + 2);
  if (v5 < v6)
  {
    unint64_t v7 = *((void *)this + 5);
    if (v7 > 1) {
      goto LABEL_12;
    }
    if (v7 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v8 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(void *)uint64_t v8 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v8[8] = 0;
        *((void *)this - 4) = v8;
        *((void *)v8 - 3) = 2;
        uint64_t v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(unsigned char *)(v9 - 11) = 1;
        *(void *)uint64_t v9 = &unk_26C76FBA8;
        *(void *)(v9 + 8) = *((void *)this + 1);
        uint64_t v10 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v10;
        *(void *)(v9 + 16) = v10;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v11 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v11;
        *(void *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(unsigned char *)(v9 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v9 - 40))();
        unint64_t v5 = *((void *)this + 3);
        unint64_t v6 = *((void *)this + 1) - *((void *)this + 2);
        if (v5 >= v6) {
          break;
        }
        unint64_t v12 = *((void *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)long long v25 = 0x10000;
    long long v26 = *v4;
    uint64_t v27 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v25, *((unsigned __int8 *)this + 52));
      char v13 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0) {
        break;
      }
      unsigned __int8 v16 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v16;
      unsigned __int8 v15 = v25[2];
      if (v25[2] < 2u)
      {
        unsigned int v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((void *)&v26 + 3 * v25[0] + 2) < *((void *)&v26 + 3 * v25[0]) - *((void *)&v26 + 3 * v25[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v17 = v25[1];
      unsigned __int8 v18 = v25[v25[1] + 3];
      unsigned __int8 v19 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(void *)unsigned __int8 v19 = &unk_26C751420;
      __dmb(0xBu);
      long long v19[8] = 0;
      *((void *)this - 4) = v19;
      *((void *)v19 - 3) = 2;
      uint64_t v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      unsigned __int8 v21 = (char *)&v26 + 24 * v17;
      *(unsigned char *)(v20 - 11) = 1;
      *(void *)uint64_t v20 = &unk_26C76FBA8;
      long long v22 = *(_OWORD *)v21;
      *(void *)(v20 + 24) = *((void *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(void *)(v20 + 32) = *((void *)this + 4);
      uint64_t v23 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v23;
      *(void *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(unsigned char *)(v20 + 52) = *((unsigned char *)this + 52) - v18;
      (***(void (****)(void))(v20 - 40))();
      unsigned __int8 v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v14 = v25[0];
LABEL_22:
    sub_217026800((uint64_t)this, (void *)&v26 + 3 * v14);
    unsigned __int8 v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_217026800((uint64_t)this, (void *)this + 1);
  return 0;
}

__n128 sub_217026800(uint64_t a1, void *a2)
{
  unint64_t v2 = a2[1];
  unint64_t v3 = *a2 - v2;
  if (*a2 > v2)
  {
    unint64_t v4 = *(void ***)(a1 + 32);
    uint64_t v5 = v2 << 7;
    do
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)(*v4[1] + v5), 0, 0.0, (uint64_t)v13);
      uint64_t v6 = **v4 + v5;
      long long v7 = v13[7];
      long long v9 = v13[4];
      long long v8 = v13[5];
      *(_OWORD *)(v6 + 96) = v13[6];
      *(_OWORD *)(v6 + 112) = v7;
      *(_OWORD *)(v6 + 64) = v9;
      *(_OWORD *)(v6 + 80) = v8;
      __n128 result = (__n128)v13[0];
      long long v11 = v13[1];
      long long v12 = v13[3];
      *(_OWORD *)(v6 + 32) = v13[2];
      *(_OWORD *)(v6 + 48) = v12;
      *(__n128 *)uint64_t v6 = result;
      *(_OWORD *)(v6 + 16) = v11;
      v5 += 128;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *sub_217026894(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2169B75D8(a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, a2 << 6);
    a1[1] = &v4[64 * a2];
  }
  return a1;
}

void sub_2170268F0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217026914(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  unint64_t v4 = (long long *)((char *)this + 8);
  unint64_t v5 = *((void *)this + 3);
  unint64_t v6 = *((void *)this + 1) - *((void *)this + 2);
  if (v5 < v6)
  {
    unint64_t v7 = *((void *)this + 5);
    if (v7 > 1) {
      goto LABEL_12;
    }
    if (v7 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        long long v8 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(void *)long long v8 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v8[8] = 0;
        *((void *)this - 4) = v8;
        *((void *)v8 - 3) = 2;
        uint64_t v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(unsigned char *)(v9 - 11) = 1;
        *(void *)uint64_t v9 = &unk_26C76FBF0;
        *(void *)(v9 + 8) = *((void *)this + 1);
        uint64_t v10 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v10;
        *(void *)(v9 + 16) = v10;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v11 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v11;
        *(void *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(unsigned char *)(v9 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v9 - 40))();
        unint64_t v5 = *((void *)this + 3);
        unint64_t v6 = *((void *)this + 1) - *((void *)this + 2);
        if (v5 >= v6) {
          break;
        }
        unint64_t v12 = *((void *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)long long v25 = 0x10000;
    long long v26 = *v4;
    uint64_t v27 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v25, *((unsigned __int8 *)this + 52));
      char v13 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0) {
        break;
      }
      unsigned __int8 v16 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v16;
      unsigned __int8 v15 = v25[2];
      if (v25[2] < 2u)
      {
        unsigned int v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((void *)&v26 + 3 * v25[0] + 2) < *((void *)&v26 + 3 * v25[0]) - *((void *)&v26 + 3 * v25[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v17 = v25[1];
      unsigned __int8 v18 = v25[v25[1] + 3];
      unsigned __int8 v19 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(void *)unsigned __int8 v19 = &unk_26C751420;
      __dmb(0xBu);
      long long v19[8] = 0;
      *((void *)this - 4) = v19;
      *((void *)v19 - 3) = 2;
      uint64_t v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      unsigned __int8 v21 = (char *)&v26 + 24 * v17;
      *(unsigned char *)(v20 - 11) = 1;
      *(void *)uint64_t v20 = &unk_26C76FBF0;
      long long v22 = *(_OWORD *)v21;
      *(void *)(v20 + 24) = *((void *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(void *)(v20 + 32) = *((void *)this + 4);
      uint64_t v23 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v23;
      *(void *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(unsigned char *)(v20 + 52) = *((unsigned char *)this + 52) - v18;
      (***(void (****)(void))(v20 - 40))();
      unsigned __int8 v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v14 = v25[0];
LABEL_22:
    sub_217026D48((uint64_t)this, (void *)&v26 + 3 * v14);
    unsigned __int8 v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_217026D48((uint64_t)this, (void *)this + 1);
  return 0;
}

__n128 sub_217026D48(uint64_t a1, void *a2)
{
  unint64_t v2 = a2[1];
  unint64_t v3 = *a2 - v2;
  if (*a2 > v2)
  {
    unint64_t v4 = *(void ***)(a1 + 32);
    uint64_t v5 = v2 << 6;
    do
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix4f::GetInverse((float *)(*v4[1] + v5), 0, 0.0, (uint64_t)v10);
      uint64_t v6 = **v4 + v5;
      __n128 result = (__n128)v10[0];
      long long v8 = v10[1];
      long long v9 = v10[3];
      *(_OWORD *)(v6 + 32) = v10[2];
      *(_OWORD *)(v6 + 48) = v9;
      *(__n128 *)uint64_t v6 = result;
      *(_OWORD *)(v6 + 16) = v8;
      v5 += 64;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_217026DCC(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    while (sub_21701B074(**(void **)a2 + v4, (float32x2_t *)(**(void **)(a2 + 8) + v5), (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v18, (_WORD *)(**(void **)(a2 + 16) + v6)))
    {
      v13.n128_u64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationQuat((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v18);
      v13.n128_u64[1] = v10;
      uint64_t v14 = v11;
      unsigned __int8 v15 = v12;
      pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(&v17, &v13);
      *(float32x4_t *)(**(void **)(a2 + 24) + v7) = v17;
      ++v8;
      v7 += 16;
      v6 += 6;
      v5 += 12;
      v4 += 128;
      if (a1 == v8) {
        return;
      }
    }
    v13.n128_u64[0] = (unint64_t)"usdSkel/utils.cpp";
    v13.n128_u64[1] = (unint64_t)"operator()";
    uint64_t v14 = 587;
    unsigned __int8 v15 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_DecomposeTransforms(TfSpan<const GfMatri"
          "x4d>, TfSpan<GfVec3f>, TfSpan<GfQuatf>, TfSpan<GfVec3h>)::(anonymous class)::operator()(size_t, size_t) const";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v13, (pxrInternal__aapl__pxrReserved__ *)"Failed decomposing transform %zu. The source transform may be singular.", v9, v8);
    atomic_store(1u, *(unsigned __int8 **)(a2 + 32));
  }
}

uint64_t sub_217026EF4(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  uint64_t v4 = (long long *)((char *)this + 8);
  unint64_t v5 = *((void *)this + 3);
  unint64_t v6 = *((void *)this + 1) - *((void *)this + 2);
  if (v5 < v6)
  {
    unint64_t v7 = *((void *)this + 5);
    if (v7 > 1) {
      goto LABEL_12;
    }
    if (v7 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v8 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(void *)uint64_t v8 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v8[8] = 0;
        *((void *)this - 4) = v8;
        *((void *)v8 - 3) = 2;
        uint64_t v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(unsigned char *)(v9 - 11) = 1;
        *(void *)uint64_t v9 = &unk_26C76FC38;
        *(void *)(v9 + 8) = *((void *)this + 1);
        uint64_t v10 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v10;
        *(void *)(v9 + 16) = v10;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v11 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v11;
        *(void *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(unsigned char *)(v9 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v9 - 40))();
        unint64_t v5 = *((void *)this + 3);
        unint64_t v6 = *((void *)this + 1) - *((void *)this + 2);
        if (v5 >= v6) {
          break;
        }
        unint64_t v12 = *((void *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)long long v25 = 0x10000;
    long long v26 = *v4;
    uint64_t v27 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v25, *((unsigned __int8 *)this + 52));
      char v13 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0) {
        break;
      }
      unsigned __int8 v16 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v16;
      unsigned __int8 v15 = v25[2];
      if (v25[2] < 2u)
      {
        unsigned int v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((void *)&v26 + 3 * v25[0] + 2) < *((void *)&v26 + 3 * v25[0]) - *((void *)&v26 + 3 * v25[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v17 = v25[1];
      unsigned __int8 v18 = v25[v25[1] + 3];
      unsigned __int8 v19 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(void *)unsigned __int8 v19 = &unk_26C751420;
      __dmb(0xBu);
      long long v19[8] = 0;
      *((void *)this - 4) = v19;
      *((void *)v19 - 3) = 2;
      uint64_t v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      unsigned __int8 v21 = (char *)&v26 + 24 * v17;
      *(unsigned char *)(v20 - 11) = 1;
      *(void *)uint64_t v20 = &unk_26C76FC38;
      long long v22 = *(_OWORD *)v21;
      *(void *)(v20 + 24) = *((void *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(void *)(v20 + 32) = *((void *)this + 4);
      uint64_t v23 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v23;
      *(void *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(unsigned char *)(v20 + 52) = *((unsigned char *)this + 52) - v18;
      (***(void (****)(void))(v20 - 40))();
      unsigned __int8 v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v14 = v25[0];
LABEL_22:
    sub_217027328((uint64_t)this, (unint64_t *)&v26 + 3 * v14);
    unsigned __int8 v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_217027328((uint64_t)this, (unint64_t *)this + 1);
  return 0;
}

void sub_217027328(uint64_t a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v2 = a2[1];
  if (v2 < *a2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = 16 * v2;
    uint64_t v6 = 6 * v2;
    uint64_t v7 = 12 * v2;
    for (uint64_t i = v2 << 7;
          sub_21701B074(**(void **)v4 + i, (float32x2_t *)(**(void **)(v4 + 8) + v7), (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v18, (_WORD *)(**(void **)(v4 + 16) + v6));
          i += 128)
    {
      v13.n128_u64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationQuat((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v18);
      v13.n128_u64[1] = v10;
      uint64_t v14 = v11;
      unsigned __int8 v15 = v12;
      pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(&v17, &v13);
      *(float32x4_t *)(**(void **)(v4 + 24) + v5) = v17;
      ++v2;
      v5 += 16;
      v6 += 6;
      v7 += 12;
      if (v3 == v2) {
        return;
      }
    }
    v13.n128_u64[0] = (unint64_t)"usdSkel/utils.cpp";
    v13.n128_u64[1] = (unint64_t)"operator()";
    uint64_t v14 = 587;
    unsigned __int8 v15 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_DecomposeTransforms(TfSpan<const GfMatri"
          "x4d>, TfSpan<GfVec3f>, TfSpan<GfQuatf>, TfSpan<GfVec3h>)::(anonymous class)::operator()(size_t, size_t) const";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v13, (pxrInternal__aapl__pxrReserved__ *)"Failed decomposing transform %zu. The source transform may be singular.", v9, v2);
    atomic_store(1u, *(unsigned __int8 **)(v4 + 32));
  }
}

void sub_217027448(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    while (sub_21701B300(**(void **)a2 + v4, **(void **)(a2 + 8) + v5, v17, (_WORD *)(**(void **)(a2 + 16) + v6)))
    {
      float RotationQuat = pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotationQuat((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v17);
      uint64_t v11 = **(void **)(a2 + 24) + v7;
      *(float *)uint64_t v11 = RotationQuat;
      *(_DWORD *)(v11 + 4) = v12;
      ++v8;
      v7 += 16;
      *(_DWORD *)(v11 + 8) = v13;
      *(_DWORD *)(v11 + 12) = v14;
      v6 += 6;
      v5 += 12;
      v4 += 64;
      if (a1 == v8) {
        return;
      }
    }
    v15[0] = "usdSkel/utils.cpp";
    v15[1] = "operator()";
    v15[2] = 587;
    void v15[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_DecomposeTransforms(TfSpan<const GfMa"
             "trix4f>, TfSpan<GfVec3f>, TfSpan<GfQuatf>, TfSpan<GfVec3h>)::(anonymous class)::operator()(size_t, size_t) const";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v15, (pxrInternal__aapl__pxrReserved__ *)"Failed decomposing transform %zu. The source transform may be singular.", v9, v8);
    atomic_store(1u, *(unsigned __int8 **)(a2 + 32));
  }
}

uint64_t sub_217027560(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  uint64_t v4 = (long long *)((char *)this + 8);
  unint64_t v5 = *((void *)this + 3);
  unint64_t v6 = *((void *)this + 1) - *((void *)this + 2);
  if (v5 < v6)
  {
    unint64_t v7 = *((void *)this + 5);
    if (v7 > 1) {
      goto LABEL_12;
    }
    if (v7 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v8 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(void *)uint64_t v8 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v8[8] = 0;
        *((void *)this - 4) = v8;
        *((void *)v8 - 3) = 2;
        uint64_t v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(unsigned char *)(v9 - 11) = 1;
        *(void *)uint64_t v9 = &unk_26C76FC80;
        *(void *)(v9 + 8) = *((void *)this + 1);
        uint64_t v10 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v10;
        *(void *)(v9 + 16) = v10;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v11 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v11;
        *(void *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(unsigned char *)(v9 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v9 - 40))();
        unint64_t v5 = *((void *)this + 3);
        unint64_t v6 = *((void *)this + 1) - *((void *)this + 2);
        if (v5 >= v6) {
          break;
        }
        unint64_t v12 = *((void *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)long long v25 = 0x10000;
    long long v26 = *v4;
    uint64_t v27 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v25, *((unsigned __int8 *)this + 52));
      char v13 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0) {
        break;
      }
      unsigned __int8 v16 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v16;
      unsigned __int8 v15 = v25[2];
      if (v25[2] < 2u)
      {
        unsigned int v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((void *)&v26 + 3 * v25[0] + 2) < *((void *)&v26 + 3 * v25[0]) - *((void *)&v26 + 3 * v25[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v17 = v25[1];
      unsigned __int8 v18 = v25[v25[1] + 3];
      unsigned __int8 v19 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(void *)unsigned __int8 v19 = &unk_26C751420;
      __dmb(0xBu);
      long long v19[8] = 0;
      *((void *)this - 4) = v19;
      *((void *)v19 - 3) = 2;
      uint64_t v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      unsigned __int8 v21 = (char *)&v26 + 24 * v17;
      *(unsigned char *)(v20 - 11) = 1;
      *(void *)uint64_t v20 = &unk_26C76FC80;
      long long v22 = *(_OWORD *)v21;
      *(void *)(v20 + 24) = *((void *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(void *)(v20 + 32) = *((void *)this + 4);
      uint64_t v23 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v23;
      *(void *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(unsigned char *)(v20 + 52) = *((unsigned char *)this + 52) - v18;
      (***(void (****)(void))(v20 - 40))();
      unsigned __int8 v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v14 = v25[0];
LABEL_22:
    sub_217027994((uint64_t)this, (unint64_t *)&v26 + 3 * v14);
    unsigned __int8 v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_217027994((uint64_t)this, (unint64_t *)this + 1);
  return 0;
}

void sub_217027994(uint64_t a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v2 = a2[1];
  if (v2 < *a2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = 16 * v2;
    uint64_t v6 = v2 << 6;
    uint64_t v7 = 6 * v2;
    for (uint64_t i = 12 * v2;
          sub_21701B300(**(void **)v4 + v6, **(void **)(v4 + 8) + i, v17, (_WORD *)(**(void **)(v4 + 16) + v7));
          i += 12)
    {
      float RotationQuat = pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotationQuat((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v17);
      uint64_t v11 = **(void **)(v4 + 24) + v5;
      *(float *)uint64_t v11 = RotationQuat;
      *(_DWORD *)(v11 + 4) = v12;
      ++v2;
      v5 += 16;
      *(_DWORD *)(v11 + 8) = v13;
      *(_DWORD *)(v11 + 12) = v14;
      v6 += 64;
      v7 += 6;
      if (v3 == v2) {
        return;
      }
    }
    v15[0] = "usdSkel/utils.cpp";
    v15[1] = "operator()";
    v15[2] = 587;
    void v15[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSkel_DecomposeTransforms(TfSpan<const GfMa"
             "trix4f>, TfSpan<GfVec3f>, TfSpan<GfQuatf>, TfSpan<GfVec3h>)::(anonymous class)::operator()(size_t, size_t) const";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v15, (pxrInternal__aapl__pxrReserved__ *)"Failed decomposing transform %zu. The source transform may be singular.", v9, v2);
    atomic_store(1u, *(unsigned __int8 **)(v4 + 32));
  }
}

void sub_217027AA4(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = **(float ***)a2;
    uint64_t v5 = **(unsigned int **)(a2 + 8);
    uint64_t v6 = *(float **)(a2 + 16);
    uint64_t v7 = 4 * (int)v5;
    uint64_t v8 = v4;
    do
    {
      if ((int)v5 >= 1)
      {
        float v9 = 0.0;
        uint64_t v10 = v8;
        uint64_t v11 = v5;
        do
        {
          float v12 = *v10++;
          float v9 = v9 + v12;
          --v11;
        }
        while (v11);
        if (fabsf(v9) <= *v6)
        {
          bzero((char *)v4 + v7 * v3, 4 * v5);
        }
        else
        {
          for (uint64_t i = 0; i != v5; ++i)
            v8[i] = v8[i] / v9;
        }
      }
      ++v3;
      uint64_t v8 = (float *)((char *)v8 + v7);
    }
    while (v3 != a1);
  }
}

uint64_t sub_217027B80(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  uint64_t v4 = (long long *)((char *)this + 8);
  unint64_t v5 = *((void *)this + 3);
  unint64_t v6 = *((void *)this + 1) - *((void *)this + 2);
  if (v5 < v6)
  {
    unint64_t v7 = *((void *)this + 5);
    if (v7 > 1) {
      goto LABEL_12;
    }
    if (v7 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v8 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(void *)uint64_t v8 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v8[8] = 0;
        *((void *)this - 4) = v8;
        *((void *)v8 - 3) = 2;
        uint64_t v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(unsigned char *)(v9 - 11) = 1;
        *(void *)uint64_t v9 = &unk_26C76FCC8;
        *(void *)(v9 + 8) = *((void *)this + 1);
        uint64_t v10 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v10;
        *(void *)(v9 + 16) = v10;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v11 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v11;
        *(void *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(unsigned char *)(v9 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v9 - 40))();
        unint64_t v5 = *((void *)this + 3);
        unint64_t v6 = *((void *)this + 1) - *((void *)this + 2);
        if (v5 >= v6) {
          break;
        }
        unint64_t v12 = *((void *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)long long v25 = 0x10000;
    long long v26 = *v4;
    uint64_t v27 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v25, *((unsigned __int8 *)this + 52));
      char v13 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if (v13)
      {
        unsigned __int8 v15 = *((unsigned char *)this + 52) + 1;
        *((unsigned char *)this + 52) = v15;
        unsigned __int8 v16 = v25[2];
        if (v25[2] >= 2u)
        {
          unsigned int v17 = v25[1];
          unsigned __int8 v18 = v25[v25[1] + 3];
          unsigned __int8 v19 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
          *(v19 - 11) = 1;
          *(void *)unsigned __int8 v19 = &unk_26C751420;
          __dmb(0xBu);
          long long v19[8] = 0;
          *((void *)this - 4) = v19;
          *((void *)v19 - 3) = 2;
          uint64_t v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
          unsigned __int8 v21 = (char *)&v26 + 24 * v17;
          *(unsigned char *)(v20 - 11) = 1;
          *(void *)uint64_t v20 = &unk_26C76FCC8;
          long long v22 = *(_OWORD *)v21;
          *(void *)(v20 + 24) = *((void *)v21 + 2);
          *(_OWORD *)(v20 + 8) = v22;
          *(void *)(v20 + 32) = *((void *)this + 4);
          uint64_t v23 = *((void *)this + 5) >> 1;
          *((void *)this + 5) = v23;
          *(void *)(v20 + 40) = v23;
          *(_DWORD *)(v20 + 48) = 2;
          *(unsigned char *)(v20 + 52) = *((unsigned char *)this + 52) - v18;
          (***(void (****)(void))(v20 - 40))();
          unsigned __int8 v16 = --v25[2];
          v25[1] = (v25[1] + 1) & 7;
          goto LABEL_27;
        }
        unsigned int v14 = v25[0];
        if (v25[v25[0] + 3] < v15
          && *((void *)&v26 + 3 * v25[0] + 2) < *((void *)&v26 + 3 * v25[0]) - *((void *)&v26 + 3 * v25[0] + 1))
        {
          goto LABEL_27;
        }
      }
      else
      {
        unsigned int v14 = v25[0];
      }
      sub_217027FB4((uint64_t)this, (void *)&v26 + 3 * v14);
      unsigned __int8 v16 = --v25[2];
      v25[0] = (v25[0] - 1) & 7;
LABEL_27:
      if (!v16 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
  }
  sub_217027FB4((uint64_t)this, (void *)this + 1);
  return 0;
}

void sub_217027FB4(uint64_t a1, void *a2)
{
  unint64_t v2 = a2[1];
  unint64_t v3 = *a2 - v2;
  if (*a2 > v2)
  {
    uint64_t v4 = 0;
    unint64_t v5 = *(uint64_t ***)(a1 + 32);
    uint64_t v6 = **v5;
    uint64_t v7 = *(unsigned int *)v5[1];
    uint64_t v8 = (float *)v5[2];
    uint64_t v9 = 4 * (int)v7;
    uint64_t v10 = (float *)(v6 + 4 * v2 * (int)v7);
    do
    {
      if ((int)v7 >= 1)
      {
        float v11 = 0.0;
        unint64_t v12 = v10;
        uint64_t v13 = v7;
        do
        {
          float v14 = *v12++;
          float v11 = v11 + v14;
          --v13;
        }
        while (v13);
        if (fabsf(v11) <= *v8)
        {
          bzero((void *)(v6 + v9 * (v4 + v2)), 4 * v7);
        }
        else
        {
          for (uint64_t i = 0; i != v7; ++i)
            v10[i] = v10[i] / v11;
        }
      }
      ++v4;
      uint64_t v10 = (float *)((char *)v10 + v9);
    }
    while (v4 != v3);
  }
}

void sub_21702809C(int **a1, unint64_t a2, unint64_t a3)
{
  long long __p = 0;
  unsigned __int8 v24 = 0;
  uint64_t v25 = 0;
  if (a2 < a3)
  {
    unint64_t v4 = a2;
    int v6 = **a1;
    uint64_t v7 = 4 * a2;
    do
    {
      uint64_t v8 = v6;
      uint64_t v9 = *(void *)a1[1];
      uint64_t v10 = *(void *)a1[2];
      sub_216C60D60((uint64_t)&__p, v6);
      float v11 = *a1;
      unint64_t v12 = __p;
      uint64_t v13 = v7 * v8;
      if (**a1 >= 1)
      {
        uint64_t v14 = 0;
        unsigned __int8 v15 = (char *)__p + 4;
        do
        {
          int v16 = *(_DWORD *)(v10 + v13 + 4 * v14);
          *(v15 - 1) = *(_DWORD *)(v9 + v13 + 4 * v14);
          *unsigned __int8 v15 = v16;
          v15 += 2;
          ++v14;
        }
        while (v14 < *v11);
      }
      unint64_t v17 = 126 - 2 * __clz((v24 - v12) >> 3);
      if (v24 == v12) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = v17;
      }
      sub_217028214((uint64_t)v12, (unint64_t)v24, (uint64_t)&v26, v18, 1);
      unsigned __int8 v19 = *a1;
      int v6 = **a1;
      if (v6 >= 1)
      {
        uint64_t v20 = 0;
        unsigned __int8 v21 = (int *)((char *)__p + 4);
        do
        {
          *(_DWORD *)(v9 + v13 + 4 * v20) = *(v21 - 1);
          int v22 = *v21;
          v21 += 2;
          *(_DWORD *)(v10 + v13 + 4 * v20++) = v22;
        }
        while (v20 < *v19);
        int v6 = *v19;
      }
      ++v4;
      v7 += 4;
    }
    while (v4 != a3);
    if (__p)
    {
      unsigned __int8 v24 = __p;
      operator delete(__p);
    }
  }
}

void sub_2170281F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217028214(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = result;
LABEL_2:
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    unint64_t v15 = (uint64_t)(a2 - v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float v24 = *(float *)v11;
          float v25 = *(float *)(a2 - 8);
          if (*(float *)v11 >= v25)
          {
            if (v25 < v24) {
              return result;
            }
            int v26 = *(_DWORD *)(v11 + 4);
            int v27 = *(_DWORD *)(a2 - 4);
            if (v26 >= v27) {
              return result;
            }
          }
          else
          {
            int v26 = *(_DWORD *)(v11 + 4);
            int v27 = *(_DWORD *)(a2 - 4);
          }
          *(float *)unint64_t v11 = v25;
          *(float *)(a2 - 8) = v24;
          *(_DWORD *)(v11 + 4) = v27;
          *(_DWORD *)(a2 - 4) = v26;
          return result;
        case 3uLL:
          return sub_2170287A0(v11, v11 + 8, a2 - 8);
        case 4uLL:
          return sub_217028DBC(v11, v11 + 8, v11 + 16, a2 - 8);
        case 5uLL:
          return sub_217028EC4(v11, v11 + 8, v11 + 16, v11 + 24, a2 - 8);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return sub_21702901C(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = (_DWORD *)(v11 + 8 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x401)
    {
      sub_2170287A0(v11, v11 + 8 * (v15 >> 1), a2 - 8);
      sub_2170287A0(v11 + 8, (uint64_t)(v17 - 2), a2 - 16);
      sub_2170287A0(v11 + 16, v11 + 8 + 8 * v16, a2 - 24);
      sub_2170287A0((uint64_t)(v17 - 2), (uint64_t)v17, v11 + 8 + 8 * v16);
      float v18 = *(float *)v11;
      *(_DWORD *)unint64_t v11 = *v17;
      *(float *)unint64_t v17 = v18;
      int v19 = *(_DWORD *)(v11 + 4);
      *(_DWORD *)(v11 + 4) = v17[1];
      v17[1] = v19;
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_2170287A0(v11 + 8 * (v15 >> 1), v11, a2 - 8);
      if (a5) {
        goto LABEL_16;
      }
    }
    float v20 = *(float *)(v11 - 8);
    if (*(float *)v11 >= v20 && (v20 < *(float *)v11 || *(_DWORD *)(v11 + 4) >= *(_DWORD *)(v11 - 4)))
    {
      __n128 result = sub_2170288F0(v11, a2);
      unint64_t v11 = result;
      goto LABEL_21;
    }
LABEL_16:
    unint64_t v21 = sub_217028A44(v11, a2);
    if ((v22 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v23 = sub_217028B90(v11, v21);
    unint64_t v11 = v21 + 8;
    __n128 result = sub_217028B90(v21 + 8, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v21;
      if (v23) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v23)
    {
LABEL_19:
      __n128 result = sub_217028214(v10, v21, a3, -v13, a5 & 1);
      unint64_t v11 = v21 + 8;
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return sub_21702861C(v11, a2);
  }
  else
  {
    return sub_2170286FC(v11, a2);
  }
}

uint64_t sub_21702861C(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v2 = result + 8;
  if (result + 8 == a2) {
    return result;
  }
  uint64_t v3 = 0;
  uint64_t v4 = result;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = v2;
    float v6 = *(float *)v5;
    float v7 = *(float *)(v5 + 8);
    if (*(float *)v5 >= v7)
    {
      if (v7 < v6) {
        goto LABEL_19;
      }
      int v9 = *(_DWORD *)(v5 + 4);
      int v8 = *(_DWORD *)(v5 + 12);
      if (v9 >= v8) {
        goto LABEL_19;
      }
    }
    else
    {
      int v8 = *(_DWORD *)(v5 + 12);
      int v9 = *(_DWORD *)(v5 + 4);
    }
    *(float *)(v5 + 8) = v6;
    *(_DWORD *)(v4 + 4) = v9;
    uint64_t v10 = result;
    if (v5 == result) {
      goto LABEL_18;
    }
    uint64_t v11 = v3;
    while (1)
    {
      float v12 = *(float *)(result + v11 - 8);
      if (v12 >= v7) {
        break;
      }
      int v13 = *(_DWORD *)(result + v11 - 4);
LABEL_12:
      v5 -= 8;
      uint64_t v14 = result + v11;
      *(float *)uint64_t v14 = v12;
      *(_DWORD *)(v14 + 4) = v13;
      v11 -= 8;
      if (!v11)
      {
        uint64_t v10 = result;
        goto LABEL_18;
      }
    }
    if (v7 >= v12)
    {
      uint64_t v10 = result + v11;
      int v13 = *(_DWORD *)(result + v11 - 4);
      if (v13 >= v8) {
        goto LABEL_18;
      }
      goto LABEL_12;
    }
    uint64_t v10 = v5;
LABEL_18:
    *(float *)uint64_t v10 = v7;
    *(_DWORD *)(v10 + 4) = v8;
LABEL_19:
    uint64_t v2 = v4 + 8;
    v3 += 8;
  }
  while (v4 + 8 != a2);
  return result;
}

uint64_t sub_2170286FC(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 8;
    if (result + 8 != a2)
    {
      for (uint64_t i = result + 4; ; i += 8)
      {
        uint64_t v4 = result;
        __n128 result = v2;
        float v5 = *(float *)v4;
        float v6 = *(float *)(v4 + 8);
        if (*(float *)v4 < v6) {
          break;
        }
        if (v6 >= v5)
        {
          int v7 = *(_DWORD *)(v4 + 12);
          if (*(_DWORD *)(v4 + 4) < v7) {
            goto LABEL_6;
          }
        }
LABEL_14:
        uint64_t v2 = result + 8;
        if (result + 8 == a2) {
          return result;
        }
      }
      int v7 = *(_DWORD *)(v4 + 12);
LABEL_6:
      for (uint64_t j = i; ; j -= 8)
      {
        *(float *)(j + 4) = v5;
        *(_DWORD *)(j + 8) = *(_DWORD *)j;
        float v5 = *(float *)(j - 12);
        if (v5 >= v6 && (v6 < v5 || *(_DWORD *)(j - 8) >= v7)) {
          break;
        }
      }
      *(float *)(j - 4) = v6;
      *(_DWORD *)uint64_t j = v7;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t sub_2170287A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v3 = *(float *)a1;
  float v4 = *(float *)a2;
  if (*(float *)a1 >= *(float *)a2 && (v4 < v3 || *(_DWORD *)(a1 + 4) >= *(_DWORD *)(a2 + 4)))
  {
    float v9 = *(float *)a3;
    if (v4 >= *(float *)a3)
    {
      if (v9 < v4) {
        return 0;
      }
      int v10 = *(_DWORD *)(a2 + 4);
      int v11 = *(_DWORD *)(a3 + 4);
      if (v10 >= v11) {
        return 0;
      }
    }
    else
    {
      int v10 = *(_DWORD *)(a2 + 4);
      int v11 = *(_DWORD *)(a3 + 4);
    }
    *(float *)a2 = v9;
    *(float *)a3 = v4;
    *(_DWORD *)(a2 + 4) = v11;
    *(_DWORD *)(a3 + 4) = v10;
    float v12 = *(float *)a1;
    float v13 = *(float *)a2;
    if (*(float *)a1 >= *(float *)a2)
    {
      if (v13 < v12) {
        return 1;
      }
      int v14 = *(_DWORD *)(a1 + 4);
      int v15 = *(_DWORD *)(a2 + 4);
      if (v14 >= v15) {
        return 1;
      }
    }
    else
    {
      int v14 = *(_DWORD *)(a1 + 4);
      int v15 = *(_DWORD *)(a2 + 4);
    }
    *(float *)a1 = v13;
    *(float *)a2 = v12;
    *(_DWORD *)(a1 + 4) = v15;
    uint64_t result = 2;
    *(_DWORD *)(a2 + 4) = v14;
  }
  else
  {
    float v5 = *(float *)a3;
    if (v4 < *(float *)a3)
    {
      int v6 = *(_DWORD *)(a3 + 4);
LABEL_6:
      *(float *)a1 = v5;
      *(float *)a3 = v3;
      int v7 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)(a1 + 4) = v6;
      *(_DWORD *)(a3 + 4) = v7;
      return 1;
    }
    int v16 = *(_DWORD *)(a2 + 4);
    if (v5 >= v4)
    {
      int v6 = *(_DWORD *)(a3 + 4);
      if (v16 < v6) {
        goto LABEL_6;
      }
    }
    *(float *)a1 = v4;
    *(float *)a2 = v3;
    int v17 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(a1 + 4) = v16;
    *(_DWORD *)(a2 + 4) = v17;
    float v18 = *(float *)a3;
    if (v3 >= *(float *)a3)
    {
      if (v18 < v3) {
        return 1;
      }
      int v19 = *(_DWORD *)(a3 + 4);
      if (v17 >= v19) {
        return 1;
      }
    }
    else
    {
      int v19 = *(_DWORD *)(a3 + 4);
    }
    *(float *)a2 = v18;
    *(float *)a3 = v3;
    *(_DWORD *)(a2 + 4) = v19;
    uint64_t result = 2;
    *(_DWORD *)(a3 + 4) = v17;
  }
  return result;
}

unint64_t sub_2170288F0(unint64_t a1, unint64_t a2)
{
  float v2 = *(float *)a1;
  int v3 = *(_DWORD *)(a1 + 4);
  float v4 = *(float *)(a2 - 8);
  if (v4 >= *(float *)a1 && (v2 < v4 || *(_DWORD *)(a2 - 4) >= v3))
  {
    for (unint64_t i = a1 + 8; i < a2 && *(float *)i >= v2 && (v2 < *(float *)i || *(_DWORD *)(i + 4) >= v3); i += 8)
      ;
  }
  else
  {
    unint64_t i = a1;
    do
    {
      float v6 = *(float *)(i + 8);
      i += 8;
      float v7 = v6;
    }
    while (v6 >= v2 && (v2 < v7 || *(_DWORD *)(i + 4) >= v3));
  }
  if (i < a2)
  {
    for (a2 -= 8; v4 < v2 || v2 >= v4 && *(_DWORD *)(a2 + 4) < v3; a2 -= 8)
    {
      float v8 = *(float *)(a2 - 8);
      float v4 = v8;
    }
  }
  if (i < a2)
  {
    float v9 = *(float *)i;
    float v10 = *(float *)a2;
    do
    {
      *(float *)unint64_t i = v10;
      *(float *)a2 = v9;
      float v11 = *(float *)(i + 8);
      i += 8;
      float v9 = v11;
      int v12 = *(_DWORD *)(i - 4);
      *(_DWORD *)(i - 4) = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = v12;
      while (v9 >= v2 && (v2 < v9 || *(_DWORD *)(i + 4) >= v3))
      {
        float v13 = *(float *)(i + 8);
        i += 8;
        float v9 = v13;
      }
      do
      {
        do
        {
          float v14 = *(float *)(a2 - 8);
          a2 -= 8;
          float v10 = v14;
        }
        while (v14 < v2);
      }
      while (v2 >= v10 && *(_DWORD *)(a2 + 4) < v3);
    }
    while (i < a2);
  }
  if (i - 8 != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(i - 8);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(i - 4);
  }
  *(float *)(i - 8) = v2;
  *(_DWORD *)(i - 4) = v3;
  return i;
}

unint64_t sub_217028A44(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  float v3 = *(float *)a1;
  int v4 = *(_DWORD *)(a1 + 4);
  while (1)
  {
    float v5 = *(float *)(a1 + v2 + 8);
    if (v3 >= v5 && (v5 < v3 || v4 >= *(_DWORD *)(a1 + v2 + 12))) {
      break;
    }
    v2 += 8;
  }
  unint64_t v6 = a1 + v2 + 8;
  if (v2)
  {
    do
    {
      float v7 = *(float *)(a2 - 8);
      a2 -= 8;
      float v8 = v7;
    }
    while (v3 >= v7 && (v8 < v3 || v4 >= *(_DWORD *)(a2 + 4)));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        float v9 = *(float *)(a2 - 8);
        a2 -= 8;
        float v10 = v9;
        if (v3 < v9) {
          break;
        }
        if (v10 < v3) {
          goto LABEL_19;
        }
      }
      while (v4 >= *(_DWORD *)(a2 + 4) && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    unint64_t v13 = a1 + v2 + 8;
  }
  else
  {
    float v12 = *(float *)a2;
    unint64_t v13 = a1 + v2 + 8;
    unint64_t v14 = a2;
    do
    {
      *(float *)unint64_t v13 = v12;
      *(float *)unint64_t v14 = v5;
      int v15 = *(_DWORD *)(v13 + 4);
      *(_DWORD *)(v13 + 4) = *(_DWORD *)(v14 + 4);
      *(_DWORD *)(v14 + 4) = v15;
      do
      {
        do
        {
          float v16 = *(float *)(v13 + 8);
          v13 += 8;
          float v5 = v16;
        }
        while (v3 < v16);
      }
      while (v5 >= v3 && v4 < *(_DWORD *)(v13 + 4));
      do
      {
        float v17 = *(float *)(v14 - 8);
        v14 -= 8;
        float v12 = v17;
      }
      while (v3 >= v17 && (v12 < v3 || v4 >= *(_DWORD *)(v14 + 4)));
    }
    while (v13 < v14);
  }
  if (v13 - 8 != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(v13 - 8);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(v13 - 4);
  }
  *(float *)(v13 - 8) = v3;
  *(_DWORD *)(v13 - 4) = v4;
  return v13 - 8;
}

BOOL sub_217028B90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(float *)a1;
      float v7 = *(float *)(a2 - 8);
      if (*(float *)a1 < v7)
      {
        int v8 = *(_DWORD *)(a1 + 4);
        int v9 = *(_DWORD *)(a2 - 4);
LABEL_30:
        *(float *)a1 = v7;
        *(float *)(a2 - 8) = v6;
        *(_DWORD *)(a1 + 4) = v9;
        *(_DWORD *)(a2 - 4) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        int v8 = *(_DWORD *)(a1 + 4);
        int v9 = *(_DWORD *)(a2 - 4);
        if (v8 < v9) {
          goto LABEL_30;
        }
      }
      return result;
    case 3:
      sub_2170287A0(a1, a1 + 8, a2 - 8);
      return 1;
    case 4:
      sub_217028DBC(a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      sub_217028EC4(a1, a1 + 8, a1 + 16, a1 + 24, a2 - 8);
      return 1;
    default:
      uint64_t v10 = a1 + 16;
      sub_2170287A0(a1, a1 + 8, a1 + 16);
      uint64_t v11 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
LABEL_6:
  float v14 = *(float *)v10;
  float v15 = *(float *)v11;
  if (*(float *)v10 >= *(float *)v11)
  {
    if (v15 < v14) {
      goto LABEL_21;
    }
    int v17 = *(_DWORD *)(v10 + 4);
    int v16 = *(_DWORD *)(v11 + 4);
    if (v17 >= v16) {
      goto LABEL_21;
    }
  }
  else
  {
    int v16 = *(_DWORD *)(v11 + 4);
    int v17 = *(_DWORD *)(v10 + 4);
  }
  *(float *)uint64_t v11 = v14;
  *(_DWORD *)(v11 + 4) = v17;
  uint64_t v18 = a1;
  if (v10 == a1) {
    goto LABEL_20;
  }
  uint64_t v19 = v12;
  while (1)
  {
    uint64_t v20 = a1 + v19;
    float v21 = *(float *)(a1 + v19 + 8);
    if (v21 >= v15)
    {
      if (v15 < v21)
      {
        uint64_t v18 = v10;
        goto LABEL_20;
      }
      int v22 = *(_DWORD *)(a1 + v19 + 12);
      if (v22 >= v16)
      {
        uint64_t v18 = a1 + v19 + 16;
LABEL_20:
        *(float *)uint64_t v18 = v15;
        *(_DWORD *)(v18 + 4) = v16;
        if (++v13 == 8) {
          return v11 + 8 == a2;
        }
LABEL_21:
        uint64_t v10 = v11;
        v12 += 8;
        v11 += 8;
        if (v11 == a2) {
          return 1;
        }
        goto LABEL_6;
      }
    }
    else
    {
      int v22 = *(_DWORD *)(v20 + 12);
    }
    v10 -= 8;
    *(float *)(v20 + 16) = v21;
    *(_DWORD *)(a1 + v19 + 20) = v22;
    v19 -= 8;
    if (v19 == -16)
    {
      uint64_t v18 = a1;
      goto LABEL_20;
    }
  }
}

uint64_t sub_217028DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_2170287A0(a1, a2, a3);
  float v9 = *(float *)a3;
  float v10 = *(float *)a4;
  if (*(float *)a3 >= *(float *)a4)
  {
    if (v10 < v9) {
      return result;
    }
    int v11 = *(_DWORD *)(a3 + 4);
    int v12 = *(_DWORD *)(a4 + 4);
    if (v11 >= v12) {
      return result;
    }
  }
  else
  {
    int v11 = *(_DWORD *)(a3 + 4);
    int v12 = *(_DWORD *)(a4 + 4);
  }
  *(float *)a3 = v10;
  *(float *)a4 = v9;
  *(_DWORD *)(a3 + 4) = v12;
  *(_DWORD *)(a4 + 4) = v11;
  float v13 = *(float *)a2;
  float v14 = *(float *)a3;
  if (*(float *)a2 >= *(float *)a3)
  {
    if (v14 < v13) {
      return result;
    }
    int v15 = *(_DWORD *)(a2 + 4);
    int v16 = *(_DWORD *)(a3 + 4);
    if (v15 >= v16) {
      return result;
    }
  }
  else
  {
    int v15 = *(_DWORD *)(a2 + 4);
    int v16 = *(_DWORD *)(a3 + 4);
  }
  *(float *)a2 = v14;
  *(float *)a3 = v13;
  *(_DWORD *)(a2 + 4) = v16;
  *(_DWORD *)(a3 + 4) = v15;
  float v17 = *(float *)a1;
  float v18 = *(float *)a2;
  if (*(float *)a1 < *(float *)a2)
  {
    int v19 = *(_DWORD *)(a1 + 4);
    int v20 = *(_DWORD *)(a2 + 4);
LABEL_15:
    *(float *)a1 = v18;
    *(float *)a2 = v17;
    *(_DWORD *)(a1 + 4) = v20;
    *(_DWORD *)(a2 + 4) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    int v19 = *(_DWORD *)(a1 + 4);
    int v20 = *(_DWORD *)(a2 + 4);
    if (v19 < v20) {
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t sub_217028EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_217028DBC(a1, a2, a3, a4);
  float v11 = *(float *)a4;
  float v12 = *(float *)a5;
  if (*(float *)a4 >= *(float *)a5)
  {
    if (v12 < v11) {
      return result;
    }
    int v13 = *(_DWORD *)(a4 + 4);
    int v14 = *(_DWORD *)(a5 + 4);
    if (v13 >= v14) {
      return result;
    }
  }
  else
  {
    int v13 = *(_DWORD *)(a4 + 4);
    int v14 = *(_DWORD *)(a5 + 4);
  }
  *(float *)a4 = v12;
  *(float *)a5 = v11;
  *(_DWORD *)(a4 + 4) = v14;
  *(_DWORD *)(a5 + 4) = v13;
  float v15 = *(float *)a3;
  float v16 = *(float *)a4;
  if (*(float *)a3 >= *(float *)a4)
  {
    if (v16 < v15) {
      return result;
    }
    int v17 = *(_DWORD *)(a3 + 4);
    int v18 = *(_DWORD *)(a4 + 4);
    if (v17 >= v18) {
      return result;
    }
  }
  else
  {
    int v17 = *(_DWORD *)(a3 + 4);
    int v18 = *(_DWORD *)(a4 + 4);
  }
  *(float *)a3 = v16;
  *(float *)a4 = v15;
  *(_DWORD *)(a3 + 4) = v18;
  *(_DWORD *)(a4 + 4) = v17;
  float v19 = *(float *)a2;
  float v20 = *(float *)a3;
  if (*(float *)a2 >= *(float *)a3)
  {
    if (v20 < v19) {
      return result;
    }
    int v21 = *(_DWORD *)(a2 + 4);
    int v22 = *(_DWORD *)(a3 + 4);
    if (v21 >= v22) {
      return result;
    }
  }
  else
  {
    int v21 = *(_DWORD *)(a2 + 4);
    int v22 = *(_DWORD *)(a3 + 4);
  }
  *(float *)a2 = v20;
  *(float *)a3 = v19;
  *(_DWORD *)(a2 + 4) = v22;
  *(_DWORD *)(a3 + 4) = v21;
  float v23 = *(float *)a1;
  float v24 = *(float *)a2;
  if (*(float *)a1 < *(float *)a2)
  {
    int v25 = *(_DWORD *)(a1 + 4);
    int v26 = *(_DWORD *)(a2 + 4);
LABEL_9:
    *(float *)a1 = v24;
    *(float *)a2 = v23;
    *(_DWORD *)(a1 + 4) = v26;
    *(_DWORD *)(a2 + 4) = v25;
    return result;
  }
  if (v24 >= v23)
  {
    int v25 = *(_DWORD *)(a1 + 4);
    int v26 = *(_DWORD *)(a2 + 4);
    if (v25 < v26) {
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t sub_21702901C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 8 * v10;
      do
      {
        sub_2170291B0(a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      while (1)
      {
        float v15 = *(float *)a1;
        float v16 = *(float *)v14;
        if (*(float *)a1 >= *(float *)v14)
        {
          if (v16 < v15) {
            goto LABEL_12;
          }
          int v18 = *(_DWORD *)(a1 + 4);
          int v17 = *(_DWORD *)(v14 + 4);
          if (v18 >= v17) {
            goto LABEL_12;
          }
        }
        else
        {
          int v17 = *(_DWORD *)(v14 + 4);
          int v18 = *(_DWORD *)(a1 + 4);
        }
        *(float *)uint64_t v14 = v15;
        *(float *)a1 = v16;
        *(_DWORD *)(v14 + 4) = v18;
        *(_DWORD *)(a1 + 4) = v17;
        sub_2170291B0(a1, a4, v9, a1);
LABEL_12:
        v14 += 8;
        if (v14 == a3)
        {
          uint64_t v13 = a3;
          break;
        }
      }
    }
    if (v8 >= 9)
    {
      uint64_t v19 = (unint64_t)v8 >> 3;
      float v20 = (float *)(a2 - 8);
      do
      {
        float v21 = *(float *)a1;
        int v22 = *(_DWORD *)(a1 + 4);
        sub_2170292F4(a1, a4, v19);
        if (v20 == v23)
        {
          *float v23 = v21;
          *((_DWORD *)v23 + 1) = v22;
        }
        else
        {
          *float v23 = *v20;
          v23[1] = v20[1];
          *float v20 = v21;
          *((_DWORD *)v20 + 1) = v22;
          sub_217029388(a1, (uint64_t)(v23 + 2), a4, ((uint64_t)v23 - a1 + 8) >> 3);
        }
        v20 -= 2;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_2170291B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= (a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = result + 8 * v7;
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        float v10 = *(float *)(v8 + 8);
        if (v10 < *(float *)v8 || *(float *)v8 >= v10 && *(_DWORD *)(v8 + 12) < *(_DWORD *)(result + 8 * v7 + 4))
        {
          v8 += 8;
          uint64_t v7 = v9;
        }
      }
      float v11 = *(float *)a4;
      float v12 = *(float *)v8;
      if (*(float *)a4 >= *(float *)v8)
      {
        int v13 = *(_DWORD *)(v8 + 4);
        if (v12 >= v11)
        {
          int v14 = *(_DWORD *)(a4 + 4);
          if (v14 < v13) {
            return result;
          }
        }
        else
        {
          int v14 = *(_DWORD *)(a4 + 4);
        }
        *(float *)a4 = v12;
        *(_DWORD *)(a4 + 4) = v13;
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v16 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            uint64_t v15 = result + 8 * v7;
            uint64_t v17 = v16 + 2;
            if (v17 < a3)
            {
              float v18 = *(float *)(v15 + 8);
              if (v18 < *(float *)v15
                || *(float *)v15 >= v18 && *(_DWORD *)(v15 + 12) < *(_DWORD *)(result + 8 * v7 + 4))
              {
                v15 += 8;
                uint64_t v7 = v17;
              }
            }
            float v19 = *(float *)v15;
            if (v11 < *(float *)v15) {
              break;
            }
            int v20 = *(_DWORD *)(v15 + 4);
            if (v19 >= v11 && v14 < v20) {
              break;
            }
            *(float *)uint64_t v8 = v19;
            *(_DWORD *)(v8 + 4) = v20;
            uint64_t v8 = v15;
            if (v5 < v7) {
              goto LABEL_14;
            }
          }
        }
        uint64_t v15 = v8;
LABEL_14:
        *(float *)uint64_t v15 = v11;
        *(_DWORD *)(v15 + 4) = v14;
      }
    }
  }
  return result;
}

float sub_2170292F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = (_DWORD *)a1;
    uint64_t v7 = v3 + 1;
    a1 += 8 * (v3 + 1);
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      float v10 = *(float *)(a1 + 8);
      if (v10 < *(float *)a1 || *(float *)a1 >= v10 && *(_DWORD *)(a1 + 12) < v6[2 * v7 + 1])
      {
        a1 += 8;
        uint64_t v3 = v9;
      }
    }
    float result = *(float *)a1;
    *uint64_t v6 = *(_DWORD *)a1;
    v6[1] = *(_DWORD *)(a1 + 4);
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_217029388(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = result + 8 * (v4 >> 1);
    float v7 = *(float *)(a2 - 8);
    float v8 = *(float *)v6;
    if (v7 >= *(float *)v6)
    {
      if (v8 < v7) {
        return result;
      }
      int v9 = *(_DWORD *)(a2 - 4);
      int v10 = *(_DWORD *)(result + 8 * v5 + 4);
      if (v9 >= v10) {
        return result;
      }
    }
    else
    {
      int v9 = *(_DWORD *)(a2 - 4);
      int v10 = *(_DWORD *)(v6 + 4);
    }
    *(float *)(a2 - 8) = v8;
    *(_DWORD *)(a2 - 4) = v10;
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v12 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v11 = result + 8 * v5;
        float v13 = *(float *)v11;
        if (v7 >= *(float *)v11)
        {
          if (v13 < v7) {
            break;
          }
          int v14 = *(_DWORD *)(result + 8 * v5 + 4);
          if (v9 >= v14) {
            break;
          }
        }
        else
        {
          int v14 = *(_DWORD *)(v11 + 4);
        }
        *(float *)uint64_t v6 = v13;
        *(_DWORD *)(v6 + 4) = v14;
        uint64_t v6 = result + 8 * v5;
        if (v12 <= 1) {
          goto LABEL_13;
        }
      }
    }
    uint64_t v11 = v6;
LABEL_13:
    *(float *)uint64_t v11 = v7;
    *(_DWORD *)(v11 + 4) = v9;
  }
  return result;
}

uint64_t sub_217029448(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  unint64_t v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        int v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)int v10 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C76FD10;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)int v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      float v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)float v21 = &unk_26C751420;
      __dmb(0xBu);
      unsigned char v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      float v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C76FD10;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_21702809C(*((int ***)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21702809C(*((int ***)this + 4), v6, v4);
  return 0;
}

void sub_21702987C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    uint64_t v32 = v8;
    uint64_t v33 = v7;
    uint64_t v34 = v6;
    uint64_t v35 = v5;
    uint64_t v36 = v3;
    uint64_t v37 = v4;
    unint64_t v10 = a2;
    while (1)
    {
      int v31 = 0;
      uint64_t v30 = 0;
      LODWORD(v30) = sub_216F2C3F8(*(float64x2_t **)a1, (float *)(**(void **)(a1 + 8) + 12 * v10)).u32[0];
      HIDWORD(v30) = v12;
      int v31 = v14;
      int v15 = **(_DWORD **)(a1 + 16);
      if (v15 >= 1) {
        break;
      }
      float v19 = 0.0;
      float v18 = 0.0;
      float v17 = 0.0;
LABEL_12:
      int v27 = (float *)(**(void **)(a1 + 8) + 12 * v10);
      *int v27 = v17;
      v27[1] = v18;
      _OWORD v27[2] = v19;
      if (++v10 == a3) {
        return;
      }
    }
    uint64_t v16 = 0;
    float v17 = 0.0;
    float v18 = 0.0;
    float v19 = 0.0;
    while (1)
    {
      uint64_t v20 = v16 + v10 * v15;
      float v21 = *(void **)(a1 + 24);
      unint64_t v22 = *(unsigned int *)(*v21 + 4 * v20);
      if ((v22 & 0x80000000) != 0) {
        break;
      }
      float v23 = *(void **)(a1 + 32);
      if (v23[1] <= v22) {
        break;
      }
      float v24 = *(float *)(v21[2] + 4 * v20);
      if (v24 != 0.0)
      {
        float v17 = v17 + (float)(v24 * sub_21701BAB8((float64x2_t *)(*v23 + (v22 << 7)), (float *)&v30).f32[0]);
        float v18 = v18 + (float)(v24 * v25);
        float v19 = v19 + (float)(v24 * v26);
        int v15 = **(_DWORD **)(a1 + 16);
      }
      if (++v16 >= v15) {
        goto LABEL_12;
      }
    }
    v28[0] = "usdSkel/utils.cpp";
    v28[1] = "operator()";
    void v28[2] = 1418;
    v28[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinPointsLBS(const pxrInternal__aapl__pxrRe"
             "served__::GfMatrix4d &, TfSpan<const GfMatrix4d>, const pxrInternal__aapl__pxrReserved__::(anonymous namesp"
             "ace)::_NonInterleavedInfluencesFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()"
             "(size_t, size_t) const";
    char v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v28, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", *(char **)&v13, v22, v16 + v10 * v15, *(void *)(*(void *)(a1 + 32) + 8));
    atomic_store(1u, *(unsigned __int8 **)(a1 + 40));
  }
}

uint64_t sub_217029A28(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  uint64_t v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        unint64_t v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)unint64_t v10 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C76FD58;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)int v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      float v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)float v21 = &unk_26C751420;
      __dmb(0xBu);
      unsigned char v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      float v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C76FD58;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_21702987C(*((void *)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21702987C(*((void *)this + 4), v6, v4);
  return 0;
}

uint64_t sub_217029E5C(uint64_t result, uint64_t a2, __n128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  uint64_t v10 = a2;
  uint64_t v11 = (__n128 *)result;
  if (a7) {
    *a7 = 0;
  }
  if (a2)
  {
    do
    {
      __n128 v12 = *v11;
      __n128 v13 = v11[1];
      __n128 v14 = v11[3];
      __n128 v46 = v11[2];
      __n128 v47 = v14;
      __n128 v44 = v12;
      __n128 v45 = v13;
      __n128 v15 = v11[4];
      __n128 v16 = v11[5];
      __n128 v17 = v11[7];
      __n128 v50 = v11[6];
      __n128 v51 = v17;
      __n128 v48 = v15;
      __n128 v49 = v16;
      if (pxrInternal__aapl__pxrReserved__::GfMatrix4d::Factor((uint64_t)&v44, v56, (uint64_t)v53, v55, (uint64_t)&v52, (uint64_t)v54, 1.0e-10))
      {
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::Orthonormalize((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v55, 1);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationMatrix(v55, (uint64_t)&v36);
        RotationQuaterniounint64_t n = pxrInternal__aapl__pxrReserved__::GfMatrix3d::ExtractRotationQuaternion((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v36);
        v36.n128_u64[0] = v19;
        v36.n128_u64[1] = v20;
        v37.n128_u64[0] = v21;
        v37.n128_f64[1] = RotationQuaternion;
        pxrInternal__aapl__pxrReserved__::GfDualQuatd::SetTranslation((uint64_t)&v36, &v52);
        __n128 v22 = v36;
        __n128 v23 = v37;
        __n128 v24 = v39;
        a3[2] = v38;
        a3[3] = v24;
        *a3 = v22;
        a3[1] = v23;
        __n128 v42 = 0u;
        __n128 v43 = 0u;
        __n128 v40 = 0u;
        __n128 v41 = 0u;
        __n128 v38 = 0u;
        __n128 v39 = 0u;
        __n128 v36 = 0u;
        __n128 v37 = 0u;
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v35, 1.0);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate((uint64_t)v35, (uint64_t)&v52);
        __n128 v40 = v55[4];
        __n128 v41 = v55[5];
        __n128 v42 = v55[6];
        __n128 v43 = v55[7];
        __n128 v36 = v55[0];
        __n128 v37 = v55[1];
        __n128 v38 = v55[2];
        __n128 v39 = v55[3];
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v36.n128_f64, v25);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse(v36.n128_f64, 0, 0.0, (uint64_t)v31);
        void v35[4] = v48;
        v35[5] = v49;
        v35[6] = v50;
        v35[7] = v51;
        v35[0] = v44;
        v35[1] = v45;
        void v35[2] = v46;
        v35[3] = v47;
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v35[0].n128_f64, v31);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationMatrix(v35, (uint64_t)v32);
        float result = pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v33, (const pxrInternal__aapl__pxrReserved__::GfMatrix3d *)v32);
        long long v26 = v33[0];
        long long v27 = v33[1];
        *(_DWORD *)(a5 + 32) = v34;
        *(_OWORD *)a5 = v26;
        *(_OWORD *)(a5 + 16) = v27;
        if (a7 && !*a7)
        {
          pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((uint64_t)v35, 1.0);
          float result = pxrInternal__aapl__pxrReserved__::GfIsClose((pxrInternal__aapl__pxrReserved__ *)a5, (const pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v35, v28, 0.000001);
          if ((result & 1) == 0) {
            *a7 = 1;
          }
        }
      }
      else
      {
        a3[2] = 0u;
        a3[3] = 0u;
        *a3 = 0u;
        a3[1] = 0u;
        float result = pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((uint64_t)&v36, 1.0);
        unsigned __int32 v29 = v38.n128_u32[0];
        __n128 v30 = v37;
        *(__n128 *)a5 = v36;
        *(__n128 *)(a5 + 16) = v30;
        *(_DWORD *)(a5 + 32) = v29;
      }
      v11 += 8;
      a3 += 4;
      a5 += 36;
      --v10;
    }
    while (v10);
  }
  return result;
}

void *sub_21702A090(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2169B75D8(a1, a2);
    a1[1] += a2 << 6;
  }
  return a1;
}

void sub_21702A0D8(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21702A0F4(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21702A198(a1, a2);
    unint64_t v4 = (char *)a1[1];
    size_t v5 = 36 * ((36 * a2 - 36) / 0x24) + 36;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_21702A17C(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21702A198(void *a1, unint64_t a2)
{
  if (a2 >= 0x71C71C71C71C71DLL) {
    sub_21677CB10();
  }
  float result = (char *)sub_21702A1F0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[36 * v4];
  return result;
}

void *sub_21702A1F0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x71C71C71C71C71DLL) {
    sub_21677CA1C();
  }
  return operator new(36 * a2);
}

void sub_21702A23C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    uint64_t v57 = v6;
    uint64_t v58 = v5;
    uint64_t v59 = v3;
    uint64_t v60 = v4;
    uint64_t v8 = a2;
    while (1)
    {
      LODWORD(v48) = sub_216F2C3F8(*(float64x2_t **)a1, (float *)(**(void **)(a1 + 8) + 12 * v8)).u32[0];
      float v47 = v10;
      float v46 = v11;
      __n128 v13 = *(uint64_t **)(a1 + 16);
      __n128 v12 = *(uint64_t **)(a1 + 24);
      uint64_t v14 = *v13;
      __n128 v15 = *(int **)(a1 + 32);
      unsigned int v16 = sub_21702A52C(v8, (v13[1] - *v13) >> 6, v12, *v15);
      float64x2_t v18 = 0uLL;
      float64x2_t v19 = 0uLL;
      if ((v16 & 0x80000000) == 0)
      {
        unint64_t v20 = (float64x2_t *)(v14 + ((unint64_t)v16 << 6));
        float64x2_t v19 = *v20;
        float64x2_t v18 = v20[1];
      }
      float64x2_t v55 = 0u;
      float64x2_t v56 = 0u;
      float64x2_t v53 = 0u;
      float64x2_t v54 = 0u;
      uint64_t v21 = *v15;
      if ((int)v21 >= 1) {
        break;
      }
      float32x2_t v25 = 0;
      LODWORD(v26) = 0;
      float v30 = v46;
LABEL_18:
      unsigned int v40 = **(unsigned char **)(a1 + 40) == 0;
      if (**(unsigned char **)(a1 + 40)) {
        float v41 = *(float *)&v26;
      }
      else {
        float v41 = v30;
      }
      pxrInternal__aapl__pxrReserved__::GfDualQuatd::Normalize(&v53, 1.0e-10);
      float64x2_t v49 = vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v40), 0x1FuLL)), (int8x8_t)__PAIR64__(LODWORD(v47), LODWORD(v48)), (int8x8_t)v25));
      *(double *)&uint64_t v50 = v41;
      float v42 = pxrInternal__aapl__pxrReserved__::GfDualQuatd::Transform(v53.f64, v49.f64);
      *(float *)&double v43 = v43;
      *(float *)&double v44 = v44;
      uint64_t v45 = **(void **)(a1 + 8) + 12 * v8;
      *(float *)uint64_t v45 = v42;
      *(_DWORD *)(v45 + 4) = LODWORD(v43);
      *(_DWORD *)(v45 + 8) = LODWORD(v44);
      if (++v8 == a3) {
        return;
      }
    }
    uint64_t v22 = *v12;
    uint64_t v23 = v8 * v21;
    float64x2_t v24 = 0uLL;
    float32x2_t v25 = 0;
    double v26 = 0.0;
    float64x2_t v27 = 0uLL;
    float64x2_t v28 = 0uLL;
    float64x2_t v29 = 0uLL;
    float v30 = v46;
    while (1)
    {
      unint64_t v31 = *(unsigned int *)(v22 + 4 * v23);
      if ((v31 & 0x80000000) != 0 || v31 >= (v13[1] - *v13) >> 6) {
        break;
      }
      float v32 = *(float *)(v12[2] + 4 * v23);
      if (v32 != 0.0)
      {
        if (**(unsigned char **)(a1 + 40))
        {
          uint64_t v33 = **(void **)(a1 + 48) + 36 * v31;
          float32x2_t v25 = vadd_f32(v25, vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v33, v48), vmul_n_f32(*(float32x2_t *)(v33 + 12), v47)), vmul_n_f32(*(float32x2_t *)(v33 + 24), v46)), v32));
          *(float *)&double v26 = *(float *)&v26
                         + (float)(v32
                                 * (float)((float)((float)(v48 * *(float *)(v33 + 8))
                                                 + (float)(v47 * *(float *)(v33 + 20)))
                                         + (float)(v46 * *(float *)(v33 + 32))));
        }
        int v34 = (float64x2_t *)(*v13 + (v31 << 6));
        float64x2_t v35 = v34[1];
        float64x2_t v36 = vmulq_f64(v19, *v34);
        float64x2_t v37 = vmulq_f64(v18, v35);
        if (vaddq_f64(vaddq_f64(vaddq_f64(v36, (float64x2_t)vdupq_laneq_s64((int64x2_t)v36, 1)), v37), (float64x2_t)vdupq_laneq_s64((int64x2_t)v37, 1)).f64[0] < 0.0)float v32 = -v32; {
        double v38 = v32;
        }
        float64x2_t v24 = vaddq_f64(vmulq_n_f64(*v34, v38), v24);
        float64x2_t v27 = vaddq_f64(vmulq_n_f64(v35, v38), v27);
        float64x2_t v28 = vaddq_f64(vmulq_n_f64(v34[2], v38), v28);
        float64x2_t v39 = vmulq_n_f64(v34[3], v38);
        float64x2_t v53 = v24;
        float64x2_t v54 = v27;
        float64x2_t v29 = vaddq_f64(v39, v29);
        float64x2_t v55 = v28;
        float64x2_t v56 = v29;
      }
      ++v23;
      if (!--v21) {
        goto LABEL_18;
      }
    }
    *(void *)&v49.f64[0] = "usdSkel/utils.cpp";
    *(void *)&v49.f64[1] = "operator()";
    uint64_t v50 = 1527;
    __n128 v51 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinPointsDQS(const pxrInternal__aapl__pxrReser"
          "ved__::GfMatrix4d &, TfSpan<const GfMatrix4d>, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::"
          "_NonInterleavedInfluencesFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    char v52 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v49, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v17, v18.f64[0], v19.f64[0], v26, v24.f64[0], v27.f64[0], v28.f64[0], v29.f64[0], v31, v23, (v13[1] - *v13) >> 6);
    atomic_store(1u, *(unsigned __int8 **)(a1 + 56));
  }
}

uint64_t sub_21702A52C(uint64_t a1, unint64_t a2, void *a3, int a4)
{
  if (a4 < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a1 * a4;
  uint64_t v6 = (float *)(a3[2] + 4 * v5);
  unint64_t v7 = (unsigned int *)(*a3 + 4 * v5);
  uint64_t result = 0xFFFFFFFFLL;
  float v9 = -1.0;
  do
  {
    unsigned int v11 = *v7++;
    unint64_t v10 = v11;
    if ((v11 & 0x80000000) == 0 && v10 < a2)
    {
      BOOL v13 = v9 < *v6 || (int)result < 0;
      if (v13) {
        uint64_t result = v10;
      }
      else {
        uint64_t result = result;
      }
      if (v13) {
        float v9 = *v6;
      }
    }
    ++v6;
    --v4;
  }
  while (v4);
  return result;
}

uint64_t sub_21702A5A0(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  uint64_t v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        unint64_t v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)unint64_t v10 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C76FDA0;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)float64x2_t v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      uint64_t v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)uint64_t v21 = &unk_26C751420;
      __dmb(0xBu);
      unsigned char v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      uint64_t v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C76FDA0;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_21702A23C(*((void *)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21702A23C(*((void *)this + 4), v6, v4);
  return 0;
}

void sub_21702A9D4(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    uint64_t v32 = v8;
    uint64_t v33 = v7;
    uint64_t v34 = v6;
    uint64_t v35 = v5;
    uint64_t v36 = v3;
    uint64_t v37 = v4;
    unint64_t v10 = a2;
    while (1)
    {
      int v31 = 0;
      uint64_t v30 = 0;
      LODWORD(v30) = sub_21702AB78(*(float32x2_t **)a1, (float *)(**(void **)(a1 + 8) + 12 * v10)).u32[0];
      HIDWORD(v30) = v12;
      int v31 = v14;
      int v15 = **(_DWORD **)(a1 + 16);
      if (v15 >= 1) {
        break;
      }
      float v19 = 0.0;
      float v18 = 0.0;
      float v17 = 0.0;
LABEL_12:
      float64x2_t v27 = (float *)(**(void **)(a1 + 8) + 12 * v10);
      *float64x2_t v27 = v17;
      v27[1] = v18;
      _OWORD v27[2] = v19;
      if (++v10 == a3) {
        return;
      }
    }
    uint64_t v16 = 0;
    float v17 = 0.0;
    float v18 = 0.0;
    float v19 = 0.0;
    while (1)
    {
      uint64_t v20 = v16 + v10 * v15;
      uint64_t v21 = *(void **)(a1 + 24);
      unint64_t v22 = *(unsigned int *)(*v21 + 4 * v20);
      if ((v22 & 0x80000000) != 0) {
        break;
      }
      uint64_t v23 = *(void **)(a1 + 32);
      if (v23[1] <= v22) {
        break;
      }
      float v24 = *(float *)(v21[2] + 4 * v20);
      if (v24 != 0.0)
      {
        float v17 = v17 + (float)(v24 * sub_21701BC38((float32x2_t *)(*v23 + (v22 << 6)), (float *)&v30).f32[0]);
        float v18 = v18 + (float)(v24 * v25);
        float v19 = v19 + (float)(v24 * v26);
        int v15 = **(_DWORD **)(a1 + 16);
      }
      if (++v16 >= v15) {
        goto LABEL_12;
      }
    }
    v28[0] = "usdSkel/utils.cpp";
    v28[1] = "operator()";
    void v28[2] = 1418;
    v28[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinPointsLBS(const pxrInternal__aapl__pxrRe"
             "served__::GfMatrix4f &, TfSpan<const GfMatrix4f>, const pxrInternal__aapl__pxrReserved__::(anonymous namesp"
             "ace)::_NonInterleavedInfluencesFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()"
             "(size_t, size_t) const";
    char v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v28, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", *(char **)&v13, v22, v16 + v10 * v15, *(void *)(*(void *)(a1 + 32) + 8));
    atomic_store(1u, *(unsigned __int8 **)(a1 + 40));
  }
}

float32x2_t sub_21702AB78(float32x2_t *a1, float *a2)
{
  float v2 = a2[1];
  float v3 = a2[2];
  float v4 = a1[7].f32[1]
     + (float)((float)((float)(*a2 * a1[1].f32[1]) + (float)(v2 * a1[3].f32[1])) + (float)(v3 * a1[5].f32[1]));
  if (v4 == 0.0) {
    float v5 = 1.0;
  }
  else {
    float v5 = 1.0 / v4;
  }
  return vmul_n_f32(vadd_f32(a1[6], vadd_f32(vadd_f32(vmul_n_f32(*a1, *a2), vmul_n_f32(a1[2], v2)), vmul_n_f32(a1[4], v3))), v5);
}

uint64_t sub_21702AC10(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  float v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        unint64_t v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)unint64_t v10 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C76FDE8;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)float64x2_t v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      uint64_t v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)uint64_t v21 = &unk_26C751420;
      __dmb(0xBu);
      unsigned char v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      uint64_t v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C76FDE8;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_21702A9D4(*((void *)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21702A9D4(*((void *)this + 4), v6, v4);
  return 0;
}

uint64_t sub_21702B044(uint64_t result, uint64_t a2, __n128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  uint64_t v10 = a2;
  uint64_t v11 = (const pxrInternal__aapl__pxrReserved__::GfMatrix4f *)result;
  if (a7) {
    *a7 = 0;
  }
  if (a2)
  {
    __n128 v12 = 0uLL;
    do
    {
      __n128 v45 = v12;
      __n128 v46 = v12;
      __n128 v43 = v12;
      __n128 v44 = v12;
      __n128 v41 = v12;
      __n128 v42 = v12;
      __n128 v39 = v12;
      __n128 v40 = v12;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::GfMatrix4d((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v39, v11);
      if (pxrInternal__aapl__pxrReserved__::GfMatrix4d::Factor((uint64_t)&v39, v51, (uint64_t)v48, v50, (uint64_t)&v47, (uint64_t)v49, 1.0e-10))
      {
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::Orthonormalize((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v50, 1);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationMatrix(v50, (uint64_t)&v31);
        RotationQuaterniounint64_t n = pxrInternal__aapl__pxrReserved__::GfMatrix3d::ExtractRotationQuaternion((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v31);
        v31.n128_u64[0] = v14;
        v31.n128_u64[1] = v15;
        v32.n128_u64[0] = v16;
        v32.n128_f64[1] = RotationQuaternion;
        pxrInternal__aapl__pxrReserved__::GfDualQuatd::SetTranslation((uint64_t)&v31, &v47);
        __n128 v17 = v31;
        __n128 v18 = v32;
        __n128 v19 = v34;
        a3[2] = v33;
        a3[3] = v19;
        *a3 = v17;
        a3[1] = v18;
        __n128 v37 = 0u;
        __n128 v38 = 0u;
        __n128 v35 = 0u;
        __n128 v36 = 0u;
        __n128 v33 = 0u;
        __n128 v34 = 0u;
        __n128 v31 = 0u;
        __n128 v32 = 0u;
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v30, 1.0);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate((uint64_t)v30, (uint64_t)&v47);
        __n128 v35 = v50[4];
        __n128 v36 = v50[5];
        __n128 v37 = v50[6];
        __n128 v38 = v50[7];
        __n128 v31 = v50[0];
        __n128 v32 = v50[1];
        __n128 v33 = v50[2];
        __n128 v34 = v50[3];
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v31.n128_f64, v20);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse(v31.n128_f64, 0, 0.0, (uint64_t)v26);
        v30[4] = v43;
        v30[5] = v44;
        v30[6] = v45;
        v30[7] = v46;
        v30[0] = v39;
        v30[1] = v40;
        void v30[2] = v41;
        v30[3] = v42;
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v30[0].n128_f64, v26);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationMatrix(v30, (uint64_t)v27);
        uint64_t result = pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v28, (const pxrInternal__aapl__pxrReserved__::GfMatrix3d *)v27);
        long long v21 = v28[0];
        long long v22 = v28[1];
        *(_DWORD *)(a5 + 32) = v29;
        *(_OWORD *)a5 = v21;
        *(_OWORD *)(a5 + 16) = v22;
        if (a7 && !*a7)
        {
          pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((uint64_t)v30, 1.0);
          uint64_t result = pxrInternal__aapl__pxrReserved__::GfIsClose((pxrInternal__aapl__pxrReserved__ *)a5, (const pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v30, v23, 0.000001);
          __n128 v12 = 0uLL;
          if ((result & 1) == 0) {
            *a7 = 1;
          }
          goto LABEL_12;
        }
      }
      else
      {
        a3[2] = 0u;
        a3[3] = 0u;
        *a3 = 0u;
        a3[1] = 0u;
        uint64_t result = pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((uint64_t)&v31, 1.0);
        unsigned __int32 v24 = v33.n128_u32[0];
        __n128 v25 = v32;
        *(__n128 *)a5 = v31;
        *(__n128 *)(a5 + 16) = v25;
        *(_DWORD *)(a5 + 32) = v24;
      }
      __n128 v12 = 0uLL;
LABEL_12:
      uint64_t v11 = (const pxrInternal__aapl__pxrReserved__::GfMatrix4f *)((char *)v11 + 64);
      a3 += 4;
      a5 += 36;
      --v10;
    }
    while (v10);
  }
  return result;
}

void sub_21702B280(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    uint64_t v57 = v6;
    uint64_t v58 = v5;
    uint64_t v59 = v3;
    uint64_t v60 = v4;
    uint64_t v8 = a2;
    while (1)
    {
      LODWORD(v48) = sub_21702AB78(*(float32x2_t **)a1, (float *)(**(void **)(a1 + 8) + 12 * v8)).u32[0];
      float v47 = v10;
      float v46 = v11;
      uint64_t v13 = *(uint64_t **)(a1 + 16);
      __n128 v12 = *(uint64_t **)(a1 + 24);
      uint64_t v14 = *v13;
      unint64_t v15 = *(int **)(a1 + 32);
      unsigned int v16 = sub_21702A52C(v8, (v13[1] - *v13) >> 6, v12, *v15);
      float64x2_t v18 = 0uLL;
      float64x2_t v19 = 0uLL;
      if ((v16 & 0x80000000) == 0)
      {
        unsigned __int8 v20 = (float64x2_t *)(v14 + ((unint64_t)v16 << 6));
        float64x2_t v19 = *v20;
        float64x2_t v18 = v20[1];
      }
      float64x2_t v55 = 0u;
      float64x2_t v56 = 0u;
      float64x2_t v53 = 0u;
      float64x2_t v54 = 0u;
      uint64_t v21 = *v15;
      if ((int)v21 >= 1) {
        break;
      }
      float32x2_t v25 = 0;
      LODWORD(v26) = 0;
      float v30 = v46;
LABEL_18:
      unsigned int v40 = **(unsigned char **)(a1 + 40) == 0;
      if (**(unsigned char **)(a1 + 40)) {
        float v41 = *(float *)&v26;
      }
      else {
        float v41 = v30;
      }
      pxrInternal__aapl__pxrReserved__::GfDualQuatd::Normalize(&v53, 1.0e-10);
      float64x2_t v49 = vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v40), 0x1FuLL)), (int8x8_t)__PAIR64__(LODWORD(v47), LODWORD(v48)), (int8x8_t)v25));
      *(double *)&uint64_t v50 = v41;
      float v42 = pxrInternal__aapl__pxrReserved__::GfDualQuatd::Transform(v53.f64, v49.f64);
      *(float *)&double v43 = v43;
      *(float *)&double v44 = v44;
      uint64_t v45 = **(void **)(a1 + 8) + 12 * v8;
      *(float *)uint64_t v45 = v42;
      *(_DWORD *)(v45 + 4) = LODWORD(v43);
      *(_DWORD *)(v45 + 8) = LODWORD(v44);
      if (++v8 == a3) {
        return;
      }
    }
    uint64_t v22 = *v12;
    uint64_t v23 = v8 * v21;
    float64x2_t v24 = 0uLL;
    float32x2_t v25 = 0;
    double v26 = 0.0;
    float64x2_t v27 = 0uLL;
    float64x2_t v28 = 0uLL;
    float64x2_t v29 = 0uLL;
    float v30 = v46;
    while (1)
    {
      unint64_t v31 = *(unsigned int *)(v22 + 4 * v23);
      if ((v31 & 0x80000000) != 0 || v31 >= (v13[1] - *v13) >> 6) {
        break;
      }
      float v32 = *(float *)(v12[2] + 4 * v23);
      if (v32 != 0.0)
      {
        if (**(unsigned char **)(a1 + 40))
        {
          uint64_t v33 = **(void **)(a1 + 48) + 36 * v31;
          float32x2_t v25 = vadd_f32(v25, vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v33, v48), vmul_n_f32(*(float32x2_t *)(v33 + 12), v47)), vmul_n_f32(*(float32x2_t *)(v33 + 24), v46)), v32));
          *(float *)&double v26 = *(float *)&v26
                         + (float)(v32
                                 * (float)((float)((float)(v48 * *(float *)(v33 + 8))
                                                 + (float)(v47 * *(float *)(v33 + 20)))
                                         + (float)(v46 * *(float *)(v33 + 32))));
        }
        __n128 v34 = (float64x2_t *)(*v13 + (v31 << 6));
        float64x2_t v35 = v34[1];
        float64x2_t v36 = vmulq_f64(v19, *v34);
        float64x2_t v37 = vmulq_f64(v18, v35);
        if (vaddq_f64(vaddq_f64(vaddq_f64(v36, (float64x2_t)vdupq_laneq_s64((int64x2_t)v36, 1)), v37), (float64x2_t)vdupq_laneq_s64((int64x2_t)v37, 1)).f64[0] < 0.0)float v32 = -v32; {
        double v38 = v32;
        }
        float64x2_t v24 = vaddq_f64(vmulq_n_f64(*v34, v38), v24);
        float64x2_t v27 = vaddq_f64(vmulq_n_f64(v35, v38), v27);
        float64x2_t v28 = vaddq_f64(vmulq_n_f64(v34[2], v38), v28);
        float64x2_t v39 = vmulq_n_f64(v34[3], v38);
        float64x2_t v53 = v24;
        float64x2_t v54 = v27;
        float64x2_t v29 = vaddq_f64(v39, v29);
        float64x2_t v55 = v28;
        float64x2_t v56 = v29;
      }
      ++v23;
      if (!--v21) {
        goto LABEL_18;
      }
    }
    *(void *)&v49.f64[0] = "usdSkel/utils.cpp";
    *(void *)&v49.f64[1] = "operator()";
    uint64_t v50 = 1527;
    __n128 v51 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinPointsDQS(const pxrInternal__aapl__pxrReser"
          "ved__::GfMatrix4f &, TfSpan<const GfMatrix4f>, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::"
          "_NonInterleavedInfluencesFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    char v52 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v49, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v17, v18.f64[0], v19.f64[0], v26, v24.f64[0], v27.f64[0], v28.f64[0], v29.f64[0], v31, v23, (v13[1] - *v13) >> 6);
    atomic_store(1u, *(unsigned __int8 **)(a1 + 56));
  }
}

uint64_t sub_21702B578(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  uint64_t v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        float v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)float v10 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C76FE30;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)float64x2_t v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      uint64_t v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)uint64_t v21 = &unk_26C751420;
      __dmb(0xBu);
      unsigned char v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      uint64_t v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C76FE30;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_21702B280(*((void *)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21702B280(*((void *)this + 4), v6, v4);
  return 0;
}

void sub_21702B9AC(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    uint64_t v33 = v8;
    uint64_t v34 = v7;
    uint64_t v35 = v6;
    uint64_t v36 = v5;
    uint64_t v37 = v3;
    uint64_t v38 = v4;
    unint64_t v10 = a2;
    while (1)
    {
      int v32 = 0;
      uint64_t v31 = 0;
      LODWORD(v31) = sub_216F2C3F8(*(float64x2_t **)a1, (float *)(**(void **)(a1 + 8) + 12 * v10)).u32[0];
      HIDWORD(v31) = v12;
      int v32 = v14;
      int v15 = **(_DWORD **)(a1 + 16);
      if (v15 >= 1) {
        break;
      }
      float v19 = 0.0;
      float v18 = 0.0;
      float v17 = 0.0;
LABEL_12:
      long long v28 = (float *)(**(void **)(a1 + 8) + 12 * v10);
      *long long v28 = v17;
      v28[1] = v18;
      _OWORD v28[2] = v19;
      if (++v10 == a3) {
        return;
      }
    }
    uint64_t v16 = 0;
    float v17 = 0.0;
    float v18 = 0.0;
    float v19 = 0.0;
    while (1)
    {
      uint64_t v20 = v16 + v10 * v15;
      uint64_t v21 = **(void **)(a1 + 24);
      float v22 = *(float *)(v21 + 8 * v20);
      uint64_t v23 = (int)v22;
      if ((v23 & 0x80000000) != 0) {
        break;
      }
      long long v24 = *(void **)(a1 + 32);
      if (v24[1] <= (unint64_t)v23) {
        break;
      }
      float v25 = *(float *)(v21 + 8 * v20 + 4);
      if (v25 != 0.0)
      {
        float v17 = v17 + (float)(v25 * sub_21701BAB8((float64x2_t *)(*v24 + (v23 << 7)), (float *)&v31).f32[0]);
        float v18 = v18 + (float)(v25 * v26);
        float v19 = v19 + (float)(v25 * v27);
        int v15 = **(_DWORD **)(a1 + 16);
      }
      if (++v16 >= v15) {
        goto LABEL_12;
      }
    }
    v29[0] = "usdSkel/utils.cpp";
    v29[1] = "operator()";
    void v29[2] = 1418;
    v29[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinPointsLBS(const pxrInternal__aapl__pxrRe"
             "served__::GfMatrix4d &, TfSpan<const GfMatrix4d>, const pxrInternal__aapl__pxrReserved__::(anonymous namesp"
             "ace)::_InterleavedInfluencesFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(si"
             "ze_t, size_t) const";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v29, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", *(char **)&v13, (int)v22, v16 + v10 * v15, *(void *)(*(void *)(a1 + 32) + 8));
    atomic_store(1u, *(unsigned __int8 **)(a1 + 40));
  }
}

uint64_t sub_21702BB60(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  uint64_t v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        unint64_t v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)unint64_t v10 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C76FE78;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)float v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      uint64_t v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)uint64_t v21 = &unk_26C751420;
      __dmb(0xBu);
      unsigned char v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      uint64_t v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C76FE78;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_21702B9AC(*((void *)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21702B9AC(*((void *)this + 4), v6, v4);
  return 0;
}

void sub_21702BF94(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    uint64_t v59 = v6;
    uint64_t v60 = v5;
    uint64_t v61 = v3;
    uint64_t v62 = v4;
    uint64_t v8 = a2;
    for (uint64_t i = 8 * a2; ; i += 8)
    {
      LODWORD(v50) = sub_216F2C3F8(*(float64x2_t **)a1, (float *)(**(void **)(a1 + 8) + 12 * v8)).u32[0];
      float v49 = v11;
      float v48 = v12;
      unint64_t v14 = *(uint64_t **)(a1 + 16);
      uint64_t v13 = *(void **)(a1 + 24);
      uint64_t v15 = *v14;
      unsigned int v16 = *(int **)(a1 + 32);
      unsigned int v17 = sub_21702C298(v8, (v14[1] - *v14) >> 6, v13, *v16);
      float64x2_t v19 = 0uLL;
      float64x2_t v20 = 0uLL;
      if ((v17 & 0x80000000) == 0)
      {
        uint64_t v21 = (float64x2_t *)(v15 + ((unint64_t)v17 << 6));
        float64x2_t v20 = *v21;
        float64x2_t v19 = v21[1];
      }
      float64x2_t v57 = 0u;
      float64x2_t v58 = 0u;
      float64x2_t v55 = 0u;
      float64x2_t v56 = 0u;
      uint64_t v22 = *v16;
      if ((int)v22 >= 1) {
        break;
      }
      float32x2_t v26 = 0;
      LODWORD(v27) = 0;
      float v31 = v48;
LABEL_18:
      unsigned int v42 = **(unsigned char **)(a1 + 40) == 0;
      if (**(unsigned char **)(a1 + 40)) {
        float v43 = *(float *)&v27;
      }
      else {
        float v43 = v31;
      }
      pxrInternal__aapl__pxrReserved__::GfDualQuatd::Normalize(&v55, 1.0e-10);
      float64x2_t v51 = vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v42), 0x1FuLL)), (int8x8_t)__PAIR64__(LODWORD(v49), LODWORD(v50)), (int8x8_t)v26));
      *(double *)&uint64_t v52 = v43;
      float v44 = pxrInternal__aapl__pxrReserved__::GfDualQuatd::Transform(v55.f64, v51.f64);
      *(float *)&double v45 = v45;
      *(float *)&double v46 = v46;
      uint64_t v47 = **(void **)(a1 + 8) + 12 * v8;
      *(float *)uint64_t v47 = v44;
      *(_DWORD *)(v47 + 4) = LODWORD(v45);
      *(_DWORD *)(v47 + 8) = LODWORD(v46);
      if (++v8 == a3) {
        return;
      }
    }
    uint64_t v23 = v8 * v22;
    long long v24 = (float *)(*v13 + i * v22 + 4);
    float64x2_t v25 = 0uLL;
    float32x2_t v26 = 0;
    double v27 = 0.0;
    float64x2_t v28 = 0uLL;
    float64x2_t v29 = 0uLL;
    float64x2_t v30 = 0uLL;
    float v31 = v48;
    while (1)
    {
      float v32 = *(v24 - 1);
      unint64_t v33 = (int)v32;
      if ((v33 & 0x80000000) != 0 || v33 >= (v14[1] - *v14) >> 6) {
        break;
      }
      float v34 = *v24;
      if (*v24 != 0.0)
      {
        if (**(unsigned char **)(a1 + 40))
        {
          uint64_t v35 = **(void **)(a1 + 48) + 36 * v33;
          float32x2_t v26 = vadd_f32(v26, vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v35, v50), vmul_n_f32(*(float32x2_t *)(v35 + 12), v49)), vmul_n_f32(*(float32x2_t *)(v35 + 24), v48)), v34));
          *(float *)&double v27 = *(float *)&v27
                         + (float)(v34
                                 * (float)((float)((float)(v50 * *(float *)(v35 + 8))
                                                 + (float)(v49 * *(float *)(v35 + 20)))
                                         + (float)(v48 * *(float *)(v35 + 32))));
        }
        uint64_t v36 = (float64x2_t *)(*v14 + (v33 << 6));
        float64x2_t v37 = v36[1];
        float64x2_t v38 = vmulq_f64(v20, *v36);
        float64x2_t v39 = vmulq_f64(v19, v37);
        if (vaddq_f64(vaddq_f64(vaddq_f64(v38, (float64x2_t)vdupq_laneq_s64((int64x2_t)v38, 1)), v39), (float64x2_t)vdupq_laneq_s64((int64x2_t)v39, 1)).f64[0] < 0.0)float v34 = -v34; {
        double v40 = v34;
        }
        float64x2_t v25 = vaddq_f64(vmulq_n_f64(*v36, v40), v25);
        float64x2_t v28 = vaddq_f64(vmulq_n_f64(v37, v40), v28);
        float64x2_t v29 = vaddq_f64(vmulq_n_f64(v36[2], v40), v29);
        float64x2_t v41 = vmulq_n_f64(v36[3], v40);
        float64x2_t v55 = v25;
        float64x2_t v56 = v28;
        float64x2_t v30 = vaddq_f64(v41, v30);
        float64x2_t v57 = v29;
        float64x2_t v58 = v30;
      }
      ++v23;
      v24 += 2;
      if (!--v22) {
        goto LABEL_18;
      }
    }
    *(void *)&v51.f64[0] = "usdSkel/utils.cpp";
    *(void *)&v51.f64[1] = "operator()";
    uint64_t v52 = 1527;
    float64x2_t v53 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinPointsDQS(const pxrInternal__aapl__pxrReser"
          "ved__::GfMatrix4d &, TfSpan<const GfMatrix4d>, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::"
          "_InterleavedInfluencesFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    char v54 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v51, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v18, v19.f64[0], v20.f64[0], v27, v25.f64[0], v28.f64[0], v29.f64[0], v30.f64[0], (int)v32, v23, (v14[1] - *v14) >> 6);
    atomic_store(1u, *(unsigned __int8 **)(a1 + 56));
  }
}

uint64_t sub_21702C298(uint64_t a1, unint64_t a2, void *a3, int a4)
{
  if (a4 < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = a4;
  uint64_t v5 = (float *)(*a3 + 8 * a1 * a4 + 4);
  uint64_t result = 0xFFFFFFFFLL;
  float v7 = -1.0;
  do
  {
    unint64_t v8 = (int)*(v5 - 1);
    if ((v8 & 0x80000000) == 0 && v8 < a2)
    {
      BOOL v10 = v7 < *v5 || (int)result < 0;
      if (v10) {
        uint64_t result = v8;
      }
      else {
        uint64_t result = result;
      }
      if (v10) {
        float v7 = *v5;
      }
    }
    v5 += 2;
    --v4;
  }
  while (v4);
  return result;
}

uint64_t sub_21702C30C(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  uint64_t v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        BOOL v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)BOOL v10 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C76FEC0;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)double v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      uint64_t v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)uint64_t v21 = &unk_26C751420;
      __dmb(0xBu);
      unsigned char v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      uint64_t v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C76FEC0;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_21702BF94(*((void *)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21702BF94(*((void *)this + 4), v6, v4);
  return 0;
}

void sub_21702C740(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    uint64_t v33 = v8;
    uint64_t v34 = v7;
    uint64_t v35 = v6;
    uint64_t v36 = v5;
    uint64_t v37 = v3;
    uint64_t v38 = v4;
    unint64_t v10 = a2;
    while (1)
    {
      int v32 = 0;
      uint64_t v31 = 0;
      LODWORD(v31) = sub_21702AB78(*(float32x2_t **)a1, (float *)(**(void **)(a1 + 8) + 12 * v10)).u32[0];
      HIDWORD(v31) = v12;
      int v32 = v14;
      int v15 = **(_DWORD **)(a1 + 16);
      if (v15 >= 1) {
        break;
      }
      float v19 = 0.0;
      float v18 = 0.0;
      float v17 = 0.0;
LABEL_12:
      long long v28 = (float *)(**(void **)(a1 + 8) + 12 * v10);
      *long long v28 = v17;
      v28[1] = v18;
      _OWORD v28[2] = v19;
      if (++v10 == a3) {
        return;
      }
    }
    uint64_t v16 = 0;
    float v17 = 0.0;
    float v18 = 0.0;
    float v19 = 0.0;
    while (1)
    {
      uint64_t v20 = v16 + v10 * v15;
      uint64_t v21 = **(void **)(a1 + 24);
      float v22 = *(float *)(v21 + 8 * v20);
      uint64_t v23 = (int)v22;
      if ((v23 & 0x80000000) != 0) {
        break;
      }
      long long v24 = *(void **)(a1 + 32);
      if (v24[1] <= (unint64_t)v23) {
        break;
      }
      float v25 = *(float *)(v21 + 8 * v20 + 4);
      if (v25 != 0.0)
      {
        float v17 = v17 + (float)(v25 * sub_21701BC38((float32x2_t *)(*v24 + (v23 << 6)), (float *)&v31).f32[0]);
        float v18 = v18 + (float)(v25 * v26);
        float v19 = v19 + (float)(v25 * v27);
        int v15 = **(_DWORD **)(a1 + 16);
      }
      if (++v16 >= v15) {
        goto LABEL_12;
      }
    }
    v29[0] = "usdSkel/utils.cpp";
    v29[1] = "operator()";
    void v29[2] = 1418;
    v29[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinPointsLBS(const pxrInternal__aapl__pxrRe"
             "served__::GfMatrix4f &, TfSpan<const GfMatrix4f>, const pxrInternal__aapl__pxrReserved__::(anonymous namesp"
             "ace)::_InterleavedInfluencesFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(si"
             "ze_t, size_t) const";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v29, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", *(char **)&v13, (int)v22, v16 + v10 * v15, *(void *)(*(void *)(a1 + 32) + 8));
    atomic_store(1u, *(unsigned __int8 **)(a1 + 40));
  }
}

uint64_t sub_21702C8F4(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  uint64_t v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        unint64_t v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)unint64_t v10 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C76FF08;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)float v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      uint64_t v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)uint64_t v21 = &unk_26C751420;
      __dmb(0xBu);
      unsigned char v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      uint64_t v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C76FF08;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_21702C740(*((void *)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21702C740(*((void *)this + 4), v6, v4);
  return 0;
}

void sub_21702CD28(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    uint64_t v59 = v6;
    uint64_t v60 = v5;
    uint64_t v61 = v3;
    uint64_t v62 = v4;
    uint64_t v8 = a2;
    for (uint64_t i = 8 * a2; ; i += 8)
    {
      LODWORD(v50) = sub_21702AB78(*(float32x2_t **)a1, (float *)(**(void **)(a1 + 8) + 12 * v8)).u32[0];
      float v49 = v11;
      float v48 = v12;
      unint64_t v14 = *(uint64_t **)(a1 + 16);
      uint64_t v13 = *(void **)(a1 + 24);
      uint64_t v15 = *v14;
      unsigned int v16 = *(int **)(a1 + 32);
      unsigned int v17 = sub_21702C298(v8, (v14[1] - *v14) >> 6, v13, *v16);
      float64x2_t v19 = 0uLL;
      float64x2_t v20 = 0uLL;
      if ((v17 & 0x80000000) == 0)
      {
        uint64_t v21 = (float64x2_t *)(v15 + ((unint64_t)v17 << 6));
        float64x2_t v20 = *v21;
        float64x2_t v19 = v21[1];
      }
      float64x2_t v57 = 0u;
      float64x2_t v58 = 0u;
      float64x2_t v55 = 0u;
      float64x2_t v56 = 0u;
      uint64_t v22 = *v16;
      if ((int)v22 >= 1) {
        break;
      }
      float32x2_t v26 = 0;
      LODWORD(v27) = 0;
      float v31 = v48;
LABEL_18:
      unsigned int v42 = **(unsigned char **)(a1 + 40) == 0;
      if (**(unsigned char **)(a1 + 40)) {
        float v43 = *(float *)&v27;
      }
      else {
        float v43 = v31;
      }
      pxrInternal__aapl__pxrReserved__::GfDualQuatd::Normalize(&v55, 1.0e-10);
      float64x2_t v51 = vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v42), 0x1FuLL)), (int8x8_t)__PAIR64__(LODWORD(v49), LODWORD(v50)), (int8x8_t)v26));
      *(double *)&uint64_t v52 = v43;
      float v44 = pxrInternal__aapl__pxrReserved__::GfDualQuatd::Transform(v55.f64, v51.f64);
      *(float *)&double v45 = v45;
      *(float *)&double v46 = v46;
      uint64_t v47 = **(void **)(a1 + 8) + 12 * v8;
      *(float *)uint64_t v47 = v44;
      *(_DWORD *)(v47 + 4) = LODWORD(v45);
      *(_DWORD *)(v47 + 8) = LODWORD(v46);
      if (++v8 == a3) {
        return;
      }
    }
    uint64_t v23 = v8 * v22;
    long long v24 = (float *)(*v13 + i * v22 + 4);
    float64x2_t v25 = 0uLL;
    float32x2_t v26 = 0;
    double v27 = 0.0;
    float64x2_t v28 = 0uLL;
    float64x2_t v29 = 0uLL;
    float64x2_t v30 = 0uLL;
    float v31 = v48;
    while (1)
    {
      float v32 = *(v24 - 1);
      unint64_t v33 = (int)v32;
      if ((v33 & 0x80000000) != 0 || v33 >= (v14[1] - *v14) >> 6) {
        break;
      }
      float v34 = *v24;
      if (*v24 != 0.0)
      {
        if (**(unsigned char **)(a1 + 40))
        {
          uint64_t v35 = **(void **)(a1 + 48) + 36 * v33;
          float32x2_t v26 = vadd_f32(v26, vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v35, v50), vmul_n_f32(*(float32x2_t *)(v35 + 12), v49)), vmul_n_f32(*(float32x2_t *)(v35 + 24), v48)), v34));
          *(float *)&double v27 = *(float *)&v27
                         + (float)(v34
                                 * (float)((float)((float)(v50 * *(float *)(v35 + 8))
                                                 + (float)(v49 * *(float *)(v35 + 20)))
                                         + (float)(v48 * *(float *)(v35 + 32))));
        }
        uint64_t v36 = (float64x2_t *)(*v14 + (v33 << 6));
        float64x2_t v37 = v36[1];
        float64x2_t v38 = vmulq_f64(v20, *v36);
        float64x2_t v39 = vmulq_f64(v19, v37);
        if (vaddq_f64(vaddq_f64(vaddq_f64(v38, (float64x2_t)vdupq_laneq_s64((int64x2_t)v38, 1)), v39), (float64x2_t)vdupq_laneq_s64((int64x2_t)v39, 1)).f64[0] < 0.0)float v34 = -v34; {
        double v40 = v34;
        }
        float64x2_t v25 = vaddq_f64(vmulq_n_f64(*v36, v40), v25);
        float64x2_t v28 = vaddq_f64(vmulq_n_f64(v37, v40), v28);
        float64x2_t v29 = vaddq_f64(vmulq_n_f64(v36[2], v40), v29);
        float64x2_t v41 = vmulq_n_f64(v36[3], v40);
        float64x2_t v55 = v25;
        float64x2_t v56 = v28;
        float64x2_t v30 = vaddq_f64(v41, v30);
        float64x2_t v57 = v29;
        float64x2_t v58 = v30;
      }
      ++v23;
      v24 += 2;
      if (!--v22) {
        goto LABEL_18;
      }
    }
    *(void *)&v51.f64[0] = "usdSkel/utils.cpp";
    *(void *)&v51.f64[1] = "operator()";
    uint64_t v52 = 1527;
    float64x2_t v53 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinPointsDQS(const pxrInternal__aapl__pxrReser"
          "ved__::GfMatrix4f &, TfSpan<const GfMatrix4f>, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::"
          "_InterleavedInfluencesFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    char v54 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v51, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v18, v19.f64[0], v20.f64[0], v27, v25.f64[0], v28.f64[0], v29.f64[0], v30.f64[0], (int)v32, v23, (v14[1] - *v14) >> 6);
    atomic_store(1u, *(unsigned __int8 **)(a1 + 56));
  }
}

uint64_t sub_21702D034(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  uint64_t v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        unint64_t v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)unint64_t v10 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C76FF50;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)double v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      uint64_t v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)uint64_t v21 = &unk_26C751420;
      __dmb(0xBu);
      unsigned char v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      uint64_t v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C76FF50;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_21702CD28(*((void *)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21702CD28(*((void *)this + 4), v6, v4);
  return 0;
}

void sub_21702D468(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    uint64_t v37 = v10;
    uint64_t v38 = v9;
    uint64_t v39 = v8;
    uint64_t v40 = v7;
    uint64_t v41 = v6;
    uint64_t v42 = v5;
    uint64_t v43 = v3;
    uint64_t v44 = v4;
    unint64_t v12 = a2;
    while (1)
    {
      int v36 = 0;
      uint64_t v35 = 0;
      LODWORD(v35) = pxrInternal__aapl__pxrReserved__::operator*((float *)(**(void **)a1 + 12 * v12), *(void *)(a1 + 8)).u32[0];
      HIDWORD(v35) = v14;
      int v36 = v16;
      int v17 = **(_DWORD **)(a1 + 24);
      if (v17 >= 1) {
        break;
      }
      float v21 = 0.0;
      float v20 = 0.0;
      float v19 = 0.0;
LABEL_12:
      double v29 = 1.0 / fmaxf(sqrtf((float)(v21 * v21) + (float)((float)(v20 * v20) + (float)(v19 * v19))), 1.0e-10);
      float v30 = v29 * v19;
      float v31 = v29 * v20;
      *(float *)&double v29 = v29 * v21;
      uint64_t v32 = **(void **)a1 + 12 * v12;
      *(float *)uint64_t v32 = v30;
      *(float *)(v32 + 4) = v31;
      *(_DWORD *)(v32 + 8) = LODWORD(v29);
      if (++v12 == a3) {
        return;
      }
    }
    uint64_t v18 = 0;
    float v19 = 0.0;
    float v20 = 0.0;
    float v21 = 0.0;
    while (1)
    {
      uint64_t v22 = v18 + v12 * v17;
      uint64_t v23 = *(void **)(a1 + 32);
      unint64_t v24 = *(unsigned int *)(*v23 + 4 * v22);
      if ((v24 & 0x80000000) != 0) {
        break;
      }
      uint64_t v25 = *(void **)(a1 + 40);
      if (v25[1] <= v24) {
        break;
      }
      float v26 = *(float *)(v23[2] + 4 * v22);
      if (v26 != 0.0)
      {
        float v19 = v19
            + (float)(v26
                    * pxrInternal__aapl__pxrReserved__::operator*((float *)&v35, *v25 + 72 * v24).f32[0]);
        float v20 = v20 + (float)(v26 * v27);
        float v21 = v21 + (float)(v26 * v28);
        int v17 = **(_DWORD **)(a1 + 24);
      }
      if (++v18 >= v17) {
        goto LABEL_12;
      }
    }
    v33[0] = "usdSkel/utils.cpp";
    v33[1] = "operator()";
    _OWORD v33[2] = 1945;
    v33[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsLBS(const pxrInternal__aapl__pxrR"
             "eserved__::GfMatrix3d &, TfSpan<const GfMatrix3d>, const pxrInternal__aapl__pxrReserved__::(anonymous names"
             "pace)::_NonInterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Ident"
             "ityPointIndexFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    char v34 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v33, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", *(char **)&v15, v24, v18 + v12 * v17, *(void *)(*(void *)(a1 + 40) + 8));
    atomic_store(1u, *(unsigned __int8 **)(a1 + 48));
  }
}

uint64_t sub_21702D674(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  uint64_t v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)uint64_t v10 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C76FF98;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)float v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      float v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)float v21 = &unk_26C751420;
      __dmb(0xBu);
      unsigned char v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      uint64_t v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C76FF98;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_21702D468(*((void *)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21702D468(*((void *)this + 4), v6, v4);
  return 0;
}

void sub_21702DAA8(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  uint64_t v9 = a2;
  if (a7) {
    *a7 = 0;
  }
  if (a2)
  {
    uint64_t v11 = a3 + 16;
    do
    {
      long long v30 = *a1;
      long long v12 = a1[1];
      long long v13 = a1[2];
      long long v14 = a1[3];
      uint64_t v34 = *((void *)a1 + 8);
      long long v32 = v13;
      long long v33 = v14;
      long long v31 = v12;
      memset(v29, 0, 72);
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetOrthonormalized((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v30, 1, (uint64_t)v29);
      RotationQuaterniounint64_t n = pxrInternal__aapl__pxrReserved__::GfMatrix3d::ExtractRotationQuaternion((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)v29);
      *(void *)(v11 - 16) = v16;
      *(void *)(v11 - 8) = v17;
      *(void *)uint64_t v11 = v18;
      *(double *)(v11 + 8) = RotationQuaternion;
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetInverse(v29, 0, 0.0, (uint64_t)v23);
      long long v26 = v32;
      long long v27 = v33;
      uint64_t v28 = v34;
      long long v24 = v30;
      long long v25 = v31;
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=((double *)&v24, v23);
      *(_OWORD *)a5 = v24;
      long long v20 = v26;
      long long v19 = v27;
      long long v21 = v25;
      *(void *)(a5 + 64) = v28;
      *(_OWORD *)(a5 + 32) = v20;
      *(_OWORD *)(a5 + 48) = v19;
      *(_OWORD *)(a5 + 16) = v21;
      if (a7 && !*a7)
      {
        pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetDiagonal((uint64_t)&v24, 1.0);
        if (!pxrInternal__aapl__pxrReserved__::GfIsClose((pxrInternal__aapl__pxrReserved__ *)a5, (const pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v24, v22, 0.000001))*a7 = 1; {
      }
        }
      a1 = (long long *)((char *)a1 + 72);
      v11 += 32;
      a5 += 72;
      --v9;
    }
    while (v9);
  }
}

void *sub_21702DC08(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2168C5234(a1, a2);
    a1[1] += 32 * a2;
  }
  return a1;
}

void sub_21702DC50(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21702DC6C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216873544(a1, a2);
    unint64_t v4 = (char *)a1[1];
    size_t v5 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_21702DCF4(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_21702DD10(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    uint64_t v75 = v12;
    uint64_t v76 = v11;
    uint64_t v77 = v10;
    uint64_t v78 = v9;
    uint64_t v79 = v8;
    uint64_t v80 = v7;
    uint64_t v81 = v6;
    uint64_t v82 = v5;
    uint64_t v83 = v3;
    uint64_t v84 = v4;
    uint64_t v14 = a2;
    while (1)
    {
      float v74 = 0.0;
      unint64_t v73 = 0;
      unsigned __int32 v16 = pxrInternal__aapl__pxrReserved__::operator*((float *)(**(void **)a1 + 12 * v14), *(void *)(a1 + 8)).u32[0];
      float v18 = v17;
      float v20 = v19;
      unint64_t v73 = __PAIR64__(LODWORD(v17), v16);
      float v74 = v19;
      long long v21 = *(uint64_t **)(a1 + 24);
      uint64_t v22 = *v21;
      uint64_t v23 = *(int **)(a1 + 40);
      unsigned int v24 = sub_21702A52C(v14, (v21[1] - *v21) >> 5, *(void **)(a1 + 32), *v23);
      if ((v24 & 0x80000000) != 0)
      {
        double v29 = 0.0;
        double v30 = 0.0;
        double v28 = 0.0;
        double v27 = 0.0;
      }
      else
      {
        long long v26 = (double *)(v22 + 32 * v24);
        double v27 = *v26;
        double v28 = v26[1];
        double v30 = v26[2];
        double v29 = v26[3];
      }
      long long v71 = 0u;
      long long v72 = 0u;
      int v31 = *v23;
      if (*v23 >= 1) {
        break;
      }
      float v39 = 0.0;
      float v38 = 0.0;
      float v33 = 0.0;
LABEL_20:
      if (**(unsigned char **)(a1 + 48))
      {
        float v20 = v39;
        float v18 = v38;
        float v54 = v33;
      }
      else
      {
        float v54 = *(float *)&v16;
      }
      pxrInternal__aapl__pxrReserved__::GfQuatd::Normalize((double *)&v71, 1.0e-10);
      double v66 = v54;
      double v67 = v18;
      *(double *)&uint64_t v68 = v20;
      double v55 = pxrInternal__aapl__pxrReserved__::GfQuatd::Transform((double *)&v71, &v66);
      double v58 = sqrt(v57 * v57 + v55 * v55 + v56 * v56);
      double v59 = 1.0 / v58;
      BOOL v60 = v58 <= 1.0e-10;
      double v61 = 1.0e10;
      if (!v60) {
        double v61 = v59;
      }
      float v62 = v55 * v61;
      float v63 = v56 * v61;
      float v64 = v57 * v61;
      float64x2_t v65 = (float *)(**(void **)a1 + 12 * v14);
      *float64x2_t v65 = v62;
      v65[1] = v63;
      v65[2] = v64;
      if (++v14 == a3) {
        return;
      }
    }
    uint64_t v32 = 0;
    float v33 = 0.0;
    double v34 = 0.0;
    double v35 = 0.0;
    double v36 = 0.0;
    double v37 = 0.0;
    float v38 = 0.0;
    float v39 = 0.0;
    double v40 = v29;
    double v41 = v27;
    while (1)
    {
      uint64_t v42 = v32 + v14 * v31;
      uint64_t v43 = *(void **)(a1 + 32);
      unint64_t v44 = *(unsigned int *)(*v43 + 4 * v42);
      if ((v44 & 0x80000000) != 0 || v44 >= (v21[1] - *v21) >> 5) {
        break;
      }
      float v45 = *(float *)(v43[2] + 4 * v42);
      if (v45 != 0.0)
      {
        if (**(unsigned char **)(a1 + 48))
        {
          float v33 = v33
              + (float)(v45
                      * pxrInternal__aapl__pxrReserved__::operator*((float *)&v73, **(void **)(a1 + 56) + 72 * v44).f32[0]);
          float v38 = v38 + (float)(v45 * v46);
          float v39 = v39 + (float)(v45 * v47);
          long long v21 = *(uint64_t **)(a1 + 24);
          double v35 = *((double *)&v71 + 1);
          double v36 = *(double *)&v71;
          double v37 = *((double *)&v72 + 1);
          double v34 = *(double *)&v72;
          int v31 = **(_DWORD **)(a1 + 40);
        }
        float v48 = (double *)(*v21 + 32 * v44);
        double v49 = v48[1];
        double v50 = v48[2];
        double v51 = v48[3];
        if (v41 * *v48 + v28 * v49 + v30 * v50 + v40 * v51 >= 0.0) {
          float v52 = v45;
        }
        else {
          float v52 = -v45;
        }
        double v53 = v52;
        double v37 = v37 + v51 * v53;
        double v36 = *v48 * v53 + v36;
        double v35 = v49 * v53 + v35;
        *(double *)&long long v71 = v36;
        *((double *)&v71 + 1) = v35;
        double v34 = v50 * v53 + v34;
        *(double *)&long long v72 = v34;
        *((double *)&v72 + 1) = v37;
      }
      if (++v32 >= v31)
      {
        float v18 = *((float *)&v73 + 1);
        unsigned __int32 v16 = v73;
        float v20 = v74;
        goto LABEL_20;
      }
    }
    double v66 = COERCE_DOUBLE("usdSkel/utils.cpp");
    double v67 = COERCE_DOUBLE("operator()");
    uint64_t v68 = 2046;
    unint64_t v69 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsDQS(const pxrInternal__aapl__pxrRese"
          "rved__::GfMatrix3d &, TfSpan<const GfMatrix3d>, const pxrInternal__aapl__pxrReserved__::(anonymous namespace):"
          ":_NonInterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_IdentityPointI"
          "ndexFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    char v70 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v66, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v25, v34, v35, v36, v37, v44, v32 + v14 * v31, (v21[1] - *v21) >> 5);
    atomic_store(1u, *(unsigned __int8 **)(a1 + 64));
  }
}

uint64_t sub_21702E070(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  uint64_t v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)uint64_t v10 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C76FFE0;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)double v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      long long v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)long long v21 = &unk_26C751420;
      __dmb(0xBu);
      unsigned char v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      uint64_t v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C76FFE0;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_21702DD10(*((void *)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21702DD10(*((void *)this + 4), v6, v4);
  return 0;
}

void sub_21702E4A4(uint64_t a1, unint64_t a2, char *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  if (a2 < (unint64_t)a3)
  {
    uint64_t v31 = v9;
    uint64_t v32 = v10;
    LODWORD(a4) = 786163455;
    while (1)
    {
      uint64_t v12 = (float *)(**(void **)a1 + 12 * a2);
      uint64_t v13 = **(unsigned int **)(a1 + 24);
      if ((int)v13 >= 1) {
        break;
      }
      float32x2_t v20 = 0;
      LODWORD(v21) = 0;
LABEL_12:
      a9 = COERCE_DOUBLE(vmul_f32((float32x2_t)__PAIR64__(v20.u32[1], LODWORD(v21)), (float32x2_t)__PAIR64__(v20.u32[1], LODWORD(v21))));
      double v27 = 1.0
          / fmaxf(sqrtf(vadd_f32(*(float32x2_t *)&a9, vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 1), vmul_f32(v20, v20))).f32[0]), 1.0e-10);
      float v28 = v27 * *(float *)&v21;
      *(float32x2_t *)uint64_t v12 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v20), v27));
      void v12[2] = v28;
      if ((char *)++a2 == a3) {
        return;
      }
    }
    uint64_t v14 = *(void *)(a1 + 8);
    float v15 = v12[1];
    float v16 = v12[2];
    float32x2_t v17 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v14, *v12), vmul_n_f32(*(float32x2_t *)(v14 + 12), v15)), vmul_n_f32(*(float32x2_t *)(v14 + 24), v16));
    *(float *)&a9 = (float)((float)(*v12 * *(float *)(v14 + 8)) + (float)(v15 * *(float *)(v14 + 20)))
                  + (float)(v16 * *(float *)(v14 + 32));
    unsigned __int8 v18 = *(void **)(a1 + 32);
    unint64_t v19 = a2 * v13;
    float32x2_t v20 = 0;
    double v21 = 0.0;
    while (1)
    {
      unint64_t v22 = *(unsigned int *)(*v18 + 4 * v19);
      if ((v22 & 0x80000000) != 0) {
        break;
      }
      uint64_t v23 = *(void **)(a1 + 40);
      if (v23[1] <= v22) {
        break;
      }
      float v24 = *(float *)(v18[2] + 4 * v19);
      if (v24 != 0.0)
      {
        uint64_t v25 = *v23 + 36 * v22;
        v26.i32[0] = *(_DWORD *)(v25 + 8);
        v26.i32[1] = *(_DWORD *)(v25 + 20);
        float32x2_t v20 = vadd_f32(v20, vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v25, v17.f32[0]), vmul_lane_f32(*(float32x2_t *)(v25 + 12), v17, 1)), vmul_n_f32(*(float32x2_t *)(v25 + 24), *(float *)&a9)), v24));
        *(float *)&double v21 = *(float *)&v21
                       + (float)(v24
                               * (float)(vaddv_f32(vmul_f32(v17, v26)) + (float)(*(float *)&a9 * *(float *)(v25 + 32))));
      }
      ++v19;
      if (!--v13) {
        goto LABEL_12;
      }
    }
    v29[0] = "usdSkel/utils.cpp";
    v29[1] = "operator()";
    void v29[2] = 1945;
    v29[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsLBS(const pxrInternal__aapl__pxrR"
             "eserved__::GfMatrix3f &, TfSpan<const GfMatrix3f>, const pxrInternal__aapl__pxrReserved__::(anonymous names"
             "pace)::_NonInterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Ident"
             "ityPointIndexFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v29, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", a3, a4, 1.0, *(double *)&v20, v21, *(double *)&v17, a9, v22, v19, *(void *)(*(void *)(a1 + 40) + 8));
    atomic_store(1u, *(unsigned __int8 **)(a1 + 48));
  }
}

uint64_t sub_21702E6B8(tbb::internal::allocate_continuation_proxy *this, double a2, double a3, double a4, double a5, double a6, double a7)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v8 = *((void *)this - 4);
      if (*(int *)(v8 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v8 + 8) = 1;
        unsigned int v9 = *((unsigned __int8 *)this + 52);
        if (v9 <= 1) {
          LOBYTE(v9) = 1;
        }
        *((unsigned char *)this + 52) = v9 + 1;
      }
    }
  }
  uint64_t v11 = (long long *)((char *)this + 8);
  uint64_t v10 = (char *)*((void *)this + 1);
  unint64_t v12 = *((void *)this + 2);
  unint64_t v13 = *((void *)this + 3);
  uint64_t v14 = &v10[-v12];
  if (v13 < (unint64_t)&v10[-v12])
  {
    unint64_t v15 = *((void *)this + 5);
    if (v15 > 1) {
      goto LABEL_12;
    }
    if (v15 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        float v16 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v16 - 11) = 1;
        *(void *)float v16 = &unk_26C751420;
        __dmb(0xBu);
        v16[8] = 0;
        *((void *)this - 4) = v16;
        *((void *)v16 - 3) = 2;
        uint64_t v17 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v16, 0x38uLL);
        *(unsigned char *)(v17 - 11) = 1;
        *(void *)uint64_t v17 = &unk_26C770028;
        *(void *)(v17 + 8) = *((void *)this + 1);
        uint64_t v18 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v18;
        *(void *)(v17 + 16) = v18;
        *(_OWORD *)(v17 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v19 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v19;
        *(void *)(v17 + 40) = v19;
        *(_DWORD *)(v17 + 48) = 2;
        *(unsigned char *)(v17 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v17 - 40))();
        unint64_t v12 = *((void *)this + 2);
        unint64_t v13 = *((void *)this + 3);
        uint64_t v10 = (char *)*((void *)this + 1);
        uint64_t v14 = &v10[-v12];
        if (v13 >= (unint64_t)&v10[-v12]) {
          break;
        }
        unint64_t v20 = *((void *)this + 5);
        if (v20 <= 1)
        {
          if (!v20 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v13 < (unint64_t)v14 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)float v39 = 0x10000;
    long long v40 = *v11;
    uint64_t v41 = *((void *)this + 3);
    while (1)
    {
      *(void *)&double v21 = sub_216B17510(v39, *((unsigned __int8 *)this + 52)).n128_u64[0];
      char v27 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v27 & 1) == 0) {
        break;
      }
      unsigned __int8 v30 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v30;
      unsigned __int8 v29 = v39[2];
      if (v39[2] < 2u)
      {
        unsigned int v28 = v39[0];
        if (v39[v39[0] + 3] < v30
          && *((void *)&v40 + 3 * v39[0] + 2) < *((void *)&v40 + 3 * v39[0]) - *((void *)&v40 + 3 * v39[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v31 = v39[1];
      unsigned __int8 v32 = v39[v39[1] + 3];
      float v33 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v33 - 11) = 1;
      *(void *)float v33 = &unk_26C751420;
      __dmb(0xBu);
      v33[8] = 0;
      *((void *)this - 4) = v33;
      *((void *)v33 - 3) = 2;
      uint64_t v34 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v33, 0x38uLL);
      double v35 = (char *)&v40 + 24 * v31;
      *(unsigned char *)(v34 - 11) = 1;
      *(void *)uint64_t v34 = &unk_26C770028;
      long long v36 = *(_OWORD *)v35;
      *(void *)(v34 + 24) = *((void *)v35 + 2);
      *(_OWORD *)(v34 + 8) = v36;
      *(void *)(v34 + 32) = *((void *)this + 4);
      uint64_t v37 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v37;
      *(void *)(v34 + 40) = v37;
      *(_DWORD *)(v34 + 48) = 2;
      *(unsigned char *)(v34 + 52) = *((unsigned char *)this + 52) - v32;
      (***(void (****)(void))(v34 - 40))();
      unsigned __int8 v29 = --v39[2];
      v39[1] = (v39[1] + 1) & 7;
LABEL_27:
      if (!v29 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v28 = v39[0];
LABEL_22:
    sub_21702E4A4(*((void *)this + 4), *((void *)&v40 + 3 * v28 + 1), *((char **)&v40 + 3 * v28), v21, v22, v23, v24, v25, v26);
    unsigned __int8 v29 = --v39[2];
    v39[0] = (v39[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21702E4A4(*((void *)this + 4), v12, v10, a2, a3, a4, a5, a6, a7);
  return 0;
}

const pxrInternal__aapl__pxrReserved__::GfMatrix3f *sub_21702EAEC(const pxrInternal__aapl__pxrReserved__::GfMatrix3f *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  uint64_t v9 = a2;
  uint64_t v10 = result;
  if (a7) {
    *a7 = 0;
  }
  if (a2)
  {
    uint64_t v11 = a3 + 16;
    do
    {
      uint64_t v30 = 0;
      long long v29 = 0u;
      long long v28 = 0u;
      long long v27 = 0u;
      long long v26 = 0u;
      unint64_t v12 = (pxrInternal__aapl__pxrReserved__::GfMatrix3d *)pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v26, v10);
      memset(v25, 0, 72);
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetOrthonormalized(v12, 1, (uint64_t)v25);
      RotationQuaterniounint64_t n = pxrInternal__aapl__pxrReserved__::GfMatrix3d::ExtractRotationQuaternion((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)v25);
      *(void *)(v11 - 16) = v14;
      *(void *)(v11 - 8) = v15;
      *(void *)uint64_t v11 = v16;
      *(double *)(v11 + 8) = RotationQuaternion;
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetInverse(v25, 0, 0.0, (uint64_t)v20);
      void v21[2] = v28;
      void v21[3] = v29;
      uint64_t v22 = v30;
      v21[0] = v26;
      v21[1] = v27;
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=((double *)v21, v20);
      uint64_t result = (const pxrInternal__aapl__pxrReserved__::GfMatrix3f *)pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v23, (const pxrInternal__aapl__pxrReserved__::GfMatrix3d *)v21);
      long long v17 = v23[0];
      long long v18 = v23[1];
      *(_DWORD *)(a5 + 32) = v24;
      *(_OWORD *)a5 = v17;
      *(_OWORD *)(a5 + 16) = v18;
      if (a7 && !*a7)
      {
        pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((uint64_t)v21, 1.0);
        uint64_t result = (const pxrInternal__aapl__pxrReserved__::GfMatrix3f *)pxrInternal__aapl__pxrReserved__::GfIsClose((pxrInternal__aapl__pxrReserved__ *)a5, (const pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v21, v19, 0.000001);
        if ((result & 1) == 0) {
          *a7 = 1;
        }
      }
      uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::GfMatrix3f *)((char *)v10 + 36);
      v11 += 32;
      a5 += 36;
      --v9;
    }
    while (v9);
  }
  return result;
}

void sub_21702EC58(uint64_t a1, unint64_t a2, unint64_t a3, double a4)
{
  if (a2 < a3)
  {
    uint64_t v74 = v13;
    uint64_t v75 = v12;
    uint64_t v76 = v11;
    uint64_t v77 = v10;
    uint64_t v78 = v9;
    uint64_t v79 = v8;
    uint64_t v80 = v7;
    uint64_t v81 = v6;
    uint64_t v82 = v4;
    uint64_t v83 = v5;
    uint64_t v15 = a2;
    while (1)
    {
      uint64_t v17 = *(void *)(a1 + 8);
      uint64_t v18 = **(void **)a1 + 12 * v15;
      float v65 = *(float *)v18;
      float v64 = *(float *)(v18 + 4);
      LODWORD(a4) = *(_DWORD *)(v18 + 8);
      double v66 = a4;
      float32x2_t v19 = *(float32x2_t *)v17;
      float32x2_t v20 = *(float32x2_t *)(v17 + 12);
      float32x2_t v21 = *(float32x2_t *)(v17 + 24);
      float v22 = *(float *)(v17 + 8);
      float v23 = *(float *)(v17 + 20);
      float v24 = *(float *)(v17 + 32);
      long long v26 = *(uint64_t **)(a1 + 24);
      double v25 = *(uint64_t **)(a1 + 32);
      uint64_t v27 = *v26;
      long long v28 = *(int **)(a1 + 40);
      unsigned int v29 = sub_21702A52C(v15, (v26[1] - *v26) >> 5, v25, *v28);
      float64x2_t v31 = 0uLL;
      float64x2_t v32 = 0uLL;
      if ((v29 & 0x80000000) == 0)
      {
        float v33 = (float64x2_t *)(v27 + 32 * v29);
        float64x2_t v32 = *v33;
        float64x2_t v31 = v33[1];
      }
      float32x2_t v36 = vadd_f32(vmul_n_f32(v19, v65), vmul_n_f32(v20, v64));
      HIDWORD(v34) = HIDWORD(v66);
      float32x2_t v35 = vadd_f32(v36, vmul_n_f32(v21, *(float *)&v66));
      v36.f32[0] = (float)((float)(v65 * v22) + (float)(v64 * v23)) + (float)(*(float *)&v66 * v24);
      float64x2_t v72 = 0u;
      float64x2_t v73 = 0u;
      uint64_t v37 = *v28;
      if ((int)v37 >= 1) {
        break;
      }
      float32x2_t v41 = 0;
      LODWORD(v42) = 0;
LABEL_18:
      unsigned int v52 = **(unsigned char **)(a1 + 48) == 0;
      if (**(unsigned char **)(a1 + 48)) {
        float v53 = *(float *)&v42;
      }
      else {
        float v53 = v36.f32[0];
      }
      int8x8_t v67 = (int8x8_t)v35;
      pxrInternal__aapl__pxrReserved__::GfQuatd::Normalize(v72.f64, 1.0e-10);
      float64x2_t v68 = vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v52), 0x1FuLL)), v67, (int8x8_t)v41));
      *(double *)&uint64_t v69 = v53;
      double v54 = pxrInternal__aapl__pxrReserved__::GfQuatd::Transform(v72.f64, v68.f64);
      double v57 = sqrt(v56 * v56 + v54 * v54 + v55 * v55);
      double v58 = 1.0 / v57;
      BOOL v59 = v57 <= 1.0e-10;
      double v60 = 1.0e10;
      if (!v59) {
        double v60 = v58;
      }
      a4 = v54 * v60;
      *(float *)&a4 = a4;
      float v61 = v55 * v60;
      float v62 = v56 * v60;
      uint64_t v63 = **(void **)a1 + 12 * v15;
      *(_DWORD *)uint64_t v63 = LODWORD(a4);
      *(float *)(v63 + 4) = v61;
      *(float *)(v63 + 8) = v62;
      if (++v15 == a3) {
        return;
      }
    }
    uint64_t v38 = *v25;
    LODWORD(v34) = v35.i32[1];
    uint64_t v39 = v15 * v37;
    float64x2_t v40 = 0uLL;
    float32x2_t v41 = 0;
    double v42 = 0.0;
    float64x2_t v43 = 0uLL;
    while (1)
    {
      unint64_t v44 = *(unsigned int *)(v38 + 4 * v39);
      if ((v44 & 0x80000000) != 0 || v44 >= (v26[1] - *v26) >> 5) {
        break;
      }
      float v45 = *(float *)(v25[2] + 4 * v39);
      if (v45 != 0.0)
      {
        if (**(unsigned char **)(a1 + 48))
        {
          uint64_t v46 = **(void **)(a1 + 56) + 36 * v44;
          float32x2_t v41 = vadd_f32(v41, vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v46, v35.f32[0]), vmul_lane_f32(*(float32x2_t *)(v46 + 12), v35, 1)), vmul_n_f32(*(float32x2_t *)(v46 + 24), v36.f32[0])), v45));
          *(float *)&double v42 = *(float *)&v42
                         + (float)(v45
                                 * (float)((float)((float)(v35.f32[0] * *(float *)(v46 + 8))
                                                 + (float)(v35.f32[1] * *(float *)(v46 + 20)))
                                         + (float)(v36.f32[0] * *(float *)(v46 + 32))));
        }
        uint64_t v47 = *v26 + 32 * v44;
        float64x2_t v48 = *(float64x2_t *)(v47 + 16);
        float64x2_t v49 = vmulq_f64(v32, *(float64x2_t *)v47);
        float64x2_t v50 = vmulq_f64(v31, v48);
        if (vaddq_f64(vaddq_f64(vaddq_f64(v49, (float64x2_t)vdupq_laneq_s64((int64x2_t)v49, 1)), v50), (float64x2_t)vdupq_laneq_s64((int64x2_t)v50, 1)).f64[0] < 0.0)float v45 = -v45; {
        double v51 = v45;
        }
        float64x2_t v40 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)v47, v51), v40);
        float64x2_t v43 = vaddq_f64(vmulq_n_f64(v48, v51), v43);
        float64x2_t v72 = v40;
        float64x2_t v73 = v43;
      }
      ++v39;
      if (!--v37) {
        goto LABEL_18;
      }
    }
    *(void *)&v68.f64[0] = "usdSkel/utils.cpp";
    *(void *)&v68.f64[1] = "operator()";
    uint64_t v69 = 2046;
    char v70 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsDQS(const pxrInternal__aapl__pxrRese"
          "rved__::GfMatrix3f &, TfSpan<const GfMatrix3f>, const pxrInternal__aapl__pxrReserved__::(anonymous namespace):"
          ":_NonInterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_IdentityPointI"
          "ndexFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    char v71 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v68, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v30, v31.f64[0], v32.f64[0], *(double *)&v36, v42, v34, v40.f64[0], v43.f64[0], v44, v39, (v26[1] - *v26) >> 5);
    atomic_store(1u, *(unsigned __int8 **)(a1 + 64));
  }
}

uint64_t sub_21702EFCC(tbb::internal::allocate_continuation_proxy *this, double a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v3 = *((void *)this - 4);
      if (*(int *)(v3 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v3 + 8) = 1;
        unsigned int v4 = *((unsigned __int8 *)this + 52);
        if (v4 <= 1) {
          LOBYTE(v4) = 1;
        }
        *((unsigned char *)this + 52) = v4 + 1;
      }
    }
  }
  uint64_t v6 = (long long *)((char *)this + 8);
  unint64_t v5 = *((void *)this + 1);
  unint64_t v7 = *((void *)this + 2);
  unint64_t v8 = *((void *)this + 3);
  unint64_t v9 = v5 - v7;
  if (v8 < v5 - v7)
  {
    unint64_t v10 = *((void *)this + 5);
    if (v10 > 1) {
      goto LABEL_12;
    }
    if (v10 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v11 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v11[8] = 0;
        *((void *)this - 4) = v11;
        *((void *)v11 - 3) = 2;
        uint64_t v12 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v11, 0x38uLL);
        *(unsigned char *)(v12 - 11) = 1;
        *(void *)uint64_t v12 = &unk_26C770070;
        *(void *)(v12 + 8) = *((void *)this + 1);
        uint64_t v13 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v13;
        *(void *)(v12 + 16) = v13;
        *(_OWORD *)(v12 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v14 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v14;
        *(void *)(v12 + 40) = v14;
        *(_DWORD *)(v12 + 48) = 2;
        *(unsigned char *)(v12 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v12 - 40))();
        unint64_t v7 = *((void *)this + 2);
        unint64_t v8 = *((void *)this + 3);
        unint64_t v5 = *((void *)this + 1);
        unint64_t v9 = v5 - v7;
        if (v8 >= v5 - v7) {
          break;
        }
        unint64_t v15 = *((void *)this + 5);
        if (v15 <= 1)
        {
          if (!v15 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v8 < v9 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)unsigned int v29 = 0x10000;
    long long v30 = *v6;
    uint64_t v31 = *((void *)this + 3);
    while (1)
    {
      *(void *)&double v16 = sub_216B17510(v29, *((unsigned __int8 *)this + 52)).n128_u64[0];
      char v17 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v17 & 1) == 0) {
        break;
      }
      unsigned __int8 v20 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v20;
      unsigned __int8 v19 = v29[2];
      if (v29[2] < 2u)
      {
        unsigned int v18 = v29[0];
        if (v29[v29[0] + 3] < v20
          && *((void *)&v30 + 3 * v29[0] + 2) < *((void *)&v30 + 3 * v29[0]) - *((void *)&v30 + 3 * v29[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v21 = v29[1];
      unsigned __int8 v22 = v29[v29[1] + 3];
      float v23 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v23 - 11) = 1;
      *(void *)float v23 = &unk_26C751420;
      __dmb(0xBu);
      v23[8] = 0;
      *((void *)this - 4) = v23;
      *((void *)v23 - 3) = 2;
      uint64_t v24 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v23, 0x38uLL);
      double v25 = (char *)&v30 + 24 * v21;
      *(unsigned char *)(v24 - 11) = 1;
      *(void *)uint64_t v24 = &unk_26C770070;
      long long v26 = *(_OWORD *)v25;
      *(void *)(v24 + 24) = *((void *)v25 + 2);
      *(_OWORD *)(v24 + 8) = v26;
      *(void *)(v24 + 32) = *((void *)this + 4);
      uint64_t v27 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v27;
      *(void *)(v24 + 40) = v27;
      *(_DWORD *)(v24 + 48) = 2;
      *(unsigned char *)(v24 + 52) = *((unsigned char *)this + 52) - v22;
      (***(void (****)(void))(v24 - 40))();
      unsigned __int8 v19 = --v29[2];
      v29[1] = (v29[1] + 1) & 7;
LABEL_27:
      if (!v19 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v18 = v29[0];
LABEL_22:
    sub_21702EC58(*((void *)this + 4), *((void *)&v30 + 3 * v18 + 1), *((void *)&v30 + 3 * v18), v16);
    unsigned __int8 v19 = --v29[2];
    v29[0] = (v29[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21702EC58(*((void *)this + 4), v7, v5, a2);
  return 0;
}

void sub_21702F400(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    uint64_t v38 = v10;
    uint64_t v39 = v9;
    uint64_t v40 = v8;
    uint64_t v41 = v7;
    uint64_t v42 = v6;
    uint64_t v43 = v5;
    uint64_t v44 = v3;
    uint64_t v45 = v4;
    unint64_t v12 = a2;
    while (1)
    {
      int v37 = 0;
      uint64_t v36 = 0;
      LODWORD(v36) = pxrInternal__aapl__pxrReserved__::operator*((float *)(**(void **)a1 + 12 * v12), *(void *)(a1 + 8)).u32[0];
      HIDWORD(v36) = v14;
      int v37 = v16;
      int v17 = **(_DWORD **)(a1 + 24);
      if (v17 >= 1) {
        break;
      }
      float v21 = 0.0;
      float v20 = 0.0;
      float v19 = 0.0;
LABEL_12:
      double v30 = 1.0 / fmaxf(sqrtf((float)(v21 * v21) + (float)((float)(v20 * v20) + (float)(v19 * v19))), 1.0e-10);
      float v31 = v30 * v19;
      float v32 = v30 * v20;
      *(float *)&double v30 = v30 * v21;
      uint64_t v33 = **(void **)a1 + 12 * v12;
      *(float *)uint64_t v33 = v31;
      *(float *)(v33 + 4) = v32;
      *(_DWORD *)(v33 + 8) = LODWORD(v30);
      if (++v12 == a3) {
        return;
      }
    }
    uint64_t v18 = 0;
    float v19 = 0.0;
    float v20 = 0.0;
    float v21 = 0.0;
    while (1)
    {
      uint64_t v22 = v18 + v12 * v17;
      uint64_t v23 = **(void **)(a1 + 32);
      float v24 = *(float *)(v23 + 8 * v22);
      unsigned int v25 = (int)v24;
      if ((int)v24 < 0) {
        break;
      }
      long long v26 = *(void **)(a1 + 40);
      if (v26[1] <= (unint64_t)v25) {
        break;
      }
      float v27 = *(float *)(v23 + 8 * v22 + 4);
      if (v27 != 0.0)
      {
        float v19 = v19 + (float)(v27 * pxrInternal__aapl__pxrReserved__::operator*((float *)&v36, *v26 + 72 * v25).f32[0]);
        float v20 = v20 + (float)(v27 * v28);
        float v21 = v21 + (float)(v27 * v29);
        int v17 = **(_DWORD **)(a1 + 24);
      }
      if (++v18 >= v17) {
        goto LABEL_12;
      }
    }
    v34[0] = "usdSkel/utils.cpp";
    v34[1] = "operator()";
    _OWORD v34[2] = 1945;
    v34[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsLBS(const pxrInternal__aapl__pxrR"
             "eserved__::GfMatrix3d &, TfSpan<const GfMatrix3d>, const pxrInternal__aapl__pxrReserved__::(anonymous names"
             "pace)::_InterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Identity"
             "PointIndexFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    char v35 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v34, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", *(char **)&v15, (int)v24, v18 + v12 * v17, *(void *)(*(void *)(a1 + 40) + 8));
    atomic_store(1u, *(unsigned __int8 **)(a1 + 48));
  }
}

uint64_t sub_21702F614(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  uint64_t v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)uint64_t v10 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C7700B8;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)float v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      float v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)float v21 = &unk_26C751420;
      __dmb(0xBu);
      unsigned char v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      uint64_t v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C7700B8;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_21702F400(*((void *)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21702F400(*((void *)this + 4), v6, v4);
  return 0;
}

void sub_21702FA48(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    uint64_t v76 = v12;
    uint64_t v77 = v11;
    uint64_t v78 = v10;
    uint64_t v79 = v9;
    uint64_t v80 = v8;
    uint64_t v81 = v7;
    uint64_t v82 = v6;
    uint64_t v83 = v5;
    uint64_t v84 = v3;
    uint64_t v85 = v4;
    uint64_t v14 = a2;
    while (1)
    {
      float v75 = 0.0;
      unint64_t v74 = 0;
      unsigned __int32 v16 = pxrInternal__aapl__pxrReserved__::operator*((float *)(**(void **)a1 + 12 * v14), *(void *)(a1 + 8)).u32[0];
      float v18 = v17;
      float v20 = v19;
      unint64_t v74 = __PAIR64__(LODWORD(v17), v16);
      float v75 = v19;
      float v21 = *(uint64_t **)(a1 + 24);
      uint64_t v22 = *v21;
      uint64_t v23 = *(int **)(a1 + 40);
      unsigned int v24 = sub_21702C298(v14, (v21[1] - *v21) >> 5, *(void **)(a1 + 32), *v23);
      if ((v24 & 0x80000000) != 0)
      {
        double v29 = 0.0;
        double v30 = 0.0;
        double v28 = 0.0;
        double v27 = 0.0;
      }
      else
      {
        long long v26 = (double *)(v22 + 32 * v24);
        double v27 = *v26;
        double v28 = v26[1];
        double v30 = v26[2];
        double v29 = v26[3];
      }
      long long v72 = 0u;
      long long v73 = 0u;
      int v31 = *v23;
      if (*v23 >= 1) {
        break;
      }
      float v39 = 0.0;
      float v38 = 0.0;
      float v33 = 0.0;
LABEL_20:
      if (**(unsigned char **)(a1 + 48))
      {
        float v20 = v39;
        float v18 = v38;
        float v55 = v33;
      }
      else
      {
        float v55 = *(float *)&v16;
      }
      pxrInternal__aapl__pxrReserved__::GfQuatd::Normalize((double *)&v72, 1.0e-10);
      double v67 = v55;
      double v68 = v18;
      *(double *)&uint64_t v69 = v20;
      double v56 = pxrInternal__aapl__pxrReserved__::GfQuatd::Transform((double *)&v72, &v67);
      double v59 = sqrt(v58 * v58 + v56 * v56 + v57 * v57);
      double v60 = 1.0 / v59;
      BOOL v61 = v59 <= 1.0e-10;
      double v62 = 1.0e10;
      if (!v61) {
        double v62 = v60;
      }
      float v63 = v56 * v62;
      float v64 = v57 * v62;
      float v65 = v58 * v62;
      double v66 = (float *)(**(void **)a1 + 12 * v14);
      *double v66 = v63;
      v66[1] = v64;
      v66[2] = v65;
      if (++v14 == a3) {
        return;
      }
    }
    uint64_t v32 = 0;
    float v33 = 0.0;
    double v34 = 0.0;
    double v35 = 0.0;
    double v36 = 0.0;
    double v37 = 0.0;
    float v38 = 0.0;
    float v39 = 0.0;
    double v40 = v29;
    double v41 = v27;
    while (1)
    {
      uint64_t v42 = v32 + v14 * v31;
      uint64_t v43 = **(void **)(a1 + 32);
      float v44 = *(float *)(v43 + 8 * v42);
      unint64_t v45 = (int)v44;
      if ((v45 & 0x80000000) != 0 || v45 >= (v21[1] - *v21) >> 5) {
        break;
      }
      float v46 = *(float *)(v43 + 8 * v42 + 4);
      if (v46 != 0.0)
      {
        if (**(unsigned char **)(a1 + 48))
        {
          float v33 = v33
              + (float)(v46
                      * pxrInternal__aapl__pxrReserved__::operator*((float *)&v74, **(void **)(a1 + 56) + 72 * v45).f32[0]);
          float v38 = v38 + (float)(v46 * v47);
          float v39 = v39 + (float)(v46 * v48);
          float v21 = *(uint64_t **)(a1 + 24);
          double v35 = *((double *)&v72 + 1);
          double v36 = *(double *)&v72;
          double v37 = *((double *)&v73 + 1);
          double v34 = *(double *)&v73;
          int v31 = **(_DWORD **)(a1 + 40);
        }
        float64x2_t v49 = (double *)(*v21 + 32 * v45);
        double v50 = v49[1];
        double v51 = v49[2];
        double v52 = v49[3];
        if (v41 * *v49 + v28 * v50 + v30 * v51 + v40 * v52 >= 0.0) {
          float v53 = v46;
        }
        else {
          float v53 = -v46;
        }
        double v54 = v53;
        double v37 = v37 + v52 * v54;
        double v36 = *v49 * v54 + v36;
        double v35 = v50 * v54 + v35;
        *(double *)&long long v72 = v36;
        *((double *)&v72 + 1) = v35;
        double v34 = v51 * v54 + v34;
        *(double *)&long long v73 = v34;
        *((double *)&v73 + 1) = v37;
      }
      if (++v32 >= v31)
      {
        float v18 = *((float *)&v74 + 1);
        unsigned __int32 v16 = v74;
        float v20 = v75;
        goto LABEL_20;
      }
    }
    double v67 = COERCE_DOUBLE("usdSkel/utils.cpp");
    double v68 = COERCE_DOUBLE("operator()");
    uint64_t v69 = 2046;
    char v70 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsDQS(const pxrInternal__aapl__pxrRese"
          "rved__::GfMatrix3d &, TfSpan<const GfMatrix3d>, const pxrInternal__aapl__pxrReserved__::(anonymous namespace):"
          ":_InterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_IdentityPointInde"
          "xFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    char v71 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v67, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v25, v34, v35, v36, v37, (int)v44, v32 + v14 * v31, (v21[1] - *v21) >> 5);
    atomic_store(1u, *(unsigned __int8 **)(a1 + 64));
  }
}

uint64_t sub_21702FDB0(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  uint64_t v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)uint64_t v10 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C770100;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)double v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      float v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)float v21 = &unk_26C751420;
      __dmb(0xBu);
      unsigned char v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      uint64_t v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C770100;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_21702FA48(*((void *)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21702FA48(*((void *)this + 4), v6, v4);
  return 0;
}

void sub_2170301E4(uint64_t a1, char *a2, char *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  if (a2 < a3)
  {
    uint64_t v34 = v9;
    uint64_t v35 = v10;
    uint64_t v12 = 8 * (void)a2;
    LODWORD(a4) = 786163455;
    while (1)
    {
      uint64_t v13 = (float *)(**(void **)a1 + 12 * (void)a2);
      uint64_t v14 = **(unsigned int **)(a1 + 24);
      if ((int)v14 >= 1) {
        break;
      }
      float32x2_t v21 = 0;
      LODWORD(v22) = 0;
LABEL_12:
      float32x2_t v29 = vmul_f32((float32x2_t)__PAIR64__(v21.u32[1], LODWORD(v22)), (float32x2_t)__PAIR64__(v21.u32[1], LODWORD(v22)));
      a9 = COERCE_DOUBLE(vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v29, 1), vmul_f32(v21, v21)));
      double v30 = 1.0 / fmaxf(sqrtf(vadd_f32(v29, *(float32x2_t *)&a9).f32[0]), 1.0e-10);
      float v31 = v30 * *(float *)&v22;
      *(float32x2_t *)uint64_t v13 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v21), v30));
      _OWORD v13[2] = v31;
      ++a2;
      v12 += 8;
      if (a2 == a3) {
        return;
      }
    }
    uint64_t v15 = *(void *)(a1 + 8);
    float v16 = v13[1];
    float v17 = v13[2];
    float32x2_t v18 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v15, *v13), vmul_n_f32(*(float32x2_t *)(v15 + 12), v16)), vmul_n_f32(*(float32x2_t *)(v15 + 24), v17));
    *(float *)&a9 = (float)((float)(*v13 * *(float *)(v15 + 8)) + (float)(v16 * *(float *)(v15 + 20)))
                  + (float)(v17 * *(float *)(v15 + 32));
    uint64_t v19 = (void)a2 * v14;
    unsigned __int8 v20 = (float *)(**(void **)(a1 + 32) + v12 * v14 + 4);
    float32x2_t v21 = 0;
    double v22 = 0.0;
    while (1)
    {
      float v23 = *(v20 - 1);
      unsigned int v24 = (int)v23;
      if ((int)v23 < 0) {
        break;
      }
      uint64_t v25 = *(void **)(a1 + 40);
      if (v25[1] <= (unint64_t)v24) {
        break;
      }
      float v26 = *v20;
      if (*v20 != 0.0)
      {
        uint64_t v27 = *v25 + 36 * v24;
        v28.i32[0] = *(_DWORD *)(v27 + 8);
        v28.i32[1] = *(_DWORD *)(v27 + 20);
        float32x2_t v21 = vadd_f32(v21, vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v27, v18.f32[0]), vmul_lane_f32(*(float32x2_t *)(v27 + 12), v18, 1)), vmul_n_f32(*(float32x2_t *)(v27 + 24), *(float *)&a9)), v26));
        *(float *)&double v22 = *(float *)&v22
                       + (float)(v26
                               * (float)(vaddv_f32(vmul_f32(v18, v28)) + (float)(*(float *)&a9 * *(float *)(v27 + 32))));
      }
      ++v19;
      v20 += 2;
      if (!--v14) {
        goto LABEL_12;
      }
    }
    v32[0] = "usdSkel/utils.cpp";
    v32[1] = "operator()";
    void v32[2] = 1945;
    v32[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsLBS(const pxrInternal__aapl__pxrR"
             "eserved__::GfMatrix3f &, TfSpan<const GfMatrix3f>, const pxrInternal__aapl__pxrReserved__::(anonymous names"
             "pace)::_InterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Identity"
             "PointIndexFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    char v33 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v32, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", a3, a4, 1.0, *(double *)&v21, v22, *(double *)&v18, a9, (int)v23, v19, *(void *)(*(void *)(a1 + 40) + 8));
    atomic_store(1u, *(unsigned __int8 **)(a1 + 48));
  }
}

uint64_t sub_21703040C(tbb::internal::allocate_continuation_proxy *this, double a2, double a3, double a4, double a5, double a6, double a7)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v8 = *((void *)this - 4);
      if (*(int *)(v8 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v8 + 8) = 1;
        unsigned int v9 = *((unsigned __int8 *)this + 52);
        if (v9 <= 1) {
          LOBYTE(v9) = 1;
        }
        *((unsigned char *)this + 52) = v9 + 1;
      }
    }
  }
  uint64_t v11 = (long long *)((char *)this + 8);
  uint64_t v10 = (char *)*((void *)this + 1);
  uint64_t v12 = (char *)*((void *)this + 2);
  unint64_t v13 = *((void *)this + 3);
  unint64_t v14 = v10 - v12;
  if (v13 < v10 - v12)
  {
    unint64_t v15 = *((void *)this + 5);
    if (v15 > 1) {
      goto LABEL_12;
    }
    if (v15 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        float v16 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v16 - 11) = 1;
        *(void *)float v16 = &unk_26C751420;
        __dmb(0xBu);
        v16[8] = 0;
        *((void *)this - 4) = v16;
        *((void *)v16 - 3) = 2;
        uint64_t v17 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v16, 0x38uLL);
        *(unsigned char *)(v17 - 11) = 1;
        *(void *)uint64_t v17 = &unk_26C770148;
        *(void *)(v17 + 8) = *((void *)this + 1);
        uint64_t v18 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v18;
        *(void *)(v17 + 16) = v18;
        *(_OWORD *)(v17 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v19 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v19;
        *(void *)(v17 + 40) = v19;
        *(_DWORD *)(v17 + 48) = 2;
        *(unsigned char *)(v17 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v17 - 40))();
        uint64_t v12 = (char *)*((void *)this + 2);
        unint64_t v13 = *((void *)this + 3);
        uint64_t v10 = (char *)*((void *)this + 1);
        unint64_t v14 = v10 - v12;
        if (v13 >= v10 - v12) {
          break;
        }
        unint64_t v20 = *((void *)this + 5);
        if (v20 <= 1)
        {
          if (!v20 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v13 < v14 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)float v39 = 0x10000;
    long long v40 = *v11;
    uint64_t v41 = *((void *)this + 3);
    while (1)
    {
      *(void *)&double v21 = sub_216B17510(v39, *((unsigned __int8 *)this + 52)).n128_u64[0];
      char v27 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v27 & 1) == 0) {
        break;
      }
      unsigned __int8 v30 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v30;
      unsigned __int8 v29 = v39[2];
      if (v39[2] < 2u)
      {
        unsigned int v28 = v39[0];
        if (v39[v39[0] + 3] < v30
          && *((void *)&v40 + 3 * v39[0] + 2) < *((void *)&v40 + 3 * v39[0]) - *((void *)&v40 + 3 * v39[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v31 = v39[1];
      unsigned __int8 v32 = v39[v39[1] + 3];
      char v33 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v33 - 11) = 1;
      *(void *)char v33 = &unk_26C751420;
      __dmb(0xBu);
      v33[8] = 0;
      *((void *)this - 4) = v33;
      *((void *)v33 - 3) = 2;
      uint64_t v34 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v33, 0x38uLL);
      uint64_t v35 = (char *)&v40 + 24 * v31;
      *(unsigned char *)(v34 - 11) = 1;
      *(void *)uint64_t v34 = &unk_26C770148;
      long long v36 = *(_OWORD *)v35;
      *(void *)(v34 + 24) = *((void *)v35 + 2);
      *(_OWORD *)(v34 + 8) = v36;
      *(void *)(v34 + 32) = *((void *)this + 4);
      uint64_t v37 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v37;
      *(void *)(v34 + 40) = v37;
      *(_DWORD *)(v34 + 48) = 2;
      *(unsigned char *)(v34 + 52) = *((unsigned char *)this + 52) - v32;
      (***(void (****)(void))(v34 - 40))();
      unsigned __int8 v29 = --v39[2];
      v39[1] = (v39[1] + 1) & 7;
LABEL_27:
      if (!v29 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v28 = v39[0];
LABEL_22:
    sub_2170301E4(*((void *)this + 4), *((char **)&v40 + 3 * v28 + 1), *((char **)&v40 + 3 * v28), v21, v22, v23, v24, v25, v26);
    unsigned __int8 v29 = --v39[2];
    v39[0] = (v39[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_2170301E4(*((void *)this + 4), v12, v10, a2, a3, a4, a5, a6, a7);
  return 0;
}

void sub_217030840(uint64_t a1, unint64_t a2, unint64_t a3, double a4)
{
  if (a2 < a3)
  {
    uint64_t v76 = v13;
    uint64_t v77 = v12;
    uint64_t v78 = v11;
    uint64_t v79 = v10;
    uint64_t v80 = v9;
    uint64_t v81 = v8;
    uint64_t v82 = v7;
    uint64_t v83 = v6;
    uint64_t v84 = v4;
    uint64_t v85 = v5;
    uint64_t v15 = a2;
    for (uint64_t i = 8 * a2; ; i += 8)
    {
      uint64_t v18 = *(void *)(a1 + 8);
      uint64_t v19 = **(void **)a1 + 12 * v15;
      float v67 = *(float *)v19;
      float v66 = *(float *)(v19 + 4);
      LODWORD(a4) = *(_DWORD *)(v19 + 8);
      double v68 = a4;
      float32x2_t v20 = *(float32x2_t *)v18;
      float32x2_t v21 = *(float32x2_t *)(v18 + 12);
      float32x2_t v22 = *(float32x2_t *)(v18 + 24);
      float v23 = *(float *)(v18 + 8);
      float v24 = *(float *)(v18 + 20);
      float v25 = *(float *)(v18 + 32);
      char v27 = *(uint64_t **)(a1 + 24);
      double v26 = *(void **)(a1 + 32);
      uint64_t v28 = *v27;
      unsigned __int8 v29 = *(int **)(a1 + 40);
      unsigned int v30 = sub_21702C298(v15, (v27[1] - *v27) >> 5, v26, *v29);
      float64x2_t v32 = 0uLL;
      float64x2_t v33 = 0uLL;
      if ((v30 & 0x80000000) == 0)
      {
        uint64_t v34 = (float64x2_t *)(v28 + 32 * v30);
        float64x2_t v33 = *v34;
        float64x2_t v32 = v34[1];
      }
      float32x2_t v37 = vadd_f32(vmul_n_f32(v20, v67), vmul_n_f32(v21, v66));
      HIDWORD(v35) = HIDWORD(v68);
      float32x2_t v36 = vadd_f32(v37, vmul_n_f32(v22, *(float *)&v68));
      v37.f32[0] = (float)((float)(v67 * v23) + (float)(v66 * v24)) + (float)(*(float *)&v68 * v25);
      float64x2_t v74 = 0u;
      float64x2_t v75 = 0u;
      uint64_t v38 = *v29;
      if ((int)v38 >= 1) {
        break;
      }
      float32x2_t v42 = 0;
      LODWORD(v43) = 0;
LABEL_18:
      unsigned int v54 = **(unsigned char **)(a1 + 48) == 0;
      if (**(unsigned char **)(a1 + 48)) {
        float v55 = *(float *)&v43;
      }
      else {
        float v55 = v37.f32[0];
      }
      int8x8_t v69 = (int8x8_t)v36;
      pxrInternal__aapl__pxrReserved__::GfQuatd::Normalize(v74.f64, 1.0e-10);
      float64x2_t v70 = vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v54), 0x1FuLL)), v69, (int8x8_t)v42));
      *(double *)&uint64_t v71 = v55;
      double v56 = pxrInternal__aapl__pxrReserved__::GfQuatd::Transform(v74.f64, v70.f64);
      double v59 = sqrt(v58 * v58 + v56 * v56 + v57 * v57);
      double v60 = 1.0 / v59;
      BOOL v61 = v59 <= 1.0e-10;
      double v62 = 1.0e10;
      if (!v61) {
        double v62 = v60;
      }
      a4 = v56 * v62;
      *(float *)&a4 = a4;
      float v63 = v57 * v62;
      float v64 = v58 * v62;
      uint64_t v65 = **(void **)a1 + 12 * v15;
      *(_DWORD *)uint64_t v65 = LODWORD(a4);
      *(float *)(v65 + 4) = v63;
      *(float *)(v65 + 8) = v64;
      if (++v15 == a3) {
        return;
      }
    }
    LODWORD(v35) = v36.i32[1];
    uint64_t v39 = v15 * v38;
    long long v40 = (float *)(*v26 + i * v38 + 4);
    float64x2_t v41 = 0uLL;
    float32x2_t v42 = 0;
    double v43 = 0.0;
    float64x2_t v44 = 0uLL;
    while (1)
    {
      float v45 = *(v40 - 1);
      unint64_t v46 = (int)v45;
      if ((v46 & 0x80000000) != 0 || v46 >= (v27[1] - *v27) >> 5) {
        break;
      }
      float v47 = *v40;
      if (*v40 != 0.0)
      {
        if (**(unsigned char **)(a1 + 48))
        {
          uint64_t v48 = **(void **)(a1 + 56) + 36 * v46;
          float32x2_t v42 = vadd_f32(v42, vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v48, v36.f32[0]), vmul_lane_f32(*(float32x2_t *)(v48 + 12), v36, 1)), vmul_n_f32(*(float32x2_t *)(v48 + 24), v37.f32[0])), v47));
          *(float *)&double v43 = *(float *)&v43
                         + (float)(v47
                                 * (float)((float)((float)(v36.f32[0] * *(float *)(v48 + 8))
                                                 + (float)(v36.f32[1] * *(float *)(v48 + 20)))
                                         + (float)(v37.f32[0] * *(float *)(v48 + 32))));
        }
        uint64_t v49 = *v27 + 32 * v46;
        float64x2_t v50 = *(float64x2_t *)(v49 + 16);
        float64x2_t v51 = vmulq_f64(v33, *(float64x2_t *)v49);
        float64x2_t v52 = vmulq_f64(v32, v50);
        if (vaddq_f64(vaddq_f64(vaddq_f64(v51, (float64x2_t)vdupq_laneq_s64((int64x2_t)v51, 1)), v52), (float64x2_t)vdupq_laneq_s64((int64x2_t)v52, 1)).f64[0] < 0.0)float v47 = -v47; {
        double v53 = v47;
        }
        float64x2_t v41 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)v49, v53), v41);
        float64x2_t v44 = vaddq_f64(vmulq_n_f64(v50, v53), v44);
        float64x2_t v74 = v41;
        float64x2_t v75 = v44;
      }
      ++v39;
      v40 += 2;
      if (!--v38) {
        goto LABEL_18;
      }
    }
    *(void *)&v70.f64[0] = "usdSkel/utils.cpp";
    *(void *)&v70.f64[1] = "operator()";
    uint64_t v71 = 2046;
    long long v72 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsDQS(const pxrInternal__aapl__pxrRese"
          "rved__::GfMatrix3f &, TfSpan<const GfMatrix3f>, const pxrInternal__aapl__pxrReserved__::(anonymous namespace):"
          ":_InterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_IdentityPointInde"
          "xFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    char v73 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v70, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v31, v32.f64[0], v33.f64[0], *(double *)&v37, v43, v35, v41.f64[0], v44.f64[0], (int)v45, v39, (v27[1] - *v27) >> 5);
    atomic_store(1u, *(unsigned __int8 **)(a1 + 64));
  }
}

uint64_t sub_217030BC8(tbb::internal::allocate_continuation_proxy *this, double a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v3 = *((void *)this - 4);
      if (*(int *)(v3 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v3 + 8) = 1;
        unsigned int v4 = *((unsigned __int8 *)this + 52);
        if (v4 <= 1) {
          LOBYTE(v4) = 1;
        }
        *((unsigned char *)this + 52) = v4 + 1;
      }
    }
  }
  uint64_t v6 = (long long *)((char *)this + 8);
  unint64_t v5 = *((void *)this + 1);
  unint64_t v7 = *((void *)this + 2);
  unint64_t v8 = *((void *)this + 3);
  unint64_t v9 = v5 - v7;
  if (v8 < v5 - v7)
  {
    unint64_t v10 = *((void *)this + 5);
    if (v10 > 1) {
      goto LABEL_12;
    }
    if (v10 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v11 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v11[8] = 0;
        *((void *)this - 4) = v11;
        *((void *)v11 - 3) = 2;
        uint64_t v12 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v11, 0x38uLL);
        *(unsigned char *)(v12 - 11) = 1;
        *(void *)uint64_t v12 = &unk_26C770190;
        *(void *)(v12 + 8) = *((void *)this + 1);
        uint64_t v13 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v13;
        *(void *)(v12 + 16) = v13;
        *(_OWORD *)(v12 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v14 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v14;
        *(void *)(v12 + 40) = v14;
        *(_DWORD *)(v12 + 48) = 2;
        *(unsigned char *)(v12 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v12 - 40))();
        unint64_t v7 = *((void *)this + 2);
        unint64_t v8 = *((void *)this + 3);
        unint64_t v5 = *((void *)this + 1);
        unint64_t v9 = v5 - v7;
        if (v8 >= v5 - v7) {
          break;
        }
        unint64_t v15 = *((void *)this + 5);
        if (v15 <= 1)
        {
          if (!v15 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v8 < v9 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)unsigned __int8 v29 = 0x10000;
    long long v30 = *v6;
    uint64_t v31 = *((void *)this + 3);
    while (1)
    {
      *(void *)&double v16 = sub_216B17510(v29, *((unsigned __int8 *)this + 52)).n128_u64[0];
      char v17 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v17 & 1) == 0) {
        break;
      }
      unsigned __int8 v20 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v20;
      unsigned __int8 v19 = v29[2];
      if (v29[2] < 2u)
      {
        unsigned int v18 = v29[0];
        if (v29[v29[0] + 3] < v20
          && *((void *)&v30 + 3 * v29[0] + 2) < *((void *)&v30 + 3 * v29[0]) - *((void *)&v30 + 3 * v29[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v21 = v29[1];
      unsigned __int8 v22 = v29[v29[1] + 3];
      float v23 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v23 - 11) = 1;
      *(void *)float v23 = &unk_26C751420;
      __dmb(0xBu);
      v23[8] = 0;
      *((void *)this - 4) = v23;
      *((void *)v23 - 3) = 2;
      uint64_t v24 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v23, 0x38uLL);
      float v25 = (char *)&v30 + 24 * v21;
      *(unsigned char *)(v24 - 11) = 1;
      *(void *)uint64_t v24 = &unk_26C770190;
      long long v26 = *(_OWORD *)v25;
      *(void *)(v24 + 24) = *((void *)v25 + 2);
      *(_OWORD *)(v24 + 8) = v26;
      *(void *)(v24 + 32) = *((void *)this + 4);
      uint64_t v27 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v27;
      *(void *)(v24 + 40) = v27;
      *(_DWORD *)(v24 + 48) = 2;
      *(unsigned char *)(v24 + 52) = *((unsigned char *)this + 52) - v22;
      (***(void (****)(void))(v24 - 40))();
      unsigned __int8 v19 = --v29[2];
      v29[1] = (v29[1] + 1) & 7;
LABEL_27:
      if (!v19 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v18 = v29[0];
LABEL_22:
    sub_217030840(*((void *)this + 4), *((void *)&v30 + 3 * v18 + 1), *((void *)&v30 + 3 * v18), v16);
    unsigned __int8 v19 = --v29[2];
    v29[0] = (v29[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_217030840(*((void *)this + 4), v7, v5, a2);
  return 0;
}